
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  08010128  08010128  00020128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010878  08010878  0003026c  2**0
                  CONTENTS
  4 .ARM          00000008  08010878  08010878  00020878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010880  08010880  0003026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010880  08010880  00020880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010884  08010884  00020884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  08010888  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c8  2000026c  08010af4  0003026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b34  08010af4  00030b34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e85  00000000  00000000  0003029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ed  00000000  00000000  00048121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  0004b910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  0004cbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026378  00000000  00000000  0004dd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001918b  00000000  00000000  00074090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e13fe  00000000  00000000  0008d21b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e619  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006088  00000000  00000000  0016e66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000026c 	.word	0x2000026c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801010c 	.word	0x0801010c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000270 	.word	0x20000270
 800020c:	0801010c 	.word	0x0801010c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f90:	f3bf 8f4f 	dsb	sy
}
 8000f94:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <__NVIC_SystemReset+0x24>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f9e:	4904      	ldr	r1, [pc, #16]	; (8000fb0 <__NVIC_SystemReset+0x24>)
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_SystemReset+0x28>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa6:	f3bf 8f4f 	dsb	sy
}
 8000faa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <__NVIC_SystemReset+0x20>
 8000fb0:	e000ed00 	.word	0xe000ed00
 8000fb4:	05fa0004 	.word	0x05fa0004

08000fb8 <F4_Basic_Init>:
volatile uint8_t fromPC[2];
uint8_t mode;
float v_ref; //mm/s

void F4_Basic_Init(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_scheduler,TIM_HandleTypeDef *htim_motor,TIM_HandleTypeDef *htim_servo1,TIM_HandleTypeDef *htim_servo2, TIM_HandleTypeDef *htim_encoder,TIM_HandleTypeDef *htim_delay,TIM_HandleTypeDef *htim_rand)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08e      	sub	sp, #56	; 0x38
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	603b      	str	r3, [r7, #0]
	char buf[40];
	LED_R(0);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fcc:	484d      	ldr	r0, [pc, #308]	; (8001104 <F4_Basic_Init+0x14c>)
 8000fce:	f007 f91b 	bl	8008208 <HAL_GPIO_WritePin>
	LED_B(0);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd8:	484a      	ldr	r0, [pc, #296]	; (8001104 <F4_Basic_Init+0x14c>)
 8000fda:	f007 f915 	bl	8008208 <HAL_GPIO_WritePin>
	LED_G(0);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4848      	ldr	r0, [pc, #288]	; (8001104 <F4_Basic_Init+0x14c>)
 8000fe4:	f007 f910 	bl	8008208 <HAL_GPIO_WritePin>
	LED_Y(0);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fee:	4845      	ldr	r0, [pc, #276]	; (8001104 <F4_Basic_Init+0x14c>)
 8000ff0:	f007 f90a 	bl	8008208 <HAL_GPIO_WritePin>
	LED_NUCLEO(0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	4843      	ldr	r0, [pc, #268]	; (8001108 <F4_Basic_Init+0x150>)
 8000ffa:	f007 f905 	bl	8008208 <HAL_GPIO_WritePin>
	sprintf(buf,"\r\nRobonAUT 2023 Bit Bangers F4\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4942      	ldr	r1, [pc, #264]	; (800110c <F4_Basic_Init+0x154>)
 8001004:	4618      	mov	r0, r3
 8001006:	f00b fbbb 	bl	800c780 <siprintf>
	HAL_UART_Transmit(huart_debugg,(uint8_t*) buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f8fe 	bl	8000210 <strlen>
 8001014:	4603      	mov	r3, r0
 8001016:	b29a      	uxth	r2, r3
 8001018:	f107 0110 	add.w	r1, r7, #16
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f009 fe45 	bl	800acae <HAL_UART_Transmit>

	//MotorEnable engedélyezése
	motorEnRemote=0;//csak akkor ha megnyomtuk a ravaszt
 8001024:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <F4_Basic_Init+0x158>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
	motorEnLineOk=1;
 800102a:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <F4_Basic_Init+0x15c>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]

	swState[0] = SW1;
 8001030:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001034:	4834      	ldr	r0, [pc, #208]	; (8001108 <F4_Basic_Init+0x150>)
 8001036:	f007 f8cf 	bl	80081d8 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	4b36      	ldr	r3, [pc, #216]	; (8001118 <F4_Basic_Init+0x160>)
 8001040:	701a      	strb	r2, [r3, #0]
	swState[1] = SW2;
 8001042:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001046:	482f      	ldr	r0, [pc, #188]	; (8001104 <F4_Basic_Init+0x14c>)
 8001048:	f007 f8c6 	bl	80081d8 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	4b31      	ldr	r3, [pc, #196]	; (8001118 <F4_Basic_Init+0x160>)
 8001052:	705a      	strb	r2, [r3, #1]
	if(SW2)LED_R(1);
 8001054:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001058:	482a      	ldr	r0, [pc, #168]	; (8001104 <F4_Basic_Init+0x14c>)
 800105a:	f007 f8bd 	bl	80081d8 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <F4_Basic_Init+0xba>
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106a:	4826      	ldr	r0, [pc, #152]	; (8001104 <F4_Basic_Init+0x14c>)
 800106c:	f007 f8cc 	bl	8008208 <HAL_GPIO_WritePin>
 8001070:	e005      	b.n	800107e <F4_Basic_Init+0xc6>
	else LED_R(0);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001078:	4822      	ldr	r0, [pc, #136]	; (8001104 <F4_Basic_Init+0x14c>)
 800107a:	f007 f8c5 	bl	8008208 <HAL_GPIO_WritePin>

	bFlag[0] = bFlag[1] = bFlag[2] = 0;
 800107e:	2200      	movs	r2, #0
 8001080:	4b26      	ldr	r3, [pc, #152]	; (800111c <F4_Basic_Init+0x164>)
 8001082:	4611      	mov	r1, r2
 8001084:	7099      	strb	r1, [r3, #2]
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <F4_Basic_Init+0x164>)
 8001088:	4611      	mov	r1, r2
 800108a:	7059      	strb	r1, [r3, #1]
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <F4_Basic_Init+0x164>)
 800108e:	701a      	strb	r2, [r3, #0]
	fromPC[0]=150;
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <F4_Basic_Init+0x168>)
 8001092:	2296      	movs	r2, #150	; 0x96
 8001094:	701a      	strb	r2, [r3, #0]
	fromPC[1]=150;
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <F4_Basic_Init+0x168>)
 8001098:	2296      	movs	r2, #150	; 0x96
 800109a:	705a      	strb	r2, [r3, #1]
	mode=SKILL;
 800109c:	4b21      	ldr	r3, [pc, #132]	; (8001124 <F4_Basic_Init+0x16c>)
 800109e:	2252      	movs	r2, #82	; 0x52
 80010a0:	701a      	strb	r2, [r3, #0]
	v_ref = 1000;
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <F4_Basic_Init+0x170>)
 80010a4:	4a21      	ldr	r2, [pc, #132]	; (800112c <F4_Basic_Init+0x174>)
 80010a6:	601a      	str	r2, [r3, #0]
	v=0;
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <F4_Basic_Init+0x178>)
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]

	//timerek elindítása
	TIM1->CCR4=SERVO_REAR_CCR_MIDDLE;
 80010b0:	4b20      	ldr	r3, [pc, #128]	; (8001134 <F4_Basic_Init+0x17c>)
 80010b2:	f240 2272 	movw	r2, #626	; 0x272
 80010b6:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR1=SERVO_FRONT_CCR_MIDDLE;
 80010b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010bc:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
	//TIM2->CCR1=684; //servot középre
	//TIM3->CCR1=499; //0 kitöltési tényező a motorra
	//TIM3->CCR2=499;
	HAL_TIM_Base_Start(htim_scheduler);//heart beat timer tick start
 80010c2:	68b8      	ldr	r0, [r7, #8]
 80010c4:	f007 ff74 	bl	8008fb0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(htim_delay);//heart beat timer tick start
 80010c8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80010ca:	f007 ff71 	bl	8008fb0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(htim_rand);//heart beat timer tick start
 80010ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80010d0:	f007 ff6e 	bl	8008fb0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_1);//motor PWM-ek elindítása
 80010d4:	2100      	movs	r1, #0
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f008 f82c 	bl	8009134 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_2);
 80010dc:	2104      	movs	r1, #4
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f008 f828 	bl	8009134 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo1, TIM_CHANNEL_1); //servo RC pwm elindítása
 80010e4:	2100      	movs	r1, #0
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f008 f824 	bl	8009134 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo2, TIM_CHANNEL_4); //servo RC pwm elindítása
 80010ec:	210c      	movs	r1, #12
 80010ee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80010f0:	f008 f820 	bl	8009134 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(htim_encoder,TIM_CHANNEL_ALL);
 80010f4:	213c      	movs	r1, #60	; 0x3c
 80010f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010f8:	f008 fb8e 	bl	8009818 <HAL_TIM_Encoder_Start>

	//Ha a PC-ről küldünk vmit azt fogadjuk
	//HAL_UART_Receive_IT(huart_debugg, fromPC, 2);
}
 80010fc:	bf00      	nop
 80010fe:	3738      	adds	r7, #56	; 0x38
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40020400 	.word	0x40020400
 8001108:	40020000 	.word	0x40020000
 800110c:	08010128 	.word	0x08010128
 8001110:	20000ae8 	.word	0x20000ae8
 8001114:	20000ae9 	.word	0x20000ae9
 8001118:	20000288 	.word	0x20000288
 800111c:	2000028c 	.word	0x2000028c
 8001120:	20000290 	.word	0x20000290
 8001124:	20000292 	.word	0x20000292
 8001128:	20000294 	.word	0x20000294
 800112c:	447a0000 	.word	0x447a0000
 8001130:	2000060c 	.word	0x2000060c
 8001134:	40010000 	.word	0x40010000

08001138 <HDI_Read_Task>:


void HDI_Read_Task(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_servo,uint32_t tick, uint32_t period)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
	static uint32_t hdi_read_task_tick=0;

	if(hdi_read_task_tick>tick) return;
 8001146:	4b29      	ldr	r3, [pc, #164]	; (80011ec <HDI_Read_Task+0xb4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	d349      	bcc.n	80011e4 <HDI_Read_Task+0xac>
	hdi_read_task_tick = tick + period;
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	4413      	add	r3, r2
 8001156:	4a25      	ldr	r2, [pc, #148]	; (80011ec <HDI_Read_Task+0xb4>)
 8001158:	6013      	str	r3, [r2, #0]

	swState[0]=SW1;
 800115a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115e:	4824      	ldr	r0, [pc, #144]	; (80011f0 <HDI_Read_Task+0xb8>)
 8001160:	f007 f83a 	bl	80081d8 <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <HDI_Read_Task+0xbc>)
 800116a:	701a      	strb	r2, [r3, #0]
	swState[1]=SW2;
 800116c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001170:	4821      	ldr	r0, [pc, #132]	; (80011f8 <HDI_Read_Task+0xc0>)
 8001172:	f007 f831 	bl	80081d8 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <HDI_Read_Task+0xbc>)
 800117c:	705a      	strb	r2, [r3, #1]

	if(swState[0] && mode==FAST) LED_G(1);
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <HDI_Read_Task+0xbc>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d008      	beq.n	8001198 <HDI_Read_Task+0x60>
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HDI_Read_Task+0xc4>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b3f      	cmp	r3, #63	; 0x3f
 800118c:	d104      	bne.n	8001198 <HDI_Read_Task+0x60>
 800118e:	2200      	movs	r2, #0
 8001190:	2102      	movs	r1, #2
 8001192:	4819      	ldr	r0, [pc, #100]	; (80011f8 <HDI_Read_Task+0xc0>)
 8001194:	f007 f838 	bl	8008208 <HAL_GPIO_WritePin>
	if(!swState[0] && mode==FAST) LED_G(0);
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HDI_Read_Task+0xbc>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d108      	bne.n	80011b2 <HDI_Read_Task+0x7a>
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HDI_Read_Task+0xc4>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b3f      	cmp	r3, #63	; 0x3f
 80011a6:	d104      	bne.n	80011b2 <HDI_Read_Task+0x7a>
 80011a8:	2201      	movs	r2, #1
 80011aa:	2102      	movs	r1, #2
 80011ac:	4812      	ldr	r0, [pc, #72]	; (80011f8 <HDI_Read_Task+0xc0>)
 80011ae:	f007 f82b 	bl	8008208 <HAL_GPIO_WritePin>
	if(swState[1]) LED_R(1);
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HDI_Read_Task+0xbc>)
 80011b4:	785b      	ldrb	r3, [r3, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <HDI_Read_Task+0x8e>
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <HDI_Read_Task+0xc0>)
 80011c2:	f007 f821 	bl	8008208 <HAL_GPIO_WritePin>
	if(!swState[1]) LED_R(0);
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HDI_Read_Task+0xbc>)
 80011c8:	785b      	ldrb	r3, [r3, #1]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d105      	bne.n	80011da <HDI_Read_Task+0xa2>
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d4:	4808      	ldr	r0, [pc, #32]	; (80011f8 <HDI_Read_Task+0xc0>)
 80011d6:	f007 f817 	bl	8008208 <HAL_GPIO_WritePin>

	if(bFlag[0]);
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HDI_Read_Task+0xc8>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
	if(bFlag[1]);
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HDI_Read_Task+0xc8>)
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	e000      	b.n	80011e6 <HDI_Read_Task+0xae>
	if(hdi_read_task_tick>tick) return;
 80011e4:	bf00      	nop

}
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000298 	.word	0x20000298
 80011f0:	40020000 	.word	0x40020000
 80011f4:	20000288 	.word	0x20000288
 80011f8:	40020400 	.word	0x40020400
 80011fc:	20000292 	.word	0x20000292
 8001200:	2000028c 	.word	0x2000028c

08001204 <Uart_Receive_From_PC_ISR>:

void Uart_Receive_From_PC_ISR(UART_HandleTypeDef *huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	LED_Y_TOGGLE;
 800120c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <Uart_Receive_From_PC_ISR+0x40>)
 8001212:	f007 f812 	bl	800823a <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(huart, (uint8_t*)fromPC, 2);
 8001216:	2202      	movs	r2, #2
 8001218:	490b      	ldr	r1, [pc, #44]	; (8001248 <Uart_Receive_From_PC_ISR+0x44>)
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f009 fe7b 	bl	800af16 <HAL_UART_Receive_IT>
	TIM2->CCR1 = 4*fromPC[0];
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <Uart_Receive_From_PC_ISR+0x44>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	009a      	lsls	r2, r3, #2
 8001228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800122c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR4 = 4*fromPC[1];
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <Uart_Receive_From_PC_ISR+0x44>)
 8001230:	785b      	ldrb	r3, [r3, #1]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	009a      	lsls	r2, r3, #2
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <Uart_Receive_From_PC_ISR+0x48>)
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40020400 	.word	0x40020400
 8001248:	20000290 	.word	0x20000290
 800124c:	40010000 	.word	0x40010000

08001250 <B1_ISR>:

void B1_ISR(UART_HandleTypeDef *huart_debugg)
{
 8001250:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
		HAL_FLASH_Unlock();
 800125a:	f006 fc6f 	bl	8007b3c <HAL_FLASH_Unlock>
		Delay(50);
 800125e:	2032      	movs	r0, #50	; 0x32
 8001260:	f004 fae4 	bl	800582c <Delay>
		FLASH_Erase_Sector(6, FLASH_VOLTAGE_RANGE_3);
 8001264:	2102      	movs	r1, #2
 8001266:	2006      	movs	r0, #6
 8001268:	f006 fdda 	bl	8007e20 <FLASH_Erase_Sector>
		Delay(50);
 800126c:	2032      	movs	r0, #50	; 0x32
 800126e:	f004 fadd 	bl	800582c <Delay>
		HAL_FLASH_Lock();
 8001272:	f006 fc85 	bl	8007b80 <HAL_FLASH_Lock>

		int i;
		for(i=0;i<8;i++)
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e00a      	b.n	8001292 <B1_ISR+0x42>
		{
			LED_R_TOGGLE;
 800127c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001280:	4826      	ldr	r0, [pc, #152]	; (800131c <B1_ISR+0xcc>)
 8001282:	f006 ffda 	bl	800823a <HAL_GPIO_TogglePin>
			Delay(150);
 8001286:	2096      	movs	r0, #150	; 0x96
 8001288:	f004 fad0 	bl	800582c <Delay>
		for(i=0;i<8;i++)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3301      	adds	r3, #1
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b07      	cmp	r3, #7
 8001296:	ddf1      	ble.n	800127c <B1_ISR+0x2c>
		}
		LED_R(0);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129e:	481f      	ldr	r0, [pc, #124]	; (800131c <B1_ISR+0xcc>)
 80012a0:	f006 ffb2 	bl	8008208 <HAL_GPIO_WritePin>

		HAL_FLASH_Unlock();
 80012a4:	f006 fc4a 	bl	8007b3c <HAL_FLASH_Unlock>
		Delay(50);
 80012a8:	2032      	movs	r0, #50	; 0x32
 80012aa:	f004 fabf 	bl	800582c <Delay>
		for(i=0;i<25;i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	e016      	b.n	80012e2 <B1_ISR+0x92>
		{
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+i, Nodes[i].worth);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80012ba:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80012be:	4619      	mov	r1, r3
 80012c0:	4a17      	ldr	r2, [pc, #92]	; (8001320 <B1_ISR+0xd0>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	015b      	lsls	r3, r3, #5
 80012c6:	4413      	add	r3, r2
 80012c8:	3304      	adds	r3, #4
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	17da      	asrs	r2, r3, #31
 80012ce:	4698      	mov	r8, r3
 80012d0:	4691      	mov	r9, r2
 80012d2:	4642      	mov	r2, r8
 80012d4:	464b      	mov	r3, r9
 80012d6:	2000      	movs	r0, #0
 80012d8:	f006 fbdc 	bl	8007a94 <HAL_FLASH_Program>
		for(i=0;i<25;i++)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b18      	cmp	r3, #24
 80012e6:	dde5      	ble.n	80012b4 <B1_ISR+0x64>
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+25, collectedPoints);
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <B1_ISR+0xd4>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2200      	movs	r2, #0
 80012f0:	461c      	mov	r4, r3
 80012f2:	4615      	mov	r5, r2
 80012f4:	4622      	mov	r2, r4
 80012f6:	462b      	mov	r3, r5
 80012f8:	490b      	ldr	r1, [pc, #44]	; (8001328 <B1_ISR+0xd8>)
 80012fa:	2000      	movs	r0, #0
 80012fc:	f006 fbca 	bl	8007a94 <HAL_FLASH_Program>
		Delay(50);
 8001300:	2032      	movs	r0, #50	; 0x32
 8001302:	f004 fa93 	bl	800582c <Delay>
		HAL_FLASH_Lock();
 8001306:	f006 fc3b 	bl	8007b80 <HAL_FLASH_Lock>
		HAL_UART_Transmit(huart_debugg,(uint8_t*) "\n\rBackup save!\n\r", 16, 10);
 800130a:	230a      	movs	r3, #10
 800130c:	2210      	movs	r2, #16
 800130e:	4907      	ldr	r1, [pc, #28]	; (800132c <B1_ISR+0xdc>)
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f009 fccc 	bl	800acae <HAL_UART_Transmit>
		NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 8001316:	f7ff fe39 	bl	8000f8c <__NVIC_SystemReset>
 800131a:	bf00      	nop
 800131c:	40020400 	.word	0x40020400
 8001320:	200002b0 	.word	0x200002b0
 8001324:	2000029f 	.word	0x2000029f
 8001328:	08040019 	.word	0x08040019
 800132c:	0801014c 	.word	0x0801014c

08001330 <B_NUCLEO_ISR>:
}

void B_NUCLEO_ISR(UART_HandleTypeDef *huart_debugg)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	//Milyen módban voltunk eddig?
	uint8_t tmp= *(__IO uint8_t *) FLASH_ADDRESS_MODESELECTOR;
 8001338:	4b41      	ldr	r3, [pc, #260]	; (8001440 <B_NUCLEO_ISR+0x110>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	72fb      	strb	r3, [r7, #11]
	if(tmp==SKILL || tmp==FAST)mode=tmp;
 800133e:	7afb      	ldrb	r3, [r7, #11]
 8001340:	2b52      	cmp	r3, #82	; 0x52
 8001342:	d002      	beq.n	800134a <B_NUCLEO_ISR+0x1a>
 8001344:	7afb      	ldrb	r3, [r7, #11]
 8001346:	2b3f      	cmp	r3, #63	; 0x3f
 8001348:	d103      	bne.n	8001352 <B_NUCLEO_ISR+0x22>
 800134a:	4a3e      	ldr	r2, [pc, #248]	; (8001444 <B_NUCLEO_ISR+0x114>)
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	7013      	strb	r3, [r2, #0]
 8001350:	e002      	b.n	8001358 <B_NUCLEO_ISR+0x28>
	else mode=SKILL;
 8001352:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <B_NUCLEO_ISR+0x114>)
 8001354:	2252      	movs	r2, #82	; 0x52
 8001356:	701a      	strb	r2, [r3, #0]

	//section 7 törlése, hogy újraírhassuk a módot jelző bytot
	HAL_FLASH_Unlock();
 8001358:	f006 fbf0 	bl	8007b3c <HAL_FLASH_Unlock>
	Delay(50);
 800135c:	2032      	movs	r0, #50	; 0x32
 800135e:	f004 fa65 	bl	800582c <Delay>
	FLASH_Erase_Sector(7, FLASH_VOLTAGE_RANGE_3);
 8001362:	2102      	movs	r1, #2
 8001364:	2007      	movs	r0, #7
 8001366:	f006 fd5b 	bl	8007e20 <FLASH_Erase_Sector>
	Delay(50);
 800136a:	2032      	movs	r0, #50	; 0x32
 800136c:	f004 fa5e 	bl	800582c <Delay>
	HAL_FLASH_Lock();
 8001370:	f006 fc06 	bl	8007b80 <HAL_FLASH_Lock>

	LED_NUCLEO(0);
 8001374:	2200      	movs	r2, #0
 8001376:	2120      	movs	r1, #32
 8001378:	4833      	ldr	r0, [pc, #204]	; (8001448 <B_NUCLEO_ISR+0x118>)
 800137a:	f006 ff45 	bl	8008208 <HAL_GPIO_WritePin>
	LED_Y(0);
 800137e:	2201      	movs	r2, #1
 8001380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001384:	4831      	ldr	r0, [pc, #196]	; (800144c <B_NUCLEO_ISR+0x11c>)
 8001386:	f006 ff3f 	bl	8008208 <HAL_GPIO_WritePin>
	LED_G(0);
 800138a:	2201      	movs	r2, #1
 800138c:	2102      	movs	r1, #2
 800138e:	482f      	ldr	r0, [pc, #188]	; (800144c <B_NUCLEO_ISR+0x11c>)
 8001390:	f006 ff3a 	bl	8008208 <HAL_GPIO_WritePin>
	LED_B(0);
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800139a:	482c      	ldr	r0, [pc, #176]	; (800144c <B_NUCLEO_ISR+0x11c>)
 800139c:	f006 ff34 	bl	8008208 <HAL_GPIO_WritePin>
	LED_R(0);
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a6:	4829      	ldr	r0, [pc, #164]	; (800144c <B_NUCLEO_ISR+0x11c>)
 80013a8:	f006 ff2e 	bl	8008208 <HAL_GPIO_WritePin>
	int i;
	for(i=0;i<8;i++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	e01c      	b.n	80013ec <B_NUCLEO_ISR+0xbc>
	{
		LED_NUCLEO_TOGGLE;
 80013b2:	2120      	movs	r1, #32
 80013b4:	4824      	ldr	r0, [pc, #144]	; (8001448 <B_NUCLEO_ISR+0x118>)
 80013b6:	f006 ff40 	bl	800823a <HAL_GPIO_TogglePin>
		LED_Y_TOGGLE;
 80013ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013be:	4823      	ldr	r0, [pc, #140]	; (800144c <B_NUCLEO_ISR+0x11c>)
 80013c0:	f006 ff3b 	bl	800823a <HAL_GPIO_TogglePin>
		LED_G_TOGGLE;
 80013c4:	2102      	movs	r1, #2
 80013c6:	4821      	ldr	r0, [pc, #132]	; (800144c <B_NUCLEO_ISR+0x11c>)
 80013c8:	f006 ff37 	bl	800823a <HAL_GPIO_TogglePin>
		LED_B_TOGGLE;
 80013cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013d0:	481e      	ldr	r0, [pc, #120]	; (800144c <B_NUCLEO_ISR+0x11c>)
 80013d2:	f006 ff32 	bl	800823a <HAL_GPIO_TogglePin>
		LED_R_TOGGLE;
 80013d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013da:	481c      	ldr	r0, [pc, #112]	; (800144c <B_NUCLEO_ISR+0x11c>)
 80013dc:	f006 ff2d 	bl	800823a <HAL_GPIO_TogglePin>
		Delay(150);
 80013e0:	2096      	movs	r0, #150	; 0x96
 80013e2:	f004 fa23 	bl	800582c <Delay>
	for(i=0;i<8;i++)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3301      	adds	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	dddf      	ble.n	80013b2 <B_NUCLEO_ISR+0x82>
	}

	//Állítsuk át a módot
	HAL_FLASH_Unlock();
 80013f2:	f006 fba3 	bl	8007b3c <HAL_FLASH_Unlock>
	Delay(50);
 80013f6:	2032      	movs	r0, #50	; 0x32
 80013f8:	f004 fa18 	bl	800582c <Delay>
	if(mode==SKILL) HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, FAST); //ha eddig skill mód volt akor msot gyors lesz
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <B_NUCLEO_ISR+0x114>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b52      	cmp	r3, #82	; 0x52
 8001402:	d108      	bne.n	8001416 <B_NUCLEO_ISR+0xe6>
 8001404:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <B_NUCLEO_ISR+0x110>)
 800140e:	2000      	movs	r0, #0
 8001410:	f006 fb40 	bl	8007a94 <HAL_FLASH_Program>
 8001414:	e007      	b.n	8001426 <B_NUCLEO_ISR+0xf6>
	else HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, SKILL); //ha eddig gyors mód vagy memóriaszemét volt akkor msot skil lesz
 8001416:	f04f 0252 	mov.w	r2, #82	; 0x52
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <B_NUCLEO_ISR+0x110>)
 8001420:	2000      	movs	r0, #0
 8001422:	f006 fb37 	bl	8007a94 <HAL_FLASH_Program>
	Delay(50);
 8001426:	2032      	movs	r0, #50	; 0x32
 8001428:	f004 fa00 	bl	800582c <Delay>
	HAL_FLASH_Lock();
 800142c:	f006 fba8 	bl	8007b80 <HAL_FLASH_Lock>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\rMode change!\n\r", 16, 10);
 8001430:	230a      	movs	r3, #10
 8001432:	2210      	movs	r2, #16
 8001434:	4906      	ldr	r1, [pc, #24]	; (8001450 <B_NUCLEO_ISR+0x120>)
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f009 fc39 	bl	800acae <HAL_UART_Transmit>
	NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 800143c:	f7ff fda6 	bl	8000f8c <__NVIC_SystemReset>
 8001440:	08060000 	.word	0x08060000
 8001444:	20000292 	.word	0x20000292
 8001448:	40020000 	.word	0x40020000
 800144c:	40020400 	.word	0x40020400
 8001450:	08010160 	.word	0x08010160

08001454 <Create_Nodes>:
uint8_t piratePos[4];

node Nodes[25];

void Create_Nodes(UART_HandleTypeDef *huart_debugg)
{
 8001454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001458:	b09c      	sub	sp, #112	; 0x70
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	int i;
	orientation=FORWARD;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <Create_Nodes+0x38>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
	nodeDetected=1;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <Create_Nodes+0x3c>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
	collectedPoints=0;
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <Create_Nodes+0x40>)
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
	laneChange=0;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <Create_Nodes+0x44>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
	v_control=NORMAL_VEL;
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <Create_Nodes+0x48>)
 8001478:	2202      	movs	r2, #2
 800147a:	701a      	strb	r2, [r3, #0]

	if(mode!=SKILL)return;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <Create_Nodes+0x4c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b52      	cmp	r3, #82	; 0x52
 8001482:	f040 873a 	bne.w	80022fa <Create_Nodes+0xea6>

	for(i=0;i<25;i++)
 8001486:	2300      	movs	r3, #0
 8001488:	66fb      	str	r3, [r7, #108]	; 0x6c
 800148a:	e07a      	b.n	8001582 <Create_Nodes+0x12e>
 800148c:	2000029c 	.word	0x2000029c
 8001490:	2000029d 	.word	0x2000029d
 8001494:	2000029f 	.word	0x2000029f
 8001498:	200002a0 	.word	0x200002a0
 800149c:	200002a1 	.word	0x200002a1
 80014a0:	20000292 	.word	0x20000292
	{
		Nodes[i].id=65+i;
 80014a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	3341      	adds	r3, #65	; 0x41
 80014aa:	b2d9      	uxtb	r1, r3
 80014ac:	4abc      	ldr	r2, [pc, #752]	; (80017a0 <Create_Nodes+0x34c>)
 80014ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014b0:	015b      	lsls	r3, r3, #5
 80014b2:	4413      	add	r3, r2
 80014b4:	460a      	mov	r2, r1
 80014b6:	701a      	strb	r2, [r3, #0]
		Nodes[i].worth=0;
 80014b8:	4ab9      	ldr	r2, [pc, #740]	; (80017a0 <Create_Nodes+0x34c>)
 80014ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014bc:	015b      	lsls	r3, r3, #5
 80014be:	4413      	add	r3, r2
 80014c0:	3304      	adds	r3, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
		Nodes[i].type=0;
 80014c6:	4ab6      	ldr	r2, [pc, #728]	; (80017a0 <Create_Nodes+0x34c>)
 80014c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014ca:	015b      	lsls	r3, r3, #5
 80014cc:	4413      	add	r3, r2
 80014ce:	3308      	adds	r3, #8
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
		VALUE(Nodes[i].neighbours,0,0,0,0);
 80014d4:	4ab2      	ldr	r2, [pc, #712]	; (80017a0 <Create_Nodes+0x34c>)
 80014d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014d8:	015b      	lsls	r3, r3, #5
 80014da:	4413      	add	r3, r2
 80014dc:	330c      	adds	r3, #12
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	4aaf      	ldr	r2, [pc, #700]	; (80017a0 <Create_Nodes+0x34c>)
 80014e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014e6:	015b      	lsls	r3, r3, #5
 80014e8:	4413      	add	r3, r2
 80014ea:	330d      	adds	r3, #13
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
 80014f0:	4aab      	ldr	r2, [pc, #684]	; (80017a0 <Create_Nodes+0x34c>)
 80014f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014f4:	015b      	lsls	r3, r3, #5
 80014f6:	4413      	add	r3, r2
 80014f8:	330e      	adds	r3, #14
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	4aa8      	ldr	r2, [pc, #672]	; (80017a0 <Create_Nodes+0x34c>)
 8001500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001502:	015b      	lsls	r3, r3, #5
 8001504:	4413      	add	r3, r2
 8001506:	330f      	adds	r3, #15
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
		VALUE(Nodes[i].directions,0,0,0,0);
 800150c:	4aa4      	ldr	r2, [pc, #656]	; (80017a0 <Create_Nodes+0x34c>)
 800150e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001510:	015b      	lsls	r3, r3, #5
 8001512:	4413      	add	r3, r2
 8001514:	3310      	adds	r3, #16
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	4aa1      	ldr	r2, [pc, #644]	; (80017a0 <Create_Nodes+0x34c>)
 800151c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800151e:	015b      	lsls	r3, r3, #5
 8001520:	4413      	add	r3, r2
 8001522:	3311      	adds	r3, #17
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
 8001528:	4a9d      	ldr	r2, [pc, #628]	; (80017a0 <Create_Nodes+0x34c>)
 800152a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800152c:	015b      	lsls	r3, r3, #5
 800152e:	4413      	add	r3, r2
 8001530:	3312      	adds	r3, #18
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	4a9a      	ldr	r2, [pc, #616]	; (80017a0 <Create_Nodes+0x34c>)
 8001538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800153a:	015b      	lsls	r3, r3, #5
 800153c:	4413      	add	r3, r2
 800153e:	3313      	adds	r3, #19
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
		VALUE(Nodes[i].distance,0,0,0,0);
 8001544:	4a96      	ldr	r2, [pc, #600]	; (80017a0 <Create_Nodes+0x34c>)
 8001546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001548:	015b      	lsls	r3, r3, #5
 800154a:	4413      	add	r3, r2
 800154c:	3314      	adds	r3, #20
 800154e:	2200      	movs	r2, #0
 8001550:	801a      	strh	r2, [r3, #0]
 8001552:	4a93      	ldr	r2, [pc, #588]	; (80017a0 <Create_Nodes+0x34c>)
 8001554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001556:	015b      	lsls	r3, r3, #5
 8001558:	4413      	add	r3, r2
 800155a:	3316      	adds	r3, #22
 800155c:	2200      	movs	r2, #0
 800155e:	801a      	strh	r2, [r3, #0]
 8001560:	4a8f      	ldr	r2, [pc, #572]	; (80017a0 <Create_Nodes+0x34c>)
 8001562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001564:	015b      	lsls	r3, r3, #5
 8001566:	4413      	add	r3, r2
 8001568:	3318      	adds	r3, #24
 800156a:	2200      	movs	r2, #0
 800156c:	801a      	strh	r2, [r3, #0]
 800156e:	4a8c      	ldr	r2, [pc, #560]	; (80017a0 <Create_Nodes+0x34c>)
 8001570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001572:	015b      	lsls	r3, r3, #5
 8001574:	4413      	add	r3, r2
 8001576:	331a      	adds	r3, #26
 8001578:	2200      	movs	r2, #0
 800157a:	801a      	strh	r2, [r3, #0]
	for(i=0;i<25;i++)
 800157c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800157e:	3301      	adds	r3, #1
 8001580:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001584:	2b18      	cmp	r3, #24
 8001586:	dd8d      	ble.n	80014a4 <Create_Nodes+0x50>
	}
	//A node
	N('A').worth=0;
 8001588:	4b85      	ldr	r3, [pc, #532]	; (80017a0 <Create_Nodes+0x34c>)
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
	N('A').type=1;
 800158e:	4b84      	ldr	r3, [pc, #528]	; (80017a0 <Create_Nodes+0x34c>)
 8001590:	2201      	movs	r2, #1
 8001592:	609a      	str	r2, [r3, #8]
	VALUE(N('A').neighbours,0,0,0,'C');
 8001594:	4b82      	ldr	r3, [pc, #520]	; (80017a0 <Create_Nodes+0x34c>)
 8001596:	2200      	movs	r2, #0
 8001598:	731a      	strb	r2, [r3, #12]
 800159a:	4b81      	ldr	r3, [pc, #516]	; (80017a0 <Create_Nodes+0x34c>)
 800159c:	2200      	movs	r2, #0
 800159e:	735a      	strb	r2, [r3, #13]
 80015a0:	4b7f      	ldr	r3, [pc, #508]	; (80017a0 <Create_Nodes+0x34c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	739a      	strb	r2, [r3, #14]
 80015a6:	4b7e      	ldr	r3, [pc, #504]	; (80017a0 <Create_Nodes+0x34c>)
 80015a8:	2243      	movs	r2, #67	; 0x43
 80015aa:	73da      	strb	r2, [r3, #15]
	VALUE(N('A').directions,0,0,0,2);
 80015ac:	4b7c      	ldr	r3, [pc, #496]	; (80017a0 <Create_Nodes+0x34c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	741a      	strb	r2, [r3, #16]
 80015b2:	4b7b      	ldr	r3, [pc, #492]	; (80017a0 <Create_Nodes+0x34c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	745a      	strb	r2, [r3, #17]
 80015b8:	4b79      	ldr	r3, [pc, #484]	; (80017a0 <Create_Nodes+0x34c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	749a      	strb	r2, [r3, #18]
 80015be:	4b78      	ldr	r3, [pc, #480]	; (80017a0 <Create_Nodes+0x34c>)
 80015c0:	2202      	movs	r2, #2
 80015c2:	74da      	strb	r2, [r3, #19]
	VALUE(N('A').distance,0,0,0,365);
 80015c4:	4b76      	ldr	r3, [pc, #472]	; (80017a0 <Create_Nodes+0x34c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	829a      	strh	r2, [r3, #20]
 80015ca:	4b75      	ldr	r3, [pc, #468]	; (80017a0 <Create_Nodes+0x34c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	82da      	strh	r2, [r3, #22]
 80015d0:	4b73      	ldr	r3, [pc, #460]	; (80017a0 <Create_Nodes+0x34c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	831a      	strh	r2, [r3, #24]
 80015d6:	4b72      	ldr	r3, [pc, #456]	; (80017a0 <Create_Nodes+0x34c>)
 80015d8:	f240 126d 	movw	r2, #365	; 0x16d
 80015dc:	835a      	strh	r2, [r3, #26]
	N('A').middle=NEIGHBOUR4;
 80015de:	4b70      	ldr	r3, [pc, #448]	; (80017a0 <Create_Nodes+0x34c>)
 80015e0:	2203      	movs	r2, #3
 80015e2:	771a      	strb	r2, [r3, #28]

	//B node
	N('B').worth=2;
 80015e4:	4b6e      	ldr	r3, [pc, #440]	; (80017a0 <Create_Nodes+0x34c>)
 80015e6:	2202      	movs	r2, #2
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
	N('B').type=2;
 80015ea:	4b6d      	ldr	r3, [pc, #436]	; (80017a0 <Create_Nodes+0x34c>)
 80015ec:	2202      	movs	r2, #2
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
	VALUE(N('B').neighbours,'D',0,'C',0);
 80015f0:	4b6b      	ldr	r3, [pc, #428]	; (80017a0 <Create_Nodes+0x34c>)
 80015f2:	2244      	movs	r2, #68	; 0x44
 80015f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80015f8:	4b69      	ldr	r3, [pc, #420]	; (80017a0 <Create_Nodes+0x34c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001600:	4b67      	ldr	r3, [pc, #412]	; (80017a0 <Create_Nodes+0x34c>)
 8001602:	2243      	movs	r2, #67	; 0x43
 8001604:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8001608:	4b65      	ldr	r3, [pc, #404]	; (80017a0 <Create_Nodes+0x34c>)
 800160a:	2200      	movs	r2, #0
 800160c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	VALUE(N('B').directions,2,0,2,0);
 8001610:	4b63      	ldr	r3, [pc, #396]	; (80017a0 <Create_Nodes+0x34c>)
 8001612:	2202      	movs	r2, #2
 8001614:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001618:	4b61      	ldr	r3, [pc, #388]	; (80017a0 <Create_Nodes+0x34c>)
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8001620:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <Create_Nodes+0x34c>)
 8001622:	2202      	movs	r2, #2
 8001624:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001628:	4b5d      	ldr	r3, [pc, #372]	; (80017a0 <Create_Nodes+0x34c>)
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	VALUE(N('B').distance,452,0,218,0);
 8001630:	4b5b      	ldr	r3, [pc, #364]	; (80017a0 <Create_Nodes+0x34c>)
 8001632:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8001636:	869a      	strh	r2, [r3, #52]	; 0x34
 8001638:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <Create_Nodes+0x34c>)
 800163a:	2200      	movs	r2, #0
 800163c:	86da      	strh	r2, [r3, #54]	; 0x36
 800163e:	4b58      	ldr	r3, [pc, #352]	; (80017a0 <Create_Nodes+0x34c>)
 8001640:	22da      	movs	r2, #218	; 0xda
 8001642:	871a      	strh	r2, [r3, #56]	; 0x38
 8001644:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <Create_Nodes+0x34c>)
 8001646:	2200      	movs	r2, #0
 8001648:	875a      	strh	r2, [r3, #58]	; 0x3a
	N('B').middle=NEIGHBOUR3;
 800164a:	4b55      	ldr	r3, [pc, #340]	; (80017a0 <Create_Nodes+0x34c>)
 800164c:	2202      	movs	r2, #2
 800164e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	//C node
	N('C').worth=0; //beragadás ellen
 8001652:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <Create_Nodes+0x34c>)
 8001654:	2200      	movs	r2, #0
 8001656:	645a      	str	r2, [r3, #68]	; 0x44
	N('C').type=3;
 8001658:	4b51      	ldr	r3, [pc, #324]	; (80017a0 <Create_Nodes+0x34c>)
 800165a:	2203      	movs	r2, #3
 800165c:	649a      	str	r2, [r3, #72]	; 0x48
	VALUE(N('C').neighbours,0,'B','E',0);
 800165e:	4b50      	ldr	r3, [pc, #320]	; (80017a0 <Create_Nodes+0x34c>)
 8001660:	2200      	movs	r2, #0
 8001662:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001666:	4b4e      	ldr	r3, [pc, #312]	; (80017a0 <Create_Nodes+0x34c>)
 8001668:	2242      	movs	r2, #66	; 0x42
 800166a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800166e:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <Create_Nodes+0x34c>)
 8001670:	2245      	movs	r2, #69	; 0x45
 8001672:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8001676:	4b4a      	ldr	r3, [pc, #296]	; (80017a0 <Create_Nodes+0x34c>)
 8001678:	2200      	movs	r2, #0
 800167a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	VALUE(N('C').directions,0,1,2,0);
 800167e:	4b48      	ldr	r3, [pc, #288]	; (80017a0 <Create_Nodes+0x34c>)
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001686:	4b46      	ldr	r3, [pc, #280]	; (80017a0 <Create_Nodes+0x34c>)
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800168e:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <Create_Nodes+0x34c>)
 8001690:	2202      	movs	r2, #2
 8001692:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8001696:	4b42      	ldr	r3, [pc, #264]	; (80017a0 <Create_Nodes+0x34c>)
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	VALUE(N('C').distance,0,218,160-25,0);
 800169e:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <Create_Nodes+0x34c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80016a6:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <Create_Nodes+0x34c>)
 80016a8:	22da      	movs	r2, #218	; 0xda
 80016aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80016ae:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <Create_Nodes+0x34c>)
 80016b0:	2287      	movs	r2, #135	; 0x87
 80016b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80016b6:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <Create_Nodes+0x34c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	N('C').middle=NEIGHBOUR3;
 80016be:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <Create_Nodes+0x34c>)
 80016c0:	2202      	movs	r2, #2
 80016c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	//D node
	N('D').worth=2;
 80016c6:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <Create_Nodes+0x34c>)
 80016c8:	2202      	movs	r2, #2
 80016ca:	665a      	str	r2, [r3, #100]	; 0x64
	N('D').type=1;
 80016cc:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <Create_Nodes+0x34c>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	669a      	str	r2, [r3, #104]	; 0x68
	VALUE(N('D').neighbours,'B',0,'F',0);
 80016d2:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <Create_Nodes+0x34c>)
 80016d4:	2242      	movs	r2, #66	; 0x42
 80016d6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <Create_Nodes+0x34c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 80016e2:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <Create_Nodes+0x34c>)
 80016e4:	2246      	movs	r2, #70	; 0x46
 80016e6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 80016ea:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <Create_Nodes+0x34c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	VALUE(N('D').directions,2,0,2,0);
 80016f2:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <Create_Nodes+0x34c>)
 80016f4:	2202      	movs	r2, #2
 80016f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <Create_Nodes+0x34c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <Create_Nodes+0x34c>)
 8001704:	2202      	movs	r2, #2
 8001706:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 800170a:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <Create_Nodes+0x34c>)
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	VALUE(N('D').distance,452,0,316,0);
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <Create_Nodes+0x34c>)
 8001714:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8001718:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 800171c:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <Create_Nodes+0x34c>)
 800171e:	2200      	movs	r2, #0
 8001720:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <Create_Nodes+0x34c>)
 8001726:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800172a:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <Create_Nodes+0x34c>)
 8001730:	2200      	movs	r2, #0
 8001732:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	N('D').middle=NEIGHBOUR3;
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <Create_Nodes+0x34c>)
 8001738:	2202      	movs	r2, #2
 800173a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

	//E node
	N('E').worth=0; //beragadás ellen
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <Create_Nodes+0x34c>)
 8001740:	2200      	movs	r2, #0
 8001742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	N('E').type=3;
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <Create_Nodes+0x34c>)
 8001748:	2203      	movs	r2, #3
 800174a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	VALUE(N('E').neighbours,'C',0,'F','G');
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <Create_Nodes+0x34c>)
 8001750:	2243      	movs	r2, #67	; 0x43
 8001752:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <Create_Nodes+0x34c>)
 8001758:	2200      	movs	r2, #0
 800175a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <Create_Nodes+0x34c>)
 8001760:	2246      	movs	r2, #70	; 0x46
 8001762:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <Create_Nodes+0x34c>)
 8001768:	2247      	movs	r2, #71	; 0x47
 800176a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	VALUE(N('E').directions,1,0,2,2);
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <Create_Nodes+0x34c>)
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <Create_Nodes+0x34c>)
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <Create_Nodes+0x34c>)
 8001780:	2202      	movs	r2, #2
 8001782:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <Create_Nodes+0x34c>)
 8001788:	2202      	movs	r2, #2
 800178a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	VALUE(N('E').distance,160-25,0,428,385);
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <Create_Nodes+0x34c>)
 8001790:	2287      	movs	r2, #135	; 0x87
 8001792:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8001796:	4b02      	ldr	r3, [pc, #8]	; (80017a0 <Create_Nodes+0x34c>)
 8001798:	2200      	movs	r2, #0
 800179a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 800179e:	e001      	b.n	80017a4 <Create_Nodes+0x350>
 80017a0:	200002b0 	.word	0x200002b0
 80017a4:	4bcd      	ldr	r3, [pc, #820]	; (8001adc <Create_Nodes+0x688>)
 80017a6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80017aa:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 80017ae:	4bcb      	ldr	r3, [pc, #812]	; (8001adc <Create_Nodes+0x688>)
 80017b0:	f240 1281 	movw	r2, #385	; 0x181
 80017b4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	N('E').middle=NEIGHBOUR4;
 80017b8:	4bc8      	ldr	r3, [pc, #800]	; (8001adc <Create_Nodes+0x688>)
 80017ba:	2203      	movs	r2, #3
 80017bc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

	//F node
	N('F').worth=2;
 80017c0:	4bc6      	ldr	r3, [pc, #792]	; (8001adc <Create_Nodes+0x688>)
 80017c2:	2202      	movs	r2, #2
 80017c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	N('F').type=1;
 80017c8:	4bc4      	ldr	r3, [pc, #784]	; (8001adc <Create_Nodes+0x688>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	VALUE(N('F').neighbours,'E','D','H','I');
 80017d0:	4bc2      	ldr	r3, [pc, #776]	; (8001adc <Create_Nodes+0x688>)
 80017d2:	2245      	movs	r2, #69	; 0x45
 80017d4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 80017d8:	4bc0      	ldr	r3, [pc, #768]	; (8001adc <Create_Nodes+0x688>)
 80017da:	2244      	movs	r2, #68	; 0x44
 80017dc:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 80017e0:	4bbe      	ldr	r3, [pc, #760]	; (8001adc <Create_Nodes+0x688>)
 80017e2:	2248      	movs	r2, #72	; 0x48
 80017e4:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 80017e8:	4bbc      	ldr	r3, [pc, #752]	; (8001adc <Create_Nodes+0x688>)
 80017ea:	2249      	movs	r2, #73	; 0x49
 80017ec:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	VALUE(N('F').directions,1,1,2,2);
 80017f0:	4bba      	ldr	r3, [pc, #744]	; (8001adc <Create_Nodes+0x688>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80017f8:	4bb8      	ldr	r3, [pc, #736]	; (8001adc <Create_Nodes+0x688>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8001800:	4bb6      	ldr	r3, [pc, #728]	; (8001adc <Create_Nodes+0x688>)
 8001802:	2202      	movs	r2, #2
 8001804:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8001808:	4bb4      	ldr	r3, [pc, #720]	; (8001adc <Create_Nodes+0x688>)
 800180a:	2202      	movs	r2, #2
 800180c:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	VALUE(N('F').distance,428,316,284,335);
 8001810:	4bb2      	ldr	r3, [pc, #712]	; (8001adc <Create_Nodes+0x688>)
 8001812:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8001816:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 800181a:	4bb0      	ldr	r3, [pc, #704]	; (8001adc <Create_Nodes+0x688>)
 800181c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8001820:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8001824:	4bad      	ldr	r3, [pc, #692]	; (8001adc <Create_Nodes+0x688>)
 8001826:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800182a:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 800182e:	4bab      	ldr	r3, [pc, #684]	; (8001adc <Create_Nodes+0x688>)
 8001830:	f240 124f 	movw	r2, #335	; 0x14f
 8001834:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
	N('F').middle=NEIGHBOUR3;
 8001838:	4ba8      	ldr	r3, [pc, #672]	; (8001adc <Create_Nodes+0x688>)
 800183a:	2202      	movs	r2, #2
 800183c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

	//G node
	N('G').worth=2;
 8001840:	4ba6      	ldr	r3, [pc, #664]	; (8001adc <Create_Nodes+0x688>)
 8001842:	2202      	movs	r2, #2
 8001844:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	N('G').type=1;
 8001848:	4ba4      	ldr	r3, [pc, #656]	; (8001adc <Create_Nodes+0x688>)
 800184a:	2201      	movs	r2, #1
 800184c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	VALUE(N('G').neighbours,'E',0,'H','I');
 8001850:	4ba2      	ldr	r3, [pc, #648]	; (8001adc <Create_Nodes+0x688>)
 8001852:	2245      	movs	r2, #69	; 0x45
 8001854:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8001858:	4ba0      	ldr	r3, [pc, #640]	; (8001adc <Create_Nodes+0x688>)
 800185a:	2200      	movs	r2, #0
 800185c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 8001860:	4b9e      	ldr	r3, [pc, #632]	; (8001adc <Create_Nodes+0x688>)
 8001862:	2248      	movs	r2, #72	; 0x48
 8001864:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
 8001868:	4b9c      	ldr	r3, [pc, #624]	; (8001adc <Create_Nodes+0x688>)
 800186a:	2249      	movs	r2, #73	; 0x49
 800186c:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	VALUE(N('G').directions,1,0,2,2);
 8001870:	4b9a      	ldr	r3, [pc, #616]	; (8001adc <Create_Nodes+0x688>)
 8001872:	2201      	movs	r2, #1
 8001874:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8001878:	4b98      	ldr	r3, [pc, #608]	; (8001adc <Create_Nodes+0x688>)
 800187a:	2200      	movs	r2, #0
 800187c:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 8001880:	4b96      	ldr	r3, [pc, #600]	; (8001adc <Create_Nodes+0x688>)
 8001882:	2202      	movs	r2, #2
 8001884:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 8001888:	4b94      	ldr	r3, [pc, #592]	; (8001adc <Create_Nodes+0x688>)
 800188a:	2202      	movs	r2, #2
 800188c:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
	VALUE(N('G').distance,385,0,336,284);
 8001890:	4b92      	ldr	r3, [pc, #584]	; (8001adc <Create_Nodes+0x688>)
 8001892:	f240 1281 	movw	r2, #385	; 0x181
 8001896:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 800189a:	4b90      	ldr	r3, [pc, #576]	; (8001adc <Create_Nodes+0x688>)
 800189c:	2200      	movs	r2, #0
 800189e:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
 80018a2:	4b8e      	ldr	r3, [pc, #568]	; (8001adc <Create_Nodes+0x688>)
 80018a4:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80018a8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
 80018ac:	4b8b      	ldr	r3, [pc, #556]	; (8001adc <Create_Nodes+0x688>)
 80018ae:	f44f 728e 	mov.w	r2, #284	; 0x11c
 80018b2:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	N('G').middle=NEIGHBOUR3;
 80018b6:	4b89      	ldr	r3, [pc, #548]	; (8001adc <Create_Nodes+0x688>)
 80018b8:	2202      	movs	r2, #2
 80018ba:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

	//H node
	N('H').worth=2;
 80018be:	4b87      	ldr	r3, [pc, #540]	; (8001adc <Create_Nodes+0x688>)
 80018c0:	2202      	movs	r2, #2
 80018c2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	N('H').type=1;
 80018c6:	4b85      	ldr	r3, [pc, #532]	; (8001adc <Create_Nodes+0x688>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	VALUE(N('H').neighbours,'G','F','K','J');
 80018ce:	4b83      	ldr	r3, [pc, #524]	; (8001adc <Create_Nodes+0x688>)
 80018d0:	2247      	movs	r2, #71	; 0x47
 80018d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80018d6:	4b81      	ldr	r3, [pc, #516]	; (8001adc <Create_Nodes+0x688>)
 80018d8:	2246      	movs	r2, #70	; 0x46
 80018da:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80018de:	4b7f      	ldr	r3, [pc, #508]	; (8001adc <Create_Nodes+0x688>)
 80018e0:	224b      	movs	r2, #75	; 0x4b
 80018e2:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80018e6:	4b7d      	ldr	r3, [pc, #500]	; (8001adc <Create_Nodes+0x688>)
 80018e8:	224a      	movs	r2, #74	; 0x4a
 80018ea:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
	VALUE(N('H').directions,1,1,2,2);
 80018ee:	4b7b      	ldr	r3, [pc, #492]	; (8001adc <Create_Nodes+0x688>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 80018f6:	4b79      	ldr	r3, [pc, #484]	; (8001adc <Create_Nodes+0x688>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 80018fe:	4b77      	ldr	r3, [pc, #476]	; (8001adc <Create_Nodes+0x688>)
 8001900:	2202      	movs	r2, #2
 8001902:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8001906:	4b75      	ldr	r3, [pc, #468]	; (8001adc <Create_Nodes+0x688>)
 8001908:	2202      	movs	r2, #2
 800190a:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
	VALUE(N('H').distance,336,284,407,230);
 800190e:	4b73      	ldr	r3, [pc, #460]	; (8001adc <Create_Nodes+0x688>)
 8001910:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001914:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 8001918:	4b70      	ldr	r3, [pc, #448]	; (8001adc <Create_Nodes+0x688>)
 800191a:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800191e:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8001922:	4b6e      	ldr	r3, [pc, #440]	; (8001adc <Create_Nodes+0x688>)
 8001924:	f240 1297 	movw	r2, #407	; 0x197
 8001928:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 800192c:	4b6b      	ldr	r3, [pc, #428]	; (8001adc <Create_Nodes+0x688>)
 800192e:	22e6      	movs	r2, #230	; 0xe6
 8001930:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
	N('H').middle=NEIGHBOUR4;
 8001934:	4b69      	ldr	r3, [pc, #420]	; (8001adc <Create_Nodes+0x688>)
 8001936:	2203      	movs	r2, #3
 8001938:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc

	//I node
	N('I').worth=0;
 800193c:	4b67      	ldr	r3, [pc, #412]	; (8001adc <Create_Nodes+0x688>)
 800193e:	2200      	movs	r2, #0
 8001940:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	N('I').type=3;
 8001944:	4b65      	ldr	r3, [pc, #404]	; (8001adc <Create_Nodes+0x688>)
 8001946:	2203      	movs	r2, #3
 8001948:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	VALUE(N('I').neighbours,'G','F',0,'L');
 800194c:	4b63      	ldr	r3, [pc, #396]	; (8001adc <Create_Nodes+0x688>)
 800194e:	2247      	movs	r2, #71	; 0x47
 8001950:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8001954:	4b61      	ldr	r3, [pc, #388]	; (8001adc <Create_Nodes+0x688>)
 8001956:	2246      	movs	r2, #70	; 0x46
 8001958:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 800195c:	4b5f      	ldr	r3, [pc, #380]	; (8001adc <Create_Nodes+0x688>)
 800195e:	2200      	movs	r2, #0
 8001960:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 8001964:	4b5d      	ldr	r3, [pc, #372]	; (8001adc <Create_Nodes+0x688>)
 8001966:	224c      	movs	r2, #76	; 0x4c
 8001968:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
	VALUE(N('I').directions,1,1,0,2);
 800196c:	4b5b      	ldr	r3, [pc, #364]	; (8001adc <Create_Nodes+0x688>)
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8001974:	4b59      	ldr	r3, [pc, #356]	; (8001adc <Create_Nodes+0x688>)
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 800197c:	4b57      	ldr	r3, [pc, #348]	; (8001adc <Create_Nodes+0x688>)
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 8001984:	4b55      	ldr	r3, [pc, #340]	; (8001adc <Create_Nodes+0x688>)
 8001986:	2202      	movs	r2, #2
 8001988:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	VALUE(N('I').distance,284,335,0,418);
 800198c:	4b53      	ldr	r3, [pc, #332]	; (8001adc <Create_Nodes+0x688>)
 800198e:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001992:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 8001996:	4b51      	ldr	r3, [pc, #324]	; (8001adc <Create_Nodes+0x688>)
 8001998:	f240 124f 	movw	r2, #335	; 0x14f
 800199c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
 80019a0:	4b4e      	ldr	r3, [pc, #312]	; (8001adc <Create_Nodes+0x688>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 80019a8:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <Create_Nodes+0x688>)
 80019aa:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 80019ae:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	N('I').middle=NEIGHBOUR4;
 80019b2:	4b4a      	ldr	r3, [pc, #296]	; (8001adc <Create_Nodes+0x688>)
 80019b4:	2203      	movs	r2, #3
 80019b6:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

	//J node
	N('J').worth=0;
 80019ba:	4b48      	ldr	r3, [pc, #288]	; (8001adc <Create_Nodes+0x688>)
 80019bc:	2200      	movs	r2, #0
 80019be:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	N('J').type=3;
 80019c2:	4b46      	ldr	r3, [pc, #280]	; (8001adc <Create_Nodes+0x688>)
 80019c4:	2203      	movs	r2, #3
 80019c6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	VALUE(N('J').neighbours,'H',0,'K','L');
 80019ca:	4b44      	ldr	r3, [pc, #272]	; (8001adc <Create_Nodes+0x688>)
 80019cc:	2248      	movs	r2, #72	; 0x48
 80019ce:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 80019d2:	4b42      	ldr	r3, [pc, #264]	; (8001adc <Create_Nodes+0x688>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 80019da:	4b40      	ldr	r3, [pc, #256]	; (8001adc <Create_Nodes+0x688>)
 80019dc:	224b      	movs	r2, #75	; 0x4b
 80019de:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
 80019e2:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <Create_Nodes+0x688>)
 80019e4:	224c      	movs	r2, #76	; 0x4c
 80019e6:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
	VALUE(N('J').directions,1,0,2,2);
 80019ea:	4b3c      	ldr	r3, [pc, #240]	; (8001adc <Create_Nodes+0x688>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 80019f2:	4b3a      	ldr	r3, [pc, #232]	; (8001adc <Create_Nodes+0x688>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
 80019fa:	4b38      	ldr	r3, [pc, #224]	; (8001adc <Create_Nodes+0x688>)
 80019fc:	2202      	movs	r2, #2
 80019fe:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8001a02:	4b36      	ldr	r3, [pc, #216]	; (8001adc <Create_Nodes+0x688>)
 8001a04:	2202      	movs	r2, #2
 8001a06:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
	VALUE(N('J').distance,230,0,204,229);
 8001a0a:	4b34      	ldr	r3, [pc, #208]	; (8001adc <Create_Nodes+0x688>)
 8001a0c:	22e6      	movs	r2, #230	; 0xe6
 8001a0e:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8001a12:	4b32      	ldr	r3, [pc, #200]	; (8001adc <Create_Nodes+0x688>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
 8001a1a:	4b30      	ldr	r3, [pc, #192]	; (8001adc <Create_Nodes+0x688>)
 8001a1c:	22cc      	movs	r2, #204	; 0xcc
 8001a1e:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
 8001a22:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <Create_Nodes+0x688>)
 8001a24:	22e5      	movs	r2, #229	; 0xe5
 8001a26:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
	N('J').middle=NEIGHBOUR4;
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <Create_Nodes+0x688>)
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	//K node
	N('K').worth=2;
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <Create_Nodes+0x688>)
 8001a34:	2202      	movs	r2, #2
 8001a36:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	N('K').type=1;
 8001a3a:	4b28      	ldr	r3, [pc, #160]	; (8001adc <Create_Nodes+0x688>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	VALUE(N('K').neighbours,'J','H','M','N');
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <Create_Nodes+0x688>)
 8001a44:	224a      	movs	r2, #74	; 0x4a
 8001a46:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <Create_Nodes+0x688>)
 8001a4c:	2248      	movs	r2, #72	; 0x48
 8001a4e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <Create_Nodes+0x688>)
 8001a54:	224d      	movs	r2, #77	; 0x4d
 8001a56:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <Create_Nodes+0x688>)
 8001a5c:	224e      	movs	r2, #78	; 0x4e
 8001a5e:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
	VALUE(N('K').directions,1,1,2,2);
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <Create_Nodes+0x688>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <Create_Nodes+0x688>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <Create_Nodes+0x688>)
 8001a74:	2202      	movs	r2, #2
 8001a76:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <Create_Nodes+0x688>)
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
	VALUE(N('K').distance,204,407,288,319);
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <Create_Nodes+0x688>)
 8001a84:	22cc      	movs	r2, #204	; 0xcc
 8001a86:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <Create_Nodes+0x688>)
 8001a8c:	f240 1297 	movw	r2, #407	; 0x197
 8001a90:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <Create_Nodes+0x688>)
 8001a96:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001a9a:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <Create_Nodes+0x688>)
 8001aa0:	f240 123f 	movw	r2, #319	; 0x13f
 8001aa4:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
	N('K').middle=NEIGHBOUR1;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <Create_Nodes+0x688>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	//L node
	N('L').worth=2;
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <Create_Nodes+0x688>)
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	N('L').type=1;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <Create_Nodes+0x688>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	VALUE(N('L').neighbours,'I','J','M','N');
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <Create_Nodes+0x688>)
 8001ac2:	2249      	movs	r2, #73	; 0x49
 8001ac4:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <Create_Nodes+0x688>)
 8001aca:	224a      	movs	r2, #74	; 0x4a
 8001acc:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
 8001ad0:	4b02      	ldr	r3, [pc, #8]	; (8001adc <Create_Nodes+0x688>)
 8001ad2:	224d      	movs	r2, #77	; 0x4d
 8001ad4:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
 8001ad8:	e002      	b.n	8001ae0 <Create_Nodes+0x68c>
 8001ada:	bf00      	nop
 8001adc:	200002b0 	.word	0x200002b0
 8001ae0:	4bcd      	ldr	r3, [pc, #820]	; (8001e18 <Create_Nodes+0x9c4>)
 8001ae2:	224e      	movs	r2, #78	; 0x4e
 8001ae4:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
	VALUE(N('L').directions,1,1,2,2);
 8001ae8:	4bcb      	ldr	r3, [pc, #812]	; (8001e18 <Create_Nodes+0x9c4>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8001af0:	4bc9      	ldr	r3, [pc, #804]	; (8001e18 <Create_Nodes+0x9c4>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 8001af8:	4bc7      	ldr	r3, [pc, #796]	; (8001e18 <Create_Nodes+0x9c4>)
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
 8001b00:	4bc5      	ldr	r3, [pc, #788]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
	VALUE(N('L').distance,418,229,329,258);
 8001b08:	4bc3      	ldr	r3, [pc, #780]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b0a:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8001b0e:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
 8001b12:	4bc1      	ldr	r3, [pc, #772]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b14:	22e5      	movs	r2, #229	; 0xe5
 8001b16:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
 8001b1a:	4bbf      	ldr	r3, [pc, #764]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b1c:	f240 1249 	movw	r2, #329	; 0x149
 8001b20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
 8001b24:	4bbc      	ldr	r3, [pc, #752]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b26:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001b2a:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
	N('L').middle=NEIGHBOUR2;
 8001b2e:	4bba      	ldr	r3, [pc, #744]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	//M node
	N('M').worth=2;
 8001b36:	4bb8      	ldr	r3, [pc, #736]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b38:	2202      	movs	r2, #2
 8001b3a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	N('M').type=1;
 8001b3e:	4bb6      	ldr	r3, [pc, #728]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	VALUE(N('M').neighbours,'L','K','P','O');
 8001b46:	4bb4      	ldr	r3, [pc, #720]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b48:	224c      	movs	r2, #76	; 0x4c
 8001b4a:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
 8001b4e:	4bb2      	ldr	r3, [pc, #712]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b50:	224b      	movs	r2, #75	; 0x4b
 8001b52:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
 8001b56:	4bb0      	ldr	r3, [pc, #704]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b58:	2250      	movs	r2, #80	; 0x50
 8001b5a:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
 8001b5e:	4bae      	ldr	r3, [pc, #696]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b60:	224f      	movs	r2, #79	; 0x4f
 8001b62:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
	VALUE(N('M').directions,1,1,2,2);
 8001b66:	4bac      	ldr	r3, [pc, #688]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8001b6e:	4baa      	ldr	r3, [pc, #680]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 8001b76:	4ba8      	ldr	r3, [pc, #672]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b78:	2202      	movs	r2, #2
 8001b7a:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
 8001b7e:	4ba6      	ldr	r3, [pc, #664]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b80:	2202      	movs	r2, #2
 8001b82:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
	VALUE(N('M').distance,329,288,416,198);
 8001b86:	4ba4      	ldr	r3, [pc, #656]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b88:	f240 1249 	movw	r2, #329	; 0x149
 8001b8c:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
 8001b90:	4ba1      	ldr	r3, [pc, #644]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b92:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001b96:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
 8001b9a:	4b9f      	ldr	r3, [pc, #636]	; (8001e18 <Create_Nodes+0x9c4>)
 8001b9c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001ba0:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
 8001ba4:	4b9c      	ldr	r3, [pc, #624]	; (8001e18 <Create_Nodes+0x9c4>)
 8001ba6:	22c6      	movs	r2, #198	; 0xc6
 8001ba8:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
	N('M').middle=NEIGHBOUR1;
 8001bac:	4b9a      	ldr	r3, [pc, #616]	; (8001e18 <Create_Nodes+0x9c4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	//N node
	N('N').worth=0;
 8001bb4:	4b98      	ldr	r3, [pc, #608]	; (8001e18 <Create_Nodes+0x9c4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	N('N').type=3;
 8001bbc:	4b96      	ldr	r3, [pc, #600]	; (8001e18 <Create_Nodes+0x9c4>)
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	VALUE(N('N').neighbours,'L','K','O','Q');
 8001bc4:	4b94      	ldr	r3, [pc, #592]	; (8001e18 <Create_Nodes+0x9c4>)
 8001bc6:	224c      	movs	r2, #76	; 0x4c
 8001bc8:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
 8001bcc:	4b92      	ldr	r3, [pc, #584]	; (8001e18 <Create_Nodes+0x9c4>)
 8001bce:	224b      	movs	r2, #75	; 0x4b
 8001bd0:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
 8001bd4:	4b90      	ldr	r3, [pc, #576]	; (8001e18 <Create_Nodes+0x9c4>)
 8001bd6:	224f      	movs	r2, #79	; 0x4f
 8001bd8:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
 8001bdc:	4b8e      	ldr	r3, [pc, #568]	; (8001e18 <Create_Nodes+0x9c4>)
 8001bde:	2251      	movs	r2, #81	; 0x51
 8001be0:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
	VALUE(N('N').directions,1,1,2,2);
 8001be4:	4b8c      	ldr	r3, [pc, #560]	; (8001e18 <Create_Nodes+0x9c4>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 8001bec:	4b8a      	ldr	r3, [pc, #552]	; (8001e18 <Create_Nodes+0x9c4>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 8001bf4:	4b88      	ldr	r3, [pc, #544]	; (8001e18 <Create_Nodes+0x9c4>)
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
 8001bfc:	4b86      	ldr	r3, [pc, #536]	; (8001e18 <Create_Nodes+0x9c4>)
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
	VALUE(N('N').distance,258,318,228,447);
 8001c04:	4b84      	ldr	r3, [pc, #528]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c06:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001c0a:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
 8001c0e:	4b82      	ldr	r3, [pc, #520]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c10:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8001c14:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
 8001c18:	4b7f      	ldr	r3, [pc, #508]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c1a:	22e4      	movs	r2, #228	; 0xe4
 8001c1c:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
 8001c20:	4b7d      	ldr	r3, [pc, #500]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c22:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001c26:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
	N('N').middle=NEIGHBOUR2;
 8001c2a:	4b7b      	ldr	r3, [pc, #492]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc

	//O node
	N('O').worth=2;
 8001c32:	4b79      	ldr	r3, [pc, #484]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c34:	2202      	movs	r2, #2
 8001c36:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
	N('O').type=1;
 8001c3a:	4b77      	ldr	r3, [pc, #476]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	VALUE(N('O').neighbours,'N','M','P',0);
 8001c42:	4b75      	ldr	r3, [pc, #468]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c44:	224e      	movs	r2, #78	; 0x4e
 8001c46:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8001c4a:	4b73      	ldr	r3, [pc, #460]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c4c:	224d      	movs	r2, #77	; 0x4d
 8001c4e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
 8001c52:	4b71      	ldr	r3, [pc, #452]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c54:	2250      	movs	r2, #80	; 0x50
 8001c56:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 8001c5a:	4b6f      	ldr	r3, [pc, #444]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
	VALUE(N('O').directions,1,1,2,0);
 8001c62:	4b6d      	ldr	r3, [pc, #436]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 8001c6a:	4b6b      	ldr	r3, [pc, #428]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 8001c72:	4b69      	ldr	r3, [pc, #420]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c74:	2202      	movs	r2, #2
 8001c76:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 8001c7a:	4b67      	ldr	r3, [pc, #412]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
	VALUE(N('O').distance,228,198,248,0);
 8001c82:	4b65      	ldr	r3, [pc, #404]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c84:	22e4      	movs	r2, #228	; 0xe4
 8001c86:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
 8001c8a:	4b63      	ldr	r3, [pc, #396]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c8c:	22c6      	movs	r2, #198	; 0xc6
 8001c8e:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6
 8001c92:	4b61      	ldr	r3, [pc, #388]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c94:	22f8      	movs	r2, #248	; 0xf8
 8001c96:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
 8001c9a:	4b5f      	ldr	r3, [pc, #380]	; (8001e18 <Create_Nodes+0x9c4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da
	N('O').middle=NEIGHBOUR2;
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <Create_Nodes+0x9c4>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc

	//P node
	N('P').worth=2;
 8001caa:	4b5b      	ldr	r3, [pc, #364]	; (8001e18 <Create_Nodes+0x9c4>)
 8001cac:	2202      	movs	r2, #2
 8001cae:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	N('P').type=1;
 8001cb2:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <Create_Nodes+0x9c4>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	VALUE(N('P').neighbours,'O','M','R','S');
 8001cba:	4b57      	ldr	r3, [pc, #348]	; (8001e18 <Create_Nodes+0x9c4>)
 8001cbc:	224f      	movs	r2, #79	; 0x4f
 8001cbe:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8001cc2:	4b55      	ldr	r3, [pc, #340]	; (8001e18 <Create_Nodes+0x9c4>)
 8001cc4:	224d      	movs	r2, #77	; 0x4d
 8001cc6:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8001cca:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <Create_Nodes+0x9c4>)
 8001ccc:	2252      	movs	r2, #82	; 0x52
 8001cce:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8001cd2:	4b51      	ldr	r3, [pc, #324]	; (8001e18 <Create_Nodes+0x9c4>)
 8001cd4:	2253      	movs	r2, #83	; 0x53
 8001cd6:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
	VALUE(N('P').directions,1,1,2,2);
 8001cda:	4b4f      	ldr	r3, [pc, #316]	; (8001e18 <Create_Nodes+0x9c4>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 8001ce2:	4b4d      	ldr	r3, [pc, #308]	; (8001e18 <Create_Nodes+0x9c4>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
 8001cea:	4b4b      	ldr	r3, [pc, #300]	; (8001e18 <Create_Nodes+0x9c4>)
 8001cec:	2202      	movs	r2, #2
 8001cee:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
 8001cf2:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <Create_Nodes+0x9c4>)
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f883 21f3 	strb.w	r2, [r3, #499]	; 0x1f3
	VALUE(N('P').distance,248,416,305,346);
 8001cfa:	4b47      	ldr	r3, [pc, #284]	; (8001e18 <Create_Nodes+0x9c4>)
 8001cfc:	22f8      	movs	r2, #248	; 0xf8
 8001cfe:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
 8001d02:	4b45      	ldr	r3, [pc, #276]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d04:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001d08:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
 8001d0c:	4b42      	ldr	r3, [pc, #264]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d0e:	f240 1231 	movw	r2, #305	; 0x131
 8001d12:	f8a3 21f8 	strh.w	r2, [r3, #504]	; 0x1f8
 8001d16:	4b40      	ldr	r3, [pc, #256]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d18:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001d1c:	f8a3 21fa 	strh.w	r2, [r3, #506]	; 0x1fa
	N('P').middle=NEIGHBOUR2;
 8001d20:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc

	//Q node
	N('Q').worth=2;
 8001d28:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	N('Q').type=1;
 8001d30:	4b39      	ldr	r3, [pc, #228]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	VALUE(N('Q').neighbours,'N',0,'R','S');
 8001d38:	4b37      	ldr	r3, [pc, #220]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d3a:	224e      	movs	r2, #78	; 0x4e
 8001d3c:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
 8001d40:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 220d 	strb.w	r2, [r3, #525]	; 0x20d
 8001d48:	4b33      	ldr	r3, [pc, #204]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d4a:	2252      	movs	r2, #82	; 0x52
 8001d4c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
 8001d50:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d52:	2253      	movs	r2, #83	; 0x53
 8001d54:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
	VALUE(N('Q').directions,1,0,2,2);
 8001d58:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 8001d60:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 8001d68:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
	VALUE(N('Q').distance,447,0,346,284);
 8001d78:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d7a:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001d7e:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
 8001d82:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	f8a3 2216 	strh.w	r2, [r3, #534]	; 0x216
 8001d8a:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d8c:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001d90:	f8a3 2218 	strh.w	r2, [r3, #536]	; 0x218
 8001d94:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <Create_Nodes+0x9c4>)
 8001d96:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001d9a:	f8a3 221a 	strh.w	r2, [r3, #538]	; 0x21a
	N('Q').middle=NEIGHBOUR1;
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <Create_Nodes+0x9c4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c

	//R node
	N('R').worth=2;
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <Create_Nodes+0x9c4>)
 8001da8:	2202      	movs	r2, #2
 8001daa:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	N('R').type=1;
 8001dae:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <Create_Nodes+0x9c4>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	VALUE(N('R').neighbours,'Q','P','U','T');
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <Create_Nodes+0x9c4>)
 8001db8:	2251      	movs	r2, #81	; 0x51
 8001dba:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <Create_Nodes+0x9c4>)
 8001dc0:	2250      	movs	r2, #80	; 0x50
 8001dc2:	f883 222d 	strb.w	r2, [r3, #557]	; 0x22d
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <Create_Nodes+0x9c4>)
 8001dc8:	2255      	movs	r2, #85	; 0x55
 8001dca:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <Create_Nodes+0x9c4>)
 8001dd0:	2254      	movs	r2, #84	; 0x54
 8001dd2:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
	VALUE(N('R').directions,1,1,2,2);
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <Create_Nodes+0x9c4>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <Create_Nodes+0x9c4>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <Create_Nodes+0x9c4>)
 8001de8:	2202      	movs	r2, #2
 8001dea:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <Create_Nodes+0x9c4>)
 8001df0:	2202      	movs	r2, #2
 8001df2:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
	VALUE(N('R').distance,346,305,366,204);
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <Create_Nodes+0x9c4>)
 8001df8:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001dfc:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <Create_Nodes+0x9c4>)
 8001e02:	f240 1231 	movw	r2, #305	; 0x131
 8001e06:	f8a3 2236 	strh.w	r2, [r3, #566]	; 0x236
 8001e0a:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <Create_Nodes+0x9c4>)
 8001e0c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8001e10:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
 8001e14:	e002      	b.n	8001e1c <Create_Nodes+0x9c8>
 8001e16:	bf00      	nop
 8001e18:	200002b0 	.word	0x200002b0
 8001e1c:	4bcb      	ldr	r3, [pc, #812]	; (800214c <Create_Nodes+0xcf8>)
 8001e1e:	22cc      	movs	r2, #204	; 0xcc
 8001e20:	f8a3 223a 	strh.w	r2, [r3, #570]	; 0x23a
	N('R').middle=NEIGHBOUR2;
 8001e24:	4bc9      	ldr	r3, [pc, #804]	; (800214c <Create_Nodes+0xcf8>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c

	//S node
	N('S').worth=2;
 8001e2c:	4bc7      	ldr	r3, [pc, #796]	; (800214c <Create_Nodes+0xcf8>)
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	N('S').type=1;
 8001e34:	4bc5      	ldr	r3, [pc, #788]	; (800214c <Create_Nodes+0xcf8>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	VALUE(N('S').neighbours,'Q','P','T','V');
 8001e3c:	4bc3      	ldr	r3, [pc, #780]	; (800214c <Create_Nodes+0xcf8>)
 8001e3e:	2251      	movs	r2, #81	; 0x51
 8001e40:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
 8001e44:	4bc1      	ldr	r3, [pc, #772]	; (800214c <Create_Nodes+0xcf8>)
 8001e46:	2250      	movs	r2, #80	; 0x50
 8001e48:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
 8001e4c:	4bbf      	ldr	r3, [pc, #764]	; (800214c <Create_Nodes+0xcf8>)
 8001e4e:	2254      	movs	r2, #84	; 0x54
 8001e50:	f883 224e 	strb.w	r2, [r3, #590]	; 0x24e
 8001e54:	4bbd      	ldr	r3, [pc, #756]	; (800214c <Create_Nodes+0xcf8>)
 8001e56:	2256      	movs	r2, #86	; 0x56
 8001e58:	f883 224f 	strb.w	r2, [r3, #591]	; 0x24f
	VALUE(N('S').directions,1,1,2,2);
 8001e5c:	4bbb      	ldr	r3, [pc, #748]	; (800214c <Create_Nodes+0xcf8>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 8001e64:	4bb9      	ldr	r3, [pc, #740]	; (800214c <Create_Nodes+0xcf8>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8001e6c:	4bb7      	ldr	r3, [pc, #732]	; (800214c <Create_Nodes+0xcf8>)
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 8001e74:	4bb5      	ldr	r3, [pc, #724]	; (800214c <Create_Nodes+0xcf8>)
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
	VALUE(N('S').distance,284,346,223,406);
 8001e7c:	4bb3      	ldr	r3, [pc, #716]	; (800214c <Create_Nodes+0xcf8>)
 8001e7e:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001e82:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
 8001e86:	4bb1      	ldr	r3, [pc, #708]	; (800214c <Create_Nodes+0xcf8>)
 8001e88:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001e8c:	f8a3 2256 	strh.w	r2, [r3, #598]	; 0x256
 8001e90:	4bae      	ldr	r3, [pc, #696]	; (800214c <Create_Nodes+0xcf8>)
 8001e92:	22df      	movs	r2, #223	; 0xdf
 8001e94:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
 8001e98:	4bac      	ldr	r3, [pc, #688]	; (800214c <Create_Nodes+0xcf8>)
 8001e9a:	f44f 72cb 	mov.w	r2, #406	; 0x196
 8001e9e:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
	N('S').middle=NEIGHBOUR2;
 8001ea2:	4baa      	ldr	r3, [pc, #680]	; (800214c <Create_Nodes+0xcf8>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

	//T node
	N('T').worth=2;
 8001eaa:	4ba8      	ldr	r3, [pc, #672]	; (800214c <Create_Nodes+0xcf8>)
 8001eac:	2202      	movs	r2, #2
 8001eae:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	N('T').type=1;
 8001eb2:	4ba6      	ldr	r3, [pc, #664]	; (800214c <Create_Nodes+0xcf8>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	VALUE(N('T').neighbours,'S','R','U','V');
 8001eba:	4ba4      	ldr	r3, [pc, #656]	; (800214c <Create_Nodes+0xcf8>)
 8001ebc:	2253      	movs	r2, #83	; 0x53
 8001ebe:	f883 226c 	strb.w	r2, [r3, #620]	; 0x26c
 8001ec2:	4ba2      	ldr	r3, [pc, #648]	; (800214c <Create_Nodes+0xcf8>)
 8001ec4:	2252      	movs	r2, #82	; 0x52
 8001ec6:	f883 226d 	strb.w	r2, [r3, #621]	; 0x26d
 8001eca:	4ba0      	ldr	r3, [pc, #640]	; (800214c <Create_Nodes+0xcf8>)
 8001ecc:	2255      	movs	r2, #85	; 0x55
 8001ece:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 8001ed2:	4b9e      	ldr	r3, [pc, #632]	; (800214c <Create_Nodes+0xcf8>)
 8001ed4:	2256      	movs	r2, #86	; 0x56
 8001ed6:	f883 226f 	strb.w	r2, [r3, #623]	; 0x26f
	VALUE(N('T').directions,1,1,2,2);
 8001eda:	4b9c      	ldr	r3, [pc, #624]	; (800214c <Create_Nodes+0xcf8>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
 8001ee2:	4b9a      	ldr	r3, [pc, #616]	; (800214c <Create_Nodes+0xcf8>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
 8001eea:	4b98      	ldr	r3, [pc, #608]	; (800214c <Create_Nodes+0xcf8>)
 8001eec:	2202      	movs	r2, #2
 8001eee:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
 8001ef2:	4b96      	ldr	r3, [pc, #600]	; (800214c <Create_Nodes+0xcf8>)
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
	VALUE(N('T').distance,223,204,192,233);
 8001efa:	4b94      	ldr	r3, [pc, #592]	; (800214c <Create_Nodes+0xcf8>)
 8001efc:	22df      	movs	r2, #223	; 0xdf
 8001efe:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
 8001f02:	4b92      	ldr	r3, [pc, #584]	; (800214c <Create_Nodes+0xcf8>)
 8001f04:	22cc      	movs	r2, #204	; 0xcc
 8001f06:	f8a3 2276 	strh.w	r2, [r3, #630]	; 0x276
 8001f0a:	4b90      	ldr	r3, [pc, #576]	; (800214c <Create_Nodes+0xcf8>)
 8001f0c:	22c0      	movs	r2, #192	; 0xc0
 8001f0e:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
 8001f12:	4b8e      	ldr	r3, [pc, #568]	; (800214c <Create_Nodes+0xcf8>)
 8001f14:	22e9      	movs	r2, #233	; 0xe9
 8001f16:	f8a3 227a 	strh.w	r2, [r3, #634]	; 0x27a
	N('T').middle=NEIGHBOUR2;
 8001f1a:	4b8c      	ldr	r3, [pc, #560]	; (800214c <Create_Nodes+0xcf8>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c

	//U node
	N('U').worth=2;
 8001f22:	4b8a      	ldr	r3, [pc, #552]	; (800214c <Create_Nodes+0xcf8>)
 8001f24:	2202      	movs	r2, #2
 8001f26:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	N('U').type=1;
 8001f2a:	4b88      	ldr	r3, [pc, #544]	; (800214c <Create_Nodes+0xcf8>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	VALUE(N('U').neighbours,'T','R','X',0);
 8001f32:	4b86      	ldr	r3, [pc, #536]	; (800214c <Create_Nodes+0xcf8>)
 8001f34:	2254      	movs	r2, #84	; 0x54
 8001f36:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
 8001f3a:	4b84      	ldr	r3, [pc, #528]	; (800214c <Create_Nodes+0xcf8>)
 8001f3c:	2252      	movs	r2, #82	; 0x52
 8001f3e:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
 8001f42:	4b82      	ldr	r3, [pc, #520]	; (800214c <Create_Nodes+0xcf8>)
 8001f44:	2258      	movs	r2, #88	; 0x58
 8001f46:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
 8001f4a:	4b80      	ldr	r3, [pc, #512]	; (800214c <Create_Nodes+0xcf8>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 228f 	strb.w	r2, [r3, #655]	; 0x28f
	VALUE(N('U').directions,1,1,2,0);
 8001f52:	4b7e      	ldr	r3, [pc, #504]	; (800214c <Create_Nodes+0xcf8>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 8001f5a:	4b7c      	ldr	r3, [pc, #496]	; (800214c <Create_Nodes+0xcf8>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 8001f62:	4b7a      	ldr	r3, [pc, #488]	; (800214c <Create_Nodes+0xcf8>)
 8001f64:	2202      	movs	r2, #2
 8001f66:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 8001f6a:	4b78      	ldr	r3, [pc, #480]	; (800214c <Create_Nodes+0xcf8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
	VALUE(N('U').distance,192,366,371,0);
 8001f72:	4b76      	ldr	r3, [pc, #472]	; (800214c <Create_Nodes+0xcf8>)
 8001f74:	22c0      	movs	r2, #192	; 0xc0
 8001f76:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
 8001f7a:	4b74      	ldr	r3, [pc, #464]	; (800214c <Create_Nodes+0xcf8>)
 8001f7c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8001f80:	f8a3 2296 	strh.w	r2, [r3, #662]	; 0x296
 8001f84:	4b71      	ldr	r3, [pc, #452]	; (800214c <Create_Nodes+0xcf8>)
 8001f86:	f240 1273 	movw	r2, #371	; 0x173
 8001f8a:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
 8001f8e:	4b6f      	ldr	r3, [pc, #444]	; (800214c <Create_Nodes+0xcf8>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
	N('U').middle=NEIGHBOUR1;
 8001f96:	4b6d      	ldr	r3, [pc, #436]	; (800214c <Create_Nodes+0xcf8>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

	//V node
	N('V').worth=2;
 8001f9e:	4b6b      	ldr	r3, [pc, #428]	; (800214c <Create_Nodes+0xcf8>)
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	N('V').type=1;
 8001fa6:	4b69      	ldr	r3, [pc, #420]	; (800214c <Create_Nodes+0xcf8>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	VALUE(N('V').neighbours,'S','T','W',0);
 8001fae:	4b67      	ldr	r3, [pc, #412]	; (800214c <Create_Nodes+0xcf8>)
 8001fb0:	2253      	movs	r2, #83	; 0x53
 8001fb2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
 8001fb6:	4b65      	ldr	r3, [pc, #404]	; (800214c <Create_Nodes+0xcf8>)
 8001fb8:	2254      	movs	r2, #84	; 0x54
 8001fba:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
 8001fbe:	4b63      	ldr	r3, [pc, #396]	; (800214c <Create_Nodes+0xcf8>)
 8001fc0:	2257      	movs	r2, #87	; 0x57
 8001fc2:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
 8001fc6:	4b61      	ldr	r3, [pc, #388]	; (800214c <Create_Nodes+0xcf8>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 22af 	strb.w	r2, [r3, #687]	; 0x2af
	VALUE(N('V').directions,1,1,2,0);
 8001fce:	4b5f      	ldr	r3, [pc, #380]	; (800214c <Create_Nodes+0xcf8>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 8001fd6:	4b5d      	ldr	r3, [pc, #372]	; (800214c <Create_Nodes+0xcf8>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
 8001fde:	4b5b      	ldr	r3, [pc, #364]	; (800214c <Create_Nodes+0xcf8>)
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
 8001fe6:	4b59      	ldr	r3, [pc, #356]	; (800214c <Create_Nodes+0xcf8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
	VALUE(N('V').distance,406,233,149,0);
 8001fee:	4b57      	ldr	r3, [pc, #348]	; (800214c <Create_Nodes+0xcf8>)
 8001ff0:	f44f 72cb 	mov.w	r2, #406	; 0x196
 8001ff4:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
 8001ff8:	4b54      	ldr	r3, [pc, #336]	; (800214c <Create_Nodes+0xcf8>)
 8001ffa:	22e9      	movs	r2, #233	; 0xe9
 8001ffc:	f8a3 22b6 	strh.w	r2, [r3, #694]	; 0x2b6
 8002000:	4b52      	ldr	r3, [pc, #328]	; (800214c <Create_Nodes+0xcf8>)
 8002002:	2295      	movs	r2, #149	; 0x95
 8002004:	f8a3 22b8 	strh.w	r2, [r3, #696]	; 0x2b8
 8002008:	4b50      	ldr	r3, [pc, #320]	; (800214c <Create_Nodes+0xcf8>)
 800200a:	2200      	movs	r2, #0
 800200c:	f8a3 22ba 	strh.w	r2, [r3, #698]	; 0x2ba
	N('V').middle=NEIGHBOUR2;
 8002010:	4b4e      	ldr	r3, [pc, #312]	; (800214c <Create_Nodes+0xcf8>)
 8002012:	2201      	movs	r2, #1
 8002014:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

	//W node
	N('W').worth=0;
 8002018:	4b4c      	ldr	r3, [pc, #304]	; (800214c <Create_Nodes+0xcf8>)
 800201a:	2200      	movs	r2, #0
 800201c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
	N('W').type=3;
 8002020:	4b4a      	ldr	r3, [pc, #296]	; (800214c <Create_Nodes+0xcf8>)
 8002022:	2203      	movs	r2, #3
 8002024:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
	VALUE(N('W').neighbours,'V',0,'X',0);
 8002028:	4b48      	ldr	r3, [pc, #288]	; (800214c <Create_Nodes+0xcf8>)
 800202a:	2256      	movs	r2, #86	; 0x56
 800202c:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
 8002030:	4b46      	ldr	r3, [pc, #280]	; (800214c <Create_Nodes+0xcf8>)
 8002032:	2200      	movs	r2, #0
 8002034:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
 8002038:	4b44      	ldr	r3, [pc, #272]	; (800214c <Create_Nodes+0xcf8>)
 800203a:	2258      	movs	r2, #88	; 0x58
 800203c:	f883 22ce 	strb.w	r2, [r3, #718]	; 0x2ce
 8002040:	4b42      	ldr	r3, [pc, #264]	; (800214c <Create_Nodes+0xcf8>)
 8002042:	2200      	movs	r2, #0
 8002044:	f883 22cf 	strb.w	r2, [r3, #719]	; 0x2cf
	VALUE(N('W').directions,1,0,1,0);
 8002048:	4b40      	ldr	r3, [pc, #256]	; (800214c <Create_Nodes+0xcf8>)
 800204a:	2201      	movs	r2, #1
 800204c:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 8002050:	4b3e      	ldr	r3, [pc, #248]	; (800214c <Create_Nodes+0xcf8>)
 8002052:	2200      	movs	r2, #0
 8002054:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
 8002058:	4b3c      	ldr	r3, [pc, #240]	; (800214c <Create_Nodes+0xcf8>)
 800205a:	2201      	movs	r2, #1
 800205c:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
 8002060:	4b3a      	ldr	r3, [pc, #232]	; (800214c <Create_Nodes+0xcf8>)
 8002062:	2200      	movs	r2, #0
 8002064:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
	VALUE(N('W').distance,149,0,189,0);
 8002068:	4b38      	ldr	r3, [pc, #224]	; (800214c <Create_Nodes+0xcf8>)
 800206a:	2295      	movs	r2, #149	; 0x95
 800206c:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
 8002070:	4b36      	ldr	r3, [pc, #216]	; (800214c <Create_Nodes+0xcf8>)
 8002072:	2200      	movs	r2, #0
 8002074:	f8a3 22d6 	strh.w	r2, [r3, #726]	; 0x2d6
 8002078:	4b34      	ldr	r3, [pc, #208]	; (800214c <Create_Nodes+0xcf8>)
 800207a:	22bd      	movs	r2, #189	; 0xbd
 800207c:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8
 8002080:	4b32      	ldr	r3, [pc, #200]	; (800214c <Create_Nodes+0xcf8>)
 8002082:	2200      	movs	r2, #0
 8002084:	f8a3 22da 	strh.w	r2, [r3, #730]	; 0x2da
	N('W').middle=NEIGHBOUR1;
 8002088:	4b30      	ldr	r3, [pc, #192]	; (800214c <Create_Nodes+0xcf8>)
 800208a:	2200      	movs	r2, #0
 800208c:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc

	//X node
	N('X').worth=2;
 8002090:	4b2e      	ldr	r3, [pc, #184]	; (800214c <Create_Nodes+0xcf8>)
 8002092:	2202      	movs	r2, #2
 8002094:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
	N('X').type=2;
 8002098:	4b2c      	ldr	r3, [pc, #176]	; (800214c <Create_Nodes+0xcf8>)
 800209a:	2202      	movs	r2, #2
 800209c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
	VALUE(N('X').neighbours,'U',0,0,'W');
 80020a0:	4b2a      	ldr	r3, [pc, #168]	; (800214c <Create_Nodes+0xcf8>)
 80020a2:	2255      	movs	r2, #85	; 0x55
 80020a4:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
 80020a8:	4b28      	ldr	r3, [pc, #160]	; (800214c <Create_Nodes+0xcf8>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 22ed 	strb.w	r2, [r3, #749]	; 0x2ed
 80020b0:	4b26      	ldr	r3, [pc, #152]	; (800214c <Create_Nodes+0xcf8>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 22ee 	strb.w	r2, [r3, #750]	; 0x2ee
 80020b8:	4b24      	ldr	r3, [pc, #144]	; (800214c <Create_Nodes+0xcf8>)
 80020ba:	2257      	movs	r2, #87	; 0x57
 80020bc:	f883 22ef 	strb.w	r2, [r3, #751]	; 0x2ef
	VALUE(N('X').directions,1,0,0,1);
 80020c0:	4b22      	ldr	r3, [pc, #136]	; (800214c <Create_Nodes+0xcf8>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <Create_Nodes+0xcf8>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <Create_Nodes+0xcf8>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
 80020d8:	4b1c      	ldr	r3, [pc, #112]	; (800214c <Create_Nodes+0xcf8>)
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 22f3 	strb.w	r2, [r3, #755]	; 0x2f3
	VALUE(N('X').distance,371,0,0,189);
 80020e0:	4b1a      	ldr	r3, [pc, #104]	; (800214c <Create_Nodes+0xcf8>)
 80020e2:	f240 1273 	movw	r2, #371	; 0x173
 80020e6:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
 80020ea:	4b18      	ldr	r3, [pc, #96]	; (800214c <Create_Nodes+0xcf8>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	f8a3 22f6 	strh.w	r2, [r3, #758]	; 0x2f6
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <Create_Nodes+0xcf8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <Create_Nodes+0xcf8>)
 80020fc:	22bd      	movs	r2, #189	; 0xbd
 80020fe:	f8a3 22fa 	strh.w	r2, [r3, #762]	; 0x2fa
	N('X').middle=NEIGHBOUR1;
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <Create_Nodes+0xcf8>)
 8002104:	2200      	movs	r2, #0
 8002106:	f883 22fc 	strb.w	r2, [r3, #764]	; 0x2fc

	//Y node
	/**/N('Y').worth=0;
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <Create_Nodes+0xcf8>)
 800210c:	2200      	movs	r2, #0
 800210e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	N('Y').type=1;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <Create_Nodes+0xcf8>)
 8002114:	2201      	movs	r2, #1
 8002116:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	VALUE(N('Y').neighbours,'W',0,0,0);
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <Create_Nodes+0xcf8>)
 800211c:	2257      	movs	r2, #87	; 0x57
 800211e:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <Create_Nodes+0xcf8>)
 8002124:	2200      	movs	r2, #0
 8002126:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <Create_Nodes+0xcf8>)
 800212c:	2200      	movs	r2, #0
 800212e:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <Create_Nodes+0xcf8>)
 8002134:	2200      	movs	r2, #0
 8002136:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
	VALUE(N('Y').directions,1,0,0,0);
 800213a:	4b04      	ldr	r3, [pc, #16]	; (800214c <Create_Nodes+0xcf8>)
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
 8002142:	4b02      	ldr	r3, [pc, #8]	; (800214c <Create_Nodes+0xcf8>)
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
 800214a:	e001      	b.n	8002150 <Create_Nodes+0xcfc>
 800214c:	200002b0 	.word	0x200002b0
 8002150:	4b6c      	ldr	r3, [pc, #432]	; (8002304 <Create_Nodes+0xeb0>)
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
 8002158:	4b6a      	ldr	r3, [pc, #424]	; (8002304 <Create_Nodes+0xeb0>)
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
	VALUE(N('Y').distance,351,0,0,0);
 8002160:	4b68      	ldr	r3, [pc, #416]	; (8002304 <Create_Nodes+0xeb0>)
 8002162:	f240 125f 	movw	r2, #351	; 0x15f
 8002166:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
 800216a:	4b66      	ldr	r3, [pc, #408]	; (8002304 <Create_Nodes+0xeb0>)
 800216c:	2200      	movs	r2, #0
 800216e:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316
 8002172:	4b64      	ldr	r3, [pc, #400]	; (8002304 <Create_Nodes+0xeb0>)
 8002174:	2200      	movs	r2, #0
 8002176:	f8a3 2318 	strh.w	r2, [r3, #792]	; 0x318
 800217a:	4b62      	ldr	r3, [pc, #392]	; (8002304 <Create_Nodes+0xeb0>)
 800217c:	2200      	movs	r2, #0
 800217e:	f8a3 231a 	strh.w	r2, [r3, #794]	; 0x31a
	N('Y').middle=NEIGHBOUR1;
 8002182:	4b60      	ldr	r3, [pc, #384]	; (8002304 <Create_Nodes+0xeb0>)
 8002184:	2200      	movs	r2, #0
 8002186:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

	//Nodeértékek backup mentésből való visszatöltése
	if(SW2)//ha a kacsapoló2 a megfelelő állapotban van (világít a sárga LED)
 800218a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800218e:	485e      	ldr	r0, [pc, #376]	; (8002308 <Create_Nodes+0xeb4>)
 8002190:	f006 f822 	bl	80081d8 <HAL_GPIO_ReadPin>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8099 	beq.w	80022ce <Create_Nodes+0xe7a>
	{
		uint32_t check_flash = *(__IO uint32_t *) FLASH_ADDRESS_NODEWORTH; //tényleg ottvanak  flashbena megfelelő helyen a worth értékek?
 800219c:	4b5b      	ldr	r3, [pc, #364]	; (800230c <Create_Nodes+0xeb8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	66bb      	str	r3, [r7, #104]	; 0x68

		if(check_flash==0xffffffff)//nincs semmi a flashben
 80021a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d15d      	bne.n	8002266 <Create_Nodes+0xe12>
		{
			char str[]="Default worths because of FLASH ERROR!\n\r";
 80021aa:	4b59      	ldr	r3, [pc, #356]	; (8002310 <Create_Nodes+0xebc>)
 80021ac:	f107 040c 	add.w	r4, r7, #12
 80021b0:	461d      	mov	r5, r3
 80021b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021be:	c403      	stmia	r4!, {r0, r1}
 80021c0:	7022      	strb	r2, [r4, #0]
			HAL_UART_Transmit(huart_debugg,(uint8_t*) str, strlen(str), 10);
 80021c2:	f107 030c 	add.w	r3, r7, #12
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f822 	bl	8000210 <strlen>
 80021cc:	4603      	mov	r3, r0
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	f107 010c 	add.w	r1, r7, #12
 80021d4:	230a      	movs	r3, #10
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f008 fd69 	bl	800acae <HAL_UART_Transmit>
			HAL_FLASH_Unlock();
 80021dc:	f005 fcae 	bl	8007b3c <HAL_FLASH_Unlock>
			HAL_Delay(50);
 80021e0:	2032      	movs	r0, #50	; 0x32
 80021e2:	f004 f977 	bl	80064d4 <HAL_Delay>
			FLASH_Erase_Sector(6, FLASH_VOLTAGE_RANGE_3);
 80021e6:	2102      	movs	r1, #2
 80021e8:	2006      	movs	r0, #6
 80021ea:	f005 fe19 	bl	8007e20 <FLASH_Erase_Sector>
			HAL_Delay(50);
 80021ee:	2032      	movs	r0, #50	; 0x32
 80021f0:	f004 f970 	bl	80064d4 <HAL_Delay>
			HAL_FLASH_Lock();
 80021f4:	f005 fcc4 	bl	8007b80 <HAL_FLASH_Lock>
			HAL_Delay(50);
 80021f8:	2032      	movs	r0, #50	; 0x32
 80021fa:	f004 f96b 	bl	80064d4 <HAL_Delay>
			HAL_FLASH_Unlock();
 80021fe:	f005 fc9d 	bl	8007b3c <HAL_FLASH_Unlock>
			HAL_Delay(50);
 8002202:	2032      	movs	r0, #50	; 0x32
 8002204:	f004 f966 	bl	80064d4 <HAL_Delay>
			for(i=0;i<25;i++)
 8002208:	2300      	movs	r3, #0
 800220a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800220c:	e016      	b.n	800223c <Create_Nodes+0xde8>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+i, Nodes[i].worth);
 800220e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002210:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002214:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002218:	4619      	mov	r1, r3
 800221a:	4a3a      	ldr	r2, [pc, #232]	; (8002304 <Create_Nodes+0xeb0>)
 800221c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800221e:	015b      	lsls	r3, r3, #5
 8002220:	4413      	add	r3, r2
 8002222:	3304      	adds	r3, #4
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	17da      	asrs	r2, r3, #31
 8002228:	469a      	mov	sl, r3
 800222a:	4693      	mov	fp, r2
 800222c:	4652      	mov	r2, sl
 800222e:	465b      	mov	r3, fp
 8002230:	2000      	movs	r0, #0
 8002232:	f005 fc2f 	bl	8007a94 <HAL_FLASH_Program>
			for(i=0;i<25;i++)
 8002236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002238:	3301      	adds	r3, #1
 800223a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800223c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800223e:	2b18      	cmp	r3, #24
 8002240:	dde5      	ble.n	800220e <Create_Nodes+0xdba>
			}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+25, collectedPoints);
 8002242:	4b34      	ldr	r3, [pc, #208]	; (8002314 <Create_Nodes+0xec0>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2200      	movs	r2, #0
 800224a:	4698      	mov	r8, r3
 800224c:	4691      	mov	r9, r2
 800224e:	4642      	mov	r2, r8
 8002250:	464b      	mov	r3, r9
 8002252:	4931      	ldr	r1, [pc, #196]	; (8002318 <Create_Nodes+0xec4>)
 8002254:	2000      	movs	r0, #0
 8002256:	f005 fc1d 	bl	8007a94 <HAL_FLASH_Program>
			HAL_Delay(50);
 800225a:	2032      	movs	r0, #50	; 0x32
 800225c:	f004 f93a 	bl	80064d4 <HAL_Delay>
			HAL_FLASH_Lock();
 8002260:	f005 fc8e 	bl	8007b80 <HAL_FLASH_Lock>
 8002264:	e04a      	b.n	80022fc <Create_Nodes+0xea8>
			return; //ha nem akkor használjuk a default értékeket
		}
		for(i=0;i<25;i++)
 8002266:	2300      	movs	r3, #0
 8002268:	66fb      	str	r3, [r7, #108]	; 0x6c
 800226a:	e010      	b.n	800228e <Create_Nodes+0xe3a>
		{
			Nodes[i].worth=*(__IO uint8_t *) (FLASH_ADDRESS_NODEWORTH+i); //ha igen akkor töltsük be a backup mentést
 800226c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002272:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	4619      	mov	r1, r3
 800227c:	4a21      	ldr	r2, [pc, #132]	; (8002304 <Create_Nodes+0xeb0>)
 800227e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002280:	015b      	lsls	r3, r3, #5
 8002282:	4413      	add	r3, r2
 8002284:	3304      	adds	r3, #4
 8002286:	6019      	str	r1, [r3, #0]
		for(i=0;i<25;i++)
 8002288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228a:	3301      	adds	r3, #1
 800228c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800228e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002290:	2b18      	cmp	r3, #24
 8002292:	ddeb      	ble.n	800226c <Create_Nodes+0xe18>
		}
		collectedPoints=*(__IO uint8_t *) (FLASH_ADDRESS_NODEWORTH+25);
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <Create_Nodes+0xec4>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <Create_Nodes+0xec0>)
 800229c:	701a      	strb	r2, [r3, #0]
		char str[]="Worths from FLASH backup!\n\r";
 800229e:	4b1f      	ldr	r3, [pc, #124]	; (800231c <Create_Nodes+0xec8>)
 80022a0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80022a4:	461d      	mov	r5, r3
 80022a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit(huart_debugg,(uint8_t*) str, strlen(str), 10);
 80022b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fd ffaa 	bl	8000210 <strlen>
 80022bc:	4603      	mov	r3, r0
 80022be:	b29a      	uxth	r2, r3
 80022c0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80022c4:	230a      	movs	r3, #10
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f008 fcf1 	bl	800acae <HAL_UART_Transmit>
 80022cc:	e016      	b.n	80022fc <Create_Nodes+0xea8>
	}
	else
	{
		char str[]="Default worths!\n\r";
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <Create_Nodes+0xecc>)
 80022d0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80022d4:	461d      	mov	r5, r3
 80022d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(huart_debugg,(uint8_t*) str, strlen(str), 10);
 80022de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fd ff94 	bl	8000210 <strlen>
 80022e8:	4603      	mov	r3, r0
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022f0:	230a      	movs	r3, #10
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f008 fcdb 	bl	800acae <HAL_UART_Transmit>
 80022f8:	e000      	b.n	80022fc <Create_Nodes+0xea8>
	if(mode!=SKILL)return;
 80022fa:	bf00      	nop
	}
}
 80022fc:	3770      	adds	r7, #112	; 0x70
 80022fe:	46bd      	mov	sp, r7
 8002300:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002304:	200002b0 	.word	0x200002b0
 8002308:	40020400 	.word	0x40020400
 800230c:	08040000 	.word	0x08040000
 8002310:	08010174 	.word	0x08010174
 8002314:	2000029f 	.word	0x2000029f
 8002318:	08040019 	.word	0x08040019
 800231c:	080101a0 	.word	0x080101a0
 8002320:	080101bc 	.word	0x080101bc
 8002324:	00000000 	.word	0x00000000

08002328 <Control_Task>:


void Control_Task(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_rand,uint32_t tick, uint32_t period)
{
 8002328:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800232c:	b088      	sub	sp, #32
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	603b      	str	r3, [r7, #0]

	static uint32_t control_task_tick = 0;
	static uint8_t control_task_state=NEIGHBOUR1;//5 db állapot ->5.után megint 1.jön
	//szomszéd1,szomszéd2,szomszéd3,szomszéd4,kiértékelés

	uint8_t nID=0;
 8002338:	2300      	movs	r3, #0
 800233a:	76fb      	strb	r3, [r7, #27]

	if(control_task_tick>tick)return;
 800233c:	4ba6      	ldr	r3, [pc, #664]	; (80025d8 <Control_Task+0x2b0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	429a      	cmp	r2, r3
 8002344:	f0c0 8337 	bcc.w	80029b6 <Control_Task+0x68e>
	control_task_tick=tick+period;
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	4413      	add	r3, r2
 800234e:	4aa2      	ldr	r2, [pc, #648]	; (80025d8 <Control_Task+0x2b0>)
 8002350:	6013      	str	r3, [r2, #0]
	if(mode!=SKILL)return;
 8002352:	4ba2      	ldr	r3, [pc, #648]	; (80025dc <Control_Task+0x2b4>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b52      	cmp	r3, #82	; 0x52
 8002358:	f040 832f 	bne.w	80029ba <Control_Task+0x692>
	//if(!readytorace)return;

	//ha kapu nélküli nodeba tartunk éppen, akkor időzítéssel "detektáljuk" a nodot
	if(N(pos[MY]).type>2)
 800235c:	4ba0      	ldr	r3, [pc, #640]	; (80025e0 <Control_Task+0x2b8>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	3b41      	subs	r3, #65	; 0x41
 8002362:	4aa0      	ldr	r2, [pc, #640]	; (80025e4 <Control_Task+0x2bc>)
 8002364:	015b      	lsls	r3, r3, #5
 8002366:	4413      	add	r3, r2
 8002368:	3308      	adds	r3, #8
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d94c      	bls.n	800240a <Control_Task+0xe2>
	{
		s += (float)(tick-tick_prev)*fabs(v)/10000;
 8002370:	4b9d      	ldr	r3, [pc, #628]	; (80025e8 <Control_Task+0x2c0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe f907 	bl	8000588 <__aeabi_f2d>
 800237a:	4604      	mov	r4, r0
 800237c:	460d      	mov	r5, r1
 800237e:	4b9b      	ldr	r3, [pc, #620]	; (80025ec <Control_Task+0x2c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800238e:	ee17 0a90 	vmov	r0, s15
 8002392:	f7fe f8f9 	bl	8000588 <__aeabi_f2d>
 8002396:	4680      	mov	r8, r0
 8002398:	4689      	mov	r9, r1
 800239a:	4b95      	ldr	r3, [pc, #596]	; (80025f0 <Control_Task+0x2c8>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	eef0 7ae7 	vabs.f32	s15, s15
 80023a4:	ee17 0a90 	vmov	r0, s15
 80023a8:	f7fe f8ee 	bl	8000588 <__aeabi_f2d>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4640      	mov	r0, r8
 80023b2:	4649      	mov	r1, r9
 80023b4:	f7fe f940 	bl	8000638 <__aeabi_dmul>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	a383      	add	r3, pc, #524	; (adr r3, 80025d0 <Control_Task+0x2a8>)
 80023c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c6:	f7fe fa61 	bl	800088c <__aeabi_ddiv>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4620      	mov	r0, r4
 80023d0:	4629      	mov	r1, r5
 80023d2:	f7fd ff7b 	bl	80002cc <__adddf3>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f7fe fc03 	bl	8000be8 <__aeabi_d2f>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4a80      	ldr	r2, [pc, #512]	; (80025e8 <Control_Task+0x2c0>)
 80023e6:	6013      	str	r3, [r2, #0]
		if(s>sMAX)nodeDetected=1;
 80023e8:	4b82      	ldr	r3, [pc, #520]	; (80025f4 <Control_Task+0x2cc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	ee07 3a90 	vmov	s15, r3
 80023f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023f4:	4b7c      	ldr	r3, [pc, #496]	; (80025e8 <Control_Task+0x2c0>)
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	d502      	bpl.n	800240a <Control_Task+0xe2>
 8002404:	4b7c      	ldr	r3, [pc, #496]	; (80025f8 <Control_Task+0x2d0>)
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]

	}
	tick_prev=tick;//mostantól mérjük az időt
 800240a:	4a78      	ldr	r2, [pc, #480]	; (80025ec <Control_Task+0x2c4>)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6013      	str	r3, [r2, #0]

	//ha odaértünk a myPositionbe, akkor indulhat a mozgás a nextPosition felé
	if(nodeDetected)
 8002410:	4b79      	ldr	r3, [pc, #484]	; (80025f8 <Control_Task+0x2d0>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a9 	beq.w	800256c <Control_Task+0x244>
	{
		LED_B_TOGGLE;
 800241a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800241e:	4877      	ldr	r0, [pc, #476]	; (80025fc <Control_Task+0x2d4>)
 8002420:	f005 ff0b 	bl	800823a <HAL_GPIO_TogglePin>
		if(N(pos[NEXT]).type>2)//ha a kövi node-on nincs kapu
 8002424:	4b6e      	ldr	r3, [pc, #440]	; (80025e0 <Control_Task+0x2b8>)
 8002426:	785b      	ldrb	r3, [r3, #1]
 8002428:	3b41      	subs	r3, #65	; 0x41
 800242a:	4a6e      	ldr	r2, [pc, #440]	; (80025e4 <Control_Task+0x2bc>)
 800242c:	015b      	lsls	r3, r3, #5
 800242e:	4413      	add	r3, r2
 8002430:	3308      	adds	r3, #8
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d914      	bls.n	8002462 <Control_Task+0x13a>
		{
			s=0;
 8002438:	4b6b      	ldr	r3, [pc, #428]	; (80025e8 <Control_Task+0x2c0>)
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
			sMAX=N(pos[MY]).distance[bestNb[NEXT]]+25;
 8002440:	4b67      	ldr	r3, [pc, #412]	; (80025e0 <Control_Task+0x2b8>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	3b41      	subs	r3, #65	; 0x41
 8002446:	4a6e      	ldr	r2, [pc, #440]	; (8002600 <Control_Task+0x2d8>)
 8002448:	7852      	ldrb	r2, [r2, #1]
 800244a:	4611      	mov	r1, r2
 800244c:	4a65      	ldr	r2, [pc, #404]	; (80025e4 <Control_Task+0x2bc>)
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	440b      	add	r3, r1
 8002452:	3308      	adds	r3, #8
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	889b      	ldrh	r3, [r3, #4]
 800245a:	3319      	adds	r3, #25
 800245c:	461a      	mov	r2, r3
 800245e:	4b65      	ldr	r3, [pc, #404]	; (80025f4 <Control_Task+0x2cc>)
 8002460:	601a      	str	r2, [r3, #0]
		}

		//pontok nyugtázása
		if(!laneChange)//ha nem sávváltó üzemmódban vagyunk pontotszámolunk és felszedett kapukat nullázzuk
 8002462:	4b68      	ldr	r3, [pc, #416]	; (8002604 <Control_Task+0x2dc>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d117      	bne.n	800249a <Control_Task+0x172>
		{
			collectedPoints +=N(pos[MY]).worth;//sávváltás módik vizsgáljuk az össezgyűjtött kapuk számát
 800246a:	4b5d      	ldr	r3, [pc, #372]	; (80025e0 <Control_Task+0x2b8>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	3b41      	subs	r3, #65	; 0x41
 8002470:	4a5c      	ldr	r2, [pc, #368]	; (80025e4 <Control_Task+0x2bc>)
 8002472:	015b      	lsls	r3, r3, #5
 8002474:	4413      	add	r3, r2
 8002476:	3304      	adds	r3, #4
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b62      	ldr	r3, [pc, #392]	; (8002608 <Control_Task+0x2e0>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4413      	add	r3, r2
 8002482:	b2da      	uxtb	r2, r3
 8002484:	4b60      	ldr	r3, [pc, #384]	; (8002608 <Control_Task+0x2e0>)
 8002486:	701a      	strb	r2, [r3, #0]
			N(pos[MY]).worth=0;//ez a kapu már nem ér pontot
 8002488:	4b55      	ldr	r3, [pc, #340]	; (80025e0 <Control_Task+0x2b8>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	3b41      	subs	r3, #65	; 0x41
 800248e:	4a55      	ldr	r2, [pc, #340]	; (80025e4 <Control_Task+0x2bc>)
 8002490:	015b      	lsls	r3, r3, #5
 8002492:	4413      	add	r3, r2
 8002494:	3304      	adds	r3, #4
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
		}

		if(collectedPoints >= 34 && !laneChange) //átváltás lane change módba
 800249a:	4b5b      	ldr	r3, [pc, #364]	; (8002608 <Control_Task+0x2e0>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b21      	cmp	r3, #33	; 0x21
 80024a0:	d90e      	bls.n	80024c0 <Control_Task+0x198>
 80024a2:	4b58      	ldr	r3, [pc, #352]	; (8002604 <Control_Task+0x2dc>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10a      	bne.n	80024c0 <Control_Task+0x198>
		{
			laneChange=1; //flag állítás
 80024aa:	4b56      	ldr	r3, [pc, #344]	; (8002604 <Control_Task+0x2dc>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
			Lane_Change_Init(); //a sávváltóhely felé nőnek a rewardok
 80024b0:	f000 fc5c 	bl	8002d6c <Lane_Change_Init>
			LED_Y(1); //sárga led világít
 80024b4:	2200      	movs	r2, #0
 80024b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ba:	4850      	ldr	r0, [pc, #320]	; (80025fc <Control_Task+0x2d4>)
 80024bc:	f005 fea4 	bl	8008208 <HAL_GPIO_WritePin>
		}

		if(laneChange==1 && pos[MY]=='N' && pos[NEXT]=='Q')//ha a tett színhelyén vagyunk
 80024c0:	4b50      	ldr	r3, [pc, #320]	; (8002604 <Control_Task+0x2dc>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d10a      	bne.n	80024de <Control_Task+0x1b6>
 80024c8:	4b45      	ldr	r3, [pc, #276]	; (80025e0 <Control_Task+0x2b8>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b4e      	cmp	r3, #78	; 0x4e
 80024ce:	d106      	bne.n	80024de <Control_Task+0x1b6>
 80024d0:	4b43      	ldr	r3, [pc, #268]	; (80025e0 <Control_Task+0x2b8>)
 80024d2:	785b      	ldrb	r3, [r3, #1]
 80024d4:	2b51      	cmp	r3, #81	; 0x51
 80024d6:	d102      	bne.n	80024de <Control_Task+0x1b6>
		{
			laneChange=2;
 80024d8:	4b4a      	ldr	r3, [pc, #296]	; (8002604 <Control_Task+0x2dc>)
 80024da:	2202      	movs	r2, #2
 80024dc:	701a      	strb	r2, [r3, #0]
		}

		static char str[15]; //kiiratás
		sprintf(str,"d,d,%2d\n\r",(int)collectedPoints);
 80024de:	4b4a      	ldr	r3, [pc, #296]	; (8002608 <Control_Task+0x2e0>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	4949      	ldr	r1, [pc, #292]	; (800260c <Control_Task+0x2e4>)
 80024e6:	484a      	ldr	r0, [pc, #296]	; (8002610 <Control_Task+0x2e8>)
 80024e8:	f00a f94a 	bl	800c780 <siprintf>
		str[0]=pos[MY];
 80024ec:	4b3c      	ldr	r3, [pc, #240]	; (80025e0 <Control_Task+0x2b8>)
 80024ee:	781a      	ldrb	r2, [r3, #0]
 80024f0:	4b47      	ldr	r3, [pc, #284]	; (8002610 <Control_Task+0x2e8>)
 80024f2:	701a      	strb	r2, [r3, #0]
		str[2]=pos[NEXT];
 80024f4:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <Control_Task+0x2b8>)
 80024f6:	785a      	ldrb	r2, [r3, #1]
 80024f8:	4b45      	ldr	r3, [pc, #276]	; (8002610 <Control_Task+0x2e8>)
 80024fa:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(huart_debugg, (uint8_t*)str, strlen(str), 2);
 80024fc:	4844      	ldr	r0, [pc, #272]	; (8002610 <Control_Task+0x2e8>)
 80024fe:	f7fd fe87 	bl	8000210 <strlen>
 8002502:	4603      	mov	r3, r0
 8002504:	b29a      	uxth	r2, r3
 8002506:	2302      	movs	r3, #2
 8002508:	4941      	ldr	r1, [pc, #260]	; (8002610 <Control_Task+0x2e8>)
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f008 fbcf 	bl	800acae <HAL_UART_Transmit>

		if(Cross_Collision(pos[MY], pos[NEXT]))
 8002510:	4b33      	ldr	r3, [pc, #204]	; (80025e0 <Control_Task+0x2b8>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4a32      	ldr	r2, [pc, #200]	; (80025e0 <Control_Task+0x2b8>)
 8002516:	7852      	ldrb	r2, [r2, #1]
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fcb2 	bl	8002e84 <Cross_Collision>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00b      	beq.n	800253e <Control_Task+0x216>
		{
			control_task_state = WAIT;
 8002526:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <Control_Task+0x2ec>)
 8002528:	2205      	movs	r2, #5
 800252a:	701a      	strb	r2, [r3, #0]
			t_stamp=tick;
 800252c:	4a3a      	ldr	r2, [pc, #232]	; (8002618 <Control_Task+0x2f0>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6013      	str	r3, [r2, #0]
			LED_G(1);
 8002532:	2200      	movs	r2, #0
 8002534:	2102      	movs	r1, #2
 8002536:	4831      	ldr	r0, [pc, #196]	; (80025fc <Control_Task+0x2d4>)
 8002538:	f005 fe66 	bl	8008208 <HAL_GPIO_WritePin>
 800253c:	e002      	b.n	8002544 <Control_Task+0x21c>
		}
		else control_task_state = NEIGHBOUR1;
 800253e:	4b35      	ldr	r3, [pc, #212]	; (8002614 <Control_Task+0x2ec>)
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]

		pos[MY]=pos[NEXT];
 8002544:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <Control_Task+0x2b8>)
 8002546:	785a      	ldrb	r2, [r3, #1]
 8002548:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <Control_Task+0x2b8>)
 800254a:	701a      	strb	r2, [r3, #0]
		path=nextPath;
 800254c:	4b33      	ldr	r3, [pc, #204]	; (800261c <Control_Task+0x2f4>)
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	4b33      	ldr	r3, [pc, #204]	; (8002620 <Control_Task+0x2f8>)
 8002552:	701a      	strb	r2, [r3, #0]
		dir[MY]=dir[NEXT];
 8002554:	4b33      	ldr	r3, [pc, #204]	; (8002624 <Control_Task+0x2fc>)
 8002556:	785a      	ldrb	r2, [r3, #1]
 8002558:	4b32      	ldr	r3, [pc, #200]	; (8002624 <Control_Task+0x2fc>)
 800255a:	701a      	strb	r2, [r3, #0]
		orientation=nextOri;//FORWARD
 800255c:	4b32      	ldr	r3, [pc, #200]	; (8002628 <Control_Task+0x300>)
 800255e:	781a      	ldrb	r2, [r3, #0]
 8002560:	4b32      	ldr	r3, [pc, #200]	; (800262c <Control_Task+0x304>)
 8002562:	701a      	strb	r2, [r3, #0]

		nodeDetected=0;
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <Control_Task+0x2d0>)
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
		return;
 800256a:	e229      	b.n	80029c0 <Control_Task+0x698>
	}

	if(thunderboardFlag)//ha új kalózpozíció jött a TB-től ujrakezdjük a számolást (első szomszéd vizsgálata jön)
 800256c:	4b30      	ldr	r3, [pc, #192]	; (8002630 <Control_Task+0x308>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8085 	beq.w	8002682 <Control_Task+0x35a>
	{
		if(piratePos_prev[1]!=piratePos[1] && !laneChange)//a kalóz átment egy Node-on
 8002578:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <Control_Task+0x30c>)
 800257a:	785a      	ldrb	r2, [r3, #1]
 800257c:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <Control_Task+0x310>)
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	429a      	cmp	r2, r3
 8002582:	d064      	beq.n	800264e <Control_Task+0x326>
 8002584:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <Control_Task+0x2dc>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d160      	bne.n	800264e <Control_Task+0x326>
		{
			if(N(piratePos[0]).worth > 0)
 800258c:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <Control_Task+0x310>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	3b41      	subs	r3, #65	; 0x41
 8002592:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <Control_Task+0x2bc>)
 8002594:	015b      	lsls	r3, r3, #5
 8002596:	4413      	add	r3, r2
 8002598:	3304      	adds	r3, #4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	dd4d      	ble.n	800263c <Control_Task+0x314>
			{
				N(piratePos[0]).worth--; //az a node már kevesebbet ér
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <Control_Task+0x310>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	3b41      	subs	r3, #65	; 0x41
 80025a6:	490f      	ldr	r1, [pc, #60]	; (80025e4 <Control_Task+0x2bc>)
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	440a      	add	r2, r1
 80025ac:	3204      	adds	r2, #4
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	3a01      	subs	r2, #1
 80025b2:	490c      	ldr	r1, [pc, #48]	; (80025e4 <Control_Task+0x2bc>)
 80025b4:	015b      	lsls	r3, r3, #5
 80025b6:	440b      	add	r3, r1
 80025b8:	3304      	adds	r3, #4
 80025ba:	601a      	str	r2, [r3, #0]
				collectedPoints ++;
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <Control_Task+0x2e0>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	4b10      	ldr	r3, [pc, #64]	; (8002608 <Control_Task+0x2e0>)
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	e041      	b.n	800264e <Control_Task+0x326>
 80025ca:	bf00      	nop
 80025cc:	f3af 8000 	nop.w
 80025d0:	00000000 	.word	0x00000000
 80025d4:	40c38800 	.word	0x40c38800
 80025d8:	200005d0 	.word	0x200005d0
 80025dc:	20000292 	.word	0x20000292
 80025e0:	20000000 	.word	0x20000000
 80025e4:	200002b0 	.word	0x200002b0
 80025e8:	200005d4 	.word	0x200005d4
 80025ec:	200005d8 	.word	0x200005d8
 80025f0:	2000060c 	.word	0x2000060c
 80025f4:	20000004 	.word	0x20000004
 80025f8:	2000029d 	.word	0x2000029d
 80025fc:	40020400 	.word	0x40020400
 8002600:	200005dc 	.word	0x200005dc
 8002604:	200002a0 	.word	0x200002a0
 8002608:	2000029f 	.word	0x2000029f
 800260c:	080101d0 	.word	0x080101d0
 8002610:	200005e0 	.word	0x200005e0
 8002614:	200005ef 	.word	0x200005ef
 8002618:	200005f0 	.word	0x200005f0
 800261c:	200005f4 	.word	0x200005f4
 8002620:	2000029e 	.word	0x2000029e
 8002624:	20000008 	.word	0x20000008
 8002628:	200005f5 	.word	0x200005f5
 800262c:	2000029c 	.word	0x2000029c
 8002630:	200002a2 	.word	0x200002a2
 8002634:	2000000c 	.word	0x2000000c
 8002638:	200002ac 	.word	0x200002ac
			}
			else N(piratePos[0]).worth=0;
 800263c:	4ba5      	ldr	r3, [pc, #660]	; (80028d4 <Control_Task+0x5ac>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	3b41      	subs	r3, #65	; 0x41
 8002642:	4aa5      	ldr	r2, [pc, #660]	; (80028d8 <Control_Task+0x5b0>)
 8002644:	015b      	lsls	r3, r3, #5
 8002646:	4413      	add	r3, r2
 8002648:	3304      	adds	r3, #4
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
		}
		if(control_task_state!=WAIT)//wait állapotból nem tud mindekt kibillenteni az új kalózrobot pozíció
 800264e:	4ba3      	ldr	r3, [pc, #652]	; (80028dc <Control_Task+0x5b4>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b05      	cmp	r3, #5
 8002654:	d002      	beq.n	800265c <Control_Task+0x334>
			control_task_state=NEIGHBOUR1;//kezdjük előrröl a fitneszérték számítást az 1. szomszédtól
 8002656:	4ba1      	ldr	r3, [pc, #644]	; (80028dc <Control_Task+0x5b4>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]

		piratePos_prev[0]=piratePos[0];//előző kalozpozíció frissítése
 800265c:	4b9d      	ldr	r3, [pc, #628]	; (80028d4 <Control_Task+0x5ac>)
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	4b9f      	ldr	r3, [pc, #636]	; (80028e0 <Control_Task+0x5b8>)
 8002662:	701a      	strb	r2, [r3, #0]
		piratePos_prev[1]=piratePos[1];
 8002664:	4b9b      	ldr	r3, [pc, #620]	; (80028d4 <Control_Task+0x5ac>)
 8002666:	785a      	ldrb	r2, [r3, #1]
 8002668:	4b9d      	ldr	r3, [pc, #628]	; (80028e0 <Control_Task+0x5b8>)
 800266a:	705a      	strb	r2, [r3, #1]
		piratePos_prev[2]=piratePos[2];
 800266c:	4b99      	ldr	r3, [pc, #612]	; (80028d4 <Control_Task+0x5ac>)
 800266e:	789a      	ldrb	r2, [r3, #2]
 8002670:	4b9b      	ldr	r3, [pc, #620]	; (80028e0 <Control_Task+0x5b8>)
 8002672:	709a      	strb	r2, [r3, #2]
		piratePos_prev[3]=piratePos[3];
 8002674:	4b97      	ldr	r3, [pc, #604]	; (80028d4 <Control_Task+0x5ac>)
 8002676:	78da      	ldrb	r2, [r3, #3]
 8002678:	4b99      	ldr	r3, [pc, #612]	; (80028e0 <Control_Task+0x5b8>)
 800267a:	70da      	strb	r2, [r3, #3]

		thunderboardFlag=0; //várjuk az újabb kalózrobot pozíciókat a thunderboardtól
 800267c:	4b99      	ldr	r3, [pc, #612]	; (80028e4 <Control_Task+0x5bc>)
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
	str[15]=control_task_state+0x30;
	HAL_UART_Transmit(huart_debugg, (uint8_t*)str, strlen(str), 2);
#endif

	/******************LEGJOBB SZOMSZÉD KIVÁLASZTÁSA (első 4 állapot)******************/
	if(control_task_state < EVALUATE)//1.szomszéd/2.szomszéd/3.szomszéd/4.szomszéd
 8002682:	4b96      	ldr	r3, [pc, #600]	; (80028dc <Control_Task+0x5b4>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b03      	cmp	r3, #3
 8002688:	f200 80c8 	bhi.w	800281c <Control_Task+0x4f4>
	{
		if(control_task_state==NEIGHBOUR1)
 800268c:	4b93      	ldr	r3, [pc, #588]	; (80028dc <Control_Task+0x5b4>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <Control_Task+0x372>
		{
			bestFitness=-100.0;//az előző számolás legjob fitneszértéke volt még benne
 8002694:	4b94      	ldr	r3, [pc, #592]	; (80028e8 <Control_Task+0x5c0>)
 8002696:	4a95      	ldr	r2, [pc, #596]	; (80028ec <Control_Task+0x5c4>)
 8002698:	601a      	str	r2, [r3, #0]
		}
		nID=N(pos[MY]).neighbours[control_task_state]; //a vizsgált 1.rendű szomszéd azonosítója
 800269a:	4b95      	ldr	r3, [pc, #596]	; (80028f0 <Control_Task+0x5c8>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	3b41      	subs	r3, #65	; 0x41
 80026a0:	4a8e      	ldr	r2, [pc, #568]	; (80028dc <Control_Task+0x5b4>)
 80026a2:	7812      	ldrb	r2, [r2, #0]
 80026a4:	4611      	mov	r1, r2
 80026a6:	4a8c      	ldr	r2, [pc, #560]	; (80028d8 <Control_Task+0x5b0>)
 80026a8:	015b      	lsls	r3, r3, #5
 80026aa:	4413      	add	r3, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	330c      	adds	r3, #12
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	76fb      	strb	r3, [r7, #27]
		if(nID) //ha létezik a szomszéd
 80026b4:	7efb      	ldrb	r3, [r7, #27]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8087 	beq.w	80027ca <Control_Task+0x4a2>
		{
			fitness[control_task_state]=(float)N(nID).worth; //fitneszérték 1.rendű szomszéd alapján
 80026bc:	7efb      	ldrb	r3, [r7, #27]
 80026be:	3b41      	subs	r3, #65	; 0x41
 80026c0:	4a85      	ldr	r2, [pc, #532]	; (80028d8 <Control_Task+0x5b0>)
 80026c2:	015b      	lsls	r3, r3, #5
 80026c4:	4413      	add	r3, r2
 80026c6:	3304      	adds	r3, #4
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4b84      	ldr	r3, [pc, #528]	; (80028dc <Control_Task+0x5b4>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	ee07 2a90 	vmov	s15, r2
 80026d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d6:	4a87      	ldr	r2, [pc, #540]	; (80028f4 <Control_Task+0x5cc>)
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	edc3 7a00 	vstr	s15, [r3]
			//kalozrobot hatása az 1.rendű szomszéd esetén
			if(piratePos[1]==nID) fitness[control_task_state] -= 80/*P*/;//ha a kalóz is ebbe az 1.rendű tart éppen akkor kerüljük el az ütközést
 80026e0:	4b7c      	ldr	r3, [pc, #496]	; (80028d4 <Control_Task+0x5ac>)
 80026e2:	785b      	ldrb	r3, [r3, #1]
 80026e4:	7efa      	ldrb	r2, [r7, #27]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d112      	bne.n	8002710 <Control_Task+0x3e8>
 80026ea:	4b7c      	ldr	r3, [pc, #496]	; (80028dc <Control_Task+0x5b4>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	4a81      	ldr	r2, [pc, #516]	; (80028f4 <Control_Task+0x5cc>)
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	edd3 7a00 	vldr	s15, [r3]
 80026f8:	4b78      	ldr	r3, [pc, #480]	; (80028dc <Control_Task+0x5b4>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80028f8 <Control_Task+0x5d0>
 8002700:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002704:	4a7b      	ldr	r2, [pc, #492]	; (80028f4 <Control_Task+0x5cc>)
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	edc3 7a00 	vstr	s15, [r3]
 800270e:	e016      	b.n	800273e <Control_Task+0x416>
			else if(piratePos[2]==nID) fitness[control_task_state] -= 60/*P*/;//ha még csak tervezi, hogy odamegy, akkor is kerüljük a pontot
 8002710:	4b70      	ldr	r3, [pc, #448]	; (80028d4 <Control_Task+0x5ac>)
 8002712:	789b      	ldrb	r3, [r3, #2]
 8002714:	7efa      	ldrb	r2, [r7, #27]
 8002716:	429a      	cmp	r2, r3
 8002718:	d111      	bne.n	800273e <Control_Task+0x416>
 800271a:	4b70      	ldr	r3, [pc, #448]	; (80028dc <Control_Task+0x5b4>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	4a75      	ldr	r2, [pc, #468]	; (80028f4 <Control_Task+0x5cc>)
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	edd3 7a00 	vldr	s15, [r3]
 8002728:	4b6c      	ldr	r3, [pc, #432]	; (80028dc <Control_Task+0x5b4>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80028fc <Control_Task+0x5d4>
 8002730:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002734:	4a6f      	ldr	r2, [pc, #444]	; (80028f4 <Control_Task+0x5cc>)
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	edc3 7a00 	vstr	s15, [r3]
			int i;
			uint8_t nnID;
			float nnFit;
			for(i=0;i<4;i++)//2.rednű szomszédok
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	e03e      	b.n	80027c2 <Control_Task+0x49a>
			{
				nnFit=0.0;
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
				nnID=N(nID).neighbours[i]; //2.rednű szomszéd ID-ja
 800274a:	7efb      	ldrb	r3, [r7, #27]
 800274c:	3b41      	subs	r3, #65	; 0x41
 800274e:	4a62      	ldr	r2, [pc, #392]	; (80028d8 <Control_Task+0x5b0>)
 8002750:	015b      	lsls	r3, r3, #5
 8002752:	441a      	add	r2, r3
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	330c      	adds	r3, #12
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	74fb      	strb	r3, [r7, #19]
				if(nnID && nnID!=pos[MY])//ha létezik a 2.rendű szomszéd (és nem a myposition az)
 800275e:	7cfb      	ldrb	r3, [r7, #19]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d02b      	beq.n	80027bc <Control_Task+0x494>
 8002764:	4b62      	ldr	r3, [pc, #392]	; (80028f0 <Control_Task+0x5c8>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	7cfa      	ldrb	r2, [r7, #19]
 800276a:	429a      	cmp	r2, r3
 800276c:	d026      	beq.n	80027bc <Control_Task+0x494>
				{
					nnFit += (float)N(nnID).worth;
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	3b41      	subs	r3, #65	; 0x41
 8002772:	4a59      	ldr	r2, [pc, #356]	; (80028d8 <Control_Task+0x5b0>)
 8002774:	015b      	lsls	r3, r3, #5
 8002776:	4413      	add	r3, r2
 8002778:	3304      	adds	r3, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002784:	ed97 7a05 	vldr	s14, [r7, #20]
 8002788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278c:	edc7 7a05 	vstr	s15, [r7, #20]
					//if(piratePos[1]==nnID) nnFit -= 0.5/*P*/;//ha a kalóz is ebbe a pontba tart éppen akkor kerüljük el az ütközést
					//else if(piratePos[2]==nnID) fitness[control_task_state] -= 0.25/*P*/;//ha még csak tervezi, hogy odamegy, akkor se fogjuk tudni megelőnzi, mert mi 3 nodnyira vagyunk ő pedig csak 2
					//if(!lane_change)nnFit = nnFit * (float)DIST_AVG/N(nID).distance[i];//a 2.rendű szomszédhoz tartozó fitneszérték jobb ha az közelebb van az 1.rendű szomszédjához
					//ha a sávváltó szakaszt keressük akkor viszont nem díjazzuk a közelséget
					fitness[control_task_state] += nnFit/4/*P*/;
 8002790:	4b52      	ldr	r3, [pc, #328]	; (80028dc <Control_Task+0x5b4>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	4a57      	ldr	r2, [pc, #348]	; (80028f4 <Control_Task+0x5cc>)
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	ed93 7a00 	vldr	s14, [r3]
 800279e:	edd7 6a05 	vldr	s13, [r7, #20]
 80027a2:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 80027a6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027aa:	4b4c      	ldr	r3, [pc, #304]	; (80028dc <Control_Task+0x5b4>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b2:	4a50      	ldr	r2, [pc, #320]	; (80028f4 <Control_Task+0x5cc>)
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	edc3 7a00 	vstr	s15, [r3]
			for(i=0;i<4;i++)//2.rednű szomszédok
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	3301      	adds	r3, #1
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	ddbd      	ble.n	8002744 <Control_Task+0x41c>
 80027c8:	e006      	b.n	80027d8 <Control_Task+0x4b0>
			}
			//if(!lane_change) fitness[control_task_state] =fitness[control_task_state] * (float)DIST_AVG/N(pos[MY]).distance[control_task_state]; //minél közelebb van a szomszéd annál jobb
			//ha a sávváltó szakaszt keressük akkor viszont nem díjazzuk a közelséget

		}
		else fitness[control_task_state]=-150.0;//ha nem létezik a szomszéd erre tuti ne menjünk
 80027ca:	4b44      	ldr	r3, [pc, #272]	; (80028dc <Control_Task+0x5b4>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	4a49      	ldr	r2, [pc, #292]	; (80028f4 <Control_Task+0x5cc>)
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	4a4a      	ldr	r2, [pc, #296]	; (8002900 <Control_Task+0x5d8>)
 80027d6:	601a      	str	r2, [r3, #0]
		//uint16_t tmp= __HAL_TIM_GET_COUNTER(htim_rand)%2;
		if(fitness[control_task_state]>=bestFitness) //ha ez a fitness jobb mint az eddigi legjobb, akkor mostantól ez a legjobb
 80027d8:	4b40      	ldr	r3, [pc, #256]	; (80028dc <Control_Task+0x5b4>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	4a45      	ldr	r2, [pc, #276]	; (80028f4 <Control_Task+0x5cc>)
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	ed93 7a00 	vldr	s14, [r3]
 80027e6:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <Control_Task+0x5c0>)
 80027e8:	edd3 7a00 	vldr	s15, [r3]
 80027ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f4:	db0b      	blt.n	800280e <Control_Task+0x4e6>
		{
			bestFitness=fitness[control_task_state];
 80027f6:	4b39      	ldr	r3, [pc, #228]	; (80028dc <Control_Task+0x5b4>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	4a3e      	ldr	r2, [pc, #248]	; (80028f4 <Control_Task+0x5cc>)
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a39      	ldr	r2, [pc, #228]	; (80028e8 <Control_Task+0x5c0>)
 8002804:	6013      	str	r3, [r2, #0]
			bestNb[TMP] = control_task_state;//ez az egy érték amivel a task első 4 (fitnesszámoló) álapota kommunikál a kiértékelő álapottal
 8002806:	4b35      	ldr	r3, [pc, #212]	; (80028dc <Control_Task+0x5b4>)
 8002808:	781a      	ldrb	r2, [r3, #0]
 800280a:	4b3e      	ldr	r3, [pc, #248]	; (8002904 <Control_Task+0x5dc>)
 800280c:	701a      	strb	r2, [r3, #0]
		}
		control_task_state++;
 800280e:	4b33      	ldr	r3, [pc, #204]	; (80028dc <Control_Task+0x5b4>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	3301      	adds	r3, #1
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4b31      	ldr	r3, [pc, #196]	; (80028dc <Control_Task+0x5b4>)
 8002818:	701a      	strb	r2, [r3, #0]
		return; //ha csak valamelyik szomszédot vizsgáltuk még akkor eddig tartott ez a task futás, itt kilépünk
 800281a:	e0d1      	b.n	80029c0 <Control_Task+0x698>
	}
	/**************************************************************************************/
	//ide csak akkor jutunk el ha control_task_state>NEIGHBOUR4

	/**********************KIÉRTÉKELÉS (control_task_state=EVALUATE ->5.állapot)**********************/
	else if(control_task_state==EVALUATE)
 800281c:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <Control_Task+0x5b4>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b04      	cmp	r3, #4
 8002822:	f040 80aa 	bne.w	800297a <Control_Task+0x652>
	{
		if(bestFitness==0.0 && fitness[N(pos[MY]).middle]==0.0) bestNb[TMP]=N(pos[MY]).middle;
 8002826:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <Control_Task+0x5c0>)
 8002828:	edd3 7a00 	vldr	s15, [r3]
 800282c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002834:	d11b      	bne.n	800286e <Control_Task+0x546>
 8002836:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <Control_Task+0x5c8>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	3b41      	subs	r3, #65	; 0x41
 800283c:	4a26      	ldr	r2, [pc, #152]	; (80028d8 <Control_Task+0x5b0>)
 800283e:	015b      	lsls	r3, r3, #5
 8002840:	4413      	add	r3, r2
 8002842:	331c      	adds	r3, #28
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	4a2b      	ldr	r2, [pc, #172]	; (80028f4 <Control_Task+0x5cc>)
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	edd3 7a00 	vldr	s15, [r3]
 8002850:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002858:	d109      	bne.n	800286e <Control_Task+0x546>
 800285a:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <Control_Task+0x5c8>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	3b41      	subs	r3, #65	; 0x41
 8002860:	4a1d      	ldr	r2, [pc, #116]	; (80028d8 <Control_Task+0x5b0>)
 8002862:	015b      	lsls	r3, r3, #5
 8002864:	4413      	add	r3, r2
 8002866:	331c      	adds	r3, #28
 8002868:	781a      	ldrb	r2, [r3, #0]
 800286a:	4b26      	ldr	r3, [pc, #152]	; (8002904 <Control_Task+0x5dc>)
 800286c:	701a      	strb	r2, [r3, #0]
		bestNb[NEXT]=bestNb[TMP];
 800286e:	4b25      	ldr	r3, [pc, #148]	; (8002904 <Control_Task+0x5dc>)
 8002870:	781a      	ldrb	r2, [r3, #0]
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <Control_Task+0x5dc>)
 8002874:	705a      	strb	r2, [r3, #1]
		pos[NEXT]=N(pos[MY]).neighbours[bestNb[NEXT]];//a következő poziciónk a legjobb szomszéd lesz
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <Control_Task+0x5c8>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	3b41      	subs	r3, #65	; 0x41
 800287c:	4a21      	ldr	r2, [pc, #132]	; (8002904 <Control_Task+0x5dc>)
 800287e:	7852      	ldrb	r2, [r2, #1]
 8002880:	4611      	mov	r1, r2
 8002882:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <Control_Task+0x5b0>)
 8002884:	015b      	lsls	r3, r3, #5
 8002886:	4413      	add	r3, r2
 8002888:	440b      	add	r3, r1
 800288a:	330c      	adds	r3, #12
 800288c:	781a      	ldrb	r2, [r3, #0]
 800288e:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <Control_Task+0x5c8>)
 8002890:	705a      	strb	r2, [r3, #1]
		dir[NEXT]=N(pos[MY]).directions[bestNb[NEXT]];//már most tudjuk, mi lesz az irányunk, ha odaértünk
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <Control_Task+0x5c8>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	3b41      	subs	r3, #65	; 0x41
 8002898:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <Control_Task+0x5dc>)
 800289a:	7852      	ldrb	r2, [r2, #1]
 800289c:	4611      	mov	r1, r2
 800289e:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <Control_Task+0x5b0>)
 80028a0:	015b      	lsls	r3, r3, #5
 80028a2:	4413      	add	r3, r2
 80028a4:	440b      	add	r3, r1
 80028a6:	3310      	adds	r3, #16
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <Control_Task+0x5e0>)
 80028ac:	705a      	strb	r2, [r3, #1]

		//a kocsi az egyik node-ból átmegy egy másikba-> az irányok segítségével meghatározzu az új orientationt
		if(bestNb[NEXT] <= NEIGHBOUR2) //ha balra/le kell majd mennünk a nextPosition -höz
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <Control_Task+0x5dc>)
 80028b0:	785b      	ldrb	r3, [r3, #1]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d833      	bhi.n	800291e <Control_Task+0x5f6>
		{
			if(dir[MY]==2)//és eddig jobbra/fel mentünk,
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <Control_Task+0x5e0>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d12a      	bne.n	8002914 <Control_Task+0x5ec>
				nextOri = !orientation;//akkor most orientációt kell váltanunk
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <Control_Task+0x5e4>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <Control_Task+0x5e8>)
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e037      	b.n	8002944 <Control_Task+0x61c>
 80028d4:	200002ac 	.word	0x200002ac
 80028d8:	200002b0 	.word	0x200002b0
 80028dc:	200005ef 	.word	0x200005ef
 80028e0:	2000000c 	.word	0x2000000c
 80028e4:	200002a2 	.word	0x200002a2
 80028e8:	20000010 	.word	0x20000010
 80028ec:	c2c80000 	.word	0xc2c80000
 80028f0:	20000000 	.word	0x20000000
 80028f4:	200005f8 	.word	0x200005f8
 80028f8:	42a00000 	.word	0x42a00000
 80028fc:	42700000 	.word	0x42700000
 8002900:	c3160000 	.word	0xc3160000
 8002904:	200005dc 	.word	0x200005dc
 8002908:	20000008 	.word	0x20000008
 800290c:	2000029c 	.word	0x2000029c
 8002910:	200005f5 	.word	0x200005f5
			else nextOri = orientation; //különben nem kell
 8002914:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <Control_Task+0x6a0>)
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <Control_Task+0x6a4>)
 800291a:	701a      	strb	r2, [r3, #0]
 800291c:	e012      	b.n	8002944 <Control_Task+0x61c>
		}
		else //ha jobbra kell majd mennünk
		{
			if(dir[MY]==1)//és eddig jobbra/fel mentünk,
 800291e:	4b2c      	ldr	r3, [pc, #176]	; (80029d0 <Control_Task+0x6a8>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d10a      	bne.n	800293c <Control_Task+0x614>
				nextOri =! orientation;//akkor most irányt kell váltanunk
 8002926:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <Control_Task+0x6a0>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf0c      	ite	eq
 800292e:	2301      	moveq	r3, #1
 8002930:	2300      	movne	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	4b25      	ldr	r3, [pc, #148]	; (80029cc <Control_Task+0x6a4>)
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	e003      	b.n	8002944 <Control_Task+0x61c>
			else nextOri = orientation; //különben nem kell
 800293c:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <Control_Task+0x6a0>)
 800293e:	781a      	ldrb	r2, [r3, #0]
 8002940:	4b22      	ldr	r3, [pc, #136]	; (80029cc <Control_Task+0x6a4>)
 8002942:	701a      	strb	r2, [r3, #0]
		}

		//path kiválasztás -> az orientációt mostmár tudjuk (tolatás/előre), már csak az ösvény kell kivákasztani, hogy a megfelelő szomszédhoz jussunk

		if(bestNb[NEXT]==NEIGHBOUR1 || bestNb[NEXT]==NEIGHBOUR3)nextPath=LEFT;
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <Control_Task+0x6ac>)
 8002946:	785b      	ldrb	r3, [r3, #1]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <Control_Task+0x62c>
 800294c:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <Control_Task+0x6ac>)
 800294e:	785b      	ldrb	r3, [r3, #1]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d103      	bne.n	800295c <Control_Task+0x634>
 8002954:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <Control_Task+0x6b0>)
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	e00a      	b.n	8002972 <Control_Task+0x64a>
		else if(bestNb[NEXT]==NEIGHBOUR2 || bestNb[NEXT]==NEIGHBOUR4)nextPath=RIGHT;
 800295c:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <Control_Task+0x6ac>)
 800295e:	785b      	ldrb	r3, [r3, #1]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d003      	beq.n	800296c <Control_Task+0x644>
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <Control_Task+0x6ac>)
 8002966:	785b      	ldrb	r3, [r3, #1]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d102      	bne.n	8002972 <Control_Task+0x64a>
 800296c:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <Control_Task+0x6b0>)
 800296e:	2202      	movs	r2, #2
 8002970:	701a      	strb	r2, [r3, #0]
		control_task_state=NEIGHBOUR1;
 8002972:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <Control_Task+0x6b4>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
		return;
 8002978:	e022      	b.n	80029c0 <Control_Task+0x698>
	}

	/**************************************************************************************/

	/**********ÜTKÖZÉSELKERÜLÉS VÁRAKOZÁSSAL (control_task_state=EVALUATE ->6.állapot)***********/
	else if(control_task_state==WAIT)
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <Control_Task+0x6b4>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b05      	cmp	r3, #5
 8002980:	d11d      	bne.n	80029be <Control_Task+0x696>
	{
		if(tick-t_stamp<4000)
 8002982:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <Control_Task+0x6b8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800298e:	d206      	bcs.n	800299e <Control_Task+0x676>
		{
			v_control=STOP;
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <Control_Task+0x6bc>)
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
			control_task_state=WAIT;
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <Control_Task+0x6b4>)
 8002998:	2205      	movs	r2, #5
 800299a:	701a      	strb	r2, [r3, #0]
			v_control=NORMAL_VEL;
			control_task_state=NEIGHBOUR1;
		}
	}
	/**************************************************************************************/
	return;
 800299c:	e00f      	b.n	80029be <Control_Task+0x696>
			LED_G(0);
 800299e:	2201      	movs	r2, #1
 80029a0:	2102      	movs	r1, #2
 80029a2:	4811      	ldr	r0, [pc, #68]	; (80029e8 <Control_Task+0x6c0>)
 80029a4:	f005 fc30 	bl	8008208 <HAL_GPIO_WritePin>
			v_control=NORMAL_VEL;
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <Control_Task+0x6bc>)
 80029aa:	2202      	movs	r2, #2
 80029ac:	701a      	strb	r2, [r3, #0]
			control_task_state=NEIGHBOUR1;
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <Control_Task+0x6b4>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
	return;
 80029b4:	e003      	b.n	80029be <Control_Task+0x696>
	if(control_task_tick>tick)return;
 80029b6:	bf00      	nop
 80029b8:	e002      	b.n	80029c0 <Control_Task+0x698>
	if(mode!=SKILL)return;
 80029ba:	bf00      	nop
 80029bc:	e000      	b.n	80029c0 <Control_Task+0x698>
	return;
 80029be:	bf00      	nop
}
 80029c0:	3720      	adds	r7, #32
 80029c2:	46bd      	mov	sp, r7
 80029c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029c8:	2000029c 	.word	0x2000029c
 80029cc:	200005f5 	.word	0x200005f5
 80029d0:	20000008 	.word	0x20000008
 80029d4:	200005dc 	.word	0x200005dc
 80029d8:	200005f4 	.word	0x200005f4
 80029dc:	200005ef 	.word	0x200005ef
 80029e0:	200005f0 	.word	0x200005f0
 80029e4:	200002a1 	.word	0x200002a1
 80029e8:	40020400 	.word	0x40020400

080029ec <Mode_Selector>:


void Mode_Selector(UART_HandleTypeDef *huart_debugg, UART_HandleTypeDef *huart_stm)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08e      	sub	sp, #56	; 0x38
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
	//Milyen módban kell működni?
	uint8_t buffer[40];
	uint8_t tmp=*(__IO uint8_t *) FLASH_ADDRESS_MODESELECTOR; //FLASH-ből kiolvassuk, hogy milyen módban vagyunk
 80029f6:	4b5f      	ldr	r3, [pc, #380]	; (8002b74 <Mode_Selector+0x188>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if(tmp==SKILL || tmp==FAST) mode = tmp;
 80029fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a02:	2b52      	cmp	r3, #82	; 0x52
 8002a04:	d003      	beq.n	8002a0e <Mode_Selector+0x22>
 8002a06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a0a:	2b3f      	cmp	r3, #63	; 0x3f
 8002a0c:	d104      	bne.n	8002a18 <Mode_Selector+0x2c>
 8002a0e:	4a5a      	ldr	r2, [pc, #360]	; (8002b78 <Mode_Selector+0x18c>)
 8002a10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a14:	7013      	strb	r3, [r2, #0]
 8002a16:	e022      	b.n	8002a5e <Mode_Selector+0x72>
	else
	{
		HAL_FLASH_Unlock();
 8002a18:	f005 f890 	bl	8007b3c <HAL_FLASH_Unlock>
		HAL_Delay(50);
 8002a1c:	2032      	movs	r0, #50	; 0x32
 8002a1e:	f003 fd59 	bl	80064d4 <HAL_Delay>
		FLASH_Erase_Sector(7, FLASH_VOLTAGE_RANGE_3);
 8002a22:	2102      	movs	r1, #2
 8002a24:	2007      	movs	r0, #7
 8002a26:	f005 f9fb 	bl	8007e20 <FLASH_Erase_Sector>
		HAL_Delay(50);
 8002a2a:	2032      	movs	r0, #50	; 0x32
 8002a2c:	f003 fd52 	bl	80064d4 <HAL_Delay>
		HAL_FLASH_Lock();
 8002a30:	f005 f8a6 	bl	8007b80 <HAL_FLASH_Lock>
		HAL_FLASH_Unlock();
 8002a34:	f005 f882 	bl	8007b3c <HAL_FLASH_Unlock>
		HAL_Delay(50);
 8002a38:	2032      	movs	r0, #50	; 0x32
 8002a3a:	f003 fd4b 	bl	80064d4 <HAL_Delay>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, SKILL); //ha eddig skill mód volt akor msot gyors lesz
 8002a3e:	f04f 0252 	mov.w	r2, #82	; 0x52
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	494b      	ldr	r1, [pc, #300]	; (8002b74 <Mode_Selector+0x188>)
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f005 f823 	bl	8007a94 <HAL_FLASH_Program>
		HAL_Delay(50);
 8002a4e:	2032      	movs	r0, #50	; 0x32
 8002a50:	f003 fd40 	bl	80064d4 <HAL_Delay>
		HAL_FLASH_Lock();
 8002a54:	f005 f894 	bl	8007b80 <HAL_FLASH_Lock>

		mode=SKILL;
 8002a58:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <Mode_Selector+0x18c>)
 8002a5a:	2252      	movs	r2, #82	; 0x52
 8002a5c:	701a      	strb	r2, [r3, #0]
	}

	if(mode==SKILL)
 8002a5e:	4b46      	ldr	r3, [pc, #280]	; (8002b78 <Mode_Selector+0x18c>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b52      	cmp	r3, #82	; 0x52
 8002a64:	d135      	bne.n	8002ad2 <Mode_Selector+0xe6>
	{
		buffer[0] = CMD_MODE_SKILL; //szólunk a g0-nak, hogy ügyességi módban vagyunk
 8002a66:	2352      	movs	r3, #82	; 0x52
 8002a68:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8002a6a:	f107 010c 	add.w	r1, r7, #12
 8002a6e:	230a      	movs	r3, #10
 8002a70:	2201      	movs	r2, #1
 8002a72:	6838      	ldr	r0, [r7, #0]
 8002a74:	f008 f91b 	bl	800acae <HAL_UART_Transmit>
		HAL_Delay(10);
 8002a78:	200a      	movs	r0, #10
 8002a7a:	f003 fd2b 	bl	80064d4 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);//3 szór is szólunk neki, hogy tuti megkapja a módváltásról az üzenetet
 8002a7e:	f107 010c 	add.w	r1, r7, #12
 8002a82:	230a      	movs	r3, #10
 8002a84:	2201      	movs	r2, #1
 8002a86:	6838      	ldr	r0, [r7, #0]
 8002a88:	f008 f911 	bl	800acae <HAL_UART_Transmit>
		HAL_Delay(10);
 8002a8c:	200a      	movs	r0, #10
 8002a8e:	f003 fd21 	bl	80064d4 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8002a92:	f107 010c 	add.w	r1, r7, #12
 8002a96:	230a      	movs	r3, #10
 8002a98:	2201      	movs	r2, #1
 8002a9a:	6838      	ldr	r0, [r7, #0]
 8002a9c:	f008 f907 	bl	800acae <HAL_UART_Transmit>

		sprintf((char*)buffer,"Skill mode!\n\r"); //Debugg uart-ra is kiküldjük, hogy milyen módban vagyunk
 8002aa0:	f107 030c 	add.w	r3, r7, #12
 8002aa4:	4935      	ldr	r1, [pc, #212]	; (8002b7c <Mode_Selector+0x190>)
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f009 fe6a 	bl	800c780 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fbad 	bl	8000210 <strlen>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	f107 010c 	add.w	r1, r7, #12
 8002abe:	2364      	movs	r3, #100	; 0x64
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f008 f8f4 	bl	800acae <HAL_UART_Transmit>
		LED_NUCLEO(1); //A NUCLEO zöld LED-je világít, ha ügyeségi üzemmódban vagyunk
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2120      	movs	r1, #32
 8002aca:	482d      	ldr	r0, [pc, #180]	; (8002b80 <Mode_Selector+0x194>)
 8002acc:	f005 fb9c 	bl	8008208 <HAL_GPIO_WritePin>
	else
	{
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
	}
}
 8002ad0:	e04c      	b.n	8002b6c <Mode_Selector+0x180>
	else if(mode==FAST)
 8002ad2:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <Mode_Selector+0x18c>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b3f      	cmp	r3, #63	; 0x3f
 8002ad8:	d135      	bne.n	8002b46 <Mode_Selector+0x15a>
		buffer[0] = CMD_MODE_FAST;
 8002ada:	233f      	movs	r3, #63	; 0x3f
 8002adc:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8002ade:	f107 010c 	add.w	r1, r7, #12
 8002ae2:	230a      	movs	r3, #10
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	6838      	ldr	r0, [r7, #0]
 8002ae8:	f008 f8e1 	bl	800acae <HAL_UART_Transmit>
		HAL_Delay(10);
 8002aec:	200a      	movs	r0, #10
 8002aee:	f003 fcf1 	bl	80064d4 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8002af2:	f107 010c 	add.w	r1, r7, #12
 8002af6:	230a      	movs	r3, #10
 8002af8:	2201      	movs	r2, #1
 8002afa:	6838      	ldr	r0, [r7, #0]
 8002afc:	f008 f8d7 	bl	800acae <HAL_UART_Transmit>
		HAL_Delay(10);
 8002b00:	200a      	movs	r0, #10
 8002b02:	f003 fce7 	bl	80064d4 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8002b06:	f107 010c 	add.w	r1, r7, #12
 8002b0a:	230a      	movs	r3, #10
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	6838      	ldr	r0, [r7, #0]
 8002b10:	f008 f8cd 	bl	800acae <HAL_UART_Transmit>
		sprintf((char*)buffer,"Fast mode!\n\r");
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	491a      	ldr	r1, [pc, #104]	; (8002b84 <Mode_Selector+0x198>)
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f009 fe30 	bl	800c780 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8002b20:	f107 030c 	add.w	r3, r7, #12
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fd fb73 	bl	8000210 <strlen>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	f107 010c 	add.w	r1, r7, #12
 8002b32:	2364      	movs	r3, #100	; 0x64
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f008 f8ba 	bl	800acae <HAL_UART_Transmit>
		LED_NUCLEO(0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2120      	movs	r1, #32
 8002b3e:	4810      	ldr	r0, [pc, #64]	; (8002b80 <Mode_Selector+0x194>)
 8002b40:	f005 fb62 	bl	8008208 <HAL_GPIO_WritePin>
}
 8002b44:	e012      	b.n	8002b6c <Mode_Selector+0x180>
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
 8002b46:	f107 030c 	add.w	r3, r7, #12
 8002b4a:	490f      	ldr	r1, [pc, #60]	; (8002b88 <Mode_Selector+0x19c>)
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f009 fe17 	bl	800c780 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8002b52:	f107 030c 	add.w	r3, r7, #12
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fb5a 	bl	8000210 <strlen>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	f107 010c 	add.w	r1, r7, #12
 8002b64:	2364      	movs	r3, #100	; 0x64
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f008 f8a1 	bl	800acae <HAL_UART_Transmit>
}
 8002b6c:	bf00      	nop
 8002b6e:	3738      	adds	r7, #56	; 0x38
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	08060000 	.word	0x08060000
 8002b78:	20000292 	.word	0x20000292
 8002b7c:	080101dc 	.word	0x080101dc
 8002b80:	40020000 	.word	0x40020000
 8002b84:	080101ec 	.word	0x080101ec
 8002b88:	080101fc 	.word	0x080101fc

08002b8c <Wait_For_Start_Sigal>:
	HAL_UART_Transmit(huart_monitoring, data, 11, 4);
}


void Wait_For_Start_Sigal(UART_HandleTypeDef *huart_TB, UART_HandleTypeDef *huart_debugg)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
	uint8_t rcv[]={0};
 8002b96:	2300      	movs	r3, #0
 8002b98:	723b      	strb	r3, [r7, #8]
	static uint8_t cnt=5;
	if(mode!=SKILL)return;
 8002b9a:	4b2f      	ldr	r3, [pc, #188]	; (8002c58 <Wait_For_Start_Sigal+0xcc>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b52      	cmp	r3, #82	; 0x52
 8002ba0:	d156      	bne.n	8002c50 <Wait_For_Start_Sigal+0xc4>
	while(1)
	{
		//Bluetooth-on érkezika  start jel
		HAL_UART_Receive(huart_TB, rcv, 1, 7000);
 8002ba2:	f107 0108 	add.w	r1, r7, #8
 8002ba6:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002baa:	2201      	movs	r2, #1
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f008 f910 	bl	800add2 <HAL_UART_Receive>
		if(rcv[0]==cnt+0x30)
 8002bb2:	7a3b      	ldrb	r3, [r7, #8]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <Wait_For_Start_Sigal+0xd0>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	3330      	adds	r3, #48	; 0x30
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d11a      	bne.n	8002bf6 <Wait_For_Start_Sigal+0x6a>
		{
			if(cnt<4)
 8002bc0:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <Wait_For_Start_Sigal+0xd0>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d80c      	bhi.n	8002be2 <Wait_For_Start_Sigal+0x56>
			{
				HAL_UART_Transmit(huart_debugg, rcv, 1, 2);
 8002bc8:	f107 0108 	add.w	r1, r7, #8
 8002bcc:	2302      	movs	r3, #2
 8002bce:	2201      	movs	r2, #1
 8002bd0:	6838      	ldr	r0, [r7, #0]
 8002bd2:	f008 f86c 	bl	800acae <HAL_UART_Transmit>
				HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\r", 2, 2);
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	2202      	movs	r2, #2
 8002bda:	4921      	ldr	r1, [pc, #132]	; (8002c60 <Wait_For_Start_Sigal+0xd4>)
 8002bdc:	6838      	ldr	r0, [r7, #0]
 8002bde:	f008 f866 	bl	800acae <HAL_UART_Transmit>
			}
			if(rcv[0]=='0')break;
 8002be2:	7a3b      	ldrb	r3, [r7, #8]
 8002be4:	2b30      	cmp	r3, #48	; 0x30
 8002be6:	d026      	beq.n	8002c36 <Wait_For_Start_Sigal+0xaa>
			cnt--;
 8002be8:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <Wait_For_Start_Sigal+0xd0>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <Wait_For_Start_Sigal+0xd0>)
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	e002      	b.n	8002bfc <Wait_For_Start_Sigal+0x70>
		}
		else cnt=5;
 8002bf6:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <Wait_For_Start_Sigal+0xd0>)
 8002bf8:	2205      	movs	r2, #5
 8002bfa:	701a      	strb	r2, [r3, #0]

		//Kézi próbaindítás
		if(B2)
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	4819      	ldr	r0, [pc, #100]	; (8002c64 <Wait_For_Start_Sigal+0xd8>)
 8002c00:	f005 faea 	bl	80081d8 <HAL_GPIO_ReadPin>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0cb      	beq.n	8002ba2 <Wait_For_Start_Sigal+0x16>
		{
			int i;
			for(i=0;i<10;i++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e009      	b.n	8002c24 <Wait_For_Start_Sigal+0x98>
			{
				LED_G_TOGGLE;
 8002c10:	2102      	movs	r1, #2
 8002c12:	4814      	ldr	r0, [pc, #80]	; (8002c64 <Wait_For_Start_Sigal+0xd8>)
 8002c14:	f005 fb11 	bl	800823a <HAL_GPIO_TogglePin>
				Delay(200);
 8002c18:	20c8      	movs	r0, #200	; 0xc8
 8002c1a:	f002 fe07 	bl	800582c <Delay>
			for(i=0;i<10;i++)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3301      	adds	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b09      	cmp	r3, #9
 8002c28:	ddf2      	ble.n	8002c10 <Wait_For_Start_Sigal+0x84>
			}
			LED_G(0);
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	2102      	movs	r1, #2
 8002c2e:	480d      	ldr	r0, [pc, #52]	; (8002c64 <Wait_For_Start_Sigal+0xd8>)
 8002c30:	f005 faea 	bl	8008208 <HAL_GPIO_WritePin>
			break;//ha megnyomtuka 2-es gombot kiugrunk a while ciklusból
 8002c34:	e000      	b.n	8002c38 <Wait_For_Start_Sigal+0xac>
			if(rcv[0]=='0')break;
 8002c36:	bf00      	nop
		}

	}
	HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 8002c38:	2206      	movs	r2, #6
 8002c3a:	490b      	ldr	r1, [pc, #44]	; (8002c68 <Wait_For_Start_Sigal+0xdc>)
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f008 f96a 	bl	800af16 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)"START!\n\r",8, 3);
 8002c42:	2303      	movs	r3, #3
 8002c44:	2208      	movs	r2, #8
 8002c46:	4909      	ldr	r1, [pc, #36]	; (8002c6c <Wait_For_Start_Sigal+0xe0>)
 8002c48:	6838      	ldr	r0, [r7, #0]
 8002c4a:	f008 f830 	bl	800acae <HAL_UART_Transmit>
 8002c4e:	e000      	b.n	8002c52 <Wait_For_Start_Sigal+0xc6>
	if(mode!=SKILL)return;
 8002c50:	bf00      	nop
}
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20000292 	.word	0x20000292
 8002c5c:	20000014 	.word	0x20000014
 8002c60:	08010220 	.word	0x08010220
 8002c64:	40020400 	.word	0x40020400
 8002c68:	200002a4 	.word	0x200002a4
 8002c6c:	08010224 	.word	0x08010224

08002c70 <Uart_Receive_Thunderboard_ISR>:
void Uart_Receive_Thunderboard_ISR(UART_HandleTypeDef *huart_TB, UART_HandleTypeDef *huart_debugg)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
	static uint8_t sp[]={0};//slip protection
	static uint8_t cnt=0;
	if(tb_msg[0]>='A' && tb_msg[0]<='Z' && tb_msg[5]>='0' && tb_msg[5]<='9')
 8002c7a:	4b37      	ldr	r3, [pc, #220]	; (8002d58 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	d93d      	bls.n	8002cfe <Uart_Receive_Thunderboard_ISR+0x8e>
 8002c82:	4b35      	ldr	r3, [pc, #212]	; (8002d58 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b5a      	cmp	r3, #90	; 0x5a
 8002c88:	d839      	bhi.n	8002cfe <Uart_Receive_Thunderboard_ISR+0x8e>
 8002c8a:	4b33      	ldr	r3, [pc, #204]	; (8002d58 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002c8c:	795b      	ldrb	r3, [r3, #5]
 8002c8e:	2b2f      	cmp	r3, #47	; 0x2f
 8002c90:	d935      	bls.n	8002cfe <Uart_Receive_Thunderboard_ISR+0x8e>
 8002c92:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002c94:	795b      	ldrb	r3, [r3, #5]
 8002c96:	2b39      	cmp	r3, #57	; 0x39
 8002c98:	d831      	bhi.n	8002cfe <Uart_Receive_Thunderboard_ISR+0x8e>
	{
		piratePos[0]=tb_msg[0];	piratePos[1]=tb_msg[1];	piratePos[2]=tb_msg[2];
 8002c9a:	4b2f      	ldr	r3, [pc, #188]	; (8002d58 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	4b2f      	ldr	r3, [pc, #188]	; (8002d5c <Uart_Receive_Thunderboard_ISR+0xec>)
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002ca4:	785a      	ldrb	r2, [r3, #1]
 8002ca6:	4b2d      	ldr	r3, [pc, #180]	; (8002d5c <Uart_Receive_Thunderboard_ISR+0xec>)
 8002ca8:	705a      	strb	r2, [r3, #1]
 8002caa:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002cac:	789a      	ldrb	r2, [r3, #2]
 8002cae:	4b2b      	ldr	r3, [pc, #172]	; (8002d5c <Uart_Receive_Thunderboard_ISR+0xec>)
 8002cb0:	709a      	strb	r2, [r3, #2]
		piratePos[3]=100*(tb_msg[3]-0x30) + 10*(tb_msg[4]-0x30) + (tb_msg[5]-0x30);
 8002cb2:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002cb4:	78db      	ldrb	r3, [r3, #3]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	0092      	lsls	r2, r2, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	0091      	lsls	r1, r2, #2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4b23      	ldr	r3, [pc, #140]	; (8002d58 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002ccc:	791b      	ldrb	r3, [r3, #4]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	0089      	lsls	r1, r1, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002cde:	795b      	ldrb	r3, [r3, #5]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	3330      	adds	r3, #48	; 0x30
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	4b1c      	ldr	r3, [pc, #112]	; (8002d5c <Uart_Receive_Thunderboard_ISR+0xec>)
 8002cea:	70da      	strb	r2, [r3, #3]
		thunderboardFlag=1;
 8002cec:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <Uart_Receive_Thunderboard_ISR+0xf0>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 8002cf2:	2206      	movs	r2, #6
 8002cf4:	4918      	ldr	r1, [pc, #96]	; (8002d58 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f008 f90d 	bl	800af16 <HAL_UART_Receive_IT>
#ifdef TB_DEBUGG
		HAL_UART_Transmit(huart_debugg, tb_msg, 6, 2);
		HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\r", 2, 2);
#endif
		return;
 8002cfc:	e029      	b.n	8002d52 <Uart_Receive_Thunderboard_ISR+0xe2>
	}
	//SLIP PROTECTION
	if(sp[0]>='0' && sp[0]<='9')cnt++;
 8002cfe:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b2f      	cmp	r3, #47	; 0x2f
 8002d04:	d90a      	bls.n	8002d1c <Uart_Receive_Thunderboard_ISR+0xac>
 8002d06:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b39      	cmp	r3, #57	; 0x39
 8002d0c:	d806      	bhi.n	8002d1c <Uart_Receive_Thunderboard_ISR+0xac>
 8002d0e:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <Uart_Receive_Thunderboard_ISR+0xf8>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	3301      	adds	r3, #1
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <Uart_Receive_Thunderboard_ISR+0xf8>)
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	e002      	b.n	8002d22 <Uart_Receive_Thunderboard_ISR+0xb2>
	else cnt=0;
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <Uart_Receive_Thunderboard_ISR+0xf8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]

	if(cnt<3) //3 darab ASCI számnak össze kell gyűlnie egymás után
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <Uart_Receive_Thunderboard_ISR+0xf8>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d805      	bhi.n	8002d36 <Uart_Receive_Thunderboard_ISR+0xc6>
	{
		HAL_UART_Receive_IT(huart_TB, sp, 1);//amig ez nincs meg addig cask egyesével olvasunk
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	490d      	ldr	r1, [pc, #52]	; (8002d64 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f008 f8f1 	bl	800af16 <HAL_UART_Receive_IT>
 8002d34:	e00d      	b.n	8002d52 <Uart_Receive_Thunderboard_ISR+0xe2>
	}
	else//ha megvan megint 6-ossával olvasunk
	{
		sp[0]=0;
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
		cnt=0;
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <Uart_Receive_Thunderboard_ISR+0xf8>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 8002d42:	2206      	movs	r2, #6
 8002d44:	4904      	ldr	r1, [pc, #16]	; (8002d58 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f008 f8e5 	bl	800af16 <HAL_UART_Receive_IT>
		thunderboardFlag=1;
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <Uart_Receive_Thunderboard_ISR+0xf0>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
	}

}
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	200002a4 	.word	0x200002a4
 8002d5c:	200002ac 	.word	0x200002ac
 8002d60:	200002a2 	.word	0x200002a2
 8002d64:	20000608 	.word	0x20000608
 8002d68:	20000609 	.word	0x20000609

08002d6c <Lane_Change_Init>:


void Lane_Change_Init(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
	N('A').worth = N('B').worth = N('C').worth = N('Y').worth = 0;
 8002d70:	4b43      	ldr	r3, [pc, #268]	; (8002e80 <Lane_Change_Init+0x114>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 8002d78:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <Lane_Change_Init+0x114>)
 8002d7a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8002d7e:	4a40      	ldr	r2, [pc, #256]	; (8002e80 <Lane_Change_Init+0x114>)
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <Lane_Change_Init+0x114>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	4a3e      	ldr	r2, [pc, #248]	; (8002e80 <Lane_Change_Init+0x114>)
 8002d88:	6253      	str	r3, [r2, #36]	; 0x24
 8002d8a:	4b3d      	ldr	r3, [pc, #244]	; (8002e80 <Lane_Change_Init+0x114>)
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	4a3c      	ldr	r2, [pc, #240]	; (8002e80 <Lane_Change_Init+0x114>)
 8002d90:	6053      	str	r3, [r2, #4]
	N('D').worth = N('E').worth=1;
 8002d92:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <Lane_Change_Init+0x114>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002d9a:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <Lane_Change_Init+0x114>)
 8002d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da0:	4a37      	ldr	r2, [pc, #220]	; (8002e80 <Lane_Change_Init+0x114>)
 8002da2:	6653      	str	r3, [r2, #100]	; 0x64
	N('F').worth = N('G').worth = N('W').worth = N('X').worth = 2;
 8002da4:	4b36      	ldr	r3, [pc, #216]	; (8002e80 <Lane_Change_Init+0x114>)
 8002da6:	2202      	movs	r2, #2
 8002da8:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
 8002dac:	4b34      	ldr	r3, [pc, #208]	; (8002e80 <Lane_Change_Init+0x114>)
 8002dae:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8002db2:	4a33      	ldr	r2, [pc, #204]	; (8002e80 <Lane_Change_Init+0x114>)
 8002db4:	f8c2 32c4 	str.w	r3, [r2, #708]	; 0x2c4
 8002db8:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <Lane_Change_Init+0x114>)
 8002dba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002dbe:	4a30      	ldr	r2, [pc, #192]	; (8002e80 <Lane_Change_Init+0x114>)
 8002dc0:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
 8002dc4:	4b2e      	ldr	r3, [pc, #184]	; (8002e80 <Lane_Change_Init+0x114>)
 8002dc6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002dca:	4a2d      	ldr	r2, [pc, #180]	; (8002e80 <Lane_Change_Init+0x114>)
 8002dcc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	N('H').worth = N('I').worth = N('J').worth = N('M').worth = N('P').worth = N('T').worth = N('V').worth = N('U').worth = 4;
 8002dd0:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <Lane_Change_Init+0x114>)
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
 8002dd8:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <Lane_Change_Init+0x114>)
 8002dda:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 8002dde:	4a28      	ldr	r2, [pc, #160]	; (8002e80 <Lane_Change_Init+0x114>)
 8002de0:	f8c2 32a4 	str.w	r3, [r2, #676]	; 0x2a4
 8002de4:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <Lane_Change_Init+0x114>)
 8002de6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8002dea:	4a25      	ldr	r2, [pc, #148]	; (8002e80 <Lane_Change_Init+0x114>)
 8002dec:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
 8002df0:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <Lane_Change_Init+0x114>)
 8002df2:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8002df6:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <Lane_Change_Init+0x114>)
 8002df8:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
 8002dfc:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <Lane_Change_Init+0x114>)
 8002dfe:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8002e02:	4a1f      	ldr	r2, [pc, #124]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e04:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 8002e08:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e0a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002e0e:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e10:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e16:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002e1a:	4a19      	ldr	r2, [pc, #100]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e1c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8002e20:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e22:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002e26:	4a16      	ldr	r2, [pc, #88]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e28:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	N('L').worth = N('K').worth = N('O').worth = N('R').worth = N('S').worth = 8;
 8002e2c:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e2e:	2208      	movs	r2, #8
 8002e30:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e36:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002e3a:	4a11      	ldr	r2, [pc, #68]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e3c:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e42:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8002e46:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e48:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e4e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8002e52:	4a0b      	ldr	r2, [pc, #44]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e54:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e5a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002e5e:	4a08      	ldr	r2, [pc, #32]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e60:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
	N('Q').worth = 16;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e66:	2210      	movs	r2, #16
 8002e68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	N('N').worth = 32;
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <Lane_Change_Init+0x114>)
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	200002b0 	.word	0x200002b0

08002e84 <Cross_Collision>:

uint8_t Cross_Collision(uint8_t myPos, uint8_t nextPos)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	460a      	mov	r2, r1
 8002e8e:	71fb      	strb	r3, [r7, #7]
 8002e90:	4613      	mov	r3, r2
 8002e92:	71bb      	strb	r3, [r7, #6]
	/********************************FI, HG kereszteződés**********************/
	if((myPos=='F' && nextPos=='I') || (myPos=='I' && nextPos=='F'))
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	2b46      	cmp	r3, #70	; 0x46
 8002e98:	d102      	bne.n	8002ea0 <Cross_Collision+0x1c>
 8002e9a:	79bb      	ldrb	r3, [r7, #6]
 8002e9c:	2b49      	cmp	r3, #73	; 0x49
 8002e9e:	d005      	beq.n	8002eac <Cross_Collision+0x28>
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	2b49      	cmp	r3, #73	; 0x49
 8002ea4:	d132      	bne.n	8002f0c <Cross_Collision+0x88>
 8002ea6:	79bb      	ldrb	r3, [r7, #6]
 8002ea8:	2b46      	cmp	r3, #70	; 0x46
 8002eaa:	d12f      	bne.n	8002f0c <Cross_Collision+0x88>
	{
		if((piratePos[0]=='G' && piratePos[1]=='H') || (piratePos[0]=='H' && piratePos[1]=='G')){ if(piratePos[3]<60) return 1;}
 8002eac:	4b7e      	ldr	r3, [pc, #504]	; (80030a8 <Cross_Collision+0x224>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b47      	cmp	r3, #71	; 0x47
 8002eb2:	d103      	bne.n	8002ebc <Cross_Collision+0x38>
 8002eb4:	4b7c      	ldr	r3, [pc, #496]	; (80030a8 <Cross_Collision+0x224>)
 8002eb6:	785b      	ldrb	r3, [r3, #1]
 8002eb8:	2b48      	cmp	r3, #72	; 0x48
 8002eba:	d007      	beq.n	8002ecc <Cross_Collision+0x48>
 8002ebc:	4b7a      	ldr	r3, [pc, #488]	; (80030a8 <Cross_Collision+0x224>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b48      	cmp	r3, #72	; 0x48
 8002ec2:	d109      	bne.n	8002ed8 <Cross_Collision+0x54>
 8002ec4:	4b78      	ldr	r3, [pc, #480]	; (80030a8 <Cross_Collision+0x224>)
 8002ec6:	785b      	ldrb	r3, [r3, #1]
 8002ec8:	2b47      	cmp	r3, #71	; 0x47
 8002eca:	d105      	bne.n	8002ed8 <Cross_Collision+0x54>
 8002ecc:	4b76      	ldr	r3, [pc, #472]	; (80030a8 <Cross_Collision+0x224>)
 8002ece:	78db      	ldrb	r3, [r3, #3]
 8002ed0:	2b3b      	cmp	r3, #59	; 0x3b
 8002ed2:	d81a      	bhi.n	8002f0a <Cross_Collision+0x86>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e111      	b.n	80030fc <Cross_Collision+0x278>
		else if((piratePos[1]=='G' && piratePos[2]=='H') || (piratePos[1]=='H' && piratePos[2]=='G')){ if(piratePos[3]>50) return 1;}
 8002ed8:	4b73      	ldr	r3, [pc, #460]	; (80030a8 <Cross_Collision+0x224>)
 8002eda:	785b      	ldrb	r3, [r3, #1]
 8002edc:	2b47      	cmp	r3, #71	; 0x47
 8002ede:	d103      	bne.n	8002ee8 <Cross_Collision+0x64>
 8002ee0:	4b71      	ldr	r3, [pc, #452]	; (80030a8 <Cross_Collision+0x224>)
 8002ee2:	789b      	ldrb	r3, [r3, #2]
 8002ee4:	2b48      	cmp	r3, #72	; 0x48
 8002ee6:	d009      	beq.n	8002efc <Cross_Collision+0x78>
 8002ee8:	4b6f      	ldr	r3, [pc, #444]	; (80030a8 <Cross_Collision+0x224>)
 8002eea:	785b      	ldrb	r3, [r3, #1]
 8002eec:	2b48      	cmp	r3, #72	; 0x48
 8002eee:	f040 80fb 	bne.w	80030e8 <Cross_Collision+0x264>
 8002ef2:	4b6d      	ldr	r3, [pc, #436]	; (80030a8 <Cross_Collision+0x224>)
 8002ef4:	789b      	ldrb	r3, [r3, #2]
 8002ef6:	2b47      	cmp	r3, #71	; 0x47
 8002ef8:	f040 80f6 	bne.w	80030e8 <Cross_Collision+0x264>
 8002efc:	4b6a      	ldr	r3, [pc, #424]	; (80030a8 <Cross_Collision+0x224>)
 8002efe:	78db      	ldrb	r3, [r3, #3]
 8002f00:	2b32      	cmp	r3, #50	; 0x32
 8002f02:	f240 80f1 	bls.w	80030e8 <Cross_Collision+0x264>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e0f8      	b.n	80030fc <Cross_Collision+0x278>
		if((piratePos[0]=='G' && piratePos[1]=='H') || (piratePos[0]=='H' && piratePos[1]=='G')){ if(piratePos[3]<60) return 1;}
 8002f0a:	e0ed      	b.n	80030e8 <Cross_Collision+0x264>
	}
	else if((myPos=='G' && nextPos=='H') || (myPos=='H' && nextPos=='G'))
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	2b47      	cmp	r3, #71	; 0x47
 8002f10:	d102      	bne.n	8002f18 <Cross_Collision+0x94>
 8002f12:	79bb      	ldrb	r3, [r7, #6]
 8002f14:	2b48      	cmp	r3, #72	; 0x48
 8002f16:	d005      	beq.n	8002f24 <Cross_Collision+0xa0>
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	2b48      	cmp	r3, #72	; 0x48
 8002f1c:	d132      	bne.n	8002f84 <Cross_Collision+0x100>
 8002f1e:	79bb      	ldrb	r3, [r7, #6]
 8002f20:	2b47      	cmp	r3, #71	; 0x47
 8002f22:	d12f      	bne.n	8002f84 <Cross_Collision+0x100>
	{
		if((piratePos[0]=='F' && piratePos[1]=='I') || (piratePos[0]=='I' && piratePos[1]=='F')){ if(piratePos[3]<60) return 1;}
 8002f24:	4b60      	ldr	r3, [pc, #384]	; (80030a8 <Cross_Collision+0x224>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b46      	cmp	r3, #70	; 0x46
 8002f2a:	d103      	bne.n	8002f34 <Cross_Collision+0xb0>
 8002f2c:	4b5e      	ldr	r3, [pc, #376]	; (80030a8 <Cross_Collision+0x224>)
 8002f2e:	785b      	ldrb	r3, [r3, #1]
 8002f30:	2b49      	cmp	r3, #73	; 0x49
 8002f32:	d007      	beq.n	8002f44 <Cross_Collision+0xc0>
 8002f34:	4b5c      	ldr	r3, [pc, #368]	; (80030a8 <Cross_Collision+0x224>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b49      	cmp	r3, #73	; 0x49
 8002f3a:	d109      	bne.n	8002f50 <Cross_Collision+0xcc>
 8002f3c:	4b5a      	ldr	r3, [pc, #360]	; (80030a8 <Cross_Collision+0x224>)
 8002f3e:	785b      	ldrb	r3, [r3, #1]
 8002f40:	2b46      	cmp	r3, #70	; 0x46
 8002f42:	d105      	bne.n	8002f50 <Cross_Collision+0xcc>
 8002f44:	4b58      	ldr	r3, [pc, #352]	; (80030a8 <Cross_Collision+0x224>)
 8002f46:	78db      	ldrb	r3, [r3, #3]
 8002f48:	2b3b      	cmp	r3, #59	; 0x3b
 8002f4a:	d81a      	bhi.n	8002f82 <Cross_Collision+0xfe>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0d5      	b.n	80030fc <Cross_Collision+0x278>
		else if((piratePos[1]=='F' && piratePos[2]=='I') || (piratePos[1]=='I' && piratePos[2]=='F')){ if(piratePos[3]>50) return 1;}
 8002f50:	4b55      	ldr	r3, [pc, #340]	; (80030a8 <Cross_Collision+0x224>)
 8002f52:	785b      	ldrb	r3, [r3, #1]
 8002f54:	2b46      	cmp	r3, #70	; 0x46
 8002f56:	d103      	bne.n	8002f60 <Cross_Collision+0xdc>
 8002f58:	4b53      	ldr	r3, [pc, #332]	; (80030a8 <Cross_Collision+0x224>)
 8002f5a:	789b      	ldrb	r3, [r3, #2]
 8002f5c:	2b49      	cmp	r3, #73	; 0x49
 8002f5e:	d009      	beq.n	8002f74 <Cross_Collision+0xf0>
 8002f60:	4b51      	ldr	r3, [pc, #324]	; (80030a8 <Cross_Collision+0x224>)
 8002f62:	785b      	ldrb	r3, [r3, #1]
 8002f64:	2b49      	cmp	r3, #73	; 0x49
 8002f66:	f040 80c1 	bne.w	80030ec <Cross_Collision+0x268>
 8002f6a:	4b4f      	ldr	r3, [pc, #316]	; (80030a8 <Cross_Collision+0x224>)
 8002f6c:	789b      	ldrb	r3, [r3, #2]
 8002f6e:	2b46      	cmp	r3, #70	; 0x46
 8002f70:	f040 80bc 	bne.w	80030ec <Cross_Collision+0x268>
 8002f74:	4b4c      	ldr	r3, [pc, #304]	; (80030a8 <Cross_Collision+0x224>)
 8002f76:	78db      	ldrb	r3, [r3, #3]
 8002f78:	2b32      	cmp	r3, #50	; 0x32
 8002f7a:	f240 80b7 	bls.w	80030ec <Cross_Collision+0x268>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e0bc      	b.n	80030fc <Cross_Collision+0x278>
		if((piratePos[0]=='F' && piratePos[1]=='I') || (piratePos[0]=='I' && piratePos[1]=='F')){ if(piratePos[3]<60) return 1;}
 8002f82:	e0b3      	b.n	80030ec <Cross_Collision+0x268>
	}
	/**************************************************************************/


	/********************************KN, LM kereszteződés**********************/
	else if((myPos=='K' && nextPos=='N') || (myPos=='N' && nextPos=='K'))
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	2b4b      	cmp	r3, #75	; 0x4b
 8002f88:	d102      	bne.n	8002f90 <Cross_Collision+0x10c>
 8002f8a:	79bb      	ldrb	r3, [r7, #6]
 8002f8c:	2b4e      	cmp	r3, #78	; 0x4e
 8002f8e:	d005      	beq.n	8002f9c <Cross_Collision+0x118>
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	2b4e      	cmp	r3, #78	; 0x4e
 8002f94:	d131      	bne.n	8002ffa <Cross_Collision+0x176>
 8002f96:	79bb      	ldrb	r3, [r7, #6]
 8002f98:	2b4b      	cmp	r3, #75	; 0x4b
 8002f9a:	d12e      	bne.n	8002ffa <Cross_Collision+0x176>
	{
		if((piratePos[0]=='L' && piratePos[1]=='M') || (piratePos[0]=='M' && piratePos[1]=='L')){ if(piratePos[3]<60) return 1;}
 8002f9c:	4b42      	ldr	r3, [pc, #264]	; (80030a8 <Cross_Collision+0x224>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b4c      	cmp	r3, #76	; 0x4c
 8002fa2:	d103      	bne.n	8002fac <Cross_Collision+0x128>
 8002fa4:	4b40      	ldr	r3, [pc, #256]	; (80030a8 <Cross_Collision+0x224>)
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	2b4d      	cmp	r3, #77	; 0x4d
 8002faa:	d007      	beq.n	8002fbc <Cross_Collision+0x138>
 8002fac:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <Cross_Collision+0x224>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b4d      	cmp	r3, #77	; 0x4d
 8002fb2:	d109      	bne.n	8002fc8 <Cross_Collision+0x144>
 8002fb4:	4b3c      	ldr	r3, [pc, #240]	; (80030a8 <Cross_Collision+0x224>)
 8002fb6:	785b      	ldrb	r3, [r3, #1]
 8002fb8:	2b4c      	cmp	r3, #76	; 0x4c
 8002fba:	d105      	bne.n	8002fc8 <Cross_Collision+0x144>
 8002fbc:	4b3a      	ldr	r3, [pc, #232]	; (80030a8 <Cross_Collision+0x224>)
 8002fbe:	78db      	ldrb	r3, [r3, #3]
 8002fc0:	2b3b      	cmp	r3, #59	; 0x3b
 8002fc2:	d819      	bhi.n	8002ff8 <Cross_Collision+0x174>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e099      	b.n	80030fc <Cross_Collision+0x278>
		else if((piratePos[1]=='L' && piratePos[2]=='M') || (piratePos[1]=='M' && piratePos[2]=='L')){ if(piratePos[3]>50) return 1;}
 8002fc8:	4b37      	ldr	r3, [pc, #220]	; (80030a8 <Cross_Collision+0x224>)
 8002fca:	785b      	ldrb	r3, [r3, #1]
 8002fcc:	2b4c      	cmp	r3, #76	; 0x4c
 8002fce:	d103      	bne.n	8002fd8 <Cross_Collision+0x154>
 8002fd0:	4b35      	ldr	r3, [pc, #212]	; (80030a8 <Cross_Collision+0x224>)
 8002fd2:	789b      	ldrb	r3, [r3, #2]
 8002fd4:	2b4d      	cmp	r3, #77	; 0x4d
 8002fd6:	d009      	beq.n	8002fec <Cross_Collision+0x168>
 8002fd8:	4b33      	ldr	r3, [pc, #204]	; (80030a8 <Cross_Collision+0x224>)
 8002fda:	785b      	ldrb	r3, [r3, #1]
 8002fdc:	2b4d      	cmp	r3, #77	; 0x4d
 8002fde:	f040 8087 	bne.w	80030f0 <Cross_Collision+0x26c>
 8002fe2:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <Cross_Collision+0x224>)
 8002fe4:	789b      	ldrb	r3, [r3, #2]
 8002fe6:	2b4c      	cmp	r3, #76	; 0x4c
 8002fe8:	f040 8082 	bne.w	80030f0 <Cross_Collision+0x26c>
 8002fec:	4b2e      	ldr	r3, [pc, #184]	; (80030a8 <Cross_Collision+0x224>)
 8002fee:	78db      	ldrb	r3, [r3, #3]
 8002ff0:	2b32      	cmp	r3, #50	; 0x32
 8002ff2:	d97d      	bls.n	80030f0 <Cross_Collision+0x26c>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e081      	b.n	80030fc <Cross_Collision+0x278>
		if((piratePos[0]=='L' && piratePos[1]=='M') || (piratePos[0]=='M' && piratePos[1]=='L')){ if(piratePos[3]<60) return 1;}
 8002ff8:	e07a      	b.n	80030f0 <Cross_Collision+0x26c>
	}
	else if((myPos=='L' && nextPos=='M') || (myPos=='M' && nextPos=='L'))
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	2b4c      	cmp	r3, #76	; 0x4c
 8002ffe:	d102      	bne.n	8003006 <Cross_Collision+0x182>
 8003000:	79bb      	ldrb	r3, [r7, #6]
 8003002:	2b4d      	cmp	r3, #77	; 0x4d
 8003004:	d005      	beq.n	8003012 <Cross_Collision+0x18e>
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	2b4d      	cmp	r3, #77	; 0x4d
 800300a:	d12f      	bne.n	800306c <Cross_Collision+0x1e8>
 800300c:	79bb      	ldrb	r3, [r7, #6]
 800300e:	2b4c      	cmp	r3, #76	; 0x4c
 8003010:	d12c      	bne.n	800306c <Cross_Collision+0x1e8>
	{
		if((piratePos[0]=='K' && piratePos[1]=='N') || (piratePos[0]=='N' && piratePos[1]=='K')){ if(piratePos[3]<60) return 1;}
 8003012:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <Cross_Collision+0x224>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b4b      	cmp	r3, #75	; 0x4b
 8003018:	d103      	bne.n	8003022 <Cross_Collision+0x19e>
 800301a:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <Cross_Collision+0x224>)
 800301c:	785b      	ldrb	r3, [r3, #1]
 800301e:	2b4e      	cmp	r3, #78	; 0x4e
 8003020:	d007      	beq.n	8003032 <Cross_Collision+0x1ae>
 8003022:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <Cross_Collision+0x224>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b4e      	cmp	r3, #78	; 0x4e
 8003028:	d109      	bne.n	800303e <Cross_Collision+0x1ba>
 800302a:	4b1f      	ldr	r3, [pc, #124]	; (80030a8 <Cross_Collision+0x224>)
 800302c:	785b      	ldrb	r3, [r3, #1]
 800302e:	2b4b      	cmp	r3, #75	; 0x4b
 8003030:	d105      	bne.n	800303e <Cross_Collision+0x1ba>
 8003032:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <Cross_Collision+0x224>)
 8003034:	78db      	ldrb	r3, [r3, #3]
 8003036:	2b3b      	cmp	r3, #59	; 0x3b
 8003038:	d817      	bhi.n	800306a <Cross_Collision+0x1e6>
 800303a:	2301      	movs	r3, #1
 800303c:	e05e      	b.n	80030fc <Cross_Collision+0x278>
		else if((piratePos[1]=='K' && piratePos[2]=='N') || (piratePos[1]=='N' && piratePos[12]=='K')){ if(piratePos[3]>50) return 1;}
 800303e:	4b1a      	ldr	r3, [pc, #104]	; (80030a8 <Cross_Collision+0x224>)
 8003040:	785b      	ldrb	r3, [r3, #1]
 8003042:	2b4b      	cmp	r3, #75	; 0x4b
 8003044:	d103      	bne.n	800304e <Cross_Collision+0x1ca>
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <Cross_Collision+0x224>)
 8003048:	789b      	ldrb	r3, [r3, #2]
 800304a:	2b4e      	cmp	r3, #78	; 0x4e
 800304c:	d007      	beq.n	800305e <Cross_Collision+0x1da>
 800304e:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <Cross_Collision+0x224>)
 8003050:	785b      	ldrb	r3, [r3, #1]
 8003052:	2b4e      	cmp	r3, #78	; 0x4e
 8003054:	d14e      	bne.n	80030f4 <Cross_Collision+0x270>
 8003056:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <Cross_Collision+0x224>)
 8003058:	7b1b      	ldrb	r3, [r3, #12]
 800305a:	2b4b      	cmp	r3, #75	; 0x4b
 800305c:	d14a      	bne.n	80030f4 <Cross_Collision+0x270>
 800305e:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <Cross_Collision+0x224>)
 8003060:	78db      	ldrb	r3, [r3, #3]
 8003062:	2b32      	cmp	r3, #50	; 0x32
 8003064:	d946      	bls.n	80030f4 <Cross_Collision+0x270>
 8003066:	2301      	movs	r3, #1
 8003068:	e048      	b.n	80030fc <Cross_Collision+0x278>
		if((piratePos[0]=='K' && piratePos[1]=='N') || (piratePos[0]=='N' && piratePos[1]=='K')){ if(piratePos[3]<60) return 1;}
 800306a:	e043      	b.n	80030f4 <Cross_Collision+0x270>
	}
	/**************************************************************************/


	/********************************PS, QR kereszteződés**********************/
	else if((myPos=='P' && nextPos=='S') || (myPos=='S' && nextPos=='P'))
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	2b50      	cmp	r3, #80	; 0x50
 8003070:	d102      	bne.n	8003078 <Cross_Collision+0x1f4>
 8003072:	79bb      	ldrb	r3, [r7, #6]
 8003074:	2b53      	cmp	r3, #83	; 0x53
 8003076:	d005      	beq.n	8003084 <Cross_Collision+0x200>
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	2b53      	cmp	r3, #83	; 0x53
 800307c:	d116      	bne.n	80030ac <Cross_Collision+0x228>
 800307e:	79bb      	ldrb	r3, [r7, #6]
 8003080:	2b50      	cmp	r3, #80	; 0x50
 8003082:	d113      	bne.n	80030ac <Cross_Collision+0x228>
	{
		if((piratePos[0]=='Q' && piratePos[1]=='R') || (piratePos[0]=='R' && piratePos[1]=='Q')) return 1;
 8003084:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <Cross_Collision+0x224>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b51      	cmp	r3, #81	; 0x51
 800308a:	d103      	bne.n	8003094 <Cross_Collision+0x210>
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <Cross_Collision+0x224>)
 800308e:	785b      	ldrb	r3, [r3, #1]
 8003090:	2b52      	cmp	r3, #82	; 0x52
 8003092:	d007      	beq.n	80030a4 <Cross_Collision+0x220>
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <Cross_Collision+0x224>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b52      	cmp	r3, #82	; 0x52
 800309a:	d12d      	bne.n	80030f8 <Cross_Collision+0x274>
 800309c:	4b02      	ldr	r3, [pc, #8]	; (80030a8 <Cross_Collision+0x224>)
 800309e:	785b      	ldrb	r3, [r3, #1]
 80030a0:	2b51      	cmp	r3, #81	; 0x51
 80030a2:	d129      	bne.n	80030f8 <Cross_Collision+0x274>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e029      	b.n	80030fc <Cross_Collision+0x278>
 80030a8:	200002ac 	.word	0x200002ac
	}
	else if((myPos=='Q' && nextPos=='R') || (myPos=='R' && nextPos=='Q'))
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	2b51      	cmp	r3, #81	; 0x51
 80030b0:	d102      	bne.n	80030b8 <Cross_Collision+0x234>
 80030b2:	79bb      	ldrb	r3, [r7, #6]
 80030b4:	2b52      	cmp	r3, #82	; 0x52
 80030b6:	d005      	beq.n	80030c4 <Cross_Collision+0x240>
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	2b52      	cmp	r3, #82	; 0x52
 80030bc:	d11d      	bne.n	80030fa <Cross_Collision+0x276>
 80030be:	79bb      	ldrb	r3, [r7, #6]
 80030c0:	2b51      	cmp	r3, #81	; 0x51
 80030c2:	d11a      	bne.n	80030fa <Cross_Collision+0x276>
	{
		if((piratePos[0]=='P' && piratePos[1]=='S') || (piratePos[0]=='S' && piratePos[1]=='P')) return 1;
 80030c4:	4b10      	ldr	r3, [pc, #64]	; (8003108 <Cross_Collision+0x284>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b50      	cmp	r3, #80	; 0x50
 80030ca:	d103      	bne.n	80030d4 <Cross_Collision+0x250>
 80030cc:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <Cross_Collision+0x284>)
 80030ce:	785b      	ldrb	r3, [r3, #1]
 80030d0:	2b53      	cmp	r3, #83	; 0x53
 80030d2:	d007      	beq.n	80030e4 <Cross_Collision+0x260>
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <Cross_Collision+0x284>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b53      	cmp	r3, #83	; 0x53
 80030da:	d10e      	bne.n	80030fa <Cross_Collision+0x276>
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <Cross_Collision+0x284>)
 80030de:	785b      	ldrb	r3, [r3, #1]
 80030e0:	2b50      	cmp	r3, #80	; 0x50
 80030e2:	d10a      	bne.n	80030fa <Cross_Collision+0x276>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e009      	b.n	80030fc <Cross_Collision+0x278>
		if((piratePos[0]=='G' && piratePos[1]=='H') || (piratePos[0]=='H' && piratePos[1]=='G')){ if(piratePos[3]<60) return 1;}
 80030e8:	bf00      	nop
 80030ea:	e006      	b.n	80030fa <Cross_Collision+0x276>
		if((piratePos[0]=='F' && piratePos[1]=='I') || (piratePos[0]=='I' && piratePos[1]=='F')){ if(piratePos[3]<60) return 1;}
 80030ec:	bf00      	nop
 80030ee:	e004      	b.n	80030fa <Cross_Collision+0x276>
		if((piratePos[0]=='L' && piratePos[1]=='M') || (piratePos[0]=='M' && piratePos[1]=='L')){ if(piratePos[3]<60) return 1;}
 80030f0:	bf00      	nop
 80030f2:	e002      	b.n	80030fa <Cross_Collision+0x276>
		if((piratePos[0]=='K' && piratePos[1]=='N') || (piratePos[0]=='N' && piratePos[1]=='K')){ if(piratePos[3]<60) return 1;}
 80030f4:	bf00      	nop
 80030f6:	e000      	b.n	80030fa <Cross_Collision+0x276>
		if((piratePos[0]=='Q' && piratePos[1]=='R') || (piratePos[0]=='R' && piratePos[1]=='Q')) return 1;
 80030f8:	bf00      	nop
	}
	/**************************************************************************/
	return 0;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	200002ac 	.word	0x200002ac
 800310c:	00000000 	.word	0x00000000

08003110 <Battery_Voltage_Compensate>:
float v=0;
//ha 1000 akkor a motor full csutkán megy előre
//ha -1000 akkor a motor full csutkán megy hátra

void Battery_Voltage_Compensate(ADC_HandleTypeDef *hadc_UNiMh,ADC_HandleTypeDef *hadc_ULiPo,UART_HandleTypeDef *huart_debugg)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b090      	sub	sp, #64	; 0x40
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
	char msg[30];
	uint32_t raw=0;
 800311c:	2300      	movs	r3, #0
 800311e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float bat;
	int i;

	//NiMh akku mérése
	for(i=0;i<20;i++)
 8003120:	2300      	movs	r3, #0
 8003122:	63bb      	str	r3, [r7, #56]	; 0x38
 8003124:	e016      	b.n	8003154 <Battery_Voltage_Compensate+0x44>
	{
		HAL_ADC_Start(hadc_UNiMh);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f003 fa3c 	bl	80065a4 <HAL_ADC_Start>
		HAL_Delay(10);
 800312c:	200a      	movs	r0, #10
 800312e:	f003 f9d1 	bl	80064d4 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_UNiMh,20);
 8003132:	2114      	movs	r1, #20
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f003 fb07 	bl	8006748 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 800313a:	200a      	movs	r0, #10
 800313c:	f003 f9ca 	bl	80064d4 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_UNiMh);
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f003 fb8c 	bl	800685e <HAL_ADC_GetValue>
 8003146:	4602      	mov	r2, r0
 8003148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314a:	4413      	add	r3, r2
 800314c:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 800314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003150:	3301      	adds	r3, #1
 8003152:	63bb      	str	r3, [r7, #56]	; 0x38
 8003154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003156:	2b13      	cmp	r3, #19
 8003158:	dde5      	ble.n	8003126 <Battery_Voltage_Compensate+0x16>
	}
	bat=(float)raw * 0.00460575 / 20.0;//ez a mi feszültségünk V-ban
 800315a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315c:	ee07 3a90 	vmov	s15, r3
 8003160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003164:	ee17 0a90 	vmov	r0, s15
 8003168:	f7fd fa0e 	bl	8000588 <__aeabi_f2d>
 800316c:	a37b      	add	r3, pc, #492	; (adr r3, 800335c <Battery_Voltage_Compensate+0x24c>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	f7fd fa61 	bl	8000638 <__aeabi_dmul>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	4b71      	ldr	r3, [pc, #452]	; (8003348 <Battery_Voltage_Compensate+0x238>)
 8003184:	f7fd fb82 	bl	800088c <__aeabi_ddiv>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	f7fd fd2a 	bl	8000be8 <__aeabi_d2f>
 8003194:	4603      	mov	r3, r0
 8003196:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"NiMh charge: %2.2f V \r\n", bat);
 8003198:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800319a:	f7fd f9f5 	bl	8000588 <__aeabi_f2d>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	f107 0014 	add.w	r0, r7, #20
 80031a6:	4969      	ldr	r1, [pc, #420]	; (800334c <Battery_Voltage_Compensate+0x23c>)
 80031a8:	f009 faea 	bl	800c780 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*) msg, strlen(msg),10);
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd f82d 	bl	8000210 <strlen>
 80031b6:	4603      	mov	r3, r0
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	f107 0114 	add.w	r1, r7, #20
 80031be:	230a      	movs	r3, #10
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f007 fd74 	bl	800acae <HAL_UART_Transmit>

	if(bat)compensation=7.75/bat;
 80031c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80031ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80031ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d2:	d009      	beq.n	80031e8 <Battery_Voltage_Compensate+0xd8>
 80031d4:	eef1 6a0f 	vmov.f32	s13, #31	; 0x40f80000  7.750
 80031d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80031dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031e0:	4b5b      	ldr	r3, [pc, #364]	; (8003350 <Battery_Voltage_Compensate+0x240>)
 80031e2:	edc3 7a00 	vstr	s15, [r3]
 80031e6:	e003      	b.n	80031f0 <Battery_Voltage_Compensate+0xe0>
	else compensation=1;
 80031e8:	4b59      	ldr	r3, [pc, #356]	; (8003350 <Battery_Voltage_Compensate+0x240>)
 80031ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80031ee:	601a      	str	r2, [r3, #0]

	if(bat < 7.2)
 80031f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031f2:	f7fd f9c9 	bl	8000588 <__aeabi_f2d>
 80031f6:	a34e      	add	r3, pc, #312	; (adr r3, 8003330 <Battery_Voltage_Compensate+0x220>)
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	f7fd fc8e 	bl	8000b1c <__aeabi_dcmplt>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d010      	beq.n	8003228 <Battery_Voltage_Compensate+0x118>
	{
		for(i=0;i<10;i++)
 8003206:	2300      	movs	r3, #0
 8003208:	63bb      	str	r3, [r7, #56]	; 0x38
 800320a:	e00a      	b.n	8003222 <Battery_Voltage_Compensate+0x112>
		{
			LED_Y_TOGGLE;
 800320c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003210:	4850      	ldr	r0, [pc, #320]	; (8003354 <Battery_Voltage_Compensate+0x244>)
 8003212:	f005 f812 	bl	800823a <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8003216:	20c8      	movs	r0, #200	; 0xc8
 8003218:	f003 f95c 	bl	80064d4 <HAL_Delay>
		for(i=0;i<10;i++)
 800321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321e:	3301      	adds	r3, #1
 8003220:	63bb      	str	r3, [r7, #56]	; 0x38
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	2b09      	cmp	r3, #9
 8003226:	ddf1      	ble.n	800320c <Battery_Voltage_Compensate+0xfc>
		}
	}

	//LiPo akku mérése
	raw=0;
 8003228:	2300      	movs	r3, #0
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 800322c:	2300      	movs	r3, #0
 800322e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003230:	e016      	b.n	8003260 <Battery_Voltage_Compensate+0x150>
	{
		HAL_ADC_Start(hadc_ULiPo);
 8003232:	68b8      	ldr	r0, [r7, #8]
 8003234:	f003 f9b6 	bl	80065a4 <HAL_ADC_Start>
		HAL_Delay(10);
 8003238:	200a      	movs	r0, #10
 800323a:	f003 f94b 	bl	80064d4 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_ULiPo,20);
 800323e:	2114      	movs	r1, #20
 8003240:	68b8      	ldr	r0, [r7, #8]
 8003242:	f003 fa81 	bl	8006748 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 8003246:	200a      	movs	r0, #10
 8003248:	f003 f944 	bl	80064d4 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_ULiPo);
 800324c:	68b8      	ldr	r0, [r7, #8]
 800324e:	f003 fb06 	bl	800685e <HAL_ADC_GetValue>
 8003252:	4602      	mov	r2, r0
 8003254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003256:	4413      	add	r3, r2
 8003258:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	3301      	adds	r3, #1
 800325e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003262:	2b13      	cmp	r3, #19
 8003264:	dde5      	ble.n	8003232 <Battery_Voltage_Compensate+0x122>

	}
	bat = (float)raw * 0.003241242 / 20.0 + 0.02;//ez a mi feszültségünk V-ban
 8003266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003268:	ee07 3a90 	vmov	s15, r3
 800326c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003270:	ee17 0a90 	vmov	r0, s15
 8003274:	f7fd f988 	bl	8000588 <__aeabi_f2d>
 8003278:	a32f      	add	r3, pc, #188	; (adr r3, 8003338 <Battery_Voltage_Compensate+0x228>)
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	f7fd f9db 	bl	8000638 <__aeabi_dmul>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4610      	mov	r0, r2
 8003288:	4619      	mov	r1, r3
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <Battery_Voltage_Compensate+0x238>)
 8003290:	f7fd fafc 	bl	800088c <__aeabi_ddiv>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	a328      	add	r3, pc, #160	; (adr r3, 8003340 <Battery_Voltage_Compensate+0x230>)
 800329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a2:	f7fd f813 	bl	80002cc <__adddf3>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	f7fd fc9b 	bl	8000be8 <__aeabi_d2f>
 80032b2:	4603      	mov	r3, r0
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"LiPo charge: %2.2f V \r\n", bat);
 80032b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032b8:	f7fd f966 	bl	8000588 <__aeabi_f2d>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	f107 0014 	add.w	r0, r7, #20
 80032c4:	4924      	ldr	r1, [pc, #144]	; (8003358 <Battery_Voltage_Compensate+0x248>)
 80032c6:	f009 fa5b 	bl	800c780 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)msg, strlen(msg),10);
 80032ca:	f107 0314 	add.w	r3, r7, #20
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fc ff9e 	bl	8000210 <strlen>
 80032d4:	4603      	mov	r3, r0
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	f107 0114 	add.w	r1, r7, #20
 80032dc:	230a      	movs	r3, #10
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f007 fce5 	bl	800acae <HAL_UART_Transmit>

	/**/
	if(bat < 10)
 80032e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80032e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f4:	d510      	bpl.n	8003318 <Battery_Voltage_Compensate+0x208>
	{
		for(i=0;i<20;i++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80032fa:	e00a      	b.n	8003312 <Battery_Voltage_Compensate+0x202>
		{
			LED_Y_TOGGLE;
 80032fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003300:	4814      	ldr	r0, [pc, #80]	; (8003354 <Battery_Voltage_Compensate+0x244>)
 8003302:	f004 ff9a 	bl	800823a <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8003306:	20c8      	movs	r0, #200	; 0xc8
 8003308:	f003 f8e4 	bl	80064d4 <HAL_Delay>
		for(i=0;i<20;i++)
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	3301      	adds	r3, #1
 8003310:	63bb      	str	r3, [r7, #56]	; 0x38
 8003312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003314:	2b13      	cmp	r3, #19
 8003316:	ddf1      	ble.n	80032fc <Battery_Voltage_Compensate+0x1ec>
		}
	}

	LED_Y(0);
 8003318:	2201      	movs	r2, #1
 800331a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800331e:	480d      	ldr	r0, [pc, #52]	; (8003354 <Battery_Voltage_Compensate+0x244>)
 8003320:	f004 ff72 	bl	8008208 <HAL_GPIO_WritePin>

}
 8003324:	bf00      	nop
 8003326:	3740      	adds	r7, #64	; 0x40
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	f3af 8000 	nop.w
 8003330:	cccccccd 	.word	0xcccccccd
 8003334:	401ccccc 	.word	0x401ccccc
 8003338:	8c6df334 	.word	0x8c6df334
 800333c:	3f6a8d60 	.word	0x3f6a8d60
 8003340:	47ae147b 	.word	0x47ae147b
 8003344:	3f947ae1 	.word	0x3f947ae1
 8003348:	40340000 	.word	0x40340000
 800334c:	08010230 	.word	0x08010230
 8003350:	20000018 	.word	0x20000018
 8003354:	40020400 	.word	0x40020400
 8003358:	08010248 	.word	0x08010248
 800335c:	99fa11a9 	.word	0x99fa11a9
 8003360:	3f72dd7a 	.word	0x3f72dd7a
 8003364:	00000000 	.word	0x00000000

08003368 <Measure_Velocity_Task>:

void Measure_Velocity_Task(TIM_HandleTypeDef *htim_encoder,uint32_t tick, uint32_t period)
{
 8003368:	b5b0      	push	{r4, r5, r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
	static uint32_t tick_prev=0;
	static uint32_t measure_v_task_tick=4;
	static float alpha=0.3;
	static float invalpha=0.7;
	float v_uj=0;
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	617b      	str	r3, [r7, #20]

	if(measure_v_task_tick>tick) return;
 800337a:	4b31      	ldr	r3, [pc, #196]	; (8003440 <Measure_Velocity_Task+0xd8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	429a      	cmp	r2, r3
 8003382:	d354      	bcc.n	800342e <Measure_Velocity_Task+0xc6>
	measure_v_task_tick= tick + period;
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	4a2d      	ldr	r2, [pc, #180]	; (8003440 <Measure_Velocity_Task+0xd8>)
 800338c:	6013      	str	r3, [r2, #0]
	if(!tick_prev)
 800338e:	4b2d      	ldr	r3, [pc, #180]	; (8003444 <Measure_Velocity_Task+0xdc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d103      	bne.n	800339e <Measure_Velocity_Task+0x36>
	{
		tick_prev=tick;
 8003396:	4a2b      	ldr	r2, [pc, #172]	; (8003444 <Measure_Velocity_Task+0xdc>)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	6013      	str	r3, [r2, #0]
		return;
 800339c:	e048      	b.n	8003430 <Measure_Velocity_Task+0xc8>
	}
	v_uj =((float) 0x8000 - (float) __HAL_TIM_GET_COUNTER(htim_encoder))*7.49/(float)period; //mm/s dimenzió
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	ee07 3a90 	vmov	s15, r3
 80033a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003448 <Measure_Velocity_Task+0xe0>
 80033b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b4:	ee17 0a90 	vmov	r0, s15
 80033b8:	f7fd f8e6 	bl	8000588 <__aeabi_f2d>
 80033bc:	a31e      	add	r3, pc, #120	; (adr r3, 8003438 <Measure_Velocity_Task+0xd0>)
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	f7fd f939 	bl	8000638 <__aeabi_dmul>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4614      	mov	r4, r2
 80033cc:	461d      	mov	r5, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d8:	ee17 0a90 	vmov	r0, s15
 80033dc:	f7fd f8d4 	bl	8000588 <__aeabi_f2d>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4620      	mov	r0, r4
 80033e6:	4629      	mov	r1, r5
 80033e8:	f7fd fa50 	bl	800088c <__aeabi_ddiv>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	f7fd fbf8 	bl	8000be8 <__aeabi_d2f>
 80033f8:	4603      	mov	r3, r0
 80033fa:	617b      	str	r3, [r7, #20]
	TIM8->CNT=0x8000;
 80033fc:	4b13      	ldr	r3, [pc, #76]	; (800344c <Measure_Velocity_Task+0xe4>)
 80033fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003402:	625a      	str	r2, [r3, #36]	; 0x24
	//tick_prev=tick;
	//exponenciális szűrés
	v = alpha*(float)v_uj + invalpha*v;
 8003404:	4b12      	ldr	r3, [pc, #72]	; (8003450 <Measure_Velocity_Task+0xe8>)
 8003406:	ed93 7a00 	vldr	s14, [r3]
 800340a:	edd7 7a05 	vldr	s15, [r7, #20]
 800340e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <Measure_Velocity_Task+0xec>)
 8003414:	edd3 6a00 	vldr	s13, [r3]
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <Measure_Velocity_Task+0xf0>)
 800341a:	edd3 7a00 	vldr	s15, [r3]
 800341e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <Measure_Velocity_Task+0xf0>)
 8003428:	edc3 7a00 	vstr	s15, [r3]
 800342c:	e000      	b.n	8003430 <Measure_Velocity_Task+0xc8>
	if(measure_v_task_tick>tick) return;
 800342e:	bf00      	nop
}
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bdb0      	pop	{r4, r5, r7, pc}
 8003436:	bf00      	nop
 8003438:	8f5c28f6 	.word	0x8f5c28f6
 800343c:	401df5c2 	.word	0x401df5c2
 8003440:	2000001c 	.word	0x2000001c
 8003444:	20000610 	.word	0x20000610
 8003448:	47000000 	.word	0x47000000
 800344c:	40010400 	.word	0x40010400
 8003450:	20000020 	.word	0x20000020
 8003454:	20000024 	.word	0x20000024
 8003458:	2000060c 	.word	0x2000060c
 800345c:	00000000 	.word	0x00000000

08003460 <Motor_Drive_Task>:

void Motor_Drive_Task(TIM_HandleTypeDef *htim_motor, UART_HandleTypeDef *huart, uint32_t tick, uint32_t period) //DUTY paramtert kiszedtem -> változtassuk a globális változót
{
 8003460:	b5b0      	push	{r4, r5, r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
	static uint32_t motor_drive_task_tick=5;
	static float f,u=0;

	int32_t ccr1;
	int32_t ccr2;
	if(motor_drive_task_tick>tick) return;
 800346e:	4b90      	ldr	r3, [pc, #576]	; (80036b0 <Motor_Drive_Task+0x250>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	429a      	cmp	r2, r3
 8003476:	f0c0 8109 	bcc.w	800368c <Motor_Drive_Task+0x22c>
	motor_drive_task_tick= tick + period;
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	4413      	add	r3, r2
 8003480:	4a8b      	ldr	r2, [pc, #556]	; (80036b0 <Motor_Drive_Task+0x250>)
 8003482:	6013      	str	r3, [r2, #0]

	if(motorEnRemote && motorEnLineOk) //ha nem nyomtunk vészstopot és az akkuk is rendben vannak akkor pöröghet a motor
 8003484:	4b8b      	ldr	r3, [pc, #556]	; (80036b4 <Motor_Drive_Task+0x254>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80b4 	beq.w	80035f6 <Motor_Drive_Task+0x196>
 800348e:	4b8a      	ldr	r3, [pc, #552]	; (80036b8 <Motor_Drive_Task+0x258>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80af 	beq.w	80035f6 <Motor_Drive_Task+0x196>
	{
		//az u paraméter a bevatkozó jel minusz holtásávot adja meg
		u= KC * (v_ref - v) * compensation + f;
 8003498:	4b88      	ldr	r3, [pc, #544]	; (80036bc <Motor_Drive_Task+0x25c>)
 800349a:	ed93 7a00 	vldr	s14, [r3]
 800349e:	4b88      	ldr	r3, [pc, #544]	; (80036c0 <Motor_Drive_Task+0x260>)
 80034a0:	edd3 7a00 	vldr	s15, [r3]
 80034a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034a8:	ee17 0a90 	vmov	r0, s15
 80034ac:	f7fd f86c 	bl	8000588 <__aeabi_f2d>
 80034b0:	a379      	add	r3, pc, #484	; (adr r3, 8003698 <Motor_Drive_Task+0x238>)
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f7fd f8bf 	bl	8000638 <__aeabi_dmul>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4614      	mov	r4, r2
 80034c0:	461d      	mov	r5, r3
 80034c2:	4b80      	ldr	r3, [pc, #512]	; (80036c4 <Motor_Drive_Task+0x264>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd f85e 	bl	8000588 <__aeabi_f2d>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4620      	mov	r0, r4
 80034d2:	4629      	mov	r1, r5
 80034d4:	f7fd f8b0 	bl	8000638 <__aeabi_dmul>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4614      	mov	r4, r2
 80034de:	461d      	mov	r5, r3
 80034e0:	4b79      	ldr	r3, [pc, #484]	; (80036c8 <Motor_Drive_Task+0x268>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd f84f 	bl	8000588 <__aeabi_f2d>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4620      	mov	r0, r4
 80034f0:	4629      	mov	r1, r5
 80034f2:	f7fc feeb 	bl	80002cc <__adddf3>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4610      	mov	r0, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	f7fd fb73 	bl	8000be8 <__aeabi_d2f>
 8003502:	4603      	mov	r3, r0
 8003504:	4a71      	ldr	r2, [pc, #452]	; (80036cc <Motor_Drive_Task+0x26c>)
 8003506:	6013      	str	r3, [r2, #0]
		if(u>880) u=880;
 8003508:	4b70      	ldr	r3, [pc, #448]	; (80036cc <Motor_Drive_Task+0x26c>)
 800350a:	edd3 7a00 	vldr	s15, [r3]
 800350e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80036d0 <Motor_Drive_Task+0x270>
 8003512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351a:	dd03      	ble.n	8003524 <Motor_Drive_Task+0xc4>
 800351c:	4b6b      	ldr	r3, [pc, #428]	; (80036cc <Motor_Drive_Task+0x26c>)
 800351e:	4a6d      	ldr	r2, [pc, #436]	; (80036d4 <Motor_Drive_Task+0x274>)
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	e00c      	b.n	800353e <Motor_Drive_Task+0xde>
		else if(u<-500)u=-500;
 8003524:	4b69      	ldr	r3, [pc, #420]	; (80036cc <Motor_Drive_Task+0x26c>)
 8003526:	edd3 7a00 	vldr	s15, [r3]
 800352a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80036d8 <Motor_Drive_Task+0x278>
 800352e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003536:	d502      	bpl.n	800353e <Motor_Drive_Task+0xde>
 8003538:	4b64      	ldr	r3, [pc, #400]	; (80036cc <Motor_Drive_Task+0x26c>)
 800353a:	4a68      	ldr	r2, [pc, #416]	; (80036dc <Motor_Drive_Task+0x27c>)
 800353c:	601a      	str	r2, [r3, #0]
		f = ZD*f + (1-ZD)*u;
 800353e:	4b62      	ldr	r3, [pc, #392]	; (80036c8 <Motor_Drive_Task+0x268>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fd f820 	bl	8000588 <__aeabi_f2d>
 8003548:	a355      	add	r3, pc, #340	; (adr r3, 80036a0 <Motor_Drive_Task+0x240>)
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	f7fd f873 	bl	8000638 <__aeabi_dmul>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4614      	mov	r4, r2
 8003558:	461d      	mov	r5, r3
 800355a:	4b5c      	ldr	r3, [pc, #368]	; (80036cc <Motor_Drive_Task+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7fd f812 	bl	8000588 <__aeabi_f2d>
 8003564:	a350      	add	r3, pc, #320	; (adr r3, 80036a8 <Motor_Drive_Task+0x248>)
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f7fd f865 	bl	8000638 <__aeabi_dmul>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4620      	mov	r0, r4
 8003574:	4629      	mov	r1, r5
 8003576:	f7fc fea9 	bl	80002cc <__adddf3>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4610      	mov	r0, r2
 8003580:	4619      	mov	r1, r3
 8003582:	f7fd fb31 	bl	8000be8 <__aeabi_d2f>
 8003586:	4603      	mov	r3, r0
 8003588:	4a4f      	ldr	r2, [pc, #316]	; (80036c8 <Motor_Drive_Task+0x268>)
 800358a:	6013      	str	r3, [r2, #0]
		//ez alapján a kiadandó kitöltési tényező
		if(u>0) motorDuty=(int)u+70;
 800358c:	4b4f      	ldr	r3, [pc, #316]	; (80036cc <Motor_Drive_Task+0x26c>)
 800358e:	edd3 7a00 	vldr	s15, [r3]
 8003592:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359a:	dd0a      	ble.n	80035b2 <Motor_Drive_Task+0x152>
 800359c:	4b4b      	ldr	r3, [pc, #300]	; (80036cc <Motor_Drive_Task+0x26c>)
 800359e:	edd3 7a00 	vldr	s15, [r3]
 80035a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035a6:	ee17 3a90 	vmov	r3, s15
 80035aa:	3346      	adds	r3, #70	; 0x46
 80035ac:	4a4c      	ldr	r2, [pc, #304]	; (80036e0 <Motor_Drive_Task+0x280>)
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	e01b      	b.n	80035ea <Motor_Drive_Task+0x18a>
		else if(u<0) motorDuty=(int)u-70;
 80035b2:	4b46      	ldr	r3, [pc, #280]	; (80036cc <Motor_Drive_Task+0x26c>)
 80035b4:	edd3 7a00 	vldr	s15, [r3]
 80035b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c0:	d50a      	bpl.n	80035d8 <Motor_Drive_Task+0x178>
 80035c2:	4b42      	ldr	r3, [pc, #264]	; (80036cc <Motor_Drive_Task+0x26c>)
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035cc:	ee17 3a90 	vmov	r3, s15
 80035d0:	3b46      	subs	r3, #70	; 0x46
 80035d2:	4a43      	ldr	r2, [pc, #268]	; (80036e0 <Motor_Drive_Task+0x280>)
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e008      	b.n	80035ea <Motor_Drive_Task+0x18a>
		else motorDuty=(int)u;
 80035d8:	4b3c      	ldr	r3, [pc, #240]	; (80036cc <Motor_Drive_Task+0x26c>)
 80035da:	edd3 7a00 	vldr	s15, [r3]
 80035de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035e2:	ee17 2a90 	vmov	r2, s15
 80035e6:	4b3e      	ldr	r3, [pc, #248]	; (80036e0 <Motor_Drive_Task+0x280>)
 80035e8:	601a      	str	r2, [r3, #0]


		MOTOR_EN(1);
 80035ea:	2201      	movs	r2, #1
 80035ec:	2140      	movs	r1, #64	; 0x40
 80035ee:	483d      	ldr	r0, [pc, #244]	; (80036e4 <Motor_Drive_Task+0x284>)
 80035f0:	f004 fe0a 	bl	8008208 <HAL_GPIO_WritePin>
 80035f4:	e00c      	b.n	8003610 <Motor_Drive_Task+0x1b0>
	}
	else
	{	f=u=0;
 80035f6:	4b35      	ldr	r3, [pc, #212]	; (80036cc <Motor_Drive_Task+0x26c>)
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	4b33      	ldr	r3, [pc, #204]	; (80036cc <Motor_Drive_Task+0x26c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a31      	ldr	r2, [pc, #196]	; (80036c8 <Motor_Drive_Task+0x268>)
 8003604:	6013      	str	r3, [r2, #0]
		MOTOR_EN(0); //amugy stop
 8003606:	2200      	movs	r2, #0
 8003608:	2140      	movs	r1, #64	; 0x40
 800360a:	4836      	ldr	r0, [pc, #216]	; (80036e4 <Motor_Drive_Task+0x284>)
 800360c:	f004 fdfc 	bl	8008208 <HAL_GPIO_WritePin>
	}
	//A két érték amit irogatsz (TIM3->CCR1,CCR2) konkrét timer periféria regiszterek, nem feltétlen jó őket folyamatosan újraírni 10ms enként
	/**/
	if(mode==FAST && rxBuf[1]<1)
 8003610:	4b35      	ldr	r3, [pc, #212]	; (80036e8 <Motor_Drive_Task+0x288>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b3f      	cmp	r3, #63	; 0x3f
 8003616:	d10c      	bne.n	8003632 <Motor_Drive_Task+0x1d2>
 8003618:	4b34      	ldr	r3, [pc, #208]	; (80036ec <Motor_Drive_Task+0x28c>)
 800361a:	785b      	ldrb	r3, [r3, #1]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d108      	bne.n	8003632 <Motor_Drive_Task+0x1d2>
	{
		TIM3->CCR1=499;
 8003620:	4b33      	ldr	r3, [pc, #204]	; (80036f0 <Motor_Drive_Task+0x290>)
 8003622:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003626:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2=499;
 8003628:	4b31      	ldr	r3, [pc, #196]	; (80036f0 <Motor_Drive_Task+0x290>)
 800362a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800362e:	639a      	str	r2, [r3, #56]	; 0x38
 8003630:	e027      	b.n	8003682 <Motor_Drive_Task+0x222>
		//LED_Y_TOGGLE;
	}
	else if(motorDuty!=motorDutyPrev)//csak akkor írjuk át őket ha tényleg muszáj (ha változtak az előző taskhívás óta)
 8003632:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <Motor_Drive_Task+0x280>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b2f      	ldr	r3, [pc, #188]	; (80036f4 <Motor_Drive_Task+0x294>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d021      	beq.n	8003682 <Motor_Drive_Task+0x222>
	{
		ccr2 = (motorDuty + 1000)/2-1;
 800363e:	4b28      	ldr	r3, [pc, #160]	; (80036e0 <Motor_Drive_Task+0x280>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003646:	0fda      	lsrs	r2, r3, #31
 8003648:	4413      	add	r3, r2
 800364a:	105b      	asrs	r3, r3, #1
 800364c:	3b01      	subs	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
		if(ccr2>950)ccr2=950;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003656:	4293      	cmp	r3, r2
 8003658:	dd02      	ble.n	8003660 <Motor_Drive_Task+0x200>
 800365a:	f240 33b6 	movw	r3, #950	; 0x3b6
 800365e:	617b      	str	r3, [r7, #20]
		if(ccr2<-950)ccr2=-950;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <Motor_Drive_Task+0x298>)
 8003664:	4293      	cmp	r3, r2
 8003666:	da01      	bge.n	800366c <Motor_Drive_Task+0x20c>
 8003668:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <Motor_Drive_Task+0x298>)
 800366a:	617b      	str	r3, [r7, #20]
		ccr1= 998-ccr2;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8003672:	3302      	adds	r3, #2
 8003674:	613b      	str	r3, [r7, #16]

		//2 Referencia megadása
		//Ezeket a loopba kéne változtatni folyamatosan, pwm-elinditas mashova kell majd

		TIM3->CCR1=ccr1;
 8003676:	4a1e      	ldr	r2, [pc, #120]	; (80036f0 <Motor_Drive_Task+0x290>)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2=ccr2;
 800367c:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <Motor_Drive_Task+0x290>)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	6393      	str	r3, [r2, #56]	; 0x38
	}
	motorDutyPrev=motorDuty;
 8003682:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <Motor_Drive_Task+0x280>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <Motor_Drive_Task+0x294>)
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	e000      	b.n	800368e <Motor_Drive_Task+0x22e>
	if(motor_drive_task_tick>tick) return;
 800368c:	bf00      	nop
}
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bdb0      	pop	{r4, r5, r7, pc}
 8003694:	f3af 8000 	nop.w
 8003698:	30be0ded 	.word	0x30be0ded
 800369c:	3fd02a99 	.word	0x3fd02a99
 80036a0:	9b3d07c8 	.word	0x9b3d07c8
 80036a4:	3fef9f55 	.word	0x3fef9f55
 80036a8:	30be0e00 	.word	0x30be0e00
 80036ac:	3f882a99 	.word	0x3f882a99
 80036b0:	20000028 	.word	0x20000028
 80036b4:	20000ae8 	.word	0x20000ae8
 80036b8:	20000ae9 	.word	0x20000ae9
 80036bc:	20000294 	.word	0x20000294
 80036c0:	2000060c 	.word	0x2000060c
 80036c4:	20000018 	.word	0x20000018
 80036c8:	20000614 	.word	0x20000614
 80036cc:	20000618 	.word	0x20000618
 80036d0:	445c0000 	.word	0x445c0000
 80036d4:	445c0000 	.word	0x445c0000
 80036d8:	c3fa0000 	.word	0xc3fa0000
 80036dc:	c3fa0000 	.word	0xc3fa0000
 80036e0:	2000061c 	.word	0x2000061c
 80036e4:	40020400 	.word	0x40020400
 80036e8:	20000292 	.word	0x20000292
 80036ec:	20000624 	.word	0x20000624
 80036f0:	40000400 	.word	0x40000400
 80036f4:	20000620 	.word	0x20000620
 80036f8:	fffffc4a 	.word	0xfffffc4a

080036fc <G0_Read_Fast>:

uint16_t boostCnt=0;


uint8_t G0_Read_Fast(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

	uint8_t state=0;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]
	txBuf[0]=CMD_READ_FAST;
 800370a:	4b13      	ldr	r3, [pc, #76]	; (8003758 <G0_Read_Fast+0x5c>)
 800370c:	222a      	movs	r2, #42	; 0x2a
 800370e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 2);
 8003710:	2302      	movs	r3, #2
 8003712:	2201      	movs	r2, #1
 8003714:	4910      	ldr	r1, [pc, #64]	; (8003758 <G0_Read_Fast+0x5c>)
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f007 fac9 	bl	800acae <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 8, 4);
 800371c:	2304      	movs	r3, #4
 800371e:	2208      	movs	r2, #8
 8003720:	490e      	ldr	r1, [pc, #56]	; (800375c <G0_Read_Fast+0x60>)
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f007 fb55 	bl	800add2 <HAL_UART_Receive>
 8003728:	4603      	mov	r3, r0
 800372a:	73fb      	strb	r3, [r7, #15]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 800372c:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <G0_Read_Fast+0x64>)
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
	if((state==HAL_OK)&&(rxBuf[0]==START_BYTE_FAST) && (rxBuf[7]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <G0_Read_Fast+0x50>
 8003738:	4b08      	ldr	r3, [pc, #32]	; (800375c <G0_Read_Fast+0x60>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b41      	cmp	r3, #65	; 0x41
 800373e:	d105      	bne.n	800374c <G0_Read_Fast+0x50>
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <G0_Read_Fast+0x60>)
 8003742:	79db      	ldrb	r3, [r3, #7]
 8003744:	2b12      	cmp	r3, #18
 8003746:	d101      	bne.n	800374c <G0_Read_Fast+0x50>
	{
		return 0;
 8003748:	2300      	movs	r3, #0
 800374a:	e000      	b.n	800374e <G0_Read_Fast+0x52>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 800374c:	2301      	movs	r3, #1
	}
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	2000002c 	.word	0x2000002c
 800375c:	20000624 	.word	0x20000624
 8003760:	20000ae9 	.word	0x20000ae9

08003764 <G0_Read_Skill>:

uint8_t G0_Read_Skill(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint8_t command)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	4613      	mov	r3, r2
 8003770:	71fb      	strb	r3, [r7, #7]
	uint8_t state=0;
 8003772:	2300      	movs	r3, #0
 8003774:	75fb      	strb	r3, [r7, #23]
	txBuf[0]=command;
 8003776:	4a15      	ldr	r2, [pc, #84]	; (80037cc <G0_Read_Skill+0x68>)
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 2);
 800377c:	2302      	movs	r3, #2
 800377e:	2201      	movs	r2, #1
 8003780:	4912      	ldr	r1, [pc, #72]	; (80037cc <G0_Read_Skill+0x68>)
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f007 fa93 	bl	800acae <HAL_UART_Transmit>
	state = HAL_UART_Receive(huart_stm, rxBuf, 10, 4);
 8003788:	2304      	movs	r3, #4
 800378a:	220a      	movs	r2, #10
 800378c:	4910      	ldr	r1, [pc, #64]	; (80037d0 <G0_Read_Skill+0x6c>)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f007 fb1f 	bl	800add2 <HAL_UART_Receive>
 8003794:	4603      	mov	r3, r0
 8003796:	75fb      	strb	r3, [r7, #23]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8003798:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <G0_Read_Skill+0x70>)
 800379a:	2201      	movs	r2, #1
 800379c:	701a      	strb	r2, [r3, #0]
	if((state==HAL_OK)&&(rxBuf[0]==START_BYTE_SKILL_FORWARD || rxBuf[0]==START_BYTE_SKILL_REVERSE) && (rxBuf[9]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10d      	bne.n	80037c0 <G0_Read_Skill+0x5c>
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <G0_Read_Skill+0x6c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b50      	cmp	r3, #80	; 0x50
 80037aa:	d003      	beq.n	80037b4 <G0_Read_Skill+0x50>
 80037ac:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <G0_Read_Skill+0x6c>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2ba8      	cmp	r3, #168	; 0xa8
 80037b2:	d105      	bne.n	80037c0 <G0_Read_Skill+0x5c>
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <G0_Read_Skill+0x6c>)
 80037b6:	7a5b      	ldrb	r3, [r3, #9]
 80037b8:	2b12      	cmp	r3, #18
 80037ba:	d101      	bne.n	80037c0 <G0_Read_Skill+0x5c>
	{
		return 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <G0_Read_Skill+0x5e>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 80037c0:	2301      	movs	r3, #1
	}
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	2000002c 	.word	0x2000002c
 80037d0:	20000624 	.word	0x20000624
 80037d4:	20000ae9 	.word	0x20000ae9

080037d8 <Line_Track_Task>:


void Line_Track_Task(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint32_t tick, uint32_t period)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
	static float PHI;
	static float gamma=0;
	static uint32_t ccr_rear_prev=0;
	static uint32_t tick_prev=0;

	if(line_track_task_tick>tick) return;
 80037e6:	4b96      	ldr	r3, [pc, #600]	; (8003a40 <Line_Track_Task+0x268>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	f0c0 82ed 	bcc.w	8003dcc <Line_Track_Task+0x5f4>
	line_track_task_tick = tick + period;
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4413      	add	r3, r2
 80037f8:	4a91      	ldr	r2, [pc, #580]	; (8003a40 <Line_Track_Task+0x268>)
 80037fa:	6013      	str	r3, [r2, #0]

	if(mode == SKILL)
 80037fc:	4b91      	ldr	r3, [pc, #580]	; (8003a44 <Line_Track_Task+0x26c>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b52      	cmp	r3, #82	; 0x52
 8003802:	f040 8212 	bne.w	8003c2a <Line_Track_Task+0x452>
	{
		if(orientation==FORWARD)
 8003806:	4b90      	ldr	r3, [pc, #576]	; (8003a48 <Line_Track_Task+0x270>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f040 80eb 	bne.w	80039e6 <Line_Track_Task+0x20e>
		{
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_FORWARD))return;
 8003810:	2239      	movs	r2, #57	; 0x39
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7ff ffa5 	bl	8003764 <G0_Read_Skill>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	f040 82d7 	bne.w	8003dd0 <Line_Track_Task+0x5f8>

			uint8_t tmp=Lane_Changer(tick);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f001 f820 	bl	8004868 <Lane_Changer>
 8003828:	4603      	mov	r3, r0
 800382a:	75bb      	strb	r3, [r7, #22]
			if(v_control==NORMAL_VEL)v_ref=1100;
 800382c:	4b87      	ldr	r3, [pc, #540]	; (8003a4c <Line_Track_Task+0x274>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d103      	bne.n	800383c <Line_Track_Task+0x64>
 8003834:	4b86      	ldr	r3, [pc, #536]	; (8003a50 <Line_Track_Task+0x278>)
 8003836:	4a87      	ldr	r2, [pc, #540]	; (8003a54 <Line_Track_Task+0x27c>)
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	e00e      	b.n	800385a <Line_Track_Task+0x82>
			else if(v_control==SLOW_DOWN)v_ref=600;
 800383c:	4b83      	ldr	r3, [pc, #524]	; (8003a4c <Line_Track_Task+0x274>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d103      	bne.n	800384c <Line_Track_Task+0x74>
 8003844:	4b82      	ldr	r3, [pc, #520]	; (8003a50 <Line_Track_Task+0x278>)
 8003846:	4a84      	ldr	r2, [pc, #528]	; (8003a58 <Line_Track_Task+0x280>)
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	e006      	b.n	800385a <Line_Track_Task+0x82>
			else if(v_control==STOP)v_ref=100;
 800384c:	4b7f      	ldr	r3, [pc, #508]	; (8003a4c <Line_Track_Task+0x274>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <Line_Track_Task+0x82>
 8003854:	4b7e      	ldr	r3, [pc, #504]	; (8003a50 <Line_Track_Task+0x278>)
 8003856:	4a81      	ldr	r2, [pc, #516]	; (8003a5c <Line_Track_Task+0x284>)
 8003858:	601a      	str	r2, [r3, #0]

			if(tmp)return;
 800385a:	7dbb      	ldrb	r3, [r7, #22]
 800385c:	2b00      	cmp	r3, #0
 800385e:	f040 82b9 	bne.w	8003dd4 <Line_Track_Task+0x5fc>

			Detect_Node4(huart_debugg, tick);
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	68b8      	ldr	r0, [r7, #8]
 8003866:	f000 ff6b 	bl	8004740 <Detect_Node4>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 800386a:	4b7d      	ldr	r3, [pc, #500]	; (8003a60 <Line_Track_Task+0x288>)
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 82b2 	beq.w	8003dd8 <Line_Track_Task+0x600>
 8003874:	4b7a      	ldr	r3, [pc, #488]	; (8003a60 <Line_Track_Task+0x288>)
 8003876:	785b      	ldrb	r3, [r3, #1]
 8003878:	2b04      	cmp	r3, #4
 800387a:	f200 82ad 	bhi.w	8003dd8 <Line_Track_Task+0x600>
			gamma = Skill_Mode(huart_debugg, 0.004, 0.004, tick); //kD 4ms -es futáshoz hangolva
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	eddf 0a78 	vldr	s1, [pc, #480]	; 8003a64 <Line_Track_Task+0x28c>
 8003884:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8003a64 <Line_Track_Task+0x28c>
 8003888:	68b8      	ldr	r0, [r7, #8]
 800388a:	f000 fdb5 	bl	80043f8 <Skill_Mode>
 800388e:	eef0 7a40 	vmov.f32	s15, s0
 8003892:	4b75      	ldr	r3, [pc, #468]	; (8003a68 <Line_Track_Task+0x290>)
 8003894:	edc3 7a00 	vstr	s15, [r3]

			//ELSŐSZERVÓ ELŐREMENETBEN
			PHI = atan((L/(L+D_FRONT))*tan(gamma));
 8003898:	4b73      	ldr	r3, [pc, #460]	; (8003a68 <Line_Track_Task+0x290>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7fc fe73 	bl	8000588 <__aeabi_f2d>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	ec43 2b10 	vmov	d0, r2, r3
 80038aa:	f00b fb8d 	bl	800efc8 <tan>
 80038ae:	ec51 0b10 	vmov	r0, r1, d0
 80038b2:	a35f      	add	r3, pc, #380	; (adr r3, 8003a30 <Line_Track_Task+0x258>)
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f7fc febe 	bl	8000638 <__aeabi_dmul>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	ec43 2b17 	vmov	d7, r2, r3
 80038c4:	eeb0 0a47 	vmov.f32	s0, s14
 80038c8:	eef0 0a67 	vmov.f32	s1, s15
 80038cc:	f00b f9d0 	bl	800ec70 <atan>
 80038d0:	ec53 2b10 	vmov	r2, r3, d0
 80038d4:	4610      	mov	r0, r2
 80038d6:	4619      	mov	r1, r3
 80038d8:	f7fd f986 	bl	8000be8 <__aeabi_d2f>
 80038dc:	4603      	mov	r3, r0
 80038de:	4a63      	ldr	r2, [pc, #396]	; (8003a6c <Line_Track_Task+0x294>)
 80038e0:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_FRONT_CCR_MIDDLE);//balra kanyarodás
 80038e2:	4b62      	ldr	r3, [pc, #392]	; (8003a6c <Line_Track_Task+0x294>)
 80038e4:	edd3 7a00 	vldr	s15, [r3]
 80038e8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003a70 <Line_Track_Task+0x298>
 80038ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038f0:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8003a74 <Line_Track_Task+0x29c>
 80038f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038fc:	ee17 3a90 	vmov	r3, s15
 8003900:	b29b      	uxth	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	4b5c      	ldr	r3, [pc, #368]	; (8003a78 <Line_Track_Task+0x2a0>)
 8003906:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8003908:	4b5b      	ldr	r3, [pc, #364]	; (8003a78 <Line_Track_Task+0x2a0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003910:	dd04      	ble.n	800391c <Line_Track_Task+0x144>
			{
				ccr = CCR_FRONT_MAX;
 8003912:	4b59      	ldr	r3, [pc, #356]	; (8003a78 <Line_Track_Task+0x2a0>)
 8003914:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e008      	b.n	800392e <Line_Track_Task+0x156>
			}
			else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 800391c:	4b56      	ldr	r3, [pc, #344]	; (8003a78 <Line_Track_Task+0x2a0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003924:	da03      	bge.n	800392e <Line_Track_Task+0x156>
			{
				ccr = CCR_FRONT_MIN;
 8003926:	4b54      	ldr	r3, [pc, #336]	; (8003a78 <Line_Track_Task+0x2a0>)
 8003928:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800392c:	601a      	str	r2, [r3, #0]
			}
			TIM2->CCR1 = ccr;
 800392e:	4b52      	ldr	r3, [pc, #328]	; (8003a78 <Line_Track_Task+0x2a0>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003936:	635a      	str	r2, [r3, #52]	; 0x34
			//HÁTSÓSZERVÓ ELŐREMENETBEN
			PHI = atan((L/(L+D_REAR))*tan(gamma))/3;
 8003938:	4b4b      	ldr	r3, [pc, #300]	; (8003a68 <Line_Track_Task+0x290>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7fc fe23 	bl	8000588 <__aeabi_f2d>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	ec43 2b10 	vmov	d0, r2, r3
 800394a:	f00b fb3d 	bl	800efc8 <tan>
 800394e:	ec51 0b10 	vmov	r0, r1, d0
 8003952:	a339      	add	r3, pc, #228	; (adr r3, 8003a38 <Line_Track_Task+0x260>)
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f7fc fe6e 	bl	8000638 <__aeabi_dmul>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	ec43 2b17 	vmov	d7, r2, r3
 8003964:	eeb0 0a47 	vmov.f32	s0, s14
 8003968:	eef0 0a67 	vmov.f32	s1, s15
 800396c:	f00b f980 	bl	800ec70 <atan>
 8003970:	ec51 0b10 	vmov	r0, r1, d0
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	4b40      	ldr	r3, [pc, #256]	; (8003a7c <Line_Track_Task+0x2a4>)
 800397a:	f7fc ff87 	bl	800088c <__aeabi_ddiv>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4610      	mov	r0, r2
 8003984:	4619      	mov	r1, r3
 8003986:	f7fd f92f 	bl	8000be8 <__aeabi_d2f>
 800398a:	4603      	mov	r3, r0
 800398c:	4a37      	ldr	r2, [pc, #220]	; (8003a6c <Line_Track_Task+0x294>)
 800398e:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_REAR_CCR_MIDDLE);//balra kanyarodás
 8003990:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <Line_Track_Task+0x294>)
 8003992:	edd3 7a00 	vldr	s15, [r3]
 8003996:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003a70 <Line_Track_Task+0x298>
 800399a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800399e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003a80 <Line_Track_Task+0x2a8>
 80039a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039aa:	ee17 3a90 	vmov	r3, s15
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	461a      	mov	r2, r3
 80039b2:	4b31      	ldr	r3, [pc, #196]	; (8003a78 <Line_Track_Task+0x2a0>)
 80039b4:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_REAR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 80039b6:	4b30      	ldr	r3, [pc, #192]	; (8003a78 <Line_Track_Task+0x2a0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 80039be:	dd04      	ble.n	80039ca <Line_Track_Task+0x1f2>
			{
				ccr = CCR_REAR_MAX;
 80039c0:	4b2d      	ldr	r3, [pc, #180]	; (8003a78 <Line_Track_Task+0x2a0>)
 80039c2:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	e008      	b.n	80039dc <Line_Track_Task+0x204>
			}
			else if(ccr < CCR_REAR_MIN)//egyik irányba se
 80039ca:	4b2b      	ldr	r3, [pc, #172]	; (8003a78 <Line_Track_Task+0x2a0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80039d2:	da03      	bge.n	80039dc <Line_Track_Task+0x204>
			{
				ccr = CCR_REAR_MIN;
 80039d4:	4b28      	ldr	r3, [pc, #160]	; (8003a78 <Line_Track_Task+0x2a0>)
 80039d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80039da:	601a      	str	r2, [r3, #0]
			}
			TIM1->CCR4 = ccr;
 80039dc:	4b26      	ldr	r3, [pc, #152]	; (8003a78 <Line_Track_Task+0x2a0>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4b28      	ldr	r3, [pc, #160]	; (8003a84 <Line_Track_Task+0x2ac>)
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
 80039e4:	e1ee      	b.n	8003dc4 <Line_Track_Task+0x5ec>
		}
		else if(orientation==REVERSE)//TOLATÁS
 80039e6:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <Line_Track_Task+0x270>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	f040 81ea 	bne.w	8003dc4 <Line_Track_Task+0x5ec>
		{
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_REVERSE))return;
 80039f0:	2291      	movs	r2, #145	; 0x91
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f7ff feb5 	bl	8003764 <G0_Read_Skill>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f040 81ed 	bne.w	8003ddc <Line_Track_Task+0x604>

			uint8_t tmp=Lane_Changer(tick);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 ff30 	bl	8004868 <Lane_Changer>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]
			if(v_control==NORMAL_VEL)v_ref=-1100;
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <Line_Track_Task+0x274>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d103      	bne.n	8003a1c <Line_Track_Task+0x244>
 8003a14:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <Line_Track_Task+0x278>)
 8003a16:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <Line_Track_Task+0x2b0>)
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	e040      	b.n	8003a9e <Line_Track_Task+0x2c6>
			else if(v_control==SLOW_DOWN)v_ref=-600;
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <Line_Track_Task+0x274>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d135      	bne.n	8003a90 <Line_Track_Task+0x2b8>
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <Line_Track_Task+0x278>)
 8003a26:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <Line_Track_Task+0x2b4>)
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e038      	b.n	8003a9e <Line_Track_Task+0x2c6>
 8003a2c:	f3af 8000 	nop.w
 8003a30:	c4830201 	.word	0xc4830201
 8003a34:	3fe73a26 	.word	0x3fe73a26
 8003a38:	a3f47e90 	.word	0xa3f47e90
 8003a3c:	3fe8fd1f 	.word	0x3fe8fd1f
 8003a40:	20000030 	.word	0x20000030
 8003a44:	20000292 	.word	0x20000292
 8003a48:	2000029c 	.word	0x2000029c
 8003a4c:	200002a1 	.word	0x200002a1
 8003a50:	20000294 	.word	0x20000294
 8003a54:	44898000 	.word	0x44898000
 8003a58:	44160000 	.word	0x44160000
 8003a5c:	42c80000 	.word	0x42c80000
 8003a60:	20000624 	.word	0x20000624
 8003a64:	3b83126f 	.word	0x3b83126f
 8003a68:	20000634 	.word	0x20000634
 8003a6c:	20000638 	.word	0x20000638
 8003a70:	44af0000 	.word	0x44af0000
 8003a74:	442d0000 	.word	0x442d0000
 8003a78:	20000034 	.word	0x20000034
 8003a7c:	40080000 	.word	0x40080000
 8003a80:	441c8000 	.word	0x441c8000
 8003a84:	40010000 	.word	0x40010000
 8003a88:	c4898000 	.word	0xc4898000
 8003a8c:	c4160000 	.word	0xc4160000
			else if(v_control==STOP)v_ref=-100;
 8003a90:	4bab      	ldr	r3, [pc, #684]	; (8003d40 <Line_Track_Task+0x568>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <Line_Track_Task+0x2c6>
 8003a98:	4baa      	ldr	r3, [pc, #680]	; (8003d44 <Line_Track_Task+0x56c>)
 8003a9a:	4aab      	ldr	r2, [pc, #684]	; (8003d48 <Line_Track_Task+0x570>)
 8003a9c:	601a      	str	r2, [r3, #0]

			if(tmp)return;
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f040 819d 	bne.w	8003de0 <Line_Track_Task+0x608>

			Detect_Node4(huart_debugg, tick);
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	68b8      	ldr	r0, [r7, #8]
 8003aaa:	f000 fe49 	bl	8004740 <Detect_Node4>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8003aae:	4ba7      	ldr	r3, [pc, #668]	; (8003d4c <Line_Track_Task+0x574>)
 8003ab0:	785b      	ldrb	r3, [r3, #1]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8196 	beq.w	8003de4 <Line_Track_Task+0x60c>
 8003ab8:	4ba4      	ldr	r3, [pc, #656]	; (8003d4c <Line_Track_Task+0x574>)
 8003aba:	785b      	ldrb	r3, [r3, #1]
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	f200 8191 	bhi.w	8003de4 <Line_Track_Task+0x60c>
			gamma = Skill_Mode(huart_debugg, 0.003, 0.032, tick);
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	eddf 0aa2 	vldr	s1, [pc, #648]	; 8003d50 <Line_Track_Task+0x578>
 8003ac8:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8003d54 <Line_Track_Task+0x57c>
 8003acc:	68b8      	ldr	r0, [r7, #8]
 8003ace:	f000 fc93 	bl	80043f8 <Skill_Mode>
 8003ad2:	eef0 7a40 	vmov.f32	s15, s0
 8003ad6:	4ba0      	ldr	r3, [pc, #640]	; (8003d58 <Line_Track_Task+0x580>)
 8003ad8:	edc3 7a00 	vstr	s15, [r3]

			//HÁTSÓ SZERVÓ HÁTRAMENETBEN
			PHI = atan((L/(L+D_REAR))*tan(gamma));////////////////////kiszámolni kézzel
 8003adc:	4b9e      	ldr	r3, [pc, #632]	; (8003d58 <Line_Track_Task+0x580>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fc fd51 	bl	8000588 <__aeabi_f2d>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	ec43 2b10 	vmov	d0, r2, r3
 8003aee:	f00b fa6b 	bl	800efc8 <tan>
 8003af2:	ec51 0b10 	vmov	r0, r1, d0
 8003af6:	a38e      	add	r3, pc, #568	; (adr r3, 8003d30 <Line_Track_Task+0x558>)
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f7fc fd9c 	bl	8000638 <__aeabi_dmul>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	ec43 2b17 	vmov	d7, r2, r3
 8003b08:	eeb0 0a47 	vmov.f32	s0, s14
 8003b0c:	eef0 0a67 	vmov.f32	s1, s15
 8003b10:	f00b f8ae 	bl	800ec70 <atan>
 8003b14:	ec53 2b10 	vmov	r2, r3, d0
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f7fd f864 	bl	8000be8 <__aeabi_d2f>
 8003b20:	4603      	mov	r3, r0
 8003b22:	4a8e      	ldr	r2, [pc, #568]	; (8003d5c <Line_Track_Task+0x584>)
 8003b24:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_REAR_CCR_MIDDLE);
 8003b26:	4b8d      	ldr	r3, [pc, #564]	; (8003d5c <Line_Track_Task+0x584>)
 8003b28:	edd3 7a00 	vldr	s15, [r3]
 8003b2c:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8003d60 <Line_Track_Task+0x588>
 8003b30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b34:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8003d64 <Line_Track_Task+0x58c>
 8003b38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b40:	ee17 3a90 	vmov	r3, s15
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	461a      	mov	r2, r3
 8003b48:	4b87      	ldr	r3, [pc, #540]	; (8003d68 <Line_Track_Task+0x590>)
 8003b4a:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_REAR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8003b4c:	4b86      	ldr	r3, [pc, #536]	; (8003d68 <Line_Track_Task+0x590>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 8003b54:	dd04      	ble.n	8003b60 <Line_Track_Task+0x388>
			{
				ccr = CCR_REAR_MAX;
 8003b56:	4b84      	ldr	r3, [pc, #528]	; (8003d68 <Line_Track_Task+0x590>)
 8003b58:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e008      	b.n	8003b72 <Line_Track_Task+0x39a>
			}
			else if(ccr < CCR_REAR_MIN)//egyik irányba se
 8003b60:	4b81      	ldr	r3, [pc, #516]	; (8003d68 <Line_Track_Task+0x590>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003b68:	da03      	bge.n	8003b72 <Line_Track_Task+0x39a>
			{
				ccr = CCR_REAR_MIN;
 8003b6a:	4b7f      	ldr	r3, [pc, #508]	; (8003d68 <Line_Track_Task+0x590>)
 8003b6c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003b70:	601a      	str	r2, [r3, #0]
			}
			TIM1->CCR4 = ccr;
 8003b72:	4b7d      	ldr	r3, [pc, #500]	; (8003d68 <Line_Track_Task+0x590>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b7d      	ldr	r3, [pc, #500]	; (8003d6c <Line_Track_Task+0x594>)
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40
			//ELSŐSZERVÓ HÁTRAMENETBEN
			PHI = atan((L/(L+D_FRONT))*tan(gamma))/3;
 8003b7a:	4b77      	ldr	r3, [pc, #476]	; (8003d58 <Line_Track_Task+0x580>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fc fd02 	bl	8000588 <__aeabi_f2d>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	ec43 2b10 	vmov	d0, r2, r3
 8003b8c:	f00b fa1c 	bl	800efc8 <tan>
 8003b90:	ec51 0b10 	vmov	r0, r1, d0
 8003b94:	a368      	add	r3, pc, #416	; (adr r3, 8003d38 <Line_Track_Task+0x560>)
 8003b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9a:	f7fc fd4d 	bl	8000638 <__aeabi_dmul>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	ec43 2b17 	vmov	d7, r2, r3
 8003ba6:	eeb0 0a47 	vmov.f32	s0, s14
 8003baa:	eef0 0a67 	vmov.f32	s1, s15
 8003bae:	f00b f85f 	bl	800ec70 <atan>
 8003bb2:	ec51 0b10 	vmov	r0, r1, d0
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	4b6d      	ldr	r3, [pc, #436]	; (8003d70 <Line_Track_Task+0x598>)
 8003bbc:	f7fc fe66 	bl	800088c <__aeabi_ddiv>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	f7fd f80e 	bl	8000be8 <__aeabi_d2f>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	4a63      	ldr	r2, [pc, #396]	; (8003d5c <Line_Track_Task+0x584>)
 8003bd0:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_FRONT_CCR_MIDDLE);//balra kanyarodás
 8003bd2:	4b62      	ldr	r3, [pc, #392]	; (8003d5c <Line_Track_Task+0x584>)
 8003bd4:	edd3 7a00 	vldr	s15, [r3]
 8003bd8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003d60 <Line_Track_Task+0x588>
 8003bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003be0:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003d74 <Line_Track_Task+0x59c>
 8003be4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bec:	ee17 3a90 	vmov	r3, s15
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4b5c      	ldr	r3, [pc, #368]	; (8003d68 <Line_Track_Task+0x590>)
 8003bf6:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8003bf8:	4b5b      	ldr	r3, [pc, #364]	; (8003d68 <Line_Track_Task+0x590>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003c00:	dd04      	ble.n	8003c0c <Line_Track_Task+0x434>
			{
				ccr = CCR_FRONT_MAX;
 8003c02:	4b59      	ldr	r3, [pc, #356]	; (8003d68 <Line_Track_Task+0x590>)
 8003c04:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e008      	b.n	8003c1e <Line_Track_Task+0x446>
			}
			else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 8003c0c:	4b56      	ldr	r3, [pc, #344]	; (8003d68 <Line_Track_Task+0x590>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003c14:	da03      	bge.n	8003c1e <Line_Track_Task+0x446>
			{
				ccr = CCR_FRONT_MIN;
 8003c16:	4b54      	ldr	r3, [pc, #336]	; (8003d68 <Line_Track_Task+0x590>)
 8003c18:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003c1c:	601a      	str	r2, [r3, #0]
			}
			TIM2->CCR1 = ccr;
 8003c1e:	4b52      	ldr	r3, [pc, #328]	; (8003d68 <Line_Track_Task+0x590>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c26:	635a      	str	r2, [r3, #52]	; 0x34
 8003c28:	e0cc      	b.n	8003dc4 <Line_Track_Task+0x5ec>
		}

	}
	/*****Gyorsasági pálya üzemmód******/
	else if(mode == FAST)
 8003c2a:	4b53      	ldr	r3, [pc, #332]	; (8003d78 <Line_Track_Task+0x5a0>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b3f      	cmp	r3, #63	; 0x3f
 8003c30:	f040 80c8 	bne.w	8003dc4 <Line_Track_Task+0x5ec>
	{
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f7ff fd60 	bl	80036fc <G0_Read_Fast>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f040 80d2 	bne.w	8003de8 <Line_Track_Task+0x610>
		if (LINE_CNT<1 || LINE_CNT > 3) return;//ha nincs vonal a kocsi alatt
 8003c44:	4b41      	ldr	r3, [pc, #260]	; (8003d4c <Line_Track_Task+0x574>)
 8003c46:	785b      	ldrb	r3, [r3, #1]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80cf 	beq.w	8003dec <Line_Track_Task+0x614>
 8003c4e:	4b3f      	ldr	r3, [pc, #252]	; (8003d4c <Line_Track_Task+0x574>)
 8003c50:	785b      	ldrb	r3, [r3, #1]
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	f200 80ca 	bhi.w	8003dec <Line_Track_Task+0x614>
		gamma = Fast_Mode(huart_debugg,tick);
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	68b8      	ldr	r0, [r7, #8]
 8003c5c:	f000 f8d4 	bl	8003e08 <Fast_Mode>
 8003c60:	eef0 7a40 	vmov.f32	s15, s0
 8003c64:	4b3c      	ldr	r3, [pc, #240]	; (8003d58 <Line_Track_Task+0x580>)
 8003c66:	edc3 7a00 	vstr	s15, [r3]
		PHI = atan((L/(L+D_FRONT))*tan(gamma));
 8003c6a:	4b3b      	ldr	r3, [pc, #236]	; (8003d58 <Line_Track_Task+0x580>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fc fc8a 	bl	8000588 <__aeabi_f2d>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	ec43 2b10 	vmov	d0, r2, r3
 8003c7c:	f00b f9a4 	bl	800efc8 <tan>
 8003c80:	ec51 0b10 	vmov	r0, r1, d0
 8003c84:	a32c      	add	r3, pc, #176	; (adr r3, 8003d38 <Line_Track_Task+0x560>)
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	f7fc fcd5 	bl	8000638 <__aeabi_dmul>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	ec43 2b17 	vmov	d7, r2, r3
 8003c96:	eeb0 0a47 	vmov.f32	s0, s14
 8003c9a:	eef0 0a67 	vmov.f32	s1, s15
 8003c9e:	f00a ffe7 	bl	800ec70 <atan>
 8003ca2:	ec53 2b10 	vmov	r2, r3, d0
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f7fc ff9d 	bl	8000be8 <__aeabi_d2f>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4a2a      	ldr	r2, [pc, #168]	; (8003d5c <Line_Track_Task+0x584>)
 8003cb2:	6013      	str	r3, [r2, #0]
		if(v>2000) ccr = (uint16_t)(-SERVO_M_STRAIGHT * PHI + SERVO_FRONT_CCR_MIDDLE);
 8003cb4:	4b31      	ldr	r3, [pc, #196]	; (8003d7c <Line_Track_Task+0x5a4>)
 8003cb6:	edd3 7a00 	vldr	s15, [r3]
 8003cba:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003d80 <Line_Track_Task+0x5a8>
 8003cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc6:	dd13      	ble.n	8003cf0 <Line_Track_Task+0x518>
 8003cc8:	4b24      	ldr	r3, [pc, #144]	; (8003d5c <Line_Track_Task+0x584>)
 8003cca:	edd3 7a00 	vldr	s15, [r3]
 8003cce:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003d84 <Line_Track_Task+0x5ac>
 8003cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cd6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003d74 <Line_Track_Task+0x59c>
 8003cda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce2:	ee17 3a90 	vmov	r3, s15
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <Line_Track_Task+0x590>)
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e012      	b.n	8003d16 <Line_Track_Task+0x53e>
		else ccr =(uint16_t)(-SERVO_M_CORNER * PHI + SERVO_FRONT_CCR_MIDDLE);
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <Line_Track_Task+0x584>)
 8003cf2:	edd3 7a00 	vldr	s15, [r3]
 8003cf6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003d88 <Line_Track_Task+0x5b0>
 8003cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cfe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003d74 <Line_Track_Task+0x59c>
 8003d02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d0a:	ee17 3a90 	vmov	r3, s15
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <Line_Track_Task+0x590>)
 8003d14:	601a      	str	r2, [r3, #0]
		if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8003d16:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <Line_Track_Task+0x590>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003d1e:	dd35      	ble.n	8003d8c <Line_Track_Task+0x5b4>
		{
			ccr = CCR_FRONT_MAX;
 8003d20:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <Line_Track_Task+0x590>)
 8003d22:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	e039      	b.n	8003d9e <Line_Track_Task+0x5c6>
 8003d2a:	bf00      	nop
 8003d2c:	f3af 8000 	nop.w
 8003d30:	a3f47e90 	.word	0xa3f47e90
 8003d34:	3fe8fd1f 	.word	0x3fe8fd1f
 8003d38:	c4830201 	.word	0xc4830201
 8003d3c:	3fe73a26 	.word	0x3fe73a26
 8003d40:	200002a1 	.word	0x200002a1
 8003d44:	20000294 	.word	0x20000294
 8003d48:	c2c80000 	.word	0xc2c80000
 8003d4c:	20000624 	.word	0x20000624
 8003d50:	3d03126f 	.word	0x3d03126f
 8003d54:	3b449ba6 	.word	0x3b449ba6
 8003d58:	20000634 	.word	0x20000634
 8003d5c:	20000638 	.word	0x20000638
 8003d60:	44af0000 	.word	0x44af0000
 8003d64:	441c8000 	.word	0x441c8000
 8003d68:	20000034 	.word	0x20000034
 8003d6c:	40010000 	.word	0x40010000
 8003d70:	40080000 	.word	0x40080000
 8003d74:	442d0000 	.word	0x442d0000
 8003d78:	20000292 	.word	0x20000292
 8003d7c:	2000060c 	.word	0x2000060c
 8003d80:	44fa0000 	.word	0x44fa0000
 8003d84:	c4610000 	.word	0xc4610000
 8003d88:	c4c1c000 	.word	0xc4c1c000
		}
		else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 8003d8c:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <Line_Track_Task+0x61c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003d94:	da03      	bge.n	8003d9e <Line_Track_Task+0x5c6>
		{
			ccr = CCR_FRONT_MIN;
 8003d96:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <Line_Track_Task+0x61c>)
 8003d98:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003d9c:	601a      	str	r2, [r3, #0]
		}
		TIM2->CCR1 = ccr;
 8003d9e:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <Line_Track_Task+0x61c>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003da6:	635a      	str	r2, [r3, #52]	; 0x34
		if(ccr_rear_prev!=SERVO_REAR_CCR_MIDDLE) TIM1->CCR4 = SERVO_REAR_CCR_MIDDLE;
 8003da8:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <Line_Track_Task+0x620>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f240 2272 	movw	r2, #626	; 0x272
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d003      	beq.n	8003dbc <Line_Track_Task+0x5e4>
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <Line_Track_Task+0x624>)
 8003db6:	f240 2272 	movw	r2, #626	; 0x272
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40
		ccr_rear_prev=SERVO_REAR_CCR_MIDDLE;
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <Line_Track_Task+0x620>)
 8003dbe:	f240 2272 	movw	r2, #626	; 0x272
 8003dc2:	601a      	str	r2, [r3, #0]
	}

	tick_prev=tick;
 8003dc4:	4a0e      	ldr	r2, [pc, #56]	; (8003e00 <Line_Track_Task+0x628>)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	e010      	b.n	8003dee <Line_Track_Task+0x616>
	if(line_track_task_tick>tick) return;
 8003dcc:	bf00      	nop
 8003dce:	e00e      	b.n	8003dee <Line_Track_Task+0x616>
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_FORWARD))return;
 8003dd0:	bf00      	nop
 8003dd2:	e00c      	b.n	8003dee <Line_Track_Task+0x616>
			if(tmp)return;
 8003dd4:	bf00      	nop
 8003dd6:	e00a      	b.n	8003dee <Line_Track_Task+0x616>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8003dd8:	bf00      	nop
 8003dda:	e008      	b.n	8003dee <Line_Track_Task+0x616>
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_REVERSE))return;
 8003ddc:	bf00      	nop
 8003dde:	e006      	b.n	8003dee <Line_Track_Task+0x616>
			if(tmp)return;
 8003de0:	bf00      	nop
 8003de2:	e004      	b.n	8003dee <Line_Track_Task+0x616>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8003de4:	bf00      	nop
 8003de6:	e002      	b.n	8003dee <Line_Track_Task+0x616>
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 8003de8:	bf00      	nop
 8003dea:	e000      	b.n	8003dee <Line_Track_Task+0x616>
		if (LINE_CNT<1 || LINE_CNT > 3) return;//ha nincs vonal a kocsi alatt
 8003dec:	bf00      	nop
}
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000034 	.word	0x20000034
 8003df8:	2000063c 	.word	0x2000063c
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	20000640 	.word	0x20000640
 8003e04:	00000000 	.word	0x00000000

08003e08 <Fast_Mode>:

float Fast_Mode(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 8003e08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
	static float gamma;

	static float kD=K_D;

	//BOOST detect
	if(LINE_CNT != lineCnt_prev && (LINE_CNT==1 || LINE_CNT==3)) //ha változik az alattunk lévő vonalak száma
 8003e14:	4b8b      	ldr	r3, [pc, #556]	; (8004044 <Fast_Mode+0x23c>)
 8003e16:	785a      	ldrb	r2, [r3, #1]
 8003e18:	4b8b      	ldr	r3, [pc, #556]	; (8004048 <Fast_Mode+0x240>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	f000 809b 	beq.w	8003f58 <Fast_Mode+0x150>
 8003e22:	4b88      	ldr	r3, [pc, #544]	; (8004044 <Fast_Mode+0x23c>)
 8003e24:	785b      	ldrb	r3, [r3, #1]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d004      	beq.n	8003e34 <Fast_Mode+0x2c>
 8003e2a:	4b86      	ldr	r3, [pc, #536]	; (8004044 <Fast_Mode+0x23c>)
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	f040 8092 	bne.w	8003f58 <Fast_Mode+0x150>
	{
		ds[index]=fabs(v)*(t-t_stamp)/1000;
 8003e34:	4b85      	ldr	r3, [pc, #532]	; (800404c <Fast_Mode+0x244>)
 8003e36:	edd3 7a00 	vldr	s15, [r3]
 8003e3a:	eef0 7ae7 	vabs.f32	s15, s15
 8003e3e:	ee17 0a90 	vmov	r0, s15
 8003e42:	f7fc fba1 	bl	8000588 <__aeabi_f2d>
 8003e46:	4604      	mov	r4, r0
 8003e48:	460d      	mov	r5, r1
 8003e4a:	4b81      	ldr	r3, [pc, #516]	; (8004050 <Fast_Mode+0x248>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc fb76 	bl	8000544 <__aeabi_ui2d>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	4629      	mov	r1, r5
 8003e60:	f7fc fbea 	bl	8000638 <__aeabi_dmul>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	4b78      	ldr	r3, [pc, #480]	; (8004054 <Fast_Mode+0x24c>)
 8003e72:	f7fc fd0b 	bl	800088c <__aeabi_ddiv>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4977      	ldr	r1, [pc, #476]	; (8004058 <Fast_Mode+0x250>)
 8003e7c:	7809      	ldrb	r1, [r1, #0]
 8003e7e:	460c      	mov	r4, r1
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	f7fc feb0 	bl	8000be8 <__aeabi_d2f>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4974      	ldr	r1, [pc, #464]	; (800405c <Fast_Mode+0x254>)
 8003e8c:	00a3      	lsls	r3, r4, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	601a      	str	r2, [r3, #0]
		float s_boost = ds[0]+ds[1]+ds[2]+ds[3]+ds[4]+ds[5]+ds[6]+ds[7];
 8003e92:	4b72      	ldr	r3, [pc, #456]	; (800405c <Fast_Mode+0x254>)
 8003e94:	ed93 7a00 	vldr	s14, [r3]
 8003e98:	4b70      	ldr	r3, [pc, #448]	; (800405c <Fast_Mode+0x254>)
 8003e9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ea2:	4b6e      	ldr	r3, [pc, #440]	; (800405c <Fast_Mode+0x254>)
 8003ea4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ea8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003eac:	4b6b      	ldr	r3, [pc, #428]	; (800405c <Fast_Mode+0x254>)
 8003eae:	edd3 7a03 	vldr	s15, [r3, #12]
 8003eb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003eb6:	4b69      	ldr	r3, [pc, #420]	; (800405c <Fast_Mode+0x254>)
 8003eb8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ec0:	4b66      	ldr	r3, [pc, #408]	; (800405c <Fast_Mode+0x254>)
 8003ec2:	edd3 7a05 	vldr	s15, [r3, #20]
 8003ec6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003eca:	4b64      	ldr	r3, [pc, #400]	; (800405c <Fast_Mode+0x254>)
 8003ecc:	edd3 7a06 	vldr	s15, [r3, #24]
 8003ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ed4:	4b61      	ldr	r3, [pc, #388]	; (800405c <Fast_Mode+0x254>)
 8003ed6:	edd3 7a07 	vldr	s15, [r3, #28]
 8003eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ede:	edc7 7a03 	vstr	s15, [r7, #12]
		if(s_boost>300.0 && s_boost<800.0) // ha 70 és 80 cm közt bekövetkezik 8 vonalszámváltás
 8003ee2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ee6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004060 <Fast_Mode+0x258>
 8003eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef2:	dd21      	ble.n	8003f38 <Fast_Mode+0x130>
 8003ef4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ef8:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8004064 <Fast_Mode+0x25c>
 8003efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f04:	d518      	bpl.n	8003f38 <Fast_Mode+0x130>
		{
			boostCnt++;
 8003f06:	4b58      	ldr	r3, [pc, #352]	; (8004068 <Fast_Mode+0x260>)
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	4b56      	ldr	r3, [pc, #344]	; (8004068 <Fast_Mode+0x260>)
 8003f10:	801a      	strh	r2, [r3, #0]
			if(fast_mode_state==FREERUN_MODE)
 8003f12:	4b56      	ldr	r3, [pc, #344]	; (800406c <Fast_Mode+0x264>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d109      	bne.n	8003f2e <Fast_Mode+0x126>
			{
				v_ref = 5000;
 8003f1a:	4b55      	ldr	r3, [pc, #340]	; (8004070 <Fast_Mode+0x268>)
 8003f1c:	4a55      	ldr	r2, [pc, #340]	; (8004074 <Fast_Mode+0x26c>)
 8003f1e:	601a      	str	r2, [r3, #0]
				LED_B(1);
 8003f20:	2200      	movs	r2, #0
 8003f22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f26:	4854      	ldr	r0, [pc, #336]	; (8004078 <Fast_Mode+0x270>)
 8003f28:	f004 f96e 	bl	8008208 <HAL_GPIO_WritePin>
 8003f2c:	e004      	b.n	8003f38 <Fast_Mode+0x130>
			}
			else LED_B_TOGGLE;
 8003f2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f32:	4851      	ldr	r0, [pc, #324]	; (8004078 <Fast_Mode+0x270>)
 8003f34:	f004 f981 	bl	800823a <HAL_GPIO_TogglePin>
		}

		index++;
 8003f38:	4b47      	ldr	r3, [pc, #284]	; (8004058 <Fast_Mode+0x250>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	4b45      	ldr	r3, [pc, #276]	; (8004058 <Fast_Mode+0x250>)
 8003f42:	701a      	strb	r2, [r3, #0]
		if(index>7) index=0;
 8003f44:	4b44      	ldr	r3, [pc, #272]	; (8004058 <Fast_Mode+0x250>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b07      	cmp	r3, #7
 8003f4a:	d902      	bls.n	8003f52 <Fast_Mode+0x14a>
 8003f4c:	4b42      	ldr	r3, [pc, #264]	; (8004058 <Fast_Mode+0x250>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
		t_stamp = t;
 8003f52:	4a3f      	ldr	r2, [pc, #252]	; (8004050 <Fast_Mode+0x248>)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	6013      	str	r3, [r2, #0]
	}
	lineCnt_prev = LINE_CNT; //az előző értéket a jelenlegihez hangoljuk
 8003f58:	4b3a      	ldr	r3, [pc, #232]	; (8004044 <Fast_Mode+0x23c>)
 8003f5a:	785a      	ldrb	r2, [r3, #1]
 8003f5c:	4b3a      	ldr	r3, [pc, #232]	; (8004048 <Fast_Mode+0x240>)
 8003f5e:	701a      	strb	r2, [r3, #0]

	//BRAKING detect -> erre csak gyors üzemmódban van szükség
	if(LINE_CNT > 1 && fast_mode_state==FREERUN_MODE) //ha 3 vonalat érzékelünk
 8003f60:	4b38      	ldr	r3, [pc, #224]	; (8004044 <Fast_Mode+0x23c>)
 8003f62:	785b      	ldrb	r3, [r3, #1]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d94e      	bls.n	8004006 <Fast_Mode+0x1fe>
 8003f68:	4b40      	ldr	r3, [pc, #256]	; (800406c <Fast_Mode+0x264>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d14a      	bne.n	8004006 <Fast_Mode+0x1fe>
	{
		s_brake += fabs(v)*(t-t_prev)/1000;
 8003f70:	4b42      	ldr	r3, [pc, #264]	; (800407c <Fast_Mode+0x274>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fc fb07 	bl	8000588 <__aeabi_f2d>
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	460d      	mov	r5, r1
 8003f7e:	4b33      	ldr	r3, [pc, #204]	; (800404c <Fast_Mode+0x244>)
 8003f80:	edd3 7a00 	vldr	s15, [r3]
 8003f84:	eef0 7ae7 	vabs.f32	s15, s15
 8003f88:	ee17 0a90 	vmov	r0, s15
 8003f8c:	f7fc fafc 	bl	8000588 <__aeabi_f2d>
 8003f90:	4680      	mov	r8, r0
 8003f92:	4689      	mov	r9, r1
 8003f94:	4b3a      	ldr	r3, [pc, #232]	; (8004080 <Fast_Mode+0x278>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fc fad1 	bl	8000544 <__aeabi_ui2d>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4640      	mov	r0, r8
 8003fa8:	4649      	mov	r1, r9
 8003faa:	f7fc fb45 	bl	8000638 <__aeabi_dmul>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	4b26      	ldr	r3, [pc, #152]	; (8004054 <Fast_Mode+0x24c>)
 8003fbc:	f7fc fc66 	bl	800088c <__aeabi_ddiv>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	f7fc f980 	bl	80002cc <__adddf3>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	f7fc fe08 	bl	8000be8 <__aeabi_d2f>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	4a28      	ldr	r2, [pc, #160]	; (800407c <Fast_Mode+0x274>)
 8003fdc:	6013      	str	r3, [r2, #0]
		if(s_brake>300) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 8003fde:	4b27      	ldr	r3, [pc, #156]	; (800407c <Fast_Mode+0x274>)
 8003fe0:	edd3 7a00 	vldr	s15, [r3]
 8003fe4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004060 <Fast_Mode+0x258>
 8003fe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff0:	dd0d      	ble.n	800400e <Fast_Mode+0x206>
		{
			v_ref = 1500;
 8003ff2:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <Fast_Mode+0x268>)
 8003ff4:	4a23      	ldr	r2, [pc, #140]	; (8004084 <Fast_Mode+0x27c>)
 8003ff6:	601a      	str	r2, [r3, #0]
			LED_B(0);
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ffe:	481e      	ldr	r0, [pc, #120]	; (8004078 <Fast_Mode+0x270>)
 8004000:	f004 f902 	bl	8008208 <HAL_GPIO_WritePin>
		if(s_brake>300) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 8004004:	e003      	b.n	800400e <Fast_Mode+0x206>
		}
	}
	else //ha 1 vonalat érzékelünk
	{
		s_brake=0;
 8004006:	4b1d      	ldr	r3, [pc, #116]	; (800407c <Fast_Mode+0x274>)
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
	}
	t_prev=t;
 800400e:	4a1c      	ldr	r2, [pc, #112]	; (8004080 <Fast_Mode+0x278>)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	6013      	str	r3, [r2, #0]

	/////////////////////////////////////////////////////////////////////////////////////////

	/*****SC üzemmód******/
	if(fast_mode_state==SC_MODE)
 8004014:	4b15      	ldr	r3, [pc, #84]	; (800406c <Fast_Mode+0x264>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d145      	bne.n	80040a8 <Fast_Mode+0x2a0>
	{
		uint32_t dist=(((uint16_t)rxBuf[5])<<8) | ((uint16_t)rxBuf[6]);
 800401c:	4b09      	ldr	r3, [pc, #36]	; (8004044 <Fast_Mode+0x23c>)
 800401e:	795b      	ldrb	r3, [r3, #5]
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	4a08      	ldr	r2, [pc, #32]	; (8004044 <Fast_Mode+0x23c>)
 8004024:	7992      	ldrb	r2, [r2, #6]
 8004026:	4313      	orrs	r3, r2
 8004028:	60bb      	str	r3, [r7, #8]
		if(dist>1000 || rxBuf[4]) v_ref=1500; //ha tul messze vana  SC vagy érvénytelen az olvasás
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004030:	d803      	bhi.n	800403a <Fast_Mode+0x232>
 8004032:	4b04      	ldr	r3, [pc, #16]	; (8004044 <Fast_Mode+0x23c>)
 8004034:	791b      	ldrb	r3, [r3, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d028      	beq.n	800408c <Fast_Mode+0x284>
 800403a:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <Fast_Mode+0x268>)
 800403c:	4a11      	ldr	r2, [pc, #68]	; (8004084 <Fast_Mode+0x27c>)
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	e032      	b.n	80040a8 <Fast_Mode+0x2a0>
 8004042:	bf00      	nop
 8004044:	20000624 	.word	0x20000624
 8004048:	20000038 	.word	0x20000038
 800404c:	2000060c 	.word	0x2000060c
 8004050:	20000644 	.word	0x20000644
 8004054:	408f4000 	.word	0x408f4000
 8004058:	20000648 	.word	0x20000648
 800405c:	2000003c 	.word	0x2000003c
 8004060:	43960000 	.word	0x43960000
 8004064:	44480000 	.word	0x44480000
 8004068:	20000630 	.word	0x20000630
 800406c:	20000649 	.word	0x20000649
 8004070:	20000294 	.word	0x20000294
 8004074:	459c4000 	.word	0x459c4000
 8004078:	40020400 	.word	0x40020400
 800407c:	2000064c 	.word	0x2000064c
 8004080:	20000650 	.word	0x20000650
 8004084:	44bb8000 	.word	0x44bb8000
 8004088:	43fa0000 	.word	0x43fa0000
		else v_ref = 2*(float)dist-500;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004096:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800409a:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8004088 <Fast_Mode+0x280>
 800409e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040a2:	4bc1      	ldr	r3, [pc, #772]	; (80043a8 <Fast_Mode+0x5a0>)
 80040a4:	edc3 7a00 	vstr	s15, [r3]
	}

	x_elso=(float)rxBuf[2]*204/255.0-102;//248
 80040a8:	4bc0      	ldr	r3, [pc, #768]	; (80043ac <Fast_Mode+0x5a4>)
 80040aa:	789b      	ldrb	r3, [r3, #2]
 80040ac:	ee07 3a90 	vmov	s15, r3
 80040b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b4:	ed9f 7abe 	vldr	s14, [pc, #760]	; 80043b0 <Fast_Mode+0x5a8>
 80040b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040bc:	ee17 0a90 	vmov	r0, s15
 80040c0:	f7fc fa62 	bl	8000588 <__aeabi_f2d>
 80040c4:	a3b0      	add	r3, pc, #704	; (adr r3, 8004388 <Fast_Mode+0x580>)
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	f7fc fbdf 	bl	800088c <__aeabi_ddiv>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4610      	mov	r0, r2
 80040d4:	4619      	mov	r1, r3
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	4bb6      	ldr	r3, [pc, #728]	; (80043b4 <Fast_Mode+0x5ac>)
 80040dc:	f7fc f8f4 	bl	80002c8 <__aeabi_dsub>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	f7fc fd7e 	bl	8000be8 <__aeabi_d2f>
 80040ec:	4603      	mov	r3, r0
 80040ee:	4ab2      	ldr	r2, [pc, #712]	; (80043b8 <Fast_Mode+0x5b0>)
 80040f0:	6013      	str	r3, [r2, #0]
	x_hatso=(float)rxBuf[3]*204/255.0-102; //244
 80040f2:	4bae      	ldr	r3, [pc, #696]	; (80043ac <Fast_Mode+0x5a4>)
 80040f4:	78db      	ldrb	r3, [r3, #3]
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fe:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80043b0 <Fast_Mode+0x5a8>
 8004102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004106:	ee17 0a90 	vmov	r0, s15
 800410a:	f7fc fa3d 	bl	8000588 <__aeabi_f2d>
 800410e:	a39e      	add	r3, pc, #632	; (adr r3, 8004388 <Fast_Mode+0x580>)
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f7fc fbba 	bl	800088c <__aeabi_ddiv>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4610      	mov	r0, r2
 800411e:	4619      	mov	r1, r3
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	4ba3      	ldr	r3, [pc, #652]	; (80043b4 <Fast_Mode+0x5ac>)
 8004126:	f7fc f8cf 	bl	80002c8 <__aeabi_dsub>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4610      	mov	r0, r2
 8004130:	4619      	mov	r1, r3
 8004132:	f7fc fd59 	bl	8000be8 <__aeabi_d2f>
 8004136:	4603      	mov	r3, r0
 8004138:	4aa0      	ldr	r2, [pc, #640]	; (80043bc <Fast_Mode+0x5b4>)
 800413a:	6013      	str	r3, [r2, #0]
	delta=atan((float)(x_elso-x_hatso)/L_SENSOR);
 800413c:	4b9e      	ldr	r3, [pc, #632]	; (80043b8 <Fast_Mode+0x5b0>)
 800413e:	ed93 7a00 	vldr	s14, [r3]
 8004142:	4b9e      	ldr	r3, [pc, #632]	; (80043bc <Fast_Mode+0x5b4>)
 8004144:	edd3 7a00 	vldr	s15, [r3]
 8004148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800414c:	ee17 0a90 	vmov	r0, s15
 8004150:	f7fc fa1a 	bl	8000588 <__aeabi_f2d>
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	4b99      	ldr	r3, [pc, #612]	; (80043c0 <Fast_Mode+0x5b8>)
 800415a:	f7fc fb97 	bl	800088c <__aeabi_ddiv>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	ec43 2b17 	vmov	d7, r2, r3
 8004166:	eeb0 0a47 	vmov.f32	s0, s14
 800416a:	eef0 0a67 	vmov.f32	s1, s15
 800416e:	f00a fd7f 	bl	800ec70 <atan>
 8004172:	ec53 2b10 	vmov	r2, r3, d0
 8004176:	4610      	mov	r0, r2
 8004178:	4619      	mov	r1, r3
 800417a:	f7fc fd35 	bl	8000be8 <__aeabi_d2f>
 800417e:	4603      	mov	r3, r0
 8004180:	4a90      	ldr	r2, [pc, #576]	; (80043c4 <Fast_Mode+0x5bc>)
 8004182:	6013      	str	r3, [r2, #0]
	/**/
	//szabályozóparaméterek ujraszámolása az aktuális sebesség alapján
	if(v>100 || v<-100)
 8004184:	4b90      	ldr	r3, [pc, #576]	; (80043c8 <Fast_Mode+0x5c0>)
 8004186:	edd3 7a00 	vldr	s15, [r3]
 800418a:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80043cc <Fast_Mode+0x5c4>
 800418e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004196:	dc0a      	bgt.n	80041ae <Fast_Mode+0x3a6>
 8004198:	4b8b      	ldr	r3, [pc, #556]	; (80043c8 <Fast_Mode+0x5c0>)
 800419a:	edd3 7a00 	vldr	s15, [r3]
 800419e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80043d0 <Fast_Mode+0x5c8>
 80041a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041aa:	f140 80b9 	bpl.w	8004320 <Fast_Mode+0x518>
	{
		if(v<2400)
 80041ae:	4b86      	ldr	r3, [pc, #536]	; (80043c8 <Fast_Mode+0x5c0>)
 80041b0:	edd3 7a00 	vldr	s15, [r3]
 80041b4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80043d4 <Fast_Mode+0x5cc>
 80041b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c0:	d557      	bpl.n	8004272 <Fast_Mode+0x46a>
		{
			k_p = -L/(v*v)*S1MULTS2_SLOW;
 80041c2:	4b81      	ldr	r3, [pc, #516]	; (80043c8 <Fast_Mode+0x5c0>)
 80041c4:	ed93 7a00 	vldr	s14, [r3]
 80041c8:	4b7f      	ldr	r3, [pc, #508]	; (80043c8 <Fast_Mode+0x5c0>)
 80041ca:	edd3 7a00 	vldr	s15, [r3]
 80041ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d2:	ee17 0a90 	vmov	r0, s15
 80041d6:	f7fc f9d7 	bl	8000588 <__aeabi_f2d>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	a16c      	add	r1, pc, #432	; (adr r1, 8004390 <Fast_Mode+0x588>)
 80041e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041e4:	f7fc fb52 	bl	800088c <__aeabi_ddiv>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	a369      	add	r3, pc, #420	; (adr r3, 8004398 <Fast_Mode+0x590>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	f7fc fa1f 	bl	8000638 <__aeabi_dmul>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4610      	mov	r0, r2
 8004200:	4619      	mov	r1, r3
 8004202:	f7fc fcf1 	bl	8000be8 <__aeabi_d2f>
 8004206:	4603      	mov	r3, r0
 8004208:	4a73      	ldr	r2, [pc, #460]	; (80043d8 <Fast_Mode+0x5d0>)
 800420a:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 800420c:	4b6e      	ldr	r3, [pc, #440]	; (80043c8 <Fast_Mode+0x5c0>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f7fc f9b9 	bl	8000588 <__aeabi_f2d>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	a161      	add	r1, pc, #388	; (adr r1, 80043a0 <Fast_Mode+0x598>)
 800421c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004220:	f7fc fb34 	bl	800088c <__aeabi_ddiv>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4614      	mov	r4, r2
 800422a:	461d      	mov	r5, r3
 800422c:	4b66      	ldr	r3, [pc, #408]	; (80043c8 <Fast_Mode+0x5c0>)
 800422e:	ed93 7a00 	vldr	s14, [r3]
 8004232:	4b69      	ldr	r3, [pc, #420]	; (80043d8 <Fast_Mode+0x5d0>)
 8004234:	edd3 7a00 	vldr	s15, [r3]
 8004238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800423c:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8004240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004244:	ee17 0a90 	vmov	r0, s15
 8004248:	f7fc f99e 	bl	8000588 <__aeabi_f2d>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4620      	mov	r0, r4
 8004252:	4629      	mov	r1, r5
 8004254:	f7fc f9f0 	bl	8000638 <__aeabi_dmul>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4610      	mov	r0, r2
 800425e:	4619      	mov	r1, r3
 8004260:	f7fc fcc2 	bl	8000be8 <__aeabi_d2f>
 8004264:	4603      	mov	r3, r0
 8004266:	4a5d      	ldr	r2, [pc, #372]	; (80043dc <Fast_Mode+0x5d4>)
 8004268:	6013      	str	r3, [r2, #0]
			kD=-0.06;
 800426a:	4b5d      	ldr	r3, [pc, #372]	; (80043e0 <Fast_Mode+0x5d8>)
 800426c:	4a5d      	ldr	r2, [pc, #372]	; (80043e4 <Fast_Mode+0x5dc>)
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	e056      	b.n	8004320 <Fast_Mode+0x518>
			//kD=0;
		}
		else
		{
			k_p = -L/(v*v)*S1MULTS2_SLOW;
 8004272:	4b55      	ldr	r3, [pc, #340]	; (80043c8 <Fast_Mode+0x5c0>)
 8004274:	ed93 7a00 	vldr	s14, [r3]
 8004278:	4b53      	ldr	r3, [pc, #332]	; (80043c8 <Fast_Mode+0x5c0>)
 800427a:	edd3 7a00 	vldr	s15, [r3]
 800427e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004282:	ee17 0a90 	vmov	r0, s15
 8004286:	f7fc f97f 	bl	8000588 <__aeabi_f2d>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	a140      	add	r1, pc, #256	; (adr r1, 8004390 <Fast_Mode+0x588>)
 8004290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004294:	f7fc fafa 	bl	800088c <__aeabi_ddiv>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4610      	mov	r0, r2
 800429e:	4619      	mov	r1, r3
 80042a0:	a33d      	add	r3, pc, #244	; (adr r3, 8004398 <Fast_Mode+0x590>)
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f7fc f9c7 	bl	8000638 <__aeabi_dmul>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4610      	mov	r0, r2
 80042b0:	4619      	mov	r1, r3
 80042b2:	f7fc fc99 	bl	8000be8 <__aeabi_d2f>
 80042b6:	4603      	mov	r3, r0
 80042b8:	4a47      	ldr	r2, [pc, #284]	; (80043d8 <Fast_Mode+0x5d0>)
 80042ba:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 80042bc:	4b42      	ldr	r3, [pc, #264]	; (80043c8 <Fast_Mode+0x5c0>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fc f961 	bl	8000588 <__aeabi_f2d>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	a135      	add	r1, pc, #212	; (adr r1, 80043a0 <Fast_Mode+0x598>)
 80042cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042d0:	f7fc fadc 	bl	800088c <__aeabi_ddiv>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4614      	mov	r4, r2
 80042da:	461d      	mov	r5, r3
 80042dc:	4b3a      	ldr	r3, [pc, #232]	; (80043c8 <Fast_Mode+0x5c0>)
 80042de:	ed93 7a00 	vldr	s14, [r3]
 80042e2:	4b3d      	ldr	r3, [pc, #244]	; (80043d8 <Fast_Mode+0x5d0>)
 80042e4:	edd3 7a00 	vldr	s15, [r3]
 80042e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ec:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 80042f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042f4:	ee17 0a90 	vmov	r0, s15
 80042f8:	f7fc f946 	bl	8000588 <__aeabi_f2d>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4620      	mov	r0, r4
 8004302:	4629      	mov	r1, r5
 8004304:	f7fc f998 	bl	8000638 <__aeabi_dmul>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4610      	mov	r0, r2
 800430e:	4619      	mov	r1, r3
 8004310:	f7fc fc6a 	bl	8000be8 <__aeabi_d2f>
 8004314:	4603      	mov	r3, r0
 8004316:	4a31      	ldr	r2, [pc, #196]	; (80043dc <Fast_Mode+0x5d4>)
 8004318:	6013      	str	r3, [r2, #0]
			kD=-0.05;
 800431a:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <Fast_Mode+0x5d8>)
 800431c:	4a32      	ldr	r2, [pc, #200]	; (80043e8 <Fast_Mode+0x5e0>)
 800431e:	601a      	str	r2, [r3, #0]
		}
	}

	gamma = -k_p * x_elso -k_delta * delta - kD * (x_elso-x_elso_prev);
 8004320:	4b2d      	ldr	r3, [pc, #180]	; (80043d8 <Fast_Mode+0x5d0>)
 8004322:	edd3 7a00 	vldr	s15, [r3]
 8004326:	eeb1 7a67 	vneg.f32	s14, s15
 800432a:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <Fast_Mode+0x5b0>)
 800432c:	edd3 7a00 	vldr	s15, [r3]
 8004330:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004334:	4b29      	ldr	r3, [pc, #164]	; (80043dc <Fast_Mode+0x5d4>)
 8004336:	edd3 6a00 	vldr	s13, [r3]
 800433a:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <Fast_Mode+0x5bc>)
 800433c:	edd3 7a00 	vldr	s15, [r3]
 8004340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004344:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004348:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <Fast_Mode+0x5b0>)
 800434a:	edd3 6a00 	vldr	s13, [r3]
 800434e:	4b27      	ldr	r3, [pc, #156]	; (80043ec <Fast_Mode+0x5e4>)
 8004350:	edd3 7a00 	vldr	s15, [r3]
 8004354:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004358:	4b21      	ldr	r3, [pc, #132]	; (80043e0 <Fast_Mode+0x5d8>)
 800435a:	edd3 7a00 	vldr	s15, [r3]
 800435e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <Fast_Mode+0x5e8>)
 8004368:	edc3 7a00 	vstr	s15, [r3]
	x_elso_prev = x_elso;
 800436c:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <Fast_Mode+0x5b0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1e      	ldr	r2, [pc, #120]	; (80043ec <Fast_Mode+0x5e4>)
 8004372:	6013      	str	r3, [r2, #0]

	return gamma;
 8004374:	4b1e      	ldr	r3, [pc, #120]	; (80043f0 <Fast_Mode+0x5e8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	ee07 3a90 	vmov	s15, r3
}
 800437c:	eeb0 0a67 	vmov.f32	s0, s15
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004388:	00000000 	.word	0x00000000
 800438c:	406fe000 	.word	0x406fe000
 8004390:	00000000 	.word	0x00000000
 8004394:	c0716000 	.word	0xc0716000
 8004398:	fd21ff2e 	.word	0xfd21ff2e
 800439c:	402275f6 	.word	0x402275f6
 80043a0:	00000000 	.word	0x00000000
 80043a4:	40716000 	.word	0x40716000
 80043a8:	20000294 	.word	0x20000294
 80043ac:	20000624 	.word	0x20000624
 80043b0:	434c0000 	.word	0x434c0000
 80043b4:	40598000 	.word	0x40598000
 80043b8:	20000654 	.word	0x20000654
 80043bc:	20000658 	.word	0x20000658
 80043c0:	407c4000 	.word	0x407c4000
 80043c4:	2000065c 	.word	0x2000065c
 80043c8:	2000060c 	.word	0x2000060c
 80043cc:	42c80000 	.word	0x42c80000
 80043d0:	c2c80000 	.word	0xc2c80000
 80043d4:	45160000 	.word	0x45160000
 80043d8:	2000005c 	.word	0x2000005c
 80043dc:	20000060 	.word	0x20000060
 80043e0:	20000064 	.word	0x20000064
 80043e4:	bd75c28f 	.word	0xbd75c28f
 80043e8:	bd4ccccd 	.word	0xbd4ccccd
 80043ec:	20000660 	.word	0x20000660
 80043f0:	20000664 	.word	0x20000664
 80043f4:	00000000 	.word	0x00000000

080043f8 <Skill_Mode>:

float Skill_Mode(UART_HandleTypeDef *huart_debugg, float kP, float kD, uint32_t t)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	ed87 0a02 	vstr	s0, [r7, #8]
 8004404:	edc7 0a01 	vstr	s1, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
	static uint32_t t_prev=0;
	int byte=0;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
	static int byte_prev=0;
	int delta_byte;
	float p=0;
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
/*	uint8_t str[40];
	sprintf(str,"%d,  %d,  %d,  %d,  %d\n\r",rxBuf[1],rxBuf[2],rxBuf[3],rxBuf[4],rxBuf[5]);
	HAL_UART_Transmit(huart_debugg, str, strlen(str), 10);
*/

	if(LINE_CNT>3 || ignore)//ha éppen node-on vagyunk, akkor az átlagot követjük
 8004414:	4b8f      	ldr	r3, [pc, #572]	; (8004654 <Skill_Mode+0x25c>)
 8004416:	785b      	ldrb	r3, [r3, #1]
 8004418:	2b03      	cmp	r3, #3
 800441a:	d803      	bhi.n	8004424 <Skill_Mode+0x2c>
 800441c:	4b8e      	ldr	r3, [pc, #568]	; (8004658 <Skill_Mode+0x260>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d022      	beq.n	800446a <Skill_Mode+0x72>
	{
		byte=0;
 8004424:	2300      	movs	r3, #0
 8004426:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 8004428:	2300      	movs	r3, #0
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	e00a      	b.n	8004444 <Skill_Mode+0x4c>
		{
			byte += rxBuf[i+2];
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	3302      	adds	r3, #2
 8004432:	4a88      	ldr	r2, [pc, #544]	; (8004654 <Skill_Mode+0x25c>)
 8004434:	5cd3      	ldrb	r3, [r2, r3]
 8004436:	461a      	mov	r2, r3
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	4413      	add	r3, r2
 800443c:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	3301      	adds	r3, #1
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	4b83      	ldr	r3, [pc, #524]	; (8004654 <Skill_Mode+0x25c>)
 8004446:	785b      	ldrb	r3, [r3, #1]
 8004448:	461a      	mov	r2, r3
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	4293      	cmp	r3, r2
 800444e:	dbee      	blt.n	800442e <Skill_Mode+0x36>
		}

		if(LINE_CNT) byte /= LINE_CNT;
 8004450:	4b80      	ldr	r3, [pc, #512]	; (8004654 <Skill_Mode+0x25c>)
 8004452:	785b      	ldrb	r3, [r3, #1]
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 8112 	beq.w	800467e <Skill_Mode+0x286>
 800445a:	4b7e      	ldr	r3, [pc, #504]	; (8004654 <Skill_Mode+0x25c>)
 800445c:	785b      	ldrb	r3, [r3, #1]
 800445e:	461a      	mov	r2, r3
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	fb93 f3f2 	sdiv	r3, r3, r2
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	e109      	b.n	800467e <Skill_Mode+0x286>
	}
	else if((path==LEFT && orientation==FORWARD) || (path==RIGHT && orientation==REVERSE))
 800446a:	4b7c      	ldr	r3, [pc, #496]	; (800465c <Skill_Mode+0x264>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <Skill_Mode+0x82>
 8004472:	4b7b      	ldr	r3, [pc, #492]	; (8004660 <Skill_Mode+0x268>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <Skill_Mode+0x92>
 800447a:	4b78      	ldr	r3, [pc, #480]	; (800465c <Skill_Mode+0x264>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d152      	bne.n	8004528 <Skill_Mode+0x130>
 8004482:	4b77      	ldr	r3, [pc, #476]	; (8004660 <Skill_Mode+0x268>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d14e      	bne.n	8004528 <Skill_Mode+0x130>
	{
		byte = LINE1; //az első vonalt kell követni
 800448a:	4b72      	ldr	r3, [pc, #456]	; (8004654 <Skill_Mode+0x25c>)
 800448c:	789b      	ldrb	r3, [r3, #2]
 800448e:	61fb      	str	r3, [r7, #28]
		delta_byte=abs((int)byte-byte_prev);
 8004490:	4b74      	ldr	r3, [pc, #464]	; (8004664 <Skill_Mode+0x26c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	bfb8      	it	lt
 800449c:	425b      	neglt	r3, r3
 800449e:	613b      	str	r3, [r7, #16]
		/**/
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b46      	cmp	r3, #70	; 0x46
 80044a4:	dd03      	ble.n	80044ae <Skill_Mode+0xb6>
 80044a6:	4b70      	ldr	r3, [pc, #448]	; (8004668 <Skill_Mode+0x270>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d103      	bne.n	80044b6 <Skill_Mode+0xbe>
 80044ae:	4b6e      	ldr	r3, [pc, #440]	; (8004668 <Skill_Mode+0x270>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d125      	bne.n	8004502 <Skill_Mode+0x10a>
		{

			if(estuary==ESTUARY_MODE_OFF)t_prev=t;//ha most kapcsoltuk be a torkolatkompenzálást, akkor mostantól mérjük az eltelt időt
 80044b6:	4b6c      	ldr	r3, [pc, #432]	; (8004668 <Skill_Mode+0x270>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d102      	bne.n	80044c4 <Skill_Mode+0xcc>
 80044be:	4a6b      	ldr	r2, [pc, #428]	; (800466c <Skill_Mode+0x274>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	6013      	str	r3, [r2, #0]
			if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 80044c4:	4b69      	ldr	r3, [pc, #420]	; (800466c <Skill_Mode+0x274>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044d0:	d908      	bls.n	80044e4 <Skill_Mode+0xec>
			{
				estuary=ESTUARY_MODE_OFF; //ha letelt a timeout kilépünk a kompenzálásból
 80044d2:	4b65      	ldr	r3, [pc, #404]	; (8004668 <Skill_Mode+0x270>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	701a      	strb	r2, [r3, #0]
				LED_G(0);
 80044d8:	2201      	movs	r2, #1
 80044da:	2102      	movs	r1, #2
 80044dc:	4864      	ldr	r0, [pc, #400]	; (8004670 <Skill_Mode+0x278>)
 80044de:	f003 fe93 	bl	8008208 <HAL_GPIO_WritePin>
			if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 80044e2:	e020      	b.n	8004526 <Skill_Mode+0x12e>
			}
			else //ha még nem telt le az timout idő
			{
				byte = rxBuf[1+LINE_CNT]; //ilyenkor az utolsó vonalat nézzük az első helyett
 80044e4:	4b5b      	ldr	r3, [pc, #364]	; (8004654 <Skill_Mode+0x25c>)
 80044e6:	785b      	ldrb	r3, [r3, #1]
 80044e8:	3301      	adds	r3, #1
 80044ea:	4a5a      	ldr	r2, [pc, #360]	; (8004654 <Skill_Mode+0x25c>)
 80044ec:	5cd3      	ldrb	r3, [r2, r3]
 80044ee:	61fb      	str	r3, [r7, #28]
				estuary=ESTUARY_MODE_ON; //öntartás
 80044f0:	4b5d      	ldr	r3, [pc, #372]	; (8004668 <Skill_Mode+0x270>)
 80044f2:	2202      	movs	r2, #2
 80044f4:	701a      	strb	r2, [r3, #0]
				LED_G(1);
 80044f6:	2200      	movs	r2, #0
 80044f8:	2102      	movs	r1, #2
 80044fa:	485d      	ldr	r0, [pc, #372]	; (8004670 <Skill_Mode+0x278>)
 80044fc:	f003 fe84 	bl	8008208 <HAL_GPIO_WritePin>
			if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 8004500:	e011      	b.n	8004526 <Skill_Mode+0x12e>
			}
		}
		else if(delta_byte<ESTUARY_EXIT && estuary==ESTUARY_MODE_ON) //ha már eléggé összeszűkült a torkolat, akkor nem kell kompenzálni
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b2c      	cmp	r3, #44	; 0x2c
 8004506:	f300 80a2 	bgt.w	800464e <Skill_Mode+0x256>
 800450a:	4b57      	ldr	r3, [pc, #348]	; (8004668 <Skill_Mode+0x270>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b02      	cmp	r3, #2
 8004510:	f040 809d 	bne.w	800464e <Skill_Mode+0x256>
		{
			estuary=ESTUARY_MODE_OFF;
 8004514:	4b54      	ldr	r3, [pc, #336]	; (8004668 <Skill_Mode+0x270>)
 8004516:	2201      	movs	r2, #1
 8004518:	701a      	strb	r2, [r3, #0]
			LED_G(0);
 800451a:	2201      	movs	r2, #1
 800451c:	2102      	movs	r1, #2
 800451e:	4854      	ldr	r0, [pc, #336]	; (8004670 <Skill_Mode+0x278>)
 8004520:	f003 fe72 	bl	8008208 <HAL_GPIO_WritePin>
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 8004524:	e093      	b.n	800464e <Skill_Mode+0x256>
 8004526:	e092      	b.n	800464e <Skill_Mode+0x256>
		}

	}
	else if((path==RIGHT && orientation==FORWARD) || (path==LEFT && orientation==REVERSE))
 8004528:	4b4c      	ldr	r3, [pc, #304]	; (800465c <Skill_Mode+0x264>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d103      	bne.n	8004538 <Skill_Mode+0x140>
 8004530:	4b4b      	ldr	r3, [pc, #300]	; (8004660 <Skill_Mode+0x268>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <Skill_Mode+0x150>
 8004538:	4b48      	ldr	r3, [pc, #288]	; (800465c <Skill_Mode+0x264>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d150      	bne.n	80045e2 <Skill_Mode+0x1ea>
 8004540:	4b47      	ldr	r3, [pc, #284]	; (8004660 <Skill_Mode+0x268>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d14c      	bne.n	80045e2 <Skill_Mode+0x1ea>
	{
		byte = rxBuf[1+LINE_CNT];//az utolsó vonalat kell követni
 8004548:	4b42      	ldr	r3, [pc, #264]	; (8004654 <Skill_Mode+0x25c>)
 800454a:	785b      	ldrb	r3, [r3, #1]
 800454c:	3301      	adds	r3, #1
 800454e:	4a41      	ldr	r2, [pc, #260]	; (8004654 <Skill_Mode+0x25c>)
 8004550:	5cd3      	ldrb	r3, [r2, r3]
 8004552:	61fb      	str	r3, [r7, #28]
		delta_byte=abs((int)byte-byte_prev);
 8004554:	4b43      	ldr	r3, [pc, #268]	; (8004664 <Skill_Mode+0x26c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	bfb8      	it	lt
 8004560:	425b      	neglt	r3, r3
 8004562:	613b      	str	r3, [r7, #16]
		/**/
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	2b46      	cmp	r3, #70	; 0x46
 8004568:	dd03      	ble.n	8004572 <Skill_Mode+0x17a>
 800456a:	4b3f      	ldr	r3, [pc, #252]	; (8004668 <Skill_Mode+0x270>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d103      	bne.n	800457a <Skill_Mode+0x182>
 8004572:	4b3d      	ldr	r3, [pc, #244]	; (8004668 <Skill_Mode+0x270>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d122      	bne.n	80045c0 <Skill_Mode+0x1c8>
		{
				if(estuary==ESTUARY_MODE_OFF)t_prev=t;//ha most kapcsoltuk be a torkolatkompenzálást, akkor mostantól mérjük az eltelt időt
 800457a:	4b3b      	ldr	r3, [pc, #236]	; (8004668 <Skill_Mode+0x270>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d102      	bne.n	8004588 <Skill_Mode+0x190>
 8004582:	4a3a      	ldr	r2, [pc, #232]	; (800466c <Skill_Mode+0x274>)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6013      	str	r3, [r2, #0]
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 8004588:	4b38      	ldr	r3, [pc, #224]	; (800466c <Skill_Mode+0x274>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004594:	d908      	bls.n	80045a8 <Skill_Mode+0x1b0>
				{
					estuary=ESTUARY_MODE_OFF; //ha letelt a timeout kilépünk a kompenzálásból
 8004596:	4b34      	ldr	r3, [pc, #208]	; (8004668 <Skill_Mode+0x270>)
 8004598:	2201      	movs	r2, #1
 800459a:	701a      	strb	r2, [r3, #0]
					LED_G(0);
 800459c:	2201      	movs	r2, #1
 800459e:	2102      	movs	r1, #2
 80045a0:	4833      	ldr	r0, [pc, #204]	; (8004670 <Skill_Mode+0x278>)
 80045a2:	f003 fe31 	bl	8008208 <HAL_GPIO_WritePin>
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 80045a6:	e01b      	b.n	80045e0 <Skill_Mode+0x1e8>
				}
				else //ha még nem telt le az idő
				{
					byte = rxBuf[2]; //ilyenkor az első vonalat nézzük az utolsó helyett
 80045a8:	4b2a      	ldr	r3, [pc, #168]	; (8004654 <Skill_Mode+0x25c>)
 80045aa:	789b      	ldrb	r3, [r3, #2]
 80045ac:	61fb      	str	r3, [r7, #28]
					estuary=ESTUARY_MODE_ON; //öntartás
 80045ae:	4b2e      	ldr	r3, [pc, #184]	; (8004668 <Skill_Mode+0x270>)
 80045b0:	2202      	movs	r2, #2
 80045b2:	701a      	strb	r2, [r3, #0]
					LED_G(1);
 80045b4:	2200      	movs	r2, #0
 80045b6:	2102      	movs	r1, #2
 80045b8:	482d      	ldr	r0, [pc, #180]	; (8004670 <Skill_Mode+0x278>)
 80045ba:	f003 fe25 	bl	8008208 <HAL_GPIO_WritePin>
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 80045be:	e00f      	b.n	80045e0 <Skill_Mode+0x1e8>
				}
		}
		else if(delta_byte<ESTUARY_EXIT && estuary==ESTUARY_MODE_ON) //ha már eléggé összeszűkült a torkolat, akkor nem kell kompenzálni
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b2c      	cmp	r3, #44	; 0x2c
 80045c4:	dc5a      	bgt.n	800467c <Skill_Mode+0x284>
 80045c6:	4b28      	ldr	r3, [pc, #160]	; (8004668 <Skill_Mode+0x270>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d156      	bne.n	800467c <Skill_Mode+0x284>
		{
			estuary=ESTUARY_MODE_OFF;
 80045ce:	4b26      	ldr	r3, [pc, #152]	; (8004668 <Skill_Mode+0x270>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	701a      	strb	r2, [r3, #0]
			LED_G(0);
 80045d4:	2201      	movs	r2, #1
 80045d6:	2102      	movs	r1, #2
 80045d8:	4825      	ldr	r0, [pc, #148]	; (8004670 <Skill_Mode+0x278>)
 80045da:	f003 fe15 	bl	8008208 <HAL_GPIO_WritePin>
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 80045de:	e04d      	b.n	800467c <Skill_Mode+0x284>
 80045e0:	e04c      	b.n	800467c <Skill_Mode+0x284>
		}

	}

	else if(path==MIDDLE)
 80045e2:	4b1e      	ldr	r3, [pc, #120]	; (800465c <Skill_Mode+0x264>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d149      	bne.n	800467e <Skill_Mode+0x286>
	{
		if(LINE_CNT==1)byte = LINE1;//ha csak 1 vonal van, akkor azt követjük
 80045ea:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <Skill_Mode+0x25c>)
 80045ec:	785b      	ldrb	r3, [r3, #1]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d103      	bne.n	80045fa <Skill_Mode+0x202>
 80045f2:	4b18      	ldr	r3, [pc, #96]	; (8004654 <Skill_Mode+0x25c>)
 80045f4:	789b      	ldrb	r3, [r3, #2]
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	e041      	b.n	800467e <Skill_Mode+0x286>
		else if(LINE_CNT==3)//ha 3 vonal van
 80045fa:	4b16      	ldr	r3, [pc, #88]	; (8004654 <Skill_Mode+0x25c>)
 80045fc:	785b      	ldrb	r3, [r3, #1]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d113      	bne.n	800462a <Skill_Mode+0x232>
		{
			byte = rxBuf[3];//a középsőt követjük
 8004602:	4b14      	ldr	r3, [pc, #80]	; (8004654 <Skill_Mode+0x25c>)
 8004604:	78db      	ldrb	r3, [r3, #3]
 8004606:	61fb      	str	r3, [r7, #28]
			//folyamatosan nézzük, hogy az 1. és 3.vonal milyen messze van a vonalszenor középontjától
			tmp1=abs((int)LINE1-123);
 8004608:	4b12      	ldr	r3, [pc, #72]	; (8004654 <Skill_Mode+0x25c>)
 800460a:	789b      	ldrb	r3, [r3, #2]
 800460c:	3b7b      	subs	r3, #123	; 0x7b
 800460e:	2b00      	cmp	r3, #0
 8004610:	bfb8      	it	lt
 8004612:	425b      	neglt	r3, r3
 8004614:	4a17      	ldr	r2, [pc, #92]	; (8004674 <Skill_Mode+0x27c>)
 8004616:	6013      	str	r3, [r2, #0]
			tmp2=abs((int)LINE3-123);
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <Skill_Mode+0x25c>)
 800461a:	791b      	ldrb	r3, [r3, #4]
 800461c:	3b7b      	subs	r3, #123	; 0x7b
 800461e:	2b00      	cmp	r3, #0
 8004620:	bfb8      	it	lt
 8004622:	425b      	neglt	r3, r3
 8004624:	4a14      	ldr	r2, [pc, #80]	; (8004678 <Skill_Mode+0x280>)
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	e029      	b.n	800467e <Skill_Mode+0x286>
		}
		else if(LINE_CNT==2)//ha 2 vonal van, az azt jelenti, hogy az elágazás már annyira szétgáazott, hogy csak 2-t látunk a 3 vonalból
 800462a:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <Skill_Mode+0x25c>)
 800462c:	785b      	ldrb	r3, [r3, #1]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d125      	bne.n	800467e <Skill_Mode+0x286>
		{
			if(tmp1<tmp2) byte = LINE1; //ha a jobboldali vonalat veszítettük el
 8004632:	4b10      	ldr	r3, [pc, #64]	; (8004674 <Skill_Mode+0x27c>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b10      	ldr	r3, [pc, #64]	; (8004678 <Skill_Mode+0x280>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	da03      	bge.n	8004646 <Skill_Mode+0x24e>
 800463e:	4b05      	ldr	r3, [pc, #20]	; (8004654 <Skill_Mode+0x25c>)
 8004640:	789b      	ldrb	r3, [r3, #2]
 8004642:	61fb      	str	r3, [r7, #28]
 8004644:	e01b      	b.n	800467e <Skill_Mode+0x286>
			else byte = LINE2; //ha a baloldali vonalat veszítettük el
 8004646:	4b03      	ldr	r3, [pc, #12]	; (8004654 <Skill_Mode+0x25c>)
 8004648:	78db      	ldrb	r3, [r3, #3]
 800464a:	61fb      	str	r3, [r7, #28]
 800464c:	e017      	b.n	800467e <Skill_Mode+0x286>
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 800464e:	bf00      	nop
 8004650:	e015      	b.n	800467e <Skill_Mode+0x286>
 8004652:	bf00      	nop
 8004654:	20000624 	.word	0x20000624
 8004658:	2000062e 	.word	0x2000062e
 800465c:	2000029e 	.word	0x2000029e
 8004660:	2000029c 	.word	0x2000029c
 8004664:	20000668 	.word	0x20000668
 8004668:	2000066c 	.word	0x2000066c
 800466c:	20000670 	.word	0x20000670
 8004670:	40020400 	.word	0x40020400
 8004674:	20000674 	.word	0x20000674
 8004678:	20000678 	.word	0x20000678
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 800467c:	bf00      	nop
		}
	}
	if(estuary==ESTUARY_MODE_INIT)estuary=ESTUARY_MODE_OFF;
 800467e:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <Skill_Mode+0x330>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d102      	bne.n	800468c <Skill_Mode+0x294>
 8004686:	4b28      	ldr	r3, [pc, #160]	; (8004728 <Skill_Mode+0x330>)
 8004688:	2201      	movs	r2, #1
 800468a:	701a      	strb	r2, [r3, #0]
	//p = (float)byte * 204/248.0-102;
	p = (float)byte * 204/255.0-102;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004696:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800472c <Skill_Mode+0x334>
 800469a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800469e:	ee17 0a90 	vmov	r0, s15
 80046a2:	f7fb ff71 	bl	8000588 <__aeabi_f2d>
 80046a6:	a31e      	add	r3, pc, #120	; (adr r3, 8004720 <Skill_Mode+0x328>)
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f7fc f8ee 	bl	800088c <__aeabi_ddiv>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4610      	mov	r0, r2
 80046b6:	4619      	mov	r1, r3
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <Skill_Mode+0x338>)
 80046be:	f7fb fe03 	bl	80002c8 <__aeabi_dsub>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4610      	mov	r0, r2
 80046c8:	4619      	mov	r1, r3
 80046ca:	f7fc fa8d 	bl	8000be8 <__aeabi_d2f>
 80046ce:	4603      	mov	r3, r0
 80046d0:	617b      	str	r3, [r7, #20]
	gamma = -kP * p  - kD*(p-p_prev);
 80046d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80046d6:	eeb1 7a67 	vneg.f32	s14, s15
 80046da:	edd7 7a05 	vldr	s15, [r7, #20]
 80046de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046e2:	4b14      	ldr	r3, [pc, #80]	; (8004734 <Skill_Mode+0x33c>)
 80046e4:	edd3 7a00 	vldr	s15, [r3]
 80046e8:	edd7 6a05 	vldr	s13, [r7, #20]
 80046ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80046f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80046f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <Skill_Mode+0x340>)
 80046fe:	edc3 7a00 	vstr	s15, [r3]
	p_prev = p;
 8004702:	4a0c      	ldr	r2, [pc, #48]	; (8004734 <Skill_Mode+0x33c>)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	6013      	str	r3, [r2, #0]
	byte_prev=byte;
 8004708:	4a0c      	ldr	r2, [pc, #48]	; (800473c <Skill_Mode+0x344>)
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	6013      	str	r3, [r2, #0]

	return gamma;
 800470e:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <Skill_Mode+0x340>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	ee07 3a90 	vmov	s15, r3
}
 8004716:	eeb0 0a67 	vmov.f32	s0, s15
 800471a:	3720      	adds	r7, #32
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	00000000 	.word	0x00000000
 8004724:	406fe000 	.word	0x406fe000
 8004728:	2000066c 	.word	0x2000066c
 800472c:	434c0000 	.word	0x434c0000
 8004730:	40598000 	.word	0x40598000
 8004734:	2000067c 	.word	0x2000067c
 8004738:	20000680 	.word	0x20000680
 800473c:	20000668 	.word	0x20000668

08004740 <Detect_Node4>:
		ignore=0;
	}
}

void Detect_Node4(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 8004740:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
	static uint32_t t_prev=0;
	static uint32_t t_stamp=0;
	static uint8_t detect_node_state=0;
	static float s=0;

	if(LINE_CNT==4 && !detect_node_state)
 800474c:	4b3c      	ldr	r3, [pc, #240]	; (8004840 <Detect_Node4+0x100>)
 800474e:	785b      	ldrb	r3, [r3, #1]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d111      	bne.n	8004778 <Detect_Node4+0x38>
 8004754:	4b3b      	ldr	r3, [pc, #236]	; (8004844 <Detect_Node4+0x104>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10d      	bne.n	8004778 <Detect_Node4+0x38>
	{
		s=0;
 800475c:	4b3a      	ldr	r3, [pc, #232]	; (8004848 <Detect_Node4+0x108>)
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
		detect_node_state=1;//innentől mérünk
 8004764:	4b37      	ldr	r3, [pc, #220]	; (8004844 <Detect_Node4+0x104>)
 8004766:	2201      	movs	r2, #1
 8004768:	701a      	strb	r2, [r3, #0]
		ignore=1;
 800476a:	4b38      	ldr	r3, [pc, #224]	; (800484c <Detect_Node4+0x10c>)
 800476c:	2201      	movs	r2, #1
 800476e:	701a      	strb	r2, [r3, #0]
		t_stamp=t;
 8004770:	4a37      	ldr	r2, [pc, #220]	; (8004850 <Detect_Node4+0x110>)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e03e      	b.n	80047f6 <Detect_Node4+0xb6>

	}
	else if(LINE_CNT==4 && detect_node_state)
 8004778:	4b31      	ldr	r3, [pc, #196]	; (8004840 <Detect_Node4+0x100>)
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	2b04      	cmp	r3, #4
 800477e:	d13a      	bne.n	80047f6 <Detect_Node4+0xb6>
 8004780:	4b30      	ldr	r3, [pc, #192]	; (8004844 <Detect_Node4+0x104>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d036      	beq.n	80047f6 <Detect_Node4+0xb6>
	{
		s+=fabs(v)*(t-t_prev)/1000;
 8004788:	4b2f      	ldr	r3, [pc, #188]	; (8004848 <Detect_Node4+0x108>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f7fb fefb 	bl	8000588 <__aeabi_f2d>
 8004792:	4604      	mov	r4, r0
 8004794:	460d      	mov	r5, r1
 8004796:	4b2f      	ldr	r3, [pc, #188]	; (8004854 <Detect_Node4+0x114>)
 8004798:	edd3 7a00 	vldr	s15, [r3]
 800479c:	eef0 7ae7 	vabs.f32	s15, s15
 80047a0:	ee17 0a90 	vmov	r0, s15
 80047a4:	f7fb fef0 	bl	8000588 <__aeabi_f2d>
 80047a8:	4680      	mov	r8, r0
 80047aa:	4689      	mov	r9, r1
 80047ac:	4b2a      	ldr	r3, [pc, #168]	; (8004858 <Detect_Node4+0x118>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fb fec5 	bl	8000544 <__aeabi_ui2d>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4640      	mov	r0, r8
 80047c0:	4649      	mov	r1, r9
 80047c2:	f7fb ff39 	bl	8000638 <__aeabi_dmul>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4610      	mov	r0, r2
 80047cc:	4619      	mov	r1, r3
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	4b22      	ldr	r3, [pc, #136]	; (800485c <Detect_Node4+0x11c>)
 80047d4:	f7fc f85a 	bl	800088c <__aeabi_ddiv>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4620      	mov	r0, r4
 80047de:	4629      	mov	r1, r5
 80047e0:	f7fb fd74 	bl	80002cc <__adddf3>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4610      	mov	r0, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	f7fc f9fc 	bl	8000be8 <__aeabi_d2f>
 80047f0:	4603      	mov	r3, r0
 80047f2:	4a15      	ldr	r2, [pc, #84]	; (8004848 <Detect_Node4+0x108>)
 80047f4:	6013      	str	r3, [r2, #0]
	}
	if((t-t_stamp)>230 && detect_node_state)
 80047f6:	4b16      	ldr	r3, [pc, #88]	; (8004850 <Detect_Node4+0x110>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2be6      	cmp	r3, #230	; 0xe6
 8004800:	d916      	bls.n	8004830 <Detect_Node4+0xf0>
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <Detect_Node4+0x104>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d012      	beq.n	8004830 <Detect_Node4+0xf0>
	{
		detect_node_state=0;
 800480a:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <Detect_Node4+0x104>)
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
		ignore=0;
 8004810:	4b0e      	ldr	r3, [pc, #56]	; (800484c <Detect_Node4+0x10c>)
 8004812:	2200      	movs	r2, #0
 8004814:	701a      	strb	r2, [r3, #0]
		if(s>140)//vertical node
		{
			nodeDetected=1; //horizont node

		}
		else*/ if(s>50)//horizontal node
 8004816:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <Detect_Node4+0x108>)
 8004818:	edd3 7a00 	vldr	s15, [r3]
 800481c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004860 <Detect_Node4+0x120>
 8004820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004828:	dd02      	ble.n	8004830 <Detect_Node4+0xf0>
		{
			nodeDetected=1; //horizont node
 800482a:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <Detect_Node4+0x124>)
 800482c:	2201      	movs	r2, #1
 800482e:	701a      	strb	r2, [r3, #0]
		}
	}
	t_prev=t;
 8004830:	4a09      	ldr	r2, [pc, #36]	; (8004858 <Detect_Node4+0x118>)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6013      	str	r3, [r2, #0]
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004840:	20000624 	.word	0x20000624
 8004844:	20000684 	.word	0x20000684
 8004848:	20000688 	.word	0x20000688
 800484c:	2000062e 	.word	0x2000062e
 8004850:	2000068c 	.word	0x2000068c
 8004854:	2000060c 	.word	0x2000060c
 8004858:	20000690 	.word	0x20000690
 800485c:	408f4000 	.word	0x408f4000
 8004860:	42480000 	.word	0x42480000
 8004864:	2000029d 	.word	0x2000029d

08004868 <Lane_Changer>:

uint8_t Lane_Changer(uint32_t t)
{
 8004868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
	static uint8_t lineCnt_prev=1;
	static float s=0;
	static int i=0;
	static uint32_t dt[5]={1000,1000,1000,1000,1000};

	if(laneChange<2)return 0;
 8004872:	4b79      	ldr	r3, [pc, #484]	; (8004a58 <Lane_Changer+0x1f0>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d801      	bhi.n	800487e <Lane_Changer+0x16>
 800487a:	2300      	movs	r3, #0
 800487c:	e0e6      	b.n	8004a4c <Lane_Changer+0x1e4>
	if(LINE_CNT != lineCnt_prev && (LINE_CNT==1 || LINE_CNT==2) && laneChange==2) //ha változik az alattunk lévő vonalak száma
 800487e:	4b77      	ldr	r3, [pc, #476]	; (8004a5c <Lane_Changer+0x1f4>)
 8004880:	785a      	ldrb	r2, [r3, #1]
 8004882:	4b77      	ldr	r3, [pc, #476]	; (8004a60 <Lane_Changer+0x1f8>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d041      	beq.n	800490e <Lane_Changer+0xa6>
 800488a:	4b74      	ldr	r3, [pc, #464]	; (8004a5c <Lane_Changer+0x1f4>)
 800488c:	785b      	ldrb	r3, [r3, #1]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d003      	beq.n	800489a <Lane_Changer+0x32>
 8004892:	4b72      	ldr	r3, [pc, #456]	; (8004a5c <Lane_Changer+0x1f4>)
 8004894:	785b      	ldrb	r3, [r3, #1]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d139      	bne.n	800490e <Lane_Changer+0xa6>
 800489a:	4b6f      	ldr	r3, [pc, #444]	; (8004a58 <Lane_Changer+0x1f0>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d135      	bne.n	800490e <Lane_Changer+0xa6>
	{
		dt[i] = t - t_stamp;
 80048a2:	4b70      	ldr	r3, [pc, #448]	; (8004a64 <Lane_Changer+0x1fc>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	4b70      	ldr	r3, [pc, #448]	; (8004a68 <Lane_Changer+0x200>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	1a8a      	subs	r2, r1, r2
 80048ae:	496f      	ldr	r1, [pc, #444]	; (8004a6c <Lane_Changer+0x204>)
 80048b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		uint32_t sum=dt[0] + dt[1] + dt[2] + dt[3]+ dt[4];
 80048b4:	4b6d      	ldr	r3, [pc, #436]	; (8004a6c <Lane_Changer+0x204>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	4b6c      	ldr	r3, [pc, #432]	; (8004a6c <Lane_Changer+0x204>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	441a      	add	r2, r3
 80048be:	4b6b      	ldr	r3, [pc, #428]	; (8004a6c <Lane_Changer+0x204>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	441a      	add	r2, r3
 80048c4:	4b69      	ldr	r3, [pc, #420]	; (8004a6c <Lane_Changer+0x204>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	441a      	add	r2, r3
 80048ca:	4b68      	ldr	r3, [pc, #416]	; (8004a6c <Lane_Changer+0x204>)
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	4413      	add	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
		if((sum > 250) && (sum < 1000))//ha másfél másodpercen belül van8 váltás
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2bfa      	cmp	r3, #250	; 0xfa
 80048d6:	d90a      	bls.n	80048ee <Lane_Changer+0x86>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048de:	d206      	bcs.n	80048ee <Lane_Changer+0x86>
		{
			s=0;
 80048e0:	4b63      	ldr	r3, [pc, #396]	; (8004a70 <Lane_Changer+0x208>)
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
			laneChange=3;
 80048e8:	4b5b      	ldr	r3, [pc, #364]	; (8004a58 <Lane_Changer+0x1f0>)
 80048ea:	2203      	movs	r2, #3
 80048ec:	701a      	strb	r2, [r3, #0]
		}
		i++;
 80048ee:	4b5e      	ldr	r3, [pc, #376]	; (8004a68 <Lane_Changer+0x200>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3301      	adds	r3, #1
 80048f4:	4a5c      	ldr	r2, [pc, #368]	; (8004a68 <Lane_Changer+0x200>)
 80048f6:	6013      	str	r3, [r2, #0]
		if(i>4) i=0;
 80048f8:	4b5b      	ldr	r3, [pc, #364]	; (8004a68 <Lane_Changer+0x200>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	dd02      	ble.n	8004906 <Lane_Changer+0x9e>
 8004900:	4b59      	ldr	r3, [pc, #356]	; (8004a68 <Lane_Changer+0x200>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
		t_stamp = t;
 8004906:	4a57      	ldr	r2, [pc, #348]	; (8004a64 <Lane_Changer+0x1fc>)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6013      	str	r3, [r2, #0]
	{
 800490c:	e096      	b.n	8004a3c <Lane_Changer+0x1d4>
	}
	else if(laneChange==3)
 800490e:	4b52      	ldr	r3, [pc, #328]	; (8004a58 <Lane_Changer+0x1f0>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b03      	cmp	r3, #3
 8004914:	d172      	bne.n	80049fc <Lane_Changer+0x194>
	{
		s+=fabs(v)*(t-t_prev)/1000;
 8004916:	4b56      	ldr	r3, [pc, #344]	; (8004a70 <Lane_Changer+0x208>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fb fe34 	bl	8000588 <__aeabi_f2d>
 8004920:	4604      	mov	r4, r0
 8004922:	460d      	mov	r5, r1
 8004924:	4b53      	ldr	r3, [pc, #332]	; (8004a74 <Lane_Changer+0x20c>)
 8004926:	edd3 7a00 	vldr	s15, [r3]
 800492a:	eef0 7ae7 	vabs.f32	s15, s15
 800492e:	ee17 0a90 	vmov	r0, s15
 8004932:	f7fb fe29 	bl	8000588 <__aeabi_f2d>
 8004936:	4680      	mov	r8, r0
 8004938:	4689      	mov	r9, r1
 800493a:	4b4f      	ldr	r3, [pc, #316]	; (8004a78 <Lane_Changer+0x210>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	4618      	mov	r0, r3
 8004944:	f7fb fdfe 	bl	8000544 <__aeabi_ui2d>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4640      	mov	r0, r8
 800494e:	4649      	mov	r1, r9
 8004950:	f7fb fe72 	bl	8000638 <__aeabi_dmul>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4610      	mov	r0, r2
 800495a:	4619      	mov	r1, r3
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	4b46      	ldr	r3, [pc, #280]	; (8004a7c <Lane_Changer+0x214>)
 8004962:	f7fb ff93 	bl	800088c <__aeabi_ddiv>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4620      	mov	r0, r4
 800496c:	4629      	mov	r1, r5
 800496e:	f7fb fcad 	bl	80002cc <__adddf3>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4610      	mov	r0, r2
 8004978:	4619      	mov	r1, r3
 800497a:	f7fc f935 	bl	8000be8 <__aeabi_d2f>
 800497e:	4603      	mov	r3, r0
 8004980:	4a3b      	ldr	r2, [pc, #236]	; (8004a70 <Lane_Changer+0x208>)
 8004982:	6013      	str	r3, [r2, #0]
		if(orientation==FORWARD)
 8004984:	4b3e      	ldr	r3, [pc, #248]	; (8004a80 <Lane_Changer+0x218>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d114      	bne.n	80049b6 <Lane_Changer+0x14e>
		{
			TIM2->CCR1=CCR_FRONT_MAX;
 800498c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004990:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004994:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR4=CCR_REAR_MIN;
 8004996:	4b3b      	ldr	r3, [pc, #236]	; (8004a84 <Lane_Changer+0x21c>)
 8004998:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800499c:	641a      	str	r2, [r3, #64]	; 0x40
			timeout=1000;
 800499e:	4b3a      	ldr	r3, [pc, #232]	; (8004a88 <Lane_Changer+0x220>)
 80049a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049a4:	601a      	str	r2, [r3, #0]
			laneChange=4;
 80049a6:	4b2c      	ldr	r3, [pc, #176]	; (8004a58 <Lane_Changer+0x1f0>)
 80049a8:	2204      	movs	r2, #4
 80049aa:	701a      	strb	r2, [r3, #0]
			t_stamp=t;
 80049ac:	4a2d      	ldr	r2, [pc, #180]	; (8004a64 <Lane_Changer+0x1fc>)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6013      	str	r3, [r2, #0]
			return 1;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e04a      	b.n	8004a4c <Lane_Changer+0x1e4>
		}
		else if(orientation==REVERSE && s>2000)
 80049b6:	4b32      	ldr	r3, [pc, #200]	; (8004a80 <Lane_Changer+0x218>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d13e      	bne.n	8004a3c <Lane_Changer+0x1d4>
 80049be:	4b2c      	ldr	r3, [pc, #176]	; (8004a70 <Lane_Changer+0x208>)
 80049c0:	edd3 7a00 	vldr	s15, [r3]
 80049c4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004a8c <Lane_Changer+0x224>
 80049c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d0:	dd34      	ble.n	8004a3c <Lane_Changer+0x1d4>
		{
			TIM2->CCR1=CCR_FRONT_MIN;
 80049d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80049da:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR4=CCR_REAR_MIN;
 80049dc:	4b29      	ldr	r3, [pc, #164]	; (8004a84 <Lane_Changer+0x21c>)
 80049de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40
			timeout=3000;
 80049e4:	4b28      	ldr	r3, [pc, #160]	; (8004a88 <Lane_Changer+0x220>)
 80049e6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80049ea:	601a      	str	r2, [r3, #0]
			laneChange=4;
 80049ec:	4b1a      	ldr	r3, [pc, #104]	; (8004a58 <Lane_Changer+0x1f0>)
 80049ee:	2204      	movs	r2, #4
 80049f0:	701a      	strb	r2, [r3, #0]
			t_stamp=t;
 80049f2:	4a1c      	ldr	r2, [pc, #112]	; (8004a64 <Lane_Changer+0x1fc>)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6013      	str	r3, [r2, #0]
			return 1;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e027      	b.n	8004a4c <Lane_Changer+0x1e4>
		}
	}
	else if(laneChange==4)
 80049fc:	4b16      	ldr	r3, [pc, #88]	; (8004a58 <Lane_Changer+0x1f0>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d11b      	bne.n	8004a3c <Lane_Changer+0x1d4>
	{
		LED_Y(0);
 8004a04:	2201      	movs	r2, #1
 8004a06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a0a:	4821      	ldr	r0, [pc, #132]	; (8004a90 <Lane_Changer+0x228>)
 8004a0c:	f003 fbfc 	bl	8008208 <HAL_GPIO_WritePin>
		v_control=SLOW_DOWN;
 8004a10:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <Lane_Changer+0x22c>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	701a      	strb	r2, [r3, #0]
		if((t-t_stamp)>timeout && LINE_CNT>0)
 8004a16:	4b13      	ldr	r3, [pc, #76]	; (8004a64 <Lane_Changer+0x1fc>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	1ad2      	subs	r2, r2, r3
 8004a1e:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <Lane_Changer+0x220>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d908      	bls.n	8004a38 <Lane_Changer+0x1d0>
 8004a26:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <Lane_Changer+0x1f4>)
 8004a28:	785b      	ldrb	r3, [r3, #1]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d004      	beq.n	8004a38 <Lane_Changer+0x1d0>
		{
			ignore=1;
 8004a2e:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <Lane_Changer+0x230>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
			return 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	e009      	b.n	8004a4c <Lane_Changer+0x1e4>
		}
		else return 1;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e007      	b.n	8004a4c <Lane_Changer+0x1e4>
	}
	lineCnt_prev=LINE_CNT;
 8004a3c:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <Lane_Changer+0x1f4>)
 8004a3e:	785a      	ldrb	r2, [r3, #1]
 8004a40:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <Lane_Changer+0x1f8>)
 8004a42:	701a      	strb	r2, [r3, #0]
	t_prev=t;
 8004a44:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <Lane_Changer+0x210>)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6013      	str	r3, [r2, #0]
	return 0;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a56:	bf00      	nop
 8004a58:	200002a0 	.word	0x200002a0
 8004a5c:	20000624 	.word	0x20000624
 8004a60:	20000068 	.word	0x20000068
 8004a64:	20000694 	.word	0x20000694
 8004a68:	20000698 	.word	0x20000698
 8004a6c:	2000006c 	.word	0x2000006c
 8004a70:	2000069c 	.word	0x2000069c
 8004a74:	2000060c 	.word	0x2000060c
 8004a78:	200006a0 	.word	0x200006a0
 8004a7c:	408f4000 	.word	0x408f4000
 8004a80:	2000029c 	.word	0x2000029c
 8004a84:	40010000 	.word	0x40010000
 8004a88:	200006a4 	.word	0x200006a4
 8004a8c:	44fa0000 	.word	0x44fa0000
 8004a90:	40020400 	.word	0x40020400
 8004a94:	200002a1 	.word	0x200002a1
 8004a98:	2000062e 	.word	0x2000062e

08004a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004aa2:	f001 fca5 	bl	80063f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004aa6:	f000 f88f 	bl	8004bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004aaa:	f000 fdad 	bl	8005608 <MX_GPIO_Init>
  MX_DMA_Init();
 8004aae:	f000 fd8b 	bl	80055c8 <MX_DMA_Init>
  MX_TIM2_Init();
 8004ab2:	f000 fa7f 	bl	8004fb4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004ab6:	f000 fd09 	bl	80054cc <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8004aba:	f000 fb73 	bl	80051a4 <MX_TIM4_Init>
  MX_ADC2_Init();
 8004abe:	f000 f987 	bl	8004dd0 <MX_ADC2_Init>
  MX_TIM3_Init();
 8004ac2:	f000 faed 	bl	80050a0 <MX_TIM3_Init>
  MX_UART5_Init();
 8004ac6:	f000 fcd7 	bl	8005478 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8004aca:	f000 fd29 	bl	8005520 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8004ace:	f000 fc33 	bl	8005338 <MX_TIM8_Init>
  MX_ADC1_Init();
 8004ad2:	f000 f8eb 	bl	8004cac <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8004ad6:	f000 fd4d 	bl	8005574 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8004ada:	f000 fbdf 	bl	800529c <MX_TIM5_Init>
  MX_TIM1_Init();
 8004ade:	f000 f9c9 	bl	8004e74 <MX_TIM1_Init>
  MX_TIM14_Init();
 8004ae2:	f000 fca5 	bl	8005430 <MX_TIM14_Init>
  MX_TIM13_Init();
 8004ae6:	f000 fc7f 	bl	80053e8 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  F4_Basic_Init(&huart1, &htim5, &htim3, &htim2, &htim1, &htim8,&htim13,&htim14);
 8004aea:	4b2a      	ldr	r3, [pc, #168]	; (8004b94 <main+0xf8>)
 8004aec:	9303      	str	r3, [sp, #12]
 8004aee:	4b2a      	ldr	r3, [pc, #168]	; (8004b98 <main+0xfc>)
 8004af0:	9302      	str	r3, [sp, #8]
 8004af2:	4b2a      	ldr	r3, [pc, #168]	; (8004b9c <main+0x100>)
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	4b2a      	ldr	r3, [pc, #168]	; (8004ba0 <main+0x104>)
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	4b2a      	ldr	r3, [pc, #168]	; (8004ba4 <main+0x108>)
 8004afc:	4a2a      	ldr	r2, [pc, #168]	; (8004ba8 <main+0x10c>)
 8004afe:	492b      	ldr	r1, [pc, #172]	; (8004bac <main+0x110>)
 8004b00:	482b      	ldr	r0, [pc, #172]	; (8004bb0 <main+0x114>)
 8004b02:	f7fc fa59 	bl	8000fb8 <F4_Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3);
 8004b06:	2108      	movs	r1, #8
 8004b08:	482a      	ldr	r0, [pc, #168]	; (8004bb4 <main+0x118>)
 8004b0a:	f000 feaf 	bl	800586c <Remote_Control_Init>
  Battery_Voltage_Compensate(&hadc2, &hadc1, &huart1);
 8004b0e:	4a28      	ldr	r2, [pc, #160]	; (8004bb0 <main+0x114>)
 8004b10:	4929      	ldr	r1, [pc, #164]	; (8004bb8 <main+0x11c>)
 8004b12:	482a      	ldr	r0, [pc, #168]	; (8004bbc <main+0x120>)
 8004b14:	f7fe fafc 	bl	8003110 <Battery_Voltage_Compensate>

  Mode_Selector(&huart1, &huart5);
 8004b18:	4929      	ldr	r1, [pc, #164]	; (8004bc0 <main+0x124>)
 8004b1a:	4825      	ldr	r0, [pc, #148]	; (8004bb0 <main+0x114>)
 8004b1c:	f7fd ff66 	bl	80029ec <Mode_Selector>
  Create_Nodes(&huart1);
 8004b20:	4823      	ldr	r0, [pc, #140]	; (8004bb0 <main+0x114>)
 8004b22:	f7fc fc97 	bl	8001454 <Create_Nodes>
  Wait_For_Start_Sigal(&huart3,&huart1);
 8004b26:	4922      	ldr	r1, [pc, #136]	; (8004bb0 <main+0x114>)
 8004b28:	4826      	ldr	r0, [pc, #152]	; (8004bc4 <main+0x128>)
 8004b2a:	f7fe f82f 	bl	8002b8c <Wait_For_Start_Sigal>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Measure_Velocity_Task(&htim8,TICK, 4);
 8004b2e:	4b1f      	ldr	r3, [pc, #124]	; (8004bac <main+0x110>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	2204      	movs	r2, #4
 8004b36:	4619      	mov	r1, r3
 8004b38:	4818      	ldr	r0, [pc, #96]	; (8004b9c <main+0x100>)
 8004b3a:	f7fe fc15 	bl	8003368 <Measure_Velocity_Task>
	  Motor_Drive_Task(&htim3, &huart1, TICK, 10);
 8004b3e:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <main+0x110>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b44:	230a      	movs	r3, #10
 8004b46:	491a      	ldr	r1, [pc, #104]	; (8004bb0 <main+0x114>)
 8004b48:	4817      	ldr	r0, [pc, #92]	; (8004ba8 <main+0x10c>)
 8004b4a:	f7fe fc89 	bl	8003460 <Motor_Drive_Task>
	  Line_Track_Task(&huart5, &huart1, TICK, 4);
 8004b4e:	4b17      	ldr	r3, [pc, #92]	; (8004bac <main+0x110>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b54:	2304      	movs	r3, #4
 8004b56:	4916      	ldr	r1, [pc, #88]	; (8004bb0 <main+0x114>)
 8004b58:	4819      	ldr	r0, [pc, #100]	; (8004bc0 <main+0x124>)
 8004b5a:	f7fe fe3d 	bl	80037d8 <Line_Track_Task>
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart1, TICK, 43);
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <main+0x110>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	222b      	movs	r2, #43	; 0x2b
 8004b66:	9200      	str	r2, [sp, #0]
 8004b68:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <main+0x114>)
 8004b6a:	2108      	movs	r1, #8
 8004b6c:	4811      	ldr	r0, [pc, #68]	; (8004bb4 <main+0x118>)
 8004b6e:	f000 fe99 	bl	80058a4 <Remote_Control_Task>
	  HDI_Read_Task(&huart1,&htim2,TICK, 200);
 8004b72:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <main+0x110>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b78:	23c8      	movs	r3, #200	; 0xc8
 8004b7a:	490a      	ldr	r1, [pc, #40]	; (8004ba4 <main+0x108>)
 8004b7c:	480c      	ldr	r0, [pc, #48]	; (8004bb0 <main+0x114>)
 8004b7e:	f7fc fadb 	bl	8001138 <HDI_Read_Task>
	  Control_Task(&huart1,&htim14,TICK, 29);
 8004b82:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <main+0x110>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b88:	231d      	movs	r3, #29
 8004b8a:	4902      	ldr	r1, [pc, #8]	; (8004b94 <main+0xf8>)
 8004b8c:	4808      	ldr	r0, [pc, #32]	; (8004bb0 <main+0x114>)
 8004b8e:	f7fd fbcb 	bl	8002328 <Control_Task>
	  Measure_Velocity_Task(&htim8,TICK, 4);
 8004b92:	e7cc      	b.n	8004b2e <main+0x92>
 8004b94:	20000930 	.word	0x20000930
 8004b98:	200008e8 	.word	0x200008e8
 8004b9c:	200008a0 	.word	0x200008a0
 8004ba0:	20000738 	.word	0x20000738
 8004ba4:	20000780 	.word	0x20000780
 8004ba8:	200007c8 	.word	0x200007c8
 8004bac:	20000858 	.word	0x20000858
 8004bb0:	20000a1c 	.word	0x20000a1c
 8004bb4:	20000810 	.word	0x20000810
 8004bb8:	200006a8 	.word	0x200006a8
 8004bbc:	200006f0 	.word	0x200006f0
 8004bc0:	200009d8 	.word	0x200009d8
 8004bc4:	20000aa4 	.word	0x20000aa4

08004bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b094      	sub	sp, #80	; 0x50
 8004bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bce:	f107 031c 	add.w	r3, r7, #28
 8004bd2:	2234      	movs	r2, #52	; 0x34
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f007 f960 	bl	800be9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bdc:	f107 0308 	add.w	r3, r7, #8
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	609a      	str	r2, [r3, #8]
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bec:	2300      	movs	r3, #0
 8004bee:	607b      	str	r3, [r7, #4]
 8004bf0:	4b2c      	ldr	r3, [pc, #176]	; (8004ca4 <SystemClock_Config+0xdc>)
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	4a2b      	ldr	r2, [pc, #172]	; (8004ca4 <SystemClock_Config+0xdc>)
 8004bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfc:	4b29      	ldr	r3, [pc, #164]	; (8004ca4 <SystemClock_Config+0xdc>)
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c04:	607b      	str	r3, [r7, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c08:	2300      	movs	r3, #0
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	4b26      	ldr	r3, [pc, #152]	; (8004ca8 <SystemClock_Config+0xe0>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a25      	ldr	r2, [pc, #148]	; (8004ca8 <SystemClock_Config+0xe0>)
 8004c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	4b23      	ldr	r3, [pc, #140]	; (8004ca8 <SystemClock_Config+0xe0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c20:	603b      	str	r3, [r7, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004c24:	2301      	movs	r3, #1
 8004c26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c2c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004c38:	2304      	movs	r3, #4
 8004c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004c3c:	23b4      	movs	r3, #180	; 0xb4
 8004c3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c40:	2302      	movs	r3, #2
 8004c42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004c44:	2302      	movs	r3, #2
 8004c46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c4c:	f107 031c 	add.w	r3, r7, #28
 8004c50:	4618      	mov	r0, r3
 8004c52:	f003 febf 	bl	80089d4 <HAL_RCC_OscConfig>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004c5c:	f000 fe00 	bl	8005860 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004c60:	f003 fb1e 	bl	80082a0 <HAL_PWREx_EnableOverDrive>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8004c6a:	f000 fdf9 	bl	8005860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c6e:	230f      	movs	r3, #15
 8004c70:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c72:	2302      	movs	r3, #2
 8004c74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8004c7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004c7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c84:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004c86:	f107 0308 	add.w	r3, r7, #8
 8004c8a:	2105      	movs	r1, #5
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f003 fb57 	bl	8008340 <HAL_RCC_ClockConfig>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004c98:	f000 fde2 	bl	8005860 <Error_Handler>
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	3750      	adds	r7, #80	; 0x50
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	40007000 	.word	0x40007000

08004cac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08c      	sub	sp, #48	; 0x30
 8004cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004cb2:	f107 0320 	add.w	r3, r7, #32
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	605a      	str	r2, [r3, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
 8004cbe:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8004cc0:	463b      	mov	r3, r7
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f007 f8e8 	bl	800be9c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004ccc:	4b3c      	ldr	r3, [pc, #240]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004cce:	4a3d      	ldr	r2, [pc, #244]	; (8004dc4 <MX_ADC1_Init+0x118>)
 8004cd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8004cd2:	4b3b      	ldr	r3, [pc, #236]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004cd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004cda:	4b39      	ldr	r3, [pc, #228]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004ce0:	4b37      	ldr	r3, [pc, #220]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004ce6:	4b36      	ldr	r3, [pc, #216]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004cec:	4b34      	ldr	r3, [pc, #208]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004cf4:	4b32      	ldr	r3, [pc, #200]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004cfa:	4b31      	ldr	r3, [pc, #196]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004cfc:	4a32      	ldr	r2, [pc, #200]	; (8004dc8 <MX_ADC1_Init+0x11c>)
 8004cfe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d00:	4b2f      	ldr	r3, [pc, #188]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8004d06:	4b2e      	ldr	r3, [pc, #184]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004d08:	2203      	movs	r2, #3
 8004d0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004d0c:	4b2c      	ldr	r3, [pc, #176]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004d14:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004d1a:	4829      	ldr	r0, [pc, #164]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004d1c:	f001 fbfe 	bl	800651c <HAL_ADC_Init>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8004d26:	f000 fd9b 	bl	8005860 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004d2a:	2308      	movs	r3, #8
 8004d2c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004d32:	2307      	movs	r3, #7
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d36:	f107 0320 	add.w	r3, r7, #32
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4820      	ldr	r0, [pc, #128]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004d3e:	f001 fd9b 	bl	8006878 <HAL_ADC_ConfigChannel>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8004d48:	f000 fd8a 	bl	8005860 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d50:	f107 0320 	add.w	r3, r7, #32
 8004d54:	4619      	mov	r1, r3
 8004d56:	481a      	ldr	r0, [pc, #104]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004d58:	f001 fd8e 	bl	8006878 <HAL_ADC_ConfigChannel>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8004d62:	f000 fd7d 	bl	8005860 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8004d66:	2303      	movs	r3, #3
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d6a:	f107 0320 	add.w	r3, r7, #32
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4813      	ldr	r0, [pc, #76]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004d72:	f001 fd81 	bl	8006878 <HAL_ADC_ConfigChannel>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8004d7c:	f000 fd70 	bl	8005860 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8004d80:	2308      	movs	r3, #8
 8004d82:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8004d84:	2301      	movs	r3, #1
 8004d86:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8004d90:	2300      	movs	r3, #0
 8004d92:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8004d94:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <MX_ADC1_Init+0x120>)
 8004d96:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004da4:	463b      	mov	r3, r7
 8004da6:	4619      	mov	r1, r3
 8004da8:	4805      	ldr	r0, [pc, #20]	; (8004dc0 <MX_ADC1_Init+0x114>)
 8004daa:	f001 ff93 	bl	8006cd4 <HAL_ADCEx_InjectedConfigChannel>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8004db4:	f000 fd54 	bl	8005860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004db8:	bf00      	nop
 8004dba:	3730      	adds	r7, #48	; 0x30
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	200006a8 	.word	0x200006a8
 8004dc4:	40012000 	.word	0x40012000
 8004dc8:	0f000001 	.word	0x0f000001
 8004dcc:	000f0001 	.word	0x000f0001

08004dd0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	605a      	str	r2, [r3, #4]
 8004dde:	609a      	str	r2, [r3, #8]
 8004de0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004de2:	4b21      	ldr	r3, [pc, #132]	; (8004e68 <MX_ADC2_Init+0x98>)
 8004de4:	4a21      	ldr	r2, [pc, #132]	; (8004e6c <MX_ADC2_Init+0x9c>)
 8004de6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8004de8:	4b1f      	ldr	r3, [pc, #124]	; (8004e68 <MX_ADC2_Init+0x98>)
 8004dea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004df0:	4b1d      	ldr	r3, [pc, #116]	; (8004e68 <MX_ADC2_Init+0x98>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004df6:	4b1c      	ldr	r3, [pc, #112]	; (8004e68 <MX_ADC2_Init+0x98>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004dfc:	4b1a      	ldr	r3, [pc, #104]	; (8004e68 <MX_ADC2_Init+0x98>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004e02:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <MX_ADC2_Init+0x98>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004e0a:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <MX_ADC2_Init+0x98>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004e10:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <MX_ADC2_Init+0x98>)
 8004e12:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <MX_ADC2_Init+0xa0>)
 8004e14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004e16:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <MX_ADC2_Init+0x98>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004e1c:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <MX_ADC2_Init+0x98>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004e22:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <MX_ADC2_Init+0x98>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e2a:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <MX_ADC2_Init+0x98>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004e30:	480d      	ldr	r0, [pc, #52]	; (8004e68 <MX_ADC2_Init+0x98>)
 8004e32:	f001 fb73 	bl	800651c <HAL_ADC_Init>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004e3c:	f000 fd10 	bl	8005860 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004e40:	230d      	movs	r3, #13
 8004e42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004e44:	2301      	movs	r3, #1
 8004e46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004e48:	2307      	movs	r3, #7
 8004e4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004e4c:	463b      	mov	r3, r7
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4805      	ldr	r0, [pc, #20]	; (8004e68 <MX_ADC2_Init+0x98>)
 8004e52:	f001 fd11 	bl	8006878 <HAL_ADC_ConfigChannel>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004e5c:	f000 fd00 	bl	8005860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	200006f0 	.word	0x200006f0
 8004e6c:	40012100 	.word	0x40012100
 8004e70:	0f000001 	.word	0x0f000001

08004e74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b096      	sub	sp, #88	; 0x58
 8004e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	605a      	str	r2, [r3, #4]
 8004e84:	609a      	str	r2, [r3, #8]
 8004e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	605a      	str	r2, [r3, #4]
 8004e9c:	609a      	str	r2, [r3, #8]
 8004e9e:	60da      	str	r2, [r3, #12]
 8004ea0:	611a      	str	r2, [r3, #16]
 8004ea2:	615a      	str	r2, [r3, #20]
 8004ea4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004ea6:	1d3b      	adds	r3, r7, #4
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	2100      	movs	r1, #0
 8004eac:	4618      	mov	r0, r3
 8004eae:	f006 fff5 	bl	800be9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004eb2:	4b3e      	ldr	r3, [pc, #248]	; (8004fac <MX_TIM1_Init+0x138>)
 8004eb4:	4a3e      	ldr	r2, [pc, #248]	; (8004fb0 <MX_TIM1_Init+0x13c>)
 8004eb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 360-1;
 8004eb8:	4b3c      	ldr	r3, [pc, #240]	; (8004fac <MX_TIM1_Init+0x138>)
 8004eba:	f240 1267 	movw	r2, #359	; 0x167
 8004ebe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ec0:	4b3a      	ldr	r3, [pc, #232]	; (8004fac <MX_TIM1_Init+0x138>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8004ec6:	4b39      	ldr	r3, [pc, #228]	; (8004fac <MX_TIM1_Init+0x138>)
 8004ec8:	f242 720f 	movw	r2, #9999	; 0x270f
 8004ecc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ece:	4b37      	ldr	r3, [pc, #220]	; (8004fac <MX_TIM1_Init+0x138>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004ed4:	4b35      	ldr	r3, [pc, #212]	; (8004fac <MX_TIM1_Init+0x138>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004eda:	4b34      	ldr	r3, [pc, #208]	; (8004fac <MX_TIM1_Init+0x138>)
 8004edc:	2280      	movs	r2, #128	; 0x80
 8004ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004ee0:	4832      	ldr	r0, [pc, #200]	; (8004fac <MX_TIM1_Init+0x138>)
 8004ee2:	f004 f815 	bl	8008f10 <HAL_TIM_Base_Init>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004eec:	f000 fcb8 	bl	8005860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ef4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004ef6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004efa:	4619      	mov	r1, r3
 8004efc:	482b      	ldr	r0, [pc, #172]	; (8004fac <MX_TIM1_Init+0x138>)
 8004efe:	f004 ff7f 	bl	8009e00 <HAL_TIM_ConfigClockSource>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004f08:	f000 fcaa 	bl	8005860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004f0c:	4827      	ldr	r0, [pc, #156]	; (8004fac <MX_TIM1_Init+0x138>)
 8004f0e:	f004 f8b7 	bl	8009080 <HAL_TIM_PWM_Init>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004f18:	f000 fca2 	bl	8005860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004f24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4820      	ldr	r0, [pc, #128]	; (8004fac <MX_TIM1_Init+0x138>)
 8004f2c:	f005 fd90 	bl	800aa50 <HAL_TIMEx_MasterConfigSynchronization>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004f36:	f000 fc93 	bl	8005860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f3a:	2360      	movs	r3, #96	; 0x60
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 750-1;
 8004f3e:	f240 23ed 	movw	r3, #749	; 0x2ed
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f44:	2300      	movs	r3, #0
 8004f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004f50:	2300      	movs	r3, #0
 8004f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f58:	220c      	movs	r2, #12
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4813      	ldr	r0, [pc, #76]	; (8004fac <MX_TIM1_Init+0x138>)
 8004f5e:	f004 fe8d 	bl	8009c7c <HAL_TIM_PWM_ConfigChannel>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004f68:	f000 fc7a 	bl	8005860 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004f8a:	1d3b      	adds	r3, r7, #4
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4807      	ldr	r0, [pc, #28]	; (8004fac <MX_TIM1_Init+0x138>)
 8004f90:	f005 fdda 	bl	800ab48 <HAL_TIMEx_ConfigBreakDeadTime>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8004f9a:	f000 fc61 	bl	8005860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004f9e:	4803      	ldr	r0, [pc, #12]	; (8004fac <MX_TIM1_Init+0x138>)
 8004fa0:	f000 ff24 	bl	8005dec <HAL_TIM_MspPostInit>

}
 8004fa4:	bf00      	nop
 8004fa6:	3758      	adds	r7, #88	; 0x58
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20000738 	.word	0x20000738
 8004fb0:	40010000 	.word	0x40010000

08004fb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08e      	sub	sp, #56	; 0x38
 8004fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	605a      	str	r2, [r3, #4]
 8004fc4:	609a      	str	r2, [r3, #8]
 8004fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fc8:	f107 0320 	add.w	r3, r7, #32
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004fd2:	1d3b      	adds	r3, r7, #4
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	60da      	str	r2, [r3, #12]
 8004fde:	611a      	str	r2, [r3, #16]
 8004fe0:	615a      	str	r2, [r3, #20]
 8004fe2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004fe4:	4b2d      	ldr	r3, [pc, #180]	; (800509c <MX_TIM2_Init+0xe8>)
 8004fe6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004fea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8004fec:	4b2b      	ldr	r3, [pc, #172]	; (800509c <MX_TIM2_Init+0xe8>)
 8004fee:	2259      	movs	r2, #89	; 0x59
 8004ff0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ff2:	4b2a      	ldr	r3, [pc, #168]	; (800509c <MX_TIM2_Init+0xe8>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8004ff8:	4b28      	ldr	r3, [pc, #160]	; (800509c <MX_TIM2_Init+0xe8>)
 8004ffa:	f242 720f 	movw	r2, #9999	; 0x270f
 8004ffe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005000:	4b26      	ldr	r3, [pc, #152]	; (800509c <MX_TIM2_Init+0xe8>)
 8005002:	2200      	movs	r2, #0
 8005004:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005006:	4b25      	ldr	r3, [pc, #148]	; (800509c <MX_TIM2_Init+0xe8>)
 8005008:	2280      	movs	r2, #128	; 0x80
 800500a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800500c:	4823      	ldr	r0, [pc, #140]	; (800509c <MX_TIM2_Init+0xe8>)
 800500e:	f003 ff7f 	bl	8008f10 <HAL_TIM_Base_Init>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8005018:	f000 fc22 	bl	8005860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800501c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005020:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005026:	4619      	mov	r1, r3
 8005028:	481c      	ldr	r0, [pc, #112]	; (800509c <MX_TIM2_Init+0xe8>)
 800502a:	f004 fee9 	bl	8009e00 <HAL_TIM_ConfigClockSource>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8005034:	f000 fc14 	bl	8005860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005038:	4818      	ldr	r0, [pc, #96]	; (800509c <MX_TIM2_Init+0xe8>)
 800503a:	f004 f821 	bl	8009080 <HAL_TIM_PWM_Init>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8005044:	f000 fc0c 	bl	8005860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005048:	2300      	movs	r3, #0
 800504a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800504c:	2300      	movs	r3, #0
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005050:	f107 0320 	add.w	r3, r7, #32
 8005054:	4619      	mov	r1, r3
 8005056:	4811      	ldr	r0, [pc, #68]	; (800509c <MX_TIM2_Init+0xe8>)
 8005058:	f005 fcfa 	bl	800aa50 <HAL_TIMEx_MasterConfigSynchronization>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8005062:	f000 fbfd 	bl	8005860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005066:	2360      	movs	r3, #96	; 0x60
 8005068:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 800506a:	f240 23ed 	movw	r3, #749	; 0x2ed
 800506e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005078:	1d3b      	adds	r3, r7, #4
 800507a:	2200      	movs	r2, #0
 800507c:	4619      	mov	r1, r3
 800507e:	4807      	ldr	r0, [pc, #28]	; (800509c <MX_TIM2_Init+0xe8>)
 8005080:	f004 fdfc 	bl	8009c7c <HAL_TIM_PWM_ConfigChannel>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800508a:	f000 fbe9 	bl	8005860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800508e:	4803      	ldr	r0, [pc, #12]	; (800509c <MX_TIM2_Init+0xe8>)
 8005090:	f000 feac 	bl	8005dec <HAL_TIM_MspPostInit>

}
 8005094:	bf00      	nop
 8005096:	3738      	adds	r7, #56	; 0x38
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20000780 	.word	0x20000780

080050a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08e      	sub	sp, #56	; 0x38
 80050a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	605a      	str	r2, [r3, #4]
 80050b0:	609a      	str	r2, [r3, #8]
 80050b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050b4:	f107 0320 	add.w	r3, r7, #32
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050be:	1d3b      	adds	r3, r7, #4
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	605a      	str	r2, [r3, #4]
 80050c6:	609a      	str	r2, [r3, #8]
 80050c8:	60da      	str	r2, [r3, #12]
 80050ca:	611a      	str	r2, [r3, #16]
 80050cc:	615a      	str	r2, [r3, #20]
 80050ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80050d0:	4b32      	ldr	r3, [pc, #200]	; (800519c <MX_TIM3_Init+0xfc>)
 80050d2:	4a33      	ldr	r2, [pc, #204]	; (80051a0 <MX_TIM3_Init+0x100>)
 80050d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 80050d6:	4b31      	ldr	r3, [pc, #196]	; (800519c <MX_TIM3_Init+0xfc>)
 80050d8:	2201      	movs	r2, #1
 80050da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80050dc:	4b2f      	ldr	r3, [pc, #188]	; (800519c <MX_TIM3_Init+0xfc>)
 80050de:	2260      	movs	r2, #96	; 0x60
 80050e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80050e2:	4b2e      	ldr	r3, [pc, #184]	; (800519c <MX_TIM3_Init+0xfc>)
 80050e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80050e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050ea:	4b2c      	ldr	r3, [pc, #176]	; (800519c <MX_TIM3_Init+0xfc>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050f0:	4b2a      	ldr	r3, [pc, #168]	; (800519c <MX_TIM3_Init+0xfc>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80050f6:	4829      	ldr	r0, [pc, #164]	; (800519c <MX_TIM3_Init+0xfc>)
 80050f8:	f003 ff0a 	bl	8008f10 <HAL_TIM_Base_Init>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005102:	f000 fbad 	bl	8005860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800510a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800510c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005110:	4619      	mov	r1, r3
 8005112:	4822      	ldr	r0, [pc, #136]	; (800519c <MX_TIM3_Init+0xfc>)
 8005114:	f004 fe74 	bl	8009e00 <HAL_TIM_ConfigClockSource>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800511e:	f000 fb9f 	bl	8005860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005122:	481e      	ldr	r0, [pc, #120]	; (800519c <MX_TIM3_Init+0xfc>)
 8005124:	f003 ffac 	bl	8009080 <HAL_TIM_PWM_Init>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800512e:	f000 fb97 	bl	8005860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005132:	2300      	movs	r3, #0
 8005134:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005136:	2300      	movs	r3, #0
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800513a:	f107 0320 	add.w	r3, r7, #32
 800513e:	4619      	mov	r1, r3
 8005140:	4816      	ldr	r0, [pc, #88]	; (800519c <MX_TIM3_Init+0xfc>)
 8005142:	f005 fc85 	bl	800aa50 <HAL_TIMEx_MasterConfigSynchronization>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800514c:	f000 fb88 	bl	8005860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005150:	2360      	movs	r3, #96	; 0x60
 8005152:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800515c:	2300      	movs	r3, #0
 800515e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005160:	1d3b      	adds	r3, r7, #4
 8005162:	2200      	movs	r2, #0
 8005164:	4619      	mov	r1, r3
 8005166:	480d      	ldr	r0, [pc, #52]	; (800519c <MX_TIM3_Init+0xfc>)
 8005168:	f004 fd88 	bl	8009c7c <HAL_TIM_PWM_ConfigChannel>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005172:	f000 fb75 	bl	8005860 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005176:	1d3b      	adds	r3, r7, #4
 8005178:	2204      	movs	r2, #4
 800517a:	4619      	mov	r1, r3
 800517c:	4807      	ldr	r0, [pc, #28]	; (800519c <MX_TIM3_Init+0xfc>)
 800517e:	f004 fd7d 	bl	8009c7c <HAL_TIM_PWM_ConfigChannel>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005188:	f000 fb6a 	bl	8005860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800518c:	4803      	ldr	r0, [pc, #12]	; (800519c <MX_TIM3_Init+0xfc>)
 800518e:	f000 fe2d 	bl	8005dec <HAL_TIM_MspPostInit>

}
 8005192:	bf00      	nop
 8005194:	3738      	adds	r7, #56	; 0x38
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	200007c8 	.word	0x200007c8
 80051a0:	40000400 	.word	0x40000400

080051a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08a      	sub	sp, #40	; 0x28
 80051a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051aa:	f107 0318 	add.w	r3, r7, #24
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	609a      	str	r2, [r3, #8]
 80051b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051b8:	f107 0310 	add.w	r3, r7, #16
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80051c2:	463b      	mov	r3, r7
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	605a      	str	r2, [r3, #4]
 80051ca:	609a      	str	r2, [r3, #8]
 80051cc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80051ce:	4b31      	ldr	r3, [pc, #196]	; (8005294 <MX_TIM4_Init+0xf0>)
 80051d0:	4a31      	ldr	r2, [pc, #196]	; (8005298 <MX_TIM4_Init+0xf4>)
 80051d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 80051d4:	4b2f      	ldr	r3, [pc, #188]	; (8005294 <MX_TIM4_Init+0xf0>)
 80051d6:	f240 321f 	movw	r2, #799	; 0x31f
 80051da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051dc:	4b2d      	ldr	r3, [pc, #180]	; (8005294 <MX_TIM4_Init+0xf0>)
 80051de:	2200      	movs	r2, #0
 80051e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 80051e2:	4b2c      	ldr	r3, [pc, #176]	; (8005294 <MX_TIM4_Init+0xf0>)
 80051e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051ea:	4b2a      	ldr	r3, [pc, #168]	; (8005294 <MX_TIM4_Init+0xf0>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051f0:	4b28      	ldr	r3, [pc, #160]	; (8005294 <MX_TIM4_Init+0xf0>)
 80051f2:	2280      	movs	r2, #128	; 0x80
 80051f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80051f6:	4827      	ldr	r0, [pc, #156]	; (8005294 <MX_TIM4_Init+0xf0>)
 80051f8:	f003 fe8a 	bl	8008f10 <HAL_TIM_Base_Init>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8005202:	f000 fb2d 	bl	8005860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800520a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800520c:	f107 0318 	add.w	r3, r7, #24
 8005210:	4619      	mov	r1, r3
 8005212:	4820      	ldr	r0, [pc, #128]	; (8005294 <MX_TIM4_Init+0xf0>)
 8005214:	f004 fdf4 	bl	8009e00 <HAL_TIM_ConfigClockSource>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800521e:	f000 fb1f 	bl	8005860 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8005222:	481c      	ldr	r0, [pc, #112]	; (8005294 <MX_TIM4_Init+0xf0>)
 8005224:	f004 f84e 	bl	80092c4 <HAL_TIM_IC_Init>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800522e:	f000 fb17 	bl	8005860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005232:	2300      	movs	r3, #0
 8005234:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005236:	2300      	movs	r3, #0
 8005238:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800523a:	f107 0310 	add.w	r3, r7, #16
 800523e:	4619      	mov	r1, r3
 8005240:	4814      	ldr	r0, [pc, #80]	; (8005294 <MX_TIM4_Init+0xf0>)
 8005242:	f005 fc05 	bl	800aa50 <HAL_TIMEx_MasterConfigSynchronization>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 800524c:	f000 fb08 	bl	8005860 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8005250:	230a      	movs	r3, #10
 8005252:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005254:	2301      	movs	r3, #1
 8005256:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005258:	2300      	movs	r3, #0
 800525a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8005260:	463b      	mov	r3, r7
 8005262:	2208      	movs	r2, #8
 8005264:	4619      	mov	r1, r3
 8005266:	480b      	ldr	r0, [pc, #44]	; (8005294 <MX_TIM4_Init+0xf0>)
 8005268:	f004 fc6c 	bl	8009b44 <HAL_TIM_IC_ConfigChannel>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8005272:	f000 faf5 	bl	8005860 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8005276:	463b      	mov	r3, r7
 8005278:	220c      	movs	r2, #12
 800527a:	4619      	mov	r1, r3
 800527c:	4805      	ldr	r0, [pc, #20]	; (8005294 <MX_TIM4_Init+0xf0>)
 800527e:	f004 fc61 	bl	8009b44 <HAL_TIM_IC_ConfigChannel>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8005288:	f000 faea 	bl	8005860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800528c:	bf00      	nop
 800528e:	3728      	adds	r7, #40	; 0x28
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000810 	.word	0x20000810
 8005298:	40000800 	.word	0x40000800

0800529c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052a2:	f107 0308 	add.w	r3, r7, #8
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	605a      	str	r2, [r3, #4]
 80052ac:	609a      	str	r2, [r3, #8]
 80052ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052b0:	463b      	mov	r3, r7
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <MX_TIM5_Init+0x94>)
 80052ba:	4a1e      	ldr	r2, [pc, #120]	; (8005334 <MX_TIM5_Init+0x98>)
 80052bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 80052be:	4b1c      	ldr	r3, [pc, #112]	; (8005330 <MX_TIM5_Init+0x94>)
 80052c0:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80052c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052c6:	4b1a      	ldr	r3, [pc, #104]	; (8005330 <MX_TIM5_Init+0x94>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80052cc:	4b18      	ldr	r3, [pc, #96]	; (8005330 <MX_TIM5_Init+0x94>)
 80052ce:	f04f 32ff 	mov.w	r2, #4294967295
 80052d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052d4:	4b16      	ldr	r3, [pc, #88]	; (8005330 <MX_TIM5_Init+0x94>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80052da:	4b15      	ldr	r3, [pc, #84]	; (8005330 <MX_TIM5_Init+0x94>)
 80052dc:	2280      	movs	r2, #128	; 0x80
 80052de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80052e0:	4813      	ldr	r0, [pc, #76]	; (8005330 <MX_TIM5_Init+0x94>)
 80052e2:	f003 fe15 	bl	8008f10 <HAL_TIM_Base_Init>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80052ec:	f000 fab8 	bl	8005860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80052f6:	f107 0308 	add.w	r3, r7, #8
 80052fa:	4619      	mov	r1, r3
 80052fc:	480c      	ldr	r0, [pc, #48]	; (8005330 <MX_TIM5_Init+0x94>)
 80052fe:	f004 fd7f 	bl	8009e00 <HAL_TIM_ConfigClockSource>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005308:	f000 faaa 	bl	8005860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800530c:	2300      	movs	r3, #0
 800530e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005310:	2300      	movs	r3, #0
 8005312:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005314:	463b      	mov	r3, r7
 8005316:	4619      	mov	r1, r3
 8005318:	4805      	ldr	r0, [pc, #20]	; (8005330 <MX_TIM5_Init+0x94>)
 800531a:	f005 fb99 	bl	800aa50 <HAL_TIMEx_MasterConfigSynchronization>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005324:	f000 fa9c 	bl	8005860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005328:	bf00      	nop
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20000858 	.word	0x20000858
 8005334:	40000c00 	.word	0x40000c00

08005338 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08c      	sub	sp, #48	; 0x30
 800533c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800533e:	f107 030c 	add.w	r3, r7, #12
 8005342:	2224      	movs	r2, #36	; 0x24
 8005344:	2100      	movs	r1, #0
 8005346:	4618      	mov	r0, r3
 8005348:	f006 fda8 	bl	800be9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800534c:	1d3b      	adds	r3, r7, #4
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005354:	4b22      	ldr	r3, [pc, #136]	; (80053e0 <MX_TIM8_Init+0xa8>)
 8005356:	4a23      	ldr	r2, [pc, #140]	; (80053e4 <MX_TIM8_Init+0xac>)
 8005358:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800535a:	4b21      	ldr	r3, [pc, #132]	; (80053e0 <MX_TIM8_Init+0xa8>)
 800535c:	2200      	movs	r2, #0
 800535e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005360:	4b1f      	ldr	r3, [pc, #124]	; (80053e0 <MX_TIM8_Init+0xa8>)
 8005362:	2200      	movs	r2, #0
 8005364:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005366:	4b1e      	ldr	r3, [pc, #120]	; (80053e0 <MX_TIM8_Init+0xa8>)
 8005368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800536c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800536e:	4b1c      	ldr	r3, [pc, #112]	; (80053e0 <MX_TIM8_Init+0xa8>)
 8005370:	2200      	movs	r2, #0
 8005372:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005374:	4b1a      	ldr	r3, [pc, #104]	; (80053e0 <MX_TIM8_Init+0xa8>)
 8005376:	2200      	movs	r2, #0
 8005378:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800537a:	4b19      	ldr	r3, [pc, #100]	; (80053e0 <MX_TIM8_Init+0xa8>)
 800537c:	2280      	movs	r2, #128	; 0x80
 800537e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005380:	2303      	movs	r3, #3
 8005382:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005384:	2300      	movs	r3, #0
 8005386:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005388:	2301      	movs	r3, #1
 800538a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800538c:	2300      	movs	r3, #0
 800538e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 12;
 8005390:	230c      	movs	r3, #12
 8005392:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005394:	2300      	movs	r3, #0
 8005396:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005398:	2301      	movs	r3, #1
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800539c:	2300      	movs	r3, #0
 800539e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 12;
 80053a0:	230c      	movs	r3, #12
 80053a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80053a4:	f107 030c 	add.w	r3, r7, #12
 80053a8:	4619      	mov	r1, r3
 80053aa:	480d      	ldr	r0, [pc, #52]	; (80053e0 <MX_TIM8_Init+0xa8>)
 80053ac:	f004 f98e 	bl	80096cc <HAL_TIM_Encoder_Init>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80053b6:	f000 fa53 	bl	8005860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053ba:	2300      	movs	r3, #0
 80053bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053be:	2300      	movs	r3, #0
 80053c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80053c2:	1d3b      	adds	r3, r7, #4
 80053c4:	4619      	mov	r1, r3
 80053c6:	4806      	ldr	r0, [pc, #24]	; (80053e0 <MX_TIM8_Init+0xa8>)
 80053c8:	f005 fb42 	bl	800aa50 <HAL_TIMEx_MasterConfigSynchronization>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80053d2:	f000 fa45 	bl	8005860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80053d6:	bf00      	nop
 80053d8:	3730      	adds	r7, #48	; 0x30
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	200008a0 	.word	0x200008a0
 80053e4:	40010400 	.word	0x40010400

080053e8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80053ec:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <MX_TIM13_Init+0x40>)
 80053ee:	4a0f      	ldr	r2, [pc, #60]	; (800542c <MX_TIM13_Init+0x44>)
 80053f0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 45000-1;
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <MX_TIM13_Init+0x40>)
 80053f4:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80053f8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <MX_TIM13_Init+0x40>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8005400:	4b09      	ldr	r3, [pc, #36]	; (8005428 <MX_TIM13_Init+0x40>)
 8005402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005406:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005408:	4b07      	ldr	r3, [pc, #28]	; (8005428 <MX_TIM13_Init+0x40>)
 800540a:	2200      	movs	r2, #0
 800540c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800540e:	4b06      	ldr	r3, [pc, #24]	; (8005428 <MX_TIM13_Init+0x40>)
 8005410:	2280      	movs	r2, #128	; 0x80
 8005412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005414:	4804      	ldr	r0, [pc, #16]	; (8005428 <MX_TIM13_Init+0x40>)
 8005416:	f003 fd7b 	bl	8008f10 <HAL_TIM_Base_Init>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8005420:	f000 fa1e 	bl	8005860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005424:	bf00      	nop
 8005426:	bd80      	pop	{r7, pc}
 8005428:	200008e8 	.word	0x200008e8
 800542c:	40001c00 	.word	0x40001c00

08005430 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005434:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <MX_TIM14_Init+0x40>)
 8005436:	4a0f      	ldr	r2, [pc, #60]	; (8005474 <MX_TIM14_Init+0x44>)
 8005438:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800543a:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <MX_TIM14_Init+0x40>)
 800543c:	2200      	movs	r2, #0
 800543e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <MX_TIM14_Init+0x40>)
 8005442:	2200      	movs	r2, #0
 8005444:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 8005446:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <MX_TIM14_Init+0x40>)
 8005448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800544c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800544e:	4b08      	ldr	r3, [pc, #32]	; (8005470 <MX_TIM14_Init+0x40>)
 8005450:	2200      	movs	r2, #0
 8005452:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005454:	4b06      	ldr	r3, [pc, #24]	; (8005470 <MX_TIM14_Init+0x40>)
 8005456:	2280      	movs	r2, #128	; 0x80
 8005458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800545a:	4805      	ldr	r0, [pc, #20]	; (8005470 <MX_TIM14_Init+0x40>)
 800545c:	f003 fd58 	bl	8008f10 <HAL_TIM_Base_Init>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8005466:	f000 f9fb 	bl	8005860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800546a:	bf00      	nop
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000930 	.word	0x20000930
 8005474:	40002000 	.word	0x40002000

08005478 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800547c:	4b11      	ldr	r3, [pc, #68]	; (80054c4 <MX_UART5_Init+0x4c>)
 800547e:	4a12      	ldr	r2, [pc, #72]	; (80054c8 <MX_UART5_Init+0x50>)
 8005480:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 8005482:	4b10      	ldr	r3, [pc, #64]	; (80054c4 <MX_UART5_Init+0x4c>)
 8005484:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8005488:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800548a:	4b0e      	ldr	r3, [pc, #56]	; (80054c4 <MX_UART5_Init+0x4c>)
 800548c:	2200      	movs	r2, #0
 800548e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <MX_UART5_Init+0x4c>)
 8005492:	2200      	movs	r2, #0
 8005494:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005496:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <MX_UART5_Init+0x4c>)
 8005498:	2200      	movs	r2, #0
 800549a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800549c:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <MX_UART5_Init+0x4c>)
 800549e:	220c      	movs	r2, #12
 80054a0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054a2:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <MX_UART5_Init+0x4c>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80054a8:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <MX_UART5_Init+0x4c>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80054ae:	4805      	ldr	r0, [pc, #20]	; (80054c4 <MX_UART5_Init+0x4c>)
 80054b0:	f005 fbb0 	bl	800ac14 <HAL_UART_Init>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80054ba:	f000 f9d1 	bl	8005860 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80054be:	bf00      	nop
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	200009d8 	.word	0x200009d8
 80054c8:	40005000 	.word	0x40005000

080054cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80054d0:	4b11      	ldr	r3, [pc, #68]	; (8005518 <MX_USART1_UART_Init+0x4c>)
 80054d2:	4a12      	ldr	r2, [pc, #72]	; (800551c <MX_USART1_UART_Init+0x50>)
 80054d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80054d6:	4b10      	ldr	r3, [pc, #64]	; (8005518 <MX_USART1_UART_Init+0x4c>)
 80054d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80054dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80054de:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <MX_USART1_UART_Init+0x4c>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80054e4:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <MX_USART1_UART_Init+0x4c>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80054ea:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <MX_USART1_UART_Init+0x4c>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80054f0:	4b09      	ldr	r3, [pc, #36]	; (8005518 <MX_USART1_UART_Init+0x4c>)
 80054f2:	220c      	movs	r2, #12
 80054f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054f6:	4b08      	ldr	r3, [pc, #32]	; (8005518 <MX_USART1_UART_Init+0x4c>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054fc:	4b06      	ldr	r3, [pc, #24]	; (8005518 <MX_USART1_UART_Init+0x4c>)
 80054fe:	2200      	movs	r2, #0
 8005500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005502:	4805      	ldr	r0, [pc, #20]	; (8005518 <MX_USART1_UART_Init+0x4c>)
 8005504:	f005 fb86 	bl	800ac14 <HAL_UART_Init>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800550e:	f000 f9a7 	bl	8005860 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005512:	bf00      	nop
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20000a1c 	.word	0x20000a1c
 800551c:	40011000 	.word	0x40011000

08005520 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005524:	4b11      	ldr	r3, [pc, #68]	; (800556c <MX_USART2_UART_Init+0x4c>)
 8005526:	4a12      	ldr	r2, [pc, #72]	; (8005570 <MX_USART2_UART_Init+0x50>)
 8005528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800552a:	4b10      	ldr	r3, [pc, #64]	; (800556c <MX_USART2_UART_Init+0x4c>)
 800552c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005530:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005532:	4b0e      	ldr	r3, [pc, #56]	; (800556c <MX_USART2_UART_Init+0x4c>)
 8005534:	2200      	movs	r2, #0
 8005536:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005538:	4b0c      	ldr	r3, [pc, #48]	; (800556c <MX_USART2_UART_Init+0x4c>)
 800553a:	2200      	movs	r2, #0
 800553c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800553e:	4b0b      	ldr	r3, [pc, #44]	; (800556c <MX_USART2_UART_Init+0x4c>)
 8005540:	2200      	movs	r2, #0
 8005542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005544:	4b09      	ldr	r3, [pc, #36]	; (800556c <MX_USART2_UART_Init+0x4c>)
 8005546:	220c      	movs	r2, #12
 8005548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800554a:	4b08      	ldr	r3, [pc, #32]	; (800556c <MX_USART2_UART_Init+0x4c>)
 800554c:	2200      	movs	r2, #0
 800554e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <MX_USART2_UART_Init+0x4c>)
 8005552:	2200      	movs	r2, #0
 8005554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005556:	4805      	ldr	r0, [pc, #20]	; (800556c <MX_USART2_UART_Init+0x4c>)
 8005558:	f005 fb5c 	bl	800ac14 <HAL_UART_Init>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005562:	f000 f97d 	bl	8005860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005566:	bf00      	nop
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000a60 	.word	0x20000a60
 8005570:	40004400 	.word	0x40004400

08005574 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005578:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <MX_USART3_UART_Init+0x4c>)
 800557a:	4a12      	ldr	r2, [pc, #72]	; (80055c4 <MX_USART3_UART_Init+0x50>)
 800557c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800557e:	4b10      	ldr	r3, [pc, #64]	; (80055c0 <MX_USART3_UART_Init+0x4c>)
 8005580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005584:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005586:	4b0e      	ldr	r3, [pc, #56]	; (80055c0 <MX_USART3_UART_Init+0x4c>)
 8005588:	2200      	movs	r2, #0
 800558a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800558c:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <MX_USART3_UART_Init+0x4c>)
 800558e:	2200      	movs	r2, #0
 8005590:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005592:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <MX_USART3_UART_Init+0x4c>)
 8005594:	2200      	movs	r2, #0
 8005596:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005598:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <MX_USART3_UART_Init+0x4c>)
 800559a:	220c      	movs	r2, #12
 800559c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800559e:	4b08      	ldr	r3, [pc, #32]	; (80055c0 <MX_USART3_UART_Init+0x4c>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80055a4:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <MX_USART3_UART_Init+0x4c>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80055aa:	4805      	ldr	r0, [pc, #20]	; (80055c0 <MX_USART3_UART_Init+0x4c>)
 80055ac:	f005 fb32 	bl	800ac14 <HAL_UART_Init>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80055b6:	f000 f953 	bl	8005860 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80055ba:	bf00      	nop
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000aa4 	.word	0x20000aa4
 80055c4:	40004800 	.word	0x40004800

080055c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80055ce:	2300      	movs	r3, #0
 80055d0:	607b      	str	r3, [r7, #4]
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <MX_DMA_Init+0x3c>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	4a0b      	ldr	r2, [pc, #44]	; (8005604 <MX_DMA_Init+0x3c>)
 80055d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055dc:	6313      	str	r3, [r2, #48]	; 0x30
 80055de:	4b09      	ldr	r3, [pc, #36]	; (8005604 <MX_DMA_Init+0x3c>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055e6:	607b      	str	r3, [r7, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80055ea:	2200      	movs	r2, #0
 80055ec:	2100      	movs	r1, #0
 80055ee:	202f      	movs	r0, #47	; 0x2f
 80055f0:	f001 fe09 	bl	8007206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80055f4:	202f      	movs	r0, #47	; 0x2f
 80055f6:	f001 fe22 	bl	800723e <HAL_NVIC_EnableIRQ>

}
 80055fa:	bf00      	nop
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40023800 	.word	0x40023800

08005608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800560e:	f107 0314 	add.w	r3, r7, #20
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	605a      	str	r2, [r3, #4]
 8005618:	609a      	str	r2, [r3, #8]
 800561a:	60da      	str	r2, [r3, #12]
 800561c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	4b64      	ldr	r3, [pc, #400]	; (80057b4 <MX_GPIO_Init+0x1ac>)
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	4a63      	ldr	r2, [pc, #396]	; (80057b4 <MX_GPIO_Init+0x1ac>)
 8005628:	f043 0304 	orr.w	r3, r3, #4
 800562c:	6313      	str	r3, [r2, #48]	; 0x30
 800562e:	4b61      	ldr	r3, [pc, #388]	; (80057b4 <MX_GPIO_Init+0x1ac>)
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	4b5d      	ldr	r3, [pc, #372]	; (80057b4 <MX_GPIO_Init+0x1ac>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	4a5c      	ldr	r2, [pc, #368]	; (80057b4 <MX_GPIO_Init+0x1ac>)
 8005644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005648:	6313      	str	r3, [r2, #48]	; 0x30
 800564a:	4b5a      	ldr	r3, [pc, #360]	; (80057b4 <MX_GPIO_Init+0x1ac>)
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	4b56      	ldr	r3, [pc, #344]	; (80057b4 <MX_GPIO_Init+0x1ac>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	4a55      	ldr	r2, [pc, #340]	; (80057b4 <MX_GPIO_Init+0x1ac>)
 8005660:	f043 0301 	orr.w	r3, r3, #1
 8005664:	6313      	str	r3, [r2, #48]	; 0x30
 8005666:	4b53      	ldr	r3, [pc, #332]	; (80057b4 <MX_GPIO_Init+0x1ac>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	60bb      	str	r3, [r7, #8]
 8005670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005672:	2300      	movs	r3, #0
 8005674:	607b      	str	r3, [r7, #4]
 8005676:	4b4f      	ldr	r3, [pc, #316]	; (80057b4 <MX_GPIO_Init+0x1ac>)
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	4a4e      	ldr	r2, [pc, #312]	; (80057b4 <MX_GPIO_Init+0x1ac>)
 800567c:	f043 0302 	orr.w	r3, r3, #2
 8005680:	6313      	str	r3, [r2, #48]	; 0x30
 8005682:	4b4c      	ldr	r3, [pc, #304]	; (80057b4 <MX_GPIO_Init+0x1ac>)
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	607b      	str	r3, [r7, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	603b      	str	r3, [r7, #0]
 8005692:	4b48      	ldr	r3, [pc, #288]	; (80057b4 <MX_GPIO_Init+0x1ac>)
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	4a47      	ldr	r2, [pc, #284]	; (80057b4 <MX_GPIO_Init+0x1ac>)
 8005698:	f043 0308 	orr.w	r3, r3, #8
 800569c:	6313      	str	r3, [r2, #48]	; 0x30
 800569e:	4b45      	ldr	r3, [pc, #276]	; (80057b4 <MX_GPIO_Init+0x1ac>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 80056aa:	2200      	movs	r2, #0
 80056ac:	2102      	movs	r1, #2
 80056ae:	4842      	ldr	r0, [pc, #264]	; (80057b8 <MX_GPIO_Init+0x1b0>)
 80056b0:	f002 fdaa 	bl	8008208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 80056b4:	2200      	movs	r2, #0
 80056b6:	2122      	movs	r1, #34	; 0x22
 80056b8:	4840      	ldr	r0, [pc, #256]	; (80057bc <MX_GPIO_Init+0x1b4>)
 80056ba:	f002 fda5 	bl	8008208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 80056be:	2200      	movs	r2, #0
 80056c0:	f24e 0142 	movw	r1, #57410	; 0xe042
 80056c4:	483e      	ldr	r0, [pc, #248]	; (80057c0 <MX_GPIO_Init+0x1b8>)
 80056c6:	f002 fd9f 	bl	8008208 <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : On_Board_Button_Pin */
  GPIO_InitStruct.Pin = On_Board_Button_Pin;
 80056ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80056d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80056d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(On_Board_Button_GPIO_Port, &GPIO_InitStruct);
 80056da:	f107 0314 	add.w	r3, r7, #20
 80056de:	4619      	mov	r1, r3
 80056e0:	4835      	ldr	r0, [pc, #212]	; (80057b8 <MX_GPIO_Init+0x1b0>)
 80056e2:	f002 fbe5 	bl	8007eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 80056e6:	2302      	movs	r3, #2
 80056e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056ea:	2301      	movs	r3, #1
 80056ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056f2:	2300      	movs	r3, #0
 80056f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 80056f6:	f107 0314 	add.w	r3, r7, #20
 80056fa:	4619      	mov	r1, r3
 80056fc:	482e      	ldr	r0, [pc, #184]	; (80057b8 <MX_GPIO_Init+0x1b0>)
 80056fe:	f002 fbd7 	bl	8007eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 8005702:	2322      	movs	r3, #34	; 0x22
 8005704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005706:	2301      	movs	r3, #1
 8005708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800570e:	2300      	movs	r3, #0
 8005710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005712:	f107 0314 	add.w	r3, r7, #20
 8005716:	4619      	mov	r1, r3
 8005718:	4828      	ldr	r0, [pc, #160]	; (80057bc <MX_GPIO_Init+0x1b4>)
 800571a:	f002 fbc9 	bl	8007eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 800571e:	f24e 0342 	movw	r3, #57410	; 0xe042
 8005722:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005724:	2301      	movs	r3, #1
 8005726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005728:	2300      	movs	r3, #0
 800572a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800572c:	2300      	movs	r3, #0
 800572e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005730:	f107 0314 	add.w	r3, r7, #20
 8005734:	4619      	mov	r1, r3
 8005736:	4822      	ldr	r0, [pc, #136]	; (80057c0 <MX_GPIO_Init+0x1b8>)
 8005738:	f002 fbba 	bl	8007eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B2_Pin|Motor_Feedback_Pin;
 800573c:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
 8005740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005742:	2300      	movs	r3, #0
 8005744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005746:	2300      	movs	r3, #0
 8005748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800574a:	f107 0314 	add.w	r3, r7, #20
 800574e:	4619      	mov	r1, r3
 8005750:	481b      	ldr	r0, [pc, #108]	; (80057c0 <MX_GPIO_Init+0x1b8>)
 8005752:	f002 fbad 	bl	8007eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8005756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800575a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800575c:	2300      	movs	r3, #0
 800575e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005760:	2300      	movs	r3, #0
 8005762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8005764:	f107 0314 	add.w	r3, r7, #20
 8005768:	4619      	mov	r1, r3
 800576a:	4814      	ldr	r0, [pc, #80]	; (80057bc <MX_GPIO_Init+0x1b4>)
 800576c:	f002 fba0 	bl	8007eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005770:	2310      	movs	r3, #16
 8005772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005774:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800577e:	f107 0314 	add.w	r3, r7, #20
 8005782:	4619      	mov	r1, r3
 8005784:	480e      	ldr	r0, [pc, #56]	; (80057c0 <MX_GPIO_Init+0x1b8>)
 8005786:	f002 fb93 	bl	8007eb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800578a:	2200      	movs	r2, #0
 800578c:	2100      	movs	r1, #0
 800578e:	200a      	movs	r0, #10
 8005790:	f001 fd39 	bl	8007206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005794:	200a      	movs	r0, #10
 8005796:	f001 fd52 	bl	800723e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800579a:	2200      	movs	r2, #0
 800579c:	2100      	movs	r1, #0
 800579e:	2028      	movs	r0, #40	; 0x28
 80057a0:	f001 fd31 	bl	8007206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80057a4:	2028      	movs	r0, #40	; 0x28
 80057a6:	f001 fd4a 	bl	800723e <HAL_NVIC_EnableIRQ>

}
 80057aa:	bf00      	nop
 80057ac:	3728      	adds	r7, #40	; 0x28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40023800 	.word	0x40023800
 80057b8:	40020800 	.word	0x40020800
 80057bc:	40020000 	.word	0x40020000
 80057c0:	40020400 	.word	0x40020400

080057c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4603      	mov	r3, r0
 80057cc:	80fb      	strh	r3, [r7, #6]
	//ha meg lett nyomva a nucleon a kék gomb
	if(GPIO_Pin == On_Board_Button_Pin)B_NUCLEO_ISR(&huart1);
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d4:	d102      	bne.n	80057dc <HAL_GPIO_EXTI_Callback+0x18>
 80057d6:	4806      	ldr	r0, [pc, #24]	; (80057f0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80057d8:	f7fb fdaa 	bl	8001330 <B_NUCLEO_ISR>
	if(GPIO_Pin == B1_Pin) B1_ISR(&huart1);
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	2b10      	cmp	r3, #16
 80057e0:	d102      	bne.n	80057e8 <HAL_GPIO_EXTI_Callback+0x24>
 80057e2:	4803      	ldr	r0, [pc, #12]	; (80057f0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80057e4:	f7fb fd34 	bl	8001250 <B1_ISR>
}
 80057e8:	bf00      	nop
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000a1c 	.word	0x20000a1c

080057f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)Uart_Receive_From_PC_ISR(&huart1);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a09      	ldr	r2, [pc, #36]	; (8005824 <HAL_UART_RxCpltCallback+0x30>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d103      	bne.n	800580c <HAL_UART_RxCpltCallback+0x18>
 8005804:	4807      	ldr	r0, [pc, #28]	; (8005824 <HAL_UART_RxCpltCallback+0x30>)
 8005806:	f7fb fcfd 	bl	8001204 <Uart_Receive_From_PC_ISR>
	else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(&huart3, &huart1);
}
 800580a:	e007      	b.n	800581c <HAL_UART_RxCpltCallback+0x28>
	else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(&huart3, &huart1);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a06      	ldr	r2, [pc, #24]	; (8005828 <HAL_UART_RxCpltCallback+0x34>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d103      	bne.n	800581c <HAL_UART_RxCpltCallback+0x28>
 8005814:	4903      	ldr	r1, [pc, #12]	; (8005824 <HAL_UART_RxCpltCallback+0x30>)
 8005816:	4804      	ldr	r0, [pc, #16]	; (8005828 <HAL_UART_RxCpltCallback+0x34>)
 8005818:	f7fd fa2a 	bl	8002c70 <Uart_Receive_Thunderboard_ISR>
}
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	20000a1c 	.word	0x20000a1c
 8005828:	20000aa4 	.word	0x20000aa4

0800582c <Delay>:

void Delay(uint16_t ms)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	80fb      	strh	r3, [r7, #6]
	TIM13->CNT=0;
 8005836:	4b08      	ldr	r3, [pc, #32]	; (8005858 <Delay+0x2c>)
 8005838:	2200      	movs	r2, #0
 800583a:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		if(__HAL_TIM_GET_COUNTER(&htim13)>ms)break;
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <Delay+0x30>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	429a      	cmp	r2, r3
 8005846:	d800      	bhi.n	800584a <Delay+0x1e>
 8005848:	e7f8      	b.n	800583c <Delay+0x10>
 800584a:	bf00      	nop
	}

}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	40001c00 	.word	0x40001c00
 800585c:	200008e8 	.word	0x200008e8

08005860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005864:	b672      	cpsid	i
}
 8005866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005868:	e7fe      	b.n	8005868 <Error_Handler+0x8>
	...

0800586c <Remote_Control_Init>:
#include <stdlib.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	tEdge[0] = 1000;
 8005876:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <Remote_Control_Init+0x34>)
 8005878:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800587c:	601a      	str	r2, [r3, #0]
	tEdge[1] = 500;
 800587e:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <Remote_Control_Init+0x34>)
 8005880:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005884:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 8005886:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <Remote_Control_Init+0x34>)
 8005888:	2200      	movs	r2, #0
 800588a:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 800588c:	2303      	movs	r3, #3
 800588e:	4a04      	ldr	r2, [pc, #16]	; (80058a0 <Remote_Control_Init+0x34>)
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f003 fd70 	bl	8009378 <HAL_TIM_IC_Start_DMA>
}
 8005898:	bf00      	nop
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	20000aec 	.word	0x20000aec

080058a4 <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
	static int32_t dt1=85;
	static int32_t dt2=85;
	static uint32_t tLow=85;
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 80058b2:	4b50      	ldr	r3, [pc, #320]	; (80059f4 <Remote_Control_Task+0x150>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	f0c0 8096 	bcc.w	80059ea <Remote_Control_Task+0x146>
	remote_control_tick = tick + period;
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	4413      	add	r3, r2
 80058c4:	4a4b      	ldr	r2, [pc, #300]	; (80059f4 <Remote_Control_Task+0x150>)
 80058c6:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 80058c8:	201e      	movs	r0, #30
 80058ca:	f001 fcc6 	bl	800725a <HAL_NVIC_DisableIRQ>
	dt0=abs((int)tEdge[1]-tEdge[0]);
 80058ce:	4b4a      	ldr	r3, [pc, #296]	; (80059f8 <Remote_Control_Task+0x154>)
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	4b49      	ldr	r3, [pc, #292]	; (80059f8 <Remote_Control_Task+0x154>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	bfb8      	it	lt
 80058dc:	425b      	neglt	r3, r3
 80058de:	4a47      	ldr	r2, [pc, #284]	; (80059fc <Remote_Control_Task+0x158>)
 80058e0:	6013      	str	r3, [r2, #0]
	dt1=abs((int)tEdge[2]-tEdge[1]);
 80058e2:	4b45      	ldr	r3, [pc, #276]	; (80059f8 <Remote_Control_Task+0x154>)
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	4b44      	ldr	r3, [pc, #272]	; (80059f8 <Remote_Control_Task+0x154>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	bfb8      	it	lt
 80058f0:	425b      	neglt	r3, r3
 80058f2:	4a43      	ldr	r2, [pc, #268]	; (8005a00 <Remote_Control_Task+0x15c>)
 80058f4:	6013      	str	r3, [r2, #0]
	dt2=abs((int)tEdge[0]-tEdge[2]);
 80058f6:	4b40      	ldr	r3, [pc, #256]	; (80059f8 <Remote_Control_Task+0x154>)
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4b3f      	ldr	r3, [pc, #252]	; (80059f8 <Remote_Control_Task+0x154>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	bfb8      	it	lt
 8005904:	425b      	neglt	r3, r3
 8005906:	4a3f      	ldr	r2, [pc, #252]	; (8005a04 <Remote_Control_Task+0x160>)
 8005908:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 800590a:	201e      	movs	r0, #30
 800590c:	f001 fc97 	bl	800723e <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 8005910:	4b3a      	ldr	r3, [pc, #232]	; (80059fc <Remote_Control_Task+0x158>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f241 3288 	movw	r2, #5000	; 0x1388
 8005918:	4293      	cmp	r3, r2
 800591a:	dd06      	ble.n	800592a <Remote_Control_Task+0x86>
 800591c:	4b37      	ldr	r3, [pc, #220]	; (80059fc <Remote_Control_Task+0x158>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8005924:	33ff      	adds	r3, #255	; 0xff
 8005926:	4a35      	ldr	r2, [pc, #212]	; (80059fc <Remote_Control_Task+0x158>)
 8005928:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 800592a:	4b35      	ldr	r3, [pc, #212]	; (8005a00 <Remote_Control_Task+0x15c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005932:	4293      	cmp	r3, r2
 8005934:	dd06      	ble.n	8005944 <Remote_Control_Task+0xa0>
 8005936:	4b32      	ldr	r3, [pc, #200]	; (8005a00 <Remote_Control_Task+0x15c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800593e:	33ff      	adds	r3, #255	; 0xff
 8005940:	4a2f      	ldr	r2, [pc, #188]	; (8005a00 <Remote_Control_Task+0x15c>)
 8005942:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 8005944:	4b2f      	ldr	r3, [pc, #188]	; (8005a04 <Remote_Control_Task+0x160>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	4293      	cmp	r3, r2
 800594e:	dd06      	ble.n	800595e <Remote_Control_Task+0xba>
 8005950:	4b2c      	ldr	r3, [pc, #176]	; (8005a04 <Remote_Control_Task+0x160>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8005958:	33ff      	adds	r3, #255	; 0xff
 800595a:	4a2a      	ldr	r2, [pc, #168]	; (8005a04 <Remote_Control_Task+0x160>)
 800595c:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 800595e:	4b27      	ldr	r3, [pc, #156]	; (80059fc <Remote_Control_Task+0x158>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4b27      	ldr	r3, [pc, #156]	; (8005a00 <Remote_Control_Task+0x15c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	da0b      	bge.n	8005982 <Remote_Control_Task+0xde>
 800596a:	4b24      	ldr	r3, [pc, #144]	; (80059fc <Remote_Control_Task+0x158>)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4b25      	ldr	r3, [pc, #148]	; (8005a04 <Remote_Control_Task+0x160>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	da05      	bge.n	8005982 <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 8005976:	4b21      	ldr	r3, [pc, #132]	; (80059fc <Remote_Control_Task+0x158>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	4b22      	ldr	r3, [pc, #136]	; (8005a08 <Remote_Control_Task+0x164>)
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e016      	b.n	80059b0 <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 8005982:	4b1f      	ldr	r3, [pc, #124]	; (8005a00 <Remote_Control_Task+0x15c>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	4b1d      	ldr	r3, [pc, #116]	; (80059fc <Remote_Control_Task+0x158>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	da0b      	bge.n	80059a6 <Remote_Control_Task+0x102>
 800598e:	4b1c      	ldr	r3, [pc, #112]	; (8005a00 <Remote_Control_Task+0x15c>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4b1c      	ldr	r3, [pc, #112]	; (8005a04 <Remote_Control_Task+0x160>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	da05      	bge.n	80059a6 <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 800599a:	4b19      	ldr	r3, [pc, #100]	; (8005a00 <Remote_Control_Task+0x15c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	4b19      	ldr	r3, [pc, #100]	; (8005a08 <Remote_Control_Task+0x164>)
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	e004      	b.n	80059b0 <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 80059a6:	4b17      	ldr	r3, [pc, #92]	; (8005a04 <Remote_Control_Task+0x160>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	4b16      	ldr	r3, [pc, #88]	; (8005a08 <Remote_Control_Task+0x164>)
 80059ae:	601a      	str	r2, [r3, #0]
	sprintf(string,"%d\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 10);
	remote_control_tick = tick + 1000;
#endif

	if((tLow>70 && tLow<100) || tLow==1000)
 80059b0:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <Remote_Control_Task+0x164>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b46      	cmp	r3, #70	; 0x46
 80059b6:	d903      	bls.n	80059c0 <Remote_Control_Task+0x11c>
 80059b8:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <Remote_Control_Task+0x164>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b63      	cmp	r3, #99	; 0x63
 80059be:	d904      	bls.n	80059ca <Remote_Control_Task+0x126>
 80059c0:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <Remote_Control_Task+0x164>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059c8:	d103      	bne.n	80059d2 <Remote_Control_Task+0x12e>
	{
		//LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
		motorEnRemote=0;//állítsuk le a motort ha meghuzzuk a ravaszt
 80059ca:	4b10      	ldr	r3, [pc, #64]	; (8005a0c <Remote_Control_Task+0x168>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e00c      	b.n	80059ec <Remote_Control_Task+0x148>
	}
	else
	{
		//LED_R(0);
		if(tLow <= 70) motorEnRemote=1;
 80059d2:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <Remote_Control_Task+0x164>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b46      	cmp	r3, #70	; 0x46
 80059d8:	d803      	bhi.n	80059e2 <Remote_Control_Task+0x13e>
 80059da:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <Remote_Control_Task+0x168>)
 80059dc:	2201      	movs	r2, #1
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	e004      	b.n	80059ec <Remote_Control_Task+0x148>
		else motorEnRemote=2;
 80059e2:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <Remote_Control_Task+0x168>)
 80059e4:	2202      	movs	r2, #2
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	e000      	b.n	80059ec <Remote_Control_Task+0x148>
	if(remote_control_tick>tick) return;
 80059ea:	bf00      	nop
	}
}
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000af8 	.word	0x20000af8
 80059f8:	20000aec 	.word	0x20000aec
 80059fc:	20000080 	.word	0x20000080
 8005a00:	20000084 	.word	0x20000084
 8005a04:	20000088 	.word	0x20000088
 8005a08:	2000008c 	.word	0x2000008c
 8005a0c:	20000ae8 	.word	0x20000ae8

08005a10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a16:	2300      	movs	r3, #0
 8005a18:	607b      	str	r3, [r7, #4]
 8005a1a:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <HAL_MspInit+0x4c>)
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1e:	4a0f      	ldr	r2, [pc, #60]	; (8005a5c <HAL_MspInit+0x4c>)
 8005a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a24:	6453      	str	r3, [r2, #68]	; 0x44
 8005a26:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <HAL_MspInit+0x4c>)
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a2e:	607b      	str	r3, [r7, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a32:	2300      	movs	r3, #0
 8005a34:	603b      	str	r3, [r7, #0]
 8005a36:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <HAL_MspInit+0x4c>)
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	4a08      	ldr	r2, [pc, #32]	; (8005a5c <HAL_MspInit+0x4c>)
 8005a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a40:	6413      	str	r3, [r2, #64]	; 0x40
 8005a42:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <HAL_MspInit+0x4c>)
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005a4e:	2007      	movs	r0, #7
 8005a50:	f001 fbce 	bl	80071f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a54:	bf00      	nop
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40023800 	.word	0x40023800

08005a60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08c      	sub	sp, #48	; 0x30
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a68:	f107 031c 	add.w	r3, r7, #28
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	605a      	str	r2, [r3, #4]
 8005a72:	609a      	str	r2, [r3, #8]
 8005a74:	60da      	str	r2, [r3, #12]
 8005a76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a2e      	ldr	r2, [pc, #184]	; (8005b38 <HAL_ADC_MspInit+0xd8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d128      	bne.n	8005ad4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	4b2d      	ldr	r3, [pc, #180]	; (8005b3c <HAL_ADC_MspInit+0xdc>)
 8005a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8a:	4a2c      	ldr	r2, [pc, #176]	; (8005b3c <HAL_ADC_MspInit+0xdc>)
 8005a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a90:	6453      	str	r3, [r2, #68]	; 0x44
 8005a92:	4b2a      	ldr	r3, [pc, #168]	; (8005b3c <HAL_ADC_MspInit+0xdc>)
 8005a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	4b26      	ldr	r3, [pc, #152]	; (8005b3c <HAL_ADC_MspInit+0xdc>)
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa6:	4a25      	ldr	r2, [pc, #148]	; (8005b3c <HAL_ADC_MspInit+0xdc>)
 8005aa8:	f043 0302 	orr.w	r3, r3, #2
 8005aac:	6313      	str	r3, [r2, #48]	; 0x30
 8005aae:	4b23      	ldr	r3, [pc, #140]	; (8005b3c <HAL_ADC_MspInit+0xdc>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 8005aba:	2301      	movs	r3, #1
 8005abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 8005ac6:	f107 031c 	add.w	r3, r7, #28
 8005aca:	4619      	mov	r1, r3
 8005acc:	481c      	ldr	r0, [pc, #112]	; (8005b40 <HAL_ADC_MspInit+0xe0>)
 8005ace:	f002 f9ef 	bl	8007eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005ad2:	e02c      	b.n	8005b2e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1a      	ldr	r2, [pc, #104]	; (8005b44 <HAL_ADC_MspInit+0xe4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d127      	bne.n	8005b2e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005ade:	2300      	movs	r3, #0
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	4b16      	ldr	r3, [pc, #88]	; (8005b3c <HAL_ADC_MspInit+0xdc>)
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae6:	4a15      	ldr	r2, [pc, #84]	; (8005b3c <HAL_ADC_MspInit+0xdc>)
 8005ae8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005aec:	6453      	str	r3, [r2, #68]	; 0x44
 8005aee:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <HAL_ADC_MspInit+0xdc>)
 8005af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <HAL_ADC_MspInit+0xdc>)
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	4a0e      	ldr	r2, [pc, #56]	; (8005b3c <HAL_ADC_MspInit+0xdc>)
 8005b04:	f043 0304 	orr.w	r3, r3, #4
 8005b08:	6313      	str	r3, [r2, #48]	; 0x30
 8005b0a:	4b0c      	ldr	r3, [pc, #48]	; (8005b3c <HAL_ADC_MspInit+0xdc>)
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Bat_Pin;
 8005b16:	2308      	movs	r3, #8
 8005b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_Bat_GPIO_Port, &GPIO_InitStruct);
 8005b22:	f107 031c 	add.w	r3, r7, #28
 8005b26:	4619      	mov	r1, r3
 8005b28:	4807      	ldr	r0, [pc, #28]	; (8005b48 <HAL_ADC_MspInit+0xe8>)
 8005b2a:	f002 f9c1 	bl	8007eb0 <HAL_GPIO_Init>
}
 8005b2e:	bf00      	nop
 8005b30:	3730      	adds	r7, #48	; 0x30
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40012000 	.word	0x40012000
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	40020400 	.word	0x40020400
 8005b44:	40012100 	.word	0x40012100
 8005b48:	40020800 	.word	0x40020800

08005b4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b090      	sub	sp, #64	; 0x40
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	605a      	str	r2, [r3, #4]
 8005b5e:	609a      	str	r2, [r3, #8]
 8005b60:	60da      	str	r2, [r3, #12]
 8005b62:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a72      	ldr	r2, [pc, #456]	; (8005d34 <HAL_TIM_Base_MspInit+0x1e8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d10e      	bne.n	8005b8c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b6e:	2300      	movs	r3, #0
 8005b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b72:	4b71      	ldr	r3, [pc, #452]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b76:	4a70      	ldr	r2, [pc, #448]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005b78:	f043 0301 	orr.w	r3, r3, #1
 8005b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b7e:	4b6e      	ldr	r3, [pc, #440]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8005b8a:	e0cf      	b.n	8005d2c <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM2)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b94:	d116      	bne.n	8005bc4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b96:	2300      	movs	r3, #0
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9a:	4b67      	ldr	r3, [pc, #412]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	4a66      	ldr	r2, [pc, #408]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005ba0:	f043 0301 	orr.w	r3, r3, #1
 8005ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ba6:	4b64      	ldr	r3, [pc, #400]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	201c      	movs	r0, #28
 8005bb8:	f001 fb25 	bl	8007206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005bbc:	201c      	movs	r0, #28
 8005bbe:	f001 fb3e 	bl	800723e <HAL_NVIC_EnableIRQ>
}
 8005bc2:	e0b3      	b.n	8005d2c <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM3)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a5c      	ldr	r2, [pc, #368]	; (8005d3c <HAL_TIM_Base_MspInit+0x1f0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d10e      	bne.n	8005bec <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005bce:	2300      	movs	r3, #0
 8005bd0:	623b      	str	r3, [r7, #32]
 8005bd2:	4b59      	ldr	r3, [pc, #356]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	4a58      	ldr	r2, [pc, #352]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005bd8:	f043 0302 	orr.w	r3, r3, #2
 8005bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8005bde:	4b56      	ldr	r3, [pc, #344]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	623b      	str	r3, [r7, #32]
 8005be8:	6a3b      	ldr	r3, [r7, #32]
}
 8005bea:	e09f      	b.n	8005d2c <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM4)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a53      	ldr	r2, [pc, #332]	; (8005d40 <HAL_TIM_Base_MspInit+0x1f4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d15f      	bne.n	8005cb6 <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	4b4f      	ldr	r3, [pc, #316]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	4a4e      	ldr	r2, [pc, #312]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c00:	f043 0304 	orr.w	r3, r3, #4
 8005c04:	6413      	str	r3, [r2, #64]	; 0x40
 8005c06:	4b4c      	ldr	r3, [pc, #304]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c12:	2300      	movs	r3, #0
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	4b48      	ldr	r3, [pc, #288]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1a:	4a47      	ldr	r2, [pc, #284]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c1c:	f043 0302 	orr.w	r3, r3, #2
 8005c20:	6313      	str	r3, [r2, #48]	; 0x30
 8005c22:	4b45      	ldr	r3, [pc, #276]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 8005c2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c34:	2302      	movs	r3, #2
 8005c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005c40:	2302      	movs	r3, #2
 8005c42:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c48:	4619      	mov	r1, r3
 8005c4a:	483e      	ldr	r0, [pc, #248]	; (8005d44 <HAL_TIM_Base_MspInit+0x1f8>)
 8005c4c:	f002 f930 	bl	8007eb0 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8005c50:	4b3d      	ldr	r3, [pc, #244]	; (8005d48 <HAL_TIM_Base_MspInit+0x1fc>)
 8005c52:	4a3e      	ldr	r2, [pc, #248]	; (8005d4c <HAL_TIM_Base_MspInit+0x200>)
 8005c54:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8005c56:	4b3c      	ldr	r3, [pc, #240]	; (8005d48 <HAL_TIM_Base_MspInit+0x1fc>)
 8005c58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005c5c:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c5e:	4b3a      	ldr	r3, [pc, #232]	; (8005d48 <HAL_TIM_Base_MspInit+0x1fc>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c64:	4b38      	ldr	r3, [pc, #224]	; (8005d48 <HAL_TIM_Base_MspInit+0x1fc>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8005c6a:	4b37      	ldr	r3, [pc, #220]	; (8005d48 <HAL_TIM_Base_MspInit+0x1fc>)
 8005c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c70:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005c72:	4b35      	ldr	r3, [pc, #212]	; (8005d48 <HAL_TIM_Base_MspInit+0x1fc>)
 8005c74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c78:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005c7a:	4b33      	ldr	r3, [pc, #204]	; (8005d48 <HAL_TIM_Base_MspInit+0x1fc>)
 8005c7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c80:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8005c82:	4b31      	ldr	r3, [pc, #196]	; (8005d48 <HAL_TIM_Base_MspInit+0x1fc>)
 8005c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c88:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005c8a:	4b2f      	ldr	r3, [pc, #188]	; (8005d48 <HAL_TIM_Base_MspInit+0x1fc>)
 8005c8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005c90:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c92:	4b2d      	ldr	r3, [pc, #180]	; (8005d48 <HAL_TIM_Base_MspInit+0x1fc>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8005c98:	482b      	ldr	r0, [pc, #172]	; (8005d48 <HAL_TIM_Base_MspInit+0x1fc>)
 8005c9a:	f001 faf9 	bl	8007290 <HAL_DMA_Init>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <HAL_TIM_Base_MspInit+0x15c>
      Error_Handler();
 8005ca4:	f7ff fddc 	bl	8005860 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a27      	ldr	r2, [pc, #156]	; (8005d48 <HAL_TIM_Base_MspInit+0x1fc>)
 8005cac:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cae:	4a26      	ldr	r2, [pc, #152]	; (8005d48 <HAL_TIM_Base_MspInit+0x1fc>)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005cb4:	e03a      	b.n	8005d2c <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM5)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a25      	ldr	r2, [pc, #148]	; (8005d50 <HAL_TIM_Base_MspInit+0x204>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d10e      	bne.n	8005cde <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	4b1c      	ldr	r3, [pc, #112]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005cca:	f043 0308 	orr.w	r3, r3, #8
 8005cce:	6413      	str	r3, [r2, #64]	; 0x40
 8005cd0:	4b19      	ldr	r3, [pc, #100]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	697b      	ldr	r3, [r7, #20]
}
 8005cdc:	e026      	b.n	8005d2c <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM13)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a1c      	ldr	r2, [pc, #112]	; (8005d54 <HAL_TIM_Base_MspInit+0x208>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d10e      	bne.n	8005d06 <HAL_TIM_Base_MspInit+0x1ba>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005ce8:	2300      	movs	r3, #0
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	4a11      	ldr	r2, [pc, #68]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8005cf8:	4b0f      	ldr	r3, [pc, #60]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d00:	613b      	str	r3, [r7, #16]
 8005d02:	693b      	ldr	r3, [r7, #16]
}
 8005d04:	e012      	b.n	8005d2c <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM14)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a13      	ldr	r2, [pc, #76]	; (8005d58 <HAL_TIM_Base_MspInit+0x20c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d10d      	bne.n	8005d2c <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	4b08      	ldr	r3, [pc, #32]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d18:	4a07      	ldr	r2, [pc, #28]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <HAL_TIM_Base_MspInit+0x1ec>)
 8005d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
}
 8005d2c:	bf00      	nop
 8005d2e:	3740      	adds	r7, #64	; 0x40
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40010000 	.word	0x40010000
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	40000400 	.word	0x40000400
 8005d40:	40000800 	.word	0x40000800
 8005d44:	40020400 	.word	0x40020400
 8005d48:	20000978 	.word	0x20000978
 8005d4c:	400260b8 	.word	0x400260b8
 8005d50:	40000c00 	.word	0x40000c00
 8005d54:	40001c00 	.word	0x40001c00
 8005d58:	40002000 	.word	0x40002000

08005d5c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08a      	sub	sp, #40	; 0x28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d64:	f107 0314 	add.w	r3, r7, #20
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	605a      	str	r2, [r3, #4]
 8005d6e:	609a      	str	r2, [r3, #8]
 8005d70:	60da      	str	r2, [r3, #12]
 8005d72:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a19      	ldr	r2, [pc, #100]	; (8005de0 <HAL_TIM_Encoder_MspInit+0x84>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d12b      	bne.n	8005dd6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005d7e:	2300      	movs	r3, #0
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <HAL_TIM_Encoder_MspInit+0x88>)
 8005d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d86:	4a17      	ldr	r2, [pc, #92]	; (8005de4 <HAL_TIM_Encoder_MspInit+0x88>)
 8005d88:	f043 0302 	orr.w	r3, r3, #2
 8005d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d8e:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <HAL_TIM_Encoder_MspInit+0x88>)
 8005d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	4b11      	ldr	r3, [pc, #68]	; (8005de4 <HAL_TIM_Encoder_MspInit+0x88>)
 8005da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da2:	4a10      	ldr	r2, [pc, #64]	; (8005de4 <HAL_TIM_Encoder_MspInit+0x88>)
 8005da4:	f043 0304 	orr.w	r3, r3, #4
 8005da8:	6313      	str	r3, [r2, #48]	; 0x30
 8005daa:	4b0e      	ldr	r3, [pc, #56]	; (8005de4 <HAL_TIM_Encoder_MspInit+0x88>)
 8005dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005db6:	23c0      	movs	r3, #192	; 0xc0
 8005db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dba:	2302      	movs	r3, #2
 8005dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dca:	f107 0314 	add.w	r3, r7, #20
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4805      	ldr	r0, [pc, #20]	; (8005de8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8005dd2:	f002 f86d 	bl	8007eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005dd6:	bf00      	nop
 8005dd8:	3728      	adds	r7, #40	; 0x28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	40010400 	.word	0x40010400
 8005de4:	40023800 	.word	0x40023800
 8005de8:	40020800 	.word	0x40020800

08005dec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b08a      	sub	sp, #40	; 0x28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005df4:	f107 0314 	add.w	r3, r7, #20
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	605a      	str	r2, [r3, #4]
 8005dfe:	609a      	str	r2, [r3, #8]
 8005e00:	60da      	str	r2, [r3, #12]
 8005e02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a37      	ldr	r2, [pc, #220]	; (8005ee8 <HAL_TIM_MspPostInit+0xfc>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d11f      	bne.n	8005e4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e0e:	2300      	movs	r3, #0
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	4b36      	ldr	r3, [pc, #216]	; (8005eec <HAL_TIM_MspPostInit+0x100>)
 8005e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e16:	4a35      	ldr	r2, [pc, #212]	; (8005eec <HAL_TIM_MspPostInit+0x100>)
 8005e18:	f043 0301 	orr.w	r3, r3, #1
 8005e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e1e:	4b33      	ldr	r3, [pc, #204]	; (8005eec <HAL_TIM_MspPostInit+0x100>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	613b      	str	r3, [r7, #16]
 8005e28:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 8005e2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e30:	2302      	movs	r3, #2
 8005e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e34:	2300      	movs	r3, #0
 8005e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 8005e40:	f107 0314 	add.w	r3, r7, #20
 8005e44:	4619      	mov	r1, r3
 8005e46:	482a      	ldr	r0, [pc, #168]	; (8005ef0 <HAL_TIM_MspPostInit+0x104>)
 8005e48:	f002 f832 	bl	8007eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005e4c:	e047      	b.n	8005ede <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e56:	d11f      	bne.n	8005e98 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	4b23      	ldr	r3, [pc, #140]	; (8005eec <HAL_TIM_MspPostInit+0x100>)
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	4a22      	ldr	r2, [pc, #136]	; (8005eec <HAL_TIM_MspPostInit+0x100>)
 8005e62:	f043 0301 	orr.w	r3, r3, #1
 8005e66:	6313      	str	r3, [r2, #48]	; 0x30
 8005e68:	4b20      	ldr	r3, [pc, #128]	; (8005eec <HAL_TIM_MspPostInit+0x100>)
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 8005e74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e82:	2300      	movs	r3, #0
 8005e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005e86:	2301      	movs	r3, #1
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 8005e8a:	f107 0314 	add.w	r3, r7, #20
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4817      	ldr	r0, [pc, #92]	; (8005ef0 <HAL_TIM_MspPostInit+0x104>)
 8005e92:	f002 f80d 	bl	8007eb0 <HAL_GPIO_Init>
}
 8005e96:	e022      	b.n	8005ede <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a15      	ldr	r2, [pc, #84]	; (8005ef4 <HAL_TIM_MspPostInit+0x108>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d11d      	bne.n	8005ede <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60bb      	str	r3, [r7, #8]
 8005ea6:	4b11      	ldr	r3, [pc, #68]	; (8005eec <HAL_TIM_MspPostInit+0x100>)
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eaa:	4a10      	ldr	r2, [pc, #64]	; (8005eec <HAL_TIM_MspPostInit+0x100>)
 8005eac:	f043 0301 	orr.w	r3, r3, #1
 8005eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8005eb2:	4b0e      	ldr	r3, [pc, #56]	; (8005eec <HAL_TIM_MspPostInit+0x100>)
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	60bb      	str	r3, [r7, #8]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 8005ebe:	23c0      	movs	r3, #192	; 0xc0
 8005ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005ece:	2302      	movs	r3, #2
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ed2:	f107 0314 	add.w	r3, r7, #20
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4805      	ldr	r0, [pc, #20]	; (8005ef0 <HAL_TIM_MspPostInit+0x104>)
 8005eda:	f001 ffe9 	bl	8007eb0 <HAL_GPIO_Init>
}
 8005ede:	bf00      	nop
 8005ee0:	3728      	adds	r7, #40	; 0x28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40010000 	.word	0x40010000
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	40020000 	.word	0x40020000
 8005ef4:	40000400 	.word	0x40000400

08005ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b090      	sub	sp, #64	; 0x40
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	605a      	str	r2, [r3, #4]
 8005f0a:	609a      	str	r2, [r3, #8]
 8005f0c:	60da      	str	r2, [r3, #12]
 8005f0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a7c      	ldr	r2, [pc, #496]	; (8006108 <HAL_UART_MspInit+0x210>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d14b      	bne.n	8005fb2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f1e:	4b7b      	ldr	r3, [pc, #492]	; (800610c <HAL_UART_MspInit+0x214>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	4a7a      	ldr	r2, [pc, #488]	; (800610c <HAL_UART_MspInit+0x214>)
 8005f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f28:	6413      	str	r3, [r2, #64]	; 0x40
 8005f2a:	4b78      	ldr	r3, [pc, #480]	; (800610c <HAL_UART_MspInit+0x214>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f36:	2300      	movs	r3, #0
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
 8005f3a:	4b74      	ldr	r3, [pc, #464]	; (800610c <HAL_UART_MspInit+0x214>)
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	4a73      	ldr	r2, [pc, #460]	; (800610c <HAL_UART_MspInit+0x214>)
 8005f40:	f043 0304 	orr.w	r3, r3, #4
 8005f44:	6313      	str	r3, [r2, #48]	; 0x30
 8005f46:	4b71      	ldr	r3, [pc, #452]	; (800610c <HAL_UART_MspInit+0x214>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f52:	2300      	movs	r3, #0
 8005f54:	623b      	str	r3, [r7, #32]
 8005f56:	4b6d      	ldr	r3, [pc, #436]	; (800610c <HAL_UART_MspInit+0x214>)
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	4a6c      	ldr	r2, [pc, #432]	; (800610c <HAL_UART_MspInit+0x214>)
 8005f5c:	f043 0308 	orr.w	r3, r3, #8
 8005f60:	6313      	str	r3, [r2, #48]	; 0x30
 8005f62:	4b6a      	ldr	r3, [pc, #424]	; (800610c <HAL_UART_MspInit+0x214>)
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	623b      	str	r3, [r7, #32]
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 8005f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f74:	2302      	movs	r3, #2
 8005f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005f80:	2308      	movs	r3, #8
 8005f82:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 8005f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4861      	ldr	r0, [pc, #388]	; (8006110 <HAL_UART_MspInit+0x218>)
 8005f8c:	f001 ff90 	bl	8007eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 8005f90:	2304      	movs	r3, #4
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f94:	2302      	movs	r3, #2
 8005f96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005fa0:	2308      	movs	r3, #8
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 8005fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fa8:	4619      	mov	r1, r3
 8005faa:	485a      	ldr	r0, [pc, #360]	; (8006114 <HAL_UART_MspInit+0x21c>)
 8005fac:	f001 ff80 	bl	8007eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005fb0:	e0a6      	b.n	8006100 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a58      	ldr	r2, [pc, #352]	; (8006118 <HAL_UART_MspInit+0x220>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d135      	bne.n	8006028 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61fb      	str	r3, [r7, #28]
 8005fc0:	4b52      	ldr	r3, [pc, #328]	; (800610c <HAL_UART_MspInit+0x214>)
 8005fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc4:	4a51      	ldr	r2, [pc, #324]	; (800610c <HAL_UART_MspInit+0x214>)
 8005fc6:	f043 0310 	orr.w	r3, r3, #16
 8005fca:	6453      	str	r3, [r2, #68]	; 0x44
 8005fcc:	4b4f      	ldr	r3, [pc, #316]	; (800610c <HAL_UART_MspInit+0x214>)
 8005fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	61fb      	str	r3, [r7, #28]
 8005fd6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fd8:	2300      	movs	r3, #0
 8005fda:	61bb      	str	r3, [r7, #24]
 8005fdc:	4b4b      	ldr	r3, [pc, #300]	; (800610c <HAL_UART_MspInit+0x214>)
 8005fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe0:	4a4a      	ldr	r2, [pc, #296]	; (800610c <HAL_UART_MspInit+0x214>)
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8005fe8:	4b48      	ldr	r3, [pc, #288]	; (800610c <HAL_UART_MspInit+0x214>)
 8005fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	61bb      	str	r3, [r7, #24]
 8005ff2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 8005ff4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006002:	2303      	movs	r3, #3
 8006004:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006006:	2307      	movs	r3, #7
 8006008:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800600a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800600e:	4619      	mov	r1, r3
 8006010:	4842      	ldr	r0, [pc, #264]	; (800611c <HAL_UART_MspInit+0x224>)
 8006012:	f001 ff4d 	bl	8007eb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006016:	2200      	movs	r2, #0
 8006018:	2100      	movs	r1, #0
 800601a:	2025      	movs	r0, #37	; 0x25
 800601c:	f001 f8f3 	bl	8007206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006020:	2025      	movs	r0, #37	; 0x25
 8006022:	f001 f90c 	bl	800723e <HAL_NVIC_EnableIRQ>
}
 8006026:	e06b      	b.n	8006100 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a3c      	ldr	r2, [pc, #240]	; (8006120 <HAL_UART_MspInit+0x228>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d12c      	bne.n	800608c <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006032:	2300      	movs	r3, #0
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	4b35      	ldr	r3, [pc, #212]	; (800610c <HAL_UART_MspInit+0x214>)
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	4a34      	ldr	r2, [pc, #208]	; (800610c <HAL_UART_MspInit+0x214>)
 800603c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006040:	6413      	str	r3, [r2, #64]	; 0x40
 8006042:	4b32      	ldr	r3, [pc, #200]	; (800610c <HAL_UART_MspInit+0x214>)
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800604e:	2300      	movs	r3, #0
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	4b2e      	ldr	r3, [pc, #184]	; (800610c <HAL_UART_MspInit+0x214>)
 8006054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006056:	4a2d      	ldr	r2, [pc, #180]	; (800610c <HAL_UART_MspInit+0x214>)
 8006058:	f043 0301 	orr.w	r3, r3, #1
 800605c:	6313      	str	r3, [r2, #48]	; 0x30
 800605e:	4b2b      	ldr	r3, [pc, #172]	; (800610c <HAL_UART_MspInit+0x214>)
 8006060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	613b      	str	r3, [r7, #16]
 8006068:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800606a:	230c      	movs	r3, #12
 800606c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800606e:	2302      	movs	r3, #2
 8006070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006072:	2300      	movs	r3, #0
 8006074:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006076:	2303      	movs	r3, #3
 8006078:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800607a:	2307      	movs	r3, #7
 800607c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800607e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006082:	4619      	mov	r1, r3
 8006084:	4825      	ldr	r0, [pc, #148]	; (800611c <HAL_UART_MspInit+0x224>)
 8006086:	f001 ff13 	bl	8007eb0 <HAL_GPIO_Init>
}
 800608a:	e039      	b.n	8006100 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a24      	ldr	r2, [pc, #144]	; (8006124 <HAL_UART_MspInit+0x22c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d134      	bne.n	8006100 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	4b1c      	ldr	r3, [pc, #112]	; (800610c <HAL_UART_MspInit+0x214>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	4a1b      	ldr	r2, [pc, #108]	; (800610c <HAL_UART_MspInit+0x214>)
 80060a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060a4:	6413      	str	r3, [r2, #64]	; 0x40
 80060a6:	4b19      	ldr	r3, [pc, #100]	; (800610c <HAL_UART_MspInit+0x214>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060b2:	2300      	movs	r3, #0
 80060b4:	60bb      	str	r3, [r7, #8]
 80060b6:	4b15      	ldr	r3, [pc, #84]	; (800610c <HAL_UART_MspInit+0x214>)
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	4a14      	ldr	r2, [pc, #80]	; (800610c <HAL_UART_MspInit+0x214>)
 80060bc:	f043 0304 	orr.w	r3, r3, #4
 80060c0:	6313      	str	r3, [r2, #48]	; 0x30
 80060c2:	4b12      	ldr	r3, [pc, #72]	; (800610c <HAL_UART_MspInit+0x214>)
 80060c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	60bb      	str	r3, [r7, #8]
 80060cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 80060ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d4:	2302      	movs	r3, #2
 80060d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060dc:	2303      	movs	r3, #3
 80060de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80060e0:	2307      	movs	r3, #7
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060e8:	4619      	mov	r1, r3
 80060ea:	4809      	ldr	r0, [pc, #36]	; (8006110 <HAL_UART_MspInit+0x218>)
 80060ec:	f001 fee0 	bl	8007eb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80060f0:	2200      	movs	r2, #0
 80060f2:	2100      	movs	r1, #0
 80060f4:	2027      	movs	r0, #39	; 0x27
 80060f6:	f001 f886 	bl	8007206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80060fa:	2027      	movs	r0, #39	; 0x27
 80060fc:	f001 f89f 	bl	800723e <HAL_NVIC_EnableIRQ>
}
 8006100:	bf00      	nop
 8006102:	3740      	adds	r7, #64	; 0x40
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	40005000 	.word	0x40005000
 800610c:	40023800 	.word	0x40023800
 8006110:	40020800 	.word	0x40020800
 8006114:	40020c00 	.word	0x40020c00
 8006118:	40011000 	.word	0x40011000
 800611c:	40020000 	.word	0x40020000
 8006120:	40004400 	.word	0x40004400
 8006124:	40004800 	.word	0x40004800

08006128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800612c:	e7fe      	b.n	800612c <NMI_Handler+0x4>

0800612e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800612e:	b480      	push	{r7}
 8006130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006132:	e7fe      	b.n	8006132 <HardFault_Handler+0x4>

08006134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006138:	e7fe      	b.n	8006138 <MemManage_Handler+0x4>

0800613a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800613a:	b480      	push	{r7}
 800613c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800613e:	e7fe      	b.n	800613e <BusFault_Handler+0x4>

08006140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006144:	e7fe      	b.n	8006144 <UsageFault_Handler+0x4>

08006146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006146:	b480      	push	{r7}
 8006148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800614a:	bf00      	nop
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006158:	bf00      	nop
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006162:	b480      	push	{r7}
 8006164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006166:	bf00      	nop
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006174:	f000 f98e 	bl	8006494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006178:	bf00      	nop
 800617a:	bd80      	pop	{r7, pc}

0800617c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8006180:	2010      	movs	r0, #16
 8006182:	f002 f875 	bl	8008270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006186:	bf00      	nop
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006190:	4802      	ldr	r0, [pc, #8]	; (800619c <TIM2_IRQHandler+0x10>)
 8006192:	f003 fbcf 	bl	8009934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006196:	bf00      	nop
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	20000780 	.word	0x20000780

080061a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80061a4:	4802      	ldr	r0, [pc, #8]	; (80061b0 <USART1_IRQHandler+0x10>)
 80061a6:	f004 fee7 	bl	800af78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80061aa:	bf00      	nop
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000a1c 	.word	0x20000a1c

080061b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80061b8:	4802      	ldr	r0, [pc, #8]	; (80061c4 <USART3_IRQHandler+0x10>)
 80061ba:	f004 fedd 	bl	800af78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80061be:	bf00      	nop
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20000aa4 	.word	0x20000aa4

080061c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(On_Board_Button_Pin);
 80061cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80061d0:	f002 f84e 	bl	8008270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80061d4:	bf00      	nop
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80061dc:	4802      	ldr	r0, [pc, #8]	; (80061e8 <DMA1_Stream7_IRQHandler+0x10>)
 80061de:	f001 f9ef 	bl	80075c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80061e2:	bf00      	nop
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000978 	.word	0x20000978

080061ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
	return 1;
 80061f0:	2301      	movs	r3, #1
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <_kill>:

int _kill(int pid, int sig)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006206:	f005 fe1f 	bl	800be48 <__errno>
 800620a:	4603      	mov	r3, r0
 800620c:	2216      	movs	r2, #22
 800620e:	601a      	str	r2, [r3, #0]
	return -1;
 8006210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <_exit>:

void _exit (int status)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006224:	f04f 31ff 	mov.w	r1, #4294967295
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff ffe7 	bl	80061fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800622e:	e7fe      	b.n	800622e <_exit+0x12>

08006230 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	e00a      	b.n	8006258 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006242:	f3af 8000 	nop.w
 8006246:	4601      	mov	r1, r0
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	60ba      	str	r2, [r7, #8]
 800624e:	b2ca      	uxtb	r2, r1
 8006250:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	3301      	adds	r3, #1
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	429a      	cmp	r2, r3
 800625e:	dbf0      	blt.n	8006242 <_read+0x12>
	}

return len;
 8006260:	687b      	ldr	r3, [r7, #4]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b086      	sub	sp, #24
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006276:	2300      	movs	r3, #0
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	e009      	b.n	8006290 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	60ba      	str	r2, [r7, #8]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	4618      	mov	r0, r3
 8006286:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	3301      	adds	r3, #1
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	429a      	cmp	r2, r3
 8006296:	dbf1      	blt.n	800627c <_write+0x12>
	}
	return len;
 8006298:	687b      	ldr	r3, [r7, #4]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <_close>:

int _close(int file)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
	return -1;
 80062aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80062ca:	605a      	str	r2, [r3, #4]
	return 0;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <_isatty>:

int _isatty(int file)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
	return 1;
 80062e2:	2301      	movs	r3, #1
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
	return 0;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
	...

0800630c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006314:	4a14      	ldr	r2, [pc, #80]	; (8006368 <_sbrk+0x5c>)
 8006316:	4b15      	ldr	r3, [pc, #84]	; (800636c <_sbrk+0x60>)
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006320:	4b13      	ldr	r3, [pc, #76]	; (8006370 <_sbrk+0x64>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d102      	bne.n	800632e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006328:	4b11      	ldr	r3, [pc, #68]	; (8006370 <_sbrk+0x64>)
 800632a:	4a12      	ldr	r2, [pc, #72]	; (8006374 <_sbrk+0x68>)
 800632c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800632e:	4b10      	ldr	r3, [pc, #64]	; (8006370 <_sbrk+0x64>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4413      	add	r3, r2
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	429a      	cmp	r2, r3
 800633a:	d207      	bcs.n	800634c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800633c:	f005 fd84 	bl	800be48 <__errno>
 8006340:	4603      	mov	r3, r0
 8006342:	220c      	movs	r2, #12
 8006344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006346:	f04f 33ff 	mov.w	r3, #4294967295
 800634a:	e009      	b.n	8006360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800634c:	4b08      	ldr	r3, [pc, #32]	; (8006370 <_sbrk+0x64>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006352:	4b07      	ldr	r3, [pc, #28]	; (8006370 <_sbrk+0x64>)
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4413      	add	r3, r2
 800635a:	4a05      	ldr	r2, [pc, #20]	; (8006370 <_sbrk+0x64>)
 800635c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800635e:	68fb      	ldr	r3, [r7, #12]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	20020000 	.word	0x20020000
 800636c:	00000400 	.word	0x00000400
 8006370:	20000afc 	.word	0x20000afc
 8006374:	20000b38 	.word	0x20000b38

08006378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800637c:	4b06      	ldr	r3, [pc, #24]	; (8006398 <SystemInit+0x20>)
 800637e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006382:	4a05      	ldr	r2, [pc, #20]	; (8006398 <SystemInit+0x20>)
 8006384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800638c:	bf00      	nop
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	e000ed00 	.word	0xe000ed00

0800639c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 800639c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80063d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80063a0:	480d      	ldr	r0, [pc, #52]	; (80063d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80063a2:	490e      	ldr	r1, [pc, #56]	; (80063dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80063a4:	4a0e      	ldr	r2, [pc, #56]	; (80063e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80063a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80063a8:	e002      	b.n	80063b0 <LoopCopyDataInit>

080063aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80063aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80063ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80063ae:	3304      	adds	r3, #4

080063b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80063b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80063b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80063b4:	d3f9      	bcc.n	80063aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80063b6:	4a0b      	ldr	r2, [pc, #44]	; (80063e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80063b8:	4c0b      	ldr	r4, [pc, #44]	; (80063e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80063ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80063bc:	e001      	b.n	80063c2 <LoopFillZerobss>

080063be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80063be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80063c0:	3204      	adds	r2, #4

080063c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80063c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80063c4:	d3fb      	bcc.n	80063be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80063c6:	f7ff ffd7 	bl	8006378 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80063ca:	f005 fd43 	bl	800be54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80063ce:	f7fe fb65 	bl	8004a9c <main>
  bx  lr    
 80063d2:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 80063d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80063d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80063dc:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 80063e0:	08010888 	.word	0x08010888
  ldr r2, =_sbss
 80063e4:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 80063e8:	20000b34 	.word	0x20000b34

080063ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80063ec:	e7fe      	b.n	80063ec <ADC_IRQHandler>
	...

080063f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80063f4:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <HAL_Init+0x40>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a0d      	ldr	r2, [pc, #52]	; (8006430 <HAL_Init+0x40>)
 80063fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006400:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <HAL_Init+0x40>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a0a      	ldr	r2, [pc, #40]	; (8006430 <HAL_Init+0x40>)
 8006406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800640a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800640c:	4b08      	ldr	r3, [pc, #32]	; (8006430 <HAL_Init+0x40>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a07      	ldr	r2, [pc, #28]	; (8006430 <HAL_Init+0x40>)
 8006412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006418:	2003      	movs	r0, #3
 800641a:	f000 fee9 	bl	80071f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800641e:	2000      	movs	r0, #0
 8006420:	f000 f808 	bl	8006434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006424:	f7ff faf4 	bl	8005a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	40023c00 	.word	0x40023c00

08006434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800643c:	4b12      	ldr	r3, [pc, #72]	; (8006488 <HAL_InitTick+0x54>)
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	4b12      	ldr	r3, [pc, #72]	; (800648c <HAL_InitTick+0x58>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	4619      	mov	r1, r3
 8006446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800644a:	fbb3 f3f1 	udiv	r3, r3, r1
 800644e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006452:	4618      	mov	r0, r3
 8006454:	f000 ff0f 	bl	8007276 <HAL_SYSTICK_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e00e      	b.n	8006480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b0f      	cmp	r3, #15
 8006466:	d80a      	bhi.n	800647e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006468:	2200      	movs	r2, #0
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	f000 fec9 	bl	8007206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006474:	4a06      	ldr	r2, [pc, #24]	; (8006490 <HAL_InitTick+0x5c>)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	e000      	b.n	8006480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000090 	.word	0x20000090
 800648c:	20000098 	.word	0x20000098
 8006490:	20000094 	.word	0x20000094

08006494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006498:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <HAL_IncTick+0x20>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <HAL_IncTick+0x24>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4413      	add	r3, r2
 80064a4:	4a04      	ldr	r2, [pc, #16]	; (80064b8 <HAL_IncTick+0x24>)
 80064a6:	6013      	str	r3, [r2, #0]
}
 80064a8:	bf00      	nop
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	20000098 	.word	0x20000098
 80064b8:	20000b00 	.word	0x20000b00

080064bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
  return uwTick;
 80064c0:	4b03      	ldr	r3, [pc, #12]	; (80064d0 <HAL_GetTick+0x14>)
 80064c2:	681b      	ldr	r3, [r3, #0]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	20000b00 	.word	0x20000b00

080064d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80064dc:	f7ff ffee 	bl	80064bc <HAL_GetTick>
 80064e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d005      	beq.n	80064fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80064ee:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <HAL_Delay+0x44>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80064fa:	bf00      	nop
 80064fc:	f7ff ffde 	bl	80064bc <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	429a      	cmp	r2, r3
 800650a:	d8f7      	bhi.n	80064fc <HAL_Delay+0x28>
  {
  }
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000098 	.word	0x20000098

0800651c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e033      	b.n	800659a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	2b00      	cmp	r3, #0
 8006538:	d109      	bne.n	800654e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff fa90 	bl	8005a60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	f003 0310 	and.w	r3, r3, #16
 8006556:	2b00      	cmp	r3, #0
 8006558:	d118      	bne.n	800658c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006562:	f023 0302 	bic.w	r3, r3, #2
 8006566:	f043 0202 	orr.w	r2, r3, #2
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fab4 	bl	8006adc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	f023 0303 	bic.w	r3, r3, #3
 8006582:	f043 0201 	orr.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	641a      	str	r2, [r3, #64]	; 0x40
 800658a:	e001      	b.n	8006590 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006598:	7bfb      	ldrb	r3, [r7, #15]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <HAL_ADC_Start+0x1a>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e0b2      	b.n	8006724 <HAL_ADC_Start+0x180>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d018      	beq.n	8006606 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0201 	orr.w	r2, r2, #1
 80065e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80065e4:	4b52      	ldr	r3, [pc, #328]	; (8006730 <HAL_ADC_Start+0x18c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a52      	ldr	r2, [pc, #328]	; (8006734 <HAL_ADC_Start+0x190>)
 80065ea:	fba2 2303 	umull	r2, r3, r2, r3
 80065ee:	0c9a      	lsrs	r2, r3, #18
 80065f0:	4613      	mov	r3, r2
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	4413      	add	r3, r2
 80065f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80065f8:	e002      	b.n	8006600 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1f9      	bne.n	80065fa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b01      	cmp	r3, #1
 8006612:	d17a      	bne.n	800670a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800663e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800664e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006652:	d106      	bne.n	8006662 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006658:	f023 0206 	bic.w	r2, r3, #6
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	645a      	str	r2, [r3, #68]	; 0x44
 8006660:	e002      	b.n	8006668 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006670:	4b31      	ldr	r3, [pc, #196]	; (8006738 <HAL_ADC_Start+0x194>)
 8006672:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800667c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f003 031f 	and.w	r3, r3, #31
 8006686:	2b00      	cmp	r3, #0
 8006688:	d12a      	bne.n	80066e0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a2b      	ldr	r2, [pc, #172]	; (800673c <HAL_ADC_Start+0x198>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d015      	beq.n	80066c0 <HAL_ADC_Start+0x11c>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a29      	ldr	r2, [pc, #164]	; (8006740 <HAL_ADC_Start+0x19c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d105      	bne.n	80066aa <HAL_ADC_Start+0x106>
 800669e:	4b26      	ldr	r3, [pc, #152]	; (8006738 <HAL_ADC_Start+0x194>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a25      	ldr	r2, [pc, #148]	; (8006744 <HAL_ADC_Start+0x1a0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d136      	bne.n	8006722 <HAL_ADC_Start+0x17e>
 80066b4:	4b20      	ldr	r3, [pc, #128]	; (8006738 <HAL_ADC_Start+0x194>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f003 0310 	and.w	r3, r3, #16
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d130      	bne.n	8006722 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d129      	bne.n	8006722 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80066dc:	609a      	str	r2, [r3, #8]
 80066de:	e020      	b.n	8006722 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a15      	ldr	r2, [pc, #84]	; (800673c <HAL_ADC_Start+0x198>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d11b      	bne.n	8006722 <HAL_ADC_Start+0x17e>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d114      	bne.n	8006722 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689a      	ldr	r2, [r3, #8]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006706:	609a      	str	r2, [r3, #8]
 8006708:	e00b      	b.n	8006722 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	f043 0210 	orr.w	r2, r3, #16
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671a:	f043 0201 	orr.w	r2, r3, #1
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	20000090 	.word	0x20000090
 8006734:	431bde83 	.word	0x431bde83
 8006738:	40012300 	.word	0x40012300
 800673c:	40012000 	.word	0x40012000
 8006740:	40012100 	.word	0x40012100
 8006744:	40012200 	.word	0x40012200

08006748 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006764:	d113      	bne.n	800678e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006774:	d10b      	bne.n	800678e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f043 0220 	orr.w	r2, r3, #32
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e063      	b.n	8006856 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800678e:	f7ff fe95 	bl	80064bc <HAL_GetTick>
 8006792:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006794:	e021      	b.n	80067da <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679c:	d01d      	beq.n	80067da <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d007      	beq.n	80067b4 <HAL_ADC_PollForConversion+0x6c>
 80067a4:	f7ff fe8a 	bl	80064bc <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d212      	bcs.n	80067da <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d00b      	beq.n	80067da <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	f043 0204 	orr.w	r2, r3, #4
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e03d      	b.n	8006856 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d1d6      	bne.n	8006796 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f06f 0212 	mvn.w	r2, #18
 80067f0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d123      	bne.n	8006854 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006810:	2b00      	cmp	r3, #0
 8006812:	d11f      	bne.n	8006854 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800681e:	2b00      	cmp	r3, #0
 8006820:	d006      	beq.n	8006830 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800682c:	2b00      	cmp	r3, #0
 800682e:	d111      	bne.n	8006854 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006834:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d105      	bne.n	8006854 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684c:	f043 0201 	orr.w	r2, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_ADC_ConfigChannel+0x1c>
 8006890:	2302      	movs	r3, #2
 8006892:	e113      	b.n	8006abc <HAL_ADC_ConfigChannel+0x244>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b09      	cmp	r3, #9
 80068a2:	d925      	bls.n	80068f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68d9      	ldr	r1, [r3, #12]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	4613      	mov	r3, r2
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	4413      	add	r3, r2
 80068b8:	3b1e      	subs	r3, #30
 80068ba:	2207      	movs	r2, #7
 80068bc:	fa02 f303 	lsl.w	r3, r2, r3
 80068c0:	43da      	mvns	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	400a      	ands	r2, r1
 80068c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68d9      	ldr	r1, [r3, #12]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	4618      	mov	r0, r3
 80068dc:	4603      	mov	r3, r0
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	4403      	add	r3, r0
 80068e2:	3b1e      	subs	r3, #30
 80068e4:	409a      	lsls	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	60da      	str	r2, [r3, #12]
 80068ee:	e022      	b.n	8006936 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6919      	ldr	r1, [r3, #16]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	4613      	mov	r3, r2
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	4413      	add	r3, r2
 8006904:	2207      	movs	r2, #7
 8006906:	fa02 f303 	lsl.w	r3, r2, r3
 800690a:	43da      	mvns	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	400a      	ands	r2, r1
 8006912:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6919      	ldr	r1, [r3, #16]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	4618      	mov	r0, r3
 8006926:	4603      	mov	r3, r0
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	4403      	add	r3, r0
 800692c:	409a      	lsls	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2b06      	cmp	r3, #6
 800693c:	d824      	bhi.n	8006988 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	3b05      	subs	r3, #5
 8006950:	221f      	movs	r2, #31
 8006952:	fa02 f303 	lsl.w	r3, r2, r3
 8006956:	43da      	mvns	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	400a      	ands	r2, r1
 800695e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	b29b      	uxth	r3, r3
 800696c:	4618      	mov	r0, r3
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	3b05      	subs	r3, #5
 800697a:	fa00 f203 	lsl.w	r2, r0, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	635a      	str	r2, [r3, #52]	; 0x34
 8006986:	e04c      	b.n	8006a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b0c      	cmp	r3, #12
 800698e:	d824      	bhi.n	80069da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	4613      	mov	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	3b23      	subs	r3, #35	; 0x23
 80069a2:	221f      	movs	r2, #31
 80069a4:	fa02 f303 	lsl.w	r3, r2, r3
 80069a8:	43da      	mvns	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	400a      	ands	r2, r1
 80069b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	4618      	mov	r0, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	3b23      	subs	r3, #35	; 0x23
 80069cc:	fa00 f203 	lsl.w	r2, r0, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30
 80069d8:	e023      	b.n	8006a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	3b41      	subs	r3, #65	; 0x41
 80069ec:	221f      	movs	r2, #31
 80069ee:	fa02 f303 	lsl.w	r3, r2, r3
 80069f2:	43da      	mvns	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	400a      	ands	r2, r1
 80069fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	4618      	mov	r0, r3
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	3b41      	subs	r3, #65	; 0x41
 8006a16:	fa00 f203 	lsl.w	r2, r0, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a22:	4b29      	ldr	r3, [pc, #164]	; (8006ac8 <HAL_ADC_ConfigChannel+0x250>)
 8006a24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a28      	ldr	r2, [pc, #160]	; (8006acc <HAL_ADC_ConfigChannel+0x254>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d10f      	bne.n	8006a50 <HAL_ADC_ConfigChannel+0x1d8>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b12      	cmp	r3, #18
 8006a36:	d10b      	bne.n	8006a50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a1d      	ldr	r2, [pc, #116]	; (8006acc <HAL_ADC_ConfigChannel+0x254>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d12b      	bne.n	8006ab2 <HAL_ADC_ConfigChannel+0x23a>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a1c      	ldr	r2, [pc, #112]	; (8006ad0 <HAL_ADC_ConfigChannel+0x258>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d003      	beq.n	8006a6c <HAL_ADC_ConfigChannel+0x1f4>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b11      	cmp	r3, #17
 8006a6a:	d122      	bne.n	8006ab2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a11      	ldr	r2, [pc, #68]	; (8006ad0 <HAL_ADC_ConfigChannel+0x258>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d111      	bne.n	8006ab2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a8e:	4b11      	ldr	r3, [pc, #68]	; (8006ad4 <HAL_ADC_ConfigChannel+0x25c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a11      	ldr	r2, [pc, #68]	; (8006ad8 <HAL_ADC_ConfigChannel+0x260>)
 8006a94:	fba2 2303 	umull	r2, r3, r2, r3
 8006a98:	0c9a      	lsrs	r2, r3, #18
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006aa4:	e002      	b.n	8006aac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1f9      	bne.n	8006aa6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	40012300 	.word	0x40012300
 8006acc:	40012000 	.word	0x40012000
 8006ad0:	10000012 	.word	0x10000012
 8006ad4:	20000090 	.word	0x20000090
 8006ad8:	431bde83 	.word	0x431bde83

08006adc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ae4:	4b79      	ldr	r3, [pc, #484]	; (8006ccc <ADC_Init+0x1f0>)
 8006ae6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	431a      	orrs	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6859      	ldr	r1, [r3, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	021a      	lsls	r2, r3, #8
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6859      	ldr	r1, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6899      	ldr	r1, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68da      	ldr	r2, [r3, #12]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	4a58      	ldr	r2, [pc, #352]	; (8006cd0 <ADC_Init+0x1f4>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d022      	beq.n	8006bba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689a      	ldr	r2, [r3, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6899      	ldr	r1, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6899      	ldr	r1, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	609a      	str	r2, [r3, #8]
 8006bb8:	e00f      	b.n	8006bda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006bd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0202 	bic.w	r2, r2, #2
 8006be8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6899      	ldr	r1, [r3, #8]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	7e1b      	ldrb	r3, [r3, #24]
 8006bf4:	005a      	lsls	r2, r3, #1
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01b      	beq.n	8006c40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006c26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6859      	ldr	r1, [r3, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	3b01      	subs	r3, #1
 8006c34:	035a      	lsls	r2, r3, #13
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	605a      	str	r2, [r3, #4]
 8006c3e:	e007      	b.n	8006c50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	051a      	lsls	r2, r3, #20
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006c84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6899      	ldr	r1, [r3, #8]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c92:	025a      	lsls	r2, r3, #9
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006caa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6899      	ldr	r1, [r3, #8]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	029a      	lsls	r2, r3, #10
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	609a      	str	r2, [r3, #8]
}
 8006cc0:	bf00      	nop
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	40012300 	.word	0x40012300
 8006cd0:	0f000001 	.word	0x0f000001

08006cd4 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_ADCEx_InjectedConfigChannel+0x18>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e17e      	b.n	8006fea <HAL_ADCEx_InjectedConfigChannel+0x316>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b09      	cmp	r3, #9
 8006cfa:	d925      	bls.n	8006d48 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68d9      	ldr	r1, [r3, #12]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	4413      	add	r3, r2
 8006d10:	3b1e      	subs	r3, #30
 8006d12:	2207      	movs	r2, #7
 8006d14:	fa02 f303 	lsl.w	r3, r2, r3
 8006d18:	43da      	mvns	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	400a      	ands	r2, r1
 8006d20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68d9      	ldr	r1, [r3, #12]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	4618      	mov	r0, r3
 8006d34:	4603      	mov	r3, r0
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	4403      	add	r3, r0
 8006d3a:	3b1e      	subs	r3, #30
 8006d3c:	409a      	lsls	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	60da      	str	r2, [r3, #12]
 8006d46:	e022      	b.n	8006d8e <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6919      	ldr	r1, [r3, #16]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	4613      	mov	r3, r2
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	4413      	add	r3, r2
 8006d5c:	2207      	movs	r2, #7
 8006d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d62:	43da      	mvns	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	400a      	ands	r2, r1
 8006d6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6919      	ldr	r1, [r3, #16]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	4603      	mov	r3, r0
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	4403      	add	r3, r0
 8006d84:	409a      	lsls	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006d9c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	051a      	lsls	r2, r3, #20
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	3303      	adds	r3, #3
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	461a      	mov	r2, r3
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	221f      	movs	r2, #31
 8006dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ddc:	43da      	mvns	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	400a      	ands	r2, r1
 8006de4:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	4618      	mov	r0, r3
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	3303      	adds	r3, #3
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	fa00 f203 	lsl.w	r2, r0, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	4a75      	ldr	r2, [pc, #468]	; (8006ff8 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d022      	beq.n	8006e6c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006e34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6899      	ldr	r1, [r3, #8]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	699a      	ldr	r2, [r3, #24]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689a      	ldr	r2, [r3, #8]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006e56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6899      	ldr	r1, [r3, #8]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	69da      	ldr	r2, [r3, #28]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	609a      	str	r2, [r3, #8]
 8006e6a:	e00f      	b.n	8006e8c <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689a      	ldr	r2, [r3, #8]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006e7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006e8a:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	7d5b      	ldrb	r3, [r3, #21]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d008      	beq.n	8006ea6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ea2:	605a      	str	r2, [r3, #4]
 8006ea4:	e007      	b.n	8006eb6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb4:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	7d1b      	ldrb	r3, [r3, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d008      	beq.n	8006ed0 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ecc:	605a      	str	r2, [r3, #4]
 8006ece:	e007      	b.n	8006ee0 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ede:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d02e      	beq.n	8006f46 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d840      	bhi.n	8006f6e <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d002      	beq.n	8006ef6 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d014      	beq.n	8006f1e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8006ef4:	e03b      	b.n	8006f6e <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6812      	ldr	r2, [r2, #0]
 8006f00:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006f04:	f023 030f 	bic.w	r3, r3, #15
 8006f08:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6959      	ldr	r1, [r3, #20]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	615a      	str	r2, [r3, #20]
      break;
 8006f1c:	e03b      	b.n	8006f96 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6812      	ldr	r2, [r2, #0]
 8006f28:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006f2c:	f023 030f 	bic.w	r3, r3, #15
 8006f30:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6999      	ldr	r1, [r3, #24]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	619a      	str	r2, [r3, #24]
      break;
 8006f44:	e027      	b.n	8006f96 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006f54:	f023 030f 	bic.w	r3, r3, #15
 8006f58:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69d9      	ldr	r1, [r3, #28]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	61da      	str	r2, [r3, #28]
      break;
 8006f6c:	e013      	b.n	8006f96 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6812      	ldr	r2, [r2, #0]
 8006f78:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006f7c:	f023 030f 	bic.w	r3, r3, #15
 8006f80:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6a19      	ldr	r1, [r3, #32]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	621a      	str	r2, [r3, #32]
      break;
 8006f94:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f96:	4b19      	ldr	r3, [pc, #100]	; (8006ffc <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8006f98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a18      	ldr	r2, [pc, #96]	; (8007000 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d109      	bne.n	8006fb8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b12      	cmp	r3, #18
 8006faa:	d105      	bne.n	8006fb8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a10      	ldr	r2, [pc, #64]	; (8007000 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d10e      	bne.n	8006fe0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a0f      	ldr	r2, [pc, #60]	; (8007004 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d003      	beq.n	8006fd4 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b11      	cmp	r3, #17
 8006fd2:	d105      	bne.n	8006fe0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	000f0001 	.word	0x000f0001
 8006ffc:	40012300 	.word	0x40012300
 8007000:	40012000 	.word	0x40012000
 8007004:	10000012 	.word	0x10000012

08007008 <__NVIC_SetPriorityGrouping>:
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f003 0307 	and.w	r3, r3, #7
 8007016:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007018:	4b0c      	ldr	r3, [pc, #48]	; (800704c <__NVIC_SetPriorityGrouping+0x44>)
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007024:	4013      	ands	r3, r2
 8007026:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800703a:	4a04      	ldr	r2, [pc, #16]	; (800704c <__NVIC_SetPriorityGrouping+0x44>)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	60d3      	str	r3, [r2, #12]
}
 8007040:	bf00      	nop
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	e000ed00 	.word	0xe000ed00

08007050 <__NVIC_GetPriorityGrouping>:
{
 8007050:	b480      	push	{r7}
 8007052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007054:	4b04      	ldr	r3, [pc, #16]	; (8007068 <__NVIC_GetPriorityGrouping+0x18>)
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	0a1b      	lsrs	r3, r3, #8
 800705a:	f003 0307 	and.w	r3, r3, #7
}
 800705e:	4618      	mov	r0, r3
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	e000ed00 	.word	0xe000ed00

0800706c <__NVIC_EnableIRQ>:
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800707a:	2b00      	cmp	r3, #0
 800707c:	db0b      	blt.n	8007096 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800707e:	79fb      	ldrb	r3, [r7, #7]
 8007080:	f003 021f 	and.w	r2, r3, #31
 8007084:	4907      	ldr	r1, [pc, #28]	; (80070a4 <__NVIC_EnableIRQ+0x38>)
 8007086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800708a:	095b      	lsrs	r3, r3, #5
 800708c:	2001      	movs	r0, #1
 800708e:	fa00 f202 	lsl.w	r2, r0, r2
 8007092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	e000e100 	.word	0xe000e100

080070a8 <__NVIC_DisableIRQ>:
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	db12      	blt.n	80070e0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	f003 021f 	and.w	r2, r3, #31
 80070c0:	490a      	ldr	r1, [pc, #40]	; (80070ec <__NVIC_DisableIRQ+0x44>)
 80070c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	2001      	movs	r0, #1
 80070ca:	fa00 f202 	lsl.w	r2, r0, r2
 80070ce:	3320      	adds	r3, #32
 80070d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80070d4:	f3bf 8f4f 	dsb	sy
}
 80070d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80070da:	f3bf 8f6f 	isb	sy
}
 80070de:	bf00      	nop
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	e000e100 	.word	0xe000e100

080070f0 <__NVIC_SetPriority>:
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	6039      	str	r1, [r7, #0]
 80070fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007100:	2b00      	cmp	r3, #0
 8007102:	db0a      	blt.n	800711a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	b2da      	uxtb	r2, r3
 8007108:	490c      	ldr	r1, [pc, #48]	; (800713c <__NVIC_SetPriority+0x4c>)
 800710a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800710e:	0112      	lsls	r2, r2, #4
 8007110:	b2d2      	uxtb	r2, r2
 8007112:	440b      	add	r3, r1
 8007114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007118:	e00a      	b.n	8007130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	b2da      	uxtb	r2, r3
 800711e:	4908      	ldr	r1, [pc, #32]	; (8007140 <__NVIC_SetPriority+0x50>)
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	3b04      	subs	r3, #4
 8007128:	0112      	lsls	r2, r2, #4
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	440b      	add	r3, r1
 800712e:	761a      	strb	r2, [r3, #24]
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	e000e100 	.word	0xe000e100
 8007140:	e000ed00 	.word	0xe000ed00

08007144 <NVIC_EncodePriority>:
{
 8007144:	b480      	push	{r7}
 8007146:	b089      	sub	sp, #36	; 0x24
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f1c3 0307 	rsb	r3, r3, #7
 800715e:	2b04      	cmp	r3, #4
 8007160:	bf28      	it	cs
 8007162:	2304      	movcs	r3, #4
 8007164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	3304      	adds	r3, #4
 800716a:	2b06      	cmp	r3, #6
 800716c:	d902      	bls.n	8007174 <NVIC_EncodePriority+0x30>
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	3b03      	subs	r3, #3
 8007172:	e000      	b.n	8007176 <NVIC_EncodePriority+0x32>
 8007174:	2300      	movs	r3, #0
 8007176:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007178:	f04f 32ff 	mov.w	r2, #4294967295
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	fa02 f303 	lsl.w	r3, r2, r3
 8007182:	43da      	mvns	r2, r3
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	401a      	ands	r2, r3
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800718c:	f04f 31ff 	mov.w	r1, #4294967295
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	fa01 f303 	lsl.w	r3, r1, r3
 8007196:	43d9      	mvns	r1, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800719c:	4313      	orrs	r3, r2
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3724      	adds	r7, #36	; 0x24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
	...

080071ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071bc:	d301      	bcc.n	80071c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80071be:	2301      	movs	r3, #1
 80071c0:	e00f      	b.n	80071e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071c2:	4a0a      	ldr	r2, [pc, #40]	; (80071ec <SysTick_Config+0x40>)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071ca:	210f      	movs	r1, #15
 80071cc:	f04f 30ff 	mov.w	r0, #4294967295
 80071d0:	f7ff ff8e 	bl	80070f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071d4:	4b05      	ldr	r3, [pc, #20]	; (80071ec <SysTick_Config+0x40>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071da:	4b04      	ldr	r3, [pc, #16]	; (80071ec <SysTick_Config+0x40>)
 80071dc:	2207      	movs	r2, #7
 80071de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	e000e010 	.word	0xe000e010

080071f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff ff05 	bl	8007008 <__NVIC_SetPriorityGrouping>
}
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007206:	b580      	push	{r7, lr}
 8007208:	b086      	sub	sp, #24
 800720a:	af00      	add	r7, sp, #0
 800720c:	4603      	mov	r3, r0
 800720e:	60b9      	str	r1, [r7, #8]
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007214:	2300      	movs	r3, #0
 8007216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007218:	f7ff ff1a 	bl	8007050 <__NVIC_GetPriorityGrouping>
 800721c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	68b9      	ldr	r1, [r7, #8]
 8007222:	6978      	ldr	r0, [r7, #20]
 8007224:	f7ff ff8e 	bl	8007144 <NVIC_EncodePriority>
 8007228:	4602      	mov	r2, r0
 800722a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800722e:	4611      	mov	r1, r2
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff ff5d 	bl	80070f0 <__NVIC_SetPriority>
}
 8007236:	bf00      	nop
 8007238:	3718      	adds	r7, #24
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	4603      	mov	r3, r0
 8007246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff ff0d 	bl	800706c <__NVIC_EnableIRQ>
}
 8007252:	bf00      	nop
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	4603      	mov	r3, r0
 8007262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff ff1d 	bl	80070a8 <__NVIC_DisableIRQ>
}
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b082      	sub	sp, #8
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7ff ff94 	bl	80071ac <SysTick_Config>
 8007284:	4603      	mov	r3, r0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800729c:	f7ff f90e 	bl	80064bc <HAL_GetTick>
 80072a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e099      	b.n	80073e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0201 	bic.w	r2, r2, #1
 80072ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072cc:	e00f      	b.n	80072ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072ce:	f7ff f8f5 	bl	80064bc <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	2b05      	cmp	r3, #5
 80072da:	d908      	bls.n	80072ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2220      	movs	r2, #32
 80072e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2203      	movs	r2, #3
 80072e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e078      	b.n	80073e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e8      	bne.n	80072ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	4b38      	ldr	r3, [pc, #224]	; (80073e8 <HAL_DMA_Init+0x158>)
 8007308:	4013      	ands	r3, r2
 800730a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800731a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	2b04      	cmp	r3, #4
 8007346:	d107      	bne.n	8007358 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007350:	4313      	orrs	r3, r2
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f023 0307 	bic.w	r3, r3, #7
 800736e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	4313      	orrs	r3, r2
 8007378:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	2b04      	cmp	r3, #4
 8007380:	d117      	bne.n	80073b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00e      	beq.n	80073b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fb01 	bl	800799c <DMA_CheckFifoParam>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d008      	beq.n	80073b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2240      	movs	r2, #64	; 0x40
 80073a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80073ae:	2301      	movs	r3, #1
 80073b0:	e016      	b.n	80073e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fab8 	bl	8007930 <DMA_CalcBaseAndBitshift>
 80073c0:	4603      	mov	r3, r0
 80073c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c8:	223f      	movs	r2, #63	; 0x3f
 80073ca:	409a      	lsls	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	f010803f 	.word	0xf010803f

080073ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007402:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800740a:	2b01      	cmp	r3, #1
 800740c:	d101      	bne.n	8007412 <HAL_DMA_Start_IT+0x26>
 800740e:	2302      	movs	r3, #2
 8007410:	e040      	b.n	8007494 <HAL_DMA_Start_IT+0xa8>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b01      	cmp	r3, #1
 8007424:	d12f      	bne.n	8007486 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2202      	movs	r2, #2
 800742a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	68b9      	ldr	r1, [r7, #8]
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 fa4a 	bl	80078d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007444:	223f      	movs	r2, #63	; 0x3f
 8007446:	409a      	lsls	r2, r3
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0216 	orr.w	r2, r2, #22
 800745a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007460:	2b00      	cmp	r3, #0
 8007462:	d007      	beq.n	8007474 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0208 	orr.w	r2, r2, #8
 8007472:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f042 0201 	orr.w	r2, r2, #1
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	e005      	b.n	8007492 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800748e:	2302      	movs	r3, #2
 8007490:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007492:	7dfb      	ldrb	r3, [r7, #23]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80074aa:	f7ff f807 	bl	80064bc <HAL_GetTick>
 80074ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d008      	beq.n	80074ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2280      	movs	r2, #128	; 0x80
 80074c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e052      	b.n	8007574 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0216 	bic.w	r2, r2, #22
 80074dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	695a      	ldr	r2, [r3, #20]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d103      	bne.n	80074fe <HAL_DMA_Abort+0x62>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d007      	beq.n	800750e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 0208 	bic.w	r2, r2, #8
 800750c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0201 	bic.w	r2, r2, #1
 800751c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800751e:	e013      	b.n	8007548 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007520:	f7fe ffcc 	bl	80064bc <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	2b05      	cmp	r3, #5
 800752c:	d90c      	bls.n	8007548 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2203      	movs	r2, #3
 8007538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e015      	b.n	8007574 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1e4      	bne.n	8007520 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800755a:	223f      	movs	r2, #63	; 0x3f
 800755c:	409a      	lsls	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b02      	cmp	r3, #2
 800758e:	d004      	beq.n	800759a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2280      	movs	r2, #128	; 0x80
 8007594:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e00c      	b.n	80075b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2205      	movs	r2, #5
 800759e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 0201 	bic.w	r2, r2, #1
 80075b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80075c8:	2300      	movs	r3, #0
 80075ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80075cc:	4b8e      	ldr	r3, [pc, #568]	; (8007808 <HAL_DMA_IRQHandler+0x248>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a8e      	ldr	r2, [pc, #568]	; (800780c <HAL_DMA_IRQHandler+0x24c>)
 80075d2:	fba2 2303 	umull	r2, r3, r2, r3
 80075d6:	0a9b      	lsrs	r3, r3, #10
 80075d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ea:	2208      	movs	r2, #8
 80075ec:	409a      	lsls	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	4013      	ands	r3, r2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d01a      	beq.n	800762c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d013      	beq.n	800762c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0204 	bic.w	r2, r2, #4
 8007612:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007618:	2208      	movs	r2, #8
 800761a:	409a      	lsls	r2, r3
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007624:	f043 0201 	orr.w	r2, r3, #1
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007630:	2201      	movs	r2, #1
 8007632:	409a      	lsls	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4013      	ands	r3, r2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d012      	beq.n	8007662 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00b      	beq.n	8007662 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800764e:	2201      	movs	r2, #1
 8007650:	409a      	lsls	r2, r3
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765a:	f043 0202 	orr.w	r2, r3, #2
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007666:	2204      	movs	r2, #4
 8007668:	409a      	lsls	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4013      	ands	r3, r2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d012      	beq.n	8007698 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007684:	2204      	movs	r2, #4
 8007686:	409a      	lsls	r2, r3
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007690:	f043 0204 	orr.w	r2, r3, #4
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800769c:	2210      	movs	r2, #16
 800769e:	409a      	lsls	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4013      	ands	r3, r2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d043      	beq.n	8007730 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0308 	and.w	r3, r3, #8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d03c      	beq.n	8007730 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ba:	2210      	movs	r2, #16
 80076bc:	409a      	lsls	r2, r3
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d018      	beq.n	8007702 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d108      	bne.n	80076f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d024      	beq.n	8007730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	4798      	blx	r3
 80076ee:	e01f      	b.n	8007730 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01b      	beq.n	8007730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	4798      	blx	r3
 8007700:	e016      	b.n	8007730 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770c:	2b00      	cmp	r3, #0
 800770e:	d107      	bne.n	8007720 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0208 	bic.w	r2, r2, #8
 800771e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007734:	2220      	movs	r2, #32
 8007736:	409a      	lsls	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4013      	ands	r3, r2
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 808f 	beq.w	8007860 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0310 	and.w	r3, r3, #16
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 8087 	beq.w	8007860 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007756:	2220      	movs	r2, #32
 8007758:	409a      	lsls	r2, r3
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b05      	cmp	r3, #5
 8007768:	d136      	bne.n	80077d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0216 	bic.w	r2, r2, #22
 8007778:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695a      	ldr	r2, [r3, #20]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007788:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778e:	2b00      	cmp	r3, #0
 8007790:	d103      	bne.n	800779a <HAL_DMA_IRQHandler+0x1da>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007796:	2b00      	cmp	r3, #0
 8007798:	d007      	beq.n	80077aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0208 	bic.w	r2, r2, #8
 80077a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ae:	223f      	movs	r2, #63	; 0x3f
 80077b0:	409a      	lsls	r2, r3
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d07e      	beq.n	80078cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	4798      	blx	r3
        }
        return;
 80077d6:	e079      	b.n	80078cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d01d      	beq.n	8007822 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10d      	bne.n	8007810 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d031      	beq.n	8007860 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	4798      	blx	r3
 8007804:	e02c      	b.n	8007860 <HAL_DMA_IRQHandler+0x2a0>
 8007806:	bf00      	nop
 8007808:	20000090 	.word	0x20000090
 800780c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d023      	beq.n	8007860 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	4798      	blx	r3
 8007820:	e01e      	b.n	8007860 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10f      	bne.n	8007850 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f022 0210 	bic.w	r2, r2, #16
 800783e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007864:	2b00      	cmp	r3, #0
 8007866:	d032      	beq.n	80078ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d022      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2205      	movs	r2, #5
 8007878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 0201 	bic.w	r2, r2, #1
 800788a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	3301      	adds	r3, #1
 8007890:	60bb      	str	r3, [r7, #8]
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	429a      	cmp	r2, r3
 8007896:	d307      	bcc.n	80078a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1f2      	bne.n	800788c <HAL_DMA_IRQHandler+0x2cc>
 80078a6:	e000      	b.n	80078aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80078a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d005      	beq.n	80078ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	4798      	blx	r3
 80078ca:	e000      	b.n	80078ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80078cc:	bf00      	nop
    }
  }
}
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b40      	cmp	r3, #64	; 0x40
 8007900:	d108      	bne.n	8007914 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007912:	e007      	b.n	8007924 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	60da      	str	r2, [r3, #12]
}
 8007924:	bf00      	nop
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	3b10      	subs	r3, #16
 8007940:	4a14      	ldr	r2, [pc, #80]	; (8007994 <DMA_CalcBaseAndBitshift+0x64>)
 8007942:	fba2 2303 	umull	r2, r3, r2, r3
 8007946:	091b      	lsrs	r3, r3, #4
 8007948:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800794a:	4a13      	ldr	r2, [pc, #76]	; (8007998 <DMA_CalcBaseAndBitshift+0x68>)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4413      	add	r3, r2
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b03      	cmp	r3, #3
 800795c:	d909      	bls.n	8007972 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007966:	f023 0303 	bic.w	r3, r3, #3
 800796a:	1d1a      	adds	r2, r3, #4
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	659a      	str	r2, [r3, #88]	; 0x58
 8007970:	e007      	b.n	8007982 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800797a:	f023 0303 	bic.w	r3, r3, #3
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	aaaaaaab 	.word	0xaaaaaaab
 8007998:	08010278 	.word	0x08010278

0800799c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d11f      	bne.n	80079f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d856      	bhi.n	8007a6a <DMA_CheckFifoParam+0xce>
 80079bc:	a201      	add	r2, pc, #4	; (adr r2, 80079c4 <DMA_CheckFifoParam+0x28>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	080079d5 	.word	0x080079d5
 80079c8:	080079e7 	.word	0x080079e7
 80079cc:	080079d5 	.word	0x080079d5
 80079d0:	08007a6b 	.word	0x08007a6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d046      	beq.n	8007a6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079e4:	e043      	b.n	8007a6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079ee:	d140      	bne.n	8007a72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079f4:	e03d      	b.n	8007a72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079fe:	d121      	bne.n	8007a44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d837      	bhi.n	8007a76 <DMA_CheckFifoParam+0xda>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <DMA_CheckFifoParam+0x70>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a1d 	.word	0x08007a1d
 8007a10:	08007a23 	.word	0x08007a23
 8007a14:	08007a1d 	.word	0x08007a1d
 8007a18:	08007a35 	.word	0x08007a35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a20:	e030      	b.n	8007a84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d025      	beq.n	8007a7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a32:	e022      	b.n	8007a7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a3c:	d11f      	bne.n	8007a7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007a42:	e01c      	b.n	8007a7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d903      	bls.n	8007a52 <DMA_CheckFifoParam+0xb6>
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d003      	beq.n	8007a58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007a50:	e018      	b.n	8007a84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	73fb      	strb	r3, [r7, #15]
      break;
 8007a56:	e015      	b.n	8007a84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00e      	beq.n	8007a82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	73fb      	strb	r3, [r7, #15]
      break;
 8007a68:	e00b      	b.n	8007a82 <DMA_CheckFifoParam+0xe6>
      break;
 8007a6a:	bf00      	nop
 8007a6c:	e00a      	b.n	8007a84 <DMA_CheckFifoParam+0xe8>
      break;
 8007a6e:	bf00      	nop
 8007a70:	e008      	b.n	8007a84 <DMA_CheckFifoParam+0xe8>
      break;
 8007a72:	bf00      	nop
 8007a74:	e006      	b.n	8007a84 <DMA_CheckFifoParam+0xe8>
      break;
 8007a76:	bf00      	nop
 8007a78:	e004      	b.n	8007a84 <DMA_CheckFifoParam+0xe8>
      break;
 8007a7a:	bf00      	nop
 8007a7c:	e002      	b.n	8007a84 <DMA_CheckFifoParam+0xe8>
      break;   
 8007a7e:	bf00      	nop
 8007a80:	e000      	b.n	8007a84 <DMA_CheckFifoParam+0xe8>
      break;
 8007a82:	bf00      	nop
    }
  } 
  
  return status; 
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop

08007a94 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007aa6:	4b23      	ldr	r3, [pc, #140]	; (8007b34 <HAL_FLASH_Program+0xa0>)
 8007aa8:	7e1b      	ldrb	r3, [r3, #24]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <HAL_FLASH_Program+0x1e>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e03b      	b.n	8007b2a <HAL_FLASH_Program+0x96>
 8007ab2:	4b20      	ldr	r3, [pc, #128]	; (8007b34 <HAL_FLASH_Program+0xa0>)
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007ab8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007abc:	f000 f870 	bl	8007ba0 <FLASH_WaitForLastOperation>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d12b      	bne.n	8007b22 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d105      	bne.n	8007adc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007ad0:	783b      	ldrb	r3, [r7, #0]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	68b8      	ldr	r0, [r7, #8]
 8007ad6:	f000 f91b 	bl	8007d10 <FLASH_Program_Byte>
 8007ada:	e016      	b.n	8007b0a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d105      	bne.n	8007aee <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8007ae2:	883b      	ldrh	r3, [r7, #0]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	68b8      	ldr	r0, [r7, #8]
 8007ae8:	f000 f8ee 	bl	8007cc8 <FLASH_Program_HalfWord>
 8007aec:	e00d      	b.n	8007b0a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d105      	bne.n	8007b00 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	4619      	mov	r1, r3
 8007af8:	68b8      	ldr	r0, [r7, #8]
 8007afa:	f000 f8c3 	bl	8007c84 <FLASH_Program_Word>
 8007afe:	e004      	b.n	8007b0a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b04:	68b8      	ldr	r0, [r7, #8]
 8007b06:	f000 f88b 	bl	8007c20 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007b0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007b0e:	f000 f847 	bl	8007ba0 <FLASH_WaitForLastOperation>
 8007b12:	4603      	mov	r3, r0
 8007b14:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8007b16:	4b08      	ldr	r3, [pc, #32]	; (8007b38 <HAL_FLASH_Program+0xa4>)
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	4a07      	ldr	r2, [pc, #28]	; (8007b38 <HAL_FLASH_Program+0xa4>)
 8007b1c:	f023 0301 	bic.w	r3, r3, #1
 8007b20:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007b22:	4b04      	ldr	r3, [pc, #16]	; (8007b34 <HAL_FLASH_Program+0xa0>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20000b04 	.word	0x20000b04
 8007b38:	40023c00 	.word	0x40023c00

08007b3c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007b46:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <HAL_FLASH_Unlock+0x38>)
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	da0b      	bge.n	8007b66 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007b4e:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <HAL_FLASH_Unlock+0x38>)
 8007b50:	4a09      	ldr	r2, [pc, #36]	; (8007b78 <HAL_FLASH_Unlock+0x3c>)
 8007b52:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007b54:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <HAL_FLASH_Unlock+0x38>)
 8007b56:	4a09      	ldr	r2, [pc, #36]	; (8007b7c <HAL_FLASH_Unlock+0x40>)
 8007b58:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007b5a:	4b06      	ldr	r3, [pc, #24]	; (8007b74 <HAL_FLASH_Unlock+0x38>)
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	da01      	bge.n	8007b66 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007b66:	79fb      	ldrb	r3, [r7, #7]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	40023c00 	.word	0x40023c00
 8007b78:	45670123 	.word	0x45670123
 8007b7c:	cdef89ab 	.word	0xcdef89ab

08007b80 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007b80:	b480      	push	{r7}
 8007b82:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007b84:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <HAL_FLASH_Lock+0x1c>)
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	4a04      	ldr	r2, [pc, #16]	; (8007b9c <HAL_FLASH_Lock+0x1c>)
 8007b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b8e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	40023c00 	.word	0x40023c00

08007ba0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007bac:	4b1a      	ldr	r3, [pc, #104]	; (8007c18 <FLASH_WaitForLastOperation+0x78>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007bb2:	f7fe fc83 	bl	80064bc <HAL_GetTick>
 8007bb6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007bb8:	e010      	b.n	8007bdc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc0:	d00c      	beq.n	8007bdc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d007      	beq.n	8007bd8 <FLASH_WaitForLastOperation+0x38>
 8007bc8:	f7fe fc78 	bl	80064bc <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d201      	bcs.n	8007bdc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e019      	b.n	8007c10 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007bdc:	4b0f      	ldr	r3, [pc, #60]	; (8007c1c <FLASH_WaitForLastOperation+0x7c>)
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1e8      	bne.n	8007bba <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007be8:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <FLASH_WaitForLastOperation+0x7c>)
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007bf4:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <FLASH_WaitForLastOperation+0x7c>)
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007bfa:	4b08      	ldr	r3, [pc, #32]	; (8007c1c <FLASH_WaitForLastOperation+0x7c>)
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007c06:	f000 f8a5 	bl	8007d54 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e000      	b.n	8007c10 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
  
}  
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000b04 	.word	0x20000b04
 8007c1c:	40023c00 	.word	0x40023c00

08007c20 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007c2c:	4b14      	ldr	r3, [pc, #80]	; (8007c80 <FLASH_Program_DoubleWord+0x60>)
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	4a13      	ldr	r2, [pc, #76]	; (8007c80 <FLASH_Program_DoubleWord+0x60>)
 8007c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007c38:	4b11      	ldr	r3, [pc, #68]	; (8007c80 <FLASH_Program_DoubleWord+0x60>)
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	4a10      	ldr	r2, [pc, #64]	; (8007c80 <FLASH_Program_DoubleWord+0x60>)
 8007c3e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007c44:	4b0e      	ldr	r3, [pc, #56]	; (8007c80 <FLASH_Program_DoubleWord+0x60>)
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	4a0d      	ldr	r2, [pc, #52]	; (8007c80 <FLASH_Program_DoubleWord+0x60>)
 8007c4a:	f043 0301 	orr.w	r3, r3, #1
 8007c4e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007c56:	f3bf 8f6f 	isb	sy
}
 8007c5a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007c5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c60:	f04f 0200 	mov.w	r2, #0
 8007c64:	f04f 0300 	mov.w	r3, #0
 8007c68:	000a      	movs	r2, r1
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	68f9      	ldr	r1, [r7, #12]
 8007c6e:	3104      	adds	r1, #4
 8007c70:	4613      	mov	r3, r2
 8007c72:	600b      	str	r3, [r1, #0]
}
 8007c74:	bf00      	nop
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	40023c00 	.word	0x40023c00

08007c84 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007c8e:	4b0d      	ldr	r3, [pc, #52]	; (8007cc4 <FLASH_Program_Word+0x40>)
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	4a0c      	ldr	r2, [pc, #48]	; (8007cc4 <FLASH_Program_Word+0x40>)
 8007c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007c9a:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <FLASH_Program_Word+0x40>)
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	4a09      	ldr	r2, [pc, #36]	; (8007cc4 <FLASH_Program_Word+0x40>)
 8007ca0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ca4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007ca6:	4b07      	ldr	r3, [pc, #28]	; (8007cc4 <FLASH_Program_Word+0x40>)
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	4a06      	ldr	r2, [pc, #24]	; (8007cc4 <FLASH_Program_Word+0x40>)
 8007cac:	f043 0301 	orr.w	r3, r3, #1
 8007cb0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	601a      	str	r2, [r3, #0]
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	40023c00 	.word	0x40023c00

08007cc8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007cd4:	4b0d      	ldr	r3, [pc, #52]	; (8007d0c <FLASH_Program_HalfWord+0x44>)
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	4a0c      	ldr	r2, [pc, #48]	; (8007d0c <FLASH_Program_HalfWord+0x44>)
 8007cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007ce0:	4b0a      	ldr	r3, [pc, #40]	; (8007d0c <FLASH_Program_HalfWord+0x44>)
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	4a09      	ldr	r2, [pc, #36]	; (8007d0c <FLASH_Program_HalfWord+0x44>)
 8007ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007cec:	4b07      	ldr	r3, [pc, #28]	; (8007d0c <FLASH_Program_HalfWord+0x44>)
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	4a06      	ldr	r2, [pc, #24]	; (8007d0c <FLASH_Program_HalfWord+0x44>)
 8007cf2:	f043 0301 	orr.w	r3, r3, #1
 8007cf6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	887a      	ldrh	r2, [r7, #2]
 8007cfc:	801a      	strh	r2, [r3, #0]
}
 8007cfe:	bf00      	nop
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	40023c00 	.word	0x40023c00

08007d10 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007d1c:	4b0c      	ldr	r3, [pc, #48]	; (8007d50 <FLASH_Program_Byte+0x40>)
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	4a0b      	ldr	r2, [pc, #44]	; (8007d50 <FLASH_Program_Byte+0x40>)
 8007d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007d28:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <FLASH_Program_Byte+0x40>)
 8007d2a:	4a09      	ldr	r2, [pc, #36]	; (8007d50 <FLASH_Program_Byte+0x40>)
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007d30:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <FLASH_Program_Byte+0x40>)
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	4a06      	ldr	r2, [pc, #24]	; (8007d50 <FLASH_Program_Byte+0x40>)
 8007d36:	f043 0301 	orr.w	r3, r3, #1
 8007d3a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	78fa      	ldrb	r2, [r7, #3]
 8007d40:	701a      	strb	r2, [r3, #0]
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	40023c00 	.word	0x40023c00

08007d54 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007d54:	b480      	push	{r7}
 8007d56:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007d58:	4b2f      	ldr	r3, [pc, #188]	; (8007e18 <FLASH_SetErrorCode+0xc4>)
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f003 0310 	and.w	r3, r3, #16
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d008      	beq.n	8007d76 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007d64:	4b2d      	ldr	r3, [pc, #180]	; (8007e1c <FLASH_SetErrorCode+0xc8>)
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	f043 0310 	orr.w	r3, r3, #16
 8007d6c:	4a2b      	ldr	r2, [pc, #172]	; (8007e1c <FLASH_SetErrorCode+0xc8>)
 8007d6e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007d70:	4b29      	ldr	r3, [pc, #164]	; (8007e18 <FLASH_SetErrorCode+0xc4>)
 8007d72:	2210      	movs	r2, #16
 8007d74:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007d76:	4b28      	ldr	r3, [pc, #160]	; (8007e18 <FLASH_SetErrorCode+0xc4>)
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d008      	beq.n	8007d94 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007d82:	4b26      	ldr	r3, [pc, #152]	; (8007e1c <FLASH_SetErrorCode+0xc8>)
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	f043 0308 	orr.w	r3, r3, #8
 8007d8a:	4a24      	ldr	r2, [pc, #144]	; (8007e1c <FLASH_SetErrorCode+0xc8>)
 8007d8c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007d8e:	4b22      	ldr	r3, [pc, #136]	; (8007e18 <FLASH_SetErrorCode+0xc4>)
 8007d90:	2220      	movs	r2, #32
 8007d92:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007d94:	4b20      	ldr	r3, [pc, #128]	; (8007e18 <FLASH_SetErrorCode+0xc4>)
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d008      	beq.n	8007db2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007da0:	4b1e      	ldr	r3, [pc, #120]	; (8007e1c <FLASH_SetErrorCode+0xc8>)
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	f043 0304 	orr.w	r3, r3, #4
 8007da8:	4a1c      	ldr	r2, [pc, #112]	; (8007e1c <FLASH_SetErrorCode+0xc8>)
 8007daa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007dac:	4b1a      	ldr	r3, [pc, #104]	; (8007e18 <FLASH_SetErrorCode+0xc4>)
 8007dae:	2240      	movs	r2, #64	; 0x40
 8007db0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007db2:	4b19      	ldr	r3, [pc, #100]	; (8007e18 <FLASH_SetErrorCode+0xc4>)
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d008      	beq.n	8007dd0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007dbe:	4b17      	ldr	r3, [pc, #92]	; (8007e1c <FLASH_SetErrorCode+0xc8>)
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f043 0302 	orr.w	r3, r3, #2
 8007dc6:	4a15      	ldr	r2, [pc, #84]	; (8007e1c <FLASH_SetErrorCode+0xc8>)
 8007dc8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007dca:	4b13      	ldr	r3, [pc, #76]	; (8007e18 <FLASH_SetErrorCode+0xc4>)
 8007dcc:	2280      	movs	r2, #128	; 0x80
 8007dce:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8007dd0:	4b11      	ldr	r3, [pc, #68]	; (8007e18 <FLASH_SetErrorCode+0xc4>)
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d009      	beq.n	8007df0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007ddc:	4b0f      	ldr	r3, [pc, #60]	; (8007e1c <FLASH_SetErrorCode+0xc8>)
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	f043 0301 	orr.w	r3, r3, #1
 8007de4:	4a0d      	ldr	r2, [pc, #52]	; (8007e1c <FLASH_SetErrorCode+0xc8>)
 8007de6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8007de8:	4b0b      	ldr	r3, [pc, #44]	; (8007e18 <FLASH_SetErrorCode+0xc4>)
 8007dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dee:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007df0:	4b09      	ldr	r3, [pc, #36]	; (8007e18 <FLASH_SetErrorCode+0xc4>)
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d008      	beq.n	8007e0e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007dfc:	4b07      	ldr	r3, [pc, #28]	; (8007e1c <FLASH_SetErrorCode+0xc8>)
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f043 0320 	orr.w	r3, r3, #32
 8007e04:	4a05      	ldr	r2, [pc, #20]	; (8007e1c <FLASH_SetErrorCode+0xc8>)
 8007e06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007e08:	4b03      	ldr	r3, [pc, #12]	; (8007e18 <FLASH_SetErrorCode+0xc4>)
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	60da      	str	r2, [r3, #12]
  }
}
 8007e0e:	bf00      	nop
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	40023c00 	.word	0x40023c00
 8007e1c:	20000b04 	.word	0x20000b04

08007e20 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d102      	bne.n	8007e3c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	e010      	b.n	8007e5e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007e3c:	78fb      	ldrb	r3, [r7, #3]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d103      	bne.n	8007e4a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	e009      	b.n	8007e5e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007e4a:	78fb      	ldrb	r3, [r7, #3]
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d103      	bne.n	8007e58 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	e002      	b.n	8007e5e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007e58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007e5c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007e5e:	4b13      	ldr	r3, [pc, #76]	; (8007eac <FLASH_Erase_Sector+0x8c>)
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	4a12      	ldr	r2, [pc, #72]	; (8007eac <FLASH_Erase_Sector+0x8c>)
 8007e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007e6a:	4b10      	ldr	r3, [pc, #64]	; (8007eac <FLASH_Erase_Sector+0x8c>)
 8007e6c:	691a      	ldr	r2, [r3, #16]
 8007e6e:	490f      	ldr	r1, [pc, #60]	; (8007eac <FLASH_Erase_Sector+0x8c>)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007e76:	4b0d      	ldr	r3, [pc, #52]	; (8007eac <FLASH_Erase_Sector+0x8c>)
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	4a0c      	ldr	r2, [pc, #48]	; (8007eac <FLASH_Erase_Sector+0x8c>)
 8007e7c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007e80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007e82:	4b0a      	ldr	r3, [pc, #40]	; (8007eac <FLASH_Erase_Sector+0x8c>)
 8007e84:	691a      	ldr	r2, [r3, #16]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	00db      	lsls	r3, r3, #3
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	4a07      	ldr	r2, [pc, #28]	; (8007eac <FLASH_Erase_Sector+0x8c>)
 8007e8e:	f043 0302 	orr.w	r3, r3, #2
 8007e92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007e94:	4b05      	ldr	r3, [pc, #20]	; (8007eac <FLASH_Erase_Sector+0x8c>)
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	4a04      	ldr	r2, [pc, #16]	; (8007eac <FLASH_Erase_Sector+0x8c>)
 8007e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e9e:	6113      	str	r3, [r2, #16]
}
 8007ea0:	bf00      	nop
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	40023c00 	.word	0x40023c00

08007eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b089      	sub	sp, #36	; 0x24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	61fb      	str	r3, [r7, #28]
 8007eca:	e165      	b.n	8008198 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007ecc:	2201      	movs	r2, #1
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	4013      	ands	r3, r2
 8007ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	f040 8154 	bne.w	8008192 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d005      	beq.n	8007f02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d130      	bne.n	8007f64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	005b      	lsls	r3, r3, #1
 8007f0c:	2203      	movs	r2, #3
 8007f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f12:	43db      	mvns	r3, r3
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	4013      	ands	r3, r2
 8007f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	68da      	ldr	r2, [r3, #12]
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	005b      	lsls	r3, r3, #1
 8007f22:	fa02 f303 	lsl.w	r3, r2, r3
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007f38:	2201      	movs	r2, #1
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f40:	43db      	mvns	r3, r3
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	4013      	ands	r3, r2
 8007f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	091b      	lsrs	r3, r3, #4
 8007f4e:	f003 0201 	and.w	r2, r3, #1
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	fa02 f303 	lsl.w	r3, r2, r3
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f003 0303 	and.w	r3, r3, #3
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d017      	beq.n	8007fa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	005b      	lsls	r3, r3, #1
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	43db      	mvns	r3, r3
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	4013      	ands	r3, r2
 8007f86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	fa02 f303 	lsl.w	r3, r2, r3
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f003 0303 	and.w	r3, r3, #3
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d123      	bne.n	8007ff4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	08da      	lsrs	r2, r3, #3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3208      	adds	r2, #8
 8007fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	f003 0307 	and.w	r3, r3, #7
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	220f      	movs	r2, #15
 8007fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc8:	43db      	mvns	r3, r3
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	4013      	ands	r3, r2
 8007fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	691a      	ldr	r2, [r3, #16]
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	08da      	lsrs	r2, r3, #3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	3208      	adds	r2, #8
 8007fee:	69b9      	ldr	r1, [r7, #24]
 8007ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	2203      	movs	r2, #3
 8008000:	fa02 f303 	lsl.w	r3, r2, r3
 8008004:	43db      	mvns	r3, r3
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	4013      	ands	r3, r2
 800800a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f003 0203 	and.w	r2, r3, #3
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	005b      	lsls	r3, r3, #1
 8008018:	fa02 f303 	lsl.w	r3, r2, r3
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	4313      	orrs	r3, r2
 8008020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 80ae 	beq.w	8008192 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008036:	2300      	movs	r3, #0
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	4b5d      	ldr	r3, [pc, #372]	; (80081b0 <HAL_GPIO_Init+0x300>)
 800803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803e:	4a5c      	ldr	r2, [pc, #368]	; (80081b0 <HAL_GPIO_Init+0x300>)
 8008040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008044:	6453      	str	r3, [r2, #68]	; 0x44
 8008046:	4b5a      	ldr	r3, [pc, #360]	; (80081b0 <HAL_GPIO_Init+0x300>)
 8008048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800804e:	60fb      	str	r3, [r7, #12]
 8008050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008052:	4a58      	ldr	r2, [pc, #352]	; (80081b4 <HAL_GPIO_Init+0x304>)
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	089b      	lsrs	r3, r3, #2
 8008058:	3302      	adds	r3, #2
 800805a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800805e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	220f      	movs	r2, #15
 800806a:	fa02 f303 	lsl.w	r3, r2, r3
 800806e:	43db      	mvns	r3, r3
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	4013      	ands	r3, r2
 8008074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a4f      	ldr	r2, [pc, #316]	; (80081b8 <HAL_GPIO_Init+0x308>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d025      	beq.n	80080ca <HAL_GPIO_Init+0x21a>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a4e      	ldr	r2, [pc, #312]	; (80081bc <HAL_GPIO_Init+0x30c>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d01f      	beq.n	80080c6 <HAL_GPIO_Init+0x216>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a4d      	ldr	r2, [pc, #308]	; (80081c0 <HAL_GPIO_Init+0x310>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d019      	beq.n	80080c2 <HAL_GPIO_Init+0x212>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a4c      	ldr	r2, [pc, #304]	; (80081c4 <HAL_GPIO_Init+0x314>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d013      	beq.n	80080be <HAL_GPIO_Init+0x20e>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a4b      	ldr	r2, [pc, #300]	; (80081c8 <HAL_GPIO_Init+0x318>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d00d      	beq.n	80080ba <HAL_GPIO_Init+0x20a>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a4a      	ldr	r2, [pc, #296]	; (80081cc <HAL_GPIO_Init+0x31c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d007      	beq.n	80080b6 <HAL_GPIO_Init+0x206>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a49      	ldr	r2, [pc, #292]	; (80081d0 <HAL_GPIO_Init+0x320>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d101      	bne.n	80080b2 <HAL_GPIO_Init+0x202>
 80080ae:	2306      	movs	r3, #6
 80080b0:	e00c      	b.n	80080cc <HAL_GPIO_Init+0x21c>
 80080b2:	2307      	movs	r3, #7
 80080b4:	e00a      	b.n	80080cc <HAL_GPIO_Init+0x21c>
 80080b6:	2305      	movs	r3, #5
 80080b8:	e008      	b.n	80080cc <HAL_GPIO_Init+0x21c>
 80080ba:	2304      	movs	r3, #4
 80080bc:	e006      	b.n	80080cc <HAL_GPIO_Init+0x21c>
 80080be:	2303      	movs	r3, #3
 80080c0:	e004      	b.n	80080cc <HAL_GPIO_Init+0x21c>
 80080c2:	2302      	movs	r3, #2
 80080c4:	e002      	b.n	80080cc <HAL_GPIO_Init+0x21c>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <HAL_GPIO_Init+0x21c>
 80080ca:	2300      	movs	r3, #0
 80080cc:	69fa      	ldr	r2, [r7, #28]
 80080ce:	f002 0203 	and.w	r2, r2, #3
 80080d2:	0092      	lsls	r2, r2, #2
 80080d4:	4093      	lsls	r3, r2
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	4313      	orrs	r3, r2
 80080da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80080dc:	4935      	ldr	r1, [pc, #212]	; (80081b4 <HAL_GPIO_Init+0x304>)
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	089b      	lsrs	r3, r3, #2
 80080e2:	3302      	adds	r3, #2
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80080ea:	4b3a      	ldr	r3, [pc, #232]	; (80081d4 <HAL_GPIO_Init+0x324>)
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	43db      	mvns	r3, r3
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	4013      	ands	r3, r2
 80080f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	4313      	orrs	r3, r2
 800810c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800810e:	4a31      	ldr	r2, [pc, #196]	; (80081d4 <HAL_GPIO_Init+0x324>)
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008114:	4b2f      	ldr	r3, [pc, #188]	; (80081d4 <HAL_GPIO_Init+0x324>)
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	43db      	mvns	r3, r3
 800811e:	69ba      	ldr	r2, [r7, #24]
 8008120:	4013      	ands	r3, r2
 8008122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d003      	beq.n	8008138 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	4313      	orrs	r3, r2
 8008136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008138:	4a26      	ldr	r2, [pc, #152]	; (80081d4 <HAL_GPIO_Init+0x324>)
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800813e:	4b25      	ldr	r3, [pc, #148]	; (80081d4 <HAL_GPIO_Init+0x324>)
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	43db      	mvns	r3, r3
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	4013      	ands	r3, r2
 800814c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	4313      	orrs	r3, r2
 8008160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008162:	4a1c      	ldr	r2, [pc, #112]	; (80081d4 <HAL_GPIO_Init+0x324>)
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008168:	4b1a      	ldr	r3, [pc, #104]	; (80081d4 <HAL_GPIO_Init+0x324>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	43db      	mvns	r3, r3
 8008172:	69ba      	ldr	r2, [r7, #24]
 8008174:	4013      	ands	r3, r2
 8008176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008184:	69ba      	ldr	r2, [r7, #24]
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	4313      	orrs	r3, r2
 800818a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800818c:	4a11      	ldr	r2, [pc, #68]	; (80081d4 <HAL_GPIO_Init+0x324>)
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	3301      	adds	r3, #1
 8008196:	61fb      	str	r3, [r7, #28]
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	2b0f      	cmp	r3, #15
 800819c:	f67f ae96 	bls.w	8007ecc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80081a0:	bf00      	nop
 80081a2:	bf00      	nop
 80081a4:	3724      	adds	r7, #36	; 0x24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	40023800 	.word	0x40023800
 80081b4:	40013800 	.word	0x40013800
 80081b8:	40020000 	.word	0x40020000
 80081bc:	40020400 	.word	0x40020400
 80081c0:	40020800 	.word	0x40020800
 80081c4:	40020c00 	.word	0x40020c00
 80081c8:	40021000 	.word	0x40021000
 80081cc:	40021400 	.word	0x40021400
 80081d0:	40021800 	.word	0x40021800
 80081d4:	40013c00 	.word	0x40013c00

080081d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	691a      	ldr	r2, [r3, #16]
 80081e8:	887b      	ldrh	r3, [r7, #2]
 80081ea:	4013      	ands	r3, r2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80081f0:	2301      	movs	r3, #1
 80081f2:	73fb      	strb	r3, [r7, #15]
 80081f4:	e001      	b.n	80081fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	807b      	strh	r3, [r7, #2]
 8008214:	4613      	mov	r3, r2
 8008216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008218:	787b      	ldrb	r3, [r7, #1]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800821e:	887a      	ldrh	r2, [r7, #2]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008224:	e003      	b.n	800822e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008226:	887b      	ldrh	r3, [r7, #2]
 8008228:	041a      	lsls	r2, r3, #16
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	619a      	str	r2, [r3, #24]
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800823a:	b480      	push	{r7}
 800823c:	b085      	sub	sp, #20
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	460b      	mov	r3, r1
 8008244:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800824c:	887a      	ldrh	r2, [r7, #2]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	4013      	ands	r3, r2
 8008252:	041a      	lsls	r2, r3, #16
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	43d9      	mvns	r1, r3
 8008258:	887b      	ldrh	r3, [r7, #2]
 800825a:	400b      	ands	r3, r1
 800825c:	431a      	orrs	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	619a      	str	r2, [r3, #24]
}
 8008262:	bf00      	nop
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
	...

08008270 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800827a:	4b08      	ldr	r3, [pc, #32]	; (800829c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800827c:	695a      	ldr	r2, [r3, #20]
 800827e:	88fb      	ldrh	r3, [r7, #6]
 8008280:	4013      	ands	r3, r2
 8008282:	2b00      	cmp	r3, #0
 8008284:	d006      	beq.n	8008294 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008286:	4a05      	ldr	r2, [pc, #20]	; (800829c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008288:	88fb      	ldrh	r3, [r7, #6]
 800828a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800828c:	88fb      	ldrh	r3, [r7, #6]
 800828e:	4618      	mov	r0, r3
 8008290:	f7fd fa98 	bl	80057c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	40013c00 	.word	0x40013c00

080082a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80082aa:	2300      	movs	r3, #0
 80082ac:	603b      	str	r3, [r7, #0]
 80082ae:	4b20      	ldr	r3, [pc, #128]	; (8008330 <HAL_PWREx_EnableOverDrive+0x90>)
 80082b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b2:	4a1f      	ldr	r2, [pc, #124]	; (8008330 <HAL_PWREx_EnableOverDrive+0x90>)
 80082b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b8:	6413      	str	r3, [r2, #64]	; 0x40
 80082ba:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <HAL_PWREx_EnableOverDrive+0x90>)
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80082c6:	4b1b      	ldr	r3, [pc, #108]	; (8008334 <HAL_PWREx_EnableOverDrive+0x94>)
 80082c8:	2201      	movs	r2, #1
 80082ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082cc:	f7fe f8f6 	bl	80064bc <HAL_GetTick>
 80082d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80082d2:	e009      	b.n	80082e8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80082d4:	f7fe f8f2 	bl	80064bc <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082e2:	d901      	bls.n	80082e8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e01f      	b.n	8008328 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80082e8:	4b13      	ldr	r3, [pc, #76]	; (8008338 <HAL_PWREx_EnableOverDrive+0x98>)
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082f4:	d1ee      	bne.n	80082d4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80082f6:	4b11      	ldr	r3, [pc, #68]	; (800833c <HAL_PWREx_EnableOverDrive+0x9c>)
 80082f8:	2201      	movs	r2, #1
 80082fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082fc:	f7fe f8de 	bl	80064bc <HAL_GetTick>
 8008300:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008302:	e009      	b.n	8008318 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008304:	f7fe f8da 	bl	80064bc <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008312:	d901      	bls.n	8008318 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e007      	b.n	8008328 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008318:	4b07      	ldr	r3, [pc, #28]	; (8008338 <HAL_PWREx_EnableOverDrive+0x98>)
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008324:	d1ee      	bne.n	8008304 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	40023800 	.word	0x40023800
 8008334:	420e0040 	.word	0x420e0040
 8008338:	40007000 	.word	0x40007000
 800833c:	420e0044 	.word	0x420e0044

08008340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e0cc      	b.n	80084ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008354:	4b68      	ldr	r3, [pc, #416]	; (80084f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 030f 	and.w	r3, r3, #15
 800835c:	683a      	ldr	r2, [r7, #0]
 800835e:	429a      	cmp	r2, r3
 8008360:	d90c      	bls.n	800837c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008362:	4b65      	ldr	r3, [pc, #404]	; (80084f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008364:	683a      	ldr	r2, [r7, #0]
 8008366:	b2d2      	uxtb	r2, r2
 8008368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800836a:	4b63      	ldr	r3, [pc, #396]	; (80084f8 <HAL_RCC_ClockConfig+0x1b8>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	429a      	cmp	r2, r3
 8008376:	d001      	beq.n	800837c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e0b8      	b.n	80084ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0302 	and.w	r3, r3, #2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d020      	beq.n	80083ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008394:	4b59      	ldr	r3, [pc, #356]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	4a58      	ldr	r2, [pc, #352]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 800839a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800839e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0308 	and.w	r3, r3, #8
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d005      	beq.n	80083b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80083ac:	4b53      	ldr	r3, [pc, #332]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	4a52      	ldr	r2, [pc, #328]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80083b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80083b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083b8:	4b50      	ldr	r3, [pc, #320]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	494d      	ldr	r1, [pc, #308]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d044      	beq.n	8008460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d107      	bne.n	80083ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083de:	4b47      	ldr	r3, [pc, #284]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d119      	bne.n	800841e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e07f      	b.n	80084ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d003      	beq.n	80083fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d107      	bne.n	800840e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083fe:	4b3f      	ldr	r3, [pc, #252]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d109      	bne.n	800841e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e06f      	b.n	80084ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800840e:	4b3b      	ldr	r3, [pc, #236]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e067      	b.n	80084ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800841e:	4b37      	ldr	r3, [pc, #220]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f023 0203 	bic.w	r2, r3, #3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	4934      	ldr	r1, [pc, #208]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 800842c:	4313      	orrs	r3, r2
 800842e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008430:	f7fe f844 	bl	80064bc <HAL_GetTick>
 8008434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008436:	e00a      	b.n	800844e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008438:	f7fe f840 	bl	80064bc <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	f241 3288 	movw	r2, #5000	; 0x1388
 8008446:	4293      	cmp	r3, r2
 8008448:	d901      	bls.n	800844e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e04f      	b.n	80084ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800844e:	4b2b      	ldr	r3, [pc, #172]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 020c 	and.w	r2, r3, #12
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	429a      	cmp	r2, r3
 800845e:	d1eb      	bne.n	8008438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008460:	4b25      	ldr	r3, [pc, #148]	; (80084f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	429a      	cmp	r2, r3
 800846c:	d20c      	bcs.n	8008488 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800846e:	4b22      	ldr	r3, [pc, #136]	; (80084f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008476:	4b20      	ldr	r3, [pc, #128]	; (80084f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 030f 	and.w	r3, r3, #15
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	429a      	cmp	r2, r3
 8008482:	d001      	beq.n	8008488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e032      	b.n	80084ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0304 	and.w	r3, r3, #4
 8008490:	2b00      	cmp	r3, #0
 8008492:	d008      	beq.n	80084a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008494:	4b19      	ldr	r3, [pc, #100]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	4916      	ldr	r1, [pc, #88]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0308 	and.w	r3, r3, #8
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d009      	beq.n	80084c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084b2:	4b12      	ldr	r3, [pc, #72]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	490e      	ldr	r1, [pc, #56]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80084c6:	f000 f855 	bl	8008574 <HAL_RCC_GetSysClockFreq>
 80084ca:	4602      	mov	r2, r0
 80084cc:	4b0b      	ldr	r3, [pc, #44]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	091b      	lsrs	r3, r3, #4
 80084d2:	f003 030f 	and.w	r3, r3, #15
 80084d6:	490a      	ldr	r1, [pc, #40]	; (8008500 <HAL_RCC_ClockConfig+0x1c0>)
 80084d8:	5ccb      	ldrb	r3, [r1, r3]
 80084da:	fa22 f303 	lsr.w	r3, r2, r3
 80084de:	4a09      	ldr	r2, [pc, #36]	; (8008504 <HAL_RCC_ClockConfig+0x1c4>)
 80084e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80084e2:	4b09      	ldr	r3, [pc, #36]	; (8008508 <HAL_RCC_ClockConfig+0x1c8>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fd ffa4 	bl	8006434 <HAL_InitTick>

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	40023c00 	.word	0x40023c00
 80084fc:	40023800 	.word	0x40023800
 8008500:	08010260 	.word	0x08010260
 8008504:	20000090 	.word	0x20000090
 8008508:	20000094 	.word	0x20000094

0800850c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800850c:	b480      	push	{r7}
 800850e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008510:	4b03      	ldr	r3, [pc, #12]	; (8008520 <HAL_RCC_GetHCLKFreq+0x14>)
 8008512:	681b      	ldr	r3, [r3, #0]
}
 8008514:	4618      	mov	r0, r3
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	20000090 	.word	0x20000090

08008524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008528:	f7ff fff0 	bl	800850c <HAL_RCC_GetHCLKFreq>
 800852c:	4602      	mov	r2, r0
 800852e:	4b05      	ldr	r3, [pc, #20]	; (8008544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	0a9b      	lsrs	r3, r3, #10
 8008534:	f003 0307 	and.w	r3, r3, #7
 8008538:	4903      	ldr	r1, [pc, #12]	; (8008548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800853a:	5ccb      	ldrb	r3, [r1, r3]
 800853c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008540:	4618      	mov	r0, r3
 8008542:	bd80      	pop	{r7, pc}
 8008544:	40023800 	.word	0x40023800
 8008548:	08010270 	.word	0x08010270

0800854c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008550:	f7ff ffdc 	bl	800850c <HAL_RCC_GetHCLKFreq>
 8008554:	4602      	mov	r2, r0
 8008556:	4b05      	ldr	r3, [pc, #20]	; (800856c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	0b5b      	lsrs	r3, r3, #13
 800855c:	f003 0307 	and.w	r3, r3, #7
 8008560:	4903      	ldr	r1, [pc, #12]	; (8008570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008562:	5ccb      	ldrb	r3, [r1, r3]
 8008564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008568:	4618      	mov	r0, r3
 800856a:	bd80      	pop	{r7, pc}
 800856c:	40023800 	.word	0x40023800
 8008570:	08010270 	.word	0x08010270

08008574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008578:	b0ae      	sub	sp, #184	; 0xb8
 800857a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8008582:	2300      	movs	r3, #0
 8008584:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800858e:	2300      	movs	r3, #0
 8008590:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8008594:	2300      	movs	r3, #0
 8008596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800859a:	4bcb      	ldr	r3, [pc, #812]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f003 030c 	and.w	r3, r3, #12
 80085a2:	2b0c      	cmp	r3, #12
 80085a4:	f200 8206 	bhi.w	80089b4 <HAL_RCC_GetSysClockFreq+0x440>
 80085a8:	a201      	add	r2, pc, #4	; (adr r2, 80085b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80085aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ae:	bf00      	nop
 80085b0:	080085e5 	.word	0x080085e5
 80085b4:	080089b5 	.word	0x080089b5
 80085b8:	080089b5 	.word	0x080089b5
 80085bc:	080089b5 	.word	0x080089b5
 80085c0:	080085ed 	.word	0x080085ed
 80085c4:	080089b5 	.word	0x080089b5
 80085c8:	080089b5 	.word	0x080089b5
 80085cc:	080089b5 	.word	0x080089b5
 80085d0:	080085f5 	.word	0x080085f5
 80085d4:	080089b5 	.word	0x080089b5
 80085d8:	080089b5 	.word	0x080089b5
 80085dc:	080089b5 	.word	0x080089b5
 80085e0:	080087e5 	.word	0x080087e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085e4:	4bb9      	ldr	r3, [pc, #740]	; (80088cc <HAL_RCC_GetSysClockFreq+0x358>)
 80085e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80085ea:	e1e7      	b.n	80089bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085ec:	4bb8      	ldr	r3, [pc, #736]	; (80088d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80085ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80085f2:	e1e3      	b.n	80089bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085f4:	4bb4      	ldr	r3, [pc, #720]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008600:	4bb1      	ldr	r3, [pc, #708]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d071      	beq.n	80086f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800860c:	4bae      	ldr	r3, [pc, #696]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	099b      	lsrs	r3, r3, #6
 8008612:	2200      	movs	r2, #0
 8008614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008618:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800861c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008624:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008628:	2300      	movs	r3, #0
 800862a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800862e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008632:	4622      	mov	r2, r4
 8008634:	462b      	mov	r3, r5
 8008636:	f04f 0000 	mov.w	r0, #0
 800863a:	f04f 0100 	mov.w	r1, #0
 800863e:	0159      	lsls	r1, r3, #5
 8008640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008644:	0150      	lsls	r0, r2, #5
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	4621      	mov	r1, r4
 800864c:	1a51      	subs	r1, r2, r1
 800864e:	6439      	str	r1, [r7, #64]	; 0x40
 8008650:	4629      	mov	r1, r5
 8008652:	eb63 0301 	sbc.w	r3, r3, r1
 8008656:	647b      	str	r3, [r7, #68]	; 0x44
 8008658:	f04f 0200 	mov.w	r2, #0
 800865c:	f04f 0300 	mov.w	r3, #0
 8008660:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008664:	4649      	mov	r1, r9
 8008666:	018b      	lsls	r3, r1, #6
 8008668:	4641      	mov	r1, r8
 800866a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800866e:	4641      	mov	r1, r8
 8008670:	018a      	lsls	r2, r1, #6
 8008672:	4641      	mov	r1, r8
 8008674:	1a51      	subs	r1, r2, r1
 8008676:	63b9      	str	r1, [r7, #56]	; 0x38
 8008678:	4649      	mov	r1, r9
 800867a:	eb63 0301 	sbc.w	r3, r3, r1
 800867e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008680:	f04f 0200 	mov.w	r2, #0
 8008684:	f04f 0300 	mov.w	r3, #0
 8008688:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800868c:	4649      	mov	r1, r9
 800868e:	00cb      	lsls	r3, r1, #3
 8008690:	4641      	mov	r1, r8
 8008692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008696:	4641      	mov	r1, r8
 8008698:	00ca      	lsls	r2, r1, #3
 800869a:	4610      	mov	r0, r2
 800869c:	4619      	mov	r1, r3
 800869e:	4603      	mov	r3, r0
 80086a0:	4622      	mov	r2, r4
 80086a2:	189b      	adds	r3, r3, r2
 80086a4:	633b      	str	r3, [r7, #48]	; 0x30
 80086a6:	462b      	mov	r3, r5
 80086a8:	460a      	mov	r2, r1
 80086aa:	eb42 0303 	adc.w	r3, r2, r3
 80086ae:	637b      	str	r3, [r7, #52]	; 0x34
 80086b0:	f04f 0200 	mov.w	r2, #0
 80086b4:	f04f 0300 	mov.w	r3, #0
 80086b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80086bc:	4629      	mov	r1, r5
 80086be:	024b      	lsls	r3, r1, #9
 80086c0:	4621      	mov	r1, r4
 80086c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80086c6:	4621      	mov	r1, r4
 80086c8:	024a      	lsls	r2, r1, #9
 80086ca:	4610      	mov	r0, r2
 80086cc:	4619      	mov	r1, r3
 80086ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80086dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80086e0:	f7f8 fad2 	bl	8000c88 <__aeabi_uldivmod>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4613      	mov	r3, r2
 80086ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086ee:	e067      	b.n	80087c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086f0:	4b75      	ldr	r3, [pc, #468]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	099b      	lsrs	r3, r3, #6
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008700:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008708:	67bb      	str	r3, [r7, #120]	; 0x78
 800870a:	2300      	movs	r3, #0
 800870c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800870e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008712:	4622      	mov	r2, r4
 8008714:	462b      	mov	r3, r5
 8008716:	f04f 0000 	mov.w	r0, #0
 800871a:	f04f 0100 	mov.w	r1, #0
 800871e:	0159      	lsls	r1, r3, #5
 8008720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008724:	0150      	lsls	r0, r2, #5
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	4621      	mov	r1, r4
 800872c:	1a51      	subs	r1, r2, r1
 800872e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008730:	4629      	mov	r1, r5
 8008732:	eb63 0301 	sbc.w	r3, r3, r1
 8008736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008738:	f04f 0200 	mov.w	r2, #0
 800873c:	f04f 0300 	mov.w	r3, #0
 8008740:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008744:	4649      	mov	r1, r9
 8008746:	018b      	lsls	r3, r1, #6
 8008748:	4641      	mov	r1, r8
 800874a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800874e:	4641      	mov	r1, r8
 8008750:	018a      	lsls	r2, r1, #6
 8008752:	4641      	mov	r1, r8
 8008754:	ebb2 0a01 	subs.w	sl, r2, r1
 8008758:	4649      	mov	r1, r9
 800875a:	eb63 0b01 	sbc.w	fp, r3, r1
 800875e:	f04f 0200 	mov.w	r2, #0
 8008762:	f04f 0300 	mov.w	r3, #0
 8008766:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800876a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800876e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008772:	4692      	mov	sl, r2
 8008774:	469b      	mov	fp, r3
 8008776:	4623      	mov	r3, r4
 8008778:	eb1a 0303 	adds.w	r3, sl, r3
 800877c:	623b      	str	r3, [r7, #32]
 800877e:	462b      	mov	r3, r5
 8008780:	eb4b 0303 	adc.w	r3, fp, r3
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	f04f 0300 	mov.w	r3, #0
 800878e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008792:	4629      	mov	r1, r5
 8008794:	028b      	lsls	r3, r1, #10
 8008796:	4621      	mov	r1, r4
 8008798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800879c:	4621      	mov	r1, r4
 800879e:	028a      	lsls	r2, r1, #10
 80087a0:	4610      	mov	r0, r2
 80087a2:	4619      	mov	r1, r3
 80087a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087a8:	2200      	movs	r2, #0
 80087aa:	673b      	str	r3, [r7, #112]	; 0x70
 80087ac:	677a      	str	r2, [r7, #116]	; 0x74
 80087ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80087b2:	f7f8 fa69 	bl	8000c88 <__aeabi_uldivmod>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4613      	mov	r3, r2
 80087bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087c0:	4b41      	ldr	r3, [pc, #260]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	0c1b      	lsrs	r3, r3, #16
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	3301      	adds	r3, #1
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80087d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087da:	fbb2 f3f3 	udiv	r3, r2, r3
 80087de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80087e2:	e0eb      	b.n	80089bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087e4:	4b38      	ldr	r3, [pc, #224]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087f0:	4b35      	ldr	r3, [pc, #212]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d06b      	beq.n	80088d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087fc:	4b32      	ldr	r3, [pc, #200]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	099b      	lsrs	r3, r3, #6
 8008802:	2200      	movs	r2, #0
 8008804:	66bb      	str	r3, [r7, #104]	; 0x68
 8008806:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800880a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800880e:	663b      	str	r3, [r7, #96]	; 0x60
 8008810:	2300      	movs	r3, #0
 8008812:	667b      	str	r3, [r7, #100]	; 0x64
 8008814:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008818:	4622      	mov	r2, r4
 800881a:	462b      	mov	r3, r5
 800881c:	f04f 0000 	mov.w	r0, #0
 8008820:	f04f 0100 	mov.w	r1, #0
 8008824:	0159      	lsls	r1, r3, #5
 8008826:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800882a:	0150      	lsls	r0, r2, #5
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4621      	mov	r1, r4
 8008832:	1a51      	subs	r1, r2, r1
 8008834:	61b9      	str	r1, [r7, #24]
 8008836:	4629      	mov	r1, r5
 8008838:	eb63 0301 	sbc.w	r3, r3, r1
 800883c:	61fb      	str	r3, [r7, #28]
 800883e:	f04f 0200 	mov.w	r2, #0
 8008842:	f04f 0300 	mov.w	r3, #0
 8008846:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800884a:	4659      	mov	r1, fp
 800884c:	018b      	lsls	r3, r1, #6
 800884e:	4651      	mov	r1, sl
 8008850:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008854:	4651      	mov	r1, sl
 8008856:	018a      	lsls	r2, r1, #6
 8008858:	4651      	mov	r1, sl
 800885a:	ebb2 0801 	subs.w	r8, r2, r1
 800885e:	4659      	mov	r1, fp
 8008860:	eb63 0901 	sbc.w	r9, r3, r1
 8008864:	f04f 0200 	mov.w	r2, #0
 8008868:	f04f 0300 	mov.w	r3, #0
 800886c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008870:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008874:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008878:	4690      	mov	r8, r2
 800887a:	4699      	mov	r9, r3
 800887c:	4623      	mov	r3, r4
 800887e:	eb18 0303 	adds.w	r3, r8, r3
 8008882:	613b      	str	r3, [r7, #16]
 8008884:	462b      	mov	r3, r5
 8008886:	eb49 0303 	adc.w	r3, r9, r3
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	f04f 0200 	mov.w	r2, #0
 8008890:	f04f 0300 	mov.w	r3, #0
 8008894:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008898:	4629      	mov	r1, r5
 800889a:	024b      	lsls	r3, r1, #9
 800889c:	4621      	mov	r1, r4
 800889e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80088a2:	4621      	mov	r1, r4
 80088a4:	024a      	lsls	r2, r1, #9
 80088a6:	4610      	mov	r0, r2
 80088a8:	4619      	mov	r1, r3
 80088aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088ae:	2200      	movs	r2, #0
 80088b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80088b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80088b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80088b8:	f7f8 f9e6 	bl	8000c88 <__aeabi_uldivmod>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4613      	mov	r3, r2
 80088c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088c6:	e065      	b.n	8008994 <HAL_RCC_GetSysClockFreq+0x420>
 80088c8:	40023800 	.word	0x40023800
 80088cc:	00f42400 	.word	0x00f42400
 80088d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088d4:	4b3d      	ldr	r3, [pc, #244]	; (80089cc <HAL_RCC_GetSysClockFreq+0x458>)
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	099b      	lsrs	r3, r3, #6
 80088da:	2200      	movs	r2, #0
 80088dc:	4618      	mov	r0, r3
 80088de:	4611      	mov	r1, r2
 80088e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80088e4:	653b      	str	r3, [r7, #80]	; 0x50
 80088e6:	2300      	movs	r3, #0
 80088e8:	657b      	str	r3, [r7, #84]	; 0x54
 80088ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80088ee:	4642      	mov	r2, r8
 80088f0:	464b      	mov	r3, r9
 80088f2:	f04f 0000 	mov.w	r0, #0
 80088f6:	f04f 0100 	mov.w	r1, #0
 80088fa:	0159      	lsls	r1, r3, #5
 80088fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008900:	0150      	lsls	r0, r2, #5
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4641      	mov	r1, r8
 8008908:	1a51      	subs	r1, r2, r1
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	4649      	mov	r1, r9
 800890e:	eb63 0301 	sbc.w	r3, r3, r1
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	f04f 0200 	mov.w	r2, #0
 8008918:	f04f 0300 	mov.w	r3, #0
 800891c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008920:	4659      	mov	r1, fp
 8008922:	018b      	lsls	r3, r1, #6
 8008924:	4651      	mov	r1, sl
 8008926:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800892a:	4651      	mov	r1, sl
 800892c:	018a      	lsls	r2, r1, #6
 800892e:	4651      	mov	r1, sl
 8008930:	1a54      	subs	r4, r2, r1
 8008932:	4659      	mov	r1, fp
 8008934:	eb63 0501 	sbc.w	r5, r3, r1
 8008938:	f04f 0200 	mov.w	r2, #0
 800893c:	f04f 0300 	mov.w	r3, #0
 8008940:	00eb      	lsls	r3, r5, #3
 8008942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008946:	00e2      	lsls	r2, r4, #3
 8008948:	4614      	mov	r4, r2
 800894a:	461d      	mov	r5, r3
 800894c:	4643      	mov	r3, r8
 800894e:	18e3      	adds	r3, r4, r3
 8008950:	603b      	str	r3, [r7, #0]
 8008952:	464b      	mov	r3, r9
 8008954:	eb45 0303 	adc.w	r3, r5, r3
 8008958:	607b      	str	r3, [r7, #4]
 800895a:	f04f 0200 	mov.w	r2, #0
 800895e:	f04f 0300 	mov.w	r3, #0
 8008962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008966:	4629      	mov	r1, r5
 8008968:	028b      	lsls	r3, r1, #10
 800896a:	4621      	mov	r1, r4
 800896c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008970:	4621      	mov	r1, r4
 8008972:	028a      	lsls	r2, r1, #10
 8008974:	4610      	mov	r0, r2
 8008976:	4619      	mov	r1, r3
 8008978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800897c:	2200      	movs	r2, #0
 800897e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008980:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008982:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008986:	f7f8 f97f 	bl	8000c88 <__aeabi_uldivmod>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4613      	mov	r3, r2
 8008990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008994:	4b0d      	ldr	r3, [pc, #52]	; (80089cc <HAL_RCC_GetSysClockFreq+0x458>)
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	0f1b      	lsrs	r3, r3, #28
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80089a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80089a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80089b2:	e003      	b.n	80089bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80089b4:	4b06      	ldr	r3, [pc, #24]	; (80089d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80089b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80089ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80089bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	37b8      	adds	r7, #184	; 0xb8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089ca:	bf00      	nop
 80089cc:	40023800 	.word	0x40023800
 80089d0:	00f42400 	.word	0x00f42400

080089d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e28d      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 8083 	beq.w	8008afa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80089f4:	4b94      	ldr	r3, [pc, #592]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f003 030c 	and.w	r3, r3, #12
 80089fc:	2b04      	cmp	r3, #4
 80089fe:	d019      	beq.n	8008a34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008a00:	4b91      	ldr	r3, [pc, #580]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d106      	bne.n	8008a1a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008a0c:	4b8e      	ldr	r3, [pc, #568]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a18:	d00c      	beq.n	8008a34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a1a:	4b8b      	ldr	r3, [pc, #556]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008a22:	2b0c      	cmp	r3, #12
 8008a24:	d112      	bne.n	8008a4c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a26:	4b88      	ldr	r3, [pc, #544]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a32:	d10b      	bne.n	8008a4c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a34:	4b84      	ldr	r3, [pc, #528]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d05b      	beq.n	8008af8 <HAL_RCC_OscConfig+0x124>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d157      	bne.n	8008af8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e25a      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a54:	d106      	bne.n	8008a64 <HAL_RCC_OscConfig+0x90>
 8008a56:	4b7c      	ldr	r3, [pc, #496]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a7b      	ldr	r2, [pc, #492]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	e01d      	b.n	8008aa0 <HAL_RCC_OscConfig+0xcc>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a6c:	d10c      	bne.n	8008a88 <HAL_RCC_OscConfig+0xb4>
 8008a6e:	4b76      	ldr	r3, [pc, #472]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a75      	ldr	r2, [pc, #468]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	4b73      	ldr	r3, [pc, #460]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a72      	ldr	r2, [pc, #456]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a84:	6013      	str	r3, [r2, #0]
 8008a86:	e00b      	b.n	8008aa0 <HAL_RCC_OscConfig+0xcc>
 8008a88:	4b6f      	ldr	r3, [pc, #444]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a6e      	ldr	r2, [pc, #440]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	4b6c      	ldr	r3, [pc, #432]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a6b      	ldr	r2, [pc, #428]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d013      	beq.n	8008ad0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa8:	f7fd fd08 	bl	80064bc <HAL_GetTick>
 8008aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aae:	e008      	b.n	8008ac2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ab0:	f7fd fd04 	bl	80064bc <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	2b64      	cmp	r3, #100	; 0x64
 8008abc:	d901      	bls.n	8008ac2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e21f      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ac2:	4b61      	ldr	r3, [pc, #388]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0f0      	beq.n	8008ab0 <HAL_RCC_OscConfig+0xdc>
 8008ace:	e014      	b.n	8008afa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad0:	f7fd fcf4 	bl	80064bc <HAL_GetTick>
 8008ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ad6:	e008      	b.n	8008aea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ad8:	f7fd fcf0 	bl	80064bc <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	2b64      	cmp	r3, #100	; 0x64
 8008ae4:	d901      	bls.n	8008aea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e20b      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008aea:	4b57      	ldr	r3, [pc, #348]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1f0      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x104>
 8008af6:	e000      	b.n	8008afa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0302 	and.w	r3, r3, #2
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d06f      	beq.n	8008be6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008b06:	4b50      	ldr	r3, [pc, #320]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f003 030c 	and.w	r3, r3, #12
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d017      	beq.n	8008b42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008b12:	4b4d      	ldr	r3, [pc, #308]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008b1a:	2b08      	cmp	r3, #8
 8008b1c:	d105      	bne.n	8008b2a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008b1e:	4b4a      	ldr	r3, [pc, #296]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00b      	beq.n	8008b42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b2a:	4b47      	ldr	r3, [pc, #284]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008b32:	2b0c      	cmp	r3, #12
 8008b34:	d11c      	bne.n	8008b70 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b36:	4b44      	ldr	r3, [pc, #272]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d116      	bne.n	8008b70 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b42:	4b41      	ldr	r3, [pc, #260]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0302 	and.w	r3, r3, #2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d005      	beq.n	8008b5a <HAL_RCC_OscConfig+0x186>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d001      	beq.n	8008b5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e1d3      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b5a:	4b3b      	ldr	r3, [pc, #236]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	4937      	ldr	r1, [pc, #220]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b6e:	e03a      	b.n	8008be6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d020      	beq.n	8008bba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b78:	4b34      	ldr	r3, [pc, #208]	; (8008c4c <HAL_RCC_OscConfig+0x278>)
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b7e:	f7fd fc9d 	bl	80064bc <HAL_GetTick>
 8008b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b84:	e008      	b.n	8008b98 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b86:	f7fd fc99 	bl	80064bc <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d901      	bls.n	8008b98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008b94:	2303      	movs	r3, #3
 8008b96:	e1b4      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b98:	4b2b      	ldr	r3, [pc, #172]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d0f0      	beq.n	8008b86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ba4:	4b28      	ldr	r3, [pc, #160]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	00db      	lsls	r3, r3, #3
 8008bb2:	4925      	ldr	r1, [pc, #148]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	600b      	str	r3, [r1, #0]
 8008bb8:	e015      	b.n	8008be6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bba:	4b24      	ldr	r3, [pc, #144]	; (8008c4c <HAL_RCC_OscConfig+0x278>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc0:	f7fd fc7c 	bl	80064bc <HAL_GetTick>
 8008bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bc6:	e008      	b.n	8008bda <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bc8:	f7fd fc78 	bl	80064bc <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d901      	bls.n	8008bda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e193      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bda:	4b1b      	ldr	r3, [pc, #108]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1f0      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0308 	and.w	r3, r3, #8
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d036      	beq.n	8008c60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d016      	beq.n	8008c28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008bfa:	4b15      	ldr	r3, [pc, #84]	; (8008c50 <HAL_RCC_OscConfig+0x27c>)
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c00:	f7fd fc5c 	bl	80064bc <HAL_GetTick>
 8008c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c06:	e008      	b.n	8008c1a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c08:	f7fd fc58 	bl	80064bc <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d901      	bls.n	8008c1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e173      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c1a:	4b0b      	ldr	r3, [pc, #44]	; (8008c48 <HAL_RCC_OscConfig+0x274>)
 8008c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0f0      	beq.n	8008c08 <HAL_RCC_OscConfig+0x234>
 8008c26:	e01b      	b.n	8008c60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c28:	4b09      	ldr	r3, [pc, #36]	; (8008c50 <HAL_RCC_OscConfig+0x27c>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c2e:	f7fd fc45 	bl	80064bc <HAL_GetTick>
 8008c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c34:	e00e      	b.n	8008c54 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c36:	f7fd fc41 	bl	80064bc <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d907      	bls.n	8008c54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e15c      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
 8008c48:	40023800 	.word	0x40023800
 8008c4c:	42470000 	.word	0x42470000
 8008c50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c54:	4b8a      	ldr	r3, [pc, #552]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c58:	f003 0302 	and.w	r3, r3, #2
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1ea      	bne.n	8008c36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0304 	and.w	r3, r3, #4
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 8097 	beq.w	8008d9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c72:	4b83      	ldr	r3, [pc, #524]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10f      	bne.n	8008c9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60bb      	str	r3, [r7, #8]
 8008c82:	4b7f      	ldr	r3, [pc, #508]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c86:	4a7e      	ldr	r2, [pc, #504]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8008c8e:	4b7c      	ldr	r3, [pc, #496]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c96:	60bb      	str	r3, [r7, #8]
 8008c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c9e:	4b79      	ldr	r3, [pc, #484]	; (8008e84 <HAL_RCC_OscConfig+0x4b0>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d118      	bne.n	8008cdc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008caa:	4b76      	ldr	r3, [pc, #472]	; (8008e84 <HAL_RCC_OscConfig+0x4b0>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a75      	ldr	r2, [pc, #468]	; (8008e84 <HAL_RCC_OscConfig+0x4b0>)
 8008cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cb6:	f7fd fc01 	bl	80064bc <HAL_GetTick>
 8008cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cbc:	e008      	b.n	8008cd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cbe:	f7fd fbfd 	bl	80064bc <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d901      	bls.n	8008cd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e118      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cd0:	4b6c      	ldr	r3, [pc, #432]	; (8008e84 <HAL_RCC_OscConfig+0x4b0>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d0f0      	beq.n	8008cbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d106      	bne.n	8008cf2 <HAL_RCC_OscConfig+0x31e>
 8008ce4:	4b66      	ldr	r3, [pc, #408]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce8:	4a65      	ldr	r2, [pc, #404]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008cea:	f043 0301 	orr.w	r3, r3, #1
 8008cee:	6713      	str	r3, [r2, #112]	; 0x70
 8008cf0:	e01c      	b.n	8008d2c <HAL_RCC_OscConfig+0x358>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	2b05      	cmp	r3, #5
 8008cf8:	d10c      	bne.n	8008d14 <HAL_RCC_OscConfig+0x340>
 8008cfa:	4b61      	ldr	r3, [pc, #388]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cfe:	4a60      	ldr	r2, [pc, #384]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008d00:	f043 0304 	orr.w	r3, r3, #4
 8008d04:	6713      	str	r3, [r2, #112]	; 0x70
 8008d06:	4b5e      	ldr	r3, [pc, #376]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0a:	4a5d      	ldr	r2, [pc, #372]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008d0c:	f043 0301 	orr.w	r3, r3, #1
 8008d10:	6713      	str	r3, [r2, #112]	; 0x70
 8008d12:	e00b      	b.n	8008d2c <HAL_RCC_OscConfig+0x358>
 8008d14:	4b5a      	ldr	r3, [pc, #360]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d18:	4a59      	ldr	r2, [pc, #356]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008d1a:	f023 0301 	bic.w	r3, r3, #1
 8008d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8008d20:	4b57      	ldr	r3, [pc, #348]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d24:	4a56      	ldr	r2, [pc, #344]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008d26:	f023 0304 	bic.w	r3, r3, #4
 8008d2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d015      	beq.n	8008d60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d34:	f7fd fbc2 	bl	80064bc <HAL_GetTick>
 8008d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d3a:	e00a      	b.n	8008d52 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d3c:	f7fd fbbe 	bl	80064bc <HAL_GetTick>
 8008d40:	4602      	mov	r2, r0
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d901      	bls.n	8008d52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e0d7      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d52:	4b4b      	ldr	r3, [pc, #300]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d56:	f003 0302 	and.w	r3, r3, #2
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d0ee      	beq.n	8008d3c <HAL_RCC_OscConfig+0x368>
 8008d5e:	e014      	b.n	8008d8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d60:	f7fd fbac 	bl	80064bc <HAL_GetTick>
 8008d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d66:	e00a      	b.n	8008d7e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d68:	f7fd fba8 	bl	80064bc <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d901      	bls.n	8008d7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e0c1      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d7e:	4b40      	ldr	r3, [pc, #256]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d82:	f003 0302 	and.w	r3, r3, #2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1ee      	bne.n	8008d68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d105      	bne.n	8008d9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d90:	4b3b      	ldr	r3, [pc, #236]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d94:	4a3a      	ldr	r2, [pc, #232]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 80ad 	beq.w	8008f00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008da6:	4b36      	ldr	r3, [pc, #216]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f003 030c 	and.w	r3, r3, #12
 8008dae:	2b08      	cmp	r3, #8
 8008db0:	d060      	beq.n	8008e74 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d145      	bne.n	8008e46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dba:	4b33      	ldr	r3, [pc, #204]	; (8008e88 <HAL_RCC_OscConfig+0x4b4>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc0:	f7fd fb7c 	bl	80064bc <HAL_GetTick>
 8008dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dc6:	e008      	b.n	8008dda <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008dc8:	f7fd fb78 	bl	80064bc <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d901      	bls.n	8008dda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e093      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dda:	4b29      	ldr	r3, [pc, #164]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1f0      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69da      	ldr	r2, [r3, #28]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	431a      	orrs	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df4:	019b      	lsls	r3, r3, #6
 8008df6:	431a      	orrs	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfc:	085b      	lsrs	r3, r3, #1
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	041b      	lsls	r3, r3, #16
 8008e02:	431a      	orrs	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e08:	061b      	lsls	r3, r3, #24
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e10:	071b      	lsls	r3, r3, #28
 8008e12:	491b      	ldr	r1, [pc, #108]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e18:	4b1b      	ldr	r3, [pc, #108]	; (8008e88 <HAL_RCC_OscConfig+0x4b4>)
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e1e:	f7fd fb4d 	bl	80064bc <HAL_GetTick>
 8008e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e24:	e008      	b.n	8008e38 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e26:	f7fd fb49 	bl	80064bc <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d901      	bls.n	8008e38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e064      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e38:	4b11      	ldr	r3, [pc, #68]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0f0      	beq.n	8008e26 <HAL_RCC_OscConfig+0x452>
 8008e44:	e05c      	b.n	8008f00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e46:	4b10      	ldr	r3, [pc, #64]	; (8008e88 <HAL_RCC_OscConfig+0x4b4>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e4c:	f7fd fb36 	bl	80064bc <HAL_GetTick>
 8008e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e52:	e008      	b.n	8008e66 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e54:	f7fd fb32 	bl	80064bc <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d901      	bls.n	8008e66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e04d      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e66:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <HAL_RCC_OscConfig+0x4ac>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1f0      	bne.n	8008e54 <HAL_RCC_OscConfig+0x480>
 8008e72:	e045      	b.n	8008f00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d107      	bne.n	8008e8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e040      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
 8008e80:	40023800 	.word	0x40023800
 8008e84:	40007000 	.word	0x40007000
 8008e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e8c:	4b1f      	ldr	r3, [pc, #124]	; (8008f0c <HAL_RCC_OscConfig+0x538>)
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d030      	beq.n	8008efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d129      	bne.n	8008efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d122      	bne.n	8008efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d119      	bne.n	8008efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed2:	085b      	lsrs	r3, r3, #1
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d10f      	bne.n	8008efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d107      	bne.n	8008efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d001      	beq.n	8008f00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e000      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	40023800 	.word	0x40023800

08008f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e041      	b.n	8008fa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d106      	bne.n	8008f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7fc fe08 	bl	8005b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4610      	mov	r0, r2
 8008f50:	f001 f944 	bl	800a1dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
	...

08008fb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d001      	beq.n	8008fc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e046      	b.n	8009056 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a23      	ldr	r2, [pc, #140]	; (8009064 <HAL_TIM_Base_Start+0xb4>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d022      	beq.n	8009020 <HAL_TIM_Base_Start+0x70>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fe2:	d01d      	beq.n	8009020 <HAL_TIM_Base_Start+0x70>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a1f      	ldr	r2, [pc, #124]	; (8009068 <HAL_TIM_Base_Start+0xb8>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d018      	beq.n	8009020 <HAL_TIM_Base_Start+0x70>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a1e      	ldr	r2, [pc, #120]	; (800906c <HAL_TIM_Base_Start+0xbc>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d013      	beq.n	8009020 <HAL_TIM_Base_Start+0x70>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a1c      	ldr	r2, [pc, #112]	; (8009070 <HAL_TIM_Base_Start+0xc0>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d00e      	beq.n	8009020 <HAL_TIM_Base_Start+0x70>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a1b      	ldr	r2, [pc, #108]	; (8009074 <HAL_TIM_Base_Start+0xc4>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d009      	beq.n	8009020 <HAL_TIM_Base_Start+0x70>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a19      	ldr	r2, [pc, #100]	; (8009078 <HAL_TIM_Base_Start+0xc8>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d004      	beq.n	8009020 <HAL_TIM_Base_Start+0x70>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a18      	ldr	r2, [pc, #96]	; (800907c <HAL_TIM_Base_Start+0xcc>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d111      	bne.n	8009044 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f003 0307 	and.w	r3, r3, #7
 800902a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2b06      	cmp	r3, #6
 8009030:	d010      	beq.n	8009054 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f042 0201 	orr.w	r2, r2, #1
 8009040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009042:	e007      	b.n	8009054 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3714      	adds	r7, #20
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	40010000 	.word	0x40010000
 8009068:	40000400 	.word	0x40000400
 800906c:	40000800 	.word	0x40000800
 8009070:	40000c00 	.word	0x40000c00
 8009074:	40010400 	.word	0x40010400
 8009078:	40014000 	.word	0x40014000
 800907c:	40001800 	.word	0x40001800

08009080 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e041      	b.n	8009116 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f839 	bl	800911e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3304      	adds	r3, #4
 80090bc:	4619      	mov	r1, r3
 80090be:	4610      	mov	r0, r2
 80090c0:	f001 f88c 	bl	800a1dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800911e:	b480      	push	{r7}
 8009120:	b083      	sub	sp, #12
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009126:	bf00      	nop
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
	...

08009134 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d109      	bne.n	8009158 <HAL_TIM_PWM_Start+0x24>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b01      	cmp	r3, #1
 800914e:	bf14      	ite	ne
 8009150:	2301      	movne	r3, #1
 8009152:	2300      	moveq	r3, #0
 8009154:	b2db      	uxtb	r3, r3
 8009156:	e022      	b.n	800919e <HAL_TIM_PWM_Start+0x6a>
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2b04      	cmp	r3, #4
 800915c:	d109      	bne.n	8009172 <HAL_TIM_PWM_Start+0x3e>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2b01      	cmp	r3, #1
 8009168:	bf14      	ite	ne
 800916a:	2301      	movne	r3, #1
 800916c:	2300      	moveq	r3, #0
 800916e:	b2db      	uxtb	r3, r3
 8009170:	e015      	b.n	800919e <HAL_TIM_PWM_Start+0x6a>
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	2b08      	cmp	r3, #8
 8009176:	d109      	bne.n	800918c <HAL_TIM_PWM_Start+0x58>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b01      	cmp	r3, #1
 8009182:	bf14      	ite	ne
 8009184:	2301      	movne	r3, #1
 8009186:	2300      	moveq	r3, #0
 8009188:	b2db      	uxtb	r3, r3
 800918a:	e008      	b.n	800919e <HAL_TIM_PWM_Start+0x6a>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b01      	cmp	r3, #1
 8009196:	bf14      	ite	ne
 8009198:	2301      	movne	r3, #1
 800919a:	2300      	moveq	r3, #0
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e07c      	b.n	80092a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d104      	bne.n	80091b6 <HAL_TIM_PWM_Start+0x82>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2202      	movs	r2, #2
 80091b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091b4:	e013      	b.n	80091de <HAL_TIM_PWM_Start+0xaa>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	d104      	bne.n	80091c6 <HAL_TIM_PWM_Start+0x92>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2202      	movs	r2, #2
 80091c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091c4:	e00b      	b.n	80091de <HAL_TIM_PWM_Start+0xaa>
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	2b08      	cmp	r3, #8
 80091ca:	d104      	bne.n	80091d6 <HAL_TIM_PWM_Start+0xa2>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2202      	movs	r2, #2
 80091d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091d4:	e003      	b.n	80091de <HAL_TIM_PWM_Start+0xaa>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2202      	movs	r2, #2
 80091da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2201      	movs	r2, #1
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f001 fc0c 	bl	800aa04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a2d      	ldr	r2, [pc, #180]	; (80092a8 <HAL_TIM_PWM_Start+0x174>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d004      	beq.n	8009200 <HAL_TIM_PWM_Start+0xcc>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a2c      	ldr	r2, [pc, #176]	; (80092ac <HAL_TIM_PWM_Start+0x178>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d101      	bne.n	8009204 <HAL_TIM_PWM_Start+0xd0>
 8009200:	2301      	movs	r3, #1
 8009202:	e000      	b.n	8009206 <HAL_TIM_PWM_Start+0xd2>
 8009204:	2300      	movs	r3, #0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d007      	beq.n	800921a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009218:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a22      	ldr	r2, [pc, #136]	; (80092a8 <HAL_TIM_PWM_Start+0x174>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d022      	beq.n	800926a <HAL_TIM_PWM_Start+0x136>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800922c:	d01d      	beq.n	800926a <HAL_TIM_PWM_Start+0x136>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a1f      	ldr	r2, [pc, #124]	; (80092b0 <HAL_TIM_PWM_Start+0x17c>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d018      	beq.n	800926a <HAL_TIM_PWM_Start+0x136>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a1d      	ldr	r2, [pc, #116]	; (80092b4 <HAL_TIM_PWM_Start+0x180>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d013      	beq.n	800926a <HAL_TIM_PWM_Start+0x136>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a1c      	ldr	r2, [pc, #112]	; (80092b8 <HAL_TIM_PWM_Start+0x184>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d00e      	beq.n	800926a <HAL_TIM_PWM_Start+0x136>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a16      	ldr	r2, [pc, #88]	; (80092ac <HAL_TIM_PWM_Start+0x178>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d009      	beq.n	800926a <HAL_TIM_PWM_Start+0x136>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a18      	ldr	r2, [pc, #96]	; (80092bc <HAL_TIM_PWM_Start+0x188>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d004      	beq.n	800926a <HAL_TIM_PWM_Start+0x136>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a16      	ldr	r2, [pc, #88]	; (80092c0 <HAL_TIM_PWM_Start+0x18c>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d111      	bne.n	800928e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f003 0307 	and.w	r3, r3, #7
 8009274:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2b06      	cmp	r3, #6
 800927a:	d010      	beq.n	800929e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f042 0201 	orr.w	r2, r2, #1
 800928a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800928c:	e007      	b.n	800929e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f042 0201 	orr.w	r2, r2, #1
 800929c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	40010000 	.word	0x40010000
 80092ac:	40010400 	.word	0x40010400
 80092b0:	40000400 	.word	0x40000400
 80092b4:	40000800 	.word	0x40000800
 80092b8:	40000c00 	.word	0x40000c00
 80092bc:	40014000 	.word	0x40014000
 80092c0:	40001800 	.word	0x40001800

080092c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e041      	b.n	800935a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d106      	bne.n	80092f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f839 	bl	8009362 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2202      	movs	r2, #2
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	3304      	adds	r3, #4
 8009300:	4619      	mov	r1, r3
 8009302:	4610      	mov	r0, r2
 8009304:	f000 ff6a 	bl	800a1dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009362:	b480      	push	{r7}
 8009364:	b083      	sub	sp, #12
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800936a:	bf00      	nop
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
	...

08009378 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d104      	bne.n	800939a <HAL_TIM_IC_Start_DMA+0x22>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009396:	b2db      	uxtb	r3, r3
 8009398:	e013      	b.n	80093c2 <HAL_TIM_IC_Start_DMA+0x4a>
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	2b04      	cmp	r3, #4
 800939e:	d104      	bne.n	80093aa <HAL_TIM_IC_Start_DMA+0x32>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	e00b      	b.n	80093c2 <HAL_TIM_IC_Start_DMA+0x4a>
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2b08      	cmp	r3, #8
 80093ae:	d104      	bne.n	80093ba <HAL_TIM_IC_Start_DMA+0x42>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	e003      	b.n	80093c2 <HAL_TIM_IC_Start_DMA+0x4a>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d104      	bne.n	80093d4 <HAL_TIM_IC_Start_DMA+0x5c>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	e013      	b.n	80093fc <HAL_TIM_IC_Start_DMA+0x84>
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	2b04      	cmp	r3, #4
 80093d8:	d104      	bne.n	80093e4 <HAL_TIM_IC_Start_DMA+0x6c>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	e00b      	b.n	80093fc <HAL_TIM_IC_Start_DMA+0x84>
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2b08      	cmp	r3, #8
 80093e8:	d104      	bne.n	80093f4 <HAL_TIM_IC_Start_DMA+0x7c>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	e003      	b.n	80093fc <HAL_TIM_IC_Start_DMA+0x84>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80093fe:	7dbb      	ldrb	r3, [r7, #22]
 8009400:	2b02      	cmp	r3, #2
 8009402:	d002      	beq.n	800940a <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8009404:	7d7b      	ldrb	r3, [r7, #21]
 8009406:	2b02      	cmp	r3, #2
 8009408:	d101      	bne.n	800940e <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800940a:	2302      	movs	r3, #2
 800940c:	e146      	b.n	800969c <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800940e:	7dbb      	ldrb	r3, [r7, #22]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d143      	bne.n	800949c <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8009414:	7d7b      	ldrb	r3, [r7, #21]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d140      	bne.n	800949c <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d104      	bne.n	800942a <HAL_TIM_IC_Start_DMA+0xb2>
 8009420:	887b      	ldrh	r3, [r7, #2]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e138      	b.n	800969c <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d104      	bne.n	800943a <HAL_TIM_IC_Start_DMA+0xc2>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2202      	movs	r2, #2
 8009434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009438:	e013      	b.n	8009462 <HAL_TIM_IC_Start_DMA+0xea>
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	2b04      	cmp	r3, #4
 800943e:	d104      	bne.n	800944a <HAL_TIM_IC_Start_DMA+0xd2>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2202      	movs	r2, #2
 8009444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009448:	e00b      	b.n	8009462 <HAL_TIM_IC_Start_DMA+0xea>
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2b08      	cmp	r3, #8
 800944e:	d104      	bne.n	800945a <HAL_TIM_IC_Start_DMA+0xe2>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2202      	movs	r2, #2
 8009454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009458:	e003      	b.n	8009462 <HAL_TIM_IC_Start_DMA+0xea>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2202      	movs	r2, #2
 800945e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d104      	bne.n	8009472 <HAL_TIM_IC_Start_DMA+0xfa>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2202      	movs	r2, #2
 800946c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8009470:	e016      	b.n	80094a0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2b04      	cmp	r3, #4
 8009476:	d104      	bne.n	8009482 <HAL_TIM_IC_Start_DMA+0x10a>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2202      	movs	r2, #2
 800947c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8009480:	e00e      	b.n	80094a0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	2b08      	cmp	r3, #8
 8009486:	d104      	bne.n	8009492 <HAL_TIM_IC_Start_DMA+0x11a>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2202      	movs	r2, #2
 800948c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8009490:	e006      	b.n	80094a0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2202      	movs	r2, #2
 8009496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800949a:	e001      	b.n	80094a0 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e0fd      	b.n	800969c <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2201      	movs	r2, #1
 80094a6:	68b9      	ldr	r1, [r7, #8]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f001 faab 	bl	800aa04 <TIM_CCxChannelCmd>

  switch (Channel)
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2b0c      	cmp	r3, #12
 80094b2:	f200 80ad 	bhi.w	8009610 <HAL_TIM_IC_Start_DMA+0x298>
 80094b6:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <HAL_TIM_IC_Start_DMA+0x144>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	080094f1 	.word	0x080094f1
 80094c0:	08009611 	.word	0x08009611
 80094c4:	08009611 	.word	0x08009611
 80094c8:	08009611 	.word	0x08009611
 80094cc:	08009539 	.word	0x08009539
 80094d0:	08009611 	.word	0x08009611
 80094d4:	08009611 	.word	0x08009611
 80094d8:	08009611 	.word	0x08009611
 80094dc:	08009581 	.word	0x08009581
 80094e0:	08009611 	.word	0x08009611
 80094e4:	08009611 	.word	0x08009611
 80094e8:	08009611 	.word	0x08009611
 80094ec:	080095c9 	.word	0x080095c9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	4a6b      	ldr	r2, [pc, #428]	; (80096a4 <HAL_TIM_IC_Start_DMA+0x32c>)
 80094f6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	4a6a      	ldr	r2, [pc, #424]	; (80096a8 <HAL_TIM_IC_Start_DMA+0x330>)
 80094fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009504:	4a69      	ldr	r2, [pc, #420]	; (80096ac <HAL_TIM_IC_Start_DMA+0x334>)
 8009506:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	3334      	adds	r3, #52	; 0x34
 8009512:	4619      	mov	r1, r3
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	887b      	ldrh	r3, [r7, #2]
 8009518:	f7fd ff68 	bl	80073ec <HAL_DMA_Start_IT>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e0ba      	b.n	800969c <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68da      	ldr	r2, [r3, #12]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009534:	60da      	str	r2, [r3, #12]
      break;
 8009536:	e06e      	b.n	8009616 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953c:	4a59      	ldr	r2, [pc, #356]	; (80096a4 <HAL_TIM_IC_Start_DMA+0x32c>)
 800953e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009544:	4a58      	ldr	r2, [pc, #352]	; (80096a8 <HAL_TIM_IC_Start_DMA+0x330>)
 8009546:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954c:	4a57      	ldr	r2, [pc, #348]	; (80096ac <HAL_TIM_IC_Start_DMA+0x334>)
 800954e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	3338      	adds	r3, #56	; 0x38
 800955a:	4619      	mov	r1, r3
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	887b      	ldrh	r3, [r7, #2]
 8009560:	f7fd ff44 	bl	80073ec <HAL_DMA_Start_IT>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e096      	b.n	800969c <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68da      	ldr	r2, [r3, #12]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800957c:	60da      	str	r2, [r3, #12]
      break;
 800957e:	e04a      	b.n	8009616 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	4a47      	ldr	r2, [pc, #284]	; (80096a4 <HAL_TIM_IC_Start_DMA+0x32c>)
 8009586:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958c:	4a46      	ldr	r2, [pc, #280]	; (80096a8 <HAL_TIM_IC_Start_DMA+0x330>)
 800958e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009594:	4a45      	ldr	r2, [pc, #276]	; (80096ac <HAL_TIM_IC_Start_DMA+0x334>)
 8009596:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	333c      	adds	r3, #60	; 0x3c
 80095a2:	4619      	mov	r1, r3
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	887b      	ldrh	r3, [r7, #2]
 80095a8:	f7fd ff20 	bl	80073ec <HAL_DMA_Start_IT>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e072      	b.n	800969c <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68da      	ldr	r2, [r3, #12]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095c4:	60da      	str	r2, [r3, #12]
      break;
 80095c6:	e026      	b.n	8009616 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095cc:	4a35      	ldr	r2, [pc, #212]	; (80096a4 <HAL_TIM_IC_Start_DMA+0x32c>)
 80095ce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d4:	4a34      	ldr	r2, [pc, #208]	; (80096a8 <HAL_TIM_IC_Start_DMA+0x330>)
 80095d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095dc:	4a33      	ldr	r2, [pc, #204]	; (80096ac <HAL_TIM_IC_Start_DMA+0x334>)
 80095de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3340      	adds	r3, #64	; 0x40
 80095ea:	4619      	mov	r1, r3
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	887b      	ldrh	r3, [r7, #2]
 80095f0:	f7fd fefc 	bl	80073ec <HAL_DMA_Start_IT>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e04e      	b.n	800969c <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68da      	ldr	r2, [r3, #12]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800960c:	60da      	str	r2, [r3, #12]
      break;
 800960e:	e002      	b.n	8009616 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	75fb      	strb	r3, [r7, #23]
      break;
 8009614:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a25      	ldr	r2, [pc, #148]	; (80096b0 <HAL_TIM_IC_Start_DMA+0x338>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d022      	beq.n	8009666 <HAL_TIM_IC_Start_DMA+0x2ee>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009628:	d01d      	beq.n	8009666 <HAL_TIM_IC_Start_DMA+0x2ee>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a21      	ldr	r2, [pc, #132]	; (80096b4 <HAL_TIM_IC_Start_DMA+0x33c>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d018      	beq.n	8009666 <HAL_TIM_IC_Start_DMA+0x2ee>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a1f      	ldr	r2, [pc, #124]	; (80096b8 <HAL_TIM_IC_Start_DMA+0x340>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d013      	beq.n	8009666 <HAL_TIM_IC_Start_DMA+0x2ee>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a1e      	ldr	r2, [pc, #120]	; (80096bc <HAL_TIM_IC_Start_DMA+0x344>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d00e      	beq.n	8009666 <HAL_TIM_IC_Start_DMA+0x2ee>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a1c      	ldr	r2, [pc, #112]	; (80096c0 <HAL_TIM_IC_Start_DMA+0x348>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d009      	beq.n	8009666 <HAL_TIM_IC_Start_DMA+0x2ee>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a1b      	ldr	r2, [pc, #108]	; (80096c4 <HAL_TIM_IC_Start_DMA+0x34c>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d004      	beq.n	8009666 <HAL_TIM_IC_Start_DMA+0x2ee>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a19      	ldr	r2, [pc, #100]	; (80096c8 <HAL_TIM_IC_Start_DMA+0x350>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d111      	bne.n	800968a <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f003 0307 	and.w	r3, r3, #7
 8009670:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	2b06      	cmp	r3, #6
 8009676:	d010      	beq.n	800969a <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f042 0201 	orr.w	r2, r2, #1
 8009686:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009688:	e007      	b.n	800969a <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f042 0201 	orr.w	r2, r2, #1
 8009698:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800969a:	7dfb      	ldrb	r3, [r7, #23]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	0800a0ad 	.word	0x0800a0ad
 80096a8:	0800a175 	.word	0x0800a175
 80096ac:	0800a01b 	.word	0x0800a01b
 80096b0:	40010000 	.word	0x40010000
 80096b4:	40000400 	.word	0x40000400
 80096b8:	40000800 	.word	0x40000800
 80096bc:	40000c00 	.word	0x40000c00
 80096c0:	40010400 	.word	0x40010400
 80096c4:	40014000 	.word	0x40014000
 80096c8:	40001800 	.word	0x40001800

080096cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d101      	bne.n	80096e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e097      	b.n	8009810 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d106      	bne.n	80096fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7fc fb31 	bl	8005d5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2202      	movs	r2, #2
 80096fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	6812      	ldr	r2, [r2, #0]
 800970c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009710:	f023 0307 	bic.w	r3, r3, #7
 8009714:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	3304      	adds	r3, #4
 800971e:	4619      	mov	r1, r3
 8009720:	4610      	mov	r0, r2
 8009722:	f000 fd5b 	bl	800a1dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	4313      	orrs	r3, r2
 8009746:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800974e:	f023 0303 	bic.w	r3, r3, #3
 8009752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	689a      	ldr	r2, [r3, #8]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	021b      	lsls	r3, r3, #8
 800975e:	4313      	orrs	r3, r2
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	4313      	orrs	r3, r2
 8009764:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800976c:	f023 030c 	bic.w	r3, r3, #12
 8009770:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009778:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800977c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	68da      	ldr	r2, [r3, #12]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	021b      	lsls	r3, r3, #8
 8009788:	4313      	orrs	r3, r2
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	4313      	orrs	r3, r2
 800978e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	011a      	lsls	r2, r3, #4
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	031b      	lsls	r3, r3, #12
 800979c:	4313      	orrs	r3, r2
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80097aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80097b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	685a      	ldr	r2, [r3, #4]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	011b      	lsls	r3, r3, #4
 80097be:	4313      	orrs	r3, r2
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3718      	adds	r7, #24
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009828:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009830:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009838:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009840:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d110      	bne.n	800986a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d102      	bne.n	8009854 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800984e:	7b7b      	ldrb	r3, [r7, #13]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d001      	beq.n	8009858 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e069      	b.n	800992c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2202      	movs	r2, #2
 800985c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2202      	movs	r2, #2
 8009864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009868:	e031      	b.n	80098ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b04      	cmp	r3, #4
 800986e:	d110      	bne.n	8009892 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009870:	7bbb      	ldrb	r3, [r7, #14]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d102      	bne.n	800987c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009876:	7b3b      	ldrb	r3, [r7, #12]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d001      	beq.n	8009880 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	e055      	b.n	800992c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2202      	movs	r2, #2
 8009884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2202      	movs	r2, #2
 800988c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009890:	e01d      	b.n	80098ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d108      	bne.n	80098aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d105      	bne.n	80098aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800989e:	7b7b      	ldrb	r3, [r7, #13]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d102      	bne.n	80098aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80098a4:	7b3b      	ldrb	r3, [r7, #12]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d001      	beq.n	80098ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e03e      	b.n	800992c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2202      	movs	r2, #2
 80098b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2202      	movs	r2, #2
 80098ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2202      	movs	r2, #2
 80098c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2202      	movs	r2, #2
 80098ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d003      	beq.n	80098dc <HAL_TIM_Encoder_Start+0xc4>
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	2b04      	cmp	r3, #4
 80098d8:	d008      	beq.n	80098ec <HAL_TIM_Encoder_Start+0xd4>
 80098da:	e00f      	b.n	80098fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2201      	movs	r2, #1
 80098e2:	2100      	movs	r1, #0
 80098e4:	4618      	mov	r0, r3
 80098e6:	f001 f88d 	bl	800aa04 <TIM_CCxChannelCmd>
      break;
 80098ea:	e016      	b.n	800991a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2201      	movs	r2, #1
 80098f2:	2104      	movs	r1, #4
 80098f4:	4618      	mov	r0, r3
 80098f6:	f001 f885 	bl	800aa04 <TIM_CCxChannelCmd>
      break;
 80098fa:	e00e      	b.n	800991a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2201      	movs	r2, #1
 8009902:	2100      	movs	r1, #0
 8009904:	4618      	mov	r0, r3
 8009906:	f001 f87d 	bl	800aa04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2201      	movs	r2, #1
 8009910:	2104      	movs	r1, #4
 8009912:	4618      	mov	r0, r3
 8009914:	f001 f876 	bl	800aa04 <TIM_CCxChannelCmd>
      break;
 8009918:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f042 0201 	orr.w	r2, r2, #1
 8009928:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	f003 0302 	and.w	r3, r3, #2
 8009946:	2b02      	cmp	r3, #2
 8009948:	d122      	bne.n	8009990 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	f003 0302 	and.w	r3, r3, #2
 8009954:	2b02      	cmp	r3, #2
 8009956:	d11b      	bne.n	8009990 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f06f 0202 	mvn.w	r2, #2
 8009960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	f003 0303 	and.w	r3, r3, #3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d003      	beq.n	800997e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fb1d 	bl	8009fb6 <HAL_TIM_IC_CaptureCallback>
 800997c:	e005      	b.n	800998a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fb0f 	bl	8009fa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fb2a 	bl	8009fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	f003 0304 	and.w	r3, r3, #4
 800999a:	2b04      	cmp	r3, #4
 800999c:	d122      	bne.n	80099e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	f003 0304 	and.w	r3, r3, #4
 80099a8:	2b04      	cmp	r3, #4
 80099aa:	d11b      	bne.n	80099e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f06f 0204 	mvn.w	r2, #4
 80099b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2202      	movs	r2, #2
 80099ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 faf3 	bl	8009fb6 <HAL_TIM_IC_CaptureCallback>
 80099d0:	e005      	b.n	80099de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fae5 	bl	8009fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fb00 	bl	8009fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	f003 0308 	and.w	r3, r3, #8
 80099ee:	2b08      	cmp	r3, #8
 80099f0:	d122      	bne.n	8009a38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	f003 0308 	and.w	r3, r3, #8
 80099fc:	2b08      	cmp	r3, #8
 80099fe:	d11b      	bne.n	8009a38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f06f 0208 	mvn.w	r2, #8
 8009a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2204      	movs	r2, #4
 8009a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	f003 0303 	and.w	r3, r3, #3
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fac9 	bl	8009fb6 <HAL_TIM_IC_CaptureCallback>
 8009a24:	e005      	b.n	8009a32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fabb 	bl	8009fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fad6 	bl	8009fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	f003 0310 	and.w	r3, r3, #16
 8009a42:	2b10      	cmp	r3, #16
 8009a44:	d122      	bne.n	8009a8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	f003 0310 	and.w	r3, r3, #16
 8009a50:	2b10      	cmp	r3, #16
 8009a52:	d11b      	bne.n	8009a8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f06f 0210 	mvn.w	r2, #16
 8009a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2208      	movs	r2, #8
 8009a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	69db      	ldr	r3, [r3, #28]
 8009a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d003      	beq.n	8009a7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fa9f 	bl	8009fb6 <HAL_TIM_IC_CaptureCallback>
 8009a78:	e005      	b.n	8009a86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fa91 	bl	8009fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 faac 	bl	8009fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d10e      	bne.n	8009ab8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	f003 0301 	and.w	r3, r3, #1
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d107      	bne.n	8009ab8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f06f 0201 	mvn.w	r2, #1
 8009ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fa6b 	bl	8009f8e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac2:	2b80      	cmp	r3, #128	; 0x80
 8009ac4:	d10e      	bne.n	8009ae4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ad0:	2b80      	cmp	r3, #128	; 0x80
 8009ad2:	d107      	bne.n	8009ae4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f001 f88e 	bl	800ac00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aee:	2b40      	cmp	r3, #64	; 0x40
 8009af0:	d10e      	bne.n	8009b10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afc:	2b40      	cmp	r3, #64	; 0x40
 8009afe:	d107      	bne.n	8009b10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fa71 	bl	8009ff2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	f003 0320 	and.w	r3, r3, #32
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	d10e      	bne.n	8009b3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	f003 0320 	and.w	r3, r3, #32
 8009b28:	2b20      	cmp	r3, #32
 8009b2a:	d107      	bne.n	8009b3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f06f 0220 	mvn.w	r2, #32
 8009b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 f858 	bl	800abec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b3c:	bf00      	nop
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d101      	bne.n	8009b62 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009b5e:	2302      	movs	r3, #2
 8009b60:	e088      	b.n	8009c74 <HAL_TIM_IC_ConfigChannel+0x130>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d11b      	bne.n	8009ba8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6818      	ldr	r0, [r3, #0]
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	6819      	ldr	r1, [r3, #0]
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	f000 fd7c 	bl	800a67c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	699a      	ldr	r2, [r3, #24]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f022 020c 	bic.w	r2, r2, #12
 8009b92:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6999      	ldr	r1, [r3, #24]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	689a      	ldr	r2, [r3, #8]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	619a      	str	r2, [r3, #24]
 8009ba6:	e060      	b.n	8009c6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b04      	cmp	r3, #4
 8009bac:	d11c      	bne.n	8009be8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6818      	ldr	r0, [r3, #0]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	6819      	ldr	r1, [r3, #0]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	685a      	ldr	r2, [r3, #4]
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	f000 fe00 	bl	800a7c2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	699a      	ldr	r2, [r3, #24]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009bd0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6999      	ldr	r1, [r3, #24]
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	021a      	lsls	r2, r3, #8
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	619a      	str	r2, [r3, #24]
 8009be6:	e040      	b.n	8009c6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b08      	cmp	r3, #8
 8009bec:	d11b      	bne.n	8009c26 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6818      	ldr	r0, [r3, #0]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	6819      	ldr	r1, [r3, #0]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	f000 fe4d 	bl	800a89c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	69da      	ldr	r2, [r3, #28]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 020c 	bic.w	r2, r2, #12
 8009c10:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	69d9      	ldr	r1, [r3, #28]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	689a      	ldr	r2, [r3, #8]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	430a      	orrs	r2, r1
 8009c22:	61da      	str	r2, [r3, #28]
 8009c24:	e021      	b.n	8009c6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2b0c      	cmp	r3, #12
 8009c2a:	d11c      	bne.n	8009c66 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6818      	ldr	r0, [r3, #0]
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	6819      	ldr	r1, [r3, #0]
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	f000 fe6a 	bl	800a914 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	69da      	ldr	r2, [r3, #28]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009c4e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	69d9      	ldr	r1, [r3, #28]
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	021a      	lsls	r2, r3, #8
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	430a      	orrs	r2, r1
 8009c62:	61da      	str	r2, [r3, #28]
 8009c64:	e001      	b.n	8009c6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d101      	bne.n	8009c9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c96:	2302      	movs	r3, #2
 8009c98:	e0ae      	b.n	8009df8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2b0c      	cmp	r3, #12
 8009ca6:	f200 809f 	bhi.w	8009de8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009caa:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009ce5 	.word	0x08009ce5
 8009cb4:	08009de9 	.word	0x08009de9
 8009cb8:	08009de9 	.word	0x08009de9
 8009cbc:	08009de9 	.word	0x08009de9
 8009cc0:	08009d25 	.word	0x08009d25
 8009cc4:	08009de9 	.word	0x08009de9
 8009cc8:	08009de9 	.word	0x08009de9
 8009ccc:	08009de9 	.word	0x08009de9
 8009cd0:	08009d67 	.word	0x08009d67
 8009cd4:	08009de9 	.word	0x08009de9
 8009cd8:	08009de9 	.word	0x08009de9
 8009cdc:	08009de9 	.word	0x08009de9
 8009ce0:	08009da7 	.word	0x08009da7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68b9      	ldr	r1, [r7, #8]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 fb16 	bl	800a31c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	699a      	ldr	r2, [r3, #24]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f042 0208 	orr.w	r2, r2, #8
 8009cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	699a      	ldr	r2, [r3, #24]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f022 0204 	bic.w	r2, r2, #4
 8009d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6999      	ldr	r1, [r3, #24]
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	691a      	ldr	r2, [r3, #16]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	619a      	str	r2, [r3, #24]
      break;
 8009d22:	e064      	b.n	8009dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68b9      	ldr	r1, [r7, #8]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 fb66 	bl	800a3fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	699a      	ldr	r2, [r3, #24]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	699a      	ldr	r2, [r3, #24]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6999      	ldr	r1, [r3, #24]
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	021a      	lsls	r2, r3, #8
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	430a      	orrs	r2, r1
 8009d62:	619a      	str	r2, [r3, #24]
      break;
 8009d64:	e043      	b.n	8009dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68b9      	ldr	r1, [r7, #8]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 fbbb 	bl	800a4e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	69da      	ldr	r2, [r3, #28]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f042 0208 	orr.w	r2, r2, #8
 8009d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	69da      	ldr	r2, [r3, #28]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 0204 	bic.w	r2, r2, #4
 8009d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	69d9      	ldr	r1, [r3, #28]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	691a      	ldr	r2, [r3, #16]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	430a      	orrs	r2, r1
 8009da2:	61da      	str	r2, [r3, #28]
      break;
 8009da4:	e023      	b.n	8009dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68b9      	ldr	r1, [r7, #8]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 fc0f 	bl	800a5d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	69da      	ldr	r2, [r3, #28]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	69da      	ldr	r2, [r3, #28]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	69d9      	ldr	r1, [r3, #28]
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	021a      	lsls	r2, r3, #8
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	430a      	orrs	r2, r1
 8009de4:	61da      	str	r2, [r3, #28]
      break;
 8009de6:	e002      	b.n	8009dee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	75fb      	strb	r3, [r7, #23]
      break;
 8009dec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3718      	adds	r7, #24
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d101      	bne.n	8009e1c <HAL_TIM_ConfigClockSource+0x1c>
 8009e18:	2302      	movs	r3, #2
 8009e1a:	e0b4      	b.n	8009f86 <HAL_TIM_ConfigClockSource+0x186>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68ba      	ldr	r2, [r7, #8]
 8009e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e54:	d03e      	beq.n	8009ed4 <HAL_TIM_ConfigClockSource+0xd4>
 8009e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e5a:	f200 8087 	bhi.w	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e62:	f000 8086 	beq.w	8009f72 <HAL_TIM_ConfigClockSource+0x172>
 8009e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e6a:	d87f      	bhi.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e6c:	2b70      	cmp	r3, #112	; 0x70
 8009e6e:	d01a      	beq.n	8009ea6 <HAL_TIM_ConfigClockSource+0xa6>
 8009e70:	2b70      	cmp	r3, #112	; 0x70
 8009e72:	d87b      	bhi.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e74:	2b60      	cmp	r3, #96	; 0x60
 8009e76:	d050      	beq.n	8009f1a <HAL_TIM_ConfigClockSource+0x11a>
 8009e78:	2b60      	cmp	r3, #96	; 0x60
 8009e7a:	d877      	bhi.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e7c:	2b50      	cmp	r3, #80	; 0x50
 8009e7e:	d03c      	beq.n	8009efa <HAL_TIM_ConfigClockSource+0xfa>
 8009e80:	2b50      	cmp	r3, #80	; 0x50
 8009e82:	d873      	bhi.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e84:	2b40      	cmp	r3, #64	; 0x40
 8009e86:	d058      	beq.n	8009f3a <HAL_TIM_ConfigClockSource+0x13a>
 8009e88:	2b40      	cmp	r3, #64	; 0x40
 8009e8a:	d86f      	bhi.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e8c:	2b30      	cmp	r3, #48	; 0x30
 8009e8e:	d064      	beq.n	8009f5a <HAL_TIM_ConfigClockSource+0x15a>
 8009e90:	2b30      	cmp	r3, #48	; 0x30
 8009e92:	d86b      	bhi.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e94:	2b20      	cmp	r3, #32
 8009e96:	d060      	beq.n	8009f5a <HAL_TIM_ConfigClockSource+0x15a>
 8009e98:	2b20      	cmp	r3, #32
 8009e9a:	d867      	bhi.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d05c      	beq.n	8009f5a <HAL_TIM_ConfigClockSource+0x15a>
 8009ea0:	2b10      	cmp	r3, #16
 8009ea2:	d05a      	beq.n	8009f5a <HAL_TIM_ConfigClockSource+0x15a>
 8009ea4:	e062      	b.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6818      	ldr	r0, [r3, #0]
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	6899      	ldr	r1, [r3, #8]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	685a      	ldr	r2, [r3, #4]
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	f000 fd85 	bl	800a9c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	609a      	str	r2, [r3, #8]
      break;
 8009ed2:	e04f      	b.n	8009f74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	6899      	ldr	r1, [r3, #8]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	f000 fd6e 	bl	800a9c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689a      	ldr	r2, [r3, #8]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ef6:	609a      	str	r2, [r3, #8]
      break;
 8009ef8:	e03c      	b.n	8009f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6818      	ldr	r0, [r3, #0]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	6859      	ldr	r1, [r3, #4]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	461a      	mov	r2, r3
 8009f08:	f000 fc2c 	bl	800a764 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2150      	movs	r1, #80	; 0x50
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 fd3b 	bl	800a98e <TIM_ITRx_SetConfig>
      break;
 8009f18:	e02c      	b.n	8009f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6818      	ldr	r0, [r3, #0]
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	6859      	ldr	r1, [r3, #4]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	461a      	mov	r2, r3
 8009f28:	f000 fc88 	bl	800a83c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2160      	movs	r1, #96	; 0x60
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 fd2b 	bl	800a98e <TIM_ITRx_SetConfig>
      break;
 8009f38:	e01c      	b.n	8009f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6818      	ldr	r0, [r3, #0]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	6859      	ldr	r1, [r3, #4]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	461a      	mov	r2, r3
 8009f48:	f000 fc0c 	bl	800a764 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2140      	movs	r1, #64	; 0x40
 8009f52:	4618      	mov	r0, r3
 8009f54:	f000 fd1b 	bl	800a98e <TIM_ITRx_SetConfig>
      break;
 8009f58:	e00c      	b.n	8009f74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4619      	mov	r1, r3
 8009f64:	4610      	mov	r0, r2
 8009f66:	f000 fd12 	bl	800a98e <TIM_ITRx_SetConfig>
      break;
 8009f6a:	e003      	b.n	8009f74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f70:	e000      	b.n	8009f74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b083      	sub	sp, #12
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009f96:	bf00      	nop
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b083      	sub	sp, #12
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009faa:	bf00      	nop
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b083      	sub	sp, #12
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009fbe:	bf00      	nop
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b083      	sub	sp, #12
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009fd2:	bf00      	nop
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b083      	sub	sp, #12
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fe6:	bf00      	nop
 8009fe8:	370c      	adds	r7, #12
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b083      	sub	sp, #12
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ffa:	bf00      	nop
 8009ffc:	370c      	adds	r7, #12
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a006:	b480      	push	{r7}
 800a008:	b083      	sub	sp, #12
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a00e:	bf00      	nop
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a026:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d107      	bne.n	800a042 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2201      	movs	r2, #1
 800a036:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a040:	e02a      	b.n	800a098 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d107      	bne.n	800a05c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2202      	movs	r2, #2
 800a050:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a05a:	e01d      	b.n	800a098 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	429a      	cmp	r2, r3
 800a064:	d107      	bne.n	800a076 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2204      	movs	r2, #4
 800a06a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a074:	e010      	b.n	800a098 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d107      	bne.n	800a090 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2208      	movs	r2, #8
 800a084:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a08e:	e003      	b.n	800a098 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f7ff ffb4 	bl	800a006 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	771a      	strb	r2, [r3, #28]
}
 800a0a4:	bf00      	nop
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d10f      	bne.n	800a0e4 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d146      	bne.n	800a160 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0e2:	e03d      	b.n	800a160 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d10f      	bne.n	800a10e <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	69db      	ldr	r3, [r3, #28]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d131      	bne.n	800a160 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2201      	movs	r2, #1
 800a108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a10c:	e028      	b.n	800a160 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	429a      	cmp	r2, r3
 800a116:	d10f      	bne.n	800a138 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2204      	movs	r2, #4
 800a11c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d11c      	bne.n	800a160 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a136:	e013      	b.n	800a160 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d10e      	bne.n	800a160 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2208      	movs	r2, #8
 800a146:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	69db      	ldr	r3, [r3, #28]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d107      	bne.n	800a160 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f7ff ff28 	bl	8009fb6 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	771a      	strb	r2, [r3, #28]
}
 800a16c:	bf00      	nop
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a180:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d103      	bne.n	800a194 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2201      	movs	r2, #1
 800a190:	771a      	strb	r2, [r3, #28]
 800a192:	e019      	b.n	800a1c8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d103      	bne.n	800a1a6 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2202      	movs	r2, #2
 800a1a2:	771a      	strb	r2, [r3, #28]
 800a1a4:	e010      	b.n	800a1c8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d103      	bne.n	800a1b8 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2204      	movs	r2, #4
 800a1b4:	771a      	strb	r2, [r3, #28]
 800a1b6:	e007      	b.n	800a1c8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d102      	bne.n	800a1c8 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2208      	movs	r2, #8
 800a1c6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f7ff fefe 	bl	8009fca <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	771a      	strb	r2, [r3, #28]
}
 800a1d4:	bf00      	nop
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a40      	ldr	r2, [pc, #256]	; (800a2f0 <TIM_Base_SetConfig+0x114>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d013      	beq.n	800a21c <TIM_Base_SetConfig+0x40>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1fa:	d00f      	beq.n	800a21c <TIM_Base_SetConfig+0x40>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a3d      	ldr	r2, [pc, #244]	; (800a2f4 <TIM_Base_SetConfig+0x118>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d00b      	beq.n	800a21c <TIM_Base_SetConfig+0x40>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a3c      	ldr	r2, [pc, #240]	; (800a2f8 <TIM_Base_SetConfig+0x11c>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d007      	beq.n	800a21c <TIM_Base_SetConfig+0x40>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a3b      	ldr	r2, [pc, #236]	; (800a2fc <TIM_Base_SetConfig+0x120>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d003      	beq.n	800a21c <TIM_Base_SetConfig+0x40>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a3a      	ldr	r2, [pc, #232]	; (800a300 <TIM_Base_SetConfig+0x124>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d108      	bne.n	800a22e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a2f      	ldr	r2, [pc, #188]	; (800a2f0 <TIM_Base_SetConfig+0x114>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d02b      	beq.n	800a28e <TIM_Base_SetConfig+0xb2>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a23c:	d027      	beq.n	800a28e <TIM_Base_SetConfig+0xb2>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a2c      	ldr	r2, [pc, #176]	; (800a2f4 <TIM_Base_SetConfig+0x118>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d023      	beq.n	800a28e <TIM_Base_SetConfig+0xb2>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a2b      	ldr	r2, [pc, #172]	; (800a2f8 <TIM_Base_SetConfig+0x11c>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d01f      	beq.n	800a28e <TIM_Base_SetConfig+0xb2>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a2a      	ldr	r2, [pc, #168]	; (800a2fc <TIM_Base_SetConfig+0x120>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d01b      	beq.n	800a28e <TIM_Base_SetConfig+0xb2>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4a29      	ldr	r2, [pc, #164]	; (800a300 <TIM_Base_SetConfig+0x124>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d017      	beq.n	800a28e <TIM_Base_SetConfig+0xb2>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4a28      	ldr	r2, [pc, #160]	; (800a304 <TIM_Base_SetConfig+0x128>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d013      	beq.n	800a28e <TIM_Base_SetConfig+0xb2>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a27      	ldr	r2, [pc, #156]	; (800a308 <TIM_Base_SetConfig+0x12c>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d00f      	beq.n	800a28e <TIM_Base_SetConfig+0xb2>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4a26      	ldr	r2, [pc, #152]	; (800a30c <TIM_Base_SetConfig+0x130>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d00b      	beq.n	800a28e <TIM_Base_SetConfig+0xb2>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4a25      	ldr	r2, [pc, #148]	; (800a310 <TIM_Base_SetConfig+0x134>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d007      	beq.n	800a28e <TIM_Base_SetConfig+0xb2>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a24      	ldr	r2, [pc, #144]	; (800a314 <TIM_Base_SetConfig+0x138>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d003      	beq.n	800a28e <TIM_Base_SetConfig+0xb2>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a23      	ldr	r2, [pc, #140]	; (800a318 <TIM_Base_SetConfig+0x13c>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d108      	bne.n	800a2a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	689a      	ldr	r2, [r3, #8]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a0a      	ldr	r2, [pc, #40]	; (800a2f0 <TIM_Base_SetConfig+0x114>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d003      	beq.n	800a2d4 <TIM_Base_SetConfig+0xf8>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a0c      	ldr	r2, [pc, #48]	; (800a300 <TIM_Base_SetConfig+0x124>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d103      	bne.n	800a2dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	691a      	ldr	r2, [r3, #16]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	615a      	str	r2, [r3, #20]
}
 800a2e2:	bf00      	nop
 800a2e4:	3714      	adds	r7, #20
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	40010000 	.word	0x40010000
 800a2f4:	40000400 	.word	0x40000400
 800a2f8:	40000800 	.word	0x40000800
 800a2fc:	40000c00 	.word	0x40000c00
 800a300:	40010400 	.word	0x40010400
 800a304:	40014000 	.word	0x40014000
 800a308:	40014400 	.word	0x40014400
 800a30c:	40014800 	.word	0x40014800
 800a310:	40001800 	.word	0x40001800
 800a314:	40001c00 	.word	0x40001c00
 800a318:	40002000 	.word	0x40002000

0800a31c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b087      	sub	sp, #28
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a1b      	ldr	r3, [r3, #32]
 800a32a:	f023 0201 	bic.w	r2, r3, #1
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a34a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f023 0303 	bic.w	r3, r3, #3
 800a352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f023 0302 	bic.w	r3, r3, #2
 800a364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	697a      	ldr	r2, [r7, #20]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a20      	ldr	r2, [pc, #128]	; (800a3f4 <TIM_OC1_SetConfig+0xd8>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d003      	beq.n	800a380 <TIM_OC1_SetConfig+0x64>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a1f      	ldr	r2, [pc, #124]	; (800a3f8 <TIM_OC1_SetConfig+0xdc>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d10c      	bne.n	800a39a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f023 0308 	bic.w	r3, r3, #8
 800a386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	4313      	orrs	r3, r2
 800a390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f023 0304 	bic.w	r3, r3, #4
 800a398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a15      	ldr	r2, [pc, #84]	; (800a3f4 <TIM_OC1_SetConfig+0xd8>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d003      	beq.n	800a3aa <TIM_OC1_SetConfig+0x8e>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4a14      	ldr	r2, [pc, #80]	; (800a3f8 <TIM_OC1_SetConfig+0xdc>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d111      	bne.n	800a3ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	685a      	ldr	r2, [r3, #4]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	621a      	str	r2, [r3, #32]
}
 800a3e8:	bf00      	nop
 800a3ea:	371c      	adds	r7, #28
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr
 800a3f4:	40010000 	.word	0x40010000
 800a3f8:	40010400 	.word	0x40010400

0800a3fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b087      	sub	sp, #28
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	f023 0210 	bic.w	r2, r3, #16
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	699b      	ldr	r3, [r3, #24]
 800a422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a42a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	021b      	lsls	r3, r3, #8
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	f023 0320 	bic.w	r3, r3, #32
 800a446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	011b      	lsls	r3, r3, #4
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	4313      	orrs	r3, r2
 800a452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a22      	ldr	r2, [pc, #136]	; (800a4e0 <TIM_OC2_SetConfig+0xe4>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d003      	beq.n	800a464 <TIM_OC2_SetConfig+0x68>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a21      	ldr	r2, [pc, #132]	; (800a4e4 <TIM_OC2_SetConfig+0xe8>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d10d      	bne.n	800a480 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a46a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	011b      	lsls	r3, r3, #4
 800a472:	697a      	ldr	r2, [r7, #20]
 800a474:	4313      	orrs	r3, r2
 800a476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a47e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a17      	ldr	r2, [pc, #92]	; (800a4e0 <TIM_OC2_SetConfig+0xe4>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d003      	beq.n	800a490 <TIM_OC2_SetConfig+0x94>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a16      	ldr	r2, [pc, #88]	; (800a4e4 <TIM_OC2_SetConfig+0xe8>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d113      	bne.n	800a4b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a496:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a49e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	693a      	ldr	r2, [r7, #16]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	685a      	ldr	r2, [r3, #4]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	621a      	str	r2, [r3, #32]
}
 800a4d2:	bf00      	nop
 800a4d4:	371c      	adds	r7, #28
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	40010000 	.word	0x40010000
 800a4e4:	40010400 	.word	0x40010400

0800a4e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b087      	sub	sp, #28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	69db      	ldr	r3, [r3, #28]
 800a50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f023 0303 	bic.w	r3, r3, #3
 800a51e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	4313      	orrs	r3, r2
 800a528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	021b      	lsls	r3, r3, #8
 800a538:	697a      	ldr	r2, [r7, #20]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a21      	ldr	r2, [pc, #132]	; (800a5c8 <TIM_OC3_SetConfig+0xe0>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d003      	beq.n	800a54e <TIM_OC3_SetConfig+0x66>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a20      	ldr	r2, [pc, #128]	; (800a5cc <TIM_OC3_SetConfig+0xe4>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d10d      	bne.n	800a56a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	021b      	lsls	r3, r3, #8
 800a55c:	697a      	ldr	r2, [r7, #20]
 800a55e:	4313      	orrs	r3, r2
 800a560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4a16      	ldr	r2, [pc, #88]	; (800a5c8 <TIM_OC3_SetConfig+0xe0>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d003      	beq.n	800a57a <TIM_OC3_SetConfig+0x92>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a15      	ldr	r2, [pc, #84]	; (800a5cc <TIM_OC3_SetConfig+0xe4>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d113      	bne.n	800a5a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	695b      	ldr	r3, [r3, #20]
 800a58e:	011b      	lsls	r3, r3, #4
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	4313      	orrs	r3, r2
 800a594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	011b      	lsls	r3, r3, #4
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	693a      	ldr	r2, [r7, #16]
 800a5a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	685a      	ldr	r2, [r3, #4]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	621a      	str	r2, [r3, #32]
}
 800a5bc:	bf00      	nop
 800a5be:	371c      	adds	r7, #28
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	40010000 	.word	0x40010000
 800a5cc:	40010400 	.word	0x40010400

0800a5d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b087      	sub	sp, #28
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	021b      	lsls	r3, r3, #8
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	4313      	orrs	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a61a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	031b      	lsls	r3, r3, #12
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	4313      	orrs	r3, r2
 800a626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a12      	ldr	r2, [pc, #72]	; (800a674 <TIM_OC4_SetConfig+0xa4>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d003      	beq.n	800a638 <TIM_OC4_SetConfig+0x68>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a11      	ldr	r2, [pc, #68]	; (800a678 <TIM_OC4_SetConfig+0xa8>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d109      	bne.n	800a64c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a63e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	019b      	lsls	r3, r3, #6
 800a646:	697a      	ldr	r2, [r7, #20]
 800a648:	4313      	orrs	r3, r2
 800a64a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	621a      	str	r2, [r3, #32]
}
 800a666:	bf00      	nop
 800a668:	371c      	adds	r7, #28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	40010000 	.word	0x40010000
 800a678:	40010400 	.word	0x40010400

0800a67c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b087      	sub	sp, #28
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	f023 0201 	bic.w	r2, r3, #1
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	699b      	ldr	r3, [r3, #24]
 800a69a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6a1b      	ldr	r3, [r3, #32]
 800a6a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	4a28      	ldr	r2, [pc, #160]	; (800a748 <TIM_TI1_SetConfig+0xcc>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d01b      	beq.n	800a6e2 <TIM_TI1_SetConfig+0x66>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6b0:	d017      	beq.n	800a6e2 <TIM_TI1_SetConfig+0x66>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	4a25      	ldr	r2, [pc, #148]	; (800a74c <TIM_TI1_SetConfig+0xd0>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d013      	beq.n	800a6e2 <TIM_TI1_SetConfig+0x66>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	4a24      	ldr	r2, [pc, #144]	; (800a750 <TIM_TI1_SetConfig+0xd4>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d00f      	beq.n	800a6e2 <TIM_TI1_SetConfig+0x66>
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	4a23      	ldr	r2, [pc, #140]	; (800a754 <TIM_TI1_SetConfig+0xd8>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d00b      	beq.n	800a6e2 <TIM_TI1_SetConfig+0x66>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4a22      	ldr	r2, [pc, #136]	; (800a758 <TIM_TI1_SetConfig+0xdc>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d007      	beq.n	800a6e2 <TIM_TI1_SetConfig+0x66>
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	4a21      	ldr	r2, [pc, #132]	; (800a75c <TIM_TI1_SetConfig+0xe0>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d003      	beq.n	800a6e2 <TIM_TI1_SetConfig+0x66>
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	4a20      	ldr	r2, [pc, #128]	; (800a760 <TIM_TI1_SetConfig+0xe4>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d101      	bne.n	800a6e6 <TIM_TI1_SetConfig+0x6a>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e000      	b.n	800a6e8 <TIM_TI1_SetConfig+0x6c>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d008      	beq.n	800a6fe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	f023 0303 	bic.w	r3, r3, #3
 800a6f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	617b      	str	r3, [r7, #20]
 800a6fc:	e003      	b.n	800a706 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f043 0301 	orr.w	r3, r3, #1
 800a704:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a70c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	011b      	lsls	r3, r3, #4
 800a712:	b2db      	uxtb	r3, r3
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	4313      	orrs	r3, r2
 800a718:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	f023 030a 	bic.w	r3, r3, #10
 800a720:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	f003 030a 	and.w	r3, r3, #10
 800a728:	693a      	ldr	r2, [r7, #16]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	621a      	str	r2, [r3, #32]
}
 800a73a:	bf00      	nop
 800a73c:	371c      	adds	r7, #28
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	40010000 	.word	0x40010000
 800a74c:	40000400 	.word	0x40000400
 800a750:	40000800 	.word	0x40000800
 800a754:	40000c00 	.word	0x40000c00
 800a758:	40010400 	.word	0x40010400
 800a75c:	40014000 	.word	0x40014000
 800a760:	40001800 	.word	0x40001800

0800a764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a764:	b480      	push	{r7}
 800a766:	b087      	sub	sp, #28
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6a1b      	ldr	r3, [r3, #32]
 800a774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	f023 0201 	bic.w	r2, r3, #1
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a78e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	011b      	lsls	r3, r3, #4
 800a794:	693a      	ldr	r2, [r7, #16]
 800a796:	4313      	orrs	r3, r2
 800a798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	f023 030a 	bic.w	r3, r3, #10
 800a7a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	621a      	str	r2, [r3, #32]
}
 800a7b6:	bf00      	nop
 800a7b8:	371c      	adds	r7, #28
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b087      	sub	sp, #28
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	60f8      	str	r0, [r7, #12]
 800a7ca:	60b9      	str	r1, [r7, #8]
 800a7cc:	607a      	str	r2, [r7, #4]
 800a7ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6a1b      	ldr	r3, [r3, #32]
 800a7d4:	f023 0210 	bic.w	r2, r3, #16
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6a1b      	ldr	r3, [r3, #32]
 800a7e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	021b      	lsls	r3, r3, #8
 800a7f4:	697a      	ldr	r2, [r7, #20]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a800:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	031b      	lsls	r3, r3, #12
 800a806:	b29b      	uxth	r3, r3
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a814:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	011b      	lsls	r3, r3, #4
 800a81a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a81e:	693a      	ldr	r2, [r7, #16]
 800a820:	4313      	orrs	r3, r2
 800a822:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	621a      	str	r2, [r3, #32]
}
 800a830:	bf00      	nop
 800a832:	371c      	adds	r7, #28
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6a1b      	ldr	r3, [r3, #32]
 800a84c:	f023 0210 	bic.w	r2, r3, #16
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6a1b      	ldr	r3, [r3, #32]
 800a85e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a866:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	031b      	lsls	r3, r3, #12
 800a86c:	697a      	ldr	r2, [r7, #20]
 800a86e:	4313      	orrs	r3, r2
 800a870:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a878:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	011b      	lsls	r3, r3, #4
 800a87e:	693a      	ldr	r2, [r7, #16]
 800a880:	4313      	orrs	r3, r2
 800a882:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	693a      	ldr	r2, [r7, #16]
 800a88e:	621a      	str	r2, [r3, #32]
}
 800a890:	bf00      	nop
 800a892:	371c      	adds	r7, #28
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b087      	sub	sp, #28
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
 800a8a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	69db      	ldr	r3, [r3, #28]
 800a8ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f023 0303 	bic.w	r3, r3, #3
 800a8c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a8ca:	697a      	ldr	r2, [r7, #20]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	011b      	lsls	r3, r3, #4
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	697a      	ldr	r2, [r7, #20]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a8ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	021b      	lsls	r3, r3, #8
 800a8f2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a8f6:	693a      	ldr	r2, [r7, #16]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	697a      	ldr	r2, [r7, #20]
 800a900:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	621a      	str	r2, [r3, #32]
}
 800a908:	bf00      	nop
 800a90a:	371c      	adds	r7, #28
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a914:	b480      	push	{r7}
 800a916:	b087      	sub	sp, #28
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
 800a920:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6a1b      	ldr	r3, [r3, #32]
 800a926:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	69db      	ldr	r3, [r3, #28]
 800a932:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6a1b      	ldr	r3, [r3, #32]
 800a938:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a940:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	021b      	lsls	r3, r3, #8
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	4313      	orrs	r3, r2
 800a94a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a952:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	031b      	lsls	r3, r3, #12
 800a958:	b29b      	uxth	r3, r3
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a966:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	031b      	lsls	r3, r3, #12
 800a96c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a970:	693a      	ldr	r2, [r7, #16]
 800a972:	4313      	orrs	r3, r2
 800a974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	621a      	str	r2, [r3, #32]
}
 800a982:	bf00      	nop
 800a984:	371c      	adds	r7, #28
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a98e:	b480      	push	{r7}
 800a990:	b085      	sub	sp, #20
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	f043 0307 	orr.w	r3, r3, #7
 800a9b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	609a      	str	r2, [r3, #8]
}
 800a9b8:	bf00      	nop
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b087      	sub	sp, #28
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
 800a9d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	021a      	lsls	r2, r3, #8
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	431a      	orrs	r2, r3
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	697a      	ldr	r2, [r7, #20]
 800a9f6:	609a      	str	r2, [r3, #8]
}
 800a9f8:	bf00      	nop
 800a9fa:	371c      	adds	r7, #28
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b087      	sub	sp, #28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	f003 031f 	and.w	r3, r3, #31
 800aa16:	2201      	movs	r2, #1
 800aa18:	fa02 f303 	lsl.w	r3, r2, r3
 800aa1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6a1a      	ldr	r2, [r3, #32]
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	43db      	mvns	r3, r3
 800aa26:	401a      	ands	r2, r3
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6a1a      	ldr	r2, [r3, #32]
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	f003 031f 	and.w	r3, r3, #31
 800aa36:	6879      	ldr	r1, [r7, #4]
 800aa38:	fa01 f303 	lsl.w	r3, r1, r3
 800aa3c:	431a      	orrs	r2, r3
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	621a      	str	r2, [r3, #32]
}
 800aa42:	bf00      	nop
 800aa44:	371c      	adds	r7, #28
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
	...

0800aa50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d101      	bne.n	800aa68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa64:	2302      	movs	r3, #2
 800aa66:	e05a      	b.n	800ab1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2202      	movs	r2, #2
 800aa74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a21      	ldr	r2, [pc, #132]	; (800ab2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d022      	beq.n	800aaf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aab4:	d01d      	beq.n	800aaf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a1d      	ldr	r2, [pc, #116]	; (800ab30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d018      	beq.n	800aaf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a1b      	ldr	r2, [pc, #108]	; (800ab34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d013      	beq.n	800aaf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a1a      	ldr	r2, [pc, #104]	; (800ab38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d00e      	beq.n	800aaf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a18      	ldr	r2, [pc, #96]	; (800ab3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d009      	beq.n	800aaf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a17      	ldr	r2, [pc, #92]	; (800ab40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d004      	beq.n	800aaf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a15      	ldr	r2, [pc, #84]	; (800ab44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d10c      	bne.n	800ab0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	4313      	orrs	r3, r2
 800ab02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	40010000 	.word	0x40010000
 800ab30:	40000400 	.word	0x40000400
 800ab34:	40000800 	.word	0x40000800
 800ab38:	40000c00 	.word	0x40000c00
 800ab3c:	40010400 	.word	0x40010400
 800ab40:	40014000 	.word	0x40014000
 800ab44:	40001800 	.word	0x40001800

0800ab48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ab52:	2300      	movs	r3, #0
 800ab54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d101      	bne.n	800ab64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ab60:	2302      	movs	r3, #2
 800ab62:	e03d      	b.n	800abe0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	4313      	orrs	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	695b      	ldr	r3, [r3, #20]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	69db      	ldr	r3, [r3, #28]
 800abca:	4313      	orrs	r3, r2
 800abcc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3714      	adds	r7, #20
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e03f      	b.n	800aca6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d106      	bne.n	800ac40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7fb f95c 	bl	8005ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2224      	movs	r2, #36	; 0x24
 800ac44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	68da      	ldr	r2, [r3, #12]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fe81 	bl	800b960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	691a      	ldr	r2, [r3, #16]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	695a      	ldr	r2, [r3, #20]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	68da      	ldr	r2, [r3, #12]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2220      	movs	r2, #32
 800ac98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b08a      	sub	sp, #40	; 0x28
 800acb2:	af02      	add	r7, sp, #8
 800acb4:	60f8      	str	r0, [r7, #12]
 800acb6:	60b9      	str	r1, [r7, #8]
 800acb8:	603b      	str	r3, [r7, #0]
 800acba:	4613      	mov	r3, r2
 800acbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800acbe:	2300      	movs	r3, #0
 800acc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	2b20      	cmp	r3, #32
 800accc:	d17c      	bne.n	800adc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d002      	beq.n	800acda <HAL_UART_Transmit+0x2c>
 800acd4:	88fb      	ldrh	r3, [r7, #6]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e075      	b.n	800adca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d101      	bne.n	800acec <HAL_UART_Transmit+0x3e>
 800ace8:	2302      	movs	r3, #2
 800acea:	e06e      	b.n	800adca <HAL_UART_Transmit+0x11c>
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2221      	movs	r2, #33	; 0x21
 800acfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad02:	f7fb fbdb 	bl	80064bc <HAL_GetTick>
 800ad06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	88fa      	ldrh	r2, [r7, #6]
 800ad0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	88fa      	ldrh	r2, [r7, #6]
 800ad12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad1c:	d108      	bne.n	800ad30 <HAL_UART_Transmit+0x82>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d104      	bne.n	800ad30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ad26:	2300      	movs	r3, #0
 800ad28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	61bb      	str	r3, [r7, #24]
 800ad2e:	e003      	b.n	800ad38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad34:	2300      	movs	r3, #0
 800ad36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ad40:	e02a      	b.n	800ad98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	2180      	movs	r1, #128	; 0x80
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f000 fbc1 	bl	800b4d4 <UART_WaitOnFlagUntilTimeout>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d001      	beq.n	800ad5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	e036      	b.n	800adca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d10b      	bne.n	800ad7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	881b      	ldrh	r3, [r3, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	3302      	adds	r3, #2
 800ad76:	61bb      	str	r3, [r7, #24]
 800ad78:	e007      	b.n	800ad8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	781a      	ldrb	r2, [r3, #0]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	3301      	adds	r3, #1
 800ad88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	3b01      	subs	r3, #1
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1cf      	bne.n	800ad42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	2200      	movs	r2, #0
 800adaa:	2140      	movs	r1, #64	; 0x40
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f000 fb91 	bl	800b4d4 <UART_WaitOnFlagUntilTimeout>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d001      	beq.n	800adbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	e006      	b.n	800adca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2220      	movs	r2, #32
 800adc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	e000      	b.n	800adca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800adc8:	2302      	movs	r3, #2
  }
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3720      	adds	r7, #32
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b08a      	sub	sp, #40	; 0x28
 800add6:	af02      	add	r7, sp, #8
 800add8:	60f8      	str	r0, [r7, #12]
 800adda:	60b9      	str	r1, [r7, #8]
 800addc:	603b      	str	r3, [r7, #0]
 800adde:	4613      	mov	r3, r2
 800ade0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ade2:	2300      	movs	r3, #0
 800ade4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b20      	cmp	r3, #32
 800adf0:	f040 808c 	bne.w	800af0c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d002      	beq.n	800ae00 <HAL_UART_Receive+0x2e>
 800adfa:	88fb      	ldrh	r3, [r7, #6]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d101      	bne.n	800ae04 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	e084      	b.n	800af0e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d101      	bne.n	800ae12 <HAL_UART_Receive+0x40>
 800ae0e:	2302      	movs	r3, #2
 800ae10:	e07d      	b.n	800af0e <HAL_UART_Receive+0x13c>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2222      	movs	r2, #34	; 0x22
 800ae24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae2e:	f7fb fb45 	bl	80064bc <HAL_GetTick>
 800ae32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	88fa      	ldrh	r2, [r7, #6]
 800ae38:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	88fa      	ldrh	r2, [r7, #6]
 800ae3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae48:	d108      	bne.n	800ae5c <HAL_UART_Receive+0x8a>
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d104      	bne.n	800ae5c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	61bb      	str	r3, [r7, #24]
 800ae5a:	e003      	b.n	800ae64 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae60:	2300      	movs	r3, #0
 800ae62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800ae6c:	e043      	b.n	800aef6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	2200      	movs	r2, #0
 800ae76:	2120      	movs	r1, #32
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f000 fb2b 	bl	800b4d4 <UART_WaitOnFlagUntilTimeout>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d001      	beq.n	800ae88 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800ae84:	2303      	movs	r3, #3
 800ae86:	e042      	b.n	800af0e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d10c      	bne.n	800aea8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	3302      	adds	r3, #2
 800aea4:	61bb      	str	r3, [r7, #24]
 800aea6:	e01f      	b.n	800aee8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeb0:	d007      	beq.n	800aec2 <HAL_UART_Receive+0xf0>
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d10a      	bne.n	800aed0 <HAL_UART_Receive+0xfe>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d106      	bne.n	800aed0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	701a      	strb	r2, [r3, #0]
 800aece:	e008      	b.n	800aee2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aedc:	b2da      	uxtb	r2, r3
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	3301      	adds	r3, #1
 800aee6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	3b01      	subs	r3, #1
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1b6      	bne.n	800ae6e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2220      	movs	r2, #32
 800af04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	e000      	b.n	800af0e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800af0c:	2302      	movs	r3, #2
  }
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3720      	adds	r7, #32
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b084      	sub	sp, #16
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	4613      	mov	r3, r2
 800af22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	2b20      	cmp	r3, #32
 800af2e:	d11d      	bne.n	800af6c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d002      	beq.n	800af3c <HAL_UART_Receive_IT+0x26>
 800af36:	88fb      	ldrh	r3, [r7, #6]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d101      	bne.n	800af40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e016      	b.n	800af6e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af46:	2b01      	cmp	r3, #1
 800af48:	d101      	bne.n	800af4e <HAL_UART_Receive_IT+0x38>
 800af4a:	2302      	movs	r3, #2
 800af4c:	e00f      	b.n	800af6e <HAL_UART_Receive_IT+0x58>
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2201      	movs	r2, #1
 800af52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2200      	movs	r2, #0
 800af5a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800af5c:	88fb      	ldrh	r3, [r7, #6]
 800af5e:	461a      	mov	r2, r3
 800af60:	68b9      	ldr	r1, [r7, #8]
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f000 fb24 	bl	800b5b0 <UART_Start_Receive_IT>
 800af68:	4603      	mov	r3, r0
 800af6a:	e000      	b.n	800af6e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800af6c:	2302      	movs	r3, #2
  }
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b0ba      	sub	sp, #232	; 0xe8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	695b      	ldr	r3, [r3, #20]
 800af9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800af9e:	2300      	movs	r3, #0
 800afa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800afa4:	2300      	movs	r3, #0
 800afa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800afaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afae:	f003 030f 	and.w	r3, r3, #15
 800afb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800afb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d10f      	bne.n	800afde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800afbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afc2:	f003 0320 	and.w	r3, r3, #32
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d009      	beq.n	800afde <HAL_UART_IRQHandler+0x66>
 800afca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afce:	f003 0320 	and.w	r3, r3, #32
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d003      	beq.n	800afde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fc07 	bl	800b7ea <UART_Receive_IT>
      return;
 800afdc:	e256      	b.n	800b48c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800afde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f000 80de 	beq.w	800b1a4 <HAL_UART_IRQHandler+0x22c>
 800afe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afec:	f003 0301 	and.w	r3, r3, #1
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d106      	bne.n	800b002 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aff8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 80d1 	beq.w	800b1a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b006:	f003 0301 	and.w	r3, r3, #1
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00b      	beq.n	800b026 <HAL_UART_IRQHandler+0xae>
 800b00e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b016:	2b00      	cmp	r3, #0
 800b018:	d005      	beq.n	800b026 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01e:	f043 0201 	orr.w	r2, r3, #1
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b02a:	f003 0304 	and.w	r3, r3, #4
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00b      	beq.n	800b04a <HAL_UART_IRQHandler+0xd2>
 800b032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d005      	beq.n	800b04a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b042:	f043 0202 	orr.w	r2, r3, #2
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b04e:	f003 0302 	and.w	r3, r3, #2
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00b      	beq.n	800b06e <HAL_UART_IRQHandler+0xf6>
 800b056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d005      	beq.n	800b06e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b066:	f043 0204 	orr.w	r2, r3, #4
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b072:	f003 0308 	and.w	r3, r3, #8
 800b076:	2b00      	cmp	r3, #0
 800b078:	d011      	beq.n	800b09e <HAL_UART_IRQHandler+0x126>
 800b07a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b07e:	f003 0320 	and.w	r3, r3, #32
 800b082:	2b00      	cmp	r3, #0
 800b084:	d105      	bne.n	800b092 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d005      	beq.n	800b09e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b096:	f043 0208 	orr.w	r2, r3, #8
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 81ed 	beq.w	800b482 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ac:	f003 0320 	and.w	r3, r3, #32
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d008      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x14e>
 800b0b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0b8:	f003 0320 	and.w	r3, r3, #32
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d002      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fb92 	bl	800b7ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	695b      	ldr	r3, [r3, #20]
 800b0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0d0:	2b40      	cmp	r3, #64	; 0x40
 800b0d2:	bf0c      	ite	eq
 800b0d4:	2301      	moveq	r3, #1
 800b0d6:	2300      	movne	r3, #0
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e2:	f003 0308 	and.w	r3, r3, #8
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d103      	bne.n	800b0f2 <HAL_UART_IRQHandler+0x17a>
 800b0ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d04f      	beq.n	800b192 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fa9a 	bl	800b62c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	695b      	ldr	r3, [r3, #20]
 800b0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b102:	2b40      	cmp	r3, #64	; 0x40
 800b104:	d141      	bne.n	800b18a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3314      	adds	r3, #20
 800b10c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b114:	e853 3f00 	ldrex	r3, [r3]
 800b118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b11c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	3314      	adds	r3, #20
 800b12e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b132:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b13e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b142:	e841 2300 	strex	r3, r2, [r1]
 800b146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b14a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1d9      	bne.n	800b106 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b156:	2b00      	cmp	r3, #0
 800b158:	d013      	beq.n	800b182 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b15e:	4a7d      	ldr	r2, [pc, #500]	; (800b354 <HAL_UART_IRQHandler+0x3dc>)
 800b160:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b166:	4618      	mov	r0, r3
 800b168:	f7fc fa08 	bl	800757c <HAL_DMA_Abort_IT>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d016      	beq.n	800b1a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b17c:	4610      	mov	r0, r2
 800b17e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b180:	e00e      	b.n	800b1a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f990 	bl	800b4a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b188:	e00a      	b.n	800b1a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f98c 	bl	800b4a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b190:	e006      	b.n	800b1a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f988 	bl	800b4a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b19e:	e170      	b.n	800b482 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1a0:	bf00      	nop
    return;
 800b1a2:	e16e      	b.n	800b482 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	f040 814a 	bne.w	800b442 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1b2:	f003 0310 	and.w	r3, r3, #16
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	f000 8143 	beq.w	800b442 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b1bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1c0:	f003 0310 	and.w	r3, r3, #16
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f000 813c 	beq.w	800b442 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	60bb      	str	r3, [r7, #8]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	60bb      	str	r3, [r7, #8]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	60bb      	str	r3, [r7, #8]
 800b1de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	695b      	ldr	r3, [r3, #20]
 800b1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ea:	2b40      	cmp	r3, #64	; 0x40
 800b1ec:	f040 80b4 	bne.w	800b358 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b1fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b200:	2b00      	cmp	r3, #0
 800b202:	f000 8140 	beq.w	800b486 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b20a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b20e:	429a      	cmp	r2, r3
 800b210:	f080 8139 	bcs.w	800b486 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b21a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b226:	f000 8088 	beq.w	800b33a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	330c      	adds	r3, #12
 800b230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b234:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b238:	e853 3f00 	ldrex	r3, [r3]
 800b23c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	330c      	adds	r3, #12
 800b252:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b256:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b25a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b262:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b266:	e841 2300 	strex	r3, r2, [r1]
 800b26a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b26e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1d9      	bne.n	800b22a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	3314      	adds	r3, #20
 800b27c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b27e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b280:	e853 3f00 	ldrex	r3, [r3]
 800b284:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b288:	f023 0301 	bic.w	r3, r3, #1
 800b28c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	3314      	adds	r3, #20
 800b296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b29a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b29e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b2a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b2a6:	e841 2300 	strex	r3, r2, [r1]
 800b2aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b2ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d1e1      	bne.n	800b276 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	3314      	adds	r3, #20
 800b2b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2bc:	e853 3f00 	ldrex	r3, [r3]
 800b2c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b2c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	3314      	adds	r3, #20
 800b2d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b2d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b2d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b2dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b2de:	e841 2300 	strex	r3, r2, [r1]
 800b2e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b2e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1e3      	bne.n	800b2b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2220      	movs	r2, #32
 800b2ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	330c      	adds	r3, #12
 800b2fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b302:	e853 3f00 	ldrex	r3, [r3]
 800b306:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b30a:	f023 0310 	bic.w	r3, r3, #16
 800b30e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	330c      	adds	r3, #12
 800b318:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b31c:	65ba      	str	r2, [r7, #88]	; 0x58
 800b31e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b320:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b322:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b324:	e841 2300 	strex	r3, r2, [r1]
 800b328:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b32a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1e3      	bne.n	800b2f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b334:	4618      	mov	r0, r3
 800b336:	f7fc f8b1 	bl	800749c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b342:	b29b      	uxth	r3, r3
 800b344:	1ad3      	subs	r3, r2, r3
 800b346:	b29b      	uxth	r3, r3
 800b348:	4619      	mov	r1, r3
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f8b6 	bl	800b4bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b350:	e099      	b.n	800b486 <HAL_UART_IRQHandler+0x50e>
 800b352:	bf00      	nop
 800b354:	0800b6f3 	.word	0x0800b6f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b360:	b29b      	uxth	r3, r3
 800b362:	1ad3      	subs	r3, r2, r3
 800b364:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	2b00      	cmp	r3, #0
 800b370:	f000 808b 	beq.w	800b48a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b378:	2b00      	cmp	r3, #0
 800b37a:	f000 8086 	beq.w	800b48a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	330c      	adds	r3, #12
 800b384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b388:	e853 3f00 	ldrex	r3, [r3]
 800b38c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	330c      	adds	r3, #12
 800b39e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b3a2:	647a      	str	r2, [r7, #68]	; 0x44
 800b3a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b3a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3aa:	e841 2300 	strex	r3, r2, [r1]
 800b3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1e3      	bne.n	800b37e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	3314      	adds	r3, #20
 800b3bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c0:	e853 3f00 	ldrex	r3, [r3]
 800b3c4:	623b      	str	r3, [r7, #32]
   return(result);
 800b3c6:	6a3b      	ldr	r3, [r7, #32]
 800b3c8:	f023 0301 	bic.w	r3, r3, #1
 800b3cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3314      	adds	r3, #20
 800b3d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b3da:	633a      	str	r2, [r7, #48]	; 0x30
 800b3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3e2:	e841 2300 	strex	r3, r2, [r1]
 800b3e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1e3      	bne.n	800b3b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2220      	movs	r2, #32
 800b3f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	330c      	adds	r3, #12
 800b402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	e853 3f00 	ldrex	r3, [r3]
 800b40a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f023 0310 	bic.w	r3, r3, #16
 800b412:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	330c      	adds	r3, #12
 800b41c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b420:	61fa      	str	r2, [r7, #28]
 800b422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b424:	69b9      	ldr	r1, [r7, #24]
 800b426:	69fa      	ldr	r2, [r7, #28]
 800b428:	e841 2300 	strex	r3, r2, [r1]
 800b42c:	617b      	str	r3, [r7, #20]
   return(result);
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1e3      	bne.n	800b3fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b438:	4619      	mov	r1, r3
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f83e 	bl	800b4bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b440:	e023      	b.n	800b48a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d009      	beq.n	800b462 <HAL_UART_IRQHandler+0x4ea>
 800b44e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b456:	2b00      	cmp	r3, #0
 800b458:	d003      	beq.n	800b462 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f95d 	bl	800b71a <UART_Transmit_IT>
    return;
 800b460:	e014      	b.n	800b48c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00e      	beq.n	800b48c <HAL_UART_IRQHandler+0x514>
 800b46e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b476:	2b00      	cmp	r3, #0
 800b478:	d008      	beq.n	800b48c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f99d 	bl	800b7ba <UART_EndTransmit_IT>
    return;
 800b480:	e004      	b.n	800b48c <HAL_UART_IRQHandler+0x514>
    return;
 800b482:	bf00      	nop
 800b484:	e002      	b.n	800b48c <HAL_UART_IRQHandler+0x514>
      return;
 800b486:	bf00      	nop
 800b488:	e000      	b.n	800b48c <HAL_UART_IRQHandler+0x514>
      return;
 800b48a:	bf00      	nop
  }
}
 800b48c:	37e8      	adds	r7, #232	; 0xe8
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop

0800b494 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b4c8:	bf00      	nop
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b090      	sub	sp, #64	; 0x40
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	603b      	str	r3, [r7, #0]
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4e4:	e050      	b.n	800b588 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ec:	d04c      	beq.n	800b588 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b4ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d007      	beq.n	800b504 <UART_WaitOnFlagUntilTimeout+0x30>
 800b4f4:	f7fa ffe2 	bl	80064bc <HAL_GetTick>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	1ad3      	subs	r3, r2, r3
 800b4fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b500:	429a      	cmp	r2, r3
 800b502:	d241      	bcs.n	800b588 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	330c      	adds	r3, #12
 800b50a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50e:	e853 3f00 	ldrex	r3, [r3]
 800b512:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b516:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b51a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	330c      	adds	r3, #12
 800b522:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b524:	637a      	str	r2, [r7, #52]	; 0x34
 800b526:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b528:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b52a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b52c:	e841 2300 	strex	r3, r2, [r1]
 800b530:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1e5      	bne.n	800b504 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	3314      	adds	r3, #20
 800b53e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	e853 3f00 	ldrex	r3, [r3]
 800b546:	613b      	str	r3, [r7, #16]
   return(result);
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	f023 0301 	bic.w	r3, r3, #1
 800b54e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3314      	adds	r3, #20
 800b556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b558:	623a      	str	r2, [r7, #32]
 800b55a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55c:	69f9      	ldr	r1, [r7, #28]
 800b55e:	6a3a      	ldr	r2, [r7, #32]
 800b560:	e841 2300 	strex	r3, r2, [r1]
 800b564:	61bb      	str	r3, [r7, #24]
   return(result);
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1e5      	bne.n	800b538 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2220      	movs	r2, #32
 800b570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2220      	movs	r2, #32
 800b578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b584:	2303      	movs	r3, #3
 800b586:	e00f      	b.n	800b5a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	4013      	ands	r3, r2
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	429a      	cmp	r2, r3
 800b596:	bf0c      	ite	eq
 800b598:	2301      	moveq	r3, #1
 800b59a:	2300      	movne	r3, #0
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	461a      	mov	r2, r3
 800b5a0:	79fb      	ldrb	r3, [r7, #7]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d09f      	beq.n	800b4e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3740      	adds	r7, #64	; 0x40
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	88fa      	ldrh	r2, [r7, #6]
 800b5c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	88fa      	ldrh	r2, [r7, #6]
 800b5ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2222      	movs	r2, #34	; 0x22
 800b5da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d007      	beq.n	800b5fe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	68da      	ldr	r2, [r3, #12]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	695a      	ldr	r2, [r3, #20]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f042 0201 	orr.w	r2, r2, #1
 800b60c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	68da      	ldr	r2, [r3, #12]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f042 0220 	orr.w	r2, r2, #32
 800b61c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b095      	sub	sp, #84	; 0x54
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	330c      	adds	r3, #12
 800b63a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b63e:	e853 3f00 	ldrex	r3, [r3]
 800b642:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b64a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	330c      	adds	r3, #12
 800b652:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b654:	643a      	str	r2, [r7, #64]	; 0x40
 800b656:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b658:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b65a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b65c:	e841 2300 	strex	r3, r2, [r1]
 800b660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b664:	2b00      	cmp	r3, #0
 800b666:	d1e5      	bne.n	800b634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	3314      	adds	r3, #20
 800b66e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	e853 3f00 	ldrex	r3, [r3]
 800b676:	61fb      	str	r3, [r7, #28]
   return(result);
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	f023 0301 	bic.w	r3, r3, #1
 800b67e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	3314      	adds	r3, #20
 800b686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b688:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b68a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b68e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b690:	e841 2300 	strex	r3, r2, [r1]
 800b694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1e5      	bne.n	800b668 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d119      	bne.n	800b6d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	330c      	adds	r3, #12
 800b6aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	e853 3f00 	ldrex	r3, [r3]
 800b6b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	f023 0310 	bic.w	r3, r3, #16
 800b6ba:	647b      	str	r3, [r7, #68]	; 0x44
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	330c      	adds	r3, #12
 800b6c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6c4:	61ba      	str	r2, [r7, #24]
 800b6c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c8:	6979      	ldr	r1, [r7, #20]
 800b6ca:	69ba      	ldr	r2, [r7, #24]
 800b6cc:	e841 2300 	strex	r3, r2, [r1]
 800b6d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1e5      	bne.n	800b6a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2220      	movs	r2, #32
 800b6dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b6e6:	bf00      	nop
 800b6e8:	3754      	adds	r7, #84	; 0x54
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr

0800b6f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b084      	sub	sp, #16
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2200      	movs	r2, #0
 800b704:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2200      	movs	r2, #0
 800b70a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f7ff fecb 	bl	800b4a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b712:	bf00      	nop
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b71a:	b480      	push	{r7}
 800b71c:	b085      	sub	sp, #20
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	2b21      	cmp	r3, #33	; 0x21
 800b72c:	d13e      	bne.n	800b7ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b736:	d114      	bne.n	800b762 <UART_Transmit_IT+0x48>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	691b      	ldr	r3, [r3, #16]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d110      	bne.n	800b762 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6a1b      	ldr	r3, [r3, #32]
 800b744:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	881b      	ldrh	r3, [r3, #0]
 800b74a:	461a      	mov	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b754:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	1c9a      	adds	r2, r3, #2
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	621a      	str	r2, [r3, #32]
 800b760:	e008      	b.n	800b774 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a1b      	ldr	r3, [r3, #32]
 800b766:	1c59      	adds	r1, r3, #1
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	6211      	str	r1, [r2, #32]
 800b76c:	781a      	ldrb	r2, [r3, #0]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b778:	b29b      	uxth	r3, r3
 800b77a:	3b01      	subs	r3, #1
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	4619      	mov	r1, r3
 800b782:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b784:	2b00      	cmp	r3, #0
 800b786:	d10f      	bne.n	800b7a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68da      	ldr	r2, [r3, #12]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b796:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68da      	ldr	r2, [r3, #12]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	e000      	b.n	800b7ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b7ac:	2302      	movs	r3, #2
  }
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3714      	adds	r7, #20
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b082      	sub	sp, #8
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	68da      	ldr	r2, [r3, #12]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2220      	movs	r2, #32
 800b7d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7ff fe5a 	bl	800b494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b08c      	sub	sp, #48	; 0x30
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	2b22      	cmp	r3, #34	; 0x22
 800b7fc:	f040 80ab 	bne.w	800b956 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b808:	d117      	bne.n	800b83a <UART_Receive_IT+0x50>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d113      	bne.n	800b83a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b812:	2300      	movs	r3, #0
 800b814:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b81a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	b29b      	uxth	r3, r3
 800b824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b828:	b29a      	uxth	r2, r3
 800b82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b832:	1c9a      	adds	r2, r3, #2
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	629a      	str	r2, [r3, #40]	; 0x28
 800b838:	e026      	b.n	800b888 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b83e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b840:	2300      	movs	r3, #0
 800b842:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b84c:	d007      	beq.n	800b85e <UART_Receive_IT+0x74>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10a      	bne.n	800b86c <UART_Receive_IT+0x82>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d106      	bne.n	800b86c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	b2da      	uxtb	r2, r3
 800b866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b868:	701a      	strb	r2, [r3, #0]
 800b86a:	e008      	b.n	800b87e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	b2db      	uxtb	r3, r3
 800b874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b878:	b2da      	uxtb	r2, r3
 800b87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	3b01      	subs	r3, #1
 800b890:	b29b      	uxth	r3, r3
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	4619      	mov	r1, r3
 800b896:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d15a      	bne.n	800b952 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68da      	ldr	r2, [r3, #12]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f022 0220 	bic.w	r2, r2, #32
 800b8aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	68da      	ldr	r2, [r3, #12]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b8ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	695a      	ldr	r2, [r3, #20]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f022 0201 	bic.w	r2, r2, #1
 800b8ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2220      	movs	r2, #32
 800b8d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d135      	bne.n	800b948 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	330c      	adds	r3, #12
 800b8e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	e853 3f00 	ldrex	r3, [r3]
 800b8f0:	613b      	str	r3, [r7, #16]
   return(result);
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	f023 0310 	bic.w	r3, r3, #16
 800b8f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	330c      	adds	r3, #12
 800b900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b902:	623a      	str	r2, [r7, #32]
 800b904:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b906:	69f9      	ldr	r1, [r7, #28]
 800b908:	6a3a      	ldr	r2, [r7, #32]
 800b90a:	e841 2300 	strex	r3, r2, [r1]
 800b90e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1e5      	bne.n	800b8e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 0310 	and.w	r3, r3, #16
 800b920:	2b10      	cmp	r3, #16
 800b922:	d10a      	bne.n	800b93a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b924:	2300      	movs	r3, #0
 800b926:	60fb      	str	r3, [r7, #12]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	60fb      	str	r3, [r7, #12]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	60fb      	str	r3, [r7, #12]
 800b938:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b93e:	4619      	mov	r1, r3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f7ff fdbb 	bl	800b4bc <HAL_UARTEx_RxEventCallback>
 800b946:	e002      	b.n	800b94e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7f9 ff53 	bl	80057f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b94e:	2300      	movs	r3, #0
 800b950:	e002      	b.n	800b958 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	e000      	b.n	800b958 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b956:	2302      	movs	r3, #2
  }
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3730      	adds	r7, #48	; 0x30
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b964:	b0c0      	sub	sp, #256	; 0x100
 800b966:	af00      	add	r7, sp, #0
 800b968:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b96c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b97c:	68d9      	ldr	r1, [r3, #12]
 800b97e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	ea40 0301 	orr.w	r3, r0, r1
 800b988:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b98a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b98e:	689a      	ldr	r2, [r3, #8]
 800b990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	431a      	orrs	r2, r3
 800b998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b99c:	695b      	ldr	r3, [r3, #20]
 800b99e:	431a      	orrs	r2, r3
 800b9a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9a4:	69db      	ldr	r3, [r3, #28]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b9ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b9b8:	f021 010c 	bic.w	r1, r1, #12
 800b9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b9c6:	430b      	orrs	r3, r1
 800b9c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b9ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b9d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9da:	6999      	ldr	r1, [r3, #24]
 800b9dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	ea40 0301 	orr.w	r3, r0, r1
 800b9e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	4b8f      	ldr	r3, [pc, #572]	; (800bc2c <UART_SetConfig+0x2cc>)
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d005      	beq.n	800ba00 <UART_SetConfig+0xa0>
 800b9f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	4b8d      	ldr	r3, [pc, #564]	; (800bc30 <UART_SetConfig+0x2d0>)
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d104      	bne.n	800ba0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ba00:	f7fc fda4 	bl	800854c <HAL_RCC_GetPCLK2Freq>
 800ba04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ba08:	e003      	b.n	800ba12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ba0a:	f7fc fd8b 	bl	8008524 <HAL_RCC_GetPCLK1Freq>
 800ba0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba16:	69db      	ldr	r3, [r3, #28]
 800ba18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba1c:	f040 810c 	bne.w	800bc38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ba20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba24:	2200      	movs	r2, #0
 800ba26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ba2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ba2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ba32:	4622      	mov	r2, r4
 800ba34:	462b      	mov	r3, r5
 800ba36:	1891      	adds	r1, r2, r2
 800ba38:	65b9      	str	r1, [r7, #88]	; 0x58
 800ba3a:	415b      	adcs	r3, r3
 800ba3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ba42:	4621      	mov	r1, r4
 800ba44:	eb12 0801 	adds.w	r8, r2, r1
 800ba48:	4629      	mov	r1, r5
 800ba4a:	eb43 0901 	adc.w	r9, r3, r1
 800ba4e:	f04f 0200 	mov.w	r2, #0
 800ba52:	f04f 0300 	mov.w	r3, #0
 800ba56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ba5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ba5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ba62:	4690      	mov	r8, r2
 800ba64:	4699      	mov	r9, r3
 800ba66:	4623      	mov	r3, r4
 800ba68:	eb18 0303 	adds.w	r3, r8, r3
 800ba6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba70:	462b      	mov	r3, r5
 800ba72:	eb49 0303 	adc.w	r3, r9, r3
 800ba76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ba7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ba8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ba8e:	460b      	mov	r3, r1
 800ba90:	18db      	adds	r3, r3, r3
 800ba92:	653b      	str	r3, [r7, #80]	; 0x50
 800ba94:	4613      	mov	r3, r2
 800ba96:	eb42 0303 	adc.w	r3, r2, r3
 800ba9a:	657b      	str	r3, [r7, #84]	; 0x54
 800ba9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800baa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800baa4:	f7f5 f8f0 	bl	8000c88 <__aeabi_uldivmod>
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	4b61      	ldr	r3, [pc, #388]	; (800bc34 <UART_SetConfig+0x2d4>)
 800baae:	fba3 2302 	umull	r2, r3, r3, r2
 800bab2:	095b      	lsrs	r3, r3, #5
 800bab4:	011c      	lsls	r4, r3, #4
 800bab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800baba:	2200      	movs	r2, #0
 800babc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bac0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bac4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bac8:	4642      	mov	r2, r8
 800baca:	464b      	mov	r3, r9
 800bacc:	1891      	adds	r1, r2, r2
 800bace:	64b9      	str	r1, [r7, #72]	; 0x48
 800bad0:	415b      	adcs	r3, r3
 800bad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bad4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bad8:	4641      	mov	r1, r8
 800bada:	eb12 0a01 	adds.w	sl, r2, r1
 800bade:	4649      	mov	r1, r9
 800bae0:	eb43 0b01 	adc.w	fp, r3, r1
 800bae4:	f04f 0200 	mov.w	r2, #0
 800bae8:	f04f 0300 	mov.w	r3, #0
 800baec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800baf0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800baf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800baf8:	4692      	mov	sl, r2
 800bafa:	469b      	mov	fp, r3
 800bafc:	4643      	mov	r3, r8
 800bafe:	eb1a 0303 	adds.w	r3, sl, r3
 800bb02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb06:	464b      	mov	r3, r9
 800bb08:	eb4b 0303 	adc.w	r3, fp, r3
 800bb0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bb10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bb20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bb24:	460b      	mov	r3, r1
 800bb26:	18db      	adds	r3, r3, r3
 800bb28:	643b      	str	r3, [r7, #64]	; 0x40
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	eb42 0303 	adc.w	r3, r2, r3
 800bb30:	647b      	str	r3, [r7, #68]	; 0x44
 800bb32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bb36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bb3a:	f7f5 f8a5 	bl	8000c88 <__aeabi_uldivmod>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	4611      	mov	r1, r2
 800bb44:	4b3b      	ldr	r3, [pc, #236]	; (800bc34 <UART_SetConfig+0x2d4>)
 800bb46:	fba3 2301 	umull	r2, r3, r3, r1
 800bb4a:	095b      	lsrs	r3, r3, #5
 800bb4c:	2264      	movs	r2, #100	; 0x64
 800bb4e:	fb02 f303 	mul.w	r3, r2, r3
 800bb52:	1acb      	subs	r3, r1, r3
 800bb54:	00db      	lsls	r3, r3, #3
 800bb56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bb5a:	4b36      	ldr	r3, [pc, #216]	; (800bc34 <UART_SetConfig+0x2d4>)
 800bb5c:	fba3 2302 	umull	r2, r3, r3, r2
 800bb60:	095b      	lsrs	r3, r3, #5
 800bb62:	005b      	lsls	r3, r3, #1
 800bb64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bb68:	441c      	add	r4, r3
 800bb6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bb78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bb7c:	4642      	mov	r2, r8
 800bb7e:	464b      	mov	r3, r9
 800bb80:	1891      	adds	r1, r2, r2
 800bb82:	63b9      	str	r1, [r7, #56]	; 0x38
 800bb84:	415b      	adcs	r3, r3
 800bb86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bb8c:	4641      	mov	r1, r8
 800bb8e:	1851      	adds	r1, r2, r1
 800bb90:	6339      	str	r1, [r7, #48]	; 0x30
 800bb92:	4649      	mov	r1, r9
 800bb94:	414b      	adcs	r3, r1
 800bb96:	637b      	str	r3, [r7, #52]	; 0x34
 800bb98:	f04f 0200 	mov.w	r2, #0
 800bb9c:	f04f 0300 	mov.w	r3, #0
 800bba0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bba4:	4659      	mov	r1, fp
 800bba6:	00cb      	lsls	r3, r1, #3
 800bba8:	4651      	mov	r1, sl
 800bbaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bbae:	4651      	mov	r1, sl
 800bbb0:	00ca      	lsls	r2, r1, #3
 800bbb2:	4610      	mov	r0, r2
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	4642      	mov	r2, r8
 800bbba:	189b      	adds	r3, r3, r2
 800bbbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bbc0:	464b      	mov	r3, r9
 800bbc2:	460a      	mov	r2, r1
 800bbc4:	eb42 0303 	adc.w	r3, r2, r3
 800bbc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bbcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bbd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bbdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	18db      	adds	r3, r3, r3
 800bbe4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	eb42 0303 	adc.w	r3, r2, r3
 800bbec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bbf2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bbf6:	f7f5 f847 	bl	8000c88 <__aeabi_uldivmod>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	4b0d      	ldr	r3, [pc, #52]	; (800bc34 <UART_SetConfig+0x2d4>)
 800bc00:	fba3 1302 	umull	r1, r3, r3, r2
 800bc04:	095b      	lsrs	r3, r3, #5
 800bc06:	2164      	movs	r1, #100	; 0x64
 800bc08:	fb01 f303 	mul.w	r3, r1, r3
 800bc0c:	1ad3      	subs	r3, r2, r3
 800bc0e:	00db      	lsls	r3, r3, #3
 800bc10:	3332      	adds	r3, #50	; 0x32
 800bc12:	4a08      	ldr	r2, [pc, #32]	; (800bc34 <UART_SetConfig+0x2d4>)
 800bc14:	fba2 2303 	umull	r2, r3, r2, r3
 800bc18:	095b      	lsrs	r3, r3, #5
 800bc1a:	f003 0207 	and.w	r2, r3, #7
 800bc1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4422      	add	r2, r4
 800bc26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bc28:	e105      	b.n	800be36 <UART_SetConfig+0x4d6>
 800bc2a:	bf00      	nop
 800bc2c:	40011000 	.word	0x40011000
 800bc30:	40011400 	.word	0x40011400
 800bc34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bc42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bc46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bc4a:	4642      	mov	r2, r8
 800bc4c:	464b      	mov	r3, r9
 800bc4e:	1891      	adds	r1, r2, r2
 800bc50:	6239      	str	r1, [r7, #32]
 800bc52:	415b      	adcs	r3, r3
 800bc54:	627b      	str	r3, [r7, #36]	; 0x24
 800bc56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bc5a:	4641      	mov	r1, r8
 800bc5c:	1854      	adds	r4, r2, r1
 800bc5e:	4649      	mov	r1, r9
 800bc60:	eb43 0501 	adc.w	r5, r3, r1
 800bc64:	f04f 0200 	mov.w	r2, #0
 800bc68:	f04f 0300 	mov.w	r3, #0
 800bc6c:	00eb      	lsls	r3, r5, #3
 800bc6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bc72:	00e2      	lsls	r2, r4, #3
 800bc74:	4614      	mov	r4, r2
 800bc76:	461d      	mov	r5, r3
 800bc78:	4643      	mov	r3, r8
 800bc7a:	18e3      	adds	r3, r4, r3
 800bc7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc80:	464b      	mov	r3, r9
 800bc82:	eb45 0303 	adc.w	r3, r5, r3
 800bc86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bc8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc9a:	f04f 0200 	mov.w	r2, #0
 800bc9e:	f04f 0300 	mov.w	r3, #0
 800bca2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bca6:	4629      	mov	r1, r5
 800bca8:	008b      	lsls	r3, r1, #2
 800bcaa:	4621      	mov	r1, r4
 800bcac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bcb0:	4621      	mov	r1, r4
 800bcb2:	008a      	lsls	r2, r1, #2
 800bcb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bcb8:	f7f4 ffe6 	bl	8000c88 <__aeabi_uldivmod>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	4b60      	ldr	r3, [pc, #384]	; (800be44 <UART_SetConfig+0x4e4>)
 800bcc2:	fba3 2302 	umull	r2, r3, r3, r2
 800bcc6:	095b      	lsrs	r3, r3, #5
 800bcc8:	011c      	lsls	r4, r3, #4
 800bcca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bcd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bcd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bcdc:	4642      	mov	r2, r8
 800bcde:	464b      	mov	r3, r9
 800bce0:	1891      	adds	r1, r2, r2
 800bce2:	61b9      	str	r1, [r7, #24]
 800bce4:	415b      	adcs	r3, r3
 800bce6:	61fb      	str	r3, [r7, #28]
 800bce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bcec:	4641      	mov	r1, r8
 800bcee:	1851      	adds	r1, r2, r1
 800bcf0:	6139      	str	r1, [r7, #16]
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	414b      	adcs	r3, r1
 800bcf6:	617b      	str	r3, [r7, #20]
 800bcf8:	f04f 0200 	mov.w	r2, #0
 800bcfc:	f04f 0300 	mov.w	r3, #0
 800bd00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bd04:	4659      	mov	r1, fp
 800bd06:	00cb      	lsls	r3, r1, #3
 800bd08:	4651      	mov	r1, sl
 800bd0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd0e:	4651      	mov	r1, sl
 800bd10:	00ca      	lsls	r2, r1, #3
 800bd12:	4610      	mov	r0, r2
 800bd14:	4619      	mov	r1, r3
 800bd16:	4603      	mov	r3, r0
 800bd18:	4642      	mov	r2, r8
 800bd1a:	189b      	adds	r3, r3, r2
 800bd1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd20:	464b      	mov	r3, r9
 800bd22:	460a      	mov	r2, r1
 800bd24:	eb42 0303 	adc.w	r3, r2, r3
 800bd28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd36:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bd38:	f04f 0200 	mov.w	r2, #0
 800bd3c:	f04f 0300 	mov.w	r3, #0
 800bd40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bd44:	4649      	mov	r1, r9
 800bd46:	008b      	lsls	r3, r1, #2
 800bd48:	4641      	mov	r1, r8
 800bd4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd4e:	4641      	mov	r1, r8
 800bd50:	008a      	lsls	r2, r1, #2
 800bd52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bd56:	f7f4 ff97 	bl	8000c88 <__aeabi_uldivmod>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	4b39      	ldr	r3, [pc, #228]	; (800be44 <UART_SetConfig+0x4e4>)
 800bd60:	fba3 1302 	umull	r1, r3, r3, r2
 800bd64:	095b      	lsrs	r3, r3, #5
 800bd66:	2164      	movs	r1, #100	; 0x64
 800bd68:	fb01 f303 	mul.w	r3, r1, r3
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	011b      	lsls	r3, r3, #4
 800bd70:	3332      	adds	r3, #50	; 0x32
 800bd72:	4a34      	ldr	r2, [pc, #208]	; (800be44 <UART_SetConfig+0x4e4>)
 800bd74:	fba2 2303 	umull	r2, r3, r2, r3
 800bd78:	095b      	lsrs	r3, r3, #5
 800bd7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd7e:	441c      	add	r4, r3
 800bd80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd84:	2200      	movs	r2, #0
 800bd86:	673b      	str	r3, [r7, #112]	; 0x70
 800bd88:	677a      	str	r2, [r7, #116]	; 0x74
 800bd8a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bd8e:	4642      	mov	r2, r8
 800bd90:	464b      	mov	r3, r9
 800bd92:	1891      	adds	r1, r2, r2
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	415b      	adcs	r3, r3
 800bd98:	60fb      	str	r3, [r7, #12]
 800bd9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd9e:	4641      	mov	r1, r8
 800bda0:	1851      	adds	r1, r2, r1
 800bda2:	6039      	str	r1, [r7, #0]
 800bda4:	4649      	mov	r1, r9
 800bda6:	414b      	adcs	r3, r1
 800bda8:	607b      	str	r3, [r7, #4]
 800bdaa:	f04f 0200 	mov.w	r2, #0
 800bdae:	f04f 0300 	mov.w	r3, #0
 800bdb2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bdb6:	4659      	mov	r1, fp
 800bdb8:	00cb      	lsls	r3, r1, #3
 800bdba:	4651      	mov	r1, sl
 800bdbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bdc0:	4651      	mov	r1, sl
 800bdc2:	00ca      	lsls	r2, r1, #3
 800bdc4:	4610      	mov	r0, r2
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	4603      	mov	r3, r0
 800bdca:	4642      	mov	r2, r8
 800bdcc:	189b      	adds	r3, r3, r2
 800bdce:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdd0:	464b      	mov	r3, r9
 800bdd2:	460a      	mov	r2, r1
 800bdd4:	eb42 0303 	adc.w	r3, r2, r3
 800bdd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bdda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	663b      	str	r3, [r7, #96]	; 0x60
 800bde4:	667a      	str	r2, [r7, #100]	; 0x64
 800bde6:	f04f 0200 	mov.w	r2, #0
 800bdea:	f04f 0300 	mov.w	r3, #0
 800bdee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bdf2:	4649      	mov	r1, r9
 800bdf4:	008b      	lsls	r3, r1, #2
 800bdf6:	4641      	mov	r1, r8
 800bdf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bdfc:	4641      	mov	r1, r8
 800bdfe:	008a      	lsls	r2, r1, #2
 800be00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800be04:	f7f4 ff40 	bl	8000c88 <__aeabi_uldivmod>
 800be08:	4602      	mov	r2, r0
 800be0a:	460b      	mov	r3, r1
 800be0c:	4b0d      	ldr	r3, [pc, #52]	; (800be44 <UART_SetConfig+0x4e4>)
 800be0e:	fba3 1302 	umull	r1, r3, r3, r2
 800be12:	095b      	lsrs	r3, r3, #5
 800be14:	2164      	movs	r1, #100	; 0x64
 800be16:	fb01 f303 	mul.w	r3, r1, r3
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	011b      	lsls	r3, r3, #4
 800be1e:	3332      	adds	r3, #50	; 0x32
 800be20:	4a08      	ldr	r2, [pc, #32]	; (800be44 <UART_SetConfig+0x4e4>)
 800be22:	fba2 2303 	umull	r2, r3, r2, r3
 800be26:	095b      	lsrs	r3, r3, #5
 800be28:	f003 020f 	and.w	r2, r3, #15
 800be2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4422      	add	r2, r4
 800be34:	609a      	str	r2, [r3, #8]
}
 800be36:	bf00      	nop
 800be38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800be3c:	46bd      	mov	sp, r7
 800be3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be42:	bf00      	nop
 800be44:	51eb851f 	.word	0x51eb851f

0800be48 <__errno>:
 800be48:	4b01      	ldr	r3, [pc, #4]	; (800be50 <__errno+0x8>)
 800be4a:	6818      	ldr	r0, [r3, #0]
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	2000009c 	.word	0x2000009c

0800be54 <__libc_init_array>:
 800be54:	b570      	push	{r4, r5, r6, lr}
 800be56:	4d0d      	ldr	r5, [pc, #52]	; (800be8c <__libc_init_array+0x38>)
 800be58:	4c0d      	ldr	r4, [pc, #52]	; (800be90 <__libc_init_array+0x3c>)
 800be5a:	1b64      	subs	r4, r4, r5
 800be5c:	10a4      	asrs	r4, r4, #2
 800be5e:	2600      	movs	r6, #0
 800be60:	42a6      	cmp	r6, r4
 800be62:	d109      	bne.n	800be78 <__libc_init_array+0x24>
 800be64:	4d0b      	ldr	r5, [pc, #44]	; (800be94 <__libc_init_array+0x40>)
 800be66:	4c0c      	ldr	r4, [pc, #48]	; (800be98 <__libc_init_array+0x44>)
 800be68:	f004 f950 	bl	801010c <_init>
 800be6c:	1b64      	subs	r4, r4, r5
 800be6e:	10a4      	asrs	r4, r4, #2
 800be70:	2600      	movs	r6, #0
 800be72:	42a6      	cmp	r6, r4
 800be74:	d105      	bne.n	800be82 <__libc_init_array+0x2e>
 800be76:	bd70      	pop	{r4, r5, r6, pc}
 800be78:	f855 3b04 	ldr.w	r3, [r5], #4
 800be7c:	4798      	blx	r3
 800be7e:	3601      	adds	r6, #1
 800be80:	e7ee      	b.n	800be60 <__libc_init_array+0xc>
 800be82:	f855 3b04 	ldr.w	r3, [r5], #4
 800be86:	4798      	blx	r3
 800be88:	3601      	adds	r6, #1
 800be8a:	e7f2      	b.n	800be72 <__libc_init_array+0x1e>
 800be8c:	08010880 	.word	0x08010880
 800be90:	08010880 	.word	0x08010880
 800be94:	08010880 	.word	0x08010880
 800be98:	08010884 	.word	0x08010884

0800be9c <memset>:
 800be9c:	4402      	add	r2, r0
 800be9e:	4603      	mov	r3, r0
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d100      	bne.n	800bea6 <memset+0xa>
 800bea4:	4770      	bx	lr
 800bea6:	f803 1b01 	strb.w	r1, [r3], #1
 800beaa:	e7f9      	b.n	800bea0 <memset+0x4>

0800beac <__cvt>:
 800beac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800beb0:	ec55 4b10 	vmov	r4, r5, d0
 800beb4:	2d00      	cmp	r5, #0
 800beb6:	460e      	mov	r6, r1
 800beb8:	4619      	mov	r1, r3
 800beba:	462b      	mov	r3, r5
 800bebc:	bfbb      	ittet	lt
 800bebe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bec2:	461d      	movlt	r5, r3
 800bec4:	2300      	movge	r3, #0
 800bec6:	232d      	movlt	r3, #45	; 0x2d
 800bec8:	700b      	strb	r3, [r1, #0]
 800beca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800becc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bed0:	4691      	mov	r9, r2
 800bed2:	f023 0820 	bic.w	r8, r3, #32
 800bed6:	bfbc      	itt	lt
 800bed8:	4622      	movlt	r2, r4
 800beda:	4614      	movlt	r4, r2
 800bedc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bee0:	d005      	beq.n	800beee <__cvt+0x42>
 800bee2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bee6:	d100      	bne.n	800beea <__cvt+0x3e>
 800bee8:	3601      	adds	r6, #1
 800beea:	2102      	movs	r1, #2
 800beec:	e000      	b.n	800bef0 <__cvt+0x44>
 800beee:	2103      	movs	r1, #3
 800bef0:	ab03      	add	r3, sp, #12
 800bef2:	9301      	str	r3, [sp, #4]
 800bef4:	ab02      	add	r3, sp, #8
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	ec45 4b10 	vmov	d0, r4, r5
 800befc:	4653      	mov	r3, sl
 800befe:	4632      	mov	r2, r6
 800bf00:	f000 fcea 	bl	800c8d8 <_dtoa_r>
 800bf04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bf08:	4607      	mov	r7, r0
 800bf0a:	d102      	bne.n	800bf12 <__cvt+0x66>
 800bf0c:	f019 0f01 	tst.w	r9, #1
 800bf10:	d022      	beq.n	800bf58 <__cvt+0xac>
 800bf12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf16:	eb07 0906 	add.w	r9, r7, r6
 800bf1a:	d110      	bne.n	800bf3e <__cvt+0x92>
 800bf1c:	783b      	ldrb	r3, [r7, #0]
 800bf1e:	2b30      	cmp	r3, #48	; 0x30
 800bf20:	d10a      	bne.n	800bf38 <__cvt+0x8c>
 800bf22:	2200      	movs	r2, #0
 800bf24:	2300      	movs	r3, #0
 800bf26:	4620      	mov	r0, r4
 800bf28:	4629      	mov	r1, r5
 800bf2a:	f7f4 fded 	bl	8000b08 <__aeabi_dcmpeq>
 800bf2e:	b918      	cbnz	r0, 800bf38 <__cvt+0x8c>
 800bf30:	f1c6 0601 	rsb	r6, r6, #1
 800bf34:	f8ca 6000 	str.w	r6, [sl]
 800bf38:	f8da 3000 	ldr.w	r3, [sl]
 800bf3c:	4499      	add	r9, r3
 800bf3e:	2200      	movs	r2, #0
 800bf40:	2300      	movs	r3, #0
 800bf42:	4620      	mov	r0, r4
 800bf44:	4629      	mov	r1, r5
 800bf46:	f7f4 fddf 	bl	8000b08 <__aeabi_dcmpeq>
 800bf4a:	b108      	cbz	r0, 800bf50 <__cvt+0xa4>
 800bf4c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bf50:	2230      	movs	r2, #48	; 0x30
 800bf52:	9b03      	ldr	r3, [sp, #12]
 800bf54:	454b      	cmp	r3, r9
 800bf56:	d307      	bcc.n	800bf68 <__cvt+0xbc>
 800bf58:	9b03      	ldr	r3, [sp, #12]
 800bf5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf5c:	1bdb      	subs	r3, r3, r7
 800bf5e:	4638      	mov	r0, r7
 800bf60:	6013      	str	r3, [r2, #0]
 800bf62:	b004      	add	sp, #16
 800bf64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf68:	1c59      	adds	r1, r3, #1
 800bf6a:	9103      	str	r1, [sp, #12]
 800bf6c:	701a      	strb	r2, [r3, #0]
 800bf6e:	e7f0      	b.n	800bf52 <__cvt+0xa6>

0800bf70 <__exponent>:
 800bf70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf72:	4603      	mov	r3, r0
 800bf74:	2900      	cmp	r1, #0
 800bf76:	bfb8      	it	lt
 800bf78:	4249      	neglt	r1, r1
 800bf7a:	f803 2b02 	strb.w	r2, [r3], #2
 800bf7e:	bfb4      	ite	lt
 800bf80:	222d      	movlt	r2, #45	; 0x2d
 800bf82:	222b      	movge	r2, #43	; 0x2b
 800bf84:	2909      	cmp	r1, #9
 800bf86:	7042      	strb	r2, [r0, #1]
 800bf88:	dd2a      	ble.n	800bfe0 <__exponent+0x70>
 800bf8a:	f10d 0407 	add.w	r4, sp, #7
 800bf8e:	46a4      	mov	ip, r4
 800bf90:	270a      	movs	r7, #10
 800bf92:	46a6      	mov	lr, r4
 800bf94:	460a      	mov	r2, r1
 800bf96:	fb91 f6f7 	sdiv	r6, r1, r7
 800bf9a:	fb07 1516 	mls	r5, r7, r6, r1
 800bf9e:	3530      	adds	r5, #48	; 0x30
 800bfa0:	2a63      	cmp	r2, #99	; 0x63
 800bfa2:	f104 34ff 	add.w	r4, r4, #4294967295
 800bfa6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bfaa:	4631      	mov	r1, r6
 800bfac:	dcf1      	bgt.n	800bf92 <__exponent+0x22>
 800bfae:	3130      	adds	r1, #48	; 0x30
 800bfb0:	f1ae 0502 	sub.w	r5, lr, #2
 800bfb4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bfb8:	1c44      	adds	r4, r0, #1
 800bfba:	4629      	mov	r1, r5
 800bfbc:	4561      	cmp	r1, ip
 800bfbe:	d30a      	bcc.n	800bfd6 <__exponent+0x66>
 800bfc0:	f10d 0209 	add.w	r2, sp, #9
 800bfc4:	eba2 020e 	sub.w	r2, r2, lr
 800bfc8:	4565      	cmp	r5, ip
 800bfca:	bf88      	it	hi
 800bfcc:	2200      	movhi	r2, #0
 800bfce:	4413      	add	r3, r2
 800bfd0:	1a18      	subs	r0, r3, r0
 800bfd2:	b003      	add	sp, #12
 800bfd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfda:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bfde:	e7ed      	b.n	800bfbc <__exponent+0x4c>
 800bfe0:	2330      	movs	r3, #48	; 0x30
 800bfe2:	3130      	adds	r1, #48	; 0x30
 800bfe4:	7083      	strb	r3, [r0, #2]
 800bfe6:	70c1      	strb	r1, [r0, #3]
 800bfe8:	1d03      	adds	r3, r0, #4
 800bfea:	e7f1      	b.n	800bfd0 <__exponent+0x60>

0800bfec <_printf_float>:
 800bfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff0:	ed2d 8b02 	vpush	{d8}
 800bff4:	b08d      	sub	sp, #52	; 0x34
 800bff6:	460c      	mov	r4, r1
 800bff8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bffc:	4616      	mov	r6, r2
 800bffe:	461f      	mov	r7, r3
 800c000:	4605      	mov	r5, r0
 800c002:	f001 fa57 	bl	800d4b4 <_localeconv_r>
 800c006:	f8d0 a000 	ldr.w	sl, [r0]
 800c00a:	4650      	mov	r0, sl
 800c00c:	f7f4 f900 	bl	8000210 <strlen>
 800c010:	2300      	movs	r3, #0
 800c012:	930a      	str	r3, [sp, #40]	; 0x28
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	9305      	str	r3, [sp, #20]
 800c018:	f8d8 3000 	ldr.w	r3, [r8]
 800c01c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c020:	3307      	adds	r3, #7
 800c022:	f023 0307 	bic.w	r3, r3, #7
 800c026:	f103 0208 	add.w	r2, r3, #8
 800c02a:	f8c8 2000 	str.w	r2, [r8]
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c036:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c03a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c03e:	9307      	str	r3, [sp, #28]
 800c040:	f8cd 8018 	str.w	r8, [sp, #24]
 800c044:	ee08 0a10 	vmov	s16, r0
 800c048:	4b9f      	ldr	r3, [pc, #636]	; (800c2c8 <_printf_float+0x2dc>)
 800c04a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c04e:	f04f 32ff 	mov.w	r2, #4294967295
 800c052:	f7f4 fd8b 	bl	8000b6c <__aeabi_dcmpun>
 800c056:	bb88      	cbnz	r0, 800c0bc <_printf_float+0xd0>
 800c058:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c05c:	4b9a      	ldr	r3, [pc, #616]	; (800c2c8 <_printf_float+0x2dc>)
 800c05e:	f04f 32ff 	mov.w	r2, #4294967295
 800c062:	f7f4 fd65 	bl	8000b30 <__aeabi_dcmple>
 800c066:	bb48      	cbnz	r0, 800c0bc <_printf_float+0xd0>
 800c068:	2200      	movs	r2, #0
 800c06a:	2300      	movs	r3, #0
 800c06c:	4640      	mov	r0, r8
 800c06e:	4649      	mov	r1, r9
 800c070:	f7f4 fd54 	bl	8000b1c <__aeabi_dcmplt>
 800c074:	b110      	cbz	r0, 800c07c <_printf_float+0x90>
 800c076:	232d      	movs	r3, #45	; 0x2d
 800c078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c07c:	4b93      	ldr	r3, [pc, #588]	; (800c2cc <_printf_float+0x2e0>)
 800c07e:	4894      	ldr	r0, [pc, #592]	; (800c2d0 <_printf_float+0x2e4>)
 800c080:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c084:	bf94      	ite	ls
 800c086:	4698      	movls	r8, r3
 800c088:	4680      	movhi	r8, r0
 800c08a:	2303      	movs	r3, #3
 800c08c:	6123      	str	r3, [r4, #16]
 800c08e:	9b05      	ldr	r3, [sp, #20]
 800c090:	f023 0204 	bic.w	r2, r3, #4
 800c094:	6022      	str	r2, [r4, #0]
 800c096:	f04f 0900 	mov.w	r9, #0
 800c09a:	9700      	str	r7, [sp, #0]
 800c09c:	4633      	mov	r3, r6
 800c09e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c0a0:	4621      	mov	r1, r4
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	f000 f9d8 	bl	800c458 <_printf_common>
 800c0a8:	3001      	adds	r0, #1
 800c0aa:	f040 8090 	bne.w	800c1ce <_printf_float+0x1e2>
 800c0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b2:	b00d      	add	sp, #52	; 0x34
 800c0b4:	ecbd 8b02 	vpop	{d8}
 800c0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0bc:	4642      	mov	r2, r8
 800c0be:	464b      	mov	r3, r9
 800c0c0:	4640      	mov	r0, r8
 800c0c2:	4649      	mov	r1, r9
 800c0c4:	f7f4 fd52 	bl	8000b6c <__aeabi_dcmpun>
 800c0c8:	b140      	cbz	r0, 800c0dc <_printf_float+0xf0>
 800c0ca:	464b      	mov	r3, r9
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	bfbc      	itt	lt
 800c0d0:	232d      	movlt	r3, #45	; 0x2d
 800c0d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c0d6:	487f      	ldr	r0, [pc, #508]	; (800c2d4 <_printf_float+0x2e8>)
 800c0d8:	4b7f      	ldr	r3, [pc, #508]	; (800c2d8 <_printf_float+0x2ec>)
 800c0da:	e7d1      	b.n	800c080 <_printf_float+0x94>
 800c0dc:	6863      	ldr	r3, [r4, #4]
 800c0de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c0e2:	9206      	str	r2, [sp, #24]
 800c0e4:	1c5a      	adds	r2, r3, #1
 800c0e6:	d13f      	bne.n	800c168 <_printf_float+0x17c>
 800c0e8:	2306      	movs	r3, #6
 800c0ea:	6063      	str	r3, [r4, #4]
 800c0ec:	9b05      	ldr	r3, [sp, #20]
 800c0ee:	6861      	ldr	r1, [r4, #4]
 800c0f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	9303      	str	r3, [sp, #12]
 800c0f8:	ab0a      	add	r3, sp, #40	; 0x28
 800c0fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c0fe:	ab09      	add	r3, sp, #36	; 0x24
 800c100:	ec49 8b10 	vmov	d0, r8, r9
 800c104:	9300      	str	r3, [sp, #0]
 800c106:	6022      	str	r2, [r4, #0]
 800c108:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c10c:	4628      	mov	r0, r5
 800c10e:	f7ff fecd 	bl	800beac <__cvt>
 800c112:	9b06      	ldr	r3, [sp, #24]
 800c114:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c116:	2b47      	cmp	r3, #71	; 0x47
 800c118:	4680      	mov	r8, r0
 800c11a:	d108      	bne.n	800c12e <_printf_float+0x142>
 800c11c:	1cc8      	adds	r0, r1, #3
 800c11e:	db02      	blt.n	800c126 <_printf_float+0x13a>
 800c120:	6863      	ldr	r3, [r4, #4]
 800c122:	4299      	cmp	r1, r3
 800c124:	dd41      	ble.n	800c1aa <_printf_float+0x1be>
 800c126:	f1ab 0b02 	sub.w	fp, fp, #2
 800c12a:	fa5f fb8b 	uxtb.w	fp, fp
 800c12e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c132:	d820      	bhi.n	800c176 <_printf_float+0x18a>
 800c134:	3901      	subs	r1, #1
 800c136:	465a      	mov	r2, fp
 800c138:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c13c:	9109      	str	r1, [sp, #36]	; 0x24
 800c13e:	f7ff ff17 	bl	800bf70 <__exponent>
 800c142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c144:	1813      	adds	r3, r2, r0
 800c146:	2a01      	cmp	r2, #1
 800c148:	4681      	mov	r9, r0
 800c14a:	6123      	str	r3, [r4, #16]
 800c14c:	dc02      	bgt.n	800c154 <_printf_float+0x168>
 800c14e:	6822      	ldr	r2, [r4, #0]
 800c150:	07d2      	lsls	r2, r2, #31
 800c152:	d501      	bpl.n	800c158 <_printf_float+0x16c>
 800c154:	3301      	adds	r3, #1
 800c156:	6123      	str	r3, [r4, #16]
 800c158:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d09c      	beq.n	800c09a <_printf_float+0xae>
 800c160:	232d      	movs	r3, #45	; 0x2d
 800c162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c166:	e798      	b.n	800c09a <_printf_float+0xae>
 800c168:	9a06      	ldr	r2, [sp, #24]
 800c16a:	2a47      	cmp	r2, #71	; 0x47
 800c16c:	d1be      	bne.n	800c0ec <_printf_float+0x100>
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1bc      	bne.n	800c0ec <_printf_float+0x100>
 800c172:	2301      	movs	r3, #1
 800c174:	e7b9      	b.n	800c0ea <_printf_float+0xfe>
 800c176:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c17a:	d118      	bne.n	800c1ae <_printf_float+0x1c2>
 800c17c:	2900      	cmp	r1, #0
 800c17e:	6863      	ldr	r3, [r4, #4]
 800c180:	dd0b      	ble.n	800c19a <_printf_float+0x1ae>
 800c182:	6121      	str	r1, [r4, #16]
 800c184:	b913      	cbnz	r3, 800c18c <_printf_float+0x1a0>
 800c186:	6822      	ldr	r2, [r4, #0]
 800c188:	07d0      	lsls	r0, r2, #31
 800c18a:	d502      	bpl.n	800c192 <_printf_float+0x1a6>
 800c18c:	3301      	adds	r3, #1
 800c18e:	440b      	add	r3, r1
 800c190:	6123      	str	r3, [r4, #16]
 800c192:	65a1      	str	r1, [r4, #88]	; 0x58
 800c194:	f04f 0900 	mov.w	r9, #0
 800c198:	e7de      	b.n	800c158 <_printf_float+0x16c>
 800c19a:	b913      	cbnz	r3, 800c1a2 <_printf_float+0x1b6>
 800c19c:	6822      	ldr	r2, [r4, #0]
 800c19e:	07d2      	lsls	r2, r2, #31
 800c1a0:	d501      	bpl.n	800c1a6 <_printf_float+0x1ba>
 800c1a2:	3302      	adds	r3, #2
 800c1a4:	e7f4      	b.n	800c190 <_printf_float+0x1a4>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e7f2      	b.n	800c190 <_printf_float+0x1a4>
 800c1aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c1ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1b0:	4299      	cmp	r1, r3
 800c1b2:	db05      	blt.n	800c1c0 <_printf_float+0x1d4>
 800c1b4:	6823      	ldr	r3, [r4, #0]
 800c1b6:	6121      	str	r1, [r4, #16]
 800c1b8:	07d8      	lsls	r0, r3, #31
 800c1ba:	d5ea      	bpl.n	800c192 <_printf_float+0x1a6>
 800c1bc:	1c4b      	adds	r3, r1, #1
 800c1be:	e7e7      	b.n	800c190 <_printf_float+0x1a4>
 800c1c0:	2900      	cmp	r1, #0
 800c1c2:	bfd4      	ite	le
 800c1c4:	f1c1 0202 	rsble	r2, r1, #2
 800c1c8:	2201      	movgt	r2, #1
 800c1ca:	4413      	add	r3, r2
 800c1cc:	e7e0      	b.n	800c190 <_printf_float+0x1a4>
 800c1ce:	6823      	ldr	r3, [r4, #0]
 800c1d0:	055a      	lsls	r2, r3, #21
 800c1d2:	d407      	bmi.n	800c1e4 <_printf_float+0x1f8>
 800c1d4:	6923      	ldr	r3, [r4, #16]
 800c1d6:	4642      	mov	r2, r8
 800c1d8:	4631      	mov	r1, r6
 800c1da:	4628      	mov	r0, r5
 800c1dc:	47b8      	blx	r7
 800c1de:	3001      	adds	r0, #1
 800c1e0:	d12c      	bne.n	800c23c <_printf_float+0x250>
 800c1e2:	e764      	b.n	800c0ae <_printf_float+0xc2>
 800c1e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c1e8:	f240 80e0 	bls.w	800c3ac <_printf_float+0x3c0>
 800c1ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	f7f4 fc88 	bl	8000b08 <__aeabi_dcmpeq>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d034      	beq.n	800c266 <_printf_float+0x27a>
 800c1fc:	4a37      	ldr	r2, [pc, #220]	; (800c2dc <_printf_float+0x2f0>)
 800c1fe:	2301      	movs	r3, #1
 800c200:	4631      	mov	r1, r6
 800c202:	4628      	mov	r0, r5
 800c204:	47b8      	blx	r7
 800c206:	3001      	adds	r0, #1
 800c208:	f43f af51 	beq.w	800c0ae <_printf_float+0xc2>
 800c20c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c210:	429a      	cmp	r2, r3
 800c212:	db02      	blt.n	800c21a <_printf_float+0x22e>
 800c214:	6823      	ldr	r3, [r4, #0]
 800c216:	07d8      	lsls	r0, r3, #31
 800c218:	d510      	bpl.n	800c23c <_printf_float+0x250>
 800c21a:	ee18 3a10 	vmov	r3, s16
 800c21e:	4652      	mov	r2, sl
 800c220:	4631      	mov	r1, r6
 800c222:	4628      	mov	r0, r5
 800c224:	47b8      	blx	r7
 800c226:	3001      	adds	r0, #1
 800c228:	f43f af41 	beq.w	800c0ae <_printf_float+0xc2>
 800c22c:	f04f 0800 	mov.w	r8, #0
 800c230:	f104 091a 	add.w	r9, r4, #26
 800c234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c236:	3b01      	subs	r3, #1
 800c238:	4543      	cmp	r3, r8
 800c23a:	dc09      	bgt.n	800c250 <_printf_float+0x264>
 800c23c:	6823      	ldr	r3, [r4, #0]
 800c23e:	079b      	lsls	r3, r3, #30
 800c240:	f100 8105 	bmi.w	800c44e <_printf_float+0x462>
 800c244:	68e0      	ldr	r0, [r4, #12]
 800c246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c248:	4298      	cmp	r0, r3
 800c24a:	bfb8      	it	lt
 800c24c:	4618      	movlt	r0, r3
 800c24e:	e730      	b.n	800c0b2 <_printf_float+0xc6>
 800c250:	2301      	movs	r3, #1
 800c252:	464a      	mov	r2, r9
 800c254:	4631      	mov	r1, r6
 800c256:	4628      	mov	r0, r5
 800c258:	47b8      	blx	r7
 800c25a:	3001      	adds	r0, #1
 800c25c:	f43f af27 	beq.w	800c0ae <_printf_float+0xc2>
 800c260:	f108 0801 	add.w	r8, r8, #1
 800c264:	e7e6      	b.n	800c234 <_printf_float+0x248>
 800c266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c268:	2b00      	cmp	r3, #0
 800c26a:	dc39      	bgt.n	800c2e0 <_printf_float+0x2f4>
 800c26c:	4a1b      	ldr	r2, [pc, #108]	; (800c2dc <_printf_float+0x2f0>)
 800c26e:	2301      	movs	r3, #1
 800c270:	4631      	mov	r1, r6
 800c272:	4628      	mov	r0, r5
 800c274:	47b8      	blx	r7
 800c276:	3001      	adds	r0, #1
 800c278:	f43f af19 	beq.w	800c0ae <_printf_float+0xc2>
 800c27c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c280:	4313      	orrs	r3, r2
 800c282:	d102      	bne.n	800c28a <_printf_float+0x29e>
 800c284:	6823      	ldr	r3, [r4, #0]
 800c286:	07d9      	lsls	r1, r3, #31
 800c288:	d5d8      	bpl.n	800c23c <_printf_float+0x250>
 800c28a:	ee18 3a10 	vmov	r3, s16
 800c28e:	4652      	mov	r2, sl
 800c290:	4631      	mov	r1, r6
 800c292:	4628      	mov	r0, r5
 800c294:	47b8      	blx	r7
 800c296:	3001      	adds	r0, #1
 800c298:	f43f af09 	beq.w	800c0ae <_printf_float+0xc2>
 800c29c:	f04f 0900 	mov.w	r9, #0
 800c2a0:	f104 0a1a 	add.w	sl, r4, #26
 800c2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2a6:	425b      	negs	r3, r3
 800c2a8:	454b      	cmp	r3, r9
 800c2aa:	dc01      	bgt.n	800c2b0 <_printf_float+0x2c4>
 800c2ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2ae:	e792      	b.n	800c1d6 <_printf_float+0x1ea>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	4652      	mov	r2, sl
 800c2b4:	4631      	mov	r1, r6
 800c2b6:	4628      	mov	r0, r5
 800c2b8:	47b8      	blx	r7
 800c2ba:	3001      	adds	r0, #1
 800c2bc:	f43f aef7 	beq.w	800c0ae <_printf_float+0xc2>
 800c2c0:	f109 0901 	add.w	r9, r9, #1
 800c2c4:	e7ee      	b.n	800c2a4 <_printf_float+0x2b8>
 800c2c6:	bf00      	nop
 800c2c8:	7fefffff 	.word	0x7fefffff
 800c2cc:	08010284 	.word	0x08010284
 800c2d0:	08010288 	.word	0x08010288
 800c2d4:	08010290 	.word	0x08010290
 800c2d8:	0801028c 	.word	0x0801028c
 800c2dc:	08010294 	.word	0x08010294
 800c2e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	bfa8      	it	ge
 800c2e8:	461a      	movge	r2, r3
 800c2ea:	2a00      	cmp	r2, #0
 800c2ec:	4691      	mov	r9, r2
 800c2ee:	dc37      	bgt.n	800c360 <_printf_float+0x374>
 800c2f0:	f04f 0b00 	mov.w	fp, #0
 800c2f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2f8:	f104 021a 	add.w	r2, r4, #26
 800c2fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2fe:	9305      	str	r3, [sp, #20]
 800c300:	eba3 0309 	sub.w	r3, r3, r9
 800c304:	455b      	cmp	r3, fp
 800c306:	dc33      	bgt.n	800c370 <_printf_float+0x384>
 800c308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c30c:	429a      	cmp	r2, r3
 800c30e:	db3b      	blt.n	800c388 <_printf_float+0x39c>
 800c310:	6823      	ldr	r3, [r4, #0]
 800c312:	07da      	lsls	r2, r3, #31
 800c314:	d438      	bmi.n	800c388 <_printf_float+0x39c>
 800c316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c318:	9a05      	ldr	r2, [sp, #20]
 800c31a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c31c:	1a9a      	subs	r2, r3, r2
 800c31e:	eba3 0901 	sub.w	r9, r3, r1
 800c322:	4591      	cmp	r9, r2
 800c324:	bfa8      	it	ge
 800c326:	4691      	movge	r9, r2
 800c328:	f1b9 0f00 	cmp.w	r9, #0
 800c32c:	dc35      	bgt.n	800c39a <_printf_float+0x3ae>
 800c32e:	f04f 0800 	mov.w	r8, #0
 800c332:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c336:	f104 0a1a 	add.w	sl, r4, #26
 800c33a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c33e:	1a9b      	subs	r3, r3, r2
 800c340:	eba3 0309 	sub.w	r3, r3, r9
 800c344:	4543      	cmp	r3, r8
 800c346:	f77f af79 	ble.w	800c23c <_printf_float+0x250>
 800c34a:	2301      	movs	r3, #1
 800c34c:	4652      	mov	r2, sl
 800c34e:	4631      	mov	r1, r6
 800c350:	4628      	mov	r0, r5
 800c352:	47b8      	blx	r7
 800c354:	3001      	adds	r0, #1
 800c356:	f43f aeaa 	beq.w	800c0ae <_printf_float+0xc2>
 800c35a:	f108 0801 	add.w	r8, r8, #1
 800c35e:	e7ec      	b.n	800c33a <_printf_float+0x34e>
 800c360:	4613      	mov	r3, r2
 800c362:	4631      	mov	r1, r6
 800c364:	4642      	mov	r2, r8
 800c366:	4628      	mov	r0, r5
 800c368:	47b8      	blx	r7
 800c36a:	3001      	adds	r0, #1
 800c36c:	d1c0      	bne.n	800c2f0 <_printf_float+0x304>
 800c36e:	e69e      	b.n	800c0ae <_printf_float+0xc2>
 800c370:	2301      	movs	r3, #1
 800c372:	4631      	mov	r1, r6
 800c374:	4628      	mov	r0, r5
 800c376:	9205      	str	r2, [sp, #20]
 800c378:	47b8      	blx	r7
 800c37a:	3001      	adds	r0, #1
 800c37c:	f43f ae97 	beq.w	800c0ae <_printf_float+0xc2>
 800c380:	9a05      	ldr	r2, [sp, #20]
 800c382:	f10b 0b01 	add.w	fp, fp, #1
 800c386:	e7b9      	b.n	800c2fc <_printf_float+0x310>
 800c388:	ee18 3a10 	vmov	r3, s16
 800c38c:	4652      	mov	r2, sl
 800c38e:	4631      	mov	r1, r6
 800c390:	4628      	mov	r0, r5
 800c392:	47b8      	blx	r7
 800c394:	3001      	adds	r0, #1
 800c396:	d1be      	bne.n	800c316 <_printf_float+0x32a>
 800c398:	e689      	b.n	800c0ae <_printf_float+0xc2>
 800c39a:	9a05      	ldr	r2, [sp, #20]
 800c39c:	464b      	mov	r3, r9
 800c39e:	4442      	add	r2, r8
 800c3a0:	4631      	mov	r1, r6
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	47b8      	blx	r7
 800c3a6:	3001      	adds	r0, #1
 800c3a8:	d1c1      	bne.n	800c32e <_printf_float+0x342>
 800c3aa:	e680      	b.n	800c0ae <_printf_float+0xc2>
 800c3ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3ae:	2a01      	cmp	r2, #1
 800c3b0:	dc01      	bgt.n	800c3b6 <_printf_float+0x3ca>
 800c3b2:	07db      	lsls	r3, r3, #31
 800c3b4:	d538      	bpl.n	800c428 <_printf_float+0x43c>
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	4642      	mov	r2, r8
 800c3ba:	4631      	mov	r1, r6
 800c3bc:	4628      	mov	r0, r5
 800c3be:	47b8      	blx	r7
 800c3c0:	3001      	adds	r0, #1
 800c3c2:	f43f ae74 	beq.w	800c0ae <_printf_float+0xc2>
 800c3c6:	ee18 3a10 	vmov	r3, s16
 800c3ca:	4652      	mov	r2, sl
 800c3cc:	4631      	mov	r1, r6
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	47b8      	blx	r7
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	f43f ae6b 	beq.w	800c0ae <_printf_float+0xc2>
 800c3d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3dc:	2200      	movs	r2, #0
 800c3de:	2300      	movs	r3, #0
 800c3e0:	f7f4 fb92 	bl	8000b08 <__aeabi_dcmpeq>
 800c3e4:	b9d8      	cbnz	r0, 800c41e <_printf_float+0x432>
 800c3e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3e8:	f108 0201 	add.w	r2, r8, #1
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	4631      	mov	r1, r6
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	47b8      	blx	r7
 800c3f4:	3001      	adds	r0, #1
 800c3f6:	d10e      	bne.n	800c416 <_printf_float+0x42a>
 800c3f8:	e659      	b.n	800c0ae <_printf_float+0xc2>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	4652      	mov	r2, sl
 800c3fe:	4631      	mov	r1, r6
 800c400:	4628      	mov	r0, r5
 800c402:	47b8      	blx	r7
 800c404:	3001      	adds	r0, #1
 800c406:	f43f ae52 	beq.w	800c0ae <_printf_float+0xc2>
 800c40a:	f108 0801 	add.w	r8, r8, #1
 800c40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c410:	3b01      	subs	r3, #1
 800c412:	4543      	cmp	r3, r8
 800c414:	dcf1      	bgt.n	800c3fa <_printf_float+0x40e>
 800c416:	464b      	mov	r3, r9
 800c418:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c41c:	e6dc      	b.n	800c1d8 <_printf_float+0x1ec>
 800c41e:	f04f 0800 	mov.w	r8, #0
 800c422:	f104 0a1a 	add.w	sl, r4, #26
 800c426:	e7f2      	b.n	800c40e <_printf_float+0x422>
 800c428:	2301      	movs	r3, #1
 800c42a:	4642      	mov	r2, r8
 800c42c:	e7df      	b.n	800c3ee <_printf_float+0x402>
 800c42e:	2301      	movs	r3, #1
 800c430:	464a      	mov	r2, r9
 800c432:	4631      	mov	r1, r6
 800c434:	4628      	mov	r0, r5
 800c436:	47b8      	blx	r7
 800c438:	3001      	adds	r0, #1
 800c43a:	f43f ae38 	beq.w	800c0ae <_printf_float+0xc2>
 800c43e:	f108 0801 	add.w	r8, r8, #1
 800c442:	68e3      	ldr	r3, [r4, #12]
 800c444:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c446:	1a5b      	subs	r3, r3, r1
 800c448:	4543      	cmp	r3, r8
 800c44a:	dcf0      	bgt.n	800c42e <_printf_float+0x442>
 800c44c:	e6fa      	b.n	800c244 <_printf_float+0x258>
 800c44e:	f04f 0800 	mov.w	r8, #0
 800c452:	f104 0919 	add.w	r9, r4, #25
 800c456:	e7f4      	b.n	800c442 <_printf_float+0x456>

0800c458 <_printf_common>:
 800c458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c45c:	4616      	mov	r6, r2
 800c45e:	4699      	mov	r9, r3
 800c460:	688a      	ldr	r2, [r1, #8]
 800c462:	690b      	ldr	r3, [r1, #16]
 800c464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c468:	4293      	cmp	r3, r2
 800c46a:	bfb8      	it	lt
 800c46c:	4613      	movlt	r3, r2
 800c46e:	6033      	str	r3, [r6, #0]
 800c470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c474:	4607      	mov	r7, r0
 800c476:	460c      	mov	r4, r1
 800c478:	b10a      	cbz	r2, 800c47e <_printf_common+0x26>
 800c47a:	3301      	adds	r3, #1
 800c47c:	6033      	str	r3, [r6, #0]
 800c47e:	6823      	ldr	r3, [r4, #0]
 800c480:	0699      	lsls	r1, r3, #26
 800c482:	bf42      	ittt	mi
 800c484:	6833      	ldrmi	r3, [r6, #0]
 800c486:	3302      	addmi	r3, #2
 800c488:	6033      	strmi	r3, [r6, #0]
 800c48a:	6825      	ldr	r5, [r4, #0]
 800c48c:	f015 0506 	ands.w	r5, r5, #6
 800c490:	d106      	bne.n	800c4a0 <_printf_common+0x48>
 800c492:	f104 0a19 	add.w	sl, r4, #25
 800c496:	68e3      	ldr	r3, [r4, #12]
 800c498:	6832      	ldr	r2, [r6, #0]
 800c49a:	1a9b      	subs	r3, r3, r2
 800c49c:	42ab      	cmp	r3, r5
 800c49e:	dc26      	bgt.n	800c4ee <_printf_common+0x96>
 800c4a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c4a4:	1e13      	subs	r3, r2, #0
 800c4a6:	6822      	ldr	r2, [r4, #0]
 800c4a8:	bf18      	it	ne
 800c4aa:	2301      	movne	r3, #1
 800c4ac:	0692      	lsls	r2, r2, #26
 800c4ae:	d42b      	bmi.n	800c508 <_printf_common+0xb0>
 800c4b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4b4:	4649      	mov	r1, r9
 800c4b6:	4638      	mov	r0, r7
 800c4b8:	47c0      	blx	r8
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	d01e      	beq.n	800c4fc <_printf_common+0xa4>
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	68e5      	ldr	r5, [r4, #12]
 800c4c2:	6832      	ldr	r2, [r6, #0]
 800c4c4:	f003 0306 	and.w	r3, r3, #6
 800c4c8:	2b04      	cmp	r3, #4
 800c4ca:	bf08      	it	eq
 800c4cc:	1aad      	subeq	r5, r5, r2
 800c4ce:	68a3      	ldr	r3, [r4, #8]
 800c4d0:	6922      	ldr	r2, [r4, #16]
 800c4d2:	bf0c      	ite	eq
 800c4d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4d8:	2500      	movne	r5, #0
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	bfc4      	itt	gt
 800c4de:	1a9b      	subgt	r3, r3, r2
 800c4e0:	18ed      	addgt	r5, r5, r3
 800c4e2:	2600      	movs	r6, #0
 800c4e4:	341a      	adds	r4, #26
 800c4e6:	42b5      	cmp	r5, r6
 800c4e8:	d11a      	bne.n	800c520 <_printf_common+0xc8>
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	e008      	b.n	800c500 <_printf_common+0xa8>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	4652      	mov	r2, sl
 800c4f2:	4649      	mov	r1, r9
 800c4f4:	4638      	mov	r0, r7
 800c4f6:	47c0      	blx	r8
 800c4f8:	3001      	adds	r0, #1
 800c4fa:	d103      	bne.n	800c504 <_printf_common+0xac>
 800c4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c504:	3501      	adds	r5, #1
 800c506:	e7c6      	b.n	800c496 <_printf_common+0x3e>
 800c508:	18e1      	adds	r1, r4, r3
 800c50a:	1c5a      	adds	r2, r3, #1
 800c50c:	2030      	movs	r0, #48	; 0x30
 800c50e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c512:	4422      	add	r2, r4
 800c514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c51c:	3302      	adds	r3, #2
 800c51e:	e7c7      	b.n	800c4b0 <_printf_common+0x58>
 800c520:	2301      	movs	r3, #1
 800c522:	4622      	mov	r2, r4
 800c524:	4649      	mov	r1, r9
 800c526:	4638      	mov	r0, r7
 800c528:	47c0      	blx	r8
 800c52a:	3001      	adds	r0, #1
 800c52c:	d0e6      	beq.n	800c4fc <_printf_common+0xa4>
 800c52e:	3601      	adds	r6, #1
 800c530:	e7d9      	b.n	800c4e6 <_printf_common+0x8e>
	...

0800c534 <_printf_i>:
 800c534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c538:	7e0f      	ldrb	r7, [r1, #24]
 800c53a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c53c:	2f78      	cmp	r7, #120	; 0x78
 800c53e:	4691      	mov	r9, r2
 800c540:	4680      	mov	r8, r0
 800c542:	460c      	mov	r4, r1
 800c544:	469a      	mov	sl, r3
 800c546:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c54a:	d807      	bhi.n	800c55c <_printf_i+0x28>
 800c54c:	2f62      	cmp	r7, #98	; 0x62
 800c54e:	d80a      	bhi.n	800c566 <_printf_i+0x32>
 800c550:	2f00      	cmp	r7, #0
 800c552:	f000 80d8 	beq.w	800c706 <_printf_i+0x1d2>
 800c556:	2f58      	cmp	r7, #88	; 0x58
 800c558:	f000 80a3 	beq.w	800c6a2 <_printf_i+0x16e>
 800c55c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c564:	e03a      	b.n	800c5dc <_printf_i+0xa8>
 800c566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c56a:	2b15      	cmp	r3, #21
 800c56c:	d8f6      	bhi.n	800c55c <_printf_i+0x28>
 800c56e:	a101      	add	r1, pc, #4	; (adr r1, 800c574 <_printf_i+0x40>)
 800c570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c574:	0800c5cd 	.word	0x0800c5cd
 800c578:	0800c5e1 	.word	0x0800c5e1
 800c57c:	0800c55d 	.word	0x0800c55d
 800c580:	0800c55d 	.word	0x0800c55d
 800c584:	0800c55d 	.word	0x0800c55d
 800c588:	0800c55d 	.word	0x0800c55d
 800c58c:	0800c5e1 	.word	0x0800c5e1
 800c590:	0800c55d 	.word	0x0800c55d
 800c594:	0800c55d 	.word	0x0800c55d
 800c598:	0800c55d 	.word	0x0800c55d
 800c59c:	0800c55d 	.word	0x0800c55d
 800c5a0:	0800c6ed 	.word	0x0800c6ed
 800c5a4:	0800c611 	.word	0x0800c611
 800c5a8:	0800c6cf 	.word	0x0800c6cf
 800c5ac:	0800c55d 	.word	0x0800c55d
 800c5b0:	0800c55d 	.word	0x0800c55d
 800c5b4:	0800c70f 	.word	0x0800c70f
 800c5b8:	0800c55d 	.word	0x0800c55d
 800c5bc:	0800c611 	.word	0x0800c611
 800c5c0:	0800c55d 	.word	0x0800c55d
 800c5c4:	0800c55d 	.word	0x0800c55d
 800c5c8:	0800c6d7 	.word	0x0800c6d7
 800c5cc:	682b      	ldr	r3, [r5, #0]
 800c5ce:	1d1a      	adds	r2, r3, #4
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	602a      	str	r2, [r5, #0]
 800c5d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e0a3      	b.n	800c728 <_printf_i+0x1f4>
 800c5e0:	6820      	ldr	r0, [r4, #0]
 800c5e2:	6829      	ldr	r1, [r5, #0]
 800c5e4:	0606      	lsls	r6, r0, #24
 800c5e6:	f101 0304 	add.w	r3, r1, #4
 800c5ea:	d50a      	bpl.n	800c602 <_printf_i+0xce>
 800c5ec:	680e      	ldr	r6, [r1, #0]
 800c5ee:	602b      	str	r3, [r5, #0]
 800c5f0:	2e00      	cmp	r6, #0
 800c5f2:	da03      	bge.n	800c5fc <_printf_i+0xc8>
 800c5f4:	232d      	movs	r3, #45	; 0x2d
 800c5f6:	4276      	negs	r6, r6
 800c5f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5fc:	485e      	ldr	r0, [pc, #376]	; (800c778 <_printf_i+0x244>)
 800c5fe:	230a      	movs	r3, #10
 800c600:	e019      	b.n	800c636 <_printf_i+0x102>
 800c602:	680e      	ldr	r6, [r1, #0]
 800c604:	602b      	str	r3, [r5, #0]
 800c606:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c60a:	bf18      	it	ne
 800c60c:	b236      	sxthne	r6, r6
 800c60e:	e7ef      	b.n	800c5f0 <_printf_i+0xbc>
 800c610:	682b      	ldr	r3, [r5, #0]
 800c612:	6820      	ldr	r0, [r4, #0]
 800c614:	1d19      	adds	r1, r3, #4
 800c616:	6029      	str	r1, [r5, #0]
 800c618:	0601      	lsls	r1, r0, #24
 800c61a:	d501      	bpl.n	800c620 <_printf_i+0xec>
 800c61c:	681e      	ldr	r6, [r3, #0]
 800c61e:	e002      	b.n	800c626 <_printf_i+0xf2>
 800c620:	0646      	lsls	r6, r0, #25
 800c622:	d5fb      	bpl.n	800c61c <_printf_i+0xe8>
 800c624:	881e      	ldrh	r6, [r3, #0]
 800c626:	4854      	ldr	r0, [pc, #336]	; (800c778 <_printf_i+0x244>)
 800c628:	2f6f      	cmp	r7, #111	; 0x6f
 800c62a:	bf0c      	ite	eq
 800c62c:	2308      	moveq	r3, #8
 800c62e:	230a      	movne	r3, #10
 800c630:	2100      	movs	r1, #0
 800c632:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c636:	6865      	ldr	r5, [r4, #4]
 800c638:	60a5      	str	r5, [r4, #8]
 800c63a:	2d00      	cmp	r5, #0
 800c63c:	bfa2      	ittt	ge
 800c63e:	6821      	ldrge	r1, [r4, #0]
 800c640:	f021 0104 	bicge.w	r1, r1, #4
 800c644:	6021      	strge	r1, [r4, #0]
 800c646:	b90e      	cbnz	r6, 800c64c <_printf_i+0x118>
 800c648:	2d00      	cmp	r5, #0
 800c64a:	d04d      	beq.n	800c6e8 <_printf_i+0x1b4>
 800c64c:	4615      	mov	r5, r2
 800c64e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c652:	fb03 6711 	mls	r7, r3, r1, r6
 800c656:	5dc7      	ldrb	r7, [r0, r7]
 800c658:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c65c:	4637      	mov	r7, r6
 800c65e:	42bb      	cmp	r3, r7
 800c660:	460e      	mov	r6, r1
 800c662:	d9f4      	bls.n	800c64e <_printf_i+0x11a>
 800c664:	2b08      	cmp	r3, #8
 800c666:	d10b      	bne.n	800c680 <_printf_i+0x14c>
 800c668:	6823      	ldr	r3, [r4, #0]
 800c66a:	07de      	lsls	r6, r3, #31
 800c66c:	d508      	bpl.n	800c680 <_printf_i+0x14c>
 800c66e:	6923      	ldr	r3, [r4, #16]
 800c670:	6861      	ldr	r1, [r4, #4]
 800c672:	4299      	cmp	r1, r3
 800c674:	bfde      	ittt	le
 800c676:	2330      	movle	r3, #48	; 0x30
 800c678:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c67c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c680:	1b52      	subs	r2, r2, r5
 800c682:	6122      	str	r2, [r4, #16]
 800c684:	f8cd a000 	str.w	sl, [sp]
 800c688:	464b      	mov	r3, r9
 800c68a:	aa03      	add	r2, sp, #12
 800c68c:	4621      	mov	r1, r4
 800c68e:	4640      	mov	r0, r8
 800c690:	f7ff fee2 	bl	800c458 <_printf_common>
 800c694:	3001      	adds	r0, #1
 800c696:	d14c      	bne.n	800c732 <_printf_i+0x1fe>
 800c698:	f04f 30ff 	mov.w	r0, #4294967295
 800c69c:	b004      	add	sp, #16
 800c69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6a2:	4835      	ldr	r0, [pc, #212]	; (800c778 <_printf_i+0x244>)
 800c6a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c6a8:	6829      	ldr	r1, [r5, #0]
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800c6b0:	6029      	str	r1, [r5, #0]
 800c6b2:	061d      	lsls	r5, r3, #24
 800c6b4:	d514      	bpl.n	800c6e0 <_printf_i+0x1ac>
 800c6b6:	07df      	lsls	r7, r3, #31
 800c6b8:	bf44      	itt	mi
 800c6ba:	f043 0320 	orrmi.w	r3, r3, #32
 800c6be:	6023      	strmi	r3, [r4, #0]
 800c6c0:	b91e      	cbnz	r6, 800c6ca <_printf_i+0x196>
 800c6c2:	6823      	ldr	r3, [r4, #0]
 800c6c4:	f023 0320 	bic.w	r3, r3, #32
 800c6c8:	6023      	str	r3, [r4, #0]
 800c6ca:	2310      	movs	r3, #16
 800c6cc:	e7b0      	b.n	800c630 <_printf_i+0xfc>
 800c6ce:	6823      	ldr	r3, [r4, #0]
 800c6d0:	f043 0320 	orr.w	r3, r3, #32
 800c6d4:	6023      	str	r3, [r4, #0]
 800c6d6:	2378      	movs	r3, #120	; 0x78
 800c6d8:	4828      	ldr	r0, [pc, #160]	; (800c77c <_printf_i+0x248>)
 800c6da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6de:	e7e3      	b.n	800c6a8 <_printf_i+0x174>
 800c6e0:	0659      	lsls	r1, r3, #25
 800c6e2:	bf48      	it	mi
 800c6e4:	b2b6      	uxthmi	r6, r6
 800c6e6:	e7e6      	b.n	800c6b6 <_printf_i+0x182>
 800c6e8:	4615      	mov	r5, r2
 800c6ea:	e7bb      	b.n	800c664 <_printf_i+0x130>
 800c6ec:	682b      	ldr	r3, [r5, #0]
 800c6ee:	6826      	ldr	r6, [r4, #0]
 800c6f0:	6961      	ldr	r1, [r4, #20]
 800c6f2:	1d18      	adds	r0, r3, #4
 800c6f4:	6028      	str	r0, [r5, #0]
 800c6f6:	0635      	lsls	r5, r6, #24
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	d501      	bpl.n	800c700 <_printf_i+0x1cc>
 800c6fc:	6019      	str	r1, [r3, #0]
 800c6fe:	e002      	b.n	800c706 <_printf_i+0x1d2>
 800c700:	0670      	lsls	r0, r6, #25
 800c702:	d5fb      	bpl.n	800c6fc <_printf_i+0x1c8>
 800c704:	8019      	strh	r1, [r3, #0]
 800c706:	2300      	movs	r3, #0
 800c708:	6123      	str	r3, [r4, #16]
 800c70a:	4615      	mov	r5, r2
 800c70c:	e7ba      	b.n	800c684 <_printf_i+0x150>
 800c70e:	682b      	ldr	r3, [r5, #0]
 800c710:	1d1a      	adds	r2, r3, #4
 800c712:	602a      	str	r2, [r5, #0]
 800c714:	681d      	ldr	r5, [r3, #0]
 800c716:	6862      	ldr	r2, [r4, #4]
 800c718:	2100      	movs	r1, #0
 800c71a:	4628      	mov	r0, r5
 800c71c:	f7f3 fd80 	bl	8000220 <memchr>
 800c720:	b108      	cbz	r0, 800c726 <_printf_i+0x1f2>
 800c722:	1b40      	subs	r0, r0, r5
 800c724:	6060      	str	r0, [r4, #4]
 800c726:	6863      	ldr	r3, [r4, #4]
 800c728:	6123      	str	r3, [r4, #16]
 800c72a:	2300      	movs	r3, #0
 800c72c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c730:	e7a8      	b.n	800c684 <_printf_i+0x150>
 800c732:	6923      	ldr	r3, [r4, #16]
 800c734:	462a      	mov	r2, r5
 800c736:	4649      	mov	r1, r9
 800c738:	4640      	mov	r0, r8
 800c73a:	47d0      	blx	sl
 800c73c:	3001      	adds	r0, #1
 800c73e:	d0ab      	beq.n	800c698 <_printf_i+0x164>
 800c740:	6823      	ldr	r3, [r4, #0]
 800c742:	079b      	lsls	r3, r3, #30
 800c744:	d413      	bmi.n	800c76e <_printf_i+0x23a>
 800c746:	68e0      	ldr	r0, [r4, #12]
 800c748:	9b03      	ldr	r3, [sp, #12]
 800c74a:	4298      	cmp	r0, r3
 800c74c:	bfb8      	it	lt
 800c74e:	4618      	movlt	r0, r3
 800c750:	e7a4      	b.n	800c69c <_printf_i+0x168>
 800c752:	2301      	movs	r3, #1
 800c754:	4632      	mov	r2, r6
 800c756:	4649      	mov	r1, r9
 800c758:	4640      	mov	r0, r8
 800c75a:	47d0      	blx	sl
 800c75c:	3001      	adds	r0, #1
 800c75e:	d09b      	beq.n	800c698 <_printf_i+0x164>
 800c760:	3501      	adds	r5, #1
 800c762:	68e3      	ldr	r3, [r4, #12]
 800c764:	9903      	ldr	r1, [sp, #12]
 800c766:	1a5b      	subs	r3, r3, r1
 800c768:	42ab      	cmp	r3, r5
 800c76a:	dcf2      	bgt.n	800c752 <_printf_i+0x21e>
 800c76c:	e7eb      	b.n	800c746 <_printf_i+0x212>
 800c76e:	2500      	movs	r5, #0
 800c770:	f104 0619 	add.w	r6, r4, #25
 800c774:	e7f5      	b.n	800c762 <_printf_i+0x22e>
 800c776:	bf00      	nop
 800c778:	08010296 	.word	0x08010296
 800c77c:	080102a7 	.word	0x080102a7

0800c780 <siprintf>:
 800c780:	b40e      	push	{r1, r2, r3}
 800c782:	b500      	push	{lr}
 800c784:	b09c      	sub	sp, #112	; 0x70
 800c786:	ab1d      	add	r3, sp, #116	; 0x74
 800c788:	9002      	str	r0, [sp, #8]
 800c78a:	9006      	str	r0, [sp, #24]
 800c78c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c790:	4809      	ldr	r0, [pc, #36]	; (800c7b8 <siprintf+0x38>)
 800c792:	9107      	str	r1, [sp, #28]
 800c794:	9104      	str	r1, [sp, #16]
 800c796:	4909      	ldr	r1, [pc, #36]	; (800c7bc <siprintf+0x3c>)
 800c798:	f853 2b04 	ldr.w	r2, [r3], #4
 800c79c:	9105      	str	r1, [sp, #20]
 800c79e:	6800      	ldr	r0, [r0, #0]
 800c7a0:	9301      	str	r3, [sp, #4]
 800c7a2:	a902      	add	r1, sp, #8
 800c7a4:	f001 fb76 	bl	800de94 <_svfiprintf_r>
 800c7a8:	9b02      	ldr	r3, [sp, #8]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	701a      	strb	r2, [r3, #0]
 800c7ae:	b01c      	add	sp, #112	; 0x70
 800c7b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7b4:	b003      	add	sp, #12
 800c7b6:	4770      	bx	lr
 800c7b8:	2000009c 	.word	0x2000009c
 800c7bc:	ffff0208 	.word	0xffff0208

0800c7c0 <quorem>:
 800c7c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c4:	6903      	ldr	r3, [r0, #16]
 800c7c6:	690c      	ldr	r4, [r1, #16]
 800c7c8:	42a3      	cmp	r3, r4
 800c7ca:	4607      	mov	r7, r0
 800c7cc:	f2c0 8081 	blt.w	800c8d2 <quorem+0x112>
 800c7d0:	3c01      	subs	r4, #1
 800c7d2:	f101 0814 	add.w	r8, r1, #20
 800c7d6:	f100 0514 	add.w	r5, r0, #20
 800c7da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c7de:	9301      	str	r3, [sp, #4]
 800c7e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c7e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c7f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c7f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c7f8:	d331      	bcc.n	800c85e <quorem+0x9e>
 800c7fa:	f04f 0e00 	mov.w	lr, #0
 800c7fe:	4640      	mov	r0, r8
 800c800:	46ac      	mov	ip, r5
 800c802:	46f2      	mov	sl, lr
 800c804:	f850 2b04 	ldr.w	r2, [r0], #4
 800c808:	b293      	uxth	r3, r2
 800c80a:	fb06 e303 	mla	r3, r6, r3, lr
 800c80e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c812:	b29b      	uxth	r3, r3
 800c814:	ebaa 0303 	sub.w	r3, sl, r3
 800c818:	f8dc a000 	ldr.w	sl, [ip]
 800c81c:	0c12      	lsrs	r2, r2, #16
 800c81e:	fa13 f38a 	uxtah	r3, r3, sl
 800c822:	fb06 e202 	mla	r2, r6, r2, lr
 800c826:	9300      	str	r3, [sp, #0]
 800c828:	9b00      	ldr	r3, [sp, #0]
 800c82a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c82e:	b292      	uxth	r2, r2
 800c830:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c834:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c838:	f8bd 3000 	ldrh.w	r3, [sp]
 800c83c:	4581      	cmp	r9, r0
 800c83e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c842:	f84c 3b04 	str.w	r3, [ip], #4
 800c846:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c84a:	d2db      	bcs.n	800c804 <quorem+0x44>
 800c84c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c850:	b92b      	cbnz	r3, 800c85e <quorem+0x9e>
 800c852:	9b01      	ldr	r3, [sp, #4]
 800c854:	3b04      	subs	r3, #4
 800c856:	429d      	cmp	r5, r3
 800c858:	461a      	mov	r2, r3
 800c85a:	d32e      	bcc.n	800c8ba <quorem+0xfa>
 800c85c:	613c      	str	r4, [r7, #16]
 800c85e:	4638      	mov	r0, r7
 800c860:	f001 f8c4 	bl	800d9ec <__mcmp>
 800c864:	2800      	cmp	r0, #0
 800c866:	db24      	blt.n	800c8b2 <quorem+0xf2>
 800c868:	3601      	adds	r6, #1
 800c86a:	4628      	mov	r0, r5
 800c86c:	f04f 0c00 	mov.w	ip, #0
 800c870:	f858 2b04 	ldr.w	r2, [r8], #4
 800c874:	f8d0 e000 	ldr.w	lr, [r0]
 800c878:	b293      	uxth	r3, r2
 800c87a:	ebac 0303 	sub.w	r3, ip, r3
 800c87e:	0c12      	lsrs	r2, r2, #16
 800c880:	fa13 f38e 	uxtah	r3, r3, lr
 800c884:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c888:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c892:	45c1      	cmp	r9, r8
 800c894:	f840 3b04 	str.w	r3, [r0], #4
 800c898:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c89c:	d2e8      	bcs.n	800c870 <quorem+0xb0>
 800c89e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8a6:	b922      	cbnz	r2, 800c8b2 <quorem+0xf2>
 800c8a8:	3b04      	subs	r3, #4
 800c8aa:	429d      	cmp	r5, r3
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	d30a      	bcc.n	800c8c6 <quorem+0x106>
 800c8b0:	613c      	str	r4, [r7, #16]
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	b003      	add	sp, #12
 800c8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ba:	6812      	ldr	r2, [r2, #0]
 800c8bc:	3b04      	subs	r3, #4
 800c8be:	2a00      	cmp	r2, #0
 800c8c0:	d1cc      	bne.n	800c85c <quorem+0x9c>
 800c8c2:	3c01      	subs	r4, #1
 800c8c4:	e7c7      	b.n	800c856 <quorem+0x96>
 800c8c6:	6812      	ldr	r2, [r2, #0]
 800c8c8:	3b04      	subs	r3, #4
 800c8ca:	2a00      	cmp	r2, #0
 800c8cc:	d1f0      	bne.n	800c8b0 <quorem+0xf0>
 800c8ce:	3c01      	subs	r4, #1
 800c8d0:	e7eb      	b.n	800c8aa <quorem+0xea>
 800c8d2:	2000      	movs	r0, #0
 800c8d4:	e7ee      	b.n	800c8b4 <quorem+0xf4>
	...

0800c8d8 <_dtoa_r>:
 800c8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8dc:	ed2d 8b04 	vpush	{d8-d9}
 800c8e0:	ec57 6b10 	vmov	r6, r7, d0
 800c8e4:	b093      	sub	sp, #76	; 0x4c
 800c8e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c8e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c8ec:	9106      	str	r1, [sp, #24]
 800c8ee:	ee10 aa10 	vmov	sl, s0
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	9209      	str	r2, [sp, #36]	; 0x24
 800c8f6:	930c      	str	r3, [sp, #48]	; 0x30
 800c8f8:	46bb      	mov	fp, r7
 800c8fa:	b975      	cbnz	r5, 800c91a <_dtoa_r+0x42>
 800c8fc:	2010      	movs	r0, #16
 800c8fe:	f000 fddd 	bl	800d4bc <malloc>
 800c902:	4602      	mov	r2, r0
 800c904:	6260      	str	r0, [r4, #36]	; 0x24
 800c906:	b920      	cbnz	r0, 800c912 <_dtoa_r+0x3a>
 800c908:	4ba7      	ldr	r3, [pc, #668]	; (800cba8 <_dtoa_r+0x2d0>)
 800c90a:	21ea      	movs	r1, #234	; 0xea
 800c90c:	48a7      	ldr	r0, [pc, #668]	; (800cbac <_dtoa_r+0x2d4>)
 800c90e:	f001 fbd1 	bl	800e0b4 <__assert_func>
 800c912:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c916:	6005      	str	r5, [r0, #0]
 800c918:	60c5      	str	r5, [r0, #12]
 800c91a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c91c:	6819      	ldr	r1, [r3, #0]
 800c91e:	b151      	cbz	r1, 800c936 <_dtoa_r+0x5e>
 800c920:	685a      	ldr	r2, [r3, #4]
 800c922:	604a      	str	r2, [r1, #4]
 800c924:	2301      	movs	r3, #1
 800c926:	4093      	lsls	r3, r2
 800c928:	608b      	str	r3, [r1, #8]
 800c92a:	4620      	mov	r0, r4
 800c92c:	f000 fe1c 	bl	800d568 <_Bfree>
 800c930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c932:	2200      	movs	r2, #0
 800c934:	601a      	str	r2, [r3, #0]
 800c936:	1e3b      	subs	r3, r7, #0
 800c938:	bfaa      	itet	ge
 800c93a:	2300      	movge	r3, #0
 800c93c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c940:	f8c8 3000 	strge.w	r3, [r8]
 800c944:	4b9a      	ldr	r3, [pc, #616]	; (800cbb0 <_dtoa_r+0x2d8>)
 800c946:	bfbc      	itt	lt
 800c948:	2201      	movlt	r2, #1
 800c94a:	f8c8 2000 	strlt.w	r2, [r8]
 800c94e:	ea33 030b 	bics.w	r3, r3, fp
 800c952:	d11b      	bne.n	800c98c <_dtoa_r+0xb4>
 800c954:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c956:	f242 730f 	movw	r3, #9999	; 0x270f
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c960:	4333      	orrs	r3, r6
 800c962:	f000 8592 	beq.w	800d48a <_dtoa_r+0xbb2>
 800c966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c968:	b963      	cbnz	r3, 800c984 <_dtoa_r+0xac>
 800c96a:	4b92      	ldr	r3, [pc, #584]	; (800cbb4 <_dtoa_r+0x2dc>)
 800c96c:	e022      	b.n	800c9b4 <_dtoa_r+0xdc>
 800c96e:	4b92      	ldr	r3, [pc, #584]	; (800cbb8 <_dtoa_r+0x2e0>)
 800c970:	9301      	str	r3, [sp, #4]
 800c972:	3308      	adds	r3, #8
 800c974:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c976:	6013      	str	r3, [r2, #0]
 800c978:	9801      	ldr	r0, [sp, #4]
 800c97a:	b013      	add	sp, #76	; 0x4c
 800c97c:	ecbd 8b04 	vpop	{d8-d9}
 800c980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c984:	4b8b      	ldr	r3, [pc, #556]	; (800cbb4 <_dtoa_r+0x2dc>)
 800c986:	9301      	str	r3, [sp, #4]
 800c988:	3303      	adds	r3, #3
 800c98a:	e7f3      	b.n	800c974 <_dtoa_r+0x9c>
 800c98c:	2200      	movs	r2, #0
 800c98e:	2300      	movs	r3, #0
 800c990:	4650      	mov	r0, sl
 800c992:	4659      	mov	r1, fp
 800c994:	f7f4 f8b8 	bl	8000b08 <__aeabi_dcmpeq>
 800c998:	ec4b ab19 	vmov	d9, sl, fp
 800c99c:	4680      	mov	r8, r0
 800c99e:	b158      	cbz	r0, 800c9b8 <_dtoa_r+0xe0>
 800c9a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	6013      	str	r3, [r2, #0]
 800c9a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f000 856b 	beq.w	800d484 <_dtoa_r+0xbac>
 800c9ae:	4883      	ldr	r0, [pc, #524]	; (800cbbc <_dtoa_r+0x2e4>)
 800c9b0:	6018      	str	r0, [r3, #0]
 800c9b2:	1e43      	subs	r3, r0, #1
 800c9b4:	9301      	str	r3, [sp, #4]
 800c9b6:	e7df      	b.n	800c978 <_dtoa_r+0xa0>
 800c9b8:	ec4b ab10 	vmov	d0, sl, fp
 800c9bc:	aa10      	add	r2, sp, #64	; 0x40
 800c9be:	a911      	add	r1, sp, #68	; 0x44
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f001 f8b9 	bl	800db38 <__d2b>
 800c9c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c9ca:	ee08 0a10 	vmov	s16, r0
 800c9ce:	2d00      	cmp	r5, #0
 800c9d0:	f000 8084 	beq.w	800cadc <_dtoa_r+0x204>
 800c9d4:	ee19 3a90 	vmov	r3, s19
 800c9d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c9e0:	4656      	mov	r6, sl
 800c9e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c9e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c9ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c9ee:	4b74      	ldr	r3, [pc, #464]	; (800cbc0 <_dtoa_r+0x2e8>)
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	4639      	mov	r1, r7
 800c9f6:	f7f3 fc67 	bl	80002c8 <__aeabi_dsub>
 800c9fa:	a365      	add	r3, pc, #404	; (adr r3, 800cb90 <_dtoa_r+0x2b8>)
 800c9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca00:	f7f3 fe1a 	bl	8000638 <__aeabi_dmul>
 800ca04:	a364      	add	r3, pc, #400	; (adr r3, 800cb98 <_dtoa_r+0x2c0>)
 800ca06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0a:	f7f3 fc5f 	bl	80002cc <__adddf3>
 800ca0e:	4606      	mov	r6, r0
 800ca10:	4628      	mov	r0, r5
 800ca12:	460f      	mov	r7, r1
 800ca14:	f7f3 fda6 	bl	8000564 <__aeabi_i2d>
 800ca18:	a361      	add	r3, pc, #388	; (adr r3, 800cba0 <_dtoa_r+0x2c8>)
 800ca1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1e:	f7f3 fe0b 	bl	8000638 <__aeabi_dmul>
 800ca22:	4602      	mov	r2, r0
 800ca24:	460b      	mov	r3, r1
 800ca26:	4630      	mov	r0, r6
 800ca28:	4639      	mov	r1, r7
 800ca2a:	f7f3 fc4f 	bl	80002cc <__adddf3>
 800ca2e:	4606      	mov	r6, r0
 800ca30:	460f      	mov	r7, r1
 800ca32:	f7f4 f8b1 	bl	8000b98 <__aeabi_d2iz>
 800ca36:	2200      	movs	r2, #0
 800ca38:	9000      	str	r0, [sp, #0]
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	4639      	mov	r1, r7
 800ca40:	f7f4 f86c 	bl	8000b1c <__aeabi_dcmplt>
 800ca44:	b150      	cbz	r0, 800ca5c <_dtoa_r+0x184>
 800ca46:	9800      	ldr	r0, [sp, #0]
 800ca48:	f7f3 fd8c 	bl	8000564 <__aeabi_i2d>
 800ca4c:	4632      	mov	r2, r6
 800ca4e:	463b      	mov	r3, r7
 800ca50:	f7f4 f85a 	bl	8000b08 <__aeabi_dcmpeq>
 800ca54:	b910      	cbnz	r0, 800ca5c <_dtoa_r+0x184>
 800ca56:	9b00      	ldr	r3, [sp, #0]
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	9300      	str	r3, [sp, #0]
 800ca5c:	9b00      	ldr	r3, [sp, #0]
 800ca5e:	2b16      	cmp	r3, #22
 800ca60:	d85a      	bhi.n	800cb18 <_dtoa_r+0x240>
 800ca62:	9a00      	ldr	r2, [sp, #0]
 800ca64:	4b57      	ldr	r3, [pc, #348]	; (800cbc4 <_dtoa_r+0x2ec>)
 800ca66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6e:	ec51 0b19 	vmov	r0, r1, d9
 800ca72:	f7f4 f853 	bl	8000b1c <__aeabi_dcmplt>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d050      	beq.n	800cb1c <_dtoa_r+0x244>
 800ca7a:	9b00      	ldr	r3, [sp, #0]
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	2300      	movs	r3, #0
 800ca82:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca86:	1b5d      	subs	r5, r3, r5
 800ca88:	1e6b      	subs	r3, r5, #1
 800ca8a:	9305      	str	r3, [sp, #20]
 800ca8c:	bf45      	ittet	mi
 800ca8e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ca92:	9304      	strmi	r3, [sp, #16]
 800ca94:	2300      	movpl	r3, #0
 800ca96:	2300      	movmi	r3, #0
 800ca98:	bf4c      	ite	mi
 800ca9a:	9305      	strmi	r3, [sp, #20]
 800ca9c:	9304      	strpl	r3, [sp, #16]
 800ca9e:	9b00      	ldr	r3, [sp, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	db3d      	blt.n	800cb20 <_dtoa_r+0x248>
 800caa4:	9b05      	ldr	r3, [sp, #20]
 800caa6:	9a00      	ldr	r2, [sp, #0]
 800caa8:	920a      	str	r2, [sp, #40]	; 0x28
 800caaa:	4413      	add	r3, r2
 800caac:	9305      	str	r3, [sp, #20]
 800caae:	2300      	movs	r3, #0
 800cab0:	9307      	str	r3, [sp, #28]
 800cab2:	9b06      	ldr	r3, [sp, #24]
 800cab4:	2b09      	cmp	r3, #9
 800cab6:	f200 8089 	bhi.w	800cbcc <_dtoa_r+0x2f4>
 800caba:	2b05      	cmp	r3, #5
 800cabc:	bfc4      	itt	gt
 800cabe:	3b04      	subgt	r3, #4
 800cac0:	9306      	strgt	r3, [sp, #24]
 800cac2:	9b06      	ldr	r3, [sp, #24]
 800cac4:	f1a3 0302 	sub.w	r3, r3, #2
 800cac8:	bfcc      	ite	gt
 800caca:	2500      	movgt	r5, #0
 800cacc:	2501      	movle	r5, #1
 800cace:	2b03      	cmp	r3, #3
 800cad0:	f200 8087 	bhi.w	800cbe2 <_dtoa_r+0x30a>
 800cad4:	e8df f003 	tbb	[pc, r3]
 800cad8:	59383a2d 	.word	0x59383a2d
 800cadc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cae0:	441d      	add	r5, r3
 800cae2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cae6:	2b20      	cmp	r3, #32
 800cae8:	bfc1      	itttt	gt
 800caea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800caee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800caf2:	fa0b f303 	lslgt.w	r3, fp, r3
 800caf6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cafa:	bfda      	itte	le
 800cafc:	f1c3 0320 	rsble	r3, r3, #32
 800cb00:	fa06 f003 	lslle.w	r0, r6, r3
 800cb04:	4318      	orrgt	r0, r3
 800cb06:	f7f3 fd1d 	bl	8000544 <__aeabi_ui2d>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	4606      	mov	r6, r0
 800cb0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cb12:	3d01      	subs	r5, #1
 800cb14:	930e      	str	r3, [sp, #56]	; 0x38
 800cb16:	e76a      	b.n	800c9ee <_dtoa_r+0x116>
 800cb18:	2301      	movs	r3, #1
 800cb1a:	e7b2      	b.n	800ca82 <_dtoa_r+0x1aa>
 800cb1c:	900b      	str	r0, [sp, #44]	; 0x2c
 800cb1e:	e7b1      	b.n	800ca84 <_dtoa_r+0x1ac>
 800cb20:	9b04      	ldr	r3, [sp, #16]
 800cb22:	9a00      	ldr	r2, [sp, #0]
 800cb24:	1a9b      	subs	r3, r3, r2
 800cb26:	9304      	str	r3, [sp, #16]
 800cb28:	4253      	negs	r3, r2
 800cb2a:	9307      	str	r3, [sp, #28]
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	930a      	str	r3, [sp, #40]	; 0x28
 800cb30:	e7bf      	b.n	800cab2 <_dtoa_r+0x1da>
 800cb32:	2300      	movs	r3, #0
 800cb34:	9308      	str	r3, [sp, #32]
 800cb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	dc55      	bgt.n	800cbe8 <_dtoa_r+0x310>
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cb42:	461a      	mov	r2, r3
 800cb44:	9209      	str	r2, [sp, #36]	; 0x24
 800cb46:	e00c      	b.n	800cb62 <_dtoa_r+0x28a>
 800cb48:	2301      	movs	r3, #1
 800cb4a:	e7f3      	b.n	800cb34 <_dtoa_r+0x25c>
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb50:	9308      	str	r3, [sp, #32]
 800cb52:	9b00      	ldr	r3, [sp, #0]
 800cb54:	4413      	add	r3, r2
 800cb56:	9302      	str	r3, [sp, #8]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	9303      	str	r3, [sp, #12]
 800cb5e:	bfb8      	it	lt
 800cb60:	2301      	movlt	r3, #1
 800cb62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cb64:	2200      	movs	r2, #0
 800cb66:	6042      	str	r2, [r0, #4]
 800cb68:	2204      	movs	r2, #4
 800cb6a:	f102 0614 	add.w	r6, r2, #20
 800cb6e:	429e      	cmp	r6, r3
 800cb70:	6841      	ldr	r1, [r0, #4]
 800cb72:	d93d      	bls.n	800cbf0 <_dtoa_r+0x318>
 800cb74:	4620      	mov	r0, r4
 800cb76:	f000 fcb7 	bl	800d4e8 <_Balloc>
 800cb7a:	9001      	str	r0, [sp, #4]
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	d13b      	bne.n	800cbf8 <_dtoa_r+0x320>
 800cb80:	4b11      	ldr	r3, [pc, #68]	; (800cbc8 <_dtoa_r+0x2f0>)
 800cb82:	4602      	mov	r2, r0
 800cb84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cb88:	e6c0      	b.n	800c90c <_dtoa_r+0x34>
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e7df      	b.n	800cb4e <_dtoa_r+0x276>
 800cb8e:	bf00      	nop
 800cb90:	636f4361 	.word	0x636f4361
 800cb94:	3fd287a7 	.word	0x3fd287a7
 800cb98:	8b60c8b3 	.word	0x8b60c8b3
 800cb9c:	3fc68a28 	.word	0x3fc68a28
 800cba0:	509f79fb 	.word	0x509f79fb
 800cba4:	3fd34413 	.word	0x3fd34413
 800cba8:	080102c5 	.word	0x080102c5
 800cbac:	080102dc 	.word	0x080102dc
 800cbb0:	7ff00000 	.word	0x7ff00000
 800cbb4:	080102c1 	.word	0x080102c1
 800cbb8:	080102b8 	.word	0x080102b8
 800cbbc:	08010295 	.word	0x08010295
 800cbc0:	3ff80000 	.word	0x3ff80000
 800cbc4:	080103d0 	.word	0x080103d0
 800cbc8:	08010337 	.word	0x08010337
 800cbcc:	2501      	movs	r5, #1
 800cbce:	2300      	movs	r3, #0
 800cbd0:	9306      	str	r3, [sp, #24]
 800cbd2:	9508      	str	r5, [sp, #32]
 800cbd4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbd8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	2312      	movs	r3, #18
 800cbe0:	e7b0      	b.n	800cb44 <_dtoa_r+0x26c>
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	9308      	str	r3, [sp, #32]
 800cbe6:	e7f5      	b.n	800cbd4 <_dtoa_r+0x2fc>
 800cbe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cbee:	e7b8      	b.n	800cb62 <_dtoa_r+0x28a>
 800cbf0:	3101      	adds	r1, #1
 800cbf2:	6041      	str	r1, [r0, #4]
 800cbf4:	0052      	lsls	r2, r2, #1
 800cbf6:	e7b8      	b.n	800cb6a <_dtoa_r+0x292>
 800cbf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbfa:	9a01      	ldr	r2, [sp, #4]
 800cbfc:	601a      	str	r2, [r3, #0]
 800cbfe:	9b03      	ldr	r3, [sp, #12]
 800cc00:	2b0e      	cmp	r3, #14
 800cc02:	f200 809d 	bhi.w	800cd40 <_dtoa_r+0x468>
 800cc06:	2d00      	cmp	r5, #0
 800cc08:	f000 809a 	beq.w	800cd40 <_dtoa_r+0x468>
 800cc0c:	9b00      	ldr	r3, [sp, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	dd32      	ble.n	800cc78 <_dtoa_r+0x3a0>
 800cc12:	4ab7      	ldr	r2, [pc, #732]	; (800cef0 <_dtoa_r+0x618>)
 800cc14:	f003 030f 	and.w	r3, r3, #15
 800cc18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cc1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc20:	9b00      	ldr	r3, [sp, #0]
 800cc22:	05d8      	lsls	r0, r3, #23
 800cc24:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cc28:	d516      	bpl.n	800cc58 <_dtoa_r+0x380>
 800cc2a:	4bb2      	ldr	r3, [pc, #712]	; (800cef4 <_dtoa_r+0x61c>)
 800cc2c:	ec51 0b19 	vmov	r0, r1, d9
 800cc30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc34:	f7f3 fe2a 	bl	800088c <__aeabi_ddiv>
 800cc38:	f007 070f 	and.w	r7, r7, #15
 800cc3c:	4682      	mov	sl, r0
 800cc3e:	468b      	mov	fp, r1
 800cc40:	2503      	movs	r5, #3
 800cc42:	4eac      	ldr	r6, [pc, #688]	; (800cef4 <_dtoa_r+0x61c>)
 800cc44:	b957      	cbnz	r7, 800cc5c <_dtoa_r+0x384>
 800cc46:	4642      	mov	r2, r8
 800cc48:	464b      	mov	r3, r9
 800cc4a:	4650      	mov	r0, sl
 800cc4c:	4659      	mov	r1, fp
 800cc4e:	f7f3 fe1d 	bl	800088c <__aeabi_ddiv>
 800cc52:	4682      	mov	sl, r0
 800cc54:	468b      	mov	fp, r1
 800cc56:	e028      	b.n	800ccaa <_dtoa_r+0x3d2>
 800cc58:	2502      	movs	r5, #2
 800cc5a:	e7f2      	b.n	800cc42 <_dtoa_r+0x36a>
 800cc5c:	07f9      	lsls	r1, r7, #31
 800cc5e:	d508      	bpl.n	800cc72 <_dtoa_r+0x39a>
 800cc60:	4640      	mov	r0, r8
 800cc62:	4649      	mov	r1, r9
 800cc64:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cc68:	f7f3 fce6 	bl	8000638 <__aeabi_dmul>
 800cc6c:	3501      	adds	r5, #1
 800cc6e:	4680      	mov	r8, r0
 800cc70:	4689      	mov	r9, r1
 800cc72:	107f      	asrs	r7, r7, #1
 800cc74:	3608      	adds	r6, #8
 800cc76:	e7e5      	b.n	800cc44 <_dtoa_r+0x36c>
 800cc78:	f000 809b 	beq.w	800cdb2 <_dtoa_r+0x4da>
 800cc7c:	9b00      	ldr	r3, [sp, #0]
 800cc7e:	4f9d      	ldr	r7, [pc, #628]	; (800cef4 <_dtoa_r+0x61c>)
 800cc80:	425e      	negs	r6, r3
 800cc82:	4b9b      	ldr	r3, [pc, #620]	; (800cef0 <_dtoa_r+0x618>)
 800cc84:	f006 020f 	and.w	r2, r6, #15
 800cc88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc90:	ec51 0b19 	vmov	r0, r1, d9
 800cc94:	f7f3 fcd0 	bl	8000638 <__aeabi_dmul>
 800cc98:	1136      	asrs	r6, r6, #4
 800cc9a:	4682      	mov	sl, r0
 800cc9c:	468b      	mov	fp, r1
 800cc9e:	2300      	movs	r3, #0
 800cca0:	2502      	movs	r5, #2
 800cca2:	2e00      	cmp	r6, #0
 800cca4:	d17a      	bne.n	800cd9c <_dtoa_r+0x4c4>
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1d3      	bne.n	800cc52 <_dtoa_r+0x37a>
 800ccaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f000 8082 	beq.w	800cdb6 <_dtoa_r+0x4de>
 800ccb2:	4b91      	ldr	r3, [pc, #580]	; (800cef8 <_dtoa_r+0x620>)
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	4650      	mov	r0, sl
 800ccb8:	4659      	mov	r1, fp
 800ccba:	f7f3 ff2f 	bl	8000b1c <__aeabi_dcmplt>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d079      	beq.n	800cdb6 <_dtoa_r+0x4de>
 800ccc2:	9b03      	ldr	r3, [sp, #12]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d076      	beq.n	800cdb6 <_dtoa_r+0x4de>
 800ccc8:	9b02      	ldr	r3, [sp, #8]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	dd36      	ble.n	800cd3c <_dtoa_r+0x464>
 800ccce:	9b00      	ldr	r3, [sp, #0]
 800ccd0:	4650      	mov	r0, sl
 800ccd2:	4659      	mov	r1, fp
 800ccd4:	1e5f      	subs	r7, r3, #1
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	4b88      	ldr	r3, [pc, #544]	; (800cefc <_dtoa_r+0x624>)
 800ccda:	f7f3 fcad 	bl	8000638 <__aeabi_dmul>
 800ccde:	9e02      	ldr	r6, [sp, #8]
 800cce0:	4682      	mov	sl, r0
 800cce2:	468b      	mov	fp, r1
 800cce4:	3501      	adds	r5, #1
 800cce6:	4628      	mov	r0, r5
 800cce8:	f7f3 fc3c 	bl	8000564 <__aeabi_i2d>
 800ccec:	4652      	mov	r2, sl
 800ccee:	465b      	mov	r3, fp
 800ccf0:	f7f3 fca2 	bl	8000638 <__aeabi_dmul>
 800ccf4:	4b82      	ldr	r3, [pc, #520]	; (800cf00 <_dtoa_r+0x628>)
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f7f3 fae8 	bl	80002cc <__adddf3>
 800ccfc:	46d0      	mov	r8, sl
 800ccfe:	46d9      	mov	r9, fp
 800cd00:	4682      	mov	sl, r0
 800cd02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cd06:	2e00      	cmp	r6, #0
 800cd08:	d158      	bne.n	800cdbc <_dtoa_r+0x4e4>
 800cd0a:	4b7e      	ldr	r3, [pc, #504]	; (800cf04 <_dtoa_r+0x62c>)
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	4640      	mov	r0, r8
 800cd10:	4649      	mov	r1, r9
 800cd12:	f7f3 fad9 	bl	80002c8 <__aeabi_dsub>
 800cd16:	4652      	mov	r2, sl
 800cd18:	465b      	mov	r3, fp
 800cd1a:	4680      	mov	r8, r0
 800cd1c:	4689      	mov	r9, r1
 800cd1e:	f7f3 ff1b 	bl	8000b58 <__aeabi_dcmpgt>
 800cd22:	2800      	cmp	r0, #0
 800cd24:	f040 8295 	bne.w	800d252 <_dtoa_r+0x97a>
 800cd28:	4652      	mov	r2, sl
 800cd2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cd2e:	4640      	mov	r0, r8
 800cd30:	4649      	mov	r1, r9
 800cd32:	f7f3 fef3 	bl	8000b1c <__aeabi_dcmplt>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	f040 8289 	bne.w	800d24e <_dtoa_r+0x976>
 800cd3c:	ec5b ab19 	vmov	sl, fp, d9
 800cd40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f2c0 8148 	blt.w	800cfd8 <_dtoa_r+0x700>
 800cd48:	9a00      	ldr	r2, [sp, #0]
 800cd4a:	2a0e      	cmp	r2, #14
 800cd4c:	f300 8144 	bgt.w	800cfd8 <_dtoa_r+0x700>
 800cd50:	4b67      	ldr	r3, [pc, #412]	; (800cef0 <_dtoa_r+0x618>)
 800cd52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd56:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f280 80d5 	bge.w	800cf0c <_dtoa_r+0x634>
 800cd62:	9b03      	ldr	r3, [sp, #12]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	f300 80d1 	bgt.w	800cf0c <_dtoa_r+0x634>
 800cd6a:	f040 826f 	bne.w	800d24c <_dtoa_r+0x974>
 800cd6e:	4b65      	ldr	r3, [pc, #404]	; (800cf04 <_dtoa_r+0x62c>)
 800cd70:	2200      	movs	r2, #0
 800cd72:	4640      	mov	r0, r8
 800cd74:	4649      	mov	r1, r9
 800cd76:	f7f3 fc5f 	bl	8000638 <__aeabi_dmul>
 800cd7a:	4652      	mov	r2, sl
 800cd7c:	465b      	mov	r3, fp
 800cd7e:	f7f3 fee1 	bl	8000b44 <__aeabi_dcmpge>
 800cd82:	9e03      	ldr	r6, [sp, #12]
 800cd84:	4637      	mov	r7, r6
 800cd86:	2800      	cmp	r0, #0
 800cd88:	f040 8245 	bne.w	800d216 <_dtoa_r+0x93e>
 800cd8c:	9d01      	ldr	r5, [sp, #4]
 800cd8e:	2331      	movs	r3, #49	; 0x31
 800cd90:	f805 3b01 	strb.w	r3, [r5], #1
 800cd94:	9b00      	ldr	r3, [sp, #0]
 800cd96:	3301      	adds	r3, #1
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	e240      	b.n	800d21e <_dtoa_r+0x946>
 800cd9c:	07f2      	lsls	r2, r6, #31
 800cd9e:	d505      	bpl.n	800cdac <_dtoa_r+0x4d4>
 800cda0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cda4:	f7f3 fc48 	bl	8000638 <__aeabi_dmul>
 800cda8:	3501      	adds	r5, #1
 800cdaa:	2301      	movs	r3, #1
 800cdac:	1076      	asrs	r6, r6, #1
 800cdae:	3708      	adds	r7, #8
 800cdb0:	e777      	b.n	800cca2 <_dtoa_r+0x3ca>
 800cdb2:	2502      	movs	r5, #2
 800cdb4:	e779      	b.n	800ccaa <_dtoa_r+0x3d2>
 800cdb6:	9f00      	ldr	r7, [sp, #0]
 800cdb8:	9e03      	ldr	r6, [sp, #12]
 800cdba:	e794      	b.n	800cce6 <_dtoa_r+0x40e>
 800cdbc:	9901      	ldr	r1, [sp, #4]
 800cdbe:	4b4c      	ldr	r3, [pc, #304]	; (800cef0 <_dtoa_r+0x618>)
 800cdc0:	4431      	add	r1, r6
 800cdc2:	910d      	str	r1, [sp, #52]	; 0x34
 800cdc4:	9908      	ldr	r1, [sp, #32]
 800cdc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cdca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cdce:	2900      	cmp	r1, #0
 800cdd0:	d043      	beq.n	800ce5a <_dtoa_r+0x582>
 800cdd2:	494d      	ldr	r1, [pc, #308]	; (800cf08 <_dtoa_r+0x630>)
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	f7f3 fd59 	bl	800088c <__aeabi_ddiv>
 800cdda:	4652      	mov	r2, sl
 800cddc:	465b      	mov	r3, fp
 800cdde:	f7f3 fa73 	bl	80002c8 <__aeabi_dsub>
 800cde2:	9d01      	ldr	r5, [sp, #4]
 800cde4:	4682      	mov	sl, r0
 800cde6:	468b      	mov	fp, r1
 800cde8:	4649      	mov	r1, r9
 800cdea:	4640      	mov	r0, r8
 800cdec:	f7f3 fed4 	bl	8000b98 <__aeabi_d2iz>
 800cdf0:	4606      	mov	r6, r0
 800cdf2:	f7f3 fbb7 	bl	8000564 <__aeabi_i2d>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	4649      	mov	r1, r9
 800cdfe:	f7f3 fa63 	bl	80002c8 <__aeabi_dsub>
 800ce02:	3630      	adds	r6, #48	; 0x30
 800ce04:	f805 6b01 	strb.w	r6, [r5], #1
 800ce08:	4652      	mov	r2, sl
 800ce0a:	465b      	mov	r3, fp
 800ce0c:	4680      	mov	r8, r0
 800ce0e:	4689      	mov	r9, r1
 800ce10:	f7f3 fe84 	bl	8000b1c <__aeabi_dcmplt>
 800ce14:	2800      	cmp	r0, #0
 800ce16:	d163      	bne.n	800cee0 <_dtoa_r+0x608>
 800ce18:	4642      	mov	r2, r8
 800ce1a:	464b      	mov	r3, r9
 800ce1c:	4936      	ldr	r1, [pc, #216]	; (800cef8 <_dtoa_r+0x620>)
 800ce1e:	2000      	movs	r0, #0
 800ce20:	f7f3 fa52 	bl	80002c8 <__aeabi_dsub>
 800ce24:	4652      	mov	r2, sl
 800ce26:	465b      	mov	r3, fp
 800ce28:	f7f3 fe78 	bl	8000b1c <__aeabi_dcmplt>
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	f040 80b5 	bne.w	800cf9c <_dtoa_r+0x6c4>
 800ce32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce34:	429d      	cmp	r5, r3
 800ce36:	d081      	beq.n	800cd3c <_dtoa_r+0x464>
 800ce38:	4b30      	ldr	r3, [pc, #192]	; (800cefc <_dtoa_r+0x624>)
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	4650      	mov	r0, sl
 800ce3e:	4659      	mov	r1, fp
 800ce40:	f7f3 fbfa 	bl	8000638 <__aeabi_dmul>
 800ce44:	4b2d      	ldr	r3, [pc, #180]	; (800cefc <_dtoa_r+0x624>)
 800ce46:	4682      	mov	sl, r0
 800ce48:	468b      	mov	fp, r1
 800ce4a:	4640      	mov	r0, r8
 800ce4c:	4649      	mov	r1, r9
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f7f3 fbf2 	bl	8000638 <__aeabi_dmul>
 800ce54:	4680      	mov	r8, r0
 800ce56:	4689      	mov	r9, r1
 800ce58:	e7c6      	b.n	800cde8 <_dtoa_r+0x510>
 800ce5a:	4650      	mov	r0, sl
 800ce5c:	4659      	mov	r1, fp
 800ce5e:	f7f3 fbeb 	bl	8000638 <__aeabi_dmul>
 800ce62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce64:	9d01      	ldr	r5, [sp, #4]
 800ce66:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce68:	4682      	mov	sl, r0
 800ce6a:	468b      	mov	fp, r1
 800ce6c:	4649      	mov	r1, r9
 800ce6e:	4640      	mov	r0, r8
 800ce70:	f7f3 fe92 	bl	8000b98 <__aeabi_d2iz>
 800ce74:	4606      	mov	r6, r0
 800ce76:	f7f3 fb75 	bl	8000564 <__aeabi_i2d>
 800ce7a:	3630      	adds	r6, #48	; 0x30
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	460b      	mov	r3, r1
 800ce80:	4640      	mov	r0, r8
 800ce82:	4649      	mov	r1, r9
 800ce84:	f7f3 fa20 	bl	80002c8 <__aeabi_dsub>
 800ce88:	f805 6b01 	strb.w	r6, [r5], #1
 800ce8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce8e:	429d      	cmp	r5, r3
 800ce90:	4680      	mov	r8, r0
 800ce92:	4689      	mov	r9, r1
 800ce94:	f04f 0200 	mov.w	r2, #0
 800ce98:	d124      	bne.n	800cee4 <_dtoa_r+0x60c>
 800ce9a:	4b1b      	ldr	r3, [pc, #108]	; (800cf08 <_dtoa_r+0x630>)
 800ce9c:	4650      	mov	r0, sl
 800ce9e:	4659      	mov	r1, fp
 800cea0:	f7f3 fa14 	bl	80002cc <__adddf3>
 800cea4:	4602      	mov	r2, r0
 800cea6:	460b      	mov	r3, r1
 800cea8:	4640      	mov	r0, r8
 800ceaa:	4649      	mov	r1, r9
 800ceac:	f7f3 fe54 	bl	8000b58 <__aeabi_dcmpgt>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d173      	bne.n	800cf9c <_dtoa_r+0x6c4>
 800ceb4:	4652      	mov	r2, sl
 800ceb6:	465b      	mov	r3, fp
 800ceb8:	4913      	ldr	r1, [pc, #76]	; (800cf08 <_dtoa_r+0x630>)
 800ceba:	2000      	movs	r0, #0
 800cebc:	f7f3 fa04 	bl	80002c8 <__aeabi_dsub>
 800cec0:	4602      	mov	r2, r0
 800cec2:	460b      	mov	r3, r1
 800cec4:	4640      	mov	r0, r8
 800cec6:	4649      	mov	r1, r9
 800cec8:	f7f3 fe28 	bl	8000b1c <__aeabi_dcmplt>
 800cecc:	2800      	cmp	r0, #0
 800cece:	f43f af35 	beq.w	800cd3c <_dtoa_r+0x464>
 800ced2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ced4:	1e6b      	subs	r3, r5, #1
 800ced6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ced8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cedc:	2b30      	cmp	r3, #48	; 0x30
 800cede:	d0f8      	beq.n	800ced2 <_dtoa_r+0x5fa>
 800cee0:	9700      	str	r7, [sp, #0]
 800cee2:	e049      	b.n	800cf78 <_dtoa_r+0x6a0>
 800cee4:	4b05      	ldr	r3, [pc, #20]	; (800cefc <_dtoa_r+0x624>)
 800cee6:	f7f3 fba7 	bl	8000638 <__aeabi_dmul>
 800ceea:	4680      	mov	r8, r0
 800ceec:	4689      	mov	r9, r1
 800ceee:	e7bd      	b.n	800ce6c <_dtoa_r+0x594>
 800cef0:	080103d0 	.word	0x080103d0
 800cef4:	080103a8 	.word	0x080103a8
 800cef8:	3ff00000 	.word	0x3ff00000
 800cefc:	40240000 	.word	0x40240000
 800cf00:	401c0000 	.word	0x401c0000
 800cf04:	40140000 	.word	0x40140000
 800cf08:	3fe00000 	.word	0x3fe00000
 800cf0c:	9d01      	ldr	r5, [sp, #4]
 800cf0e:	4656      	mov	r6, sl
 800cf10:	465f      	mov	r7, fp
 800cf12:	4642      	mov	r2, r8
 800cf14:	464b      	mov	r3, r9
 800cf16:	4630      	mov	r0, r6
 800cf18:	4639      	mov	r1, r7
 800cf1a:	f7f3 fcb7 	bl	800088c <__aeabi_ddiv>
 800cf1e:	f7f3 fe3b 	bl	8000b98 <__aeabi_d2iz>
 800cf22:	4682      	mov	sl, r0
 800cf24:	f7f3 fb1e 	bl	8000564 <__aeabi_i2d>
 800cf28:	4642      	mov	r2, r8
 800cf2a:	464b      	mov	r3, r9
 800cf2c:	f7f3 fb84 	bl	8000638 <__aeabi_dmul>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	4630      	mov	r0, r6
 800cf36:	4639      	mov	r1, r7
 800cf38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cf3c:	f7f3 f9c4 	bl	80002c8 <__aeabi_dsub>
 800cf40:	f805 6b01 	strb.w	r6, [r5], #1
 800cf44:	9e01      	ldr	r6, [sp, #4]
 800cf46:	9f03      	ldr	r7, [sp, #12]
 800cf48:	1bae      	subs	r6, r5, r6
 800cf4a:	42b7      	cmp	r7, r6
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	460b      	mov	r3, r1
 800cf50:	d135      	bne.n	800cfbe <_dtoa_r+0x6e6>
 800cf52:	f7f3 f9bb 	bl	80002cc <__adddf3>
 800cf56:	4642      	mov	r2, r8
 800cf58:	464b      	mov	r3, r9
 800cf5a:	4606      	mov	r6, r0
 800cf5c:	460f      	mov	r7, r1
 800cf5e:	f7f3 fdfb 	bl	8000b58 <__aeabi_dcmpgt>
 800cf62:	b9d0      	cbnz	r0, 800cf9a <_dtoa_r+0x6c2>
 800cf64:	4642      	mov	r2, r8
 800cf66:	464b      	mov	r3, r9
 800cf68:	4630      	mov	r0, r6
 800cf6a:	4639      	mov	r1, r7
 800cf6c:	f7f3 fdcc 	bl	8000b08 <__aeabi_dcmpeq>
 800cf70:	b110      	cbz	r0, 800cf78 <_dtoa_r+0x6a0>
 800cf72:	f01a 0f01 	tst.w	sl, #1
 800cf76:	d110      	bne.n	800cf9a <_dtoa_r+0x6c2>
 800cf78:	4620      	mov	r0, r4
 800cf7a:	ee18 1a10 	vmov	r1, s16
 800cf7e:	f000 faf3 	bl	800d568 <_Bfree>
 800cf82:	2300      	movs	r3, #0
 800cf84:	9800      	ldr	r0, [sp, #0]
 800cf86:	702b      	strb	r3, [r5, #0]
 800cf88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf8a:	3001      	adds	r0, #1
 800cf8c:	6018      	str	r0, [r3, #0]
 800cf8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f43f acf1 	beq.w	800c978 <_dtoa_r+0xa0>
 800cf96:	601d      	str	r5, [r3, #0]
 800cf98:	e4ee      	b.n	800c978 <_dtoa_r+0xa0>
 800cf9a:	9f00      	ldr	r7, [sp, #0]
 800cf9c:	462b      	mov	r3, r5
 800cf9e:	461d      	mov	r5, r3
 800cfa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfa4:	2a39      	cmp	r2, #57	; 0x39
 800cfa6:	d106      	bne.n	800cfb6 <_dtoa_r+0x6de>
 800cfa8:	9a01      	ldr	r2, [sp, #4]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d1f7      	bne.n	800cf9e <_dtoa_r+0x6c6>
 800cfae:	9901      	ldr	r1, [sp, #4]
 800cfb0:	2230      	movs	r2, #48	; 0x30
 800cfb2:	3701      	adds	r7, #1
 800cfb4:	700a      	strb	r2, [r1, #0]
 800cfb6:	781a      	ldrb	r2, [r3, #0]
 800cfb8:	3201      	adds	r2, #1
 800cfba:	701a      	strb	r2, [r3, #0]
 800cfbc:	e790      	b.n	800cee0 <_dtoa_r+0x608>
 800cfbe:	4ba6      	ldr	r3, [pc, #664]	; (800d258 <_dtoa_r+0x980>)
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f7f3 fb39 	bl	8000638 <__aeabi_dmul>
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	2300      	movs	r3, #0
 800cfca:	4606      	mov	r6, r0
 800cfcc:	460f      	mov	r7, r1
 800cfce:	f7f3 fd9b 	bl	8000b08 <__aeabi_dcmpeq>
 800cfd2:	2800      	cmp	r0, #0
 800cfd4:	d09d      	beq.n	800cf12 <_dtoa_r+0x63a>
 800cfd6:	e7cf      	b.n	800cf78 <_dtoa_r+0x6a0>
 800cfd8:	9a08      	ldr	r2, [sp, #32]
 800cfda:	2a00      	cmp	r2, #0
 800cfdc:	f000 80d7 	beq.w	800d18e <_dtoa_r+0x8b6>
 800cfe0:	9a06      	ldr	r2, [sp, #24]
 800cfe2:	2a01      	cmp	r2, #1
 800cfe4:	f300 80ba 	bgt.w	800d15c <_dtoa_r+0x884>
 800cfe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfea:	2a00      	cmp	r2, #0
 800cfec:	f000 80b2 	beq.w	800d154 <_dtoa_r+0x87c>
 800cff0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cff4:	9e07      	ldr	r6, [sp, #28]
 800cff6:	9d04      	ldr	r5, [sp, #16]
 800cff8:	9a04      	ldr	r2, [sp, #16]
 800cffa:	441a      	add	r2, r3
 800cffc:	9204      	str	r2, [sp, #16]
 800cffe:	9a05      	ldr	r2, [sp, #20]
 800d000:	2101      	movs	r1, #1
 800d002:	441a      	add	r2, r3
 800d004:	4620      	mov	r0, r4
 800d006:	9205      	str	r2, [sp, #20]
 800d008:	f000 fb66 	bl	800d6d8 <__i2b>
 800d00c:	4607      	mov	r7, r0
 800d00e:	2d00      	cmp	r5, #0
 800d010:	dd0c      	ble.n	800d02c <_dtoa_r+0x754>
 800d012:	9b05      	ldr	r3, [sp, #20]
 800d014:	2b00      	cmp	r3, #0
 800d016:	dd09      	ble.n	800d02c <_dtoa_r+0x754>
 800d018:	42ab      	cmp	r3, r5
 800d01a:	9a04      	ldr	r2, [sp, #16]
 800d01c:	bfa8      	it	ge
 800d01e:	462b      	movge	r3, r5
 800d020:	1ad2      	subs	r2, r2, r3
 800d022:	9204      	str	r2, [sp, #16]
 800d024:	9a05      	ldr	r2, [sp, #20]
 800d026:	1aed      	subs	r5, r5, r3
 800d028:	1ad3      	subs	r3, r2, r3
 800d02a:	9305      	str	r3, [sp, #20]
 800d02c:	9b07      	ldr	r3, [sp, #28]
 800d02e:	b31b      	cbz	r3, 800d078 <_dtoa_r+0x7a0>
 800d030:	9b08      	ldr	r3, [sp, #32]
 800d032:	2b00      	cmp	r3, #0
 800d034:	f000 80af 	beq.w	800d196 <_dtoa_r+0x8be>
 800d038:	2e00      	cmp	r6, #0
 800d03a:	dd13      	ble.n	800d064 <_dtoa_r+0x78c>
 800d03c:	4639      	mov	r1, r7
 800d03e:	4632      	mov	r2, r6
 800d040:	4620      	mov	r0, r4
 800d042:	f000 fc09 	bl	800d858 <__pow5mult>
 800d046:	ee18 2a10 	vmov	r2, s16
 800d04a:	4601      	mov	r1, r0
 800d04c:	4607      	mov	r7, r0
 800d04e:	4620      	mov	r0, r4
 800d050:	f000 fb58 	bl	800d704 <__multiply>
 800d054:	ee18 1a10 	vmov	r1, s16
 800d058:	4680      	mov	r8, r0
 800d05a:	4620      	mov	r0, r4
 800d05c:	f000 fa84 	bl	800d568 <_Bfree>
 800d060:	ee08 8a10 	vmov	s16, r8
 800d064:	9b07      	ldr	r3, [sp, #28]
 800d066:	1b9a      	subs	r2, r3, r6
 800d068:	d006      	beq.n	800d078 <_dtoa_r+0x7a0>
 800d06a:	ee18 1a10 	vmov	r1, s16
 800d06e:	4620      	mov	r0, r4
 800d070:	f000 fbf2 	bl	800d858 <__pow5mult>
 800d074:	ee08 0a10 	vmov	s16, r0
 800d078:	2101      	movs	r1, #1
 800d07a:	4620      	mov	r0, r4
 800d07c:	f000 fb2c 	bl	800d6d8 <__i2b>
 800d080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d082:	2b00      	cmp	r3, #0
 800d084:	4606      	mov	r6, r0
 800d086:	f340 8088 	ble.w	800d19a <_dtoa_r+0x8c2>
 800d08a:	461a      	mov	r2, r3
 800d08c:	4601      	mov	r1, r0
 800d08e:	4620      	mov	r0, r4
 800d090:	f000 fbe2 	bl	800d858 <__pow5mult>
 800d094:	9b06      	ldr	r3, [sp, #24]
 800d096:	2b01      	cmp	r3, #1
 800d098:	4606      	mov	r6, r0
 800d09a:	f340 8081 	ble.w	800d1a0 <_dtoa_r+0x8c8>
 800d09e:	f04f 0800 	mov.w	r8, #0
 800d0a2:	6933      	ldr	r3, [r6, #16]
 800d0a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d0a8:	6918      	ldr	r0, [r3, #16]
 800d0aa:	f000 fac5 	bl	800d638 <__hi0bits>
 800d0ae:	f1c0 0020 	rsb	r0, r0, #32
 800d0b2:	9b05      	ldr	r3, [sp, #20]
 800d0b4:	4418      	add	r0, r3
 800d0b6:	f010 001f 	ands.w	r0, r0, #31
 800d0ba:	f000 8092 	beq.w	800d1e2 <_dtoa_r+0x90a>
 800d0be:	f1c0 0320 	rsb	r3, r0, #32
 800d0c2:	2b04      	cmp	r3, #4
 800d0c4:	f340 808a 	ble.w	800d1dc <_dtoa_r+0x904>
 800d0c8:	f1c0 001c 	rsb	r0, r0, #28
 800d0cc:	9b04      	ldr	r3, [sp, #16]
 800d0ce:	4403      	add	r3, r0
 800d0d0:	9304      	str	r3, [sp, #16]
 800d0d2:	9b05      	ldr	r3, [sp, #20]
 800d0d4:	4403      	add	r3, r0
 800d0d6:	4405      	add	r5, r0
 800d0d8:	9305      	str	r3, [sp, #20]
 800d0da:	9b04      	ldr	r3, [sp, #16]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	dd07      	ble.n	800d0f0 <_dtoa_r+0x818>
 800d0e0:	ee18 1a10 	vmov	r1, s16
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	f000 fc10 	bl	800d90c <__lshift>
 800d0ec:	ee08 0a10 	vmov	s16, r0
 800d0f0:	9b05      	ldr	r3, [sp, #20]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	dd05      	ble.n	800d102 <_dtoa_r+0x82a>
 800d0f6:	4631      	mov	r1, r6
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	f000 fc06 	bl	800d90c <__lshift>
 800d100:	4606      	mov	r6, r0
 800d102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d104:	2b00      	cmp	r3, #0
 800d106:	d06e      	beq.n	800d1e6 <_dtoa_r+0x90e>
 800d108:	ee18 0a10 	vmov	r0, s16
 800d10c:	4631      	mov	r1, r6
 800d10e:	f000 fc6d 	bl	800d9ec <__mcmp>
 800d112:	2800      	cmp	r0, #0
 800d114:	da67      	bge.n	800d1e6 <_dtoa_r+0x90e>
 800d116:	9b00      	ldr	r3, [sp, #0]
 800d118:	3b01      	subs	r3, #1
 800d11a:	ee18 1a10 	vmov	r1, s16
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	220a      	movs	r2, #10
 800d122:	2300      	movs	r3, #0
 800d124:	4620      	mov	r0, r4
 800d126:	f000 fa41 	bl	800d5ac <__multadd>
 800d12a:	9b08      	ldr	r3, [sp, #32]
 800d12c:	ee08 0a10 	vmov	s16, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	f000 81b1 	beq.w	800d498 <_dtoa_r+0xbc0>
 800d136:	2300      	movs	r3, #0
 800d138:	4639      	mov	r1, r7
 800d13a:	220a      	movs	r2, #10
 800d13c:	4620      	mov	r0, r4
 800d13e:	f000 fa35 	bl	800d5ac <__multadd>
 800d142:	9b02      	ldr	r3, [sp, #8]
 800d144:	2b00      	cmp	r3, #0
 800d146:	4607      	mov	r7, r0
 800d148:	f300 808e 	bgt.w	800d268 <_dtoa_r+0x990>
 800d14c:	9b06      	ldr	r3, [sp, #24]
 800d14e:	2b02      	cmp	r3, #2
 800d150:	dc51      	bgt.n	800d1f6 <_dtoa_r+0x91e>
 800d152:	e089      	b.n	800d268 <_dtoa_r+0x990>
 800d154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d156:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d15a:	e74b      	b.n	800cff4 <_dtoa_r+0x71c>
 800d15c:	9b03      	ldr	r3, [sp, #12]
 800d15e:	1e5e      	subs	r6, r3, #1
 800d160:	9b07      	ldr	r3, [sp, #28]
 800d162:	42b3      	cmp	r3, r6
 800d164:	bfbf      	itttt	lt
 800d166:	9b07      	ldrlt	r3, [sp, #28]
 800d168:	9607      	strlt	r6, [sp, #28]
 800d16a:	1af2      	sublt	r2, r6, r3
 800d16c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d16e:	bfb6      	itet	lt
 800d170:	189b      	addlt	r3, r3, r2
 800d172:	1b9e      	subge	r6, r3, r6
 800d174:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d176:	9b03      	ldr	r3, [sp, #12]
 800d178:	bfb8      	it	lt
 800d17a:	2600      	movlt	r6, #0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	bfb7      	itett	lt
 800d180:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d184:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d188:	1a9d      	sublt	r5, r3, r2
 800d18a:	2300      	movlt	r3, #0
 800d18c:	e734      	b.n	800cff8 <_dtoa_r+0x720>
 800d18e:	9e07      	ldr	r6, [sp, #28]
 800d190:	9d04      	ldr	r5, [sp, #16]
 800d192:	9f08      	ldr	r7, [sp, #32]
 800d194:	e73b      	b.n	800d00e <_dtoa_r+0x736>
 800d196:	9a07      	ldr	r2, [sp, #28]
 800d198:	e767      	b.n	800d06a <_dtoa_r+0x792>
 800d19a:	9b06      	ldr	r3, [sp, #24]
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	dc18      	bgt.n	800d1d2 <_dtoa_r+0x8fa>
 800d1a0:	f1ba 0f00 	cmp.w	sl, #0
 800d1a4:	d115      	bne.n	800d1d2 <_dtoa_r+0x8fa>
 800d1a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1aa:	b993      	cbnz	r3, 800d1d2 <_dtoa_r+0x8fa>
 800d1ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d1b0:	0d1b      	lsrs	r3, r3, #20
 800d1b2:	051b      	lsls	r3, r3, #20
 800d1b4:	b183      	cbz	r3, 800d1d8 <_dtoa_r+0x900>
 800d1b6:	9b04      	ldr	r3, [sp, #16]
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	9304      	str	r3, [sp, #16]
 800d1bc:	9b05      	ldr	r3, [sp, #20]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	9305      	str	r3, [sp, #20]
 800d1c2:	f04f 0801 	mov.w	r8, #1
 800d1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f47f af6a 	bne.w	800d0a2 <_dtoa_r+0x7ca>
 800d1ce:	2001      	movs	r0, #1
 800d1d0:	e76f      	b.n	800d0b2 <_dtoa_r+0x7da>
 800d1d2:	f04f 0800 	mov.w	r8, #0
 800d1d6:	e7f6      	b.n	800d1c6 <_dtoa_r+0x8ee>
 800d1d8:	4698      	mov	r8, r3
 800d1da:	e7f4      	b.n	800d1c6 <_dtoa_r+0x8ee>
 800d1dc:	f43f af7d 	beq.w	800d0da <_dtoa_r+0x802>
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	301c      	adds	r0, #28
 800d1e4:	e772      	b.n	800d0cc <_dtoa_r+0x7f4>
 800d1e6:	9b03      	ldr	r3, [sp, #12]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	dc37      	bgt.n	800d25c <_dtoa_r+0x984>
 800d1ec:	9b06      	ldr	r3, [sp, #24]
 800d1ee:	2b02      	cmp	r3, #2
 800d1f0:	dd34      	ble.n	800d25c <_dtoa_r+0x984>
 800d1f2:	9b03      	ldr	r3, [sp, #12]
 800d1f4:	9302      	str	r3, [sp, #8]
 800d1f6:	9b02      	ldr	r3, [sp, #8]
 800d1f8:	b96b      	cbnz	r3, 800d216 <_dtoa_r+0x93e>
 800d1fa:	4631      	mov	r1, r6
 800d1fc:	2205      	movs	r2, #5
 800d1fe:	4620      	mov	r0, r4
 800d200:	f000 f9d4 	bl	800d5ac <__multadd>
 800d204:	4601      	mov	r1, r0
 800d206:	4606      	mov	r6, r0
 800d208:	ee18 0a10 	vmov	r0, s16
 800d20c:	f000 fbee 	bl	800d9ec <__mcmp>
 800d210:	2800      	cmp	r0, #0
 800d212:	f73f adbb 	bgt.w	800cd8c <_dtoa_r+0x4b4>
 800d216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d218:	9d01      	ldr	r5, [sp, #4]
 800d21a:	43db      	mvns	r3, r3
 800d21c:	9300      	str	r3, [sp, #0]
 800d21e:	f04f 0800 	mov.w	r8, #0
 800d222:	4631      	mov	r1, r6
 800d224:	4620      	mov	r0, r4
 800d226:	f000 f99f 	bl	800d568 <_Bfree>
 800d22a:	2f00      	cmp	r7, #0
 800d22c:	f43f aea4 	beq.w	800cf78 <_dtoa_r+0x6a0>
 800d230:	f1b8 0f00 	cmp.w	r8, #0
 800d234:	d005      	beq.n	800d242 <_dtoa_r+0x96a>
 800d236:	45b8      	cmp	r8, r7
 800d238:	d003      	beq.n	800d242 <_dtoa_r+0x96a>
 800d23a:	4641      	mov	r1, r8
 800d23c:	4620      	mov	r0, r4
 800d23e:	f000 f993 	bl	800d568 <_Bfree>
 800d242:	4639      	mov	r1, r7
 800d244:	4620      	mov	r0, r4
 800d246:	f000 f98f 	bl	800d568 <_Bfree>
 800d24a:	e695      	b.n	800cf78 <_dtoa_r+0x6a0>
 800d24c:	2600      	movs	r6, #0
 800d24e:	4637      	mov	r7, r6
 800d250:	e7e1      	b.n	800d216 <_dtoa_r+0x93e>
 800d252:	9700      	str	r7, [sp, #0]
 800d254:	4637      	mov	r7, r6
 800d256:	e599      	b.n	800cd8c <_dtoa_r+0x4b4>
 800d258:	40240000 	.word	0x40240000
 800d25c:	9b08      	ldr	r3, [sp, #32]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	f000 80ca 	beq.w	800d3f8 <_dtoa_r+0xb20>
 800d264:	9b03      	ldr	r3, [sp, #12]
 800d266:	9302      	str	r3, [sp, #8]
 800d268:	2d00      	cmp	r5, #0
 800d26a:	dd05      	ble.n	800d278 <_dtoa_r+0x9a0>
 800d26c:	4639      	mov	r1, r7
 800d26e:	462a      	mov	r2, r5
 800d270:	4620      	mov	r0, r4
 800d272:	f000 fb4b 	bl	800d90c <__lshift>
 800d276:	4607      	mov	r7, r0
 800d278:	f1b8 0f00 	cmp.w	r8, #0
 800d27c:	d05b      	beq.n	800d336 <_dtoa_r+0xa5e>
 800d27e:	6879      	ldr	r1, [r7, #4]
 800d280:	4620      	mov	r0, r4
 800d282:	f000 f931 	bl	800d4e8 <_Balloc>
 800d286:	4605      	mov	r5, r0
 800d288:	b928      	cbnz	r0, 800d296 <_dtoa_r+0x9be>
 800d28a:	4b87      	ldr	r3, [pc, #540]	; (800d4a8 <_dtoa_r+0xbd0>)
 800d28c:	4602      	mov	r2, r0
 800d28e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d292:	f7ff bb3b 	b.w	800c90c <_dtoa_r+0x34>
 800d296:	693a      	ldr	r2, [r7, #16]
 800d298:	3202      	adds	r2, #2
 800d29a:	0092      	lsls	r2, r2, #2
 800d29c:	f107 010c 	add.w	r1, r7, #12
 800d2a0:	300c      	adds	r0, #12
 800d2a2:	f000 f913 	bl	800d4cc <memcpy>
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	4629      	mov	r1, r5
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	f000 fb2e 	bl	800d90c <__lshift>
 800d2b0:	9b01      	ldr	r3, [sp, #4]
 800d2b2:	f103 0901 	add.w	r9, r3, #1
 800d2b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	9305      	str	r3, [sp, #20]
 800d2be:	f00a 0301 	and.w	r3, sl, #1
 800d2c2:	46b8      	mov	r8, r7
 800d2c4:	9304      	str	r3, [sp, #16]
 800d2c6:	4607      	mov	r7, r0
 800d2c8:	4631      	mov	r1, r6
 800d2ca:	ee18 0a10 	vmov	r0, s16
 800d2ce:	f7ff fa77 	bl	800c7c0 <quorem>
 800d2d2:	4641      	mov	r1, r8
 800d2d4:	9002      	str	r0, [sp, #8]
 800d2d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d2da:	ee18 0a10 	vmov	r0, s16
 800d2de:	f000 fb85 	bl	800d9ec <__mcmp>
 800d2e2:	463a      	mov	r2, r7
 800d2e4:	9003      	str	r0, [sp, #12]
 800d2e6:	4631      	mov	r1, r6
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f000 fb9b 	bl	800da24 <__mdiff>
 800d2ee:	68c2      	ldr	r2, [r0, #12]
 800d2f0:	f109 3bff 	add.w	fp, r9, #4294967295
 800d2f4:	4605      	mov	r5, r0
 800d2f6:	bb02      	cbnz	r2, 800d33a <_dtoa_r+0xa62>
 800d2f8:	4601      	mov	r1, r0
 800d2fa:	ee18 0a10 	vmov	r0, s16
 800d2fe:	f000 fb75 	bl	800d9ec <__mcmp>
 800d302:	4602      	mov	r2, r0
 800d304:	4629      	mov	r1, r5
 800d306:	4620      	mov	r0, r4
 800d308:	9207      	str	r2, [sp, #28]
 800d30a:	f000 f92d 	bl	800d568 <_Bfree>
 800d30e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d312:	ea43 0102 	orr.w	r1, r3, r2
 800d316:	9b04      	ldr	r3, [sp, #16]
 800d318:	430b      	orrs	r3, r1
 800d31a:	464d      	mov	r5, r9
 800d31c:	d10f      	bne.n	800d33e <_dtoa_r+0xa66>
 800d31e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d322:	d02a      	beq.n	800d37a <_dtoa_r+0xaa2>
 800d324:	9b03      	ldr	r3, [sp, #12]
 800d326:	2b00      	cmp	r3, #0
 800d328:	dd02      	ble.n	800d330 <_dtoa_r+0xa58>
 800d32a:	9b02      	ldr	r3, [sp, #8]
 800d32c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d330:	f88b a000 	strb.w	sl, [fp]
 800d334:	e775      	b.n	800d222 <_dtoa_r+0x94a>
 800d336:	4638      	mov	r0, r7
 800d338:	e7ba      	b.n	800d2b0 <_dtoa_r+0x9d8>
 800d33a:	2201      	movs	r2, #1
 800d33c:	e7e2      	b.n	800d304 <_dtoa_r+0xa2c>
 800d33e:	9b03      	ldr	r3, [sp, #12]
 800d340:	2b00      	cmp	r3, #0
 800d342:	db04      	blt.n	800d34e <_dtoa_r+0xa76>
 800d344:	9906      	ldr	r1, [sp, #24]
 800d346:	430b      	orrs	r3, r1
 800d348:	9904      	ldr	r1, [sp, #16]
 800d34a:	430b      	orrs	r3, r1
 800d34c:	d122      	bne.n	800d394 <_dtoa_r+0xabc>
 800d34e:	2a00      	cmp	r2, #0
 800d350:	ddee      	ble.n	800d330 <_dtoa_r+0xa58>
 800d352:	ee18 1a10 	vmov	r1, s16
 800d356:	2201      	movs	r2, #1
 800d358:	4620      	mov	r0, r4
 800d35a:	f000 fad7 	bl	800d90c <__lshift>
 800d35e:	4631      	mov	r1, r6
 800d360:	ee08 0a10 	vmov	s16, r0
 800d364:	f000 fb42 	bl	800d9ec <__mcmp>
 800d368:	2800      	cmp	r0, #0
 800d36a:	dc03      	bgt.n	800d374 <_dtoa_r+0xa9c>
 800d36c:	d1e0      	bne.n	800d330 <_dtoa_r+0xa58>
 800d36e:	f01a 0f01 	tst.w	sl, #1
 800d372:	d0dd      	beq.n	800d330 <_dtoa_r+0xa58>
 800d374:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d378:	d1d7      	bne.n	800d32a <_dtoa_r+0xa52>
 800d37a:	2339      	movs	r3, #57	; 0x39
 800d37c:	f88b 3000 	strb.w	r3, [fp]
 800d380:	462b      	mov	r3, r5
 800d382:	461d      	mov	r5, r3
 800d384:	3b01      	subs	r3, #1
 800d386:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d38a:	2a39      	cmp	r2, #57	; 0x39
 800d38c:	d071      	beq.n	800d472 <_dtoa_r+0xb9a>
 800d38e:	3201      	adds	r2, #1
 800d390:	701a      	strb	r2, [r3, #0]
 800d392:	e746      	b.n	800d222 <_dtoa_r+0x94a>
 800d394:	2a00      	cmp	r2, #0
 800d396:	dd07      	ble.n	800d3a8 <_dtoa_r+0xad0>
 800d398:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d39c:	d0ed      	beq.n	800d37a <_dtoa_r+0xaa2>
 800d39e:	f10a 0301 	add.w	r3, sl, #1
 800d3a2:	f88b 3000 	strb.w	r3, [fp]
 800d3a6:	e73c      	b.n	800d222 <_dtoa_r+0x94a>
 800d3a8:	9b05      	ldr	r3, [sp, #20]
 800d3aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d3ae:	4599      	cmp	r9, r3
 800d3b0:	d047      	beq.n	800d442 <_dtoa_r+0xb6a>
 800d3b2:	ee18 1a10 	vmov	r1, s16
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	220a      	movs	r2, #10
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f000 f8f6 	bl	800d5ac <__multadd>
 800d3c0:	45b8      	cmp	r8, r7
 800d3c2:	ee08 0a10 	vmov	s16, r0
 800d3c6:	f04f 0300 	mov.w	r3, #0
 800d3ca:	f04f 020a 	mov.w	r2, #10
 800d3ce:	4641      	mov	r1, r8
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	d106      	bne.n	800d3e2 <_dtoa_r+0xb0a>
 800d3d4:	f000 f8ea 	bl	800d5ac <__multadd>
 800d3d8:	4680      	mov	r8, r0
 800d3da:	4607      	mov	r7, r0
 800d3dc:	f109 0901 	add.w	r9, r9, #1
 800d3e0:	e772      	b.n	800d2c8 <_dtoa_r+0x9f0>
 800d3e2:	f000 f8e3 	bl	800d5ac <__multadd>
 800d3e6:	4639      	mov	r1, r7
 800d3e8:	4680      	mov	r8, r0
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	220a      	movs	r2, #10
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	f000 f8dc 	bl	800d5ac <__multadd>
 800d3f4:	4607      	mov	r7, r0
 800d3f6:	e7f1      	b.n	800d3dc <_dtoa_r+0xb04>
 800d3f8:	9b03      	ldr	r3, [sp, #12]
 800d3fa:	9302      	str	r3, [sp, #8]
 800d3fc:	9d01      	ldr	r5, [sp, #4]
 800d3fe:	ee18 0a10 	vmov	r0, s16
 800d402:	4631      	mov	r1, r6
 800d404:	f7ff f9dc 	bl	800c7c0 <quorem>
 800d408:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d40c:	9b01      	ldr	r3, [sp, #4]
 800d40e:	f805 ab01 	strb.w	sl, [r5], #1
 800d412:	1aea      	subs	r2, r5, r3
 800d414:	9b02      	ldr	r3, [sp, #8]
 800d416:	4293      	cmp	r3, r2
 800d418:	dd09      	ble.n	800d42e <_dtoa_r+0xb56>
 800d41a:	ee18 1a10 	vmov	r1, s16
 800d41e:	2300      	movs	r3, #0
 800d420:	220a      	movs	r2, #10
 800d422:	4620      	mov	r0, r4
 800d424:	f000 f8c2 	bl	800d5ac <__multadd>
 800d428:	ee08 0a10 	vmov	s16, r0
 800d42c:	e7e7      	b.n	800d3fe <_dtoa_r+0xb26>
 800d42e:	9b02      	ldr	r3, [sp, #8]
 800d430:	2b00      	cmp	r3, #0
 800d432:	bfc8      	it	gt
 800d434:	461d      	movgt	r5, r3
 800d436:	9b01      	ldr	r3, [sp, #4]
 800d438:	bfd8      	it	le
 800d43a:	2501      	movle	r5, #1
 800d43c:	441d      	add	r5, r3
 800d43e:	f04f 0800 	mov.w	r8, #0
 800d442:	ee18 1a10 	vmov	r1, s16
 800d446:	2201      	movs	r2, #1
 800d448:	4620      	mov	r0, r4
 800d44a:	f000 fa5f 	bl	800d90c <__lshift>
 800d44e:	4631      	mov	r1, r6
 800d450:	ee08 0a10 	vmov	s16, r0
 800d454:	f000 faca 	bl	800d9ec <__mcmp>
 800d458:	2800      	cmp	r0, #0
 800d45a:	dc91      	bgt.n	800d380 <_dtoa_r+0xaa8>
 800d45c:	d102      	bne.n	800d464 <_dtoa_r+0xb8c>
 800d45e:	f01a 0f01 	tst.w	sl, #1
 800d462:	d18d      	bne.n	800d380 <_dtoa_r+0xaa8>
 800d464:	462b      	mov	r3, r5
 800d466:	461d      	mov	r5, r3
 800d468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d46c:	2a30      	cmp	r2, #48	; 0x30
 800d46e:	d0fa      	beq.n	800d466 <_dtoa_r+0xb8e>
 800d470:	e6d7      	b.n	800d222 <_dtoa_r+0x94a>
 800d472:	9a01      	ldr	r2, [sp, #4]
 800d474:	429a      	cmp	r2, r3
 800d476:	d184      	bne.n	800d382 <_dtoa_r+0xaaa>
 800d478:	9b00      	ldr	r3, [sp, #0]
 800d47a:	3301      	adds	r3, #1
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	2331      	movs	r3, #49	; 0x31
 800d480:	7013      	strb	r3, [r2, #0]
 800d482:	e6ce      	b.n	800d222 <_dtoa_r+0x94a>
 800d484:	4b09      	ldr	r3, [pc, #36]	; (800d4ac <_dtoa_r+0xbd4>)
 800d486:	f7ff ba95 	b.w	800c9b4 <_dtoa_r+0xdc>
 800d48a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f47f aa6e 	bne.w	800c96e <_dtoa_r+0x96>
 800d492:	4b07      	ldr	r3, [pc, #28]	; (800d4b0 <_dtoa_r+0xbd8>)
 800d494:	f7ff ba8e 	b.w	800c9b4 <_dtoa_r+0xdc>
 800d498:	9b02      	ldr	r3, [sp, #8]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	dcae      	bgt.n	800d3fc <_dtoa_r+0xb24>
 800d49e:	9b06      	ldr	r3, [sp, #24]
 800d4a0:	2b02      	cmp	r3, #2
 800d4a2:	f73f aea8 	bgt.w	800d1f6 <_dtoa_r+0x91e>
 800d4a6:	e7a9      	b.n	800d3fc <_dtoa_r+0xb24>
 800d4a8:	08010337 	.word	0x08010337
 800d4ac:	08010294 	.word	0x08010294
 800d4b0:	080102b8 	.word	0x080102b8

0800d4b4 <_localeconv_r>:
 800d4b4:	4800      	ldr	r0, [pc, #0]	; (800d4b8 <_localeconv_r+0x4>)
 800d4b6:	4770      	bx	lr
 800d4b8:	200001f0 	.word	0x200001f0

0800d4bc <malloc>:
 800d4bc:	4b02      	ldr	r3, [pc, #8]	; (800d4c8 <malloc+0xc>)
 800d4be:	4601      	mov	r1, r0
 800d4c0:	6818      	ldr	r0, [r3, #0]
 800d4c2:	f000 bc17 	b.w	800dcf4 <_malloc_r>
 800d4c6:	bf00      	nop
 800d4c8:	2000009c 	.word	0x2000009c

0800d4cc <memcpy>:
 800d4cc:	440a      	add	r2, r1
 800d4ce:	4291      	cmp	r1, r2
 800d4d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4d4:	d100      	bne.n	800d4d8 <memcpy+0xc>
 800d4d6:	4770      	bx	lr
 800d4d8:	b510      	push	{r4, lr}
 800d4da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4e2:	4291      	cmp	r1, r2
 800d4e4:	d1f9      	bne.n	800d4da <memcpy+0xe>
 800d4e6:	bd10      	pop	{r4, pc}

0800d4e8 <_Balloc>:
 800d4e8:	b570      	push	{r4, r5, r6, lr}
 800d4ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	460d      	mov	r5, r1
 800d4f0:	b976      	cbnz	r6, 800d510 <_Balloc+0x28>
 800d4f2:	2010      	movs	r0, #16
 800d4f4:	f7ff ffe2 	bl	800d4bc <malloc>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	6260      	str	r0, [r4, #36]	; 0x24
 800d4fc:	b920      	cbnz	r0, 800d508 <_Balloc+0x20>
 800d4fe:	4b18      	ldr	r3, [pc, #96]	; (800d560 <_Balloc+0x78>)
 800d500:	4818      	ldr	r0, [pc, #96]	; (800d564 <_Balloc+0x7c>)
 800d502:	2166      	movs	r1, #102	; 0x66
 800d504:	f000 fdd6 	bl	800e0b4 <__assert_func>
 800d508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d50c:	6006      	str	r6, [r0, #0]
 800d50e:	60c6      	str	r6, [r0, #12]
 800d510:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d512:	68f3      	ldr	r3, [r6, #12]
 800d514:	b183      	cbz	r3, 800d538 <_Balloc+0x50>
 800d516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d51e:	b9b8      	cbnz	r0, 800d550 <_Balloc+0x68>
 800d520:	2101      	movs	r1, #1
 800d522:	fa01 f605 	lsl.w	r6, r1, r5
 800d526:	1d72      	adds	r2, r6, #5
 800d528:	0092      	lsls	r2, r2, #2
 800d52a:	4620      	mov	r0, r4
 800d52c:	f000 fb60 	bl	800dbf0 <_calloc_r>
 800d530:	b160      	cbz	r0, 800d54c <_Balloc+0x64>
 800d532:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d536:	e00e      	b.n	800d556 <_Balloc+0x6e>
 800d538:	2221      	movs	r2, #33	; 0x21
 800d53a:	2104      	movs	r1, #4
 800d53c:	4620      	mov	r0, r4
 800d53e:	f000 fb57 	bl	800dbf0 <_calloc_r>
 800d542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d544:	60f0      	str	r0, [r6, #12]
 800d546:	68db      	ldr	r3, [r3, #12]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d1e4      	bne.n	800d516 <_Balloc+0x2e>
 800d54c:	2000      	movs	r0, #0
 800d54e:	bd70      	pop	{r4, r5, r6, pc}
 800d550:	6802      	ldr	r2, [r0, #0]
 800d552:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d556:	2300      	movs	r3, #0
 800d558:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d55c:	e7f7      	b.n	800d54e <_Balloc+0x66>
 800d55e:	bf00      	nop
 800d560:	080102c5 	.word	0x080102c5
 800d564:	08010348 	.word	0x08010348

0800d568 <_Bfree>:
 800d568:	b570      	push	{r4, r5, r6, lr}
 800d56a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d56c:	4605      	mov	r5, r0
 800d56e:	460c      	mov	r4, r1
 800d570:	b976      	cbnz	r6, 800d590 <_Bfree+0x28>
 800d572:	2010      	movs	r0, #16
 800d574:	f7ff ffa2 	bl	800d4bc <malloc>
 800d578:	4602      	mov	r2, r0
 800d57a:	6268      	str	r0, [r5, #36]	; 0x24
 800d57c:	b920      	cbnz	r0, 800d588 <_Bfree+0x20>
 800d57e:	4b09      	ldr	r3, [pc, #36]	; (800d5a4 <_Bfree+0x3c>)
 800d580:	4809      	ldr	r0, [pc, #36]	; (800d5a8 <_Bfree+0x40>)
 800d582:	218a      	movs	r1, #138	; 0x8a
 800d584:	f000 fd96 	bl	800e0b4 <__assert_func>
 800d588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d58c:	6006      	str	r6, [r0, #0]
 800d58e:	60c6      	str	r6, [r0, #12]
 800d590:	b13c      	cbz	r4, 800d5a2 <_Bfree+0x3a>
 800d592:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d594:	6862      	ldr	r2, [r4, #4]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d59c:	6021      	str	r1, [r4, #0]
 800d59e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d5a2:	bd70      	pop	{r4, r5, r6, pc}
 800d5a4:	080102c5 	.word	0x080102c5
 800d5a8:	08010348 	.word	0x08010348

0800d5ac <__multadd>:
 800d5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b0:	690d      	ldr	r5, [r1, #16]
 800d5b2:	4607      	mov	r7, r0
 800d5b4:	460c      	mov	r4, r1
 800d5b6:	461e      	mov	r6, r3
 800d5b8:	f101 0c14 	add.w	ip, r1, #20
 800d5bc:	2000      	movs	r0, #0
 800d5be:	f8dc 3000 	ldr.w	r3, [ip]
 800d5c2:	b299      	uxth	r1, r3
 800d5c4:	fb02 6101 	mla	r1, r2, r1, r6
 800d5c8:	0c1e      	lsrs	r6, r3, #16
 800d5ca:	0c0b      	lsrs	r3, r1, #16
 800d5cc:	fb02 3306 	mla	r3, r2, r6, r3
 800d5d0:	b289      	uxth	r1, r1
 800d5d2:	3001      	adds	r0, #1
 800d5d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d5d8:	4285      	cmp	r5, r0
 800d5da:	f84c 1b04 	str.w	r1, [ip], #4
 800d5de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d5e2:	dcec      	bgt.n	800d5be <__multadd+0x12>
 800d5e4:	b30e      	cbz	r6, 800d62a <__multadd+0x7e>
 800d5e6:	68a3      	ldr	r3, [r4, #8]
 800d5e8:	42ab      	cmp	r3, r5
 800d5ea:	dc19      	bgt.n	800d620 <__multadd+0x74>
 800d5ec:	6861      	ldr	r1, [r4, #4]
 800d5ee:	4638      	mov	r0, r7
 800d5f0:	3101      	adds	r1, #1
 800d5f2:	f7ff ff79 	bl	800d4e8 <_Balloc>
 800d5f6:	4680      	mov	r8, r0
 800d5f8:	b928      	cbnz	r0, 800d606 <__multadd+0x5a>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	4b0c      	ldr	r3, [pc, #48]	; (800d630 <__multadd+0x84>)
 800d5fe:	480d      	ldr	r0, [pc, #52]	; (800d634 <__multadd+0x88>)
 800d600:	21b5      	movs	r1, #181	; 0xb5
 800d602:	f000 fd57 	bl	800e0b4 <__assert_func>
 800d606:	6922      	ldr	r2, [r4, #16]
 800d608:	3202      	adds	r2, #2
 800d60a:	f104 010c 	add.w	r1, r4, #12
 800d60e:	0092      	lsls	r2, r2, #2
 800d610:	300c      	adds	r0, #12
 800d612:	f7ff ff5b 	bl	800d4cc <memcpy>
 800d616:	4621      	mov	r1, r4
 800d618:	4638      	mov	r0, r7
 800d61a:	f7ff ffa5 	bl	800d568 <_Bfree>
 800d61e:	4644      	mov	r4, r8
 800d620:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d624:	3501      	adds	r5, #1
 800d626:	615e      	str	r6, [r3, #20]
 800d628:	6125      	str	r5, [r4, #16]
 800d62a:	4620      	mov	r0, r4
 800d62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d630:	08010337 	.word	0x08010337
 800d634:	08010348 	.word	0x08010348

0800d638 <__hi0bits>:
 800d638:	0c03      	lsrs	r3, r0, #16
 800d63a:	041b      	lsls	r3, r3, #16
 800d63c:	b9d3      	cbnz	r3, 800d674 <__hi0bits+0x3c>
 800d63e:	0400      	lsls	r0, r0, #16
 800d640:	2310      	movs	r3, #16
 800d642:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d646:	bf04      	itt	eq
 800d648:	0200      	lsleq	r0, r0, #8
 800d64a:	3308      	addeq	r3, #8
 800d64c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d650:	bf04      	itt	eq
 800d652:	0100      	lsleq	r0, r0, #4
 800d654:	3304      	addeq	r3, #4
 800d656:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d65a:	bf04      	itt	eq
 800d65c:	0080      	lsleq	r0, r0, #2
 800d65e:	3302      	addeq	r3, #2
 800d660:	2800      	cmp	r0, #0
 800d662:	db05      	blt.n	800d670 <__hi0bits+0x38>
 800d664:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d668:	f103 0301 	add.w	r3, r3, #1
 800d66c:	bf08      	it	eq
 800d66e:	2320      	moveq	r3, #32
 800d670:	4618      	mov	r0, r3
 800d672:	4770      	bx	lr
 800d674:	2300      	movs	r3, #0
 800d676:	e7e4      	b.n	800d642 <__hi0bits+0xa>

0800d678 <__lo0bits>:
 800d678:	6803      	ldr	r3, [r0, #0]
 800d67a:	f013 0207 	ands.w	r2, r3, #7
 800d67e:	4601      	mov	r1, r0
 800d680:	d00b      	beq.n	800d69a <__lo0bits+0x22>
 800d682:	07da      	lsls	r2, r3, #31
 800d684:	d423      	bmi.n	800d6ce <__lo0bits+0x56>
 800d686:	0798      	lsls	r0, r3, #30
 800d688:	bf49      	itett	mi
 800d68a:	085b      	lsrmi	r3, r3, #1
 800d68c:	089b      	lsrpl	r3, r3, #2
 800d68e:	2001      	movmi	r0, #1
 800d690:	600b      	strmi	r3, [r1, #0]
 800d692:	bf5c      	itt	pl
 800d694:	600b      	strpl	r3, [r1, #0]
 800d696:	2002      	movpl	r0, #2
 800d698:	4770      	bx	lr
 800d69a:	b298      	uxth	r0, r3
 800d69c:	b9a8      	cbnz	r0, 800d6ca <__lo0bits+0x52>
 800d69e:	0c1b      	lsrs	r3, r3, #16
 800d6a0:	2010      	movs	r0, #16
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	b90a      	cbnz	r2, 800d6aa <__lo0bits+0x32>
 800d6a6:	3008      	adds	r0, #8
 800d6a8:	0a1b      	lsrs	r3, r3, #8
 800d6aa:	071a      	lsls	r2, r3, #28
 800d6ac:	bf04      	itt	eq
 800d6ae:	091b      	lsreq	r3, r3, #4
 800d6b0:	3004      	addeq	r0, #4
 800d6b2:	079a      	lsls	r2, r3, #30
 800d6b4:	bf04      	itt	eq
 800d6b6:	089b      	lsreq	r3, r3, #2
 800d6b8:	3002      	addeq	r0, #2
 800d6ba:	07da      	lsls	r2, r3, #31
 800d6bc:	d403      	bmi.n	800d6c6 <__lo0bits+0x4e>
 800d6be:	085b      	lsrs	r3, r3, #1
 800d6c0:	f100 0001 	add.w	r0, r0, #1
 800d6c4:	d005      	beq.n	800d6d2 <__lo0bits+0x5a>
 800d6c6:	600b      	str	r3, [r1, #0]
 800d6c8:	4770      	bx	lr
 800d6ca:	4610      	mov	r0, r2
 800d6cc:	e7e9      	b.n	800d6a2 <__lo0bits+0x2a>
 800d6ce:	2000      	movs	r0, #0
 800d6d0:	4770      	bx	lr
 800d6d2:	2020      	movs	r0, #32
 800d6d4:	4770      	bx	lr
	...

0800d6d8 <__i2b>:
 800d6d8:	b510      	push	{r4, lr}
 800d6da:	460c      	mov	r4, r1
 800d6dc:	2101      	movs	r1, #1
 800d6de:	f7ff ff03 	bl	800d4e8 <_Balloc>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	b928      	cbnz	r0, 800d6f2 <__i2b+0x1a>
 800d6e6:	4b05      	ldr	r3, [pc, #20]	; (800d6fc <__i2b+0x24>)
 800d6e8:	4805      	ldr	r0, [pc, #20]	; (800d700 <__i2b+0x28>)
 800d6ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d6ee:	f000 fce1 	bl	800e0b4 <__assert_func>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	6144      	str	r4, [r0, #20]
 800d6f6:	6103      	str	r3, [r0, #16]
 800d6f8:	bd10      	pop	{r4, pc}
 800d6fa:	bf00      	nop
 800d6fc:	08010337 	.word	0x08010337
 800d700:	08010348 	.word	0x08010348

0800d704 <__multiply>:
 800d704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d708:	4691      	mov	r9, r2
 800d70a:	690a      	ldr	r2, [r1, #16]
 800d70c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d710:	429a      	cmp	r2, r3
 800d712:	bfb8      	it	lt
 800d714:	460b      	movlt	r3, r1
 800d716:	460c      	mov	r4, r1
 800d718:	bfbc      	itt	lt
 800d71a:	464c      	movlt	r4, r9
 800d71c:	4699      	movlt	r9, r3
 800d71e:	6927      	ldr	r7, [r4, #16]
 800d720:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d724:	68a3      	ldr	r3, [r4, #8]
 800d726:	6861      	ldr	r1, [r4, #4]
 800d728:	eb07 060a 	add.w	r6, r7, sl
 800d72c:	42b3      	cmp	r3, r6
 800d72e:	b085      	sub	sp, #20
 800d730:	bfb8      	it	lt
 800d732:	3101      	addlt	r1, #1
 800d734:	f7ff fed8 	bl	800d4e8 <_Balloc>
 800d738:	b930      	cbnz	r0, 800d748 <__multiply+0x44>
 800d73a:	4602      	mov	r2, r0
 800d73c:	4b44      	ldr	r3, [pc, #272]	; (800d850 <__multiply+0x14c>)
 800d73e:	4845      	ldr	r0, [pc, #276]	; (800d854 <__multiply+0x150>)
 800d740:	f240 115d 	movw	r1, #349	; 0x15d
 800d744:	f000 fcb6 	bl	800e0b4 <__assert_func>
 800d748:	f100 0514 	add.w	r5, r0, #20
 800d74c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d750:	462b      	mov	r3, r5
 800d752:	2200      	movs	r2, #0
 800d754:	4543      	cmp	r3, r8
 800d756:	d321      	bcc.n	800d79c <__multiply+0x98>
 800d758:	f104 0314 	add.w	r3, r4, #20
 800d75c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d760:	f109 0314 	add.w	r3, r9, #20
 800d764:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d768:	9202      	str	r2, [sp, #8]
 800d76a:	1b3a      	subs	r2, r7, r4
 800d76c:	3a15      	subs	r2, #21
 800d76e:	f022 0203 	bic.w	r2, r2, #3
 800d772:	3204      	adds	r2, #4
 800d774:	f104 0115 	add.w	r1, r4, #21
 800d778:	428f      	cmp	r7, r1
 800d77a:	bf38      	it	cc
 800d77c:	2204      	movcc	r2, #4
 800d77e:	9201      	str	r2, [sp, #4]
 800d780:	9a02      	ldr	r2, [sp, #8]
 800d782:	9303      	str	r3, [sp, #12]
 800d784:	429a      	cmp	r2, r3
 800d786:	d80c      	bhi.n	800d7a2 <__multiply+0x9e>
 800d788:	2e00      	cmp	r6, #0
 800d78a:	dd03      	ble.n	800d794 <__multiply+0x90>
 800d78c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d790:	2b00      	cmp	r3, #0
 800d792:	d05a      	beq.n	800d84a <__multiply+0x146>
 800d794:	6106      	str	r6, [r0, #16]
 800d796:	b005      	add	sp, #20
 800d798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d79c:	f843 2b04 	str.w	r2, [r3], #4
 800d7a0:	e7d8      	b.n	800d754 <__multiply+0x50>
 800d7a2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d7a6:	f1ba 0f00 	cmp.w	sl, #0
 800d7aa:	d024      	beq.n	800d7f6 <__multiply+0xf2>
 800d7ac:	f104 0e14 	add.w	lr, r4, #20
 800d7b0:	46a9      	mov	r9, r5
 800d7b2:	f04f 0c00 	mov.w	ip, #0
 800d7b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d7ba:	f8d9 1000 	ldr.w	r1, [r9]
 800d7be:	fa1f fb82 	uxth.w	fp, r2
 800d7c2:	b289      	uxth	r1, r1
 800d7c4:	fb0a 110b 	mla	r1, sl, fp, r1
 800d7c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d7cc:	f8d9 2000 	ldr.w	r2, [r9]
 800d7d0:	4461      	add	r1, ip
 800d7d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d7d6:	fb0a c20b 	mla	r2, sl, fp, ip
 800d7da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d7de:	b289      	uxth	r1, r1
 800d7e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d7e4:	4577      	cmp	r7, lr
 800d7e6:	f849 1b04 	str.w	r1, [r9], #4
 800d7ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d7ee:	d8e2      	bhi.n	800d7b6 <__multiply+0xb2>
 800d7f0:	9a01      	ldr	r2, [sp, #4]
 800d7f2:	f845 c002 	str.w	ip, [r5, r2]
 800d7f6:	9a03      	ldr	r2, [sp, #12]
 800d7f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d7fc:	3304      	adds	r3, #4
 800d7fe:	f1b9 0f00 	cmp.w	r9, #0
 800d802:	d020      	beq.n	800d846 <__multiply+0x142>
 800d804:	6829      	ldr	r1, [r5, #0]
 800d806:	f104 0c14 	add.w	ip, r4, #20
 800d80a:	46ae      	mov	lr, r5
 800d80c:	f04f 0a00 	mov.w	sl, #0
 800d810:	f8bc b000 	ldrh.w	fp, [ip]
 800d814:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d818:	fb09 220b 	mla	r2, r9, fp, r2
 800d81c:	4492      	add	sl, r2
 800d81e:	b289      	uxth	r1, r1
 800d820:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d824:	f84e 1b04 	str.w	r1, [lr], #4
 800d828:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d82c:	f8be 1000 	ldrh.w	r1, [lr]
 800d830:	0c12      	lsrs	r2, r2, #16
 800d832:	fb09 1102 	mla	r1, r9, r2, r1
 800d836:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d83a:	4567      	cmp	r7, ip
 800d83c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d840:	d8e6      	bhi.n	800d810 <__multiply+0x10c>
 800d842:	9a01      	ldr	r2, [sp, #4]
 800d844:	50a9      	str	r1, [r5, r2]
 800d846:	3504      	adds	r5, #4
 800d848:	e79a      	b.n	800d780 <__multiply+0x7c>
 800d84a:	3e01      	subs	r6, #1
 800d84c:	e79c      	b.n	800d788 <__multiply+0x84>
 800d84e:	bf00      	nop
 800d850:	08010337 	.word	0x08010337
 800d854:	08010348 	.word	0x08010348

0800d858 <__pow5mult>:
 800d858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d85c:	4615      	mov	r5, r2
 800d85e:	f012 0203 	ands.w	r2, r2, #3
 800d862:	4606      	mov	r6, r0
 800d864:	460f      	mov	r7, r1
 800d866:	d007      	beq.n	800d878 <__pow5mult+0x20>
 800d868:	4c25      	ldr	r4, [pc, #148]	; (800d900 <__pow5mult+0xa8>)
 800d86a:	3a01      	subs	r2, #1
 800d86c:	2300      	movs	r3, #0
 800d86e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d872:	f7ff fe9b 	bl	800d5ac <__multadd>
 800d876:	4607      	mov	r7, r0
 800d878:	10ad      	asrs	r5, r5, #2
 800d87a:	d03d      	beq.n	800d8f8 <__pow5mult+0xa0>
 800d87c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d87e:	b97c      	cbnz	r4, 800d8a0 <__pow5mult+0x48>
 800d880:	2010      	movs	r0, #16
 800d882:	f7ff fe1b 	bl	800d4bc <malloc>
 800d886:	4602      	mov	r2, r0
 800d888:	6270      	str	r0, [r6, #36]	; 0x24
 800d88a:	b928      	cbnz	r0, 800d898 <__pow5mult+0x40>
 800d88c:	4b1d      	ldr	r3, [pc, #116]	; (800d904 <__pow5mult+0xac>)
 800d88e:	481e      	ldr	r0, [pc, #120]	; (800d908 <__pow5mult+0xb0>)
 800d890:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d894:	f000 fc0e 	bl	800e0b4 <__assert_func>
 800d898:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d89c:	6004      	str	r4, [r0, #0]
 800d89e:	60c4      	str	r4, [r0, #12]
 800d8a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d8a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d8a8:	b94c      	cbnz	r4, 800d8be <__pow5mult+0x66>
 800d8aa:	f240 2171 	movw	r1, #625	; 0x271
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	f7ff ff12 	bl	800d6d8 <__i2b>
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d8ba:	4604      	mov	r4, r0
 800d8bc:	6003      	str	r3, [r0, #0]
 800d8be:	f04f 0900 	mov.w	r9, #0
 800d8c2:	07eb      	lsls	r3, r5, #31
 800d8c4:	d50a      	bpl.n	800d8dc <__pow5mult+0x84>
 800d8c6:	4639      	mov	r1, r7
 800d8c8:	4622      	mov	r2, r4
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	f7ff ff1a 	bl	800d704 <__multiply>
 800d8d0:	4639      	mov	r1, r7
 800d8d2:	4680      	mov	r8, r0
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	f7ff fe47 	bl	800d568 <_Bfree>
 800d8da:	4647      	mov	r7, r8
 800d8dc:	106d      	asrs	r5, r5, #1
 800d8de:	d00b      	beq.n	800d8f8 <__pow5mult+0xa0>
 800d8e0:	6820      	ldr	r0, [r4, #0]
 800d8e2:	b938      	cbnz	r0, 800d8f4 <__pow5mult+0x9c>
 800d8e4:	4622      	mov	r2, r4
 800d8e6:	4621      	mov	r1, r4
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	f7ff ff0b 	bl	800d704 <__multiply>
 800d8ee:	6020      	str	r0, [r4, #0]
 800d8f0:	f8c0 9000 	str.w	r9, [r0]
 800d8f4:	4604      	mov	r4, r0
 800d8f6:	e7e4      	b.n	800d8c2 <__pow5mult+0x6a>
 800d8f8:	4638      	mov	r0, r7
 800d8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8fe:	bf00      	nop
 800d900:	08010498 	.word	0x08010498
 800d904:	080102c5 	.word	0x080102c5
 800d908:	08010348 	.word	0x08010348

0800d90c <__lshift>:
 800d90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d910:	460c      	mov	r4, r1
 800d912:	6849      	ldr	r1, [r1, #4]
 800d914:	6923      	ldr	r3, [r4, #16]
 800d916:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d91a:	68a3      	ldr	r3, [r4, #8]
 800d91c:	4607      	mov	r7, r0
 800d91e:	4691      	mov	r9, r2
 800d920:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d924:	f108 0601 	add.w	r6, r8, #1
 800d928:	42b3      	cmp	r3, r6
 800d92a:	db0b      	blt.n	800d944 <__lshift+0x38>
 800d92c:	4638      	mov	r0, r7
 800d92e:	f7ff fddb 	bl	800d4e8 <_Balloc>
 800d932:	4605      	mov	r5, r0
 800d934:	b948      	cbnz	r0, 800d94a <__lshift+0x3e>
 800d936:	4602      	mov	r2, r0
 800d938:	4b2a      	ldr	r3, [pc, #168]	; (800d9e4 <__lshift+0xd8>)
 800d93a:	482b      	ldr	r0, [pc, #172]	; (800d9e8 <__lshift+0xdc>)
 800d93c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d940:	f000 fbb8 	bl	800e0b4 <__assert_func>
 800d944:	3101      	adds	r1, #1
 800d946:	005b      	lsls	r3, r3, #1
 800d948:	e7ee      	b.n	800d928 <__lshift+0x1c>
 800d94a:	2300      	movs	r3, #0
 800d94c:	f100 0114 	add.w	r1, r0, #20
 800d950:	f100 0210 	add.w	r2, r0, #16
 800d954:	4618      	mov	r0, r3
 800d956:	4553      	cmp	r3, sl
 800d958:	db37      	blt.n	800d9ca <__lshift+0xbe>
 800d95a:	6920      	ldr	r0, [r4, #16]
 800d95c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d960:	f104 0314 	add.w	r3, r4, #20
 800d964:	f019 091f 	ands.w	r9, r9, #31
 800d968:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d96c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d970:	d02f      	beq.n	800d9d2 <__lshift+0xc6>
 800d972:	f1c9 0e20 	rsb	lr, r9, #32
 800d976:	468a      	mov	sl, r1
 800d978:	f04f 0c00 	mov.w	ip, #0
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	fa02 f209 	lsl.w	r2, r2, r9
 800d982:	ea42 020c 	orr.w	r2, r2, ip
 800d986:	f84a 2b04 	str.w	r2, [sl], #4
 800d98a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d98e:	4298      	cmp	r0, r3
 800d990:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d994:	d8f2      	bhi.n	800d97c <__lshift+0x70>
 800d996:	1b03      	subs	r3, r0, r4
 800d998:	3b15      	subs	r3, #21
 800d99a:	f023 0303 	bic.w	r3, r3, #3
 800d99e:	3304      	adds	r3, #4
 800d9a0:	f104 0215 	add.w	r2, r4, #21
 800d9a4:	4290      	cmp	r0, r2
 800d9a6:	bf38      	it	cc
 800d9a8:	2304      	movcc	r3, #4
 800d9aa:	f841 c003 	str.w	ip, [r1, r3]
 800d9ae:	f1bc 0f00 	cmp.w	ip, #0
 800d9b2:	d001      	beq.n	800d9b8 <__lshift+0xac>
 800d9b4:	f108 0602 	add.w	r6, r8, #2
 800d9b8:	3e01      	subs	r6, #1
 800d9ba:	4638      	mov	r0, r7
 800d9bc:	612e      	str	r6, [r5, #16]
 800d9be:	4621      	mov	r1, r4
 800d9c0:	f7ff fdd2 	bl	800d568 <_Bfree>
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	e7c1      	b.n	800d956 <__lshift+0x4a>
 800d9d2:	3904      	subs	r1, #4
 800d9d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d9dc:	4298      	cmp	r0, r3
 800d9de:	d8f9      	bhi.n	800d9d4 <__lshift+0xc8>
 800d9e0:	e7ea      	b.n	800d9b8 <__lshift+0xac>
 800d9e2:	bf00      	nop
 800d9e4:	08010337 	.word	0x08010337
 800d9e8:	08010348 	.word	0x08010348

0800d9ec <__mcmp>:
 800d9ec:	b530      	push	{r4, r5, lr}
 800d9ee:	6902      	ldr	r2, [r0, #16]
 800d9f0:	690c      	ldr	r4, [r1, #16]
 800d9f2:	1b12      	subs	r2, r2, r4
 800d9f4:	d10e      	bne.n	800da14 <__mcmp+0x28>
 800d9f6:	f100 0314 	add.w	r3, r0, #20
 800d9fa:	3114      	adds	r1, #20
 800d9fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800da00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800da04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800da08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800da0c:	42a5      	cmp	r5, r4
 800da0e:	d003      	beq.n	800da18 <__mcmp+0x2c>
 800da10:	d305      	bcc.n	800da1e <__mcmp+0x32>
 800da12:	2201      	movs	r2, #1
 800da14:	4610      	mov	r0, r2
 800da16:	bd30      	pop	{r4, r5, pc}
 800da18:	4283      	cmp	r3, r0
 800da1a:	d3f3      	bcc.n	800da04 <__mcmp+0x18>
 800da1c:	e7fa      	b.n	800da14 <__mcmp+0x28>
 800da1e:	f04f 32ff 	mov.w	r2, #4294967295
 800da22:	e7f7      	b.n	800da14 <__mcmp+0x28>

0800da24 <__mdiff>:
 800da24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da28:	460c      	mov	r4, r1
 800da2a:	4606      	mov	r6, r0
 800da2c:	4611      	mov	r1, r2
 800da2e:	4620      	mov	r0, r4
 800da30:	4690      	mov	r8, r2
 800da32:	f7ff ffdb 	bl	800d9ec <__mcmp>
 800da36:	1e05      	subs	r5, r0, #0
 800da38:	d110      	bne.n	800da5c <__mdiff+0x38>
 800da3a:	4629      	mov	r1, r5
 800da3c:	4630      	mov	r0, r6
 800da3e:	f7ff fd53 	bl	800d4e8 <_Balloc>
 800da42:	b930      	cbnz	r0, 800da52 <__mdiff+0x2e>
 800da44:	4b3a      	ldr	r3, [pc, #232]	; (800db30 <__mdiff+0x10c>)
 800da46:	4602      	mov	r2, r0
 800da48:	f240 2132 	movw	r1, #562	; 0x232
 800da4c:	4839      	ldr	r0, [pc, #228]	; (800db34 <__mdiff+0x110>)
 800da4e:	f000 fb31 	bl	800e0b4 <__assert_func>
 800da52:	2301      	movs	r3, #1
 800da54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da5c:	bfa4      	itt	ge
 800da5e:	4643      	movge	r3, r8
 800da60:	46a0      	movge	r8, r4
 800da62:	4630      	mov	r0, r6
 800da64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800da68:	bfa6      	itte	ge
 800da6a:	461c      	movge	r4, r3
 800da6c:	2500      	movge	r5, #0
 800da6e:	2501      	movlt	r5, #1
 800da70:	f7ff fd3a 	bl	800d4e8 <_Balloc>
 800da74:	b920      	cbnz	r0, 800da80 <__mdiff+0x5c>
 800da76:	4b2e      	ldr	r3, [pc, #184]	; (800db30 <__mdiff+0x10c>)
 800da78:	4602      	mov	r2, r0
 800da7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800da7e:	e7e5      	b.n	800da4c <__mdiff+0x28>
 800da80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800da84:	6926      	ldr	r6, [r4, #16]
 800da86:	60c5      	str	r5, [r0, #12]
 800da88:	f104 0914 	add.w	r9, r4, #20
 800da8c:	f108 0514 	add.w	r5, r8, #20
 800da90:	f100 0e14 	add.w	lr, r0, #20
 800da94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800da98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800da9c:	f108 0210 	add.w	r2, r8, #16
 800daa0:	46f2      	mov	sl, lr
 800daa2:	2100      	movs	r1, #0
 800daa4:	f859 3b04 	ldr.w	r3, [r9], #4
 800daa8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800daac:	fa1f f883 	uxth.w	r8, r3
 800dab0:	fa11 f18b 	uxtah	r1, r1, fp
 800dab4:	0c1b      	lsrs	r3, r3, #16
 800dab6:	eba1 0808 	sub.w	r8, r1, r8
 800daba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dabe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dac2:	fa1f f888 	uxth.w	r8, r8
 800dac6:	1419      	asrs	r1, r3, #16
 800dac8:	454e      	cmp	r6, r9
 800daca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dace:	f84a 3b04 	str.w	r3, [sl], #4
 800dad2:	d8e7      	bhi.n	800daa4 <__mdiff+0x80>
 800dad4:	1b33      	subs	r3, r6, r4
 800dad6:	3b15      	subs	r3, #21
 800dad8:	f023 0303 	bic.w	r3, r3, #3
 800dadc:	3304      	adds	r3, #4
 800dade:	3415      	adds	r4, #21
 800dae0:	42a6      	cmp	r6, r4
 800dae2:	bf38      	it	cc
 800dae4:	2304      	movcc	r3, #4
 800dae6:	441d      	add	r5, r3
 800dae8:	4473      	add	r3, lr
 800daea:	469e      	mov	lr, r3
 800daec:	462e      	mov	r6, r5
 800daee:	4566      	cmp	r6, ip
 800daf0:	d30e      	bcc.n	800db10 <__mdiff+0xec>
 800daf2:	f10c 0203 	add.w	r2, ip, #3
 800daf6:	1b52      	subs	r2, r2, r5
 800daf8:	f022 0203 	bic.w	r2, r2, #3
 800dafc:	3d03      	subs	r5, #3
 800dafe:	45ac      	cmp	ip, r5
 800db00:	bf38      	it	cc
 800db02:	2200      	movcc	r2, #0
 800db04:	441a      	add	r2, r3
 800db06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800db0a:	b17b      	cbz	r3, 800db2c <__mdiff+0x108>
 800db0c:	6107      	str	r7, [r0, #16]
 800db0e:	e7a3      	b.n	800da58 <__mdiff+0x34>
 800db10:	f856 8b04 	ldr.w	r8, [r6], #4
 800db14:	fa11 f288 	uxtah	r2, r1, r8
 800db18:	1414      	asrs	r4, r2, #16
 800db1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800db1e:	b292      	uxth	r2, r2
 800db20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800db24:	f84e 2b04 	str.w	r2, [lr], #4
 800db28:	1421      	asrs	r1, r4, #16
 800db2a:	e7e0      	b.n	800daee <__mdiff+0xca>
 800db2c:	3f01      	subs	r7, #1
 800db2e:	e7ea      	b.n	800db06 <__mdiff+0xe2>
 800db30:	08010337 	.word	0x08010337
 800db34:	08010348 	.word	0x08010348

0800db38 <__d2b>:
 800db38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db3c:	4689      	mov	r9, r1
 800db3e:	2101      	movs	r1, #1
 800db40:	ec57 6b10 	vmov	r6, r7, d0
 800db44:	4690      	mov	r8, r2
 800db46:	f7ff fccf 	bl	800d4e8 <_Balloc>
 800db4a:	4604      	mov	r4, r0
 800db4c:	b930      	cbnz	r0, 800db5c <__d2b+0x24>
 800db4e:	4602      	mov	r2, r0
 800db50:	4b25      	ldr	r3, [pc, #148]	; (800dbe8 <__d2b+0xb0>)
 800db52:	4826      	ldr	r0, [pc, #152]	; (800dbec <__d2b+0xb4>)
 800db54:	f240 310a 	movw	r1, #778	; 0x30a
 800db58:	f000 faac 	bl	800e0b4 <__assert_func>
 800db5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800db60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db64:	bb35      	cbnz	r5, 800dbb4 <__d2b+0x7c>
 800db66:	2e00      	cmp	r6, #0
 800db68:	9301      	str	r3, [sp, #4]
 800db6a:	d028      	beq.n	800dbbe <__d2b+0x86>
 800db6c:	4668      	mov	r0, sp
 800db6e:	9600      	str	r6, [sp, #0]
 800db70:	f7ff fd82 	bl	800d678 <__lo0bits>
 800db74:	9900      	ldr	r1, [sp, #0]
 800db76:	b300      	cbz	r0, 800dbba <__d2b+0x82>
 800db78:	9a01      	ldr	r2, [sp, #4]
 800db7a:	f1c0 0320 	rsb	r3, r0, #32
 800db7e:	fa02 f303 	lsl.w	r3, r2, r3
 800db82:	430b      	orrs	r3, r1
 800db84:	40c2      	lsrs	r2, r0
 800db86:	6163      	str	r3, [r4, #20]
 800db88:	9201      	str	r2, [sp, #4]
 800db8a:	9b01      	ldr	r3, [sp, #4]
 800db8c:	61a3      	str	r3, [r4, #24]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	bf14      	ite	ne
 800db92:	2202      	movne	r2, #2
 800db94:	2201      	moveq	r2, #1
 800db96:	6122      	str	r2, [r4, #16]
 800db98:	b1d5      	cbz	r5, 800dbd0 <__d2b+0x98>
 800db9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db9e:	4405      	add	r5, r0
 800dba0:	f8c9 5000 	str.w	r5, [r9]
 800dba4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dba8:	f8c8 0000 	str.w	r0, [r8]
 800dbac:	4620      	mov	r0, r4
 800dbae:	b003      	add	sp, #12
 800dbb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbb8:	e7d5      	b.n	800db66 <__d2b+0x2e>
 800dbba:	6161      	str	r1, [r4, #20]
 800dbbc:	e7e5      	b.n	800db8a <__d2b+0x52>
 800dbbe:	a801      	add	r0, sp, #4
 800dbc0:	f7ff fd5a 	bl	800d678 <__lo0bits>
 800dbc4:	9b01      	ldr	r3, [sp, #4]
 800dbc6:	6163      	str	r3, [r4, #20]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	6122      	str	r2, [r4, #16]
 800dbcc:	3020      	adds	r0, #32
 800dbce:	e7e3      	b.n	800db98 <__d2b+0x60>
 800dbd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dbd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dbd8:	f8c9 0000 	str.w	r0, [r9]
 800dbdc:	6918      	ldr	r0, [r3, #16]
 800dbde:	f7ff fd2b 	bl	800d638 <__hi0bits>
 800dbe2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dbe6:	e7df      	b.n	800dba8 <__d2b+0x70>
 800dbe8:	08010337 	.word	0x08010337
 800dbec:	08010348 	.word	0x08010348

0800dbf0 <_calloc_r>:
 800dbf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbf2:	fba1 2402 	umull	r2, r4, r1, r2
 800dbf6:	b94c      	cbnz	r4, 800dc0c <_calloc_r+0x1c>
 800dbf8:	4611      	mov	r1, r2
 800dbfa:	9201      	str	r2, [sp, #4]
 800dbfc:	f000 f87a 	bl	800dcf4 <_malloc_r>
 800dc00:	9a01      	ldr	r2, [sp, #4]
 800dc02:	4605      	mov	r5, r0
 800dc04:	b930      	cbnz	r0, 800dc14 <_calloc_r+0x24>
 800dc06:	4628      	mov	r0, r5
 800dc08:	b003      	add	sp, #12
 800dc0a:	bd30      	pop	{r4, r5, pc}
 800dc0c:	220c      	movs	r2, #12
 800dc0e:	6002      	str	r2, [r0, #0]
 800dc10:	2500      	movs	r5, #0
 800dc12:	e7f8      	b.n	800dc06 <_calloc_r+0x16>
 800dc14:	4621      	mov	r1, r4
 800dc16:	f7fe f941 	bl	800be9c <memset>
 800dc1a:	e7f4      	b.n	800dc06 <_calloc_r+0x16>

0800dc1c <_free_r>:
 800dc1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc1e:	2900      	cmp	r1, #0
 800dc20:	d044      	beq.n	800dcac <_free_r+0x90>
 800dc22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc26:	9001      	str	r0, [sp, #4]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	f1a1 0404 	sub.w	r4, r1, #4
 800dc2e:	bfb8      	it	lt
 800dc30:	18e4      	addlt	r4, r4, r3
 800dc32:	f000 fa9b 	bl	800e16c <__malloc_lock>
 800dc36:	4a1e      	ldr	r2, [pc, #120]	; (800dcb0 <_free_r+0x94>)
 800dc38:	9801      	ldr	r0, [sp, #4]
 800dc3a:	6813      	ldr	r3, [r2, #0]
 800dc3c:	b933      	cbnz	r3, 800dc4c <_free_r+0x30>
 800dc3e:	6063      	str	r3, [r4, #4]
 800dc40:	6014      	str	r4, [r2, #0]
 800dc42:	b003      	add	sp, #12
 800dc44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc48:	f000 ba96 	b.w	800e178 <__malloc_unlock>
 800dc4c:	42a3      	cmp	r3, r4
 800dc4e:	d908      	bls.n	800dc62 <_free_r+0x46>
 800dc50:	6825      	ldr	r5, [r4, #0]
 800dc52:	1961      	adds	r1, r4, r5
 800dc54:	428b      	cmp	r3, r1
 800dc56:	bf01      	itttt	eq
 800dc58:	6819      	ldreq	r1, [r3, #0]
 800dc5a:	685b      	ldreq	r3, [r3, #4]
 800dc5c:	1949      	addeq	r1, r1, r5
 800dc5e:	6021      	streq	r1, [r4, #0]
 800dc60:	e7ed      	b.n	800dc3e <_free_r+0x22>
 800dc62:	461a      	mov	r2, r3
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	b10b      	cbz	r3, 800dc6c <_free_r+0x50>
 800dc68:	42a3      	cmp	r3, r4
 800dc6a:	d9fa      	bls.n	800dc62 <_free_r+0x46>
 800dc6c:	6811      	ldr	r1, [r2, #0]
 800dc6e:	1855      	adds	r5, r2, r1
 800dc70:	42a5      	cmp	r5, r4
 800dc72:	d10b      	bne.n	800dc8c <_free_r+0x70>
 800dc74:	6824      	ldr	r4, [r4, #0]
 800dc76:	4421      	add	r1, r4
 800dc78:	1854      	adds	r4, r2, r1
 800dc7a:	42a3      	cmp	r3, r4
 800dc7c:	6011      	str	r1, [r2, #0]
 800dc7e:	d1e0      	bne.n	800dc42 <_free_r+0x26>
 800dc80:	681c      	ldr	r4, [r3, #0]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	6053      	str	r3, [r2, #4]
 800dc86:	4421      	add	r1, r4
 800dc88:	6011      	str	r1, [r2, #0]
 800dc8a:	e7da      	b.n	800dc42 <_free_r+0x26>
 800dc8c:	d902      	bls.n	800dc94 <_free_r+0x78>
 800dc8e:	230c      	movs	r3, #12
 800dc90:	6003      	str	r3, [r0, #0]
 800dc92:	e7d6      	b.n	800dc42 <_free_r+0x26>
 800dc94:	6825      	ldr	r5, [r4, #0]
 800dc96:	1961      	adds	r1, r4, r5
 800dc98:	428b      	cmp	r3, r1
 800dc9a:	bf04      	itt	eq
 800dc9c:	6819      	ldreq	r1, [r3, #0]
 800dc9e:	685b      	ldreq	r3, [r3, #4]
 800dca0:	6063      	str	r3, [r4, #4]
 800dca2:	bf04      	itt	eq
 800dca4:	1949      	addeq	r1, r1, r5
 800dca6:	6021      	streq	r1, [r4, #0]
 800dca8:	6054      	str	r4, [r2, #4]
 800dcaa:	e7ca      	b.n	800dc42 <_free_r+0x26>
 800dcac:	b003      	add	sp, #12
 800dcae:	bd30      	pop	{r4, r5, pc}
 800dcb0:	20000b24 	.word	0x20000b24

0800dcb4 <sbrk_aligned>:
 800dcb4:	b570      	push	{r4, r5, r6, lr}
 800dcb6:	4e0e      	ldr	r6, [pc, #56]	; (800dcf0 <sbrk_aligned+0x3c>)
 800dcb8:	460c      	mov	r4, r1
 800dcba:	6831      	ldr	r1, [r6, #0]
 800dcbc:	4605      	mov	r5, r0
 800dcbe:	b911      	cbnz	r1, 800dcc6 <sbrk_aligned+0x12>
 800dcc0:	f000 f9e8 	bl	800e094 <_sbrk_r>
 800dcc4:	6030      	str	r0, [r6, #0]
 800dcc6:	4621      	mov	r1, r4
 800dcc8:	4628      	mov	r0, r5
 800dcca:	f000 f9e3 	bl	800e094 <_sbrk_r>
 800dcce:	1c43      	adds	r3, r0, #1
 800dcd0:	d00a      	beq.n	800dce8 <sbrk_aligned+0x34>
 800dcd2:	1cc4      	adds	r4, r0, #3
 800dcd4:	f024 0403 	bic.w	r4, r4, #3
 800dcd8:	42a0      	cmp	r0, r4
 800dcda:	d007      	beq.n	800dcec <sbrk_aligned+0x38>
 800dcdc:	1a21      	subs	r1, r4, r0
 800dcde:	4628      	mov	r0, r5
 800dce0:	f000 f9d8 	bl	800e094 <_sbrk_r>
 800dce4:	3001      	adds	r0, #1
 800dce6:	d101      	bne.n	800dcec <sbrk_aligned+0x38>
 800dce8:	f04f 34ff 	mov.w	r4, #4294967295
 800dcec:	4620      	mov	r0, r4
 800dcee:	bd70      	pop	{r4, r5, r6, pc}
 800dcf0:	20000b28 	.word	0x20000b28

0800dcf4 <_malloc_r>:
 800dcf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcf8:	1ccd      	adds	r5, r1, #3
 800dcfa:	f025 0503 	bic.w	r5, r5, #3
 800dcfe:	3508      	adds	r5, #8
 800dd00:	2d0c      	cmp	r5, #12
 800dd02:	bf38      	it	cc
 800dd04:	250c      	movcc	r5, #12
 800dd06:	2d00      	cmp	r5, #0
 800dd08:	4607      	mov	r7, r0
 800dd0a:	db01      	blt.n	800dd10 <_malloc_r+0x1c>
 800dd0c:	42a9      	cmp	r1, r5
 800dd0e:	d905      	bls.n	800dd1c <_malloc_r+0x28>
 800dd10:	230c      	movs	r3, #12
 800dd12:	603b      	str	r3, [r7, #0]
 800dd14:	2600      	movs	r6, #0
 800dd16:	4630      	mov	r0, r6
 800dd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd1c:	4e2e      	ldr	r6, [pc, #184]	; (800ddd8 <_malloc_r+0xe4>)
 800dd1e:	f000 fa25 	bl	800e16c <__malloc_lock>
 800dd22:	6833      	ldr	r3, [r6, #0]
 800dd24:	461c      	mov	r4, r3
 800dd26:	bb34      	cbnz	r4, 800dd76 <_malloc_r+0x82>
 800dd28:	4629      	mov	r1, r5
 800dd2a:	4638      	mov	r0, r7
 800dd2c:	f7ff ffc2 	bl	800dcb4 <sbrk_aligned>
 800dd30:	1c43      	adds	r3, r0, #1
 800dd32:	4604      	mov	r4, r0
 800dd34:	d14d      	bne.n	800ddd2 <_malloc_r+0xde>
 800dd36:	6834      	ldr	r4, [r6, #0]
 800dd38:	4626      	mov	r6, r4
 800dd3a:	2e00      	cmp	r6, #0
 800dd3c:	d140      	bne.n	800ddc0 <_malloc_r+0xcc>
 800dd3e:	6823      	ldr	r3, [r4, #0]
 800dd40:	4631      	mov	r1, r6
 800dd42:	4638      	mov	r0, r7
 800dd44:	eb04 0803 	add.w	r8, r4, r3
 800dd48:	f000 f9a4 	bl	800e094 <_sbrk_r>
 800dd4c:	4580      	cmp	r8, r0
 800dd4e:	d13a      	bne.n	800ddc6 <_malloc_r+0xd2>
 800dd50:	6821      	ldr	r1, [r4, #0]
 800dd52:	3503      	adds	r5, #3
 800dd54:	1a6d      	subs	r5, r5, r1
 800dd56:	f025 0503 	bic.w	r5, r5, #3
 800dd5a:	3508      	adds	r5, #8
 800dd5c:	2d0c      	cmp	r5, #12
 800dd5e:	bf38      	it	cc
 800dd60:	250c      	movcc	r5, #12
 800dd62:	4629      	mov	r1, r5
 800dd64:	4638      	mov	r0, r7
 800dd66:	f7ff ffa5 	bl	800dcb4 <sbrk_aligned>
 800dd6a:	3001      	adds	r0, #1
 800dd6c:	d02b      	beq.n	800ddc6 <_malloc_r+0xd2>
 800dd6e:	6823      	ldr	r3, [r4, #0]
 800dd70:	442b      	add	r3, r5
 800dd72:	6023      	str	r3, [r4, #0]
 800dd74:	e00e      	b.n	800dd94 <_malloc_r+0xa0>
 800dd76:	6822      	ldr	r2, [r4, #0]
 800dd78:	1b52      	subs	r2, r2, r5
 800dd7a:	d41e      	bmi.n	800ddba <_malloc_r+0xc6>
 800dd7c:	2a0b      	cmp	r2, #11
 800dd7e:	d916      	bls.n	800ddae <_malloc_r+0xba>
 800dd80:	1961      	adds	r1, r4, r5
 800dd82:	42a3      	cmp	r3, r4
 800dd84:	6025      	str	r5, [r4, #0]
 800dd86:	bf18      	it	ne
 800dd88:	6059      	strne	r1, [r3, #4]
 800dd8a:	6863      	ldr	r3, [r4, #4]
 800dd8c:	bf08      	it	eq
 800dd8e:	6031      	streq	r1, [r6, #0]
 800dd90:	5162      	str	r2, [r4, r5]
 800dd92:	604b      	str	r3, [r1, #4]
 800dd94:	4638      	mov	r0, r7
 800dd96:	f104 060b 	add.w	r6, r4, #11
 800dd9a:	f000 f9ed 	bl	800e178 <__malloc_unlock>
 800dd9e:	f026 0607 	bic.w	r6, r6, #7
 800dda2:	1d23      	adds	r3, r4, #4
 800dda4:	1af2      	subs	r2, r6, r3
 800dda6:	d0b6      	beq.n	800dd16 <_malloc_r+0x22>
 800dda8:	1b9b      	subs	r3, r3, r6
 800ddaa:	50a3      	str	r3, [r4, r2]
 800ddac:	e7b3      	b.n	800dd16 <_malloc_r+0x22>
 800ddae:	6862      	ldr	r2, [r4, #4]
 800ddb0:	42a3      	cmp	r3, r4
 800ddb2:	bf0c      	ite	eq
 800ddb4:	6032      	streq	r2, [r6, #0]
 800ddb6:	605a      	strne	r2, [r3, #4]
 800ddb8:	e7ec      	b.n	800dd94 <_malloc_r+0xa0>
 800ddba:	4623      	mov	r3, r4
 800ddbc:	6864      	ldr	r4, [r4, #4]
 800ddbe:	e7b2      	b.n	800dd26 <_malloc_r+0x32>
 800ddc0:	4634      	mov	r4, r6
 800ddc2:	6876      	ldr	r6, [r6, #4]
 800ddc4:	e7b9      	b.n	800dd3a <_malloc_r+0x46>
 800ddc6:	230c      	movs	r3, #12
 800ddc8:	603b      	str	r3, [r7, #0]
 800ddca:	4638      	mov	r0, r7
 800ddcc:	f000 f9d4 	bl	800e178 <__malloc_unlock>
 800ddd0:	e7a1      	b.n	800dd16 <_malloc_r+0x22>
 800ddd2:	6025      	str	r5, [r4, #0]
 800ddd4:	e7de      	b.n	800dd94 <_malloc_r+0xa0>
 800ddd6:	bf00      	nop
 800ddd8:	20000b24 	.word	0x20000b24

0800dddc <__ssputs_r>:
 800dddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dde0:	688e      	ldr	r6, [r1, #8]
 800dde2:	429e      	cmp	r6, r3
 800dde4:	4682      	mov	sl, r0
 800dde6:	460c      	mov	r4, r1
 800dde8:	4690      	mov	r8, r2
 800ddea:	461f      	mov	r7, r3
 800ddec:	d838      	bhi.n	800de60 <__ssputs_r+0x84>
 800ddee:	898a      	ldrh	r2, [r1, #12]
 800ddf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ddf4:	d032      	beq.n	800de5c <__ssputs_r+0x80>
 800ddf6:	6825      	ldr	r5, [r4, #0]
 800ddf8:	6909      	ldr	r1, [r1, #16]
 800ddfa:	eba5 0901 	sub.w	r9, r5, r1
 800ddfe:	6965      	ldr	r5, [r4, #20]
 800de00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de08:	3301      	adds	r3, #1
 800de0a:	444b      	add	r3, r9
 800de0c:	106d      	asrs	r5, r5, #1
 800de0e:	429d      	cmp	r5, r3
 800de10:	bf38      	it	cc
 800de12:	461d      	movcc	r5, r3
 800de14:	0553      	lsls	r3, r2, #21
 800de16:	d531      	bpl.n	800de7c <__ssputs_r+0xa0>
 800de18:	4629      	mov	r1, r5
 800de1a:	f7ff ff6b 	bl	800dcf4 <_malloc_r>
 800de1e:	4606      	mov	r6, r0
 800de20:	b950      	cbnz	r0, 800de38 <__ssputs_r+0x5c>
 800de22:	230c      	movs	r3, #12
 800de24:	f8ca 3000 	str.w	r3, [sl]
 800de28:	89a3      	ldrh	r3, [r4, #12]
 800de2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de2e:	81a3      	strh	r3, [r4, #12]
 800de30:	f04f 30ff 	mov.w	r0, #4294967295
 800de34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de38:	6921      	ldr	r1, [r4, #16]
 800de3a:	464a      	mov	r2, r9
 800de3c:	f7ff fb46 	bl	800d4cc <memcpy>
 800de40:	89a3      	ldrh	r3, [r4, #12]
 800de42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800de46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de4a:	81a3      	strh	r3, [r4, #12]
 800de4c:	6126      	str	r6, [r4, #16]
 800de4e:	6165      	str	r5, [r4, #20]
 800de50:	444e      	add	r6, r9
 800de52:	eba5 0509 	sub.w	r5, r5, r9
 800de56:	6026      	str	r6, [r4, #0]
 800de58:	60a5      	str	r5, [r4, #8]
 800de5a:	463e      	mov	r6, r7
 800de5c:	42be      	cmp	r6, r7
 800de5e:	d900      	bls.n	800de62 <__ssputs_r+0x86>
 800de60:	463e      	mov	r6, r7
 800de62:	6820      	ldr	r0, [r4, #0]
 800de64:	4632      	mov	r2, r6
 800de66:	4641      	mov	r1, r8
 800de68:	f000 f966 	bl	800e138 <memmove>
 800de6c:	68a3      	ldr	r3, [r4, #8]
 800de6e:	1b9b      	subs	r3, r3, r6
 800de70:	60a3      	str	r3, [r4, #8]
 800de72:	6823      	ldr	r3, [r4, #0]
 800de74:	4433      	add	r3, r6
 800de76:	6023      	str	r3, [r4, #0]
 800de78:	2000      	movs	r0, #0
 800de7a:	e7db      	b.n	800de34 <__ssputs_r+0x58>
 800de7c:	462a      	mov	r2, r5
 800de7e:	f000 f981 	bl	800e184 <_realloc_r>
 800de82:	4606      	mov	r6, r0
 800de84:	2800      	cmp	r0, #0
 800de86:	d1e1      	bne.n	800de4c <__ssputs_r+0x70>
 800de88:	6921      	ldr	r1, [r4, #16]
 800de8a:	4650      	mov	r0, sl
 800de8c:	f7ff fec6 	bl	800dc1c <_free_r>
 800de90:	e7c7      	b.n	800de22 <__ssputs_r+0x46>
	...

0800de94 <_svfiprintf_r>:
 800de94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de98:	4698      	mov	r8, r3
 800de9a:	898b      	ldrh	r3, [r1, #12]
 800de9c:	061b      	lsls	r3, r3, #24
 800de9e:	b09d      	sub	sp, #116	; 0x74
 800dea0:	4607      	mov	r7, r0
 800dea2:	460d      	mov	r5, r1
 800dea4:	4614      	mov	r4, r2
 800dea6:	d50e      	bpl.n	800dec6 <_svfiprintf_r+0x32>
 800dea8:	690b      	ldr	r3, [r1, #16]
 800deaa:	b963      	cbnz	r3, 800dec6 <_svfiprintf_r+0x32>
 800deac:	2140      	movs	r1, #64	; 0x40
 800deae:	f7ff ff21 	bl	800dcf4 <_malloc_r>
 800deb2:	6028      	str	r0, [r5, #0]
 800deb4:	6128      	str	r0, [r5, #16]
 800deb6:	b920      	cbnz	r0, 800dec2 <_svfiprintf_r+0x2e>
 800deb8:	230c      	movs	r3, #12
 800deba:	603b      	str	r3, [r7, #0]
 800debc:	f04f 30ff 	mov.w	r0, #4294967295
 800dec0:	e0d1      	b.n	800e066 <_svfiprintf_r+0x1d2>
 800dec2:	2340      	movs	r3, #64	; 0x40
 800dec4:	616b      	str	r3, [r5, #20]
 800dec6:	2300      	movs	r3, #0
 800dec8:	9309      	str	r3, [sp, #36]	; 0x24
 800deca:	2320      	movs	r3, #32
 800decc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ded0:	f8cd 800c 	str.w	r8, [sp, #12]
 800ded4:	2330      	movs	r3, #48	; 0x30
 800ded6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e080 <_svfiprintf_r+0x1ec>
 800deda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dede:	f04f 0901 	mov.w	r9, #1
 800dee2:	4623      	mov	r3, r4
 800dee4:	469a      	mov	sl, r3
 800dee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800deea:	b10a      	cbz	r2, 800def0 <_svfiprintf_r+0x5c>
 800deec:	2a25      	cmp	r2, #37	; 0x25
 800deee:	d1f9      	bne.n	800dee4 <_svfiprintf_r+0x50>
 800def0:	ebba 0b04 	subs.w	fp, sl, r4
 800def4:	d00b      	beq.n	800df0e <_svfiprintf_r+0x7a>
 800def6:	465b      	mov	r3, fp
 800def8:	4622      	mov	r2, r4
 800defa:	4629      	mov	r1, r5
 800defc:	4638      	mov	r0, r7
 800defe:	f7ff ff6d 	bl	800dddc <__ssputs_r>
 800df02:	3001      	adds	r0, #1
 800df04:	f000 80aa 	beq.w	800e05c <_svfiprintf_r+0x1c8>
 800df08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df0a:	445a      	add	r2, fp
 800df0c:	9209      	str	r2, [sp, #36]	; 0x24
 800df0e:	f89a 3000 	ldrb.w	r3, [sl]
 800df12:	2b00      	cmp	r3, #0
 800df14:	f000 80a2 	beq.w	800e05c <_svfiprintf_r+0x1c8>
 800df18:	2300      	movs	r3, #0
 800df1a:	f04f 32ff 	mov.w	r2, #4294967295
 800df1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df22:	f10a 0a01 	add.w	sl, sl, #1
 800df26:	9304      	str	r3, [sp, #16]
 800df28:	9307      	str	r3, [sp, #28]
 800df2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df2e:	931a      	str	r3, [sp, #104]	; 0x68
 800df30:	4654      	mov	r4, sl
 800df32:	2205      	movs	r2, #5
 800df34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df38:	4851      	ldr	r0, [pc, #324]	; (800e080 <_svfiprintf_r+0x1ec>)
 800df3a:	f7f2 f971 	bl	8000220 <memchr>
 800df3e:	9a04      	ldr	r2, [sp, #16]
 800df40:	b9d8      	cbnz	r0, 800df7a <_svfiprintf_r+0xe6>
 800df42:	06d0      	lsls	r0, r2, #27
 800df44:	bf44      	itt	mi
 800df46:	2320      	movmi	r3, #32
 800df48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df4c:	0711      	lsls	r1, r2, #28
 800df4e:	bf44      	itt	mi
 800df50:	232b      	movmi	r3, #43	; 0x2b
 800df52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df56:	f89a 3000 	ldrb.w	r3, [sl]
 800df5a:	2b2a      	cmp	r3, #42	; 0x2a
 800df5c:	d015      	beq.n	800df8a <_svfiprintf_r+0xf6>
 800df5e:	9a07      	ldr	r2, [sp, #28]
 800df60:	4654      	mov	r4, sl
 800df62:	2000      	movs	r0, #0
 800df64:	f04f 0c0a 	mov.w	ip, #10
 800df68:	4621      	mov	r1, r4
 800df6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df6e:	3b30      	subs	r3, #48	; 0x30
 800df70:	2b09      	cmp	r3, #9
 800df72:	d94e      	bls.n	800e012 <_svfiprintf_r+0x17e>
 800df74:	b1b0      	cbz	r0, 800dfa4 <_svfiprintf_r+0x110>
 800df76:	9207      	str	r2, [sp, #28]
 800df78:	e014      	b.n	800dfa4 <_svfiprintf_r+0x110>
 800df7a:	eba0 0308 	sub.w	r3, r0, r8
 800df7e:	fa09 f303 	lsl.w	r3, r9, r3
 800df82:	4313      	orrs	r3, r2
 800df84:	9304      	str	r3, [sp, #16]
 800df86:	46a2      	mov	sl, r4
 800df88:	e7d2      	b.n	800df30 <_svfiprintf_r+0x9c>
 800df8a:	9b03      	ldr	r3, [sp, #12]
 800df8c:	1d19      	adds	r1, r3, #4
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	9103      	str	r1, [sp, #12]
 800df92:	2b00      	cmp	r3, #0
 800df94:	bfbb      	ittet	lt
 800df96:	425b      	neglt	r3, r3
 800df98:	f042 0202 	orrlt.w	r2, r2, #2
 800df9c:	9307      	strge	r3, [sp, #28]
 800df9e:	9307      	strlt	r3, [sp, #28]
 800dfa0:	bfb8      	it	lt
 800dfa2:	9204      	strlt	r2, [sp, #16]
 800dfa4:	7823      	ldrb	r3, [r4, #0]
 800dfa6:	2b2e      	cmp	r3, #46	; 0x2e
 800dfa8:	d10c      	bne.n	800dfc4 <_svfiprintf_r+0x130>
 800dfaa:	7863      	ldrb	r3, [r4, #1]
 800dfac:	2b2a      	cmp	r3, #42	; 0x2a
 800dfae:	d135      	bne.n	800e01c <_svfiprintf_r+0x188>
 800dfb0:	9b03      	ldr	r3, [sp, #12]
 800dfb2:	1d1a      	adds	r2, r3, #4
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	9203      	str	r2, [sp, #12]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	bfb8      	it	lt
 800dfbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfc0:	3402      	adds	r4, #2
 800dfc2:	9305      	str	r3, [sp, #20]
 800dfc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e090 <_svfiprintf_r+0x1fc>
 800dfc8:	7821      	ldrb	r1, [r4, #0]
 800dfca:	2203      	movs	r2, #3
 800dfcc:	4650      	mov	r0, sl
 800dfce:	f7f2 f927 	bl	8000220 <memchr>
 800dfd2:	b140      	cbz	r0, 800dfe6 <_svfiprintf_r+0x152>
 800dfd4:	2340      	movs	r3, #64	; 0x40
 800dfd6:	eba0 000a 	sub.w	r0, r0, sl
 800dfda:	fa03 f000 	lsl.w	r0, r3, r0
 800dfde:	9b04      	ldr	r3, [sp, #16]
 800dfe0:	4303      	orrs	r3, r0
 800dfe2:	3401      	adds	r4, #1
 800dfe4:	9304      	str	r3, [sp, #16]
 800dfe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfea:	4826      	ldr	r0, [pc, #152]	; (800e084 <_svfiprintf_r+0x1f0>)
 800dfec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dff0:	2206      	movs	r2, #6
 800dff2:	f7f2 f915 	bl	8000220 <memchr>
 800dff6:	2800      	cmp	r0, #0
 800dff8:	d038      	beq.n	800e06c <_svfiprintf_r+0x1d8>
 800dffa:	4b23      	ldr	r3, [pc, #140]	; (800e088 <_svfiprintf_r+0x1f4>)
 800dffc:	bb1b      	cbnz	r3, 800e046 <_svfiprintf_r+0x1b2>
 800dffe:	9b03      	ldr	r3, [sp, #12]
 800e000:	3307      	adds	r3, #7
 800e002:	f023 0307 	bic.w	r3, r3, #7
 800e006:	3308      	adds	r3, #8
 800e008:	9303      	str	r3, [sp, #12]
 800e00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e00c:	4433      	add	r3, r6
 800e00e:	9309      	str	r3, [sp, #36]	; 0x24
 800e010:	e767      	b.n	800dee2 <_svfiprintf_r+0x4e>
 800e012:	fb0c 3202 	mla	r2, ip, r2, r3
 800e016:	460c      	mov	r4, r1
 800e018:	2001      	movs	r0, #1
 800e01a:	e7a5      	b.n	800df68 <_svfiprintf_r+0xd4>
 800e01c:	2300      	movs	r3, #0
 800e01e:	3401      	adds	r4, #1
 800e020:	9305      	str	r3, [sp, #20]
 800e022:	4619      	mov	r1, r3
 800e024:	f04f 0c0a 	mov.w	ip, #10
 800e028:	4620      	mov	r0, r4
 800e02a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e02e:	3a30      	subs	r2, #48	; 0x30
 800e030:	2a09      	cmp	r2, #9
 800e032:	d903      	bls.n	800e03c <_svfiprintf_r+0x1a8>
 800e034:	2b00      	cmp	r3, #0
 800e036:	d0c5      	beq.n	800dfc4 <_svfiprintf_r+0x130>
 800e038:	9105      	str	r1, [sp, #20]
 800e03a:	e7c3      	b.n	800dfc4 <_svfiprintf_r+0x130>
 800e03c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e040:	4604      	mov	r4, r0
 800e042:	2301      	movs	r3, #1
 800e044:	e7f0      	b.n	800e028 <_svfiprintf_r+0x194>
 800e046:	ab03      	add	r3, sp, #12
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	462a      	mov	r2, r5
 800e04c:	4b0f      	ldr	r3, [pc, #60]	; (800e08c <_svfiprintf_r+0x1f8>)
 800e04e:	a904      	add	r1, sp, #16
 800e050:	4638      	mov	r0, r7
 800e052:	f7fd ffcb 	bl	800bfec <_printf_float>
 800e056:	1c42      	adds	r2, r0, #1
 800e058:	4606      	mov	r6, r0
 800e05a:	d1d6      	bne.n	800e00a <_svfiprintf_r+0x176>
 800e05c:	89ab      	ldrh	r3, [r5, #12]
 800e05e:	065b      	lsls	r3, r3, #25
 800e060:	f53f af2c 	bmi.w	800debc <_svfiprintf_r+0x28>
 800e064:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e066:	b01d      	add	sp, #116	; 0x74
 800e068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e06c:	ab03      	add	r3, sp, #12
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	462a      	mov	r2, r5
 800e072:	4b06      	ldr	r3, [pc, #24]	; (800e08c <_svfiprintf_r+0x1f8>)
 800e074:	a904      	add	r1, sp, #16
 800e076:	4638      	mov	r0, r7
 800e078:	f7fe fa5c 	bl	800c534 <_printf_i>
 800e07c:	e7eb      	b.n	800e056 <_svfiprintf_r+0x1c2>
 800e07e:	bf00      	nop
 800e080:	080104a4 	.word	0x080104a4
 800e084:	080104ae 	.word	0x080104ae
 800e088:	0800bfed 	.word	0x0800bfed
 800e08c:	0800dddd 	.word	0x0800dddd
 800e090:	080104aa 	.word	0x080104aa

0800e094 <_sbrk_r>:
 800e094:	b538      	push	{r3, r4, r5, lr}
 800e096:	4d06      	ldr	r5, [pc, #24]	; (800e0b0 <_sbrk_r+0x1c>)
 800e098:	2300      	movs	r3, #0
 800e09a:	4604      	mov	r4, r0
 800e09c:	4608      	mov	r0, r1
 800e09e:	602b      	str	r3, [r5, #0]
 800e0a0:	f7f8 f934 	bl	800630c <_sbrk>
 800e0a4:	1c43      	adds	r3, r0, #1
 800e0a6:	d102      	bne.n	800e0ae <_sbrk_r+0x1a>
 800e0a8:	682b      	ldr	r3, [r5, #0]
 800e0aa:	b103      	cbz	r3, 800e0ae <_sbrk_r+0x1a>
 800e0ac:	6023      	str	r3, [r4, #0]
 800e0ae:	bd38      	pop	{r3, r4, r5, pc}
 800e0b0:	20000b2c 	.word	0x20000b2c

0800e0b4 <__assert_func>:
 800e0b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0b6:	4614      	mov	r4, r2
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	4b09      	ldr	r3, [pc, #36]	; (800e0e0 <__assert_func+0x2c>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4605      	mov	r5, r0
 800e0c0:	68d8      	ldr	r0, [r3, #12]
 800e0c2:	b14c      	cbz	r4, 800e0d8 <__assert_func+0x24>
 800e0c4:	4b07      	ldr	r3, [pc, #28]	; (800e0e4 <__assert_func+0x30>)
 800e0c6:	9100      	str	r1, [sp, #0]
 800e0c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0cc:	4906      	ldr	r1, [pc, #24]	; (800e0e8 <__assert_func+0x34>)
 800e0ce:	462b      	mov	r3, r5
 800e0d0:	f000 f80e 	bl	800e0f0 <fiprintf>
 800e0d4:	f000 faac 	bl	800e630 <abort>
 800e0d8:	4b04      	ldr	r3, [pc, #16]	; (800e0ec <__assert_func+0x38>)
 800e0da:	461c      	mov	r4, r3
 800e0dc:	e7f3      	b.n	800e0c6 <__assert_func+0x12>
 800e0de:	bf00      	nop
 800e0e0:	2000009c 	.word	0x2000009c
 800e0e4:	080104b5 	.word	0x080104b5
 800e0e8:	080104c2 	.word	0x080104c2
 800e0ec:	080104f0 	.word	0x080104f0

0800e0f0 <fiprintf>:
 800e0f0:	b40e      	push	{r1, r2, r3}
 800e0f2:	b503      	push	{r0, r1, lr}
 800e0f4:	4601      	mov	r1, r0
 800e0f6:	ab03      	add	r3, sp, #12
 800e0f8:	4805      	ldr	r0, [pc, #20]	; (800e110 <fiprintf+0x20>)
 800e0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0fe:	6800      	ldr	r0, [r0, #0]
 800e100:	9301      	str	r3, [sp, #4]
 800e102:	f000 f897 	bl	800e234 <_vfiprintf_r>
 800e106:	b002      	add	sp, #8
 800e108:	f85d eb04 	ldr.w	lr, [sp], #4
 800e10c:	b003      	add	sp, #12
 800e10e:	4770      	bx	lr
 800e110:	2000009c 	.word	0x2000009c

0800e114 <__ascii_mbtowc>:
 800e114:	b082      	sub	sp, #8
 800e116:	b901      	cbnz	r1, 800e11a <__ascii_mbtowc+0x6>
 800e118:	a901      	add	r1, sp, #4
 800e11a:	b142      	cbz	r2, 800e12e <__ascii_mbtowc+0x1a>
 800e11c:	b14b      	cbz	r3, 800e132 <__ascii_mbtowc+0x1e>
 800e11e:	7813      	ldrb	r3, [r2, #0]
 800e120:	600b      	str	r3, [r1, #0]
 800e122:	7812      	ldrb	r2, [r2, #0]
 800e124:	1e10      	subs	r0, r2, #0
 800e126:	bf18      	it	ne
 800e128:	2001      	movne	r0, #1
 800e12a:	b002      	add	sp, #8
 800e12c:	4770      	bx	lr
 800e12e:	4610      	mov	r0, r2
 800e130:	e7fb      	b.n	800e12a <__ascii_mbtowc+0x16>
 800e132:	f06f 0001 	mvn.w	r0, #1
 800e136:	e7f8      	b.n	800e12a <__ascii_mbtowc+0x16>

0800e138 <memmove>:
 800e138:	4288      	cmp	r0, r1
 800e13a:	b510      	push	{r4, lr}
 800e13c:	eb01 0402 	add.w	r4, r1, r2
 800e140:	d902      	bls.n	800e148 <memmove+0x10>
 800e142:	4284      	cmp	r4, r0
 800e144:	4623      	mov	r3, r4
 800e146:	d807      	bhi.n	800e158 <memmove+0x20>
 800e148:	1e43      	subs	r3, r0, #1
 800e14a:	42a1      	cmp	r1, r4
 800e14c:	d008      	beq.n	800e160 <memmove+0x28>
 800e14e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e152:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e156:	e7f8      	b.n	800e14a <memmove+0x12>
 800e158:	4402      	add	r2, r0
 800e15a:	4601      	mov	r1, r0
 800e15c:	428a      	cmp	r2, r1
 800e15e:	d100      	bne.n	800e162 <memmove+0x2a>
 800e160:	bd10      	pop	{r4, pc}
 800e162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e16a:	e7f7      	b.n	800e15c <memmove+0x24>

0800e16c <__malloc_lock>:
 800e16c:	4801      	ldr	r0, [pc, #4]	; (800e174 <__malloc_lock+0x8>)
 800e16e:	f000 bc1f 	b.w	800e9b0 <__retarget_lock_acquire_recursive>
 800e172:	bf00      	nop
 800e174:	20000b30 	.word	0x20000b30

0800e178 <__malloc_unlock>:
 800e178:	4801      	ldr	r0, [pc, #4]	; (800e180 <__malloc_unlock+0x8>)
 800e17a:	f000 bc1a 	b.w	800e9b2 <__retarget_lock_release_recursive>
 800e17e:	bf00      	nop
 800e180:	20000b30 	.word	0x20000b30

0800e184 <_realloc_r>:
 800e184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e188:	4680      	mov	r8, r0
 800e18a:	4614      	mov	r4, r2
 800e18c:	460e      	mov	r6, r1
 800e18e:	b921      	cbnz	r1, 800e19a <_realloc_r+0x16>
 800e190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e194:	4611      	mov	r1, r2
 800e196:	f7ff bdad 	b.w	800dcf4 <_malloc_r>
 800e19a:	b92a      	cbnz	r2, 800e1a8 <_realloc_r+0x24>
 800e19c:	f7ff fd3e 	bl	800dc1c <_free_r>
 800e1a0:	4625      	mov	r5, r4
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1a8:	f000 fc6a 	bl	800ea80 <_malloc_usable_size_r>
 800e1ac:	4284      	cmp	r4, r0
 800e1ae:	4607      	mov	r7, r0
 800e1b0:	d802      	bhi.n	800e1b8 <_realloc_r+0x34>
 800e1b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e1b6:	d812      	bhi.n	800e1de <_realloc_r+0x5a>
 800e1b8:	4621      	mov	r1, r4
 800e1ba:	4640      	mov	r0, r8
 800e1bc:	f7ff fd9a 	bl	800dcf4 <_malloc_r>
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	d0ed      	beq.n	800e1a2 <_realloc_r+0x1e>
 800e1c6:	42bc      	cmp	r4, r7
 800e1c8:	4622      	mov	r2, r4
 800e1ca:	4631      	mov	r1, r6
 800e1cc:	bf28      	it	cs
 800e1ce:	463a      	movcs	r2, r7
 800e1d0:	f7ff f97c 	bl	800d4cc <memcpy>
 800e1d4:	4631      	mov	r1, r6
 800e1d6:	4640      	mov	r0, r8
 800e1d8:	f7ff fd20 	bl	800dc1c <_free_r>
 800e1dc:	e7e1      	b.n	800e1a2 <_realloc_r+0x1e>
 800e1de:	4635      	mov	r5, r6
 800e1e0:	e7df      	b.n	800e1a2 <_realloc_r+0x1e>

0800e1e2 <__sfputc_r>:
 800e1e2:	6893      	ldr	r3, [r2, #8]
 800e1e4:	3b01      	subs	r3, #1
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	b410      	push	{r4}
 800e1ea:	6093      	str	r3, [r2, #8]
 800e1ec:	da08      	bge.n	800e200 <__sfputc_r+0x1e>
 800e1ee:	6994      	ldr	r4, [r2, #24]
 800e1f0:	42a3      	cmp	r3, r4
 800e1f2:	db01      	blt.n	800e1f8 <__sfputc_r+0x16>
 800e1f4:	290a      	cmp	r1, #10
 800e1f6:	d103      	bne.n	800e200 <__sfputc_r+0x1e>
 800e1f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1fc:	f000 b94a 	b.w	800e494 <__swbuf_r>
 800e200:	6813      	ldr	r3, [r2, #0]
 800e202:	1c58      	adds	r0, r3, #1
 800e204:	6010      	str	r0, [r2, #0]
 800e206:	7019      	strb	r1, [r3, #0]
 800e208:	4608      	mov	r0, r1
 800e20a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e20e:	4770      	bx	lr

0800e210 <__sfputs_r>:
 800e210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e212:	4606      	mov	r6, r0
 800e214:	460f      	mov	r7, r1
 800e216:	4614      	mov	r4, r2
 800e218:	18d5      	adds	r5, r2, r3
 800e21a:	42ac      	cmp	r4, r5
 800e21c:	d101      	bne.n	800e222 <__sfputs_r+0x12>
 800e21e:	2000      	movs	r0, #0
 800e220:	e007      	b.n	800e232 <__sfputs_r+0x22>
 800e222:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e226:	463a      	mov	r2, r7
 800e228:	4630      	mov	r0, r6
 800e22a:	f7ff ffda 	bl	800e1e2 <__sfputc_r>
 800e22e:	1c43      	adds	r3, r0, #1
 800e230:	d1f3      	bne.n	800e21a <__sfputs_r+0xa>
 800e232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e234 <_vfiprintf_r>:
 800e234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e238:	460d      	mov	r5, r1
 800e23a:	b09d      	sub	sp, #116	; 0x74
 800e23c:	4614      	mov	r4, r2
 800e23e:	4698      	mov	r8, r3
 800e240:	4606      	mov	r6, r0
 800e242:	b118      	cbz	r0, 800e24c <_vfiprintf_r+0x18>
 800e244:	6983      	ldr	r3, [r0, #24]
 800e246:	b90b      	cbnz	r3, 800e24c <_vfiprintf_r+0x18>
 800e248:	f000 fb14 	bl	800e874 <__sinit>
 800e24c:	4b89      	ldr	r3, [pc, #548]	; (800e474 <_vfiprintf_r+0x240>)
 800e24e:	429d      	cmp	r5, r3
 800e250:	d11b      	bne.n	800e28a <_vfiprintf_r+0x56>
 800e252:	6875      	ldr	r5, [r6, #4]
 800e254:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e256:	07d9      	lsls	r1, r3, #31
 800e258:	d405      	bmi.n	800e266 <_vfiprintf_r+0x32>
 800e25a:	89ab      	ldrh	r3, [r5, #12]
 800e25c:	059a      	lsls	r2, r3, #22
 800e25e:	d402      	bmi.n	800e266 <_vfiprintf_r+0x32>
 800e260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e262:	f000 fba5 	bl	800e9b0 <__retarget_lock_acquire_recursive>
 800e266:	89ab      	ldrh	r3, [r5, #12]
 800e268:	071b      	lsls	r3, r3, #28
 800e26a:	d501      	bpl.n	800e270 <_vfiprintf_r+0x3c>
 800e26c:	692b      	ldr	r3, [r5, #16]
 800e26e:	b9eb      	cbnz	r3, 800e2ac <_vfiprintf_r+0x78>
 800e270:	4629      	mov	r1, r5
 800e272:	4630      	mov	r0, r6
 800e274:	f000 f96e 	bl	800e554 <__swsetup_r>
 800e278:	b1c0      	cbz	r0, 800e2ac <_vfiprintf_r+0x78>
 800e27a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e27c:	07dc      	lsls	r4, r3, #31
 800e27e:	d50e      	bpl.n	800e29e <_vfiprintf_r+0x6a>
 800e280:	f04f 30ff 	mov.w	r0, #4294967295
 800e284:	b01d      	add	sp, #116	; 0x74
 800e286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e28a:	4b7b      	ldr	r3, [pc, #492]	; (800e478 <_vfiprintf_r+0x244>)
 800e28c:	429d      	cmp	r5, r3
 800e28e:	d101      	bne.n	800e294 <_vfiprintf_r+0x60>
 800e290:	68b5      	ldr	r5, [r6, #8]
 800e292:	e7df      	b.n	800e254 <_vfiprintf_r+0x20>
 800e294:	4b79      	ldr	r3, [pc, #484]	; (800e47c <_vfiprintf_r+0x248>)
 800e296:	429d      	cmp	r5, r3
 800e298:	bf08      	it	eq
 800e29a:	68f5      	ldreq	r5, [r6, #12]
 800e29c:	e7da      	b.n	800e254 <_vfiprintf_r+0x20>
 800e29e:	89ab      	ldrh	r3, [r5, #12]
 800e2a0:	0598      	lsls	r0, r3, #22
 800e2a2:	d4ed      	bmi.n	800e280 <_vfiprintf_r+0x4c>
 800e2a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2a6:	f000 fb84 	bl	800e9b2 <__retarget_lock_release_recursive>
 800e2aa:	e7e9      	b.n	800e280 <_vfiprintf_r+0x4c>
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800e2b0:	2320      	movs	r3, #32
 800e2b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2ba:	2330      	movs	r3, #48	; 0x30
 800e2bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e480 <_vfiprintf_r+0x24c>
 800e2c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2c4:	f04f 0901 	mov.w	r9, #1
 800e2c8:	4623      	mov	r3, r4
 800e2ca:	469a      	mov	sl, r3
 800e2cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2d0:	b10a      	cbz	r2, 800e2d6 <_vfiprintf_r+0xa2>
 800e2d2:	2a25      	cmp	r2, #37	; 0x25
 800e2d4:	d1f9      	bne.n	800e2ca <_vfiprintf_r+0x96>
 800e2d6:	ebba 0b04 	subs.w	fp, sl, r4
 800e2da:	d00b      	beq.n	800e2f4 <_vfiprintf_r+0xc0>
 800e2dc:	465b      	mov	r3, fp
 800e2de:	4622      	mov	r2, r4
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	4630      	mov	r0, r6
 800e2e4:	f7ff ff94 	bl	800e210 <__sfputs_r>
 800e2e8:	3001      	adds	r0, #1
 800e2ea:	f000 80aa 	beq.w	800e442 <_vfiprintf_r+0x20e>
 800e2ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2f0:	445a      	add	r2, fp
 800e2f2:	9209      	str	r2, [sp, #36]	; 0x24
 800e2f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	f000 80a2 	beq.w	800e442 <_vfiprintf_r+0x20e>
 800e2fe:	2300      	movs	r3, #0
 800e300:	f04f 32ff 	mov.w	r2, #4294967295
 800e304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e308:	f10a 0a01 	add.w	sl, sl, #1
 800e30c:	9304      	str	r3, [sp, #16]
 800e30e:	9307      	str	r3, [sp, #28]
 800e310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e314:	931a      	str	r3, [sp, #104]	; 0x68
 800e316:	4654      	mov	r4, sl
 800e318:	2205      	movs	r2, #5
 800e31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e31e:	4858      	ldr	r0, [pc, #352]	; (800e480 <_vfiprintf_r+0x24c>)
 800e320:	f7f1 ff7e 	bl	8000220 <memchr>
 800e324:	9a04      	ldr	r2, [sp, #16]
 800e326:	b9d8      	cbnz	r0, 800e360 <_vfiprintf_r+0x12c>
 800e328:	06d1      	lsls	r1, r2, #27
 800e32a:	bf44      	itt	mi
 800e32c:	2320      	movmi	r3, #32
 800e32e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e332:	0713      	lsls	r3, r2, #28
 800e334:	bf44      	itt	mi
 800e336:	232b      	movmi	r3, #43	; 0x2b
 800e338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e33c:	f89a 3000 	ldrb.w	r3, [sl]
 800e340:	2b2a      	cmp	r3, #42	; 0x2a
 800e342:	d015      	beq.n	800e370 <_vfiprintf_r+0x13c>
 800e344:	9a07      	ldr	r2, [sp, #28]
 800e346:	4654      	mov	r4, sl
 800e348:	2000      	movs	r0, #0
 800e34a:	f04f 0c0a 	mov.w	ip, #10
 800e34e:	4621      	mov	r1, r4
 800e350:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e354:	3b30      	subs	r3, #48	; 0x30
 800e356:	2b09      	cmp	r3, #9
 800e358:	d94e      	bls.n	800e3f8 <_vfiprintf_r+0x1c4>
 800e35a:	b1b0      	cbz	r0, 800e38a <_vfiprintf_r+0x156>
 800e35c:	9207      	str	r2, [sp, #28]
 800e35e:	e014      	b.n	800e38a <_vfiprintf_r+0x156>
 800e360:	eba0 0308 	sub.w	r3, r0, r8
 800e364:	fa09 f303 	lsl.w	r3, r9, r3
 800e368:	4313      	orrs	r3, r2
 800e36a:	9304      	str	r3, [sp, #16]
 800e36c:	46a2      	mov	sl, r4
 800e36e:	e7d2      	b.n	800e316 <_vfiprintf_r+0xe2>
 800e370:	9b03      	ldr	r3, [sp, #12]
 800e372:	1d19      	adds	r1, r3, #4
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	9103      	str	r1, [sp, #12]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	bfbb      	ittet	lt
 800e37c:	425b      	neglt	r3, r3
 800e37e:	f042 0202 	orrlt.w	r2, r2, #2
 800e382:	9307      	strge	r3, [sp, #28]
 800e384:	9307      	strlt	r3, [sp, #28]
 800e386:	bfb8      	it	lt
 800e388:	9204      	strlt	r2, [sp, #16]
 800e38a:	7823      	ldrb	r3, [r4, #0]
 800e38c:	2b2e      	cmp	r3, #46	; 0x2e
 800e38e:	d10c      	bne.n	800e3aa <_vfiprintf_r+0x176>
 800e390:	7863      	ldrb	r3, [r4, #1]
 800e392:	2b2a      	cmp	r3, #42	; 0x2a
 800e394:	d135      	bne.n	800e402 <_vfiprintf_r+0x1ce>
 800e396:	9b03      	ldr	r3, [sp, #12]
 800e398:	1d1a      	adds	r2, r3, #4
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	9203      	str	r2, [sp, #12]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	bfb8      	it	lt
 800e3a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3a6:	3402      	adds	r4, #2
 800e3a8:	9305      	str	r3, [sp, #20]
 800e3aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e490 <_vfiprintf_r+0x25c>
 800e3ae:	7821      	ldrb	r1, [r4, #0]
 800e3b0:	2203      	movs	r2, #3
 800e3b2:	4650      	mov	r0, sl
 800e3b4:	f7f1 ff34 	bl	8000220 <memchr>
 800e3b8:	b140      	cbz	r0, 800e3cc <_vfiprintf_r+0x198>
 800e3ba:	2340      	movs	r3, #64	; 0x40
 800e3bc:	eba0 000a 	sub.w	r0, r0, sl
 800e3c0:	fa03 f000 	lsl.w	r0, r3, r0
 800e3c4:	9b04      	ldr	r3, [sp, #16]
 800e3c6:	4303      	orrs	r3, r0
 800e3c8:	3401      	adds	r4, #1
 800e3ca:	9304      	str	r3, [sp, #16]
 800e3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3d0:	482c      	ldr	r0, [pc, #176]	; (800e484 <_vfiprintf_r+0x250>)
 800e3d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3d6:	2206      	movs	r2, #6
 800e3d8:	f7f1 ff22 	bl	8000220 <memchr>
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	d03f      	beq.n	800e460 <_vfiprintf_r+0x22c>
 800e3e0:	4b29      	ldr	r3, [pc, #164]	; (800e488 <_vfiprintf_r+0x254>)
 800e3e2:	bb1b      	cbnz	r3, 800e42c <_vfiprintf_r+0x1f8>
 800e3e4:	9b03      	ldr	r3, [sp, #12]
 800e3e6:	3307      	adds	r3, #7
 800e3e8:	f023 0307 	bic.w	r3, r3, #7
 800e3ec:	3308      	adds	r3, #8
 800e3ee:	9303      	str	r3, [sp, #12]
 800e3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f2:	443b      	add	r3, r7
 800e3f4:	9309      	str	r3, [sp, #36]	; 0x24
 800e3f6:	e767      	b.n	800e2c8 <_vfiprintf_r+0x94>
 800e3f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3fc:	460c      	mov	r4, r1
 800e3fe:	2001      	movs	r0, #1
 800e400:	e7a5      	b.n	800e34e <_vfiprintf_r+0x11a>
 800e402:	2300      	movs	r3, #0
 800e404:	3401      	adds	r4, #1
 800e406:	9305      	str	r3, [sp, #20]
 800e408:	4619      	mov	r1, r3
 800e40a:	f04f 0c0a 	mov.w	ip, #10
 800e40e:	4620      	mov	r0, r4
 800e410:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e414:	3a30      	subs	r2, #48	; 0x30
 800e416:	2a09      	cmp	r2, #9
 800e418:	d903      	bls.n	800e422 <_vfiprintf_r+0x1ee>
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d0c5      	beq.n	800e3aa <_vfiprintf_r+0x176>
 800e41e:	9105      	str	r1, [sp, #20]
 800e420:	e7c3      	b.n	800e3aa <_vfiprintf_r+0x176>
 800e422:	fb0c 2101 	mla	r1, ip, r1, r2
 800e426:	4604      	mov	r4, r0
 800e428:	2301      	movs	r3, #1
 800e42a:	e7f0      	b.n	800e40e <_vfiprintf_r+0x1da>
 800e42c:	ab03      	add	r3, sp, #12
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	462a      	mov	r2, r5
 800e432:	4b16      	ldr	r3, [pc, #88]	; (800e48c <_vfiprintf_r+0x258>)
 800e434:	a904      	add	r1, sp, #16
 800e436:	4630      	mov	r0, r6
 800e438:	f7fd fdd8 	bl	800bfec <_printf_float>
 800e43c:	4607      	mov	r7, r0
 800e43e:	1c78      	adds	r0, r7, #1
 800e440:	d1d6      	bne.n	800e3f0 <_vfiprintf_r+0x1bc>
 800e442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e444:	07d9      	lsls	r1, r3, #31
 800e446:	d405      	bmi.n	800e454 <_vfiprintf_r+0x220>
 800e448:	89ab      	ldrh	r3, [r5, #12]
 800e44a:	059a      	lsls	r2, r3, #22
 800e44c:	d402      	bmi.n	800e454 <_vfiprintf_r+0x220>
 800e44e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e450:	f000 faaf 	bl	800e9b2 <__retarget_lock_release_recursive>
 800e454:	89ab      	ldrh	r3, [r5, #12]
 800e456:	065b      	lsls	r3, r3, #25
 800e458:	f53f af12 	bmi.w	800e280 <_vfiprintf_r+0x4c>
 800e45c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e45e:	e711      	b.n	800e284 <_vfiprintf_r+0x50>
 800e460:	ab03      	add	r3, sp, #12
 800e462:	9300      	str	r3, [sp, #0]
 800e464:	462a      	mov	r2, r5
 800e466:	4b09      	ldr	r3, [pc, #36]	; (800e48c <_vfiprintf_r+0x258>)
 800e468:	a904      	add	r1, sp, #16
 800e46a:	4630      	mov	r0, r6
 800e46c:	f7fe f862 	bl	800c534 <_printf_i>
 800e470:	e7e4      	b.n	800e43c <_vfiprintf_r+0x208>
 800e472:	bf00      	nop
 800e474:	0801061c 	.word	0x0801061c
 800e478:	0801063c 	.word	0x0801063c
 800e47c:	080105fc 	.word	0x080105fc
 800e480:	080104a4 	.word	0x080104a4
 800e484:	080104ae 	.word	0x080104ae
 800e488:	0800bfed 	.word	0x0800bfed
 800e48c:	0800e211 	.word	0x0800e211
 800e490:	080104aa 	.word	0x080104aa

0800e494 <__swbuf_r>:
 800e494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e496:	460e      	mov	r6, r1
 800e498:	4614      	mov	r4, r2
 800e49a:	4605      	mov	r5, r0
 800e49c:	b118      	cbz	r0, 800e4a6 <__swbuf_r+0x12>
 800e49e:	6983      	ldr	r3, [r0, #24]
 800e4a0:	b90b      	cbnz	r3, 800e4a6 <__swbuf_r+0x12>
 800e4a2:	f000 f9e7 	bl	800e874 <__sinit>
 800e4a6:	4b21      	ldr	r3, [pc, #132]	; (800e52c <__swbuf_r+0x98>)
 800e4a8:	429c      	cmp	r4, r3
 800e4aa:	d12b      	bne.n	800e504 <__swbuf_r+0x70>
 800e4ac:	686c      	ldr	r4, [r5, #4]
 800e4ae:	69a3      	ldr	r3, [r4, #24]
 800e4b0:	60a3      	str	r3, [r4, #8]
 800e4b2:	89a3      	ldrh	r3, [r4, #12]
 800e4b4:	071a      	lsls	r2, r3, #28
 800e4b6:	d52f      	bpl.n	800e518 <__swbuf_r+0x84>
 800e4b8:	6923      	ldr	r3, [r4, #16]
 800e4ba:	b36b      	cbz	r3, 800e518 <__swbuf_r+0x84>
 800e4bc:	6923      	ldr	r3, [r4, #16]
 800e4be:	6820      	ldr	r0, [r4, #0]
 800e4c0:	1ac0      	subs	r0, r0, r3
 800e4c2:	6963      	ldr	r3, [r4, #20]
 800e4c4:	b2f6      	uxtb	r6, r6
 800e4c6:	4283      	cmp	r3, r0
 800e4c8:	4637      	mov	r7, r6
 800e4ca:	dc04      	bgt.n	800e4d6 <__swbuf_r+0x42>
 800e4cc:	4621      	mov	r1, r4
 800e4ce:	4628      	mov	r0, r5
 800e4d0:	f000 f93c 	bl	800e74c <_fflush_r>
 800e4d4:	bb30      	cbnz	r0, 800e524 <__swbuf_r+0x90>
 800e4d6:	68a3      	ldr	r3, [r4, #8]
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	60a3      	str	r3, [r4, #8]
 800e4dc:	6823      	ldr	r3, [r4, #0]
 800e4de:	1c5a      	adds	r2, r3, #1
 800e4e0:	6022      	str	r2, [r4, #0]
 800e4e2:	701e      	strb	r6, [r3, #0]
 800e4e4:	6963      	ldr	r3, [r4, #20]
 800e4e6:	3001      	adds	r0, #1
 800e4e8:	4283      	cmp	r3, r0
 800e4ea:	d004      	beq.n	800e4f6 <__swbuf_r+0x62>
 800e4ec:	89a3      	ldrh	r3, [r4, #12]
 800e4ee:	07db      	lsls	r3, r3, #31
 800e4f0:	d506      	bpl.n	800e500 <__swbuf_r+0x6c>
 800e4f2:	2e0a      	cmp	r6, #10
 800e4f4:	d104      	bne.n	800e500 <__swbuf_r+0x6c>
 800e4f6:	4621      	mov	r1, r4
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	f000 f927 	bl	800e74c <_fflush_r>
 800e4fe:	b988      	cbnz	r0, 800e524 <__swbuf_r+0x90>
 800e500:	4638      	mov	r0, r7
 800e502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e504:	4b0a      	ldr	r3, [pc, #40]	; (800e530 <__swbuf_r+0x9c>)
 800e506:	429c      	cmp	r4, r3
 800e508:	d101      	bne.n	800e50e <__swbuf_r+0x7a>
 800e50a:	68ac      	ldr	r4, [r5, #8]
 800e50c:	e7cf      	b.n	800e4ae <__swbuf_r+0x1a>
 800e50e:	4b09      	ldr	r3, [pc, #36]	; (800e534 <__swbuf_r+0xa0>)
 800e510:	429c      	cmp	r4, r3
 800e512:	bf08      	it	eq
 800e514:	68ec      	ldreq	r4, [r5, #12]
 800e516:	e7ca      	b.n	800e4ae <__swbuf_r+0x1a>
 800e518:	4621      	mov	r1, r4
 800e51a:	4628      	mov	r0, r5
 800e51c:	f000 f81a 	bl	800e554 <__swsetup_r>
 800e520:	2800      	cmp	r0, #0
 800e522:	d0cb      	beq.n	800e4bc <__swbuf_r+0x28>
 800e524:	f04f 37ff 	mov.w	r7, #4294967295
 800e528:	e7ea      	b.n	800e500 <__swbuf_r+0x6c>
 800e52a:	bf00      	nop
 800e52c:	0801061c 	.word	0x0801061c
 800e530:	0801063c 	.word	0x0801063c
 800e534:	080105fc 	.word	0x080105fc

0800e538 <__ascii_wctomb>:
 800e538:	b149      	cbz	r1, 800e54e <__ascii_wctomb+0x16>
 800e53a:	2aff      	cmp	r2, #255	; 0xff
 800e53c:	bf85      	ittet	hi
 800e53e:	238a      	movhi	r3, #138	; 0x8a
 800e540:	6003      	strhi	r3, [r0, #0]
 800e542:	700a      	strbls	r2, [r1, #0]
 800e544:	f04f 30ff 	movhi.w	r0, #4294967295
 800e548:	bf98      	it	ls
 800e54a:	2001      	movls	r0, #1
 800e54c:	4770      	bx	lr
 800e54e:	4608      	mov	r0, r1
 800e550:	4770      	bx	lr
	...

0800e554 <__swsetup_r>:
 800e554:	4b32      	ldr	r3, [pc, #200]	; (800e620 <__swsetup_r+0xcc>)
 800e556:	b570      	push	{r4, r5, r6, lr}
 800e558:	681d      	ldr	r5, [r3, #0]
 800e55a:	4606      	mov	r6, r0
 800e55c:	460c      	mov	r4, r1
 800e55e:	b125      	cbz	r5, 800e56a <__swsetup_r+0x16>
 800e560:	69ab      	ldr	r3, [r5, #24]
 800e562:	b913      	cbnz	r3, 800e56a <__swsetup_r+0x16>
 800e564:	4628      	mov	r0, r5
 800e566:	f000 f985 	bl	800e874 <__sinit>
 800e56a:	4b2e      	ldr	r3, [pc, #184]	; (800e624 <__swsetup_r+0xd0>)
 800e56c:	429c      	cmp	r4, r3
 800e56e:	d10f      	bne.n	800e590 <__swsetup_r+0x3c>
 800e570:	686c      	ldr	r4, [r5, #4]
 800e572:	89a3      	ldrh	r3, [r4, #12]
 800e574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e578:	0719      	lsls	r1, r3, #28
 800e57a:	d42c      	bmi.n	800e5d6 <__swsetup_r+0x82>
 800e57c:	06dd      	lsls	r5, r3, #27
 800e57e:	d411      	bmi.n	800e5a4 <__swsetup_r+0x50>
 800e580:	2309      	movs	r3, #9
 800e582:	6033      	str	r3, [r6, #0]
 800e584:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e588:	81a3      	strh	r3, [r4, #12]
 800e58a:	f04f 30ff 	mov.w	r0, #4294967295
 800e58e:	e03e      	b.n	800e60e <__swsetup_r+0xba>
 800e590:	4b25      	ldr	r3, [pc, #148]	; (800e628 <__swsetup_r+0xd4>)
 800e592:	429c      	cmp	r4, r3
 800e594:	d101      	bne.n	800e59a <__swsetup_r+0x46>
 800e596:	68ac      	ldr	r4, [r5, #8]
 800e598:	e7eb      	b.n	800e572 <__swsetup_r+0x1e>
 800e59a:	4b24      	ldr	r3, [pc, #144]	; (800e62c <__swsetup_r+0xd8>)
 800e59c:	429c      	cmp	r4, r3
 800e59e:	bf08      	it	eq
 800e5a0:	68ec      	ldreq	r4, [r5, #12]
 800e5a2:	e7e6      	b.n	800e572 <__swsetup_r+0x1e>
 800e5a4:	0758      	lsls	r0, r3, #29
 800e5a6:	d512      	bpl.n	800e5ce <__swsetup_r+0x7a>
 800e5a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e5aa:	b141      	cbz	r1, 800e5be <__swsetup_r+0x6a>
 800e5ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5b0:	4299      	cmp	r1, r3
 800e5b2:	d002      	beq.n	800e5ba <__swsetup_r+0x66>
 800e5b4:	4630      	mov	r0, r6
 800e5b6:	f7ff fb31 	bl	800dc1c <_free_r>
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	6363      	str	r3, [r4, #52]	; 0x34
 800e5be:	89a3      	ldrh	r3, [r4, #12]
 800e5c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e5c4:	81a3      	strh	r3, [r4, #12]
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	6063      	str	r3, [r4, #4]
 800e5ca:	6923      	ldr	r3, [r4, #16]
 800e5cc:	6023      	str	r3, [r4, #0]
 800e5ce:	89a3      	ldrh	r3, [r4, #12]
 800e5d0:	f043 0308 	orr.w	r3, r3, #8
 800e5d4:	81a3      	strh	r3, [r4, #12]
 800e5d6:	6923      	ldr	r3, [r4, #16]
 800e5d8:	b94b      	cbnz	r3, 800e5ee <__swsetup_r+0x9a>
 800e5da:	89a3      	ldrh	r3, [r4, #12]
 800e5dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e5e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5e4:	d003      	beq.n	800e5ee <__swsetup_r+0x9a>
 800e5e6:	4621      	mov	r1, r4
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	f000 fa09 	bl	800ea00 <__smakebuf_r>
 800e5ee:	89a0      	ldrh	r0, [r4, #12]
 800e5f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5f4:	f010 0301 	ands.w	r3, r0, #1
 800e5f8:	d00a      	beq.n	800e610 <__swsetup_r+0xbc>
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	60a3      	str	r3, [r4, #8]
 800e5fe:	6963      	ldr	r3, [r4, #20]
 800e600:	425b      	negs	r3, r3
 800e602:	61a3      	str	r3, [r4, #24]
 800e604:	6923      	ldr	r3, [r4, #16]
 800e606:	b943      	cbnz	r3, 800e61a <__swsetup_r+0xc6>
 800e608:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e60c:	d1ba      	bne.n	800e584 <__swsetup_r+0x30>
 800e60e:	bd70      	pop	{r4, r5, r6, pc}
 800e610:	0781      	lsls	r1, r0, #30
 800e612:	bf58      	it	pl
 800e614:	6963      	ldrpl	r3, [r4, #20]
 800e616:	60a3      	str	r3, [r4, #8]
 800e618:	e7f4      	b.n	800e604 <__swsetup_r+0xb0>
 800e61a:	2000      	movs	r0, #0
 800e61c:	e7f7      	b.n	800e60e <__swsetup_r+0xba>
 800e61e:	bf00      	nop
 800e620:	2000009c 	.word	0x2000009c
 800e624:	0801061c 	.word	0x0801061c
 800e628:	0801063c 	.word	0x0801063c
 800e62c:	080105fc 	.word	0x080105fc

0800e630 <abort>:
 800e630:	b508      	push	{r3, lr}
 800e632:	2006      	movs	r0, #6
 800e634:	f000 fa54 	bl	800eae0 <raise>
 800e638:	2001      	movs	r0, #1
 800e63a:	f7f7 fdef 	bl	800621c <_exit>
	...

0800e640 <__sflush_r>:
 800e640:	898a      	ldrh	r2, [r1, #12]
 800e642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e646:	4605      	mov	r5, r0
 800e648:	0710      	lsls	r0, r2, #28
 800e64a:	460c      	mov	r4, r1
 800e64c:	d458      	bmi.n	800e700 <__sflush_r+0xc0>
 800e64e:	684b      	ldr	r3, [r1, #4]
 800e650:	2b00      	cmp	r3, #0
 800e652:	dc05      	bgt.n	800e660 <__sflush_r+0x20>
 800e654:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e656:	2b00      	cmp	r3, #0
 800e658:	dc02      	bgt.n	800e660 <__sflush_r+0x20>
 800e65a:	2000      	movs	r0, #0
 800e65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e662:	2e00      	cmp	r6, #0
 800e664:	d0f9      	beq.n	800e65a <__sflush_r+0x1a>
 800e666:	2300      	movs	r3, #0
 800e668:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e66c:	682f      	ldr	r7, [r5, #0]
 800e66e:	602b      	str	r3, [r5, #0]
 800e670:	d032      	beq.n	800e6d8 <__sflush_r+0x98>
 800e672:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e674:	89a3      	ldrh	r3, [r4, #12]
 800e676:	075a      	lsls	r2, r3, #29
 800e678:	d505      	bpl.n	800e686 <__sflush_r+0x46>
 800e67a:	6863      	ldr	r3, [r4, #4]
 800e67c:	1ac0      	subs	r0, r0, r3
 800e67e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e680:	b10b      	cbz	r3, 800e686 <__sflush_r+0x46>
 800e682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e684:	1ac0      	subs	r0, r0, r3
 800e686:	2300      	movs	r3, #0
 800e688:	4602      	mov	r2, r0
 800e68a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e68c:	6a21      	ldr	r1, [r4, #32]
 800e68e:	4628      	mov	r0, r5
 800e690:	47b0      	blx	r6
 800e692:	1c43      	adds	r3, r0, #1
 800e694:	89a3      	ldrh	r3, [r4, #12]
 800e696:	d106      	bne.n	800e6a6 <__sflush_r+0x66>
 800e698:	6829      	ldr	r1, [r5, #0]
 800e69a:	291d      	cmp	r1, #29
 800e69c:	d82c      	bhi.n	800e6f8 <__sflush_r+0xb8>
 800e69e:	4a2a      	ldr	r2, [pc, #168]	; (800e748 <__sflush_r+0x108>)
 800e6a0:	40ca      	lsrs	r2, r1
 800e6a2:	07d6      	lsls	r6, r2, #31
 800e6a4:	d528      	bpl.n	800e6f8 <__sflush_r+0xb8>
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	6062      	str	r2, [r4, #4]
 800e6aa:	04d9      	lsls	r1, r3, #19
 800e6ac:	6922      	ldr	r2, [r4, #16]
 800e6ae:	6022      	str	r2, [r4, #0]
 800e6b0:	d504      	bpl.n	800e6bc <__sflush_r+0x7c>
 800e6b2:	1c42      	adds	r2, r0, #1
 800e6b4:	d101      	bne.n	800e6ba <__sflush_r+0x7a>
 800e6b6:	682b      	ldr	r3, [r5, #0]
 800e6b8:	b903      	cbnz	r3, 800e6bc <__sflush_r+0x7c>
 800e6ba:	6560      	str	r0, [r4, #84]	; 0x54
 800e6bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6be:	602f      	str	r7, [r5, #0]
 800e6c0:	2900      	cmp	r1, #0
 800e6c2:	d0ca      	beq.n	800e65a <__sflush_r+0x1a>
 800e6c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6c8:	4299      	cmp	r1, r3
 800e6ca:	d002      	beq.n	800e6d2 <__sflush_r+0x92>
 800e6cc:	4628      	mov	r0, r5
 800e6ce:	f7ff faa5 	bl	800dc1c <_free_r>
 800e6d2:	2000      	movs	r0, #0
 800e6d4:	6360      	str	r0, [r4, #52]	; 0x34
 800e6d6:	e7c1      	b.n	800e65c <__sflush_r+0x1c>
 800e6d8:	6a21      	ldr	r1, [r4, #32]
 800e6da:	2301      	movs	r3, #1
 800e6dc:	4628      	mov	r0, r5
 800e6de:	47b0      	blx	r6
 800e6e0:	1c41      	adds	r1, r0, #1
 800e6e2:	d1c7      	bne.n	800e674 <__sflush_r+0x34>
 800e6e4:	682b      	ldr	r3, [r5, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d0c4      	beq.n	800e674 <__sflush_r+0x34>
 800e6ea:	2b1d      	cmp	r3, #29
 800e6ec:	d001      	beq.n	800e6f2 <__sflush_r+0xb2>
 800e6ee:	2b16      	cmp	r3, #22
 800e6f0:	d101      	bne.n	800e6f6 <__sflush_r+0xb6>
 800e6f2:	602f      	str	r7, [r5, #0]
 800e6f4:	e7b1      	b.n	800e65a <__sflush_r+0x1a>
 800e6f6:	89a3      	ldrh	r3, [r4, #12]
 800e6f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6fc:	81a3      	strh	r3, [r4, #12]
 800e6fe:	e7ad      	b.n	800e65c <__sflush_r+0x1c>
 800e700:	690f      	ldr	r7, [r1, #16]
 800e702:	2f00      	cmp	r7, #0
 800e704:	d0a9      	beq.n	800e65a <__sflush_r+0x1a>
 800e706:	0793      	lsls	r3, r2, #30
 800e708:	680e      	ldr	r6, [r1, #0]
 800e70a:	bf08      	it	eq
 800e70c:	694b      	ldreq	r3, [r1, #20]
 800e70e:	600f      	str	r7, [r1, #0]
 800e710:	bf18      	it	ne
 800e712:	2300      	movne	r3, #0
 800e714:	eba6 0807 	sub.w	r8, r6, r7
 800e718:	608b      	str	r3, [r1, #8]
 800e71a:	f1b8 0f00 	cmp.w	r8, #0
 800e71e:	dd9c      	ble.n	800e65a <__sflush_r+0x1a>
 800e720:	6a21      	ldr	r1, [r4, #32]
 800e722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e724:	4643      	mov	r3, r8
 800e726:	463a      	mov	r2, r7
 800e728:	4628      	mov	r0, r5
 800e72a:	47b0      	blx	r6
 800e72c:	2800      	cmp	r0, #0
 800e72e:	dc06      	bgt.n	800e73e <__sflush_r+0xfe>
 800e730:	89a3      	ldrh	r3, [r4, #12]
 800e732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e736:	81a3      	strh	r3, [r4, #12]
 800e738:	f04f 30ff 	mov.w	r0, #4294967295
 800e73c:	e78e      	b.n	800e65c <__sflush_r+0x1c>
 800e73e:	4407      	add	r7, r0
 800e740:	eba8 0800 	sub.w	r8, r8, r0
 800e744:	e7e9      	b.n	800e71a <__sflush_r+0xda>
 800e746:	bf00      	nop
 800e748:	20400001 	.word	0x20400001

0800e74c <_fflush_r>:
 800e74c:	b538      	push	{r3, r4, r5, lr}
 800e74e:	690b      	ldr	r3, [r1, #16]
 800e750:	4605      	mov	r5, r0
 800e752:	460c      	mov	r4, r1
 800e754:	b913      	cbnz	r3, 800e75c <_fflush_r+0x10>
 800e756:	2500      	movs	r5, #0
 800e758:	4628      	mov	r0, r5
 800e75a:	bd38      	pop	{r3, r4, r5, pc}
 800e75c:	b118      	cbz	r0, 800e766 <_fflush_r+0x1a>
 800e75e:	6983      	ldr	r3, [r0, #24]
 800e760:	b90b      	cbnz	r3, 800e766 <_fflush_r+0x1a>
 800e762:	f000 f887 	bl	800e874 <__sinit>
 800e766:	4b14      	ldr	r3, [pc, #80]	; (800e7b8 <_fflush_r+0x6c>)
 800e768:	429c      	cmp	r4, r3
 800e76a:	d11b      	bne.n	800e7a4 <_fflush_r+0x58>
 800e76c:	686c      	ldr	r4, [r5, #4]
 800e76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d0ef      	beq.n	800e756 <_fflush_r+0xa>
 800e776:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e778:	07d0      	lsls	r0, r2, #31
 800e77a:	d404      	bmi.n	800e786 <_fflush_r+0x3a>
 800e77c:	0599      	lsls	r1, r3, #22
 800e77e:	d402      	bmi.n	800e786 <_fflush_r+0x3a>
 800e780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e782:	f000 f915 	bl	800e9b0 <__retarget_lock_acquire_recursive>
 800e786:	4628      	mov	r0, r5
 800e788:	4621      	mov	r1, r4
 800e78a:	f7ff ff59 	bl	800e640 <__sflush_r>
 800e78e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e790:	07da      	lsls	r2, r3, #31
 800e792:	4605      	mov	r5, r0
 800e794:	d4e0      	bmi.n	800e758 <_fflush_r+0xc>
 800e796:	89a3      	ldrh	r3, [r4, #12]
 800e798:	059b      	lsls	r3, r3, #22
 800e79a:	d4dd      	bmi.n	800e758 <_fflush_r+0xc>
 800e79c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e79e:	f000 f908 	bl	800e9b2 <__retarget_lock_release_recursive>
 800e7a2:	e7d9      	b.n	800e758 <_fflush_r+0xc>
 800e7a4:	4b05      	ldr	r3, [pc, #20]	; (800e7bc <_fflush_r+0x70>)
 800e7a6:	429c      	cmp	r4, r3
 800e7a8:	d101      	bne.n	800e7ae <_fflush_r+0x62>
 800e7aa:	68ac      	ldr	r4, [r5, #8]
 800e7ac:	e7df      	b.n	800e76e <_fflush_r+0x22>
 800e7ae:	4b04      	ldr	r3, [pc, #16]	; (800e7c0 <_fflush_r+0x74>)
 800e7b0:	429c      	cmp	r4, r3
 800e7b2:	bf08      	it	eq
 800e7b4:	68ec      	ldreq	r4, [r5, #12]
 800e7b6:	e7da      	b.n	800e76e <_fflush_r+0x22>
 800e7b8:	0801061c 	.word	0x0801061c
 800e7bc:	0801063c 	.word	0x0801063c
 800e7c0:	080105fc 	.word	0x080105fc

0800e7c4 <std>:
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	b510      	push	{r4, lr}
 800e7c8:	4604      	mov	r4, r0
 800e7ca:	e9c0 3300 	strd	r3, r3, [r0]
 800e7ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e7d2:	6083      	str	r3, [r0, #8]
 800e7d4:	8181      	strh	r1, [r0, #12]
 800e7d6:	6643      	str	r3, [r0, #100]	; 0x64
 800e7d8:	81c2      	strh	r2, [r0, #14]
 800e7da:	6183      	str	r3, [r0, #24]
 800e7dc:	4619      	mov	r1, r3
 800e7de:	2208      	movs	r2, #8
 800e7e0:	305c      	adds	r0, #92	; 0x5c
 800e7e2:	f7fd fb5b 	bl	800be9c <memset>
 800e7e6:	4b05      	ldr	r3, [pc, #20]	; (800e7fc <std+0x38>)
 800e7e8:	6263      	str	r3, [r4, #36]	; 0x24
 800e7ea:	4b05      	ldr	r3, [pc, #20]	; (800e800 <std+0x3c>)
 800e7ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800e7ee:	4b05      	ldr	r3, [pc, #20]	; (800e804 <std+0x40>)
 800e7f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e7f2:	4b05      	ldr	r3, [pc, #20]	; (800e808 <std+0x44>)
 800e7f4:	6224      	str	r4, [r4, #32]
 800e7f6:	6323      	str	r3, [r4, #48]	; 0x30
 800e7f8:	bd10      	pop	{r4, pc}
 800e7fa:	bf00      	nop
 800e7fc:	0800eb19 	.word	0x0800eb19
 800e800:	0800eb3b 	.word	0x0800eb3b
 800e804:	0800eb73 	.word	0x0800eb73
 800e808:	0800eb97 	.word	0x0800eb97

0800e80c <_cleanup_r>:
 800e80c:	4901      	ldr	r1, [pc, #4]	; (800e814 <_cleanup_r+0x8>)
 800e80e:	f000 b8af 	b.w	800e970 <_fwalk_reent>
 800e812:	bf00      	nop
 800e814:	0800e74d 	.word	0x0800e74d

0800e818 <__sfmoreglue>:
 800e818:	b570      	push	{r4, r5, r6, lr}
 800e81a:	2268      	movs	r2, #104	; 0x68
 800e81c:	1e4d      	subs	r5, r1, #1
 800e81e:	4355      	muls	r5, r2
 800e820:	460e      	mov	r6, r1
 800e822:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e826:	f7ff fa65 	bl	800dcf4 <_malloc_r>
 800e82a:	4604      	mov	r4, r0
 800e82c:	b140      	cbz	r0, 800e840 <__sfmoreglue+0x28>
 800e82e:	2100      	movs	r1, #0
 800e830:	e9c0 1600 	strd	r1, r6, [r0]
 800e834:	300c      	adds	r0, #12
 800e836:	60a0      	str	r0, [r4, #8]
 800e838:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e83c:	f7fd fb2e 	bl	800be9c <memset>
 800e840:	4620      	mov	r0, r4
 800e842:	bd70      	pop	{r4, r5, r6, pc}

0800e844 <__sfp_lock_acquire>:
 800e844:	4801      	ldr	r0, [pc, #4]	; (800e84c <__sfp_lock_acquire+0x8>)
 800e846:	f000 b8b3 	b.w	800e9b0 <__retarget_lock_acquire_recursive>
 800e84a:	bf00      	nop
 800e84c:	20000b31 	.word	0x20000b31

0800e850 <__sfp_lock_release>:
 800e850:	4801      	ldr	r0, [pc, #4]	; (800e858 <__sfp_lock_release+0x8>)
 800e852:	f000 b8ae 	b.w	800e9b2 <__retarget_lock_release_recursive>
 800e856:	bf00      	nop
 800e858:	20000b31 	.word	0x20000b31

0800e85c <__sinit_lock_acquire>:
 800e85c:	4801      	ldr	r0, [pc, #4]	; (800e864 <__sinit_lock_acquire+0x8>)
 800e85e:	f000 b8a7 	b.w	800e9b0 <__retarget_lock_acquire_recursive>
 800e862:	bf00      	nop
 800e864:	20000b32 	.word	0x20000b32

0800e868 <__sinit_lock_release>:
 800e868:	4801      	ldr	r0, [pc, #4]	; (800e870 <__sinit_lock_release+0x8>)
 800e86a:	f000 b8a2 	b.w	800e9b2 <__retarget_lock_release_recursive>
 800e86e:	bf00      	nop
 800e870:	20000b32 	.word	0x20000b32

0800e874 <__sinit>:
 800e874:	b510      	push	{r4, lr}
 800e876:	4604      	mov	r4, r0
 800e878:	f7ff fff0 	bl	800e85c <__sinit_lock_acquire>
 800e87c:	69a3      	ldr	r3, [r4, #24]
 800e87e:	b11b      	cbz	r3, 800e888 <__sinit+0x14>
 800e880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e884:	f7ff bff0 	b.w	800e868 <__sinit_lock_release>
 800e888:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e88c:	6523      	str	r3, [r4, #80]	; 0x50
 800e88e:	4b13      	ldr	r3, [pc, #76]	; (800e8dc <__sinit+0x68>)
 800e890:	4a13      	ldr	r2, [pc, #76]	; (800e8e0 <__sinit+0x6c>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	62a2      	str	r2, [r4, #40]	; 0x28
 800e896:	42a3      	cmp	r3, r4
 800e898:	bf04      	itt	eq
 800e89a:	2301      	moveq	r3, #1
 800e89c:	61a3      	streq	r3, [r4, #24]
 800e89e:	4620      	mov	r0, r4
 800e8a0:	f000 f820 	bl	800e8e4 <__sfp>
 800e8a4:	6060      	str	r0, [r4, #4]
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f000 f81c 	bl	800e8e4 <__sfp>
 800e8ac:	60a0      	str	r0, [r4, #8]
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	f000 f818 	bl	800e8e4 <__sfp>
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	60e0      	str	r0, [r4, #12]
 800e8b8:	2104      	movs	r1, #4
 800e8ba:	6860      	ldr	r0, [r4, #4]
 800e8bc:	f7ff ff82 	bl	800e7c4 <std>
 800e8c0:	68a0      	ldr	r0, [r4, #8]
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	2109      	movs	r1, #9
 800e8c6:	f7ff ff7d 	bl	800e7c4 <std>
 800e8ca:	68e0      	ldr	r0, [r4, #12]
 800e8cc:	2202      	movs	r2, #2
 800e8ce:	2112      	movs	r1, #18
 800e8d0:	f7ff ff78 	bl	800e7c4 <std>
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	61a3      	str	r3, [r4, #24]
 800e8d8:	e7d2      	b.n	800e880 <__sinit+0xc>
 800e8da:	bf00      	nop
 800e8dc:	08010280 	.word	0x08010280
 800e8e0:	0800e80d 	.word	0x0800e80d

0800e8e4 <__sfp>:
 800e8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8e6:	4607      	mov	r7, r0
 800e8e8:	f7ff ffac 	bl	800e844 <__sfp_lock_acquire>
 800e8ec:	4b1e      	ldr	r3, [pc, #120]	; (800e968 <__sfp+0x84>)
 800e8ee:	681e      	ldr	r6, [r3, #0]
 800e8f0:	69b3      	ldr	r3, [r6, #24]
 800e8f2:	b913      	cbnz	r3, 800e8fa <__sfp+0x16>
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	f7ff ffbd 	bl	800e874 <__sinit>
 800e8fa:	3648      	adds	r6, #72	; 0x48
 800e8fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e900:	3b01      	subs	r3, #1
 800e902:	d503      	bpl.n	800e90c <__sfp+0x28>
 800e904:	6833      	ldr	r3, [r6, #0]
 800e906:	b30b      	cbz	r3, 800e94c <__sfp+0x68>
 800e908:	6836      	ldr	r6, [r6, #0]
 800e90a:	e7f7      	b.n	800e8fc <__sfp+0x18>
 800e90c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e910:	b9d5      	cbnz	r5, 800e948 <__sfp+0x64>
 800e912:	4b16      	ldr	r3, [pc, #88]	; (800e96c <__sfp+0x88>)
 800e914:	60e3      	str	r3, [r4, #12]
 800e916:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e91a:	6665      	str	r5, [r4, #100]	; 0x64
 800e91c:	f000 f847 	bl	800e9ae <__retarget_lock_init_recursive>
 800e920:	f7ff ff96 	bl	800e850 <__sfp_lock_release>
 800e924:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e928:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e92c:	6025      	str	r5, [r4, #0]
 800e92e:	61a5      	str	r5, [r4, #24]
 800e930:	2208      	movs	r2, #8
 800e932:	4629      	mov	r1, r5
 800e934:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e938:	f7fd fab0 	bl	800be9c <memset>
 800e93c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e940:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e944:	4620      	mov	r0, r4
 800e946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e948:	3468      	adds	r4, #104	; 0x68
 800e94a:	e7d9      	b.n	800e900 <__sfp+0x1c>
 800e94c:	2104      	movs	r1, #4
 800e94e:	4638      	mov	r0, r7
 800e950:	f7ff ff62 	bl	800e818 <__sfmoreglue>
 800e954:	4604      	mov	r4, r0
 800e956:	6030      	str	r0, [r6, #0]
 800e958:	2800      	cmp	r0, #0
 800e95a:	d1d5      	bne.n	800e908 <__sfp+0x24>
 800e95c:	f7ff ff78 	bl	800e850 <__sfp_lock_release>
 800e960:	230c      	movs	r3, #12
 800e962:	603b      	str	r3, [r7, #0]
 800e964:	e7ee      	b.n	800e944 <__sfp+0x60>
 800e966:	bf00      	nop
 800e968:	08010280 	.word	0x08010280
 800e96c:	ffff0001 	.word	0xffff0001

0800e970 <_fwalk_reent>:
 800e970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e974:	4606      	mov	r6, r0
 800e976:	4688      	mov	r8, r1
 800e978:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e97c:	2700      	movs	r7, #0
 800e97e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e982:	f1b9 0901 	subs.w	r9, r9, #1
 800e986:	d505      	bpl.n	800e994 <_fwalk_reent+0x24>
 800e988:	6824      	ldr	r4, [r4, #0]
 800e98a:	2c00      	cmp	r4, #0
 800e98c:	d1f7      	bne.n	800e97e <_fwalk_reent+0xe>
 800e98e:	4638      	mov	r0, r7
 800e990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e994:	89ab      	ldrh	r3, [r5, #12]
 800e996:	2b01      	cmp	r3, #1
 800e998:	d907      	bls.n	800e9aa <_fwalk_reent+0x3a>
 800e99a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e99e:	3301      	adds	r3, #1
 800e9a0:	d003      	beq.n	800e9aa <_fwalk_reent+0x3a>
 800e9a2:	4629      	mov	r1, r5
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	47c0      	blx	r8
 800e9a8:	4307      	orrs	r7, r0
 800e9aa:	3568      	adds	r5, #104	; 0x68
 800e9ac:	e7e9      	b.n	800e982 <_fwalk_reent+0x12>

0800e9ae <__retarget_lock_init_recursive>:
 800e9ae:	4770      	bx	lr

0800e9b0 <__retarget_lock_acquire_recursive>:
 800e9b0:	4770      	bx	lr

0800e9b2 <__retarget_lock_release_recursive>:
 800e9b2:	4770      	bx	lr

0800e9b4 <__swhatbuf_r>:
 800e9b4:	b570      	push	{r4, r5, r6, lr}
 800e9b6:	460e      	mov	r6, r1
 800e9b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9bc:	2900      	cmp	r1, #0
 800e9be:	b096      	sub	sp, #88	; 0x58
 800e9c0:	4614      	mov	r4, r2
 800e9c2:	461d      	mov	r5, r3
 800e9c4:	da08      	bge.n	800e9d8 <__swhatbuf_r+0x24>
 800e9c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	602a      	str	r2, [r5, #0]
 800e9ce:	061a      	lsls	r2, r3, #24
 800e9d0:	d410      	bmi.n	800e9f4 <__swhatbuf_r+0x40>
 800e9d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9d6:	e00e      	b.n	800e9f6 <__swhatbuf_r+0x42>
 800e9d8:	466a      	mov	r2, sp
 800e9da:	f000 f903 	bl	800ebe4 <_fstat_r>
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	dbf1      	blt.n	800e9c6 <__swhatbuf_r+0x12>
 800e9e2:	9a01      	ldr	r2, [sp, #4]
 800e9e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e9e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e9ec:	425a      	negs	r2, r3
 800e9ee:	415a      	adcs	r2, r3
 800e9f0:	602a      	str	r2, [r5, #0]
 800e9f2:	e7ee      	b.n	800e9d2 <__swhatbuf_r+0x1e>
 800e9f4:	2340      	movs	r3, #64	; 0x40
 800e9f6:	2000      	movs	r0, #0
 800e9f8:	6023      	str	r3, [r4, #0]
 800e9fa:	b016      	add	sp, #88	; 0x58
 800e9fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ea00 <__smakebuf_r>:
 800ea00:	898b      	ldrh	r3, [r1, #12]
 800ea02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea04:	079d      	lsls	r5, r3, #30
 800ea06:	4606      	mov	r6, r0
 800ea08:	460c      	mov	r4, r1
 800ea0a:	d507      	bpl.n	800ea1c <__smakebuf_r+0x1c>
 800ea0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea10:	6023      	str	r3, [r4, #0]
 800ea12:	6123      	str	r3, [r4, #16]
 800ea14:	2301      	movs	r3, #1
 800ea16:	6163      	str	r3, [r4, #20]
 800ea18:	b002      	add	sp, #8
 800ea1a:	bd70      	pop	{r4, r5, r6, pc}
 800ea1c:	ab01      	add	r3, sp, #4
 800ea1e:	466a      	mov	r2, sp
 800ea20:	f7ff ffc8 	bl	800e9b4 <__swhatbuf_r>
 800ea24:	9900      	ldr	r1, [sp, #0]
 800ea26:	4605      	mov	r5, r0
 800ea28:	4630      	mov	r0, r6
 800ea2a:	f7ff f963 	bl	800dcf4 <_malloc_r>
 800ea2e:	b948      	cbnz	r0, 800ea44 <__smakebuf_r+0x44>
 800ea30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea34:	059a      	lsls	r2, r3, #22
 800ea36:	d4ef      	bmi.n	800ea18 <__smakebuf_r+0x18>
 800ea38:	f023 0303 	bic.w	r3, r3, #3
 800ea3c:	f043 0302 	orr.w	r3, r3, #2
 800ea40:	81a3      	strh	r3, [r4, #12]
 800ea42:	e7e3      	b.n	800ea0c <__smakebuf_r+0xc>
 800ea44:	4b0d      	ldr	r3, [pc, #52]	; (800ea7c <__smakebuf_r+0x7c>)
 800ea46:	62b3      	str	r3, [r6, #40]	; 0x28
 800ea48:	89a3      	ldrh	r3, [r4, #12]
 800ea4a:	6020      	str	r0, [r4, #0]
 800ea4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea50:	81a3      	strh	r3, [r4, #12]
 800ea52:	9b00      	ldr	r3, [sp, #0]
 800ea54:	6163      	str	r3, [r4, #20]
 800ea56:	9b01      	ldr	r3, [sp, #4]
 800ea58:	6120      	str	r0, [r4, #16]
 800ea5a:	b15b      	cbz	r3, 800ea74 <__smakebuf_r+0x74>
 800ea5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea60:	4630      	mov	r0, r6
 800ea62:	f000 f8d1 	bl	800ec08 <_isatty_r>
 800ea66:	b128      	cbz	r0, 800ea74 <__smakebuf_r+0x74>
 800ea68:	89a3      	ldrh	r3, [r4, #12]
 800ea6a:	f023 0303 	bic.w	r3, r3, #3
 800ea6e:	f043 0301 	orr.w	r3, r3, #1
 800ea72:	81a3      	strh	r3, [r4, #12]
 800ea74:	89a0      	ldrh	r0, [r4, #12]
 800ea76:	4305      	orrs	r5, r0
 800ea78:	81a5      	strh	r5, [r4, #12]
 800ea7a:	e7cd      	b.n	800ea18 <__smakebuf_r+0x18>
 800ea7c:	0800e80d 	.word	0x0800e80d

0800ea80 <_malloc_usable_size_r>:
 800ea80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea84:	1f18      	subs	r0, r3, #4
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	bfbc      	itt	lt
 800ea8a:	580b      	ldrlt	r3, [r1, r0]
 800ea8c:	18c0      	addlt	r0, r0, r3
 800ea8e:	4770      	bx	lr

0800ea90 <_raise_r>:
 800ea90:	291f      	cmp	r1, #31
 800ea92:	b538      	push	{r3, r4, r5, lr}
 800ea94:	4604      	mov	r4, r0
 800ea96:	460d      	mov	r5, r1
 800ea98:	d904      	bls.n	800eaa4 <_raise_r+0x14>
 800ea9a:	2316      	movs	r3, #22
 800ea9c:	6003      	str	r3, [r0, #0]
 800ea9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa2:	bd38      	pop	{r3, r4, r5, pc}
 800eaa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eaa6:	b112      	cbz	r2, 800eaae <_raise_r+0x1e>
 800eaa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eaac:	b94b      	cbnz	r3, 800eac2 <_raise_r+0x32>
 800eaae:	4620      	mov	r0, r4
 800eab0:	f000 f830 	bl	800eb14 <_getpid_r>
 800eab4:	462a      	mov	r2, r5
 800eab6:	4601      	mov	r1, r0
 800eab8:	4620      	mov	r0, r4
 800eaba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eabe:	f000 b817 	b.w	800eaf0 <_kill_r>
 800eac2:	2b01      	cmp	r3, #1
 800eac4:	d00a      	beq.n	800eadc <_raise_r+0x4c>
 800eac6:	1c59      	adds	r1, r3, #1
 800eac8:	d103      	bne.n	800ead2 <_raise_r+0x42>
 800eaca:	2316      	movs	r3, #22
 800eacc:	6003      	str	r3, [r0, #0]
 800eace:	2001      	movs	r0, #1
 800ead0:	e7e7      	b.n	800eaa2 <_raise_r+0x12>
 800ead2:	2400      	movs	r4, #0
 800ead4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ead8:	4628      	mov	r0, r5
 800eada:	4798      	blx	r3
 800eadc:	2000      	movs	r0, #0
 800eade:	e7e0      	b.n	800eaa2 <_raise_r+0x12>

0800eae0 <raise>:
 800eae0:	4b02      	ldr	r3, [pc, #8]	; (800eaec <raise+0xc>)
 800eae2:	4601      	mov	r1, r0
 800eae4:	6818      	ldr	r0, [r3, #0]
 800eae6:	f7ff bfd3 	b.w	800ea90 <_raise_r>
 800eaea:	bf00      	nop
 800eaec:	2000009c 	.word	0x2000009c

0800eaf0 <_kill_r>:
 800eaf0:	b538      	push	{r3, r4, r5, lr}
 800eaf2:	4d07      	ldr	r5, [pc, #28]	; (800eb10 <_kill_r+0x20>)
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	4608      	mov	r0, r1
 800eafa:	4611      	mov	r1, r2
 800eafc:	602b      	str	r3, [r5, #0]
 800eafe:	f7f7 fb7d 	bl	80061fc <_kill>
 800eb02:	1c43      	adds	r3, r0, #1
 800eb04:	d102      	bne.n	800eb0c <_kill_r+0x1c>
 800eb06:	682b      	ldr	r3, [r5, #0]
 800eb08:	b103      	cbz	r3, 800eb0c <_kill_r+0x1c>
 800eb0a:	6023      	str	r3, [r4, #0]
 800eb0c:	bd38      	pop	{r3, r4, r5, pc}
 800eb0e:	bf00      	nop
 800eb10:	20000b2c 	.word	0x20000b2c

0800eb14 <_getpid_r>:
 800eb14:	f7f7 bb6a 	b.w	80061ec <_getpid>

0800eb18 <__sread>:
 800eb18:	b510      	push	{r4, lr}
 800eb1a:	460c      	mov	r4, r1
 800eb1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb20:	f000 f894 	bl	800ec4c <_read_r>
 800eb24:	2800      	cmp	r0, #0
 800eb26:	bfab      	itete	ge
 800eb28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb2a:	89a3      	ldrhlt	r3, [r4, #12]
 800eb2c:	181b      	addge	r3, r3, r0
 800eb2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb32:	bfac      	ite	ge
 800eb34:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb36:	81a3      	strhlt	r3, [r4, #12]
 800eb38:	bd10      	pop	{r4, pc}

0800eb3a <__swrite>:
 800eb3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb3e:	461f      	mov	r7, r3
 800eb40:	898b      	ldrh	r3, [r1, #12]
 800eb42:	05db      	lsls	r3, r3, #23
 800eb44:	4605      	mov	r5, r0
 800eb46:	460c      	mov	r4, r1
 800eb48:	4616      	mov	r6, r2
 800eb4a:	d505      	bpl.n	800eb58 <__swrite+0x1e>
 800eb4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb50:	2302      	movs	r3, #2
 800eb52:	2200      	movs	r2, #0
 800eb54:	f000 f868 	bl	800ec28 <_lseek_r>
 800eb58:	89a3      	ldrh	r3, [r4, #12]
 800eb5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb62:	81a3      	strh	r3, [r4, #12]
 800eb64:	4632      	mov	r2, r6
 800eb66:	463b      	mov	r3, r7
 800eb68:	4628      	mov	r0, r5
 800eb6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb6e:	f000 b817 	b.w	800eba0 <_write_r>

0800eb72 <__sseek>:
 800eb72:	b510      	push	{r4, lr}
 800eb74:	460c      	mov	r4, r1
 800eb76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb7a:	f000 f855 	bl	800ec28 <_lseek_r>
 800eb7e:	1c43      	adds	r3, r0, #1
 800eb80:	89a3      	ldrh	r3, [r4, #12]
 800eb82:	bf15      	itete	ne
 800eb84:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb8e:	81a3      	strheq	r3, [r4, #12]
 800eb90:	bf18      	it	ne
 800eb92:	81a3      	strhne	r3, [r4, #12]
 800eb94:	bd10      	pop	{r4, pc}

0800eb96 <__sclose>:
 800eb96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb9a:	f000 b813 	b.w	800ebc4 <_close_r>
	...

0800eba0 <_write_r>:
 800eba0:	b538      	push	{r3, r4, r5, lr}
 800eba2:	4d07      	ldr	r5, [pc, #28]	; (800ebc0 <_write_r+0x20>)
 800eba4:	4604      	mov	r4, r0
 800eba6:	4608      	mov	r0, r1
 800eba8:	4611      	mov	r1, r2
 800ebaa:	2200      	movs	r2, #0
 800ebac:	602a      	str	r2, [r5, #0]
 800ebae:	461a      	mov	r2, r3
 800ebb0:	f7f7 fb5b 	bl	800626a <_write>
 800ebb4:	1c43      	adds	r3, r0, #1
 800ebb6:	d102      	bne.n	800ebbe <_write_r+0x1e>
 800ebb8:	682b      	ldr	r3, [r5, #0]
 800ebba:	b103      	cbz	r3, 800ebbe <_write_r+0x1e>
 800ebbc:	6023      	str	r3, [r4, #0]
 800ebbe:	bd38      	pop	{r3, r4, r5, pc}
 800ebc0:	20000b2c 	.word	0x20000b2c

0800ebc4 <_close_r>:
 800ebc4:	b538      	push	{r3, r4, r5, lr}
 800ebc6:	4d06      	ldr	r5, [pc, #24]	; (800ebe0 <_close_r+0x1c>)
 800ebc8:	2300      	movs	r3, #0
 800ebca:	4604      	mov	r4, r0
 800ebcc:	4608      	mov	r0, r1
 800ebce:	602b      	str	r3, [r5, #0]
 800ebd0:	f7f7 fb67 	bl	80062a2 <_close>
 800ebd4:	1c43      	adds	r3, r0, #1
 800ebd6:	d102      	bne.n	800ebde <_close_r+0x1a>
 800ebd8:	682b      	ldr	r3, [r5, #0]
 800ebda:	b103      	cbz	r3, 800ebde <_close_r+0x1a>
 800ebdc:	6023      	str	r3, [r4, #0]
 800ebde:	bd38      	pop	{r3, r4, r5, pc}
 800ebe0:	20000b2c 	.word	0x20000b2c

0800ebe4 <_fstat_r>:
 800ebe4:	b538      	push	{r3, r4, r5, lr}
 800ebe6:	4d07      	ldr	r5, [pc, #28]	; (800ec04 <_fstat_r+0x20>)
 800ebe8:	2300      	movs	r3, #0
 800ebea:	4604      	mov	r4, r0
 800ebec:	4608      	mov	r0, r1
 800ebee:	4611      	mov	r1, r2
 800ebf0:	602b      	str	r3, [r5, #0]
 800ebf2:	f7f7 fb62 	bl	80062ba <_fstat>
 800ebf6:	1c43      	adds	r3, r0, #1
 800ebf8:	d102      	bne.n	800ec00 <_fstat_r+0x1c>
 800ebfa:	682b      	ldr	r3, [r5, #0]
 800ebfc:	b103      	cbz	r3, 800ec00 <_fstat_r+0x1c>
 800ebfe:	6023      	str	r3, [r4, #0]
 800ec00:	bd38      	pop	{r3, r4, r5, pc}
 800ec02:	bf00      	nop
 800ec04:	20000b2c 	.word	0x20000b2c

0800ec08 <_isatty_r>:
 800ec08:	b538      	push	{r3, r4, r5, lr}
 800ec0a:	4d06      	ldr	r5, [pc, #24]	; (800ec24 <_isatty_r+0x1c>)
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	4604      	mov	r4, r0
 800ec10:	4608      	mov	r0, r1
 800ec12:	602b      	str	r3, [r5, #0]
 800ec14:	f7f7 fb61 	bl	80062da <_isatty>
 800ec18:	1c43      	adds	r3, r0, #1
 800ec1a:	d102      	bne.n	800ec22 <_isatty_r+0x1a>
 800ec1c:	682b      	ldr	r3, [r5, #0]
 800ec1e:	b103      	cbz	r3, 800ec22 <_isatty_r+0x1a>
 800ec20:	6023      	str	r3, [r4, #0]
 800ec22:	bd38      	pop	{r3, r4, r5, pc}
 800ec24:	20000b2c 	.word	0x20000b2c

0800ec28 <_lseek_r>:
 800ec28:	b538      	push	{r3, r4, r5, lr}
 800ec2a:	4d07      	ldr	r5, [pc, #28]	; (800ec48 <_lseek_r+0x20>)
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	4608      	mov	r0, r1
 800ec30:	4611      	mov	r1, r2
 800ec32:	2200      	movs	r2, #0
 800ec34:	602a      	str	r2, [r5, #0]
 800ec36:	461a      	mov	r2, r3
 800ec38:	f7f7 fb5a 	bl	80062f0 <_lseek>
 800ec3c:	1c43      	adds	r3, r0, #1
 800ec3e:	d102      	bne.n	800ec46 <_lseek_r+0x1e>
 800ec40:	682b      	ldr	r3, [r5, #0]
 800ec42:	b103      	cbz	r3, 800ec46 <_lseek_r+0x1e>
 800ec44:	6023      	str	r3, [r4, #0]
 800ec46:	bd38      	pop	{r3, r4, r5, pc}
 800ec48:	20000b2c 	.word	0x20000b2c

0800ec4c <_read_r>:
 800ec4c:	b538      	push	{r3, r4, r5, lr}
 800ec4e:	4d07      	ldr	r5, [pc, #28]	; (800ec6c <_read_r+0x20>)
 800ec50:	4604      	mov	r4, r0
 800ec52:	4608      	mov	r0, r1
 800ec54:	4611      	mov	r1, r2
 800ec56:	2200      	movs	r2, #0
 800ec58:	602a      	str	r2, [r5, #0]
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	f7f7 fae8 	bl	8006230 <_read>
 800ec60:	1c43      	adds	r3, r0, #1
 800ec62:	d102      	bne.n	800ec6a <_read_r+0x1e>
 800ec64:	682b      	ldr	r3, [r5, #0]
 800ec66:	b103      	cbz	r3, 800ec6a <_read_r+0x1e>
 800ec68:	6023      	str	r3, [r4, #0]
 800ec6a:	bd38      	pop	{r3, r4, r5, pc}
 800ec6c:	20000b2c 	.word	0x20000b2c

0800ec70 <atan>:
 800ec70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec74:	ec55 4b10 	vmov	r4, r5, d0
 800ec78:	4bc3      	ldr	r3, [pc, #780]	; (800ef88 <atan+0x318>)
 800ec7a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ec7e:	429e      	cmp	r6, r3
 800ec80:	46ab      	mov	fp, r5
 800ec82:	dd18      	ble.n	800ecb6 <atan+0x46>
 800ec84:	4bc1      	ldr	r3, [pc, #772]	; (800ef8c <atan+0x31c>)
 800ec86:	429e      	cmp	r6, r3
 800ec88:	dc01      	bgt.n	800ec8e <atan+0x1e>
 800ec8a:	d109      	bne.n	800eca0 <atan+0x30>
 800ec8c:	b144      	cbz	r4, 800eca0 <atan+0x30>
 800ec8e:	4622      	mov	r2, r4
 800ec90:	462b      	mov	r3, r5
 800ec92:	4620      	mov	r0, r4
 800ec94:	4629      	mov	r1, r5
 800ec96:	f7f1 fb19 	bl	80002cc <__adddf3>
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	460d      	mov	r5, r1
 800ec9e:	e006      	b.n	800ecae <atan+0x3e>
 800eca0:	f1bb 0f00 	cmp.w	fp, #0
 800eca4:	f300 8131 	bgt.w	800ef0a <atan+0x29a>
 800eca8:	a59b      	add	r5, pc, #620	; (adr r5, 800ef18 <atan+0x2a8>)
 800ecaa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ecae:	ec45 4b10 	vmov	d0, r4, r5
 800ecb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb6:	4bb6      	ldr	r3, [pc, #728]	; (800ef90 <atan+0x320>)
 800ecb8:	429e      	cmp	r6, r3
 800ecba:	dc14      	bgt.n	800ece6 <atan+0x76>
 800ecbc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ecc0:	429e      	cmp	r6, r3
 800ecc2:	dc0d      	bgt.n	800ece0 <atan+0x70>
 800ecc4:	a396      	add	r3, pc, #600	; (adr r3, 800ef20 <atan+0x2b0>)
 800ecc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecca:	ee10 0a10 	vmov	r0, s0
 800ecce:	4629      	mov	r1, r5
 800ecd0:	f7f1 fafc 	bl	80002cc <__adddf3>
 800ecd4:	4baf      	ldr	r3, [pc, #700]	; (800ef94 <atan+0x324>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f7f1 ff3e 	bl	8000b58 <__aeabi_dcmpgt>
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	d1e6      	bne.n	800ecae <atan+0x3e>
 800ece0:	f04f 3aff 	mov.w	sl, #4294967295
 800ece4:	e02b      	b.n	800ed3e <atan+0xce>
 800ece6:	f000 f963 	bl	800efb0 <fabs>
 800ecea:	4bab      	ldr	r3, [pc, #684]	; (800ef98 <atan+0x328>)
 800ecec:	429e      	cmp	r6, r3
 800ecee:	ec55 4b10 	vmov	r4, r5, d0
 800ecf2:	f300 80bf 	bgt.w	800ee74 <atan+0x204>
 800ecf6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ecfa:	429e      	cmp	r6, r3
 800ecfc:	f300 80a0 	bgt.w	800ee40 <atan+0x1d0>
 800ed00:	ee10 2a10 	vmov	r2, s0
 800ed04:	ee10 0a10 	vmov	r0, s0
 800ed08:	462b      	mov	r3, r5
 800ed0a:	4629      	mov	r1, r5
 800ed0c:	f7f1 fade 	bl	80002cc <__adddf3>
 800ed10:	4ba0      	ldr	r3, [pc, #640]	; (800ef94 <atan+0x324>)
 800ed12:	2200      	movs	r2, #0
 800ed14:	f7f1 fad8 	bl	80002c8 <__aeabi_dsub>
 800ed18:	2200      	movs	r2, #0
 800ed1a:	4606      	mov	r6, r0
 800ed1c:	460f      	mov	r7, r1
 800ed1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ed22:	4620      	mov	r0, r4
 800ed24:	4629      	mov	r1, r5
 800ed26:	f7f1 fad1 	bl	80002cc <__adddf3>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	4630      	mov	r0, r6
 800ed30:	4639      	mov	r1, r7
 800ed32:	f7f1 fdab 	bl	800088c <__aeabi_ddiv>
 800ed36:	f04f 0a00 	mov.w	sl, #0
 800ed3a:	4604      	mov	r4, r0
 800ed3c:	460d      	mov	r5, r1
 800ed3e:	4622      	mov	r2, r4
 800ed40:	462b      	mov	r3, r5
 800ed42:	4620      	mov	r0, r4
 800ed44:	4629      	mov	r1, r5
 800ed46:	f7f1 fc77 	bl	8000638 <__aeabi_dmul>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	4680      	mov	r8, r0
 800ed50:	4689      	mov	r9, r1
 800ed52:	f7f1 fc71 	bl	8000638 <__aeabi_dmul>
 800ed56:	a374      	add	r3, pc, #464	; (adr r3, 800ef28 <atan+0x2b8>)
 800ed58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5c:	4606      	mov	r6, r0
 800ed5e:	460f      	mov	r7, r1
 800ed60:	f7f1 fc6a 	bl	8000638 <__aeabi_dmul>
 800ed64:	a372      	add	r3, pc, #456	; (adr r3, 800ef30 <atan+0x2c0>)
 800ed66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6a:	f7f1 faaf 	bl	80002cc <__adddf3>
 800ed6e:	4632      	mov	r2, r6
 800ed70:	463b      	mov	r3, r7
 800ed72:	f7f1 fc61 	bl	8000638 <__aeabi_dmul>
 800ed76:	a370      	add	r3, pc, #448	; (adr r3, 800ef38 <atan+0x2c8>)
 800ed78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7c:	f7f1 faa6 	bl	80002cc <__adddf3>
 800ed80:	4632      	mov	r2, r6
 800ed82:	463b      	mov	r3, r7
 800ed84:	f7f1 fc58 	bl	8000638 <__aeabi_dmul>
 800ed88:	a36d      	add	r3, pc, #436	; (adr r3, 800ef40 <atan+0x2d0>)
 800ed8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8e:	f7f1 fa9d 	bl	80002cc <__adddf3>
 800ed92:	4632      	mov	r2, r6
 800ed94:	463b      	mov	r3, r7
 800ed96:	f7f1 fc4f 	bl	8000638 <__aeabi_dmul>
 800ed9a:	a36b      	add	r3, pc, #428	; (adr r3, 800ef48 <atan+0x2d8>)
 800ed9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda0:	f7f1 fa94 	bl	80002cc <__adddf3>
 800eda4:	4632      	mov	r2, r6
 800eda6:	463b      	mov	r3, r7
 800eda8:	f7f1 fc46 	bl	8000638 <__aeabi_dmul>
 800edac:	a368      	add	r3, pc, #416	; (adr r3, 800ef50 <atan+0x2e0>)
 800edae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb2:	f7f1 fa8b 	bl	80002cc <__adddf3>
 800edb6:	4642      	mov	r2, r8
 800edb8:	464b      	mov	r3, r9
 800edba:	f7f1 fc3d 	bl	8000638 <__aeabi_dmul>
 800edbe:	a366      	add	r3, pc, #408	; (adr r3, 800ef58 <atan+0x2e8>)
 800edc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc4:	4680      	mov	r8, r0
 800edc6:	4689      	mov	r9, r1
 800edc8:	4630      	mov	r0, r6
 800edca:	4639      	mov	r1, r7
 800edcc:	f7f1 fc34 	bl	8000638 <__aeabi_dmul>
 800edd0:	a363      	add	r3, pc, #396	; (adr r3, 800ef60 <atan+0x2f0>)
 800edd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd6:	f7f1 fa77 	bl	80002c8 <__aeabi_dsub>
 800edda:	4632      	mov	r2, r6
 800eddc:	463b      	mov	r3, r7
 800edde:	f7f1 fc2b 	bl	8000638 <__aeabi_dmul>
 800ede2:	a361      	add	r3, pc, #388	; (adr r3, 800ef68 <atan+0x2f8>)
 800ede4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede8:	f7f1 fa6e 	bl	80002c8 <__aeabi_dsub>
 800edec:	4632      	mov	r2, r6
 800edee:	463b      	mov	r3, r7
 800edf0:	f7f1 fc22 	bl	8000638 <__aeabi_dmul>
 800edf4:	a35e      	add	r3, pc, #376	; (adr r3, 800ef70 <atan+0x300>)
 800edf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfa:	f7f1 fa65 	bl	80002c8 <__aeabi_dsub>
 800edfe:	4632      	mov	r2, r6
 800ee00:	463b      	mov	r3, r7
 800ee02:	f7f1 fc19 	bl	8000638 <__aeabi_dmul>
 800ee06:	a35c      	add	r3, pc, #368	; (adr r3, 800ef78 <atan+0x308>)
 800ee08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0c:	f7f1 fa5c 	bl	80002c8 <__aeabi_dsub>
 800ee10:	4632      	mov	r2, r6
 800ee12:	463b      	mov	r3, r7
 800ee14:	f7f1 fc10 	bl	8000638 <__aeabi_dmul>
 800ee18:	4602      	mov	r2, r0
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	4640      	mov	r0, r8
 800ee1e:	4649      	mov	r1, r9
 800ee20:	f7f1 fa54 	bl	80002cc <__adddf3>
 800ee24:	4622      	mov	r2, r4
 800ee26:	462b      	mov	r3, r5
 800ee28:	f7f1 fc06 	bl	8000638 <__aeabi_dmul>
 800ee2c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ee30:	4602      	mov	r2, r0
 800ee32:	460b      	mov	r3, r1
 800ee34:	d14b      	bne.n	800eece <atan+0x25e>
 800ee36:	4620      	mov	r0, r4
 800ee38:	4629      	mov	r1, r5
 800ee3a:	f7f1 fa45 	bl	80002c8 <__aeabi_dsub>
 800ee3e:	e72c      	b.n	800ec9a <atan+0x2a>
 800ee40:	ee10 0a10 	vmov	r0, s0
 800ee44:	4b53      	ldr	r3, [pc, #332]	; (800ef94 <atan+0x324>)
 800ee46:	2200      	movs	r2, #0
 800ee48:	4629      	mov	r1, r5
 800ee4a:	f7f1 fa3d 	bl	80002c8 <__aeabi_dsub>
 800ee4e:	4b51      	ldr	r3, [pc, #324]	; (800ef94 <atan+0x324>)
 800ee50:	4606      	mov	r6, r0
 800ee52:	460f      	mov	r7, r1
 800ee54:	2200      	movs	r2, #0
 800ee56:	4620      	mov	r0, r4
 800ee58:	4629      	mov	r1, r5
 800ee5a:	f7f1 fa37 	bl	80002cc <__adddf3>
 800ee5e:	4602      	mov	r2, r0
 800ee60:	460b      	mov	r3, r1
 800ee62:	4630      	mov	r0, r6
 800ee64:	4639      	mov	r1, r7
 800ee66:	f7f1 fd11 	bl	800088c <__aeabi_ddiv>
 800ee6a:	f04f 0a01 	mov.w	sl, #1
 800ee6e:	4604      	mov	r4, r0
 800ee70:	460d      	mov	r5, r1
 800ee72:	e764      	b.n	800ed3e <atan+0xce>
 800ee74:	4b49      	ldr	r3, [pc, #292]	; (800ef9c <atan+0x32c>)
 800ee76:	429e      	cmp	r6, r3
 800ee78:	da1d      	bge.n	800eeb6 <atan+0x246>
 800ee7a:	ee10 0a10 	vmov	r0, s0
 800ee7e:	4b48      	ldr	r3, [pc, #288]	; (800efa0 <atan+0x330>)
 800ee80:	2200      	movs	r2, #0
 800ee82:	4629      	mov	r1, r5
 800ee84:	f7f1 fa20 	bl	80002c8 <__aeabi_dsub>
 800ee88:	4b45      	ldr	r3, [pc, #276]	; (800efa0 <atan+0x330>)
 800ee8a:	4606      	mov	r6, r0
 800ee8c:	460f      	mov	r7, r1
 800ee8e:	2200      	movs	r2, #0
 800ee90:	4620      	mov	r0, r4
 800ee92:	4629      	mov	r1, r5
 800ee94:	f7f1 fbd0 	bl	8000638 <__aeabi_dmul>
 800ee98:	4b3e      	ldr	r3, [pc, #248]	; (800ef94 <atan+0x324>)
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f7f1 fa16 	bl	80002cc <__adddf3>
 800eea0:	4602      	mov	r2, r0
 800eea2:	460b      	mov	r3, r1
 800eea4:	4630      	mov	r0, r6
 800eea6:	4639      	mov	r1, r7
 800eea8:	f7f1 fcf0 	bl	800088c <__aeabi_ddiv>
 800eeac:	f04f 0a02 	mov.w	sl, #2
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	460d      	mov	r5, r1
 800eeb4:	e743      	b.n	800ed3e <atan+0xce>
 800eeb6:	462b      	mov	r3, r5
 800eeb8:	ee10 2a10 	vmov	r2, s0
 800eebc:	4939      	ldr	r1, [pc, #228]	; (800efa4 <atan+0x334>)
 800eebe:	2000      	movs	r0, #0
 800eec0:	f7f1 fce4 	bl	800088c <__aeabi_ddiv>
 800eec4:	f04f 0a03 	mov.w	sl, #3
 800eec8:	4604      	mov	r4, r0
 800eeca:	460d      	mov	r5, r1
 800eecc:	e737      	b.n	800ed3e <atan+0xce>
 800eece:	4b36      	ldr	r3, [pc, #216]	; (800efa8 <atan+0x338>)
 800eed0:	4e36      	ldr	r6, [pc, #216]	; (800efac <atan+0x33c>)
 800eed2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800eed6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800eeda:	e9da 2300 	ldrd	r2, r3, [sl]
 800eede:	f7f1 f9f3 	bl	80002c8 <__aeabi_dsub>
 800eee2:	4622      	mov	r2, r4
 800eee4:	462b      	mov	r3, r5
 800eee6:	f7f1 f9ef 	bl	80002c8 <__aeabi_dsub>
 800eeea:	4602      	mov	r2, r0
 800eeec:	460b      	mov	r3, r1
 800eeee:	e9d6 0100 	ldrd	r0, r1, [r6]
 800eef2:	f7f1 f9e9 	bl	80002c8 <__aeabi_dsub>
 800eef6:	f1bb 0f00 	cmp.w	fp, #0
 800eefa:	4604      	mov	r4, r0
 800eefc:	460d      	mov	r5, r1
 800eefe:	f6bf aed6 	bge.w	800ecae <atan+0x3e>
 800ef02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef06:	461d      	mov	r5, r3
 800ef08:	e6d1      	b.n	800ecae <atan+0x3e>
 800ef0a:	a51d      	add	r5, pc, #116	; (adr r5, 800ef80 <atan+0x310>)
 800ef0c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ef10:	e6cd      	b.n	800ecae <atan+0x3e>
 800ef12:	bf00      	nop
 800ef14:	f3af 8000 	nop.w
 800ef18:	54442d18 	.word	0x54442d18
 800ef1c:	bff921fb 	.word	0xbff921fb
 800ef20:	8800759c 	.word	0x8800759c
 800ef24:	7e37e43c 	.word	0x7e37e43c
 800ef28:	e322da11 	.word	0xe322da11
 800ef2c:	3f90ad3a 	.word	0x3f90ad3a
 800ef30:	24760deb 	.word	0x24760deb
 800ef34:	3fa97b4b 	.word	0x3fa97b4b
 800ef38:	a0d03d51 	.word	0xa0d03d51
 800ef3c:	3fb10d66 	.word	0x3fb10d66
 800ef40:	c54c206e 	.word	0xc54c206e
 800ef44:	3fb745cd 	.word	0x3fb745cd
 800ef48:	920083ff 	.word	0x920083ff
 800ef4c:	3fc24924 	.word	0x3fc24924
 800ef50:	5555550d 	.word	0x5555550d
 800ef54:	3fd55555 	.word	0x3fd55555
 800ef58:	2c6a6c2f 	.word	0x2c6a6c2f
 800ef5c:	bfa2b444 	.word	0xbfa2b444
 800ef60:	52defd9a 	.word	0x52defd9a
 800ef64:	3fadde2d 	.word	0x3fadde2d
 800ef68:	af749a6d 	.word	0xaf749a6d
 800ef6c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ef70:	fe231671 	.word	0xfe231671
 800ef74:	3fbc71c6 	.word	0x3fbc71c6
 800ef78:	9998ebc4 	.word	0x9998ebc4
 800ef7c:	3fc99999 	.word	0x3fc99999
 800ef80:	54442d18 	.word	0x54442d18
 800ef84:	3ff921fb 	.word	0x3ff921fb
 800ef88:	440fffff 	.word	0x440fffff
 800ef8c:	7ff00000 	.word	0x7ff00000
 800ef90:	3fdbffff 	.word	0x3fdbffff
 800ef94:	3ff00000 	.word	0x3ff00000
 800ef98:	3ff2ffff 	.word	0x3ff2ffff
 800ef9c:	40038000 	.word	0x40038000
 800efa0:	3ff80000 	.word	0x3ff80000
 800efa4:	bff00000 	.word	0xbff00000
 800efa8:	08010680 	.word	0x08010680
 800efac:	08010660 	.word	0x08010660

0800efb0 <fabs>:
 800efb0:	ec51 0b10 	vmov	r0, r1, d0
 800efb4:	ee10 2a10 	vmov	r2, s0
 800efb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800efbc:	ec43 2b10 	vmov	d0, r2, r3
 800efc0:	4770      	bx	lr
 800efc2:	0000      	movs	r0, r0
 800efc4:	0000      	movs	r0, r0
	...

0800efc8 <tan>:
 800efc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800efca:	ec53 2b10 	vmov	r2, r3, d0
 800efce:	4816      	ldr	r0, [pc, #88]	; (800f028 <tan+0x60>)
 800efd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800efd4:	4281      	cmp	r1, r0
 800efd6:	dc07      	bgt.n	800efe8 <tan+0x20>
 800efd8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800f020 <tan+0x58>
 800efdc:	2001      	movs	r0, #1
 800efde:	b005      	add	sp, #20
 800efe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800efe4:	f000 bd80 	b.w	800fae8 <__kernel_tan>
 800efe8:	4810      	ldr	r0, [pc, #64]	; (800f02c <tan+0x64>)
 800efea:	4281      	cmp	r1, r0
 800efec:	dd09      	ble.n	800f002 <tan+0x3a>
 800efee:	ee10 0a10 	vmov	r0, s0
 800eff2:	4619      	mov	r1, r3
 800eff4:	f7f1 f968 	bl	80002c8 <__aeabi_dsub>
 800eff8:	ec41 0b10 	vmov	d0, r0, r1
 800effc:	b005      	add	sp, #20
 800effe:	f85d fb04 	ldr.w	pc, [sp], #4
 800f002:	4668      	mov	r0, sp
 800f004:	f000 f814 	bl	800f030 <__ieee754_rem_pio2>
 800f008:	0040      	lsls	r0, r0, #1
 800f00a:	f000 0002 	and.w	r0, r0, #2
 800f00e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f012:	ed9d 0b00 	vldr	d0, [sp]
 800f016:	f1c0 0001 	rsb	r0, r0, #1
 800f01a:	f000 fd65 	bl	800fae8 <__kernel_tan>
 800f01e:	e7ed      	b.n	800effc <tan+0x34>
	...
 800f028:	3fe921fb 	.word	0x3fe921fb
 800f02c:	7fefffff 	.word	0x7fefffff

0800f030 <__ieee754_rem_pio2>:
 800f030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f034:	ed2d 8b02 	vpush	{d8}
 800f038:	ec55 4b10 	vmov	r4, r5, d0
 800f03c:	4bca      	ldr	r3, [pc, #808]	; (800f368 <__ieee754_rem_pio2+0x338>)
 800f03e:	b08b      	sub	sp, #44	; 0x2c
 800f040:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f044:	4598      	cmp	r8, r3
 800f046:	4682      	mov	sl, r0
 800f048:	9502      	str	r5, [sp, #8]
 800f04a:	dc08      	bgt.n	800f05e <__ieee754_rem_pio2+0x2e>
 800f04c:	2200      	movs	r2, #0
 800f04e:	2300      	movs	r3, #0
 800f050:	ed80 0b00 	vstr	d0, [r0]
 800f054:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f058:	f04f 0b00 	mov.w	fp, #0
 800f05c:	e028      	b.n	800f0b0 <__ieee754_rem_pio2+0x80>
 800f05e:	4bc3      	ldr	r3, [pc, #780]	; (800f36c <__ieee754_rem_pio2+0x33c>)
 800f060:	4598      	cmp	r8, r3
 800f062:	dc78      	bgt.n	800f156 <__ieee754_rem_pio2+0x126>
 800f064:	9b02      	ldr	r3, [sp, #8]
 800f066:	4ec2      	ldr	r6, [pc, #776]	; (800f370 <__ieee754_rem_pio2+0x340>)
 800f068:	2b00      	cmp	r3, #0
 800f06a:	ee10 0a10 	vmov	r0, s0
 800f06e:	a3b0      	add	r3, pc, #704	; (adr r3, 800f330 <__ieee754_rem_pio2+0x300>)
 800f070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f074:	4629      	mov	r1, r5
 800f076:	dd39      	ble.n	800f0ec <__ieee754_rem_pio2+0xbc>
 800f078:	f7f1 f926 	bl	80002c8 <__aeabi_dsub>
 800f07c:	45b0      	cmp	r8, r6
 800f07e:	4604      	mov	r4, r0
 800f080:	460d      	mov	r5, r1
 800f082:	d01b      	beq.n	800f0bc <__ieee754_rem_pio2+0x8c>
 800f084:	a3ac      	add	r3, pc, #688	; (adr r3, 800f338 <__ieee754_rem_pio2+0x308>)
 800f086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f08a:	f7f1 f91d 	bl	80002c8 <__aeabi_dsub>
 800f08e:	4602      	mov	r2, r0
 800f090:	460b      	mov	r3, r1
 800f092:	e9ca 2300 	strd	r2, r3, [sl]
 800f096:	4620      	mov	r0, r4
 800f098:	4629      	mov	r1, r5
 800f09a:	f7f1 f915 	bl	80002c8 <__aeabi_dsub>
 800f09e:	a3a6      	add	r3, pc, #664	; (adr r3, 800f338 <__ieee754_rem_pio2+0x308>)
 800f0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a4:	f7f1 f910 	bl	80002c8 <__aeabi_dsub>
 800f0a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f0ac:	f04f 0b01 	mov.w	fp, #1
 800f0b0:	4658      	mov	r0, fp
 800f0b2:	b00b      	add	sp, #44	; 0x2c
 800f0b4:	ecbd 8b02 	vpop	{d8}
 800f0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0bc:	a3a0      	add	r3, pc, #640	; (adr r3, 800f340 <__ieee754_rem_pio2+0x310>)
 800f0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c2:	f7f1 f901 	bl	80002c8 <__aeabi_dsub>
 800f0c6:	a3a0      	add	r3, pc, #640	; (adr r3, 800f348 <__ieee754_rem_pio2+0x318>)
 800f0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	460d      	mov	r5, r1
 800f0d0:	f7f1 f8fa 	bl	80002c8 <__aeabi_dsub>
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	460b      	mov	r3, r1
 800f0d8:	e9ca 2300 	strd	r2, r3, [sl]
 800f0dc:	4620      	mov	r0, r4
 800f0de:	4629      	mov	r1, r5
 800f0e0:	f7f1 f8f2 	bl	80002c8 <__aeabi_dsub>
 800f0e4:	a398      	add	r3, pc, #608	; (adr r3, 800f348 <__ieee754_rem_pio2+0x318>)
 800f0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ea:	e7db      	b.n	800f0a4 <__ieee754_rem_pio2+0x74>
 800f0ec:	f7f1 f8ee 	bl	80002cc <__adddf3>
 800f0f0:	45b0      	cmp	r8, r6
 800f0f2:	4604      	mov	r4, r0
 800f0f4:	460d      	mov	r5, r1
 800f0f6:	d016      	beq.n	800f126 <__ieee754_rem_pio2+0xf6>
 800f0f8:	a38f      	add	r3, pc, #572	; (adr r3, 800f338 <__ieee754_rem_pio2+0x308>)
 800f0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fe:	f7f1 f8e5 	bl	80002cc <__adddf3>
 800f102:	4602      	mov	r2, r0
 800f104:	460b      	mov	r3, r1
 800f106:	e9ca 2300 	strd	r2, r3, [sl]
 800f10a:	4620      	mov	r0, r4
 800f10c:	4629      	mov	r1, r5
 800f10e:	f7f1 f8db 	bl	80002c8 <__aeabi_dsub>
 800f112:	a389      	add	r3, pc, #548	; (adr r3, 800f338 <__ieee754_rem_pio2+0x308>)
 800f114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f118:	f7f1 f8d8 	bl	80002cc <__adddf3>
 800f11c:	f04f 3bff 	mov.w	fp, #4294967295
 800f120:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f124:	e7c4      	b.n	800f0b0 <__ieee754_rem_pio2+0x80>
 800f126:	a386      	add	r3, pc, #536	; (adr r3, 800f340 <__ieee754_rem_pio2+0x310>)
 800f128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12c:	f7f1 f8ce 	bl	80002cc <__adddf3>
 800f130:	a385      	add	r3, pc, #532	; (adr r3, 800f348 <__ieee754_rem_pio2+0x318>)
 800f132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f136:	4604      	mov	r4, r0
 800f138:	460d      	mov	r5, r1
 800f13a:	f7f1 f8c7 	bl	80002cc <__adddf3>
 800f13e:	4602      	mov	r2, r0
 800f140:	460b      	mov	r3, r1
 800f142:	e9ca 2300 	strd	r2, r3, [sl]
 800f146:	4620      	mov	r0, r4
 800f148:	4629      	mov	r1, r5
 800f14a:	f7f1 f8bd 	bl	80002c8 <__aeabi_dsub>
 800f14e:	a37e      	add	r3, pc, #504	; (adr r3, 800f348 <__ieee754_rem_pio2+0x318>)
 800f150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f154:	e7e0      	b.n	800f118 <__ieee754_rem_pio2+0xe8>
 800f156:	4b87      	ldr	r3, [pc, #540]	; (800f374 <__ieee754_rem_pio2+0x344>)
 800f158:	4598      	cmp	r8, r3
 800f15a:	f300 80d9 	bgt.w	800f310 <__ieee754_rem_pio2+0x2e0>
 800f15e:	f7ff ff27 	bl	800efb0 <fabs>
 800f162:	ec55 4b10 	vmov	r4, r5, d0
 800f166:	ee10 0a10 	vmov	r0, s0
 800f16a:	a379      	add	r3, pc, #484	; (adr r3, 800f350 <__ieee754_rem_pio2+0x320>)
 800f16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f170:	4629      	mov	r1, r5
 800f172:	f7f1 fa61 	bl	8000638 <__aeabi_dmul>
 800f176:	4b80      	ldr	r3, [pc, #512]	; (800f378 <__ieee754_rem_pio2+0x348>)
 800f178:	2200      	movs	r2, #0
 800f17a:	f7f1 f8a7 	bl	80002cc <__adddf3>
 800f17e:	f7f1 fd0b 	bl	8000b98 <__aeabi_d2iz>
 800f182:	4683      	mov	fp, r0
 800f184:	f7f1 f9ee 	bl	8000564 <__aeabi_i2d>
 800f188:	4602      	mov	r2, r0
 800f18a:	460b      	mov	r3, r1
 800f18c:	ec43 2b18 	vmov	d8, r2, r3
 800f190:	a367      	add	r3, pc, #412	; (adr r3, 800f330 <__ieee754_rem_pio2+0x300>)
 800f192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f196:	f7f1 fa4f 	bl	8000638 <__aeabi_dmul>
 800f19a:	4602      	mov	r2, r0
 800f19c:	460b      	mov	r3, r1
 800f19e:	4620      	mov	r0, r4
 800f1a0:	4629      	mov	r1, r5
 800f1a2:	f7f1 f891 	bl	80002c8 <__aeabi_dsub>
 800f1a6:	a364      	add	r3, pc, #400	; (adr r3, 800f338 <__ieee754_rem_pio2+0x308>)
 800f1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ac:	4606      	mov	r6, r0
 800f1ae:	460f      	mov	r7, r1
 800f1b0:	ec51 0b18 	vmov	r0, r1, d8
 800f1b4:	f7f1 fa40 	bl	8000638 <__aeabi_dmul>
 800f1b8:	f1bb 0f1f 	cmp.w	fp, #31
 800f1bc:	4604      	mov	r4, r0
 800f1be:	460d      	mov	r5, r1
 800f1c0:	dc0d      	bgt.n	800f1de <__ieee754_rem_pio2+0x1ae>
 800f1c2:	4b6e      	ldr	r3, [pc, #440]	; (800f37c <__ieee754_rem_pio2+0x34c>)
 800f1c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1cc:	4543      	cmp	r3, r8
 800f1ce:	d006      	beq.n	800f1de <__ieee754_rem_pio2+0x1ae>
 800f1d0:	4622      	mov	r2, r4
 800f1d2:	462b      	mov	r3, r5
 800f1d4:	4630      	mov	r0, r6
 800f1d6:	4639      	mov	r1, r7
 800f1d8:	f7f1 f876 	bl	80002c8 <__aeabi_dsub>
 800f1dc:	e00f      	b.n	800f1fe <__ieee754_rem_pio2+0x1ce>
 800f1de:	462b      	mov	r3, r5
 800f1e0:	4622      	mov	r2, r4
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	4639      	mov	r1, r7
 800f1e6:	f7f1 f86f 	bl	80002c8 <__aeabi_dsub>
 800f1ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f1ee:	9303      	str	r3, [sp, #12]
 800f1f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f1f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f1f8:	f1b8 0f10 	cmp.w	r8, #16
 800f1fc:	dc02      	bgt.n	800f204 <__ieee754_rem_pio2+0x1d4>
 800f1fe:	e9ca 0100 	strd	r0, r1, [sl]
 800f202:	e039      	b.n	800f278 <__ieee754_rem_pio2+0x248>
 800f204:	a34e      	add	r3, pc, #312	; (adr r3, 800f340 <__ieee754_rem_pio2+0x310>)
 800f206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20a:	ec51 0b18 	vmov	r0, r1, d8
 800f20e:	f7f1 fa13 	bl	8000638 <__aeabi_dmul>
 800f212:	4604      	mov	r4, r0
 800f214:	460d      	mov	r5, r1
 800f216:	4602      	mov	r2, r0
 800f218:	460b      	mov	r3, r1
 800f21a:	4630      	mov	r0, r6
 800f21c:	4639      	mov	r1, r7
 800f21e:	f7f1 f853 	bl	80002c8 <__aeabi_dsub>
 800f222:	4602      	mov	r2, r0
 800f224:	460b      	mov	r3, r1
 800f226:	4680      	mov	r8, r0
 800f228:	4689      	mov	r9, r1
 800f22a:	4630      	mov	r0, r6
 800f22c:	4639      	mov	r1, r7
 800f22e:	f7f1 f84b 	bl	80002c8 <__aeabi_dsub>
 800f232:	4622      	mov	r2, r4
 800f234:	462b      	mov	r3, r5
 800f236:	f7f1 f847 	bl	80002c8 <__aeabi_dsub>
 800f23a:	a343      	add	r3, pc, #268	; (adr r3, 800f348 <__ieee754_rem_pio2+0x318>)
 800f23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f240:	4604      	mov	r4, r0
 800f242:	460d      	mov	r5, r1
 800f244:	ec51 0b18 	vmov	r0, r1, d8
 800f248:	f7f1 f9f6 	bl	8000638 <__aeabi_dmul>
 800f24c:	4622      	mov	r2, r4
 800f24e:	462b      	mov	r3, r5
 800f250:	f7f1 f83a 	bl	80002c8 <__aeabi_dsub>
 800f254:	4602      	mov	r2, r0
 800f256:	460b      	mov	r3, r1
 800f258:	4604      	mov	r4, r0
 800f25a:	460d      	mov	r5, r1
 800f25c:	4640      	mov	r0, r8
 800f25e:	4649      	mov	r1, r9
 800f260:	f7f1 f832 	bl	80002c8 <__aeabi_dsub>
 800f264:	9a03      	ldr	r2, [sp, #12]
 800f266:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f26a:	1ad3      	subs	r3, r2, r3
 800f26c:	2b31      	cmp	r3, #49	; 0x31
 800f26e:	dc24      	bgt.n	800f2ba <__ieee754_rem_pio2+0x28a>
 800f270:	e9ca 0100 	strd	r0, r1, [sl]
 800f274:	4646      	mov	r6, r8
 800f276:	464f      	mov	r7, r9
 800f278:	e9da 8900 	ldrd	r8, r9, [sl]
 800f27c:	4630      	mov	r0, r6
 800f27e:	4642      	mov	r2, r8
 800f280:	464b      	mov	r3, r9
 800f282:	4639      	mov	r1, r7
 800f284:	f7f1 f820 	bl	80002c8 <__aeabi_dsub>
 800f288:	462b      	mov	r3, r5
 800f28a:	4622      	mov	r2, r4
 800f28c:	f7f1 f81c 	bl	80002c8 <__aeabi_dsub>
 800f290:	9b02      	ldr	r3, [sp, #8]
 800f292:	2b00      	cmp	r3, #0
 800f294:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f298:	f6bf af0a 	bge.w	800f0b0 <__ieee754_rem_pio2+0x80>
 800f29c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f2a0:	f8ca 3004 	str.w	r3, [sl, #4]
 800f2a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f2a8:	f8ca 8000 	str.w	r8, [sl]
 800f2ac:	f8ca 0008 	str.w	r0, [sl, #8]
 800f2b0:	f8ca 300c 	str.w	r3, [sl, #12]
 800f2b4:	f1cb 0b00 	rsb	fp, fp, #0
 800f2b8:	e6fa      	b.n	800f0b0 <__ieee754_rem_pio2+0x80>
 800f2ba:	a327      	add	r3, pc, #156	; (adr r3, 800f358 <__ieee754_rem_pio2+0x328>)
 800f2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c0:	ec51 0b18 	vmov	r0, r1, d8
 800f2c4:	f7f1 f9b8 	bl	8000638 <__aeabi_dmul>
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	460d      	mov	r5, r1
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	460b      	mov	r3, r1
 800f2d0:	4640      	mov	r0, r8
 800f2d2:	4649      	mov	r1, r9
 800f2d4:	f7f0 fff8 	bl	80002c8 <__aeabi_dsub>
 800f2d8:	4602      	mov	r2, r0
 800f2da:	460b      	mov	r3, r1
 800f2dc:	4606      	mov	r6, r0
 800f2de:	460f      	mov	r7, r1
 800f2e0:	4640      	mov	r0, r8
 800f2e2:	4649      	mov	r1, r9
 800f2e4:	f7f0 fff0 	bl	80002c8 <__aeabi_dsub>
 800f2e8:	4622      	mov	r2, r4
 800f2ea:	462b      	mov	r3, r5
 800f2ec:	f7f0 ffec 	bl	80002c8 <__aeabi_dsub>
 800f2f0:	a31b      	add	r3, pc, #108	; (adr r3, 800f360 <__ieee754_rem_pio2+0x330>)
 800f2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	460d      	mov	r5, r1
 800f2fa:	ec51 0b18 	vmov	r0, r1, d8
 800f2fe:	f7f1 f99b 	bl	8000638 <__aeabi_dmul>
 800f302:	4622      	mov	r2, r4
 800f304:	462b      	mov	r3, r5
 800f306:	f7f0 ffdf 	bl	80002c8 <__aeabi_dsub>
 800f30a:	4604      	mov	r4, r0
 800f30c:	460d      	mov	r5, r1
 800f30e:	e75f      	b.n	800f1d0 <__ieee754_rem_pio2+0x1a0>
 800f310:	4b1b      	ldr	r3, [pc, #108]	; (800f380 <__ieee754_rem_pio2+0x350>)
 800f312:	4598      	cmp	r8, r3
 800f314:	dd36      	ble.n	800f384 <__ieee754_rem_pio2+0x354>
 800f316:	ee10 2a10 	vmov	r2, s0
 800f31a:	462b      	mov	r3, r5
 800f31c:	4620      	mov	r0, r4
 800f31e:	4629      	mov	r1, r5
 800f320:	f7f0 ffd2 	bl	80002c8 <__aeabi_dsub>
 800f324:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f328:	e9ca 0100 	strd	r0, r1, [sl]
 800f32c:	e694      	b.n	800f058 <__ieee754_rem_pio2+0x28>
 800f32e:	bf00      	nop
 800f330:	54400000 	.word	0x54400000
 800f334:	3ff921fb 	.word	0x3ff921fb
 800f338:	1a626331 	.word	0x1a626331
 800f33c:	3dd0b461 	.word	0x3dd0b461
 800f340:	1a600000 	.word	0x1a600000
 800f344:	3dd0b461 	.word	0x3dd0b461
 800f348:	2e037073 	.word	0x2e037073
 800f34c:	3ba3198a 	.word	0x3ba3198a
 800f350:	6dc9c883 	.word	0x6dc9c883
 800f354:	3fe45f30 	.word	0x3fe45f30
 800f358:	2e000000 	.word	0x2e000000
 800f35c:	3ba3198a 	.word	0x3ba3198a
 800f360:	252049c1 	.word	0x252049c1
 800f364:	397b839a 	.word	0x397b839a
 800f368:	3fe921fb 	.word	0x3fe921fb
 800f36c:	4002d97b 	.word	0x4002d97b
 800f370:	3ff921fb 	.word	0x3ff921fb
 800f374:	413921fb 	.word	0x413921fb
 800f378:	3fe00000 	.word	0x3fe00000
 800f37c:	080106a0 	.word	0x080106a0
 800f380:	7fefffff 	.word	0x7fefffff
 800f384:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f388:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f38c:	ee10 0a10 	vmov	r0, s0
 800f390:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f394:	ee10 6a10 	vmov	r6, s0
 800f398:	460f      	mov	r7, r1
 800f39a:	f7f1 fbfd 	bl	8000b98 <__aeabi_d2iz>
 800f39e:	f7f1 f8e1 	bl	8000564 <__aeabi_i2d>
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	4630      	mov	r0, r6
 800f3a8:	4639      	mov	r1, r7
 800f3aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f3ae:	f7f0 ff8b 	bl	80002c8 <__aeabi_dsub>
 800f3b2:	4b23      	ldr	r3, [pc, #140]	; (800f440 <__ieee754_rem_pio2+0x410>)
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	f7f1 f93f 	bl	8000638 <__aeabi_dmul>
 800f3ba:	460f      	mov	r7, r1
 800f3bc:	4606      	mov	r6, r0
 800f3be:	f7f1 fbeb 	bl	8000b98 <__aeabi_d2iz>
 800f3c2:	f7f1 f8cf 	bl	8000564 <__aeabi_i2d>
 800f3c6:	4602      	mov	r2, r0
 800f3c8:	460b      	mov	r3, r1
 800f3ca:	4630      	mov	r0, r6
 800f3cc:	4639      	mov	r1, r7
 800f3ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f3d2:	f7f0 ff79 	bl	80002c8 <__aeabi_dsub>
 800f3d6:	4b1a      	ldr	r3, [pc, #104]	; (800f440 <__ieee754_rem_pio2+0x410>)
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f7f1 f92d 	bl	8000638 <__aeabi_dmul>
 800f3de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f3e2:	ad04      	add	r5, sp, #16
 800f3e4:	f04f 0803 	mov.w	r8, #3
 800f3e8:	46a9      	mov	r9, r5
 800f3ea:	2600      	movs	r6, #0
 800f3ec:	2700      	movs	r7, #0
 800f3ee:	4632      	mov	r2, r6
 800f3f0:	463b      	mov	r3, r7
 800f3f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f3f6:	46c3      	mov	fp, r8
 800f3f8:	3d08      	subs	r5, #8
 800f3fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800f3fe:	f7f1 fb83 	bl	8000b08 <__aeabi_dcmpeq>
 800f402:	2800      	cmp	r0, #0
 800f404:	d1f3      	bne.n	800f3ee <__ieee754_rem_pio2+0x3be>
 800f406:	4b0f      	ldr	r3, [pc, #60]	; (800f444 <__ieee754_rem_pio2+0x414>)
 800f408:	9301      	str	r3, [sp, #4]
 800f40a:	2302      	movs	r3, #2
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	4622      	mov	r2, r4
 800f410:	465b      	mov	r3, fp
 800f412:	4651      	mov	r1, sl
 800f414:	4648      	mov	r0, r9
 800f416:	f000 f817 	bl	800f448 <__kernel_rem_pio2>
 800f41a:	9b02      	ldr	r3, [sp, #8]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	4683      	mov	fp, r0
 800f420:	f6bf ae46 	bge.w	800f0b0 <__ieee754_rem_pio2+0x80>
 800f424:	e9da 2100 	ldrd	r2, r1, [sl]
 800f428:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f42c:	e9ca 2300 	strd	r2, r3, [sl]
 800f430:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f438:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f43c:	e73a      	b.n	800f2b4 <__ieee754_rem_pio2+0x284>
 800f43e:	bf00      	nop
 800f440:	41700000 	.word	0x41700000
 800f444:	08010720 	.word	0x08010720

0800f448 <__kernel_rem_pio2>:
 800f448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f44c:	ed2d 8b02 	vpush	{d8}
 800f450:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f454:	f112 0f14 	cmn.w	r2, #20
 800f458:	9308      	str	r3, [sp, #32]
 800f45a:	9101      	str	r1, [sp, #4]
 800f45c:	4bc4      	ldr	r3, [pc, #784]	; (800f770 <__kernel_rem_pio2+0x328>)
 800f45e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f460:	900b      	str	r0, [sp, #44]	; 0x2c
 800f462:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f466:	9302      	str	r3, [sp, #8]
 800f468:	9b08      	ldr	r3, [sp, #32]
 800f46a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f46e:	bfa8      	it	ge
 800f470:	1ed4      	subge	r4, r2, #3
 800f472:	9306      	str	r3, [sp, #24]
 800f474:	bfb2      	itee	lt
 800f476:	2400      	movlt	r4, #0
 800f478:	2318      	movge	r3, #24
 800f47a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f47e:	f06f 0317 	mvn.w	r3, #23
 800f482:	fb04 3303 	mla	r3, r4, r3, r3
 800f486:	eb03 0a02 	add.w	sl, r3, r2
 800f48a:	9b02      	ldr	r3, [sp, #8]
 800f48c:	9a06      	ldr	r2, [sp, #24]
 800f48e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800f760 <__kernel_rem_pio2+0x318>
 800f492:	eb03 0802 	add.w	r8, r3, r2
 800f496:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f498:	1aa7      	subs	r7, r4, r2
 800f49a:	ae22      	add	r6, sp, #136	; 0x88
 800f49c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f4a0:	2500      	movs	r5, #0
 800f4a2:	4545      	cmp	r5, r8
 800f4a4:	dd13      	ble.n	800f4ce <__kernel_rem_pio2+0x86>
 800f4a6:	9b08      	ldr	r3, [sp, #32]
 800f4a8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800f760 <__kernel_rem_pio2+0x318>
 800f4ac:	aa22      	add	r2, sp, #136	; 0x88
 800f4ae:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f4b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f4b6:	f04f 0800 	mov.w	r8, #0
 800f4ba:	9b02      	ldr	r3, [sp, #8]
 800f4bc:	4598      	cmp	r8, r3
 800f4be:	dc2f      	bgt.n	800f520 <__kernel_rem_pio2+0xd8>
 800f4c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f4c4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800f4c8:	462f      	mov	r7, r5
 800f4ca:	2600      	movs	r6, #0
 800f4cc:	e01b      	b.n	800f506 <__kernel_rem_pio2+0xbe>
 800f4ce:	42ef      	cmn	r7, r5
 800f4d0:	d407      	bmi.n	800f4e2 <__kernel_rem_pio2+0x9a>
 800f4d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f4d6:	f7f1 f845 	bl	8000564 <__aeabi_i2d>
 800f4da:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f4de:	3501      	adds	r5, #1
 800f4e0:	e7df      	b.n	800f4a2 <__kernel_rem_pio2+0x5a>
 800f4e2:	ec51 0b18 	vmov	r0, r1, d8
 800f4e6:	e7f8      	b.n	800f4da <__kernel_rem_pio2+0x92>
 800f4e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f4f0:	f7f1 f8a2 	bl	8000638 <__aeabi_dmul>
 800f4f4:	4602      	mov	r2, r0
 800f4f6:	460b      	mov	r3, r1
 800f4f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f4fc:	f7f0 fee6 	bl	80002cc <__adddf3>
 800f500:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f504:	3601      	adds	r6, #1
 800f506:	9b06      	ldr	r3, [sp, #24]
 800f508:	429e      	cmp	r6, r3
 800f50a:	f1a7 0708 	sub.w	r7, r7, #8
 800f50e:	ddeb      	ble.n	800f4e8 <__kernel_rem_pio2+0xa0>
 800f510:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f514:	f108 0801 	add.w	r8, r8, #1
 800f518:	ecab 7b02 	vstmia	fp!, {d7}
 800f51c:	3508      	adds	r5, #8
 800f51e:	e7cc      	b.n	800f4ba <__kernel_rem_pio2+0x72>
 800f520:	9b02      	ldr	r3, [sp, #8]
 800f522:	aa0e      	add	r2, sp, #56	; 0x38
 800f524:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f528:	930d      	str	r3, [sp, #52]	; 0x34
 800f52a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f52c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f530:	9c02      	ldr	r4, [sp, #8]
 800f532:	930c      	str	r3, [sp, #48]	; 0x30
 800f534:	00e3      	lsls	r3, r4, #3
 800f536:	930a      	str	r3, [sp, #40]	; 0x28
 800f538:	ab9a      	add	r3, sp, #616	; 0x268
 800f53a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f53e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f542:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f546:	ab72      	add	r3, sp, #456	; 0x1c8
 800f548:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f54c:	46c3      	mov	fp, r8
 800f54e:	46a1      	mov	r9, r4
 800f550:	f1b9 0f00 	cmp.w	r9, #0
 800f554:	f1a5 0508 	sub.w	r5, r5, #8
 800f558:	dc77      	bgt.n	800f64a <__kernel_rem_pio2+0x202>
 800f55a:	ec47 6b10 	vmov	d0, r6, r7
 800f55e:	4650      	mov	r0, sl
 800f560:	f000 fd4e 	bl	8010000 <scalbn>
 800f564:	ec57 6b10 	vmov	r6, r7, d0
 800f568:	2200      	movs	r2, #0
 800f56a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f56e:	ee10 0a10 	vmov	r0, s0
 800f572:	4639      	mov	r1, r7
 800f574:	f7f1 f860 	bl	8000638 <__aeabi_dmul>
 800f578:	ec41 0b10 	vmov	d0, r0, r1
 800f57c:	f000 fcc0 	bl	800ff00 <floor>
 800f580:	4b7c      	ldr	r3, [pc, #496]	; (800f774 <__kernel_rem_pio2+0x32c>)
 800f582:	ec51 0b10 	vmov	r0, r1, d0
 800f586:	2200      	movs	r2, #0
 800f588:	f7f1 f856 	bl	8000638 <__aeabi_dmul>
 800f58c:	4602      	mov	r2, r0
 800f58e:	460b      	mov	r3, r1
 800f590:	4630      	mov	r0, r6
 800f592:	4639      	mov	r1, r7
 800f594:	f7f0 fe98 	bl	80002c8 <__aeabi_dsub>
 800f598:	460f      	mov	r7, r1
 800f59a:	4606      	mov	r6, r0
 800f59c:	f7f1 fafc 	bl	8000b98 <__aeabi_d2iz>
 800f5a0:	9004      	str	r0, [sp, #16]
 800f5a2:	f7f0 ffdf 	bl	8000564 <__aeabi_i2d>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	4630      	mov	r0, r6
 800f5ac:	4639      	mov	r1, r7
 800f5ae:	f7f0 fe8b 	bl	80002c8 <__aeabi_dsub>
 800f5b2:	f1ba 0f00 	cmp.w	sl, #0
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	460f      	mov	r7, r1
 800f5ba:	dd6d      	ble.n	800f698 <__kernel_rem_pio2+0x250>
 800f5bc:	1e62      	subs	r2, r4, #1
 800f5be:	ab0e      	add	r3, sp, #56	; 0x38
 800f5c0:	9d04      	ldr	r5, [sp, #16]
 800f5c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f5c6:	f1ca 0118 	rsb	r1, sl, #24
 800f5ca:	fa40 f301 	asr.w	r3, r0, r1
 800f5ce:	441d      	add	r5, r3
 800f5d0:	408b      	lsls	r3, r1
 800f5d2:	1ac0      	subs	r0, r0, r3
 800f5d4:	ab0e      	add	r3, sp, #56	; 0x38
 800f5d6:	9504      	str	r5, [sp, #16]
 800f5d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f5dc:	f1ca 0317 	rsb	r3, sl, #23
 800f5e0:	fa40 fb03 	asr.w	fp, r0, r3
 800f5e4:	f1bb 0f00 	cmp.w	fp, #0
 800f5e8:	dd65      	ble.n	800f6b6 <__kernel_rem_pio2+0x26e>
 800f5ea:	9b04      	ldr	r3, [sp, #16]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	9304      	str	r3, [sp, #16]
 800f5f2:	4615      	mov	r5, r2
 800f5f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f5f8:	4294      	cmp	r4, r2
 800f5fa:	f300 809c 	bgt.w	800f736 <__kernel_rem_pio2+0x2ee>
 800f5fe:	f1ba 0f00 	cmp.w	sl, #0
 800f602:	dd07      	ble.n	800f614 <__kernel_rem_pio2+0x1cc>
 800f604:	f1ba 0f01 	cmp.w	sl, #1
 800f608:	f000 80c0 	beq.w	800f78c <__kernel_rem_pio2+0x344>
 800f60c:	f1ba 0f02 	cmp.w	sl, #2
 800f610:	f000 80c6 	beq.w	800f7a0 <__kernel_rem_pio2+0x358>
 800f614:	f1bb 0f02 	cmp.w	fp, #2
 800f618:	d14d      	bne.n	800f6b6 <__kernel_rem_pio2+0x26e>
 800f61a:	4632      	mov	r2, r6
 800f61c:	463b      	mov	r3, r7
 800f61e:	4956      	ldr	r1, [pc, #344]	; (800f778 <__kernel_rem_pio2+0x330>)
 800f620:	2000      	movs	r0, #0
 800f622:	f7f0 fe51 	bl	80002c8 <__aeabi_dsub>
 800f626:	4606      	mov	r6, r0
 800f628:	460f      	mov	r7, r1
 800f62a:	2d00      	cmp	r5, #0
 800f62c:	d043      	beq.n	800f6b6 <__kernel_rem_pio2+0x26e>
 800f62e:	4650      	mov	r0, sl
 800f630:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800f768 <__kernel_rem_pio2+0x320>
 800f634:	f000 fce4 	bl	8010000 <scalbn>
 800f638:	4630      	mov	r0, r6
 800f63a:	4639      	mov	r1, r7
 800f63c:	ec53 2b10 	vmov	r2, r3, d0
 800f640:	f7f0 fe42 	bl	80002c8 <__aeabi_dsub>
 800f644:	4606      	mov	r6, r0
 800f646:	460f      	mov	r7, r1
 800f648:	e035      	b.n	800f6b6 <__kernel_rem_pio2+0x26e>
 800f64a:	4b4c      	ldr	r3, [pc, #304]	; (800f77c <__kernel_rem_pio2+0x334>)
 800f64c:	2200      	movs	r2, #0
 800f64e:	4630      	mov	r0, r6
 800f650:	4639      	mov	r1, r7
 800f652:	f7f0 fff1 	bl	8000638 <__aeabi_dmul>
 800f656:	f7f1 fa9f 	bl	8000b98 <__aeabi_d2iz>
 800f65a:	f7f0 ff83 	bl	8000564 <__aeabi_i2d>
 800f65e:	4602      	mov	r2, r0
 800f660:	460b      	mov	r3, r1
 800f662:	ec43 2b18 	vmov	d8, r2, r3
 800f666:	4b46      	ldr	r3, [pc, #280]	; (800f780 <__kernel_rem_pio2+0x338>)
 800f668:	2200      	movs	r2, #0
 800f66a:	f7f0 ffe5 	bl	8000638 <__aeabi_dmul>
 800f66e:	4602      	mov	r2, r0
 800f670:	460b      	mov	r3, r1
 800f672:	4630      	mov	r0, r6
 800f674:	4639      	mov	r1, r7
 800f676:	f7f0 fe27 	bl	80002c8 <__aeabi_dsub>
 800f67a:	f7f1 fa8d 	bl	8000b98 <__aeabi_d2iz>
 800f67e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f682:	f84b 0b04 	str.w	r0, [fp], #4
 800f686:	ec51 0b18 	vmov	r0, r1, d8
 800f68a:	f7f0 fe1f 	bl	80002cc <__adddf3>
 800f68e:	f109 39ff 	add.w	r9, r9, #4294967295
 800f692:	4606      	mov	r6, r0
 800f694:	460f      	mov	r7, r1
 800f696:	e75b      	b.n	800f550 <__kernel_rem_pio2+0x108>
 800f698:	d106      	bne.n	800f6a8 <__kernel_rem_pio2+0x260>
 800f69a:	1e63      	subs	r3, r4, #1
 800f69c:	aa0e      	add	r2, sp, #56	; 0x38
 800f69e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f6a2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800f6a6:	e79d      	b.n	800f5e4 <__kernel_rem_pio2+0x19c>
 800f6a8:	4b36      	ldr	r3, [pc, #216]	; (800f784 <__kernel_rem_pio2+0x33c>)
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	f7f1 fa4a 	bl	8000b44 <__aeabi_dcmpge>
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	d13d      	bne.n	800f730 <__kernel_rem_pio2+0x2e8>
 800f6b4:	4683      	mov	fp, r0
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	4630      	mov	r0, r6
 800f6bc:	4639      	mov	r1, r7
 800f6be:	f7f1 fa23 	bl	8000b08 <__aeabi_dcmpeq>
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	f000 80c0 	beq.w	800f848 <__kernel_rem_pio2+0x400>
 800f6c8:	1e65      	subs	r5, r4, #1
 800f6ca:	462b      	mov	r3, r5
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	9902      	ldr	r1, [sp, #8]
 800f6d0:	428b      	cmp	r3, r1
 800f6d2:	da6c      	bge.n	800f7ae <__kernel_rem_pio2+0x366>
 800f6d4:	2a00      	cmp	r2, #0
 800f6d6:	f000 8089 	beq.w	800f7ec <__kernel_rem_pio2+0x3a4>
 800f6da:	ab0e      	add	r3, sp, #56	; 0x38
 800f6dc:	f1aa 0a18 	sub.w	sl, sl, #24
 800f6e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	f000 80ad 	beq.w	800f844 <__kernel_rem_pio2+0x3fc>
 800f6ea:	4650      	mov	r0, sl
 800f6ec:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800f768 <__kernel_rem_pio2+0x320>
 800f6f0:	f000 fc86 	bl	8010000 <scalbn>
 800f6f4:	ab9a      	add	r3, sp, #616	; 0x268
 800f6f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f6fa:	ec57 6b10 	vmov	r6, r7, d0
 800f6fe:	00ec      	lsls	r4, r5, #3
 800f700:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800f704:	46aa      	mov	sl, r5
 800f706:	f1ba 0f00 	cmp.w	sl, #0
 800f70a:	f280 80d6 	bge.w	800f8ba <__kernel_rem_pio2+0x472>
 800f70e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800f760 <__kernel_rem_pio2+0x318>
 800f712:	462e      	mov	r6, r5
 800f714:	2e00      	cmp	r6, #0
 800f716:	f2c0 8104 	blt.w	800f922 <__kernel_rem_pio2+0x4da>
 800f71a:	ab72      	add	r3, sp, #456	; 0x1c8
 800f71c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f720:	f8df a064 	ldr.w	sl, [pc, #100]	; 800f788 <__kernel_rem_pio2+0x340>
 800f724:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f728:	f04f 0800 	mov.w	r8, #0
 800f72c:	1baf      	subs	r7, r5, r6
 800f72e:	e0ea      	b.n	800f906 <__kernel_rem_pio2+0x4be>
 800f730:	f04f 0b02 	mov.w	fp, #2
 800f734:	e759      	b.n	800f5ea <__kernel_rem_pio2+0x1a2>
 800f736:	f8d8 3000 	ldr.w	r3, [r8]
 800f73a:	b955      	cbnz	r5, 800f752 <__kernel_rem_pio2+0x30a>
 800f73c:	b123      	cbz	r3, 800f748 <__kernel_rem_pio2+0x300>
 800f73e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f742:	f8c8 3000 	str.w	r3, [r8]
 800f746:	2301      	movs	r3, #1
 800f748:	3201      	adds	r2, #1
 800f74a:	f108 0804 	add.w	r8, r8, #4
 800f74e:	461d      	mov	r5, r3
 800f750:	e752      	b.n	800f5f8 <__kernel_rem_pio2+0x1b0>
 800f752:	1acb      	subs	r3, r1, r3
 800f754:	f8c8 3000 	str.w	r3, [r8]
 800f758:	462b      	mov	r3, r5
 800f75a:	e7f5      	b.n	800f748 <__kernel_rem_pio2+0x300>
 800f75c:	f3af 8000 	nop.w
	...
 800f76c:	3ff00000 	.word	0x3ff00000
 800f770:	08010868 	.word	0x08010868
 800f774:	40200000 	.word	0x40200000
 800f778:	3ff00000 	.word	0x3ff00000
 800f77c:	3e700000 	.word	0x3e700000
 800f780:	41700000 	.word	0x41700000
 800f784:	3fe00000 	.word	0x3fe00000
 800f788:	08010828 	.word	0x08010828
 800f78c:	1e62      	subs	r2, r4, #1
 800f78e:	ab0e      	add	r3, sp, #56	; 0x38
 800f790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f794:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f798:	a90e      	add	r1, sp, #56	; 0x38
 800f79a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f79e:	e739      	b.n	800f614 <__kernel_rem_pio2+0x1cc>
 800f7a0:	1e62      	subs	r2, r4, #1
 800f7a2:	ab0e      	add	r3, sp, #56	; 0x38
 800f7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f7ac:	e7f4      	b.n	800f798 <__kernel_rem_pio2+0x350>
 800f7ae:	a90e      	add	r1, sp, #56	; 0x38
 800f7b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f7b4:	3b01      	subs	r3, #1
 800f7b6:	430a      	orrs	r2, r1
 800f7b8:	e789      	b.n	800f6ce <__kernel_rem_pio2+0x286>
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f7c0:	2900      	cmp	r1, #0
 800f7c2:	d0fa      	beq.n	800f7ba <__kernel_rem_pio2+0x372>
 800f7c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7c6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800f7ca:	446a      	add	r2, sp
 800f7cc:	3a98      	subs	r2, #152	; 0x98
 800f7ce:	920a      	str	r2, [sp, #40]	; 0x28
 800f7d0:	9a08      	ldr	r2, [sp, #32]
 800f7d2:	18e3      	adds	r3, r4, r3
 800f7d4:	18a5      	adds	r5, r4, r2
 800f7d6:	aa22      	add	r2, sp, #136	; 0x88
 800f7d8:	f104 0801 	add.w	r8, r4, #1
 800f7dc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f7e0:	9304      	str	r3, [sp, #16]
 800f7e2:	9b04      	ldr	r3, [sp, #16]
 800f7e4:	4543      	cmp	r3, r8
 800f7e6:	da04      	bge.n	800f7f2 <__kernel_rem_pio2+0x3aa>
 800f7e8:	461c      	mov	r4, r3
 800f7ea:	e6a3      	b.n	800f534 <__kernel_rem_pio2+0xec>
 800f7ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	e7e4      	b.n	800f7bc <__kernel_rem_pio2+0x374>
 800f7f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7f4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f7f8:	f7f0 feb4 	bl	8000564 <__aeabi_i2d>
 800f7fc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f802:	46ab      	mov	fp, r5
 800f804:	461c      	mov	r4, r3
 800f806:	f04f 0900 	mov.w	r9, #0
 800f80a:	2600      	movs	r6, #0
 800f80c:	2700      	movs	r7, #0
 800f80e:	9b06      	ldr	r3, [sp, #24]
 800f810:	4599      	cmp	r9, r3
 800f812:	dd06      	ble.n	800f822 <__kernel_rem_pio2+0x3da>
 800f814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f816:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f81a:	f108 0801 	add.w	r8, r8, #1
 800f81e:	930a      	str	r3, [sp, #40]	; 0x28
 800f820:	e7df      	b.n	800f7e2 <__kernel_rem_pio2+0x39a>
 800f822:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f826:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f82a:	f7f0 ff05 	bl	8000638 <__aeabi_dmul>
 800f82e:	4602      	mov	r2, r0
 800f830:	460b      	mov	r3, r1
 800f832:	4630      	mov	r0, r6
 800f834:	4639      	mov	r1, r7
 800f836:	f7f0 fd49 	bl	80002cc <__adddf3>
 800f83a:	f109 0901 	add.w	r9, r9, #1
 800f83e:	4606      	mov	r6, r0
 800f840:	460f      	mov	r7, r1
 800f842:	e7e4      	b.n	800f80e <__kernel_rem_pio2+0x3c6>
 800f844:	3d01      	subs	r5, #1
 800f846:	e748      	b.n	800f6da <__kernel_rem_pio2+0x292>
 800f848:	ec47 6b10 	vmov	d0, r6, r7
 800f84c:	f1ca 0000 	rsb	r0, sl, #0
 800f850:	f000 fbd6 	bl	8010000 <scalbn>
 800f854:	ec57 6b10 	vmov	r6, r7, d0
 800f858:	4ba0      	ldr	r3, [pc, #640]	; (800fadc <__kernel_rem_pio2+0x694>)
 800f85a:	ee10 0a10 	vmov	r0, s0
 800f85e:	2200      	movs	r2, #0
 800f860:	4639      	mov	r1, r7
 800f862:	f7f1 f96f 	bl	8000b44 <__aeabi_dcmpge>
 800f866:	b1f8      	cbz	r0, 800f8a8 <__kernel_rem_pio2+0x460>
 800f868:	4b9d      	ldr	r3, [pc, #628]	; (800fae0 <__kernel_rem_pio2+0x698>)
 800f86a:	2200      	movs	r2, #0
 800f86c:	4630      	mov	r0, r6
 800f86e:	4639      	mov	r1, r7
 800f870:	f7f0 fee2 	bl	8000638 <__aeabi_dmul>
 800f874:	f7f1 f990 	bl	8000b98 <__aeabi_d2iz>
 800f878:	4680      	mov	r8, r0
 800f87a:	f7f0 fe73 	bl	8000564 <__aeabi_i2d>
 800f87e:	4b97      	ldr	r3, [pc, #604]	; (800fadc <__kernel_rem_pio2+0x694>)
 800f880:	2200      	movs	r2, #0
 800f882:	f7f0 fed9 	bl	8000638 <__aeabi_dmul>
 800f886:	460b      	mov	r3, r1
 800f888:	4602      	mov	r2, r0
 800f88a:	4639      	mov	r1, r7
 800f88c:	4630      	mov	r0, r6
 800f88e:	f7f0 fd1b 	bl	80002c8 <__aeabi_dsub>
 800f892:	f7f1 f981 	bl	8000b98 <__aeabi_d2iz>
 800f896:	1c65      	adds	r5, r4, #1
 800f898:	ab0e      	add	r3, sp, #56	; 0x38
 800f89a:	f10a 0a18 	add.w	sl, sl, #24
 800f89e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f8a2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f8a6:	e720      	b.n	800f6ea <__kernel_rem_pio2+0x2a2>
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	4639      	mov	r1, r7
 800f8ac:	f7f1 f974 	bl	8000b98 <__aeabi_d2iz>
 800f8b0:	ab0e      	add	r3, sp, #56	; 0x38
 800f8b2:	4625      	mov	r5, r4
 800f8b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f8b8:	e717      	b.n	800f6ea <__kernel_rem_pio2+0x2a2>
 800f8ba:	ab0e      	add	r3, sp, #56	; 0x38
 800f8bc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f8c0:	f7f0 fe50 	bl	8000564 <__aeabi_i2d>
 800f8c4:	4632      	mov	r2, r6
 800f8c6:	463b      	mov	r3, r7
 800f8c8:	f7f0 feb6 	bl	8000638 <__aeabi_dmul>
 800f8cc:	4b84      	ldr	r3, [pc, #528]	; (800fae0 <__kernel_rem_pio2+0x698>)
 800f8ce:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	4630      	mov	r0, r6
 800f8d6:	4639      	mov	r1, r7
 800f8d8:	f7f0 feae 	bl	8000638 <__aeabi_dmul>
 800f8dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8e0:	4606      	mov	r6, r0
 800f8e2:	460f      	mov	r7, r1
 800f8e4:	e70f      	b.n	800f706 <__kernel_rem_pio2+0x2be>
 800f8e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f8ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f8ee:	f7f0 fea3 	bl	8000638 <__aeabi_dmul>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f8fa:	f7f0 fce7 	bl	80002cc <__adddf3>
 800f8fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f902:	f108 0801 	add.w	r8, r8, #1
 800f906:	9b02      	ldr	r3, [sp, #8]
 800f908:	4598      	cmp	r8, r3
 800f90a:	dc01      	bgt.n	800f910 <__kernel_rem_pio2+0x4c8>
 800f90c:	45b8      	cmp	r8, r7
 800f90e:	ddea      	ble.n	800f8e6 <__kernel_rem_pio2+0x49e>
 800f910:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f914:	ab4a      	add	r3, sp, #296	; 0x128
 800f916:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f91a:	ed87 7b00 	vstr	d7, [r7]
 800f91e:	3e01      	subs	r6, #1
 800f920:	e6f8      	b.n	800f714 <__kernel_rem_pio2+0x2cc>
 800f922:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f924:	2b02      	cmp	r3, #2
 800f926:	dc0b      	bgt.n	800f940 <__kernel_rem_pio2+0x4f8>
 800f928:	2b00      	cmp	r3, #0
 800f92a:	dc35      	bgt.n	800f998 <__kernel_rem_pio2+0x550>
 800f92c:	d059      	beq.n	800f9e2 <__kernel_rem_pio2+0x59a>
 800f92e:	9b04      	ldr	r3, [sp, #16]
 800f930:	f003 0007 	and.w	r0, r3, #7
 800f934:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f938:	ecbd 8b02 	vpop	{d8}
 800f93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f940:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f942:	2b03      	cmp	r3, #3
 800f944:	d1f3      	bne.n	800f92e <__kernel_rem_pio2+0x4e6>
 800f946:	ab4a      	add	r3, sp, #296	; 0x128
 800f948:	4423      	add	r3, r4
 800f94a:	9306      	str	r3, [sp, #24]
 800f94c:	461c      	mov	r4, r3
 800f94e:	469a      	mov	sl, r3
 800f950:	9502      	str	r5, [sp, #8]
 800f952:	9b02      	ldr	r3, [sp, #8]
 800f954:	2b00      	cmp	r3, #0
 800f956:	f1aa 0a08 	sub.w	sl, sl, #8
 800f95a:	dc6b      	bgt.n	800fa34 <__kernel_rem_pio2+0x5ec>
 800f95c:	46aa      	mov	sl, r5
 800f95e:	f1ba 0f01 	cmp.w	sl, #1
 800f962:	f1a4 0408 	sub.w	r4, r4, #8
 800f966:	f300 8085 	bgt.w	800fa74 <__kernel_rem_pio2+0x62c>
 800f96a:	9c06      	ldr	r4, [sp, #24]
 800f96c:	2000      	movs	r0, #0
 800f96e:	3408      	adds	r4, #8
 800f970:	2100      	movs	r1, #0
 800f972:	2d01      	cmp	r5, #1
 800f974:	f300 809d 	bgt.w	800fab2 <__kernel_rem_pio2+0x66a>
 800f978:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f97c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f980:	f1bb 0f00 	cmp.w	fp, #0
 800f984:	f040 809b 	bne.w	800fabe <__kernel_rem_pio2+0x676>
 800f988:	9b01      	ldr	r3, [sp, #4]
 800f98a:	e9c3 5600 	strd	r5, r6, [r3]
 800f98e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f992:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f996:	e7ca      	b.n	800f92e <__kernel_rem_pio2+0x4e6>
 800f998:	3408      	adds	r4, #8
 800f99a:	ab4a      	add	r3, sp, #296	; 0x128
 800f99c:	441c      	add	r4, r3
 800f99e:	462e      	mov	r6, r5
 800f9a0:	2000      	movs	r0, #0
 800f9a2:	2100      	movs	r1, #0
 800f9a4:	2e00      	cmp	r6, #0
 800f9a6:	da36      	bge.n	800fa16 <__kernel_rem_pio2+0x5ce>
 800f9a8:	f1bb 0f00 	cmp.w	fp, #0
 800f9ac:	d039      	beq.n	800fa22 <__kernel_rem_pio2+0x5da>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9b4:	9c01      	ldr	r4, [sp, #4]
 800f9b6:	e9c4 2300 	strd	r2, r3, [r4]
 800f9ba:	4602      	mov	r2, r0
 800f9bc:	460b      	mov	r3, r1
 800f9be:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f9c2:	f7f0 fc81 	bl	80002c8 <__aeabi_dsub>
 800f9c6:	ae4c      	add	r6, sp, #304	; 0x130
 800f9c8:	2401      	movs	r4, #1
 800f9ca:	42a5      	cmp	r5, r4
 800f9cc:	da2c      	bge.n	800fa28 <__kernel_rem_pio2+0x5e0>
 800f9ce:	f1bb 0f00 	cmp.w	fp, #0
 800f9d2:	d002      	beq.n	800f9da <__kernel_rem_pio2+0x592>
 800f9d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9d8:	4619      	mov	r1, r3
 800f9da:	9b01      	ldr	r3, [sp, #4]
 800f9dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f9e0:	e7a5      	b.n	800f92e <__kernel_rem_pio2+0x4e6>
 800f9e2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f9e6:	eb0d 0403 	add.w	r4, sp, r3
 800f9ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	2d00      	cmp	r5, #0
 800f9f4:	da09      	bge.n	800fa0a <__kernel_rem_pio2+0x5c2>
 800f9f6:	f1bb 0f00 	cmp.w	fp, #0
 800f9fa:	d002      	beq.n	800fa02 <__kernel_rem_pio2+0x5ba>
 800f9fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa00:	4619      	mov	r1, r3
 800fa02:	9b01      	ldr	r3, [sp, #4]
 800fa04:	e9c3 0100 	strd	r0, r1, [r3]
 800fa08:	e791      	b.n	800f92e <__kernel_rem_pio2+0x4e6>
 800fa0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fa0e:	f7f0 fc5d 	bl	80002cc <__adddf3>
 800fa12:	3d01      	subs	r5, #1
 800fa14:	e7ed      	b.n	800f9f2 <__kernel_rem_pio2+0x5aa>
 800fa16:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fa1a:	f7f0 fc57 	bl	80002cc <__adddf3>
 800fa1e:	3e01      	subs	r6, #1
 800fa20:	e7c0      	b.n	800f9a4 <__kernel_rem_pio2+0x55c>
 800fa22:	4602      	mov	r2, r0
 800fa24:	460b      	mov	r3, r1
 800fa26:	e7c5      	b.n	800f9b4 <__kernel_rem_pio2+0x56c>
 800fa28:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800fa2c:	f7f0 fc4e 	bl	80002cc <__adddf3>
 800fa30:	3401      	adds	r4, #1
 800fa32:	e7ca      	b.n	800f9ca <__kernel_rem_pio2+0x582>
 800fa34:	e9da 8900 	ldrd	r8, r9, [sl]
 800fa38:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800fa3c:	9b02      	ldr	r3, [sp, #8]
 800fa3e:	3b01      	subs	r3, #1
 800fa40:	9302      	str	r3, [sp, #8]
 800fa42:	4632      	mov	r2, r6
 800fa44:	463b      	mov	r3, r7
 800fa46:	4640      	mov	r0, r8
 800fa48:	4649      	mov	r1, r9
 800fa4a:	f7f0 fc3f 	bl	80002cc <__adddf3>
 800fa4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fa52:	4602      	mov	r2, r0
 800fa54:	460b      	mov	r3, r1
 800fa56:	4640      	mov	r0, r8
 800fa58:	4649      	mov	r1, r9
 800fa5a:	f7f0 fc35 	bl	80002c8 <__aeabi_dsub>
 800fa5e:	4632      	mov	r2, r6
 800fa60:	463b      	mov	r3, r7
 800fa62:	f7f0 fc33 	bl	80002cc <__adddf3>
 800fa66:	ed9d 7b08 	vldr	d7, [sp, #32]
 800fa6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fa6e:	ed8a 7b00 	vstr	d7, [sl]
 800fa72:	e76e      	b.n	800f952 <__kernel_rem_pio2+0x50a>
 800fa74:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fa78:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800fa7c:	4640      	mov	r0, r8
 800fa7e:	4632      	mov	r2, r6
 800fa80:	463b      	mov	r3, r7
 800fa82:	4649      	mov	r1, r9
 800fa84:	f7f0 fc22 	bl	80002cc <__adddf3>
 800fa88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa8c:	4602      	mov	r2, r0
 800fa8e:	460b      	mov	r3, r1
 800fa90:	4640      	mov	r0, r8
 800fa92:	4649      	mov	r1, r9
 800fa94:	f7f0 fc18 	bl	80002c8 <__aeabi_dsub>
 800fa98:	4632      	mov	r2, r6
 800fa9a:	463b      	mov	r3, r7
 800fa9c:	f7f0 fc16 	bl	80002cc <__adddf3>
 800faa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800faa4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800faa8:	ed84 7b00 	vstr	d7, [r4]
 800faac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fab0:	e755      	b.n	800f95e <__kernel_rem_pio2+0x516>
 800fab2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fab6:	f7f0 fc09 	bl	80002cc <__adddf3>
 800faba:	3d01      	subs	r5, #1
 800fabc:	e759      	b.n	800f972 <__kernel_rem_pio2+0x52a>
 800fabe:	9b01      	ldr	r3, [sp, #4]
 800fac0:	9a01      	ldr	r2, [sp, #4]
 800fac2:	601d      	str	r5, [r3, #0]
 800fac4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800fac8:	605c      	str	r4, [r3, #4]
 800faca:	609f      	str	r7, [r3, #8]
 800facc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800fad0:	60d3      	str	r3, [r2, #12]
 800fad2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fad6:	6110      	str	r0, [r2, #16]
 800fad8:	6153      	str	r3, [r2, #20]
 800fada:	e728      	b.n	800f92e <__kernel_rem_pio2+0x4e6>
 800fadc:	41700000 	.word	0x41700000
 800fae0:	3e700000 	.word	0x3e700000
 800fae4:	00000000 	.word	0x00000000

0800fae8 <__kernel_tan>:
 800fae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faec:	ed2d 8b06 	vpush	{d8-d10}
 800faf0:	ec5b ab10 	vmov	sl, fp, d0
 800faf4:	4be0      	ldr	r3, [pc, #896]	; (800fe78 <__kernel_tan+0x390>)
 800faf6:	b083      	sub	sp, #12
 800faf8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800fafc:	429f      	cmp	r7, r3
 800fafe:	ec59 8b11 	vmov	r8, r9, d1
 800fb02:	4606      	mov	r6, r0
 800fb04:	f8cd b000 	str.w	fp, [sp]
 800fb08:	dc61      	bgt.n	800fbce <__kernel_tan+0xe6>
 800fb0a:	ee10 0a10 	vmov	r0, s0
 800fb0e:	4659      	mov	r1, fp
 800fb10:	f7f1 f842 	bl	8000b98 <__aeabi_d2iz>
 800fb14:	4605      	mov	r5, r0
 800fb16:	2800      	cmp	r0, #0
 800fb18:	f040 8083 	bne.w	800fc22 <__kernel_tan+0x13a>
 800fb1c:	1c73      	adds	r3, r6, #1
 800fb1e:	4652      	mov	r2, sl
 800fb20:	4313      	orrs	r3, r2
 800fb22:	433b      	orrs	r3, r7
 800fb24:	d112      	bne.n	800fb4c <__kernel_tan+0x64>
 800fb26:	ec4b ab10 	vmov	d0, sl, fp
 800fb2a:	f7ff fa41 	bl	800efb0 <fabs>
 800fb2e:	49d3      	ldr	r1, [pc, #844]	; (800fe7c <__kernel_tan+0x394>)
 800fb30:	ec53 2b10 	vmov	r2, r3, d0
 800fb34:	2000      	movs	r0, #0
 800fb36:	f7f0 fea9 	bl	800088c <__aeabi_ddiv>
 800fb3a:	4682      	mov	sl, r0
 800fb3c:	468b      	mov	fp, r1
 800fb3e:	ec4b ab10 	vmov	d0, sl, fp
 800fb42:	b003      	add	sp, #12
 800fb44:	ecbd 8b06 	vpop	{d8-d10}
 800fb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb4c:	2e01      	cmp	r6, #1
 800fb4e:	d0f6      	beq.n	800fb3e <__kernel_tan+0x56>
 800fb50:	4642      	mov	r2, r8
 800fb52:	464b      	mov	r3, r9
 800fb54:	4650      	mov	r0, sl
 800fb56:	4659      	mov	r1, fp
 800fb58:	f7f0 fbb8 	bl	80002cc <__adddf3>
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	460b      	mov	r3, r1
 800fb60:	460f      	mov	r7, r1
 800fb62:	2000      	movs	r0, #0
 800fb64:	49c6      	ldr	r1, [pc, #792]	; (800fe80 <__kernel_tan+0x398>)
 800fb66:	f7f0 fe91 	bl	800088c <__aeabi_ddiv>
 800fb6a:	e9cd 0100 	strd	r0, r1, [sp]
 800fb6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb72:	462e      	mov	r6, r5
 800fb74:	4652      	mov	r2, sl
 800fb76:	462c      	mov	r4, r5
 800fb78:	4630      	mov	r0, r6
 800fb7a:	461d      	mov	r5, r3
 800fb7c:	4639      	mov	r1, r7
 800fb7e:	465b      	mov	r3, fp
 800fb80:	f7f0 fba2 	bl	80002c8 <__aeabi_dsub>
 800fb84:	4602      	mov	r2, r0
 800fb86:	460b      	mov	r3, r1
 800fb88:	4640      	mov	r0, r8
 800fb8a:	4649      	mov	r1, r9
 800fb8c:	f7f0 fb9c 	bl	80002c8 <__aeabi_dsub>
 800fb90:	4632      	mov	r2, r6
 800fb92:	462b      	mov	r3, r5
 800fb94:	f7f0 fd50 	bl	8000638 <__aeabi_dmul>
 800fb98:	4632      	mov	r2, r6
 800fb9a:	4680      	mov	r8, r0
 800fb9c:	4689      	mov	r9, r1
 800fb9e:	462b      	mov	r3, r5
 800fba0:	4630      	mov	r0, r6
 800fba2:	4639      	mov	r1, r7
 800fba4:	f7f0 fd48 	bl	8000638 <__aeabi_dmul>
 800fba8:	4bb4      	ldr	r3, [pc, #720]	; (800fe7c <__kernel_tan+0x394>)
 800fbaa:	2200      	movs	r2, #0
 800fbac:	f7f0 fb8e 	bl	80002cc <__adddf3>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	460b      	mov	r3, r1
 800fbb4:	4640      	mov	r0, r8
 800fbb6:	4649      	mov	r1, r9
 800fbb8:	f7f0 fb88 	bl	80002cc <__adddf3>
 800fbbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbc0:	f7f0 fd3a 	bl	8000638 <__aeabi_dmul>
 800fbc4:	4622      	mov	r2, r4
 800fbc6:	462b      	mov	r3, r5
 800fbc8:	f7f0 fb80 	bl	80002cc <__adddf3>
 800fbcc:	e7b5      	b.n	800fb3a <__kernel_tan+0x52>
 800fbce:	4bad      	ldr	r3, [pc, #692]	; (800fe84 <__kernel_tan+0x39c>)
 800fbd0:	429f      	cmp	r7, r3
 800fbd2:	dd26      	ble.n	800fc22 <__kernel_tan+0x13a>
 800fbd4:	9b00      	ldr	r3, [sp, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	da09      	bge.n	800fbee <__kernel_tan+0x106>
 800fbda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fbde:	469b      	mov	fp, r3
 800fbe0:	ee10 aa10 	vmov	sl, s0
 800fbe4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fbe8:	ee11 8a10 	vmov	r8, s2
 800fbec:	4699      	mov	r9, r3
 800fbee:	4652      	mov	r2, sl
 800fbf0:	465b      	mov	r3, fp
 800fbf2:	a183      	add	r1, pc, #524	; (adr r1, 800fe00 <__kernel_tan+0x318>)
 800fbf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbf8:	f7f0 fb66 	bl	80002c8 <__aeabi_dsub>
 800fbfc:	4642      	mov	r2, r8
 800fbfe:	464b      	mov	r3, r9
 800fc00:	4604      	mov	r4, r0
 800fc02:	460d      	mov	r5, r1
 800fc04:	a180      	add	r1, pc, #512	; (adr r1, 800fe08 <__kernel_tan+0x320>)
 800fc06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc0a:	f7f0 fb5d 	bl	80002c8 <__aeabi_dsub>
 800fc0e:	4622      	mov	r2, r4
 800fc10:	462b      	mov	r3, r5
 800fc12:	f7f0 fb5b 	bl	80002cc <__adddf3>
 800fc16:	f04f 0800 	mov.w	r8, #0
 800fc1a:	4682      	mov	sl, r0
 800fc1c:	468b      	mov	fp, r1
 800fc1e:	f04f 0900 	mov.w	r9, #0
 800fc22:	4652      	mov	r2, sl
 800fc24:	465b      	mov	r3, fp
 800fc26:	4650      	mov	r0, sl
 800fc28:	4659      	mov	r1, fp
 800fc2a:	f7f0 fd05 	bl	8000638 <__aeabi_dmul>
 800fc2e:	4602      	mov	r2, r0
 800fc30:	460b      	mov	r3, r1
 800fc32:	ec43 2b18 	vmov	d8, r2, r3
 800fc36:	f7f0 fcff 	bl	8000638 <__aeabi_dmul>
 800fc3a:	ec53 2b18 	vmov	r2, r3, d8
 800fc3e:	4604      	mov	r4, r0
 800fc40:	460d      	mov	r5, r1
 800fc42:	4650      	mov	r0, sl
 800fc44:	4659      	mov	r1, fp
 800fc46:	f7f0 fcf7 	bl	8000638 <__aeabi_dmul>
 800fc4a:	a371      	add	r3, pc, #452	; (adr r3, 800fe10 <__kernel_tan+0x328>)
 800fc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc50:	ec41 0b19 	vmov	d9, r0, r1
 800fc54:	4620      	mov	r0, r4
 800fc56:	4629      	mov	r1, r5
 800fc58:	f7f0 fcee 	bl	8000638 <__aeabi_dmul>
 800fc5c:	a36e      	add	r3, pc, #440	; (adr r3, 800fe18 <__kernel_tan+0x330>)
 800fc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc62:	f7f0 fb33 	bl	80002cc <__adddf3>
 800fc66:	4622      	mov	r2, r4
 800fc68:	462b      	mov	r3, r5
 800fc6a:	f7f0 fce5 	bl	8000638 <__aeabi_dmul>
 800fc6e:	a36c      	add	r3, pc, #432	; (adr r3, 800fe20 <__kernel_tan+0x338>)
 800fc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc74:	f7f0 fb2a 	bl	80002cc <__adddf3>
 800fc78:	4622      	mov	r2, r4
 800fc7a:	462b      	mov	r3, r5
 800fc7c:	f7f0 fcdc 	bl	8000638 <__aeabi_dmul>
 800fc80:	a369      	add	r3, pc, #420	; (adr r3, 800fe28 <__kernel_tan+0x340>)
 800fc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc86:	f7f0 fb21 	bl	80002cc <__adddf3>
 800fc8a:	4622      	mov	r2, r4
 800fc8c:	462b      	mov	r3, r5
 800fc8e:	f7f0 fcd3 	bl	8000638 <__aeabi_dmul>
 800fc92:	a367      	add	r3, pc, #412	; (adr r3, 800fe30 <__kernel_tan+0x348>)
 800fc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc98:	f7f0 fb18 	bl	80002cc <__adddf3>
 800fc9c:	4622      	mov	r2, r4
 800fc9e:	462b      	mov	r3, r5
 800fca0:	f7f0 fcca 	bl	8000638 <__aeabi_dmul>
 800fca4:	a364      	add	r3, pc, #400	; (adr r3, 800fe38 <__kernel_tan+0x350>)
 800fca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcaa:	f7f0 fb0f 	bl	80002cc <__adddf3>
 800fcae:	ec53 2b18 	vmov	r2, r3, d8
 800fcb2:	f7f0 fcc1 	bl	8000638 <__aeabi_dmul>
 800fcb6:	a362      	add	r3, pc, #392	; (adr r3, 800fe40 <__kernel_tan+0x358>)
 800fcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcbc:	ec41 0b1a 	vmov	d10, r0, r1
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	4629      	mov	r1, r5
 800fcc4:	f7f0 fcb8 	bl	8000638 <__aeabi_dmul>
 800fcc8:	a35f      	add	r3, pc, #380	; (adr r3, 800fe48 <__kernel_tan+0x360>)
 800fcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcce:	f7f0 fafd 	bl	80002cc <__adddf3>
 800fcd2:	4622      	mov	r2, r4
 800fcd4:	462b      	mov	r3, r5
 800fcd6:	f7f0 fcaf 	bl	8000638 <__aeabi_dmul>
 800fcda:	a35d      	add	r3, pc, #372	; (adr r3, 800fe50 <__kernel_tan+0x368>)
 800fcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce0:	f7f0 faf4 	bl	80002cc <__adddf3>
 800fce4:	4622      	mov	r2, r4
 800fce6:	462b      	mov	r3, r5
 800fce8:	f7f0 fca6 	bl	8000638 <__aeabi_dmul>
 800fcec:	a35a      	add	r3, pc, #360	; (adr r3, 800fe58 <__kernel_tan+0x370>)
 800fcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf2:	f7f0 faeb 	bl	80002cc <__adddf3>
 800fcf6:	4622      	mov	r2, r4
 800fcf8:	462b      	mov	r3, r5
 800fcfa:	f7f0 fc9d 	bl	8000638 <__aeabi_dmul>
 800fcfe:	a358      	add	r3, pc, #352	; (adr r3, 800fe60 <__kernel_tan+0x378>)
 800fd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd04:	f7f0 fae2 	bl	80002cc <__adddf3>
 800fd08:	4622      	mov	r2, r4
 800fd0a:	462b      	mov	r3, r5
 800fd0c:	f7f0 fc94 	bl	8000638 <__aeabi_dmul>
 800fd10:	a355      	add	r3, pc, #340	; (adr r3, 800fe68 <__kernel_tan+0x380>)
 800fd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd16:	f7f0 fad9 	bl	80002cc <__adddf3>
 800fd1a:	4602      	mov	r2, r0
 800fd1c:	460b      	mov	r3, r1
 800fd1e:	ec51 0b1a 	vmov	r0, r1, d10
 800fd22:	f7f0 fad3 	bl	80002cc <__adddf3>
 800fd26:	ec53 2b19 	vmov	r2, r3, d9
 800fd2a:	f7f0 fc85 	bl	8000638 <__aeabi_dmul>
 800fd2e:	4642      	mov	r2, r8
 800fd30:	464b      	mov	r3, r9
 800fd32:	f7f0 facb 	bl	80002cc <__adddf3>
 800fd36:	ec53 2b18 	vmov	r2, r3, d8
 800fd3a:	f7f0 fc7d 	bl	8000638 <__aeabi_dmul>
 800fd3e:	4642      	mov	r2, r8
 800fd40:	464b      	mov	r3, r9
 800fd42:	f7f0 fac3 	bl	80002cc <__adddf3>
 800fd46:	a34a      	add	r3, pc, #296	; (adr r3, 800fe70 <__kernel_tan+0x388>)
 800fd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd4c:	4604      	mov	r4, r0
 800fd4e:	460d      	mov	r5, r1
 800fd50:	ec51 0b19 	vmov	r0, r1, d9
 800fd54:	f7f0 fc70 	bl	8000638 <__aeabi_dmul>
 800fd58:	4622      	mov	r2, r4
 800fd5a:	462b      	mov	r3, r5
 800fd5c:	f7f0 fab6 	bl	80002cc <__adddf3>
 800fd60:	460b      	mov	r3, r1
 800fd62:	ec41 0b18 	vmov	d8, r0, r1
 800fd66:	4602      	mov	r2, r0
 800fd68:	4659      	mov	r1, fp
 800fd6a:	4650      	mov	r0, sl
 800fd6c:	f7f0 faae 	bl	80002cc <__adddf3>
 800fd70:	4b44      	ldr	r3, [pc, #272]	; (800fe84 <__kernel_tan+0x39c>)
 800fd72:	429f      	cmp	r7, r3
 800fd74:	4604      	mov	r4, r0
 800fd76:	460d      	mov	r5, r1
 800fd78:	f340 8086 	ble.w	800fe88 <__kernel_tan+0x3a0>
 800fd7c:	4630      	mov	r0, r6
 800fd7e:	f7f0 fbf1 	bl	8000564 <__aeabi_i2d>
 800fd82:	4622      	mov	r2, r4
 800fd84:	4680      	mov	r8, r0
 800fd86:	4689      	mov	r9, r1
 800fd88:	462b      	mov	r3, r5
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	4629      	mov	r1, r5
 800fd8e:	f7f0 fc53 	bl	8000638 <__aeabi_dmul>
 800fd92:	4642      	mov	r2, r8
 800fd94:	4606      	mov	r6, r0
 800fd96:	460f      	mov	r7, r1
 800fd98:	464b      	mov	r3, r9
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	4629      	mov	r1, r5
 800fd9e:	f7f0 fa95 	bl	80002cc <__adddf3>
 800fda2:	4602      	mov	r2, r0
 800fda4:	460b      	mov	r3, r1
 800fda6:	4630      	mov	r0, r6
 800fda8:	4639      	mov	r1, r7
 800fdaa:	f7f0 fd6f 	bl	800088c <__aeabi_ddiv>
 800fdae:	ec53 2b18 	vmov	r2, r3, d8
 800fdb2:	f7f0 fa89 	bl	80002c8 <__aeabi_dsub>
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	460b      	mov	r3, r1
 800fdba:	4650      	mov	r0, sl
 800fdbc:	4659      	mov	r1, fp
 800fdbe:	f7f0 fa83 	bl	80002c8 <__aeabi_dsub>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	f7f0 fa81 	bl	80002cc <__adddf3>
 800fdca:	4602      	mov	r2, r0
 800fdcc:	460b      	mov	r3, r1
 800fdce:	4640      	mov	r0, r8
 800fdd0:	4649      	mov	r1, r9
 800fdd2:	f7f0 fa79 	bl	80002c8 <__aeabi_dsub>
 800fdd6:	9b00      	ldr	r3, [sp, #0]
 800fdd8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800fddc:	f00a 0a02 	and.w	sl, sl, #2
 800fde0:	4604      	mov	r4, r0
 800fde2:	f1ca 0001 	rsb	r0, sl, #1
 800fde6:	460d      	mov	r5, r1
 800fde8:	f7f0 fbbc 	bl	8000564 <__aeabi_i2d>
 800fdec:	4602      	mov	r2, r0
 800fdee:	460b      	mov	r3, r1
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	4629      	mov	r1, r5
 800fdf4:	f7f0 fc20 	bl	8000638 <__aeabi_dmul>
 800fdf8:	e69f      	b.n	800fb3a <__kernel_tan+0x52>
 800fdfa:	bf00      	nop
 800fdfc:	f3af 8000 	nop.w
 800fe00:	54442d18 	.word	0x54442d18
 800fe04:	3fe921fb 	.word	0x3fe921fb
 800fe08:	33145c07 	.word	0x33145c07
 800fe0c:	3c81a626 	.word	0x3c81a626
 800fe10:	74bf7ad4 	.word	0x74bf7ad4
 800fe14:	3efb2a70 	.word	0x3efb2a70
 800fe18:	32f0a7e9 	.word	0x32f0a7e9
 800fe1c:	3f12b80f 	.word	0x3f12b80f
 800fe20:	1a8d1068 	.word	0x1a8d1068
 800fe24:	3f3026f7 	.word	0x3f3026f7
 800fe28:	fee08315 	.word	0xfee08315
 800fe2c:	3f57dbc8 	.word	0x3f57dbc8
 800fe30:	e96e8493 	.word	0xe96e8493
 800fe34:	3f8226e3 	.word	0x3f8226e3
 800fe38:	1bb341fe 	.word	0x1bb341fe
 800fe3c:	3faba1ba 	.word	0x3faba1ba
 800fe40:	db605373 	.word	0xdb605373
 800fe44:	bef375cb 	.word	0xbef375cb
 800fe48:	a03792a6 	.word	0xa03792a6
 800fe4c:	3f147e88 	.word	0x3f147e88
 800fe50:	f2f26501 	.word	0xf2f26501
 800fe54:	3f4344d8 	.word	0x3f4344d8
 800fe58:	c9560328 	.word	0xc9560328
 800fe5c:	3f6d6d22 	.word	0x3f6d6d22
 800fe60:	8406d637 	.word	0x8406d637
 800fe64:	3f9664f4 	.word	0x3f9664f4
 800fe68:	1110fe7a 	.word	0x1110fe7a
 800fe6c:	3fc11111 	.word	0x3fc11111
 800fe70:	55555563 	.word	0x55555563
 800fe74:	3fd55555 	.word	0x3fd55555
 800fe78:	3e2fffff 	.word	0x3e2fffff
 800fe7c:	3ff00000 	.word	0x3ff00000
 800fe80:	bff00000 	.word	0xbff00000
 800fe84:	3fe59427 	.word	0x3fe59427
 800fe88:	2e01      	cmp	r6, #1
 800fe8a:	d02f      	beq.n	800feec <__kernel_tan+0x404>
 800fe8c:	460f      	mov	r7, r1
 800fe8e:	4602      	mov	r2, r0
 800fe90:	460b      	mov	r3, r1
 800fe92:	4689      	mov	r9, r1
 800fe94:	2000      	movs	r0, #0
 800fe96:	4917      	ldr	r1, [pc, #92]	; (800fef4 <__kernel_tan+0x40c>)
 800fe98:	f7f0 fcf8 	bl	800088c <__aeabi_ddiv>
 800fe9c:	2600      	movs	r6, #0
 800fe9e:	e9cd 0100 	strd	r0, r1, [sp]
 800fea2:	4652      	mov	r2, sl
 800fea4:	465b      	mov	r3, fp
 800fea6:	4630      	mov	r0, r6
 800fea8:	4639      	mov	r1, r7
 800feaa:	f7f0 fa0d 	bl	80002c8 <__aeabi_dsub>
 800feae:	e9dd 4500 	ldrd	r4, r5, [sp]
 800feb2:	4602      	mov	r2, r0
 800feb4:	460b      	mov	r3, r1
 800feb6:	ec51 0b18 	vmov	r0, r1, d8
 800feba:	f7f0 fa05 	bl	80002c8 <__aeabi_dsub>
 800febe:	4632      	mov	r2, r6
 800fec0:	462b      	mov	r3, r5
 800fec2:	f7f0 fbb9 	bl	8000638 <__aeabi_dmul>
 800fec6:	46b0      	mov	r8, r6
 800fec8:	460f      	mov	r7, r1
 800feca:	4642      	mov	r2, r8
 800fecc:	462b      	mov	r3, r5
 800fece:	4634      	mov	r4, r6
 800fed0:	4649      	mov	r1, r9
 800fed2:	4606      	mov	r6, r0
 800fed4:	4640      	mov	r0, r8
 800fed6:	f7f0 fbaf 	bl	8000638 <__aeabi_dmul>
 800feda:	4b07      	ldr	r3, [pc, #28]	; (800fef8 <__kernel_tan+0x410>)
 800fedc:	2200      	movs	r2, #0
 800fede:	f7f0 f9f5 	bl	80002cc <__adddf3>
 800fee2:	4602      	mov	r2, r0
 800fee4:	460b      	mov	r3, r1
 800fee6:	4630      	mov	r0, r6
 800fee8:	4639      	mov	r1, r7
 800feea:	e665      	b.n	800fbb8 <__kernel_tan+0xd0>
 800feec:	4682      	mov	sl, r0
 800feee:	468b      	mov	fp, r1
 800fef0:	e625      	b.n	800fb3e <__kernel_tan+0x56>
 800fef2:	bf00      	nop
 800fef4:	bff00000 	.word	0xbff00000
 800fef8:	3ff00000 	.word	0x3ff00000
 800fefc:	00000000 	.word	0x00000000

0800ff00 <floor>:
 800ff00:	ec51 0b10 	vmov	r0, r1, d0
 800ff04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff08:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ff0c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ff10:	2e13      	cmp	r6, #19
 800ff12:	ee10 5a10 	vmov	r5, s0
 800ff16:	ee10 8a10 	vmov	r8, s0
 800ff1a:	460c      	mov	r4, r1
 800ff1c:	dc32      	bgt.n	800ff84 <floor+0x84>
 800ff1e:	2e00      	cmp	r6, #0
 800ff20:	da14      	bge.n	800ff4c <floor+0x4c>
 800ff22:	a333      	add	r3, pc, #204	; (adr r3, 800fff0 <floor+0xf0>)
 800ff24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff28:	f7f0 f9d0 	bl	80002cc <__adddf3>
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	2300      	movs	r3, #0
 800ff30:	f7f0 fe12 	bl	8000b58 <__aeabi_dcmpgt>
 800ff34:	b138      	cbz	r0, 800ff46 <floor+0x46>
 800ff36:	2c00      	cmp	r4, #0
 800ff38:	da57      	bge.n	800ffea <floor+0xea>
 800ff3a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ff3e:	431d      	orrs	r5, r3
 800ff40:	d001      	beq.n	800ff46 <floor+0x46>
 800ff42:	4c2d      	ldr	r4, [pc, #180]	; (800fff8 <floor+0xf8>)
 800ff44:	2500      	movs	r5, #0
 800ff46:	4621      	mov	r1, r4
 800ff48:	4628      	mov	r0, r5
 800ff4a:	e025      	b.n	800ff98 <floor+0x98>
 800ff4c:	4f2b      	ldr	r7, [pc, #172]	; (800fffc <floor+0xfc>)
 800ff4e:	4137      	asrs	r7, r6
 800ff50:	ea01 0307 	and.w	r3, r1, r7
 800ff54:	4303      	orrs	r3, r0
 800ff56:	d01f      	beq.n	800ff98 <floor+0x98>
 800ff58:	a325      	add	r3, pc, #148	; (adr r3, 800fff0 <floor+0xf0>)
 800ff5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5e:	f7f0 f9b5 	bl	80002cc <__adddf3>
 800ff62:	2200      	movs	r2, #0
 800ff64:	2300      	movs	r3, #0
 800ff66:	f7f0 fdf7 	bl	8000b58 <__aeabi_dcmpgt>
 800ff6a:	2800      	cmp	r0, #0
 800ff6c:	d0eb      	beq.n	800ff46 <floor+0x46>
 800ff6e:	2c00      	cmp	r4, #0
 800ff70:	bfbe      	ittt	lt
 800ff72:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ff76:	fa43 f606 	asrlt.w	r6, r3, r6
 800ff7a:	19a4      	addlt	r4, r4, r6
 800ff7c:	ea24 0407 	bic.w	r4, r4, r7
 800ff80:	2500      	movs	r5, #0
 800ff82:	e7e0      	b.n	800ff46 <floor+0x46>
 800ff84:	2e33      	cmp	r6, #51	; 0x33
 800ff86:	dd0b      	ble.n	800ffa0 <floor+0xa0>
 800ff88:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ff8c:	d104      	bne.n	800ff98 <floor+0x98>
 800ff8e:	ee10 2a10 	vmov	r2, s0
 800ff92:	460b      	mov	r3, r1
 800ff94:	f7f0 f99a 	bl	80002cc <__adddf3>
 800ff98:	ec41 0b10 	vmov	d0, r0, r1
 800ff9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffa0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ffa4:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa8:	fa23 f707 	lsr.w	r7, r3, r7
 800ffac:	4207      	tst	r7, r0
 800ffae:	d0f3      	beq.n	800ff98 <floor+0x98>
 800ffb0:	a30f      	add	r3, pc, #60	; (adr r3, 800fff0 <floor+0xf0>)
 800ffb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb6:	f7f0 f989 	bl	80002cc <__adddf3>
 800ffba:	2200      	movs	r2, #0
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	f7f0 fdcb 	bl	8000b58 <__aeabi_dcmpgt>
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	d0bf      	beq.n	800ff46 <floor+0x46>
 800ffc6:	2c00      	cmp	r4, #0
 800ffc8:	da02      	bge.n	800ffd0 <floor+0xd0>
 800ffca:	2e14      	cmp	r6, #20
 800ffcc:	d103      	bne.n	800ffd6 <floor+0xd6>
 800ffce:	3401      	adds	r4, #1
 800ffd0:	ea25 0507 	bic.w	r5, r5, r7
 800ffd4:	e7b7      	b.n	800ff46 <floor+0x46>
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ffdc:	fa03 f606 	lsl.w	r6, r3, r6
 800ffe0:	4435      	add	r5, r6
 800ffe2:	4545      	cmp	r5, r8
 800ffe4:	bf38      	it	cc
 800ffe6:	18e4      	addcc	r4, r4, r3
 800ffe8:	e7f2      	b.n	800ffd0 <floor+0xd0>
 800ffea:	2500      	movs	r5, #0
 800ffec:	462c      	mov	r4, r5
 800ffee:	e7aa      	b.n	800ff46 <floor+0x46>
 800fff0:	8800759c 	.word	0x8800759c
 800fff4:	7e37e43c 	.word	0x7e37e43c
 800fff8:	bff00000 	.word	0xbff00000
 800fffc:	000fffff 	.word	0x000fffff

08010000 <scalbn>:
 8010000:	b570      	push	{r4, r5, r6, lr}
 8010002:	ec55 4b10 	vmov	r4, r5, d0
 8010006:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801000a:	4606      	mov	r6, r0
 801000c:	462b      	mov	r3, r5
 801000e:	b99a      	cbnz	r2, 8010038 <scalbn+0x38>
 8010010:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010014:	4323      	orrs	r3, r4
 8010016:	d036      	beq.n	8010086 <scalbn+0x86>
 8010018:	4b39      	ldr	r3, [pc, #228]	; (8010100 <scalbn+0x100>)
 801001a:	4629      	mov	r1, r5
 801001c:	ee10 0a10 	vmov	r0, s0
 8010020:	2200      	movs	r2, #0
 8010022:	f7f0 fb09 	bl	8000638 <__aeabi_dmul>
 8010026:	4b37      	ldr	r3, [pc, #220]	; (8010104 <scalbn+0x104>)
 8010028:	429e      	cmp	r6, r3
 801002a:	4604      	mov	r4, r0
 801002c:	460d      	mov	r5, r1
 801002e:	da10      	bge.n	8010052 <scalbn+0x52>
 8010030:	a32b      	add	r3, pc, #172	; (adr r3, 80100e0 <scalbn+0xe0>)
 8010032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010036:	e03a      	b.n	80100ae <scalbn+0xae>
 8010038:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801003c:	428a      	cmp	r2, r1
 801003e:	d10c      	bne.n	801005a <scalbn+0x5a>
 8010040:	ee10 2a10 	vmov	r2, s0
 8010044:	4620      	mov	r0, r4
 8010046:	4629      	mov	r1, r5
 8010048:	f7f0 f940 	bl	80002cc <__adddf3>
 801004c:	4604      	mov	r4, r0
 801004e:	460d      	mov	r5, r1
 8010050:	e019      	b.n	8010086 <scalbn+0x86>
 8010052:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010056:	460b      	mov	r3, r1
 8010058:	3a36      	subs	r2, #54	; 0x36
 801005a:	4432      	add	r2, r6
 801005c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010060:	428a      	cmp	r2, r1
 8010062:	dd08      	ble.n	8010076 <scalbn+0x76>
 8010064:	2d00      	cmp	r5, #0
 8010066:	a120      	add	r1, pc, #128	; (adr r1, 80100e8 <scalbn+0xe8>)
 8010068:	e9d1 0100 	ldrd	r0, r1, [r1]
 801006c:	da1c      	bge.n	80100a8 <scalbn+0xa8>
 801006e:	a120      	add	r1, pc, #128	; (adr r1, 80100f0 <scalbn+0xf0>)
 8010070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010074:	e018      	b.n	80100a8 <scalbn+0xa8>
 8010076:	2a00      	cmp	r2, #0
 8010078:	dd08      	ble.n	801008c <scalbn+0x8c>
 801007a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801007e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010082:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010086:	ec45 4b10 	vmov	d0, r4, r5
 801008a:	bd70      	pop	{r4, r5, r6, pc}
 801008c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010090:	da19      	bge.n	80100c6 <scalbn+0xc6>
 8010092:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010096:	429e      	cmp	r6, r3
 8010098:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801009c:	dd0a      	ble.n	80100b4 <scalbn+0xb4>
 801009e:	a112      	add	r1, pc, #72	; (adr r1, 80100e8 <scalbn+0xe8>)
 80100a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d1e2      	bne.n	801006e <scalbn+0x6e>
 80100a8:	a30f      	add	r3, pc, #60	; (adr r3, 80100e8 <scalbn+0xe8>)
 80100aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ae:	f7f0 fac3 	bl	8000638 <__aeabi_dmul>
 80100b2:	e7cb      	b.n	801004c <scalbn+0x4c>
 80100b4:	a10a      	add	r1, pc, #40	; (adr r1, 80100e0 <scalbn+0xe0>)
 80100b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d0b8      	beq.n	8010030 <scalbn+0x30>
 80100be:	a10e      	add	r1, pc, #56	; (adr r1, 80100f8 <scalbn+0xf8>)
 80100c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100c4:	e7b4      	b.n	8010030 <scalbn+0x30>
 80100c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80100ca:	3236      	adds	r2, #54	; 0x36
 80100cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80100d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80100d4:	4620      	mov	r0, r4
 80100d6:	4b0c      	ldr	r3, [pc, #48]	; (8010108 <scalbn+0x108>)
 80100d8:	2200      	movs	r2, #0
 80100da:	e7e8      	b.n	80100ae <scalbn+0xae>
 80100dc:	f3af 8000 	nop.w
 80100e0:	c2f8f359 	.word	0xc2f8f359
 80100e4:	01a56e1f 	.word	0x01a56e1f
 80100e8:	8800759c 	.word	0x8800759c
 80100ec:	7e37e43c 	.word	0x7e37e43c
 80100f0:	8800759c 	.word	0x8800759c
 80100f4:	fe37e43c 	.word	0xfe37e43c
 80100f8:	c2f8f359 	.word	0xc2f8f359
 80100fc:	81a56e1f 	.word	0x81a56e1f
 8010100:	43500000 	.word	0x43500000
 8010104:	ffff3cb0 	.word	0xffff3cb0
 8010108:	3c900000 	.word	0x3c900000

0801010c <_init>:
 801010c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801010e:	bf00      	nop
 8010110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010112:	bc08      	pop	{r3}
 8010114:	469e      	mov	lr, r3
 8010116:	4770      	bx	lr

08010118 <_fini>:
 8010118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801011a:	bf00      	nop
 801011c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801011e:	bc08      	pop	{r3}
 8010120:	469e      	mov	lr, r3
 8010122:	4770      	bx	lr
