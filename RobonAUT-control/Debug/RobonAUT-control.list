
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e074  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800e248  0800e248  0001e248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8f8  0800e8f8  00020230  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8f8  0800e8f8  0001e8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e900  0800e900  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e900  0800e900  0001e900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e904  0800e904  0001e904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800e908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  20000230  0800eb38  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009a4  0800eb38  000209a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c4c  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003840  00000000  00000000  00037eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0003b6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  0003c970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002625c  00000000  00000000  0003dab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018808  00000000  00000000  00063d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e120c  00000000  00000000  0007c51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d728  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fec  00000000  00000000  0015d778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000230 	.word	0x20000230
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e22c 	.word	0x0800e22c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000234 	.word	0x20000234
 800020c:	0800e22c 	.word	0x0800e22c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <__NVIC_EnableIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db12      	blt.n	8001000 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	490a      	ldr	r1, [pc, #40]	; (800100c <__NVIC_DisableIRQ+0x44>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	3320      	adds	r3, #32
 8000ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff4:	f3bf 8f4f 	dsb	sy
}
 8000ff8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ffa:	f3bf 8f6f 	isb	sy
}
 8000ffe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0c      	blt.n	800103c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	; (8001048 <__NVIC_ClearPendingIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	3360      	adds	r3, #96	; 0x60
 8001038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001050:	f3bf 8f4f 	dsb	sy
}
 8001054:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <__NVIC_SystemReset+0x24>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800105e:	4904      	ldr	r1, [pc, #16]	; (8001070 <__NVIC_SystemReset+0x24>)
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <__NVIC_SystemReset+0x28>)
 8001062:	4313      	orrs	r3, r2
 8001064:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001066:	f3bf 8f4f 	dsb	sy
}
 800106a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <__NVIC_SystemReset+0x20>
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	05fa0004 	.word	0x05fa0004

08001078 <F4_Basic_Init>:
volatile uint8_t fromPC[1];
uint8_t mode;
float v_ref; //mm/s

void F4_Basic_Init(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_scheduler,TIM_HandleTypeDef *htim_motor,TIM_HandleTypeDef *htim_servo1,TIM_HandleTypeDef *htim_servo2, TIM_HandleTypeDef *htim_encoder)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	; 0x38
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
	char buf[40];
	LED_R(0);
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108c:	4842      	ldr	r0, [pc, #264]	; (8001198 <F4_Basic_Init+0x120>)
 800108e:	f005 f8db 	bl	8006248 <HAL_GPIO_WritePin>
	LED_B(0);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001098:	483f      	ldr	r0, [pc, #252]	; (8001198 <F4_Basic_Init+0x120>)
 800109a:	f005 f8d5 	bl	8006248 <HAL_GPIO_WritePin>
	LED_G(0);
 800109e:	2201      	movs	r2, #1
 80010a0:	2102      	movs	r1, #2
 80010a2:	483d      	ldr	r0, [pc, #244]	; (8001198 <F4_Basic_Init+0x120>)
 80010a4:	f005 f8d0 	bl	8006248 <HAL_GPIO_WritePin>
	LED_Y(0);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ae:	483a      	ldr	r0, [pc, #232]	; (8001198 <F4_Basic_Init+0x120>)
 80010b0:	f005 f8ca 	bl	8006248 <HAL_GPIO_WritePin>
	LED_NUCLEO(0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2120      	movs	r1, #32
 80010b8:	4838      	ldr	r0, [pc, #224]	; (800119c <F4_Basic_Init+0x124>)
 80010ba:	f005 f8c5 	bl	8006248 <HAL_GPIO_WritePin>
	sprintf(buf,"\r\nRobonAUT 2023 Bit Bangers F4\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4937      	ldr	r1, [pc, #220]	; (80011a0 <F4_Basic_Init+0x128>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f009 fbeb 	bl	800a8a0 <siprintf>
	HAL_UART_Transmit(huart_debugg,(uint8_t*) buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f89e 	bl	8000210 <strlen>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	f107 0110 	add.w	r1, r7, #16
 80010dc:	2364      	movs	r3, #100	; 0x64
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f007 fe75 	bl	8008dce <HAL_UART_Transmit>

	//MotorEnable engedélyezése
	motorEnRemote=0;//csak akkor ha megnyomtuk a ravaszt
 80010e4:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <F4_Basic_Init+0x12c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
	motorEnLineOk=1;
 80010ea:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <F4_Basic_Init+0x130>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]

	NVIC_ClearPendingIRQ(On_Board_Button_EXTI_IRQn);
 80010f0:	2028      	movs	r0, #40	; 0x28
 80010f2:	f7ff ff8d 	bl	8001010 <__NVIC_ClearPendingIRQ>
	swState[0] = swState[1] = 0;
 80010f6:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <F4_Basic_Init+0x134>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	705a      	strb	r2, [r3, #1]
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <F4_Basic_Init+0x134>)
 80010fe:	785a      	ldrb	r2, [r3, #1]
 8001100:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <F4_Basic_Init+0x134>)
 8001102:	701a      	strb	r2, [r3, #0]
	bFlag[0] = bFlag[1] = bFlag[2] = 0;
 8001104:	2200      	movs	r2, #0
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <F4_Basic_Init+0x138>)
 8001108:	4611      	mov	r1, r2
 800110a:	7099      	strb	r1, [r3, #2]
 800110c:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <F4_Basic_Init+0x138>)
 800110e:	4611      	mov	r1, r2
 8001110:	7059      	strb	r1, [r3, #1]
 8001112:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <F4_Basic_Init+0x138>)
 8001114:	701a      	strb	r2, [r3, #0]
	fromPC[1]=150;
 8001116:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <F4_Basic_Init+0x13c>)
 8001118:	2296      	movs	r2, #150	; 0x96
 800111a:	705a      	strb	r2, [r3, #1]
	mode=SKILL;
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <F4_Basic_Init+0x140>)
 800111e:	2252      	movs	r2, #82	; 0x52
 8001120:	701a      	strb	r2, [r3, #0]
	v_ref = 500;
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <F4_Basic_Init+0x144>)
 8001124:	4a26      	ldr	r2, [pc, #152]	; (80011c0 <F4_Basic_Init+0x148>)
 8001126:	601a      	str	r2, [r3, #0]
	v=0;
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <F4_Basic_Init+0x14c>)
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	601a      	str	r2, [r3, #0]

	//timerek elindítása
	TIM1->CCR4=680;
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <F4_Basic_Init+0x150>)
 8001132:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8001136:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR1=684;
 8001138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113c:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
	//TIM2->CCR1=684; //servot középre
	TIM3->CCR1=499; //0 kitöltési tényező a motorra
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <F4_Basic_Init+0x154>)
 8001144:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001148:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=499;
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <F4_Basic_Init+0x154>)
 800114c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001150:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start(htim_scheduler);//heart beat timer tick start
 8001152:	68b8      	ldr	r0, [r7, #8]
 8001154:	f005 ff4c 	bl	8006ff0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_1);//motor PWM-ek elindítása
 8001158:	2100      	movs	r1, #0
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f006 f80a 	bl	8007174 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_2);
 8001160:	2104      	movs	r1, #4
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f006 f806 	bl	8007174 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo1, TIM_CHANNEL_1); //servo RC pwm elindítása
 8001168:	2100      	movs	r1, #0
 800116a:	6838      	ldr	r0, [r7, #0]
 800116c:	f006 f802 	bl	8007174 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo2, TIM_CHANNEL_4); //servo RC pwm elindítása
 8001170:	210c      	movs	r1, #12
 8001172:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001174:	f005 fffe 	bl	8007174 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(htim_encoder,TIM_CHANNEL_ALL);
 8001178:	213c      	movs	r1, #60	; 0x3c
 800117a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800117c:	f006 fbdc 	bl	8007938 <HAL_TIM_Encoder_Start>

	//Ha a PC-ről küldünk vmit azt fogadjuk
	HAL_UART_Receive_IT(huart_debugg, fromPC, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	490c      	ldr	r1, [pc, #48]	; (80011b4 <F4_Basic_Init+0x13c>)
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f007 ff56 	bl	8009036 <HAL_UART_Receive_IT>
	NVIC_DisableIRQ(B1_EXTI_IRQn);
 800118a:	200a      	movs	r0, #10
 800118c:	f7ff ff1c 	bl	8000fc8 <__NVIC_DisableIRQ>
}
 8001190:	bf00      	nop
 8001192:	3738      	adds	r7, #56	; 0x38
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40020400 	.word	0x40020400
 800119c:	40020000 	.word	0x40020000
 80011a0:	0800e248 	.word	0x0800e248
 80011a4:	20000958 	.word	0x20000958
 80011a8:	20000959 	.word	0x20000959
 80011ac:	2000024c 	.word	0x2000024c
 80011b0:	20000250 	.word	0x20000250
 80011b4:	20000254 	.word	0x20000254
 80011b8:	20000255 	.word	0x20000255
 80011bc:	20000258 	.word	0x20000258
 80011c0:	43fa0000 	.word	0x43fa0000
 80011c4:	2000054c 	.word	0x2000054c
 80011c8:	40010000 	.word	0x40010000
 80011cc:	40000400 	.word	0x40000400

080011d0 <HDI_Read_Task>:


void HDI_Read_Task(TIM_HandleTypeDef *htim_servo,uint32_t tick, uint32_t period)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
	static uint32_t hdi_read_task_tick=0;
	static uint8_t b1_state=0;

	if(hdi_read_task_tick>tick) return;
 80011dc:	4b50      	ldr	r3, [pc, #320]	; (8001320 <HDI_Read_Task+0x150>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	f0c0 8097 	bcc.w	8001316 <HDI_Read_Task+0x146>
	hdi_read_task_tick = tick + period;
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a4c      	ldr	r2, [pc, #304]	; (8001320 <HDI_Read_Task+0x150>)
 80011f0:	6013      	str	r3, [r2, #0]

	swState[0]=SW1;
 80011f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f6:	484b      	ldr	r0, [pc, #300]	; (8001324 <HDI_Read_Task+0x154>)
 80011f8:	f005 f80e 	bl	8006218 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b49      	ldr	r3, [pc, #292]	; (8001328 <HDI_Read_Task+0x158>)
 8001202:	701a      	strb	r2, [r3, #0]
	swState[1]=SW2;
 8001204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001208:	4848      	ldr	r0, [pc, #288]	; (800132c <HDI_Read_Task+0x15c>)
 800120a:	f005 f805 	bl	8006218 <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b45      	ldr	r3, [pc, #276]	; (8001328 <HDI_Read_Task+0x158>)
 8001214:	705a      	strb	r2, [r3, #1]

	if(swState[0] && mode==FAST) LED_G(1);
 8001216:	4b44      	ldr	r3, [pc, #272]	; (8001328 <HDI_Read_Task+0x158>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d008      	beq.n	8001230 <HDI_Read_Task+0x60>
 800121e:	4b44      	ldr	r3, [pc, #272]	; (8001330 <HDI_Read_Task+0x160>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b3f      	cmp	r3, #63	; 0x3f
 8001224:	d104      	bne.n	8001230 <HDI_Read_Task+0x60>
 8001226:	2200      	movs	r2, #0
 8001228:	2102      	movs	r1, #2
 800122a:	4840      	ldr	r0, [pc, #256]	; (800132c <HDI_Read_Task+0x15c>)
 800122c:	f005 f80c 	bl	8006248 <HAL_GPIO_WritePin>
	if(!swState[0] && mode==FAST) LED_G(0);
 8001230:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <HDI_Read_Task+0x158>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d108      	bne.n	800124a <HDI_Read_Task+0x7a>
 8001238:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <HDI_Read_Task+0x160>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b3f      	cmp	r3, #63	; 0x3f
 800123e:	d104      	bne.n	800124a <HDI_Read_Task+0x7a>
 8001240:	2201      	movs	r2, #1
 8001242:	2102      	movs	r1, #2
 8001244:	4839      	ldr	r0, [pc, #228]	; (800132c <HDI_Read_Task+0x15c>)
 8001246:	f004 ffff 	bl	8006248 <HAL_GPIO_WritePin>
	/*if(swState[1]) LED_B(1);
	else LED_B(0);*/

	if(bFlag[0])
 800124a:	4b3a      	ldr	r3, [pc, #232]	; (8001334 <HDI_Read_Task+0x164>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d031      	beq.n	80012b8 <HDI_Read_Task+0xe8>
	{
		bFlag[0]=0;
 8001254:	4b37      	ldr	r3, [pc, #220]	; (8001334 <HDI_Read_Task+0x164>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
		//Milyen módban voltunk eddig?
		HAL_FLASH_Unlock();
 800125a:	f004 fc8f 	bl	8005b7c <HAL_FLASH_Unlock>
		mode= *(__IO uint32_t *) FLASH_ADDRESS_SECTOR7;
 800125e:	4b36      	ldr	r3, [pc, #216]	; (8001338 <HDI_Read_Task+0x168>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b32      	ldr	r3, [pc, #200]	; (8001330 <HDI_Read_Task+0x160>)
 8001266:	701a      	strb	r2, [r3, #0]
		HAL_FLASH_Lock();
 8001268:	f004 fcaa 	bl	8005bc0 <HAL_FLASH_Lock>

		//section 7 törlése, hogy újraírhassuk a módot jelző bytot
		HAL_FLASH_Unlock();
 800126c:	f004 fc86 	bl	8005b7c <HAL_FLASH_Unlock>
		FLASH_Erase_Sector(7, FLASH_VOLTAGE_RANGE_3);
 8001270:	2102      	movs	r1, #2
 8001272:	2007      	movs	r0, #7
 8001274:	f004 fdf4 	bl	8005e60 <FLASH_Erase_Sector>
		HAL_FLASH_Lock();
 8001278:	f004 fca2 	bl	8005bc0 <HAL_FLASH_Lock>
		HAL_Delay(200);
 800127c:	20c8      	movs	r0, #200	; 0xc8
 800127e:	f003 f949 	bl	8004514 <HAL_Delay>

		//Állítsuk át a módot
		HAL_FLASH_Unlock();
 8001282:	f004 fc7b 	bl	8005b7c <HAL_FLASH_Unlock>
		if(mode==SKILL) HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_SECTOR7, FAST);
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <HDI_Read_Task+0x160>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b52      	cmp	r3, #82	; 0x52
 800128c:	d108      	bne.n	80012a0 <HDI_Read_Task+0xd0>
 800128e:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	4928      	ldr	r1, [pc, #160]	; (8001338 <HDI_Read_Task+0x168>)
 8001298:	2000      	movs	r0, #0
 800129a:	f004 fc1b 	bl	8005ad4 <HAL_FLASH_Program>
 800129e:	e007      	b.n	80012b0 <HDI_Read_Task+0xe0>
		else HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_SECTOR7, SKILL);
 80012a0:	f04f 0252 	mov.w	r2, #82	; 0x52
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	4923      	ldr	r1, [pc, #140]	; (8001338 <HDI_Read_Task+0x168>)
 80012aa:	2000      	movs	r0, #0
 80012ac:	f004 fc12 	bl	8005ad4 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80012b0:	f004 fc86 	bl	8005bc0 <HAL_FLASH_Lock>

		NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 80012b4:	f7ff feca 	bl	800104c <__NVIC_SystemReset>
	}

	if(bFlag[1])
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <HDI_Read_Task+0x164>)
 80012ba:	785b      	ldrb	r3, [r3, #1]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d02a      	beq.n	8001318 <HDI_Read_Task+0x148>
	{
		if(b1_state)HAL_TIM_PWM_Start(htim_servo, TIM_CHANNEL_1);
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <HDI_Read_Task+0x16c>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <HDI_Read_Task+0x104>
 80012ca:	2100      	movs	r1, #0
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f005 ff51 	bl	8007174 <HAL_TIM_PWM_Start>
 80012d2:	e003      	b.n	80012dc <HDI_Read_Task+0x10c>
		else HAL_TIM_PWM_Stop(htim_servo, TIM_CHANNEL_1);
 80012d4:	2100      	movs	r1, #0
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f006 f814 	bl	8007304 <HAL_TIM_PWM_Stop>
		LED_Y_TOGGLE;
 80012dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e0:	4812      	ldr	r0, [pc, #72]	; (800132c <HDI_Read_Task+0x15c>)
 80012e2:	f004 ffca 	bl	800627a <HAL_GPIO_TogglePin>
		b1_state = !b1_state;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HDI_Read_Task+0x16c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf0c      	ite	eq
 80012ee:	2301      	moveq	r3, #1
 80012f0:	2300      	movne	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HDI_Read_Task+0x16c>)
 80012f8:	701a      	strb	r2, [r3, #0]
		bFlag[1]=0;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HDI_Read_Task+0x164>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	705a      	strb	r2, [r3, #1]
		HAL_Delay(800);
 8001300:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001304:	f003 f906 	bl	8004514 <HAL_Delay>
		NVIC_ClearPendingIRQ(B1_EXTI_IRQn);
 8001308:	200a      	movs	r0, #10
 800130a:	f7ff fe81 	bl	8001010 <__NVIC_ClearPendingIRQ>
		NVIC_EnableIRQ(B1_EXTI_IRQn);
 800130e:	200a      	movs	r0, #10
 8001310:	f7ff fe3c 	bl	8000f8c <__NVIC_EnableIRQ>
 8001314:	e000      	b.n	8001318 <HDI_Read_Task+0x148>
	if(hdi_read_task_tick>tick) return;
 8001316:	bf00      	nop
	}

}
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000025c 	.word	0x2000025c
 8001324:	40020000 	.word	0x40020000
 8001328:	2000024c 	.word	0x2000024c
 800132c:	40020400 	.word	0x40020400
 8001330:	20000255 	.word	0x20000255
 8001334:	20000250 	.word	0x20000250
 8001338:	08060000 	.word	0x08060000
 800133c:	20000260 	.word	0x20000260

08001340 <Uart_Receive_From_PC_ISR>:

void Uart_Receive_From_PC_ISR(UART_HandleTypeDef *huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	LED_Y_TOGGLE;
 8001348:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800134c:	4808      	ldr	r0, [pc, #32]	; (8001370 <Uart_Receive_From_PC_ISR+0x30>)
 800134e:	f004 ff94 	bl	800627a <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(huart, (uint8_t*)fromPC, 1);
 8001352:	2201      	movs	r2, #1
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <Uart_Receive_From_PC_ISR+0x34>)
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f007 fe6d 	bl	8009036 <HAL_UART_Receive_IT>
	TIM1->CCR4 = 4*fromPC[0];
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <Uart_Receive_From_PC_ISR+0x34>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	009a      	lsls	r2, r3, #2
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <Uart_Receive_From_PC_ISR+0x38>)
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40020400 	.word	0x40020400
 8001374:	20000254 	.word	0x20000254
 8001378:	40010000 	.word	0x40010000

0800137c <Control_Task>:
	VALUE(N[ID('X')].distance,371,0,0,189);
}


void Control_Task(uint32_t tick, uint32_t period)
{
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
	static uint8_t nextDirection=2;
	static uint8_t nextPath=RIGHT;
	static uint32_t t_prev=0;
	static uint32_t node_detection_time=0;
	static float fitness[4]={0,0,0,0};
	uint8_t i=0;
 8001386:	2300      	movs	r3, #0
 8001388:	75fb      	strb	r3, [r7, #23]

	float bestFitness=0;
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
	static uint8_t bestPath=0;
	uint8_t nID=0;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]

	static uint32_t control_task_tick = 0;

	if(mode!=SKILL)return;
 8001394:	4ba1      	ldr	r3, [pc, #644]	; (800161c <Control_Task+0x2a0>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b52      	cmp	r3, #82	; 0x52
 800139a:	f040 8198 	bne.w	80016ce <Control_Task+0x352>
	if(control_task_tick>tick)return;
 800139e:	4ba0      	ldr	r3, [pc, #640]	; (8001620 <Control_Task+0x2a4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	f0c0 8194 	bcc.w	80016d2 <Control_Task+0x356>
	control_task_tick=tick+period;
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a9b      	ldr	r2, [pc, #620]	; (8001620 <Control_Task+0x2a4>)
 80013b2:	6013      	str	r3, [r2, #0]
	//ha a nextPosition, be csak úgy tudok eljutni, hogy a myDirectionnel ellentétes irányba kéne indulnom,
	//akkor orientációt kell változtatni
	//a pathirány megahtárzása az orientation ismeretében már egyszerű

	//ha odaértünk a myPositionbe, akkor indulhat a mozgás a nextPosition felé
	if(nodeDetected)
 80013b4:	4b9b      	ldr	r3, [pc, #620]	; (8001624 <Control_Task+0x2a8>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d055      	beq.n	8001468 <Control_Task+0xec>
	{
		nodeDetected=0;
 80013bc:	4b99      	ldr	r3, [pc, #612]	; (8001624 <Control_Task+0x2a8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
		N[ID(myPosition)].worth=0;//ez a kapu már nem ér pontot
 80013c2:	4b99      	ldr	r3, [pc, #612]	; (8001628 <Control_Task+0x2ac>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80013ca:	4998      	ldr	r1, [pc, #608]	; (800162c <Control_Task+0x2b0>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	1a9b      	subs	r3, r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	3304      	adds	r3, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
		if(N[ID(nextPosition)].type>2)//ha a kövi node-on nincs kapu
 80013dc:	4b94      	ldr	r3, [pc, #592]	; (8001630 <Control_Task+0x2b4>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80013e4:	4991      	ldr	r1, [pc, #580]	; (800162c <Control_Task+0x2b0>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	1a9b      	subs	r3, r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	3308      	adds	r3, #8
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d927      	bls.n	8001448 <Control_Task+0xcc>
		{
			t_prev=tick;//mostantól mérjük az időt
 80013f8:	4a8e      	ldr	r2, [pc, #568]	; (8001634 <Control_Task+0x2b8>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
			node_detection_time=1000*N[ID(myPosition)].distance[bestPath]/abs((int)v);//ennyi ms-nek kell eltelnie, amíg odaérünk
 80013fe:	4b8a      	ldr	r3, [pc, #552]	; (8001628 <Control_Task+0x2ac>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8001406:	4b8c      	ldr	r3, [pc, #560]	; (8001638 <Control_Task+0x2bc>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	4987      	ldr	r1, [pc, #540]	; (800162c <Control_Task+0x2b0>)
 800140e:	4613      	mov	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	1a9b      	subs	r3, r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4403      	add	r3, r0
 8001418:	3308      	adds	r3, #8
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	440b      	add	r3, r1
 800141e:	889b      	ldrh	r3, [r3, #4]
 8001420:	461a      	mov	r2, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001426:	fb03 f202 	mul.w	r2, r3, r2
 800142a:	4b84      	ldr	r3, [pc, #528]	; (800163c <Control_Task+0x2c0>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001434:	ee17 3a90 	vmov	r3, s15
 8001438:	2b00      	cmp	r3, #0
 800143a:	bfb8      	it	lt
 800143c:	425b      	neglt	r3, r3
 800143e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001442:	461a      	mov	r2, r3
 8001444:	4b7e      	ldr	r3, [pc, #504]	; (8001640 <Control_Task+0x2c4>)
 8001446:	601a      	str	r2, [r3, #0]
		}
		myPosition=nextPosition;
 8001448:	4b79      	ldr	r3, [pc, #484]	; (8001630 <Control_Task+0x2b4>)
 800144a:	781a      	ldrb	r2, [r3, #0]
 800144c:	4b76      	ldr	r3, [pc, #472]	; (8001628 <Control_Task+0x2ac>)
 800144e:	701a      	strb	r2, [r3, #0]
		path=nextPath;
 8001450:	4b7c      	ldr	r3, [pc, #496]	; (8001644 <Control_Task+0x2c8>)
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	4b7c      	ldr	r3, [pc, #496]	; (8001648 <Control_Task+0x2cc>)
 8001456:	701a      	strb	r2, [r3, #0]
		myDirection=nextDirection;
 8001458:	4b7c      	ldr	r3, [pc, #496]	; (800164c <Control_Task+0x2d0>)
 800145a:	781a      	ldrb	r2, [r3, #0]
 800145c:	4b7c      	ldr	r3, [pc, #496]	; (8001650 <Control_Task+0x2d4>)
 800145e:	701a      	strb	r2, [r3, #0]
		orientation=nextOrientation;
 8001460:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <Control_Task+0x2d8>)
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	4b7c      	ldr	r3, [pc, #496]	; (8001658 <Control_Task+0x2dc>)
 8001466:	701a      	strb	r2, [r3, #0]

	}

	//legjobb szomszéd kiválasztása
	for(i=0;i<4;i++)
 8001468:	2300      	movs	r3, #0
 800146a:	75fb      	strb	r3, [r7, #23]
 800146c:	e068      	b.n	8001540 <Control_Task+0x1c4>
	{
		if(N[ID(myPosition)].neighbours[i]>0) //ha létezik a szomszéd
 800146e:	4b6e      	ldr	r3, [pc, #440]	; (8001628 <Control_Task+0x2ac>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8001476:	7df9      	ldrb	r1, [r7, #23]
 8001478:	486c      	ldr	r0, [pc, #432]	; (800162c <Control_Task+0x2b0>)
 800147a:	4613      	mov	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	1a9b      	subs	r3, r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4403      	add	r3, r0
 8001484:	440b      	add	r3, r1
 8001486:	330c      	adds	r3, #12
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d039      	beq.n	8001502 <Control_Task+0x186>
		{
			nID=N[ID(myPosition)].neighbours[i]; //a vizsgált szomszéd azonosítója
 800148e:	4b66      	ldr	r3, [pc, #408]	; (8001628 <Control_Task+0x2ac>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8001496:	7df9      	ldrb	r1, [r7, #23]
 8001498:	4864      	ldr	r0, [pc, #400]	; (800162c <Control_Task+0x2b0>)
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	1a9b      	subs	r3, r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4403      	add	r3, r0
 80014a4:	440b      	add	r3, r1
 80014a6:	330c      	adds	r3, #12
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	73fb      	strb	r3, [r7, #15]
			fitness[i]=(float)N[ID(nID)].worth/(N[ID(myPosition)].distance[i]); //a fitneszértéke
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80014b2:	495e      	ldr	r1, [pc, #376]	; (800162c <Control_Task+0x2b0>)
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	3304      	adds	r3, #4
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ca:	4b57      	ldr	r3, [pc, #348]	; (8001628 <Control_Task+0x2ac>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80014d2:	7df9      	ldrb	r1, [r7, #23]
 80014d4:	4855      	ldr	r0, [pc, #340]	; (800162c <Control_Task+0x2b0>)
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	440b      	add	r3, r1
 80014e0:	3308      	adds	r3, #8
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4403      	add	r3, r0
 80014e6:	889b      	ldrh	r3, [r3, #4]
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f6:	4a59      	ldr	r2, [pc, #356]	; (800165c <Control_Task+0x2e0>)
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	edc3 7a00 	vstr	s15, [r3]
 8001500:	e005      	b.n	800150e <Control_Task+0x192>
		}
		else fitness[i]=-100.0;//ha nem létezik a szomszéd erre tuti ne menjünk
 8001502:	7dfb      	ldrb	r3, [r7, #23]
 8001504:	4a55      	ldr	r2, [pc, #340]	; (800165c <Control_Task+0x2e0>)
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	4a55      	ldr	r2, [pc, #340]	; (8001660 <Control_Task+0x2e4>)
 800150c:	601a      	str	r2, [r3, #0]
		if(fitness[i]>bestFitness)
 800150e:	7dfb      	ldrb	r3, [r7, #23]
 8001510:	4a52      	ldr	r2, [pc, #328]	; (800165c <Control_Task+0x2e0>)
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ed97 7a04 	vldr	s14, [r7, #16]
 800151e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001526:	d508      	bpl.n	800153a <Control_Task+0x1be>
		{
			bestFitness=fitness[i];
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	4a4c      	ldr	r2, [pc, #304]	; (800165c <Control_Task+0x2e0>)
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	613b      	str	r3, [r7, #16]
			bestPath = i;
 8001534:	4a40      	ldr	r2, [pc, #256]	; (8001638 <Control_Task+0x2bc>)
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	7013      	strb	r3, [r2, #0]
	for(i=0;i<4;i++)
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	3301      	adds	r3, #1
 800153e:	75fb      	strb	r3, [r7, #23]
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	2b03      	cmp	r3, #3
 8001544:	d993      	bls.n	800146e <Control_Task+0xf2>
		}
	}
	//a következő poziciónk a legjobb szomszéd lesz
	nextPosition=N[ID(myPosition)].neighbours[bestPath];
 8001546:	4b38      	ldr	r3, [pc, #224]	; (8001628 <Control_Task+0x2ac>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800154e:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <Control_Task+0x2bc>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	4935      	ldr	r1, [pc, #212]	; (800162c <Control_Task+0x2b0>)
 8001556:	4613      	mov	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	4403      	add	r3, r0
 8001562:	330c      	adds	r3, #12
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	4b32      	ldr	r3, [pc, #200]	; (8001630 <Control_Task+0x2b4>)
 8001568:	701a      	strb	r2, [r3, #0]
	nextDirection=N[ID(myPosition)].directions[bestPath];//már most tudjuk, mi lesz az irányunk, ha odaértünk
 800156a:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <Control_Task+0x2ac>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8001572:	4b31      	ldr	r3, [pc, #196]	; (8001638 <Control_Task+0x2bc>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	492c      	ldr	r1, [pc, #176]	; (800162c <Control_Task+0x2b0>)
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	4403      	add	r3, r0
 8001586:	3310      	adds	r3, #16
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	4b30      	ldr	r3, [pc, #192]	; (800164c <Control_Task+0x2d0>)
 800158c:	701a      	strb	r2, [r3, #0]

	//a kocsi az egyik node-ból átmegy egy másikba-> az irányok segítségével meghatározzu az új orientationt
	if(bestPath<2) //ha balra/le kell majd mennünk a nextPosition -höz
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <Control_Task+0x2bc>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d813      	bhi.n	80015be <Control_Task+0x242>
	{
		if(nextDirection==2)//és eddig jobbra/fel mentünk,
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <Control_Task+0x2d0>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d10a      	bne.n	80015b4 <Control_Task+0x238>
			nextOrientation = !orientation;//akkor most irányt kell váltanunk
 800159e:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <Control_Task+0x2dc>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bf0c      	ite	eq
 80015a6:	2301      	moveq	r3, #1
 80015a8:	2300      	movne	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b29      	ldr	r3, [pc, #164]	; (8001654 <Control_Task+0x2d8>)
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	e017      	b.n	80015e4 <Control_Task+0x268>
		else nextOrientation=orientation; //különben nem kell
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <Control_Task+0x2dc>)
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <Control_Task+0x2d8>)
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	e012      	b.n	80015e4 <Control_Task+0x268>
	}
	else //ha jobbra kell majd mennünk
	{
		if(myDirection==1)//és eddig jobbra/fel mentünk,
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <Control_Task+0x2d4>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d10a      	bne.n	80015dc <Control_Task+0x260>
			nextOrientation = !orientation;//akkor most irányt kell váltanunk
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <Control_Task+0x2dc>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bf0c      	ite	eq
 80015ce:	2301      	moveq	r3, #1
 80015d0:	2300      	movne	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <Control_Task+0x2d8>)
 80015d8:	701a      	strb	r2, [r3, #0]
 80015da:	e003      	b.n	80015e4 <Control_Task+0x268>
		else nextOrientation=orientation; //különben nem kell
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <Control_Task+0x2dc>)
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <Control_Task+0x2d8>)
 80015e2:	701a      	strb	r2, [r3, #0]
	}

	//path kiválasztás -> az orientációt mostmár tudjuk (tolatás/előre), már csak az ösvény kell kivákasztani, hogy a megfelelő szomszédhoz jussunk
	if(nextOrientation==FORWARD)
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <Control_Task+0x2d8>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d13b      	bne.n	8001664 <Control_Task+0x2e8>
	{
		if(bestPath==1 || bestPath==3)nextPath=LEFT;
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <Control_Task+0x2bc>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d003      	beq.n	80015fc <Control_Task+0x280>
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <Control_Task+0x2bc>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d103      	bne.n	8001604 <Control_Task+0x288>
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <Control_Task+0x2c8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
 8001602:	e04a      	b.n	800169a <Control_Task+0x31e>
		else if(bestPath==2 || bestPath==4)nextPath=RIGHT;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <Control_Task+0x2bc>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d003      	beq.n	8001614 <Control_Task+0x298>
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <Control_Task+0x2bc>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b04      	cmp	r3, #4
 8001612:	d142      	bne.n	800169a <Control_Task+0x31e>
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <Control_Task+0x2c8>)
 8001616:	2202      	movs	r2, #2
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	e03e      	b.n	800169a <Control_Task+0x31e>
 800161c:	20000255 	.word	0x20000255
 8001620:	20000508 	.word	0x20000508
 8001624:	20000262 	.word	0x20000262
 8001628:	20000000 	.word	0x20000000
 800162c:	20000268 	.word	0x20000268
 8001630:	20000001 	.word	0x20000001
 8001634:	2000050c 	.word	0x2000050c
 8001638:	20000510 	.word	0x20000510
 800163c:	2000054c 	.word	0x2000054c
 8001640:	20000514 	.word	0x20000514
 8001644:	20000002 	.word	0x20000002
 8001648:	20000263 	.word	0x20000263
 800164c:	20000003 	.word	0x20000003
 8001650:	20000004 	.word	0x20000004
 8001654:	20000518 	.word	0x20000518
 8001658:	20000261 	.word	0x20000261
 800165c:	2000051c 	.word	0x2000051c
 8001660:	c2c80000 	.word	0xc2c80000
	}
	else if(nextOrientation==REVERSE) //tolatásnál pont forditva vannak a pathirányok
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <Control_Task+0x364>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d116      	bne.n	800169a <Control_Task+0x31e>
	{
		if(bestPath==1 || bestPath==3)nextPath=RIGHT;
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <Control_Task+0x368>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d003      	beq.n	800167c <Control_Task+0x300>
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <Control_Task+0x368>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d103      	bne.n	8001684 <Control_Task+0x308>
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <Control_Task+0x36c>)
 800167e:	2202      	movs	r2, #2
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	e00a      	b.n	800169a <Control_Task+0x31e>
		else if(bestPath==2 || bestPath==4)nextPath=LEFT;
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <Control_Task+0x368>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d003      	beq.n	8001694 <Control_Task+0x318>
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <Control_Task+0x368>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b04      	cmp	r3, #4
 8001692:	d102      	bne.n	800169a <Control_Task+0x31e>
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <Control_Task+0x36c>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
	}

	//ha kapu nélküli nodeba tartunk éppen, akkor időzítéssel "detektáljuk" a nodot
	if(N[ID(myPosition)].type>2 && (tick-t_prev)>node_detection_time)
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <Control_Task+0x370>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80016a2:	4913      	ldr	r1, [pc, #76]	; (80016f0 <Control_Task+0x374>)
 80016a4:	4613      	mov	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	1a9b      	subs	r3, r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	3308      	adds	r3, #8
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d90e      	bls.n	80016d4 <Control_Task+0x358>
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <Control_Task+0x378>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	1ad2      	subs	r2, r2, r3
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <Control_Task+0x37c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d906      	bls.n	80016d4 <Control_Task+0x358>
	{
		nodeDetected=1;
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <Control_Task+0x380>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	e002      	b.n	80016d4 <Control_Task+0x358>
	if(mode!=SKILL)return;
 80016ce:	bf00      	nop
 80016d0:	e000      	b.n	80016d4 <Control_Task+0x358>
	if(control_task_tick>tick)return;
 80016d2:	bf00      	nop
	}

}
 80016d4:	371c      	adds	r7, #28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000518 	.word	0x20000518
 80016e4:	20000510 	.word	0x20000510
 80016e8:	20000002 	.word	0x20000002
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000268 	.word	0x20000268
 80016f4:	2000050c 	.word	0x2000050c
 80016f8:	20000514 	.word	0x20000514
 80016fc:	20000262 	.word	0x20000262

08001700 <Mode_Selector>:


void Mode_Selector(UART_HandleTypeDef *huart_debugg, UART_HandleTypeDef *huart_stm)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08e      	sub	sp, #56	; 0x38
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	//Milyen módban kell működni?
	uint8_t buffer[40];
	uint32_t tmp=0;
 800170a:	2300      	movs	r3, #0
 800170c:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_FLASH_Unlock();
 800170e:	f004 fa35 	bl	8005b7c <HAL_FLASH_Unlock>
	tmp= *(__IO uint32_t *) FLASH_ADDRESS_SECTOR7; //FLASH-ből kiolvassuk, hogy milyen módban vagyunk
 8001712:	4b4a      	ldr	r3, [pc, #296]	; (800183c <Mode_Selector+0x13c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_FLASH_Lock();
 8001718:	f004 fa52 	bl	8005bc0 <HAL_FLASH_Lock>
	mode = (uint8_t)tmp;
 800171c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171e:	b2da      	uxtb	r2, r3
 8001720:	4b47      	ldr	r3, [pc, #284]	; (8001840 <Mode_Selector+0x140>)
 8001722:	701a      	strb	r2, [r3, #0]

	if(mode==SKILL)
 8001724:	4b46      	ldr	r3, [pc, #280]	; (8001840 <Mode_Selector+0x140>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b52      	cmp	r3, #82	; 0x52
 800172a:	d135      	bne.n	8001798 <Mode_Selector+0x98>
	{
		buffer[0] = CMD_MODE_SKILL; //szólunk a g0-nak, hogy ügyességi módban vagyunk
 800172c:	2352      	movs	r3, #82	; 0x52
 800172e:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8001730:	f107 010c 	add.w	r1, r7, #12
 8001734:	230a      	movs	r3, #10
 8001736:	2201      	movs	r2, #1
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f007 fb48 	bl	8008dce <HAL_UART_Transmit>
		HAL_Delay(10);
 800173e:	200a      	movs	r0, #10
 8001740:	f002 fee8 	bl	8004514 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);//3 szór is szólunk neki, hogy tuti megkapja a módváltásról az üzenetet
 8001744:	f107 010c 	add.w	r1, r7, #12
 8001748:	230a      	movs	r3, #10
 800174a:	2201      	movs	r2, #1
 800174c:	6838      	ldr	r0, [r7, #0]
 800174e:	f007 fb3e 	bl	8008dce <HAL_UART_Transmit>
		HAL_Delay(10);
 8001752:	200a      	movs	r0, #10
 8001754:	f002 fede 	bl	8004514 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8001758:	f107 010c 	add.w	r1, r7, #12
 800175c:	230a      	movs	r3, #10
 800175e:	2201      	movs	r2, #1
 8001760:	6838      	ldr	r0, [r7, #0]
 8001762:	f007 fb34 	bl	8008dce <HAL_UART_Transmit>

		sprintf((char*)buffer,"Skill mode!\n\r"); //Debugg uart-ra is kiküldjük, hogy milyen módban vagyunk
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	4936      	ldr	r1, [pc, #216]	; (8001844 <Mode_Selector+0x144>)
 800176c:	4618      	mov	r0, r3
 800176e:	f009 f897 	bl	800a8a0 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fd4a 	bl	8000210 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	f107 010c 	add.w	r1, r7, #12
 8001784:	2364      	movs	r3, #100	; 0x64
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f007 fb21 	bl	8008dce <HAL_UART_Transmit>
		LED_NUCLEO(1); //A NUCLEO zöld LED-je világít, ha ügyeségi üzemmódban vagyunk
 800178c:	2201      	movs	r2, #1
 800178e:	2120      	movs	r1, #32
 8001790:	482d      	ldr	r0, [pc, #180]	; (8001848 <Mode_Selector+0x148>)
 8001792:	f004 fd59 	bl	8006248 <HAL_GPIO_WritePin>
	else
	{
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
	}
}
 8001796:	e04c      	b.n	8001832 <Mode_Selector+0x132>
	else if(mode==FAST)
 8001798:	4b29      	ldr	r3, [pc, #164]	; (8001840 <Mode_Selector+0x140>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b3f      	cmp	r3, #63	; 0x3f
 800179e:	d135      	bne.n	800180c <Mode_Selector+0x10c>
		buffer[0] = CMD_MODE_FAST;
 80017a0:	233f      	movs	r3, #63	; 0x3f
 80017a2:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80017a4:	f107 010c 	add.w	r1, r7, #12
 80017a8:	230a      	movs	r3, #10
 80017aa:	2201      	movs	r2, #1
 80017ac:	6838      	ldr	r0, [r7, #0]
 80017ae:	f007 fb0e 	bl	8008dce <HAL_UART_Transmit>
		HAL_Delay(10);
 80017b2:	200a      	movs	r0, #10
 80017b4:	f002 feae 	bl	8004514 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80017b8:	f107 010c 	add.w	r1, r7, #12
 80017bc:	230a      	movs	r3, #10
 80017be:	2201      	movs	r2, #1
 80017c0:	6838      	ldr	r0, [r7, #0]
 80017c2:	f007 fb04 	bl	8008dce <HAL_UART_Transmit>
		HAL_Delay(10);
 80017c6:	200a      	movs	r0, #10
 80017c8:	f002 fea4 	bl	8004514 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80017cc:	f107 010c 	add.w	r1, r7, #12
 80017d0:	230a      	movs	r3, #10
 80017d2:	2201      	movs	r2, #1
 80017d4:	6838      	ldr	r0, [r7, #0]
 80017d6:	f007 fafa 	bl	8008dce <HAL_UART_Transmit>
		sprintf((char*)buffer,"Fast mode!\n\r");
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	491b      	ldr	r1, [pc, #108]	; (800184c <Mode_Selector+0x14c>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f009 f85d 	bl	800a8a0 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fd10 	bl	8000210 <strlen>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	f107 010c 	add.w	r1, r7, #12
 80017f8:	2364      	movs	r3, #100	; 0x64
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f007 fae7 	bl	8008dce <HAL_UART_Transmit>
		LED_NUCLEO(0);
 8001800:	2200      	movs	r2, #0
 8001802:	2120      	movs	r1, #32
 8001804:	4810      	ldr	r0, [pc, #64]	; (8001848 <Mode_Selector+0x148>)
 8001806:	f004 fd1f 	bl	8006248 <HAL_GPIO_WritePin>
}
 800180a:	e012      	b.n	8001832 <Mode_Selector+0x132>
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	490f      	ldr	r1, [pc, #60]	; (8001850 <Mode_Selector+0x150>)
 8001812:	4618      	mov	r0, r3
 8001814:	f009 f844 	bl	800a8a0 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fcf7 	bl	8000210 <strlen>
 8001822:	4603      	mov	r3, r0
 8001824:	b29a      	uxth	r2, r3
 8001826:	f107 010c 	add.w	r1, r7, #12
 800182a:	2364      	movs	r3, #100	; 0x64
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f007 face 	bl	8008dce <HAL_UART_Transmit>
}
 8001832:	bf00      	nop
 8001834:	3738      	adds	r7, #56	; 0x38
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	08060000 	.word	0x08060000
 8001840:	20000255 	.word	0x20000255
 8001844:	0800e26c 	.word	0x0800e26c
 8001848:	40020000 	.word	0x40020000
 800184c:	0800e27c 	.word	0x0800e27c
 8001850:	0800e28c 	.word	0x0800e28c

08001854 <Skill_Mode>:

//bemenet detect, kalozrobpoz; kimenet direction
float Skill_Mode(UART_HandleTypeDef *huart_debugg, float kP, float kD, uint32_t t)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001860:	edc7 0a01 	vstr	s1, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
	static uint32_t t_prev=0;
	uint8_t byte=0;
 8001866:	2300      	movs	r3, #0
 8001868:	77fb      	strb	r3, [r7, #31]
	static uint8_t byte_prev=0;
	uint8_t delta_byte;
	float p=0;
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
/*	uint8_t str[40];
	sprintf(str,"%d,  %d,  %d,  %d,  %d\n\r",rxBuf[1],rxBuf[2],rxBuf[3],rxBuf[4],rxBuf[5]);
	HAL_UART_Transmit(huart_debugg, str, strlen(str), 10);
*/

	if(LINE_CNT>3 || ignore)//ha éppen node-on vagyunk, akkor az átlagot követjük
 8001870:	4b8b      	ldr	r3, [pc, #556]	; (8001aa0 <Skill_Mode+0x24c>)
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d803      	bhi.n	8001880 <Skill_Mode+0x2c>
 8001878:	4b8a      	ldr	r3, [pc, #552]	; (8001aa4 <Skill_Mode+0x250>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d020      	beq.n	80018c2 <Skill_Mode+0x6e>
	{
		byte=0;
 8001880:	2300      	movs	r3, #0
 8001882:	77fb      	strb	r3, [r7, #31]
		for(i=0;i<LINE_CNT;i++)
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	e009      	b.n	800189e <Skill_Mode+0x4a>
		{
			byte += rxBuf[i+2];
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	3302      	adds	r3, #2
 800188e:	4a84      	ldr	r2, [pc, #528]	; (8001aa0 <Skill_Mode+0x24c>)
 8001890:	5cd2      	ldrb	r2, [r2, r3]
 8001892:	7ffb      	ldrb	r3, [r7, #31]
 8001894:	4413      	add	r3, r2
 8001896:	77fb      	strb	r3, [r7, #31]
		for(i=0;i<LINE_CNT;i++)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	3301      	adds	r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	4b80      	ldr	r3, [pc, #512]	; (8001aa0 <Skill_Mode+0x24c>)
 80018a0:	785b      	ldrb	r3, [r3, #1]
 80018a2:	461a      	mov	r2, r3
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	4293      	cmp	r3, r2
 80018a8:	dbef      	blt.n	800188a <Skill_Mode+0x36>
		}

		if(LINE_CNT) byte /= LINE_CNT;
 80018aa:	4b7d      	ldr	r3, [pc, #500]	; (8001aa0 <Skill_Mode+0x24c>)
 80018ac:	785b      	ldrb	r3, [r3, #1]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 810b 	beq.w	8001aca <Skill_Mode+0x276>
 80018b4:	4b7a      	ldr	r3, [pc, #488]	; (8001aa0 <Skill_Mode+0x24c>)
 80018b6:	785b      	ldrb	r3, [r3, #1]
 80018b8:	7ffa      	ldrb	r2, [r7, #31]
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	77fb      	strb	r3, [r7, #31]
 80018c0:	e103      	b.n	8001aca <Skill_Mode+0x276>
	}
	else if(path==LEFT)
 80018c2:	4b79      	ldr	r3, [pc, #484]	; (8001aa8 <Skill_Mode+0x254>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d15a      	bne.n	8001980 <Skill_Mode+0x12c>
	{
		byte = LINE1; //az első vonalt kell követni
 80018ca:	4b75      	ldr	r3, [pc, #468]	; (8001aa0 <Skill_Mode+0x24c>)
 80018cc:	789b      	ldrb	r3, [r3, #2]
 80018ce:	77fb      	strb	r3, [r7, #31]
		delta_byte=abs(byte-byte_prev);
 80018d0:	7ffb      	ldrb	r3, [r7, #31]
 80018d2:	4a76      	ldr	r2, [pc, #472]	; (8001aac <Skill_Mode+0x258>)
 80018d4:	7812      	ldrb	r2, [r2, #0]
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bfb8      	it	lt
 80018dc:	425b      	neglt	r3, r3
 80018de:	74fb      	strb	r3, [r7, #19]
		if((delta_byte>ESTUARY_TH && estuary!=ESTURAY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 80018e0:	7cfb      	ldrb	r3, [r7, #19]
 80018e2:	2b5a      	cmp	r3, #90	; 0x5a
 80018e4:	d903      	bls.n	80018ee <Skill_Mode+0x9a>
 80018e6:	4b72      	ldr	r3, [pc, #456]	; (8001ab0 <Skill_Mode+0x25c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d103      	bne.n	80018f6 <Skill_Mode+0xa2>
 80018ee:	4b70      	ldr	r3, [pc, #448]	; (8001ab0 <Skill_Mode+0x25c>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d132      	bne.n	800195c <Skill_Mode+0x108>
		{
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 80018f6:	4b6a      	ldr	r3, [pc, #424]	; (8001aa0 <Skill_Mode+0x24c>)
 80018f8:	785b      	ldrb	r3, [r3, #1]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d925      	bls.n	800194a <Skill_Mode+0xf6>
			{
				if(estuary==ESTUARY_MODE_OFF)t_prev=t;//ha most kapcsoltuk be a torkolatkompenzálást, akkor mostantól mérjük az eltelt időt
 80018fe:	4b6c      	ldr	r3, [pc, #432]	; (8001ab0 <Skill_Mode+0x25c>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d102      	bne.n	800190c <Skill_Mode+0xb8>
 8001906:	4a6b      	ldr	r2, [pc, #428]	; (8001ab4 <Skill_Mode+0x260>)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	6013      	str	r3, [r2, #0]
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 800190c:	4b69      	ldr	r3, [pc, #420]	; (8001ab4 <Skill_Mode+0x260>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001918:	d908      	bls.n	800192c <Skill_Mode+0xd8>
				{
					estuary=ESTUARY_MODE_OFF; //ha letelt a timeout kilépünk a kompenzálásból
 800191a:	4b65      	ldr	r3, [pc, #404]	; (8001ab0 <Skill_Mode+0x25c>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
					LED_G(0);
 8001920:	2201      	movs	r2, #1
 8001922:	2102      	movs	r1, #2
 8001924:	4864      	ldr	r0, [pc, #400]	; (8001ab8 <Skill_Mode+0x264>)
 8001926:	f004 fc8f 	bl	8006248 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 800192a:	e0ce      	b.n	8001aca <Skill_Mode+0x276>
				}
				else //ha még nem telt le az timout idő
				{
					byte = rxBuf[1+LINE_CNT]; //ilyenkor az utolsó vonalat nézzük az első helyett
 800192c:	4b5c      	ldr	r3, [pc, #368]	; (8001aa0 <Skill_Mode+0x24c>)
 800192e:	785b      	ldrb	r3, [r3, #1]
 8001930:	3301      	adds	r3, #1
 8001932:	4a5b      	ldr	r2, [pc, #364]	; (8001aa0 <Skill_Mode+0x24c>)
 8001934:	5cd3      	ldrb	r3, [r2, r3]
 8001936:	77fb      	strb	r3, [r7, #31]
					estuary=ESTUARY_MODE_ON; //öntartás
 8001938:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <Skill_Mode+0x25c>)
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]
					LED_G(1);
 800193e:	2200      	movs	r2, #0
 8001940:	2102      	movs	r1, #2
 8001942:	485d      	ldr	r0, [pc, #372]	; (8001ab8 <Skill_Mode+0x264>)
 8001944:	f004 fc80 	bl	8006248 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 8001948:	e0bf      	b.n	8001aca <Skill_Mode+0x276>
				}

			}
			else
			{
				estuary=ESTUARY_MODE_OFF; //ha nincs elég vonal kikapcsoljuk az öntartást (legalább2 vonal esetén beszélhetünk torkolatról)
 800194a:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <Skill_Mode+0x25c>)
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
				LED_G(0);
 8001950:	2201      	movs	r2, #1
 8001952:	2102      	movs	r1, #2
 8001954:	4858      	ldr	r0, [pc, #352]	; (8001ab8 <Skill_Mode+0x264>)
 8001956:	f004 fc77 	bl	8006248 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 800195a:	e0b6      	b.n	8001aca <Skill_Mode+0x276>
			}
		}
		else if(delta_byte<ESTUARY_EXIT && estuary==ESTUARY_MODE_ON) //ha már eléggé összeszűkült a torkolat, akkor nem kell kompenzálni
 800195c:	7cfb      	ldrb	r3, [r7, #19]
 800195e:	2b2c      	cmp	r3, #44	; 0x2c
 8001960:	f200 80b3 	bhi.w	8001aca <Skill_Mode+0x276>
 8001964:	4b52      	ldr	r3, [pc, #328]	; (8001ab0 <Skill_Mode+0x25c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b02      	cmp	r3, #2
 800196a:	f040 80ae 	bne.w	8001aca <Skill_Mode+0x276>
		{
			estuary=ESTUARY_MODE_OFF;
 800196e:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <Skill_Mode+0x25c>)
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
			LED_G(0);
 8001974:	2201      	movs	r2, #1
 8001976:	2102      	movs	r1, #2
 8001978:	484f      	ldr	r0, [pc, #316]	; (8001ab8 <Skill_Mode+0x264>)
 800197a:	f004 fc65 	bl	8006248 <HAL_GPIO_WritePin>
 800197e:	e0a4      	b.n	8001aca <Skill_Mode+0x276>
		}
	}
	else if(path==RIGHT)
 8001980:	4b49      	ldr	r3, [pc, #292]	; (8001aa8 <Skill_Mode+0x254>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d158      	bne.n	8001a3a <Skill_Mode+0x1e6>
	{
		byte = rxBuf[1+LINE_CNT];//az utolsó vonalat kell követni
 8001988:	4b45      	ldr	r3, [pc, #276]	; (8001aa0 <Skill_Mode+0x24c>)
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	3301      	adds	r3, #1
 800198e:	4a44      	ldr	r2, [pc, #272]	; (8001aa0 <Skill_Mode+0x24c>)
 8001990:	5cd3      	ldrb	r3, [r2, r3]
 8001992:	77fb      	strb	r3, [r7, #31]
		delta_byte=abs(byte-byte_prev);
 8001994:	7ffb      	ldrb	r3, [r7, #31]
 8001996:	4a45      	ldr	r2, [pc, #276]	; (8001aac <Skill_Mode+0x258>)
 8001998:	7812      	ldrb	r2, [r2, #0]
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	bfb8      	it	lt
 80019a0:	425b      	neglt	r3, r3
 80019a2:	74fb      	strb	r3, [r7, #19]
		if((delta_byte>ESTUARY_TH && estuary!=ESTURAY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 80019a4:	7cfb      	ldrb	r3, [r7, #19]
 80019a6:	2b5a      	cmp	r3, #90	; 0x5a
 80019a8:	d903      	bls.n	80019b2 <Skill_Mode+0x15e>
 80019aa:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <Skill_Mode+0x25c>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d103      	bne.n	80019ba <Skill_Mode+0x166>
 80019b2:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <Skill_Mode+0x25c>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d12f      	bne.n	8001a1a <Skill_Mode+0x1c6>
		{
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 80019ba:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <Skill_Mode+0x24c>)
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d922      	bls.n	8001a08 <Skill_Mode+0x1b4>
			{
				if(estuary==ESTUARY_MODE_OFF)t_prev=t;//ha most kapcsoltuk be a torkolatkompenzálást, akkor mostantól mérjük az eltelt időt
 80019c2:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <Skill_Mode+0x25c>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d102      	bne.n	80019d0 <Skill_Mode+0x17c>
 80019ca:	4a3a      	ldr	r2, [pc, #232]	; (8001ab4 <Skill_Mode+0x260>)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6013      	str	r3, [r2, #0]
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 80019d0:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <Skill_Mode+0x260>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80019dc:	d908      	bls.n	80019f0 <Skill_Mode+0x19c>
				{
					estuary=ESTUARY_MODE_OFF; //ha letelt a timeout kilépünk a kompenzálásból
 80019de:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <Skill_Mode+0x25c>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
					LED_G(0);
 80019e4:	2201      	movs	r2, #1
 80019e6:	2102      	movs	r1, #2
 80019e8:	4833      	ldr	r0, [pc, #204]	; (8001ab8 <Skill_Mode+0x264>)
 80019ea:	f004 fc2d 	bl	8006248 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 80019ee:	e06c      	b.n	8001aca <Skill_Mode+0x276>
				}
				else //ha még nem telt le az idő
				{
					byte = rxBuf[2]; //ilyenkor az első vonalat nézzük az utolsó helyett
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <Skill_Mode+0x24c>)
 80019f2:	789b      	ldrb	r3, [r3, #2]
 80019f4:	77fb      	strb	r3, [r7, #31]
					estuary=ESTUARY_MODE_ON; //öntartás
 80019f6:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <Skill_Mode+0x25c>)
 80019f8:	2202      	movs	r2, #2
 80019fa:	701a      	strb	r2, [r3, #0]
					LED_G(1);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2102      	movs	r1, #2
 8001a00:	482d      	ldr	r0, [pc, #180]	; (8001ab8 <Skill_Mode+0x264>)
 8001a02:	f004 fc21 	bl	8006248 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 8001a06:	e060      	b.n	8001aca <Skill_Mode+0x276>
				}

			}
			else
			{
				estuary=ESTUARY_MODE_OFF; //ha nincs elég vonal kikapcsoljuk az öntartást
 8001a08:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <Skill_Mode+0x25c>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
				LED_G(0);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2102      	movs	r1, #2
 8001a12:	4829      	ldr	r0, [pc, #164]	; (8001ab8 <Skill_Mode+0x264>)
 8001a14:	f004 fc18 	bl	8006248 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 8001a18:	e057      	b.n	8001aca <Skill_Mode+0x276>
			}
		}
		else if(delta_byte<ESTUARY_EXIT && estuary==ESTUARY_MODE_ON) //ha már eléggé összeszűkült a torkolat, akkor nem kell kompenzálni
 8001a1a:	7cfb      	ldrb	r3, [r7, #19]
 8001a1c:	2b2c      	cmp	r3, #44	; 0x2c
 8001a1e:	d854      	bhi.n	8001aca <Skill_Mode+0x276>
 8001a20:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <Skill_Mode+0x25c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d150      	bne.n	8001aca <Skill_Mode+0x276>
		{
			estuary=ESTUARY_MODE_OFF;
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <Skill_Mode+0x25c>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
			LED_G(0);
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2102      	movs	r1, #2
 8001a32:	4821      	ldr	r0, [pc, #132]	; (8001ab8 <Skill_Mode+0x264>)
 8001a34:	f004 fc08 	bl	8006248 <HAL_GPIO_WritePin>
 8001a38:	e047      	b.n	8001aca <Skill_Mode+0x276>
		}
	}

	else if(path==MIDDLE)
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <Skill_Mode+0x254>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d143      	bne.n	8001aca <Skill_Mode+0x276>
	{
		if(LINE_CNT==1)byte = LINE1;//ha csak 1 vonal van, akkor azt követjük
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <Skill_Mode+0x24c>)
 8001a44:	785b      	ldrb	r3, [r3, #1]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d103      	bne.n	8001a52 <Skill_Mode+0x1fe>
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <Skill_Mode+0x24c>)
 8001a4c:	789b      	ldrb	r3, [r3, #2]
 8001a4e:	77fb      	strb	r3, [r7, #31]
 8001a50:	e03b      	b.n	8001aca <Skill_Mode+0x276>
		else if(LINE_CNT==3)//ha 3 vonal van
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <Skill_Mode+0x24c>)
 8001a54:	785b      	ldrb	r3, [r3, #1]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d113      	bne.n	8001a82 <Skill_Mode+0x22e>
		{
			byte = rxBuf[3];//a középsőt követjük
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <Skill_Mode+0x24c>)
 8001a5c:	78db      	ldrb	r3, [r3, #3]
 8001a5e:	77fb      	strb	r3, [r7, #31]
			//folyamatosan nézzük, hogy az 1. és 3.vonal milyen messze van a vonalszenor középontjától
			tmp1=abs((int)LINE1-123);
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <Skill_Mode+0x24c>)
 8001a62:	789b      	ldrb	r3, [r3, #2]
 8001a64:	3b7b      	subs	r3, #123	; 0x7b
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bfb8      	it	lt
 8001a6a:	425b      	neglt	r3, r3
 8001a6c:	4a13      	ldr	r2, [pc, #76]	; (8001abc <Skill_Mode+0x268>)
 8001a6e:	6013      	str	r3, [r2, #0]
			tmp2=abs((int)LINE3-123);
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <Skill_Mode+0x24c>)
 8001a72:	791b      	ldrb	r3, [r3, #4]
 8001a74:	3b7b      	subs	r3, #123	; 0x7b
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bfb8      	it	lt
 8001a7a:	425b      	neglt	r3, r3
 8001a7c:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <Skill_Mode+0x26c>)
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	e023      	b.n	8001aca <Skill_Mode+0x276>
		}
		else if(LINE_CNT==2)//ha 2 vonal van, az azt jelenti, hogy az elágazás már annyira szétgáazott, hogy csak 2-t látunk a 3 vonalból
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <Skill_Mode+0x24c>)
 8001a84:	785b      	ldrb	r3, [r3, #1]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d11f      	bne.n	8001aca <Skill_Mode+0x276>
		{
			if(tmp1<tmp2) byte = LINE1; //ha a jobboldali vonalat veszítettük el
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <Skill_Mode+0x268>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <Skill_Mode+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	da16      	bge.n	8001ac4 <Skill_Mode+0x270>
 8001a96:	4b02      	ldr	r3, [pc, #8]	; (8001aa0 <Skill_Mode+0x24c>)
 8001a98:	789b      	ldrb	r3, [r3, #2]
 8001a9a:	77fb      	strb	r3, [r7, #31]
 8001a9c:	e015      	b.n	8001aca <Skill_Mode+0x276>
 8001a9e:	bf00      	nop
 8001aa0:	20000564 	.word	0x20000564
 8001aa4:	20000264 	.word	0x20000264
 8001aa8:	20000263 	.word	0x20000263
 8001aac:	2000052c 	.word	0x2000052c
 8001ab0:	2000052d 	.word	0x2000052d
 8001ab4:	20000530 	.word	0x20000530
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	20000534 	.word	0x20000534
 8001ac0:	20000538 	.word	0x20000538
			else byte = LINE2; //ha a baloldali vonalat veszítettük el
 8001ac4:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <Skill_Mode+0x300>)
 8001ac6:	78db      	ldrb	r3, [r3, #3]
 8001ac8:	77fb      	strb	r3, [r7, #31]
		}
	}
	p = byte * 204/248.0-102;
 8001aca:	7ffb      	ldrb	r3, [r7, #31]
 8001acc:	22cc      	movs	r2, #204	; 0xcc
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fd46 	bl	8000564 <__aeabi_i2d>
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <Skill_Mode+0x304>)
 8001ade:	f7fe fed5 	bl	800088c <__aeabi_ddiv>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <Skill_Mode+0x308>)
 8001af0:	f7fe fbea 	bl	80002c8 <__aeabi_dsub>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff f874 	bl	8000be8 <__aeabi_d2f>
 8001b00:	4603      	mov	r3, r0
 8001b02:	617b      	str	r3, [r7, #20]
	gamma = -kP * p  - kD*(p-p_prev);
 8001b04:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b08:	eeb1 7a67 	vneg.f32	s14, s15
 8001b0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <Skill_Mode+0x30c>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b1e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b22:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <Skill_Mode+0x310>)
 8001b30:	edc3 7a00 	vstr	s15, [r3]
	p_prev = p;
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <Skill_Mode+0x30c>)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	6013      	str	r3, [r2, #0]
	byte_prev=byte;
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <Skill_Mode+0x314>)
 8001b3c:	7ffb      	ldrb	r3, [r7, #31]
 8001b3e:	7013      	strb	r3, [r2, #0]

	return gamma;
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <Skill_Mode+0x310>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	ee07 3a90 	vmov	s15, r3
}
 8001b48:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000564 	.word	0x20000564
 8001b58:	406f0000 	.word	0x406f0000
 8001b5c:	40598000 	.word	0x40598000
 8001b60:	2000053c 	.word	0x2000053c
 8001b64:	20000540 	.word	0x20000540
 8001b68:	2000052c 	.word	0x2000052c

08001b6c <Detect_Node3>:
	}

}

void Detect_Node3(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
	static uint32_t dt=0;
	static uint32_t t_prev=0;

	dt=t-t_prev;
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <Detect_Node3+0x48>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <Detect_Node3+0x4c>)
 8001b80:	6013      	str	r3, [r2, #0]
	if(LINE_CNT==4 && dt> 2000)
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <Detect_Node3+0x50>)
 8001b84:	785b      	ldrb	r3, [r3, #1]
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d10f      	bne.n	8001baa <Detect_Node3+0x3e>
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <Detect_Node3+0x4c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b92:	d90a      	bls.n	8001baa <Detect_Node3+0x3e>
	{
		LED_B_TOGGLE;
 8001b94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b98:	4809      	ldr	r0, [pc, #36]	; (8001bc0 <Detect_Node3+0x54>)
 8001b9a:	f004 fb6e 	bl	800627a <HAL_GPIO_TogglePin>
		nodeDetected=1;
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <Detect_Node3+0x58>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
		/*
		if(path==0)path=2;
		else if(path==2)path=0;
		*/
		t_prev=t;
 8001ba4:	4a03      	ldr	r2, [pc, #12]	; (8001bb4 <Detect_Node3+0x48>)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6013      	str	r3, [r2, #0]
	}
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000544 	.word	0x20000544
 8001bb8:	20000548 	.word	0x20000548
 8001bbc:	20000564 	.word	0x20000564
 8001bc0:	40020400 	.word	0x40020400
 8001bc4:	20000262 	.word	0x20000262

08001bc8 <Battery_Voltage_Compensate>:
float v=0;
//ha 1000 akkor a motor full csutkán megy előre
//ha -1000 akkor a motor full csutkán megy hátra

void Battery_Voltage_Compensate(ADC_HandleTypeDef *hadc_UNiMh,ADC_HandleTypeDef *hadc_ULiPo,UART_HandleTypeDef *huart_debugg)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b090      	sub	sp, #64	; 0x40
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
	char msg[30];
	uint32_t raw=0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
	float bat;
	int i;

	//NiMh akku mérése
	for(i=0;i<20;i++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bdc:	e016      	b.n	8001c0c <Battery_Voltage_Compensate+0x44>
	{
		HAL_ADC_Start(hadc_UNiMh);
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f002 fd00 	bl	80045e4 <HAL_ADC_Start>
		HAL_Delay(10);
 8001be4:	200a      	movs	r0, #10
 8001be6:	f002 fc95 	bl	8004514 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_UNiMh,20);
 8001bea:	2114      	movs	r1, #20
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f002 fdcb 	bl	8004788 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 8001bf2:	200a      	movs	r0, #10
 8001bf4:	f002 fc8e 	bl	8004514 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_UNiMh);
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f002 fe50 	bl	800489e <HAL_ADC_GetValue>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c02:	4413      	add	r3, r2
 8001c04:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8001c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c08:	3301      	adds	r3, #1
 8001c0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c0e:	2b13      	cmp	r3, #19
 8001c10:	dde5      	ble.n	8001bde <Battery_Voltage_Compensate+0x16>
	}
	bat=(float)raw * 0.00460575 / 20.0;//ez a mi feszültségünk V-ban
 8001c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c1c:	ee17 0a90 	vmov	r0, s15
 8001c20:	f7fe fcb2 	bl	8000588 <__aeabi_f2d>
 8001c24:	a37b      	add	r3, pc, #492	; (adr r3, 8001e14 <Battery_Voltage_Compensate+0x24c>)
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	f7fe fd05 	bl	8000638 <__aeabi_dmul>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4610      	mov	r0, r2
 8001c34:	4619      	mov	r1, r3
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b71      	ldr	r3, [pc, #452]	; (8001e00 <Battery_Voltage_Compensate+0x238>)
 8001c3c:	f7fe fe26 	bl	800088c <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7fe ffce 	bl	8000be8 <__aeabi_d2f>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"NiMh charge: %2.2f V \r\n", bat);
 8001c50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c52:	f7fe fc99 	bl	8000588 <__aeabi_f2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	f107 0014 	add.w	r0, r7, #20
 8001c5e:	4969      	ldr	r1, [pc, #420]	; (8001e04 <Battery_Voltage_Compensate+0x23c>)
 8001c60:	f008 fe1e 	bl	800a8a0 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*) msg, strlen(msg),10);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fad1 	bl	8000210 <strlen>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	f107 0114 	add.w	r1, r7, #20
 8001c76:	230a      	movs	r3, #10
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f007 f8a8 	bl	8008dce <HAL_UART_Transmit>

	if(bat)compensation=7.75/bat;
 8001c7e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	d009      	beq.n	8001ca0 <Battery_Voltage_Compensate+0xd8>
 8001c8c:	eef1 6a0f 	vmov.f32	s13, #31	; 0x40f80000  7.750
 8001c90:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c98:	4b5b      	ldr	r3, [pc, #364]	; (8001e08 <Battery_Voltage_Compensate+0x240>)
 8001c9a:	edc3 7a00 	vstr	s15, [r3]
 8001c9e:	e003      	b.n	8001ca8 <Battery_Voltage_Compensate+0xe0>
	else compensation=1;
 8001ca0:	4b59      	ldr	r3, [pc, #356]	; (8001e08 <Battery_Voltage_Compensate+0x240>)
 8001ca2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ca6:	601a      	str	r2, [r3, #0]

	if(bat < 7.2)
 8001ca8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001caa:	f7fe fc6d 	bl	8000588 <__aeabi_f2d>
 8001cae:	a34e      	add	r3, pc, #312	; (adr r3, 8001de8 <Battery_Voltage_Compensate+0x220>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	f7fe ff32 	bl	8000b1c <__aeabi_dcmplt>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d010      	beq.n	8001ce0 <Battery_Voltage_Compensate+0x118>
	{
		for(i=0;i<10;i++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc2:	e00a      	b.n	8001cda <Battery_Voltage_Compensate+0x112>
		{
			LED_Y_TOGGLE;
 8001cc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cc8:	4850      	ldr	r0, [pc, #320]	; (8001e0c <Battery_Voltage_Compensate+0x244>)
 8001cca:	f004 fad6 	bl	800627a <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8001cce:	20c8      	movs	r0, #200	; 0xc8
 8001cd0:	f002 fc20 	bl	8004514 <HAL_Delay>
		for(i=0;i<10;i++)
 8001cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cdc:	2b09      	cmp	r3, #9
 8001cde:	ddf1      	ble.n	8001cc4 <Battery_Voltage_Compensate+0xfc>
		}
	}

	//LiPo akku mérése
	raw=0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ce8:	e016      	b.n	8001d18 <Battery_Voltage_Compensate+0x150>
	{
		HAL_ADC_Start(hadc_ULiPo);
 8001cea:	68b8      	ldr	r0, [r7, #8]
 8001cec:	f002 fc7a 	bl	80045e4 <HAL_ADC_Start>
		HAL_Delay(10);
 8001cf0:	200a      	movs	r0, #10
 8001cf2:	f002 fc0f 	bl	8004514 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_ULiPo,20);
 8001cf6:	2114      	movs	r1, #20
 8001cf8:	68b8      	ldr	r0, [r7, #8]
 8001cfa:	f002 fd45 	bl	8004788 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 8001cfe:	200a      	movs	r0, #10
 8001d00:	f002 fc08 	bl	8004514 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_ULiPo);
 8001d04:	68b8      	ldr	r0, [r7, #8]
 8001d06:	f002 fdca 	bl	800489e <HAL_ADC_GetValue>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d0e:	4413      	add	r3, r2
 8001d10:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8001d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d14:	3301      	adds	r3, #1
 8001d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d1a:	2b13      	cmp	r3, #19
 8001d1c:	dde5      	ble.n	8001cea <Battery_Voltage_Compensate+0x122>

	}
	bat = (float)raw * 0.003241242 / 20.0 + 0.02;//ez a mi feszültségünk V-ban
 8001d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d20:	ee07 3a90 	vmov	s15, r3
 8001d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d28:	ee17 0a90 	vmov	r0, s15
 8001d2c:	f7fe fc2c 	bl	8000588 <__aeabi_f2d>
 8001d30:	a32f      	add	r3, pc, #188	; (adr r3, 8001df0 <Battery_Voltage_Compensate+0x228>)
 8001d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d36:	f7fe fc7f 	bl	8000638 <__aeabi_dmul>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <Battery_Voltage_Compensate+0x238>)
 8001d48:	f7fe fda0 	bl	800088c <__aeabi_ddiv>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	a328      	add	r3, pc, #160	; (adr r3, 8001df8 <Battery_Voltage_Compensate+0x230>)
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	f7fe fab7 	bl	80002cc <__adddf3>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7fe ff3f 	bl	8000be8 <__aeabi_d2f>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"LiPo charge: %2.2f V \r\n", bat);
 8001d6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d70:	f7fe fc0a 	bl	8000588 <__aeabi_f2d>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	f107 0014 	add.w	r0, r7, #20
 8001d7c:	4924      	ldr	r1, [pc, #144]	; (8001e10 <Battery_Voltage_Compensate+0x248>)
 8001d7e:	f008 fd8f 	bl	800a8a0 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)msg, strlen(msg),10);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fa42 	bl	8000210 <strlen>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	f107 0114 	add.w	r1, r7, #20
 8001d94:	230a      	movs	r3, #10
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f007 f819 	bl	8008dce <HAL_UART_Transmit>

	/**/
	if(bat < 10)
 8001d9c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001da0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dac:	d510      	bpl.n	8001dd0 <Battery_Voltage_Compensate+0x208>
	{
		for(i=0;i<20;i++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001db2:	e00a      	b.n	8001dca <Battery_Voltage_Compensate+0x202>
		{
			LED_Y_TOGGLE;
 8001db4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001db8:	4814      	ldr	r0, [pc, #80]	; (8001e0c <Battery_Voltage_Compensate+0x244>)
 8001dba:	f004 fa5e 	bl	800627a <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8001dbe:	20c8      	movs	r0, #200	; 0xc8
 8001dc0:	f002 fba8 	bl	8004514 <HAL_Delay>
		for(i=0;i<20;i++)
 8001dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dcc:	2b13      	cmp	r3, #19
 8001dce:	ddf1      	ble.n	8001db4 <Battery_Voltage_Compensate+0x1ec>
		}
	}

	LED_Y(0);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dd6:	480d      	ldr	r0, [pc, #52]	; (8001e0c <Battery_Voltage_Compensate+0x244>)
 8001dd8:	f004 fa36 	bl	8006248 <HAL_GPIO_WritePin>

}
 8001ddc:	bf00      	nop
 8001dde:	3740      	adds	r7, #64	; 0x40
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	f3af 8000 	nop.w
 8001de8:	cccccccd 	.word	0xcccccccd
 8001dec:	401ccccc 	.word	0x401ccccc
 8001df0:	8c6df334 	.word	0x8c6df334
 8001df4:	3f6a8d60 	.word	0x3f6a8d60
 8001df8:	47ae147b 	.word	0x47ae147b
 8001dfc:	3f947ae1 	.word	0x3f947ae1
 8001e00:	40340000 	.word	0x40340000
 8001e04:	0800e2b0 	.word	0x0800e2b0
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	0800e2c8 	.word	0x0800e2c8
 8001e14:	99fa11a9 	.word	0x99fa11a9
 8001e18:	3f72dd7a 	.word	0x3f72dd7a
 8001e1c:	00000000 	.word	0x00000000

08001e20 <Measure_Velocity_Task>:

void Measure_Velocity_Task(TIM_HandleTypeDef *htim_encoder,uint32_t tick, uint32_t period)
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
	static uint32_t tick_prev=0;
	static uint32_t measure_v_task_tick=4;
	static float alpha=0.3;
	static float invalpha=0.7;
	float v_uj=0;
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]

	if(measure_v_task_tick>tick) return;
 8001e32:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <Measure_Velocity_Task+0xd8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d354      	bcc.n	8001ee6 <Measure_Velocity_Task+0xc6>
	measure_v_task_tick= tick + period;
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	4a2d      	ldr	r2, [pc, #180]	; (8001ef8 <Measure_Velocity_Task+0xd8>)
 8001e44:	6013      	str	r3, [r2, #0]
	if(!tick_prev)
 8001e46:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <Measure_Velocity_Task+0xdc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d103      	bne.n	8001e56 <Measure_Velocity_Task+0x36>
	{
		tick_prev=tick;
 8001e4e:	4a2b      	ldr	r2, [pc, #172]	; (8001efc <Measure_Velocity_Task+0xdc>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	6013      	str	r3, [r2, #0]
		return;
 8001e54:	e048      	b.n	8001ee8 <Measure_Velocity_Task+0xc8>
	}
	v_uj =((float) 0x8000 - (float) __HAL_TIM_GET_COUNTER(htim_encoder))*7.49/(float)period; //mm/s dimenzió
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e64:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001f00 <Measure_Velocity_Task+0xe0>
 8001e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e6c:	ee17 0a90 	vmov	r0, s15
 8001e70:	f7fe fb8a 	bl	8000588 <__aeabi_f2d>
 8001e74:	a31e      	add	r3, pc, #120	; (adr r3, 8001ef0 <Measure_Velocity_Task+0xd0>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	f7fe fbdd 	bl	8000638 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4614      	mov	r4, r2
 8001e84:	461d      	mov	r5, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e90:	ee17 0a90 	vmov	r0, s15
 8001e94:	f7fe fb78 	bl	8000588 <__aeabi_f2d>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	4629      	mov	r1, r5
 8001ea0:	f7fe fcf4 	bl	800088c <__aeabi_ddiv>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f7fe fe9c 	bl	8000be8 <__aeabi_d2f>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	617b      	str	r3, [r7, #20]
	TIM8->CNT=0x8000;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <Measure_Velocity_Task+0xe4>)
 8001eb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24
	//tick_prev=tick;
	//exponenciális szűrés
	v = alpha*(float)v_uj + invalpha*v;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <Measure_Velocity_Task+0xe8>)
 8001ebe:	ed93 7a00 	vldr	s14, [r3]
 8001ec2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <Measure_Velocity_Task+0xec>)
 8001ecc:	edd3 6a00 	vldr	s13, [r3]
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <Measure_Velocity_Task+0xf0>)
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <Measure_Velocity_Task+0xf0>)
 8001ee0:	edc3 7a00 	vstr	s15, [r3]
 8001ee4:	e000      	b.n	8001ee8 <Measure_Velocity_Task+0xc8>
	if(measure_v_task_tick>tick) return;
 8001ee6:	bf00      	nop
}
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bdb0      	pop	{r4, r5, r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	8f5c28f6 	.word	0x8f5c28f6
 8001ef4:	401df5c2 	.word	0x401df5c2
 8001ef8:	2000000c 	.word	0x2000000c
 8001efc:	20000550 	.word	0x20000550
 8001f00:	47000000 	.word	0x47000000
 8001f04:	40010400 	.word	0x40010400
 8001f08:	20000010 	.word	0x20000010
 8001f0c:	20000014 	.word	0x20000014
 8001f10:	2000054c 	.word	0x2000054c
 8001f14:	00000000 	.word	0x00000000

08001f18 <Motor_Drive_Task>:

void Motor_Drive_Task(TIM_HandleTypeDef *htim_motor, UART_HandleTypeDef *huart, uint32_t tick, uint32_t period) //DUTY paramtert kiszedtem -> változtassuk a globális változót
{
 8001f18:	b5b0      	push	{r4, r5, r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
	static uint32_t motor_drive_task_tick=5;
	static float f,u=0;

	int32_t ccr1;
	int32_t ccr2;
	if(motor_drive_task_tick>tick) return;
 8001f26:	4b88      	ldr	r3, [pc, #544]	; (8002148 <Motor_Drive_Task+0x230>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	f0c0 80f8 	bcc.w	8002122 <Motor_Drive_Task+0x20a>
	motor_drive_task_tick= tick + period;
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a83      	ldr	r2, [pc, #524]	; (8002148 <Motor_Drive_Task+0x230>)
 8001f3a:	6013      	str	r3, [r2, #0]

	if(motorEnRemote && motorEnLineOk) //ha nem nyomtunk vészstopot és az akkuk is rendben vannak akkor pöröghet a motor
 8001f3c:	4b83      	ldr	r3, [pc, #524]	; (800214c <Motor_Drive_Task+0x234>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80b4 	beq.w	80020ae <Motor_Drive_Task+0x196>
 8001f46:	4b82      	ldr	r3, [pc, #520]	; (8002150 <Motor_Drive_Task+0x238>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80af 	beq.w	80020ae <Motor_Drive_Task+0x196>
	{
		//az u paraméter a bevatkozó jel minusz holtásávot adja meg
		u= KC * (v_ref - v) * compensation + f;
 8001f50:	4b80      	ldr	r3, [pc, #512]	; (8002154 <Motor_Drive_Task+0x23c>)
 8001f52:	ed93 7a00 	vldr	s14, [r3]
 8001f56:	4b80      	ldr	r3, [pc, #512]	; (8002158 <Motor_Drive_Task+0x240>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f60:	ee17 0a90 	vmov	r0, s15
 8001f64:	f7fe fb10 	bl	8000588 <__aeabi_f2d>
 8001f68:	a371      	add	r3, pc, #452	; (adr r3, 8002130 <Motor_Drive_Task+0x218>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe fb63 	bl	8000638 <__aeabi_dmul>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4614      	mov	r4, r2
 8001f78:	461d      	mov	r5, r3
 8001f7a:	4b78      	ldr	r3, [pc, #480]	; (800215c <Motor_Drive_Task+0x244>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fb02 	bl	8000588 <__aeabi_f2d>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4620      	mov	r0, r4
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	f7fe fb54 	bl	8000638 <__aeabi_dmul>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4614      	mov	r4, r2
 8001f96:	461d      	mov	r5, r3
 8001f98:	4b71      	ldr	r3, [pc, #452]	; (8002160 <Motor_Drive_Task+0x248>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe faf3 	bl	8000588 <__aeabi_f2d>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	4629      	mov	r1, r5
 8001faa:	f7fe f98f 	bl	80002cc <__adddf3>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f7fe fe17 	bl	8000be8 <__aeabi_d2f>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4a69      	ldr	r2, [pc, #420]	; (8002164 <Motor_Drive_Task+0x24c>)
 8001fbe:	6013      	str	r3, [r2, #0]
		if(u>880) u=880;
 8001fc0:	4b68      	ldr	r3, [pc, #416]	; (8002164 <Motor_Drive_Task+0x24c>)
 8001fc2:	edd3 7a00 	vldr	s15, [r3]
 8001fc6:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8002168 <Motor_Drive_Task+0x250>
 8001fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd2:	dd03      	ble.n	8001fdc <Motor_Drive_Task+0xc4>
 8001fd4:	4b63      	ldr	r3, [pc, #396]	; (8002164 <Motor_Drive_Task+0x24c>)
 8001fd6:	4a65      	ldr	r2, [pc, #404]	; (800216c <Motor_Drive_Task+0x254>)
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	e00c      	b.n	8001ff6 <Motor_Drive_Task+0xde>
		else if(u<-200)u=-200;
 8001fdc:	4b61      	ldr	r3, [pc, #388]	; (8002164 <Motor_Drive_Task+0x24c>)
 8001fde:	edd3 7a00 	vldr	s15, [r3]
 8001fe2:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002170 <Motor_Drive_Task+0x258>
 8001fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fee:	d502      	bpl.n	8001ff6 <Motor_Drive_Task+0xde>
 8001ff0:	4b5c      	ldr	r3, [pc, #368]	; (8002164 <Motor_Drive_Task+0x24c>)
 8001ff2:	4a60      	ldr	r2, [pc, #384]	; (8002174 <Motor_Drive_Task+0x25c>)
 8001ff4:	601a      	str	r2, [r3, #0]
		f = ZD*f + (1-ZD)*u;
 8001ff6:	4b5a      	ldr	r3, [pc, #360]	; (8002160 <Motor_Drive_Task+0x248>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fac4 	bl	8000588 <__aeabi_f2d>
 8002000:	a34d      	add	r3, pc, #308	; (adr r3, 8002138 <Motor_Drive_Task+0x220>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe fb17 	bl	8000638 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4614      	mov	r4, r2
 8002010:	461d      	mov	r5, r3
 8002012:	4b54      	ldr	r3, [pc, #336]	; (8002164 <Motor_Drive_Task+0x24c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fab6 	bl	8000588 <__aeabi_f2d>
 800201c:	a348      	add	r3, pc, #288	; (adr r3, 8002140 <Motor_Drive_Task+0x228>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe fb09 	bl	8000638 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4620      	mov	r0, r4
 800202c:	4629      	mov	r1, r5
 800202e:	f7fe f94d 	bl	80002cc <__adddf3>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fdd5 	bl	8000be8 <__aeabi_d2f>
 800203e:	4603      	mov	r3, r0
 8002040:	4a47      	ldr	r2, [pc, #284]	; (8002160 <Motor_Drive_Task+0x248>)
 8002042:	6013      	str	r3, [r2, #0]
		//ez alapján a kiadandó kitöltési tényező
		if(u>0) motorDuty=(int)u+70;
 8002044:	4b47      	ldr	r3, [pc, #284]	; (8002164 <Motor_Drive_Task+0x24c>)
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002052:	dd0a      	ble.n	800206a <Motor_Drive_Task+0x152>
 8002054:	4b43      	ldr	r3, [pc, #268]	; (8002164 <Motor_Drive_Task+0x24c>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800205e:	ee17 3a90 	vmov	r3, s15
 8002062:	3346      	adds	r3, #70	; 0x46
 8002064:	4a44      	ldr	r2, [pc, #272]	; (8002178 <Motor_Drive_Task+0x260>)
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	e01b      	b.n	80020a2 <Motor_Drive_Task+0x18a>
		else if(u<0) motorDuty=(int)u-70;
 800206a:	4b3e      	ldr	r3, [pc, #248]	; (8002164 <Motor_Drive_Task+0x24c>)
 800206c:	edd3 7a00 	vldr	s15, [r3]
 8002070:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002078:	d50a      	bpl.n	8002090 <Motor_Drive_Task+0x178>
 800207a:	4b3a      	ldr	r3, [pc, #232]	; (8002164 <Motor_Drive_Task+0x24c>)
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002084:	ee17 3a90 	vmov	r3, s15
 8002088:	3b46      	subs	r3, #70	; 0x46
 800208a:	4a3b      	ldr	r2, [pc, #236]	; (8002178 <Motor_Drive_Task+0x260>)
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e008      	b.n	80020a2 <Motor_Drive_Task+0x18a>
		else motorDuty=(int)u;
 8002090:	4b34      	ldr	r3, [pc, #208]	; (8002164 <Motor_Drive_Task+0x24c>)
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800209a:	ee17 2a90 	vmov	r2, s15
 800209e:	4b36      	ldr	r3, [pc, #216]	; (8002178 <Motor_Drive_Task+0x260>)
 80020a0:	601a      	str	r2, [r3, #0]


		MOTOR_EN(1);
 80020a2:	2201      	movs	r2, #1
 80020a4:	2140      	movs	r1, #64	; 0x40
 80020a6:	4835      	ldr	r0, [pc, #212]	; (800217c <Motor_Drive_Task+0x264>)
 80020a8:	f004 f8ce 	bl	8006248 <HAL_GPIO_WritePin>
 80020ac:	e00c      	b.n	80020c8 <Motor_Drive_Task+0x1b0>
	}
	else
	{	f=u=0;
 80020ae:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <Motor_Drive_Task+0x24c>)
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <Motor_Drive_Task+0x24c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a29      	ldr	r2, [pc, #164]	; (8002160 <Motor_Drive_Task+0x248>)
 80020bc:	6013      	str	r3, [r2, #0]
		MOTOR_EN(0); //amugy stop
 80020be:	2200      	movs	r2, #0
 80020c0:	2140      	movs	r1, #64	; 0x40
 80020c2:	482e      	ldr	r0, [pc, #184]	; (800217c <Motor_Drive_Task+0x264>)
 80020c4:	f004 f8c0 	bl	8006248 <HAL_GPIO_WritePin>
	}
	//A két érték amit irogatsz (TIM3->CCR1,CCR2) konkrét timer periféria regiszterek, nem feltétlen jó őket folyamatosan újraírni 10ms enként
	if(motorDuty!=motorDutyPrev)//csak akkor írjuk át őket ha tényleg muszáj (ha változtak az előző taskhívás óta)
 80020c8:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <Motor_Drive_Task+0x260>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <Motor_Drive_Task+0x268>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d021      	beq.n	8002118 <Motor_Drive_Task+0x200>
	{
		ccr2 = (motorDuty + 1000)/2-1;
 80020d4:	4b28      	ldr	r3, [pc, #160]	; (8002178 <Motor_Drive_Task+0x260>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80020dc:	0fda      	lsrs	r2, r3, #31
 80020de:	4413      	add	r3, r2
 80020e0:	105b      	asrs	r3, r3, #1
 80020e2:	3b01      	subs	r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
		if(ccr2>950)ccr2=950;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80020ec:	4293      	cmp	r3, r2
 80020ee:	dd02      	ble.n	80020f6 <Motor_Drive_Task+0x1de>
 80020f0:	f240 33b6 	movw	r3, #950	; 0x3b6
 80020f4:	617b      	str	r3, [r7, #20]
		if(ccr2<-950)ccr2=-950;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	4a22      	ldr	r2, [pc, #136]	; (8002184 <Motor_Drive_Task+0x26c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	da01      	bge.n	8002102 <Motor_Drive_Task+0x1ea>
 80020fe:	4b21      	ldr	r3, [pc, #132]	; (8002184 <Motor_Drive_Task+0x26c>)
 8002100:	617b      	str	r3, [r7, #20]
		ccr1= 998-ccr2;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8002108:	3302      	adds	r3, #2
 800210a:	613b      	str	r3, [r7, #16]

		//2 Referencia megadása
		//Ezeket a loopba kéne változtatni folyamatosan, pwm-elinditas mashova kell majd
		TIM3->CCR1=ccr1;
 800210c:	4a1e      	ldr	r2, [pc, #120]	; (8002188 <Motor_Drive_Task+0x270>)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2=ccr2;
 8002112:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <Motor_Drive_Task+0x270>)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	6393      	str	r3, [r2, #56]	; 0x38
	}
	motorDutyPrev=motorDuty;
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <Motor_Drive_Task+0x260>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a18      	ldr	r2, [pc, #96]	; (8002180 <Motor_Drive_Task+0x268>)
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	e000      	b.n	8002124 <Motor_Drive_Task+0x20c>
	if(motor_drive_task_tick>tick) return;
 8002122:	bf00      	nop
}
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bdb0      	pop	{r4, r5, r7, pc}
 800212a:	bf00      	nop
 800212c:	f3af 8000 	nop.w
 8002130:	30be0ded 	.word	0x30be0ded
 8002134:	3fd02a99 	.word	0x3fd02a99
 8002138:	9b3d07c8 	.word	0x9b3d07c8
 800213c:	3fef9f55 	.word	0x3fef9f55
 8002140:	30be0e00 	.word	0x30be0e00
 8002144:	3f882a99 	.word	0x3f882a99
 8002148:	20000018 	.word	0x20000018
 800214c:	20000958 	.word	0x20000958
 8002150:	20000959 	.word	0x20000959
 8002154:	20000258 	.word	0x20000258
 8002158:	2000054c 	.word	0x2000054c
 800215c:	20000008 	.word	0x20000008
 8002160:	20000554 	.word	0x20000554
 8002164:	20000558 	.word	0x20000558
 8002168:	445c0000 	.word	0x445c0000
 800216c:	445c0000 	.word	0x445c0000
 8002170:	c3480000 	.word	0xc3480000
 8002174:	c3480000 	.word	0xc3480000
 8002178:	2000055c 	.word	0x2000055c
 800217c:	40020400 	.word	0x40020400
 8002180:	20000560 	.word	0x20000560
 8002184:	fffffc4a 	.word	0xfffffc4a
 8002188:	40000400 	.word	0x40000400

0800218c <G0_Read_Fast>:
uint8_t txBuf[]={CMD_READ_SKILL_FORWARD};
uint8_t rxBuf[10];


uint8_t G0_Read_Fast(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]

	uint8_t state=0;
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
	txBuf[0]=CMD_READ_FAST;
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <G0_Read_Fast+0x5c>)
 800219c:	222a      	movs	r2, #42	; 0x2a
 800219e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 1);
 80021a0:	2301      	movs	r3, #1
 80021a2:	2201      	movs	r2, #1
 80021a4:	4910      	ldr	r1, [pc, #64]	; (80021e8 <G0_Read_Fast+0x5c>)
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f006 fe11 	bl	8008dce <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 8, 2);
 80021ac:	2302      	movs	r3, #2
 80021ae:	2208      	movs	r2, #8
 80021b0:	490e      	ldr	r1, [pc, #56]	; (80021ec <G0_Read_Fast+0x60>)
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f006 fe9d 	bl	8008ef2 <HAL_UART_Receive>
 80021b8:	4603      	mov	r3, r0
 80021ba:	73fb      	strb	r3, [r7, #15]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <G0_Read_Fast+0x64>)
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE) && (rxBuf[7]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d109      	bne.n	80021dc <G0_Read_Fast+0x50>
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <G0_Read_Fast+0x60>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b17      	cmp	r3, #23
 80021ce:	d105      	bne.n	80021dc <G0_Read_Fast+0x50>
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <G0_Read_Fast+0x60>)
 80021d2:	79db      	ldrb	r3, [r3, #7]
 80021d4:	2b12      	cmp	r3, #18
 80021d6:	d101      	bne.n	80021dc <G0_Read_Fast+0x50>
	{
		return 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	e000      	b.n	80021de <G0_Read_Fast+0x52>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 80021dc:	2301      	movs	r3, #1
	}
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	2000001c 	.word	0x2000001c
 80021ec:	20000564 	.word	0x20000564
 80021f0:	20000959 	.word	0x20000959

080021f4 <G0_Read_Skill>:

uint8_t G0_Read_Skill(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint8_t command)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	4613      	mov	r3, r2
 8002200:	71fb      	strb	r3, [r7, #7]
	uint8_t state=1;
 8002202:	2301      	movs	r3, #1
 8002204:	75fb      	strb	r3, [r7, #23]
	txBuf[0]=command;
 8002206:	4a13      	ldr	r2, [pc, #76]	; (8002254 <G0_Read_Skill+0x60>)
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 1);
 800220c:	2301      	movs	r3, #1
 800220e:	2201      	movs	r2, #1
 8002210:	4910      	ldr	r1, [pc, #64]	; (8002254 <G0_Read_Skill+0x60>)
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f006 fddb 	bl	8008dce <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 10, 2);
 8002218:	2302      	movs	r3, #2
 800221a:	220a      	movs	r2, #10
 800221c:	490e      	ldr	r1, [pc, #56]	; (8002258 <G0_Read_Skill+0x64>)
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f006 fe67 	bl	8008ef2 <HAL_UART_Receive>
 8002224:	4603      	mov	r3, r0
 8002226:	75fb      	strb	r3, [r7, #23]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <G0_Read_Skill+0x68>)
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE) && (rxBuf[9]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 800222e:	7dfb      	ldrb	r3, [r7, #23]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d109      	bne.n	8002248 <G0_Read_Skill+0x54>
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <G0_Read_Skill+0x64>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b17      	cmp	r3, #23
 800223a:	d105      	bne.n	8002248 <G0_Read_Skill+0x54>
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <G0_Read_Skill+0x64>)
 800223e:	7a5b      	ldrb	r3, [r3, #9]
 8002240:	2b12      	cmp	r3, #18
 8002242:	d101      	bne.n	8002248 <G0_Read_Skill+0x54>
	{
		return 0;
 8002244:	2300      	movs	r3, #0
 8002246:	e000      	b.n	800224a <G0_Read_Skill+0x56>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8002248:	2301      	movs	r3, #1
	}
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	2000001c 	.word	0x2000001c
 8002258:	20000564 	.word	0x20000564
 800225c:	20000959 	.word	0x20000959

08002260 <Line_Track_Task>:

void Line_Track_Task(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint32_t tick, uint32_t period)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
	static float gamma=0;
	static uint8_t reverse=1;
	static uint32_t ccr_rear_prev=0;
	static uint32_t ccr_front_prev=0;

	if(line_track_task_tick>tick) return;
 800226e:	4baa      	ldr	r3, [pc, #680]	; (8002518 <Line_Track_Task+0x2b8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	429a      	cmp	r2, r3
 8002276:	f0c0 81fb 	bcc.w	8002670 <Line_Track_Task+0x410>
	line_track_task_tick = tick + period;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4413      	add	r3, r2
 8002280:	4aa5      	ldr	r2, [pc, #660]	; (8002518 <Line_Track_Task+0x2b8>)
 8002282:	6013      	str	r3, [r2, #0]

	if(mode == SKILL)
 8002284:	4ba5      	ldr	r3, [pc, #660]	; (800251c <Line_Track_Task+0x2bc>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b52      	cmp	r3, #82	; 0x52
 800228a:	f040 8171 	bne.w	8002570 <Line_Track_Task+0x310>
	{
		if(orientation==FORWARD) //ELŐREMENET
 800228e:	4ba4      	ldr	r3, [pc, #656]	; (8002520 <Line_Track_Task+0x2c0>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f040 808a 	bne.w	80023ac <Line_Track_Task+0x14c>
		{
			if(G0_Read_Skill(huart_stm, huart_debugg,CMD_READ_SKILL_FORWARD)) return;
 8002298:	2239      	movs	r2, #57	; 0x39
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f7ff ffa9 	bl	80021f4 <G0_Read_Skill>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f040 81e5 	bne.w	8002674 <Line_Track_Task+0x414>
			v_ref=1100;
 80022aa:	4b9e      	ldr	r3, [pc, #632]	; (8002524 <Line_Track_Task+0x2c4>)
 80022ac:	4a9e      	ldr	r2, [pc, #632]	; (8002528 <Line_Track_Task+0x2c8>)
 80022ae:	601a      	str	r2, [r3, #0]
			Detect_Node3(huart_debugg, tick);
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	68b8      	ldr	r0, [r7, #8]
 80022b4:	f7ff fc5a 	bl	8001b6c <Detect_Node3>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80022b8:	4b9c      	ldr	r3, [pc, #624]	; (800252c <Line_Track_Task+0x2cc>)
 80022ba:	785b      	ldrb	r3, [r3, #1]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 81db 	beq.w	8002678 <Line_Track_Task+0x418>
 80022c2:	4b9a      	ldr	r3, [pc, #616]	; (800252c <Line_Track_Task+0x2cc>)
 80022c4:	785b      	ldrb	r3, [r3, #1]
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	f200 81d6 	bhi.w	8002678 <Line_Track_Task+0x418>

			gamma = Skill_Mode(huart_debugg, -0.004, -0.05, tick);
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	eddf 0a98 	vldr	s1, [pc, #608]	; 8002530 <Line_Track_Task+0x2d0>
 80022d2:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8002534 <Line_Track_Task+0x2d4>
 80022d6:	68b8      	ldr	r0, [r7, #8]
 80022d8:	f7ff fabc 	bl	8001854 <Skill_Mode>
 80022dc:	eef0 7a40 	vmov.f32	s15, s0
 80022e0:	4b95      	ldr	r3, [pc, #596]	; (8002538 <Line_Track_Task+0x2d8>)
 80022e2:	edc3 7a00 	vstr	s15, [r3]
			PHI = atan((L/(L+D_FRONT))*tan(gamma));
 80022e6:	4b94      	ldr	r3, [pc, #592]	; (8002538 <Line_Track_Task+0x2d8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe f94c 	bl	8000588 <__aeabi_f2d>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	ec43 2b10 	vmov	d0, r2, r3
 80022f8:	f00a fef6 	bl	800d0e8 <tan>
 80022fc:	ec51 0b10 	vmov	r0, r1, d0
 8002300:	a381      	add	r3, pc, #516	; (adr r3, 8002508 <Line_Track_Task+0x2a8>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fe f997 	bl	8000638 <__aeabi_dmul>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	ec43 2b17 	vmov	d7, r2, r3
 8002312:	eeb0 0a47 	vmov.f32	s0, s14
 8002316:	eef0 0a67 	vmov.f32	s1, s15
 800231a:	f00a fd39 	bl	800cd90 <atan>
 800231e:	ec53 2b10 	vmov	r2, r3, d0
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	f7fe fc5f 	bl	8000be8 <__aeabi_d2f>
 800232a:	4603      	mov	r3, r0
 800232c:	4a83      	ldr	r2, [pc, #524]	; (800253c <Line_Track_Task+0x2dc>)
 800232e:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(-1400 * PHI + SERVO_FRONT_CCR_MIDDLE);//balra kanyarodás
 8002330:	4b82      	ldr	r3, [pc, #520]	; (800253c <Line_Track_Task+0x2dc>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002540 <Line_Track_Task+0x2e0>
 800233a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800233e:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002544 <Line_Track_Task+0x2e4>
 8002342:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800234a:	ee17 3a90 	vmov	r3, s15
 800234e:	b29b      	uxth	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	4b7d      	ldr	r3, [pc, #500]	; (8002548 <Line_Track_Task+0x2e8>)
 8002354:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8002356:	4b7c      	ldr	r3, [pc, #496]	; (8002548 <Line_Track_Task+0x2e8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800235e:	dd04      	ble.n	800236a <Line_Track_Task+0x10a>
			{
				ccr = CCR_FRONT_MAX;
 8002360:	4b79      	ldr	r3, [pc, #484]	; (8002548 <Line_Track_Task+0x2e8>)
 8002362:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	e008      	b.n	800237c <Line_Track_Task+0x11c>
			}
			else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 800236a:	4b77      	ldr	r3, [pc, #476]	; (8002548 <Line_Track_Task+0x2e8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002372:	da03      	bge.n	800237c <Line_Track_Task+0x11c>
			{
				ccr = CCR_FRONT_MIN;
 8002374:	4b74      	ldr	r3, [pc, #464]	; (8002548 <Line_Track_Task+0x2e8>)
 8002376:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800237a:	601a      	str	r2, [r3, #0]
			}
			TIM2->CCR1 = ccr_front_prev= ccr;
 800237c:	4b72      	ldr	r3, [pc, #456]	; (8002548 <Line_Track_Task+0x2e8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b72      	ldr	r3, [pc, #456]	; (800254c <Line_Track_Task+0x2ec>)
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800238a:	4b70      	ldr	r3, [pc, #448]	; (800254c <Line_Track_Task+0x2ec>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6353      	str	r3, [r2, #52]	; 0x34
			if(ccr_rear_prev!=SERVO_REAR_CCR_MIDDLE) TIM1->CCR4 = SERVO_REAR_CCR_MIDDLE;
 8002390:	4b6f      	ldr	r3, [pc, #444]	; (8002550 <Line_Track_Task+0x2f0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8002398:	d003      	beq.n	80023a2 <Line_Track_Task+0x142>
 800239a:	4b6e      	ldr	r3, [pc, #440]	; (8002554 <Line_Track_Task+0x2f4>)
 800239c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
			ccr_rear_prev=SERVO_REAR_CCR_MIDDLE;
 80023a2:	4b6b      	ldr	r3, [pc, #428]	; (8002550 <Line_Track_Task+0x2f0>)
 80023a4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e16e      	b.n	800268a <Line_Track_Task+0x42a>
		}
		else if(orientation==REVERSE)//TOLATÁS
 80023ac:	4b5c      	ldr	r3, [pc, #368]	; (8002520 <Line_Track_Task+0x2c0>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	f040 816a 	bne.w	800268a <Line_Track_Task+0x42a>
		{
			if(G0_Read_Skill(huart_stm, huart_debugg,CMD_READ_SKILL_REVERSE)) return;
 80023b6:	2291      	movs	r2, #145	; 0x91
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f7ff ff1a 	bl	80021f4 <G0_Read_Skill>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 815a 	bne.w	800267c <Line_Track_Task+0x41c>
			v_ref=-1100;
 80023c8:	4b56      	ldr	r3, [pc, #344]	; (8002524 <Line_Track_Task+0x2c4>)
 80023ca:	4a63      	ldr	r2, [pc, #396]	; (8002558 <Line_Track_Task+0x2f8>)
 80023cc:	601a      	str	r2, [r3, #0]
			Detect_Node3(huart_debugg, tick);
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	68b8      	ldr	r0, [r7, #8]
 80023d2:	f7ff fbcb 	bl	8001b6c <Detect_Node3>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80023d6:	4b55      	ldr	r3, [pc, #340]	; (800252c <Line_Track_Task+0x2cc>)
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 8150 	beq.w	8002680 <Line_Track_Task+0x420>
 80023e0:	4b52      	ldr	r3, [pc, #328]	; (800252c <Line_Track_Task+0x2cc>)
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	f200 814b 	bhi.w	8002680 <Line_Track_Task+0x420>

			gamma = Skill_Mode(huart_debugg, 0.004, 0.12, tick);
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	eddf 0a5b 	vldr	s1, [pc, #364]	; 800255c <Line_Track_Task+0x2fc>
 80023f0:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8002560 <Line_Track_Task+0x300>
 80023f4:	68b8      	ldr	r0, [r7, #8]
 80023f6:	f7ff fa2d 	bl	8001854 <Skill_Mode>
 80023fa:	eef0 7a40 	vmov.f32	s15, s0
 80023fe:	4b4e      	ldr	r3, [pc, #312]	; (8002538 <Line_Track_Task+0x2d8>)
 8002400:	edc3 7a00 	vstr	s15, [r3]
			PHI = atan((L/(L+D_REAR))*tan(gamma));////////////////////kiszámolni kézzel
 8002404:	4b4c      	ldr	r3, [pc, #304]	; (8002538 <Line_Track_Task+0x2d8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f8bd 	bl	8000588 <__aeabi_f2d>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	ec43 2b10 	vmov	d0, r2, r3
 8002416:	f00a fe67 	bl	800d0e8 <tan>
 800241a:	ec51 0b10 	vmov	r0, r1, d0
 800241e:	a33c      	add	r3, pc, #240	; (adr r3, 8002510 <Line_Track_Task+0x2b0>)
 8002420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002424:	f7fe f908 	bl	8000638 <__aeabi_dmul>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	ec43 2b17 	vmov	d7, r2, r3
 8002430:	eeb0 0a47 	vmov.f32	s0, s14
 8002434:	eef0 0a67 	vmov.f32	s1, s15
 8002438:	f00a fcaa 	bl	800cd90 <atan>
 800243c:	ec53 2b10 	vmov	r2, r3, d0
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f7fe fbd0 	bl	8000be8 <__aeabi_d2f>
 8002448:	4603      	mov	r3, r0
 800244a:	4a3c      	ldr	r2, [pc, #240]	; (800253c <Line_Track_Task+0x2dc>)
 800244c:	6013      	str	r3, [r2, #0]
			if(PHI<0.0)ccr = (uint16_t)(1070 * PHI + SERVO_REAR_CCR_MIDDLE);
 800244e:	4b3b      	ldr	r3, [pc, #236]	; (800253c <Line_Track_Task+0x2dc>)
 8002450:	edd3 7a00 	vldr	s15, [r3]
 8002454:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245c:	d513      	bpl.n	8002486 <Line_Track_Task+0x226>
 800245e:	4b37      	ldr	r3, [pc, #220]	; (800253c <Line_Track_Task+0x2dc>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002564 <Line_Track_Task+0x304>
 8002468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002568 <Line_Track_Task+0x308>
 8002470:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002478:	ee17 3a90 	vmov	r3, s15
 800247c:	b29b      	uxth	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	4b31      	ldr	r3, [pc, #196]	; (8002548 <Line_Track_Task+0x2e8>)
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e012      	b.n	80024ac <Line_Track_Task+0x24c>
			else ccr = (uint16_t)(1180 * PHI + SERVO_REAR_CCR_MIDDLE);
 8002486:	4b2d      	ldr	r3, [pc, #180]	; (800253c <Line_Track_Task+0x2dc>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800256c <Line_Track_Task+0x30c>
 8002490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002494:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002568 <Line_Track_Task+0x308>
 8002498:	ee77 7a87 	vadd.f32	s15, s15, s14
 800249c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a0:	ee17 3a90 	vmov	r3, s15
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <Line_Track_Task+0x2e8>)
 80024aa:	601a      	str	r2, [r3, #0]
			//HÁTSÓ SZERVÓ
			if(ccr > CCR_REAR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 80024ac:	4b26      	ldr	r3, [pc, #152]	; (8002548 <Line_Track_Task+0x2e8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80024b4:	dd04      	ble.n	80024c0 <Line_Track_Task+0x260>
			{
				ccr = CCR_REAR_MAX;
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <Line_Track_Task+0x2e8>)
 80024b8:	f44f 7261 	mov.w	r2, #900	; 0x384
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e008      	b.n	80024d2 <Line_Track_Task+0x272>
			}
			else if(ccr < CCR_REAR_MIN)//egyik irányba se
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <Line_Track_Task+0x2e8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 80024c8:	da03      	bge.n	80024d2 <Line_Track_Task+0x272>
			{
				ccr = CCR_REAR_MIN;
 80024ca:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <Line_Track_Task+0x2e8>)
 80024cc:	f44f 720c 	mov.w	r2, #560	; 0x230
 80024d0:	601a      	str	r2, [r3, #0]
			}
			TIM1->CCR4 = ccr_rear_prev= ccr;
 80024d2:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <Line_Track_Task+0x2e8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <Line_Track_Task+0x2f0>)
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <Line_Track_Task+0x2f4>)
 80024de:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <Line_Track_Task+0x2f0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6413      	str	r3, [r2, #64]	; 0x40
			if(ccr_front_prev!=SERVO_FRONT_CCR_MIDDLE) TIM2->CCR1 = SERVO_FRONT_CCR_MIDDLE;
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <Line_Track_Task+0x2ec>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 80024ec:	d004      	beq.n	80024f8 <Line_Track_Task+0x298>
 80024ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024f2:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 80024f6:	635a      	str	r2, [r3, #52]	; 0x34
			ccr_front_prev=SERVO_FRONT_CCR_MIDDLE;
 80024f8:	4b14      	ldr	r3, [pc, #80]	; (800254c <Line_Track_Task+0x2ec>)
 80024fa:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e0c3      	b.n	800268a <Line_Track_Task+0x42a>
 8002502:	bf00      	nop
 8002504:	f3af 8000 	nop.w
 8002508:	c4830201 	.word	0xc4830201
 800250c:	3fe73a26 	.word	0x3fe73a26
 8002510:	a3f47e90 	.word	0xa3f47e90
 8002514:	3fe8fd1f 	.word	0x3fe8fd1f
 8002518:	20000570 	.word	0x20000570
 800251c:	20000255 	.word	0x20000255
 8002520:	20000261 	.word	0x20000261
 8002524:	20000258 	.word	0x20000258
 8002528:	44898000 	.word	0x44898000
 800252c:	20000564 	.word	0x20000564
 8002530:	bd4ccccd 	.word	0xbd4ccccd
 8002534:	bb83126f 	.word	0xbb83126f
 8002538:	20000574 	.word	0x20000574
 800253c:	20000578 	.word	0x20000578
 8002540:	c4af0000 	.word	0xc4af0000
 8002544:	442b0000 	.word	0x442b0000
 8002548:	20000020 	.word	0x20000020
 800254c:	2000057c 	.word	0x2000057c
 8002550:	20000580 	.word	0x20000580
 8002554:	40010000 	.word	0x40010000
 8002558:	c4898000 	.word	0xc4898000
 800255c:	3df5c28f 	.word	0x3df5c28f
 8002560:	3b83126f 	.word	0x3b83126f
 8002564:	4485c000 	.word	0x4485c000
 8002568:	442a0000 	.word	0x442a0000
 800256c:	44938000 	.word	0x44938000
		}

	}
	/*****Gyorsasági pálya üzemmód******/
	else if(mode == FAST)
 8002570:	4b49      	ldr	r3, [pc, #292]	; (8002698 <Line_Track_Task+0x438>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b3f      	cmp	r3, #63	; 0x3f
 8002576:	f040 8088 	bne.w	800268a <Line_Track_Task+0x42a>
	{
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 800257a:	68b9      	ldr	r1, [r7, #8]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f7ff fe05 	bl	800218c <G0_Read_Fast>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d17d      	bne.n	8002684 <Line_Track_Task+0x424>
		if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8002588:	4b44      	ldr	r3, [pc, #272]	; (800269c <Line_Track_Task+0x43c>)
 800258a:	785b      	ldrb	r3, [r3, #1]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d07b      	beq.n	8002688 <Line_Track_Task+0x428>
 8002590:	4b42      	ldr	r3, [pc, #264]	; (800269c <Line_Track_Task+0x43c>)
 8002592:	785b      	ldrb	r3, [r3, #1]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d877      	bhi.n	8002688 <Line_Track_Task+0x428>
		gamma = Fast_Mode(huart_debugg,tick);
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	68b8      	ldr	r0, [r7, #8]
 800259c:	f000 f890 	bl	80026c0 <Fast_Mode>
 80025a0:	eef0 7a40 	vmov.f32	s15, s0
 80025a4:	4b3e      	ldr	r3, [pc, #248]	; (80026a0 <Line_Track_Task+0x440>)
 80025a6:	edc3 7a00 	vstr	s15, [r3]
		PHI = atan((L/(L+D_FRONT))*tan(gamma));
 80025aa:	4b3d      	ldr	r3, [pc, #244]	; (80026a0 <Line_Track_Task+0x440>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fd ffea 	bl	8000588 <__aeabi_f2d>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	ec43 2b10 	vmov	d0, r2, r3
 80025bc:	f00a fd94 	bl	800d0e8 <tan>
 80025c0:	ec51 0b10 	vmov	r0, r1, d0
 80025c4:	a332      	add	r3, pc, #200	; (adr r3, 8002690 <Line_Track_Task+0x430>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fe f835 	bl	8000638 <__aeabi_dmul>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	ec43 2b17 	vmov	d7, r2, r3
 80025d6:	eeb0 0a47 	vmov.f32	s0, s14
 80025da:	eef0 0a67 	vmov.f32	s1, s15
 80025de:	f00a fbd7 	bl	800cd90 <atan>
 80025e2:	ec53 2b10 	vmov	r2, r3, d0
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	f7fe fafd 	bl	8000be8 <__aeabi_d2f>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4a2c      	ldr	r2, [pc, #176]	; (80026a4 <Line_Track_Task+0x444>)
 80025f2:	6013      	str	r3, [r2, #0]
		ccr = (uint16_t)(-SERVO_M * PHI + SERVO_FRONT_CCR_MIDDLE);
 80025f4:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <Line_Track_Task+0x444>)
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80026a8 <Line_Track_Task+0x448>
 80025fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002602:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80026ac <Line_Track_Task+0x44c>
 8002606:	ee77 7a87 	vadd.f32	s15, s15, s14
 800260a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260e:	ee17 3a90 	vmov	r3, s15
 8002612:	b29b      	uxth	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <Line_Track_Task+0x450>)
 8002618:	601a      	str	r2, [r3, #0]

		if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 800261a:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <Line_Track_Task+0x450>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002622:	dd04      	ble.n	800262e <Line_Track_Task+0x3ce>
		{
			ccr = CCR_FRONT_MAX;
 8002624:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <Line_Track_Task+0x450>)
 8002626:	f44f 7261 	mov.w	r2, #900	; 0x384
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e008      	b.n	8002640 <Line_Track_Task+0x3e0>
		}
		else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <Line_Track_Task+0x450>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002636:	da03      	bge.n	8002640 <Line_Track_Task+0x3e0>
		{
			ccr = CCR_FRONT_MIN;
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <Line_Track_Task+0x450>)
 800263a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800263e:	601a      	str	r2, [r3, #0]
		}
		TIM2->CCR1 = ccr_front_prev= ccr;
 8002640:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <Line_Track_Task+0x450>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <Line_Track_Task+0x454>)
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800264e:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <Line_Track_Task+0x454>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6353      	str	r3, [r2, #52]	; 0x34
		if(ccr_rear_prev!=SERVO_REAR_CCR_MIDDLE) TIM1->CCR4 = SERVO_REAR_CCR_MIDDLE;
 8002654:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <Line_Track_Task+0x458>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800265c:	d003      	beq.n	8002666 <Line_Track_Task+0x406>
 800265e:	4b17      	ldr	r3, [pc, #92]	; (80026bc <Line_Track_Task+0x45c>)
 8002660:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
		ccr_rear_prev=SERVO_REAR_CCR_MIDDLE;
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <Line_Track_Task+0x458>)
 8002668:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e00c      	b.n	800268a <Line_Track_Task+0x42a>
	if(line_track_task_tick>tick) return;
 8002670:	bf00      	nop
 8002672:	e00a      	b.n	800268a <Line_Track_Task+0x42a>
			if(G0_Read_Skill(huart_stm, huart_debugg,CMD_READ_SKILL_FORWARD)) return;
 8002674:	bf00      	nop
 8002676:	e008      	b.n	800268a <Line_Track_Task+0x42a>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8002678:	bf00      	nop
 800267a:	e006      	b.n	800268a <Line_Track_Task+0x42a>
			if(G0_Read_Skill(huart_stm, huart_debugg,CMD_READ_SKILL_REVERSE)) return;
 800267c:	bf00      	nop
 800267e:	e004      	b.n	800268a <Line_Track_Task+0x42a>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8002680:	bf00      	nop
 8002682:	e002      	b.n	800268a <Line_Track_Task+0x42a>
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 8002684:	bf00      	nop
 8002686:	e000      	b.n	800268a <Line_Track_Task+0x42a>
		if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8002688:	bf00      	nop
	}
}
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	c4830201 	.word	0xc4830201
 8002694:	3fe73a26 	.word	0x3fe73a26
 8002698:	20000255 	.word	0x20000255
 800269c:	20000564 	.word	0x20000564
 80026a0:	20000574 	.word	0x20000574
 80026a4:	20000578 	.word	0x20000578
 80026a8:	c4af0000 	.word	0xc4af0000
 80026ac:	442b0000 	.word	0x442b0000
 80026b0:	20000020 	.word	0x20000020
 80026b4:	2000057c 	.word	0x2000057c
 80026b8:	20000580 	.word	0x20000580
 80026bc:	40010000 	.word	0x40010000

080026c0 <Fast_Mode>:

float Fast_Mode(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 80026c0:	b5b0      	push	{r4, r5, r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
	static float x_elso_prev=0;
	static float x_hatso;
	static float delta;
	static float gamma;

	uint32_t sum=0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
	uint32_t dist=0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]


	if(swState[0] == FREERUN_MODE)
 80026d2:	4b46      	ldr	r3, [pc, #280]	; (80027ec <Fast_Mode+0x12c>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d171      	bne.n	80027be <Fast_Mode+0xfe>
	{
		/*****Gyorsító jelölés figyelése (szaggatott 3 vonal)*****/
		if(LINE_CNT != lineCnt_prev && (!Free_Run_State || Free_Run_State==2)) //ha változik az alattunk lévő vonalak száma
 80026da:	4b45      	ldr	r3, [pc, #276]	; (80027f0 <Fast_Mode+0x130>)
 80026dc:	785a      	ldrb	r2, [r3, #1]
 80026de:	4b45      	ldr	r3, [pc, #276]	; (80027f4 <Fast_Mode+0x134>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d044      	beq.n	8002770 <Fast_Mode+0xb0>
 80026e6:	4b44      	ldr	r3, [pc, #272]	; (80027f8 <Fast_Mode+0x138>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <Fast_Mode+0x36>
 80026ee:	4b42      	ldr	r3, [pc, #264]	; (80027f8 <Fast_Mode+0x138>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d13c      	bne.n	8002770 <Fast_Mode+0xb0>
		{
			dt[index] = t - t_prev;
 80026f6:	4b41      	ldr	r3, [pc, #260]	; (80027fc <Fast_Mode+0x13c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a41      	ldr	r2, [pc, #260]	; (8002800 <Fast_Mode+0x140>)
 80026fc:	7812      	ldrb	r2, [r2, #0]
 80026fe:	4611      	mov	r1, r2
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	4a3f      	ldr	r2, [pc, #252]	; (8002804 <Fast_Mode+0x144>)
 8002706:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			sum=dt[0] + dt[1] + dt[2] + dt[3]+ dt[4];
 800270a:	4b3e      	ldr	r3, [pc, #248]	; (8002804 <Fast_Mode+0x144>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <Fast_Mode+0x144>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	441a      	add	r2, r3
 8002714:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <Fast_Mode+0x144>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	441a      	add	r2, r3
 800271a:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <Fast_Mode+0x144>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	441a      	add	r2, r3
 8002720:	4b38      	ldr	r3, [pc, #224]	; (8002804 <Fast_Mode+0x144>)
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	4413      	add	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]
			if((sum > 300) && (sum < 700))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800272e:	d90f      	bls.n	8002750 <Fast_Mode+0x90>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002736:	d20b      	bcs.n	8002750 <Fast_Mode+0x90>
			{
				v_ref=4200;
 8002738:	4b33      	ldr	r3, [pc, #204]	; (8002808 <Fast_Mode+0x148>)
 800273a:	4a34      	ldr	r2, [pc, #208]	; (800280c <Fast_Mode+0x14c>)
 800273c:	601a      	str	r2, [r3, #0]
				LED_B(1);
 800273e:	2200      	movs	r2, #0
 8002740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002744:	4832      	ldr	r0, [pc, #200]	; (8002810 <Fast_Mode+0x150>)
 8002746:	f003 fd7f 	bl	8006248 <HAL_GPIO_WritePin>
				Free_Run_State=1;
 800274a:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <Fast_Mode+0x138>)
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
			}
			index++;
 8002750:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <Fast_Mode+0x140>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	3301      	adds	r3, #1
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4b29      	ldr	r3, [pc, #164]	; (8002800 <Fast_Mode+0x140>)
 800275a:	701a      	strb	r2, [r3, #0]
			if(index>4) index=0;
 800275c:	4b28      	ldr	r3, [pc, #160]	; (8002800 <Fast_Mode+0x140>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d902      	bls.n	800276a <Fast_Mode+0xaa>
 8002764:	4b26      	ldr	r3, [pc, #152]	; (8002800 <Fast_Mode+0x140>)
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
			t_prev = t;
 800276a:	4a24      	ldr	r2, [pc, #144]	; (80027fc <Fast_Mode+0x13c>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6013      	str	r3, [r2, #0]
		}
		/* A memóriajellegű statikus változók segítségével vizsgáljuk a szaggatott vonalat*/
		lineCnt_prev = LINE_CNT; //az előző értéket a jelenlegihez hangoljuk
 8002770:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <Fast_Mode+0x130>)
 8002772:	785a      	ldrb	r2, [r3, #1]
 8002774:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <Fast_Mode+0x134>)
 8002776:	701a      	strb	r2, [r3, #0]

		/*****Lassító jelölés figyelése (folytonos 3 vonal)*****/
		if(LINE_CNT > 1 && (!Free_Run_State || Free_Run_State==1)) //ha 3 vonalat érzékelünk
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <Fast_Mode+0x130>)
 800277a:	785b      	ldrb	r3, [r3, #1]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d91a      	bls.n	80027b6 <Fast_Mode+0xf6>
 8002780:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <Fast_Mode+0x138>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <Fast_Mode+0xd0>
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <Fast_Mode+0x138>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d112      	bne.n	80027b6 <Fast_Mode+0xf6>
		{
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 8002790:	4b20      	ldr	r3, [pc, #128]	; (8002814 <Fast_Mode+0x154>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	338c      	adds	r3, #140	; 0x8c
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d951      	bls.n	8002840 <Fast_Mode+0x180>
			{
				v_ref = 1100;
 800279c:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <Fast_Mode+0x148>)
 800279e:	4a1e      	ldr	r2, [pc, #120]	; (8002818 <Fast_Mode+0x158>)
 80027a0:	601a      	str	r2, [r3, #0]
				Free_Run_State=2;
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <Fast_Mode+0x138>)
 80027a4:	2202      	movs	r2, #2
 80027a6:	701a      	strb	r2, [r3, #0]
				LED_B(0);
 80027a8:	2201      	movs	r2, #1
 80027aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027ae:	4818      	ldr	r0, [pc, #96]	; (8002810 <Fast_Mode+0x150>)
 80027b0:	f003 fd4a 	bl	8006248 <HAL_GPIO_WritePin>
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 80027b4:	e044      	b.n	8002840 <Fast_Mode+0x180>
			}
		}
		else //ha 1 vonalat érzékelünk
		{
			start3time = t;
 80027b6:	4a17      	ldr	r2, [pc, #92]	; (8002814 <Fast_Mode+0x154>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e040      	b.n	8002840 <Fast_Mode+0x180>
		}
		/*****FÉKEZÉS NEGATÍV PWM-EL*******/
	}

	/*****SC üzemmód******/
	else if(swState[0]==SC_MODE)
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <Fast_Mode+0x12c>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d13c      	bne.n	8002840 <Fast_Mode+0x180>
	{
		dist=(((uint16_t)rxBuf[5])<<8) | ((uint16_t)rxBuf[6]);
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <Fast_Mode+0x130>)
 80027c8:	795b      	ldrb	r3, [r3, #5]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	4a08      	ldr	r2, [pc, #32]	; (80027f0 <Fast_Mode+0x130>)
 80027ce:	7992      	ldrb	r2, [r2, #6]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]
		if(dist>1000 || rxBuf[4]) v_ref=1500; //ha tul messze vana  SC vagy érvénytelen az olvasás
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027da:	d803      	bhi.n	80027e4 <Fast_Mode+0x124>
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <Fast_Mode+0x130>)
 80027de:	791b      	ldrb	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01f      	beq.n	8002824 <Fast_Mode+0x164>
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <Fast_Mode+0x148>)
 80027e6:	4a0d      	ldr	r2, [pc, #52]	; (800281c <Fast_Mode+0x15c>)
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e029      	b.n	8002840 <Fast_Mode+0x180>
 80027ec:	2000024c 	.word	0x2000024c
 80027f0:	20000564 	.word	0x20000564
 80027f4:	20000024 	.word	0x20000024
 80027f8:	20000584 	.word	0x20000584
 80027fc:	20000588 	.word	0x20000588
 8002800:	2000058c 	.word	0x2000058c
 8002804:	20000028 	.word	0x20000028
 8002808:	20000258 	.word	0x20000258
 800280c:	45834000 	.word	0x45834000
 8002810:	40020400 	.word	0x40020400
 8002814:	20000590 	.word	0x20000590
 8002818:	44898000 	.word	0x44898000
 800281c:	44bb8000 	.word	0x44bb8000
 8002820:	43fa0000 	.word	0x43fa0000
		else v_ref = 2*(float)dist-500;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002832:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8002820 <Fast_Mode+0x160>
 8002836:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800283a:	4bc9      	ldr	r3, [pc, #804]	; (8002b60 <Fast_Mode+0x4a0>)
 800283c:	edc3 7a00 	vstr	s15, [r3]
	}

	x_elso=(float)rxBuf[2]*204/248.0-102;;
 8002840:	4bc8      	ldr	r3, [pc, #800]	; (8002b64 <Fast_Mode+0x4a4>)
 8002842:	789b      	ldrb	r3, [r3, #2]
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284c:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 8002b68 <Fast_Mode+0x4a8>
 8002850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002854:	ee17 0a90 	vmov	r0, s15
 8002858:	f7fd fe96 	bl	8000588 <__aeabi_f2d>
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	4bc2      	ldr	r3, [pc, #776]	; (8002b6c <Fast_Mode+0x4ac>)
 8002862:	f7fe f813 	bl	800088c <__aeabi_ddiv>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	4bbf      	ldr	r3, [pc, #764]	; (8002b70 <Fast_Mode+0x4b0>)
 8002874:	f7fd fd28 	bl	80002c8 <__aeabi_dsub>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	f7fe f9b2 	bl	8000be8 <__aeabi_d2f>
 8002884:	4603      	mov	r3, r0
 8002886:	4abb      	ldr	r2, [pc, #748]	; (8002b74 <Fast_Mode+0x4b4>)
 8002888:	6013      	str	r3, [r2, #0]
	x_hatso=(float)rxBuf[3]*204/244.0-102;
 800288a:	4bb6      	ldr	r3, [pc, #728]	; (8002b64 <Fast_Mode+0x4a4>)
 800288c:	78db      	ldrb	r3, [r3, #3]
 800288e:	ee07 3a90 	vmov	s15, r3
 8002892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002896:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8002b68 <Fast_Mode+0x4a8>
 800289a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289e:	ee17 0a90 	vmov	r0, s15
 80028a2:	f7fd fe71 	bl	8000588 <__aeabi_f2d>
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	4bb3      	ldr	r3, [pc, #716]	; (8002b78 <Fast_Mode+0x4b8>)
 80028ac:	f7fd ffee 	bl	800088c <__aeabi_ddiv>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	4bac      	ldr	r3, [pc, #688]	; (8002b70 <Fast_Mode+0x4b0>)
 80028be:	f7fd fd03 	bl	80002c8 <__aeabi_dsub>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	f7fe f98d 	bl	8000be8 <__aeabi_d2f>
 80028ce:	4603      	mov	r3, r0
 80028d0:	4aaa      	ldr	r2, [pc, #680]	; (8002b7c <Fast_Mode+0x4bc>)
 80028d2:	6013      	str	r3, [r2, #0]
	delta=atan((float)(x_elso-x_hatso)/L_SENSOR);
 80028d4:	4ba7      	ldr	r3, [pc, #668]	; (8002b74 <Fast_Mode+0x4b4>)
 80028d6:	ed93 7a00 	vldr	s14, [r3]
 80028da:	4ba8      	ldr	r3, [pc, #672]	; (8002b7c <Fast_Mode+0x4bc>)
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e4:	ee17 0a90 	vmov	r0, s15
 80028e8:	f7fd fe4e 	bl	8000588 <__aeabi_f2d>
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	4ba3      	ldr	r3, [pc, #652]	; (8002b80 <Fast_Mode+0x4c0>)
 80028f2:	f7fd ffcb 	bl	800088c <__aeabi_ddiv>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	ec43 2b17 	vmov	d7, r2, r3
 80028fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002902:	eef0 0a67 	vmov.f32	s1, s15
 8002906:	f00a fa43 	bl	800cd90 <atan>
 800290a:	ec53 2b10 	vmov	r2, r3, d0
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f7fe f969 	bl	8000be8 <__aeabi_d2f>
 8002916:	4603      	mov	r3, r0
 8002918:	4a9a      	ldr	r2, [pc, #616]	; (8002b84 <Fast_Mode+0x4c4>)
 800291a:	6013      	str	r3, [r2, #0]
	/**/
	//szabályozóparaméterek ujraszámolása az aktuális sebesség alapján
	if(v>100)
 800291c:	4b9a      	ldr	r3, [pc, #616]	; (8002b88 <Fast_Mode+0x4c8>)
 800291e:	edd3 7a00 	vldr	s15, [r3]
 8002922:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8002b8c <Fast_Mode+0x4cc>
 8002926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800292a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292e:	f340 80b6 	ble.w	8002a9e <Fast_Mode+0x3de>
	{
		if(v<2000)
 8002932:	4b95      	ldr	r3, [pc, #596]	; (8002b88 <Fast_Mode+0x4c8>)
 8002934:	edd3 7a00 	vldr	s15, [r3]
 8002938:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8002b90 <Fast_Mode+0x4d0>
 800293c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002944:	d554      	bpl.n	80029f0 <Fast_Mode+0x330>
		{
			k_p = -L/(v*v)*S1MULTS2_SLOW;
 8002946:	4b90      	ldr	r3, [pc, #576]	; (8002b88 <Fast_Mode+0x4c8>)
 8002948:	ed93 7a00 	vldr	s14, [r3]
 800294c:	4b8e      	ldr	r3, [pc, #568]	; (8002b88 <Fast_Mode+0x4c8>)
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002956:	ee17 0a90 	vmov	r0, s15
 800295a:	f7fd fe15 	bl	8000588 <__aeabi_f2d>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	a173      	add	r1, pc, #460	; (adr r1, 8002b30 <Fast_Mode+0x470>)
 8002964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002968:	f7fd ff90 	bl	800088c <__aeabi_ddiv>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	a370      	add	r3, pc, #448	; (adr r3, 8002b38 <Fast_Mode+0x478>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fd fe5d 	bl	8000638 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f7fe f92f 	bl	8000be8 <__aeabi_d2f>
 800298a:	4603      	mov	r3, r0
 800298c:	4a81      	ldr	r2, [pc, #516]	; (8002b94 <Fast_Mode+0x4d4>)
 800298e:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 8002990:	4b7d      	ldr	r3, [pc, #500]	; (8002b88 <Fast_Mode+0x4c8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7fd fdf7 	bl	8000588 <__aeabi_f2d>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	a168      	add	r1, pc, #416	; (adr r1, 8002b40 <Fast_Mode+0x480>)
 80029a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029a4:	f7fd ff72 	bl	800088c <__aeabi_ddiv>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4614      	mov	r4, r2
 80029ae:	461d      	mov	r5, r3
 80029b0:	4b75      	ldr	r3, [pc, #468]	; (8002b88 <Fast_Mode+0x4c8>)
 80029b2:	ed93 7a00 	vldr	s14, [r3]
 80029b6:	4b77      	ldr	r3, [pc, #476]	; (8002b94 <Fast_Mode+0x4d4>)
 80029b8:	edd3 7a00 	vldr	s15, [r3]
 80029bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c0:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 80029c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c8:	ee17 0a90 	vmov	r0, s15
 80029cc:	f7fd fddc 	bl	8000588 <__aeabi_f2d>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4620      	mov	r0, r4
 80029d6:	4629      	mov	r1, r5
 80029d8:	f7fd fe2e 	bl	8000638 <__aeabi_dmul>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	f7fe f900 	bl	8000be8 <__aeabi_d2f>
 80029e8:	4603      	mov	r3, r0
 80029ea:	4a6b      	ldr	r2, [pc, #428]	; (8002b98 <Fast_Mode+0x4d8>)
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e056      	b.n	8002a9e <Fast_Mode+0x3de>
		}
		else
		{
			k_p = -L/(v*v)*S1MULTS2_FAST;
 80029f0:	4b65      	ldr	r3, [pc, #404]	; (8002b88 <Fast_Mode+0x4c8>)
 80029f2:	ed93 7a00 	vldr	s14, [r3]
 80029f6:	4b64      	ldr	r3, [pc, #400]	; (8002b88 <Fast_Mode+0x4c8>)
 80029f8:	edd3 7a00 	vldr	s15, [r3]
 80029fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a00:	ee17 0a90 	vmov	r0, s15
 8002a04:	f7fd fdc0 	bl	8000588 <__aeabi_f2d>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	a148      	add	r1, pc, #288	; (adr r1, 8002b30 <Fast_Mode+0x470>)
 8002a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a12:	f7fd ff3b 	bl	800088c <__aeabi_ddiv>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	a34a      	add	r3, pc, #296	; (adr r3, 8002b48 <Fast_Mode+0x488>)
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	f7fd fe08 	bl	8000638 <__aeabi_dmul>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f7fe f8da 	bl	8000be8 <__aeabi_d2f>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4a57      	ldr	r2, [pc, #348]	; (8002b94 <Fast_Mode+0x4d4>)
 8002a38:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_FAST-v*k_p);
 8002a3a:	4b53      	ldr	r3, [pc, #332]	; (8002b88 <Fast_Mode+0x4c8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fd fda2 	bl	8000588 <__aeabi_f2d>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	a13d      	add	r1, pc, #244	; (adr r1, 8002b40 <Fast_Mode+0x480>)
 8002a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a4e:	f7fd ff1d 	bl	800088c <__aeabi_ddiv>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4614      	mov	r4, r2
 8002a58:	461d      	mov	r5, r3
 8002a5a:	4b4b      	ldr	r3, [pc, #300]	; (8002b88 <Fast_Mode+0x4c8>)
 8002a5c:	ed93 7a00 	vldr	s14, [r3]
 8002a60:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <Fast_Mode+0x4d4>)
 8002a62:	edd3 7a00 	vldr	s15, [r3]
 8002a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6a:	ee17 0a90 	vmov	r0, s15
 8002a6e:	f7fd fd8b 	bl	8000588 <__aeabi_f2d>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	a136      	add	r1, pc, #216	; (adr r1, 8002b50 <Fast_Mode+0x490>)
 8002a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a7c:	f7fd fc24 	bl	80002c8 <__aeabi_dsub>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4620      	mov	r0, r4
 8002a86:	4629      	mov	r1, r5
 8002a88:	f7fd fdd6 	bl	8000638 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	f7fe f8a8 	bl	8000be8 <__aeabi_d2f>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4a3f      	ldr	r2, [pc, #252]	; (8002b98 <Fast_Mode+0x4d8>)
 8002a9c:	6013      	str	r3, [r2, #0]
		}
	}

	gamma = -k_p * x_elso -k_delta * delta - K_D * (x_elso-x_elso_prev);
 8002a9e:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <Fast_Mode+0x4d4>)
 8002aa0:	edd3 7a00 	vldr	s15, [r3]
 8002aa4:	eeb1 7a67 	vneg.f32	s14, s15
 8002aa8:	4b32      	ldr	r3, [pc, #200]	; (8002b74 <Fast_Mode+0x4b4>)
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ab2:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <Fast_Mode+0x4d8>)
 8002ab4:	edd3 6a00 	vldr	s13, [r3]
 8002ab8:	4b32      	ldr	r3, [pc, #200]	; (8002b84 <Fast_Mode+0x4c4>)
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac6:	ee17 0a90 	vmov	r0, s15
 8002aca:	f7fd fd5d 	bl	8000588 <__aeabi_f2d>
 8002ace:	4604      	mov	r4, r0
 8002ad0:	460d      	mov	r5, r1
 8002ad2:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <Fast_Mode+0x4b4>)
 8002ad4:	ed93 7a00 	vldr	s14, [r3]
 8002ad8:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <Fast_Mode+0x4dc>)
 8002ada:	edd3 7a00 	vldr	s15, [r3]
 8002ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae2:	ee17 0a90 	vmov	r0, s15
 8002ae6:	f7fd fd4f 	bl	8000588 <__aeabi_f2d>
 8002aea:	a31b      	add	r3, pc, #108	; (adr r3, 8002b58 <Fast_Mode+0x498>)
 8002aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af0:	f7fd fda2 	bl	8000638 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fd fbe6 	bl	80002cc <__adddf3>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	f7fe f86e 	bl	8000be8 <__aeabi_d2f>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4a24      	ldr	r2, [pc, #144]	; (8002ba0 <Fast_Mode+0x4e0>)
 8002b10:	6013      	str	r3, [r2, #0]
	x_elso_prev = x_elso;
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <Fast_Mode+0x4b4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a21      	ldr	r2, [pc, #132]	; (8002b9c <Fast_Mode+0x4dc>)
 8002b18:	6013      	str	r3, [r2, #0]

	return gamma;
 8002b1a:	4b21      	ldr	r3, [pc, #132]	; (8002ba0 <Fast_Mode+0x4e0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	ee07 3a90 	vmov	s15, r3
}
 8002b22:	eeb0 0a67 	vmov.f32	s0, s15
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b2c:	f3af 8000 	nop.w
 8002b30:	00000000 	.word	0x00000000
 8002b34:	c0716000 	.word	0xc0716000
 8002b38:	fd21ff2e 	.word	0xfd21ff2e
 8002b3c:	402275f6 	.word	0x402275f6
 8002b40:	00000000 	.word	0x00000000
 8002b44:	40716000 	.word	0x40716000
 8002b48:	ab367a10 	.word	0xab367a10
 8002b4c:	402d573e 	.word	0x402d573e
 8002b50:	66666666 	.word	0x66666666
 8002b54:	c01e6666 	.word	0xc01e6666
 8002b58:	9999999a 	.word	0x9999999a
 8002b5c:	3f999999 	.word	0x3f999999
 8002b60:	20000258 	.word	0x20000258
 8002b64:	20000564 	.word	0x20000564
 8002b68:	434c0000 	.word	0x434c0000
 8002b6c:	406f0000 	.word	0x406f0000
 8002b70:	40598000 	.word	0x40598000
 8002b74:	20000594 	.word	0x20000594
 8002b78:	406e8000 	.word	0x406e8000
 8002b7c:	20000598 	.word	0x20000598
 8002b80:	407c4000 	.word	0x407c4000
 8002b84:	2000059c 	.word	0x2000059c
 8002b88:	2000054c 	.word	0x2000054c
 8002b8c:	42c80000 	.word	0x42c80000
 8002b90:	44fa0000 	.word	0x44fa0000
 8002b94:	2000003c 	.word	0x2000003c
 8002b98:	20000040 	.word	0x20000040
 8002b9c:	200005a0 	.word	0x200005a0
 8002ba0:	200005a4 	.word	0x200005a4

08002ba4 <__NVIC_DisableIRQ>:
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	db12      	blt.n	8002bdc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	490a      	ldr	r1, [pc, #40]	; (8002be8 <__NVIC_DisableIRQ+0x44>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bca:	3320      	adds	r3, #32
 8002bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002bd0:	f3bf 8f4f 	dsb	sy
}
 8002bd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bd6:	f3bf 8f6f 	isb	sy
}
 8002bda:	bf00      	nop
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000e100 	.word	0xe000e100

08002bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bf2:	f001 fc1d 	bl	8004430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bf6:	f000 f88b 	bl	8002d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bfa:	f000 fd61 	bl	80036c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bfe:	f000 fd3f 	bl	8003680 <MX_DMA_Init>
  MX_TIM2_Init();
 8002c02:	f000 fa7b 	bl	80030fc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002c06:	f000 fcbd 	bl	8003584 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8002c0a:	f000 fb6f 	bl	80032ec <MX_TIM4_Init>
  MX_ADC2_Init();
 8002c0e:	f000 f983 	bl	8002f18 <MX_ADC2_Init>
  MX_TIM3_Init();
 8002c12:	f000 fae9 	bl	80031e8 <MX_TIM3_Init>
  MX_UART5_Init();
 8002c16:	f000 fc8b 	bl	8003530 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8002c1a:	f000 fcdd 	bl	80035d8 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8002c1e:	f000 fc2f 	bl	8003480 <MX_TIM8_Init>
  MX_ADC1_Init();
 8002c22:	f000 f8e7 	bl	8002df4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8002c26:	f000 fd01 	bl	800362c <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8002c2a:	f000 fbdb 	bl	80033e4 <MX_TIM5_Init>
  MX_TIM1_Init();
 8002c2e:	f000 f9c5 	bl	8002fbc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  F4_Basic_Init(&huart1, &htim5, &htim3, &htim2, &htim1, &htim8);
 8002c32:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <main+0xf0>)
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	4b2a      	ldr	r3, [pc, #168]	; (8002ce0 <main+0xf4>)
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ce4 <main+0xf8>)
 8002c3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ce8 <main+0xfc>)
 8002c3e:	492b      	ldr	r1, [pc, #172]	; (8002cec <main+0x100>)
 8002c40:	482b      	ldr	r0, [pc, #172]	; (8002cf0 <main+0x104>)
 8002c42:	f7fe fa19 	bl	8001078 <F4_Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3);
 8002c46:	2108      	movs	r1, #8
 8002c48:	482a      	ldr	r0, [pc, #168]	; (8002cf4 <main+0x108>)
 8002c4a:	f000 fe4d 	bl	80038e8 <Remote_Control_Init>
  Battery_Voltage_Compensate(&hadc2, &hadc1, &huart1);
 8002c4e:	4a28      	ldr	r2, [pc, #160]	; (8002cf0 <main+0x104>)
 8002c50:	4929      	ldr	r1, [pc, #164]	; (8002cf8 <main+0x10c>)
 8002c52:	482a      	ldr	r0, [pc, #168]	; (8002cfc <main+0x110>)
 8002c54:	f7fe ffb8 	bl	8001bc8 <Battery_Voltage_Compensate>
  Mode_Selector(&huart1, &huart5);
 8002c58:	4929      	ldr	r1, [pc, #164]	; (8002d00 <main+0x114>)
 8002c5a:	4825      	ldr	r0, [pc, #148]	; (8002cf0 <main+0x104>)
 8002c5c:	f7fe fd50 	bl	8001700 <Mode_Selector>
  v_ref=500;
 8002c60:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <main+0x118>)
 8002c62:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <main+0x11c>)
 8002c64:	601a      	str	r2, [r3, #0]
  TIM1->CCR4=SERVO_REAR_CCR_MIDDLE;
 8002c66:	4b29      	ldr	r3, [pc, #164]	; (8002d0c <main+0x120>)
 8002c68:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
  TIM2->CCR1=SERVO_FRONT_CCR_MIDDLE;
 8002c6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c72:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8002c76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Measure_Velocity_Task(&htim8,TICK, 4);
 8002c78:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <main+0x100>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	2204      	movs	r2, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	4816      	ldr	r0, [pc, #88]	; (8002cdc <main+0xf0>)
 8002c84:	f7ff f8cc 	bl	8001e20 <Measure_Velocity_Task>
	  Motor_Drive_Task(&htim3, &huart1, TICK, 10);
 8002c88:	4b18      	ldr	r3, [pc, #96]	; (8002cec <main+0x100>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c8e:	230a      	movs	r3, #10
 8002c90:	4917      	ldr	r1, [pc, #92]	; (8002cf0 <main+0x104>)
 8002c92:	4815      	ldr	r0, [pc, #84]	; (8002ce8 <main+0xfc>)
 8002c94:	f7ff f940 	bl	8001f18 <Motor_Drive_Task>
	  Line_Track_Task(&huart5, &huart1, TICK, 8);
 8002c98:	4b14      	ldr	r3, [pc, #80]	; (8002cec <main+0x100>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	4913      	ldr	r1, [pc, #76]	; (8002cf0 <main+0x104>)
 8002ca2:	4817      	ldr	r0, [pc, #92]	; (8002d00 <main+0x114>)
 8002ca4:	f7ff fadc 	bl	8002260 <Line_Track_Task>
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart1, TICK, 29);
 8002ca8:	4b10      	ldr	r3, [pc, #64]	; (8002cec <main+0x100>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	221d      	movs	r2, #29
 8002cb0:	9200      	str	r2, [sp, #0]
 8002cb2:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <main+0x104>)
 8002cb4:	2108      	movs	r1, #8
 8002cb6:	480f      	ldr	r0, [pc, #60]	; (8002cf4 <main+0x108>)
 8002cb8:	f000 fe32 	bl	8003920 <Remote_Control_Task>
	  HDI_Read_Task(&htim2,TICK, 200);
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <main+0x100>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	22c8      	movs	r2, #200	; 0xc8
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4807      	ldr	r0, [pc, #28]	; (8002ce4 <main+0xf8>)
 8002cc8:	f7fe fa82 	bl	80011d0 <HDI_Read_Task>
	  //Monitoring_Task(&huart1, (int16_t)v , rxBuf[1], TIM2->CCR1, 1000, TICK, 201);
	  Control_Task(TICK, 53);
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <main+0x100>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	2135      	movs	r1, #53	; 0x35
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe fb51 	bl	800137c <Control_Task>
  {
 8002cda:	e7cd      	b.n	8002c78 <main+0x8c>
 8002cdc:	200007a0 	.word	0x200007a0
 8002ce0:	20000638 	.word	0x20000638
 8002ce4:	20000680 	.word	0x20000680
 8002ce8:	200006c8 	.word	0x200006c8
 8002cec:	20000758 	.word	0x20000758
 8002cf0:	2000088c 	.word	0x2000088c
 8002cf4:	20000710 	.word	0x20000710
 8002cf8:	200005a8 	.word	0x200005a8
 8002cfc:	200005f0 	.word	0x200005f0
 8002d00:	20000848 	.word	0x20000848
 8002d04:	20000258 	.word	0x20000258
 8002d08:	43fa0000 	.word	0x43fa0000
 8002d0c:	40010000 	.word	0x40010000

08002d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b094      	sub	sp, #80	; 0x50
 8002d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d16:	f107 031c 	add.w	r3, r7, #28
 8002d1a:	2234      	movs	r2, #52	; 0x34
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f007 f94c 	bl	8009fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d24:	f107 0308 	add.w	r3, r7, #8
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d34:	2300      	movs	r3, #0
 8002d36:	607b      	str	r3, [r7, #4]
 8002d38:	4b2c      	ldr	r3, [pc, #176]	; (8002dec <SystemClock_Config+0xdc>)
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	4a2b      	ldr	r2, [pc, #172]	; (8002dec <SystemClock_Config+0xdc>)
 8002d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d42:	6413      	str	r3, [r2, #64]	; 0x40
 8002d44:	4b29      	ldr	r3, [pc, #164]	; (8002dec <SystemClock_Config+0xdc>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d50:	2300      	movs	r3, #0
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	4b26      	ldr	r3, [pc, #152]	; (8002df0 <SystemClock_Config+0xe0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a25      	ldr	r2, [pc, #148]	; (8002df0 <SystemClock_Config+0xe0>)
 8002d5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b23      	ldr	r3, [pc, #140]	; (8002df0 <SystemClock_Config+0xe0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d76:	2302      	movs	r3, #2
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d80:	2304      	movs	r3, #4
 8002d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002d84:	23b4      	movs	r3, #180	; 0xb4
 8002d86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d90:	2302      	movs	r3, #2
 8002d92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d94:	f107 031c 	add.w	r3, r7, #28
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fe3b 	bl	8006a14 <HAL_RCC_OscConfig>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002da4:	f000 fd9a 	bl	80038dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002da8:	f003 fa9a 	bl	80062e0 <HAL_PWREx_EnableOverDrive>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002db2:	f000 fd93 	bl	80038dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002db6:	230f      	movs	r3, #15
 8002db8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002dc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002dc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dcc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002dce:	f107 0308 	add.w	r3, r7, #8
 8002dd2:	2105      	movs	r1, #5
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 fad3 	bl	8006380 <HAL_RCC_ClockConfig>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002de0:	f000 fd7c 	bl	80038dc <Error_Handler>
  }
}
 8002de4:	bf00      	nop
 8002de6:	3750      	adds	r7, #80	; 0x50
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40007000 	.word	0x40007000

08002df4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08c      	sub	sp, #48	; 0x30
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002dfa:	f107 0320 	add.w	r3, r7, #32
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002e08:	463b      	mov	r3, r7
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f007 f8d4 	bl	8009fbc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e14:	4b3c      	ldr	r3, [pc, #240]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002e16:	4a3d      	ldr	r2, [pc, #244]	; (8002f0c <MX_ADC1_Init+0x118>)
 8002e18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002e1a:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002e1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e22:	4b39      	ldr	r3, [pc, #228]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002e28:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e2e:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e34:	4b34      	ldr	r3, [pc, #208]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e3c:	4b32      	ldr	r3, [pc, #200]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e42:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002e44:	4a32      	ldr	r2, [pc, #200]	; (8002f10 <MX_ADC1_Init+0x11c>)
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e48:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002e4e:	4b2e      	ldr	r3, [pc, #184]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002e50:	2203      	movs	r2, #3
 8002e52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e54:	4b2c      	ldr	r3, [pc, #176]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e62:	4829      	ldr	r0, [pc, #164]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002e64:	f001 fb7a 	bl	800455c <HAL_ADC_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8002e6e:	f000 fd35 	bl	80038dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002e72:	2308      	movs	r3, #8
 8002e74:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8002e76:	2301      	movs	r3, #1
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002e7a:	2307      	movs	r3, #7
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e7e:	f107 0320 	add.w	r3, r7, #32
 8002e82:	4619      	mov	r1, r3
 8002e84:	4820      	ldr	r0, [pc, #128]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002e86:	f001 fd17 	bl	80048b8 <HAL_ADC_ConfigChannel>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002e90:	f000 fd24 	bl	80038dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8002e94:	2302      	movs	r3, #2
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e98:	f107 0320 	add.w	r3, r7, #32
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	481a      	ldr	r0, [pc, #104]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002ea0:	f001 fd0a 	bl	80048b8 <HAL_ADC_ConfigChannel>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8002eaa:	f000 fd17 	bl	80038dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002eb2:	f107 0320 	add.w	r3, r7, #32
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4813      	ldr	r0, [pc, #76]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002eba:	f001 fcfd 	bl	80048b8 <HAL_ADC_ConfigChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8002ec4:	f000 fd0a 	bl	80038dc <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8002ec8:	2308      	movs	r3, #8
 8002eca:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8002edc:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <MX_ADC1_Init+0x120>)
 8002ede:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002eec:	463b      	mov	r3, r7
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4805      	ldr	r0, [pc, #20]	; (8002f08 <MX_ADC1_Init+0x114>)
 8002ef2:	f001 ff0f 	bl	8004d14 <HAL_ADCEx_InjectedConfigChannel>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8002efc:	f000 fcee 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f00:	bf00      	nop
 8002f02:	3730      	adds	r7, #48	; 0x30
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	200005a8 	.word	0x200005a8
 8002f0c:	40012000 	.word	0x40012000
 8002f10:	0f000001 	.word	0x0f000001
 8002f14:	000f0001 	.word	0x000f0001

08002f18 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f1e:	463b      	mov	r3, r7
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002f2a:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <MX_ADC2_Init+0x98>)
 8002f2c:	4a21      	ldr	r2, [pc, #132]	; (8002fb4 <MX_ADC2_Init+0x9c>)
 8002f2e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002f30:	4b1f      	ldr	r3, [pc, #124]	; (8002fb0 <MX_ADC2_Init+0x98>)
 8002f32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f36:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002f38:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <MX_ADC2_Init+0x98>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002f3e:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <MX_ADC2_Init+0x98>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002f44:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <MX_ADC2_Init+0x98>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002f4a:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <MX_ADC2_Init+0x98>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f52:	4b17      	ldr	r3, [pc, #92]	; (8002fb0 <MX_ADC2_Init+0x98>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f58:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <MX_ADC2_Init+0x98>)
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <MX_ADC2_Init+0xa0>)
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f5e:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <MX_ADC2_Init+0x98>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002f64:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <MX_ADC2_Init+0x98>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <MX_ADC2_Init+0x98>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <MX_ADC2_Init+0x98>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002f78:	480d      	ldr	r0, [pc, #52]	; (8002fb0 <MX_ADC2_Init+0x98>)
 8002f7a:	f001 faef 	bl	800455c <HAL_ADC_Init>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002f84:	f000 fcaa 	bl	80038dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002f88:	230d      	movs	r3, #13
 8002f8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002f90:	2307      	movs	r3, #7
 8002f92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002f94:	463b      	mov	r3, r7
 8002f96:	4619      	mov	r1, r3
 8002f98:	4805      	ldr	r0, [pc, #20]	; (8002fb0 <MX_ADC2_Init+0x98>)
 8002f9a:	f001 fc8d 	bl	80048b8 <HAL_ADC_ConfigChannel>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002fa4:	f000 fc9a 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200005f0 	.word	0x200005f0
 8002fb4:	40012100 	.word	0x40012100
 8002fb8:	0f000001 	.word	0x0f000001

08002fbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b096      	sub	sp, #88	; 0x58
 8002fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	60da      	str	r2, [r3, #12]
 8002fe8:	611a      	str	r2, [r3, #16]
 8002fea:	615a      	str	r2, [r3, #20]
 8002fec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f006 ffe1 	bl	8009fbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ffa:	4b3e      	ldr	r3, [pc, #248]	; (80030f4 <MX_TIM1_Init+0x138>)
 8002ffc:	4a3e      	ldr	r2, [pc, #248]	; (80030f8 <MX_TIM1_Init+0x13c>)
 8002ffe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 360-1;
 8003000:	4b3c      	ldr	r3, [pc, #240]	; (80030f4 <MX_TIM1_Init+0x138>)
 8003002:	f240 1267 	movw	r2, #359	; 0x167
 8003006:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003008:	4b3a      	ldr	r3, [pc, #232]	; (80030f4 <MX_TIM1_Init+0x138>)
 800300a:	2200      	movs	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800300e:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <MX_TIM1_Init+0x138>)
 8003010:	f242 720f 	movw	r2, #9999	; 0x270f
 8003014:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <MX_TIM1_Init+0x138>)
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800301c:	4b35      	ldr	r3, [pc, #212]	; (80030f4 <MX_TIM1_Init+0x138>)
 800301e:	2200      	movs	r2, #0
 8003020:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003022:	4b34      	ldr	r3, [pc, #208]	; (80030f4 <MX_TIM1_Init+0x138>)
 8003024:	2280      	movs	r2, #128	; 0x80
 8003026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003028:	4832      	ldr	r0, [pc, #200]	; (80030f4 <MX_TIM1_Init+0x138>)
 800302a:	f003 ff91 	bl	8006f50 <HAL_TIM_Base_Init>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003034:	f000 fc52 	bl	80038dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800303c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800303e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003042:	4619      	mov	r1, r3
 8003044:	482b      	ldr	r0, [pc, #172]	; (80030f4 <MX_TIM1_Init+0x138>)
 8003046:	f004 ff6b 	bl	8007f20 <HAL_TIM_ConfigClockSource>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003050:	f000 fc44 	bl	80038dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003054:	4827      	ldr	r0, [pc, #156]	; (80030f4 <MX_TIM1_Init+0x138>)
 8003056:	f004 f833 	bl	80070c0 <HAL_TIM_PWM_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003060:	f000 fc3c 	bl	80038dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003064:	2300      	movs	r3, #0
 8003066:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003068:	2300      	movs	r3, #0
 800306a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800306c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003070:	4619      	mov	r1, r3
 8003072:	4820      	ldr	r0, [pc, #128]	; (80030f4 <MX_TIM1_Init+0x138>)
 8003074:	f005 fd7c 	bl	8008b70 <HAL_TIMEx_MasterConfigSynchronization>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800307e:	f000 fc2d 	bl	80038dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003082:	2360      	movs	r3, #96	; 0x60
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 750-1;
 8003086:	f240 23ed 	movw	r3, #749	; 0x2ed
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800308c:	2300      	movs	r3, #0
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003090:	2300      	movs	r3, #0
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003094:	2300      	movs	r3, #0
 8003096:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003098:	2300      	movs	r3, #0
 800309a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800309c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a0:	220c      	movs	r2, #12
 80030a2:	4619      	mov	r1, r3
 80030a4:	4813      	ldr	r0, [pc, #76]	; (80030f4 <MX_TIM1_Init+0x138>)
 80030a6:	f004 fe79 	bl	8007d9c <HAL_TIM_PWM_ConfigChannel>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80030b0:	f000 fc14 	bl	80038dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4807      	ldr	r0, [pc, #28]	; (80030f4 <MX_TIM1_Init+0x138>)
 80030d8:	f005 fdc6 	bl	8008c68 <HAL_TIMEx_ConfigBreakDeadTime>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80030e2:	f000 fbfb 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80030e6:	4803      	ldr	r0, [pc, #12]	; (80030f4 <MX_TIM1_Init+0x138>)
 80030e8:	f000 fea0 	bl	8003e2c <HAL_TIM_MspPostInit>

}
 80030ec:	bf00      	nop
 80030ee:	3758      	adds	r7, #88	; 0x58
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000638 	.word	0x20000638
 80030f8:	40010000 	.word	0x40010000

080030fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08e      	sub	sp, #56	; 0x38
 8003100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003110:	f107 0320 	add.w	r3, r7, #32
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800311a:	1d3b      	adds	r3, r7, #4
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
 8003128:	615a      	str	r2, [r3, #20]
 800312a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800312c:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <MX_TIM2_Init+0xe8>)
 800312e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003132:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003134:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <MX_TIM2_Init+0xe8>)
 8003136:	2259      	movs	r2, #89	; 0x59
 8003138:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800313a:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <MX_TIM2_Init+0xe8>)
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8003140:	4b28      	ldr	r3, [pc, #160]	; (80031e4 <MX_TIM2_Init+0xe8>)
 8003142:	f242 720f 	movw	r2, #9999	; 0x270f
 8003146:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003148:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <MX_TIM2_Init+0xe8>)
 800314a:	2200      	movs	r2, #0
 800314c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800314e:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <MX_TIM2_Init+0xe8>)
 8003150:	2280      	movs	r2, #128	; 0x80
 8003152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003154:	4823      	ldr	r0, [pc, #140]	; (80031e4 <MX_TIM2_Init+0xe8>)
 8003156:	f003 fefb 	bl	8006f50 <HAL_TIM_Base_Init>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003160:	f000 fbbc 	bl	80038dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800316a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800316e:	4619      	mov	r1, r3
 8003170:	481c      	ldr	r0, [pc, #112]	; (80031e4 <MX_TIM2_Init+0xe8>)
 8003172:	f004 fed5 	bl	8007f20 <HAL_TIM_ConfigClockSource>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800317c:	f000 fbae 	bl	80038dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003180:	4818      	ldr	r0, [pc, #96]	; (80031e4 <MX_TIM2_Init+0xe8>)
 8003182:	f003 ff9d 	bl	80070c0 <HAL_TIM_PWM_Init>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800318c:	f000 fba6 	bl	80038dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003190:	2300      	movs	r3, #0
 8003192:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003198:	f107 0320 	add.w	r3, r7, #32
 800319c:	4619      	mov	r1, r3
 800319e:	4811      	ldr	r0, [pc, #68]	; (80031e4 <MX_TIM2_Init+0xe8>)
 80031a0:	f005 fce6 	bl	8008b70 <HAL_TIMEx_MasterConfigSynchronization>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80031aa:	f000 fb97 	bl	80038dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031ae:	2360      	movs	r3, #96	; 0x60
 80031b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 80031b2:	f240 23ed 	movw	r3, #749	; 0x2ed
 80031b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031c0:	1d3b      	adds	r3, r7, #4
 80031c2:	2200      	movs	r2, #0
 80031c4:	4619      	mov	r1, r3
 80031c6:	4807      	ldr	r0, [pc, #28]	; (80031e4 <MX_TIM2_Init+0xe8>)
 80031c8:	f004 fde8 	bl	8007d9c <HAL_TIM_PWM_ConfigChannel>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80031d2:	f000 fb83 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80031d6:	4803      	ldr	r0, [pc, #12]	; (80031e4 <MX_TIM2_Init+0xe8>)
 80031d8:	f000 fe28 	bl	8003e2c <HAL_TIM_MspPostInit>

}
 80031dc:	bf00      	nop
 80031de:	3738      	adds	r7, #56	; 0x38
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000680 	.word	0x20000680

080031e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08e      	sub	sp, #56	; 0x38
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031fc:	f107 0320 	add.w	r3, r7, #32
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	611a      	str	r2, [r3, #16]
 8003214:	615a      	str	r2, [r3, #20]
 8003216:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003218:	4b32      	ldr	r3, [pc, #200]	; (80032e4 <MX_TIM3_Init+0xfc>)
 800321a:	4a33      	ldr	r2, [pc, #204]	; (80032e8 <MX_TIM3_Init+0x100>)
 800321c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 800321e:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <MX_TIM3_Init+0xfc>)
 8003220:	2201      	movs	r2, #1
 8003222:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8003224:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <MX_TIM3_Init+0xfc>)
 8003226:	2260      	movs	r2, #96	; 0x60
 8003228:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800322a:	4b2e      	ldr	r3, [pc, #184]	; (80032e4 <MX_TIM3_Init+0xfc>)
 800322c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003230:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003232:	4b2c      	ldr	r3, [pc, #176]	; (80032e4 <MX_TIM3_Init+0xfc>)
 8003234:	2200      	movs	r2, #0
 8003236:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <MX_TIM3_Init+0xfc>)
 800323a:	2200      	movs	r2, #0
 800323c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800323e:	4829      	ldr	r0, [pc, #164]	; (80032e4 <MX_TIM3_Init+0xfc>)
 8003240:	f003 fe86 	bl	8006f50 <HAL_TIM_Base_Init>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800324a:	f000 fb47 	bl	80038dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800324e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003258:	4619      	mov	r1, r3
 800325a:	4822      	ldr	r0, [pc, #136]	; (80032e4 <MX_TIM3_Init+0xfc>)
 800325c:	f004 fe60 	bl	8007f20 <HAL_TIM_ConfigClockSource>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003266:	f000 fb39 	bl	80038dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800326a:	481e      	ldr	r0, [pc, #120]	; (80032e4 <MX_TIM3_Init+0xfc>)
 800326c:	f003 ff28 	bl	80070c0 <HAL_TIM_PWM_Init>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003276:	f000 fb31 	bl	80038dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003282:	f107 0320 	add.w	r3, r7, #32
 8003286:	4619      	mov	r1, r3
 8003288:	4816      	ldr	r0, [pc, #88]	; (80032e4 <MX_TIM3_Init+0xfc>)
 800328a:	f005 fc71 	bl	8008b70 <HAL_TIMEx_MasterConfigSynchronization>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003294:	f000 fb22 	bl	80038dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003298:	2360      	movs	r3, #96	; 0x60
 800329a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	2200      	movs	r2, #0
 80032ac:	4619      	mov	r1, r3
 80032ae:	480d      	ldr	r0, [pc, #52]	; (80032e4 <MX_TIM3_Init+0xfc>)
 80032b0:	f004 fd74 	bl	8007d9c <HAL_TIM_PWM_ConfigChannel>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80032ba:	f000 fb0f 	bl	80038dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032be:	1d3b      	adds	r3, r7, #4
 80032c0:	2204      	movs	r2, #4
 80032c2:	4619      	mov	r1, r3
 80032c4:	4807      	ldr	r0, [pc, #28]	; (80032e4 <MX_TIM3_Init+0xfc>)
 80032c6:	f004 fd69 	bl	8007d9c <HAL_TIM_PWM_ConfigChannel>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80032d0:	f000 fb04 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80032d4:	4803      	ldr	r0, [pc, #12]	; (80032e4 <MX_TIM3_Init+0xfc>)
 80032d6:	f000 fda9 	bl	8003e2c <HAL_TIM_MspPostInit>

}
 80032da:	bf00      	nop
 80032dc:	3738      	adds	r7, #56	; 0x38
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	200006c8 	.word	0x200006c8
 80032e8:	40000400 	.word	0x40000400

080032ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08a      	sub	sp, #40	; 0x28
 80032f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032f2:	f107 0318 	add.w	r3, r7, #24
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	605a      	str	r2, [r3, #4]
 80032fc:	609a      	str	r2, [r3, #8]
 80032fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003300:	f107 0310 	add.w	r3, r7, #16
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800330a:	463b      	mov	r3, r7
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003316:	4b31      	ldr	r3, [pc, #196]	; (80033dc <MX_TIM4_Init+0xf0>)
 8003318:	4a31      	ldr	r2, [pc, #196]	; (80033e0 <MX_TIM4_Init+0xf4>)
 800331a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 800331c:	4b2f      	ldr	r3, [pc, #188]	; (80033dc <MX_TIM4_Init+0xf0>)
 800331e:	f240 321f 	movw	r2, #799	; 0x31f
 8003322:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003324:	4b2d      	ldr	r3, [pc, #180]	; (80033dc <MX_TIM4_Init+0xf0>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 800332a:	4b2c      	ldr	r3, [pc, #176]	; (80033dc <MX_TIM4_Init+0xf0>)
 800332c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003330:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003332:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <MX_TIM4_Init+0xf0>)
 8003334:	2200      	movs	r2, #0
 8003336:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003338:	4b28      	ldr	r3, [pc, #160]	; (80033dc <MX_TIM4_Init+0xf0>)
 800333a:	2280      	movs	r2, #128	; 0x80
 800333c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800333e:	4827      	ldr	r0, [pc, #156]	; (80033dc <MX_TIM4_Init+0xf0>)
 8003340:	f003 fe06 	bl	8006f50 <HAL_TIM_Base_Init>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800334a:	f000 fac7 	bl	80038dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800334e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003352:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003354:	f107 0318 	add.w	r3, r7, #24
 8003358:	4619      	mov	r1, r3
 800335a:	4820      	ldr	r0, [pc, #128]	; (80033dc <MX_TIM4_Init+0xf0>)
 800335c:	f004 fde0 	bl	8007f20 <HAL_TIM_ConfigClockSource>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003366:	f000 fab9 	bl	80038dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800336a:	481c      	ldr	r0, [pc, #112]	; (80033dc <MX_TIM4_Init+0xf0>)
 800336c:	f004 f83a 	bl	80073e4 <HAL_TIM_IC_Init>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8003376:	f000 fab1 	bl	80038dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003382:	f107 0310 	add.w	r3, r7, #16
 8003386:	4619      	mov	r1, r3
 8003388:	4814      	ldr	r0, [pc, #80]	; (80033dc <MX_TIM4_Init+0xf0>)
 800338a:	f005 fbf1 	bl	8008b70 <HAL_TIMEx_MasterConfigSynchronization>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8003394:	f000 faa2 	bl	80038dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003398:	230a      	movs	r3, #10
 800339a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800339c:	2301      	movs	r3, #1
 800339e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80033a8:	463b      	mov	r3, r7
 80033aa:	2208      	movs	r2, #8
 80033ac:	4619      	mov	r1, r3
 80033ae:	480b      	ldr	r0, [pc, #44]	; (80033dc <MX_TIM4_Init+0xf0>)
 80033b0:	f004 fc58 	bl	8007c64 <HAL_TIM_IC_ConfigChannel>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80033ba:	f000 fa8f 	bl	80038dc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80033be:	463b      	mov	r3, r7
 80033c0:	220c      	movs	r2, #12
 80033c2:	4619      	mov	r1, r3
 80033c4:	4805      	ldr	r0, [pc, #20]	; (80033dc <MX_TIM4_Init+0xf0>)
 80033c6:	f004 fc4d 	bl	8007c64 <HAL_TIM_IC_ConfigChannel>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 80033d0:	f000 fa84 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80033d4:	bf00      	nop
 80033d6:	3728      	adds	r7, #40	; 0x28
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000710 	.word	0x20000710
 80033e0:	40000800 	.word	0x40000800

080033e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ea:	f107 0308 	add.w	r3, r7, #8
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f8:	463b      	mov	r3, r7
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <MX_TIM5_Init+0x94>)
 8003402:	4a1e      	ldr	r2, [pc, #120]	; (800347c <MX_TIM5_Init+0x98>)
 8003404:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 8003406:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <MX_TIM5_Init+0x94>)
 8003408:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800340c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <MX_TIM5_Init+0x94>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003414:	4b18      	ldr	r3, [pc, #96]	; (8003478 <MX_TIM5_Init+0x94>)
 8003416:	f04f 32ff 	mov.w	r2, #4294967295
 800341a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800341c:	4b16      	ldr	r3, [pc, #88]	; (8003478 <MX_TIM5_Init+0x94>)
 800341e:	2200      	movs	r2, #0
 8003420:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003422:	4b15      	ldr	r3, [pc, #84]	; (8003478 <MX_TIM5_Init+0x94>)
 8003424:	2280      	movs	r2, #128	; 0x80
 8003426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003428:	4813      	ldr	r0, [pc, #76]	; (8003478 <MX_TIM5_Init+0x94>)
 800342a:	f003 fd91 	bl	8006f50 <HAL_TIM_Base_Init>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003434:	f000 fa52 	bl	80038dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800343c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800343e:	f107 0308 	add.w	r3, r7, #8
 8003442:	4619      	mov	r1, r3
 8003444:	480c      	ldr	r0, [pc, #48]	; (8003478 <MX_TIM5_Init+0x94>)
 8003446:	f004 fd6b 	bl	8007f20 <HAL_TIM_ConfigClockSource>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003450:	f000 fa44 	bl	80038dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003458:	2300      	movs	r3, #0
 800345a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800345c:	463b      	mov	r3, r7
 800345e:	4619      	mov	r1, r3
 8003460:	4805      	ldr	r0, [pc, #20]	; (8003478 <MX_TIM5_Init+0x94>)
 8003462:	f005 fb85 	bl	8008b70 <HAL_TIMEx_MasterConfigSynchronization>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800346c:	f000 fa36 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003470:	bf00      	nop
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20000758 	.word	0x20000758
 800347c:	40000c00 	.word	0x40000c00

08003480 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08c      	sub	sp, #48	; 0x30
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003486:	f107 030c 	add.w	r3, r7, #12
 800348a:	2224      	movs	r2, #36	; 0x24
 800348c:	2100      	movs	r1, #0
 800348e:	4618      	mov	r0, r3
 8003490:	f006 fd94 	bl	8009fbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003494:	1d3b      	adds	r3, r7, #4
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800349c:	4b22      	ldr	r3, [pc, #136]	; (8003528 <MX_TIM8_Init+0xa8>)
 800349e:	4a23      	ldr	r2, [pc, #140]	; (800352c <MX_TIM8_Init+0xac>)
 80034a0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80034a2:	4b21      	ldr	r3, [pc, #132]	; (8003528 <MX_TIM8_Init+0xa8>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a8:	4b1f      	ldr	r3, [pc, #124]	; (8003528 <MX_TIM8_Init+0xa8>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80034ae:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <MX_TIM8_Init+0xa8>)
 80034b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034b4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034b6:	4b1c      	ldr	r3, [pc, #112]	; (8003528 <MX_TIM8_Init+0xa8>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80034bc:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <MX_TIM8_Init+0xa8>)
 80034be:	2200      	movs	r2, #0
 80034c0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034c2:	4b19      	ldr	r3, [pc, #100]	; (8003528 <MX_TIM8_Init+0xa8>)
 80034c4:	2280      	movs	r2, #128	; 0x80
 80034c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80034c8:	2303      	movs	r3, #3
 80034ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034d0:	2301      	movs	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 12;
 80034d8:	230c      	movs	r3, #12
 80034da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80034dc:	2300      	movs	r3, #0
 80034de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80034e0:	2301      	movs	r3, #1
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80034e4:	2300      	movs	r3, #0
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 12;
 80034e8:	230c      	movs	r3, #12
 80034ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80034ec:	f107 030c 	add.w	r3, r7, #12
 80034f0:	4619      	mov	r1, r3
 80034f2:	480d      	ldr	r0, [pc, #52]	; (8003528 <MX_TIM8_Init+0xa8>)
 80034f4:	f004 f97a 	bl	80077ec <HAL_TIM_Encoder_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80034fe:	f000 f9ed 	bl	80038dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800350a:	1d3b      	adds	r3, r7, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4806      	ldr	r0, [pc, #24]	; (8003528 <MX_TIM8_Init+0xa8>)
 8003510:	f005 fb2e 	bl	8008b70 <HAL_TIMEx_MasterConfigSynchronization>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800351a:	f000 f9df 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800351e:	bf00      	nop
 8003520:	3730      	adds	r7, #48	; 0x30
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200007a0 	.word	0x200007a0
 800352c:	40010400 	.word	0x40010400

08003530 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <MX_UART5_Init+0x4c>)
 8003536:	4a12      	ldr	r2, [pc, #72]	; (8003580 <MX_UART5_Init+0x50>)
 8003538:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <MX_UART5_Init+0x4c>)
 800353c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8003540:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <MX_UART5_Init+0x4c>)
 8003544:	2200      	movs	r2, #0
 8003546:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <MX_UART5_Init+0x4c>)
 800354a:	2200      	movs	r2, #0
 800354c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <MX_UART5_Init+0x4c>)
 8003550:	2200      	movs	r2, #0
 8003552:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <MX_UART5_Init+0x4c>)
 8003556:	220c      	movs	r2, #12
 8003558:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <MX_UART5_Init+0x4c>)
 800355c:	2200      	movs	r2, #0
 800355e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <MX_UART5_Init+0x4c>)
 8003562:	2200      	movs	r2, #0
 8003564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003566:	4805      	ldr	r0, [pc, #20]	; (800357c <MX_UART5_Init+0x4c>)
 8003568:	f005 fbe4 	bl	8008d34 <HAL_UART_Init>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003572:	f000 f9b3 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000848 	.word	0x20000848
 8003580:	40005000 	.word	0x40005000

08003584 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <MX_USART1_UART_Init+0x4c>)
 800358a:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <MX_USART1_UART_Init+0x50>)
 800358c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800358e:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <MX_USART1_UART_Init+0x4c>)
 8003590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003594:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003596:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <MX_USART1_UART_Init+0x4c>)
 8003598:	2200      	movs	r2, #0
 800359a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <MX_USART1_UART_Init+0x4c>)
 800359e:	2200      	movs	r2, #0
 80035a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <MX_USART1_UART_Init+0x4c>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80035a8:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <MX_USART1_UART_Init+0x4c>)
 80035aa:	220c      	movs	r2, #12
 80035ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <MX_USART1_UART_Init+0x4c>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <MX_USART1_UART_Init+0x4c>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035ba:	4805      	ldr	r0, [pc, #20]	; (80035d0 <MX_USART1_UART_Init+0x4c>)
 80035bc:	f005 fbba 	bl	8008d34 <HAL_UART_Init>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80035c6:	f000 f989 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	2000088c 	.word	0x2000088c
 80035d4:	40011000 	.word	0x40011000

080035d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <MX_USART2_UART_Init+0x4c>)
 80035de:	4a12      	ldr	r2, [pc, #72]	; (8003628 <MX_USART2_UART_Init+0x50>)
 80035e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <MX_USART2_UART_Init+0x4c>)
 80035e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035ea:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <MX_USART2_UART_Init+0x4c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <MX_USART2_UART_Init+0x4c>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <MX_USART2_UART_Init+0x4c>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035fc:	4b09      	ldr	r3, [pc, #36]	; (8003624 <MX_USART2_UART_Init+0x4c>)
 80035fe:	220c      	movs	r2, #12
 8003600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003602:	4b08      	ldr	r3, [pc, #32]	; (8003624 <MX_USART2_UART_Init+0x4c>)
 8003604:	2200      	movs	r2, #0
 8003606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <MX_USART2_UART_Init+0x4c>)
 800360a:	2200      	movs	r2, #0
 800360c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800360e:	4805      	ldr	r0, [pc, #20]	; (8003624 <MX_USART2_UART_Init+0x4c>)
 8003610:	f005 fb90 	bl	8008d34 <HAL_UART_Init>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800361a:	f000 f95f 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	200008d0 	.word	0x200008d0
 8003628:	40004400 	.word	0x40004400

0800362c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003630:	4b11      	ldr	r3, [pc, #68]	; (8003678 <MX_USART3_UART_Init+0x4c>)
 8003632:	4a12      	ldr	r2, [pc, #72]	; (800367c <MX_USART3_UART_Init+0x50>)
 8003634:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003636:	4b10      	ldr	r3, [pc, #64]	; (8003678 <MX_USART3_UART_Init+0x4c>)
 8003638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800363c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800363e:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <MX_USART3_UART_Init+0x4c>)
 8003640:	2200      	movs	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <MX_USART3_UART_Init+0x4c>)
 8003646:	2200      	movs	r2, #0
 8003648:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800364a:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <MX_USART3_UART_Init+0x4c>)
 800364c:	2200      	movs	r2, #0
 800364e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003650:	4b09      	ldr	r3, [pc, #36]	; (8003678 <MX_USART3_UART_Init+0x4c>)
 8003652:	220c      	movs	r2, #12
 8003654:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003656:	4b08      	ldr	r3, [pc, #32]	; (8003678 <MX_USART3_UART_Init+0x4c>)
 8003658:	2200      	movs	r2, #0
 800365a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <MX_USART3_UART_Init+0x4c>)
 800365e:	2200      	movs	r2, #0
 8003660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003662:	4805      	ldr	r0, [pc, #20]	; (8003678 <MX_USART3_UART_Init+0x4c>)
 8003664:	f005 fb66 	bl	8008d34 <HAL_UART_Init>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800366e:	f000 f935 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000914 	.word	0x20000914
 800367c:	40004800 	.word	0x40004800

08003680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <MX_DMA_Init+0x3c>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	4a0b      	ldr	r2, [pc, #44]	; (80036bc <MX_DMA_Init+0x3c>)
 8003690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003694:	6313      	str	r3, [r2, #48]	; 0x30
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <MX_DMA_Init+0x3c>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369e:	607b      	str	r3, [r7, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80036a2:	2200      	movs	r2, #0
 80036a4:	2100      	movs	r1, #0
 80036a6:	202f      	movs	r0, #47	; 0x2f
 80036a8:	f001 fdcd 	bl	8005246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80036ac:	202f      	movs	r0, #47	; 0x2f
 80036ae:	f001 fde6 	bl	800527e <HAL_NVIC_EnableIRQ>

}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800

080036c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c6:	f107 0314 	add.w	r3, r7, #20
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	605a      	str	r2, [r3, #4]
 80036d0:	609a      	str	r2, [r3, #8]
 80036d2:	60da      	str	r2, [r3, #12]
 80036d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	4b64      	ldr	r3, [pc, #400]	; (800386c <MX_GPIO_Init+0x1ac>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	4a63      	ldr	r2, [pc, #396]	; (800386c <MX_GPIO_Init+0x1ac>)
 80036e0:	f043 0304 	orr.w	r3, r3, #4
 80036e4:	6313      	str	r3, [r2, #48]	; 0x30
 80036e6:	4b61      	ldr	r3, [pc, #388]	; (800386c <MX_GPIO_Init+0x1ac>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	4b5d      	ldr	r3, [pc, #372]	; (800386c <MX_GPIO_Init+0x1ac>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	4a5c      	ldr	r2, [pc, #368]	; (800386c <MX_GPIO_Init+0x1ac>)
 80036fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003700:	6313      	str	r3, [r2, #48]	; 0x30
 8003702:	4b5a      	ldr	r3, [pc, #360]	; (800386c <MX_GPIO_Init+0x1ac>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	4b56      	ldr	r3, [pc, #344]	; (800386c <MX_GPIO_Init+0x1ac>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	4a55      	ldr	r2, [pc, #340]	; (800386c <MX_GPIO_Init+0x1ac>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6313      	str	r3, [r2, #48]	; 0x30
 800371e:	4b53      	ldr	r3, [pc, #332]	; (800386c <MX_GPIO_Init+0x1ac>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	4b4f      	ldr	r3, [pc, #316]	; (800386c <MX_GPIO_Init+0x1ac>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	4a4e      	ldr	r2, [pc, #312]	; (800386c <MX_GPIO_Init+0x1ac>)
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	6313      	str	r3, [r2, #48]	; 0x30
 800373a:	4b4c      	ldr	r3, [pc, #304]	; (800386c <MX_GPIO_Init+0x1ac>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	4b48      	ldr	r3, [pc, #288]	; (800386c <MX_GPIO_Init+0x1ac>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	4a47      	ldr	r2, [pc, #284]	; (800386c <MX_GPIO_Init+0x1ac>)
 8003750:	f043 0308 	orr.w	r3, r3, #8
 8003754:	6313      	str	r3, [r2, #48]	; 0x30
 8003756:	4b45      	ldr	r3, [pc, #276]	; (800386c <MX_GPIO_Init+0x1ac>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 8003762:	2200      	movs	r2, #0
 8003764:	2102      	movs	r1, #2
 8003766:	4842      	ldr	r0, [pc, #264]	; (8003870 <MX_GPIO_Init+0x1b0>)
 8003768:	f002 fd6e 	bl	8006248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 800376c:	2200      	movs	r2, #0
 800376e:	2122      	movs	r1, #34	; 0x22
 8003770:	4840      	ldr	r0, [pc, #256]	; (8003874 <MX_GPIO_Init+0x1b4>)
 8003772:	f002 fd69 	bl	8006248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8003776:	2200      	movs	r2, #0
 8003778:	f24e 0142 	movw	r1, #57410	; 0xe042
 800377c:	483e      	ldr	r0, [pc, #248]	; (8003878 <MX_GPIO_Init+0x1b8>)
 800377e:	f002 fd63 	bl	8006248 <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : On_Board_Button_Pin */
  GPIO_InitStruct.Pin = On_Board_Button_Pin;
 8003782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003788:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800378c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(On_Board_Button_GPIO_Port, &GPIO_InitStruct);
 8003792:	f107 0314 	add.w	r3, r7, #20
 8003796:	4619      	mov	r1, r3
 8003798:	4835      	ldr	r0, [pc, #212]	; (8003870 <MX_GPIO_Init+0x1b0>)
 800379a:	f002 fba9 	bl	8005ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 800379e:	2302      	movs	r3, #2
 80037a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037a2:	2301      	movs	r3, #1
 80037a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037aa:	2300      	movs	r3, #0
 80037ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 80037ae:	f107 0314 	add.w	r3, r7, #20
 80037b2:	4619      	mov	r1, r3
 80037b4:	482e      	ldr	r0, [pc, #184]	; (8003870 <MX_GPIO_Init+0x1b0>)
 80037b6:	f002 fb9b 	bl	8005ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 80037ba:	2322      	movs	r3, #34	; 0x22
 80037bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037be:	2301      	movs	r3, #1
 80037c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c6:	2300      	movs	r3, #0
 80037c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ca:	f107 0314 	add.w	r3, r7, #20
 80037ce:	4619      	mov	r1, r3
 80037d0:	4828      	ldr	r0, [pc, #160]	; (8003874 <MX_GPIO_Init+0x1b4>)
 80037d2:	f002 fb8d 	bl	8005ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 80037d6:	f24e 0342 	movw	r3, #57410	; 0xe042
 80037da:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037dc:	2301      	movs	r3, #1
 80037de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e4:	2300      	movs	r3, #0
 80037e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e8:	f107 0314 	add.w	r3, r7, #20
 80037ec:	4619      	mov	r1, r3
 80037ee:	4822      	ldr	r0, [pc, #136]	; (8003878 <MX_GPIO_Init+0x1b8>)
 80037f0:	f002 fb7e 	bl	8005ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B2_Pin|Motor_Feedback_Pin;
 80037f4:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
 80037f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003802:	f107 0314 	add.w	r3, r7, #20
 8003806:	4619      	mov	r1, r3
 8003808:	481b      	ldr	r0, [pc, #108]	; (8003878 <MX_GPIO_Init+0x1b8>)
 800380a:	f002 fb71 	bl	8005ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 800380e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003814:	2300      	movs	r3, #0
 8003816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 800381c:	f107 0314 	add.w	r3, r7, #20
 8003820:	4619      	mov	r1, r3
 8003822:	4814      	ldr	r0, [pc, #80]	; (8003874 <MX_GPIO_Init+0x1b4>)
 8003824:	f002 fb64 	bl	8005ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003828:	2310      	movs	r3, #16
 800382a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800382c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003836:	f107 0314 	add.w	r3, r7, #20
 800383a:	4619      	mov	r1, r3
 800383c:	480e      	ldr	r0, [pc, #56]	; (8003878 <MX_GPIO_Init+0x1b8>)
 800383e:	f002 fb57 	bl	8005ef0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003842:	2200      	movs	r2, #0
 8003844:	2100      	movs	r1, #0
 8003846:	200a      	movs	r0, #10
 8003848:	f001 fcfd 	bl	8005246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800384c:	200a      	movs	r0, #10
 800384e:	f001 fd16 	bl	800527e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003852:	2200      	movs	r2, #0
 8003854:	2100      	movs	r1, #0
 8003856:	2028      	movs	r0, #40	; 0x28
 8003858:	f001 fcf5 	bl	8005246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800385c:	2028      	movs	r0, #40	; 0x28
 800385e:	f001 fd0e 	bl	800527e <HAL_NVIC_EnableIRQ>

}
 8003862:	bf00      	nop
 8003864:	3728      	adds	r7, #40	; 0x28
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800
 8003870:	40020800 	.word	0x40020800
 8003874:	40020000 	.word	0x40020000
 8003878:	40020400 	.word	0x40020400

0800387c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	80fb      	strh	r3, [r7, #6]
	//ha meg lett nyomva a nucleon a kék gomb
	if(GPIO_Pin == On_Board_Button_Pin)
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388c:	d105      	bne.n	800389a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		bFlag[0]=1;
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <HAL_GPIO_EXTI_Callback+0x38>)
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
		NVIC_DisableIRQ(On_Board_Button_EXTI_IRQn);
 8003894:	2028      	movs	r0, #40	; 0x28
 8003896:	f7ff f985 	bl	8002ba4 <__NVIC_DisableIRQ>
	}
	if(GPIO_Pin == B1_Pin)
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	2b10      	cmp	r3, #16
 800389e:	d105      	bne.n	80038ac <HAL_GPIO_EXTI_Callback+0x30>
	{
		bFlag[1]=1;
 80038a0:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <HAL_GPIO_EXTI_Callback+0x38>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	705a      	strb	r2, [r3, #1]
		NVIC_DisableIRQ(B1_EXTI_IRQn);
 80038a6:	200a      	movs	r0, #10
 80038a8:	f7ff f97c 	bl	8002ba4 <__NVIC_DisableIRQ>
	}
}
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20000250 	.word	0x20000250

080038b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)Uart_Receive_From_PC_ISR(huart);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a05      	ldr	r2, [pc, #20]	; (80038d8 <HAL_UART_RxCpltCallback+0x20>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d102      	bne.n	80038ce <HAL_UART_RxCpltCallback+0x16>
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fd fd39 	bl	8001340 <Uart_Receive_From_PC_ISR>
	//else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(huart);
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	2000088c 	.word	0x2000088c

080038dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80038e0:	b672      	cpsid	i
}
 80038e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038e4:	e7fe      	b.n	80038e4 <Error_Handler+0x8>
	...

080038e8 <Remote_Control_Init>:
#include <math.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
	tEdge[0] = 1000;
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <Remote_Control_Init+0x34>)
 80038f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038f8:	601a      	str	r2, [r3, #0]
	tEdge[1] = 500;
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <Remote_Control_Init+0x34>)
 80038fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003900:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 8003902:	4b06      	ldr	r3, [pc, #24]	; (800391c <Remote_Control_Init+0x34>)
 8003904:	2200      	movs	r2, #0
 8003906:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 8003908:	2303      	movs	r3, #3
 800390a:	4a04      	ldr	r2, [pc, #16]	; (800391c <Remote_Control_Init+0x34>)
 800390c:	6839      	ldr	r1, [r7, #0]
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f003 fdc2 	bl	8007498 <HAL_TIM_IC_Start_DMA>
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	2000095c 	.word	0x2000095c

08003920 <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
	static int32_t dt1=85;
	static int32_t dt2=85;
	static uint32_t tLow=85;
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 800392e:	4b56      	ldr	r3, [pc, #344]	; (8003a88 <Remote_Control_Task+0x168>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	f0c0 80a2 	bcc.w	8003a7e <Remote_Control_Task+0x15e>
	remote_control_tick = tick + period;
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	4413      	add	r3, r2
 8003940:	4a51      	ldr	r2, [pc, #324]	; (8003a88 <Remote_Control_Task+0x168>)
 8003942:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 8003944:	201e      	movs	r0, #30
 8003946:	f001 fca8 	bl	800529a <HAL_NVIC_DisableIRQ>
	dt0=abs(tEdge[1]-tEdge[0]);
 800394a:	4b50      	ldr	r3, [pc, #320]	; (8003a8c <Remote_Control_Task+0x16c>)
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	4b4f      	ldr	r3, [pc, #316]	; (8003a8c <Remote_Control_Task+0x16c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	bfb8      	it	lt
 8003958:	425b      	neglt	r3, r3
 800395a:	4a4d      	ldr	r2, [pc, #308]	; (8003a90 <Remote_Control_Task+0x170>)
 800395c:	6013      	str	r3, [r2, #0]
	dt1=abs(tEdge[2]-tEdge[1]);
 800395e:	4b4b      	ldr	r3, [pc, #300]	; (8003a8c <Remote_Control_Task+0x16c>)
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	4b4a      	ldr	r3, [pc, #296]	; (8003a8c <Remote_Control_Task+0x16c>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	bfb8      	it	lt
 800396c:	425b      	neglt	r3, r3
 800396e:	4a49      	ldr	r2, [pc, #292]	; (8003a94 <Remote_Control_Task+0x174>)
 8003970:	6013      	str	r3, [r2, #0]
	dt2=abs(tEdge[0]-tEdge[2]);
 8003972:	4b46      	ldr	r3, [pc, #280]	; (8003a8c <Remote_Control_Task+0x16c>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b45      	ldr	r3, [pc, #276]	; (8003a8c <Remote_Control_Task+0x16c>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	bfb8      	it	lt
 8003980:	425b      	neglt	r3, r3
 8003982:	4a45      	ldr	r2, [pc, #276]	; (8003a98 <Remote_Control_Task+0x178>)
 8003984:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 8003986:	201e      	movs	r0, #30
 8003988:	f001 fc79 	bl	800527e <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 800398c:	4b40      	ldr	r3, [pc, #256]	; (8003a90 <Remote_Control_Task+0x170>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f241 3288 	movw	r2, #5000	; 0x1388
 8003994:	4293      	cmp	r3, r2
 8003996:	dd06      	ble.n	80039a6 <Remote_Control_Task+0x86>
 8003998:	4b3d      	ldr	r3, [pc, #244]	; (8003a90 <Remote_Control_Task+0x170>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80039a0:	33ff      	adds	r3, #255	; 0xff
 80039a2:	4a3b      	ldr	r2, [pc, #236]	; (8003a90 <Remote_Control_Task+0x170>)
 80039a4:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 80039a6:	4b3b      	ldr	r3, [pc, #236]	; (8003a94 <Remote_Control_Task+0x174>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	dd06      	ble.n	80039c0 <Remote_Control_Task+0xa0>
 80039b2:	4b38      	ldr	r3, [pc, #224]	; (8003a94 <Remote_Control_Task+0x174>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80039ba:	33ff      	adds	r3, #255	; 0xff
 80039bc:	4a35      	ldr	r2, [pc, #212]	; (8003a94 <Remote_Control_Task+0x174>)
 80039be:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 80039c0:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <Remote_Control_Task+0x178>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c8:	4293      	cmp	r3, r2
 80039ca:	dd06      	ble.n	80039da <Remote_Control_Task+0xba>
 80039cc:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <Remote_Control_Task+0x178>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80039d4:	33ff      	adds	r3, #255	; 0xff
 80039d6:	4a30      	ldr	r2, [pc, #192]	; (8003a98 <Remote_Control_Task+0x178>)
 80039d8:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 80039da:	4b2d      	ldr	r3, [pc, #180]	; (8003a90 <Remote_Control_Task+0x170>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4b2d      	ldr	r3, [pc, #180]	; (8003a94 <Remote_Control_Task+0x174>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	da0b      	bge.n	80039fe <Remote_Control_Task+0xde>
 80039e6:	4b2a      	ldr	r3, [pc, #168]	; (8003a90 <Remote_Control_Task+0x170>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <Remote_Control_Task+0x178>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	da05      	bge.n	80039fe <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 80039f2:	4b27      	ldr	r3, [pc, #156]	; (8003a90 <Remote_Control_Task+0x170>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <Remote_Control_Task+0x17c>)
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e016      	b.n	8003a2c <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 80039fe:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <Remote_Control_Task+0x174>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	4b23      	ldr	r3, [pc, #140]	; (8003a90 <Remote_Control_Task+0x170>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	da0b      	bge.n	8003a22 <Remote_Control_Task+0x102>
 8003a0a:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <Remote_Control_Task+0x174>)
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <Remote_Control_Task+0x178>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	da05      	bge.n	8003a22 <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 8003a16:	4b1f      	ldr	r3, [pc, #124]	; (8003a94 <Remote_Control_Task+0x174>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	4b1f      	ldr	r3, [pc, #124]	; (8003a9c <Remote_Control_Task+0x17c>)
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e004      	b.n	8003a2c <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 8003a22:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <Remote_Control_Task+0x178>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <Remote_Control_Task+0x17c>)
 8003a2a:	601a      	str	r2, [r3, #0]
	sprintf(string,"%d\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 10);
	remote_control_tick = tick + 1000;
#endif

	if((tLow>70 && tLow<100) || tLow==1000)
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <Remote_Control_Task+0x17c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b46      	cmp	r3, #70	; 0x46
 8003a32:	d903      	bls.n	8003a3c <Remote_Control_Task+0x11c>
 8003a34:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <Remote_Control_Task+0x17c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b63      	cmp	r3, #99	; 0x63
 8003a3a:	d904      	bls.n	8003a46 <Remote_Control_Task+0x126>
 8003a3c:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <Remote_Control_Task+0x17c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a44:	d109      	bne.n	8003a5a <Remote_Control_Task+0x13a>
	{
		LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
 8003a46:	2200      	movs	r2, #0
 8003a48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a4c:	4814      	ldr	r0, [pc, #80]	; (8003aa0 <Remote_Control_Task+0x180>)
 8003a4e:	f002 fbfb 	bl	8006248 <HAL_GPIO_WritePin>
		motorEnRemote=0;//állítsuk le a motort ha meghuzzuk a ravaszt
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <Remote_Control_Task+0x184>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	e012      	b.n	8003a80 <Remote_Control_Task+0x160>
	}
	else
	{
		LED_R(0);
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a60:	480f      	ldr	r0, [pc, #60]	; (8003aa0 <Remote_Control_Task+0x180>)
 8003a62:	f002 fbf1 	bl	8006248 <HAL_GPIO_WritePin>
		if(tLow <= 70) motorEnRemote=1;
 8003a66:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <Remote_Control_Task+0x17c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b46      	cmp	r3, #70	; 0x46
 8003a6c:	d803      	bhi.n	8003a76 <Remote_Control_Task+0x156>
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <Remote_Control_Task+0x184>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e004      	b.n	8003a80 <Remote_Control_Task+0x160>
		else motorEnRemote=2;
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <Remote_Control_Task+0x184>)
 8003a78:	2202      	movs	r2, #2
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	e000      	b.n	8003a80 <Remote_Control_Task+0x160>
	if(remote_control_tick>tick) return;
 8003a7e:	bf00      	nop

	}
}
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000968 	.word	0x20000968
 8003a8c:	2000095c 	.word	0x2000095c
 8003a90:	20000044 	.word	0x20000044
 8003a94:	20000048 	.word	0x20000048
 8003a98:	2000004c 	.word	0x2000004c
 8003a9c:	20000050 	.word	0x20000050
 8003aa0:	40020400 	.word	0x40020400
 8003aa4:	20000958 	.word	0x20000958

08003aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <HAL_MspInit+0x4c>)
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	4a0f      	ldr	r2, [pc, #60]	; (8003af4 <HAL_MspInit+0x4c>)
 8003ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003abc:	6453      	str	r3, [r2, #68]	; 0x44
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <HAL_MspInit+0x4c>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	603b      	str	r3, [r7, #0]
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <HAL_MspInit+0x4c>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	4a08      	ldr	r2, [pc, #32]	; (8003af4 <HAL_MspInit+0x4c>)
 8003ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_MspInit+0x4c>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003ae6:	2007      	movs	r0, #7
 8003ae8:	f001 fba2 	bl	8005230 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40023800 	.word	0x40023800

08003af8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08c      	sub	sp, #48	; 0x30
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b00:	f107 031c 	add.w	r3, r7, #28
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a2e      	ldr	r2, [pc, #184]	; (8003bd0 <HAL_ADC_MspInit+0xd8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d128      	bne.n	8003b6c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	4b2d      	ldr	r3, [pc, #180]	; (8003bd4 <HAL_ADC_MspInit+0xdc>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	4a2c      	ldr	r2, [pc, #176]	; (8003bd4 <HAL_ADC_MspInit+0xdc>)
 8003b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b28:	6453      	str	r3, [r2, #68]	; 0x44
 8003b2a:	4b2a      	ldr	r3, [pc, #168]	; (8003bd4 <HAL_ADC_MspInit+0xdc>)
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	4b26      	ldr	r3, [pc, #152]	; (8003bd4 <HAL_ADC_MspInit+0xdc>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	4a25      	ldr	r2, [pc, #148]	; (8003bd4 <HAL_ADC_MspInit+0xdc>)
 8003b40:	f043 0302 	orr.w	r3, r3, #2
 8003b44:	6313      	str	r3, [r2, #48]	; 0x30
 8003b46:	4b23      	ldr	r3, [pc, #140]	; (8003bd4 <HAL_ADC_MspInit+0xdc>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 8003b52:	2301      	movs	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b56:	2303      	movs	r3, #3
 8003b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 8003b5e:	f107 031c 	add.w	r3, r7, #28
 8003b62:	4619      	mov	r1, r3
 8003b64:	481c      	ldr	r0, [pc, #112]	; (8003bd8 <HAL_ADC_MspInit+0xe0>)
 8003b66:	f002 f9c3 	bl	8005ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003b6a:	e02c      	b.n	8003bc6 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1a      	ldr	r2, [pc, #104]	; (8003bdc <HAL_ADC_MspInit+0xe4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d127      	bne.n	8003bc6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <HAL_ADC_MspInit+0xdc>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <HAL_ADC_MspInit+0xdc>)
 8003b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b84:	6453      	str	r3, [r2, #68]	; 0x44
 8003b86:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <HAL_ADC_MspInit+0xdc>)
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <HAL_ADC_MspInit+0xdc>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	4a0e      	ldr	r2, [pc, #56]	; (8003bd4 <HAL_ADC_MspInit+0xdc>)
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <HAL_ADC_MspInit+0xdc>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Bat_Pin;
 8003bae:	2308      	movs	r3, #8
 8003bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_Bat_GPIO_Port, &GPIO_InitStruct);
 8003bba:	f107 031c 	add.w	r3, r7, #28
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4807      	ldr	r0, [pc, #28]	; (8003be0 <HAL_ADC_MspInit+0xe8>)
 8003bc2:	f002 f995 	bl	8005ef0 <HAL_GPIO_Init>
}
 8003bc6:	bf00      	nop
 8003bc8:	3730      	adds	r7, #48	; 0x30
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40012000 	.word	0x40012000
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40020400 	.word	0x40020400
 8003bdc:	40012100 	.word	0x40012100
 8003be0:	40020800 	.word	0x40020800

08003be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08e      	sub	sp, #56	; 0x38
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a5e      	ldr	r2, [pc, #376]	; (8003d7c <HAL_TIM_Base_MspInit+0x198>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10e      	bne.n	8003c24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	623b      	str	r3, [r7, #32]
 8003c0a:	4b5d      	ldr	r3, [pc, #372]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	4a5c      	ldr	r2, [pc, #368]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	6453      	str	r3, [r2, #68]	; 0x44
 8003c16:	4b5a      	ldr	r3, [pc, #360]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	623b      	str	r3, [r7, #32]
 8003c20:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003c22:	e0a7      	b.n	8003d74 <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2c:	d116      	bne.n	8003c5c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	4b53      	ldr	r3, [pc, #332]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	4a52      	ldr	r2, [pc, #328]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3e:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	201c      	movs	r0, #28
 8003c50:	f001 faf9 	bl	8005246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c54:	201c      	movs	r0, #28
 8003c56:	f001 fb12 	bl	800527e <HAL_NVIC_EnableIRQ>
}
 8003c5a:	e08b      	b.n	8003d74 <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM3)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a48      	ldr	r2, [pc, #288]	; (8003d84 <HAL_TIM_Base_MspInit+0x1a0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	4b45      	ldr	r3, [pc, #276]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	4a44      	ldr	r2, [pc, #272]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003c70:	f043 0302 	orr.w	r3, r3, #2
 8003c74:	6413      	str	r3, [r2, #64]	; 0x40
 8003c76:	4b42      	ldr	r3, [pc, #264]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	61bb      	str	r3, [r7, #24]
 8003c80:	69bb      	ldr	r3, [r7, #24]
}
 8003c82:	e077      	b.n	8003d74 <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM4)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a3f      	ldr	r2, [pc, #252]	; (8003d88 <HAL_TIM_Base_MspInit+0x1a4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d15f      	bne.n	8003d4e <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	4a3a      	ldr	r2, [pc, #232]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003c98:	f043 0304 	orr.w	r3, r3, #4
 8003c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9e:	4b38      	ldr	r3, [pc, #224]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	4b34      	ldr	r3, [pc, #208]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	4a33      	ldr	r2, [pc, #204]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003cb4:	f043 0302 	orr.w	r3, r3, #2
 8003cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cba:	4b31      	ldr	r3, [pc, #196]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 8003cc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	482a      	ldr	r0, [pc, #168]	; (8003d8c <HAL_TIM_Base_MspInit+0x1a8>)
 8003ce4:	f002 f904 	bl	8005ef0 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8003ce8:	4b29      	ldr	r3, [pc, #164]	; (8003d90 <HAL_TIM_Base_MspInit+0x1ac>)
 8003cea:	4a2a      	ldr	r2, [pc, #168]	; (8003d94 <HAL_TIM_Base_MspInit+0x1b0>)
 8003cec:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8003cee:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <HAL_TIM_Base_MspInit+0x1ac>)
 8003cf0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003cf4:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cf6:	4b26      	ldr	r3, [pc, #152]	; (8003d90 <HAL_TIM_Base_MspInit+0x1ac>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cfc:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <HAL_TIM_Base_MspInit+0x1ac>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003d02:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <HAL_TIM_Base_MspInit+0x1ac>)
 8003d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d08:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d0a:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <HAL_TIM_Base_MspInit+0x1ac>)
 8003d0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d10:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d12:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <HAL_TIM_Base_MspInit+0x1ac>)
 8003d14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d18:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8003d1a:	4b1d      	ldr	r3, [pc, #116]	; (8003d90 <HAL_TIM_Base_MspInit+0x1ac>)
 8003d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d20:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003d22:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <HAL_TIM_Base_MspInit+0x1ac>)
 8003d24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d28:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d2a:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <HAL_TIM_Base_MspInit+0x1ac>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003d30:	4817      	ldr	r0, [pc, #92]	; (8003d90 <HAL_TIM_Base_MspInit+0x1ac>)
 8003d32:	f001 facd 	bl	80052d0 <HAL_DMA_Init>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_TIM_Base_MspInit+0x15c>
      Error_Handler();
 8003d3c:	f7ff fdce 	bl	80038dc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <HAL_TIM_Base_MspInit+0x1ac>)
 8003d44:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d46:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <HAL_TIM_Base_MspInit+0x1ac>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003d4c:	e012      	b.n	8003d74 <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM5)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a11      	ldr	r2, [pc, #68]	; (8003d98 <HAL_TIM_Base_MspInit+0x1b4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d10d      	bne.n	8003d74 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	4a07      	ldr	r2, [pc, #28]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003d62:	f043 0308 	orr.w	r3, r3, #8
 8003d66:	6413      	str	r3, [r2, #64]	; 0x40
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_TIM_Base_MspInit+0x19c>)
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
}
 8003d74:	bf00      	nop
 8003d76:	3738      	adds	r7, #56	; 0x38
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40000400 	.word	0x40000400
 8003d88:	40000800 	.word	0x40000800
 8003d8c:	40020400 	.word	0x40020400
 8003d90:	200007e8 	.word	0x200007e8
 8003d94:	400260b8 	.word	0x400260b8
 8003d98:	40000c00 	.word	0x40000c00

08003d9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	; 0x28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da4:	f107 0314 	add.w	r3, r7, #20
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	60da      	str	r2, [r3, #12]
 8003db2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x84>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d12b      	bne.n	8003e16 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <HAL_TIM_Encoder_MspInit+0x88>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	4a17      	ldr	r2, [pc, #92]	; (8003e24 <HAL_TIM_Encoder_MspInit+0x88>)
 8003dc8:	f043 0302 	orr.w	r3, r3, #2
 8003dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <HAL_TIM_Encoder_MspInit+0x88>)
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <HAL_TIM_Encoder_MspInit+0x88>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	4a10      	ldr	r2, [pc, #64]	; (8003e24 <HAL_TIM_Encoder_MspInit+0x88>)
 8003de4:	f043 0304 	orr.w	r3, r3, #4
 8003de8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dea:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <HAL_TIM_Encoder_MspInit+0x88>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003df6:	23c0      	movs	r3, #192	; 0xc0
 8003df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e02:	2300      	movs	r3, #0
 8003e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003e06:	2303      	movs	r3, #3
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e0a:	f107 0314 	add.w	r3, r7, #20
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4805      	ldr	r0, [pc, #20]	; (8003e28 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003e12:	f002 f86d 	bl	8005ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003e16:	bf00      	nop
 8003e18:	3728      	adds	r7, #40	; 0x28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40010400 	.word	0x40010400
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40020800 	.word	0x40020800

08003e2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a37      	ldr	r2, [pc, #220]	; (8003f28 <HAL_TIM_MspPostInit+0xfc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d11f      	bne.n	8003e8e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	4b36      	ldr	r3, [pc, #216]	; (8003f2c <HAL_TIM_MspPostInit+0x100>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	4a35      	ldr	r2, [pc, #212]	; (8003f2c <HAL_TIM_MspPostInit+0x100>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5e:	4b33      	ldr	r3, [pc, #204]	; (8003f2c <HAL_TIM_MspPostInit+0x100>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 8003e6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e70:	2302      	movs	r3, #2
 8003e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 8003e80:	f107 0314 	add.w	r3, r7, #20
 8003e84:	4619      	mov	r1, r3
 8003e86:	482a      	ldr	r0, [pc, #168]	; (8003f30 <HAL_TIM_MspPostInit+0x104>)
 8003e88:	f002 f832 	bl	8005ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003e8c:	e047      	b.n	8003f1e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e96:	d11f      	bne.n	8003ed8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	4b23      	ldr	r3, [pc, #140]	; (8003f2c <HAL_TIM_MspPostInit+0x100>)
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	4a22      	ldr	r2, [pc, #136]	; (8003f2c <HAL_TIM_MspPostInit+0x100>)
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea8:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <HAL_TIM_MspPostInit+0x100>)
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 8003eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003eca:	f107 0314 	add.w	r3, r7, #20
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4817      	ldr	r0, [pc, #92]	; (8003f30 <HAL_TIM_MspPostInit+0x104>)
 8003ed2:	f002 f80d 	bl	8005ef0 <HAL_GPIO_Init>
}
 8003ed6:	e022      	b.n	8003f1e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a15      	ldr	r2, [pc, #84]	; (8003f34 <HAL_TIM_MspPostInit+0x108>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d11d      	bne.n	8003f1e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <HAL_TIM_MspPostInit+0x100>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	4a10      	ldr	r2, [pc, #64]	; (8003f2c <HAL_TIM_MspPostInit+0x100>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <HAL_TIM_MspPostInit+0x100>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	60bb      	str	r3, [r7, #8]
 8003efc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 8003efe:	23c0      	movs	r3, #192	; 0xc0
 8003f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f02:	2302      	movs	r3, #2
 8003f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f12:	f107 0314 	add.w	r3, r7, #20
 8003f16:	4619      	mov	r1, r3
 8003f18:	4805      	ldr	r0, [pc, #20]	; (8003f30 <HAL_TIM_MspPostInit+0x104>)
 8003f1a:	f001 ffe9 	bl	8005ef0 <HAL_GPIO_Init>
}
 8003f1e:	bf00      	nop
 8003f20:	3728      	adds	r7, #40	; 0x28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40020000 	.word	0x40020000
 8003f34:	40000400 	.word	0x40000400

08003f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b090      	sub	sp, #64	; 0x40
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a7c      	ldr	r2, [pc, #496]	; (8004148 <HAL_UART_MspInit+0x210>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d153      	bne.n	8004002 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f5e:	4b7b      	ldr	r3, [pc, #492]	; (800414c <HAL_UART_MspInit+0x214>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	4a7a      	ldr	r2, [pc, #488]	; (800414c <HAL_UART_MspInit+0x214>)
 8003f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f68:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6a:	4b78      	ldr	r3, [pc, #480]	; (800414c <HAL_UART_MspInit+0x214>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7a:	4b74      	ldr	r3, [pc, #464]	; (800414c <HAL_UART_MspInit+0x214>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	4a73      	ldr	r2, [pc, #460]	; (800414c <HAL_UART_MspInit+0x214>)
 8003f80:	f043 0304 	orr.w	r3, r3, #4
 8003f84:	6313      	str	r3, [r2, #48]	; 0x30
 8003f86:	4b71      	ldr	r3, [pc, #452]	; (800414c <HAL_UART_MspInit+0x214>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f92:	2300      	movs	r3, #0
 8003f94:	623b      	str	r3, [r7, #32]
 8003f96:	4b6d      	ldr	r3, [pc, #436]	; (800414c <HAL_UART_MspInit+0x214>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	4a6c      	ldr	r2, [pc, #432]	; (800414c <HAL_UART_MspInit+0x214>)
 8003f9c:	f043 0308 	orr.w	r3, r3, #8
 8003fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa2:	4b6a      	ldr	r3, [pc, #424]	; (800414c <HAL_UART_MspInit+0x214>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	623b      	str	r3, [r7, #32]
 8003fac:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 8003fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003fc0:	2308      	movs	r3, #8
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 8003fc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4861      	ldr	r0, [pc, #388]	; (8004150 <HAL_UART_MspInit+0x218>)
 8003fcc:	f001 ff90 	bl	8005ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003fe0:	2308      	movs	r3, #8
 8003fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 8003fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fe8:	4619      	mov	r1, r3
 8003fea:	485a      	ldr	r0, [pc, #360]	; (8004154 <HAL_UART_MspInit+0x21c>)
 8003fec:	f001 ff80 	bl	8005ef0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	2035      	movs	r0, #53	; 0x35
 8003ff6:	f001 f926 	bl	8005246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003ffa:	2035      	movs	r0, #53	; 0x35
 8003ffc:	f001 f93f 	bl	800527e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004000:	e09e      	b.n	8004140 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a54      	ldr	r2, [pc, #336]	; (8004158 <HAL_UART_MspInit+0x220>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d135      	bne.n	8004078 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 800400c:	2300      	movs	r3, #0
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	4b4e      	ldr	r3, [pc, #312]	; (800414c <HAL_UART_MspInit+0x214>)
 8004012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004014:	4a4d      	ldr	r2, [pc, #308]	; (800414c <HAL_UART_MspInit+0x214>)
 8004016:	f043 0310 	orr.w	r3, r3, #16
 800401a:	6453      	str	r3, [r2, #68]	; 0x44
 800401c:	4b4b      	ldr	r3, [pc, #300]	; (800414c <HAL_UART_MspInit+0x214>)
 800401e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004028:	2300      	movs	r3, #0
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	4b47      	ldr	r3, [pc, #284]	; (800414c <HAL_UART_MspInit+0x214>)
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	4a46      	ldr	r2, [pc, #280]	; (800414c <HAL_UART_MspInit+0x214>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6313      	str	r3, [r2, #48]	; 0x30
 8004038:	4b44      	ldr	r3, [pc, #272]	; (800414c <HAL_UART_MspInit+0x214>)
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 8004044:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404a:	2302      	movs	r3, #2
 800404c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404e:	2300      	movs	r3, #0
 8004050:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004052:	2303      	movs	r3, #3
 8004054:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004056:	2307      	movs	r3, #7
 8004058:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800405a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800405e:	4619      	mov	r1, r3
 8004060:	483e      	ldr	r0, [pc, #248]	; (800415c <HAL_UART_MspInit+0x224>)
 8004062:	f001 ff45 	bl	8005ef0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004066:	2200      	movs	r2, #0
 8004068:	2100      	movs	r1, #0
 800406a:	2025      	movs	r0, #37	; 0x25
 800406c:	f001 f8eb 	bl	8005246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004070:	2025      	movs	r0, #37	; 0x25
 8004072:	f001 f904 	bl	800527e <HAL_NVIC_EnableIRQ>
}
 8004076:	e063      	b.n	8004140 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a38      	ldr	r2, [pc, #224]	; (8004160 <HAL_UART_MspInit+0x228>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d12c      	bne.n	80040dc <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	4b31      	ldr	r3, [pc, #196]	; (800414c <HAL_UART_MspInit+0x214>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	4a30      	ldr	r2, [pc, #192]	; (800414c <HAL_UART_MspInit+0x214>)
 800408c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004090:	6413      	str	r3, [r2, #64]	; 0x40
 8004092:	4b2e      	ldr	r3, [pc, #184]	; (800414c <HAL_UART_MspInit+0x214>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	4b2a      	ldr	r3, [pc, #168]	; (800414c <HAL_UART_MspInit+0x214>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	4a29      	ldr	r2, [pc, #164]	; (800414c <HAL_UART_MspInit+0x214>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6313      	str	r3, [r2, #48]	; 0x30
 80040ae:	4b27      	ldr	r3, [pc, #156]	; (800414c <HAL_UART_MspInit+0x214>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80040ba:	230c      	movs	r3, #12
 80040bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040be:	2302      	movs	r3, #2
 80040c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c6:	2303      	movs	r3, #3
 80040c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040ca:	2307      	movs	r3, #7
 80040cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040d2:	4619      	mov	r1, r3
 80040d4:	4821      	ldr	r0, [pc, #132]	; (800415c <HAL_UART_MspInit+0x224>)
 80040d6:	f001 ff0b 	bl	8005ef0 <HAL_GPIO_Init>
}
 80040da:	e031      	b.n	8004140 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a20      	ldr	r2, [pc, #128]	; (8004164 <HAL_UART_MspInit+0x22c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d12c      	bne.n	8004140 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	4b18      	ldr	r3, [pc, #96]	; (800414c <HAL_UART_MspInit+0x214>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	4a17      	ldr	r2, [pc, #92]	; (800414c <HAL_UART_MspInit+0x214>)
 80040f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f4:	6413      	str	r3, [r2, #64]	; 0x40
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <HAL_UART_MspInit+0x214>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	4b11      	ldr	r3, [pc, #68]	; (800414c <HAL_UART_MspInit+0x214>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	4a10      	ldr	r2, [pc, #64]	; (800414c <HAL_UART_MspInit+0x214>)
 800410c:	f043 0304 	orr.w	r3, r3, #4
 8004110:	6313      	str	r3, [r2, #48]	; 0x30
 8004112:	4b0e      	ldr	r3, [pc, #56]	; (800414c <HAL_UART_MspInit+0x214>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 800411e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004124:	2302      	movs	r3, #2
 8004126:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004128:	2300      	movs	r3, #0
 800412a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800412c:	2303      	movs	r3, #3
 800412e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004130:	2307      	movs	r3, #7
 8004132:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004134:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004138:	4619      	mov	r1, r3
 800413a:	4805      	ldr	r0, [pc, #20]	; (8004150 <HAL_UART_MspInit+0x218>)
 800413c:	f001 fed8 	bl	8005ef0 <HAL_GPIO_Init>
}
 8004140:	bf00      	nop
 8004142:	3740      	adds	r7, #64	; 0x40
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40005000 	.word	0x40005000
 800414c:	40023800 	.word	0x40023800
 8004150:	40020800 	.word	0x40020800
 8004154:	40020c00 	.word	0x40020c00
 8004158:	40011000 	.word	0x40011000
 800415c:	40020000 	.word	0x40020000
 8004160:	40004400 	.word	0x40004400
 8004164:	40004800 	.word	0x40004800

08004168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800416c:	e7fe      	b.n	800416c <NMI_Handler+0x4>

0800416e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800416e:	b480      	push	{r7}
 8004170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004172:	e7fe      	b.n	8004172 <HardFault_Handler+0x4>

08004174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004178:	e7fe      	b.n	8004178 <MemManage_Handler+0x4>

0800417a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800417e:	e7fe      	b.n	800417e <BusFault_Handler+0x4>

08004180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004184:	e7fe      	b.n	8004184 <UsageFault_Handler+0x4>

08004186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041a2:	b480      	push	{r7}
 80041a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041b4:	f000 f98e 	bl	80044d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041b8:	bf00      	nop
 80041ba:	bd80      	pop	{r7, pc}

080041bc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80041c0:	2010      	movs	r0, #16
 80041c2:	f002 f875 	bl	80062b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80041c6:	bf00      	nop
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041d0:	4802      	ldr	r0, [pc, #8]	; (80041dc <TIM2_IRQHandler+0x10>)
 80041d2:	f003 fc3f 	bl	8007a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041d6:	bf00      	nop
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000680 	.word	0x20000680

080041e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041e4:	4802      	ldr	r0, [pc, #8]	; (80041f0 <USART1_IRQHandler+0x10>)
 80041e6:	f004 ff57 	bl	8009098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041ea:	bf00      	nop
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	2000088c 	.word	0x2000088c

080041f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(On_Board_Button_Pin);
 80041f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041fc:	f002 f858 	bl	80062b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}

08004204 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8004208:	4802      	ldr	r0, [pc, #8]	; (8004214 <DMA1_Stream7_IRQHandler+0x10>)
 800420a:	f001 f9f9 	bl	8005600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	200007e8 	.word	0x200007e8

08004218 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800421c:	4802      	ldr	r0, [pc, #8]	; (8004228 <UART5_IRQHandler+0x10>)
 800421e:	f004 ff3b 	bl	8009098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004222:	bf00      	nop
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000848 	.word	0x20000848

0800422c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
	return 1;
 8004230:	2301      	movs	r3, #1
}
 8004232:	4618      	mov	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <_kill>:

int _kill(int pid, int sig)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004246:	f005 fe8f 	bl	8009f68 <__errno>
 800424a:	4603      	mov	r3, r0
 800424c:	2216      	movs	r2, #22
 800424e:	601a      	str	r2, [r3, #0]
	return -1;
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <_exit>:

void _exit (int status)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004264:	f04f 31ff 	mov.w	r1, #4294967295
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff ffe7 	bl	800423c <_kill>
	while (1) {}		/* Make sure we hang here */
 800426e:	e7fe      	b.n	800426e <_exit+0x12>

08004270 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e00a      	b.n	8004298 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004282:	f3af 8000 	nop.w
 8004286:	4601      	mov	r1, r0
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	60ba      	str	r2, [r7, #8]
 800428e:	b2ca      	uxtb	r2, r1
 8004290:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	3301      	adds	r3, #1
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	429a      	cmp	r2, r3
 800429e:	dbf0      	blt.n	8004282 <_read+0x12>
	}

return len;
 80042a0:	687b      	ldr	r3, [r7, #4]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b086      	sub	sp, #24
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	e009      	b.n	80042d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	60ba      	str	r2, [r7, #8]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	3301      	adds	r3, #1
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	dbf1      	blt.n	80042bc <_write+0x12>
	}
	return len;
 80042d8:	687b      	ldr	r3, [r7, #4]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <_close>:

int _close(int file)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
	return -1;
 80042ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800430a:	605a      	str	r2, [r3, #4]
	return 0;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <_isatty>:

int _isatty(int file)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
	return 1;
 8004322:	2301      	movs	r3, #1
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
	return 0;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004354:	4a14      	ldr	r2, [pc, #80]	; (80043a8 <_sbrk+0x5c>)
 8004356:	4b15      	ldr	r3, [pc, #84]	; (80043ac <_sbrk+0x60>)
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004360:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <_sbrk+0x64>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d102      	bne.n	800436e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004368:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <_sbrk+0x64>)
 800436a:	4a12      	ldr	r2, [pc, #72]	; (80043b4 <_sbrk+0x68>)
 800436c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800436e:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <_sbrk+0x64>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4413      	add	r3, r2
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	429a      	cmp	r2, r3
 800437a:	d207      	bcs.n	800438c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800437c:	f005 fdf4 	bl	8009f68 <__errno>
 8004380:	4603      	mov	r3, r0
 8004382:	220c      	movs	r2, #12
 8004384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
 800438a:	e009      	b.n	80043a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800438c:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <_sbrk+0x64>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004392:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <_sbrk+0x64>)
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4413      	add	r3, r2
 800439a:	4a05      	ldr	r2, [pc, #20]	; (80043b0 <_sbrk+0x64>)
 800439c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800439e:	68fb      	ldr	r3, [r7, #12]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20020000 	.word	0x20020000
 80043ac:	00000400 	.word	0x00000400
 80043b0:	2000096c 	.word	0x2000096c
 80043b4:	200009a8 	.word	0x200009a8

080043b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <SystemInit+0x20>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c2:	4a05      	ldr	r2, [pc, #20]	; (80043d8 <SystemInit+0x20>)
 80043c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 80043dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004414 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043e0:	480d      	ldr	r0, [pc, #52]	; (8004418 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043e2:	490e      	ldr	r1, [pc, #56]	; (800441c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043e4:	4a0e      	ldr	r2, [pc, #56]	; (8004420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043e8:	e002      	b.n	80043f0 <LoopCopyDataInit>

080043ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043ee:	3304      	adds	r3, #4

080043f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043f4:	d3f9      	bcc.n	80043ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043f6:	4a0b      	ldr	r2, [pc, #44]	; (8004424 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043f8:	4c0b      	ldr	r4, [pc, #44]	; (8004428 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043fc:	e001      	b.n	8004402 <LoopFillZerobss>

080043fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004400:	3204      	adds	r2, #4

08004402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004404:	d3fb      	bcc.n	80043fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004406:	f7ff ffd7 	bl	80043b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800440a:	f005 fdb3 	bl	8009f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800440e:	f7fe fbed 	bl	8002bec <main>
  bx  lr    
 8004412:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 8004414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800441c:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8004420:	0800e908 	.word	0x0800e908
  ldr r2, =_sbss
 8004424:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8004428:	200009a4 	.word	0x200009a4

0800442c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800442c:	e7fe      	b.n	800442c <ADC_IRQHandler>
	...

08004430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004434:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <HAL_Init+0x40>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a0d      	ldr	r2, [pc, #52]	; (8004470 <HAL_Init+0x40>)
 800443a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800443e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <HAL_Init+0x40>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <HAL_Init+0x40>)
 8004446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800444a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800444c:	4b08      	ldr	r3, [pc, #32]	; (8004470 <HAL_Init+0x40>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a07      	ldr	r2, [pc, #28]	; (8004470 <HAL_Init+0x40>)
 8004452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004458:	2003      	movs	r0, #3
 800445a:	f000 fee9 	bl	8005230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800445e:	2000      	movs	r0, #0
 8004460:	f000 f808 	bl	8004474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004464:	f7ff fb20 	bl	8003aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023c00 	.word	0x40023c00

08004474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800447c:	4b12      	ldr	r3, [pc, #72]	; (80044c8 <HAL_InitTick+0x54>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b12      	ldr	r3, [pc, #72]	; (80044cc <HAL_InitTick+0x58>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	4619      	mov	r1, r3
 8004486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800448a:	fbb3 f3f1 	udiv	r3, r3, r1
 800448e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004492:	4618      	mov	r0, r3
 8004494:	f000 ff0f 	bl	80052b6 <HAL_SYSTICK_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e00e      	b.n	80044c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b0f      	cmp	r3, #15
 80044a6:	d80a      	bhi.n	80044be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044a8:	2200      	movs	r2, #0
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	f000 fec9 	bl	8005246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044b4:	4a06      	ldr	r2, [pc, #24]	; (80044d0 <HAL_InitTick+0x5c>)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e000      	b.n	80044c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000054 	.word	0x20000054
 80044cc:	2000005c 	.word	0x2000005c
 80044d0:	20000058 	.word	0x20000058

080044d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_IncTick+0x20>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_IncTick+0x24>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4413      	add	r3, r2
 80044e4:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <HAL_IncTick+0x24>)
 80044e6:	6013      	str	r3, [r2, #0]
}
 80044e8:	bf00      	nop
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	2000005c 	.word	0x2000005c
 80044f8:	20000970 	.word	0x20000970

080044fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004500:	4b03      	ldr	r3, [pc, #12]	; (8004510 <HAL_GetTick+0x14>)
 8004502:	681b      	ldr	r3, [r3, #0]
}
 8004504:	4618      	mov	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	20000970 	.word	0x20000970

08004514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800451c:	f7ff ffee 	bl	80044fc <HAL_GetTick>
 8004520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452c:	d005      	beq.n	800453a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800452e:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <HAL_Delay+0x44>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800453a:	bf00      	nop
 800453c:	f7ff ffde 	bl	80044fc <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	429a      	cmp	r2, r3
 800454a:	d8f7      	bhi.n	800453c <HAL_Delay+0x28>
  {
  }
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	2000005c 	.word	0x2000005c

0800455c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e033      	b.n	80045da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff fabc 	bl	8003af8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	d118      	bne.n	80045cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80045a2:	f023 0302 	bic.w	r3, r3, #2
 80045a6:	f043 0202 	orr.w	r2, r3, #2
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fab4 	bl	8004b1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	f043 0201 	orr.w	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
 80045ca:	e001      	b.n	80045d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_ADC_Start+0x1a>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e0b2      	b.n	8004764 <HAL_ADC_Start+0x180>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	d018      	beq.n	8004646 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004624:	4b52      	ldr	r3, [pc, #328]	; (8004770 <HAL_ADC_Start+0x18c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a52      	ldr	r2, [pc, #328]	; (8004774 <HAL_ADC_Start+0x190>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	0c9a      	lsrs	r2, r3, #18
 8004630:	4613      	mov	r3, r2
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004638:	e002      	b.n	8004640 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	3b01      	subs	r3, #1
 800463e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f9      	bne.n	800463a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d17a      	bne.n	800474a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800467e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004692:	d106      	bne.n	80046a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004698:	f023 0206 	bic.w	r2, r3, #6
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	645a      	str	r2, [r3, #68]	; 0x44
 80046a0:	e002      	b.n	80046a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046b0:	4b31      	ldr	r3, [pc, #196]	; (8004778 <HAL_ADC_Start+0x194>)
 80046b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80046bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d12a      	bne.n	8004720 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a2b      	ldr	r2, [pc, #172]	; (800477c <HAL_ADC_Start+0x198>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d015      	beq.n	8004700 <HAL_ADC_Start+0x11c>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a29      	ldr	r2, [pc, #164]	; (8004780 <HAL_ADC_Start+0x19c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d105      	bne.n	80046ea <HAL_ADC_Start+0x106>
 80046de:	4b26      	ldr	r3, [pc, #152]	; (8004778 <HAL_ADC_Start+0x194>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a25      	ldr	r2, [pc, #148]	; (8004784 <HAL_ADC_Start+0x1a0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d136      	bne.n	8004762 <HAL_ADC_Start+0x17e>
 80046f4:	4b20      	ldr	r3, [pc, #128]	; (8004778 <HAL_ADC_Start+0x194>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d130      	bne.n	8004762 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d129      	bne.n	8004762 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800471c:	609a      	str	r2, [r3, #8]
 800471e:	e020      	b.n	8004762 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a15      	ldr	r2, [pc, #84]	; (800477c <HAL_ADC_Start+0x198>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d11b      	bne.n	8004762 <HAL_ADC_Start+0x17e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d114      	bne.n	8004762 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	e00b      	b.n	8004762 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f043 0210 	orr.w	r2, r3, #16
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	f043 0201 	orr.w	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	20000054 	.word	0x20000054
 8004774:	431bde83 	.word	0x431bde83
 8004778:	40012300 	.word	0x40012300
 800477c:	40012000 	.word	0x40012000
 8004780:	40012100 	.word	0x40012100
 8004784:	40012200 	.word	0x40012200

08004788 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a4:	d113      	bne.n	80047ce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80047b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b4:	d10b      	bne.n	80047ce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e063      	b.n	8004896 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80047ce:	f7ff fe95 	bl	80044fc <HAL_GetTick>
 80047d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047d4:	e021      	b.n	800481a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d01d      	beq.n	800481a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_ADC_PollForConversion+0x6c>
 80047e4:	f7ff fe8a 	bl	80044fc <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d212      	bcs.n	800481a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d00b      	beq.n	800481a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f043 0204 	orr.w	r2, r3, #4
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e03d      	b.n	8004896 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b02      	cmp	r3, #2
 8004826:	d1d6      	bne.n	80047d6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0212 	mvn.w	r2, #18
 8004830:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d123      	bne.n	8004894 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004850:	2b00      	cmp	r3, #0
 8004852:	d11f      	bne.n	8004894 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800485e:	2b00      	cmp	r3, #0
 8004860:	d006      	beq.n	8004870 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800486c:	2b00      	cmp	r3, #0
 800486e:	d111      	bne.n	8004894 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d105      	bne.n	8004894 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	f043 0201 	orr.w	r2, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x1c>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e113      	b.n	8004afc <HAL_ADC_ConfigChannel+0x244>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b09      	cmp	r3, #9
 80048e2:	d925      	bls.n	8004930 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68d9      	ldr	r1, [r3, #12]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	461a      	mov	r2, r3
 80048f2:	4613      	mov	r3, r2
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	4413      	add	r3, r2
 80048f8:	3b1e      	subs	r3, #30
 80048fa:	2207      	movs	r2, #7
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	43da      	mvns	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	400a      	ands	r2, r1
 8004908:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68d9      	ldr	r1, [r3, #12]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	b29b      	uxth	r3, r3
 800491a:	4618      	mov	r0, r3
 800491c:	4603      	mov	r3, r0
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	4403      	add	r3, r0
 8004922:	3b1e      	subs	r3, #30
 8004924:	409a      	lsls	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	60da      	str	r2, [r3, #12]
 800492e:	e022      	b.n	8004976 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6919      	ldr	r1, [r3, #16]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	b29b      	uxth	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	4613      	mov	r3, r2
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	4413      	add	r3, r2
 8004944:	2207      	movs	r2, #7
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43da      	mvns	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	400a      	ands	r2, r1
 8004952:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6919      	ldr	r1, [r3, #16]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	4618      	mov	r0, r3
 8004966:	4603      	mov	r3, r0
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	4403      	add	r3, r0
 800496c:	409a      	lsls	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b06      	cmp	r3, #6
 800497c:	d824      	bhi.n	80049c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	3b05      	subs	r3, #5
 8004990:	221f      	movs	r2, #31
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43da      	mvns	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	400a      	ands	r2, r1
 800499e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	4618      	mov	r0, r3
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	3b05      	subs	r3, #5
 80049ba:	fa00 f203 	lsl.w	r2, r0, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	635a      	str	r2, [r3, #52]	; 0x34
 80049c6:	e04c      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b0c      	cmp	r3, #12
 80049ce:	d824      	bhi.n	8004a1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	3b23      	subs	r3, #35	; 0x23
 80049e2:	221f      	movs	r2, #31
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	43da      	mvns	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	400a      	ands	r2, r1
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	4618      	mov	r0, r3
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	3b23      	subs	r3, #35	; 0x23
 8004a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
 8004a18:	e023      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	3b41      	subs	r3, #65	; 0x41
 8004a2c:	221f      	movs	r2, #31
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	43da      	mvns	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	400a      	ands	r2, r1
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	4618      	mov	r0, r3
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	3b41      	subs	r3, #65	; 0x41
 8004a56:	fa00 f203 	lsl.w	r2, r0, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a62:	4b29      	ldr	r3, [pc, #164]	; (8004b08 <HAL_ADC_ConfigChannel+0x250>)
 8004a64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a28      	ldr	r2, [pc, #160]	; (8004b0c <HAL_ADC_ConfigChannel+0x254>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10f      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x1d8>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b12      	cmp	r3, #18
 8004a76:	d10b      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <HAL_ADC_ConfigChannel+0x254>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d12b      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x23a>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1c      	ldr	r2, [pc, #112]	; (8004b10 <HAL_ADC_ConfigChannel+0x258>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d003      	beq.n	8004aac <HAL_ADC_ConfigChannel+0x1f4>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b11      	cmp	r3, #17
 8004aaa:	d122      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a11      	ldr	r2, [pc, #68]	; (8004b10 <HAL_ADC_ConfigChannel+0x258>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d111      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ace:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <HAL_ADC_ConfigChannel+0x25c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a11      	ldr	r2, [pc, #68]	; (8004b18 <HAL_ADC_ConfigChannel+0x260>)
 8004ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad8:	0c9a      	lsrs	r2, r3, #18
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ae4:	e002      	b.n	8004aec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f9      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	40012300 	.word	0x40012300
 8004b0c:	40012000 	.word	0x40012000
 8004b10:	10000012 	.word	0x10000012
 8004b14:	20000054 	.word	0x20000054
 8004b18:	431bde83 	.word	0x431bde83

08004b1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b24:	4b79      	ldr	r3, [pc, #484]	; (8004d0c <ADC_Init+0x1f0>)
 8004b26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6859      	ldr	r1, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	021a      	lsls	r2, r3, #8
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004b74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6899      	ldr	r1, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	4a58      	ldr	r2, [pc, #352]	; (8004d10 <ADC_Init+0x1f4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d022      	beq.n	8004bfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6899      	ldr	r1, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004be4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6899      	ldr	r1, [r3, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]
 8004bf8:	e00f      	b.n	8004c1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0202 	bic.w	r2, r2, #2
 8004c28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6899      	ldr	r1, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	7e1b      	ldrb	r3, [r3, #24]
 8004c34:	005a      	lsls	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004c66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6859      	ldr	r1, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	3b01      	subs	r3, #1
 8004c74:	035a      	lsls	r2, r3, #13
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	e007      	b.n	8004c90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	051a      	lsls	r2, r3, #20
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6899      	ldr	r1, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cd2:	025a      	lsls	r2, r3, #9
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6899      	ldr	r1, [r3, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	029a      	lsls	r2, r3, #10
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	609a      	str	r2, [r3, #8]
}
 8004d00:	bf00      	nop
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	40012300 	.word	0x40012300
 8004d10:	0f000001 	.word	0x0f000001

08004d14 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e17e      	b.n	800502a <HAL_ADCEx_InjectedConfigChannel+0x316>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b09      	cmp	r3, #9
 8004d3a:	d925      	bls.n	8004d88 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68d9      	ldr	r1, [r3, #12]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	4413      	add	r3, r2
 8004d50:	3b1e      	subs	r3, #30
 8004d52:	2207      	movs	r2, #7
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43da      	mvns	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	400a      	ands	r2, r1
 8004d60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68d9      	ldr	r1, [r3, #12]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	4618      	mov	r0, r3
 8004d74:	4603      	mov	r3, r0
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	4403      	add	r3, r0
 8004d7a:	3b1e      	subs	r3, #30
 8004d7c:	409a      	lsls	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	60da      	str	r2, [r3, #12]
 8004d86:	e022      	b.n	8004dce <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6919      	ldr	r1, [r3, #16]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	4613      	mov	r3, r2
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4413      	add	r3, r2
 8004d9c:	2207      	movs	r2, #7
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	43da      	mvns	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	400a      	ands	r2, r1
 8004daa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6919      	ldr	r1, [r3, #16]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	4403      	add	r3, r0
 8004dc4:	409a      	lsls	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004ddc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	051a      	lsls	r2, r3, #20
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	3303      	adds	r3, #3
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	4613      	mov	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	221f      	movs	r2, #31
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	43da      	mvns	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	400a      	ands	r2, r1
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	4618      	mov	r0, r3
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	3303      	adds	r3, #3
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	fa00 f203 	lsl.w	r2, r0, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	4a75      	ldr	r2, [pc, #468]	; (8005038 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d022      	beq.n	8004eac <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004e74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6899      	ldr	r1, [r3, #8]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	699a      	ldr	r2, [r3, #24]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004e96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6899      	ldr	r1, [r3, #8]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	69da      	ldr	r2, [r3, #28]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	609a      	str	r2, [r3, #8]
 8004eaa:	e00f      	b.n	8004ecc <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004eba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004eca:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	7d5b      	ldrb	r3, [r3, #21]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ee2:	605a      	str	r2, [r3, #4]
 8004ee4:	e007      	b.n	8004ef6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef4:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	7d1b      	ldrb	r3, [r3, #20]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d008      	beq.n	8004f10 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	e007      	b.n	8004f20 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f1e:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d02e      	beq.n	8004f86 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d840      	bhi.n	8004fae <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d002      	beq.n	8004f36 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d014      	beq.n	8004f5e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8004f34:	e03b      	b.n	8004fae <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004f44:	f023 030f 	bic.w	r3, r3, #15
 8004f48:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6959      	ldr	r1, [r3, #20]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	615a      	str	r2, [r3, #20]
      break;
 8004f5c:	e03b      	b.n	8004fd6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004f6c:	f023 030f 	bic.w	r3, r3, #15
 8004f70:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6999      	ldr	r1, [r3, #24]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	619a      	str	r2, [r3, #24]
      break;
 8004f84:	e027      	b.n	8004fd6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004f94:	f023 030f 	bic.w	r3, r3, #15
 8004f98:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69d9      	ldr	r1, [r3, #28]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	61da      	str	r2, [r3, #28]
      break;
 8004fac:	e013      	b.n	8004fd6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004fbc:	f023 030f 	bic.w	r3, r3, #15
 8004fc0:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6a19      	ldr	r1, [r3, #32]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	621a      	str	r2, [r3, #32]
      break;
 8004fd4:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fd6:	4b19      	ldr	r3, [pc, #100]	; (800503c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a18      	ldr	r2, [pc, #96]	; (8005040 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d109      	bne.n	8004ff8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b12      	cmp	r3, #18
 8004fea:	d105      	bne.n	8004ff8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a10      	ldr	r2, [pc, #64]	; (8005040 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d10e      	bne.n	8005020 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a0f      	ldr	r2, [pc, #60]	; (8005044 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d003      	beq.n	8005014 <HAL_ADCEx_InjectedConfigChannel+0x300>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b11      	cmp	r3, #17
 8005012:	d105      	bne.n	8005020 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	000f0001 	.word	0x000f0001
 800503c:	40012300 	.word	0x40012300
 8005040:	40012000 	.word	0x40012000
 8005044:	10000012 	.word	0x10000012

08005048 <__NVIC_SetPriorityGrouping>:
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <__NVIC_SetPriorityGrouping+0x44>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005064:	4013      	ands	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800507a:	4a04      	ldr	r2, [pc, #16]	; (800508c <__NVIC_SetPriorityGrouping+0x44>)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	60d3      	str	r3, [r2, #12]
}
 8005080:	bf00      	nop
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	e000ed00 	.word	0xe000ed00

08005090 <__NVIC_GetPriorityGrouping>:
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005094:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	0a1b      	lsrs	r3, r3, #8
 800509a:	f003 0307 	and.w	r3, r3, #7
}
 800509e:	4618      	mov	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	e000ed00 	.word	0xe000ed00

080050ac <__NVIC_EnableIRQ>:
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	db0b      	blt.n	80050d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	f003 021f 	and.w	r2, r3, #31
 80050c4:	4907      	ldr	r1, [pc, #28]	; (80050e4 <__NVIC_EnableIRQ+0x38>)
 80050c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	2001      	movs	r0, #1
 80050ce:	fa00 f202 	lsl.w	r2, r0, r2
 80050d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	e000e100 	.word	0xe000e100

080050e8 <__NVIC_DisableIRQ>:
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	db12      	blt.n	8005120 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	f003 021f 	and.w	r2, r3, #31
 8005100:	490a      	ldr	r1, [pc, #40]	; (800512c <__NVIC_DisableIRQ+0x44>)
 8005102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	2001      	movs	r0, #1
 800510a:	fa00 f202 	lsl.w	r2, r0, r2
 800510e:	3320      	adds	r3, #32
 8005110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005114:	f3bf 8f4f 	dsb	sy
}
 8005118:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800511a:	f3bf 8f6f 	isb	sy
}
 800511e:	bf00      	nop
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	e000e100 	.word	0xe000e100

08005130 <__NVIC_SetPriority>:
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	6039      	str	r1, [r7, #0]
 800513a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800513c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005140:	2b00      	cmp	r3, #0
 8005142:	db0a      	blt.n	800515a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	b2da      	uxtb	r2, r3
 8005148:	490c      	ldr	r1, [pc, #48]	; (800517c <__NVIC_SetPriority+0x4c>)
 800514a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514e:	0112      	lsls	r2, r2, #4
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	440b      	add	r3, r1
 8005154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005158:	e00a      	b.n	8005170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	b2da      	uxtb	r2, r3
 800515e:	4908      	ldr	r1, [pc, #32]	; (8005180 <__NVIC_SetPriority+0x50>)
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	3b04      	subs	r3, #4
 8005168:	0112      	lsls	r2, r2, #4
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	440b      	add	r3, r1
 800516e:	761a      	strb	r2, [r3, #24]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	e000e100 	.word	0xe000e100
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <NVIC_EncodePriority>:
{
 8005184:	b480      	push	{r7}
 8005186:	b089      	sub	sp, #36	; 0x24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f1c3 0307 	rsb	r3, r3, #7
 800519e:	2b04      	cmp	r3, #4
 80051a0:	bf28      	it	cs
 80051a2:	2304      	movcs	r3, #4
 80051a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3304      	adds	r3, #4
 80051aa:	2b06      	cmp	r3, #6
 80051ac:	d902      	bls.n	80051b4 <NVIC_EncodePriority+0x30>
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3b03      	subs	r3, #3
 80051b2:	e000      	b.n	80051b6 <NVIC_EncodePriority+0x32>
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b8:	f04f 32ff 	mov.w	r2, #4294967295
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	43da      	mvns	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	401a      	ands	r2, r3
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051cc:	f04f 31ff 	mov.w	r1, #4294967295
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	43d9      	mvns	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051dc:	4313      	orrs	r3, r2
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3724      	adds	r7, #36	; 0x24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051fc:	d301      	bcc.n	8005202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051fe:	2301      	movs	r3, #1
 8005200:	e00f      	b.n	8005222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005202:	4a0a      	ldr	r2, [pc, #40]	; (800522c <SysTick_Config+0x40>)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3b01      	subs	r3, #1
 8005208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800520a:	210f      	movs	r1, #15
 800520c:	f04f 30ff 	mov.w	r0, #4294967295
 8005210:	f7ff ff8e 	bl	8005130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <SysTick_Config+0x40>)
 8005216:	2200      	movs	r2, #0
 8005218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800521a:	4b04      	ldr	r3, [pc, #16]	; (800522c <SysTick_Config+0x40>)
 800521c:	2207      	movs	r2, #7
 800521e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	e000e010 	.word	0xe000e010

08005230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff ff05 	bl	8005048 <__NVIC_SetPriorityGrouping>
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005246:	b580      	push	{r7, lr}
 8005248:	b086      	sub	sp, #24
 800524a:	af00      	add	r7, sp, #0
 800524c:	4603      	mov	r3, r0
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
 8005252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005258:	f7ff ff1a 	bl	8005090 <__NVIC_GetPriorityGrouping>
 800525c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	6978      	ldr	r0, [r7, #20]
 8005264:	f7ff ff8e 	bl	8005184 <NVIC_EncodePriority>
 8005268:	4602      	mov	r2, r0
 800526a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800526e:	4611      	mov	r1, r2
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff ff5d 	bl	8005130 <__NVIC_SetPriority>
}
 8005276:	bf00      	nop
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	4603      	mov	r3, r0
 8005286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff ff0d 	bl	80050ac <__NVIC_EnableIRQ>
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	4603      	mov	r3, r0
 80052a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80052a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff ff1d 	bl	80050e8 <__NVIC_DisableIRQ>
}
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b082      	sub	sp, #8
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff ff94 	bl	80051ec <SysTick_Config>
 80052c4:	4603      	mov	r3, r0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80052dc:	f7ff f90e 	bl	80044fc <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e099      	b.n	8005420 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0201 	bic.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800530c:	e00f      	b.n	800532e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800530e:	f7ff f8f5 	bl	80044fc <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b05      	cmp	r3, #5
 800531a:	d908      	bls.n	800532e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2203      	movs	r2, #3
 8005326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e078      	b.n	8005420 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e8      	bne.n	800530e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4b38      	ldr	r3, [pc, #224]	; (8005428 <HAL_DMA_Init+0x158>)
 8005348:	4013      	ands	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800535a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	2b04      	cmp	r3, #4
 8005386:	d107      	bne.n	8005398 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005390:	4313      	orrs	r3, r2
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0307 	bic.w	r3, r3, #7
 80053ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d117      	bne.n	80053f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00e      	beq.n	80053f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fb01 	bl	80059dc <DMA_CheckFifoParam>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d008      	beq.n	80053f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2240      	movs	r2, #64	; 0x40
 80053e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80053ee:	2301      	movs	r3, #1
 80053f0:	e016      	b.n	8005420 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fab8 	bl	8005970 <DMA_CalcBaseAndBitshift>
 8005400:	4603      	mov	r3, r0
 8005402:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005408:	223f      	movs	r2, #63	; 0x3f
 800540a:	409a      	lsls	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	f010803f 	.word	0xf010803f

0800542c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005442:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_DMA_Start_IT+0x26>
 800544e:	2302      	movs	r3, #2
 8005450:	e040      	b.n	80054d4 <HAL_DMA_Start_IT+0xa8>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b01      	cmp	r3, #1
 8005464:	d12f      	bne.n	80054c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2202      	movs	r2, #2
 800546a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fa4a 	bl	8005914 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005484:	223f      	movs	r2, #63	; 0x3f
 8005486:	409a      	lsls	r2, r3
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0216 	orr.w	r2, r2, #22
 800549a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0208 	orr.w	r2, r2, #8
 80054b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e005      	b.n	80054d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80054ce:	2302      	movs	r3, #2
 80054d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80054ea:	f7ff f807 	bl	80044fc <HAL_GetTick>
 80054ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d008      	beq.n	800550e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2280      	movs	r2, #128	; 0x80
 8005500:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e052      	b.n	80055b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0216 	bic.w	r2, r2, #22
 800551c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800552c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d103      	bne.n	800553e <HAL_DMA_Abort+0x62>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0208 	bic.w	r2, r2, #8
 800554c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0201 	bic.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800555e:	e013      	b.n	8005588 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005560:	f7fe ffcc 	bl	80044fc <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b05      	cmp	r3, #5
 800556c:	d90c      	bls.n	8005588 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2203      	movs	r2, #3
 8005578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e015      	b.n	80055b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e4      	bne.n	8005560 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559a:	223f      	movs	r2, #63	; 0x3f
 800559c:	409a      	lsls	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d004      	beq.n	80055da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2280      	movs	r2, #128	; 0x80
 80055d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e00c      	b.n	80055f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2205      	movs	r2, #5
 80055de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0201 	bic.w	r2, r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800560c:	4b8e      	ldr	r3, [pc, #568]	; (8005848 <HAL_DMA_IRQHandler+0x248>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a8e      	ldr	r2, [pc, #568]	; (800584c <HAL_DMA_IRQHandler+0x24c>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	0a9b      	lsrs	r3, r3, #10
 8005618:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800562a:	2208      	movs	r2, #8
 800562c:	409a      	lsls	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d01a      	beq.n	800566c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d013      	beq.n	800566c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0204 	bic.w	r2, r2, #4
 8005652:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005658:	2208      	movs	r2, #8
 800565a:	409a      	lsls	r2, r3
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005664:	f043 0201 	orr.w	r2, r3, #1
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005670:	2201      	movs	r2, #1
 8005672:	409a      	lsls	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4013      	ands	r3, r2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d012      	beq.n	80056a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00b      	beq.n	80056a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568e:	2201      	movs	r2, #1
 8005690:	409a      	lsls	r2, r3
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569a:	f043 0202 	orr.w	r2, r3, #2
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a6:	2204      	movs	r2, #4
 80056a8:	409a      	lsls	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d012      	beq.n	80056d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00b      	beq.n	80056d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c4:	2204      	movs	r2, #4
 80056c6:	409a      	lsls	r2, r3
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d0:	f043 0204 	orr.w	r2, r3, #4
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056dc:	2210      	movs	r2, #16
 80056de:	409a      	lsls	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d043      	beq.n	8005770 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d03c      	beq.n	8005770 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fa:	2210      	movs	r2, #16
 80056fc:	409a      	lsls	r2, r3
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d018      	beq.n	8005742 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d108      	bne.n	8005730 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d024      	beq.n	8005770 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	4798      	blx	r3
 800572e:	e01f      	b.n	8005770 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01b      	beq.n	8005770 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	4798      	blx	r3
 8005740:	e016      	b.n	8005770 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d107      	bne.n	8005760 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0208 	bic.w	r2, r2, #8
 800575e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005774:	2220      	movs	r2, #32
 8005776:	409a      	lsls	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4013      	ands	r3, r2
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 808f 	beq.w	80058a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8087 	beq.w	80058a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005796:	2220      	movs	r2, #32
 8005798:	409a      	lsls	r2, r3
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b05      	cmp	r3, #5
 80057a8:	d136      	bne.n	8005818 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0216 	bic.w	r2, r2, #22
 80057b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695a      	ldr	r2, [r3, #20]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d103      	bne.n	80057da <HAL_DMA_IRQHandler+0x1da>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d007      	beq.n	80057ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0208 	bic.w	r2, r2, #8
 80057e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ee:	223f      	movs	r2, #63	; 0x3f
 80057f0:	409a      	lsls	r2, r3
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580a:	2b00      	cmp	r3, #0
 800580c:	d07e      	beq.n	800590c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	4798      	blx	r3
        }
        return;
 8005816:	e079      	b.n	800590c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d01d      	beq.n	8005862 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10d      	bne.n	8005850 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005838:	2b00      	cmp	r3, #0
 800583a:	d031      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	4798      	blx	r3
 8005844:	e02c      	b.n	80058a0 <HAL_DMA_IRQHandler+0x2a0>
 8005846:	bf00      	nop
 8005848:	20000054 	.word	0x20000054
 800584c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d023      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	4798      	blx	r3
 8005860:	e01e      	b.n	80058a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10f      	bne.n	8005890 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0210 	bic.w	r2, r2, #16
 800587e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d032      	beq.n	800590e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d022      	beq.n	80058fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2205      	movs	r2, #5
 80058b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0201 	bic.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d307      	bcc.n	80058e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f2      	bne.n	80058cc <HAL_DMA_IRQHandler+0x2cc>
 80058e6:	e000      	b.n	80058ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80058e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d005      	beq.n	800590e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	4798      	blx	r3
 800590a:	e000      	b.n	800590e <HAL_DMA_IRQHandler+0x30e>
        return;
 800590c:	bf00      	nop
    }
  }
}
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005930:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d108      	bne.n	8005954 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005952:	e007      	b.n	8005964 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	60da      	str	r2, [r3, #12]
}
 8005964:	bf00      	nop
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	b2db      	uxtb	r3, r3
 800597e:	3b10      	subs	r3, #16
 8005980:	4a14      	ldr	r2, [pc, #80]	; (80059d4 <DMA_CalcBaseAndBitshift+0x64>)
 8005982:	fba2 2303 	umull	r2, r3, r2, r3
 8005986:	091b      	lsrs	r3, r3, #4
 8005988:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800598a:	4a13      	ldr	r2, [pc, #76]	; (80059d8 <DMA_CalcBaseAndBitshift+0x68>)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b03      	cmp	r3, #3
 800599c:	d909      	bls.n	80059b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80059a6:	f023 0303 	bic.w	r3, r3, #3
 80059aa:	1d1a      	adds	r2, r3, #4
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	659a      	str	r2, [r3, #88]	; 0x58
 80059b0:	e007      	b.n	80059c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80059ba:	f023 0303 	bic.w	r3, r3, #3
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	aaaaaaab 	.word	0xaaaaaaab
 80059d8:	0800e2f8 	.word	0x0800e2f8

080059dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d11f      	bne.n	8005a36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d856      	bhi.n	8005aaa <DMA_CheckFifoParam+0xce>
 80059fc:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <DMA_CheckFifoParam+0x28>)
 80059fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a02:	bf00      	nop
 8005a04:	08005a15 	.word	0x08005a15
 8005a08:	08005a27 	.word	0x08005a27
 8005a0c:	08005a15 	.word	0x08005a15
 8005a10:	08005aab 	.word	0x08005aab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d046      	beq.n	8005aae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a24:	e043      	b.n	8005aae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a2e:	d140      	bne.n	8005ab2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a34:	e03d      	b.n	8005ab2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3e:	d121      	bne.n	8005a84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d837      	bhi.n	8005ab6 <DMA_CheckFifoParam+0xda>
 8005a46:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <DMA_CheckFifoParam+0x70>)
 8005a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4c:	08005a5d 	.word	0x08005a5d
 8005a50:	08005a63 	.word	0x08005a63
 8005a54:	08005a5d 	.word	0x08005a5d
 8005a58:	08005a75 	.word	0x08005a75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a60:	e030      	b.n	8005ac4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d025      	beq.n	8005aba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a72:	e022      	b.n	8005aba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a7c:	d11f      	bne.n	8005abe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a82:	e01c      	b.n	8005abe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d903      	bls.n	8005a92 <DMA_CheckFifoParam+0xb6>
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d003      	beq.n	8005a98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a90:	e018      	b.n	8005ac4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	73fb      	strb	r3, [r7, #15]
      break;
 8005a96:	e015      	b.n	8005ac4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00e      	beq.n	8005ac2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa8:	e00b      	b.n	8005ac2 <DMA_CheckFifoParam+0xe6>
      break;
 8005aaa:	bf00      	nop
 8005aac:	e00a      	b.n	8005ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8005aae:	bf00      	nop
 8005ab0:	e008      	b.n	8005ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ab2:	bf00      	nop
 8005ab4:	e006      	b.n	8005ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ab6:	bf00      	nop
 8005ab8:	e004      	b.n	8005ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8005aba:	bf00      	nop
 8005abc:	e002      	b.n	8005ac4 <DMA_CheckFifoParam+0xe8>
      break;   
 8005abe:	bf00      	nop
 8005ac0:	e000      	b.n	8005ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ac2:	bf00      	nop
    }
  } 
  
  return status; 
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop

08005ad4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ae6:	4b23      	ldr	r3, [pc, #140]	; (8005b74 <HAL_FLASH_Program+0xa0>)
 8005ae8:	7e1b      	ldrb	r3, [r3, #24]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_FLASH_Program+0x1e>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e03b      	b.n	8005b6a <HAL_FLASH_Program+0x96>
 8005af2:	4b20      	ldr	r3, [pc, #128]	; (8005b74 <HAL_FLASH_Program+0xa0>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005af8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005afc:	f000 f870 	bl	8005be0 <FLASH_WaitForLastOperation>
 8005b00:	4603      	mov	r3, r0
 8005b02:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d12b      	bne.n	8005b62 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d105      	bne.n	8005b1c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005b10:	783b      	ldrb	r3, [r7, #0]
 8005b12:	4619      	mov	r1, r3
 8005b14:	68b8      	ldr	r0, [r7, #8]
 8005b16:	f000 f91b 	bl	8005d50 <FLASH_Program_Byte>
 8005b1a:	e016      	b.n	8005b4a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d105      	bne.n	8005b2e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005b22:	883b      	ldrh	r3, [r7, #0]
 8005b24:	4619      	mov	r1, r3
 8005b26:	68b8      	ldr	r0, [r7, #8]
 8005b28:	f000 f8ee 	bl	8005d08 <FLASH_Program_HalfWord>
 8005b2c:	e00d      	b.n	8005b4a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d105      	bne.n	8005b40 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	4619      	mov	r1, r3
 8005b38:	68b8      	ldr	r0, [r7, #8]
 8005b3a:	f000 f8c3 	bl	8005cc4 <FLASH_Program_Word>
 8005b3e:	e004      	b.n	8005b4a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b44:	68b8      	ldr	r0, [r7, #8]
 8005b46:	f000 f88b 	bl	8005c60 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b4e:	f000 f847 	bl	8005be0 <FLASH_WaitForLastOperation>
 8005b52:	4603      	mov	r3, r0
 8005b54:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005b56:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <HAL_FLASH_Program+0xa4>)
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	4a07      	ldr	r2, [pc, #28]	; (8005b78 <HAL_FLASH_Program+0xa4>)
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005b62:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <HAL_FLASH_Program+0xa0>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000974 	.word	0x20000974
 8005b78:	40023c00 	.word	0x40023c00

08005b7c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005b86:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <HAL_FLASH_Unlock+0x38>)
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	da0b      	bge.n	8005ba6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005b8e:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <HAL_FLASH_Unlock+0x38>)
 8005b90:	4a09      	ldr	r2, [pc, #36]	; (8005bb8 <HAL_FLASH_Unlock+0x3c>)
 8005b92:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005b94:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <HAL_FLASH_Unlock+0x38>)
 8005b96:	4a09      	ldr	r2, [pc, #36]	; (8005bbc <HAL_FLASH_Unlock+0x40>)
 8005b98:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005b9a:	4b06      	ldr	r3, [pc, #24]	; (8005bb4 <HAL_FLASH_Unlock+0x38>)
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	da01      	bge.n	8005ba6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	40023c00 	.word	0x40023c00
 8005bb8:	45670123 	.word	0x45670123
 8005bbc:	cdef89ab 	.word	0xcdef89ab

08005bc0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005bc4:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <HAL_FLASH_Lock+0x1c>)
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	4a04      	ldr	r2, [pc, #16]	; (8005bdc <HAL_FLASH_Lock+0x1c>)
 8005bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bce:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	40023c00 	.word	0x40023c00

08005be0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005bec:	4b1a      	ldr	r3, [pc, #104]	; (8005c58 <FLASH_WaitForLastOperation+0x78>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005bf2:	f7fe fc83 	bl	80044fc <HAL_GetTick>
 8005bf6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005bf8:	e010      	b.n	8005c1c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c00:	d00c      	beq.n	8005c1c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <FLASH_WaitForLastOperation+0x38>
 8005c08:	f7fe fc78 	bl	80044fc <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d201      	bcs.n	8005c1c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e019      	b.n	8005c50 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005c1c:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <FLASH_WaitForLastOperation+0x7c>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e8      	bne.n	8005bfa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005c28:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <FLASH_WaitForLastOperation+0x7c>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005c34:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <FLASH_WaitForLastOperation+0x7c>)
 8005c36:	2201      	movs	r2, #1
 8005c38:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005c3a:	4b08      	ldr	r3, [pc, #32]	; (8005c5c <FLASH_WaitForLastOperation+0x7c>)
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005c46:	f000 f8a5 	bl	8005d94 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
  
}  
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20000974 	.word	0x20000974
 8005c5c:	40023c00 	.word	0x40023c00

08005c60 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c6c:	4b14      	ldr	r3, [pc, #80]	; (8005cc0 <FLASH_Program_DoubleWord+0x60>)
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	4a13      	ldr	r2, [pc, #76]	; (8005cc0 <FLASH_Program_DoubleWord+0x60>)
 8005c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005c78:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <FLASH_Program_DoubleWord+0x60>)
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	4a10      	ldr	r2, [pc, #64]	; (8005cc0 <FLASH_Program_DoubleWord+0x60>)
 8005c7e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c84:	4b0e      	ldr	r3, [pc, #56]	; (8005cc0 <FLASH_Program_DoubleWord+0x60>)
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	4a0d      	ldr	r2, [pc, #52]	; (8005cc0 <FLASH_Program_DoubleWord+0x60>)
 8005c8a:	f043 0301 	orr.w	r3, r3, #1
 8005c8e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005c96:	f3bf 8f6f 	isb	sy
}
 8005c9a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005c9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	000a      	movs	r2, r1
 8005caa:	2300      	movs	r3, #0
 8005cac:	68f9      	ldr	r1, [r7, #12]
 8005cae:	3104      	adds	r1, #4
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	600b      	str	r3, [r1, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	40023c00 	.word	0x40023c00

08005cc4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005cce:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <FLASH_Program_Word+0x40>)
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	4a0c      	ldr	r2, [pc, #48]	; (8005d04 <FLASH_Program_Word+0x40>)
 8005cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005cda:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <FLASH_Program_Word+0x40>)
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	4a09      	ldr	r2, [pc, #36]	; (8005d04 <FLASH_Program_Word+0x40>)
 8005ce0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ce4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005ce6:	4b07      	ldr	r3, [pc, #28]	; (8005d04 <FLASH_Program_Word+0x40>)
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	4a06      	ldr	r2, [pc, #24]	; (8005d04 <FLASH_Program_Word+0x40>)
 8005cec:	f043 0301 	orr.w	r3, r3, #1
 8005cf0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	601a      	str	r2, [r3, #0]
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	40023c00 	.word	0x40023c00

08005d08 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d14:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <FLASH_Program_HalfWord+0x44>)
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	4a0c      	ldr	r2, [pc, #48]	; (8005d4c <FLASH_Program_HalfWord+0x44>)
 8005d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <FLASH_Program_HalfWord+0x44>)
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	4a09      	ldr	r2, [pc, #36]	; (8005d4c <FLASH_Program_HalfWord+0x44>)
 8005d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005d2c:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <FLASH_Program_HalfWord+0x44>)
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	4a06      	ldr	r2, [pc, #24]	; (8005d4c <FLASH_Program_HalfWord+0x44>)
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	887a      	ldrh	r2, [r7, #2]
 8005d3c:	801a      	strh	r2, [r3, #0]
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40023c00 	.word	0x40023c00

08005d50 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d5c:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <FLASH_Program_Byte+0x40>)
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	4a0b      	ldr	r2, [pc, #44]	; (8005d90 <FLASH_Program_Byte+0x40>)
 8005d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005d68:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <FLASH_Program_Byte+0x40>)
 8005d6a:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <FLASH_Program_Byte+0x40>)
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005d70:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <FLASH_Program_Byte+0x40>)
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	4a06      	ldr	r2, [pc, #24]	; (8005d90 <FLASH_Program_Byte+0x40>)
 8005d76:	f043 0301 	orr.w	r3, r3, #1
 8005d7a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	78fa      	ldrb	r2, [r7, #3]
 8005d80:	701a      	strb	r2, [r3, #0]
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40023c00 	.word	0x40023c00

08005d94 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005d98:	4b2f      	ldr	r3, [pc, #188]	; (8005e58 <FLASH_SetErrorCode+0xc4>)
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d008      	beq.n	8005db6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005da4:	4b2d      	ldr	r3, [pc, #180]	; (8005e5c <FLASH_SetErrorCode+0xc8>)
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	f043 0310 	orr.w	r3, r3, #16
 8005dac:	4a2b      	ldr	r2, [pc, #172]	; (8005e5c <FLASH_SetErrorCode+0xc8>)
 8005dae:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005db0:	4b29      	ldr	r3, [pc, #164]	; (8005e58 <FLASH_SetErrorCode+0xc4>)
 8005db2:	2210      	movs	r2, #16
 8005db4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005db6:	4b28      	ldr	r3, [pc, #160]	; (8005e58 <FLASH_SetErrorCode+0xc4>)
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d008      	beq.n	8005dd4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005dc2:	4b26      	ldr	r3, [pc, #152]	; (8005e5c <FLASH_SetErrorCode+0xc8>)
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	f043 0308 	orr.w	r3, r3, #8
 8005dca:	4a24      	ldr	r2, [pc, #144]	; (8005e5c <FLASH_SetErrorCode+0xc8>)
 8005dcc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005dce:	4b22      	ldr	r3, [pc, #136]	; (8005e58 <FLASH_SetErrorCode+0xc4>)
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005dd4:	4b20      	ldr	r3, [pc, #128]	; (8005e58 <FLASH_SetErrorCode+0xc4>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d008      	beq.n	8005df2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005de0:	4b1e      	ldr	r3, [pc, #120]	; (8005e5c <FLASH_SetErrorCode+0xc8>)
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	f043 0304 	orr.w	r3, r3, #4
 8005de8:	4a1c      	ldr	r2, [pc, #112]	; (8005e5c <FLASH_SetErrorCode+0xc8>)
 8005dea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005dec:	4b1a      	ldr	r3, [pc, #104]	; (8005e58 <FLASH_SetErrorCode+0xc4>)
 8005dee:	2240      	movs	r2, #64	; 0x40
 8005df0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005df2:	4b19      	ldr	r3, [pc, #100]	; (8005e58 <FLASH_SetErrorCode+0xc4>)
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d008      	beq.n	8005e10 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005dfe:	4b17      	ldr	r3, [pc, #92]	; (8005e5c <FLASH_SetErrorCode+0xc8>)
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	f043 0302 	orr.w	r3, r3, #2
 8005e06:	4a15      	ldr	r2, [pc, #84]	; (8005e5c <FLASH_SetErrorCode+0xc8>)
 8005e08:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005e0a:	4b13      	ldr	r3, [pc, #76]	; (8005e58 <FLASH_SetErrorCode+0xc4>)
 8005e0c:	2280      	movs	r2, #128	; 0x80
 8005e0e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005e10:	4b11      	ldr	r3, [pc, #68]	; (8005e58 <FLASH_SetErrorCode+0xc4>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d009      	beq.n	8005e30 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <FLASH_SetErrorCode+0xc8>)
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	f043 0301 	orr.w	r3, r3, #1
 8005e24:	4a0d      	ldr	r2, [pc, #52]	; (8005e5c <FLASH_SetErrorCode+0xc8>)
 8005e26:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005e28:	4b0b      	ldr	r3, [pc, #44]	; (8005e58 <FLASH_SetErrorCode+0xc4>)
 8005e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e2e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005e30:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <FLASH_SetErrorCode+0xc4>)
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d008      	beq.n	8005e4e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005e3c:	4b07      	ldr	r3, [pc, #28]	; (8005e5c <FLASH_SetErrorCode+0xc8>)
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	f043 0320 	orr.w	r3, r3, #32
 8005e44:	4a05      	ldr	r2, [pc, #20]	; (8005e5c <FLASH_SetErrorCode+0xc8>)
 8005e46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005e48:	4b03      	ldr	r3, [pc, #12]	; (8005e58 <FLASH_SetErrorCode+0xc4>)
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	60da      	str	r2, [r3, #12]
  }
}
 8005e4e:	bf00      	nop
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	40023c00 	.word	0x40023c00
 8005e5c:	20000974 	.word	0x20000974

08005e60 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d102      	bne.n	8005e7c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	e010      	b.n	8005e9e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005e7c:	78fb      	ldrb	r3, [r7, #3]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d103      	bne.n	8005e8a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	e009      	b.n	8005e9e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d103      	bne.n	8005e98 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	e002      	b.n	8005e9e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005e98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005e9c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e9e:	4b13      	ldr	r3, [pc, #76]	; (8005eec <FLASH_Erase_Sector+0x8c>)
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	4a12      	ldr	r2, [pc, #72]	; (8005eec <FLASH_Erase_Sector+0x8c>)
 8005ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005eaa:	4b10      	ldr	r3, [pc, #64]	; (8005eec <FLASH_Erase_Sector+0x8c>)
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	490f      	ldr	r1, [pc, #60]	; (8005eec <FLASH_Erase_Sector+0x8c>)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <FLASH_Erase_Sector+0x8c>)
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	4a0c      	ldr	r2, [pc, #48]	; (8005eec <FLASH_Erase_Sector+0x8c>)
 8005ebc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005ec0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005ec2:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <FLASH_Erase_Sector+0x8c>)
 8005ec4:	691a      	ldr	r2, [r3, #16]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	4a07      	ldr	r2, [pc, #28]	; (8005eec <FLASH_Erase_Sector+0x8c>)
 8005ece:	f043 0302 	orr.w	r3, r3, #2
 8005ed2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005ed4:	4b05      	ldr	r3, [pc, #20]	; (8005eec <FLASH_Erase_Sector+0x8c>)
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	4a04      	ldr	r2, [pc, #16]	; (8005eec <FLASH_Erase_Sector+0x8c>)
 8005eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ede:	6113      	str	r3, [r2, #16]
}
 8005ee0:	bf00      	nop
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	40023c00 	.word	0x40023c00

08005ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b089      	sub	sp, #36	; 0x24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f06:	2300      	movs	r3, #0
 8005f08:	61fb      	str	r3, [r7, #28]
 8005f0a:	e165      	b.n	80061d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	f040 8154 	bne.w	80061d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d005      	beq.n	8005f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d130      	bne.n	8005fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	2203      	movs	r2, #3
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	43db      	mvns	r3, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	4013      	ands	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	fa02 f303 	lsl.w	r3, r2, r3
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f78:	2201      	movs	r2, #1
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	43db      	mvns	r3, r3
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	4013      	ands	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	091b      	lsrs	r3, r3, #4
 8005f8e:	f003 0201 	and.w	r2, r3, #1
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	fa02 f303 	lsl.w	r3, r2, r3
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f003 0303 	and.w	r3, r3, #3
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d017      	beq.n	8005fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	2203      	movs	r2, #3
 8005fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d123      	bne.n	8006034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	08da      	lsrs	r2, r3, #3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3208      	adds	r2, #8
 8005ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	220f      	movs	r2, #15
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	43db      	mvns	r3, r3
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	4013      	ands	r3, r2
 800600e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	fa02 f303 	lsl.w	r3, r2, r3
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	4313      	orrs	r3, r2
 8006024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	08da      	lsrs	r2, r3, #3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3208      	adds	r2, #8
 800602e:	69b9      	ldr	r1, [r7, #24]
 8006030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	2203      	movs	r2, #3
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	43db      	mvns	r3, r3
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	4013      	ands	r3, r2
 800604a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f003 0203 	and.w	r2, r3, #3
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	4313      	orrs	r3, r2
 8006060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 80ae 	beq.w	80061d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	4b5d      	ldr	r3, [pc, #372]	; (80061f0 <HAL_GPIO_Init+0x300>)
 800607c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607e:	4a5c      	ldr	r2, [pc, #368]	; (80061f0 <HAL_GPIO_Init+0x300>)
 8006080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006084:	6453      	str	r3, [r2, #68]	; 0x44
 8006086:	4b5a      	ldr	r3, [pc, #360]	; (80061f0 <HAL_GPIO_Init+0x300>)
 8006088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006092:	4a58      	ldr	r2, [pc, #352]	; (80061f4 <HAL_GPIO_Init+0x304>)
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	089b      	lsrs	r3, r3, #2
 8006098:	3302      	adds	r3, #2
 800609a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800609e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	220f      	movs	r2, #15
 80060aa:	fa02 f303 	lsl.w	r3, r2, r3
 80060ae:	43db      	mvns	r3, r3
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	4013      	ands	r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a4f      	ldr	r2, [pc, #316]	; (80061f8 <HAL_GPIO_Init+0x308>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d025      	beq.n	800610a <HAL_GPIO_Init+0x21a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a4e      	ldr	r2, [pc, #312]	; (80061fc <HAL_GPIO_Init+0x30c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d01f      	beq.n	8006106 <HAL_GPIO_Init+0x216>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a4d      	ldr	r2, [pc, #308]	; (8006200 <HAL_GPIO_Init+0x310>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d019      	beq.n	8006102 <HAL_GPIO_Init+0x212>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a4c      	ldr	r2, [pc, #304]	; (8006204 <HAL_GPIO_Init+0x314>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <HAL_GPIO_Init+0x20e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a4b      	ldr	r2, [pc, #300]	; (8006208 <HAL_GPIO_Init+0x318>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00d      	beq.n	80060fa <HAL_GPIO_Init+0x20a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a4a      	ldr	r2, [pc, #296]	; (800620c <HAL_GPIO_Init+0x31c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d007      	beq.n	80060f6 <HAL_GPIO_Init+0x206>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a49      	ldr	r2, [pc, #292]	; (8006210 <HAL_GPIO_Init+0x320>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d101      	bne.n	80060f2 <HAL_GPIO_Init+0x202>
 80060ee:	2306      	movs	r3, #6
 80060f0:	e00c      	b.n	800610c <HAL_GPIO_Init+0x21c>
 80060f2:	2307      	movs	r3, #7
 80060f4:	e00a      	b.n	800610c <HAL_GPIO_Init+0x21c>
 80060f6:	2305      	movs	r3, #5
 80060f8:	e008      	b.n	800610c <HAL_GPIO_Init+0x21c>
 80060fa:	2304      	movs	r3, #4
 80060fc:	e006      	b.n	800610c <HAL_GPIO_Init+0x21c>
 80060fe:	2303      	movs	r3, #3
 8006100:	e004      	b.n	800610c <HAL_GPIO_Init+0x21c>
 8006102:	2302      	movs	r3, #2
 8006104:	e002      	b.n	800610c <HAL_GPIO_Init+0x21c>
 8006106:	2301      	movs	r3, #1
 8006108:	e000      	b.n	800610c <HAL_GPIO_Init+0x21c>
 800610a:	2300      	movs	r3, #0
 800610c:	69fa      	ldr	r2, [r7, #28]
 800610e:	f002 0203 	and.w	r2, r2, #3
 8006112:	0092      	lsls	r2, r2, #2
 8006114:	4093      	lsls	r3, r2
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	4313      	orrs	r3, r2
 800611a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800611c:	4935      	ldr	r1, [pc, #212]	; (80061f4 <HAL_GPIO_Init+0x304>)
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	089b      	lsrs	r3, r3, #2
 8006122:	3302      	adds	r3, #2
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800612a:	4b3a      	ldr	r3, [pc, #232]	; (8006214 <HAL_GPIO_Init+0x324>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	43db      	mvns	r3, r3
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	4013      	ands	r3, r2
 8006138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800614e:	4a31      	ldr	r2, [pc, #196]	; (8006214 <HAL_GPIO_Init+0x324>)
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006154:	4b2f      	ldr	r3, [pc, #188]	; (8006214 <HAL_GPIO_Init+0x324>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	43db      	mvns	r3, r3
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	4013      	ands	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006178:	4a26      	ldr	r2, [pc, #152]	; (8006214 <HAL_GPIO_Init+0x324>)
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800617e:	4b25      	ldr	r3, [pc, #148]	; (8006214 <HAL_GPIO_Init+0x324>)
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	43db      	mvns	r3, r3
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	4013      	ands	r3, r2
 800618c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061a2:	4a1c      	ldr	r2, [pc, #112]	; (8006214 <HAL_GPIO_Init+0x324>)
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061a8:	4b1a      	ldr	r3, [pc, #104]	; (8006214 <HAL_GPIO_Init+0x324>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	43db      	mvns	r3, r3
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	4013      	ands	r3, r2
 80061b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d003      	beq.n	80061cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061cc:	4a11      	ldr	r2, [pc, #68]	; (8006214 <HAL_GPIO_Init+0x324>)
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	3301      	adds	r3, #1
 80061d6:	61fb      	str	r3, [r7, #28]
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	2b0f      	cmp	r3, #15
 80061dc:	f67f ae96 	bls.w	8005f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80061e0:	bf00      	nop
 80061e2:	bf00      	nop
 80061e4:	3724      	adds	r7, #36	; 0x24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	40023800 	.word	0x40023800
 80061f4:	40013800 	.word	0x40013800
 80061f8:	40020000 	.word	0x40020000
 80061fc:	40020400 	.word	0x40020400
 8006200:	40020800 	.word	0x40020800
 8006204:	40020c00 	.word	0x40020c00
 8006208:	40021000 	.word	0x40021000
 800620c:	40021400 	.word	0x40021400
 8006210:	40021800 	.word	0x40021800
 8006214:	40013c00 	.word	0x40013c00

08006218 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691a      	ldr	r2, [r3, #16]
 8006228:	887b      	ldrh	r3, [r7, #2]
 800622a:	4013      	ands	r3, r2
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006230:	2301      	movs	r3, #1
 8006232:	73fb      	strb	r3, [r7, #15]
 8006234:	e001      	b.n	800623a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800623a:	7bfb      	ldrb	r3, [r7, #15]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	807b      	strh	r3, [r7, #2]
 8006254:	4613      	mov	r3, r2
 8006256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006258:	787b      	ldrb	r3, [r7, #1]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800625e:	887a      	ldrh	r2, [r7, #2]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006264:	e003      	b.n	800626e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006266:	887b      	ldrh	r3, [r7, #2]
 8006268:	041a      	lsls	r2, r3, #16
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	619a      	str	r2, [r3, #24]
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	460b      	mov	r3, r1
 8006284:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800628c:	887a      	ldrh	r2, [r7, #2]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4013      	ands	r3, r2
 8006292:	041a      	lsls	r2, r3, #16
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	43d9      	mvns	r1, r3
 8006298:	887b      	ldrh	r3, [r7, #2]
 800629a:	400b      	ands	r3, r1
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	619a      	str	r2, [r3, #24]
}
 80062a2:	bf00      	nop
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
	...

080062b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80062ba:	4b08      	ldr	r3, [pc, #32]	; (80062dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062bc:	695a      	ldr	r2, [r3, #20]
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	4013      	ands	r3, r2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d006      	beq.n	80062d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062c6:	4a05      	ldr	r2, [pc, #20]	; (80062dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062c8:	88fb      	ldrh	r3, [r7, #6]
 80062ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062cc:	88fb      	ldrh	r3, [r7, #6]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fd fad4 	bl	800387c <HAL_GPIO_EXTI_Callback>
  }
}
 80062d4:	bf00      	nop
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40013c00 	.word	0x40013c00

080062e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80062ea:	2300      	movs	r3, #0
 80062ec:	603b      	str	r3, [r7, #0]
 80062ee:	4b20      	ldr	r3, [pc, #128]	; (8006370 <HAL_PWREx_EnableOverDrive+0x90>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	4a1f      	ldr	r2, [pc, #124]	; (8006370 <HAL_PWREx_EnableOverDrive+0x90>)
 80062f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f8:	6413      	str	r3, [r2, #64]	; 0x40
 80062fa:	4b1d      	ldr	r3, [pc, #116]	; (8006370 <HAL_PWREx_EnableOverDrive+0x90>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006302:	603b      	str	r3, [r7, #0]
 8006304:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006306:	4b1b      	ldr	r3, [pc, #108]	; (8006374 <HAL_PWREx_EnableOverDrive+0x94>)
 8006308:	2201      	movs	r2, #1
 800630a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800630c:	f7fe f8f6 	bl	80044fc <HAL_GetTick>
 8006310:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006312:	e009      	b.n	8006328 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006314:	f7fe f8f2 	bl	80044fc <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006322:	d901      	bls.n	8006328 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e01f      	b.n	8006368 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006328:	4b13      	ldr	r3, [pc, #76]	; (8006378 <HAL_PWREx_EnableOverDrive+0x98>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006334:	d1ee      	bne.n	8006314 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006336:	4b11      	ldr	r3, [pc, #68]	; (800637c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006338:	2201      	movs	r2, #1
 800633a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800633c:	f7fe f8de 	bl	80044fc <HAL_GetTick>
 8006340:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006342:	e009      	b.n	8006358 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006344:	f7fe f8da 	bl	80044fc <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006352:	d901      	bls.n	8006358 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e007      	b.n	8006368 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006358:	4b07      	ldr	r3, [pc, #28]	; (8006378 <HAL_PWREx_EnableOverDrive+0x98>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006364:	d1ee      	bne.n	8006344 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	40023800 	.word	0x40023800
 8006374:	420e0040 	.word	0x420e0040
 8006378:	40007000 	.word	0x40007000
 800637c:	420e0044 	.word	0x420e0044

08006380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e0cc      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006394:	4b68      	ldr	r3, [pc, #416]	; (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d90c      	bls.n	80063bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063a2:	4b65      	ldr	r3, [pc, #404]	; (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	b2d2      	uxtb	r2, r2
 80063a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063aa:	4b63      	ldr	r3, [pc, #396]	; (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d001      	beq.n	80063bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e0b8      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d020      	beq.n	800640a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063d4:	4b59      	ldr	r3, [pc, #356]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	4a58      	ldr	r2, [pc, #352]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063ec:	4b53      	ldr	r3, [pc, #332]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	4a52      	ldr	r2, [pc, #328]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80063f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063f8:	4b50      	ldr	r3, [pc, #320]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	494d      	ldr	r1, [pc, #308]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006406:	4313      	orrs	r3, r2
 8006408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d044      	beq.n	80064a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d107      	bne.n	800642e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800641e:	4b47      	ldr	r3, [pc, #284]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d119      	bne.n	800645e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e07f      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d003      	beq.n	800643e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800643a:	2b03      	cmp	r3, #3
 800643c:	d107      	bne.n	800644e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800643e:	4b3f      	ldr	r3, [pc, #252]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d109      	bne.n	800645e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e06f      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800644e:	4b3b      	ldr	r3, [pc, #236]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e067      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800645e:	4b37      	ldr	r3, [pc, #220]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f023 0203 	bic.w	r2, r3, #3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	4934      	ldr	r1, [pc, #208]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 800646c:	4313      	orrs	r3, r2
 800646e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006470:	f7fe f844 	bl	80044fc <HAL_GetTick>
 8006474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006476:	e00a      	b.n	800648e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006478:	f7fe f840 	bl	80044fc <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	f241 3288 	movw	r2, #5000	; 0x1388
 8006486:	4293      	cmp	r3, r2
 8006488:	d901      	bls.n	800648e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e04f      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800648e:	4b2b      	ldr	r3, [pc, #172]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f003 020c 	and.w	r2, r3, #12
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	429a      	cmp	r2, r3
 800649e:	d1eb      	bne.n	8006478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064a0:	4b25      	ldr	r3, [pc, #148]	; (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d20c      	bcs.n	80064c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ae:	4b22      	ldr	r3, [pc, #136]	; (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064b6:	4b20      	ldr	r3, [pc, #128]	; (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d001      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e032      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064d4:	4b19      	ldr	r3, [pc, #100]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	4916      	ldr	r1, [pc, #88]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064f2:	4b12      	ldr	r3, [pc, #72]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	490e      	ldr	r1, [pc, #56]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006502:	4313      	orrs	r3, r2
 8006504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006506:	f000 f855 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 800650a:	4602      	mov	r2, r0
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	091b      	lsrs	r3, r3, #4
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	490a      	ldr	r1, [pc, #40]	; (8006540 <HAL_RCC_ClockConfig+0x1c0>)
 8006518:	5ccb      	ldrb	r3, [r1, r3]
 800651a:	fa22 f303 	lsr.w	r3, r2, r3
 800651e:	4a09      	ldr	r2, [pc, #36]	; (8006544 <HAL_RCC_ClockConfig+0x1c4>)
 8006520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006522:	4b09      	ldr	r3, [pc, #36]	; (8006548 <HAL_RCC_ClockConfig+0x1c8>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	f7fd ffa4 	bl	8004474 <HAL_InitTick>

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40023c00 	.word	0x40023c00
 800653c:	40023800 	.word	0x40023800
 8006540:	0800e2e0 	.word	0x0800e2e0
 8006544:	20000054 	.word	0x20000054
 8006548:	20000058 	.word	0x20000058

0800654c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006550:	4b03      	ldr	r3, [pc, #12]	; (8006560 <HAL_RCC_GetHCLKFreq+0x14>)
 8006552:	681b      	ldr	r3, [r3, #0]
}
 8006554:	4618      	mov	r0, r3
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	20000054 	.word	0x20000054

08006564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006568:	f7ff fff0 	bl	800654c <HAL_RCC_GetHCLKFreq>
 800656c:	4602      	mov	r2, r0
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	0a9b      	lsrs	r3, r3, #10
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	4903      	ldr	r1, [pc, #12]	; (8006588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800657a:	5ccb      	ldrb	r3, [r1, r3]
 800657c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006580:	4618      	mov	r0, r3
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40023800 	.word	0x40023800
 8006588:	0800e2f0 	.word	0x0800e2f0

0800658c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006590:	f7ff ffdc 	bl	800654c <HAL_RCC_GetHCLKFreq>
 8006594:	4602      	mov	r2, r0
 8006596:	4b05      	ldr	r3, [pc, #20]	; (80065ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	0b5b      	lsrs	r3, r3, #13
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	4903      	ldr	r1, [pc, #12]	; (80065b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065a2:	5ccb      	ldrb	r3, [r1, r3]
 80065a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40023800 	.word	0x40023800
 80065b0:	0800e2f0 	.word	0x0800e2f0

080065b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065b8:	b0ae      	sub	sp, #184	; 0xb8
 80065ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065da:	4bcb      	ldr	r3, [pc, #812]	; (8006908 <HAL_RCC_GetSysClockFreq+0x354>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 030c 	and.w	r3, r3, #12
 80065e2:	2b0c      	cmp	r3, #12
 80065e4:	f200 8206 	bhi.w	80069f4 <HAL_RCC_GetSysClockFreq+0x440>
 80065e8:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80065ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ee:	bf00      	nop
 80065f0:	08006625 	.word	0x08006625
 80065f4:	080069f5 	.word	0x080069f5
 80065f8:	080069f5 	.word	0x080069f5
 80065fc:	080069f5 	.word	0x080069f5
 8006600:	0800662d 	.word	0x0800662d
 8006604:	080069f5 	.word	0x080069f5
 8006608:	080069f5 	.word	0x080069f5
 800660c:	080069f5 	.word	0x080069f5
 8006610:	08006635 	.word	0x08006635
 8006614:	080069f5 	.word	0x080069f5
 8006618:	080069f5 	.word	0x080069f5
 800661c:	080069f5 	.word	0x080069f5
 8006620:	08006825 	.word	0x08006825
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006624:	4bb9      	ldr	r3, [pc, #740]	; (800690c <HAL_RCC_GetSysClockFreq+0x358>)
 8006626:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800662a:	e1e7      	b.n	80069fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800662c:	4bb8      	ldr	r3, [pc, #736]	; (8006910 <HAL_RCC_GetSysClockFreq+0x35c>)
 800662e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006632:	e1e3      	b.n	80069fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006634:	4bb4      	ldr	r3, [pc, #720]	; (8006908 <HAL_RCC_GetSysClockFreq+0x354>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800663c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006640:	4bb1      	ldr	r3, [pc, #708]	; (8006908 <HAL_RCC_GetSysClockFreq+0x354>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d071      	beq.n	8006730 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800664c:	4bae      	ldr	r3, [pc, #696]	; (8006908 <HAL_RCC_GetSysClockFreq+0x354>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	099b      	lsrs	r3, r3, #6
 8006652:	2200      	movs	r2, #0
 8006654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006658:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800665c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006664:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006668:	2300      	movs	r3, #0
 800666a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800666e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006672:	4622      	mov	r2, r4
 8006674:	462b      	mov	r3, r5
 8006676:	f04f 0000 	mov.w	r0, #0
 800667a:	f04f 0100 	mov.w	r1, #0
 800667e:	0159      	lsls	r1, r3, #5
 8006680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006684:	0150      	lsls	r0, r2, #5
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	4621      	mov	r1, r4
 800668c:	1a51      	subs	r1, r2, r1
 800668e:	6439      	str	r1, [r7, #64]	; 0x40
 8006690:	4629      	mov	r1, r5
 8006692:	eb63 0301 	sbc.w	r3, r3, r1
 8006696:	647b      	str	r3, [r7, #68]	; 0x44
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	f04f 0300 	mov.w	r3, #0
 80066a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80066a4:	4649      	mov	r1, r9
 80066a6:	018b      	lsls	r3, r1, #6
 80066a8:	4641      	mov	r1, r8
 80066aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066ae:	4641      	mov	r1, r8
 80066b0:	018a      	lsls	r2, r1, #6
 80066b2:	4641      	mov	r1, r8
 80066b4:	1a51      	subs	r1, r2, r1
 80066b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80066b8:	4649      	mov	r1, r9
 80066ba:	eb63 0301 	sbc.w	r3, r3, r1
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	f04f 0300 	mov.w	r3, #0
 80066c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80066cc:	4649      	mov	r1, r9
 80066ce:	00cb      	lsls	r3, r1, #3
 80066d0:	4641      	mov	r1, r8
 80066d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066d6:	4641      	mov	r1, r8
 80066d8:	00ca      	lsls	r2, r1, #3
 80066da:	4610      	mov	r0, r2
 80066dc:	4619      	mov	r1, r3
 80066de:	4603      	mov	r3, r0
 80066e0:	4622      	mov	r2, r4
 80066e2:	189b      	adds	r3, r3, r2
 80066e4:	633b      	str	r3, [r7, #48]	; 0x30
 80066e6:	462b      	mov	r3, r5
 80066e8:	460a      	mov	r2, r1
 80066ea:	eb42 0303 	adc.w	r3, r2, r3
 80066ee:	637b      	str	r3, [r7, #52]	; 0x34
 80066f0:	f04f 0200 	mov.w	r2, #0
 80066f4:	f04f 0300 	mov.w	r3, #0
 80066f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80066fc:	4629      	mov	r1, r5
 80066fe:	024b      	lsls	r3, r1, #9
 8006700:	4621      	mov	r1, r4
 8006702:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006706:	4621      	mov	r1, r4
 8006708:	024a      	lsls	r2, r1, #9
 800670a:	4610      	mov	r0, r2
 800670c:	4619      	mov	r1, r3
 800670e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006712:	2200      	movs	r2, #0
 8006714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006718:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800671c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006720:	f7fa fab2 	bl	8000c88 <__aeabi_uldivmod>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4613      	mov	r3, r2
 800672a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800672e:	e067      	b.n	8006800 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006730:	4b75      	ldr	r3, [pc, #468]	; (8006908 <HAL_RCC_GetSysClockFreq+0x354>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	099b      	lsrs	r3, r3, #6
 8006736:	2200      	movs	r2, #0
 8006738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800673c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006740:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006748:	67bb      	str	r3, [r7, #120]	; 0x78
 800674a:	2300      	movs	r3, #0
 800674c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800674e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006752:	4622      	mov	r2, r4
 8006754:	462b      	mov	r3, r5
 8006756:	f04f 0000 	mov.w	r0, #0
 800675a:	f04f 0100 	mov.w	r1, #0
 800675e:	0159      	lsls	r1, r3, #5
 8006760:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006764:	0150      	lsls	r0, r2, #5
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	4621      	mov	r1, r4
 800676c:	1a51      	subs	r1, r2, r1
 800676e:	62b9      	str	r1, [r7, #40]	; 0x28
 8006770:	4629      	mov	r1, r5
 8006772:	eb63 0301 	sbc.w	r3, r3, r1
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006784:	4649      	mov	r1, r9
 8006786:	018b      	lsls	r3, r1, #6
 8006788:	4641      	mov	r1, r8
 800678a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800678e:	4641      	mov	r1, r8
 8006790:	018a      	lsls	r2, r1, #6
 8006792:	4641      	mov	r1, r8
 8006794:	ebb2 0a01 	subs.w	sl, r2, r1
 8006798:	4649      	mov	r1, r9
 800679a:	eb63 0b01 	sbc.w	fp, r3, r1
 800679e:	f04f 0200 	mov.w	r2, #0
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067b2:	4692      	mov	sl, r2
 80067b4:	469b      	mov	fp, r3
 80067b6:	4623      	mov	r3, r4
 80067b8:	eb1a 0303 	adds.w	r3, sl, r3
 80067bc:	623b      	str	r3, [r7, #32]
 80067be:	462b      	mov	r3, r5
 80067c0:	eb4b 0303 	adc.w	r3, fp, r3
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
 80067c6:	f04f 0200 	mov.w	r2, #0
 80067ca:	f04f 0300 	mov.w	r3, #0
 80067ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80067d2:	4629      	mov	r1, r5
 80067d4:	028b      	lsls	r3, r1, #10
 80067d6:	4621      	mov	r1, r4
 80067d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067dc:	4621      	mov	r1, r4
 80067de:	028a      	lsls	r2, r1, #10
 80067e0:	4610      	mov	r0, r2
 80067e2:	4619      	mov	r1, r3
 80067e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067e8:	2200      	movs	r2, #0
 80067ea:	673b      	str	r3, [r7, #112]	; 0x70
 80067ec:	677a      	str	r2, [r7, #116]	; 0x74
 80067ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80067f2:	f7fa fa49 	bl	8000c88 <__aeabi_uldivmod>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4613      	mov	r3, r2
 80067fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006800:	4b41      	ldr	r3, [pc, #260]	; (8006908 <HAL_RCC_GetSysClockFreq+0x354>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	0c1b      	lsrs	r3, r3, #16
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	3301      	adds	r3, #1
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006816:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800681a:	fbb2 f3f3 	udiv	r3, r2, r3
 800681e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006822:	e0eb      	b.n	80069fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006824:	4b38      	ldr	r3, [pc, #224]	; (8006908 <HAL_RCC_GetSysClockFreq+0x354>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800682c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006830:	4b35      	ldr	r3, [pc, #212]	; (8006908 <HAL_RCC_GetSysClockFreq+0x354>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d06b      	beq.n	8006914 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800683c:	4b32      	ldr	r3, [pc, #200]	; (8006908 <HAL_RCC_GetSysClockFreq+0x354>)
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	099b      	lsrs	r3, r3, #6
 8006842:	2200      	movs	r2, #0
 8006844:	66bb      	str	r3, [r7, #104]	; 0x68
 8006846:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800684a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800684e:	663b      	str	r3, [r7, #96]	; 0x60
 8006850:	2300      	movs	r3, #0
 8006852:	667b      	str	r3, [r7, #100]	; 0x64
 8006854:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006858:	4622      	mov	r2, r4
 800685a:	462b      	mov	r3, r5
 800685c:	f04f 0000 	mov.w	r0, #0
 8006860:	f04f 0100 	mov.w	r1, #0
 8006864:	0159      	lsls	r1, r3, #5
 8006866:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800686a:	0150      	lsls	r0, r2, #5
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4621      	mov	r1, r4
 8006872:	1a51      	subs	r1, r2, r1
 8006874:	61b9      	str	r1, [r7, #24]
 8006876:	4629      	mov	r1, r5
 8006878:	eb63 0301 	sbc.w	r3, r3, r1
 800687c:	61fb      	str	r3, [r7, #28]
 800687e:	f04f 0200 	mov.w	r2, #0
 8006882:	f04f 0300 	mov.w	r3, #0
 8006886:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800688a:	4659      	mov	r1, fp
 800688c:	018b      	lsls	r3, r1, #6
 800688e:	4651      	mov	r1, sl
 8006890:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006894:	4651      	mov	r1, sl
 8006896:	018a      	lsls	r2, r1, #6
 8006898:	4651      	mov	r1, sl
 800689a:	ebb2 0801 	subs.w	r8, r2, r1
 800689e:	4659      	mov	r1, fp
 80068a0:	eb63 0901 	sbc.w	r9, r3, r1
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068b8:	4690      	mov	r8, r2
 80068ba:	4699      	mov	r9, r3
 80068bc:	4623      	mov	r3, r4
 80068be:	eb18 0303 	adds.w	r3, r8, r3
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	462b      	mov	r3, r5
 80068c6:	eb49 0303 	adc.w	r3, r9, r3
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80068d8:	4629      	mov	r1, r5
 80068da:	024b      	lsls	r3, r1, #9
 80068dc:	4621      	mov	r1, r4
 80068de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80068e2:	4621      	mov	r1, r4
 80068e4:	024a      	lsls	r2, r1, #9
 80068e6:	4610      	mov	r0, r2
 80068e8:	4619      	mov	r1, r3
 80068ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068ee:	2200      	movs	r2, #0
 80068f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80068f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80068f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068f8:	f7fa f9c6 	bl	8000c88 <__aeabi_uldivmod>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4613      	mov	r3, r2
 8006902:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006906:	e065      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0x420>
 8006908:	40023800 	.word	0x40023800
 800690c:	00f42400 	.word	0x00f42400
 8006910:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006914:	4b3d      	ldr	r3, [pc, #244]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x458>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	099b      	lsrs	r3, r3, #6
 800691a:	2200      	movs	r2, #0
 800691c:	4618      	mov	r0, r3
 800691e:	4611      	mov	r1, r2
 8006920:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006924:	653b      	str	r3, [r7, #80]	; 0x50
 8006926:	2300      	movs	r3, #0
 8006928:	657b      	str	r3, [r7, #84]	; 0x54
 800692a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800692e:	4642      	mov	r2, r8
 8006930:	464b      	mov	r3, r9
 8006932:	f04f 0000 	mov.w	r0, #0
 8006936:	f04f 0100 	mov.w	r1, #0
 800693a:	0159      	lsls	r1, r3, #5
 800693c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006940:	0150      	lsls	r0, r2, #5
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4641      	mov	r1, r8
 8006948:	1a51      	subs	r1, r2, r1
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	4649      	mov	r1, r9
 800694e:	eb63 0301 	sbc.w	r3, r3, r1
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006960:	4659      	mov	r1, fp
 8006962:	018b      	lsls	r3, r1, #6
 8006964:	4651      	mov	r1, sl
 8006966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800696a:	4651      	mov	r1, sl
 800696c:	018a      	lsls	r2, r1, #6
 800696e:	4651      	mov	r1, sl
 8006970:	1a54      	subs	r4, r2, r1
 8006972:	4659      	mov	r1, fp
 8006974:	eb63 0501 	sbc.w	r5, r3, r1
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	f04f 0300 	mov.w	r3, #0
 8006980:	00eb      	lsls	r3, r5, #3
 8006982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006986:	00e2      	lsls	r2, r4, #3
 8006988:	4614      	mov	r4, r2
 800698a:	461d      	mov	r5, r3
 800698c:	4643      	mov	r3, r8
 800698e:	18e3      	adds	r3, r4, r3
 8006990:	603b      	str	r3, [r7, #0]
 8006992:	464b      	mov	r3, r9
 8006994:	eb45 0303 	adc.w	r3, r5, r3
 8006998:	607b      	str	r3, [r7, #4]
 800699a:	f04f 0200 	mov.w	r2, #0
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069a6:	4629      	mov	r1, r5
 80069a8:	028b      	lsls	r3, r1, #10
 80069aa:	4621      	mov	r1, r4
 80069ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069b0:	4621      	mov	r1, r4
 80069b2:	028a      	lsls	r2, r1, #10
 80069b4:	4610      	mov	r0, r2
 80069b6:	4619      	mov	r1, r3
 80069b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069bc:	2200      	movs	r2, #0
 80069be:	64bb      	str	r3, [r7, #72]	; 0x48
 80069c0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80069c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80069c6:	f7fa f95f 	bl	8000c88 <__aeabi_uldivmod>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	4613      	mov	r3, r2
 80069d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80069d4:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x458>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	0f1b      	lsrs	r3, r3, #28
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80069e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80069f2:	e003      	b.n	80069fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069f4:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <HAL_RCC_GetSysClockFreq+0x45c>)
 80069f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80069fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	37b8      	adds	r7, #184	; 0xb8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a0a:	bf00      	nop
 8006a0c:	40023800 	.word	0x40023800
 8006a10:	00f42400 	.word	0x00f42400

08006a14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e28d      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 8083 	beq.w	8006b3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a34:	4b94      	ldr	r3, [pc, #592]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f003 030c 	and.w	r3, r3, #12
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d019      	beq.n	8006a74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006a40:	4b91      	ldr	r3, [pc, #580]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	d106      	bne.n	8006a5a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006a4c:	4b8e      	ldr	r3, [pc, #568]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a58:	d00c      	beq.n	8006a74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a5a:	4b8b      	ldr	r3, [pc, #556]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006a62:	2b0c      	cmp	r3, #12
 8006a64:	d112      	bne.n	8006a8c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a66:	4b88      	ldr	r3, [pc, #544]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a72:	d10b      	bne.n	8006a8c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a74:	4b84      	ldr	r3, [pc, #528]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d05b      	beq.n	8006b38 <HAL_RCC_OscConfig+0x124>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d157      	bne.n	8006b38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e25a      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a94:	d106      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x90>
 8006a96:	4b7c      	ldr	r3, [pc, #496]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a7b      	ldr	r2, [pc, #492]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	e01d      	b.n	8006ae0 <HAL_RCC_OscConfig+0xcc>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006aac:	d10c      	bne.n	8006ac8 <HAL_RCC_OscConfig+0xb4>
 8006aae:	4b76      	ldr	r3, [pc, #472]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a75      	ldr	r2, [pc, #468]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	4b73      	ldr	r3, [pc, #460]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a72      	ldr	r2, [pc, #456]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	e00b      	b.n	8006ae0 <HAL_RCC_OscConfig+0xcc>
 8006ac8:	4b6f      	ldr	r3, [pc, #444]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a6e      	ldr	r2, [pc, #440]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	4b6c      	ldr	r3, [pc, #432]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a6b      	ldr	r2, [pc, #428]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d013      	beq.n	8006b10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae8:	f7fd fd08 	bl	80044fc <HAL_GetTick>
 8006aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006af0:	f7fd fd04 	bl	80044fc <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b64      	cmp	r3, #100	; 0x64
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e21f      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b02:	4b61      	ldr	r3, [pc, #388]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0f0      	beq.n	8006af0 <HAL_RCC_OscConfig+0xdc>
 8006b0e:	e014      	b.n	8006b3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b10:	f7fd fcf4 	bl	80044fc <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b18:	f7fd fcf0 	bl	80044fc <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b64      	cmp	r3, #100	; 0x64
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e20b      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b2a:	4b57      	ldr	r3, [pc, #348]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f0      	bne.n	8006b18 <HAL_RCC_OscConfig+0x104>
 8006b36:	e000      	b.n	8006b3a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d06f      	beq.n	8006c26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b46:	4b50      	ldr	r3, [pc, #320]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d017      	beq.n	8006b82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006b52:	4b4d      	ldr	r3, [pc, #308]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d105      	bne.n	8006b6a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006b5e:	4b4a      	ldr	r3, [pc, #296]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00b      	beq.n	8006b82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b6a:	4b47      	ldr	r3, [pc, #284]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006b72:	2b0c      	cmp	r3, #12
 8006b74:	d11c      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b76:	4b44      	ldr	r3, [pc, #272]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d116      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b82:	4b41      	ldr	r3, [pc, #260]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d005      	beq.n	8006b9a <HAL_RCC_OscConfig+0x186>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d001      	beq.n	8006b9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e1d3      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b9a:	4b3b      	ldr	r3, [pc, #236]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	4937      	ldr	r1, [pc, #220]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bae:	e03a      	b.n	8006c26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d020      	beq.n	8006bfa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bb8:	4b34      	ldr	r3, [pc, #208]	; (8006c8c <HAL_RCC_OscConfig+0x278>)
 8006bba:	2201      	movs	r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bbe:	f7fd fc9d 	bl	80044fc <HAL_GetTick>
 8006bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bc6:	f7fd fc99 	bl	80044fc <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e1b4      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd8:	4b2b      	ldr	r3, [pc, #172]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0f0      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006be4:	4b28      	ldr	r3, [pc, #160]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	4925      	ldr	r1, [pc, #148]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	600b      	str	r3, [r1, #0]
 8006bf8:	e015      	b.n	8006c26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bfa:	4b24      	ldr	r3, [pc, #144]	; (8006c8c <HAL_RCC_OscConfig+0x278>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c00:	f7fd fc7c 	bl	80044fc <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c08:	f7fd fc78 	bl	80044fc <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e193      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c1a:	4b1b      	ldr	r3, [pc, #108]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1f0      	bne.n	8006c08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d036      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d016      	beq.n	8006c68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c3a:	4b15      	ldr	r3, [pc, #84]	; (8006c90 <HAL_RCC_OscConfig+0x27c>)
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c40:	f7fd fc5c 	bl	80044fc <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c48:	f7fd fc58 	bl	80044fc <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e173      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c5a:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <HAL_RCC_OscConfig+0x274>)
 8006c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0f0      	beq.n	8006c48 <HAL_RCC_OscConfig+0x234>
 8006c66:	e01b      	b.n	8006ca0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c68:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <HAL_RCC_OscConfig+0x27c>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c6e:	f7fd fc45 	bl	80044fc <HAL_GetTick>
 8006c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c74:	e00e      	b.n	8006c94 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c76:	f7fd fc41 	bl	80044fc <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d907      	bls.n	8006c94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e15c      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
 8006c88:	40023800 	.word	0x40023800
 8006c8c:	42470000 	.word	0x42470000
 8006c90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c94:	4b8a      	ldr	r3, [pc, #552]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1ea      	bne.n	8006c76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 8097 	beq.w	8006ddc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cb2:	4b83      	ldr	r3, [pc, #524]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10f      	bne.n	8006cde <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60bb      	str	r3, [r7, #8]
 8006cc2:	4b7f      	ldr	r3, [pc, #508]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	4a7e      	ldr	r2, [pc, #504]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8006cce:	4b7c      	ldr	r3, [pc, #496]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cd6:	60bb      	str	r3, [r7, #8]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cde:	4b79      	ldr	r3, [pc, #484]	; (8006ec4 <HAL_RCC_OscConfig+0x4b0>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d118      	bne.n	8006d1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cea:	4b76      	ldr	r3, [pc, #472]	; (8006ec4 <HAL_RCC_OscConfig+0x4b0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a75      	ldr	r2, [pc, #468]	; (8006ec4 <HAL_RCC_OscConfig+0x4b0>)
 8006cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cf6:	f7fd fc01 	bl	80044fc <HAL_GetTick>
 8006cfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cfc:	e008      	b.n	8006d10 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cfe:	f7fd fbfd 	bl	80044fc <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e118      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d10:	4b6c      	ldr	r3, [pc, #432]	; (8006ec4 <HAL_RCC_OscConfig+0x4b0>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0f0      	beq.n	8006cfe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d106      	bne.n	8006d32 <HAL_RCC_OscConfig+0x31e>
 8006d24:	4b66      	ldr	r3, [pc, #408]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d28:	4a65      	ldr	r2, [pc, #404]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006d2a:	f043 0301 	orr.w	r3, r3, #1
 8006d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d30:	e01c      	b.n	8006d6c <HAL_RCC_OscConfig+0x358>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	2b05      	cmp	r3, #5
 8006d38:	d10c      	bne.n	8006d54 <HAL_RCC_OscConfig+0x340>
 8006d3a:	4b61      	ldr	r3, [pc, #388]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3e:	4a60      	ldr	r2, [pc, #384]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006d40:	f043 0304 	orr.w	r3, r3, #4
 8006d44:	6713      	str	r3, [r2, #112]	; 0x70
 8006d46:	4b5e      	ldr	r3, [pc, #376]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4a:	4a5d      	ldr	r2, [pc, #372]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006d4c:	f043 0301 	orr.w	r3, r3, #1
 8006d50:	6713      	str	r3, [r2, #112]	; 0x70
 8006d52:	e00b      	b.n	8006d6c <HAL_RCC_OscConfig+0x358>
 8006d54:	4b5a      	ldr	r3, [pc, #360]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d58:	4a59      	ldr	r2, [pc, #356]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006d5a:	f023 0301 	bic.w	r3, r3, #1
 8006d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d60:	4b57      	ldr	r3, [pc, #348]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d64:	4a56      	ldr	r2, [pc, #344]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006d66:	f023 0304 	bic.w	r3, r3, #4
 8006d6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d015      	beq.n	8006da0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d74:	f7fd fbc2 	bl	80044fc <HAL_GetTick>
 8006d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d7a:	e00a      	b.n	8006d92 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d7c:	f7fd fbbe 	bl	80044fc <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e0d7      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d92:	4b4b      	ldr	r3, [pc, #300]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0ee      	beq.n	8006d7c <HAL_RCC_OscConfig+0x368>
 8006d9e:	e014      	b.n	8006dca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da0:	f7fd fbac 	bl	80044fc <HAL_GetTick>
 8006da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006da6:	e00a      	b.n	8006dbe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006da8:	f7fd fba8 	bl	80044fc <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e0c1      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dbe:	4b40      	ldr	r3, [pc, #256]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1ee      	bne.n	8006da8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d105      	bne.n	8006ddc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dd0:	4b3b      	ldr	r3, [pc, #236]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd4:	4a3a      	ldr	r2, [pc, #232]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80ad 	beq.w	8006f40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006de6:	4b36      	ldr	r3, [pc, #216]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 030c 	and.w	r3, r3, #12
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	d060      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d145      	bne.n	8006e86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dfa:	4b33      	ldr	r3, [pc, #204]	; (8006ec8 <HAL_RCC_OscConfig+0x4b4>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e00:	f7fd fb7c 	bl	80044fc <HAL_GetTick>
 8006e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e06:	e008      	b.n	8006e1a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e08:	f7fd fb78 	bl	80044fc <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e093      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e1a:	4b29      	ldr	r3, [pc, #164]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1f0      	bne.n	8006e08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	69da      	ldr	r2, [r3, #28]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	019b      	lsls	r3, r3, #6
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3c:	085b      	lsrs	r3, r3, #1
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	041b      	lsls	r3, r3, #16
 8006e42:	431a      	orrs	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	061b      	lsls	r3, r3, #24
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e50:	071b      	lsls	r3, r3, #28
 8006e52:	491b      	ldr	r1, [pc, #108]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e58:	4b1b      	ldr	r3, [pc, #108]	; (8006ec8 <HAL_RCC_OscConfig+0x4b4>)
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5e:	f7fd fb4d 	bl	80044fc <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e66:	f7fd fb49 	bl	80044fc <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e064      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e78:	4b11      	ldr	r3, [pc, #68]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0f0      	beq.n	8006e66 <HAL_RCC_OscConfig+0x452>
 8006e84:	e05c      	b.n	8006f40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e86:	4b10      	ldr	r3, [pc, #64]	; (8006ec8 <HAL_RCC_OscConfig+0x4b4>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8c:	f7fd fb36 	bl	80044fc <HAL_GetTick>
 8006e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e94:	f7fd fb32 	bl	80044fc <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e04d      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea6:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <HAL_RCC_OscConfig+0x4ac>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f0      	bne.n	8006e94 <HAL_RCC_OscConfig+0x480>
 8006eb2:	e045      	b.n	8006f40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d107      	bne.n	8006ecc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e040      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	40007000 	.word	0x40007000
 8006ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ecc:	4b1f      	ldr	r3, [pc, #124]	; (8006f4c <HAL_RCC_OscConfig+0x538>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d030      	beq.n	8006f3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d129      	bne.n	8006f3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d122      	bne.n	8006f3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006efc:	4013      	ands	r3, r2
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d119      	bne.n	8006f3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	085b      	lsrs	r3, r3, #1
 8006f14:	3b01      	subs	r3, #1
 8006f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d10f      	bne.n	8006f3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d107      	bne.n	8006f3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d001      	beq.n	8006f40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	40023800 	.word	0x40023800

08006f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e041      	b.n	8006fe6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d106      	bne.n	8006f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7fc fe34 	bl	8003be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4610      	mov	r0, r2
 8006f90:	f001 f9b4 	bl	80082fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b01      	cmp	r3, #1
 8007002:	d001      	beq.n	8007008 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e046      	b.n	8007096 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a23      	ldr	r2, [pc, #140]	; (80070a4 <HAL_TIM_Base_Start+0xb4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d022      	beq.n	8007060 <HAL_TIM_Base_Start+0x70>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007022:	d01d      	beq.n	8007060 <HAL_TIM_Base_Start+0x70>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a1f      	ldr	r2, [pc, #124]	; (80070a8 <HAL_TIM_Base_Start+0xb8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d018      	beq.n	8007060 <HAL_TIM_Base_Start+0x70>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1e      	ldr	r2, [pc, #120]	; (80070ac <HAL_TIM_Base_Start+0xbc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d013      	beq.n	8007060 <HAL_TIM_Base_Start+0x70>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1c      	ldr	r2, [pc, #112]	; (80070b0 <HAL_TIM_Base_Start+0xc0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00e      	beq.n	8007060 <HAL_TIM_Base_Start+0x70>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1b      	ldr	r2, [pc, #108]	; (80070b4 <HAL_TIM_Base_Start+0xc4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d009      	beq.n	8007060 <HAL_TIM_Base_Start+0x70>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a19      	ldr	r2, [pc, #100]	; (80070b8 <HAL_TIM_Base_Start+0xc8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d004      	beq.n	8007060 <HAL_TIM_Base_Start+0x70>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a18      	ldr	r2, [pc, #96]	; (80070bc <HAL_TIM_Base_Start+0xcc>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d111      	bne.n	8007084 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b06      	cmp	r3, #6
 8007070:	d010      	beq.n	8007094 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f042 0201 	orr.w	r2, r2, #1
 8007080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007082:	e007      	b.n	8007094 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f042 0201 	orr.w	r2, r2, #1
 8007092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	40010000 	.word	0x40010000
 80070a8:	40000400 	.word	0x40000400
 80070ac:	40000800 	.word	0x40000800
 80070b0:	40000c00 	.word	0x40000c00
 80070b4:	40010400 	.word	0x40010400
 80070b8:	40014000 	.word	0x40014000
 80070bc:	40001800 	.word	0x40001800

080070c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e041      	b.n	8007156 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d106      	bne.n	80070ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f839 	bl	800715e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3304      	adds	r3, #4
 80070fc:	4619      	mov	r1, r3
 80070fe:	4610      	mov	r0, r2
 8007100:	f001 f8fc 	bl	80082fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
	...

08007174 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d109      	bne.n	8007198 <HAL_TIM_PWM_Start+0x24>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b01      	cmp	r3, #1
 800718e:	bf14      	ite	ne
 8007190:	2301      	movne	r3, #1
 8007192:	2300      	moveq	r3, #0
 8007194:	b2db      	uxtb	r3, r3
 8007196:	e022      	b.n	80071de <HAL_TIM_PWM_Start+0x6a>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2b04      	cmp	r3, #4
 800719c:	d109      	bne.n	80071b2 <HAL_TIM_PWM_Start+0x3e>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	bf14      	ite	ne
 80071aa:	2301      	movne	r3, #1
 80071ac:	2300      	moveq	r3, #0
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	e015      	b.n	80071de <HAL_TIM_PWM_Start+0x6a>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	d109      	bne.n	80071cc <HAL_TIM_PWM_Start+0x58>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	bf14      	ite	ne
 80071c4:	2301      	movne	r3, #1
 80071c6:	2300      	moveq	r3, #0
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	e008      	b.n	80071de <HAL_TIM_PWM_Start+0x6a>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	bf14      	ite	ne
 80071d8:	2301      	movne	r3, #1
 80071da:	2300      	moveq	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e07c      	b.n	80072e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d104      	bne.n	80071f6 <HAL_TIM_PWM_Start+0x82>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071f4:	e013      	b.n	800721e <HAL_TIM_PWM_Start+0xaa>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b04      	cmp	r3, #4
 80071fa:	d104      	bne.n	8007206 <HAL_TIM_PWM_Start+0x92>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007204:	e00b      	b.n	800721e <HAL_TIM_PWM_Start+0xaa>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b08      	cmp	r3, #8
 800720a:	d104      	bne.n	8007216 <HAL_TIM_PWM_Start+0xa2>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007214:	e003      	b.n	800721e <HAL_TIM_PWM_Start+0xaa>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2202      	movs	r2, #2
 800721a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2201      	movs	r2, #1
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f001 fc7c 	bl	8008b24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a2d      	ldr	r2, [pc, #180]	; (80072e8 <HAL_TIM_PWM_Start+0x174>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d004      	beq.n	8007240 <HAL_TIM_PWM_Start+0xcc>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a2c      	ldr	r2, [pc, #176]	; (80072ec <HAL_TIM_PWM_Start+0x178>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d101      	bne.n	8007244 <HAL_TIM_PWM_Start+0xd0>
 8007240:	2301      	movs	r3, #1
 8007242:	e000      	b.n	8007246 <HAL_TIM_PWM_Start+0xd2>
 8007244:	2300      	movs	r3, #0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d007      	beq.n	800725a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007258:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a22      	ldr	r2, [pc, #136]	; (80072e8 <HAL_TIM_PWM_Start+0x174>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d022      	beq.n	80072aa <HAL_TIM_PWM_Start+0x136>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726c:	d01d      	beq.n	80072aa <HAL_TIM_PWM_Start+0x136>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a1f      	ldr	r2, [pc, #124]	; (80072f0 <HAL_TIM_PWM_Start+0x17c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d018      	beq.n	80072aa <HAL_TIM_PWM_Start+0x136>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1d      	ldr	r2, [pc, #116]	; (80072f4 <HAL_TIM_PWM_Start+0x180>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <HAL_TIM_PWM_Start+0x136>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1c      	ldr	r2, [pc, #112]	; (80072f8 <HAL_TIM_PWM_Start+0x184>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00e      	beq.n	80072aa <HAL_TIM_PWM_Start+0x136>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a16      	ldr	r2, [pc, #88]	; (80072ec <HAL_TIM_PWM_Start+0x178>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d009      	beq.n	80072aa <HAL_TIM_PWM_Start+0x136>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a18      	ldr	r2, [pc, #96]	; (80072fc <HAL_TIM_PWM_Start+0x188>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d004      	beq.n	80072aa <HAL_TIM_PWM_Start+0x136>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a16      	ldr	r2, [pc, #88]	; (8007300 <HAL_TIM_PWM_Start+0x18c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d111      	bne.n	80072ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f003 0307 	and.w	r3, r3, #7
 80072b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b06      	cmp	r3, #6
 80072ba:	d010      	beq.n	80072de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0201 	orr.w	r2, r2, #1
 80072ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072cc:	e007      	b.n	80072de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f042 0201 	orr.w	r2, r2, #1
 80072dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	40010000 	.word	0x40010000
 80072ec:	40010400 	.word	0x40010400
 80072f0:	40000400 	.word	0x40000400
 80072f4:	40000800 	.word	0x40000800
 80072f8:	40000c00 	.word	0x40000c00
 80072fc:	40014000 	.word	0x40014000
 8007300:	40001800 	.word	0x40001800

08007304 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2200      	movs	r2, #0
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f001 fc04 	bl	8008b24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a2e      	ldr	r2, [pc, #184]	; (80073dc <HAL_TIM_PWM_Stop+0xd8>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d004      	beq.n	8007330 <HAL_TIM_PWM_Stop+0x2c>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a2d      	ldr	r2, [pc, #180]	; (80073e0 <HAL_TIM_PWM_Stop+0xdc>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d101      	bne.n	8007334 <HAL_TIM_PWM_Stop+0x30>
 8007330:	2301      	movs	r3, #1
 8007332:	e000      	b.n	8007336 <HAL_TIM_PWM_Stop+0x32>
 8007334:	2300      	movs	r3, #0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d017      	beq.n	800736a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6a1a      	ldr	r2, [r3, #32]
 8007340:	f241 1311 	movw	r3, #4369	; 0x1111
 8007344:	4013      	ands	r3, r2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10f      	bne.n	800736a <HAL_TIM_PWM_Stop+0x66>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6a1a      	ldr	r2, [r3, #32]
 8007350:	f240 4344 	movw	r3, #1092	; 0x444
 8007354:	4013      	ands	r3, r2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d107      	bne.n	800736a <HAL_TIM_PWM_Stop+0x66>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007368:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6a1a      	ldr	r2, [r3, #32]
 8007370:	f241 1311 	movw	r3, #4369	; 0x1111
 8007374:	4013      	ands	r3, r2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10f      	bne.n	800739a <HAL_TIM_PWM_Stop+0x96>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6a1a      	ldr	r2, [r3, #32]
 8007380:	f240 4344 	movw	r3, #1092	; 0x444
 8007384:	4013      	ands	r3, r2
 8007386:	2b00      	cmp	r3, #0
 8007388:	d107      	bne.n	800739a <HAL_TIM_PWM_Stop+0x96>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f022 0201 	bic.w	r2, r2, #1
 8007398:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d104      	bne.n	80073aa <HAL_TIM_PWM_Stop+0xa6>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073a8:	e013      	b.n	80073d2 <HAL_TIM_PWM_Stop+0xce>
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d104      	bne.n	80073ba <HAL_TIM_PWM_Stop+0xb6>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073b8:	e00b      	b.n	80073d2 <HAL_TIM_PWM_Stop+0xce>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d104      	bne.n	80073ca <HAL_TIM_PWM_Stop+0xc6>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073c8:	e003      	b.n	80073d2 <HAL_TIM_PWM_Stop+0xce>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	40010000 	.word	0x40010000
 80073e0:	40010400 	.word	0x40010400

080073e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e041      	b.n	800747a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d106      	bne.n	8007410 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f839 	bl	8007482 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3304      	adds	r3, #4
 8007420:	4619      	mov	r1, r3
 8007422:	4610      	mov	r0, r2
 8007424:	f000 ff6a 	bl	80082fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
	...

08007498 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d104      	bne.n	80074ba <HAL_TIM_IC_Start_DMA+0x22>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	e013      	b.n	80074e2 <HAL_TIM_IC_Start_DMA+0x4a>
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b04      	cmp	r3, #4
 80074be:	d104      	bne.n	80074ca <HAL_TIM_IC_Start_DMA+0x32>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	e00b      	b.n	80074e2 <HAL_TIM_IC_Start_DMA+0x4a>
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	d104      	bne.n	80074da <HAL_TIM_IC_Start_DMA+0x42>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	e003      	b.n	80074e2 <HAL_TIM_IC_Start_DMA+0x4a>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d104      	bne.n	80074f4 <HAL_TIM_IC_Start_DMA+0x5c>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	e013      	b.n	800751c <HAL_TIM_IC_Start_DMA+0x84>
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d104      	bne.n	8007504 <HAL_TIM_IC_Start_DMA+0x6c>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007500:	b2db      	uxtb	r3, r3
 8007502:	e00b      	b.n	800751c <HAL_TIM_IC_Start_DMA+0x84>
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2b08      	cmp	r3, #8
 8007508:	d104      	bne.n	8007514 <HAL_TIM_IC_Start_DMA+0x7c>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007510:	b2db      	uxtb	r3, r3
 8007512:	e003      	b.n	800751c <HAL_TIM_IC_Start_DMA+0x84>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800751a:	b2db      	uxtb	r3, r3
 800751c:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800751e:	7dbb      	ldrb	r3, [r7, #22]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d002      	beq.n	800752a <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8007524:	7d7b      	ldrb	r3, [r7, #21]
 8007526:	2b02      	cmp	r3, #2
 8007528:	d101      	bne.n	800752e <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800752a:	2302      	movs	r3, #2
 800752c:	e146      	b.n	80077bc <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800752e:	7dbb      	ldrb	r3, [r7, #22]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d143      	bne.n	80075bc <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8007534:	7d7b      	ldrb	r3, [r7, #21]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d140      	bne.n	80075bc <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d104      	bne.n	800754a <HAL_TIM_IC_Start_DMA+0xb2>
 8007540:	887b      	ldrh	r3, [r7, #2]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e138      	b.n	80077bc <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <HAL_TIM_IC_Start_DMA+0xc2>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2202      	movs	r2, #2
 8007554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007558:	e013      	b.n	8007582 <HAL_TIM_IC_Start_DMA+0xea>
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2b04      	cmp	r3, #4
 800755e:	d104      	bne.n	800756a <HAL_TIM_IC_Start_DMA+0xd2>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2202      	movs	r2, #2
 8007564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007568:	e00b      	b.n	8007582 <HAL_TIM_IC_Start_DMA+0xea>
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b08      	cmp	r3, #8
 800756e:	d104      	bne.n	800757a <HAL_TIM_IC_Start_DMA+0xe2>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007578:	e003      	b.n	8007582 <HAL_TIM_IC_Start_DMA+0xea>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2202      	movs	r2, #2
 800757e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d104      	bne.n	8007592 <HAL_TIM_IC_Start_DMA+0xfa>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8007590:	e016      	b.n	80075c0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b04      	cmp	r3, #4
 8007596:	d104      	bne.n	80075a2 <HAL_TIM_IC_Start_DMA+0x10a>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80075a0:	e00e      	b.n	80075c0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2b08      	cmp	r3, #8
 80075a6:	d104      	bne.n	80075b2 <HAL_TIM_IC_Start_DMA+0x11a>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80075b0:	e006      	b.n	80075c0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2202      	movs	r2, #2
 80075b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80075ba:	e001      	b.n	80075c0 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e0fd      	b.n	80077bc <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2201      	movs	r2, #1
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 faab 	bl	8008b24 <TIM_CCxChannelCmd>

  switch (Channel)
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b0c      	cmp	r3, #12
 80075d2:	f200 80ad 	bhi.w	8007730 <HAL_TIM_IC_Start_DMA+0x298>
 80075d6:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <HAL_TIM_IC_Start_DMA+0x144>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	08007611 	.word	0x08007611
 80075e0:	08007731 	.word	0x08007731
 80075e4:	08007731 	.word	0x08007731
 80075e8:	08007731 	.word	0x08007731
 80075ec:	08007659 	.word	0x08007659
 80075f0:	08007731 	.word	0x08007731
 80075f4:	08007731 	.word	0x08007731
 80075f8:	08007731 	.word	0x08007731
 80075fc:	080076a1 	.word	0x080076a1
 8007600:	08007731 	.word	0x08007731
 8007604:	08007731 	.word	0x08007731
 8007608:	08007731 	.word	0x08007731
 800760c:	080076e9 	.word	0x080076e9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	4a6b      	ldr	r2, [pc, #428]	; (80077c4 <HAL_TIM_IC_Start_DMA+0x32c>)
 8007616:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	4a6a      	ldr	r2, [pc, #424]	; (80077c8 <HAL_TIM_IC_Start_DMA+0x330>)
 800761e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	4a69      	ldr	r2, [pc, #420]	; (80077cc <HAL_TIM_IC_Start_DMA+0x334>)
 8007626:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3334      	adds	r3, #52	; 0x34
 8007632:	4619      	mov	r1, r3
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	887b      	ldrh	r3, [r7, #2]
 8007638:	f7fd fef8 	bl	800542c <HAL_DMA_Start_IT>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e0ba      	b.n	80077bc <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68da      	ldr	r2, [r3, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007654:	60da      	str	r2, [r3, #12]
      break;
 8007656:	e06e      	b.n	8007736 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765c:	4a59      	ldr	r2, [pc, #356]	; (80077c4 <HAL_TIM_IC_Start_DMA+0x32c>)
 800765e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007664:	4a58      	ldr	r2, [pc, #352]	; (80077c8 <HAL_TIM_IC_Start_DMA+0x330>)
 8007666:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766c:	4a57      	ldr	r2, [pc, #348]	; (80077cc <HAL_TIM_IC_Start_DMA+0x334>)
 800766e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3338      	adds	r3, #56	; 0x38
 800767a:	4619      	mov	r1, r3
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	887b      	ldrh	r3, [r7, #2]
 8007680:	f7fd fed4 	bl	800542c <HAL_DMA_Start_IT>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e096      	b.n	80077bc <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800769c:	60da      	str	r2, [r3, #12]
      break;
 800769e:	e04a      	b.n	8007736 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	4a47      	ldr	r2, [pc, #284]	; (80077c4 <HAL_TIM_IC_Start_DMA+0x32c>)
 80076a6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	4a46      	ldr	r2, [pc, #280]	; (80077c8 <HAL_TIM_IC_Start_DMA+0x330>)
 80076ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	4a45      	ldr	r2, [pc, #276]	; (80077cc <HAL_TIM_IC_Start_DMA+0x334>)
 80076b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	333c      	adds	r3, #60	; 0x3c
 80076c2:	4619      	mov	r1, r3
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	887b      	ldrh	r3, [r7, #2]
 80076c8:	f7fd feb0 	bl	800542c <HAL_DMA_Start_IT>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e072      	b.n	80077bc <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076e4:	60da      	str	r2, [r3, #12]
      break;
 80076e6:	e026      	b.n	8007736 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ec:	4a35      	ldr	r2, [pc, #212]	; (80077c4 <HAL_TIM_IC_Start_DMA+0x32c>)
 80076ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	4a34      	ldr	r2, [pc, #208]	; (80077c8 <HAL_TIM_IC_Start_DMA+0x330>)
 80076f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	4a33      	ldr	r2, [pc, #204]	; (80077cc <HAL_TIM_IC_Start_DMA+0x334>)
 80076fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3340      	adds	r3, #64	; 0x40
 800770a:	4619      	mov	r1, r3
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	887b      	ldrh	r3, [r7, #2]
 8007710:	f7fd fe8c 	bl	800542c <HAL_DMA_Start_IT>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e04e      	b.n	80077bc <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68da      	ldr	r2, [r3, #12]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800772c:	60da      	str	r2, [r3, #12]
      break;
 800772e:	e002      	b.n	8007736 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	75fb      	strb	r3, [r7, #23]
      break;
 8007734:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a25      	ldr	r2, [pc, #148]	; (80077d0 <HAL_TIM_IC_Start_DMA+0x338>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d022      	beq.n	8007786 <HAL_TIM_IC_Start_DMA+0x2ee>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007748:	d01d      	beq.n	8007786 <HAL_TIM_IC_Start_DMA+0x2ee>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a21      	ldr	r2, [pc, #132]	; (80077d4 <HAL_TIM_IC_Start_DMA+0x33c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d018      	beq.n	8007786 <HAL_TIM_IC_Start_DMA+0x2ee>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a1f      	ldr	r2, [pc, #124]	; (80077d8 <HAL_TIM_IC_Start_DMA+0x340>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d013      	beq.n	8007786 <HAL_TIM_IC_Start_DMA+0x2ee>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a1e      	ldr	r2, [pc, #120]	; (80077dc <HAL_TIM_IC_Start_DMA+0x344>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00e      	beq.n	8007786 <HAL_TIM_IC_Start_DMA+0x2ee>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a1c      	ldr	r2, [pc, #112]	; (80077e0 <HAL_TIM_IC_Start_DMA+0x348>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d009      	beq.n	8007786 <HAL_TIM_IC_Start_DMA+0x2ee>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a1b      	ldr	r2, [pc, #108]	; (80077e4 <HAL_TIM_IC_Start_DMA+0x34c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d004      	beq.n	8007786 <HAL_TIM_IC_Start_DMA+0x2ee>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a19      	ldr	r2, [pc, #100]	; (80077e8 <HAL_TIM_IC_Start_DMA+0x350>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d111      	bne.n	80077aa <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b06      	cmp	r3, #6
 8007796:	d010      	beq.n	80077ba <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0201 	orr.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a8:	e007      	b.n	80077ba <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f042 0201 	orr.w	r2, r2, #1
 80077b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	080081cd 	.word	0x080081cd
 80077c8:	08008295 	.word	0x08008295
 80077cc:	0800813b 	.word	0x0800813b
 80077d0:	40010000 	.word	0x40010000
 80077d4:	40000400 	.word	0x40000400
 80077d8:	40000800 	.word	0x40000800
 80077dc:	40000c00 	.word	0x40000c00
 80077e0:	40010400 	.word	0x40010400
 80077e4:	40014000 	.word	0x40014000
 80077e8:	40001800 	.word	0x40001800

080077ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e097      	b.n	8007930 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	d106      	bne.n	800781a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7fc fac1 	bl	8003d9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2202      	movs	r2, #2
 800781e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	6812      	ldr	r2, [r2, #0]
 800782c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007830:	f023 0307 	bic.w	r3, r3, #7
 8007834:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3304      	adds	r3, #4
 800783e:	4619      	mov	r1, r3
 8007840:	4610      	mov	r0, r2
 8007842:	f000 fd5b 	bl	80082fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800786e:	f023 0303 	bic.w	r3, r3, #3
 8007872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	021b      	lsls	r3, r3, #8
 800787e:	4313      	orrs	r3, r2
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4313      	orrs	r3, r2
 8007884:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800788c:	f023 030c 	bic.w	r3, r3, #12
 8007890:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007898:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800789c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	68da      	ldr	r2, [r3, #12]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	021b      	lsls	r3, r3, #8
 80078a8:	4313      	orrs	r3, r2
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	011a      	lsls	r2, r3, #4
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	031b      	lsls	r3, r3, #12
 80078bc:	4313      	orrs	r3, r2
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80078ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80078d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	011b      	lsls	r3, r3, #4
 80078de:	4313      	orrs	r3, r2
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3718      	adds	r7, #24
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007948:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007950:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007958:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007960:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d110      	bne.n	800798a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007968:	7bfb      	ldrb	r3, [r7, #15]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d102      	bne.n	8007974 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800796e:	7b7b      	ldrb	r3, [r7, #13]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d001      	beq.n	8007978 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e069      	b.n	8007a4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007988:	e031      	b.n	80079ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b04      	cmp	r3, #4
 800798e:	d110      	bne.n	80079b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d102      	bne.n	800799c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007996:	7b3b      	ldrb	r3, [r7, #12]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d001      	beq.n	80079a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e055      	b.n	8007a4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079b0:	e01d      	b.n	80079ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d108      	bne.n	80079ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d105      	bne.n	80079ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079be:	7b7b      	ldrb	r3, [r7, #13]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d102      	bne.n	80079ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80079c4:	7b3b      	ldrb	r3, [r7, #12]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d001      	beq.n	80079ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e03e      	b.n	8007a4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2202      	movs	r2, #2
 80079d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2202      	movs	r2, #2
 80079da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2202      	movs	r2, #2
 80079e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2202      	movs	r2, #2
 80079ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <HAL_TIM_Encoder_Start+0xc4>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d008      	beq.n	8007a0c <HAL_TIM_Encoder_Start+0xd4>
 80079fa:	e00f      	b.n	8007a1c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2201      	movs	r2, #1
 8007a02:	2100      	movs	r1, #0
 8007a04:	4618      	mov	r0, r3
 8007a06:	f001 f88d 	bl	8008b24 <TIM_CCxChannelCmd>
      break;
 8007a0a:	e016      	b.n	8007a3a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2201      	movs	r2, #1
 8007a12:	2104      	movs	r1, #4
 8007a14:	4618      	mov	r0, r3
 8007a16:	f001 f885 	bl	8008b24 <TIM_CCxChannelCmd>
      break;
 8007a1a:	e00e      	b.n	8007a3a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2201      	movs	r2, #1
 8007a22:	2100      	movs	r1, #0
 8007a24:	4618      	mov	r0, r3
 8007a26:	f001 f87d 	bl	8008b24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	2104      	movs	r1, #4
 8007a32:	4618      	mov	r0, r3
 8007a34:	f001 f876 	bl	8008b24 <TIM_CCxChannelCmd>
      break;
 8007a38:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0201 	orr.w	r2, r2, #1
 8007a48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d122      	bne.n	8007ab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d11b      	bne.n	8007ab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f06f 0202 	mvn.w	r2, #2
 8007a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	f003 0303 	and.w	r3, r3, #3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fb1d 	bl	80080d6 <HAL_TIM_IC_CaptureCallback>
 8007a9c:	e005      	b.n	8007aaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fb0f 	bl	80080c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fb2a 	bl	80080fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	f003 0304 	and.w	r3, r3, #4
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	d122      	bne.n	8007b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d11b      	bne.n	8007b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f06f 0204 	mvn.w	r2, #4
 8007ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2202      	movs	r2, #2
 8007ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d003      	beq.n	8007af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 faf3 	bl	80080d6 <HAL_TIM_IC_CaptureCallback>
 8007af0:	e005      	b.n	8007afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fae5 	bl	80080c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fb00 	bl	80080fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	f003 0308 	and.w	r3, r3, #8
 8007b0e:	2b08      	cmp	r3, #8
 8007b10:	d122      	bne.n	8007b58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f003 0308 	and.w	r3, r3, #8
 8007b1c:	2b08      	cmp	r3, #8
 8007b1e:	d11b      	bne.n	8007b58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f06f 0208 	mvn.w	r2, #8
 8007b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2204      	movs	r2, #4
 8007b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	f003 0303 	and.w	r3, r3, #3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fac9 	bl	80080d6 <HAL_TIM_IC_CaptureCallback>
 8007b44:	e005      	b.n	8007b52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fabb 	bl	80080c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fad6 	bl	80080fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	f003 0310 	and.w	r3, r3, #16
 8007b62:	2b10      	cmp	r3, #16
 8007b64:	d122      	bne.n	8007bac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	2b10      	cmp	r3, #16
 8007b72:	d11b      	bne.n	8007bac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f06f 0210 	mvn.w	r2, #16
 8007b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2208      	movs	r2, #8
 8007b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	69db      	ldr	r3, [r3, #28]
 8007b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fa9f 	bl	80080d6 <HAL_TIM_IC_CaptureCallback>
 8007b98:	e005      	b.n	8007ba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fa91 	bl	80080c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 faac 	bl	80080fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d10e      	bne.n	8007bd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d107      	bne.n	8007bd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f06f 0201 	mvn.w	r2, #1
 8007bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fa6b 	bl	80080ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be2:	2b80      	cmp	r3, #128	; 0x80
 8007be4:	d10e      	bne.n	8007c04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf0:	2b80      	cmp	r3, #128	; 0x80
 8007bf2:	d107      	bne.n	8007c04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 f88e 	bl	8008d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0e:	2b40      	cmp	r3, #64	; 0x40
 8007c10:	d10e      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1c:	2b40      	cmp	r3, #64	; 0x40
 8007c1e:	d107      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fa71 	bl	8008112 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b20      	cmp	r3, #32
 8007c3c:	d10e      	bne.n	8007c5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f003 0320 	and.w	r3, r3, #32
 8007c48:	2b20      	cmp	r3, #32
 8007c4a:	d107      	bne.n	8007c5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f06f 0220 	mvn.w	r2, #32
 8007c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f001 f858 	bl	8008d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c5c:	bf00      	nop
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d101      	bne.n	8007c82 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e088      	b.n	8007d94 <HAL_TIM_IC_ConfigChannel+0x130>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d11b      	bne.n	8007cc8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	6819      	ldr	r1, [r3, #0]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f000 fd7c 	bl	800879c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699a      	ldr	r2, [r3, #24]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 020c 	bic.w	r2, r2, #12
 8007cb2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6999      	ldr	r1, [r3, #24]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	689a      	ldr	r2, [r3, #8]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	619a      	str	r2, [r3, #24]
 8007cc6:	e060      	b.n	8007d8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	d11c      	bne.n	8007d08 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6818      	ldr	r0, [r3, #0]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	6819      	ldr	r1, [r3, #0]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f000 fe00 	bl	80088e2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	699a      	ldr	r2, [r3, #24]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007cf0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6999      	ldr	r1, [r3, #24]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	021a      	lsls	r2, r3, #8
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	619a      	str	r2, [r3, #24]
 8007d06:	e040      	b.n	8007d8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b08      	cmp	r3, #8
 8007d0c:	d11b      	bne.n	8007d46 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6819      	ldr	r1, [r3, #0]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f000 fe4d 	bl	80089bc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	69da      	ldr	r2, [r3, #28]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f022 020c 	bic.w	r2, r2, #12
 8007d30:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69d9      	ldr	r1, [r3, #28]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	430a      	orrs	r2, r1
 8007d42:	61da      	str	r2, [r3, #28]
 8007d44:	e021      	b.n	8007d8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b0c      	cmp	r3, #12
 8007d4a:	d11c      	bne.n	8007d86 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6818      	ldr	r0, [r3, #0]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	6819      	ldr	r1, [r3, #0]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f000 fe6a 	bl	8008a34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	69da      	ldr	r2, [r3, #28]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007d6e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	69d9      	ldr	r1, [r3, #28]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	021a      	lsls	r2, r3, #8
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	430a      	orrs	r2, r1
 8007d82:	61da      	str	r2, [r3, #28]
 8007d84:	e001      	b.n	8007d8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3718      	adds	r7, #24
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d101      	bne.n	8007dba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007db6:	2302      	movs	r3, #2
 8007db8:	e0ae      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b0c      	cmp	r3, #12
 8007dc6:	f200 809f 	bhi.w	8007f08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007dca:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd0:	08007e05 	.word	0x08007e05
 8007dd4:	08007f09 	.word	0x08007f09
 8007dd8:	08007f09 	.word	0x08007f09
 8007ddc:	08007f09 	.word	0x08007f09
 8007de0:	08007e45 	.word	0x08007e45
 8007de4:	08007f09 	.word	0x08007f09
 8007de8:	08007f09 	.word	0x08007f09
 8007dec:	08007f09 	.word	0x08007f09
 8007df0:	08007e87 	.word	0x08007e87
 8007df4:	08007f09 	.word	0x08007f09
 8007df8:	08007f09 	.word	0x08007f09
 8007dfc:	08007f09 	.word	0x08007f09
 8007e00:	08007ec7 	.word	0x08007ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68b9      	ldr	r1, [r7, #8]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fb16 	bl	800843c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699a      	ldr	r2, [r3, #24]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0208 	orr.w	r2, r2, #8
 8007e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699a      	ldr	r2, [r3, #24]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0204 	bic.w	r2, r2, #4
 8007e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6999      	ldr	r1, [r3, #24]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	691a      	ldr	r2, [r3, #16]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	619a      	str	r2, [r3, #24]
      break;
 8007e42:	e064      	b.n	8007f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fb66 	bl	800851c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	699a      	ldr	r2, [r3, #24]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6999      	ldr	r1, [r3, #24]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	021a      	lsls	r2, r3, #8
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	619a      	str	r2, [r3, #24]
      break;
 8007e84:	e043      	b.n	8007f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68b9      	ldr	r1, [r7, #8]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fbbb 	bl	8008608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69da      	ldr	r2, [r3, #28]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f042 0208 	orr.w	r2, r2, #8
 8007ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69da      	ldr	r2, [r3, #28]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0204 	bic.w	r2, r2, #4
 8007eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69d9      	ldr	r1, [r3, #28]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	61da      	str	r2, [r3, #28]
      break;
 8007ec4:	e023      	b.n	8007f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fc0f 	bl	80086f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69da      	ldr	r2, [r3, #28]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69d9      	ldr	r1, [r3, #28]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	021a      	lsls	r2, r3, #8
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	61da      	str	r2, [r3, #28]
      break;
 8007f06:	e002      	b.n	8007f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d101      	bne.n	8007f3c <HAL_TIM_ConfigClockSource+0x1c>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e0b4      	b.n	80080a6 <HAL_TIM_ConfigClockSource+0x186>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f74:	d03e      	beq.n	8007ff4 <HAL_TIM_ConfigClockSource+0xd4>
 8007f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f7a:	f200 8087 	bhi.w	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f82:	f000 8086 	beq.w	8008092 <HAL_TIM_ConfigClockSource+0x172>
 8007f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f8a:	d87f      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007f8c:	2b70      	cmp	r3, #112	; 0x70
 8007f8e:	d01a      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0xa6>
 8007f90:	2b70      	cmp	r3, #112	; 0x70
 8007f92:	d87b      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007f94:	2b60      	cmp	r3, #96	; 0x60
 8007f96:	d050      	beq.n	800803a <HAL_TIM_ConfigClockSource+0x11a>
 8007f98:	2b60      	cmp	r3, #96	; 0x60
 8007f9a:	d877      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007f9c:	2b50      	cmp	r3, #80	; 0x50
 8007f9e:	d03c      	beq.n	800801a <HAL_TIM_ConfigClockSource+0xfa>
 8007fa0:	2b50      	cmp	r3, #80	; 0x50
 8007fa2:	d873      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007fa4:	2b40      	cmp	r3, #64	; 0x40
 8007fa6:	d058      	beq.n	800805a <HAL_TIM_ConfigClockSource+0x13a>
 8007fa8:	2b40      	cmp	r3, #64	; 0x40
 8007faa:	d86f      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007fac:	2b30      	cmp	r3, #48	; 0x30
 8007fae:	d064      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x15a>
 8007fb0:	2b30      	cmp	r3, #48	; 0x30
 8007fb2:	d86b      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007fb4:	2b20      	cmp	r3, #32
 8007fb6:	d060      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x15a>
 8007fb8:	2b20      	cmp	r3, #32
 8007fba:	d867      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d05c      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x15a>
 8007fc0:	2b10      	cmp	r3, #16
 8007fc2:	d05a      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x15a>
 8007fc4:	e062      	b.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	6899      	ldr	r1, [r3, #8]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f000 fd85 	bl	8008ae4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007fe8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	609a      	str	r2, [r3, #8]
      break;
 8007ff2:	e04f      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6818      	ldr	r0, [r3, #0]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	6899      	ldr	r1, [r3, #8]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	f000 fd6e 	bl	8008ae4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689a      	ldr	r2, [r3, #8]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008016:	609a      	str	r2, [r3, #8]
      break;
 8008018:	e03c      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	6859      	ldr	r1, [r3, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	461a      	mov	r2, r3
 8008028:	f000 fc2c 	bl	8008884 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2150      	movs	r1, #80	; 0x50
 8008032:	4618      	mov	r0, r3
 8008034:	f000 fd3b 	bl	8008aae <TIM_ITRx_SetConfig>
      break;
 8008038:	e02c      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	6859      	ldr	r1, [r3, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	461a      	mov	r2, r3
 8008048:	f000 fc88 	bl	800895c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2160      	movs	r1, #96	; 0x60
 8008052:	4618      	mov	r0, r3
 8008054:	f000 fd2b 	bl	8008aae <TIM_ITRx_SetConfig>
      break;
 8008058:	e01c      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6818      	ldr	r0, [r3, #0]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	6859      	ldr	r1, [r3, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	461a      	mov	r2, r3
 8008068:	f000 fc0c 	bl	8008884 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2140      	movs	r1, #64	; 0x40
 8008072:	4618      	mov	r0, r3
 8008074:	f000 fd1b 	bl	8008aae <TIM_ITRx_SetConfig>
      break;
 8008078:	e00c      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4619      	mov	r1, r3
 8008084:	4610      	mov	r0, r2
 8008086:	f000 fd12 	bl	8008aae <TIM_ITRx_SetConfig>
      break;
 800808a:	e003      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	73fb      	strb	r3, [r7, #15]
      break;
 8008090:	e000      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008092:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80080b6:	bf00      	nop
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b083      	sub	sp, #12
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080de:	bf00      	nop
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80080f2:	bf00      	nop
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800811a:	bf00      	nop
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	429a      	cmp	r2, r3
 8008150:	d107      	bne.n	8008162 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2201      	movs	r2, #1
 8008156:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008160:	e02a      	b.n	80081b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	429a      	cmp	r2, r3
 800816a:	d107      	bne.n	800817c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2202      	movs	r2, #2
 8008170:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800817a:	e01d      	b.n	80081b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	429a      	cmp	r2, r3
 8008184:	d107      	bne.n	8008196 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2204      	movs	r2, #4
 800818a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008194:	e010      	b.n	80081b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	429a      	cmp	r2, r3
 800819e:	d107      	bne.n	80081b0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2208      	movs	r2, #8
 80081a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081ae:	e003      	b.n	80081b8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f7ff ffb4 	bl	8008126 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	771a      	strb	r2, [r3, #28]
}
 80081c4:	bf00      	nop
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d10f      	bne.n	8008204 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2201      	movs	r2, #1
 80081e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d146      	bne.n	8008280 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008202:	e03d      	b.n	8008280 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	429a      	cmp	r2, r3
 800820c:	d10f      	bne.n	800822e <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2202      	movs	r2, #2
 8008212:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d131      	bne.n	8008280 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800822c:	e028      	b.n	8008280 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	429a      	cmp	r2, r3
 8008236:	d10f      	bne.n	8008258 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2204      	movs	r2, #4
 800823c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d11c      	bne.n	8008280 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008256:	e013      	b.n	8008280 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	429a      	cmp	r2, r3
 8008260:	d10e      	bne.n	8008280 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2208      	movs	r2, #8
 8008266:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d107      	bne.n	8008280 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f7ff ff28 	bl	80080d6 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	771a      	strb	r2, [r3, #28]
}
 800828c:	bf00      	nop
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d103      	bne.n	80082b4 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2201      	movs	r2, #1
 80082b0:	771a      	strb	r2, [r3, #28]
 80082b2:	e019      	b.n	80082e8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d103      	bne.n	80082c6 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2202      	movs	r2, #2
 80082c2:	771a      	strb	r2, [r3, #28]
 80082c4:	e010      	b.n	80082e8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d103      	bne.n	80082d8 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2204      	movs	r2, #4
 80082d4:	771a      	strb	r2, [r3, #28]
 80082d6:	e007      	b.n	80082e8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d102      	bne.n	80082e8 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2208      	movs	r2, #8
 80082e6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f7ff fefe 	bl	80080ea <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	771a      	strb	r2, [r3, #28]
}
 80082f4:	bf00      	nop
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a40      	ldr	r2, [pc, #256]	; (8008410 <TIM_Base_SetConfig+0x114>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d013      	beq.n	800833c <TIM_Base_SetConfig+0x40>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800831a:	d00f      	beq.n	800833c <TIM_Base_SetConfig+0x40>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a3d      	ldr	r2, [pc, #244]	; (8008414 <TIM_Base_SetConfig+0x118>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d00b      	beq.n	800833c <TIM_Base_SetConfig+0x40>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a3c      	ldr	r2, [pc, #240]	; (8008418 <TIM_Base_SetConfig+0x11c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d007      	beq.n	800833c <TIM_Base_SetConfig+0x40>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a3b      	ldr	r2, [pc, #236]	; (800841c <TIM_Base_SetConfig+0x120>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d003      	beq.n	800833c <TIM_Base_SetConfig+0x40>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a3a      	ldr	r2, [pc, #232]	; (8008420 <TIM_Base_SetConfig+0x124>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d108      	bne.n	800834e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	4313      	orrs	r3, r2
 800834c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a2f      	ldr	r2, [pc, #188]	; (8008410 <TIM_Base_SetConfig+0x114>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d02b      	beq.n	80083ae <TIM_Base_SetConfig+0xb2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800835c:	d027      	beq.n	80083ae <TIM_Base_SetConfig+0xb2>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a2c      	ldr	r2, [pc, #176]	; (8008414 <TIM_Base_SetConfig+0x118>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d023      	beq.n	80083ae <TIM_Base_SetConfig+0xb2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a2b      	ldr	r2, [pc, #172]	; (8008418 <TIM_Base_SetConfig+0x11c>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d01f      	beq.n	80083ae <TIM_Base_SetConfig+0xb2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a2a      	ldr	r2, [pc, #168]	; (800841c <TIM_Base_SetConfig+0x120>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d01b      	beq.n	80083ae <TIM_Base_SetConfig+0xb2>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a29      	ldr	r2, [pc, #164]	; (8008420 <TIM_Base_SetConfig+0x124>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d017      	beq.n	80083ae <TIM_Base_SetConfig+0xb2>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a28      	ldr	r2, [pc, #160]	; (8008424 <TIM_Base_SetConfig+0x128>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d013      	beq.n	80083ae <TIM_Base_SetConfig+0xb2>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a27      	ldr	r2, [pc, #156]	; (8008428 <TIM_Base_SetConfig+0x12c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d00f      	beq.n	80083ae <TIM_Base_SetConfig+0xb2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a26      	ldr	r2, [pc, #152]	; (800842c <TIM_Base_SetConfig+0x130>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d00b      	beq.n	80083ae <TIM_Base_SetConfig+0xb2>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a25      	ldr	r2, [pc, #148]	; (8008430 <TIM_Base_SetConfig+0x134>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d007      	beq.n	80083ae <TIM_Base_SetConfig+0xb2>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a24      	ldr	r2, [pc, #144]	; (8008434 <TIM_Base_SetConfig+0x138>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d003      	beq.n	80083ae <TIM_Base_SetConfig+0xb2>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a23      	ldr	r2, [pc, #140]	; (8008438 <TIM_Base_SetConfig+0x13c>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d108      	bne.n	80083c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a0a      	ldr	r2, [pc, #40]	; (8008410 <TIM_Base_SetConfig+0x114>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d003      	beq.n	80083f4 <TIM_Base_SetConfig+0xf8>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a0c      	ldr	r2, [pc, #48]	; (8008420 <TIM_Base_SetConfig+0x124>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d103      	bne.n	80083fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	615a      	str	r2, [r3, #20]
}
 8008402:	bf00      	nop
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	40010000 	.word	0x40010000
 8008414:	40000400 	.word	0x40000400
 8008418:	40000800 	.word	0x40000800
 800841c:	40000c00 	.word	0x40000c00
 8008420:	40010400 	.word	0x40010400
 8008424:	40014000 	.word	0x40014000
 8008428:	40014400 	.word	0x40014400
 800842c:	40014800 	.word	0x40014800
 8008430:	40001800 	.word	0x40001800
 8008434:	40001c00 	.word	0x40001c00
 8008438:	40002000 	.word	0x40002000

0800843c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	f023 0201 	bic.w	r2, r3, #1
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f023 0303 	bic.w	r3, r3, #3
 8008472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	4313      	orrs	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f023 0302 	bic.w	r3, r3, #2
 8008484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	4313      	orrs	r3, r2
 800848e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a20      	ldr	r2, [pc, #128]	; (8008514 <TIM_OC1_SetConfig+0xd8>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d003      	beq.n	80084a0 <TIM_OC1_SetConfig+0x64>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a1f      	ldr	r2, [pc, #124]	; (8008518 <TIM_OC1_SetConfig+0xdc>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d10c      	bne.n	80084ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	f023 0308 	bic.w	r3, r3, #8
 80084a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f023 0304 	bic.w	r3, r3, #4
 80084b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a15      	ldr	r2, [pc, #84]	; (8008514 <TIM_OC1_SetConfig+0xd8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d003      	beq.n	80084ca <TIM_OC1_SetConfig+0x8e>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a14      	ldr	r2, [pc, #80]	; (8008518 <TIM_OC1_SetConfig+0xdc>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d111      	bne.n	80084ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	621a      	str	r2, [r3, #32]
}
 8008508:	bf00      	nop
 800850a:	371c      	adds	r7, #28
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	40010000 	.word	0x40010000
 8008518:	40010400 	.word	0x40010400

0800851c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	f023 0210 	bic.w	r2, r3, #16
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800854a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	021b      	lsls	r3, r3, #8
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	4313      	orrs	r3, r2
 800855e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f023 0320 	bic.w	r3, r3, #32
 8008566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	011b      	lsls	r3, r3, #4
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	4313      	orrs	r3, r2
 8008572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a22      	ldr	r2, [pc, #136]	; (8008600 <TIM_OC2_SetConfig+0xe4>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d003      	beq.n	8008584 <TIM_OC2_SetConfig+0x68>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a21      	ldr	r2, [pc, #132]	; (8008604 <TIM_OC2_SetConfig+0xe8>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d10d      	bne.n	80085a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800858a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	011b      	lsls	r3, r3, #4
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	4313      	orrs	r3, r2
 8008596:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800859e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a17      	ldr	r2, [pc, #92]	; (8008600 <TIM_OC2_SetConfig+0xe4>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d003      	beq.n	80085b0 <TIM_OC2_SetConfig+0x94>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a16      	ldr	r2, [pc, #88]	; (8008604 <TIM_OC2_SetConfig+0xe8>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d113      	bne.n	80085d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	621a      	str	r2, [r3, #32]
}
 80085f2:	bf00      	nop
 80085f4:	371c      	adds	r7, #28
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	40010000 	.word	0x40010000
 8008604:	40010400 	.word	0x40010400

08008608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008608:	b480      	push	{r7}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f023 0303 	bic.w	r3, r3, #3
 800863e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	4313      	orrs	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	021b      	lsls	r3, r3, #8
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a21      	ldr	r2, [pc, #132]	; (80086e8 <TIM_OC3_SetConfig+0xe0>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d003      	beq.n	800866e <TIM_OC3_SetConfig+0x66>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a20      	ldr	r2, [pc, #128]	; (80086ec <TIM_OC3_SetConfig+0xe4>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d10d      	bne.n	800868a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	021b      	lsls	r3, r3, #8
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	4313      	orrs	r3, r2
 8008680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a16      	ldr	r2, [pc, #88]	; (80086e8 <TIM_OC3_SetConfig+0xe0>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d003      	beq.n	800869a <TIM_OC3_SetConfig+0x92>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a15      	ldr	r2, [pc, #84]	; (80086ec <TIM_OC3_SetConfig+0xe4>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d113      	bne.n	80086c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	011b      	lsls	r3, r3, #4
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	4313      	orrs	r3, r2
 80086c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	621a      	str	r2, [r3, #32]
}
 80086dc:	bf00      	nop
 80086de:	371c      	adds	r7, #28
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	40010000 	.word	0x40010000
 80086ec:	40010400 	.word	0x40010400

080086f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b087      	sub	sp, #28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800871e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800873a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	031b      	lsls	r3, r3, #12
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	4313      	orrs	r3, r2
 8008746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a12      	ldr	r2, [pc, #72]	; (8008794 <TIM_OC4_SetConfig+0xa4>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d003      	beq.n	8008758 <TIM_OC4_SetConfig+0x68>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a11      	ldr	r2, [pc, #68]	; (8008798 <TIM_OC4_SetConfig+0xa8>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d109      	bne.n	800876c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800875e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	019b      	lsls	r3, r3, #6
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	4313      	orrs	r3, r2
 800876a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	621a      	str	r2, [r3, #32]
}
 8008786:	bf00      	nop
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	40010000 	.word	0x40010000
 8008798:	40010400 	.word	0x40010400

0800879c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	f023 0201 	bic.w	r2, r3, #1
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	4a28      	ldr	r2, [pc, #160]	; (8008868 <TIM_TI1_SetConfig+0xcc>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d01b      	beq.n	8008802 <TIM_TI1_SetConfig+0x66>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d0:	d017      	beq.n	8008802 <TIM_TI1_SetConfig+0x66>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	4a25      	ldr	r2, [pc, #148]	; (800886c <TIM_TI1_SetConfig+0xd0>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d013      	beq.n	8008802 <TIM_TI1_SetConfig+0x66>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	4a24      	ldr	r2, [pc, #144]	; (8008870 <TIM_TI1_SetConfig+0xd4>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d00f      	beq.n	8008802 <TIM_TI1_SetConfig+0x66>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	4a23      	ldr	r2, [pc, #140]	; (8008874 <TIM_TI1_SetConfig+0xd8>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d00b      	beq.n	8008802 <TIM_TI1_SetConfig+0x66>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4a22      	ldr	r2, [pc, #136]	; (8008878 <TIM_TI1_SetConfig+0xdc>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d007      	beq.n	8008802 <TIM_TI1_SetConfig+0x66>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4a21      	ldr	r2, [pc, #132]	; (800887c <TIM_TI1_SetConfig+0xe0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d003      	beq.n	8008802 <TIM_TI1_SetConfig+0x66>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	4a20      	ldr	r2, [pc, #128]	; (8008880 <TIM_TI1_SetConfig+0xe4>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d101      	bne.n	8008806 <TIM_TI1_SetConfig+0x6a>
 8008802:	2301      	movs	r3, #1
 8008804:	e000      	b.n	8008808 <TIM_TI1_SetConfig+0x6c>
 8008806:	2300      	movs	r3, #0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d008      	beq.n	800881e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f023 0303 	bic.w	r3, r3, #3
 8008812:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4313      	orrs	r3, r2
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	e003      	b.n	8008826 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f043 0301 	orr.w	r3, r3, #1
 8008824:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800882c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	011b      	lsls	r3, r3, #4
 8008832:	b2db      	uxtb	r3, r3
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	4313      	orrs	r3, r2
 8008838:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	f023 030a 	bic.w	r3, r3, #10
 8008840:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f003 030a 	and.w	r3, r3, #10
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	4313      	orrs	r3, r2
 800884c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	621a      	str	r2, [r3, #32]
}
 800885a:	bf00      	nop
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	40010000 	.word	0x40010000
 800886c:	40000400 	.word	0x40000400
 8008870:	40000800 	.word	0x40000800
 8008874:	40000c00 	.word	0x40000c00
 8008878:	40010400 	.word	0x40010400
 800887c:	40014000 	.word	0x40014000
 8008880:	40001800 	.word	0x40001800

08008884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	f023 0201 	bic.w	r2, r3, #1
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	011b      	lsls	r3, r3, #4
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f023 030a 	bic.w	r3, r3, #10
 80088c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	621a      	str	r2, [r3, #32]
}
 80088d6:	bf00      	nop
 80088d8:	371c      	adds	r7, #28
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b087      	sub	sp, #28
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	60f8      	str	r0, [r7, #12]
 80088ea:	60b9      	str	r1, [r7, #8]
 80088ec:	607a      	str	r2, [r7, #4]
 80088ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	f023 0210 	bic.w	r2, r3, #16
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800890e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	021b      	lsls	r3, r3, #8
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	4313      	orrs	r3, r2
 8008918:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	031b      	lsls	r3, r3, #12
 8008926:	b29b      	uxth	r3, r3
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	4313      	orrs	r3, r2
 800892c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008934:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	011b      	lsls	r3, r3, #4
 800893a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	4313      	orrs	r3, r2
 8008942:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	621a      	str	r2, [r3, #32]
}
 8008950:	bf00      	nop
 8008952:	371c      	adds	r7, #28
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a1b      	ldr	r3, [r3, #32]
 800896c:	f023 0210 	bic.w	r2, r3, #16
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008986:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	031b      	lsls	r3, r3, #12
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	4313      	orrs	r3, r2
 8008990:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008998:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	011b      	lsls	r3, r3, #4
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	621a      	str	r2, [r3, #32]
}
 80089b0:	bf00      	nop
 80089b2:	371c      	adds	r7, #28
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
 80089c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6a1b      	ldr	r3, [r3, #32]
 80089e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	f023 0303 	bic.w	r3, r3, #3
 80089e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	011b      	lsls	r3, r3, #4
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	697a      	ldr	r2, [r7, #20]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008a0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	021b      	lsls	r3, r3, #8
 8008a12:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	621a      	str	r2, [r3, #32]
}
 8008a28:	bf00      	nop
 8008a2a:	371c      	adds	r7, #28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
 8008a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	021b      	lsls	r3, r3, #8
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	031b      	lsls	r3, r3, #12
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008a86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	031b      	lsls	r3, r3, #12
 8008a8c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	621a      	str	r2, [r3, #32]
}
 8008aa2:	bf00      	nop
 8008aa4:	371c      	adds	r7, #28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b085      	sub	sp, #20
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	f043 0307 	orr.w	r3, r3, #7
 8008ad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	609a      	str	r2, [r3, #8]
}
 8008ad8:	bf00      	nop
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
 8008af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008afe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	021a      	lsls	r2, r3, #8
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	431a      	orrs	r2, r3
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	609a      	str	r2, [r3, #8]
}
 8008b18:	bf00      	nop
 8008b1a:	371c      	adds	r7, #28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	f003 031f 	and.w	r3, r3, #31
 8008b36:	2201      	movs	r2, #1
 8008b38:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6a1a      	ldr	r2, [r3, #32]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	43db      	mvns	r3, r3
 8008b46:	401a      	ands	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6a1a      	ldr	r2, [r3, #32]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f003 031f 	and.w	r3, r3, #31
 8008b56:	6879      	ldr	r1, [r7, #4]
 8008b58:	fa01 f303 	lsl.w	r3, r1, r3
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	621a      	str	r2, [r3, #32]
}
 8008b62:	bf00      	nop
 8008b64:	371c      	adds	r7, #28
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
	...

08008b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d101      	bne.n	8008b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b84:	2302      	movs	r3, #2
 8008b86:	e05a      	b.n	8008c3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a21      	ldr	r2, [pc, #132]	; (8008c4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d022      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bd4:	d01d      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a1d      	ldr	r2, [pc, #116]	; (8008c50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d018      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a1b      	ldr	r2, [pc, #108]	; (8008c54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d013      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a1a      	ldr	r2, [pc, #104]	; (8008c58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d00e      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a18      	ldr	r2, [pc, #96]	; (8008c5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d009      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a17      	ldr	r2, [pc, #92]	; (8008c60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d004      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a15      	ldr	r2, [pc, #84]	; (8008c64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d10c      	bne.n	8008c2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	40010000 	.word	0x40010000
 8008c50:	40000400 	.word	0x40000400
 8008c54:	40000800 	.word	0x40000800
 8008c58:	40000c00 	.word	0x40000c00
 8008c5c:	40010400 	.word	0x40010400
 8008c60:	40014000 	.word	0x40014000
 8008c64:	40001800 	.word	0x40001800

08008c68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d101      	bne.n	8008c84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c80:	2302      	movs	r3, #2
 8008c82:	e03d      	b.n	8008d00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e03f      	b.n	8008dc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d106      	bne.n	8008d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7fb f8ec 	bl	8003f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2224      	movs	r2, #36	; 0x24
 8008d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fe81 	bl	8009a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	691a      	ldr	r2, [r3, #16]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	695a      	ldr	r2, [r3, #20]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2220      	movs	r2, #32
 8008db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b08a      	sub	sp, #40	; 0x28
 8008dd2:	af02      	add	r7, sp, #8
 8008dd4:	60f8      	str	r0, [r7, #12]
 8008dd6:	60b9      	str	r1, [r7, #8]
 8008dd8:	603b      	str	r3, [r7, #0]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008dde:	2300      	movs	r3, #0
 8008de0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b20      	cmp	r3, #32
 8008dec:	d17c      	bne.n	8008ee8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <HAL_UART_Transmit+0x2c>
 8008df4:	88fb      	ldrh	r3, [r7, #6]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e075      	b.n	8008eea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d101      	bne.n	8008e0c <HAL_UART_Transmit+0x3e>
 8008e08:	2302      	movs	r3, #2
 8008e0a:	e06e      	b.n	8008eea <HAL_UART_Transmit+0x11c>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2221      	movs	r2, #33	; 0x21
 8008e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e22:	f7fb fb6b 	bl	80044fc <HAL_GetTick>
 8008e26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	88fa      	ldrh	r2, [r7, #6]
 8008e2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	88fa      	ldrh	r2, [r7, #6]
 8008e32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e3c:	d108      	bne.n	8008e50 <HAL_UART_Transmit+0x82>
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d104      	bne.n	8008e50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008e46:	2300      	movs	r3, #0
 8008e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	61bb      	str	r3, [r7, #24]
 8008e4e:	e003      	b.n	8008e58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e54:	2300      	movs	r3, #0
 8008e56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008e60:	e02a      	b.n	8008eb8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2180      	movs	r1, #128	; 0x80
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f000 fbc1 	bl	80095f4 <UART_WaitOnFlagUntilTimeout>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e036      	b.n	8008eea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10b      	bne.n	8008e9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	881b      	ldrh	r3, [r3, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	3302      	adds	r3, #2
 8008e96:	61bb      	str	r3, [r7, #24]
 8008e98:	e007      	b.n	8008eaa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	781a      	ldrb	r2, [r3, #0]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1cf      	bne.n	8008e62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	2140      	movs	r1, #64	; 0x40
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 fb91 	bl	80095f4 <UART_WaitOnFlagUntilTimeout>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e006      	b.n	8008eea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2220      	movs	r2, #32
 8008ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	e000      	b.n	8008eea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008ee8:	2302      	movs	r3, #2
  }
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3720      	adds	r7, #32
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b08a      	sub	sp, #40	; 0x28
 8008ef6:	af02      	add	r7, sp, #8
 8008ef8:	60f8      	str	r0, [r7, #12]
 8008efa:	60b9      	str	r1, [r7, #8]
 8008efc:	603b      	str	r3, [r7, #0]
 8008efe:	4613      	mov	r3, r2
 8008f00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b20      	cmp	r3, #32
 8008f10:	f040 808c 	bne.w	800902c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d002      	beq.n	8008f20 <HAL_UART_Receive+0x2e>
 8008f1a:	88fb      	ldrh	r3, [r7, #6]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d101      	bne.n	8008f24 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e084      	b.n	800902e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d101      	bne.n	8008f32 <HAL_UART_Receive+0x40>
 8008f2e:	2302      	movs	r3, #2
 8008f30:	e07d      	b.n	800902e <HAL_UART_Receive+0x13c>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2222      	movs	r2, #34	; 0x22
 8008f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f4e:	f7fb fad5 	bl	80044fc <HAL_GetTick>
 8008f52:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	88fa      	ldrh	r2, [r7, #6]
 8008f58:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	88fa      	ldrh	r2, [r7, #6]
 8008f5e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f68:	d108      	bne.n	8008f7c <HAL_UART_Receive+0x8a>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d104      	bne.n	8008f7c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008f72:	2300      	movs	r3, #0
 8008f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	61bb      	str	r3, [r7, #24]
 8008f7a:	e003      	b.n	8008f84 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f80:	2300      	movs	r3, #0
 8008f82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008f8c:	e043      	b.n	8009016 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2200      	movs	r2, #0
 8008f96:	2120      	movs	r1, #32
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f000 fb2b 	bl	80095f4 <UART_WaitOnFlagUntilTimeout>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d001      	beq.n	8008fa8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e042      	b.n	800902e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10c      	bne.n	8008fc8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	3302      	adds	r3, #2
 8008fc4:	61bb      	str	r3, [r7, #24]
 8008fc6:	e01f      	b.n	8009008 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fd0:	d007      	beq.n	8008fe2 <HAL_UART_Receive+0xf0>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10a      	bne.n	8008ff0 <HAL_UART_Receive+0xfe>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d106      	bne.n	8008ff0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	701a      	strb	r2, [r3, #0]
 8008fee:	e008      	b.n	8009002 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	3301      	adds	r3, #1
 8009006:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800900c:	b29b      	uxth	r3, r3
 800900e:	3b01      	subs	r3, #1
 8009010:	b29a      	uxth	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800901a:	b29b      	uxth	r3, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1b6      	bne.n	8008f8e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2220      	movs	r2, #32
 8009024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	e000      	b.n	800902e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800902c:	2302      	movs	r3, #2
  }
}
 800902e:	4618      	mov	r0, r3
 8009030:	3720      	adds	r7, #32
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	4613      	mov	r3, r2
 8009042:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b20      	cmp	r3, #32
 800904e:	d11d      	bne.n	800908c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d002      	beq.n	800905c <HAL_UART_Receive_IT+0x26>
 8009056:	88fb      	ldrh	r3, [r7, #6]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d101      	bne.n	8009060 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e016      	b.n	800908e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009066:	2b01      	cmp	r3, #1
 8009068:	d101      	bne.n	800906e <HAL_UART_Receive_IT+0x38>
 800906a:	2302      	movs	r3, #2
 800906c:	e00f      	b.n	800908e <HAL_UART_Receive_IT+0x58>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800907c:	88fb      	ldrh	r3, [r7, #6]
 800907e:	461a      	mov	r2, r3
 8009080:	68b9      	ldr	r1, [r7, #8]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f000 fb24 	bl	80096d0 <UART_Start_Receive_IT>
 8009088:	4603      	mov	r3, r0
 800908a:	e000      	b.n	800908e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800908c:	2302      	movs	r3, #2
  }
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b0ba      	sub	sp, #232	; 0xe8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80090be:	2300      	movs	r3, #0
 80090c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80090ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ce:	f003 030f 	and.w	r3, r3, #15
 80090d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80090d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10f      	bne.n	80090fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090e2:	f003 0320 	and.w	r3, r3, #32
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d009      	beq.n	80090fe <HAL_UART_IRQHandler+0x66>
 80090ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090ee:	f003 0320 	and.w	r3, r3, #32
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fc07 	bl	800990a <UART_Receive_IT>
      return;
 80090fc:	e256      	b.n	80095ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80090fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 80de 	beq.w	80092c4 <HAL_UART_IRQHandler+0x22c>
 8009108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	2b00      	cmp	r3, #0
 8009112:	d106      	bne.n	8009122 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009118:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 80d1 	beq.w	80092c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00b      	beq.n	8009146 <HAL_UART_IRQHandler+0xae>
 800912e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009136:	2b00      	cmp	r3, #0
 8009138:	d005      	beq.n	8009146 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913e:	f043 0201 	orr.w	r2, r3, #1
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800914a:	f003 0304 	and.w	r3, r3, #4
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00b      	beq.n	800916a <HAL_UART_IRQHandler+0xd2>
 8009152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d005      	beq.n	800916a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009162:	f043 0202 	orr.w	r2, r3, #2
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800916a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00b      	beq.n	800918e <HAL_UART_IRQHandler+0xf6>
 8009176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800917a:	f003 0301 	and.w	r3, r3, #1
 800917e:	2b00      	cmp	r3, #0
 8009180:	d005      	beq.n	800918e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009186:	f043 0204 	orr.w	r2, r3, #4
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800918e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009192:	f003 0308 	and.w	r3, r3, #8
 8009196:	2b00      	cmp	r3, #0
 8009198:	d011      	beq.n	80091be <HAL_UART_IRQHandler+0x126>
 800919a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800919e:	f003 0320 	and.w	r3, r3, #32
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d105      	bne.n	80091b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80091a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d005      	beq.n	80091be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b6:	f043 0208 	orr.w	r2, r3, #8
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 81ed 	beq.w	80095a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091cc:	f003 0320 	and.w	r3, r3, #32
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d008      	beq.n	80091e6 <HAL_UART_IRQHandler+0x14e>
 80091d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091d8:	f003 0320 	and.w	r3, r3, #32
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fb92 	bl	800990a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f0:	2b40      	cmp	r3, #64	; 0x40
 80091f2:	bf0c      	ite	eq
 80091f4:	2301      	moveq	r3, #1
 80091f6:	2300      	movne	r3, #0
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	f003 0308 	and.w	r3, r3, #8
 8009206:	2b00      	cmp	r3, #0
 8009208:	d103      	bne.n	8009212 <HAL_UART_IRQHandler+0x17a>
 800920a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800920e:	2b00      	cmp	r3, #0
 8009210:	d04f      	beq.n	80092b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fa9a 	bl	800974c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009222:	2b40      	cmp	r3, #64	; 0x40
 8009224:	d141      	bne.n	80092aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3314      	adds	r3, #20
 800922c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009230:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009234:	e853 3f00 	ldrex	r3, [r3]
 8009238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800923c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3314      	adds	r3, #20
 800924e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009252:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800925e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800926a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1d9      	bne.n	8009226 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009276:	2b00      	cmp	r3, #0
 8009278:	d013      	beq.n	80092a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927e:	4a7d      	ldr	r2, [pc, #500]	; (8009474 <HAL_UART_IRQHandler+0x3dc>)
 8009280:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009286:	4618      	mov	r0, r3
 8009288:	f7fc f998 	bl	80055bc <HAL_DMA_Abort_IT>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d016      	beq.n	80092c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800929c:	4610      	mov	r0, r2
 800929e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092a0:	e00e      	b.n	80092c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f990 	bl	80095c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092a8:	e00a      	b.n	80092c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f98c 	bl	80095c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092b0:	e006      	b.n	80092c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f988 	bl	80095c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80092be:	e170      	b.n	80095a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c0:	bf00      	nop
    return;
 80092c2:	e16e      	b.n	80095a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	f040 814a 	bne.w	8009562 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80092ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092d2:	f003 0310 	and.w	r3, r3, #16
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f000 8143 	beq.w	8009562 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80092dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092e0:	f003 0310 	and.w	r3, r3, #16
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 813c 	beq.w	8009562 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092ea:	2300      	movs	r3, #0
 80092ec:	60bb      	str	r3, [r7, #8]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	60bb      	str	r3, [r7, #8]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	60bb      	str	r3, [r7, #8]
 80092fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800930a:	2b40      	cmp	r3, #64	; 0x40
 800930c:	f040 80b4 	bne.w	8009478 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800931c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 8140 	beq.w	80095a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800932a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800932e:	429a      	cmp	r2, r3
 8009330:	f080 8139 	bcs.w	80095a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800933a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009346:	f000 8088 	beq.w	800945a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	330c      	adds	r3, #12
 8009350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009358:	e853 3f00 	ldrex	r3, [r3]
 800935c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	330c      	adds	r3, #12
 8009372:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009376:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800937a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009382:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009386:	e841 2300 	strex	r3, r2, [r1]
 800938a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800938e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1d9      	bne.n	800934a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3314      	adds	r3, #20
 800939c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093a0:	e853 3f00 	ldrex	r3, [r3]
 80093a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80093a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093a8:	f023 0301 	bic.w	r3, r3, #1
 80093ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3314      	adds	r3, #20
 80093b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80093ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80093be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80093c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093c6:	e841 2300 	strex	r3, r2, [r1]
 80093ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80093cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1e1      	bne.n	8009396 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3314      	adds	r3, #20
 80093d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3314      	adds	r3, #20
 80093f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80093f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80093f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093fe:	e841 2300 	strex	r3, r2, [r1]
 8009402:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1e3      	bne.n	80093d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2220      	movs	r2, #32
 800940e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	330c      	adds	r3, #12
 800941e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009422:	e853 3f00 	ldrex	r3, [r3]
 8009426:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800942a:	f023 0310 	bic.w	r3, r3, #16
 800942e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	330c      	adds	r3, #12
 8009438:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800943c:	65ba      	str	r2, [r7, #88]	; 0x58
 800943e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009440:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009442:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009444:	e841 2300 	strex	r3, r2, [r1]
 8009448:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800944a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e3      	bne.n	8009418 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009454:	4618      	mov	r0, r3
 8009456:	f7fc f841 	bl	80054dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009462:	b29b      	uxth	r3, r3
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	b29b      	uxth	r3, r3
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f8b6 	bl	80095dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009470:	e099      	b.n	80095a6 <HAL_UART_IRQHandler+0x50e>
 8009472:	bf00      	nop
 8009474:	08009813 	.word	0x08009813
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009480:	b29b      	uxth	r3, r3
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800948c:	b29b      	uxth	r3, r3
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 808b 	beq.w	80095aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 8086 	beq.w	80095aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	330c      	adds	r3, #12
 80094a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a8:	e853 3f00 	ldrex	r3, [r3]
 80094ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	330c      	adds	r3, #12
 80094be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80094c2:	647a      	str	r2, [r7, #68]	; 0x44
 80094c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094ca:	e841 2300 	strex	r3, r2, [r1]
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1e3      	bne.n	800949e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3314      	adds	r3, #20
 80094dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e0:	e853 3f00 	ldrex	r3, [r3]
 80094e4:	623b      	str	r3, [r7, #32]
   return(result);
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	f023 0301 	bic.w	r3, r3, #1
 80094ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3314      	adds	r3, #20
 80094f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80094fa:	633a      	str	r2, [r7, #48]	; 0x30
 80094fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009502:	e841 2300 	strex	r3, r2, [r1]
 8009506:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1e3      	bne.n	80094d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2220      	movs	r2, #32
 8009512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	330c      	adds	r3, #12
 8009522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	e853 3f00 	ldrex	r3, [r3]
 800952a:	60fb      	str	r3, [r7, #12]
   return(result);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f023 0310 	bic.w	r3, r3, #16
 8009532:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	330c      	adds	r3, #12
 800953c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009540:	61fa      	str	r2, [r7, #28]
 8009542:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009544:	69b9      	ldr	r1, [r7, #24]
 8009546:	69fa      	ldr	r2, [r7, #28]
 8009548:	e841 2300 	strex	r3, r2, [r1]
 800954c:	617b      	str	r3, [r7, #20]
   return(result);
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1e3      	bne.n	800951c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f83e 	bl	80095dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009560:	e023      	b.n	80095aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800956a:	2b00      	cmp	r3, #0
 800956c:	d009      	beq.n	8009582 <HAL_UART_IRQHandler+0x4ea>
 800956e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009576:	2b00      	cmp	r3, #0
 8009578:	d003      	beq.n	8009582 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f95d 	bl	800983a <UART_Transmit_IT>
    return;
 8009580:	e014      	b.n	80095ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00e      	beq.n	80095ac <HAL_UART_IRQHandler+0x514>
 800958e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009596:	2b00      	cmp	r3, #0
 8009598:	d008      	beq.n	80095ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f99d 	bl	80098da <UART_EndTransmit_IT>
    return;
 80095a0:	e004      	b.n	80095ac <HAL_UART_IRQHandler+0x514>
    return;
 80095a2:	bf00      	nop
 80095a4:	e002      	b.n	80095ac <HAL_UART_IRQHandler+0x514>
      return;
 80095a6:	bf00      	nop
 80095a8:	e000      	b.n	80095ac <HAL_UART_IRQHandler+0x514>
      return;
 80095aa:	bf00      	nop
  }
}
 80095ac:	37e8      	adds	r7, #232	; 0xe8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop

080095b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b090      	sub	sp, #64	; 0x40
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	603b      	str	r3, [r7, #0]
 8009600:	4613      	mov	r3, r2
 8009602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009604:	e050      	b.n	80096a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960c:	d04c      	beq.n	80096a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800960e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009610:	2b00      	cmp	r3, #0
 8009612:	d007      	beq.n	8009624 <UART_WaitOnFlagUntilTimeout+0x30>
 8009614:	f7fa ff72 	bl	80044fc <HAL_GetTick>
 8009618:	4602      	mov	r2, r0
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009620:	429a      	cmp	r2, r3
 8009622:	d241      	bcs.n	80096a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	330c      	adds	r3, #12
 800962a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	e853 3f00 	ldrex	r3, [r3]
 8009632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800963a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	330c      	adds	r3, #12
 8009642:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009644:	637a      	str	r2, [r7, #52]	; 0x34
 8009646:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800964a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800964c:	e841 2300 	strex	r3, r2, [r1]
 8009650:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1e5      	bne.n	8009624 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3314      	adds	r3, #20
 800965e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	e853 3f00 	ldrex	r3, [r3]
 8009666:	613b      	str	r3, [r7, #16]
   return(result);
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f023 0301 	bic.w	r3, r3, #1
 800966e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3314      	adds	r3, #20
 8009676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009678:	623a      	str	r2, [r7, #32]
 800967a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	69f9      	ldr	r1, [r7, #28]
 800967e:	6a3a      	ldr	r2, [r7, #32]
 8009680:	e841 2300 	strex	r3, r2, [r1]
 8009684:	61bb      	str	r3, [r7, #24]
   return(result);
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e5      	bne.n	8009658 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2220      	movs	r2, #32
 8009690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2220      	movs	r2, #32
 8009698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e00f      	b.n	80096c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	4013      	ands	r3, r2
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	bf0c      	ite	eq
 80096b8:	2301      	moveq	r3, #1
 80096ba:	2300      	movne	r3, #0
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	461a      	mov	r2, r3
 80096c0:	79fb      	ldrb	r3, [r7, #7]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d09f      	beq.n	8009606 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3740      	adds	r7, #64	; 0x40
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	4613      	mov	r3, r2
 80096dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	88fa      	ldrh	r2, [r7, #6]
 80096e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	88fa      	ldrh	r2, [r7, #6]
 80096ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2200      	movs	r2, #0
 80096f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2222      	movs	r2, #34	; 0x22
 80096fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d007      	beq.n	800971e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68da      	ldr	r2, [r3, #12]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800971c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	695a      	ldr	r2, [r3, #20]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f042 0201 	orr.w	r2, r2, #1
 800972c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68da      	ldr	r2, [r3, #12]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f042 0220 	orr.w	r2, r2, #32
 800973c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800974c:	b480      	push	{r7}
 800974e:	b095      	sub	sp, #84	; 0x54
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	330c      	adds	r3, #12
 800975a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800975e:	e853 3f00 	ldrex	r3, [r3]
 8009762:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009766:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800976a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	330c      	adds	r3, #12
 8009772:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009774:	643a      	str	r2, [r7, #64]	; 0x40
 8009776:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009778:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800977a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800977c:	e841 2300 	strex	r3, r2, [r1]
 8009780:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1e5      	bne.n	8009754 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3314      	adds	r3, #20
 800978e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009790:	6a3b      	ldr	r3, [r7, #32]
 8009792:	e853 3f00 	ldrex	r3, [r3]
 8009796:	61fb      	str	r3, [r7, #28]
   return(result);
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	f023 0301 	bic.w	r3, r3, #1
 800979e:	64bb      	str	r3, [r7, #72]	; 0x48
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3314      	adds	r3, #20
 80097a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097b0:	e841 2300 	strex	r3, r2, [r1]
 80097b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1e5      	bne.n	8009788 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d119      	bne.n	80097f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	330c      	adds	r3, #12
 80097ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	e853 3f00 	ldrex	r3, [r3]
 80097d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	f023 0310 	bic.w	r3, r3, #16
 80097da:	647b      	str	r3, [r7, #68]	; 0x44
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	330c      	adds	r3, #12
 80097e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097e4:	61ba      	str	r2, [r7, #24]
 80097e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e8:	6979      	ldr	r1, [r7, #20]
 80097ea:	69ba      	ldr	r2, [r7, #24]
 80097ec:	e841 2300 	strex	r3, r2, [r1]
 80097f0:	613b      	str	r3, [r7, #16]
   return(result);
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1e5      	bne.n	80097c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009806:	bf00      	nop
 8009808:	3754      	adds	r7, #84	; 0x54
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f7ff fecb 	bl	80095c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009832:	bf00      	nop
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800983a:	b480      	push	{r7}
 800983c:	b085      	sub	sp, #20
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b21      	cmp	r3, #33	; 0x21
 800984c:	d13e      	bne.n	80098cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009856:	d114      	bne.n	8009882 <UART_Transmit_IT+0x48>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d110      	bne.n	8009882 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a1b      	ldr	r3, [r3, #32]
 8009864:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009874:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	1c9a      	adds	r2, r3, #2
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	621a      	str	r2, [r3, #32]
 8009880:	e008      	b.n	8009894 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	1c59      	adds	r1, r3, #1
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	6211      	str	r1, [r2, #32]
 800988c:	781a      	ldrb	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009898:	b29b      	uxth	r3, r3
 800989a:	3b01      	subs	r3, #1
 800989c:	b29b      	uxth	r3, r3
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	4619      	mov	r1, r3
 80098a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10f      	bne.n	80098c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68da      	ldr	r2, [r3, #12]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68da      	ldr	r2, [r3, #12]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	e000      	b.n	80098ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80098cc:	2302      	movs	r3, #2
  }
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68da      	ldr	r2, [r3, #12]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2220      	movs	r2, #32
 80098f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f7ff fe5a 	bl	80095b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b08c      	sub	sp, #48	; 0x30
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b22      	cmp	r3, #34	; 0x22
 800991c:	f040 80ab 	bne.w	8009a76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009928:	d117      	bne.n	800995a <UART_Receive_IT+0x50>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d113      	bne.n	800995a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009932:	2300      	movs	r3, #0
 8009934:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	b29b      	uxth	r3, r3
 8009944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009948:	b29a      	uxth	r2, r3
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009952:	1c9a      	adds	r2, r3, #2
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	629a      	str	r2, [r3, #40]	; 0x28
 8009958:	e026      	b.n	80099a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009960:	2300      	movs	r3, #0
 8009962:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800996c:	d007      	beq.n	800997e <UART_Receive_IT+0x74>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10a      	bne.n	800998c <UART_Receive_IT+0x82>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d106      	bne.n	800998c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	b2da      	uxtb	r2, r3
 8009986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009988:	701a      	strb	r2, [r3, #0]
 800998a:	e008      	b.n	800999e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009998:	b2da      	uxtb	r2, r3
 800999a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a2:	1c5a      	adds	r2, r3, #1
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	3b01      	subs	r3, #1
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	4619      	mov	r1, r3
 80099b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d15a      	bne.n	8009a72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f022 0220 	bic.w	r2, r2, #32
 80099ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68da      	ldr	r2, [r3, #12]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	695a      	ldr	r2, [r3, #20]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f022 0201 	bic.w	r2, r2, #1
 80099ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2220      	movs	r2, #32
 80099f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d135      	bne.n	8009a68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	330c      	adds	r3, #12
 8009a08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	e853 3f00 	ldrex	r3, [r3]
 8009a10:	613b      	str	r3, [r7, #16]
   return(result);
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f023 0310 	bic.w	r3, r3, #16
 8009a18:	627b      	str	r3, [r7, #36]	; 0x24
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	330c      	adds	r3, #12
 8009a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a22:	623a      	str	r2, [r7, #32]
 8009a24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a26:	69f9      	ldr	r1, [r7, #28]
 8009a28:	6a3a      	ldr	r2, [r7, #32]
 8009a2a:	e841 2300 	strex	r3, r2, [r1]
 8009a2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1e5      	bne.n	8009a02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0310 	and.w	r3, r3, #16
 8009a40:	2b10      	cmp	r3, #16
 8009a42:	d10a      	bne.n	8009a5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a44:	2300      	movs	r3, #0
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	60fb      	str	r3, [r7, #12]
 8009a58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7ff fdbb 	bl	80095dc <HAL_UARTEx_RxEventCallback>
 8009a66:	e002      	b.n	8009a6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7f9 ff25 	bl	80038b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e002      	b.n	8009a78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	e000      	b.n	8009a78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009a76:	2302      	movs	r3, #2
  }
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3730      	adds	r7, #48	; 0x30
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a84:	b0c0      	sub	sp, #256	; 0x100
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a9c:	68d9      	ldr	r1, [r3, #12]
 8009a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	ea40 0301 	orr.w	r3, r0, r1
 8009aa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aae:	689a      	ldr	r2, [r3, #8]
 8009ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	431a      	orrs	r2, r3
 8009ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009abc:	695b      	ldr	r3, [r3, #20]
 8009abe:	431a      	orrs	r2, r3
 8009ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ac4:	69db      	ldr	r3, [r3, #28]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009ad8:	f021 010c 	bic.w	r1, r1, #12
 8009adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ae6:	430b      	orrs	r3, r1
 8009ae8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009afa:	6999      	ldr	r1, [r3, #24]
 8009afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	ea40 0301 	orr.w	r3, r0, r1
 8009b06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	4b8f      	ldr	r3, [pc, #572]	; (8009d4c <UART_SetConfig+0x2cc>)
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d005      	beq.n	8009b20 <UART_SetConfig+0xa0>
 8009b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	4b8d      	ldr	r3, [pc, #564]	; (8009d50 <UART_SetConfig+0x2d0>)
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d104      	bne.n	8009b2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b20:	f7fc fd34 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 8009b24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009b28:	e003      	b.n	8009b32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b2a:	f7fc fd1b 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 8009b2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b36:	69db      	ldr	r3, [r3, #28]
 8009b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b3c:	f040 810c 	bne.w	8009d58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b44:	2200      	movs	r2, #0
 8009b46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009b4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009b52:	4622      	mov	r2, r4
 8009b54:	462b      	mov	r3, r5
 8009b56:	1891      	adds	r1, r2, r2
 8009b58:	65b9      	str	r1, [r7, #88]	; 0x58
 8009b5a:	415b      	adcs	r3, r3
 8009b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009b62:	4621      	mov	r1, r4
 8009b64:	eb12 0801 	adds.w	r8, r2, r1
 8009b68:	4629      	mov	r1, r5
 8009b6a:	eb43 0901 	adc.w	r9, r3, r1
 8009b6e:	f04f 0200 	mov.w	r2, #0
 8009b72:	f04f 0300 	mov.w	r3, #0
 8009b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009b82:	4690      	mov	r8, r2
 8009b84:	4699      	mov	r9, r3
 8009b86:	4623      	mov	r3, r4
 8009b88:	eb18 0303 	adds.w	r3, r8, r3
 8009b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b90:	462b      	mov	r3, r5
 8009b92:	eb49 0303 	adc.w	r3, r9, r3
 8009b96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ba6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009baa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009bae:	460b      	mov	r3, r1
 8009bb0:	18db      	adds	r3, r3, r3
 8009bb2:	653b      	str	r3, [r7, #80]	; 0x50
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	eb42 0303 	adc.w	r3, r2, r3
 8009bba:	657b      	str	r3, [r7, #84]	; 0x54
 8009bbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009bc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009bc4:	f7f7 f860 	bl	8000c88 <__aeabi_uldivmod>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4b61      	ldr	r3, [pc, #388]	; (8009d54 <UART_SetConfig+0x2d4>)
 8009bce:	fba3 2302 	umull	r2, r3, r3, r2
 8009bd2:	095b      	lsrs	r3, r3, #5
 8009bd4:	011c      	lsls	r4, r3, #4
 8009bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009be0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009be4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009be8:	4642      	mov	r2, r8
 8009bea:	464b      	mov	r3, r9
 8009bec:	1891      	adds	r1, r2, r2
 8009bee:	64b9      	str	r1, [r7, #72]	; 0x48
 8009bf0:	415b      	adcs	r3, r3
 8009bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009bf8:	4641      	mov	r1, r8
 8009bfa:	eb12 0a01 	adds.w	sl, r2, r1
 8009bfe:	4649      	mov	r1, r9
 8009c00:	eb43 0b01 	adc.w	fp, r3, r1
 8009c04:	f04f 0200 	mov.w	r2, #0
 8009c08:	f04f 0300 	mov.w	r3, #0
 8009c0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009c10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009c14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c18:	4692      	mov	sl, r2
 8009c1a:	469b      	mov	fp, r3
 8009c1c:	4643      	mov	r3, r8
 8009c1e:	eb1a 0303 	adds.w	r3, sl, r3
 8009c22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c26:	464b      	mov	r3, r9
 8009c28:	eb4b 0303 	adc.w	r3, fp, r3
 8009c2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009c40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009c44:	460b      	mov	r3, r1
 8009c46:	18db      	adds	r3, r3, r3
 8009c48:	643b      	str	r3, [r7, #64]	; 0x40
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	eb42 0303 	adc.w	r3, r2, r3
 8009c50:	647b      	str	r3, [r7, #68]	; 0x44
 8009c52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009c56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009c5a:	f7f7 f815 	bl	8000c88 <__aeabi_uldivmod>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4611      	mov	r1, r2
 8009c64:	4b3b      	ldr	r3, [pc, #236]	; (8009d54 <UART_SetConfig+0x2d4>)
 8009c66:	fba3 2301 	umull	r2, r3, r3, r1
 8009c6a:	095b      	lsrs	r3, r3, #5
 8009c6c:	2264      	movs	r2, #100	; 0x64
 8009c6e:	fb02 f303 	mul.w	r3, r2, r3
 8009c72:	1acb      	subs	r3, r1, r3
 8009c74:	00db      	lsls	r3, r3, #3
 8009c76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009c7a:	4b36      	ldr	r3, [pc, #216]	; (8009d54 <UART_SetConfig+0x2d4>)
 8009c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8009c80:	095b      	lsrs	r3, r3, #5
 8009c82:	005b      	lsls	r3, r3, #1
 8009c84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c88:	441c      	add	r4, r3
 8009c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009c98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009c9c:	4642      	mov	r2, r8
 8009c9e:	464b      	mov	r3, r9
 8009ca0:	1891      	adds	r1, r2, r2
 8009ca2:	63b9      	str	r1, [r7, #56]	; 0x38
 8009ca4:	415b      	adcs	r3, r3
 8009ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ca8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009cac:	4641      	mov	r1, r8
 8009cae:	1851      	adds	r1, r2, r1
 8009cb0:	6339      	str	r1, [r7, #48]	; 0x30
 8009cb2:	4649      	mov	r1, r9
 8009cb4:	414b      	adcs	r3, r1
 8009cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8009cb8:	f04f 0200 	mov.w	r2, #0
 8009cbc:	f04f 0300 	mov.w	r3, #0
 8009cc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009cc4:	4659      	mov	r1, fp
 8009cc6:	00cb      	lsls	r3, r1, #3
 8009cc8:	4651      	mov	r1, sl
 8009cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cce:	4651      	mov	r1, sl
 8009cd0:	00ca      	lsls	r2, r1, #3
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	4642      	mov	r2, r8
 8009cda:	189b      	adds	r3, r3, r2
 8009cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ce0:	464b      	mov	r3, r9
 8009ce2:	460a      	mov	r2, r1
 8009ce4:	eb42 0303 	adc.w	r3, r2, r3
 8009ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009cf8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009cfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009d00:	460b      	mov	r3, r1
 8009d02:	18db      	adds	r3, r3, r3
 8009d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d06:	4613      	mov	r3, r2
 8009d08:	eb42 0303 	adc.w	r3, r2, r3
 8009d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009d16:	f7f6 ffb7 	bl	8000c88 <__aeabi_uldivmod>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4b0d      	ldr	r3, [pc, #52]	; (8009d54 <UART_SetConfig+0x2d4>)
 8009d20:	fba3 1302 	umull	r1, r3, r3, r2
 8009d24:	095b      	lsrs	r3, r3, #5
 8009d26:	2164      	movs	r1, #100	; 0x64
 8009d28:	fb01 f303 	mul.w	r3, r1, r3
 8009d2c:	1ad3      	subs	r3, r2, r3
 8009d2e:	00db      	lsls	r3, r3, #3
 8009d30:	3332      	adds	r3, #50	; 0x32
 8009d32:	4a08      	ldr	r2, [pc, #32]	; (8009d54 <UART_SetConfig+0x2d4>)
 8009d34:	fba2 2303 	umull	r2, r3, r2, r3
 8009d38:	095b      	lsrs	r3, r3, #5
 8009d3a:	f003 0207 	and.w	r2, r3, #7
 8009d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4422      	add	r2, r4
 8009d46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009d48:	e105      	b.n	8009f56 <UART_SetConfig+0x4d6>
 8009d4a:	bf00      	nop
 8009d4c:	40011000 	.word	0x40011000
 8009d50:	40011400 	.word	0x40011400
 8009d54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009d62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009d66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009d6a:	4642      	mov	r2, r8
 8009d6c:	464b      	mov	r3, r9
 8009d6e:	1891      	adds	r1, r2, r2
 8009d70:	6239      	str	r1, [r7, #32]
 8009d72:	415b      	adcs	r3, r3
 8009d74:	627b      	str	r3, [r7, #36]	; 0x24
 8009d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d7a:	4641      	mov	r1, r8
 8009d7c:	1854      	adds	r4, r2, r1
 8009d7e:	4649      	mov	r1, r9
 8009d80:	eb43 0501 	adc.w	r5, r3, r1
 8009d84:	f04f 0200 	mov.w	r2, #0
 8009d88:	f04f 0300 	mov.w	r3, #0
 8009d8c:	00eb      	lsls	r3, r5, #3
 8009d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d92:	00e2      	lsls	r2, r4, #3
 8009d94:	4614      	mov	r4, r2
 8009d96:	461d      	mov	r5, r3
 8009d98:	4643      	mov	r3, r8
 8009d9a:	18e3      	adds	r3, r4, r3
 8009d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009da0:	464b      	mov	r3, r9
 8009da2:	eb45 0303 	adc.w	r3, r5, r3
 8009da6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009db6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009dba:	f04f 0200 	mov.w	r2, #0
 8009dbe:	f04f 0300 	mov.w	r3, #0
 8009dc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	008b      	lsls	r3, r1, #2
 8009dca:	4621      	mov	r1, r4
 8009dcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	008a      	lsls	r2, r1, #2
 8009dd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009dd8:	f7f6 ff56 	bl	8000c88 <__aeabi_uldivmod>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	4b60      	ldr	r3, [pc, #384]	; (8009f64 <UART_SetConfig+0x4e4>)
 8009de2:	fba3 2302 	umull	r2, r3, r3, r2
 8009de6:	095b      	lsrs	r3, r3, #5
 8009de8:	011c      	lsls	r4, r3, #4
 8009dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009df4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009df8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009dfc:	4642      	mov	r2, r8
 8009dfe:	464b      	mov	r3, r9
 8009e00:	1891      	adds	r1, r2, r2
 8009e02:	61b9      	str	r1, [r7, #24]
 8009e04:	415b      	adcs	r3, r3
 8009e06:	61fb      	str	r3, [r7, #28]
 8009e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e0c:	4641      	mov	r1, r8
 8009e0e:	1851      	adds	r1, r2, r1
 8009e10:	6139      	str	r1, [r7, #16]
 8009e12:	4649      	mov	r1, r9
 8009e14:	414b      	adcs	r3, r1
 8009e16:	617b      	str	r3, [r7, #20]
 8009e18:	f04f 0200 	mov.w	r2, #0
 8009e1c:	f04f 0300 	mov.w	r3, #0
 8009e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e24:	4659      	mov	r1, fp
 8009e26:	00cb      	lsls	r3, r1, #3
 8009e28:	4651      	mov	r1, sl
 8009e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e2e:	4651      	mov	r1, sl
 8009e30:	00ca      	lsls	r2, r1, #3
 8009e32:	4610      	mov	r0, r2
 8009e34:	4619      	mov	r1, r3
 8009e36:	4603      	mov	r3, r0
 8009e38:	4642      	mov	r2, r8
 8009e3a:	189b      	adds	r3, r3, r2
 8009e3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e40:	464b      	mov	r3, r9
 8009e42:	460a      	mov	r2, r1
 8009e44:	eb42 0303 	adc.w	r3, r2, r3
 8009e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	67bb      	str	r3, [r7, #120]	; 0x78
 8009e56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009e58:	f04f 0200 	mov.w	r2, #0
 8009e5c:	f04f 0300 	mov.w	r3, #0
 8009e60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009e64:	4649      	mov	r1, r9
 8009e66:	008b      	lsls	r3, r1, #2
 8009e68:	4641      	mov	r1, r8
 8009e6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e6e:	4641      	mov	r1, r8
 8009e70:	008a      	lsls	r2, r1, #2
 8009e72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009e76:	f7f6 ff07 	bl	8000c88 <__aeabi_uldivmod>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4b39      	ldr	r3, [pc, #228]	; (8009f64 <UART_SetConfig+0x4e4>)
 8009e80:	fba3 1302 	umull	r1, r3, r3, r2
 8009e84:	095b      	lsrs	r3, r3, #5
 8009e86:	2164      	movs	r1, #100	; 0x64
 8009e88:	fb01 f303 	mul.w	r3, r1, r3
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	011b      	lsls	r3, r3, #4
 8009e90:	3332      	adds	r3, #50	; 0x32
 8009e92:	4a34      	ldr	r2, [pc, #208]	; (8009f64 <UART_SetConfig+0x4e4>)
 8009e94:	fba2 2303 	umull	r2, r3, r2, r3
 8009e98:	095b      	lsrs	r3, r3, #5
 8009e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e9e:	441c      	add	r4, r3
 8009ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	673b      	str	r3, [r7, #112]	; 0x70
 8009ea8:	677a      	str	r2, [r7, #116]	; 0x74
 8009eaa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009eae:	4642      	mov	r2, r8
 8009eb0:	464b      	mov	r3, r9
 8009eb2:	1891      	adds	r1, r2, r2
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	415b      	adcs	r3, r3
 8009eb8:	60fb      	str	r3, [r7, #12]
 8009eba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ebe:	4641      	mov	r1, r8
 8009ec0:	1851      	adds	r1, r2, r1
 8009ec2:	6039      	str	r1, [r7, #0]
 8009ec4:	4649      	mov	r1, r9
 8009ec6:	414b      	adcs	r3, r1
 8009ec8:	607b      	str	r3, [r7, #4]
 8009eca:	f04f 0200 	mov.w	r2, #0
 8009ece:	f04f 0300 	mov.w	r3, #0
 8009ed2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ed6:	4659      	mov	r1, fp
 8009ed8:	00cb      	lsls	r3, r1, #3
 8009eda:	4651      	mov	r1, sl
 8009edc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ee0:	4651      	mov	r1, sl
 8009ee2:	00ca      	lsls	r2, r1, #3
 8009ee4:	4610      	mov	r0, r2
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	4603      	mov	r3, r0
 8009eea:	4642      	mov	r2, r8
 8009eec:	189b      	adds	r3, r3, r2
 8009eee:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ef0:	464b      	mov	r3, r9
 8009ef2:	460a      	mov	r2, r1
 8009ef4:	eb42 0303 	adc.w	r3, r2, r3
 8009ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	663b      	str	r3, [r7, #96]	; 0x60
 8009f04:	667a      	str	r2, [r7, #100]	; 0x64
 8009f06:	f04f 0200 	mov.w	r2, #0
 8009f0a:	f04f 0300 	mov.w	r3, #0
 8009f0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009f12:	4649      	mov	r1, r9
 8009f14:	008b      	lsls	r3, r1, #2
 8009f16:	4641      	mov	r1, r8
 8009f18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f1c:	4641      	mov	r1, r8
 8009f1e:	008a      	lsls	r2, r1, #2
 8009f20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009f24:	f7f6 feb0 	bl	8000c88 <__aeabi_uldivmod>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	4b0d      	ldr	r3, [pc, #52]	; (8009f64 <UART_SetConfig+0x4e4>)
 8009f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8009f32:	095b      	lsrs	r3, r3, #5
 8009f34:	2164      	movs	r1, #100	; 0x64
 8009f36:	fb01 f303 	mul.w	r3, r1, r3
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	011b      	lsls	r3, r3, #4
 8009f3e:	3332      	adds	r3, #50	; 0x32
 8009f40:	4a08      	ldr	r2, [pc, #32]	; (8009f64 <UART_SetConfig+0x4e4>)
 8009f42:	fba2 2303 	umull	r2, r3, r2, r3
 8009f46:	095b      	lsrs	r3, r3, #5
 8009f48:	f003 020f 	and.w	r2, r3, #15
 8009f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4422      	add	r2, r4
 8009f54:	609a      	str	r2, [r3, #8]
}
 8009f56:	bf00      	nop
 8009f58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f62:	bf00      	nop
 8009f64:	51eb851f 	.word	0x51eb851f

08009f68 <__errno>:
 8009f68:	4b01      	ldr	r3, [pc, #4]	; (8009f70 <__errno+0x8>)
 8009f6a:	6818      	ldr	r0, [r3, #0]
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	20000060 	.word	0x20000060

08009f74 <__libc_init_array>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	4d0d      	ldr	r5, [pc, #52]	; (8009fac <__libc_init_array+0x38>)
 8009f78:	4c0d      	ldr	r4, [pc, #52]	; (8009fb0 <__libc_init_array+0x3c>)
 8009f7a:	1b64      	subs	r4, r4, r5
 8009f7c:	10a4      	asrs	r4, r4, #2
 8009f7e:	2600      	movs	r6, #0
 8009f80:	42a6      	cmp	r6, r4
 8009f82:	d109      	bne.n	8009f98 <__libc_init_array+0x24>
 8009f84:	4d0b      	ldr	r5, [pc, #44]	; (8009fb4 <__libc_init_array+0x40>)
 8009f86:	4c0c      	ldr	r4, [pc, #48]	; (8009fb8 <__libc_init_array+0x44>)
 8009f88:	f004 f950 	bl	800e22c <_init>
 8009f8c:	1b64      	subs	r4, r4, r5
 8009f8e:	10a4      	asrs	r4, r4, #2
 8009f90:	2600      	movs	r6, #0
 8009f92:	42a6      	cmp	r6, r4
 8009f94:	d105      	bne.n	8009fa2 <__libc_init_array+0x2e>
 8009f96:	bd70      	pop	{r4, r5, r6, pc}
 8009f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f9c:	4798      	blx	r3
 8009f9e:	3601      	adds	r6, #1
 8009fa0:	e7ee      	b.n	8009f80 <__libc_init_array+0xc>
 8009fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fa6:	4798      	blx	r3
 8009fa8:	3601      	adds	r6, #1
 8009faa:	e7f2      	b.n	8009f92 <__libc_init_array+0x1e>
 8009fac:	0800e900 	.word	0x0800e900
 8009fb0:	0800e900 	.word	0x0800e900
 8009fb4:	0800e900 	.word	0x0800e900
 8009fb8:	0800e904 	.word	0x0800e904

08009fbc <memset>:
 8009fbc:	4402      	add	r2, r0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d100      	bne.n	8009fc6 <memset+0xa>
 8009fc4:	4770      	bx	lr
 8009fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8009fca:	e7f9      	b.n	8009fc0 <memset+0x4>

08009fcc <__cvt>:
 8009fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd0:	ec55 4b10 	vmov	r4, r5, d0
 8009fd4:	2d00      	cmp	r5, #0
 8009fd6:	460e      	mov	r6, r1
 8009fd8:	4619      	mov	r1, r3
 8009fda:	462b      	mov	r3, r5
 8009fdc:	bfbb      	ittet	lt
 8009fde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009fe2:	461d      	movlt	r5, r3
 8009fe4:	2300      	movge	r3, #0
 8009fe6:	232d      	movlt	r3, #45	; 0x2d
 8009fe8:	700b      	strb	r3, [r1, #0]
 8009fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ff0:	4691      	mov	r9, r2
 8009ff2:	f023 0820 	bic.w	r8, r3, #32
 8009ff6:	bfbc      	itt	lt
 8009ff8:	4622      	movlt	r2, r4
 8009ffa:	4614      	movlt	r4, r2
 8009ffc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a000:	d005      	beq.n	800a00e <__cvt+0x42>
 800a002:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a006:	d100      	bne.n	800a00a <__cvt+0x3e>
 800a008:	3601      	adds	r6, #1
 800a00a:	2102      	movs	r1, #2
 800a00c:	e000      	b.n	800a010 <__cvt+0x44>
 800a00e:	2103      	movs	r1, #3
 800a010:	ab03      	add	r3, sp, #12
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	ab02      	add	r3, sp, #8
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	ec45 4b10 	vmov	d0, r4, r5
 800a01c:	4653      	mov	r3, sl
 800a01e:	4632      	mov	r2, r6
 800a020:	f000 fcea 	bl	800a9f8 <_dtoa_r>
 800a024:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a028:	4607      	mov	r7, r0
 800a02a:	d102      	bne.n	800a032 <__cvt+0x66>
 800a02c:	f019 0f01 	tst.w	r9, #1
 800a030:	d022      	beq.n	800a078 <__cvt+0xac>
 800a032:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a036:	eb07 0906 	add.w	r9, r7, r6
 800a03a:	d110      	bne.n	800a05e <__cvt+0x92>
 800a03c:	783b      	ldrb	r3, [r7, #0]
 800a03e:	2b30      	cmp	r3, #48	; 0x30
 800a040:	d10a      	bne.n	800a058 <__cvt+0x8c>
 800a042:	2200      	movs	r2, #0
 800a044:	2300      	movs	r3, #0
 800a046:	4620      	mov	r0, r4
 800a048:	4629      	mov	r1, r5
 800a04a:	f7f6 fd5d 	bl	8000b08 <__aeabi_dcmpeq>
 800a04e:	b918      	cbnz	r0, 800a058 <__cvt+0x8c>
 800a050:	f1c6 0601 	rsb	r6, r6, #1
 800a054:	f8ca 6000 	str.w	r6, [sl]
 800a058:	f8da 3000 	ldr.w	r3, [sl]
 800a05c:	4499      	add	r9, r3
 800a05e:	2200      	movs	r2, #0
 800a060:	2300      	movs	r3, #0
 800a062:	4620      	mov	r0, r4
 800a064:	4629      	mov	r1, r5
 800a066:	f7f6 fd4f 	bl	8000b08 <__aeabi_dcmpeq>
 800a06a:	b108      	cbz	r0, 800a070 <__cvt+0xa4>
 800a06c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a070:	2230      	movs	r2, #48	; 0x30
 800a072:	9b03      	ldr	r3, [sp, #12]
 800a074:	454b      	cmp	r3, r9
 800a076:	d307      	bcc.n	800a088 <__cvt+0xbc>
 800a078:	9b03      	ldr	r3, [sp, #12]
 800a07a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a07c:	1bdb      	subs	r3, r3, r7
 800a07e:	4638      	mov	r0, r7
 800a080:	6013      	str	r3, [r2, #0]
 800a082:	b004      	add	sp, #16
 800a084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a088:	1c59      	adds	r1, r3, #1
 800a08a:	9103      	str	r1, [sp, #12]
 800a08c:	701a      	strb	r2, [r3, #0]
 800a08e:	e7f0      	b.n	800a072 <__cvt+0xa6>

0800a090 <__exponent>:
 800a090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a092:	4603      	mov	r3, r0
 800a094:	2900      	cmp	r1, #0
 800a096:	bfb8      	it	lt
 800a098:	4249      	neglt	r1, r1
 800a09a:	f803 2b02 	strb.w	r2, [r3], #2
 800a09e:	bfb4      	ite	lt
 800a0a0:	222d      	movlt	r2, #45	; 0x2d
 800a0a2:	222b      	movge	r2, #43	; 0x2b
 800a0a4:	2909      	cmp	r1, #9
 800a0a6:	7042      	strb	r2, [r0, #1]
 800a0a8:	dd2a      	ble.n	800a100 <__exponent+0x70>
 800a0aa:	f10d 0407 	add.w	r4, sp, #7
 800a0ae:	46a4      	mov	ip, r4
 800a0b0:	270a      	movs	r7, #10
 800a0b2:	46a6      	mov	lr, r4
 800a0b4:	460a      	mov	r2, r1
 800a0b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a0ba:	fb07 1516 	mls	r5, r7, r6, r1
 800a0be:	3530      	adds	r5, #48	; 0x30
 800a0c0:	2a63      	cmp	r2, #99	; 0x63
 800a0c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a0c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a0ca:	4631      	mov	r1, r6
 800a0cc:	dcf1      	bgt.n	800a0b2 <__exponent+0x22>
 800a0ce:	3130      	adds	r1, #48	; 0x30
 800a0d0:	f1ae 0502 	sub.w	r5, lr, #2
 800a0d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a0d8:	1c44      	adds	r4, r0, #1
 800a0da:	4629      	mov	r1, r5
 800a0dc:	4561      	cmp	r1, ip
 800a0de:	d30a      	bcc.n	800a0f6 <__exponent+0x66>
 800a0e0:	f10d 0209 	add.w	r2, sp, #9
 800a0e4:	eba2 020e 	sub.w	r2, r2, lr
 800a0e8:	4565      	cmp	r5, ip
 800a0ea:	bf88      	it	hi
 800a0ec:	2200      	movhi	r2, #0
 800a0ee:	4413      	add	r3, r2
 800a0f0:	1a18      	subs	r0, r3, r0
 800a0f2:	b003      	add	sp, #12
 800a0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a0fe:	e7ed      	b.n	800a0dc <__exponent+0x4c>
 800a100:	2330      	movs	r3, #48	; 0x30
 800a102:	3130      	adds	r1, #48	; 0x30
 800a104:	7083      	strb	r3, [r0, #2]
 800a106:	70c1      	strb	r1, [r0, #3]
 800a108:	1d03      	adds	r3, r0, #4
 800a10a:	e7f1      	b.n	800a0f0 <__exponent+0x60>

0800a10c <_printf_float>:
 800a10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a110:	ed2d 8b02 	vpush	{d8}
 800a114:	b08d      	sub	sp, #52	; 0x34
 800a116:	460c      	mov	r4, r1
 800a118:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a11c:	4616      	mov	r6, r2
 800a11e:	461f      	mov	r7, r3
 800a120:	4605      	mov	r5, r0
 800a122:	f001 fa57 	bl	800b5d4 <_localeconv_r>
 800a126:	f8d0 a000 	ldr.w	sl, [r0]
 800a12a:	4650      	mov	r0, sl
 800a12c:	f7f6 f870 	bl	8000210 <strlen>
 800a130:	2300      	movs	r3, #0
 800a132:	930a      	str	r3, [sp, #40]	; 0x28
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	9305      	str	r3, [sp, #20]
 800a138:	f8d8 3000 	ldr.w	r3, [r8]
 800a13c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a140:	3307      	adds	r3, #7
 800a142:	f023 0307 	bic.w	r3, r3, #7
 800a146:	f103 0208 	add.w	r2, r3, #8
 800a14a:	f8c8 2000 	str.w	r2, [r8]
 800a14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a152:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a156:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a15a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a15e:	9307      	str	r3, [sp, #28]
 800a160:	f8cd 8018 	str.w	r8, [sp, #24]
 800a164:	ee08 0a10 	vmov	s16, r0
 800a168:	4b9f      	ldr	r3, [pc, #636]	; (800a3e8 <_printf_float+0x2dc>)
 800a16a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a16e:	f04f 32ff 	mov.w	r2, #4294967295
 800a172:	f7f6 fcfb 	bl	8000b6c <__aeabi_dcmpun>
 800a176:	bb88      	cbnz	r0, 800a1dc <_printf_float+0xd0>
 800a178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a17c:	4b9a      	ldr	r3, [pc, #616]	; (800a3e8 <_printf_float+0x2dc>)
 800a17e:	f04f 32ff 	mov.w	r2, #4294967295
 800a182:	f7f6 fcd5 	bl	8000b30 <__aeabi_dcmple>
 800a186:	bb48      	cbnz	r0, 800a1dc <_printf_float+0xd0>
 800a188:	2200      	movs	r2, #0
 800a18a:	2300      	movs	r3, #0
 800a18c:	4640      	mov	r0, r8
 800a18e:	4649      	mov	r1, r9
 800a190:	f7f6 fcc4 	bl	8000b1c <__aeabi_dcmplt>
 800a194:	b110      	cbz	r0, 800a19c <_printf_float+0x90>
 800a196:	232d      	movs	r3, #45	; 0x2d
 800a198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a19c:	4b93      	ldr	r3, [pc, #588]	; (800a3ec <_printf_float+0x2e0>)
 800a19e:	4894      	ldr	r0, [pc, #592]	; (800a3f0 <_printf_float+0x2e4>)
 800a1a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a1a4:	bf94      	ite	ls
 800a1a6:	4698      	movls	r8, r3
 800a1a8:	4680      	movhi	r8, r0
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	6123      	str	r3, [r4, #16]
 800a1ae:	9b05      	ldr	r3, [sp, #20]
 800a1b0:	f023 0204 	bic.w	r2, r3, #4
 800a1b4:	6022      	str	r2, [r4, #0]
 800a1b6:	f04f 0900 	mov.w	r9, #0
 800a1ba:	9700      	str	r7, [sp, #0]
 800a1bc:	4633      	mov	r3, r6
 800a1be:	aa0b      	add	r2, sp, #44	; 0x2c
 800a1c0:	4621      	mov	r1, r4
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f000 f9d8 	bl	800a578 <_printf_common>
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	f040 8090 	bne.w	800a2ee <_printf_float+0x1e2>
 800a1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d2:	b00d      	add	sp, #52	; 0x34
 800a1d4:	ecbd 8b02 	vpop	{d8}
 800a1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1dc:	4642      	mov	r2, r8
 800a1de:	464b      	mov	r3, r9
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	f7f6 fcc2 	bl	8000b6c <__aeabi_dcmpun>
 800a1e8:	b140      	cbz	r0, 800a1fc <_printf_float+0xf0>
 800a1ea:	464b      	mov	r3, r9
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	bfbc      	itt	lt
 800a1f0:	232d      	movlt	r3, #45	; 0x2d
 800a1f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a1f6:	487f      	ldr	r0, [pc, #508]	; (800a3f4 <_printf_float+0x2e8>)
 800a1f8:	4b7f      	ldr	r3, [pc, #508]	; (800a3f8 <_printf_float+0x2ec>)
 800a1fa:	e7d1      	b.n	800a1a0 <_printf_float+0x94>
 800a1fc:	6863      	ldr	r3, [r4, #4]
 800a1fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a202:	9206      	str	r2, [sp, #24]
 800a204:	1c5a      	adds	r2, r3, #1
 800a206:	d13f      	bne.n	800a288 <_printf_float+0x17c>
 800a208:	2306      	movs	r3, #6
 800a20a:	6063      	str	r3, [r4, #4]
 800a20c:	9b05      	ldr	r3, [sp, #20]
 800a20e:	6861      	ldr	r1, [r4, #4]
 800a210:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a214:	2300      	movs	r3, #0
 800a216:	9303      	str	r3, [sp, #12]
 800a218:	ab0a      	add	r3, sp, #40	; 0x28
 800a21a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a21e:	ab09      	add	r3, sp, #36	; 0x24
 800a220:	ec49 8b10 	vmov	d0, r8, r9
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	6022      	str	r2, [r4, #0]
 800a228:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a22c:	4628      	mov	r0, r5
 800a22e:	f7ff fecd 	bl	8009fcc <__cvt>
 800a232:	9b06      	ldr	r3, [sp, #24]
 800a234:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a236:	2b47      	cmp	r3, #71	; 0x47
 800a238:	4680      	mov	r8, r0
 800a23a:	d108      	bne.n	800a24e <_printf_float+0x142>
 800a23c:	1cc8      	adds	r0, r1, #3
 800a23e:	db02      	blt.n	800a246 <_printf_float+0x13a>
 800a240:	6863      	ldr	r3, [r4, #4]
 800a242:	4299      	cmp	r1, r3
 800a244:	dd41      	ble.n	800a2ca <_printf_float+0x1be>
 800a246:	f1ab 0b02 	sub.w	fp, fp, #2
 800a24a:	fa5f fb8b 	uxtb.w	fp, fp
 800a24e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a252:	d820      	bhi.n	800a296 <_printf_float+0x18a>
 800a254:	3901      	subs	r1, #1
 800a256:	465a      	mov	r2, fp
 800a258:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a25c:	9109      	str	r1, [sp, #36]	; 0x24
 800a25e:	f7ff ff17 	bl	800a090 <__exponent>
 800a262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a264:	1813      	adds	r3, r2, r0
 800a266:	2a01      	cmp	r2, #1
 800a268:	4681      	mov	r9, r0
 800a26a:	6123      	str	r3, [r4, #16]
 800a26c:	dc02      	bgt.n	800a274 <_printf_float+0x168>
 800a26e:	6822      	ldr	r2, [r4, #0]
 800a270:	07d2      	lsls	r2, r2, #31
 800a272:	d501      	bpl.n	800a278 <_printf_float+0x16c>
 800a274:	3301      	adds	r3, #1
 800a276:	6123      	str	r3, [r4, #16]
 800a278:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d09c      	beq.n	800a1ba <_printf_float+0xae>
 800a280:	232d      	movs	r3, #45	; 0x2d
 800a282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a286:	e798      	b.n	800a1ba <_printf_float+0xae>
 800a288:	9a06      	ldr	r2, [sp, #24]
 800a28a:	2a47      	cmp	r2, #71	; 0x47
 800a28c:	d1be      	bne.n	800a20c <_printf_float+0x100>
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1bc      	bne.n	800a20c <_printf_float+0x100>
 800a292:	2301      	movs	r3, #1
 800a294:	e7b9      	b.n	800a20a <_printf_float+0xfe>
 800a296:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a29a:	d118      	bne.n	800a2ce <_printf_float+0x1c2>
 800a29c:	2900      	cmp	r1, #0
 800a29e:	6863      	ldr	r3, [r4, #4]
 800a2a0:	dd0b      	ble.n	800a2ba <_printf_float+0x1ae>
 800a2a2:	6121      	str	r1, [r4, #16]
 800a2a4:	b913      	cbnz	r3, 800a2ac <_printf_float+0x1a0>
 800a2a6:	6822      	ldr	r2, [r4, #0]
 800a2a8:	07d0      	lsls	r0, r2, #31
 800a2aa:	d502      	bpl.n	800a2b2 <_printf_float+0x1a6>
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	440b      	add	r3, r1
 800a2b0:	6123      	str	r3, [r4, #16]
 800a2b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a2b4:	f04f 0900 	mov.w	r9, #0
 800a2b8:	e7de      	b.n	800a278 <_printf_float+0x16c>
 800a2ba:	b913      	cbnz	r3, 800a2c2 <_printf_float+0x1b6>
 800a2bc:	6822      	ldr	r2, [r4, #0]
 800a2be:	07d2      	lsls	r2, r2, #31
 800a2c0:	d501      	bpl.n	800a2c6 <_printf_float+0x1ba>
 800a2c2:	3302      	adds	r3, #2
 800a2c4:	e7f4      	b.n	800a2b0 <_printf_float+0x1a4>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e7f2      	b.n	800a2b0 <_printf_float+0x1a4>
 800a2ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2d0:	4299      	cmp	r1, r3
 800a2d2:	db05      	blt.n	800a2e0 <_printf_float+0x1d4>
 800a2d4:	6823      	ldr	r3, [r4, #0]
 800a2d6:	6121      	str	r1, [r4, #16]
 800a2d8:	07d8      	lsls	r0, r3, #31
 800a2da:	d5ea      	bpl.n	800a2b2 <_printf_float+0x1a6>
 800a2dc:	1c4b      	adds	r3, r1, #1
 800a2de:	e7e7      	b.n	800a2b0 <_printf_float+0x1a4>
 800a2e0:	2900      	cmp	r1, #0
 800a2e2:	bfd4      	ite	le
 800a2e4:	f1c1 0202 	rsble	r2, r1, #2
 800a2e8:	2201      	movgt	r2, #1
 800a2ea:	4413      	add	r3, r2
 800a2ec:	e7e0      	b.n	800a2b0 <_printf_float+0x1a4>
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	055a      	lsls	r2, r3, #21
 800a2f2:	d407      	bmi.n	800a304 <_printf_float+0x1f8>
 800a2f4:	6923      	ldr	r3, [r4, #16]
 800a2f6:	4642      	mov	r2, r8
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	47b8      	blx	r7
 800a2fe:	3001      	adds	r0, #1
 800a300:	d12c      	bne.n	800a35c <_printf_float+0x250>
 800a302:	e764      	b.n	800a1ce <_printf_float+0xc2>
 800a304:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a308:	f240 80e0 	bls.w	800a4cc <_printf_float+0x3c0>
 800a30c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a310:	2200      	movs	r2, #0
 800a312:	2300      	movs	r3, #0
 800a314:	f7f6 fbf8 	bl	8000b08 <__aeabi_dcmpeq>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d034      	beq.n	800a386 <_printf_float+0x27a>
 800a31c:	4a37      	ldr	r2, [pc, #220]	; (800a3fc <_printf_float+0x2f0>)
 800a31e:	2301      	movs	r3, #1
 800a320:	4631      	mov	r1, r6
 800a322:	4628      	mov	r0, r5
 800a324:	47b8      	blx	r7
 800a326:	3001      	adds	r0, #1
 800a328:	f43f af51 	beq.w	800a1ce <_printf_float+0xc2>
 800a32c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a330:	429a      	cmp	r2, r3
 800a332:	db02      	blt.n	800a33a <_printf_float+0x22e>
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	07d8      	lsls	r0, r3, #31
 800a338:	d510      	bpl.n	800a35c <_printf_float+0x250>
 800a33a:	ee18 3a10 	vmov	r3, s16
 800a33e:	4652      	mov	r2, sl
 800a340:	4631      	mov	r1, r6
 800a342:	4628      	mov	r0, r5
 800a344:	47b8      	blx	r7
 800a346:	3001      	adds	r0, #1
 800a348:	f43f af41 	beq.w	800a1ce <_printf_float+0xc2>
 800a34c:	f04f 0800 	mov.w	r8, #0
 800a350:	f104 091a 	add.w	r9, r4, #26
 800a354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a356:	3b01      	subs	r3, #1
 800a358:	4543      	cmp	r3, r8
 800a35a:	dc09      	bgt.n	800a370 <_printf_float+0x264>
 800a35c:	6823      	ldr	r3, [r4, #0]
 800a35e:	079b      	lsls	r3, r3, #30
 800a360:	f100 8105 	bmi.w	800a56e <_printf_float+0x462>
 800a364:	68e0      	ldr	r0, [r4, #12]
 800a366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a368:	4298      	cmp	r0, r3
 800a36a:	bfb8      	it	lt
 800a36c:	4618      	movlt	r0, r3
 800a36e:	e730      	b.n	800a1d2 <_printf_float+0xc6>
 800a370:	2301      	movs	r3, #1
 800a372:	464a      	mov	r2, r9
 800a374:	4631      	mov	r1, r6
 800a376:	4628      	mov	r0, r5
 800a378:	47b8      	blx	r7
 800a37a:	3001      	adds	r0, #1
 800a37c:	f43f af27 	beq.w	800a1ce <_printf_float+0xc2>
 800a380:	f108 0801 	add.w	r8, r8, #1
 800a384:	e7e6      	b.n	800a354 <_printf_float+0x248>
 800a386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a388:	2b00      	cmp	r3, #0
 800a38a:	dc39      	bgt.n	800a400 <_printf_float+0x2f4>
 800a38c:	4a1b      	ldr	r2, [pc, #108]	; (800a3fc <_printf_float+0x2f0>)
 800a38e:	2301      	movs	r3, #1
 800a390:	4631      	mov	r1, r6
 800a392:	4628      	mov	r0, r5
 800a394:	47b8      	blx	r7
 800a396:	3001      	adds	r0, #1
 800a398:	f43f af19 	beq.w	800a1ce <_printf_float+0xc2>
 800a39c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	d102      	bne.n	800a3aa <_printf_float+0x29e>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	07d9      	lsls	r1, r3, #31
 800a3a8:	d5d8      	bpl.n	800a35c <_printf_float+0x250>
 800a3aa:	ee18 3a10 	vmov	r3, s16
 800a3ae:	4652      	mov	r2, sl
 800a3b0:	4631      	mov	r1, r6
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	47b8      	blx	r7
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	f43f af09 	beq.w	800a1ce <_printf_float+0xc2>
 800a3bc:	f04f 0900 	mov.w	r9, #0
 800a3c0:	f104 0a1a 	add.w	sl, r4, #26
 800a3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c6:	425b      	negs	r3, r3
 800a3c8:	454b      	cmp	r3, r9
 800a3ca:	dc01      	bgt.n	800a3d0 <_printf_float+0x2c4>
 800a3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ce:	e792      	b.n	800a2f6 <_printf_float+0x1ea>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	4652      	mov	r2, sl
 800a3d4:	4631      	mov	r1, r6
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	47b8      	blx	r7
 800a3da:	3001      	adds	r0, #1
 800a3dc:	f43f aef7 	beq.w	800a1ce <_printf_float+0xc2>
 800a3e0:	f109 0901 	add.w	r9, r9, #1
 800a3e4:	e7ee      	b.n	800a3c4 <_printf_float+0x2b8>
 800a3e6:	bf00      	nop
 800a3e8:	7fefffff 	.word	0x7fefffff
 800a3ec:	0800e304 	.word	0x0800e304
 800a3f0:	0800e308 	.word	0x0800e308
 800a3f4:	0800e310 	.word	0x0800e310
 800a3f8:	0800e30c 	.word	0x0800e30c
 800a3fc:	0800e314 	.word	0x0800e314
 800a400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a402:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a404:	429a      	cmp	r2, r3
 800a406:	bfa8      	it	ge
 800a408:	461a      	movge	r2, r3
 800a40a:	2a00      	cmp	r2, #0
 800a40c:	4691      	mov	r9, r2
 800a40e:	dc37      	bgt.n	800a480 <_printf_float+0x374>
 800a410:	f04f 0b00 	mov.w	fp, #0
 800a414:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a418:	f104 021a 	add.w	r2, r4, #26
 800a41c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a41e:	9305      	str	r3, [sp, #20]
 800a420:	eba3 0309 	sub.w	r3, r3, r9
 800a424:	455b      	cmp	r3, fp
 800a426:	dc33      	bgt.n	800a490 <_printf_float+0x384>
 800a428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a42c:	429a      	cmp	r2, r3
 800a42e:	db3b      	blt.n	800a4a8 <_printf_float+0x39c>
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	07da      	lsls	r2, r3, #31
 800a434:	d438      	bmi.n	800a4a8 <_printf_float+0x39c>
 800a436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a438:	9a05      	ldr	r2, [sp, #20]
 800a43a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a43c:	1a9a      	subs	r2, r3, r2
 800a43e:	eba3 0901 	sub.w	r9, r3, r1
 800a442:	4591      	cmp	r9, r2
 800a444:	bfa8      	it	ge
 800a446:	4691      	movge	r9, r2
 800a448:	f1b9 0f00 	cmp.w	r9, #0
 800a44c:	dc35      	bgt.n	800a4ba <_printf_float+0x3ae>
 800a44e:	f04f 0800 	mov.w	r8, #0
 800a452:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a456:	f104 0a1a 	add.w	sl, r4, #26
 800a45a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a45e:	1a9b      	subs	r3, r3, r2
 800a460:	eba3 0309 	sub.w	r3, r3, r9
 800a464:	4543      	cmp	r3, r8
 800a466:	f77f af79 	ble.w	800a35c <_printf_float+0x250>
 800a46a:	2301      	movs	r3, #1
 800a46c:	4652      	mov	r2, sl
 800a46e:	4631      	mov	r1, r6
 800a470:	4628      	mov	r0, r5
 800a472:	47b8      	blx	r7
 800a474:	3001      	adds	r0, #1
 800a476:	f43f aeaa 	beq.w	800a1ce <_printf_float+0xc2>
 800a47a:	f108 0801 	add.w	r8, r8, #1
 800a47e:	e7ec      	b.n	800a45a <_printf_float+0x34e>
 800a480:	4613      	mov	r3, r2
 800a482:	4631      	mov	r1, r6
 800a484:	4642      	mov	r2, r8
 800a486:	4628      	mov	r0, r5
 800a488:	47b8      	blx	r7
 800a48a:	3001      	adds	r0, #1
 800a48c:	d1c0      	bne.n	800a410 <_printf_float+0x304>
 800a48e:	e69e      	b.n	800a1ce <_printf_float+0xc2>
 800a490:	2301      	movs	r3, #1
 800a492:	4631      	mov	r1, r6
 800a494:	4628      	mov	r0, r5
 800a496:	9205      	str	r2, [sp, #20]
 800a498:	47b8      	blx	r7
 800a49a:	3001      	adds	r0, #1
 800a49c:	f43f ae97 	beq.w	800a1ce <_printf_float+0xc2>
 800a4a0:	9a05      	ldr	r2, [sp, #20]
 800a4a2:	f10b 0b01 	add.w	fp, fp, #1
 800a4a6:	e7b9      	b.n	800a41c <_printf_float+0x310>
 800a4a8:	ee18 3a10 	vmov	r3, s16
 800a4ac:	4652      	mov	r2, sl
 800a4ae:	4631      	mov	r1, r6
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	47b8      	blx	r7
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	d1be      	bne.n	800a436 <_printf_float+0x32a>
 800a4b8:	e689      	b.n	800a1ce <_printf_float+0xc2>
 800a4ba:	9a05      	ldr	r2, [sp, #20]
 800a4bc:	464b      	mov	r3, r9
 800a4be:	4442      	add	r2, r8
 800a4c0:	4631      	mov	r1, r6
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	47b8      	blx	r7
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	d1c1      	bne.n	800a44e <_printf_float+0x342>
 800a4ca:	e680      	b.n	800a1ce <_printf_float+0xc2>
 800a4cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4ce:	2a01      	cmp	r2, #1
 800a4d0:	dc01      	bgt.n	800a4d6 <_printf_float+0x3ca>
 800a4d2:	07db      	lsls	r3, r3, #31
 800a4d4:	d538      	bpl.n	800a548 <_printf_float+0x43c>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	4642      	mov	r2, r8
 800a4da:	4631      	mov	r1, r6
 800a4dc:	4628      	mov	r0, r5
 800a4de:	47b8      	blx	r7
 800a4e0:	3001      	adds	r0, #1
 800a4e2:	f43f ae74 	beq.w	800a1ce <_printf_float+0xc2>
 800a4e6:	ee18 3a10 	vmov	r3, s16
 800a4ea:	4652      	mov	r2, sl
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	47b8      	blx	r7
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	f43f ae6b 	beq.w	800a1ce <_printf_float+0xc2>
 800a4f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	2300      	movs	r3, #0
 800a500:	f7f6 fb02 	bl	8000b08 <__aeabi_dcmpeq>
 800a504:	b9d8      	cbnz	r0, 800a53e <_printf_float+0x432>
 800a506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a508:	f108 0201 	add.w	r2, r8, #1
 800a50c:	3b01      	subs	r3, #1
 800a50e:	4631      	mov	r1, r6
 800a510:	4628      	mov	r0, r5
 800a512:	47b8      	blx	r7
 800a514:	3001      	adds	r0, #1
 800a516:	d10e      	bne.n	800a536 <_printf_float+0x42a>
 800a518:	e659      	b.n	800a1ce <_printf_float+0xc2>
 800a51a:	2301      	movs	r3, #1
 800a51c:	4652      	mov	r2, sl
 800a51e:	4631      	mov	r1, r6
 800a520:	4628      	mov	r0, r5
 800a522:	47b8      	blx	r7
 800a524:	3001      	adds	r0, #1
 800a526:	f43f ae52 	beq.w	800a1ce <_printf_float+0xc2>
 800a52a:	f108 0801 	add.w	r8, r8, #1
 800a52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a530:	3b01      	subs	r3, #1
 800a532:	4543      	cmp	r3, r8
 800a534:	dcf1      	bgt.n	800a51a <_printf_float+0x40e>
 800a536:	464b      	mov	r3, r9
 800a538:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a53c:	e6dc      	b.n	800a2f8 <_printf_float+0x1ec>
 800a53e:	f04f 0800 	mov.w	r8, #0
 800a542:	f104 0a1a 	add.w	sl, r4, #26
 800a546:	e7f2      	b.n	800a52e <_printf_float+0x422>
 800a548:	2301      	movs	r3, #1
 800a54a:	4642      	mov	r2, r8
 800a54c:	e7df      	b.n	800a50e <_printf_float+0x402>
 800a54e:	2301      	movs	r3, #1
 800a550:	464a      	mov	r2, r9
 800a552:	4631      	mov	r1, r6
 800a554:	4628      	mov	r0, r5
 800a556:	47b8      	blx	r7
 800a558:	3001      	adds	r0, #1
 800a55a:	f43f ae38 	beq.w	800a1ce <_printf_float+0xc2>
 800a55e:	f108 0801 	add.w	r8, r8, #1
 800a562:	68e3      	ldr	r3, [r4, #12]
 800a564:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a566:	1a5b      	subs	r3, r3, r1
 800a568:	4543      	cmp	r3, r8
 800a56a:	dcf0      	bgt.n	800a54e <_printf_float+0x442>
 800a56c:	e6fa      	b.n	800a364 <_printf_float+0x258>
 800a56e:	f04f 0800 	mov.w	r8, #0
 800a572:	f104 0919 	add.w	r9, r4, #25
 800a576:	e7f4      	b.n	800a562 <_printf_float+0x456>

0800a578 <_printf_common>:
 800a578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a57c:	4616      	mov	r6, r2
 800a57e:	4699      	mov	r9, r3
 800a580:	688a      	ldr	r2, [r1, #8]
 800a582:	690b      	ldr	r3, [r1, #16]
 800a584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a588:	4293      	cmp	r3, r2
 800a58a:	bfb8      	it	lt
 800a58c:	4613      	movlt	r3, r2
 800a58e:	6033      	str	r3, [r6, #0]
 800a590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a594:	4607      	mov	r7, r0
 800a596:	460c      	mov	r4, r1
 800a598:	b10a      	cbz	r2, 800a59e <_printf_common+0x26>
 800a59a:	3301      	adds	r3, #1
 800a59c:	6033      	str	r3, [r6, #0]
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	0699      	lsls	r1, r3, #26
 800a5a2:	bf42      	ittt	mi
 800a5a4:	6833      	ldrmi	r3, [r6, #0]
 800a5a6:	3302      	addmi	r3, #2
 800a5a8:	6033      	strmi	r3, [r6, #0]
 800a5aa:	6825      	ldr	r5, [r4, #0]
 800a5ac:	f015 0506 	ands.w	r5, r5, #6
 800a5b0:	d106      	bne.n	800a5c0 <_printf_common+0x48>
 800a5b2:	f104 0a19 	add.w	sl, r4, #25
 800a5b6:	68e3      	ldr	r3, [r4, #12]
 800a5b8:	6832      	ldr	r2, [r6, #0]
 800a5ba:	1a9b      	subs	r3, r3, r2
 800a5bc:	42ab      	cmp	r3, r5
 800a5be:	dc26      	bgt.n	800a60e <_printf_common+0x96>
 800a5c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5c4:	1e13      	subs	r3, r2, #0
 800a5c6:	6822      	ldr	r2, [r4, #0]
 800a5c8:	bf18      	it	ne
 800a5ca:	2301      	movne	r3, #1
 800a5cc:	0692      	lsls	r2, r2, #26
 800a5ce:	d42b      	bmi.n	800a628 <_printf_common+0xb0>
 800a5d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	4638      	mov	r0, r7
 800a5d8:	47c0      	blx	r8
 800a5da:	3001      	adds	r0, #1
 800a5dc:	d01e      	beq.n	800a61c <_printf_common+0xa4>
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	68e5      	ldr	r5, [r4, #12]
 800a5e2:	6832      	ldr	r2, [r6, #0]
 800a5e4:	f003 0306 	and.w	r3, r3, #6
 800a5e8:	2b04      	cmp	r3, #4
 800a5ea:	bf08      	it	eq
 800a5ec:	1aad      	subeq	r5, r5, r2
 800a5ee:	68a3      	ldr	r3, [r4, #8]
 800a5f0:	6922      	ldr	r2, [r4, #16]
 800a5f2:	bf0c      	ite	eq
 800a5f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5f8:	2500      	movne	r5, #0
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	bfc4      	itt	gt
 800a5fe:	1a9b      	subgt	r3, r3, r2
 800a600:	18ed      	addgt	r5, r5, r3
 800a602:	2600      	movs	r6, #0
 800a604:	341a      	adds	r4, #26
 800a606:	42b5      	cmp	r5, r6
 800a608:	d11a      	bne.n	800a640 <_printf_common+0xc8>
 800a60a:	2000      	movs	r0, #0
 800a60c:	e008      	b.n	800a620 <_printf_common+0xa8>
 800a60e:	2301      	movs	r3, #1
 800a610:	4652      	mov	r2, sl
 800a612:	4649      	mov	r1, r9
 800a614:	4638      	mov	r0, r7
 800a616:	47c0      	blx	r8
 800a618:	3001      	adds	r0, #1
 800a61a:	d103      	bne.n	800a624 <_printf_common+0xac>
 800a61c:	f04f 30ff 	mov.w	r0, #4294967295
 800a620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a624:	3501      	adds	r5, #1
 800a626:	e7c6      	b.n	800a5b6 <_printf_common+0x3e>
 800a628:	18e1      	adds	r1, r4, r3
 800a62a:	1c5a      	adds	r2, r3, #1
 800a62c:	2030      	movs	r0, #48	; 0x30
 800a62e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a632:	4422      	add	r2, r4
 800a634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a63c:	3302      	adds	r3, #2
 800a63e:	e7c7      	b.n	800a5d0 <_printf_common+0x58>
 800a640:	2301      	movs	r3, #1
 800a642:	4622      	mov	r2, r4
 800a644:	4649      	mov	r1, r9
 800a646:	4638      	mov	r0, r7
 800a648:	47c0      	blx	r8
 800a64a:	3001      	adds	r0, #1
 800a64c:	d0e6      	beq.n	800a61c <_printf_common+0xa4>
 800a64e:	3601      	adds	r6, #1
 800a650:	e7d9      	b.n	800a606 <_printf_common+0x8e>
	...

0800a654 <_printf_i>:
 800a654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a658:	7e0f      	ldrb	r7, [r1, #24]
 800a65a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a65c:	2f78      	cmp	r7, #120	; 0x78
 800a65e:	4691      	mov	r9, r2
 800a660:	4680      	mov	r8, r0
 800a662:	460c      	mov	r4, r1
 800a664:	469a      	mov	sl, r3
 800a666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a66a:	d807      	bhi.n	800a67c <_printf_i+0x28>
 800a66c:	2f62      	cmp	r7, #98	; 0x62
 800a66e:	d80a      	bhi.n	800a686 <_printf_i+0x32>
 800a670:	2f00      	cmp	r7, #0
 800a672:	f000 80d8 	beq.w	800a826 <_printf_i+0x1d2>
 800a676:	2f58      	cmp	r7, #88	; 0x58
 800a678:	f000 80a3 	beq.w	800a7c2 <_printf_i+0x16e>
 800a67c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a684:	e03a      	b.n	800a6fc <_printf_i+0xa8>
 800a686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a68a:	2b15      	cmp	r3, #21
 800a68c:	d8f6      	bhi.n	800a67c <_printf_i+0x28>
 800a68e:	a101      	add	r1, pc, #4	; (adr r1, 800a694 <_printf_i+0x40>)
 800a690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a694:	0800a6ed 	.word	0x0800a6ed
 800a698:	0800a701 	.word	0x0800a701
 800a69c:	0800a67d 	.word	0x0800a67d
 800a6a0:	0800a67d 	.word	0x0800a67d
 800a6a4:	0800a67d 	.word	0x0800a67d
 800a6a8:	0800a67d 	.word	0x0800a67d
 800a6ac:	0800a701 	.word	0x0800a701
 800a6b0:	0800a67d 	.word	0x0800a67d
 800a6b4:	0800a67d 	.word	0x0800a67d
 800a6b8:	0800a67d 	.word	0x0800a67d
 800a6bc:	0800a67d 	.word	0x0800a67d
 800a6c0:	0800a80d 	.word	0x0800a80d
 800a6c4:	0800a731 	.word	0x0800a731
 800a6c8:	0800a7ef 	.word	0x0800a7ef
 800a6cc:	0800a67d 	.word	0x0800a67d
 800a6d0:	0800a67d 	.word	0x0800a67d
 800a6d4:	0800a82f 	.word	0x0800a82f
 800a6d8:	0800a67d 	.word	0x0800a67d
 800a6dc:	0800a731 	.word	0x0800a731
 800a6e0:	0800a67d 	.word	0x0800a67d
 800a6e4:	0800a67d 	.word	0x0800a67d
 800a6e8:	0800a7f7 	.word	0x0800a7f7
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	1d1a      	adds	r2, r3, #4
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	602a      	str	r2, [r5, #0]
 800a6f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e0a3      	b.n	800a848 <_printf_i+0x1f4>
 800a700:	6820      	ldr	r0, [r4, #0]
 800a702:	6829      	ldr	r1, [r5, #0]
 800a704:	0606      	lsls	r6, r0, #24
 800a706:	f101 0304 	add.w	r3, r1, #4
 800a70a:	d50a      	bpl.n	800a722 <_printf_i+0xce>
 800a70c:	680e      	ldr	r6, [r1, #0]
 800a70e:	602b      	str	r3, [r5, #0]
 800a710:	2e00      	cmp	r6, #0
 800a712:	da03      	bge.n	800a71c <_printf_i+0xc8>
 800a714:	232d      	movs	r3, #45	; 0x2d
 800a716:	4276      	negs	r6, r6
 800a718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a71c:	485e      	ldr	r0, [pc, #376]	; (800a898 <_printf_i+0x244>)
 800a71e:	230a      	movs	r3, #10
 800a720:	e019      	b.n	800a756 <_printf_i+0x102>
 800a722:	680e      	ldr	r6, [r1, #0]
 800a724:	602b      	str	r3, [r5, #0]
 800a726:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a72a:	bf18      	it	ne
 800a72c:	b236      	sxthne	r6, r6
 800a72e:	e7ef      	b.n	800a710 <_printf_i+0xbc>
 800a730:	682b      	ldr	r3, [r5, #0]
 800a732:	6820      	ldr	r0, [r4, #0]
 800a734:	1d19      	adds	r1, r3, #4
 800a736:	6029      	str	r1, [r5, #0]
 800a738:	0601      	lsls	r1, r0, #24
 800a73a:	d501      	bpl.n	800a740 <_printf_i+0xec>
 800a73c:	681e      	ldr	r6, [r3, #0]
 800a73e:	e002      	b.n	800a746 <_printf_i+0xf2>
 800a740:	0646      	lsls	r6, r0, #25
 800a742:	d5fb      	bpl.n	800a73c <_printf_i+0xe8>
 800a744:	881e      	ldrh	r6, [r3, #0]
 800a746:	4854      	ldr	r0, [pc, #336]	; (800a898 <_printf_i+0x244>)
 800a748:	2f6f      	cmp	r7, #111	; 0x6f
 800a74a:	bf0c      	ite	eq
 800a74c:	2308      	moveq	r3, #8
 800a74e:	230a      	movne	r3, #10
 800a750:	2100      	movs	r1, #0
 800a752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a756:	6865      	ldr	r5, [r4, #4]
 800a758:	60a5      	str	r5, [r4, #8]
 800a75a:	2d00      	cmp	r5, #0
 800a75c:	bfa2      	ittt	ge
 800a75e:	6821      	ldrge	r1, [r4, #0]
 800a760:	f021 0104 	bicge.w	r1, r1, #4
 800a764:	6021      	strge	r1, [r4, #0]
 800a766:	b90e      	cbnz	r6, 800a76c <_printf_i+0x118>
 800a768:	2d00      	cmp	r5, #0
 800a76a:	d04d      	beq.n	800a808 <_printf_i+0x1b4>
 800a76c:	4615      	mov	r5, r2
 800a76e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a772:	fb03 6711 	mls	r7, r3, r1, r6
 800a776:	5dc7      	ldrb	r7, [r0, r7]
 800a778:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a77c:	4637      	mov	r7, r6
 800a77e:	42bb      	cmp	r3, r7
 800a780:	460e      	mov	r6, r1
 800a782:	d9f4      	bls.n	800a76e <_printf_i+0x11a>
 800a784:	2b08      	cmp	r3, #8
 800a786:	d10b      	bne.n	800a7a0 <_printf_i+0x14c>
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	07de      	lsls	r6, r3, #31
 800a78c:	d508      	bpl.n	800a7a0 <_printf_i+0x14c>
 800a78e:	6923      	ldr	r3, [r4, #16]
 800a790:	6861      	ldr	r1, [r4, #4]
 800a792:	4299      	cmp	r1, r3
 800a794:	bfde      	ittt	le
 800a796:	2330      	movle	r3, #48	; 0x30
 800a798:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a79c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7a0:	1b52      	subs	r2, r2, r5
 800a7a2:	6122      	str	r2, [r4, #16]
 800a7a4:	f8cd a000 	str.w	sl, [sp]
 800a7a8:	464b      	mov	r3, r9
 800a7aa:	aa03      	add	r2, sp, #12
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	f7ff fee2 	bl	800a578 <_printf_common>
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d14c      	bne.n	800a852 <_printf_i+0x1fe>
 800a7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7bc:	b004      	add	sp, #16
 800a7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c2:	4835      	ldr	r0, [pc, #212]	; (800a898 <_printf_i+0x244>)
 800a7c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7c8:	6829      	ldr	r1, [r5, #0]
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7d0:	6029      	str	r1, [r5, #0]
 800a7d2:	061d      	lsls	r5, r3, #24
 800a7d4:	d514      	bpl.n	800a800 <_printf_i+0x1ac>
 800a7d6:	07df      	lsls	r7, r3, #31
 800a7d8:	bf44      	itt	mi
 800a7da:	f043 0320 	orrmi.w	r3, r3, #32
 800a7de:	6023      	strmi	r3, [r4, #0]
 800a7e0:	b91e      	cbnz	r6, 800a7ea <_printf_i+0x196>
 800a7e2:	6823      	ldr	r3, [r4, #0]
 800a7e4:	f023 0320 	bic.w	r3, r3, #32
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	2310      	movs	r3, #16
 800a7ec:	e7b0      	b.n	800a750 <_printf_i+0xfc>
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	f043 0320 	orr.w	r3, r3, #32
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	2378      	movs	r3, #120	; 0x78
 800a7f8:	4828      	ldr	r0, [pc, #160]	; (800a89c <_printf_i+0x248>)
 800a7fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7fe:	e7e3      	b.n	800a7c8 <_printf_i+0x174>
 800a800:	0659      	lsls	r1, r3, #25
 800a802:	bf48      	it	mi
 800a804:	b2b6      	uxthmi	r6, r6
 800a806:	e7e6      	b.n	800a7d6 <_printf_i+0x182>
 800a808:	4615      	mov	r5, r2
 800a80a:	e7bb      	b.n	800a784 <_printf_i+0x130>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	6826      	ldr	r6, [r4, #0]
 800a810:	6961      	ldr	r1, [r4, #20]
 800a812:	1d18      	adds	r0, r3, #4
 800a814:	6028      	str	r0, [r5, #0]
 800a816:	0635      	lsls	r5, r6, #24
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	d501      	bpl.n	800a820 <_printf_i+0x1cc>
 800a81c:	6019      	str	r1, [r3, #0]
 800a81e:	e002      	b.n	800a826 <_printf_i+0x1d2>
 800a820:	0670      	lsls	r0, r6, #25
 800a822:	d5fb      	bpl.n	800a81c <_printf_i+0x1c8>
 800a824:	8019      	strh	r1, [r3, #0]
 800a826:	2300      	movs	r3, #0
 800a828:	6123      	str	r3, [r4, #16]
 800a82a:	4615      	mov	r5, r2
 800a82c:	e7ba      	b.n	800a7a4 <_printf_i+0x150>
 800a82e:	682b      	ldr	r3, [r5, #0]
 800a830:	1d1a      	adds	r2, r3, #4
 800a832:	602a      	str	r2, [r5, #0]
 800a834:	681d      	ldr	r5, [r3, #0]
 800a836:	6862      	ldr	r2, [r4, #4]
 800a838:	2100      	movs	r1, #0
 800a83a:	4628      	mov	r0, r5
 800a83c:	f7f5 fcf0 	bl	8000220 <memchr>
 800a840:	b108      	cbz	r0, 800a846 <_printf_i+0x1f2>
 800a842:	1b40      	subs	r0, r0, r5
 800a844:	6060      	str	r0, [r4, #4]
 800a846:	6863      	ldr	r3, [r4, #4]
 800a848:	6123      	str	r3, [r4, #16]
 800a84a:	2300      	movs	r3, #0
 800a84c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a850:	e7a8      	b.n	800a7a4 <_printf_i+0x150>
 800a852:	6923      	ldr	r3, [r4, #16]
 800a854:	462a      	mov	r2, r5
 800a856:	4649      	mov	r1, r9
 800a858:	4640      	mov	r0, r8
 800a85a:	47d0      	blx	sl
 800a85c:	3001      	adds	r0, #1
 800a85e:	d0ab      	beq.n	800a7b8 <_printf_i+0x164>
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	079b      	lsls	r3, r3, #30
 800a864:	d413      	bmi.n	800a88e <_printf_i+0x23a>
 800a866:	68e0      	ldr	r0, [r4, #12]
 800a868:	9b03      	ldr	r3, [sp, #12]
 800a86a:	4298      	cmp	r0, r3
 800a86c:	bfb8      	it	lt
 800a86e:	4618      	movlt	r0, r3
 800a870:	e7a4      	b.n	800a7bc <_printf_i+0x168>
 800a872:	2301      	movs	r3, #1
 800a874:	4632      	mov	r2, r6
 800a876:	4649      	mov	r1, r9
 800a878:	4640      	mov	r0, r8
 800a87a:	47d0      	blx	sl
 800a87c:	3001      	adds	r0, #1
 800a87e:	d09b      	beq.n	800a7b8 <_printf_i+0x164>
 800a880:	3501      	adds	r5, #1
 800a882:	68e3      	ldr	r3, [r4, #12]
 800a884:	9903      	ldr	r1, [sp, #12]
 800a886:	1a5b      	subs	r3, r3, r1
 800a888:	42ab      	cmp	r3, r5
 800a88a:	dcf2      	bgt.n	800a872 <_printf_i+0x21e>
 800a88c:	e7eb      	b.n	800a866 <_printf_i+0x212>
 800a88e:	2500      	movs	r5, #0
 800a890:	f104 0619 	add.w	r6, r4, #25
 800a894:	e7f5      	b.n	800a882 <_printf_i+0x22e>
 800a896:	bf00      	nop
 800a898:	0800e316 	.word	0x0800e316
 800a89c:	0800e327 	.word	0x0800e327

0800a8a0 <siprintf>:
 800a8a0:	b40e      	push	{r1, r2, r3}
 800a8a2:	b500      	push	{lr}
 800a8a4:	b09c      	sub	sp, #112	; 0x70
 800a8a6:	ab1d      	add	r3, sp, #116	; 0x74
 800a8a8:	9002      	str	r0, [sp, #8]
 800a8aa:	9006      	str	r0, [sp, #24]
 800a8ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a8b0:	4809      	ldr	r0, [pc, #36]	; (800a8d8 <siprintf+0x38>)
 800a8b2:	9107      	str	r1, [sp, #28]
 800a8b4:	9104      	str	r1, [sp, #16]
 800a8b6:	4909      	ldr	r1, [pc, #36]	; (800a8dc <siprintf+0x3c>)
 800a8b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8bc:	9105      	str	r1, [sp, #20]
 800a8be:	6800      	ldr	r0, [r0, #0]
 800a8c0:	9301      	str	r3, [sp, #4]
 800a8c2:	a902      	add	r1, sp, #8
 800a8c4:	f001 fb76 	bl	800bfb4 <_svfiprintf_r>
 800a8c8:	9b02      	ldr	r3, [sp, #8]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	701a      	strb	r2, [r3, #0]
 800a8ce:	b01c      	add	sp, #112	; 0x70
 800a8d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8d4:	b003      	add	sp, #12
 800a8d6:	4770      	bx	lr
 800a8d8:	20000060 	.word	0x20000060
 800a8dc:	ffff0208 	.word	0xffff0208

0800a8e0 <quorem>:
 800a8e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	6903      	ldr	r3, [r0, #16]
 800a8e6:	690c      	ldr	r4, [r1, #16]
 800a8e8:	42a3      	cmp	r3, r4
 800a8ea:	4607      	mov	r7, r0
 800a8ec:	f2c0 8081 	blt.w	800a9f2 <quorem+0x112>
 800a8f0:	3c01      	subs	r4, #1
 800a8f2:	f101 0814 	add.w	r8, r1, #20
 800a8f6:	f100 0514 	add.w	r5, r0, #20
 800a8fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8fe:	9301      	str	r3, [sp, #4]
 800a900:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a908:	3301      	adds	r3, #1
 800a90a:	429a      	cmp	r2, r3
 800a90c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a910:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a914:	fbb2 f6f3 	udiv	r6, r2, r3
 800a918:	d331      	bcc.n	800a97e <quorem+0x9e>
 800a91a:	f04f 0e00 	mov.w	lr, #0
 800a91e:	4640      	mov	r0, r8
 800a920:	46ac      	mov	ip, r5
 800a922:	46f2      	mov	sl, lr
 800a924:	f850 2b04 	ldr.w	r2, [r0], #4
 800a928:	b293      	uxth	r3, r2
 800a92a:	fb06 e303 	mla	r3, r6, r3, lr
 800a92e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a932:	b29b      	uxth	r3, r3
 800a934:	ebaa 0303 	sub.w	r3, sl, r3
 800a938:	f8dc a000 	ldr.w	sl, [ip]
 800a93c:	0c12      	lsrs	r2, r2, #16
 800a93e:	fa13 f38a 	uxtah	r3, r3, sl
 800a942:	fb06 e202 	mla	r2, r6, r2, lr
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	9b00      	ldr	r3, [sp, #0]
 800a94a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a94e:	b292      	uxth	r2, r2
 800a950:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a958:	f8bd 3000 	ldrh.w	r3, [sp]
 800a95c:	4581      	cmp	r9, r0
 800a95e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a962:	f84c 3b04 	str.w	r3, [ip], #4
 800a966:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a96a:	d2db      	bcs.n	800a924 <quorem+0x44>
 800a96c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a970:	b92b      	cbnz	r3, 800a97e <quorem+0x9e>
 800a972:	9b01      	ldr	r3, [sp, #4]
 800a974:	3b04      	subs	r3, #4
 800a976:	429d      	cmp	r5, r3
 800a978:	461a      	mov	r2, r3
 800a97a:	d32e      	bcc.n	800a9da <quorem+0xfa>
 800a97c:	613c      	str	r4, [r7, #16]
 800a97e:	4638      	mov	r0, r7
 800a980:	f001 f8c4 	bl	800bb0c <__mcmp>
 800a984:	2800      	cmp	r0, #0
 800a986:	db24      	blt.n	800a9d2 <quorem+0xf2>
 800a988:	3601      	adds	r6, #1
 800a98a:	4628      	mov	r0, r5
 800a98c:	f04f 0c00 	mov.w	ip, #0
 800a990:	f858 2b04 	ldr.w	r2, [r8], #4
 800a994:	f8d0 e000 	ldr.w	lr, [r0]
 800a998:	b293      	uxth	r3, r2
 800a99a:	ebac 0303 	sub.w	r3, ip, r3
 800a99e:	0c12      	lsrs	r2, r2, #16
 800a9a0:	fa13 f38e 	uxtah	r3, r3, lr
 800a9a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a9a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9b2:	45c1      	cmp	r9, r8
 800a9b4:	f840 3b04 	str.w	r3, [r0], #4
 800a9b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a9bc:	d2e8      	bcs.n	800a990 <quorem+0xb0>
 800a9be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9c6:	b922      	cbnz	r2, 800a9d2 <quorem+0xf2>
 800a9c8:	3b04      	subs	r3, #4
 800a9ca:	429d      	cmp	r5, r3
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	d30a      	bcc.n	800a9e6 <quorem+0x106>
 800a9d0:	613c      	str	r4, [r7, #16]
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	b003      	add	sp, #12
 800a9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9da:	6812      	ldr	r2, [r2, #0]
 800a9dc:	3b04      	subs	r3, #4
 800a9de:	2a00      	cmp	r2, #0
 800a9e0:	d1cc      	bne.n	800a97c <quorem+0x9c>
 800a9e2:	3c01      	subs	r4, #1
 800a9e4:	e7c7      	b.n	800a976 <quorem+0x96>
 800a9e6:	6812      	ldr	r2, [r2, #0]
 800a9e8:	3b04      	subs	r3, #4
 800a9ea:	2a00      	cmp	r2, #0
 800a9ec:	d1f0      	bne.n	800a9d0 <quorem+0xf0>
 800a9ee:	3c01      	subs	r4, #1
 800a9f0:	e7eb      	b.n	800a9ca <quorem+0xea>
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	e7ee      	b.n	800a9d4 <quorem+0xf4>
	...

0800a9f8 <_dtoa_r>:
 800a9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fc:	ed2d 8b04 	vpush	{d8-d9}
 800aa00:	ec57 6b10 	vmov	r6, r7, d0
 800aa04:	b093      	sub	sp, #76	; 0x4c
 800aa06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa0c:	9106      	str	r1, [sp, #24]
 800aa0e:	ee10 aa10 	vmov	sl, s0
 800aa12:	4604      	mov	r4, r0
 800aa14:	9209      	str	r2, [sp, #36]	; 0x24
 800aa16:	930c      	str	r3, [sp, #48]	; 0x30
 800aa18:	46bb      	mov	fp, r7
 800aa1a:	b975      	cbnz	r5, 800aa3a <_dtoa_r+0x42>
 800aa1c:	2010      	movs	r0, #16
 800aa1e:	f000 fddd 	bl	800b5dc <malloc>
 800aa22:	4602      	mov	r2, r0
 800aa24:	6260      	str	r0, [r4, #36]	; 0x24
 800aa26:	b920      	cbnz	r0, 800aa32 <_dtoa_r+0x3a>
 800aa28:	4ba7      	ldr	r3, [pc, #668]	; (800acc8 <_dtoa_r+0x2d0>)
 800aa2a:	21ea      	movs	r1, #234	; 0xea
 800aa2c:	48a7      	ldr	r0, [pc, #668]	; (800accc <_dtoa_r+0x2d4>)
 800aa2e:	f001 fbd1 	bl	800c1d4 <__assert_func>
 800aa32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa36:	6005      	str	r5, [r0, #0]
 800aa38:	60c5      	str	r5, [r0, #12]
 800aa3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa3c:	6819      	ldr	r1, [r3, #0]
 800aa3e:	b151      	cbz	r1, 800aa56 <_dtoa_r+0x5e>
 800aa40:	685a      	ldr	r2, [r3, #4]
 800aa42:	604a      	str	r2, [r1, #4]
 800aa44:	2301      	movs	r3, #1
 800aa46:	4093      	lsls	r3, r2
 800aa48:	608b      	str	r3, [r1, #8]
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f000 fe1c 	bl	800b688 <_Bfree>
 800aa50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa52:	2200      	movs	r2, #0
 800aa54:	601a      	str	r2, [r3, #0]
 800aa56:	1e3b      	subs	r3, r7, #0
 800aa58:	bfaa      	itet	ge
 800aa5a:	2300      	movge	r3, #0
 800aa5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aa60:	f8c8 3000 	strge.w	r3, [r8]
 800aa64:	4b9a      	ldr	r3, [pc, #616]	; (800acd0 <_dtoa_r+0x2d8>)
 800aa66:	bfbc      	itt	lt
 800aa68:	2201      	movlt	r2, #1
 800aa6a:	f8c8 2000 	strlt.w	r2, [r8]
 800aa6e:	ea33 030b 	bics.w	r3, r3, fp
 800aa72:	d11b      	bne.n	800aaac <_dtoa_r+0xb4>
 800aa74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa76:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa7a:	6013      	str	r3, [r2, #0]
 800aa7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa80:	4333      	orrs	r3, r6
 800aa82:	f000 8592 	beq.w	800b5aa <_dtoa_r+0xbb2>
 800aa86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa88:	b963      	cbnz	r3, 800aaa4 <_dtoa_r+0xac>
 800aa8a:	4b92      	ldr	r3, [pc, #584]	; (800acd4 <_dtoa_r+0x2dc>)
 800aa8c:	e022      	b.n	800aad4 <_dtoa_r+0xdc>
 800aa8e:	4b92      	ldr	r3, [pc, #584]	; (800acd8 <_dtoa_r+0x2e0>)
 800aa90:	9301      	str	r3, [sp, #4]
 800aa92:	3308      	adds	r3, #8
 800aa94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa96:	6013      	str	r3, [r2, #0]
 800aa98:	9801      	ldr	r0, [sp, #4]
 800aa9a:	b013      	add	sp, #76	; 0x4c
 800aa9c:	ecbd 8b04 	vpop	{d8-d9}
 800aaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa4:	4b8b      	ldr	r3, [pc, #556]	; (800acd4 <_dtoa_r+0x2dc>)
 800aaa6:	9301      	str	r3, [sp, #4]
 800aaa8:	3303      	adds	r3, #3
 800aaaa:	e7f3      	b.n	800aa94 <_dtoa_r+0x9c>
 800aaac:	2200      	movs	r2, #0
 800aaae:	2300      	movs	r3, #0
 800aab0:	4650      	mov	r0, sl
 800aab2:	4659      	mov	r1, fp
 800aab4:	f7f6 f828 	bl	8000b08 <__aeabi_dcmpeq>
 800aab8:	ec4b ab19 	vmov	d9, sl, fp
 800aabc:	4680      	mov	r8, r0
 800aabe:	b158      	cbz	r0, 800aad8 <_dtoa_r+0xe0>
 800aac0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aac2:	2301      	movs	r3, #1
 800aac4:	6013      	str	r3, [r2, #0]
 800aac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f000 856b 	beq.w	800b5a4 <_dtoa_r+0xbac>
 800aace:	4883      	ldr	r0, [pc, #524]	; (800acdc <_dtoa_r+0x2e4>)
 800aad0:	6018      	str	r0, [r3, #0]
 800aad2:	1e43      	subs	r3, r0, #1
 800aad4:	9301      	str	r3, [sp, #4]
 800aad6:	e7df      	b.n	800aa98 <_dtoa_r+0xa0>
 800aad8:	ec4b ab10 	vmov	d0, sl, fp
 800aadc:	aa10      	add	r2, sp, #64	; 0x40
 800aade:	a911      	add	r1, sp, #68	; 0x44
 800aae0:	4620      	mov	r0, r4
 800aae2:	f001 f8b9 	bl	800bc58 <__d2b>
 800aae6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800aaea:	ee08 0a10 	vmov	s16, r0
 800aaee:	2d00      	cmp	r5, #0
 800aaf0:	f000 8084 	beq.w	800abfc <_dtoa_r+0x204>
 800aaf4:	ee19 3a90 	vmov	r3, s19
 800aaf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aafc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ab00:	4656      	mov	r6, sl
 800ab02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ab06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ab0e:	4b74      	ldr	r3, [pc, #464]	; (800ace0 <_dtoa_r+0x2e8>)
 800ab10:	2200      	movs	r2, #0
 800ab12:	4630      	mov	r0, r6
 800ab14:	4639      	mov	r1, r7
 800ab16:	f7f5 fbd7 	bl	80002c8 <__aeabi_dsub>
 800ab1a:	a365      	add	r3, pc, #404	; (adr r3, 800acb0 <_dtoa_r+0x2b8>)
 800ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab20:	f7f5 fd8a 	bl	8000638 <__aeabi_dmul>
 800ab24:	a364      	add	r3, pc, #400	; (adr r3, 800acb8 <_dtoa_r+0x2c0>)
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	f7f5 fbcf 	bl	80002cc <__adddf3>
 800ab2e:	4606      	mov	r6, r0
 800ab30:	4628      	mov	r0, r5
 800ab32:	460f      	mov	r7, r1
 800ab34:	f7f5 fd16 	bl	8000564 <__aeabi_i2d>
 800ab38:	a361      	add	r3, pc, #388	; (adr r3, 800acc0 <_dtoa_r+0x2c8>)
 800ab3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3e:	f7f5 fd7b 	bl	8000638 <__aeabi_dmul>
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	4630      	mov	r0, r6
 800ab48:	4639      	mov	r1, r7
 800ab4a:	f7f5 fbbf 	bl	80002cc <__adddf3>
 800ab4e:	4606      	mov	r6, r0
 800ab50:	460f      	mov	r7, r1
 800ab52:	f7f6 f821 	bl	8000b98 <__aeabi_d2iz>
 800ab56:	2200      	movs	r2, #0
 800ab58:	9000      	str	r0, [sp, #0]
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	4639      	mov	r1, r7
 800ab60:	f7f5 ffdc 	bl	8000b1c <__aeabi_dcmplt>
 800ab64:	b150      	cbz	r0, 800ab7c <_dtoa_r+0x184>
 800ab66:	9800      	ldr	r0, [sp, #0]
 800ab68:	f7f5 fcfc 	bl	8000564 <__aeabi_i2d>
 800ab6c:	4632      	mov	r2, r6
 800ab6e:	463b      	mov	r3, r7
 800ab70:	f7f5 ffca 	bl	8000b08 <__aeabi_dcmpeq>
 800ab74:	b910      	cbnz	r0, 800ab7c <_dtoa_r+0x184>
 800ab76:	9b00      	ldr	r3, [sp, #0]
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	9b00      	ldr	r3, [sp, #0]
 800ab7e:	2b16      	cmp	r3, #22
 800ab80:	d85a      	bhi.n	800ac38 <_dtoa_r+0x240>
 800ab82:	9a00      	ldr	r2, [sp, #0]
 800ab84:	4b57      	ldr	r3, [pc, #348]	; (800ace4 <_dtoa_r+0x2ec>)
 800ab86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8e:	ec51 0b19 	vmov	r0, r1, d9
 800ab92:	f7f5 ffc3 	bl	8000b1c <__aeabi_dcmplt>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d050      	beq.n	800ac3c <_dtoa_r+0x244>
 800ab9a:	9b00      	ldr	r3, [sp, #0]
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	2300      	movs	r3, #0
 800aba2:	930b      	str	r3, [sp, #44]	; 0x2c
 800aba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aba6:	1b5d      	subs	r5, r3, r5
 800aba8:	1e6b      	subs	r3, r5, #1
 800abaa:	9305      	str	r3, [sp, #20]
 800abac:	bf45      	ittet	mi
 800abae:	f1c5 0301 	rsbmi	r3, r5, #1
 800abb2:	9304      	strmi	r3, [sp, #16]
 800abb4:	2300      	movpl	r3, #0
 800abb6:	2300      	movmi	r3, #0
 800abb8:	bf4c      	ite	mi
 800abba:	9305      	strmi	r3, [sp, #20]
 800abbc:	9304      	strpl	r3, [sp, #16]
 800abbe:	9b00      	ldr	r3, [sp, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	db3d      	blt.n	800ac40 <_dtoa_r+0x248>
 800abc4:	9b05      	ldr	r3, [sp, #20]
 800abc6:	9a00      	ldr	r2, [sp, #0]
 800abc8:	920a      	str	r2, [sp, #40]	; 0x28
 800abca:	4413      	add	r3, r2
 800abcc:	9305      	str	r3, [sp, #20]
 800abce:	2300      	movs	r3, #0
 800abd0:	9307      	str	r3, [sp, #28]
 800abd2:	9b06      	ldr	r3, [sp, #24]
 800abd4:	2b09      	cmp	r3, #9
 800abd6:	f200 8089 	bhi.w	800acec <_dtoa_r+0x2f4>
 800abda:	2b05      	cmp	r3, #5
 800abdc:	bfc4      	itt	gt
 800abde:	3b04      	subgt	r3, #4
 800abe0:	9306      	strgt	r3, [sp, #24]
 800abe2:	9b06      	ldr	r3, [sp, #24]
 800abe4:	f1a3 0302 	sub.w	r3, r3, #2
 800abe8:	bfcc      	ite	gt
 800abea:	2500      	movgt	r5, #0
 800abec:	2501      	movle	r5, #1
 800abee:	2b03      	cmp	r3, #3
 800abf0:	f200 8087 	bhi.w	800ad02 <_dtoa_r+0x30a>
 800abf4:	e8df f003 	tbb	[pc, r3]
 800abf8:	59383a2d 	.word	0x59383a2d
 800abfc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ac00:	441d      	add	r5, r3
 800ac02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac06:	2b20      	cmp	r3, #32
 800ac08:	bfc1      	itttt	gt
 800ac0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ac12:	fa0b f303 	lslgt.w	r3, fp, r3
 800ac16:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ac1a:	bfda      	itte	le
 800ac1c:	f1c3 0320 	rsble	r3, r3, #32
 800ac20:	fa06 f003 	lslle.w	r0, r6, r3
 800ac24:	4318      	orrgt	r0, r3
 800ac26:	f7f5 fc8d 	bl	8000544 <__aeabi_ui2d>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	4606      	mov	r6, r0
 800ac2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ac32:	3d01      	subs	r5, #1
 800ac34:	930e      	str	r3, [sp, #56]	; 0x38
 800ac36:	e76a      	b.n	800ab0e <_dtoa_r+0x116>
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e7b2      	b.n	800aba2 <_dtoa_r+0x1aa>
 800ac3c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac3e:	e7b1      	b.n	800aba4 <_dtoa_r+0x1ac>
 800ac40:	9b04      	ldr	r3, [sp, #16]
 800ac42:	9a00      	ldr	r2, [sp, #0]
 800ac44:	1a9b      	subs	r3, r3, r2
 800ac46:	9304      	str	r3, [sp, #16]
 800ac48:	4253      	negs	r3, r2
 800ac4a:	9307      	str	r3, [sp, #28]
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac50:	e7bf      	b.n	800abd2 <_dtoa_r+0x1da>
 800ac52:	2300      	movs	r3, #0
 800ac54:	9308      	str	r3, [sp, #32]
 800ac56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	dc55      	bgt.n	800ad08 <_dtoa_r+0x310>
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ac62:	461a      	mov	r2, r3
 800ac64:	9209      	str	r2, [sp, #36]	; 0x24
 800ac66:	e00c      	b.n	800ac82 <_dtoa_r+0x28a>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e7f3      	b.n	800ac54 <_dtoa_r+0x25c>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac70:	9308      	str	r3, [sp, #32]
 800ac72:	9b00      	ldr	r3, [sp, #0]
 800ac74:	4413      	add	r3, r2
 800ac76:	9302      	str	r3, [sp, #8]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	9303      	str	r3, [sp, #12]
 800ac7e:	bfb8      	it	lt
 800ac80:	2301      	movlt	r3, #1
 800ac82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ac84:	2200      	movs	r2, #0
 800ac86:	6042      	str	r2, [r0, #4]
 800ac88:	2204      	movs	r2, #4
 800ac8a:	f102 0614 	add.w	r6, r2, #20
 800ac8e:	429e      	cmp	r6, r3
 800ac90:	6841      	ldr	r1, [r0, #4]
 800ac92:	d93d      	bls.n	800ad10 <_dtoa_r+0x318>
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 fcb7 	bl	800b608 <_Balloc>
 800ac9a:	9001      	str	r0, [sp, #4]
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d13b      	bne.n	800ad18 <_dtoa_r+0x320>
 800aca0:	4b11      	ldr	r3, [pc, #68]	; (800ace8 <_dtoa_r+0x2f0>)
 800aca2:	4602      	mov	r2, r0
 800aca4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aca8:	e6c0      	b.n	800aa2c <_dtoa_r+0x34>
 800acaa:	2301      	movs	r3, #1
 800acac:	e7df      	b.n	800ac6e <_dtoa_r+0x276>
 800acae:	bf00      	nop
 800acb0:	636f4361 	.word	0x636f4361
 800acb4:	3fd287a7 	.word	0x3fd287a7
 800acb8:	8b60c8b3 	.word	0x8b60c8b3
 800acbc:	3fc68a28 	.word	0x3fc68a28
 800acc0:	509f79fb 	.word	0x509f79fb
 800acc4:	3fd34413 	.word	0x3fd34413
 800acc8:	0800e345 	.word	0x0800e345
 800accc:	0800e35c 	.word	0x0800e35c
 800acd0:	7ff00000 	.word	0x7ff00000
 800acd4:	0800e341 	.word	0x0800e341
 800acd8:	0800e338 	.word	0x0800e338
 800acdc:	0800e315 	.word	0x0800e315
 800ace0:	3ff80000 	.word	0x3ff80000
 800ace4:	0800e450 	.word	0x0800e450
 800ace8:	0800e3b7 	.word	0x0800e3b7
 800acec:	2501      	movs	r5, #1
 800acee:	2300      	movs	r3, #0
 800acf0:	9306      	str	r3, [sp, #24]
 800acf2:	9508      	str	r5, [sp, #32]
 800acf4:	f04f 33ff 	mov.w	r3, #4294967295
 800acf8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800acfc:	2200      	movs	r2, #0
 800acfe:	2312      	movs	r3, #18
 800ad00:	e7b0      	b.n	800ac64 <_dtoa_r+0x26c>
 800ad02:	2301      	movs	r3, #1
 800ad04:	9308      	str	r3, [sp, #32]
 800ad06:	e7f5      	b.n	800acf4 <_dtoa_r+0x2fc>
 800ad08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad0e:	e7b8      	b.n	800ac82 <_dtoa_r+0x28a>
 800ad10:	3101      	adds	r1, #1
 800ad12:	6041      	str	r1, [r0, #4]
 800ad14:	0052      	lsls	r2, r2, #1
 800ad16:	e7b8      	b.n	800ac8a <_dtoa_r+0x292>
 800ad18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad1a:	9a01      	ldr	r2, [sp, #4]
 800ad1c:	601a      	str	r2, [r3, #0]
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	2b0e      	cmp	r3, #14
 800ad22:	f200 809d 	bhi.w	800ae60 <_dtoa_r+0x468>
 800ad26:	2d00      	cmp	r5, #0
 800ad28:	f000 809a 	beq.w	800ae60 <_dtoa_r+0x468>
 800ad2c:	9b00      	ldr	r3, [sp, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	dd32      	ble.n	800ad98 <_dtoa_r+0x3a0>
 800ad32:	4ab7      	ldr	r2, [pc, #732]	; (800b010 <_dtoa_r+0x618>)
 800ad34:	f003 030f 	and.w	r3, r3, #15
 800ad38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad40:	9b00      	ldr	r3, [sp, #0]
 800ad42:	05d8      	lsls	r0, r3, #23
 800ad44:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ad48:	d516      	bpl.n	800ad78 <_dtoa_r+0x380>
 800ad4a:	4bb2      	ldr	r3, [pc, #712]	; (800b014 <_dtoa_r+0x61c>)
 800ad4c:	ec51 0b19 	vmov	r0, r1, d9
 800ad50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad54:	f7f5 fd9a 	bl	800088c <__aeabi_ddiv>
 800ad58:	f007 070f 	and.w	r7, r7, #15
 800ad5c:	4682      	mov	sl, r0
 800ad5e:	468b      	mov	fp, r1
 800ad60:	2503      	movs	r5, #3
 800ad62:	4eac      	ldr	r6, [pc, #688]	; (800b014 <_dtoa_r+0x61c>)
 800ad64:	b957      	cbnz	r7, 800ad7c <_dtoa_r+0x384>
 800ad66:	4642      	mov	r2, r8
 800ad68:	464b      	mov	r3, r9
 800ad6a:	4650      	mov	r0, sl
 800ad6c:	4659      	mov	r1, fp
 800ad6e:	f7f5 fd8d 	bl	800088c <__aeabi_ddiv>
 800ad72:	4682      	mov	sl, r0
 800ad74:	468b      	mov	fp, r1
 800ad76:	e028      	b.n	800adca <_dtoa_r+0x3d2>
 800ad78:	2502      	movs	r5, #2
 800ad7a:	e7f2      	b.n	800ad62 <_dtoa_r+0x36a>
 800ad7c:	07f9      	lsls	r1, r7, #31
 800ad7e:	d508      	bpl.n	800ad92 <_dtoa_r+0x39a>
 800ad80:	4640      	mov	r0, r8
 800ad82:	4649      	mov	r1, r9
 800ad84:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad88:	f7f5 fc56 	bl	8000638 <__aeabi_dmul>
 800ad8c:	3501      	adds	r5, #1
 800ad8e:	4680      	mov	r8, r0
 800ad90:	4689      	mov	r9, r1
 800ad92:	107f      	asrs	r7, r7, #1
 800ad94:	3608      	adds	r6, #8
 800ad96:	e7e5      	b.n	800ad64 <_dtoa_r+0x36c>
 800ad98:	f000 809b 	beq.w	800aed2 <_dtoa_r+0x4da>
 800ad9c:	9b00      	ldr	r3, [sp, #0]
 800ad9e:	4f9d      	ldr	r7, [pc, #628]	; (800b014 <_dtoa_r+0x61c>)
 800ada0:	425e      	negs	r6, r3
 800ada2:	4b9b      	ldr	r3, [pc, #620]	; (800b010 <_dtoa_r+0x618>)
 800ada4:	f006 020f 	and.w	r2, r6, #15
 800ada8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb0:	ec51 0b19 	vmov	r0, r1, d9
 800adb4:	f7f5 fc40 	bl	8000638 <__aeabi_dmul>
 800adb8:	1136      	asrs	r6, r6, #4
 800adba:	4682      	mov	sl, r0
 800adbc:	468b      	mov	fp, r1
 800adbe:	2300      	movs	r3, #0
 800adc0:	2502      	movs	r5, #2
 800adc2:	2e00      	cmp	r6, #0
 800adc4:	d17a      	bne.n	800aebc <_dtoa_r+0x4c4>
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1d3      	bne.n	800ad72 <_dtoa_r+0x37a>
 800adca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f000 8082 	beq.w	800aed6 <_dtoa_r+0x4de>
 800add2:	4b91      	ldr	r3, [pc, #580]	; (800b018 <_dtoa_r+0x620>)
 800add4:	2200      	movs	r2, #0
 800add6:	4650      	mov	r0, sl
 800add8:	4659      	mov	r1, fp
 800adda:	f7f5 fe9f 	bl	8000b1c <__aeabi_dcmplt>
 800adde:	2800      	cmp	r0, #0
 800ade0:	d079      	beq.n	800aed6 <_dtoa_r+0x4de>
 800ade2:	9b03      	ldr	r3, [sp, #12]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d076      	beq.n	800aed6 <_dtoa_r+0x4de>
 800ade8:	9b02      	ldr	r3, [sp, #8]
 800adea:	2b00      	cmp	r3, #0
 800adec:	dd36      	ble.n	800ae5c <_dtoa_r+0x464>
 800adee:	9b00      	ldr	r3, [sp, #0]
 800adf0:	4650      	mov	r0, sl
 800adf2:	4659      	mov	r1, fp
 800adf4:	1e5f      	subs	r7, r3, #1
 800adf6:	2200      	movs	r2, #0
 800adf8:	4b88      	ldr	r3, [pc, #544]	; (800b01c <_dtoa_r+0x624>)
 800adfa:	f7f5 fc1d 	bl	8000638 <__aeabi_dmul>
 800adfe:	9e02      	ldr	r6, [sp, #8]
 800ae00:	4682      	mov	sl, r0
 800ae02:	468b      	mov	fp, r1
 800ae04:	3501      	adds	r5, #1
 800ae06:	4628      	mov	r0, r5
 800ae08:	f7f5 fbac 	bl	8000564 <__aeabi_i2d>
 800ae0c:	4652      	mov	r2, sl
 800ae0e:	465b      	mov	r3, fp
 800ae10:	f7f5 fc12 	bl	8000638 <__aeabi_dmul>
 800ae14:	4b82      	ldr	r3, [pc, #520]	; (800b020 <_dtoa_r+0x628>)
 800ae16:	2200      	movs	r2, #0
 800ae18:	f7f5 fa58 	bl	80002cc <__adddf3>
 800ae1c:	46d0      	mov	r8, sl
 800ae1e:	46d9      	mov	r9, fp
 800ae20:	4682      	mov	sl, r0
 800ae22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ae26:	2e00      	cmp	r6, #0
 800ae28:	d158      	bne.n	800aedc <_dtoa_r+0x4e4>
 800ae2a:	4b7e      	ldr	r3, [pc, #504]	; (800b024 <_dtoa_r+0x62c>)
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	4640      	mov	r0, r8
 800ae30:	4649      	mov	r1, r9
 800ae32:	f7f5 fa49 	bl	80002c8 <__aeabi_dsub>
 800ae36:	4652      	mov	r2, sl
 800ae38:	465b      	mov	r3, fp
 800ae3a:	4680      	mov	r8, r0
 800ae3c:	4689      	mov	r9, r1
 800ae3e:	f7f5 fe8b 	bl	8000b58 <__aeabi_dcmpgt>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	f040 8295 	bne.w	800b372 <_dtoa_r+0x97a>
 800ae48:	4652      	mov	r2, sl
 800ae4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ae4e:	4640      	mov	r0, r8
 800ae50:	4649      	mov	r1, r9
 800ae52:	f7f5 fe63 	bl	8000b1c <__aeabi_dcmplt>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	f040 8289 	bne.w	800b36e <_dtoa_r+0x976>
 800ae5c:	ec5b ab19 	vmov	sl, fp, d9
 800ae60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f2c0 8148 	blt.w	800b0f8 <_dtoa_r+0x700>
 800ae68:	9a00      	ldr	r2, [sp, #0]
 800ae6a:	2a0e      	cmp	r2, #14
 800ae6c:	f300 8144 	bgt.w	800b0f8 <_dtoa_r+0x700>
 800ae70:	4b67      	ldr	r3, [pc, #412]	; (800b010 <_dtoa_r+0x618>)
 800ae72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae76:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f280 80d5 	bge.w	800b02c <_dtoa_r+0x634>
 800ae82:	9b03      	ldr	r3, [sp, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f300 80d1 	bgt.w	800b02c <_dtoa_r+0x634>
 800ae8a:	f040 826f 	bne.w	800b36c <_dtoa_r+0x974>
 800ae8e:	4b65      	ldr	r3, [pc, #404]	; (800b024 <_dtoa_r+0x62c>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	4640      	mov	r0, r8
 800ae94:	4649      	mov	r1, r9
 800ae96:	f7f5 fbcf 	bl	8000638 <__aeabi_dmul>
 800ae9a:	4652      	mov	r2, sl
 800ae9c:	465b      	mov	r3, fp
 800ae9e:	f7f5 fe51 	bl	8000b44 <__aeabi_dcmpge>
 800aea2:	9e03      	ldr	r6, [sp, #12]
 800aea4:	4637      	mov	r7, r6
 800aea6:	2800      	cmp	r0, #0
 800aea8:	f040 8245 	bne.w	800b336 <_dtoa_r+0x93e>
 800aeac:	9d01      	ldr	r5, [sp, #4]
 800aeae:	2331      	movs	r3, #49	; 0x31
 800aeb0:	f805 3b01 	strb.w	r3, [r5], #1
 800aeb4:	9b00      	ldr	r3, [sp, #0]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	e240      	b.n	800b33e <_dtoa_r+0x946>
 800aebc:	07f2      	lsls	r2, r6, #31
 800aebe:	d505      	bpl.n	800aecc <_dtoa_r+0x4d4>
 800aec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aec4:	f7f5 fbb8 	bl	8000638 <__aeabi_dmul>
 800aec8:	3501      	adds	r5, #1
 800aeca:	2301      	movs	r3, #1
 800aecc:	1076      	asrs	r6, r6, #1
 800aece:	3708      	adds	r7, #8
 800aed0:	e777      	b.n	800adc2 <_dtoa_r+0x3ca>
 800aed2:	2502      	movs	r5, #2
 800aed4:	e779      	b.n	800adca <_dtoa_r+0x3d2>
 800aed6:	9f00      	ldr	r7, [sp, #0]
 800aed8:	9e03      	ldr	r6, [sp, #12]
 800aeda:	e794      	b.n	800ae06 <_dtoa_r+0x40e>
 800aedc:	9901      	ldr	r1, [sp, #4]
 800aede:	4b4c      	ldr	r3, [pc, #304]	; (800b010 <_dtoa_r+0x618>)
 800aee0:	4431      	add	r1, r6
 800aee2:	910d      	str	r1, [sp, #52]	; 0x34
 800aee4:	9908      	ldr	r1, [sp, #32]
 800aee6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aeea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aeee:	2900      	cmp	r1, #0
 800aef0:	d043      	beq.n	800af7a <_dtoa_r+0x582>
 800aef2:	494d      	ldr	r1, [pc, #308]	; (800b028 <_dtoa_r+0x630>)
 800aef4:	2000      	movs	r0, #0
 800aef6:	f7f5 fcc9 	bl	800088c <__aeabi_ddiv>
 800aefa:	4652      	mov	r2, sl
 800aefc:	465b      	mov	r3, fp
 800aefe:	f7f5 f9e3 	bl	80002c8 <__aeabi_dsub>
 800af02:	9d01      	ldr	r5, [sp, #4]
 800af04:	4682      	mov	sl, r0
 800af06:	468b      	mov	fp, r1
 800af08:	4649      	mov	r1, r9
 800af0a:	4640      	mov	r0, r8
 800af0c:	f7f5 fe44 	bl	8000b98 <__aeabi_d2iz>
 800af10:	4606      	mov	r6, r0
 800af12:	f7f5 fb27 	bl	8000564 <__aeabi_i2d>
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	4640      	mov	r0, r8
 800af1c:	4649      	mov	r1, r9
 800af1e:	f7f5 f9d3 	bl	80002c8 <__aeabi_dsub>
 800af22:	3630      	adds	r6, #48	; 0x30
 800af24:	f805 6b01 	strb.w	r6, [r5], #1
 800af28:	4652      	mov	r2, sl
 800af2a:	465b      	mov	r3, fp
 800af2c:	4680      	mov	r8, r0
 800af2e:	4689      	mov	r9, r1
 800af30:	f7f5 fdf4 	bl	8000b1c <__aeabi_dcmplt>
 800af34:	2800      	cmp	r0, #0
 800af36:	d163      	bne.n	800b000 <_dtoa_r+0x608>
 800af38:	4642      	mov	r2, r8
 800af3a:	464b      	mov	r3, r9
 800af3c:	4936      	ldr	r1, [pc, #216]	; (800b018 <_dtoa_r+0x620>)
 800af3e:	2000      	movs	r0, #0
 800af40:	f7f5 f9c2 	bl	80002c8 <__aeabi_dsub>
 800af44:	4652      	mov	r2, sl
 800af46:	465b      	mov	r3, fp
 800af48:	f7f5 fde8 	bl	8000b1c <__aeabi_dcmplt>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	f040 80b5 	bne.w	800b0bc <_dtoa_r+0x6c4>
 800af52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af54:	429d      	cmp	r5, r3
 800af56:	d081      	beq.n	800ae5c <_dtoa_r+0x464>
 800af58:	4b30      	ldr	r3, [pc, #192]	; (800b01c <_dtoa_r+0x624>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	4650      	mov	r0, sl
 800af5e:	4659      	mov	r1, fp
 800af60:	f7f5 fb6a 	bl	8000638 <__aeabi_dmul>
 800af64:	4b2d      	ldr	r3, [pc, #180]	; (800b01c <_dtoa_r+0x624>)
 800af66:	4682      	mov	sl, r0
 800af68:	468b      	mov	fp, r1
 800af6a:	4640      	mov	r0, r8
 800af6c:	4649      	mov	r1, r9
 800af6e:	2200      	movs	r2, #0
 800af70:	f7f5 fb62 	bl	8000638 <__aeabi_dmul>
 800af74:	4680      	mov	r8, r0
 800af76:	4689      	mov	r9, r1
 800af78:	e7c6      	b.n	800af08 <_dtoa_r+0x510>
 800af7a:	4650      	mov	r0, sl
 800af7c:	4659      	mov	r1, fp
 800af7e:	f7f5 fb5b 	bl	8000638 <__aeabi_dmul>
 800af82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af84:	9d01      	ldr	r5, [sp, #4]
 800af86:	930f      	str	r3, [sp, #60]	; 0x3c
 800af88:	4682      	mov	sl, r0
 800af8a:	468b      	mov	fp, r1
 800af8c:	4649      	mov	r1, r9
 800af8e:	4640      	mov	r0, r8
 800af90:	f7f5 fe02 	bl	8000b98 <__aeabi_d2iz>
 800af94:	4606      	mov	r6, r0
 800af96:	f7f5 fae5 	bl	8000564 <__aeabi_i2d>
 800af9a:	3630      	adds	r6, #48	; 0x30
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4640      	mov	r0, r8
 800afa2:	4649      	mov	r1, r9
 800afa4:	f7f5 f990 	bl	80002c8 <__aeabi_dsub>
 800afa8:	f805 6b01 	strb.w	r6, [r5], #1
 800afac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afae:	429d      	cmp	r5, r3
 800afb0:	4680      	mov	r8, r0
 800afb2:	4689      	mov	r9, r1
 800afb4:	f04f 0200 	mov.w	r2, #0
 800afb8:	d124      	bne.n	800b004 <_dtoa_r+0x60c>
 800afba:	4b1b      	ldr	r3, [pc, #108]	; (800b028 <_dtoa_r+0x630>)
 800afbc:	4650      	mov	r0, sl
 800afbe:	4659      	mov	r1, fp
 800afc0:	f7f5 f984 	bl	80002cc <__adddf3>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4640      	mov	r0, r8
 800afca:	4649      	mov	r1, r9
 800afcc:	f7f5 fdc4 	bl	8000b58 <__aeabi_dcmpgt>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d173      	bne.n	800b0bc <_dtoa_r+0x6c4>
 800afd4:	4652      	mov	r2, sl
 800afd6:	465b      	mov	r3, fp
 800afd8:	4913      	ldr	r1, [pc, #76]	; (800b028 <_dtoa_r+0x630>)
 800afda:	2000      	movs	r0, #0
 800afdc:	f7f5 f974 	bl	80002c8 <__aeabi_dsub>
 800afe0:	4602      	mov	r2, r0
 800afe2:	460b      	mov	r3, r1
 800afe4:	4640      	mov	r0, r8
 800afe6:	4649      	mov	r1, r9
 800afe8:	f7f5 fd98 	bl	8000b1c <__aeabi_dcmplt>
 800afec:	2800      	cmp	r0, #0
 800afee:	f43f af35 	beq.w	800ae5c <_dtoa_r+0x464>
 800aff2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aff4:	1e6b      	subs	r3, r5, #1
 800aff6:	930f      	str	r3, [sp, #60]	; 0x3c
 800aff8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800affc:	2b30      	cmp	r3, #48	; 0x30
 800affe:	d0f8      	beq.n	800aff2 <_dtoa_r+0x5fa>
 800b000:	9700      	str	r7, [sp, #0]
 800b002:	e049      	b.n	800b098 <_dtoa_r+0x6a0>
 800b004:	4b05      	ldr	r3, [pc, #20]	; (800b01c <_dtoa_r+0x624>)
 800b006:	f7f5 fb17 	bl	8000638 <__aeabi_dmul>
 800b00a:	4680      	mov	r8, r0
 800b00c:	4689      	mov	r9, r1
 800b00e:	e7bd      	b.n	800af8c <_dtoa_r+0x594>
 800b010:	0800e450 	.word	0x0800e450
 800b014:	0800e428 	.word	0x0800e428
 800b018:	3ff00000 	.word	0x3ff00000
 800b01c:	40240000 	.word	0x40240000
 800b020:	401c0000 	.word	0x401c0000
 800b024:	40140000 	.word	0x40140000
 800b028:	3fe00000 	.word	0x3fe00000
 800b02c:	9d01      	ldr	r5, [sp, #4]
 800b02e:	4656      	mov	r6, sl
 800b030:	465f      	mov	r7, fp
 800b032:	4642      	mov	r2, r8
 800b034:	464b      	mov	r3, r9
 800b036:	4630      	mov	r0, r6
 800b038:	4639      	mov	r1, r7
 800b03a:	f7f5 fc27 	bl	800088c <__aeabi_ddiv>
 800b03e:	f7f5 fdab 	bl	8000b98 <__aeabi_d2iz>
 800b042:	4682      	mov	sl, r0
 800b044:	f7f5 fa8e 	bl	8000564 <__aeabi_i2d>
 800b048:	4642      	mov	r2, r8
 800b04a:	464b      	mov	r3, r9
 800b04c:	f7f5 faf4 	bl	8000638 <__aeabi_dmul>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	4630      	mov	r0, r6
 800b056:	4639      	mov	r1, r7
 800b058:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b05c:	f7f5 f934 	bl	80002c8 <__aeabi_dsub>
 800b060:	f805 6b01 	strb.w	r6, [r5], #1
 800b064:	9e01      	ldr	r6, [sp, #4]
 800b066:	9f03      	ldr	r7, [sp, #12]
 800b068:	1bae      	subs	r6, r5, r6
 800b06a:	42b7      	cmp	r7, r6
 800b06c:	4602      	mov	r2, r0
 800b06e:	460b      	mov	r3, r1
 800b070:	d135      	bne.n	800b0de <_dtoa_r+0x6e6>
 800b072:	f7f5 f92b 	bl	80002cc <__adddf3>
 800b076:	4642      	mov	r2, r8
 800b078:	464b      	mov	r3, r9
 800b07a:	4606      	mov	r6, r0
 800b07c:	460f      	mov	r7, r1
 800b07e:	f7f5 fd6b 	bl	8000b58 <__aeabi_dcmpgt>
 800b082:	b9d0      	cbnz	r0, 800b0ba <_dtoa_r+0x6c2>
 800b084:	4642      	mov	r2, r8
 800b086:	464b      	mov	r3, r9
 800b088:	4630      	mov	r0, r6
 800b08a:	4639      	mov	r1, r7
 800b08c:	f7f5 fd3c 	bl	8000b08 <__aeabi_dcmpeq>
 800b090:	b110      	cbz	r0, 800b098 <_dtoa_r+0x6a0>
 800b092:	f01a 0f01 	tst.w	sl, #1
 800b096:	d110      	bne.n	800b0ba <_dtoa_r+0x6c2>
 800b098:	4620      	mov	r0, r4
 800b09a:	ee18 1a10 	vmov	r1, s16
 800b09e:	f000 faf3 	bl	800b688 <_Bfree>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	9800      	ldr	r0, [sp, #0]
 800b0a6:	702b      	strb	r3, [r5, #0]
 800b0a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	6018      	str	r0, [r3, #0]
 800b0ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f43f acf1 	beq.w	800aa98 <_dtoa_r+0xa0>
 800b0b6:	601d      	str	r5, [r3, #0]
 800b0b8:	e4ee      	b.n	800aa98 <_dtoa_r+0xa0>
 800b0ba:	9f00      	ldr	r7, [sp, #0]
 800b0bc:	462b      	mov	r3, r5
 800b0be:	461d      	mov	r5, r3
 800b0c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0c4:	2a39      	cmp	r2, #57	; 0x39
 800b0c6:	d106      	bne.n	800b0d6 <_dtoa_r+0x6de>
 800b0c8:	9a01      	ldr	r2, [sp, #4]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d1f7      	bne.n	800b0be <_dtoa_r+0x6c6>
 800b0ce:	9901      	ldr	r1, [sp, #4]
 800b0d0:	2230      	movs	r2, #48	; 0x30
 800b0d2:	3701      	adds	r7, #1
 800b0d4:	700a      	strb	r2, [r1, #0]
 800b0d6:	781a      	ldrb	r2, [r3, #0]
 800b0d8:	3201      	adds	r2, #1
 800b0da:	701a      	strb	r2, [r3, #0]
 800b0dc:	e790      	b.n	800b000 <_dtoa_r+0x608>
 800b0de:	4ba6      	ldr	r3, [pc, #664]	; (800b378 <_dtoa_r+0x980>)
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f7f5 faa9 	bl	8000638 <__aeabi_dmul>
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	460f      	mov	r7, r1
 800b0ee:	f7f5 fd0b 	bl	8000b08 <__aeabi_dcmpeq>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d09d      	beq.n	800b032 <_dtoa_r+0x63a>
 800b0f6:	e7cf      	b.n	800b098 <_dtoa_r+0x6a0>
 800b0f8:	9a08      	ldr	r2, [sp, #32]
 800b0fa:	2a00      	cmp	r2, #0
 800b0fc:	f000 80d7 	beq.w	800b2ae <_dtoa_r+0x8b6>
 800b100:	9a06      	ldr	r2, [sp, #24]
 800b102:	2a01      	cmp	r2, #1
 800b104:	f300 80ba 	bgt.w	800b27c <_dtoa_r+0x884>
 800b108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b10a:	2a00      	cmp	r2, #0
 800b10c:	f000 80b2 	beq.w	800b274 <_dtoa_r+0x87c>
 800b110:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b114:	9e07      	ldr	r6, [sp, #28]
 800b116:	9d04      	ldr	r5, [sp, #16]
 800b118:	9a04      	ldr	r2, [sp, #16]
 800b11a:	441a      	add	r2, r3
 800b11c:	9204      	str	r2, [sp, #16]
 800b11e:	9a05      	ldr	r2, [sp, #20]
 800b120:	2101      	movs	r1, #1
 800b122:	441a      	add	r2, r3
 800b124:	4620      	mov	r0, r4
 800b126:	9205      	str	r2, [sp, #20]
 800b128:	f000 fb66 	bl	800b7f8 <__i2b>
 800b12c:	4607      	mov	r7, r0
 800b12e:	2d00      	cmp	r5, #0
 800b130:	dd0c      	ble.n	800b14c <_dtoa_r+0x754>
 800b132:	9b05      	ldr	r3, [sp, #20]
 800b134:	2b00      	cmp	r3, #0
 800b136:	dd09      	ble.n	800b14c <_dtoa_r+0x754>
 800b138:	42ab      	cmp	r3, r5
 800b13a:	9a04      	ldr	r2, [sp, #16]
 800b13c:	bfa8      	it	ge
 800b13e:	462b      	movge	r3, r5
 800b140:	1ad2      	subs	r2, r2, r3
 800b142:	9204      	str	r2, [sp, #16]
 800b144:	9a05      	ldr	r2, [sp, #20]
 800b146:	1aed      	subs	r5, r5, r3
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	9305      	str	r3, [sp, #20]
 800b14c:	9b07      	ldr	r3, [sp, #28]
 800b14e:	b31b      	cbz	r3, 800b198 <_dtoa_r+0x7a0>
 800b150:	9b08      	ldr	r3, [sp, #32]
 800b152:	2b00      	cmp	r3, #0
 800b154:	f000 80af 	beq.w	800b2b6 <_dtoa_r+0x8be>
 800b158:	2e00      	cmp	r6, #0
 800b15a:	dd13      	ble.n	800b184 <_dtoa_r+0x78c>
 800b15c:	4639      	mov	r1, r7
 800b15e:	4632      	mov	r2, r6
 800b160:	4620      	mov	r0, r4
 800b162:	f000 fc09 	bl	800b978 <__pow5mult>
 800b166:	ee18 2a10 	vmov	r2, s16
 800b16a:	4601      	mov	r1, r0
 800b16c:	4607      	mov	r7, r0
 800b16e:	4620      	mov	r0, r4
 800b170:	f000 fb58 	bl	800b824 <__multiply>
 800b174:	ee18 1a10 	vmov	r1, s16
 800b178:	4680      	mov	r8, r0
 800b17a:	4620      	mov	r0, r4
 800b17c:	f000 fa84 	bl	800b688 <_Bfree>
 800b180:	ee08 8a10 	vmov	s16, r8
 800b184:	9b07      	ldr	r3, [sp, #28]
 800b186:	1b9a      	subs	r2, r3, r6
 800b188:	d006      	beq.n	800b198 <_dtoa_r+0x7a0>
 800b18a:	ee18 1a10 	vmov	r1, s16
 800b18e:	4620      	mov	r0, r4
 800b190:	f000 fbf2 	bl	800b978 <__pow5mult>
 800b194:	ee08 0a10 	vmov	s16, r0
 800b198:	2101      	movs	r1, #1
 800b19a:	4620      	mov	r0, r4
 800b19c:	f000 fb2c 	bl	800b7f8 <__i2b>
 800b1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	4606      	mov	r6, r0
 800b1a6:	f340 8088 	ble.w	800b2ba <_dtoa_r+0x8c2>
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	4601      	mov	r1, r0
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f000 fbe2 	bl	800b978 <__pow5mult>
 800b1b4:	9b06      	ldr	r3, [sp, #24]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	4606      	mov	r6, r0
 800b1ba:	f340 8081 	ble.w	800b2c0 <_dtoa_r+0x8c8>
 800b1be:	f04f 0800 	mov.w	r8, #0
 800b1c2:	6933      	ldr	r3, [r6, #16]
 800b1c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b1c8:	6918      	ldr	r0, [r3, #16]
 800b1ca:	f000 fac5 	bl	800b758 <__hi0bits>
 800b1ce:	f1c0 0020 	rsb	r0, r0, #32
 800b1d2:	9b05      	ldr	r3, [sp, #20]
 800b1d4:	4418      	add	r0, r3
 800b1d6:	f010 001f 	ands.w	r0, r0, #31
 800b1da:	f000 8092 	beq.w	800b302 <_dtoa_r+0x90a>
 800b1de:	f1c0 0320 	rsb	r3, r0, #32
 800b1e2:	2b04      	cmp	r3, #4
 800b1e4:	f340 808a 	ble.w	800b2fc <_dtoa_r+0x904>
 800b1e8:	f1c0 001c 	rsb	r0, r0, #28
 800b1ec:	9b04      	ldr	r3, [sp, #16]
 800b1ee:	4403      	add	r3, r0
 800b1f0:	9304      	str	r3, [sp, #16]
 800b1f2:	9b05      	ldr	r3, [sp, #20]
 800b1f4:	4403      	add	r3, r0
 800b1f6:	4405      	add	r5, r0
 800b1f8:	9305      	str	r3, [sp, #20]
 800b1fa:	9b04      	ldr	r3, [sp, #16]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	dd07      	ble.n	800b210 <_dtoa_r+0x818>
 800b200:	ee18 1a10 	vmov	r1, s16
 800b204:	461a      	mov	r2, r3
 800b206:	4620      	mov	r0, r4
 800b208:	f000 fc10 	bl	800ba2c <__lshift>
 800b20c:	ee08 0a10 	vmov	s16, r0
 800b210:	9b05      	ldr	r3, [sp, #20]
 800b212:	2b00      	cmp	r3, #0
 800b214:	dd05      	ble.n	800b222 <_dtoa_r+0x82a>
 800b216:	4631      	mov	r1, r6
 800b218:	461a      	mov	r2, r3
 800b21a:	4620      	mov	r0, r4
 800b21c:	f000 fc06 	bl	800ba2c <__lshift>
 800b220:	4606      	mov	r6, r0
 800b222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b224:	2b00      	cmp	r3, #0
 800b226:	d06e      	beq.n	800b306 <_dtoa_r+0x90e>
 800b228:	ee18 0a10 	vmov	r0, s16
 800b22c:	4631      	mov	r1, r6
 800b22e:	f000 fc6d 	bl	800bb0c <__mcmp>
 800b232:	2800      	cmp	r0, #0
 800b234:	da67      	bge.n	800b306 <_dtoa_r+0x90e>
 800b236:	9b00      	ldr	r3, [sp, #0]
 800b238:	3b01      	subs	r3, #1
 800b23a:	ee18 1a10 	vmov	r1, s16
 800b23e:	9300      	str	r3, [sp, #0]
 800b240:	220a      	movs	r2, #10
 800b242:	2300      	movs	r3, #0
 800b244:	4620      	mov	r0, r4
 800b246:	f000 fa41 	bl	800b6cc <__multadd>
 800b24a:	9b08      	ldr	r3, [sp, #32]
 800b24c:	ee08 0a10 	vmov	s16, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	f000 81b1 	beq.w	800b5b8 <_dtoa_r+0xbc0>
 800b256:	2300      	movs	r3, #0
 800b258:	4639      	mov	r1, r7
 800b25a:	220a      	movs	r2, #10
 800b25c:	4620      	mov	r0, r4
 800b25e:	f000 fa35 	bl	800b6cc <__multadd>
 800b262:	9b02      	ldr	r3, [sp, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	4607      	mov	r7, r0
 800b268:	f300 808e 	bgt.w	800b388 <_dtoa_r+0x990>
 800b26c:	9b06      	ldr	r3, [sp, #24]
 800b26e:	2b02      	cmp	r3, #2
 800b270:	dc51      	bgt.n	800b316 <_dtoa_r+0x91e>
 800b272:	e089      	b.n	800b388 <_dtoa_r+0x990>
 800b274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b276:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b27a:	e74b      	b.n	800b114 <_dtoa_r+0x71c>
 800b27c:	9b03      	ldr	r3, [sp, #12]
 800b27e:	1e5e      	subs	r6, r3, #1
 800b280:	9b07      	ldr	r3, [sp, #28]
 800b282:	42b3      	cmp	r3, r6
 800b284:	bfbf      	itttt	lt
 800b286:	9b07      	ldrlt	r3, [sp, #28]
 800b288:	9607      	strlt	r6, [sp, #28]
 800b28a:	1af2      	sublt	r2, r6, r3
 800b28c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b28e:	bfb6      	itet	lt
 800b290:	189b      	addlt	r3, r3, r2
 800b292:	1b9e      	subge	r6, r3, r6
 800b294:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b296:	9b03      	ldr	r3, [sp, #12]
 800b298:	bfb8      	it	lt
 800b29a:	2600      	movlt	r6, #0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	bfb7      	itett	lt
 800b2a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b2a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b2a8:	1a9d      	sublt	r5, r3, r2
 800b2aa:	2300      	movlt	r3, #0
 800b2ac:	e734      	b.n	800b118 <_dtoa_r+0x720>
 800b2ae:	9e07      	ldr	r6, [sp, #28]
 800b2b0:	9d04      	ldr	r5, [sp, #16]
 800b2b2:	9f08      	ldr	r7, [sp, #32]
 800b2b4:	e73b      	b.n	800b12e <_dtoa_r+0x736>
 800b2b6:	9a07      	ldr	r2, [sp, #28]
 800b2b8:	e767      	b.n	800b18a <_dtoa_r+0x792>
 800b2ba:	9b06      	ldr	r3, [sp, #24]
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	dc18      	bgt.n	800b2f2 <_dtoa_r+0x8fa>
 800b2c0:	f1ba 0f00 	cmp.w	sl, #0
 800b2c4:	d115      	bne.n	800b2f2 <_dtoa_r+0x8fa>
 800b2c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2ca:	b993      	cbnz	r3, 800b2f2 <_dtoa_r+0x8fa>
 800b2cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b2d0:	0d1b      	lsrs	r3, r3, #20
 800b2d2:	051b      	lsls	r3, r3, #20
 800b2d4:	b183      	cbz	r3, 800b2f8 <_dtoa_r+0x900>
 800b2d6:	9b04      	ldr	r3, [sp, #16]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	9304      	str	r3, [sp, #16]
 800b2dc:	9b05      	ldr	r3, [sp, #20]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	9305      	str	r3, [sp, #20]
 800b2e2:	f04f 0801 	mov.w	r8, #1
 800b2e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f47f af6a 	bne.w	800b1c2 <_dtoa_r+0x7ca>
 800b2ee:	2001      	movs	r0, #1
 800b2f0:	e76f      	b.n	800b1d2 <_dtoa_r+0x7da>
 800b2f2:	f04f 0800 	mov.w	r8, #0
 800b2f6:	e7f6      	b.n	800b2e6 <_dtoa_r+0x8ee>
 800b2f8:	4698      	mov	r8, r3
 800b2fa:	e7f4      	b.n	800b2e6 <_dtoa_r+0x8ee>
 800b2fc:	f43f af7d 	beq.w	800b1fa <_dtoa_r+0x802>
 800b300:	4618      	mov	r0, r3
 800b302:	301c      	adds	r0, #28
 800b304:	e772      	b.n	800b1ec <_dtoa_r+0x7f4>
 800b306:	9b03      	ldr	r3, [sp, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	dc37      	bgt.n	800b37c <_dtoa_r+0x984>
 800b30c:	9b06      	ldr	r3, [sp, #24]
 800b30e:	2b02      	cmp	r3, #2
 800b310:	dd34      	ble.n	800b37c <_dtoa_r+0x984>
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	9302      	str	r3, [sp, #8]
 800b316:	9b02      	ldr	r3, [sp, #8]
 800b318:	b96b      	cbnz	r3, 800b336 <_dtoa_r+0x93e>
 800b31a:	4631      	mov	r1, r6
 800b31c:	2205      	movs	r2, #5
 800b31e:	4620      	mov	r0, r4
 800b320:	f000 f9d4 	bl	800b6cc <__multadd>
 800b324:	4601      	mov	r1, r0
 800b326:	4606      	mov	r6, r0
 800b328:	ee18 0a10 	vmov	r0, s16
 800b32c:	f000 fbee 	bl	800bb0c <__mcmp>
 800b330:	2800      	cmp	r0, #0
 800b332:	f73f adbb 	bgt.w	800aeac <_dtoa_r+0x4b4>
 800b336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b338:	9d01      	ldr	r5, [sp, #4]
 800b33a:	43db      	mvns	r3, r3
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	f04f 0800 	mov.w	r8, #0
 800b342:	4631      	mov	r1, r6
 800b344:	4620      	mov	r0, r4
 800b346:	f000 f99f 	bl	800b688 <_Bfree>
 800b34a:	2f00      	cmp	r7, #0
 800b34c:	f43f aea4 	beq.w	800b098 <_dtoa_r+0x6a0>
 800b350:	f1b8 0f00 	cmp.w	r8, #0
 800b354:	d005      	beq.n	800b362 <_dtoa_r+0x96a>
 800b356:	45b8      	cmp	r8, r7
 800b358:	d003      	beq.n	800b362 <_dtoa_r+0x96a>
 800b35a:	4641      	mov	r1, r8
 800b35c:	4620      	mov	r0, r4
 800b35e:	f000 f993 	bl	800b688 <_Bfree>
 800b362:	4639      	mov	r1, r7
 800b364:	4620      	mov	r0, r4
 800b366:	f000 f98f 	bl	800b688 <_Bfree>
 800b36a:	e695      	b.n	800b098 <_dtoa_r+0x6a0>
 800b36c:	2600      	movs	r6, #0
 800b36e:	4637      	mov	r7, r6
 800b370:	e7e1      	b.n	800b336 <_dtoa_r+0x93e>
 800b372:	9700      	str	r7, [sp, #0]
 800b374:	4637      	mov	r7, r6
 800b376:	e599      	b.n	800aeac <_dtoa_r+0x4b4>
 800b378:	40240000 	.word	0x40240000
 800b37c:	9b08      	ldr	r3, [sp, #32]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f000 80ca 	beq.w	800b518 <_dtoa_r+0xb20>
 800b384:	9b03      	ldr	r3, [sp, #12]
 800b386:	9302      	str	r3, [sp, #8]
 800b388:	2d00      	cmp	r5, #0
 800b38a:	dd05      	ble.n	800b398 <_dtoa_r+0x9a0>
 800b38c:	4639      	mov	r1, r7
 800b38e:	462a      	mov	r2, r5
 800b390:	4620      	mov	r0, r4
 800b392:	f000 fb4b 	bl	800ba2c <__lshift>
 800b396:	4607      	mov	r7, r0
 800b398:	f1b8 0f00 	cmp.w	r8, #0
 800b39c:	d05b      	beq.n	800b456 <_dtoa_r+0xa5e>
 800b39e:	6879      	ldr	r1, [r7, #4]
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f000 f931 	bl	800b608 <_Balloc>
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	b928      	cbnz	r0, 800b3b6 <_dtoa_r+0x9be>
 800b3aa:	4b87      	ldr	r3, [pc, #540]	; (800b5c8 <_dtoa_r+0xbd0>)
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b3b2:	f7ff bb3b 	b.w	800aa2c <_dtoa_r+0x34>
 800b3b6:	693a      	ldr	r2, [r7, #16]
 800b3b8:	3202      	adds	r2, #2
 800b3ba:	0092      	lsls	r2, r2, #2
 800b3bc:	f107 010c 	add.w	r1, r7, #12
 800b3c0:	300c      	adds	r0, #12
 800b3c2:	f000 f913 	bl	800b5ec <memcpy>
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f000 fb2e 	bl	800ba2c <__lshift>
 800b3d0:	9b01      	ldr	r3, [sp, #4]
 800b3d2:	f103 0901 	add.w	r9, r3, #1
 800b3d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b3da:	4413      	add	r3, r2
 800b3dc:	9305      	str	r3, [sp, #20]
 800b3de:	f00a 0301 	and.w	r3, sl, #1
 800b3e2:	46b8      	mov	r8, r7
 800b3e4:	9304      	str	r3, [sp, #16]
 800b3e6:	4607      	mov	r7, r0
 800b3e8:	4631      	mov	r1, r6
 800b3ea:	ee18 0a10 	vmov	r0, s16
 800b3ee:	f7ff fa77 	bl	800a8e0 <quorem>
 800b3f2:	4641      	mov	r1, r8
 800b3f4:	9002      	str	r0, [sp, #8]
 800b3f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b3fa:	ee18 0a10 	vmov	r0, s16
 800b3fe:	f000 fb85 	bl	800bb0c <__mcmp>
 800b402:	463a      	mov	r2, r7
 800b404:	9003      	str	r0, [sp, #12]
 800b406:	4631      	mov	r1, r6
 800b408:	4620      	mov	r0, r4
 800b40a:	f000 fb9b 	bl	800bb44 <__mdiff>
 800b40e:	68c2      	ldr	r2, [r0, #12]
 800b410:	f109 3bff 	add.w	fp, r9, #4294967295
 800b414:	4605      	mov	r5, r0
 800b416:	bb02      	cbnz	r2, 800b45a <_dtoa_r+0xa62>
 800b418:	4601      	mov	r1, r0
 800b41a:	ee18 0a10 	vmov	r0, s16
 800b41e:	f000 fb75 	bl	800bb0c <__mcmp>
 800b422:	4602      	mov	r2, r0
 800b424:	4629      	mov	r1, r5
 800b426:	4620      	mov	r0, r4
 800b428:	9207      	str	r2, [sp, #28]
 800b42a:	f000 f92d 	bl	800b688 <_Bfree>
 800b42e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b432:	ea43 0102 	orr.w	r1, r3, r2
 800b436:	9b04      	ldr	r3, [sp, #16]
 800b438:	430b      	orrs	r3, r1
 800b43a:	464d      	mov	r5, r9
 800b43c:	d10f      	bne.n	800b45e <_dtoa_r+0xa66>
 800b43e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b442:	d02a      	beq.n	800b49a <_dtoa_r+0xaa2>
 800b444:	9b03      	ldr	r3, [sp, #12]
 800b446:	2b00      	cmp	r3, #0
 800b448:	dd02      	ble.n	800b450 <_dtoa_r+0xa58>
 800b44a:	9b02      	ldr	r3, [sp, #8]
 800b44c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b450:	f88b a000 	strb.w	sl, [fp]
 800b454:	e775      	b.n	800b342 <_dtoa_r+0x94a>
 800b456:	4638      	mov	r0, r7
 800b458:	e7ba      	b.n	800b3d0 <_dtoa_r+0x9d8>
 800b45a:	2201      	movs	r2, #1
 800b45c:	e7e2      	b.n	800b424 <_dtoa_r+0xa2c>
 800b45e:	9b03      	ldr	r3, [sp, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	db04      	blt.n	800b46e <_dtoa_r+0xa76>
 800b464:	9906      	ldr	r1, [sp, #24]
 800b466:	430b      	orrs	r3, r1
 800b468:	9904      	ldr	r1, [sp, #16]
 800b46a:	430b      	orrs	r3, r1
 800b46c:	d122      	bne.n	800b4b4 <_dtoa_r+0xabc>
 800b46e:	2a00      	cmp	r2, #0
 800b470:	ddee      	ble.n	800b450 <_dtoa_r+0xa58>
 800b472:	ee18 1a10 	vmov	r1, s16
 800b476:	2201      	movs	r2, #1
 800b478:	4620      	mov	r0, r4
 800b47a:	f000 fad7 	bl	800ba2c <__lshift>
 800b47e:	4631      	mov	r1, r6
 800b480:	ee08 0a10 	vmov	s16, r0
 800b484:	f000 fb42 	bl	800bb0c <__mcmp>
 800b488:	2800      	cmp	r0, #0
 800b48a:	dc03      	bgt.n	800b494 <_dtoa_r+0xa9c>
 800b48c:	d1e0      	bne.n	800b450 <_dtoa_r+0xa58>
 800b48e:	f01a 0f01 	tst.w	sl, #1
 800b492:	d0dd      	beq.n	800b450 <_dtoa_r+0xa58>
 800b494:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b498:	d1d7      	bne.n	800b44a <_dtoa_r+0xa52>
 800b49a:	2339      	movs	r3, #57	; 0x39
 800b49c:	f88b 3000 	strb.w	r3, [fp]
 800b4a0:	462b      	mov	r3, r5
 800b4a2:	461d      	mov	r5, r3
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b4aa:	2a39      	cmp	r2, #57	; 0x39
 800b4ac:	d071      	beq.n	800b592 <_dtoa_r+0xb9a>
 800b4ae:	3201      	adds	r2, #1
 800b4b0:	701a      	strb	r2, [r3, #0]
 800b4b2:	e746      	b.n	800b342 <_dtoa_r+0x94a>
 800b4b4:	2a00      	cmp	r2, #0
 800b4b6:	dd07      	ble.n	800b4c8 <_dtoa_r+0xad0>
 800b4b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b4bc:	d0ed      	beq.n	800b49a <_dtoa_r+0xaa2>
 800b4be:	f10a 0301 	add.w	r3, sl, #1
 800b4c2:	f88b 3000 	strb.w	r3, [fp]
 800b4c6:	e73c      	b.n	800b342 <_dtoa_r+0x94a>
 800b4c8:	9b05      	ldr	r3, [sp, #20]
 800b4ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b4ce:	4599      	cmp	r9, r3
 800b4d0:	d047      	beq.n	800b562 <_dtoa_r+0xb6a>
 800b4d2:	ee18 1a10 	vmov	r1, s16
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	220a      	movs	r2, #10
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f000 f8f6 	bl	800b6cc <__multadd>
 800b4e0:	45b8      	cmp	r8, r7
 800b4e2:	ee08 0a10 	vmov	s16, r0
 800b4e6:	f04f 0300 	mov.w	r3, #0
 800b4ea:	f04f 020a 	mov.w	r2, #10
 800b4ee:	4641      	mov	r1, r8
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	d106      	bne.n	800b502 <_dtoa_r+0xb0a>
 800b4f4:	f000 f8ea 	bl	800b6cc <__multadd>
 800b4f8:	4680      	mov	r8, r0
 800b4fa:	4607      	mov	r7, r0
 800b4fc:	f109 0901 	add.w	r9, r9, #1
 800b500:	e772      	b.n	800b3e8 <_dtoa_r+0x9f0>
 800b502:	f000 f8e3 	bl	800b6cc <__multadd>
 800b506:	4639      	mov	r1, r7
 800b508:	4680      	mov	r8, r0
 800b50a:	2300      	movs	r3, #0
 800b50c:	220a      	movs	r2, #10
 800b50e:	4620      	mov	r0, r4
 800b510:	f000 f8dc 	bl	800b6cc <__multadd>
 800b514:	4607      	mov	r7, r0
 800b516:	e7f1      	b.n	800b4fc <_dtoa_r+0xb04>
 800b518:	9b03      	ldr	r3, [sp, #12]
 800b51a:	9302      	str	r3, [sp, #8]
 800b51c:	9d01      	ldr	r5, [sp, #4]
 800b51e:	ee18 0a10 	vmov	r0, s16
 800b522:	4631      	mov	r1, r6
 800b524:	f7ff f9dc 	bl	800a8e0 <quorem>
 800b528:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b52c:	9b01      	ldr	r3, [sp, #4]
 800b52e:	f805 ab01 	strb.w	sl, [r5], #1
 800b532:	1aea      	subs	r2, r5, r3
 800b534:	9b02      	ldr	r3, [sp, #8]
 800b536:	4293      	cmp	r3, r2
 800b538:	dd09      	ble.n	800b54e <_dtoa_r+0xb56>
 800b53a:	ee18 1a10 	vmov	r1, s16
 800b53e:	2300      	movs	r3, #0
 800b540:	220a      	movs	r2, #10
 800b542:	4620      	mov	r0, r4
 800b544:	f000 f8c2 	bl	800b6cc <__multadd>
 800b548:	ee08 0a10 	vmov	s16, r0
 800b54c:	e7e7      	b.n	800b51e <_dtoa_r+0xb26>
 800b54e:	9b02      	ldr	r3, [sp, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	bfc8      	it	gt
 800b554:	461d      	movgt	r5, r3
 800b556:	9b01      	ldr	r3, [sp, #4]
 800b558:	bfd8      	it	le
 800b55a:	2501      	movle	r5, #1
 800b55c:	441d      	add	r5, r3
 800b55e:	f04f 0800 	mov.w	r8, #0
 800b562:	ee18 1a10 	vmov	r1, s16
 800b566:	2201      	movs	r2, #1
 800b568:	4620      	mov	r0, r4
 800b56a:	f000 fa5f 	bl	800ba2c <__lshift>
 800b56e:	4631      	mov	r1, r6
 800b570:	ee08 0a10 	vmov	s16, r0
 800b574:	f000 faca 	bl	800bb0c <__mcmp>
 800b578:	2800      	cmp	r0, #0
 800b57a:	dc91      	bgt.n	800b4a0 <_dtoa_r+0xaa8>
 800b57c:	d102      	bne.n	800b584 <_dtoa_r+0xb8c>
 800b57e:	f01a 0f01 	tst.w	sl, #1
 800b582:	d18d      	bne.n	800b4a0 <_dtoa_r+0xaa8>
 800b584:	462b      	mov	r3, r5
 800b586:	461d      	mov	r5, r3
 800b588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b58c:	2a30      	cmp	r2, #48	; 0x30
 800b58e:	d0fa      	beq.n	800b586 <_dtoa_r+0xb8e>
 800b590:	e6d7      	b.n	800b342 <_dtoa_r+0x94a>
 800b592:	9a01      	ldr	r2, [sp, #4]
 800b594:	429a      	cmp	r2, r3
 800b596:	d184      	bne.n	800b4a2 <_dtoa_r+0xaaa>
 800b598:	9b00      	ldr	r3, [sp, #0]
 800b59a:	3301      	adds	r3, #1
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	2331      	movs	r3, #49	; 0x31
 800b5a0:	7013      	strb	r3, [r2, #0]
 800b5a2:	e6ce      	b.n	800b342 <_dtoa_r+0x94a>
 800b5a4:	4b09      	ldr	r3, [pc, #36]	; (800b5cc <_dtoa_r+0xbd4>)
 800b5a6:	f7ff ba95 	b.w	800aad4 <_dtoa_r+0xdc>
 800b5aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f47f aa6e 	bne.w	800aa8e <_dtoa_r+0x96>
 800b5b2:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <_dtoa_r+0xbd8>)
 800b5b4:	f7ff ba8e 	b.w	800aad4 <_dtoa_r+0xdc>
 800b5b8:	9b02      	ldr	r3, [sp, #8]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	dcae      	bgt.n	800b51c <_dtoa_r+0xb24>
 800b5be:	9b06      	ldr	r3, [sp, #24]
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	f73f aea8 	bgt.w	800b316 <_dtoa_r+0x91e>
 800b5c6:	e7a9      	b.n	800b51c <_dtoa_r+0xb24>
 800b5c8:	0800e3b7 	.word	0x0800e3b7
 800b5cc:	0800e314 	.word	0x0800e314
 800b5d0:	0800e338 	.word	0x0800e338

0800b5d4 <_localeconv_r>:
 800b5d4:	4800      	ldr	r0, [pc, #0]	; (800b5d8 <_localeconv_r+0x4>)
 800b5d6:	4770      	bx	lr
 800b5d8:	200001b4 	.word	0x200001b4

0800b5dc <malloc>:
 800b5dc:	4b02      	ldr	r3, [pc, #8]	; (800b5e8 <malloc+0xc>)
 800b5de:	4601      	mov	r1, r0
 800b5e0:	6818      	ldr	r0, [r3, #0]
 800b5e2:	f000 bc17 	b.w	800be14 <_malloc_r>
 800b5e6:	bf00      	nop
 800b5e8:	20000060 	.word	0x20000060

0800b5ec <memcpy>:
 800b5ec:	440a      	add	r2, r1
 800b5ee:	4291      	cmp	r1, r2
 800b5f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5f4:	d100      	bne.n	800b5f8 <memcpy+0xc>
 800b5f6:	4770      	bx	lr
 800b5f8:	b510      	push	{r4, lr}
 800b5fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b602:	4291      	cmp	r1, r2
 800b604:	d1f9      	bne.n	800b5fa <memcpy+0xe>
 800b606:	bd10      	pop	{r4, pc}

0800b608 <_Balloc>:
 800b608:	b570      	push	{r4, r5, r6, lr}
 800b60a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b60c:	4604      	mov	r4, r0
 800b60e:	460d      	mov	r5, r1
 800b610:	b976      	cbnz	r6, 800b630 <_Balloc+0x28>
 800b612:	2010      	movs	r0, #16
 800b614:	f7ff ffe2 	bl	800b5dc <malloc>
 800b618:	4602      	mov	r2, r0
 800b61a:	6260      	str	r0, [r4, #36]	; 0x24
 800b61c:	b920      	cbnz	r0, 800b628 <_Balloc+0x20>
 800b61e:	4b18      	ldr	r3, [pc, #96]	; (800b680 <_Balloc+0x78>)
 800b620:	4818      	ldr	r0, [pc, #96]	; (800b684 <_Balloc+0x7c>)
 800b622:	2166      	movs	r1, #102	; 0x66
 800b624:	f000 fdd6 	bl	800c1d4 <__assert_func>
 800b628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b62c:	6006      	str	r6, [r0, #0]
 800b62e:	60c6      	str	r6, [r0, #12]
 800b630:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b632:	68f3      	ldr	r3, [r6, #12]
 800b634:	b183      	cbz	r3, 800b658 <_Balloc+0x50>
 800b636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b63e:	b9b8      	cbnz	r0, 800b670 <_Balloc+0x68>
 800b640:	2101      	movs	r1, #1
 800b642:	fa01 f605 	lsl.w	r6, r1, r5
 800b646:	1d72      	adds	r2, r6, #5
 800b648:	0092      	lsls	r2, r2, #2
 800b64a:	4620      	mov	r0, r4
 800b64c:	f000 fb60 	bl	800bd10 <_calloc_r>
 800b650:	b160      	cbz	r0, 800b66c <_Balloc+0x64>
 800b652:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b656:	e00e      	b.n	800b676 <_Balloc+0x6e>
 800b658:	2221      	movs	r2, #33	; 0x21
 800b65a:	2104      	movs	r1, #4
 800b65c:	4620      	mov	r0, r4
 800b65e:	f000 fb57 	bl	800bd10 <_calloc_r>
 800b662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b664:	60f0      	str	r0, [r6, #12]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1e4      	bne.n	800b636 <_Balloc+0x2e>
 800b66c:	2000      	movs	r0, #0
 800b66e:	bd70      	pop	{r4, r5, r6, pc}
 800b670:	6802      	ldr	r2, [r0, #0]
 800b672:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b676:	2300      	movs	r3, #0
 800b678:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b67c:	e7f7      	b.n	800b66e <_Balloc+0x66>
 800b67e:	bf00      	nop
 800b680:	0800e345 	.word	0x0800e345
 800b684:	0800e3c8 	.word	0x0800e3c8

0800b688 <_Bfree>:
 800b688:	b570      	push	{r4, r5, r6, lr}
 800b68a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b68c:	4605      	mov	r5, r0
 800b68e:	460c      	mov	r4, r1
 800b690:	b976      	cbnz	r6, 800b6b0 <_Bfree+0x28>
 800b692:	2010      	movs	r0, #16
 800b694:	f7ff ffa2 	bl	800b5dc <malloc>
 800b698:	4602      	mov	r2, r0
 800b69a:	6268      	str	r0, [r5, #36]	; 0x24
 800b69c:	b920      	cbnz	r0, 800b6a8 <_Bfree+0x20>
 800b69e:	4b09      	ldr	r3, [pc, #36]	; (800b6c4 <_Bfree+0x3c>)
 800b6a0:	4809      	ldr	r0, [pc, #36]	; (800b6c8 <_Bfree+0x40>)
 800b6a2:	218a      	movs	r1, #138	; 0x8a
 800b6a4:	f000 fd96 	bl	800c1d4 <__assert_func>
 800b6a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6ac:	6006      	str	r6, [r0, #0]
 800b6ae:	60c6      	str	r6, [r0, #12]
 800b6b0:	b13c      	cbz	r4, 800b6c2 <_Bfree+0x3a>
 800b6b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b6b4:	6862      	ldr	r2, [r4, #4]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6bc:	6021      	str	r1, [r4, #0]
 800b6be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6c2:	bd70      	pop	{r4, r5, r6, pc}
 800b6c4:	0800e345 	.word	0x0800e345
 800b6c8:	0800e3c8 	.word	0x0800e3c8

0800b6cc <__multadd>:
 800b6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d0:	690d      	ldr	r5, [r1, #16]
 800b6d2:	4607      	mov	r7, r0
 800b6d4:	460c      	mov	r4, r1
 800b6d6:	461e      	mov	r6, r3
 800b6d8:	f101 0c14 	add.w	ip, r1, #20
 800b6dc:	2000      	movs	r0, #0
 800b6de:	f8dc 3000 	ldr.w	r3, [ip]
 800b6e2:	b299      	uxth	r1, r3
 800b6e4:	fb02 6101 	mla	r1, r2, r1, r6
 800b6e8:	0c1e      	lsrs	r6, r3, #16
 800b6ea:	0c0b      	lsrs	r3, r1, #16
 800b6ec:	fb02 3306 	mla	r3, r2, r6, r3
 800b6f0:	b289      	uxth	r1, r1
 800b6f2:	3001      	adds	r0, #1
 800b6f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b6f8:	4285      	cmp	r5, r0
 800b6fa:	f84c 1b04 	str.w	r1, [ip], #4
 800b6fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b702:	dcec      	bgt.n	800b6de <__multadd+0x12>
 800b704:	b30e      	cbz	r6, 800b74a <__multadd+0x7e>
 800b706:	68a3      	ldr	r3, [r4, #8]
 800b708:	42ab      	cmp	r3, r5
 800b70a:	dc19      	bgt.n	800b740 <__multadd+0x74>
 800b70c:	6861      	ldr	r1, [r4, #4]
 800b70e:	4638      	mov	r0, r7
 800b710:	3101      	adds	r1, #1
 800b712:	f7ff ff79 	bl	800b608 <_Balloc>
 800b716:	4680      	mov	r8, r0
 800b718:	b928      	cbnz	r0, 800b726 <__multadd+0x5a>
 800b71a:	4602      	mov	r2, r0
 800b71c:	4b0c      	ldr	r3, [pc, #48]	; (800b750 <__multadd+0x84>)
 800b71e:	480d      	ldr	r0, [pc, #52]	; (800b754 <__multadd+0x88>)
 800b720:	21b5      	movs	r1, #181	; 0xb5
 800b722:	f000 fd57 	bl	800c1d4 <__assert_func>
 800b726:	6922      	ldr	r2, [r4, #16]
 800b728:	3202      	adds	r2, #2
 800b72a:	f104 010c 	add.w	r1, r4, #12
 800b72e:	0092      	lsls	r2, r2, #2
 800b730:	300c      	adds	r0, #12
 800b732:	f7ff ff5b 	bl	800b5ec <memcpy>
 800b736:	4621      	mov	r1, r4
 800b738:	4638      	mov	r0, r7
 800b73a:	f7ff ffa5 	bl	800b688 <_Bfree>
 800b73e:	4644      	mov	r4, r8
 800b740:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b744:	3501      	adds	r5, #1
 800b746:	615e      	str	r6, [r3, #20]
 800b748:	6125      	str	r5, [r4, #16]
 800b74a:	4620      	mov	r0, r4
 800b74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b750:	0800e3b7 	.word	0x0800e3b7
 800b754:	0800e3c8 	.word	0x0800e3c8

0800b758 <__hi0bits>:
 800b758:	0c03      	lsrs	r3, r0, #16
 800b75a:	041b      	lsls	r3, r3, #16
 800b75c:	b9d3      	cbnz	r3, 800b794 <__hi0bits+0x3c>
 800b75e:	0400      	lsls	r0, r0, #16
 800b760:	2310      	movs	r3, #16
 800b762:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b766:	bf04      	itt	eq
 800b768:	0200      	lsleq	r0, r0, #8
 800b76a:	3308      	addeq	r3, #8
 800b76c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b770:	bf04      	itt	eq
 800b772:	0100      	lsleq	r0, r0, #4
 800b774:	3304      	addeq	r3, #4
 800b776:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b77a:	bf04      	itt	eq
 800b77c:	0080      	lsleq	r0, r0, #2
 800b77e:	3302      	addeq	r3, #2
 800b780:	2800      	cmp	r0, #0
 800b782:	db05      	blt.n	800b790 <__hi0bits+0x38>
 800b784:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b788:	f103 0301 	add.w	r3, r3, #1
 800b78c:	bf08      	it	eq
 800b78e:	2320      	moveq	r3, #32
 800b790:	4618      	mov	r0, r3
 800b792:	4770      	bx	lr
 800b794:	2300      	movs	r3, #0
 800b796:	e7e4      	b.n	800b762 <__hi0bits+0xa>

0800b798 <__lo0bits>:
 800b798:	6803      	ldr	r3, [r0, #0]
 800b79a:	f013 0207 	ands.w	r2, r3, #7
 800b79e:	4601      	mov	r1, r0
 800b7a0:	d00b      	beq.n	800b7ba <__lo0bits+0x22>
 800b7a2:	07da      	lsls	r2, r3, #31
 800b7a4:	d423      	bmi.n	800b7ee <__lo0bits+0x56>
 800b7a6:	0798      	lsls	r0, r3, #30
 800b7a8:	bf49      	itett	mi
 800b7aa:	085b      	lsrmi	r3, r3, #1
 800b7ac:	089b      	lsrpl	r3, r3, #2
 800b7ae:	2001      	movmi	r0, #1
 800b7b0:	600b      	strmi	r3, [r1, #0]
 800b7b2:	bf5c      	itt	pl
 800b7b4:	600b      	strpl	r3, [r1, #0]
 800b7b6:	2002      	movpl	r0, #2
 800b7b8:	4770      	bx	lr
 800b7ba:	b298      	uxth	r0, r3
 800b7bc:	b9a8      	cbnz	r0, 800b7ea <__lo0bits+0x52>
 800b7be:	0c1b      	lsrs	r3, r3, #16
 800b7c0:	2010      	movs	r0, #16
 800b7c2:	b2da      	uxtb	r2, r3
 800b7c4:	b90a      	cbnz	r2, 800b7ca <__lo0bits+0x32>
 800b7c6:	3008      	adds	r0, #8
 800b7c8:	0a1b      	lsrs	r3, r3, #8
 800b7ca:	071a      	lsls	r2, r3, #28
 800b7cc:	bf04      	itt	eq
 800b7ce:	091b      	lsreq	r3, r3, #4
 800b7d0:	3004      	addeq	r0, #4
 800b7d2:	079a      	lsls	r2, r3, #30
 800b7d4:	bf04      	itt	eq
 800b7d6:	089b      	lsreq	r3, r3, #2
 800b7d8:	3002      	addeq	r0, #2
 800b7da:	07da      	lsls	r2, r3, #31
 800b7dc:	d403      	bmi.n	800b7e6 <__lo0bits+0x4e>
 800b7de:	085b      	lsrs	r3, r3, #1
 800b7e0:	f100 0001 	add.w	r0, r0, #1
 800b7e4:	d005      	beq.n	800b7f2 <__lo0bits+0x5a>
 800b7e6:	600b      	str	r3, [r1, #0]
 800b7e8:	4770      	bx	lr
 800b7ea:	4610      	mov	r0, r2
 800b7ec:	e7e9      	b.n	800b7c2 <__lo0bits+0x2a>
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	4770      	bx	lr
 800b7f2:	2020      	movs	r0, #32
 800b7f4:	4770      	bx	lr
	...

0800b7f8 <__i2b>:
 800b7f8:	b510      	push	{r4, lr}
 800b7fa:	460c      	mov	r4, r1
 800b7fc:	2101      	movs	r1, #1
 800b7fe:	f7ff ff03 	bl	800b608 <_Balloc>
 800b802:	4602      	mov	r2, r0
 800b804:	b928      	cbnz	r0, 800b812 <__i2b+0x1a>
 800b806:	4b05      	ldr	r3, [pc, #20]	; (800b81c <__i2b+0x24>)
 800b808:	4805      	ldr	r0, [pc, #20]	; (800b820 <__i2b+0x28>)
 800b80a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b80e:	f000 fce1 	bl	800c1d4 <__assert_func>
 800b812:	2301      	movs	r3, #1
 800b814:	6144      	str	r4, [r0, #20]
 800b816:	6103      	str	r3, [r0, #16]
 800b818:	bd10      	pop	{r4, pc}
 800b81a:	bf00      	nop
 800b81c:	0800e3b7 	.word	0x0800e3b7
 800b820:	0800e3c8 	.word	0x0800e3c8

0800b824 <__multiply>:
 800b824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b828:	4691      	mov	r9, r2
 800b82a:	690a      	ldr	r2, [r1, #16]
 800b82c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b830:	429a      	cmp	r2, r3
 800b832:	bfb8      	it	lt
 800b834:	460b      	movlt	r3, r1
 800b836:	460c      	mov	r4, r1
 800b838:	bfbc      	itt	lt
 800b83a:	464c      	movlt	r4, r9
 800b83c:	4699      	movlt	r9, r3
 800b83e:	6927      	ldr	r7, [r4, #16]
 800b840:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b844:	68a3      	ldr	r3, [r4, #8]
 800b846:	6861      	ldr	r1, [r4, #4]
 800b848:	eb07 060a 	add.w	r6, r7, sl
 800b84c:	42b3      	cmp	r3, r6
 800b84e:	b085      	sub	sp, #20
 800b850:	bfb8      	it	lt
 800b852:	3101      	addlt	r1, #1
 800b854:	f7ff fed8 	bl	800b608 <_Balloc>
 800b858:	b930      	cbnz	r0, 800b868 <__multiply+0x44>
 800b85a:	4602      	mov	r2, r0
 800b85c:	4b44      	ldr	r3, [pc, #272]	; (800b970 <__multiply+0x14c>)
 800b85e:	4845      	ldr	r0, [pc, #276]	; (800b974 <__multiply+0x150>)
 800b860:	f240 115d 	movw	r1, #349	; 0x15d
 800b864:	f000 fcb6 	bl	800c1d4 <__assert_func>
 800b868:	f100 0514 	add.w	r5, r0, #20
 800b86c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b870:	462b      	mov	r3, r5
 800b872:	2200      	movs	r2, #0
 800b874:	4543      	cmp	r3, r8
 800b876:	d321      	bcc.n	800b8bc <__multiply+0x98>
 800b878:	f104 0314 	add.w	r3, r4, #20
 800b87c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b880:	f109 0314 	add.w	r3, r9, #20
 800b884:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b888:	9202      	str	r2, [sp, #8]
 800b88a:	1b3a      	subs	r2, r7, r4
 800b88c:	3a15      	subs	r2, #21
 800b88e:	f022 0203 	bic.w	r2, r2, #3
 800b892:	3204      	adds	r2, #4
 800b894:	f104 0115 	add.w	r1, r4, #21
 800b898:	428f      	cmp	r7, r1
 800b89a:	bf38      	it	cc
 800b89c:	2204      	movcc	r2, #4
 800b89e:	9201      	str	r2, [sp, #4]
 800b8a0:	9a02      	ldr	r2, [sp, #8]
 800b8a2:	9303      	str	r3, [sp, #12]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d80c      	bhi.n	800b8c2 <__multiply+0x9e>
 800b8a8:	2e00      	cmp	r6, #0
 800b8aa:	dd03      	ble.n	800b8b4 <__multiply+0x90>
 800b8ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d05a      	beq.n	800b96a <__multiply+0x146>
 800b8b4:	6106      	str	r6, [r0, #16]
 800b8b6:	b005      	add	sp, #20
 800b8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8bc:	f843 2b04 	str.w	r2, [r3], #4
 800b8c0:	e7d8      	b.n	800b874 <__multiply+0x50>
 800b8c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8c6:	f1ba 0f00 	cmp.w	sl, #0
 800b8ca:	d024      	beq.n	800b916 <__multiply+0xf2>
 800b8cc:	f104 0e14 	add.w	lr, r4, #20
 800b8d0:	46a9      	mov	r9, r5
 800b8d2:	f04f 0c00 	mov.w	ip, #0
 800b8d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b8da:	f8d9 1000 	ldr.w	r1, [r9]
 800b8de:	fa1f fb82 	uxth.w	fp, r2
 800b8e2:	b289      	uxth	r1, r1
 800b8e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b8e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b8ec:	f8d9 2000 	ldr.w	r2, [r9]
 800b8f0:	4461      	add	r1, ip
 800b8f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b8fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b8fe:	b289      	uxth	r1, r1
 800b900:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b904:	4577      	cmp	r7, lr
 800b906:	f849 1b04 	str.w	r1, [r9], #4
 800b90a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b90e:	d8e2      	bhi.n	800b8d6 <__multiply+0xb2>
 800b910:	9a01      	ldr	r2, [sp, #4]
 800b912:	f845 c002 	str.w	ip, [r5, r2]
 800b916:	9a03      	ldr	r2, [sp, #12]
 800b918:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b91c:	3304      	adds	r3, #4
 800b91e:	f1b9 0f00 	cmp.w	r9, #0
 800b922:	d020      	beq.n	800b966 <__multiply+0x142>
 800b924:	6829      	ldr	r1, [r5, #0]
 800b926:	f104 0c14 	add.w	ip, r4, #20
 800b92a:	46ae      	mov	lr, r5
 800b92c:	f04f 0a00 	mov.w	sl, #0
 800b930:	f8bc b000 	ldrh.w	fp, [ip]
 800b934:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b938:	fb09 220b 	mla	r2, r9, fp, r2
 800b93c:	4492      	add	sl, r2
 800b93e:	b289      	uxth	r1, r1
 800b940:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b944:	f84e 1b04 	str.w	r1, [lr], #4
 800b948:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b94c:	f8be 1000 	ldrh.w	r1, [lr]
 800b950:	0c12      	lsrs	r2, r2, #16
 800b952:	fb09 1102 	mla	r1, r9, r2, r1
 800b956:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b95a:	4567      	cmp	r7, ip
 800b95c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b960:	d8e6      	bhi.n	800b930 <__multiply+0x10c>
 800b962:	9a01      	ldr	r2, [sp, #4]
 800b964:	50a9      	str	r1, [r5, r2]
 800b966:	3504      	adds	r5, #4
 800b968:	e79a      	b.n	800b8a0 <__multiply+0x7c>
 800b96a:	3e01      	subs	r6, #1
 800b96c:	e79c      	b.n	800b8a8 <__multiply+0x84>
 800b96e:	bf00      	nop
 800b970:	0800e3b7 	.word	0x0800e3b7
 800b974:	0800e3c8 	.word	0x0800e3c8

0800b978 <__pow5mult>:
 800b978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b97c:	4615      	mov	r5, r2
 800b97e:	f012 0203 	ands.w	r2, r2, #3
 800b982:	4606      	mov	r6, r0
 800b984:	460f      	mov	r7, r1
 800b986:	d007      	beq.n	800b998 <__pow5mult+0x20>
 800b988:	4c25      	ldr	r4, [pc, #148]	; (800ba20 <__pow5mult+0xa8>)
 800b98a:	3a01      	subs	r2, #1
 800b98c:	2300      	movs	r3, #0
 800b98e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b992:	f7ff fe9b 	bl	800b6cc <__multadd>
 800b996:	4607      	mov	r7, r0
 800b998:	10ad      	asrs	r5, r5, #2
 800b99a:	d03d      	beq.n	800ba18 <__pow5mult+0xa0>
 800b99c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b99e:	b97c      	cbnz	r4, 800b9c0 <__pow5mult+0x48>
 800b9a0:	2010      	movs	r0, #16
 800b9a2:	f7ff fe1b 	bl	800b5dc <malloc>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	6270      	str	r0, [r6, #36]	; 0x24
 800b9aa:	b928      	cbnz	r0, 800b9b8 <__pow5mult+0x40>
 800b9ac:	4b1d      	ldr	r3, [pc, #116]	; (800ba24 <__pow5mult+0xac>)
 800b9ae:	481e      	ldr	r0, [pc, #120]	; (800ba28 <__pow5mult+0xb0>)
 800b9b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b9b4:	f000 fc0e 	bl	800c1d4 <__assert_func>
 800b9b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9bc:	6004      	str	r4, [r0, #0]
 800b9be:	60c4      	str	r4, [r0, #12]
 800b9c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b9c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9c8:	b94c      	cbnz	r4, 800b9de <__pow5mult+0x66>
 800b9ca:	f240 2171 	movw	r1, #625	; 0x271
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	f7ff ff12 	bl	800b7f8 <__i2b>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9da:	4604      	mov	r4, r0
 800b9dc:	6003      	str	r3, [r0, #0]
 800b9de:	f04f 0900 	mov.w	r9, #0
 800b9e2:	07eb      	lsls	r3, r5, #31
 800b9e4:	d50a      	bpl.n	800b9fc <__pow5mult+0x84>
 800b9e6:	4639      	mov	r1, r7
 800b9e8:	4622      	mov	r2, r4
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	f7ff ff1a 	bl	800b824 <__multiply>
 800b9f0:	4639      	mov	r1, r7
 800b9f2:	4680      	mov	r8, r0
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	f7ff fe47 	bl	800b688 <_Bfree>
 800b9fa:	4647      	mov	r7, r8
 800b9fc:	106d      	asrs	r5, r5, #1
 800b9fe:	d00b      	beq.n	800ba18 <__pow5mult+0xa0>
 800ba00:	6820      	ldr	r0, [r4, #0]
 800ba02:	b938      	cbnz	r0, 800ba14 <__pow5mult+0x9c>
 800ba04:	4622      	mov	r2, r4
 800ba06:	4621      	mov	r1, r4
 800ba08:	4630      	mov	r0, r6
 800ba0a:	f7ff ff0b 	bl	800b824 <__multiply>
 800ba0e:	6020      	str	r0, [r4, #0]
 800ba10:	f8c0 9000 	str.w	r9, [r0]
 800ba14:	4604      	mov	r4, r0
 800ba16:	e7e4      	b.n	800b9e2 <__pow5mult+0x6a>
 800ba18:	4638      	mov	r0, r7
 800ba1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba1e:	bf00      	nop
 800ba20:	0800e518 	.word	0x0800e518
 800ba24:	0800e345 	.word	0x0800e345
 800ba28:	0800e3c8 	.word	0x0800e3c8

0800ba2c <__lshift>:
 800ba2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba30:	460c      	mov	r4, r1
 800ba32:	6849      	ldr	r1, [r1, #4]
 800ba34:	6923      	ldr	r3, [r4, #16]
 800ba36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba3a:	68a3      	ldr	r3, [r4, #8]
 800ba3c:	4607      	mov	r7, r0
 800ba3e:	4691      	mov	r9, r2
 800ba40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba44:	f108 0601 	add.w	r6, r8, #1
 800ba48:	42b3      	cmp	r3, r6
 800ba4a:	db0b      	blt.n	800ba64 <__lshift+0x38>
 800ba4c:	4638      	mov	r0, r7
 800ba4e:	f7ff fddb 	bl	800b608 <_Balloc>
 800ba52:	4605      	mov	r5, r0
 800ba54:	b948      	cbnz	r0, 800ba6a <__lshift+0x3e>
 800ba56:	4602      	mov	r2, r0
 800ba58:	4b2a      	ldr	r3, [pc, #168]	; (800bb04 <__lshift+0xd8>)
 800ba5a:	482b      	ldr	r0, [pc, #172]	; (800bb08 <__lshift+0xdc>)
 800ba5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba60:	f000 fbb8 	bl	800c1d4 <__assert_func>
 800ba64:	3101      	adds	r1, #1
 800ba66:	005b      	lsls	r3, r3, #1
 800ba68:	e7ee      	b.n	800ba48 <__lshift+0x1c>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	f100 0114 	add.w	r1, r0, #20
 800ba70:	f100 0210 	add.w	r2, r0, #16
 800ba74:	4618      	mov	r0, r3
 800ba76:	4553      	cmp	r3, sl
 800ba78:	db37      	blt.n	800baea <__lshift+0xbe>
 800ba7a:	6920      	ldr	r0, [r4, #16]
 800ba7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba80:	f104 0314 	add.w	r3, r4, #20
 800ba84:	f019 091f 	ands.w	r9, r9, #31
 800ba88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ba90:	d02f      	beq.n	800baf2 <__lshift+0xc6>
 800ba92:	f1c9 0e20 	rsb	lr, r9, #32
 800ba96:	468a      	mov	sl, r1
 800ba98:	f04f 0c00 	mov.w	ip, #0
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	fa02 f209 	lsl.w	r2, r2, r9
 800baa2:	ea42 020c 	orr.w	r2, r2, ip
 800baa6:	f84a 2b04 	str.w	r2, [sl], #4
 800baaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800baae:	4298      	cmp	r0, r3
 800bab0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bab4:	d8f2      	bhi.n	800ba9c <__lshift+0x70>
 800bab6:	1b03      	subs	r3, r0, r4
 800bab8:	3b15      	subs	r3, #21
 800baba:	f023 0303 	bic.w	r3, r3, #3
 800babe:	3304      	adds	r3, #4
 800bac0:	f104 0215 	add.w	r2, r4, #21
 800bac4:	4290      	cmp	r0, r2
 800bac6:	bf38      	it	cc
 800bac8:	2304      	movcc	r3, #4
 800baca:	f841 c003 	str.w	ip, [r1, r3]
 800bace:	f1bc 0f00 	cmp.w	ip, #0
 800bad2:	d001      	beq.n	800bad8 <__lshift+0xac>
 800bad4:	f108 0602 	add.w	r6, r8, #2
 800bad8:	3e01      	subs	r6, #1
 800bada:	4638      	mov	r0, r7
 800badc:	612e      	str	r6, [r5, #16]
 800bade:	4621      	mov	r1, r4
 800bae0:	f7ff fdd2 	bl	800b688 <_Bfree>
 800bae4:	4628      	mov	r0, r5
 800bae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baea:	f842 0f04 	str.w	r0, [r2, #4]!
 800baee:	3301      	adds	r3, #1
 800baf0:	e7c1      	b.n	800ba76 <__lshift+0x4a>
 800baf2:	3904      	subs	r1, #4
 800baf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800baf8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bafc:	4298      	cmp	r0, r3
 800bafe:	d8f9      	bhi.n	800baf4 <__lshift+0xc8>
 800bb00:	e7ea      	b.n	800bad8 <__lshift+0xac>
 800bb02:	bf00      	nop
 800bb04:	0800e3b7 	.word	0x0800e3b7
 800bb08:	0800e3c8 	.word	0x0800e3c8

0800bb0c <__mcmp>:
 800bb0c:	b530      	push	{r4, r5, lr}
 800bb0e:	6902      	ldr	r2, [r0, #16]
 800bb10:	690c      	ldr	r4, [r1, #16]
 800bb12:	1b12      	subs	r2, r2, r4
 800bb14:	d10e      	bne.n	800bb34 <__mcmp+0x28>
 800bb16:	f100 0314 	add.w	r3, r0, #20
 800bb1a:	3114      	adds	r1, #20
 800bb1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb2c:	42a5      	cmp	r5, r4
 800bb2e:	d003      	beq.n	800bb38 <__mcmp+0x2c>
 800bb30:	d305      	bcc.n	800bb3e <__mcmp+0x32>
 800bb32:	2201      	movs	r2, #1
 800bb34:	4610      	mov	r0, r2
 800bb36:	bd30      	pop	{r4, r5, pc}
 800bb38:	4283      	cmp	r3, r0
 800bb3a:	d3f3      	bcc.n	800bb24 <__mcmp+0x18>
 800bb3c:	e7fa      	b.n	800bb34 <__mcmp+0x28>
 800bb3e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb42:	e7f7      	b.n	800bb34 <__mcmp+0x28>

0800bb44 <__mdiff>:
 800bb44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	460c      	mov	r4, r1
 800bb4a:	4606      	mov	r6, r0
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	4620      	mov	r0, r4
 800bb50:	4690      	mov	r8, r2
 800bb52:	f7ff ffdb 	bl	800bb0c <__mcmp>
 800bb56:	1e05      	subs	r5, r0, #0
 800bb58:	d110      	bne.n	800bb7c <__mdiff+0x38>
 800bb5a:	4629      	mov	r1, r5
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	f7ff fd53 	bl	800b608 <_Balloc>
 800bb62:	b930      	cbnz	r0, 800bb72 <__mdiff+0x2e>
 800bb64:	4b3a      	ldr	r3, [pc, #232]	; (800bc50 <__mdiff+0x10c>)
 800bb66:	4602      	mov	r2, r0
 800bb68:	f240 2132 	movw	r1, #562	; 0x232
 800bb6c:	4839      	ldr	r0, [pc, #228]	; (800bc54 <__mdiff+0x110>)
 800bb6e:	f000 fb31 	bl	800c1d4 <__assert_func>
 800bb72:	2301      	movs	r3, #1
 800bb74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7c:	bfa4      	itt	ge
 800bb7e:	4643      	movge	r3, r8
 800bb80:	46a0      	movge	r8, r4
 800bb82:	4630      	mov	r0, r6
 800bb84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb88:	bfa6      	itte	ge
 800bb8a:	461c      	movge	r4, r3
 800bb8c:	2500      	movge	r5, #0
 800bb8e:	2501      	movlt	r5, #1
 800bb90:	f7ff fd3a 	bl	800b608 <_Balloc>
 800bb94:	b920      	cbnz	r0, 800bba0 <__mdiff+0x5c>
 800bb96:	4b2e      	ldr	r3, [pc, #184]	; (800bc50 <__mdiff+0x10c>)
 800bb98:	4602      	mov	r2, r0
 800bb9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bb9e:	e7e5      	b.n	800bb6c <__mdiff+0x28>
 800bba0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bba4:	6926      	ldr	r6, [r4, #16]
 800bba6:	60c5      	str	r5, [r0, #12]
 800bba8:	f104 0914 	add.w	r9, r4, #20
 800bbac:	f108 0514 	add.w	r5, r8, #20
 800bbb0:	f100 0e14 	add.w	lr, r0, #20
 800bbb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bbb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bbbc:	f108 0210 	add.w	r2, r8, #16
 800bbc0:	46f2      	mov	sl, lr
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bbc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bbcc:	fa1f f883 	uxth.w	r8, r3
 800bbd0:	fa11 f18b 	uxtah	r1, r1, fp
 800bbd4:	0c1b      	lsrs	r3, r3, #16
 800bbd6:	eba1 0808 	sub.w	r8, r1, r8
 800bbda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bbde:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bbe2:	fa1f f888 	uxth.w	r8, r8
 800bbe6:	1419      	asrs	r1, r3, #16
 800bbe8:	454e      	cmp	r6, r9
 800bbea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bbee:	f84a 3b04 	str.w	r3, [sl], #4
 800bbf2:	d8e7      	bhi.n	800bbc4 <__mdiff+0x80>
 800bbf4:	1b33      	subs	r3, r6, r4
 800bbf6:	3b15      	subs	r3, #21
 800bbf8:	f023 0303 	bic.w	r3, r3, #3
 800bbfc:	3304      	adds	r3, #4
 800bbfe:	3415      	adds	r4, #21
 800bc00:	42a6      	cmp	r6, r4
 800bc02:	bf38      	it	cc
 800bc04:	2304      	movcc	r3, #4
 800bc06:	441d      	add	r5, r3
 800bc08:	4473      	add	r3, lr
 800bc0a:	469e      	mov	lr, r3
 800bc0c:	462e      	mov	r6, r5
 800bc0e:	4566      	cmp	r6, ip
 800bc10:	d30e      	bcc.n	800bc30 <__mdiff+0xec>
 800bc12:	f10c 0203 	add.w	r2, ip, #3
 800bc16:	1b52      	subs	r2, r2, r5
 800bc18:	f022 0203 	bic.w	r2, r2, #3
 800bc1c:	3d03      	subs	r5, #3
 800bc1e:	45ac      	cmp	ip, r5
 800bc20:	bf38      	it	cc
 800bc22:	2200      	movcc	r2, #0
 800bc24:	441a      	add	r2, r3
 800bc26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bc2a:	b17b      	cbz	r3, 800bc4c <__mdiff+0x108>
 800bc2c:	6107      	str	r7, [r0, #16]
 800bc2e:	e7a3      	b.n	800bb78 <__mdiff+0x34>
 800bc30:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc34:	fa11 f288 	uxtah	r2, r1, r8
 800bc38:	1414      	asrs	r4, r2, #16
 800bc3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc3e:	b292      	uxth	r2, r2
 800bc40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc44:	f84e 2b04 	str.w	r2, [lr], #4
 800bc48:	1421      	asrs	r1, r4, #16
 800bc4a:	e7e0      	b.n	800bc0e <__mdiff+0xca>
 800bc4c:	3f01      	subs	r7, #1
 800bc4e:	e7ea      	b.n	800bc26 <__mdiff+0xe2>
 800bc50:	0800e3b7 	.word	0x0800e3b7
 800bc54:	0800e3c8 	.word	0x0800e3c8

0800bc58 <__d2b>:
 800bc58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc5c:	4689      	mov	r9, r1
 800bc5e:	2101      	movs	r1, #1
 800bc60:	ec57 6b10 	vmov	r6, r7, d0
 800bc64:	4690      	mov	r8, r2
 800bc66:	f7ff fccf 	bl	800b608 <_Balloc>
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	b930      	cbnz	r0, 800bc7c <__d2b+0x24>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	4b25      	ldr	r3, [pc, #148]	; (800bd08 <__d2b+0xb0>)
 800bc72:	4826      	ldr	r0, [pc, #152]	; (800bd0c <__d2b+0xb4>)
 800bc74:	f240 310a 	movw	r1, #778	; 0x30a
 800bc78:	f000 faac 	bl	800c1d4 <__assert_func>
 800bc7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bc80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc84:	bb35      	cbnz	r5, 800bcd4 <__d2b+0x7c>
 800bc86:	2e00      	cmp	r6, #0
 800bc88:	9301      	str	r3, [sp, #4]
 800bc8a:	d028      	beq.n	800bcde <__d2b+0x86>
 800bc8c:	4668      	mov	r0, sp
 800bc8e:	9600      	str	r6, [sp, #0]
 800bc90:	f7ff fd82 	bl	800b798 <__lo0bits>
 800bc94:	9900      	ldr	r1, [sp, #0]
 800bc96:	b300      	cbz	r0, 800bcda <__d2b+0x82>
 800bc98:	9a01      	ldr	r2, [sp, #4]
 800bc9a:	f1c0 0320 	rsb	r3, r0, #32
 800bc9e:	fa02 f303 	lsl.w	r3, r2, r3
 800bca2:	430b      	orrs	r3, r1
 800bca4:	40c2      	lsrs	r2, r0
 800bca6:	6163      	str	r3, [r4, #20]
 800bca8:	9201      	str	r2, [sp, #4]
 800bcaa:	9b01      	ldr	r3, [sp, #4]
 800bcac:	61a3      	str	r3, [r4, #24]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	bf14      	ite	ne
 800bcb2:	2202      	movne	r2, #2
 800bcb4:	2201      	moveq	r2, #1
 800bcb6:	6122      	str	r2, [r4, #16]
 800bcb8:	b1d5      	cbz	r5, 800bcf0 <__d2b+0x98>
 800bcba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bcbe:	4405      	add	r5, r0
 800bcc0:	f8c9 5000 	str.w	r5, [r9]
 800bcc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bcc8:	f8c8 0000 	str.w	r0, [r8]
 800bccc:	4620      	mov	r0, r4
 800bcce:	b003      	add	sp, #12
 800bcd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcd8:	e7d5      	b.n	800bc86 <__d2b+0x2e>
 800bcda:	6161      	str	r1, [r4, #20]
 800bcdc:	e7e5      	b.n	800bcaa <__d2b+0x52>
 800bcde:	a801      	add	r0, sp, #4
 800bce0:	f7ff fd5a 	bl	800b798 <__lo0bits>
 800bce4:	9b01      	ldr	r3, [sp, #4]
 800bce6:	6163      	str	r3, [r4, #20]
 800bce8:	2201      	movs	r2, #1
 800bcea:	6122      	str	r2, [r4, #16]
 800bcec:	3020      	adds	r0, #32
 800bcee:	e7e3      	b.n	800bcb8 <__d2b+0x60>
 800bcf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bcf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bcf8:	f8c9 0000 	str.w	r0, [r9]
 800bcfc:	6918      	ldr	r0, [r3, #16]
 800bcfe:	f7ff fd2b 	bl	800b758 <__hi0bits>
 800bd02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd06:	e7df      	b.n	800bcc8 <__d2b+0x70>
 800bd08:	0800e3b7 	.word	0x0800e3b7
 800bd0c:	0800e3c8 	.word	0x0800e3c8

0800bd10 <_calloc_r>:
 800bd10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd12:	fba1 2402 	umull	r2, r4, r1, r2
 800bd16:	b94c      	cbnz	r4, 800bd2c <_calloc_r+0x1c>
 800bd18:	4611      	mov	r1, r2
 800bd1a:	9201      	str	r2, [sp, #4]
 800bd1c:	f000 f87a 	bl	800be14 <_malloc_r>
 800bd20:	9a01      	ldr	r2, [sp, #4]
 800bd22:	4605      	mov	r5, r0
 800bd24:	b930      	cbnz	r0, 800bd34 <_calloc_r+0x24>
 800bd26:	4628      	mov	r0, r5
 800bd28:	b003      	add	sp, #12
 800bd2a:	bd30      	pop	{r4, r5, pc}
 800bd2c:	220c      	movs	r2, #12
 800bd2e:	6002      	str	r2, [r0, #0]
 800bd30:	2500      	movs	r5, #0
 800bd32:	e7f8      	b.n	800bd26 <_calloc_r+0x16>
 800bd34:	4621      	mov	r1, r4
 800bd36:	f7fe f941 	bl	8009fbc <memset>
 800bd3a:	e7f4      	b.n	800bd26 <_calloc_r+0x16>

0800bd3c <_free_r>:
 800bd3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd3e:	2900      	cmp	r1, #0
 800bd40:	d044      	beq.n	800bdcc <_free_r+0x90>
 800bd42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd46:	9001      	str	r0, [sp, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f1a1 0404 	sub.w	r4, r1, #4
 800bd4e:	bfb8      	it	lt
 800bd50:	18e4      	addlt	r4, r4, r3
 800bd52:	f000 fa9b 	bl	800c28c <__malloc_lock>
 800bd56:	4a1e      	ldr	r2, [pc, #120]	; (800bdd0 <_free_r+0x94>)
 800bd58:	9801      	ldr	r0, [sp, #4]
 800bd5a:	6813      	ldr	r3, [r2, #0]
 800bd5c:	b933      	cbnz	r3, 800bd6c <_free_r+0x30>
 800bd5e:	6063      	str	r3, [r4, #4]
 800bd60:	6014      	str	r4, [r2, #0]
 800bd62:	b003      	add	sp, #12
 800bd64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd68:	f000 ba96 	b.w	800c298 <__malloc_unlock>
 800bd6c:	42a3      	cmp	r3, r4
 800bd6e:	d908      	bls.n	800bd82 <_free_r+0x46>
 800bd70:	6825      	ldr	r5, [r4, #0]
 800bd72:	1961      	adds	r1, r4, r5
 800bd74:	428b      	cmp	r3, r1
 800bd76:	bf01      	itttt	eq
 800bd78:	6819      	ldreq	r1, [r3, #0]
 800bd7a:	685b      	ldreq	r3, [r3, #4]
 800bd7c:	1949      	addeq	r1, r1, r5
 800bd7e:	6021      	streq	r1, [r4, #0]
 800bd80:	e7ed      	b.n	800bd5e <_free_r+0x22>
 800bd82:	461a      	mov	r2, r3
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	b10b      	cbz	r3, 800bd8c <_free_r+0x50>
 800bd88:	42a3      	cmp	r3, r4
 800bd8a:	d9fa      	bls.n	800bd82 <_free_r+0x46>
 800bd8c:	6811      	ldr	r1, [r2, #0]
 800bd8e:	1855      	adds	r5, r2, r1
 800bd90:	42a5      	cmp	r5, r4
 800bd92:	d10b      	bne.n	800bdac <_free_r+0x70>
 800bd94:	6824      	ldr	r4, [r4, #0]
 800bd96:	4421      	add	r1, r4
 800bd98:	1854      	adds	r4, r2, r1
 800bd9a:	42a3      	cmp	r3, r4
 800bd9c:	6011      	str	r1, [r2, #0]
 800bd9e:	d1e0      	bne.n	800bd62 <_free_r+0x26>
 800bda0:	681c      	ldr	r4, [r3, #0]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	6053      	str	r3, [r2, #4]
 800bda6:	4421      	add	r1, r4
 800bda8:	6011      	str	r1, [r2, #0]
 800bdaa:	e7da      	b.n	800bd62 <_free_r+0x26>
 800bdac:	d902      	bls.n	800bdb4 <_free_r+0x78>
 800bdae:	230c      	movs	r3, #12
 800bdb0:	6003      	str	r3, [r0, #0]
 800bdb2:	e7d6      	b.n	800bd62 <_free_r+0x26>
 800bdb4:	6825      	ldr	r5, [r4, #0]
 800bdb6:	1961      	adds	r1, r4, r5
 800bdb8:	428b      	cmp	r3, r1
 800bdba:	bf04      	itt	eq
 800bdbc:	6819      	ldreq	r1, [r3, #0]
 800bdbe:	685b      	ldreq	r3, [r3, #4]
 800bdc0:	6063      	str	r3, [r4, #4]
 800bdc2:	bf04      	itt	eq
 800bdc4:	1949      	addeq	r1, r1, r5
 800bdc6:	6021      	streq	r1, [r4, #0]
 800bdc8:	6054      	str	r4, [r2, #4]
 800bdca:	e7ca      	b.n	800bd62 <_free_r+0x26>
 800bdcc:	b003      	add	sp, #12
 800bdce:	bd30      	pop	{r4, r5, pc}
 800bdd0:	20000994 	.word	0x20000994

0800bdd4 <sbrk_aligned>:
 800bdd4:	b570      	push	{r4, r5, r6, lr}
 800bdd6:	4e0e      	ldr	r6, [pc, #56]	; (800be10 <sbrk_aligned+0x3c>)
 800bdd8:	460c      	mov	r4, r1
 800bdda:	6831      	ldr	r1, [r6, #0]
 800bddc:	4605      	mov	r5, r0
 800bdde:	b911      	cbnz	r1, 800bde6 <sbrk_aligned+0x12>
 800bde0:	f000 f9e8 	bl	800c1b4 <_sbrk_r>
 800bde4:	6030      	str	r0, [r6, #0]
 800bde6:	4621      	mov	r1, r4
 800bde8:	4628      	mov	r0, r5
 800bdea:	f000 f9e3 	bl	800c1b4 <_sbrk_r>
 800bdee:	1c43      	adds	r3, r0, #1
 800bdf0:	d00a      	beq.n	800be08 <sbrk_aligned+0x34>
 800bdf2:	1cc4      	adds	r4, r0, #3
 800bdf4:	f024 0403 	bic.w	r4, r4, #3
 800bdf8:	42a0      	cmp	r0, r4
 800bdfa:	d007      	beq.n	800be0c <sbrk_aligned+0x38>
 800bdfc:	1a21      	subs	r1, r4, r0
 800bdfe:	4628      	mov	r0, r5
 800be00:	f000 f9d8 	bl	800c1b4 <_sbrk_r>
 800be04:	3001      	adds	r0, #1
 800be06:	d101      	bne.n	800be0c <sbrk_aligned+0x38>
 800be08:	f04f 34ff 	mov.w	r4, #4294967295
 800be0c:	4620      	mov	r0, r4
 800be0e:	bd70      	pop	{r4, r5, r6, pc}
 800be10:	20000998 	.word	0x20000998

0800be14 <_malloc_r>:
 800be14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be18:	1ccd      	adds	r5, r1, #3
 800be1a:	f025 0503 	bic.w	r5, r5, #3
 800be1e:	3508      	adds	r5, #8
 800be20:	2d0c      	cmp	r5, #12
 800be22:	bf38      	it	cc
 800be24:	250c      	movcc	r5, #12
 800be26:	2d00      	cmp	r5, #0
 800be28:	4607      	mov	r7, r0
 800be2a:	db01      	blt.n	800be30 <_malloc_r+0x1c>
 800be2c:	42a9      	cmp	r1, r5
 800be2e:	d905      	bls.n	800be3c <_malloc_r+0x28>
 800be30:	230c      	movs	r3, #12
 800be32:	603b      	str	r3, [r7, #0]
 800be34:	2600      	movs	r6, #0
 800be36:	4630      	mov	r0, r6
 800be38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be3c:	4e2e      	ldr	r6, [pc, #184]	; (800bef8 <_malloc_r+0xe4>)
 800be3e:	f000 fa25 	bl	800c28c <__malloc_lock>
 800be42:	6833      	ldr	r3, [r6, #0]
 800be44:	461c      	mov	r4, r3
 800be46:	bb34      	cbnz	r4, 800be96 <_malloc_r+0x82>
 800be48:	4629      	mov	r1, r5
 800be4a:	4638      	mov	r0, r7
 800be4c:	f7ff ffc2 	bl	800bdd4 <sbrk_aligned>
 800be50:	1c43      	adds	r3, r0, #1
 800be52:	4604      	mov	r4, r0
 800be54:	d14d      	bne.n	800bef2 <_malloc_r+0xde>
 800be56:	6834      	ldr	r4, [r6, #0]
 800be58:	4626      	mov	r6, r4
 800be5a:	2e00      	cmp	r6, #0
 800be5c:	d140      	bne.n	800bee0 <_malloc_r+0xcc>
 800be5e:	6823      	ldr	r3, [r4, #0]
 800be60:	4631      	mov	r1, r6
 800be62:	4638      	mov	r0, r7
 800be64:	eb04 0803 	add.w	r8, r4, r3
 800be68:	f000 f9a4 	bl	800c1b4 <_sbrk_r>
 800be6c:	4580      	cmp	r8, r0
 800be6e:	d13a      	bne.n	800bee6 <_malloc_r+0xd2>
 800be70:	6821      	ldr	r1, [r4, #0]
 800be72:	3503      	adds	r5, #3
 800be74:	1a6d      	subs	r5, r5, r1
 800be76:	f025 0503 	bic.w	r5, r5, #3
 800be7a:	3508      	adds	r5, #8
 800be7c:	2d0c      	cmp	r5, #12
 800be7e:	bf38      	it	cc
 800be80:	250c      	movcc	r5, #12
 800be82:	4629      	mov	r1, r5
 800be84:	4638      	mov	r0, r7
 800be86:	f7ff ffa5 	bl	800bdd4 <sbrk_aligned>
 800be8a:	3001      	adds	r0, #1
 800be8c:	d02b      	beq.n	800bee6 <_malloc_r+0xd2>
 800be8e:	6823      	ldr	r3, [r4, #0]
 800be90:	442b      	add	r3, r5
 800be92:	6023      	str	r3, [r4, #0]
 800be94:	e00e      	b.n	800beb4 <_malloc_r+0xa0>
 800be96:	6822      	ldr	r2, [r4, #0]
 800be98:	1b52      	subs	r2, r2, r5
 800be9a:	d41e      	bmi.n	800beda <_malloc_r+0xc6>
 800be9c:	2a0b      	cmp	r2, #11
 800be9e:	d916      	bls.n	800bece <_malloc_r+0xba>
 800bea0:	1961      	adds	r1, r4, r5
 800bea2:	42a3      	cmp	r3, r4
 800bea4:	6025      	str	r5, [r4, #0]
 800bea6:	bf18      	it	ne
 800bea8:	6059      	strne	r1, [r3, #4]
 800beaa:	6863      	ldr	r3, [r4, #4]
 800beac:	bf08      	it	eq
 800beae:	6031      	streq	r1, [r6, #0]
 800beb0:	5162      	str	r2, [r4, r5]
 800beb2:	604b      	str	r3, [r1, #4]
 800beb4:	4638      	mov	r0, r7
 800beb6:	f104 060b 	add.w	r6, r4, #11
 800beba:	f000 f9ed 	bl	800c298 <__malloc_unlock>
 800bebe:	f026 0607 	bic.w	r6, r6, #7
 800bec2:	1d23      	adds	r3, r4, #4
 800bec4:	1af2      	subs	r2, r6, r3
 800bec6:	d0b6      	beq.n	800be36 <_malloc_r+0x22>
 800bec8:	1b9b      	subs	r3, r3, r6
 800beca:	50a3      	str	r3, [r4, r2]
 800becc:	e7b3      	b.n	800be36 <_malloc_r+0x22>
 800bece:	6862      	ldr	r2, [r4, #4]
 800bed0:	42a3      	cmp	r3, r4
 800bed2:	bf0c      	ite	eq
 800bed4:	6032      	streq	r2, [r6, #0]
 800bed6:	605a      	strne	r2, [r3, #4]
 800bed8:	e7ec      	b.n	800beb4 <_malloc_r+0xa0>
 800beda:	4623      	mov	r3, r4
 800bedc:	6864      	ldr	r4, [r4, #4]
 800bede:	e7b2      	b.n	800be46 <_malloc_r+0x32>
 800bee0:	4634      	mov	r4, r6
 800bee2:	6876      	ldr	r6, [r6, #4]
 800bee4:	e7b9      	b.n	800be5a <_malloc_r+0x46>
 800bee6:	230c      	movs	r3, #12
 800bee8:	603b      	str	r3, [r7, #0]
 800beea:	4638      	mov	r0, r7
 800beec:	f000 f9d4 	bl	800c298 <__malloc_unlock>
 800bef0:	e7a1      	b.n	800be36 <_malloc_r+0x22>
 800bef2:	6025      	str	r5, [r4, #0]
 800bef4:	e7de      	b.n	800beb4 <_malloc_r+0xa0>
 800bef6:	bf00      	nop
 800bef8:	20000994 	.word	0x20000994

0800befc <__ssputs_r>:
 800befc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf00:	688e      	ldr	r6, [r1, #8]
 800bf02:	429e      	cmp	r6, r3
 800bf04:	4682      	mov	sl, r0
 800bf06:	460c      	mov	r4, r1
 800bf08:	4690      	mov	r8, r2
 800bf0a:	461f      	mov	r7, r3
 800bf0c:	d838      	bhi.n	800bf80 <__ssputs_r+0x84>
 800bf0e:	898a      	ldrh	r2, [r1, #12]
 800bf10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf14:	d032      	beq.n	800bf7c <__ssputs_r+0x80>
 800bf16:	6825      	ldr	r5, [r4, #0]
 800bf18:	6909      	ldr	r1, [r1, #16]
 800bf1a:	eba5 0901 	sub.w	r9, r5, r1
 800bf1e:	6965      	ldr	r5, [r4, #20]
 800bf20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf28:	3301      	adds	r3, #1
 800bf2a:	444b      	add	r3, r9
 800bf2c:	106d      	asrs	r5, r5, #1
 800bf2e:	429d      	cmp	r5, r3
 800bf30:	bf38      	it	cc
 800bf32:	461d      	movcc	r5, r3
 800bf34:	0553      	lsls	r3, r2, #21
 800bf36:	d531      	bpl.n	800bf9c <__ssputs_r+0xa0>
 800bf38:	4629      	mov	r1, r5
 800bf3a:	f7ff ff6b 	bl	800be14 <_malloc_r>
 800bf3e:	4606      	mov	r6, r0
 800bf40:	b950      	cbnz	r0, 800bf58 <__ssputs_r+0x5c>
 800bf42:	230c      	movs	r3, #12
 800bf44:	f8ca 3000 	str.w	r3, [sl]
 800bf48:	89a3      	ldrh	r3, [r4, #12]
 800bf4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf4e:	81a3      	strh	r3, [r4, #12]
 800bf50:	f04f 30ff 	mov.w	r0, #4294967295
 800bf54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf58:	6921      	ldr	r1, [r4, #16]
 800bf5a:	464a      	mov	r2, r9
 800bf5c:	f7ff fb46 	bl	800b5ec <memcpy>
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf6a:	81a3      	strh	r3, [r4, #12]
 800bf6c:	6126      	str	r6, [r4, #16]
 800bf6e:	6165      	str	r5, [r4, #20]
 800bf70:	444e      	add	r6, r9
 800bf72:	eba5 0509 	sub.w	r5, r5, r9
 800bf76:	6026      	str	r6, [r4, #0]
 800bf78:	60a5      	str	r5, [r4, #8]
 800bf7a:	463e      	mov	r6, r7
 800bf7c:	42be      	cmp	r6, r7
 800bf7e:	d900      	bls.n	800bf82 <__ssputs_r+0x86>
 800bf80:	463e      	mov	r6, r7
 800bf82:	6820      	ldr	r0, [r4, #0]
 800bf84:	4632      	mov	r2, r6
 800bf86:	4641      	mov	r1, r8
 800bf88:	f000 f966 	bl	800c258 <memmove>
 800bf8c:	68a3      	ldr	r3, [r4, #8]
 800bf8e:	1b9b      	subs	r3, r3, r6
 800bf90:	60a3      	str	r3, [r4, #8]
 800bf92:	6823      	ldr	r3, [r4, #0]
 800bf94:	4433      	add	r3, r6
 800bf96:	6023      	str	r3, [r4, #0]
 800bf98:	2000      	movs	r0, #0
 800bf9a:	e7db      	b.n	800bf54 <__ssputs_r+0x58>
 800bf9c:	462a      	mov	r2, r5
 800bf9e:	f000 f981 	bl	800c2a4 <_realloc_r>
 800bfa2:	4606      	mov	r6, r0
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d1e1      	bne.n	800bf6c <__ssputs_r+0x70>
 800bfa8:	6921      	ldr	r1, [r4, #16]
 800bfaa:	4650      	mov	r0, sl
 800bfac:	f7ff fec6 	bl	800bd3c <_free_r>
 800bfb0:	e7c7      	b.n	800bf42 <__ssputs_r+0x46>
	...

0800bfb4 <_svfiprintf_r>:
 800bfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb8:	4698      	mov	r8, r3
 800bfba:	898b      	ldrh	r3, [r1, #12]
 800bfbc:	061b      	lsls	r3, r3, #24
 800bfbe:	b09d      	sub	sp, #116	; 0x74
 800bfc0:	4607      	mov	r7, r0
 800bfc2:	460d      	mov	r5, r1
 800bfc4:	4614      	mov	r4, r2
 800bfc6:	d50e      	bpl.n	800bfe6 <_svfiprintf_r+0x32>
 800bfc8:	690b      	ldr	r3, [r1, #16]
 800bfca:	b963      	cbnz	r3, 800bfe6 <_svfiprintf_r+0x32>
 800bfcc:	2140      	movs	r1, #64	; 0x40
 800bfce:	f7ff ff21 	bl	800be14 <_malloc_r>
 800bfd2:	6028      	str	r0, [r5, #0]
 800bfd4:	6128      	str	r0, [r5, #16]
 800bfd6:	b920      	cbnz	r0, 800bfe2 <_svfiprintf_r+0x2e>
 800bfd8:	230c      	movs	r3, #12
 800bfda:	603b      	str	r3, [r7, #0]
 800bfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe0:	e0d1      	b.n	800c186 <_svfiprintf_r+0x1d2>
 800bfe2:	2340      	movs	r3, #64	; 0x40
 800bfe4:	616b      	str	r3, [r5, #20]
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	9309      	str	r3, [sp, #36]	; 0x24
 800bfea:	2320      	movs	r3, #32
 800bfec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bff0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bff4:	2330      	movs	r3, #48	; 0x30
 800bff6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c1a0 <_svfiprintf_r+0x1ec>
 800bffa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bffe:	f04f 0901 	mov.w	r9, #1
 800c002:	4623      	mov	r3, r4
 800c004:	469a      	mov	sl, r3
 800c006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c00a:	b10a      	cbz	r2, 800c010 <_svfiprintf_r+0x5c>
 800c00c:	2a25      	cmp	r2, #37	; 0x25
 800c00e:	d1f9      	bne.n	800c004 <_svfiprintf_r+0x50>
 800c010:	ebba 0b04 	subs.w	fp, sl, r4
 800c014:	d00b      	beq.n	800c02e <_svfiprintf_r+0x7a>
 800c016:	465b      	mov	r3, fp
 800c018:	4622      	mov	r2, r4
 800c01a:	4629      	mov	r1, r5
 800c01c:	4638      	mov	r0, r7
 800c01e:	f7ff ff6d 	bl	800befc <__ssputs_r>
 800c022:	3001      	adds	r0, #1
 800c024:	f000 80aa 	beq.w	800c17c <_svfiprintf_r+0x1c8>
 800c028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c02a:	445a      	add	r2, fp
 800c02c:	9209      	str	r2, [sp, #36]	; 0x24
 800c02e:	f89a 3000 	ldrb.w	r3, [sl]
 800c032:	2b00      	cmp	r3, #0
 800c034:	f000 80a2 	beq.w	800c17c <_svfiprintf_r+0x1c8>
 800c038:	2300      	movs	r3, #0
 800c03a:	f04f 32ff 	mov.w	r2, #4294967295
 800c03e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c042:	f10a 0a01 	add.w	sl, sl, #1
 800c046:	9304      	str	r3, [sp, #16]
 800c048:	9307      	str	r3, [sp, #28]
 800c04a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c04e:	931a      	str	r3, [sp, #104]	; 0x68
 800c050:	4654      	mov	r4, sl
 800c052:	2205      	movs	r2, #5
 800c054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c058:	4851      	ldr	r0, [pc, #324]	; (800c1a0 <_svfiprintf_r+0x1ec>)
 800c05a:	f7f4 f8e1 	bl	8000220 <memchr>
 800c05e:	9a04      	ldr	r2, [sp, #16]
 800c060:	b9d8      	cbnz	r0, 800c09a <_svfiprintf_r+0xe6>
 800c062:	06d0      	lsls	r0, r2, #27
 800c064:	bf44      	itt	mi
 800c066:	2320      	movmi	r3, #32
 800c068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c06c:	0711      	lsls	r1, r2, #28
 800c06e:	bf44      	itt	mi
 800c070:	232b      	movmi	r3, #43	; 0x2b
 800c072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c076:	f89a 3000 	ldrb.w	r3, [sl]
 800c07a:	2b2a      	cmp	r3, #42	; 0x2a
 800c07c:	d015      	beq.n	800c0aa <_svfiprintf_r+0xf6>
 800c07e:	9a07      	ldr	r2, [sp, #28]
 800c080:	4654      	mov	r4, sl
 800c082:	2000      	movs	r0, #0
 800c084:	f04f 0c0a 	mov.w	ip, #10
 800c088:	4621      	mov	r1, r4
 800c08a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c08e:	3b30      	subs	r3, #48	; 0x30
 800c090:	2b09      	cmp	r3, #9
 800c092:	d94e      	bls.n	800c132 <_svfiprintf_r+0x17e>
 800c094:	b1b0      	cbz	r0, 800c0c4 <_svfiprintf_r+0x110>
 800c096:	9207      	str	r2, [sp, #28]
 800c098:	e014      	b.n	800c0c4 <_svfiprintf_r+0x110>
 800c09a:	eba0 0308 	sub.w	r3, r0, r8
 800c09e:	fa09 f303 	lsl.w	r3, r9, r3
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	9304      	str	r3, [sp, #16]
 800c0a6:	46a2      	mov	sl, r4
 800c0a8:	e7d2      	b.n	800c050 <_svfiprintf_r+0x9c>
 800c0aa:	9b03      	ldr	r3, [sp, #12]
 800c0ac:	1d19      	adds	r1, r3, #4
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	9103      	str	r1, [sp, #12]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	bfbb      	ittet	lt
 800c0b6:	425b      	neglt	r3, r3
 800c0b8:	f042 0202 	orrlt.w	r2, r2, #2
 800c0bc:	9307      	strge	r3, [sp, #28]
 800c0be:	9307      	strlt	r3, [sp, #28]
 800c0c0:	bfb8      	it	lt
 800c0c2:	9204      	strlt	r2, [sp, #16]
 800c0c4:	7823      	ldrb	r3, [r4, #0]
 800c0c6:	2b2e      	cmp	r3, #46	; 0x2e
 800c0c8:	d10c      	bne.n	800c0e4 <_svfiprintf_r+0x130>
 800c0ca:	7863      	ldrb	r3, [r4, #1]
 800c0cc:	2b2a      	cmp	r3, #42	; 0x2a
 800c0ce:	d135      	bne.n	800c13c <_svfiprintf_r+0x188>
 800c0d0:	9b03      	ldr	r3, [sp, #12]
 800c0d2:	1d1a      	adds	r2, r3, #4
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	9203      	str	r2, [sp, #12]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	bfb8      	it	lt
 800c0dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0e0:	3402      	adds	r4, #2
 800c0e2:	9305      	str	r3, [sp, #20]
 800c0e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c1b0 <_svfiprintf_r+0x1fc>
 800c0e8:	7821      	ldrb	r1, [r4, #0]
 800c0ea:	2203      	movs	r2, #3
 800c0ec:	4650      	mov	r0, sl
 800c0ee:	f7f4 f897 	bl	8000220 <memchr>
 800c0f2:	b140      	cbz	r0, 800c106 <_svfiprintf_r+0x152>
 800c0f4:	2340      	movs	r3, #64	; 0x40
 800c0f6:	eba0 000a 	sub.w	r0, r0, sl
 800c0fa:	fa03 f000 	lsl.w	r0, r3, r0
 800c0fe:	9b04      	ldr	r3, [sp, #16]
 800c100:	4303      	orrs	r3, r0
 800c102:	3401      	adds	r4, #1
 800c104:	9304      	str	r3, [sp, #16]
 800c106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c10a:	4826      	ldr	r0, [pc, #152]	; (800c1a4 <_svfiprintf_r+0x1f0>)
 800c10c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c110:	2206      	movs	r2, #6
 800c112:	f7f4 f885 	bl	8000220 <memchr>
 800c116:	2800      	cmp	r0, #0
 800c118:	d038      	beq.n	800c18c <_svfiprintf_r+0x1d8>
 800c11a:	4b23      	ldr	r3, [pc, #140]	; (800c1a8 <_svfiprintf_r+0x1f4>)
 800c11c:	bb1b      	cbnz	r3, 800c166 <_svfiprintf_r+0x1b2>
 800c11e:	9b03      	ldr	r3, [sp, #12]
 800c120:	3307      	adds	r3, #7
 800c122:	f023 0307 	bic.w	r3, r3, #7
 800c126:	3308      	adds	r3, #8
 800c128:	9303      	str	r3, [sp, #12]
 800c12a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c12c:	4433      	add	r3, r6
 800c12e:	9309      	str	r3, [sp, #36]	; 0x24
 800c130:	e767      	b.n	800c002 <_svfiprintf_r+0x4e>
 800c132:	fb0c 3202 	mla	r2, ip, r2, r3
 800c136:	460c      	mov	r4, r1
 800c138:	2001      	movs	r0, #1
 800c13a:	e7a5      	b.n	800c088 <_svfiprintf_r+0xd4>
 800c13c:	2300      	movs	r3, #0
 800c13e:	3401      	adds	r4, #1
 800c140:	9305      	str	r3, [sp, #20]
 800c142:	4619      	mov	r1, r3
 800c144:	f04f 0c0a 	mov.w	ip, #10
 800c148:	4620      	mov	r0, r4
 800c14a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c14e:	3a30      	subs	r2, #48	; 0x30
 800c150:	2a09      	cmp	r2, #9
 800c152:	d903      	bls.n	800c15c <_svfiprintf_r+0x1a8>
 800c154:	2b00      	cmp	r3, #0
 800c156:	d0c5      	beq.n	800c0e4 <_svfiprintf_r+0x130>
 800c158:	9105      	str	r1, [sp, #20]
 800c15a:	e7c3      	b.n	800c0e4 <_svfiprintf_r+0x130>
 800c15c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c160:	4604      	mov	r4, r0
 800c162:	2301      	movs	r3, #1
 800c164:	e7f0      	b.n	800c148 <_svfiprintf_r+0x194>
 800c166:	ab03      	add	r3, sp, #12
 800c168:	9300      	str	r3, [sp, #0]
 800c16a:	462a      	mov	r2, r5
 800c16c:	4b0f      	ldr	r3, [pc, #60]	; (800c1ac <_svfiprintf_r+0x1f8>)
 800c16e:	a904      	add	r1, sp, #16
 800c170:	4638      	mov	r0, r7
 800c172:	f7fd ffcb 	bl	800a10c <_printf_float>
 800c176:	1c42      	adds	r2, r0, #1
 800c178:	4606      	mov	r6, r0
 800c17a:	d1d6      	bne.n	800c12a <_svfiprintf_r+0x176>
 800c17c:	89ab      	ldrh	r3, [r5, #12]
 800c17e:	065b      	lsls	r3, r3, #25
 800c180:	f53f af2c 	bmi.w	800bfdc <_svfiprintf_r+0x28>
 800c184:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c186:	b01d      	add	sp, #116	; 0x74
 800c188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c18c:	ab03      	add	r3, sp, #12
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	462a      	mov	r2, r5
 800c192:	4b06      	ldr	r3, [pc, #24]	; (800c1ac <_svfiprintf_r+0x1f8>)
 800c194:	a904      	add	r1, sp, #16
 800c196:	4638      	mov	r0, r7
 800c198:	f7fe fa5c 	bl	800a654 <_printf_i>
 800c19c:	e7eb      	b.n	800c176 <_svfiprintf_r+0x1c2>
 800c19e:	bf00      	nop
 800c1a0:	0800e524 	.word	0x0800e524
 800c1a4:	0800e52e 	.word	0x0800e52e
 800c1a8:	0800a10d 	.word	0x0800a10d
 800c1ac:	0800befd 	.word	0x0800befd
 800c1b0:	0800e52a 	.word	0x0800e52a

0800c1b4 <_sbrk_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4d06      	ldr	r5, [pc, #24]	; (800c1d0 <_sbrk_r+0x1c>)
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	4608      	mov	r0, r1
 800c1be:	602b      	str	r3, [r5, #0]
 800c1c0:	f7f8 f8c4 	bl	800434c <_sbrk>
 800c1c4:	1c43      	adds	r3, r0, #1
 800c1c6:	d102      	bne.n	800c1ce <_sbrk_r+0x1a>
 800c1c8:	682b      	ldr	r3, [r5, #0]
 800c1ca:	b103      	cbz	r3, 800c1ce <_sbrk_r+0x1a>
 800c1cc:	6023      	str	r3, [r4, #0]
 800c1ce:	bd38      	pop	{r3, r4, r5, pc}
 800c1d0:	2000099c 	.word	0x2000099c

0800c1d4 <__assert_func>:
 800c1d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1d6:	4614      	mov	r4, r2
 800c1d8:	461a      	mov	r2, r3
 800c1da:	4b09      	ldr	r3, [pc, #36]	; (800c200 <__assert_func+0x2c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4605      	mov	r5, r0
 800c1e0:	68d8      	ldr	r0, [r3, #12]
 800c1e2:	b14c      	cbz	r4, 800c1f8 <__assert_func+0x24>
 800c1e4:	4b07      	ldr	r3, [pc, #28]	; (800c204 <__assert_func+0x30>)
 800c1e6:	9100      	str	r1, [sp, #0]
 800c1e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1ec:	4906      	ldr	r1, [pc, #24]	; (800c208 <__assert_func+0x34>)
 800c1ee:	462b      	mov	r3, r5
 800c1f0:	f000 f80e 	bl	800c210 <fiprintf>
 800c1f4:	f000 faac 	bl	800c750 <abort>
 800c1f8:	4b04      	ldr	r3, [pc, #16]	; (800c20c <__assert_func+0x38>)
 800c1fa:	461c      	mov	r4, r3
 800c1fc:	e7f3      	b.n	800c1e6 <__assert_func+0x12>
 800c1fe:	bf00      	nop
 800c200:	20000060 	.word	0x20000060
 800c204:	0800e535 	.word	0x0800e535
 800c208:	0800e542 	.word	0x0800e542
 800c20c:	0800e570 	.word	0x0800e570

0800c210 <fiprintf>:
 800c210:	b40e      	push	{r1, r2, r3}
 800c212:	b503      	push	{r0, r1, lr}
 800c214:	4601      	mov	r1, r0
 800c216:	ab03      	add	r3, sp, #12
 800c218:	4805      	ldr	r0, [pc, #20]	; (800c230 <fiprintf+0x20>)
 800c21a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c21e:	6800      	ldr	r0, [r0, #0]
 800c220:	9301      	str	r3, [sp, #4]
 800c222:	f000 f897 	bl	800c354 <_vfiprintf_r>
 800c226:	b002      	add	sp, #8
 800c228:	f85d eb04 	ldr.w	lr, [sp], #4
 800c22c:	b003      	add	sp, #12
 800c22e:	4770      	bx	lr
 800c230:	20000060 	.word	0x20000060

0800c234 <__ascii_mbtowc>:
 800c234:	b082      	sub	sp, #8
 800c236:	b901      	cbnz	r1, 800c23a <__ascii_mbtowc+0x6>
 800c238:	a901      	add	r1, sp, #4
 800c23a:	b142      	cbz	r2, 800c24e <__ascii_mbtowc+0x1a>
 800c23c:	b14b      	cbz	r3, 800c252 <__ascii_mbtowc+0x1e>
 800c23e:	7813      	ldrb	r3, [r2, #0]
 800c240:	600b      	str	r3, [r1, #0]
 800c242:	7812      	ldrb	r2, [r2, #0]
 800c244:	1e10      	subs	r0, r2, #0
 800c246:	bf18      	it	ne
 800c248:	2001      	movne	r0, #1
 800c24a:	b002      	add	sp, #8
 800c24c:	4770      	bx	lr
 800c24e:	4610      	mov	r0, r2
 800c250:	e7fb      	b.n	800c24a <__ascii_mbtowc+0x16>
 800c252:	f06f 0001 	mvn.w	r0, #1
 800c256:	e7f8      	b.n	800c24a <__ascii_mbtowc+0x16>

0800c258 <memmove>:
 800c258:	4288      	cmp	r0, r1
 800c25a:	b510      	push	{r4, lr}
 800c25c:	eb01 0402 	add.w	r4, r1, r2
 800c260:	d902      	bls.n	800c268 <memmove+0x10>
 800c262:	4284      	cmp	r4, r0
 800c264:	4623      	mov	r3, r4
 800c266:	d807      	bhi.n	800c278 <memmove+0x20>
 800c268:	1e43      	subs	r3, r0, #1
 800c26a:	42a1      	cmp	r1, r4
 800c26c:	d008      	beq.n	800c280 <memmove+0x28>
 800c26e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c272:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c276:	e7f8      	b.n	800c26a <memmove+0x12>
 800c278:	4402      	add	r2, r0
 800c27a:	4601      	mov	r1, r0
 800c27c:	428a      	cmp	r2, r1
 800c27e:	d100      	bne.n	800c282 <memmove+0x2a>
 800c280:	bd10      	pop	{r4, pc}
 800c282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c28a:	e7f7      	b.n	800c27c <memmove+0x24>

0800c28c <__malloc_lock>:
 800c28c:	4801      	ldr	r0, [pc, #4]	; (800c294 <__malloc_lock+0x8>)
 800c28e:	f000 bc1f 	b.w	800cad0 <__retarget_lock_acquire_recursive>
 800c292:	bf00      	nop
 800c294:	200009a0 	.word	0x200009a0

0800c298 <__malloc_unlock>:
 800c298:	4801      	ldr	r0, [pc, #4]	; (800c2a0 <__malloc_unlock+0x8>)
 800c29a:	f000 bc1a 	b.w	800cad2 <__retarget_lock_release_recursive>
 800c29e:	bf00      	nop
 800c2a0:	200009a0 	.word	0x200009a0

0800c2a4 <_realloc_r>:
 800c2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a8:	4680      	mov	r8, r0
 800c2aa:	4614      	mov	r4, r2
 800c2ac:	460e      	mov	r6, r1
 800c2ae:	b921      	cbnz	r1, 800c2ba <_realloc_r+0x16>
 800c2b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b4:	4611      	mov	r1, r2
 800c2b6:	f7ff bdad 	b.w	800be14 <_malloc_r>
 800c2ba:	b92a      	cbnz	r2, 800c2c8 <_realloc_r+0x24>
 800c2bc:	f7ff fd3e 	bl	800bd3c <_free_r>
 800c2c0:	4625      	mov	r5, r4
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c8:	f000 fc6a 	bl	800cba0 <_malloc_usable_size_r>
 800c2cc:	4284      	cmp	r4, r0
 800c2ce:	4607      	mov	r7, r0
 800c2d0:	d802      	bhi.n	800c2d8 <_realloc_r+0x34>
 800c2d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c2d6:	d812      	bhi.n	800c2fe <_realloc_r+0x5a>
 800c2d8:	4621      	mov	r1, r4
 800c2da:	4640      	mov	r0, r8
 800c2dc:	f7ff fd9a 	bl	800be14 <_malloc_r>
 800c2e0:	4605      	mov	r5, r0
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d0ed      	beq.n	800c2c2 <_realloc_r+0x1e>
 800c2e6:	42bc      	cmp	r4, r7
 800c2e8:	4622      	mov	r2, r4
 800c2ea:	4631      	mov	r1, r6
 800c2ec:	bf28      	it	cs
 800c2ee:	463a      	movcs	r2, r7
 800c2f0:	f7ff f97c 	bl	800b5ec <memcpy>
 800c2f4:	4631      	mov	r1, r6
 800c2f6:	4640      	mov	r0, r8
 800c2f8:	f7ff fd20 	bl	800bd3c <_free_r>
 800c2fc:	e7e1      	b.n	800c2c2 <_realloc_r+0x1e>
 800c2fe:	4635      	mov	r5, r6
 800c300:	e7df      	b.n	800c2c2 <_realloc_r+0x1e>

0800c302 <__sfputc_r>:
 800c302:	6893      	ldr	r3, [r2, #8]
 800c304:	3b01      	subs	r3, #1
 800c306:	2b00      	cmp	r3, #0
 800c308:	b410      	push	{r4}
 800c30a:	6093      	str	r3, [r2, #8]
 800c30c:	da08      	bge.n	800c320 <__sfputc_r+0x1e>
 800c30e:	6994      	ldr	r4, [r2, #24]
 800c310:	42a3      	cmp	r3, r4
 800c312:	db01      	blt.n	800c318 <__sfputc_r+0x16>
 800c314:	290a      	cmp	r1, #10
 800c316:	d103      	bne.n	800c320 <__sfputc_r+0x1e>
 800c318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c31c:	f000 b94a 	b.w	800c5b4 <__swbuf_r>
 800c320:	6813      	ldr	r3, [r2, #0]
 800c322:	1c58      	adds	r0, r3, #1
 800c324:	6010      	str	r0, [r2, #0]
 800c326:	7019      	strb	r1, [r3, #0]
 800c328:	4608      	mov	r0, r1
 800c32a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <__sfputs_r>:
 800c330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c332:	4606      	mov	r6, r0
 800c334:	460f      	mov	r7, r1
 800c336:	4614      	mov	r4, r2
 800c338:	18d5      	adds	r5, r2, r3
 800c33a:	42ac      	cmp	r4, r5
 800c33c:	d101      	bne.n	800c342 <__sfputs_r+0x12>
 800c33e:	2000      	movs	r0, #0
 800c340:	e007      	b.n	800c352 <__sfputs_r+0x22>
 800c342:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c346:	463a      	mov	r2, r7
 800c348:	4630      	mov	r0, r6
 800c34a:	f7ff ffda 	bl	800c302 <__sfputc_r>
 800c34e:	1c43      	adds	r3, r0, #1
 800c350:	d1f3      	bne.n	800c33a <__sfputs_r+0xa>
 800c352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c354 <_vfiprintf_r>:
 800c354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c358:	460d      	mov	r5, r1
 800c35a:	b09d      	sub	sp, #116	; 0x74
 800c35c:	4614      	mov	r4, r2
 800c35e:	4698      	mov	r8, r3
 800c360:	4606      	mov	r6, r0
 800c362:	b118      	cbz	r0, 800c36c <_vfiprintf_r+0x18>
 800c364:	6983      	ldr	r3, [r0, #24]
 800c366:	b90b      	cbnz	r3, 800c36c <_vfiprintf_r+0x18>
 800c368:	f000 fb14 	bl	800c994 <__sinit>
 800c36c:	4b89      	ldr	r3, [pc, #548]	; (800c594 <_vfiprintf_r+0x240>)
 800c36e:	429d      	cmp	r5, r3
 800c370:	d11b      	bne.n	800c3aa <_vfiprintf_r+0x56>
 800c372:	6875      	ldr	r5, [r6, #4]
 800c374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c376:	07d9      	lsls	r1, r3, #31
 800c378:	d405      	bmi.n	800c386 <_vfiprintf_r+0x32>
 800c37a:	89ab      	ldrh	r3, [r5, #12]
 800c37c:	059a      	lsls	r2, r3, #22
 800c37e:	d402      	bmi.n	800c386 <_vfiprintf_r+0x32>
 800c380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c382:	f000 fba5 	bl	800cad0 <__retarget_lock_acquire_recursive>
 800c386:	89ab      	ldrh	r3, [r5, #12]
 800c388:	071b      	lsls	r3, r3, #28
 800c38a:	d501      	bpl.n	800c390 <_vfiprintf_r+0x3c>
 800c38c:	692b      	ldr	r3, [r5, #16]
 800c38e:	b9eb      	cbnz	r3, 800c3cc <_vfiprintf_r+0x78>
 800c390:	4629      	mov	r1, r5
 800c392:	4630      	mov	r0, r6
 800c394:	f000 f96e 	bl	800c674 <__swsetup_r>
 800c398:	b1c0      	cbz	r0, 800c3cc <_vfiprintf_r+0x78>
 800c39a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c39c:	07dc      	lsls	r4, r3, #31
 800c39e:	d50e      	bpl.n	800c3be <_vfiprintf_r+0x6a>
 800c3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a4:	b01d      	add	sp, #116	; 0x74
 800c3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3aa:	4b7b      	ldr	r3, [pc, #492]	; (800c598 <_vfiprintf_r+0x244>)
 800c3ac:	429d      	cmp	r5, r3
 800c3ae:	d101      	bne.n	800c3b4 <_vfiprintf_r+0x60>
 800c3b0:	68b5      	ldr	r5, [r6, #8]
 800c3b2:	e7df      	b.n	800c374 <_vfiprintf_r+0x20>
 800c3b4:	4b79      	ldr	r3, [pc, #484]	; (800c59c <_vfiprintf_r+0x248>)
 800c3b6:	429d      	cmp	r5, r3
 800c3b8:	bf08      	it	eq
 800c3ba:	68f5      	ldreq	r5, [r6, #12]
 800c3bc:	e7da      	b.n	800c374 <_vfiprintf_r+0x20>
 800c3be:	89ab      	ldrh	r3, [r5, #12]
 800c3c0:	0598      	lsls	r0, r3, #22
 800c3c2:	d4ed      	bmi.n	800c3a0 <_vfiprintf_r+0x4c>
 800c3c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3c6:	f000 fb84 	bl	800cad2 <__retarget_lock_release_recursive>
 800c3ca:	e7e9      	b.n	800c3a0 <_vfiprintf_r+0x4c>
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c3d0:	2320      	movs	r3, #32
 800c3d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3da:	2330      	movs	r3, #48	; 0x30
 800c3dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c5a0 <_vfiprintf_r+0x24c>
 800c3e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3e4:	f04f 0901 	mov.w	r9, #1
 800c3e8:	4623      	mov	r3, r4
 800c3ea:	469a      	mov	sl, r3
 800c3ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3f0:	b10a      	cbz	r2, 800c3f6 <_vfiprintf_r+0xa2>
 800c3f2:	2a25      	cmp	r2, #37	; 0x25
 800c3f4:	d1f9      	bne.n	800c3ea <_vfiprintf_r+0x96>
 800c3f6:	ebba 0b04 	subs.w	fp, sl, r4
 800c3fa:	d00b      	beq.n	800c414 <_vfiprintf_r+0xc0>
 800c3fc:	465b      	mov	r3, fp
 800c3fe:	4622      	mov	r2, r4
 800c400:	4629      	mov	r1, r5
 800c402:	4630      	mov	r0, r6
 800c404:	f7ff ff94 	bl	800c330 <__sfputs_r>
 800c408:	3001      	adds	r0, #1
 800c40a:	f000 80aa 	beq.w	800c562 <_vfiprintf_r+0x20e>
 800c40e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c410:	445a      	add	r2, fp
 800c412:	9209      	str	r2, [sp, #36]	; 0x24
 800c414:	f89a 3000 	ldrb.w	r3, [sl]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f000 80a2 	beq.w	800c562 <_vfiprintf_r+0x20e>
 800c41e:	2300      	movs	r3, #0
 800c420:	f04f 32ff 	mov.w	r2, #4294967295
 800c424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c428:	f10a 0a01 	add.w	sl, sl, #1
 800c42c:	9304      	str	r3, [sp, #16]
 800c42e:	9307      	str	r3, [sp, #28]
 800c430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c434:	931a      	str	r3, [sp, #104]	; 0x68
 800c436:	4654      	mov	r4, sl
 800c438:	2205      	movs	r2, #5
 800c43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c43e:	4858      	ldr	r0, [pc, #352]	; (800c5a0 <_vfiprintf_r+0x24c>)
 800c440:	f7f3 feee 	bl	8000220 <memchr>
 800c444:	9a04      	ldr	r2, [sp, #16]
 800c446:	b9d8      	cbnz	r0, 800c480 <_vfiprintf_r+0x12c>
 800c448:	06d1      	lsls	r1, r2, #27
 800c44a:	bf44      	itt	mi
 800c44c:	2320      	movmi	r3, #32
 800c44e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c452:	0713      	lsls	r3, r2, #28
 800c454:	bf44      	itt	mi
 800c456:	232b      	movmi	r3, #43	; 0x2b
 800c458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c45c:	f89a 3000 	ldrb.w	r3, [sl]
 800c460:	2b2a      	cmp	r3, #42	; 0x2a
 800c462:	d015      	beq.n	800c490 <_vfiprintf_r+0x13c>
 800c464:	9a07      	ldr	r2, [sp, #28]
 800c466:	4654      	mov	r4, sl
 800c468:	2000      	movs	r0, #0
 800c46a:	f04f 0c0a 	mov.w	ip, #10
 800c46e:	4621      	mov	r1, r4
 800c470:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c474:	3b30      	subs	r3, #48	; 0x30
 800c476:	2b09      	cmp	r3, #9
 800c478:	d94e      	bls.n	800c518 <_vfiprintf_r+0x1c4>
 800c47a:	b1b0      	cbz	r0, 800c4aa <_vfiprintf_r+0x156>
 800c47c:	9207      	str	r2, [sp, #28]
 800c47e:	e014      	b.n	800c4aa <_vfiprintf_r+0x156>
 800c480:	eba0 0308 	sub.w	r3, r0, r8
 800c484:	fa09 f303 	lsl.w	r3, r9, r3
 800c488:	4313      	orrs	r3, r2
 800c48a:	9304      	str	r3, [sp, #16]
 800c48c:	46a2      	mov	sl, r4
 800c48e:	e7d2      	b.n	800c436 <_vfiprintf_r+0xe2>
 800c490:	9b03      	ldr	r3, [sp, #12]
 800c492:	1d19      	adds	r1, r3, #4
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	9103      	str	r1, [sp, #12]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	bfbb      	ittet	lt
 800c49c:	425b      	neglt	r3, r3
 800c49e:	f042 0202 	orrlt.w	r2, r2, #2
 800c4a2:	9307      	strge	r3, [sp, #28]
 800c4a4:	9307      	strlt	r3, [sp, #28]
 800c4a6:	bfb8      	it	lt
 800c4a8:	9204      	strlt	r2, [sp, #16]
 800c4aa:	7823      	ldrb	r3, [r4, #0]
 800c4ac:	2b2e      	cmp	r3, #46	; 0x2e
 800c4ae:	d10c      	bne.n	800c4ca <_vfiprintf_r+0x176>
 800c4b0:	7863      	ldrb	r3, [r4, #1]
 800c4b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c4b4:	d135      	bne.n	800c522 <_vfiprintf_r+0x1ce>
 800c4b6:	9b03      	ldr	r3, [sp, #12]
 800c4b8:	1d1a      	adds	r2, r3, #4
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	9203      	str	r2, [sp, #12]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	bfb8      	it	lt
 800c4c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4c6:	3402      	adds	r4, #2
 800c4c8:	9305      	str	r3, [sp, #20]
 800c4ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c5b0 <_vfiprintf_r+0x25c>
 800c4ce:	7821      	ldrb	r1, [r4, #0]
 800c4d0:	2203      	movs	r2, #3
 800c4d2:	4650      	mov	r0, sl
 800c4d4:	f7f3 fea4 	bl	8000220 <memchr>
 800c4d8:	b140      	cbz	r0, 800c4ec <_vfiprintf_r+0x198>
 800c4da:	2340      	movs	r3, #64	; 0x40
 800c4dc:	eba0 000a 	sub.w	r0, r0, sl
 800c4e0:	fa03 f000 	lsl.w	r0, r3, r0
 800c4e4:	9b04      	ldr	r3, [sp, #16]
 800c4e6:	4303      	orrs	r3, r0
 800c4e8:	3401      	adds	r4, #1
 800c4ea:	9304      	str	r3, [sp, #16]
 800c4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4f0:	482c      	ldr	r0, [pc, #176]	; (800c5a4 <_vfiprintf_r+0x250>)
 800c4f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4f6:	2206      	movs	r2, #6
 800c4f8:	f7f3 fe92 	bl	8000220 <memchr>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	d03f      	beq.n	800c580 <_vfiprintf_r+0x22c>
 800c500:	4b29      	ldr	r3, [pc, #164]	; (800c5a8 <_vfiprintf_r+0x254>)
 800c502:	bb1b      	cbnz	r3, 800c54c <_vfiprintf_r+0x1f8>
 800c504:	9b03      	ldr	r3, [sp, #12]
 800c506:	3307      	adds	r3, #7
 800c508:	f023 0307 	bic.w	r3, r3, #7
 800c50c:	3308      	adds	r3, #8
 800c50e:	9303      	str	r3, [sp, #12]
 800c510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c512:	443b      	add	r3, r7
 800c514:	9309      	str	r3, [sp, #36]	; 0x24
 800c516:	e767      	b.n	800c3e8 <_vfiprintf_r+0x94>
 800c518:	fb0c 3202 	mla	r2, ip, r2, r3
 800c51c:	460c      	mov	r4, r1
 800c51e:	2001      	movs	r0, #1
 800c520:	e7a5      	b.n	800c46e <_vfiprintf_r+0x11a>
 800c522:	2300      	movs	r3, #0
 800c524:	3401      	adds	r4, #1
 800c526:	9305      	str	r3, [sp, #20]
 800c528:	4619      	mov	r1, r3
 800c52a:	f04f 0c0a 	mov.w	ip, #10
 800c52e:	4620      	mov	r0, r4
 800c530:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c534:	3a30      	subs	r2, #48	; 0x30
 800c536:	2a09      	cmp	r2, #9
 800c538:	d903      	bls.n	800c542 <_vfiprintf_r+0x1ee>
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d0c5      	beq.n	800c4ca <_vfiprintf_r+0x176>
 800c53e:	9105      	str	r1, [sp, #20]
 800c540:	e7c3      	b.n	800c4ca <_vfiprintf_r+0x176>
 800c542:	fb0c 2101 	mla	r1, ip, r1, r2
 800c546:	4604      	mov	r4, r0
 800c548:	2301      	movs	r3, #1
 800c54a:	e7f0      	b.n	800c52e <_vfiprintf_r+0x1da>
 800c54c:	ab03      	add	r3, sp, #12
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	462a      	mov	r2, r5
 800c552:	4b16      	ldr	r3, [pc, #88]	; (800c5ac <_vfiprintf_r+0x258>)
 800c554:	a904      	add	r1, sp, #16
 800c556:	4630      	mov	r0, r6
 800c558:	f7fd fdd8 	bl	800a10c <_printf_float>
 800c55c:	4607      	mov	r7, r0
 800c55e:	1c78      	adds	r0, r7, #1
 800c560:	d1d6      	bne.n	800c510 <_vfiprintf_r+0x1bc>
 800c562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c564:	07d9      	lsls	r1, r3, #31
 800c566:	d405      	bmi.n	800c574 <_vfiprintf_r+0x220>
 800c568:	89ab      	ldrh	r3, [r5, #12]
 800c56a:	059a      	lsls	r2, r3, #22
 800c56c:	d402      	bmi.n	800c574 <_vfiprintf_r+0x220>
 800c56e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c570:	f000 faaf 	bl	800cad2 <__retarget_lock_release_recursive>
 800c574:	89ab      	ldrh	r3, [r5, #12]
 800c576:	065b      	lsls	r3, r3, #25
 800c578:	f53f af12 	bmi.w	800c3a0 <_vfiprintf_r+0x4c>
 800c57c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c57e:	e711      	b.n	800c3a4 <_vfiprintf_r+0x50>
 800c580:	ab03      	add	r3, sp, #12
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	462a      	mov	r2, r5
 800c586:	4b09      	ldr	r3, [pc, #36]	; (800c5ac <_vfiprintf_r+0x258>)
 800c588:	a904      	add	r1, sp, #16
 800c58a:	4630      	mov	r0, r6
 800c58c:	f7fe f862 	bl	800a654 <_printf_i>
 800c590:	e7e4      	b.n	800c55c <_vfiprintf_r+0x208>
 800c592:	bf00      	nop
 800c594:	0800e69c 	.word	0x0800e69c
 800c598:	0800e6bc 	.word	0x0800e6bc
 800c59c:	0800e67c 	.word	0x0800e67c
 800c5a0:	0800e524 	.word	0x0800e524
 800c5a4:	0800e52e 	.word	0x0800e52e
 800c5a8:	0800a10d 	.word	0x0800a10d
 800c5ac:	0800c331 	.word	0x0800c331
 800c5b0:	0800e52a 	.word	0x0800e52a

0800c5b4 <__swbuf_r>:
 800c5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b6:	460e      	mov	r6, r1
 800c5b8:	4614      	mov	r4, r2
 800c5ba:	4605      	mov	r5, r0
 800c5bc:	b118      	cbz	r0, 800c5c6 <__swbuf_r+0x12>
 800c5be:	6983      	ldr	r3, [r0, #24]
 800c5c0:	b90b      	cbnz	r3, 800c5c6 <__swbuf_r+0x12>
 800c5c2:	f000 f9e7 	bl	800c994 <__sinit>
 800c5c6:	4b21      	ldr	r3, [pc, #132]	; (800c64c <__swbuf_r+0x98>)
 800c5c8:	429c      	cmp	r4, r3
 800c5ca:	d12b      	bne.n	800c624 <__swbuf_r+0x70>
 800c5cc:	686c      	ldr	r4, [r5, #4]
 800c5ce:	69a3      	ldr	r3, [r4, #24]
 800c5d0:	60a3      	str	r3, [r4, #8]
 800c5d2:	89a3      	ldrh	r3, [r4, #12]
 800c5d4:	071a      	lsls	r2, r3, #28
 800c5d6:	d52f      	bpl.n	800c638 <__swbuf_r+0x84>
 800c5d8:	6923      	ldr	r3, [r4, #16]
 800c5da:	b36b      	cbz	r3, 800c638 <__swbuf_r+0x84>
 800c5dc:	6923      	ldr	r3, [r4, #16]
 800c5de:	6820      	ldr	r0, [r4, #0]
 800c5e0:	1ac0      	subs	r0, r0, r3
 800c5e2:	6963      	ldr	r3, [r4, #20]
 800c5e4:	b2f6      	uxtb	r6, r6
 800c5e6:	4283      	cmp	r3, r0
 800c5e8:	4637      	mov	r7, r6
 800c5ea:	dc04      	bgt.n	800c5f6 <__swbuf_r+0x42>
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	f000 f93c 	bl	800c86c <_fflush_r>
 800c5f4:	bb30      	cbnz	r0, 800c644 <__swbuf_r+0x90>
 800c5f6:	68a3      	ldr	r3, [r4, #8]
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	60a3      	str	r3, [r4, #8]
 800c5fc:	6823      	ldr	r3, [r4, #0]
 800c5fe:	1c5a      	adds	r2, r3, #1
 800c600:	6022      	str	r2, [r4, #0]
 800c602:	701e      	strb	r6, [r3, #0]
 800c604:	6963      	ldr	r3, [r4, #20]
 800c606:	3001      	adds	r0, #1
 800c608:	4283      	cmp	r3, r0
 800c60a:	d004      	beq.n	800c616 <__swbuf_r+0x62>
 800c60c:	89a3      	ldrh	r3, [r4, #12]
 800c60e:	07db      	lsls	r3, r3, #31
 800c610:	d506      	bpl.n	800c620 <__swbuf_r+0x6c>
 800c612:	2e0a      	cmp	r6, #10
 800c614:	d104      	bne.n	800c620 <__swbuf_r+0x6c>
 800c616:	4621      	mov	r1, r4
 800c618:	4628      	mov	r0, r5
 800c61a:	f000 f927 	bl	800c86c <_fflush_r>
 800c61e:	b988      	cbnz	r0, 800c644 <__swbuf_r+0x90>
 800c620:	4638      	mov	r0, r7
 800c622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c624:	4b0a      	ldr	r3, [pc, #40]	; (800c650 <__swbuf_r+0x9c>)
 800c626:	429c      	cmp	r4, r3
 800c628:	d101      	bne.n	800c62e <__swbuf_r+0x7a>
 800c62a:	68ac      	ldr	r4, [r5, #8]
 800c62c:	e7cf      	b.n	800c5ce <__swbuf_r+0x1a>
 800c62e:	4b09      	ldr	r3, [pc, #36]	; (800c654 <__swbuf_r+0xa0>)
 800c630:	429c      	cmp	r4, r3
 800c632:	bf08      	it	eq
 800c634:	68ec      	ldreq	r4, [r5, #12]
 800c636:	e7ca      	b.n	800c5ce <__swbuf_r+0x1a>
 800c638:	4621      	mov	r1, r4
 800c63a:	4628      	mov	r0, r5
 800c63c:	f000 f81a 	bl	800c674 <__swsetup_r>
 800c640:	2800      	cmp	r0, #0
 800c642:	d0cb      	beq.n	800c5dc <__swbuf_r+0x28>
 800c644:	f04f 37ff 	mov.w	r7, #4294967295
 800c648:	e7ea      	b.n	800c620 <__swbuf_r+0x6c>
 800c64a:	bf00      	nop
 800c64c:	0800e69c 	.word	0x0800e69c
 800c650:	0800e6bc 	.word	0x0800e6bc
 800c654:	0800e67c 	.word	0x0800e67c

0800c658 <__ascii_wctomb>:
 800c658:	b149      	cbz	r1, 800c66e <__ascii_wctomb+0x16>
 800c65a:	2aff      	cmp	r2, #255	; 0xff
 800c65c:	bf85      	ittet	hi
 800c65e:	238a      	movhi	r3, #138	; 0x8a
 800c660:	6003      	strhi	r3, [r0, #0]
 800c662:	700a      	strbls	r2, [r1, #0]
 800c664:	f04f 30ff 	movhi.w	r0, #4294967295
 800c668:	bf98      	it	ls
 800c66a:	2001      	movls	r0, #1
 800c66c:	4770      	bx	lr
 800c66e:	4608      	mov	r0, r1
 800c670:	4770      	bx	lr
	...

0800c674 <__swsetup_r>:
 800c674:	4b32      	ldr	r3, [pc, #200]	; (800c740 <__swsetup_r+0xcc>)
 800c676:	b570      	push	{r4, r5, r6, lr}
 800c678:	681d      	ldr	r5, [r3, #0]
 800c67a:	4606      	mov	r6, r0
 800c67c:	460c      	mov	r4, r1
 800c67e:	b125      	cbz	r5, 800c68a <__swsetup_r+0x16>
 800c680:	69ab      	ldr	r3, [r5, #24]
 800c682:	b913      	cbnz	r3, 800c68a <__swsetup_r+0x16>
 800c684:	4628      	mov	r0, r5
 800c686:	f000 f985 	bl	800c994 <__sinit>
 800c68a:	4b2e      	ldr	r3, [pc, #184]	; (800c744 <__swsetup_r+0xd0>)
 800c68c:	429c      	cmp	r4, r3
 800c68e:	d10f      	bne.n	800c6b0 <__swsetup_r+0x3c>
 800c690:	686c      	ldr	r4, [r5, #4]
 800c692:	89a3      	ldrh	r3, [r4, #12]
 800c694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c698:	0719      	lsls	r1, r3, #28
 800c69a:	d42c      	bmi.n	800c6f6 <__swsetup_r+0x82>
 800c69c:	06dd      	lsls	r5, r3, #27
 800c69e:	d411      	bmi.n	800c6c4 <__swsetup_r+0x50>
 800c6a0:	2309      	movs	r3, #9
 800c6a2:	6033      	str	r3, [r6, #0]
 800c6a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6a8:	81a3      	strh	r3, [r4, #12]
 800c6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ae:	e03e      	b.n	800c72e <__swsetup_r+0xba>
 800c6b0:	4b25      	ldr	r3, [pc, #148]	; (800c748 <__swsetup_r+0xd4>)
 800c6b2:	429c      	cmp	r4, r3
 800c6b4:	d101      	bne.n	800c6ba <__swsetup_r+0x46>
 800c6b6:	68ac      	ldr	r4, [r5, #8]
 800c6b8:	e7eb      	b.n	800c692 <__swsetup_r+0x1e>
 800c6ba:	4b24      	ldr	r3, [pc, #144]	; (800c74c <__swsetup_r+0xd8>)
 800c6bc:	429c      	cmp	r4, r3
 800c6be:	bf08      	it	eq
 800c6c0:	68ec      	ldreq	r4, [r5, #12]
 800c6c2:	e7e6      	b.n	800c692 <__swsetup_r+0x1e>
 800c6c4:	0758      	lsls	r0, r3, #29
 800c6c6:	d512      	bpl.n	800c6ee <__swsetup_r+0x7a>
 800c6c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6ca:	b141      	cbz	r1, 800c6de <__swsetup_r+0x6a>
 800c6cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6d0:	4299      	cmp	r1, r3
 800c6d2:	d002      	beq.n	800c6da <__swsetup_r+0x66>
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	f7ff fb31 	bl	800bd3c <_free_r>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	6363      	str	r3, [r4, #52]	; 0x34
 800c6de:	89a3      	ldrh	r3, [r4, #12]
 800c6e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6e4:	81a3      	strh	r3, [r4, #12]
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	6063      	str	r3, [r4, #4]
 800c6ea:	6923      	ldr	r3, [r4, #16]
 800c6ec:	6023      	str	r3, [r4, #0]
 800c6ee:	89a3      	ldrh	r3, [r4, #12]
 800c6f0:	f043 0308 	orr.w	r3, r3, #8
 800c6f4:	81a3      	strh	r3, [r4, #12]
 800c6f6:	6923      	ldr	r3, [r4, #16]
 800c6f8:	b94b      	cbnz	r3, 800c70e <__swsetup_r+0x9a>
 800c6fa:	89a3      	ldrh	r3, [r4, #12]
 800c6fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c704:	d003      	beq.n	800c70e <__swsetup_r+0x9a>
 800c706:	4621      	mov	r1, r4
 800c708:	4630      	mov	r0, r6
 800c70a:	f000 fa09 	bl	800cb20 <__smakebuf_r>
 800c70e:	89a0      	ldrh	r0, [r4, #12]
 800c710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c714:	f010 0301 	ands.w	r3, r0, #1
 800c718:	d00a      	beq.n	800c730 <__swsetup_r+0xbc>
 800c71a:	2300      	movs	r3, #0
 800c71c:	60a3      	str	r3, [r4, #8]
 800c71e:	6963      	ldr	r3, [r4, #20]
 800c720:	425b      	negs	r3, r3
 800c722:	61a3      	str	r3, [r4, #24]
 800c724:	6923      	ldr	r3, [r4, #16]
 800c726:	b943      	cbnz	r3, 800c73a <__swsetup_r+0xc6>
 800c728:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c72c:	d1ba      	bne.n	800c6a4 <__swsetup_r+0x30>
 800c72e:	bd70      	pop	{r4, r5, r6, pc}
 800c730:	0781      	lsls	r1, r0, #30
 800c732:	bf58      	it	pl
 800c734:	6963      	ldrpl	r3, [r4, #20]
 800c736:	60a3      	str	r3, [r4, #8]
 800c738:	e7f4      	b.n	800c724 <__swsetup_r+0xb0>
 800c73a:	2000      	movs	r0, #0
 800c73c:	e7f7      	b.n	800c72e <__swsetup_r+0xba>
 800c73e:	bf00      	nop
 800c740:	20000060 	.word	0x20000060
 800c744:	0800e69c 	.word	0x0800e69c
 800c748:	0800e6bc 	.word	0x0800e6bc
 800c74c:	0800e67c 	.word	0x0800e67c

0800c750 <abort>:
 800c750:	b508      	push	{r3, lr}
 800c752:	2006      	movs	r0, #6
 800c754:	f000 fa54 	bl	800cc00 <raise>
 800c758:	2001      	movs	r0, #1
 800c75a:	f7f7 fd7f 	bl	800425c <_exit>
	...

0800c760 <__sflush_r>:
 800c760:	898a      	ldrh	r2, [r1, #12]
 800c762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c766:	4605      	mov	r5, r0
 800c768:	0710      	lsls	r0, r2, #28
 800c76a:	460c      	mov	r4, r1
 800c76c:	d458      	bmi.n	800c820 <__sflush_r+0xc0>
 800c76e:	684b      	ldr	r3, [r1, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	dc05      	bgt.n	800c780 <__sflush_r+0x20>
 800c774:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c776:	2b00      	cmp	r3, #0
 800c778:	dc02      	bgt.n	800c780 <__sflush_r+0x20>
 800c77a:	2000      	movs	r0, #0
 800c77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c782:	2e00      	cmp	r6, #0
 800c784:	d0f9      	beq.n	800c77a <__sflush_r+0x1a>
 800c786:	2300      	movs	r3, #0
 800c788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c78c:	682f      	ldr	r7, [r5, #0]
 800c78e:	602b      	str	r3, [r5, #0]
 800c790:	d032      	beq.n	800c7f8 <__sflush_r+0x98>
 800c792:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c794:	89a3      	ldrh	r3, [r4, #12]
 800c796:	075a      	lsls	r2, r3, #29
 800c798:	d505      	bpl.n	800c7a6 <__sflush_r+0x46>
 800c79a:	6863      	ldr	r3, [r4, #4]
 800c79c:	1ac0      	subs	r0, r0, r3
 800c79e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7a0:	b10b      	cbz	r3, 800c7a6 <__sflush_r+0x46>
 800c7a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7a4:	1ac0      	subs	r0, r0, r3
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7ac:	6a21      	ldr	r1, [r4, #32]
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	47b0      	blx	r6
 800c7b2:	1c43      	adds	r3, r0, #1
 800c7b4:	89a3      	ldrh	r3, [r4, #12]
 800c7b6:	d106      	bne.n	800c7c6 <__sflush_r+0x66>
 800c7b8:	6829      	ldr	r1, [r5, #0]
 800c7ba:	291d      	cmp	r1, #29
 800c7bc:	d82c      	bhi.n	800c818 <__sflush_r+0xb8>
 800c7be:	4a2a      	ldr	r2, [pc, #168]	; (800c868 <__sflush_r+0x108>)
 800c7c0:	40ca      	lsrs	r2, r1
 800c7c2:	07d6      	lsls	r6, r2, #31
 800c7c4:	d528      	bpl.n	800c818 <__sflush_r+0xb8>
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	6062      	str	r2, [r4, #4]
 800c7ca:	04d9      	lsls	r1, r3, #19
 800c7cc:	6922      	ldr	r2, [r4, #16]
 800c7ce:	6022      	str	r2, [r4, #0]
 800c7d0:	d504      	bpl.n	800c7dc <__sflush_r+0x7c>
 800c7d2:	1c42      	adds	r2, r0, #1
 800c7d4:	d101      	bne.n	800c7da <__sflush_r+0x7a>
 800c7d6:	682b      	ldr	r3, [r5, #0]
 800c7d8:	b903      	cbnz	r3, 800c7dc <__sflush_r+0x7c>
 800c7da:	6560      	str	r0, [r4, #84]	; 0x54
 800c7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7de:	602f      	str	r7, [r5, #0]
 800c7e0:	2900      	cmp	r1, #0
 800c7e2:	d0ca      	beq.n	800c77a <__sflush_r+0x1a>
 800c7e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7e8:	4299      	cmp	r1, r3
 800c7ea:	d002      	beq.n	800c7f2 <__sflush_r+0x92>
 800c7ec:	4628      	mov	r0, r5
 800c7ee:	f7ff faa5 	bl	800bd3c <_free_r>
 800c7f2:	2000      	movs	r0, #0
 800c7f4:	6360      	str	r0, [r4, #52]	; 0x34
 800c7f6:	e7c1      	b.n	800c77c <__sflush_r+0x1c>
 800c7f8:	6a21      	ldr	r1, [r4, #32]
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	47b0      	blx	r6
 800c800:	1c41      	adds	r1, r0, #1
 800c802:	d1c7      	bne.n	800c794 <__sflush_r+0x34>
 800c804:	682b      	ldr	r3, [r5, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d0c4      	beq.n	800c794 <__sflush_r+0x34>
 800c80a:	2b1d      	cmp	r3, #29
 800c80c:	d001      	beq.n	800c812 <__sflush_r+0xb2>
 800c80e:	2b16      	cmp	r3, #22
 800c810:	d101      	bne.n	800c816 <__sflush_r+0xb6>
 800c812:	602f      	str	r7, [r5, #0]
 800c814:	e7b1      	b.n	800c77a <__sflush_r+0x1a>
 800c816:	89a3      	ldrh	r3, [r4, #12]
 800c818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c81c:	81a3      	strh	r3, [r4, #12]
 800c81e:	e7ad      	b.n	800c77c <__sflush_r+0x1c>
 800c820:	690f      	ldr	r7, [r1, #16]
 800c822:	2f00      	cmp	r7, #0
 800c824:	d0a9      	beq.n	800c77a <__sflush_r+0x1a>
 800c826:	0793      	lsls	r3, r2, #30
 800c828:	680e      	ldr	r6, [r1, #0]
 800c82a:	bf08      	it	eq
 800c82c:	694b      	ldreq	r3, [r1, #20]
 800c82e:	600f      	str	r7, [r1, #0]
 800c830:	bf18      	it	ne
 800c832:	2300      	movne	r3, #0
 800c834:	eba6 0807 	sub.w	r8, r6, r7
 800c838:	608b      	str	r3, [r1, #8]
 800c83a:	f1b8 0f00 	cmp.w	r8, #0
 800c83e:	dd9c      	ble.n	800c77a <__sflush_r+0x1a>
 800c840:	6a21      	ldr	r1, [r4, #32]
 800c842:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c844:	4643      	mov	r3, r8
 800c846:	463a      	mov	r2, r7
 800c848:	4628      	mov	r0, r5
 800c84a:	47b0      	blx	r6
 800c84c:	2800      	cmp	r0, #0
 800c84e:	dc06      	bgt.n	800c85e <__sflush_r+0xfe>
 800c850:	89a3      	ldrh	r3, [r4, #12]
 800c852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c856:	81a3      	strh	r3, [r4, #12]
 800c858:	f04f 30ff 	mov.w	r0, #4294967295
 800c85c:	e78e      	b.n	800c77c <__sflush_r+0x1c>
 800c85e:	4407      	add	r7, r0
 800c860:	eba8 0800 	sub.w	r8, r8, r0
 800c864:	e7e9      	b.n	800c83a <__sflush_r+0xda>
 800c866:	bf00      	nop
 800c868:	20400001 	.word	0x20400001

0800c86c <_fflush_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	690b      	ldr	r3, [r1, #16]
 800c870:	4605      	mov	r5, r0
 800c872:	460c      	mov	r4, r1
 800c874:	b913      	cbnz	r3, 800c87c <_fflush_r+0x10>
 800c876:	2500      	movs	r5, #0
 800c878:	4628      	mov	r0, r5
 800c87a:	bd38      	pop	{r3, r4, r5, pc}
 800c87c:	b118      	cbz	r0, 800c886 <_fflush_r+0x1a>
 800c87e:	6983      	ldr	r3, [r0, #24]
 800c880:	b90b      	cbnz	r3, 800c886 <_fflush_r+0x1a>
 800c882:	f000 f887 	bl	800c994 <__sinit>
 800c886:	4b14      	ldr	r3, [pc, #80]	; (800c8d8 <_fflush_r+0x6c>)
 800c888:	429c      	cmp	r4, r3
 800c88a:	d11b      	bne.n	800c8c4 <_fflush_r+0x58>
 800c88c:	686c      	ldr	r4, [r5, #4]
 800c88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d0ef      	beq.n	800c876 <_fflush_r+0xa>
 800c896:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c898:	07d0      	lsls	r0, r2, #31
 800c89a:	d404      	bmi.n	800c8a6 <_fflush_r+0x3a>
 800c89c:	0599      	lsls	r1, r3, #22
 800c89e:	d402      	bmi.n	800c8a6 <_fflush_r+0x3a>
 800c8a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8a2:	f000 f915 	bl	800cad0 <__retarget_lock_acquire_recursive>
 800c8a6:	4628      	mov	r0, r5
 800c8a8:	4621      	mov	r1, r4
 800c8aa:	f7ff ff59 	bl	800c760 <__sflush_r>
 800c8ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8b0:	07da      	lsls	r2, r3, #31
 800c8b2:	4605      	mov	r5, r0
 800c8b4:	d4e0      	bmi.n	800c878 <_fflush_r+0xc>
 800c8b6:	89a3      	ldrh	r3, [r4, #12]
 800c8b8:	059b      	lsls	r3, r3, #22
 800c8ba:	d4dd      	bmi.n	800c878 <_fflush_r+0xc>
 800c8bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8be:	f000 f908 	bl	800cad2 <__retarget_lock_release_recursive>
 800c8c2:	e7d9      	b.n	800c878 <_fflush_r+0xc>
 800c8c4:	4b05      	ldr	r3, [pc, #20]	; (800c8dc <_fflush_r+0x70>)
 800c8c6:	429c      	cmp	r4, r3
 800c8c8:	d101      	bne.n	800c8ce <_fflush_r+0x62>
 800c8ca:	68ac      	ldr	r4, [r5, #8]
 800c8cc:	e7df      	b.n	800c88e <_fflush_r+0x22>
 800c8ce:	4b04      	ldr	r3, [pc, #16]	; (800c8e0 <_fflush_r+0x74>)
 800c8d0:	429c      	cmp	r4, r3
 800c8d2:	bf08      	it	eq
 800c8d4:	68ec      	ldreq	r4, [r5, #12]
 800c8d6:	e7da      	b.n	800c88e <_fflush_r+0x22>
 800c8d8:	0800e69c 	.word	0x0800e69c
 800c8dc:	0800e6bc 	.word	0x0800e6bc
 800c8e0:	0800e67c 	.word	0x0800e67c

0800c8e4 <std>:
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	b510      	push	{r4, lr}
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	e9c0 3300 	strd	r3, r3, [r0]
 800c8ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c8f2:	6083      	str	r3, [r0, #8]
 800c8f4:	8181      	strh	r1, [r0, #12]
 800c8f6:	6643      	str	r3, [r0, #100]	; 0x64
 800c8f8:	81c2      	strh	r2, [r0, #14]
 800c8fa:	6183      	str	r3, [r0, #24]
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	2208      	movs	r2, #8
 800c900:	305c      	adds	r0, #92	; 0x5c
 800c902:	f7fd fb5b 	bl	8009fbc <memset>
 800c906:	4b05      	ldr	r3, [pc, #20]	; (800c91c <std+0x38>)
 800c908:	6263      	str	r3, [r4, #36]	; 0x24
 800c90a:	4b05      	ldr	r3, [pc, #20]	; (800c920 <std+0x3c>)
 800c90c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c90e:	4b05      	ldr	r3, [pc, #20]	; (800c924 <std+0x40>)
 800c910:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c912:	4b05      	ldr	r3, [pc, #20]	; (800c928 <std+0x44>)
 800c914:	6224      	str	r4, [r4, #32]
 800c916:	6323      	str	r3, [r4, #48]	; 0x30
 800c918:	bd10      	pop	{r4, pc}
 800c91a:	bf00      	nop
 800c91c:	0800cc39 	.word	0x0800cc39
 800c920:	0800cc5b 	.word	0x0800cc5b
 800c924:	0800cc93 	.word	0x0800cc93
 800c928:	0800ccb7 	.word	0x0800ccb7

0800c92c <_cleanup_r>:
 800c92c:	4901      	ldr	r1, [pc, #4]	; (800c934 <_cleanup_r+0x8>)
 800c92e:	f000 b8af 	b.w	800ca90 <_fwalk_reent>
 800c932:	bf00      	nop
 800c934:	0800c86d 	.word	0x0800c86d

0800c938 <__sfmoreglue>:
 800c938:	b570      	push	{r4, r5, r6, lr}
 800c93a:	2268      	movs	r2, #104	; 0x68
 800c93c:	1e4d      	subs	r5, r1, #1
 800c93e:	4355      	muls	r5, r2
 800c940:	460e      	mov	r6, r1
 800c942:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c946:	f7ff fa65 	bl	800be14 <_malloc_r>
 800c94a:	4604      	mov	r4, r0
 800c94c:	b140      	cbz	r0, 800c960 <__sfmoreglue+0x28>
 800c94e:	2100      	movs	r1, #0
 800c950:	e9c0 1600 	strd	r1, r6, [r0]
 800c954:	300c      	adds	r0, #12
 800c956:	60a0      	str	r0, [r4, #8]
 800c958:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c95c:	f7fd fb2e 	bl	8009fbc <memset>
 800c960:	4620      	mov	r0, r4
 800c962:	bd70      	pop	{r4, r5, r6, pc}

0800c964 <__sfp_lock_acquire>:
 800c964:	4801      	ldr	r0, [pc, #4]	; (800c96c <__sfp_lock_acquire+0x8>)
 800c966:	f000 b8b3 	b.w	800cad0 <__retarget_lock_acquire_recursive>
 800c96a:	bf00      	nop
 800c96c:	200009a1 	.word	0x200009a1

0800c970 <__sfp_lock_release>:
 800c970:	4801      	ldr	r0, [pc, #4]	; (800c978 <__sfp_lock_release+0x8>)
 800c972:	f000 b8ae 	b.w	800cad2 <__retarget_lock_release_recursive>
 800c976:	bf00      	nop
 800c978:	200009a1 	.word	0x200009a1

0800c97c <__sinit_lock_acquire>:
 800c97c:	4801      	ldr	r0, [pc, #4]	; (800c984 <__sinit_lock_acquire+0x8>)
 800c97e:	f000 b8a7 	b.w	800cad0 <__retarget_lock_acquire_recursive>
 800c982:	bf00      	nop
 800c984:	200009a2 	.word	0x200009a2

0800c988 <__sinit_lock_release>:
 800c988:	4801      	ldr	r0, [pc, #4]	; (800c990 <__sinit_lock_release+0x8>)
 800c98a:	f000 b8a2 	b.w	800cad2 <__retarget_lock_release_recursive>
 800c98e:	bf00      	nop
 800c990:	200009a2 	.word	0x200009a2

0800c994 <__sinit>:
 800c994:	b510      	push	{r4, lr}
 800c996:	4604      	mov	r4, r0
 800c998:	f7ff fff0 	bl	800c97c <__sinit_lock_acquire>
 800c99c:	69a3      	ldr	r3, [r4, #24]
 800c99e:	b11b      	cbz	r3, 800c9a8 <__sinit+0x14>
 800c9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9a4:	f7ff bff0 	b.w	800c988 <__sinit_lock_release>
 800c9a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c9ac:	6523      	str	r3, [r4, #80]	; 0x50
 800c9ae:	4b13      	ldr	r3, [pc, #76]	; (800c9fc <__sinit+0x68>)
 800c9b0:	4a13      	ldr	r2, [pc, #76]	; (800ca00 <__sinit+0x6c>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c9b6:	42a3      	cmp	r3, r4
 800c9b8:	bf04      	itt	eq
 800c9ba:	2301      	moveq	r3, #1
 800c9bc:	61a3      	streq	r3, [r4, #24]
 800c9be:	4620      	mov	r0, r4
 800c9c0:	f000 f820 	bl	800ca04 <__sfp>
 800c9c4:	6060      	str	r0, [r4, #4]
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f000 f81c 	bl	800ca04 <__sfp>
 800c9cc:	60a0      	str	r0, [r4, #8]
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f000 f818 	bl	800ca04 <__sfp>
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	60e0      	str	r0, [r4, #12]
 800c9d8:	2104      	movs	r1, #4
 800c9da:	6860      	ldr	r0, [r4, #4]
 800c9dc:	f7ff ff82 	bl	800c8e4 <std>
 800c9e0:	68a0      	ldr	r0, [r4, #8]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	2109      	movs	r1, #9
 800c9e6:	f7ff ff7d 	bl	800c8e4 <std>
 800c9ea:	68e0      	ldr	r0, [r4, #12]
 800c9ec:	2202      	movs	r2, #2
 800c9ee:	2112      	movs	r1, #18
 800c9f0:	f7ff ff78 	bl	800c8e4 <std>
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	61a3      	str	r3, [r4, #24]
 800c9f8:	e7d2      	b.n	800c9a0 <__sinit+0xc>
 800c9fa:	bf00      	nop
 800c9fc:	0800e300 	.word	0x0800e300
 800ca00:	0800c92d 	.word	0x0800c92d

0800ca04 <__sfp>:
 800ca04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca06:	4607      	mov	r7, r0
 800ca08:	f7ff ffac 	bl	800c964 <__sfp_lock_acquire>
 800ca0c:	4b1e      	ldr	r3, [pc, #120]	; (800ca88 <__sfp+0x84>)
 800ca0e:	681e      	ldr	r6, [r3, #0]
 800ca10:	69b3      	ldr	r3, [r6, #24]
 800ca12:	b913      	cbnz	r3, 800ca1a <__sfp+0x16>
 800ca14:	4630      	mov	r0, r6
 800ca16:	f7ff ffbd 	bl	800c994 <__sinit>
 800ca1a:	3648      	adds	r6, #72	; 0x48
 800ca1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ca20:	3b01      	subs	r3, #1
 800ca22:	d503      	bpl.n	800ca2c <__sfp+0x28>
 800ca24:	6833      	ldr	r3, [r6, #0]
 800ca26:	b30b      	cbz	r3, 800ca6c <__sfp+0x68>
 800ca28:	6836      	ldr	r6, [r6, #0]
 800ca2a:	e7f7      	b.n	800ca1c <__sfp+0x18>
 800ca2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ca30:	b9d5      	cbnz	r5, 800ca68 <__sfp+0x64>
 800ca32:	4b16      	ldr	r3, [pc, #88]	; (800ca8c <__sfp+0x88>)
 800ca34:	60e3      	str	r3, [r4, #12]
 800ca36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ca3a:	6665      	str	r5, [r4, #100]	; 0x64
 800ca3c:	f000 f847 	bl	800cace <__retarget_lock_init_recursive>
 800ca40:	f7ff ff96 	bl	800c970 <__sfp_lock_release>
 800ca44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ca48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ca4c:	6025      	str	r5, [r4, #0]
 800ca4e:	61a5      	str	r5, [r4, #24]
 800ca50:	2208      	movs	r2, #8
 800ca52:	4629      	mov	r1, r5
 800ca54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ca58:	f7fd fab0 	bl	8009fbc <memset>
 800ca5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ca60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ca64:	4620      	mov	r0, r4
 800ca66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca68:	3468      	adds	r4, #104	; 0x68
 800ca6a:	e7d9      	b.n	800ca20 <__sfp+0x1c>
 800ca6c:	2104      	movs	r1, #4
 800ca6e:	4638      	mov	r0, r7
 800ca70:	f7ff ff62 	bl	800c938 <__sfmoreglue>
 800ca74:	4604      	mov	r4, r0
 800ca76:	6030      	str	r0, [r6, #0]
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d1d5      	bne.n	800ca28 <__sfp+0x24>
 800ca7c:	f7ff ff78 	bl	800c970 <__sfp_lock_release>
 800ca80:	230c      	movs	r3, #12
 800ca82:	603b      	str	r3, [r7, #0]
 800ca84:	e7ee      	b.n	800ca64 <__sfp+0x60>
 800ca86:	bf00      	nop
 800ca88:	0800e300 	.word	0x0800e300
 800ca8c:	ffff0001 	.word	0xffff0001

0800ca90 <_fwalk_reent>:
 800ca90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca94:	4606      	mov	r6, r0
 800ca96:	4688      	mov	r8, r1
 800ca98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ca9c:	2700      	movs	r7, #0
 800ca9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800caa2:	f1b9 0901 	subs.w	r9, r9, #1
 800caa6:	d505      	bpl.n	800cab4 <_fwalk_reent+0x24>
 800caa8:	6824      	ldr	r4, [r4, #0]
 800caaa:	2c00      	cmp	r4, #0
 800caac:	d1f7      	bne.n	800ca9e <_fwalk_reent+0xe>
 800caae:	4638      	mov	r0, r7
 800cab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cab4:	89ab      	ldrh	r3, [r5, #12]
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d907      	bls.n	800caca <_fwalk_reent+0x3a>
 800caba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cabe:	3301      	adds	r3, #1
 800cac0:	d003      	beq.n	800caca <_fwalk_reent+0x3a>
 800cac2:	4629      	mov	r1, r5
 800cac4:	4630      	mov	r0, r6
 800cac6:	47c0      	blx	r8
 800cac8:	4307      	orrs	r7, r0
 800caca:	3568      	adds	r5, #104	; 0x68
 800cacc:	e7e9      	b.n	800caa2 <_fwalk_reent+0x12>

0800cace <__retarget_lock_init_recursive>:
 800cace:	4770      	bx	lr

0800cad0 <__retarget_lock_acquire_recursive>:
 800cad0:	4770      	bx	lr

0800cad2 <__retarget_lock_release_recursive>:
 800cad2:	4770      	bx	lr

0800cad4 <__swhatbuf_r>:
 800cad4:	b570      	push	{r4, r5, r6, lr}
 800cad6:	460e      	mov	r6, r1
 800cad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cadc:	2900      	cmp	r1, #0
 800cade:	b096      	sub	sp, #88	; 0x58
 800cae0:	4614      	mov	r4, r2
 800cae2:	461d      	mov	r5, r3
 800cae4:	da08      	bge.n	800caf8 <__swhatbuf_r+0x24>
 800cae6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800caea:	2200      	movs	r2, #0
 800caec:	602a      	str	r2, [r5, #0]
 800caee:	061a      	lsls	r2, r3, #24
 800caf0:	d410      	bmi.n	800cb14 <__swhatbuf_r+0x40>
 800caf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caf6:	e00e      	b.n	800cb16 <__swhatbuf_r+0x42>
 800caf8:	466a      	mov	r2, sp
 800cafa:	f000 f903 	bl	800cd04 <_fstat_r>
 800cafe:	2800      	cmp	r0, #0
 800cb00:	dbf1      	blt.n	800cae6 <__swhatbuf_r+0x12>
 800cb02:	9a01      	ldr	r2, [sp, #4]
 800cb04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb0c:	425a      	negs	r2, r3
 800cb0e:	415a      	adcs	r2, r3
 800cb10:	602a      	str	r2, [r5, #0]
 800cb12:	e7ee      	b.n	800caf2 <__swhatbuf_r+0x1e>
 800cb14:	2340      	movs	r3, #64	; 0x40
 800cb16:	2000      	movs	r0, #0
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	b016      	add	sp, #88	; 0x58
 800cb1c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cb20 <__smakebuf_r>:
 800cb20:	898b      	ldrh	r3, [r1, #12]
 800cb22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb24:	079d      	lsls	r5, r3, #30
 800cb26:	4606      	mov	r6, r0
 800cb28:	460c      	mov	r4, r1
 800cb2a:	d507      	bpl.n	800cb3c <__smakebuf_r+0x1c>
 800cb2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	6123      	str	r3, [r4, #16]
 800cb34:	2301      	movs	r3, #1
 800cb36:	6163      	str	r3, [r4, #20]
 800cb38:	b002      	add	sp, #8
 800cb3a:	bd70      	pop	{r4, r5, r6, pc}
 800cb3c:	ab01      	add	r3, sp, #4
 800cb3e:	466a      	mov	r2, sp
 800cb40:	f7ff ffc8 	bl	800cad4 <__swhatbuf_r>
 800cb44:	9900      	ldr	r1, [sp, #0]
 800cb46:	4605      	mov	r5, r0
 800cb48:	4630      	mov	r0, r6
 800cb4a:	f7ff f963 	bl	800be14 <_malloc_r>
 800cb4e:	b948      	cbnz	r0, 800cb64 <__smakebuf_r+0x44>
 800cb50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb54:	059a      	lsls	r2, r3, #22
 800cb56:	d4ef      	bmi.n	800cb38 <__smakebuf_r+0x18>
 800cb58:	f023 0303 	bic.w	r3, r3, #3
 800cb5c:	f043 0302 	orr.w	r3, r3, #2
 800cb60:	81a3      	strh	r3, [r4, #12]
 800cb62:	e7e3      	b.n	800cb2c <__smakebuf_r+0xc>
 800cb64:	4b0d      	ldr	r3, [pc, #52]	; (800cb9c <__smakebuf_r+0x7c>)
 800cb66:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb68:	89a3      	ldrh	r3, [r4, #12]
 800cb6a:	6020      	str	r0, [r4, #0]
 800cb6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb70:	81a3      	strh	r3, [r4, #12]
 800cb72:	9b00      	ldr	r3, [sp, #0]
 800cb74:	6163      	str	r3, [r4, #20]
 800cb76:	9b01      	ldr	r3, [sp, #4]
 800cb78:	6120      	str	r0, [r4, #16]
 800cb7a:	b15b      	cbz	r3, 800cb94 <__smakebuf_r+0x74>
 800cb7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb80:	4630      	mov	r0, r6
 800cb82:	f000 f8d1 	bl	800cd28 <_isatty_r>
 800cb86:	b128      	cbz	r0, 800cb94 <__smakebuf_r+0x74>
 800cb88:	89a3      	ldrh	r3, [r4, #12]
 800cb8a:	f023 0303 	bic.w	r3, r3, #3
 800cb8e:	f043 0301 	orr.w	r3, r3, #1
 800cb92:	81a3      	strh	r3, [r4, #12]
 800cb94:	89a0      	ldrh	r0, [r4, #12]
 800cb96:	4305      	orrs	r5, r0
 800cb98:	81a5      	strh	r5, [r4, #12]
 800cb9a:	e7cd      	b.n	800cb38 <__smakebuf_r+0x18>
 800cb9c:	0800c92d 	.word	0x0800c92d

0800cba0 <_malloc_usable_size_r>:
 800cba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cba4:	1f18      	subs	r0, r3, #4
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	bfbc      	itt	lt
 800cbaa:	580b      	ldrlt	r3, [r1, r0]
 800cbac:	18c0      	addlt	r0, r0, r3
 800cbae:	4770      	bx	lr

0800cbb0 <_raise_r>:
 800cbb0:	291f      	cmp	r1, #31
 800cbb2:	b538      	push	{r3, r4, r5, lr}
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	460d      	mov	r5, r1
 800cbb8:	d904      	bls.n	800cbc4 <_raise_r+0x14>
 800cbba:	2316      	movs	r3, #22
 800cbbc:	6003      	str	r3, [r0, #0]
 800cbbe:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc2:	bd38      	pop	{r3, r4, r5, pc}
 800cbc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cbc6:	b112      	cbz	r2, 800cbce <_raise_r+0x1e>
 800cbc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbcc:	b94b      	cbnz	r3, 800cbe2 <_raise_r+0x32>
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f000 f830 	bl	800cc34 <_getpid_r>
 800cbd4:	462a      	mov	r2, r5
 800cbd6:	4601      	mov	r1, r0
 800cbd8:	4620      	mov	r0, r4
 800cbda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbde:	f000 b817 	b.w	800cc10 <_kill_r>
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d00a      	beq.n	800cbfc <_raise_r+0x4c>
 800cbe6:	1c59      	adds	r1, r3, #1
 800cbe8:	d103      	bne.n	800cbf2 <_raise_r+0x42>
 800cbea:	2316      	movs	r3, #22
 800cbec:	6003      	str	r3, [r0, #0]
 800cbee:	2001      	movs	r0, #1
 800cbf0:	e7e7      	b.n	800cbc2 <_raise_r+0x12>
 800cbf2:	2400      	movs	r4, #0
 800cbf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	4798      	blx	r3
 800cbfc:	2000      	movs	r0, #0
 800cbfe:	e7e0      	b.n	800cbc2 <_raise_r+0x12>

0800cc00 <raise>:
 800cc00:	4b02      	ldr	r3, [pc, #8]	; (800cc0c <raise+0xc>)
 800cc02:	4601      	mov	r1, r0
 800cc04:	6818      	ldr	r0, [r3, #0]
 800cc06:	f7ff bfd3 	b.w	800cbb0 <_raise_r>
 800cc0a:	bf00      	nop
 800cc0c:	20000060 	.word	0x20000060

0800cc10 <_kill_r>:
 800cc10:	b538      	push	{r3, r4, r5, lr}
 800cc12:	4d07      	ldr	r5, [pc, #28]	; (800cc30 <_kill_r+0x20>)
 800cc14:	2300      	movs	r3, #0
 800cc16:	4604      	mov	r4, r0
 800cc18:	4608      	mov	r0, r1
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	602b      	str	r3, [r5, #0]
 800cc1e:	f7f7 fb0d 	bl	800423c <_kill>
 800cc22:	1c43      	adds	r3, r0, #1
 800cc24:	d102      	bne.n	800cc2c <_kill_r+0x1c>
 800cc26:	682b      	ldr	r3, [r5, #0]
 800cc28:	b103      	cbz	r3, 800cc2c <_kill_r+0x1c>
 800cc2a:	6023      	str	r3, [r4, #0]
 800cc2c:	bd38      	pop	{r3, r4, r5, pc}
 800cc2e:	bf00      	nop
 800cc30:	2000099c 	.word	0x2000099c

0800cc34 <_getpid_r>:
 800cc34:	f7f7 bafa 	b.w	800422c <_getpid>

0800cc38 <__sread>:
 800cc38:	b510      	push	{r4, lr}
 800cc3a:	460c      	mov	r4, r1
 800cc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc40:	f000 f894 	bl	800cd6c <_read_r>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	bfab      	itete	ge
 800cc48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc4a:	89a3      	ldrhlt	r3, [r4, #12]
 800cc4c:	181b      	addge	r3, r3, r0
 800cc4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc52:	bfac      	ite	ge
 800cc54:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc56:	81a3      	strhlt	r3, [r4, #12]
 800cc58:	bd10      	pop	{r4, pc}

0800cc5a <__swrite>:
 800cc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc5e:	461f      	mov	r7, r3
 800cc60:	898b      	ldrh	r3, [r1, #12]
 800cc62:	05db      	lsls	r3, r3, #23
 800cc64:	4605      	mov	r5, r0
 800cc66:	460c      	mov	r4, r1
 800cc68:	4616      	mov	r6, r2
 800cc6a:	d505      	bpl.n	800cc78 <__swrite+0x1e>
 800cc6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc70:	2302      	movs	r3, #2
 800cc72:	2200      	movs	r2, #0
 800cc74:	f000 f868 	bl	800cd48 <_lseek_r>
 800cc78:	89a3      	ldrh	r3, [r4, #12]
 800cc7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc82:	81a3      	strh	r3, [r4, #12]
 800cc84:	4632      	mov	r2, r6
 800cc86:	463b      	mov	r3, r7
 800cc88:	4628      	mov	r0, r5
 800cc8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc8e:	f000 b817 	b.w	800ccc0 <_write_r>

0800cc92 <__sseek>:
 800cc92:	b510      	push	{r4, lr}
 800cc94:	460c      	mov	r4, r1
 800cc96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc9a:	f000 f855 	bl	800cd48 <_lseek_r>
 800cc9e:	1c43      	adds	r3, r0, #1
 800cca0:	89a3      	ldrh	r3, [r4, #12]
 800cca2:	bf15      	itete	ne
 800cca4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ccaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ccae:	81a3      	strheq	r3, [r4, #12]
 800ccb0:	bf18      	it	ne
 800ccb2:	81a3      	strhne	r3, [r4, #12]
 800ccb4:	bd10      	pop	{r4, pc}

0800ccb6 <__sclose>:
 800ccb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccba:	f000 b813 	b.w	800cce4 <_close_r>
	...

0800ccc0 <_write_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	4d07      	ldr	r5, [pc, #28]	; (800cce0 <_write_r+0x20>)
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	4608      	mov	r0, r1
 800ccc8:	4611      	mov	r1, r2
 800ccca:	2200      	movs	r2, #0
 800cccc:	602a      	str	r2, [r5, #0]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	f7f7 faeb 	bl	80042aa <_write>
 800ccd4:	1c43      	adds	r3, r0, #1
 800ccd6:	d102      	bne.n	800ccde <_write_r+0x1e>
 800ccd8:	682b      	ldr	r3, [r5, #0]
 800ccda:	b103      	cbz	r3, 800ccde <_write_r+0x1e>
 800ccdc:	6023      	str	r3, [r4, #0]
 800ccde:	bd38      	pop	{r3, r4, r5, pc}
 800cce0:	2000099c 	.word	0x2000099c

0800cce4 <_close_r>:
 800cce4:	b538      	push	{r3, r4, r5, lr}
 800cce6:	4d06      	ldr	r5, [pc, #24]	; (800cd00 <_close_r+0x1c>)
 800cce8:	2300      	movs	r3, #0
 800ccea:	4604      	mov	r4, r0
 800ccec:	4608      	mov	r0, r1
 800ccee:	602b      	str	r3, [r5, #0]
 800ccf0:	f7f7 faf7 	bl	80042e2 <_close>
 800ccf4:	1c43      	adds	r3, r0, #1
 800ccf6:	d102      	bne.n	800ccfe <_close_r+0x1a>
 800ccf8:	682b      	ldr	r3, [r5, #0]
 800ccfa:	b103      	cbz	r3, 800ccfe <_close_r+0x1a>
 800ccfc:	6023      	str	r3, [r4, #0]
 800ccfe:	bd38      	pop	{r3, r4, r5, pc}
 800cd00:	2000099c 	.word	0x2000099c

0800cd04 <_fstat_r>:
 800cd04:	b538      	push	{r3, r4, r5, lr}
 800cd06:	4d07      	ldr	r5, [pc, #28]	; (800cd24 <_fstat_r+0x20>)
 800cd08:	2300      	movs	r3, #0
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	4608      	mov	r0, r1
 800cd0e:	4611      	mov	r1, r2
 800cd10:	602b      	str	r3, [r5, #0]
 800cd12:	f7f7 faf2 	bl	80042fa <_fstat>
 800cd16:	1c43      	adds	r3, r0, #1
 800cd18:	d102      	bne.n	800cd20 <_fstat_r+0x1c>
 800cd1a:	682b      	ldr	r3, [r5, #0]
 800cd1c:	b103      	cbz	r3, 800cd20 <_fstat_r+0x1c>
 800cd1e:	6023      	str	r3, [r4, #0]
 800cd20:	bd38      	pop	{r3, r4, r5, pc}
 800cd22:	bf00      	nop
 800cd24:	2000099c 	.word	0x2000099c

0800cd28 <_isatty_r>:
 800cd28:	b538      	push	{r3, r4, r5, lr}
 800cd2a:	4d06      	ldr	r5, [pc, #24]	; (800cd44 <_isatty_r+0x1c>)
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	4604      	mov	r4, r0
 800cd30:	4608      	mov	r0, r1
 800cd32:	602b      	str	r3, [r5, #0]
 800cd34:	f7f7 faf1 	bl	800431a <_isatty>
 800cd38:	1c43      	adds	r3, r0, #1
 800cd3a:	d102      	bne.n	800cd42 <_isatty_r+0x1a>
 800cd3c:	682b      	ldr	r3, [r5, #0]
 800cd3e:	b103      	cbz	r3, 800cd42 <_isatty_r+0x1a>
 800cd40:	6023      	str	r3, [r4, #0]
 800cd42:	bd38      	pop	{r3, r4, r5, pc}
 800cd44:	2000099c 	.word	0x2000099c

0800cd48 <_lseek_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	4d07      	ldr	r5, [pc, #28]	; (800cd68 <_lseek_r+0x20>)
 800cd4c:	4604      	mov	r4, r0
 800cd4e:	4608      	mov	r0, r1
 800cd50:	4611      	mov	r1, r2
 800cd52:	2200      	movs	r2, #0
 800cd54:	602a      	str	r2, [r5, #0]
 800cd56:	461a      	mov	r2, r3
 800cd58:	f7f7 faea 	bl	8004330 <_lseek>
 800cd5c:	1c43      	adds	r3, r0, #1
 800cd5e:	d102      	bne.n	800cd66 <_lseek_r+0x1e>
 800cd60:	682b      	ldr	r3, [r5, #0]
 800cd62:	b103      	cbz	r3, 800cd66 <_lseek_r+0x1e>
 800cd64:	6023      	str	r3, [r4, #0]
 800cd66:	bd38      	pop	{r3, r4, r5, pc}
 800cd68:	2000099c 	.word	0x2000099c

0800cd6c <_read_r>:
 800cd6c:	b538      	push	{r3, r4, r5, lr}
 800cd6e:	4d07      	ldr	r5, [pc, #28]	; (800cd8c <_read_r+0x20>)
 800cd70:	4604      	mov	r4, r0
 800cd72:	4608      	mov	r0, r1
 800cd74:	4611      	mov	r1, r2
 800cd76:	2200      	movs	r2, #0
 800cd78:	602a      	str	r2, [r5, #0]
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	f7f7 fa78 	bl	8004270 <_read>
 800cd80:	1c43      	adds	r3, r0, #1
 800cd82:	d102      	bne.n	800cd8a <_read_r+0x1e>
 800cd84:	682b      	ldr	r3, [r5, #0]
 800cd86:	b103      	cbz	r3, 800cd8a <_read_r+0x1e>
 800cd88:	6023      	str	r3, [r4, #0]
 800cd8a:	bd38      	pop	{r3, r4, r5, pc}
 800cd8c:	2000099c 	.word	0x2000099c

0800cd90 <atan>:
 800cd90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd94:	ec55 4b10 	vmov	r4, r5, d0
 800cd98:	4bc3      	ldr	r3, [pc, #780]	; (800d0a8 <atan+0x318>)
 800cd9a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cd9e:	429e      	cmp	r6, r3
 800cda0:	46ab      	mov	fp, r5
 800cda2:	dd18      	ble.n	800cdd6 <atan+0x46>
 800cda4:	4bc1      	ldr	r3, [pc, #772]	; (800d0ac <atan+0x31c>)
 800cda6:	429e      	cmp	r6, r3
 800cda8:	dc01      	bgt.n	800cdae <atan+0x1e>
 800cdaa:	d109      	bne.n	800cdc0 <atan+0x30>
 800cdac:	b144      	cbz	r4, 800cdc0 <atan+0x30>
 800cdae:	4622      	mov	r2, r4
 800cdb0:	462b      	mov	r3, r5
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	4629      	mov	r1, r5
 800cdb6:	f7f3 fa89 	bl	80002cc <__adddf3>
 800cdba:	4604      	mov	r4, r0
 800cdbc:	460d      	mov	r5, r1
 800cdbe:	e006      	b.n	800cdce <atan+0x3e>
 800cdc0:	f1bb 0f00 	cmp.w	fp, #0
 800cdc4:	f300 8131 	bgt.w	800d02a <atan+0x29a>
 800cdc8:	a59b      	add	r5, pc, #620	; (adr r5, 800d038 <atan+0x2a8>)
 800cdca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cdce:	ec45 4b10 	vmov	d0, r4, r5
 800cdd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdd6:	4bb6      	ldr	r3, [pc, #728]	; (800d0b0 <atan+0x320>)
 800cdd8:	429e      	cmp	r6, r3
 800cdda:	dc14      	bgt.n	800ce06 <atan+0x76>
 800cddc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cde0:	429e      	cmp	r6, r3
 800cde2:	dc0d      	bgt.n	800ce00 <atan+0x70>
 800cde4:	a396      	add	r3, pc, #600	; (adr r3, 800d040 <atan+0x2b0>)
 800cde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdea:	ee10 0a10 	vmov	r0, s0
 800cdee:	4629      	mov	r1, r5
 800cdf0:	f7f3 fa6c 	bl	80002cc <__adddf3>
 800cdf4:	4baf      	ldr	r3, [pc, #700]	; (800d0b4 <atan+0x324>)
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f7f3 feae 	bl	8000b58 <__aeabi_dcmpgt>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	d1e6      	bne.n	800cdce <atan+0x3e>
 800ce00:	f04f 3aff 	mov.w	sl, #4294967295
 800ce04:	e02b      	b.n	800ce5e <atan+0xce>
 800ce06:	f000 f963 	bl	800d0d0 <fabs>
 800ce0a:	4bab      	ldr	r3, [pc, #684]	; (800d0b8 <atan+0x328>)
 800ce0c:	429e      	cmp	r6, r3
 800ce0e:	ec55 4b10 	vmov	r4, r5, d0
 800ce12:	f300 80bf 	bgt.w	800cf94 <atan+0x204>
 800ce16:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ce1a:	429e      	cmp	r6, r3
 800ce1c:	f300 80a0 	bgt.w	800cf60 <atan+0x1d0>
 800ce20:	ee10 2a10 	vmov	r2, s0
 800ce24:	ee10 0a10 	vmov	r0, s0
 800ce28:	462b      	mov	r3, r5
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	f7f3 fa4e 	bl	80002cc <__adddf3>
 800ce30:	4ba0      	ldr	r3, [pc, #640]	; (800d0b4 <atan+0x324>)
 800ce32:	2200      	movs	r2, #0
 800ce34:	f7f3 fa48 	bl	80002c8 <__aeabi_dsub>
 800ce38:	2200      	movs	r2, #0
 800ce3a:	4606      	mov	r6, r0
 800ce3c:	460f      	mov	r7, r1
 800ce3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ce42:	4620      	mov	r0, r4
 800ce44:	4629      	mov	r1, r5
 800ce46:	f7f3 fa41 	bl	80002cc <__adddf3>
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	4630      	mov	r0, r6
 800ce50:	4639      	mov	r1, r7
 800ce52:	f7f3 fd1b 	bl	800088c <__aeabi_ddiv>
 800ce56:	f04f 0a00 	mov.w	sl, #0
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	460d      	mov	r5, r1
 800ce5e:	4622      	mov	r2, r4
 800ce60:	462b      	mov	r3, r5
 800ce62:	4620      	mov	r0, r4
 800ce64:	4629      	mov	r1, r5
 800ce66:	f7f3 fbe7 	bl	8000638 <__aeabi_dmul>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	4680      	mov	r8, r0
 800ce70:	4689      	mov	r9, r1
 800ce72:	f7f3 fbe1 	bl	8000638 <__aeabi_dmul>
 800ce76:	a374      	add	r3, pc, #464	; (adr r3, 800d048 <atan+0x2b8>)
 800ce78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce7c:	4606      	mov	r6, r0
 800ce7e:	460f      	mov	r7, r1
 800ce80:	f7f3 fbda 	bl	8000638 <__aeabi_dmul>
 800ce84:	a372      	add	r3, pc, #456	; (adr r3, 800d050 <atan+0x2c0>)
 800ce86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8a:	f7f3 fa1f 	bl	80002cc <__adddf3>
 800ce8e:	4632      	mov	r2, r6
 800ce90:	463b      	mov	r3, r7
 800ce92:	f7f3 fbd1 	bl	8000638 <__aeabi_dmul>
 800ce96:	a370      	add	r3, pc, #448	; (adr r3, 800d058 <atan+0x2c8>)
 800ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9c:	f7f3 fa16 	bl	80002cc <__adddf3>
 800cea0:	4632      	mov	r2, r6
 800cea2:	463b      	mov	r3, r7
 800cea4:	f7f3 fbc8 	bl	8000638 <__aeabi_dmul>
 800cea8:	a36d      	add	r3, pc, #436	; (adr r3, 800d060 <atan+0x2d0>)
 800ceaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceae:	f7f3 fa0d 	bl	80002cc <__adddf3>
 800ceb2:	4632      	mov	r2, r6
 800ceb4:	463b      	mov	r3, r7
 800ceb6:	f7f3 fbbf 	bl	8000638 <__aeabi_dmul>
 800ceba:	a36b      	add	r3, pc, #428	; (adr r3, 800d068 <atan+0x2d8>)
 800cebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec0:	f7f3 fa04 	bl	80002cc <__adddf3>
 800cec4:	4632      	mov	r2, r6
 800cec6:	463b      	mov	r3, r7
 800cec8:	f7f3 fbb6 	bl	8000638 <__aeabi_dmul>
 800cecc:	a368      	add	r3, pc, #416	; (adr r3, 800d070 <atan+0x2e0>)
 800cece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced2:	f7f3 f9fb 	bl	80002cc <__adddf3>
 800ced6:	4642      	mov	r2, r8
 800ced8:	464b      	mov	r3, r9
 800ceda:	f7f3 fbad 	bl	8000638 <__aeabi_dmul>
 800cede:	a366      	add	r3, pc, #408	; (adr r3, 800d078 <atan+0x2e8>)
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	4680      	mov	r8, r0
 800cee6:	4689      	mov	r9, r1
 800cee8:	4630      	mov	r0, r6
 800ceea:	4639      	mov	r1, r7
 800ceec:	f7f3 fba4 	bl	8000638 <__aeabi_dmul>
 800cef0:	a363      	add	r3, pc, #396	; (adr r3, 800d080 <atan+0x2f0>)
 800cef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef6:	f7f3 f9e7 	bl	80002c8 <__aeabi_dsub>
 800cefa:	4632      	mov	r2, r6
 800cefc:	463b      	mov	r3, r7
 800cefe:	f7f3 fb9b 	bl	8000638 <__aeabi_dmul>
 800cf02:	a361      	add	r3, pc, #388	; (adr r3, 800d088 <atan+0x2f8>)
 800cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf08:	f7f3 f9de 	bl	80002c8 <__aeabi_dsub>
 800cf0c:	4632      	mov	r2, r6
 800cf0e:	463b      	mov	r3, r7
 800cf10:	f7f3 fb92 	bl	8000638 <__aeabi_dmul>
 800cf14:	a35e      	add	r3, pc, #376	; (adr r3, 800d090 <atan+0x300>)
 800cf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1a:	f7f3 f9d5 	bl	80002c8 <__aeabi_dsub>
 800cf1e:	4632      	mov	r2, r6
 800cf20:	463b      	mov	r3, r7
 800cf22:	f7f3 fb89 	bl	8000638 <__aeabi_dmul>
 800cf26:	a35c      	add	r3, pc, #368	; (adr r3, 800d098 <atan+0x308>)
 800cf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2c:	f7f3 f9cc 	bl	80002c8 <__aeabi_dsub>
 800cf30:	4632      	mov	r2, r6
 800cf32:	463b      	mov	r3, r7
 800cf34:	f7f3 fb80 	bl	8000638 <__aeabi_dmul>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	4640      	mov	r0, r8
 800cf3e:	4649      	mov	r1, r9
 800cf40:	f7f3 f9c4 	bl	80002cc <__adddf3>
 800cf44:	4622      	mov	r2, r4
 800cf46:	462b      	mov	r3, r5
 800cf48:	f7f3 fb76 	bl	8000638 <__aeabi_dmul>
 800cf4c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cf50:	4602      	mov	r2, r0
 800cf52:	460b      	mov	r3, r1
 800cf54:	d14b      	bne.n	800cfee <atan+0x25e>
 800cf56:	4620      	mov	r0, r4
 800cf58:	4629      	mov	r1, r5
 800cf5a:	f7f3 f9b5 	bl	80002c8 <__aeabi_dsub>
 800cf5e:	e72c      	b.n	800cdba <atan+0x2a>
 800cf60:	ee10 0a10 	vmov	r0, s0
 800cf64:	4b53      	ldr	r3, [pc, #332]	; (800d0b4 <atan+0x324>)
 800cf66:	2200      	movs	r2, #0
 800cf68:	4629      	mov	r1, r5
 800cf6a:	f7f3 f9ad 	bl	80002c8 <__aeabi_dsub>
 800cf6e:	4b51      	ldr	r3, [pc, #324]	; (800d0b4 <atan+0x324>)
 800cf70:	4606      	mov	r6, r0
 800cf72:	460f      	mov	r7, r1
 800cf74:	2200      	movs	r2, #0
 800cf76:	4620      	mov	r0, r4
 800cf78:	4629      	mov	r1, r5
 800cf7a:	f7f3 f9a7 	bl	80002cc <__adddf3>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	460b      	mov	r3, r1
 800cf82:	4630      	mov	r0, r6
 800cf84:	4639      	mov	r1, r7
 800cf86:	f7f3 fc81 	bl	800088c <__aeabi_ddiv>
 800cf8a:	f04f 0a01 	mov.w	sl, #1
 800cf8e:	4604      	mov	r4, r0
 800cf90:	460d      	mov	r5, r1
 800cf92:	e764      	b.n	800ce5e <atan+0xce>
 800cf94:	4b49      	ldr	r3, [pc, #292]	; (800d0bc <atan+0x32c>)
 800cf96:	429e      	cmp	r6, r3
 800cf98:	da1d      	bge.n	800cfd6 <atan+0x246>
 800cf9a:	ee10 0a10 	vmov	r0, s0
 800cf9e:	4b48      	ldr	r3, [pc, #288]	; (800d0c0 <atan+0x330>)
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	4629      	mov	r1, r5
 800cfa4:	f7f3 f990 	bl	80002c8 <__aeabi_dsub>
 800cfa8:	4b45      	ldr	r3, [pc, #276]	; (800d0c0 <atan+0x330>)
 800cfaa:	4606      	mov	r6, r0
 800cfac:	460f      	mov	r7, r1
 800cfae:	2200      	movs	r2, #0
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	4629      	mov	r1, r5
 800cfb4:	f7f3 fb40 	bl	8000638 <__aeabi_dmul>
 800cfb8:	4b3e      	ldr	r3, [pc, #248]	; (800d0b4 <atan+0x324>)
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f7f3 f986 	bl	80002cc <__adddf3>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	4639      	mov	r1, r7
 800cfc8:	f7f3 fc60 	bl	800088c <__aeabi_ddiv>
 800cfcc:	f04f 0a02 	mov.w	sl, #2
 800cfd0:	4604      	mov	r4, r0
 800cfd2:	460d      	mov	r5, r1
 800cfd4:	e743      	b.n	800ce5e <atan+0xce>
 800cfd6:	462b      	mov	r3, r5
 800cfd8:	ee10 2a10 	vmov	r2, s0
 800cfdc:	4939      	ldr	r1, [pc, #228]	; (800d0c4 <atan+0x334>)
 800cfde:	2000      	movs	r0, #0
 800cfe0:	f7f3 fc54 	bl	800088c <__aeabi_ddiv>
 800cfe4:	f04f 0a03 	mov.w	sl, #3
 800cfe8:	4604      	mov	r4, r0
 800cfea:	460d      	mov	r5, r1
 800cfec:	e737      	b.n	800ce5e <atan+0xce>
 800cfee:	4b36      	ldr	r3, [pc, #216]	; (800d0c8 <atan+0x338>)
 800cff0:	4e36      	ldr	r6, [pc, #216]	; (800d0cc <atan+0x33c>)
 800cff2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cff6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cffa:	e9da 2300 	ldrd	r2, r3, [sl]
 800cffe:	f7f3 f963 	bl	80002c8 <__aeabi_dsub>
 800d002:	4622      	mov	r2, r4
 800d004:	462b      	mov	r3, r5
 800d006:	f7f3 f95f 	bl	80002c8 <__aeabi_dsub>
 800d00a:	4602      	mov	r2, r0
 800d00c:	460b      	mov	r3, r1
 800d00e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d012:	f7f3 f959 	bl	80002c8 <__aeabi_dsub>
 800d016:	f1bb 0f00 	cmp.w	fp, #0
 800d01a:	4604      	mov	r4, r0
 800d01c:	460d      	mov	r5, r1
 800d01e:	f6bf aed6 	bge.w	800cdce <atan+0x3e>
 800d022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d026:	461d      	mov	r5, r3
 800d028:	e6d1      	b.n	800cdce <atan+0x3e>
 800d02a:	a51d      	add	r5, pc, #116	; (adr r5, 800d0a0 <atan+0x310>)
 800d02c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d030:	e6cd      	b.n	800cdce <atan+0x3e>
 800d032:	bf00      	nop
 800d034:	f3af 8000 	nop.w
 800d038:	54442d18 	.word	0x54442d18
 800d03c:	bff921fb 	.word	0xbff921fb
 800d040:	8800759c 	.word	0x8800759c
 800d044:	7e37e43c 	.word	0x7e37e43c
 800d048:	e322da11 	.word	0xe322da11
 800d04c:	3f90ad3a 	.word	0x3f90ad3a
 800d050:	24760deb 	.word	0x24760deb
 800d054:	3fa97b4b 	.word	0x3fa97b4b
 800d058:	a0d03d51 	.word	0xa0d03d51
 800d05c:	3fb10d66 	.word	0x3fb10d66
 800d060:	c54c206e 	.word	0xc54c206e
 800d064:	3fb745cd 	.word	0x3fb745cd
 800d068:	920083ff 	.word	0x920083ff
 800d06c:	3fc24924 	.word	0x3fc24924
 800d070:	5555550d 	.word	0x5555550d
 800d074:	3fd55555 	.word	0x3fd55555
 800d078:	2c6a6c2f 	.word	0x2c6a6c2f
 800d07c:	bfa2b444 	.word	0xbfa2b444
 800d080:	52defd9a 	.word	0x52defd9a
 800d084:	3fadde2d 	.word	0x3fadde2d
 800d088:	af749a6d 	.word	0xaf749a6d
 800d08c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d090:	fe231671 	.word	0xfe231671
 800d094:	3fbc71c6 	.word	0x3fbc71c6
 800d098:	9998ebc4 	.word	0x9998ebc4
 800d09c:	3fc99999 	.word	0x3fc99999
 800d0a0:	54442d18 	.word	0x54442d18
 800d0a4:	3ff921fb 	.word	0x3ff921fb
 800d0a8:	440fffff 	.word	0x440fffff
 800d0ac:	7ff00000 	.word	0x7ff00000
 800d0b0:	3fdbffff 	.word	0x3fdbffff
 800d0b4:	3ff00000 	.word	0x3ff00000
 800d0b8:	3ff2ffff 	.word	0x3ff2ffff
 800d0bc:	40038000 	.word	0x40038000
 800d0c0:	3ff80000 	.word	0x3ff80000
 800d0c4:	bff00000 	.word	0xbff00000
 800d0c8:	0800e700 	.word	0x0800e700
 800d0cc:	0800e6e0 	.word	0x0800e6e0

0800d0d0 <fabs>:
 800d0d0:	ec51 0b10 	vmov	r0, r1, d0
 800d0d4:	ee10 2a10 	vmov	r2, s0
 800d0d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d0dc:	ec43 2b10 	vmov	d0, r2, r3
 800d0e0:	4770      	bx	lr
 800d0e2:	0000      	movs	r0, r0
 800d0e4:	0000      	movs	r0, r0
	...

0800d0e8 <tan>:
 800d0e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0ea:	ec53 2b10 	vmov	r2, r3, d0
 800d0ee:	4816      	ldr	r0, [pc, #88]	; (800d148 <tan+0x60>)
 800d0f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d0f4:	4281      	cmp	r1, r0
 800d0f6:	dc07      	bgt.n	800d108 <tan+0x20>
 800d0f8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800d140 <tan+0x58>
 800d0fc:	2001      	movs	r0, #1
 800d0fe:	b005      	add	sp, #20
 800d100:	f85d eb04 	ldr.w	lr, [sp], #4
 800d104:	f000 bd80 	b.w	800dc08 <__kernel_tan>
 800d108:	4810      	ldr	r0, [pc, #64]	; (800d14c <tan+0x64>)
 800d10a:	4281      	cmp	r1, r0
 800d10c:	dd09      	ble.n	800d122 <tan+0x3a>
 800d10e:	ee10 0a10 	vmov	r0, s0
 800d112:	4619      	mov	r1, r3
 800d114:	f7f3 f8d8 	bl	80002c8 <__aeabi_dsub>
 800d118:	ec41 0b10 	vmov	d0, r0, r1
 800d11c:	b005      	add	sp, #20
 800d11e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d122:	4668      	mov	r0, sp
 800d124:	f000 f814 	bl	800d150 <__ieee754_rem_pio2>
 800d128:	0040      	lsls	r0, r0, #1
 800d12a:	f000 0002 	and.w	r0, r0, #2
 800d12e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d132:	ed9d 0b00 	vldr	d0, [sp]
 800d136:	f1c0 0001 	rsb	r0, r0, #1
 800d13a:	f000 fd65 	bl	800dc08 <__kernel_tan>
 800d13e:	e7ed      	b.n	800d11c <tan+0x34>
	...
 800d148:	3fe921fb 	.word	0x3fe921fb
 800d14c:	7fefffff 	.word	0x7fefffff

0800d150 <__ieee754_rem_pio2>:
 800d150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d154:	ed2d 8b02 	vpush	{d8}
 800d158:	ec55 4b10 	vmov	r4, r5, d0
 800d15c:	4bca      	ldr	r3, [pc, #808]	; (800d488 <__ieee754_rem_pio2+0x338>)
 800d15e:	b08b      	sub	sp, #44	; 0x2c
 800d160:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d164:	4598      	cmp	r8, r3
 800d166:	4682      	mov	sl, r0
 800d168:	9502      	str	r5, [sp, #8]
 800d16a:	dc08      	bgt.n	800d17e <__ieee754_rem_pio2+0x2e>
 800d16c:	2200      	movs	r2, #0
 800d16e:	2300      	movs	r3, #0
 800d170:	ed80 0b00 	vstr	d0, [r0]
 800d174:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d178:	f04f 0b00 	mov.w	fp, #0
 800d17c:	e028      	b.n	800d1d0 <__ieee754_rem_pio2+0x80>
 800d17e:	4bc3      	ldr	r3, [pc, #780]	; (800d48c <__ieee754_rem_pio2+0x33c>)
 800d180:	4598      	cmp	r8, r3
 800d182:	dc78      	bgt.n	800d276 <__ieee754_rem_pio2+0x126>
 800d184:	9b02      	ldr	r3, [sp, #8]
 800d186:	4ec2      	ldr	r6, [pc, #776]	; (800d490 <__ieee754_rem_pio2+0x340>)
 800d188:	2b00      	cmp	r3, #0
 800d18a:	ee10 0a10 	vmov	r0, s0
 800d18e:	a3b0      	add	r3, pc, #704	; (adr r3, 800d450 <__ieee754_rem_pio2+0x300>)
 800d190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d194:	4629      	mov	r1, r5
 800d196:	dd39      	ble.n	800d20c <__ieee754_rem_pio2+0xbc>
 800d198:	f7f3 f896 	bl	80002c8 <__aeabi_dsub>
 800d19c:	45b0      	cmp	r8, r6
 800d19e:	4604      	mov	r4, r0
 800d1a0:	460d      	mov	r5, r1
 800d1a2:	d01b      	beq.n	800d1dc <__ieee754_rem_pio2+0x8c>
 800d1a4:	a3ac      	add	r3, pc, #688	; (adr r3, 800d458 <__ieee754_rem_pio2+0x308>)
 800d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1aa:	f7f3 f88d 	bl	80002c8 <__aeabi_dsub>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	e9ca 2300 	strd	r2, r3, [sl]
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	f7f3 f885 	bl	80002c8 <__aeabi_dsub>
 800d1be:	a3a6      	add	r3, pc, #664	; (adr r3, 800d458 <__ieee754_rem_pio2+0x308>)
 800d1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c4:	f7f3 f880 	bl	80002c8 <__aeabi_dsub>
 800d1c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d1cc:	f04f 0b01 	mov.w	fp, #1
 800d1d0:	4658      	mov	r0, fp
 800d1d2:	b00b      	add	sp, #44	; 0x2c
 800d1d4:	ecbd 8b02 	vpop	{d8}
 800d1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1dc:	a3a0      	add	r3, pc, #640	; (adr r3, 800d460 <__ieee754_rem_pio2+0x310>)
 800d1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e2:	f7f3 f871 	bl	80002c8 <__aeabi_dsub>
 800d1e6:	a3a0      	add	r3, pc, #640	; (adr r3, 800d468 <__ieee754_rem_pio2+0x318>)
 800d1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	460d      	mov	r5, r1
 800d1f0:	f7f3 f86a 	bl	80002c8 <__aeabi_dsub>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	e9ca 2300 	strd	r2, r3, [sl]
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	4629      	mov	r1, r5
 800d200:	f7f3 f862 	bl	80002c8 <__aeabi_dsub>
 800d204:	a398      	add	r3, pc, #608	; (adr r3, 800d468 <__ieee754_rem_pio2+0x318>)
 800d206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20a:	e7db      	b.n	800d1c4 <__ieee754_rem_pio2+0x74>
 800d20c:	f7f3 f85e 	bl	80002cc <__adddf3>
 800d210:	45b0      	cmp	r8, r6
 800d212:	4604      	mov	r4, r0
 800d214:	460d      	mov	r5, r1
 800d216:	d016      	beq.n	800d246 <__ieee754_rem_pio2+0xf6>
 800d218:	a38f      	add	r3, pc, #572	; (adr r3, 800d458 <__ieee754_rem_pio2+0x308>)
 800d21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21e:	f7f3 f855 	bl	80002cc <__adddf3>
 800d222:	4602      	mov	r2, r0
 800d224:	460b      	mov	r3, r1
 800d226:	e9ca 2300 	strd	r2, r3, [sl]
 800d22a:	4620      	mov	r0, r4
 800d22c:	4629      	mov	r1, r5
 800d22e:	f7f3 f84b 	bl	80002c8 <__aeabi_dsub>
 800d232:	a389      	add	r3, pc, #548	; (adr r3, 800d458 <__ieee754_rem_pio2+0x308>)
 800d234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d238:	f7f3 f848 	bl	80002cc <__adddf3>
 800d23c:	f04f 3bff 	mov.w	fp, #4294967295
 800d240:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d244:	e7c4      	b.n	800d1d0 <__ieee754_rem_pio2+0x80>
 800d246:	a386      	add	r3, pc, #536	; (adr r3, 800d460 <__ieee754_rem_pio2+0x310>)
 800d248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24c:	f7f3 f83e 	bl	80002cc <__adddf3>
 800d250:	a385      	add	r3, pc, #532	; (adr r3, 800d468 <__ieee754_rem_pio2+0x318>)
 800d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d256:	4604      	mov	r4, r0
 800d258:	460d      	mov	r5, r1
 800d25a:	f7f3 f837 	bl	80002cc <__adddf3>
 800d25e:	4602      	mov	r2, r0
 800d260:	460b      	mov	r3, r1
 800d262:	e9ca 2300 	strd	r2, r3, [sl]
 800d266:	4620      	mov	r0, r4
 800d268:	4629      	mov	r1, r5
 800d26a:	f7f3 f82d 	bl	80002c8 <__aeabi_dsub>
 800d26e:	a37e      	add	r3, pc, #504	; (adr r3, 800d468 <__ieee754_rem_pio2+0x318>)
 800d270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d274:	e7e0      	b.n	800d238 <__ieee754_rem_pio2+0xe8>
 800d276:	4b87      	ldr	r3, [pc, #540]	; (800d494 <__ieee754_rem_pio2+0x344>)
 800d278:	4598      	cmp	r8, r3
 800d27a:	f300 80d9 	bgt.w	800d430 <__ieee754_rem_pio2+0x2e0>
 800d27e:	f7ff ff27 	bl	800d0d0 <fabs>
 800d282:	ec55 4b10 	vmov	r4, r5, d0
 800d286:	ee10 0a10 	vmov	r0, s0
 800d28a:	a379      	add	r3, pc, #484	; (adr r3, 800d470 <__ieee754_rem_pio2+0x320>)
 800d28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d290:	4629      	mov	r1, r5
 800d292:	f7f3 f9d1 	bl	8000638 <__aeabi_dmul>
 800d296:	4b80      	ldr	r3, [pc, #512]	; (800d498 <__ieee754_rem_pio2+0x348>)
 800d298:	2200      	movs	r2, #0
 800d29a:	f7f3 f817 	bl	80002cc <__adddf3>
 800d29e:	f7f3 fc7b 	bl	8000b98 <__aeabi_d2iz>
 800d2a2:	4683      	mov	fp, r0
 800d2a4:	f7f3 f95e 	bl	8000564 <__aeabi_i2d>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	ec43 2b18 	vmov	d8, r2, r3
 800d2b0:	a367      	add	r3, pc, #412	; (adr r3, 800d450 <__ieee754_rem_pio2+0x300>)
 800d2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b6:	f7f3 f9bf 	bl	8000638 <__aeabi_dmul>
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	460b      	mov	r3, r1
 800d2be:	4620      	mov	r0, r4
 800d2c0:	4629      	mov	r1, r5
 800d2c2:	f7f3 f801 	bl	80002c8 <__aeabi_dsub>
 800d2c6:	a364      	add	r3, pc, #400	; (adr r3, 800d458 <__ieee754_rem_pio2+0x308>)
 800d2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	460f      	mov	r7, r1
 800d2d0:	ec51 0b18 	vmov	r0, r1, d8
 800d2d4:	f7f3 f9b0 	bl	8000638 <__aeabi_dmul>
 800d2d8:	f1bb 0f1f 	cmp.w	fp, #31
 800d2dc:	4604      	mov	r4, r0
 800d2de:	460d      	mov	r5, r1
 800d2e0:	dc0d      	bgt.n	800d2fe <__ieee754_rem_pio2+0x1ae>
 800d2e2:	4b6e      	ldr	r3, [pc, #440]	; (800d49c <__ieee754_rem_pio2+0x34c>)
 800d2e4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2ec:	4543      	cmp	r3, r8
 800d2ee:	d006      	beq.n	800d2fe <__ieee754_rem_pio2+0x1ae>
 800d2f0:	4622      	mov	r2, r4
 800d2f2:	462b      	mov	r3, r5
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	4639      	mov	r1, r7
 800d2f8:	f7f2 ffe6 	bl	80002c8 <__aeabi_dsub>
 800d2fc:	e00f      	b.n	800d31e <__ieee754_rem_pio2+0x1ce>
 800d2fe:	462b      	mov	r3, r5
 800d300:	4622      	mov	r2, r4
 800d302:	4630      	mov	r0, r6
 800d304:	4639      	mov	r1, r7
 800d306:	f7f2 ffdf 	bl	80002c8 <__aeabi_dsub>
 800d30a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d30e:	9303      	str	r3, [sp, #12]
 800d310:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d314:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d318:	f1b8 0f10 	cmp.w	r8, #16
 800d31c:	dc02      	bgt.n	800d324 <__ieee754_rem_pio2+0x1d4>
 800d31e:	e9ca 0100 	strd	r0, r1, [sl]
 800d322:	e039      	b.n	800d398 <__ieee754_rem_pio2+0x248>
 800d324:	a34e      	add	r3, pc, #312	; (adr r3, 800d460 <__ieee754_rem_pio2+0x310>)
 800d326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32a:	ec51 0b18 	vmov	r0, r1, d8
 800d32e:	f7f3 f983 	bl	8000638 <__aeabi_dmul>
 800d332:	4604      	mov	r4, r0
 800d334:	460d      	mov	r5, r1
 800d336:	4602      	mov	r2, r0
 800d338:	460b      	mov	r3, r1
 800d33a:	4630      	mov	r0, r6
 800d33c:	4639      	mov	r1, r7
 800d33e:	f7f2 ffc3 	bl	80002c8 <__aeabi_dsub>
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	4680      	mov	r8, r0
 800d348:	4689      	mov	r9, r1
 800d34a:	4630      	mov	r0, r6
 800d34c:	4639      	mov	r1, r7
 800d34e:	f7f2 ffbb 	bl	80002c8 <__aeabi_dsub>
 800d352:	4622      	mov	r2, r4
 800d354:	462b      	mov	r3, r5
 800d356:	f7f2 ffb7 	bl	80002c8 <__aeabi_dsub>
 800d35a:	a343      	add	r3, pc, #268	; (adr r3, 800d468 <__ieee754_rem_pio2+0x318>)
 800d35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d360:	4604      	mov	r4, r0
 800d362:	460d      	mov	r5, r1
 800d364:	ec51 0b18 	vmov	r0, r1, d8
 800d368:	f7f3 f966 	bl	8000638 <__aeabi_dmul>
 800d36c:	4622      	mov	r2, r4
 800d36e:	462b      	mov	r3, r5
 800d370:	f7f2 ffaa 	bl	80002c8 <__aeabi_dsub>
 800d374:	4602      	mov	r2, r0
 800d376:	460b      	mov	r3, r1
 800d378:	4604      	mov	r4, r0
 800d37a:	460d      	mov	r5, r1
 800d37c:	4640      	mov	r0, r8
 800d37e:	4649      	mov	r1, r9
 800d380:	f7f2 ffa2 	bl	80002c8 <__aeabi_dsub>
 800d384:	9a03      	ldr	r2, [sp, #12]
 800d386:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d38a:	1ad3      	subs	r3, r2, r3
 800d38c:	2b31      	cmp	r3, #49	; 0x31
 800d38e:	dc24      	bgt.n	800d3da <__ieee754_rem_pio2+0x28a>
 800d390:	e9ca 0100 	strd	r0, r1, [sl]
 800d394:	4646      	mov	r6, r8
 800d396:	464f      	mov	r7, r9
 800d398:	e9da 8900 	ldrd	r8, r9, [sl]
 800d39c:	4630      	mov	r0, r6
 800d39e:	4642      	mov	r2, r8
 800d3a0:	464b      	mov	r3, r9
 800d3a2:	4639      	mov	r1, r7
 800d3a4:	f7f2 ff90 	bl	80002c8 <__aeabi_dsub>
 800d3a8:	462b      	mov	r3, r5
 800d3aa:	4622      	mov	r2, r4
 800d3ac:	f7f2 ff8c 	bl	80002c8 <__aeabi_dsub>
 800d3b0:	9b02      	ldr	r3, [sp, #8]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d3b8:	f6bf af0a 	bge.w	800d1d0 <__ieee754_rem_pio2+0x80>
 800d3bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d3c0:	f8ca 3004 	str.w	r3, [sl, #4]
 800d3c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3c8:	f8ca 8000 	str.w	r8, [sl]
 800d3cc:	f8ca 0008 	str.w	r0, [sl, #8]
 800d3d0:	f8ca 300c 	str.w	r3, [sl, #12]
 800d3d4:	f1cb 0b00 	rsb	fp, fp, #0
 800d3d8:	e6fa      	b.n	800d1d0 <__ieee754_rem_pio2+0x80>
 800d3da:	a327      	add	r3, pc, #156	; (adr r3, 800d478 <__ieee754_rem_pio2+0x328>)
 800d3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e0:	ec51 0b18 	vmov	r0, r1, d8
 800d3e4:	f7f3 f928 	bl	8000638 <__aeabi_dmul>
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	460d      	mov	r5, r1
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	4640      	mov	r0, r8
 800d3f2:	4649      	mov	r1, r9
 800d3f4:	f7f2 ff68 	bl	80002c8 <__aeabi_dsub>
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	4606      	mov	r6, r0
 800d3fe:	460f      	mov	r7, r1
 800d400:	4640      	mov	r0, r8
 800d402:	4649      	mov	r1, r9
 800d404:	f7f2 ff60 	bl	80002c8 <__aeabi_dsub>
 800d408:	4622      	mov	r2, r4
 800d40a:	462b      	mov	r3, r5
 800d40c:	f7f2 ff5c 	bl	80002c8 <__aeabi_dsub>
 800d410:	a31b      	add	r3, pc, #108	; (adr r3, 800d480 <__ieee754_rem_pio2+0x330>)
 800d412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d416:	4604      	mov	r4, r0
 800d418:	460d      	mov	r5, r1
 800d41a:	ec51 0b18 	vmov	r0, r1, d8
 800d41e:	f7f3 f90b 	bl	8000638 <__aeabi_dmul>
 800d422:	4622      	mov	r2, r4
 800d424:	462b      	mov	r3, r5
 800d426:	f7f2 ff4f 	bl	80002c8 <__aeabi_dsub>
 800d42a:	4604      	mov	r4, r0
 800d42c:	460d      	mov	r5, r1
 800d42e:	e75f      	b.n	800d2f0 <__ieee754_rem_pio2+0x1a0>
 800d430:	4b1b      	ldr	r3, [pc, #108]	; (800d4a0 <__ieee754_rem_pio2+0x350>)
 800d432:	4598      	cmp	r8, r3
 800d434:	dd36      	ble.n	800d4a4 <__ieee754_rem_pio2+0x354>
 800d436:	ee10 2a10 	vmov	r2, s0
 800d43a:	462b      	mov	r3, r5
 800d43c:	4620      	mov	r0, r4
 800d43e:	4629      	mov	r1, r5
 800d440:	f7f2 ff42 	bl	80002c8 <__aeabi_dsub>
 800d444:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d448:	e9ca 0100 	strd	r0, r1, [sl]
 800d44c:	e694      	b.n	800d178 <__ieee754_rem_pio2+0x28>
 800d44e:	bf00      	nop
 800d450:	54400000 	.word	0x54400000
 800d454:	3ff921fb 	.word	0x3ff921fb
 800d458:	1a626331 	.word	0x1a626331
 800d45c:	3dd0b461 	.word	0x3dd0b461
 800d460:	1a600000 	.word	0x1a600000
 800d464:	3dd0b461 	.word	0x3dd0b461
 800d468:	2e037073 	.word	0x2e037073
 800d46c:	3ba3198a 	.word	0x3ba3198a
 800d470:	6dc9c883 	.word	0x6dc9c883
 800d474:	3fe45f30 	.word	0x3fe45f30
 800d478:	2e000000 	.word	0x2e000000
 800d47c:	3ba3198a 	.word	0x3ba3198a
 800d480:	252049c1 	.word	0x252049c1
 800d484:	397b839a 	.word	0x397b839a
 800d488:	3fe921fb 	.word	0x3fe921fb
 800d48c:	4002d97b 	.word	0x4002d97b
 800d490:	3ff921fb 	.word	0x3ff921fb
 800d494:	413921fb 	.word	0x413921fb
 800d498:	3fe00000 	.word	0x3fe00000
 800d49c:	0800e720 	.word	0x0800e720
 800d4a0:	7fefffff 	.word	0x7fefffff
 800d4a4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d4a8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d4ac:	ee10 0a10 	vmov	r0, s0
 800d4b0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d4b4:	ee10 6a10 	vmov	r6, s0
 800d4b8:	460f      	mov	r7, r1
 800d4ba:	f7f3 fb6d 	bl	8000b98 <__aeabi_d2iz>
 800d4be:	f7f3 f851 	bl	8000564 <__aeabi_i2d>
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	4630      	mov	r0, r6
 800d4c8:	4639      	mov	r1, r7
 800d4ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d4ce:	f7f2 fefb 	bl	80002c8 <__aeabi_dsub>
 800d4d2:	4b23      	ldr	r3, [pc, #140]	; (800d560 <__ieee754_rem_pio2+0x410>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f7f3 f8af 	bl	8000638 <__aeabi_dmul>
 800d4da:	460f      	mov	r7, r1
 800d4dc:	4606      	mov	r6, r0
 800d4de:	f7f3 fb5b 	bl	8000b98 <__aeabi_d2iz>
 800d4e2:	f7f3 f83f 	bl	8000564 <__aeabi_i2d>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	4639      	mov	r1, r7
 800d4ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d4f2:	f7f2 fee9 	bl	80002c8 <__aeabi_dsub>
 800d4f6:	4b1a      	ldr	r3, [pc, #104]	; (800d560 <__ieee754_rem_pio2+0x410>)
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f7f3 f89d 	bl	8000638 <__aeabi_dmul>
 800d4fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d502:	ad04      	add	r5, sp, #16
 800d504:	f04f 0803 	mov.w	r8, #3
 800d508:	46a9      	mov	r9, r5
 800d50a:	2600      	movs	r6, #0
 800d50c:	2700      	movs	r7, #0
 800d50e:	4632      	mov	r2, r6
 800d510:	463b      	mov	r3, r7
 800d512:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d516:	46c3      	mov	fp, r8
 800d518:	3d08      	subs	r5, #8
 800d51a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d51e:	f7f3 faf3 	bl	8000b08 <__aeabi_dcmpeq>
 800d522:	2800      	cmp	r0, #0
 800d524:	d1f3      	bne.n	800d50e <__ieee754_rem_pio2+0x3be>
 800d526:	4b0f      	ldr	r3, [pc, #60]	; (800d564 <__ieee754_rem_pio2+0x414>)
 800d528:	9301      	str	r3, [sp, #4]
 800d52a:	2302      	movs	r3, #2
 800d52c:	9300      	str	r3, [sp, #0]
 800d52e:	4622      	mov	r2, r4
 800d530:	465b      	mov	r3, fp
 800d532:	4651      	mov	r1, sl
 800d534:	4648      	mov	r0, r9
 800d536:	f000 f817 	bl	800d568 <__kernel_rem_pio2>
 800d53a:	9b02      	ldr	r3, [sp, #8]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	4683      	mov	fp, r0
 800d540:	f6bf ae46 	bge.w	800d1d0 <__ieee754_rem_pio2+0x80>
 800d544:	e9da 2100 	ldrd	r2, r1, [sl]
 800d548:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d54c:	e9ca 2300 	strd	r2, r3, [sl]
 800d550:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d554:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d558:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d55c:	e73a      	b.n	800d3d4 <__ieee754_rem_pio2+0x284>
 800d55e:	bf00      	nop
 800d560:	41700000 	.word	0x41700000
 800d564:	0800e7a0 	.word	0x0800e7a0

0800d568 <__kernel_rem_pio2>:
 800d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	ed2d 8b02 	vpush	{d8}
 800d570:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d574:	f112 0f14 	cmn.w	r2, #20
 800d578:	9308      	str	r3, [sp, #32]
 800d57a:	9101      	str	r1, [sp, #4]
 800d57c:	4bc4      	ldr	r3, [pc, #784]	; (800d890 <__kernel_rem_pio2+0x328>)
 800d57e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d580:	900b      	str	r0, [sp, #44]	; 0x2c
 800d582:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d586:	9302      	str	r3, [sp, #8]
 800d588:	9b08      	ldr	r3, [sp, #32]
 800d58a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d58e:	bfa8      	it	ge
 800d590:	1ed4      	subge	r4, r2, #3
 800d592:	9306      	str	r3, [sp, #24]
 800d594:	bfb2      	itee	lt
 800d596:	2400      	movlt	r4, #0
 800d598:	2318      	movge	r3, #24
 800d59a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d59e:	f06f 0317 	mvn.w	r3, #23
 800d5a2:	fb04 3303 	mla	r3, r4, r3, r3
 800d5a6:	eb03 0a02 	add.w	sl, r3, r2
 800d5aa:	9b02      	ldr	r3, [sp, #8]
 800d5ac:	9a06      	ldr	r2, [sp, #24]
 800d5ae:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800d880 <__kernel_rem_pio2+0x318>
 800d5b2:	eb03 0802 	add.w	r8, r3, r2
 800d5b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d5b8:	1aa7      	subs	r7, r4, r2
 800d5ba:	ae22      	add	r6, sp, #136	; 0x88
 800d5bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d5c0:	2500      	movs	r5, #0
 800d5c2:	4545      	cmp	r5, r8
 800d5c4:	dd13      	ble.n	800d5ee <__kernel_rem_pio2+0x86>
 800d5c6:	9b08      	ldr	r3, [sp, #32]
 800d5c8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800d880 <__kernel_rem_pio2+0x318>
 800d5cc:	aa22      	add	r2, sp, #136	; 0x88
 800d5ce:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d5d2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d5d6:	f04f 0800 	mov.w	r8, #0
 800d5da:	9b02      	ldr	r3, [sp, #8]
 800d5dc:	4598      	cmp	r8, r3
 800d5de:	dc2f      	bgt.n	800d640 <__kernel_rem_pio2+0xd8>
 800d5e0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d5e4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d5e8:	462f      	mov	r7, r5
 800d5ea:	2600      	movs	r6, #0
 800d5ec:	e01b      	b.n	800d626 <__kernel_rem_pio2+0xbe>
 800d5ee:	42ef      	cmn	r7, r5
 800d5f0:	d407      	bmi.n	800d602 <__kernel_rem_pio2+0x9a>
 800d5f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d5f6:	f7f2 ffb5 	bl	8000564 <__aeabi_i2d>
 800d5fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d5fe:	3501      	adds	r5, #1
 800d600:	e7df      	b.n	800d5c2 <__kernel_rem_pio2+0x5a>
 800d602:	ec51 0b18 	vmov	r0, r1, d8
 800d606:	e7f8      	b.n	800d5fa <__kernel_rem_pio2+0x92>
 800d608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d60c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d610:	f7f3 f812 	bl	8000638 <__aeabi_dmul>
 800d614:	4602      	mov	r2, r0
 800d616:	460b      	mov	r3, r1
 800d618:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d61c:	f7f2 fe56 	bl	80002cc <__adddf3>
 800d620:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d624:	3601      	adds	r6, #1
 800d626:	9b06      	ldr	r3, [sp, #24]
 800d628:	429e      	cmp	r6, r3
 800d62a:	f1a7 0708 	sub.w	r7, r7, #8
 800d62e:	ddeb      	ble.n	800d608 <__kernel_rem_pio2+0xa0>
 800d630:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d634:	f108 0801 	add.w	r8, r8, #1
 800d638:	ecab 7b02 	vstmia	fp!, {d7}
 800d63c:	3508      	adds	r5, #8
 800d63e:	e7cc      	b.n	800d5da <__kernel_rem_pio2+0x72>
 800d640:	9b02      	ldr	r3, [sp, #8]
 800d642:	aa0e      	add	r2, sp, #56	; 0x38
 800d644:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d648:	930d      	str	r3, [sp, #52]	; 0x34
 800d64a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d64c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d650:	9c02      	ldr	r4, [sp, #8]
 800d652:	930c      	str	r3, [sp, #48]	; 0x30
 800d654:	00e3      	lsls	r3, r4, #3
 800d656:	930a      	str	r3, [sp, #40]	; 0x28
 800d658:	ab9a      	add	r3, sp, #616	; 0x268
 800d65a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d65e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d662:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d666:	ab72      	add	r3, sp, #456	; 0x1c8
 800d668:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d66c:	46c3      	mov	fp, r8
 800d66e:	46a1      	mov	r9, r4
 800d670:	f1b9 0f00 	cmp.w	r9, #0
 800d674:	f1a5 0508 	sub.w	r5, r5, #8
 800d678:	dc77      	bgt.n	800d76a <__kernel_rem_pio2+0x202>
 800d67a:	ec47 6b10 	vmov	d0, r6, r7
 800d67e:	4650      	mov	r0, sl
 800d680:	f000 fd4e 	bl	800e120 <scalbn>
 800d684:	ec57 6b10 	vmov	r6, r7, d0
 800d688:	2200      	movs	r2, #0
 800d68a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d68e:	ee10 0a10 	vmov	r0, s0
 800d692:	4639      	mov	r1, r7
 800d694:	f7f2 ffd0 	bl	8000638 <__aeabi_dmul>
 800d698:	ec41 0b10 	vmov	d0, r0, r1
 800d69c:	f000 fcc0 	bl	800e020 <floor>
 800d6a0:	4b7c      	ldr	r3, [pc, #496]	; (800d894 <__kernel_rem_pio2+0x32c>)
 800d6a2:	ec51 0b10 	vmov	r0, r1, d0
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f7f2 ffc6 	bl	8000638 <__aeabi_dmul>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	4639      	mov	r1, r7
 800d6b4:	f7f2 fe08 	bl	80002c8 <__aeabi_dsub>
 800d6b8:	460f      	mov	r7, r1
 800d6ba:	4606      	mov	r6, r0
 800d6bc:	f7f3 fa6c 	bl	8000b98 <__aeabi_d2iz>
 800d6c0:	9004      	str	r0, [sp, #16]
 800d6c2:	f7f2 ff4f 	bl	8000564 <__aeabi_i2d>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	4639      	mov	r1, r7
 800d6ce:	f7f2 fdfb 	bl	80002c8 <__aeabi_dsub>
 800d6d2:	f1ba 0f00 	cmp.w	sl, #0
 800d6d6:	4606      	mov	r6, r0
 800d6d8:	460f      	mov	r7, r1
 800d6da:	dd6d      	ble.n	800d7b8 <__kernel_rem_pio2+0x250>
 800d6dc:	1e62      	subs	r2, r4, #1
 800d6de:	ab0e      	add	r3, sp, #56	; 0x38
 800d6e0:	9d04      	ldr	r5, [sp, #16]
 800d6e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d6e6:	f1ca 0118 	rsb	r1, sl, #24
 800d6ea:	fa40 f301 	asr.w	r3, r0, r1
 800d6ee:	441d      	add	r5, r3
 800d6f0:	408b      	lsls	r3, r1
 800d6f2:	1ac0      	subs	r0, r0, r3
 800d6f4:	ab0e      	add	r3, sp, #56	; 0x38
 800d6f6:	9504      	str	r5, [sp, #16]
 800d6f8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d6fc:	f1ca 0317 	rsb	r3, sl, #23
 800d700:	fa40 fb03 	asr.w	fp, r0, r3
 800d704:	f1bb 0f00 	cmp.w	fp, #0
 800d708:	dd65      	ble.n	800d7d6 <__kernel_rem_pio2+0x26e>
 800d70a:	9b04      	ldr	r3, [sp, #16]
 800d70c:	2200      	movs	r2, #0
 800d70e:	3301      	adds	r3, #1
 800d710:	9304      	str	r3, [sp, #16]
 800d712:	4615      	mov	r5, r2
 800d714:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d718:	4294      	cmp	r4, r2
 800d71a:	f300 809c 	bgt.w	800d856 <__kernel_rem_pio2+0x2ee>
 800d71e:	f1ba 0f00 	cmp.w	sl, #0
 800d722:	dd07      	ble.n	800d734 <__kernel_rem_pio2+0x1cc>
 800d724:	f1ba 0f01 	cmp.w	sl, #1
 800d728:	f000 80c0 	beq.w	800d8ac <__kernel_rem_pio2+0x344>
 800d72c:	f1ba 0f02 	cmp.w	sl, #2
 800d730:	f000 80c6 	beq.w	800d8c0 <__kernel_rem_pio2+0x358>
 800d734:	f1bb 0f02 	cmp.w	fp, #2
 800d738:	d14d      	bne.n	800d7d6 <__kernel_rem_pio2+0x26e>
 800d73a:	4632      	mov	r2, r6
 800d73c:	463b      	mov	r3, r7
 800d73e:	4956      	ldr	r1, [pc, #344]	; (800d898 <__kernel_rem_pio2+0x330>)
 800d740:	2000      	movs	r0, #0
 800d742:	f7f2 fdc1 	bl	80002c8 <__aeabi_dsub>
 800d746:	4606      	mov	r6, r0
 800d748:	460f      	mov	r7, r1
 800d74a:	2d00      	cmp	r5, #0
 800d74c:	d043      	beq.n	800d7d6 <__kernel_rem_pio2+0x26e>
 800d74e:	4650      	mov	r0, sl
 800d750:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800d888 <__kernel_rem_pio2+0x320>
 800d754:	f000 fce4 	bl	800e120 <scalbn>
 800d758:	4630      	mov	r0, r6
 800d75a:	4639      	mov	r1, r7
 800d75c:	ec53 2b10 	vmov	r2, r3, d0
 800d760:	f7f2 fdb2 	bl	80002c8 <__aeabi_dsub>
 800d764:	4606      	mov	r6, r0
 800d766:	460f      	mov	r7, r1
 800d768:	e035      	b.n	800d7d6 <__kernel_rem_pio2+0x26e>
 800d76a:	4b4c      	ldr	r3, [pc, #304]	; (800d89c <__kernel_rem_pio2+0x334>)
 800d76c:	2200      	movs	r2, #0
 800d76e:	4630      	mov	r0, r6
 800d770:	4639      	mov	r1, r7
 800d772:	f7f2 ff61 	bl	8000638 <__aeabi_dmul>
 800d776:	f7f3 fa0f 	bl	8000b98 <__aeabi_d2iz>
 800d77a:	f7f2 fef3 	bl	8000564 <__aeabi_i2d>
 800d77e:	4602      	mov	r2, r0
 800d780:	460b      	mov	r3, r1
 800d782:	ec43 2b18 	vmov	d8, r2, r3
 800d786:	4b46      	ldr	r3, [pc, #280]	; (800d8a0 <__kernel_rem_pio2+0x338>)
 800d788:	2200      	movs	r2, #0
 800d78a:	f7f2 ff55 	bl	8000638 <__aeabi_dmul>
 800d78e:	4602      	mov	r2, r0
 800d790:	460b      	mov	r3, r1
 800d792:	4630      	mov	r0, r6
 800d794:	4639      	mov	r1, r7
 800d796:	f7f2 fd97 	bl	80002c8 <__aeabi_dsub>
 800d79a:	f7f3 f9fd 	bl	8000b98 <__aeabi_d2iz>
 800d79e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d7a2:	f84b 0b04 	str.w	r0, [fp], #4
 800d7a6:	ec51 0b18 	vmov	r0, r1, d8
 800d7aa:	f7f2 fd8f 	bl	80002cc <__adddf3>
 800d7ae:	f109 39ff 	add.w	r9, r9, #4294967295
 800d7b2:	4606      	mov	r6, r0
 800d7b4:	460f      	mov	r7, r1
 800d7b6:	e75b      	b.n	800d670 <__kernel_rem_pio2+0x108>
 800d7b8:	d106      	bne.n	800d7c8 <__kernel_rem_pio2+0x260>
 800d7ba:	1e63      	subs	r3, r4, #1
 800d7bc:	aa0e      	add	r2, sp, #56	; 0x38
 800d7be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d7c2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d7c6:	e79d      	b.n	800d704 <__kernel_rem_pio2+0x19c>
 800d7c8:	4b36      	ldr	r3, [pc, #216]	; (800d8a4 <__kernel_rem_pio2+0x33c>)
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f7f3 f9ba 	bl	8000b44 <__aeabi_dcmpge>
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	d13d      	bne.n	800d850 <__kernel_rem_pio2+0x2e8>
 800d7d4:	4683      	mov	fp, r0
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	2300      	movs	r3, #0
 800d7da:	4630      	mov	r0, r6
 800d7dc:	4639      	mov	r1, r7
 800d7de:	f7f3 f993 	bl	8000b08 <__aeabi_dcmpeq>
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	f000 80c0 	beq.w	800d968 <__kernel_rem_pio2+0x400>
 800d7e8:	1e65      	subs	r5, r4, #1
 800d7ea:	462b      	mov	r3, r5
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	9902      	ldr	r1, [sp, #8]
 800d7f0:	428b      	cmp	r3, r1
 800d7f2:	da6c      	bge.n	800d8ce <__kernel_rem_pio2+0x366>
 800d7f4:	2a00      	cmp	r2, #0
 800d7f6:	f000 8089 	beq.w	800d90c <__kernel_rem_pio2+0x3a4>
 800d7fa:	ab0e      	add	r3, sp, #56	; 0x38
 800d7fc:	f1aa 0a18 	sub.w	sl, sl, #24
 800d800:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d804:	2b00      	cmp	r3, #0
 800d806:	f000 80ad 	beq.w	800d964 <__kernel_rem_pio2+0x3fc>
 800d80a:	4650      	mov	r0, sl
 800d80c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800d888 <__kernel_rem_pio2+0x320>
 800d810:	f000 fc86 	bl	800e120 <scalbn>
 800d814:	ab9a      	add	r3, sp, #616	; 0x268
 800d816:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d81a:	ec57 6b10 	vmov	r6, r7, d0
 800d81e:	00ec      	lsls	r4, r5, #3
 800d820:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800d824:	46aa      	mov	sl, r5
 800d826:	f1ba 0f00 	cmp.w	sl, #0
 800d82a:	f280 80d6 	bge.w	800d9da <__kernel_rem_pio2+0x472>
 800d82e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800d880 <__kernel_rem_pio2+0x318>
 800d832:	462e      	mov	r6, r5
 800d834:	2e00      	cmp	r6, #0
 800d836:	f2c0 8104 	blt.w	800da42 <__kernel_rem_pio2+0x4da>
 800d83a:	ab72      	add	r3, sp, #456	; 0x1c8
 800d83c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d840:	f8df a064 	ldr.w	sl, [pc, #100]	; 800d8a8 <__kernel_rem_pio2+0x340>
 800d844:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800d848:	f04f 0800 	mov.w	r8, #0
 800d84c:	1baf      	subs	r7, r5, r6
 800d84e:	e0ea      	b.n	800da26 <__kernel_rem_pio2+0x4be>
 800d850:	f04f 0b02 	mov.w	fp, #2
 800d854:	e759      	b.n	800d70a <__kernel_rem_pio2+0x1a2>
 800d856:	f8d8 3000 	ldr.w	r3, [r8]
 800d85a:	b955      	cbnz	r5, 800d872 <__kernel_rem_pio2+0x30a>
 800d85c:	b123      	cbz	r3, 800d868 <__kernel_rem_pio2+0x300>
 800d85e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d862:	f8c8 3000 	str.w	r3, [r8]
 800d866:	2301      	movs	r3, #1
 800d868:	3201      	adds	r2, #1
 800d86a:	f108 0804 	add.w	r8, r8, #4
 800d86e:	461d      	mov	r5, r3
 800d870:	e752      	b.n	800d718 <__kernel_rem_pio2+0x1b0>
 800d872:	1acb      	subs	r3, r1, r3
 800d874:	f8c8 3000 	str.w	r3, [r8]
 800d878:	462b      	mov	r3, r5
 800d87a:	e7f5      	b.n	800d868 <__kernel_rem_pio2+0x300>
 800d87c:	f3af 8000 	nop.w
	...
 800d88c:	3ff00000 	.word	0x3ff00000
 800d890:	0800e8e8 	.word	0x0800e8e8
 800d894:	40200000 	.word	0x40200000
 800d898:	3ff00000 	.word	0x3ff00000
 800d89c:	3e700000 	.word	0x3e700000
 800d8a0:	41700000 	.word	0x41700000
 800d8a4:	3fe00000 	.word	0x3fe00000
 800d8a8:	0800e8a8 	.word	0x0800e8a8
 800d8ac:	1e62      	subs	r2, r4, #1
 800d8ae:	ab0e      	add	r3, sp, #56	; 0x38
 800d8b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d8b8:	a90e      	add	r1, sp, #56	; 0x38
 800d8ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d8be:	e739      	b.n	800d734 <__kernel_rem_pio2+0x1cc>
 800d8c0:	1e62      	subs	r2, r4, #1
 800d8c2:	ab0e      	add	r3, sp, #56	; 0x38
 800d8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d8cc:	e7f4      	b.n	800d8b8 <__kernel_rem_pio2+0x350>
 800d8ce:	a90e      	add	r1, sp, #56	; 0x38
 800d8d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	430a      	orrs	r2, r1
 800d8d8:	e789      	b.n	800d7ee <__kernel_rem_pio2+0x286>
 800d8da:	3301      	adds	r3, #1
 800d8dc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d8e0:	2900      	cmp	r1, #0
 800d8e2:	d0fa      	beq.n	800d8da <__kernel_rem_pio2+0x372>
 800d8e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8e6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800d8ea:	446a      	add	r2, sp
 800d8ec:	3a98      	subs	r2, #152	; 0x98
 800d8ee:	920a      	str	r2, [sp, #40]	; 0x28
 800d8f0:	9a08      	ldr	r2, [sp, #32]
 800d8f2:	18e3      	adds	r3, r4, r3
 800d8f4:	18a5      	adds	r5, r4, r2
 800d8f6:	aa22      	add	r2, sp, #136	; 0x88
 800d8f8:	f104 0801 	add.w	r8, r4, #1
 800d8fc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d900:	9304      	str	r3, [sp, #16]
 800d902:	9b04      	ldr	r3, [sp, #16]
 800d904:	4543      	cmp	r3, r8
 800d906:	da04      	bge.n	800d912 <__kernel_rem_pio2+0x3aa>
 800d908:	461c      	mov	r4, r3
 800d90a:	e6a3      	b.n	800d654 <__kernel_rem_pio2+0xec>
 800d90c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d90e:	2301      	movs	r3, #1
 800d910:	e7e4      	b.n	800d8dc <__kernel_rem_pio2+0x374>
 800d912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d914:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d918:	f7f2 fe24 	bl	8000564 <__aeabi_i2d>
 800d91c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d922:	46ab      	mov	fp, r5
 800d924:	461c      	mov	r4, r3
 800d926:	f04f 0900 	mov.w	r9, #0
 800d92a:	2600      	movs	r6, #0
 800d92c:	2700      	movs	r7, #0
 800d92e:	9b06      	ldr	r3, [sp, #24]
 800d930:	4599      	cmp	r9, r3
 800d932:	dd06      	ble.n	800d942 <__kernel_rem_pio2+0x3da>
 800d934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d936:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d93a:	f108 0801 	add.w	r8, r8, #1
 800d93e:	930a      	str	r3, [sp, #40]	; 0x28
 800d940:	e7df      	b.n	800d902 <__kernel_rem_pio2+0x39a>
 800d942:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d946:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d94a:	f7f2 fe75 	bl	8000638 <__aeabi_dmul>
 800d94e:	4602      	mov	r2, r0
 800d950:	460b      	mov	r3, r1
 800d952:	4630      	mov	r0, r6
 800d954:	4639      	mov	r1, r7
 800d956:	f7f2 fcb9 	bl	80002cc <__adddf3>
 800d95a:	f109 0901 	add.w	r9, r9, #1
 800d95e:	4606      	mov	r6, r0
 800d960:	460f      	mov	r7, r1
 800d962:	e7e4      	b.n	800d92e <__kernel_rem_pio2+0x3c6>
 800d964:	3d01      	subs	r5, #1
 800d966:	e748      	b.n	800d7fa <__kernel_rem_pio2+0x292>
 800d968:	ec47 6b10 	vmov	d0, r6, r7
 800d96c:	f1ca 0000 	rsb	r0, sl, #0
 800d970:	f000 fbd6 	bl	800e120 <scalbn>
 800d974:	ec57 6b10 	vmov	r6, r7, d0
 800d978:	4ba0      	ldr	r3, [pc, #640]	; (800dbfc <__kernel_rem_pio2+0x694>)
 800d97a:	ee10 0a10 	vmov	r0, s0
 800d97e:	2200      	movs	r2, #0
 800d980:	4639      	mov	r1, r7
 800d982:	f7f3 f8df 	bl	8000b44 <__aeabi_dcmpge>
 800d986:	b1f8      	cbz	r0, 800d9c8 <__kernel_rem_pio2+0x460>
 800d988:	4b9d      	ldr	r3, [pc, #628]	; (800dc00 <__kernel_rem_pio2+0x698>)
 800d98a:	2200      	movs	r2, #0
 800d98c:	4630      	mov	r0, r6
 800d98e:	4639      	mov	r1, r7
 800d990:	f7f2 fe52 	bl	8000638 <__aeabi_dmul>
 800d994:	f7f3 f900 	bl	8000b98 <__aeabi_d2iz>
 800d998:	4680      	mov	r8, r0
 800d99a:	f7f2 fde3 	bl	8000564 <__aeabi_i2d>
 800d99e:	4b97      	ldr	r3, [pc, #604]	; (800dbfc <__kernel_rem_pio2+0x694>)
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f7f2 fe49 	bl	8000638 <__aeabi_dmul>
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	4639      	mov	r1, r7
 800d9ac:	4630      	mov	r0, r6
 800d9ae:	f7f2 fc8b 	bl	80002c8 <__aeabi_dsub>
 800d9b2:	f7f3 f8f1 	bl	8000b98 <__aeabi_d2iz>
 800d9b6:	1c65      	adds	r5, r4, #1
 800d9b8:	ab0e      	add	r3, sp, #56	; 0x38
 800d9ba:	f10a 0a18 	add.w	sl, sl, #24
 800d9be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d9c2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d9c6:	e720      	b.n	800d80a <__kernel_rem_pio2+0x2a2>
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	4639      	mov	r1, r7
 800d9cc:	f7f3 f8e4 	bl	8000b98 <__aeabi_d2iz>
 800d9d0:	ab0e      	add	r3, sp, #56	; 0x38
 800d9d2:	4625      	mov	r5, r4
 800d9d4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d9d8:	e717      	b.n	800d80a <__kernel_rem_pio2+0x2a2>
 800d9da:	ab0e      	add	r3, sp, #56	; 0x38
 800d9dc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d9e0:	f7f2 fdc0 	bl	8000564 <__aeabi_i2d>
 800d9e4:	4632      	mov	r2, r6
 800d9e6:	463b      	mov	r3, r7
 800d9e8:	f7f2 fe26 	bl	8000638 <__aeabi_dmul>
 800d9ec:	4b84      	ldr	r3, [pc, #528]	; (800dc00 <__kernel_rem_pio2+0x698>)
 800d9ee:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	4639      	mov	r1, r7
 800d9f8:	f7f2 fe1e 	bl	8000638 <__aeabi_dmul>
 800d9fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da00:	4606      	mov	r6, r0
 800da02:	460f      	mov	r7, r1
 800da04:	e70f      	b.n	800d826 <__kernel_rem_pio2+0x2be>
 800da06:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800da0a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800da0e:	f7f2 fe13 	bl	8000638 <__aeabi_dmul>
 800da12:	4602      	mov	r2, r0
 800da14:	460b      	mov	r3, r1
 800da16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da1a:	f7f2 fc57 	bl	80002cc <__adddf3>
 800da1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800da22:	f108 0801 	add.w	r8, r8, #1
 800da26:	9b02      	ldr	r3, [sp, #8]
 800da28:	4598      	cmp	r8, r3
 800da2a:	dc01      	bgt.n	800da30 <__kernel_rem_pio2+0x4c8>
 800da2c:	45b8      	cmp	r8, r7
 800da2e:	ddea      	ble.n	800da06 <__kernel_rem_pio2+0x49e>
 800da30:	ed9d 7b06 	vldr	d7, [sp, #24]
 800da34:	ab4a      	add	r3, sp, #296	; 0x128
 800da36:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800da3a:	ed87 7b00 	vstr	d7, [r7]
 800da3e:	3e01      	subs	r6, #1
 800da40:	e6f8      	b.n	800d834 <__kernel_rem_pio2+0x2cc>
 800da42:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800da44:	2b02      	cmp	r3, #2
 800da46:	dc0b      	bgt.n	800da60 <__kernel_rem_pio2+0x4f8>
 800da48:	2b00      	cmp	r3, #0
 800da4a:	dc35      	bgt.n	800dab8 <__kernel_rem_pio2+0x550>
 800da4c:	d059      	beq.n	800db02 <__kernel_rem_pio2+0x59a>
 800da4e:	9b04      	ldr	r3, [sp, #16]
 800da50:	f003 0007 	and.w	r0, r3, #7
 800da54:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800da58:	ecbd 8b02 	vpop	{d8}
 800da5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da60:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800da62:	2b03      	cmp	r3, #3
 800da64:	d1f3      	bne.n	800da4e <__kernel_rem_pio2+0x4e6>
 800da66:	ab4a      	add	r3, sp, #296	; 0x128
 800da68:	4423      	add	r3, r4
 800da6a:	9306      	str	r3, [sp, #24]
 800da6c:	461c      	mov	r4, r3
 800da6e:	469a      	mov	sl, r3
 800da70:	9502      	str	r5, [sp, #8]
 800da72:	9b02      	ldr	r3, [sp, #8]
 800da74:	2b00      	cmp	r3, #0
 800da76:	f1aa 0a08 	sub.w	sl, sl, #8
 800da7a:	dc6b      	bgt.n	800db54 <__kernel_rem_pio2+0x5ec>
 800da7c:	46aa      	mov	sl, r5
 800da7e:	f1ba 0f01 	cmp.w	sl, #1
 800da82:	f1a4 0408 	sub.w	r4, r4, #8
 800da86:	f300 8085 	bgt.w	800db94 <__kernel_rem_pio2+0x62c>
 800da8a:	9c06      	ldr	r4, [sp, #24]
 800da8c:	2000      	movs	r0, #0
 800da8e:	3408      	adds	r4, #8
 800da90:	2100      	movs	r1, #0
 800da92:	2d01      	cmp	r5, #1
 800da94:	f300 809d 	bgt.w	800dbd2 <__kernel_rem_pio2+0x66a>
 800da98:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800da9c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800daa0:	f1bb 0f00 	cmp.w	fp, #0
 800daa4:	f040 809b 	bne.w	800dbde <__kernel_rem_pio2+0x676>
 800daa8:	9b01      	ldr	r3, [sp, #4]
 800daaa:	e9c3 5600 	strd	r5, r6, [r3]
 800daae:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800dab2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dab6:	e7ca      	b.n	800da4e <__kernel_rem_pio2+0x4e6>
 800dab8:	3408      	adds	r4, #8
 800daba:	ab4a      	add	r3, sp, #296	; 0x128
 800dabc:	441c      	add	r4, r3
 800dabe:	462e      	mov	r6, r5
 800dac0:	2000      	movs	r0, #0
 800dac2:	2100      	movs	r1, #0
 800dac4:	2e00      	cmp	r6, #0
 800dac6:	da36      	bge.n	800db36 <__kernel_rem_pio2+0x5ce>
 800dac8:	f1bb 0f00 	cmp.w	fp, #0
 800dacc:	d039      	beq.n	800db42 <__kernel_rem_pio2+0x5da>
 800dace:	4602      	mov	r2, r0
 800dad0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dad4:	9c01      	ldr	r4, [sp, #4]
 800dad6:	e9c4 2300 	strd	r2, r3, [r4]
 800dada:	4602      	mov	r2, r0
 800dadc:	460b      	mov	r3, r1
 800dade:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800dae2:	f7f2 fbf1 	bl	80002c8 <__aeabi_dsub>
 800dae6:	ae4c      	add	r6, sp, #304	; 0x130
 800dae8:	2401      	movs	r4, #1
 800daea:	42a5      	cmp	r5, r4
 800daec:	da2c      	bge.n	800db48 <__kernel_rem_pio2+0x5e0>
 800daee:	f1bb 0f00 	cmp.w	fp, #0
 800daf2:	d002      	beq.n	800dafa <__kernel_rem_pio2+0x592>
 800daf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800daf8:	4619      	mov	r1, r3
 800dafa:	9b01      	ldr	r3, [sp, #4]
 800dafc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800db00:	e7a5      	b.n	800da4e <__kernel_rem_pio2+0x4e6>
 800db02:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800db06:	eb0d 0403 	add.w	r4, sp, r3
 800db0a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800db0e:	2000      	movs	r0, #0
 800db10:	2100      	movs	r1, #0
 800db12:	2d00      	cmp	r5, #0
 800db14:	da09      	bge.n	800db2a <__kernel_rem_pio2+0x5c2>
 800db16:	f1bb 0f00 	cmp.w	fp, #0
 800db1a:	d002      	beq.n	800db22 <__kernel_rem_pio2+0x5ba>
 800db1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db20:	4619      	mov	r1, r3
 800db22:	9b01      	ldr	r3, [sp, #4]
 800db24:	e9c3 0100 	strd	r0, r1, [r3]
 800db28:	e791      	b.n	800da4e <__kernel_rem_pio2+0x4e6>
 800db2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800db2e:	f7f2 fbcd 	bl	80002cc <__adddf3>
 800db32:	3d01      	subs	r5, #1
 800db34:	e7ed      	b.n	800db12 <__kernel_rem_pio2+0x5aa>
 800db36:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800db3a:	f7f2 fbc7 	bl	80002cc <__adddf3>
 800db3e:	3e01      	subs	r6, #1
 800db40:	e7c0      	b.n	800dac4 <__kernel_rem_pio2+0x55c>
 800db42:	4602      	mov	r2, r0
 800db44:	460b      	mov	r3, r1
 800db46:	e7c5      	b.n	800dad4 <__kernel_rem_pio2+0x56c>
 800db48:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800db4c:	f7f2 fbbe 	bl	80002cc <__adddf3>
 800db50:	3401      	adds	r4, #1
 800db52:	e7ca      	b.n	800daea <__kernel_rem_pio2+0x582>
 800db54:	e9da 8900 	ldrd	r8, r9, [sl]
 800db58:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800db5c:	9b02      	ldr	r3, [sp, #8]
 800db5e:	3b01      	subs	r3, #1
 800db60:	9302      	str	r3, [sp, #8]
 800db62:	4632      	mov	r2, r6
 800db64:	463b      	mov	r3, r7
 800db66:	4640      	mov	r0, r8
 800db68:	4649      	mov	r1, r9
 800db6a:	f7f2 fbaf 	bl	80002cc <__adddf3>
 800db6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800db72:	4602      	mov	r2, r0
 800db74:	460b      	mov	r3, r1
 800db76:	4640      	mov	r0, r8
 800db78:	4649      	mov	r1, r9
 800db7a:	f7f2 fba5 	bl	80002c8 <__aeabi_dsub>
 800db7e:	4632      	mov	r2, r6
 800db80:	463b      	mov	r3, r7
 800db82:	f7f2 fba3 	bl	80002cc <__adddf3>
 800db86:	ed9d 7b08 	vldr	d7, [sp, #32]
 800db8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800db8e:	ed8a 7b00 	vstr	d7, [sl]
 800db92:	e76e      	b.n	800da72 <__kernel_rem_pio2+0x50a>
 800db94:	e9d4 8900 	ldrd	r8, r9, [r4]
 800db98:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800db9c:	4640      	mov	r0, r8
 800db9e:	4632      	mov	r2, r6
 800dba0:	463b      	mov	r3, r7
 800dba2:	4649      	mov	r1, r9
 800dba4:	f7f2 fb92 	bl	80002cc <__adddf3>
 800dba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbac:	4602      	mov	r2, r0
 800dbae:	460b      	mov	r3, r1
 800dbb0:	4640      	mov	r0, r8
 800dbb2:	4649      	mov	r1, r9
 800dbb4:	f7f2 fb88 	bl	80002c8 <__aeabi_dsub>
 800dbb8:	4632      	mov	r2, r6
 800dbba:	463b      	mov	r3, r7
 800dbbc:	f7f2 fb86 	bl	80002cc <__adddf3>
 800dbc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dbc8:	ed84 7b00 	vstr	d7, [r4]
 800dbcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dbd0:	e755      	b.n	800da7e <__kernel_rem_pio2+0x516>
 800dbd2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dbd6:	f7f2 fb79 	bl	80002cc <__adddf3>
 800dbda:	3d01      	subs	r5, #1
 800dbdc:	e759      	b.n	800da92 <__kernel_rem_pio2+0x52a>
 800dbde:	9b01      	ldr	r3, [sp, #4]
 800dbe0:	9a01      	ldr	r2, [sp, #4]
 800dbe2:	601d      	str	r5, [r3, #0]
 800dbe4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800dbe8:	605c      	str	r4, [r3, #4]
 800dbea:	609f      	str	r7, [r3, #8]
 800dbec:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800dbf0:	60d3      	str	r3, [r2, #12]
 800dbf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbf6:	6110      	str	r0, [r2, #16]
 800dbf8:	6153      	str	r3, [r2, #20]
 800dbfa:	e728      	b.n	800da4e <__kernel_rem_pio2+0x4e6>
 800dbfc:	41700000 	.word	0x41700000
 800dc00:	3e700000 	.word	0x3e700000
 800dc04:	00000000 	.word	0x00000000

0800dc08 <__kernel_tan>:
 800dc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc0c:	ed2d 8b06 	vpush	{d8-d10}
 800dc10:	ec5b ab10 	vmov	sl, fp, d0
 800dc14:	4be0      	ldr	r3, [pc, #896]	; (800df98 <__kernel_tan+0x390>)
 800dc16:	b083      	sub	sp, #12
 800dc18:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800dc1c:	429f      	cmp	r7, r3
 800dc1e:	ec59 8b11 	vmov	r8, r9, d1
 800dc22:	4606      	mov	r6, r0
 800dc24:	f8cd b000 	str.w	fp, [sp]
 800dc28:	dc61      	bgt.n	800dcee <__kernel_tan+0xe6>
 800dc2a:	ee10 0a10 	vmov	r0, s0
 800dc2e:	4659      	mov	r1, fp
 800dc30:	f7f2 ffb2 	bl	8000b98 <__aeabi_d2iz>
 800dc34:	4605      	mov	r5, r0
 800dc36:	2800      	cmp	r0, #0
 800dc38:	f040 8083 	bne.w	800dd42 <__kernel_tan+0x13a>
 800dc3c:	1c73      	adds	r3, r6, #1
 800dc3e:	4652      	mov	r2, sl
 800dc40:	4313      	orrs	r3, r2
 800dc42:	433b      	orrs	r3, r7
 800dc44:	d112      	bne.n	800dc6c <__kernel_tan+0x64>
 800dc46:	ec4b ab10 	vmov	d0, sl, fp
 800dc4a:	f7ff fa41 	bl	800d0d0 <fabs>
 800dc4e:	49d3      	ldr	r1, [pc, #844]	; (800df9c <__kernel_tan+0x394>)
 800dc50:	ec53 2b10 	vmov	r2, r3, d0
 800dc54:	2000      	movs	r0, #0
 800dc56:	f7f2 fe19 	bl	800088c <__aeabi_ddiv>
 800dc5a:	4682      	mov	sl, r0
 800dc5c:	468b      	mov	fp, r1
 800dc5e:	ec4b ab10 	vmov	d0, sl, fp
 800dc62:	b003      	add	sp, #12
 800dc64:	ecbd 8b06 	vpop	{d8-d10}
 800dc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc6c:	2e01      	cmp	r6, #1
 800dc6e:	d0f6      	beq.n	800dc5e <__kernel_tan+0x56>
 800dc70:	4642      	mov	r2, r8
 800dc72:	464b      	mov	r3, r9
 800dc74:	4650      	mov	r0, sl
 800dc76:	4659      	mov	r1, fp
 800dc78:	f7f2 fb28 	bl	80002cc <__adddf3>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	460b      	mov	r3, r1
 800dc80:	460f      	mov	r7, r1
 800dc82:	2000      	movs	r0, #0
 800dc84:	49c6      	ldr	r1, [pc, #792]	; (800dfa0 <__kernel_tan+0x398>)
 800dc86:	f7f2 fe01 	bl	800088c <__aeabi_ddiv>
 800dc8a:	e9cd 0100 	strd	r0, r1, [sp]
 800dc8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc92:	462e      	mov	r6, r5
 800dc94:	4652      	mov	r2, sl
 800dc96:	462c      	mov	r4, r5
 800dc98:	4630      	mov	r0, r6
 800dc9a:	461d      	mov	r5, r3
 800dc9c:	4639      	mov	r1, r7
 800dc9e:	465b      	mov	r3, fp
 800dca0:	f7f2 fb12 	bl	80002c8 <__aeabi_dsub>
 800dca4:	4602      	mov	r2, r0
 800dca6:	460b      	mov	r3, r1
 800dca8:	4640      	mov	r0, r8
 800dcaa:	4649      	mov	r1, r9
 800dcac:	f7f2 fb0c 	bl	80002c8 <__aeabi_dsub>
 800dcb0:	4632      	mov	r2, r6
 800dcb2:	462b      	mov	r3, r5
 800dcb4:	f7f2 fcc0 	bl	8000638 <__aeabi_dmul>
 800dcb8:	4632      	mov	r2, r6
 800dcba:	4680      	mov	r8, r0
 800dcbc:	4689      	mov	r9, r1
 800dcbe:	462b      	mov	r3, r5
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	4639      	mov	r1, r7
 800dcc4:	f7f2 fcb8 	bl	8000638 <__aeabi_dmul>
 800dcc8:	4bb4      	ldr	r3, [pc, #720]	; (800df9c <__kernel_tan+0x394>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	f7f2 fafe 	bl	80002cc <__adddf3>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4640      	mov	r0, r8
 800dcd6:	4649      	mov	r1, r9
 800dcd8:	f7f2 faf8 	bl	80002cc <__adddf3>
 800dcdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dce0:	f7f2 fcaa 	bl	8000638 <__aeabi_dmul>
 800dce4:	4622      	mov	r2, r4
 800dce6:	462b      	mov	r3, r5
 800dce8:	f7f2 faf0 	bl	80002cc <__adddf3>
 800dcec:	e7b5      	b.n	800dc5a <__kernel_tan+0x52>
 800dcee:	4bad      	ldr	r3, [pc, #692]	; (800dfa4 <__kernel_tan+0x39c>)
 800dcf0:	429f      	cmp	r7, r3
 800dcf2:	dd26      	ble.n	800dd42 <__kernel_tan+0x13a>
 800dcf4:	9b00      	ldr	r3, [sp, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	da09      	bge.n	800dd0e <__kernel_tan+0x106>
 800dcfa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dcfe:	469b      	mov	fp, r3
 800dd00:	ee10 aa10 	vmov	sl, s0
 800dd04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dd08:	ee11 8a10 	vmov	r8, s2
 800dd0c:	4699      	mov	r9, r3
 800dd0e:	4652      	mov	r2, sl
 800dd10:	465b      	mov	r3, fp
 800dd12:	a183      	add	r1, pc, #524	; (adr r1, 800df20 <__kernel_tan+0x318>)
 800dd14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd18:	f7f2 fad6 	bl	80002c8 <__aeabi_dsub>
 800dd1c:	4642      	mov	r2, r8
 800dd1e:	464b      	mov	r3, r9
 800dd20:	4604      	mov	r4, r0
 800dd22:	460d      	mov	r5, r1
 800dd24:	a180      	add	r1, pc, #512	; (adr r1, 800df28 <__kernel_tan+0x320>)
 800dd26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd2a:	f7f2 facd 	bl	80002c8 <__aeabi_dsub>
 800dd2e:	4622      	mov	r2, r4
 800dd30:	462b      	mov	r3, r5
 800dd32:	f7f2 facb 	bl	80002cc <__adddf3>
 800dd36:	f04f 0800 	mov.w	r8, #0
 800dd3a:	4682      	mov	sl, r0
 800dd3c:	468b      	mov	fp, r1
 800dd3e:	f04f 0900 	mov.w	r9, #0
 800dd42:	4652      	mov	r2, sl
 800dd44:	465b      	mov	r3, fp
 800dd46:	4650      	mov	r0, sl
 800dd48:	4659      	mov	r1, fp
 800dd4a:	f7f2 fc75 	bl	8000638 <__aeabi_dmul>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	460b      	mov	r3, r1
 800dd52:	ec43 2b18 	vmov	d8, r2, r3
 800dd56:	f7f2 fc6f 	bl	8000638 <__aeabi_dmul>
 800dd5a:	ec53 2b18 	vmov	r2, r3, d8
 800dd5e:	4604      	mov	r4, r0
 800dd60:	460d      	mov	r5, r1
 800dd62:	4650      	mov	r0, sl
 800dd64:	4659      	mov	r1, fp
 800dd66:	f7f2 fc67 	bl	8000638 <__aeabi_dmul>
 800dd6a:	a371      	add	r3, pc, #452	; (adr r3, 800df30 <__kernel_tan+0x328>)
 800dd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd70:	ec41 0b19 	vmov	d9, r0, r1
 800dd74:	4620      	mov	r0, r4
 800dd76:	4629      	mov	r1, r5
 800dd78:	f7f2 fc5e 	bl	8000638 <__aeabi_dmul>
 800dd7c:	a36e      	add	r3, pc, #440	; (adr r3, 800df38 <__kernel_tan+0x330>)
 800dd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd82:	f7f2 faa3 	bl	80002cc <__adddf3>
 800dd86:	4622      	mov	r2, r4
 800dd88:	462b      	mov	r3, r5
 800dd8a:	f7f2 fc55 	bl	8000638 <__aeabi_dmul>
 800dd8e:	a36c      	add	r3, pc, #432	; (adr r3, 800df40 <__kernel_tan+0x338>)
 800dd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd94:	f7f2 fa9a 	bl	80002cc <__adddf3>
 800dd98:	4622      	mov	r2, r4
 800dd9a:	462b      	mov	r3, r5
 800dd9c:	f7f2 fc4c 	bl	8000638 <__aeabi_dmul>
 800dda0:	a369      	add	r3, pc, #420	; (adr r3, 800df48 <__kernel_tan+0x340>)
 800dda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda6:	f7f2 fa91 	bl	80002cc <__adddf3>
 800ddaa:	4622      	mov	r2, r4
 800ddac:	462b      	mov	r3, r5
 800ddae:	f7f2 fc43 	bl	8000638 <__aeabi_dmul>
 800ddb2:	a367      	add	r3, pc, #412	; (adr r3, 800df50 <__kernel_tan+0x348>)
 800ddb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb8:	f7f2 fa88 	bl	80002cc <__adddf3>
 800ddbc:	4622      	mov	r2, r4
 800ddbe:	462b      	mov	r3, r5
 800ddc0:	f7f2 fc3a 	bl	8000638 <__aeabi_dmul>
 800ddc4:	a364      	add	r3, pc, #400	; (adr r3, 800df58 <__kernel_tan+0x350>)
 800ddc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddca:	f7f2 fa7f 	bl	80002cc <__adddf3>
 800ddce:	ec53 2b18 	vmov	r2, r3, d8
 800ddd2:	f7f2 fc31 	bl	8000638 <__aeabi_dmul>
 800ddd6:	a362      	add	r3, pc, #392	; (adr r3, 800df60 <__kernel_tan+0x358>)
 800ddd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dddc:	ec41 0b1a 	vmov	d10, r0, r1
 800dde0:	4620      	mov	r0, r4
 800dde2:	4629      	mov	r1, r5
 800dde4:	f7f2 fc28 	bl	8000638 <__aeabi_dmul>
 800dde8:	a35f      	add	r3, pc, #380	; (adr r3, 800df68 <__kernel_tan+0x360>)
 800ddea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddee:	f7f2 fa6d 	bl	80002cc <__adddf3>
 800ddf2:	4622      	mov	r2, r4
 800ddf4:	462b      	mov	r3, r5
 800ddf6:	f7f2 fc1f 	bl	8000638 <__aeabi_dmul>
 800ddfa:	a35d      	add	r3, pc, #372	; (adr r3, 800df70 <__kernel_tan+0x368>)
 800ddfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de00:	f7f2 fa64 	bl	80002cc <__adddf3>
 800de04:	4622      	mov	r2, r4
 800de06:	462b      	mov	r3, r5
 800de08:	f7f2 fc16 	bl	8000638 <__aeabi_dmul>
 800de0c:	a35a      	add	r3, pc, #360	; (adr r3, 800df78 <__kernel_tan+0x370>)
 800de0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de12:	f7f2 fa5b 	bl	80002cc <__adddf3>
 800de16:	4622      	mov	r2, r4
 800de18:	462b      	mov	r3, r5
 800de1a:	f7f2 fc0d 	bl	8000638 <__aeabi_dmul>
 800de1e:	a358      	add	r3, pc, #352	; (adr r3, 800df80 <__kernel_tan+0x378>)
 800de20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de24:	f7f2 fa52 	bl	80002cc <__adddf3>
 800de28:	4622      	mov	r2, r4
 800de2a:	462b      	mov	r3, r5
 800de2c:	f7f2 fc04 	bl	8000638 <__aeabi_dmul>
 800de30:	a355      	add	r3, pc, #340	; (adr r3, 800df88 <__kernel_tan+0x380>)
 800de32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de36:	f7f2 fa49 	bl	80002cc <__adddf3>
 800de3a:	4602      	mov	r2, r0
 800de3c:	460b      	mov	r3, r1
 800de3e:	ec51 0b1a 	vmov	r0, r1, d10
 800de42:	f7f2 fa43 	bl	80002cc <__adddf3>
 800de46:	ec53 2b19 	vmov	r2, r3, d9
 800de4a:	f7f2 fbf5 	bl	8000638 <__aeabi_dmul>
 800de4e:	4642      	mov	r2, r8
 800de50:	464b      	mov	r3, r9
 800de52:	f7f2 fa3b 	bl	80002cc <__adddf3>
 800de56:	ec53 2b18 	vmov	r2, r3, d8
 800de5a:	f7f2 fbed 	bl	8000638 <__aeabi_dmul>
 800de5e:	4642      	mov	r2, r8
 800de60:	464b      	mov	r3, r9
 800de62:	f7f2 fa33 	bl	80002cc <__adddf3>
 800de66:	a34a      	add	r3, pc, #296	; (adr r3, 800df90 <__kernel_tan+0x388>)
 800de68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6c:	4604      	mov	r4, r0
 800de6e:	460d      	mov	r5, r1
 800de70:	ec51 0b19 	vmov	r0, r1, d9
 800de74:	f7f2 fbe0 	bl	8000638 <__aeabi_dmul>
 800de78:	4622      	mov	r2, r4
 800de7a:	462b      	mov	r3, r5
 800de7c:	f7f2 fa26 	bl	80002cc <__adddf3>
 800de80:	460b      	mov	r3, r1
 800de82:	ec41 0b18 	vmov	d8, r0, r1
 800de86:	4602      	mov	r2, r0
 800de88:	4659      	mov	r1, fp
 800de8a:	4650      	mov	r0, sl
 800de8c:	f7f2 fa1e 	bl	80002cc <__adddf3>
 800de90:	4b44      	ldr	r3, [pc, #272]	; (800dfa4 <__kernel_tan+0x39c>)
 800de92:	429f      	cmp	r7, r3
 800de94:	4604      	mov	r4, r0
 800de96:	460d      	mov	r5, r1
 800de98:	f340 8086 	ble.w	800dfa8 <__kernel_tan+0x3a0>
 800de9c:	4630      	mov	r0, r6
 800de9e:	f7f2 fb61 	bl	8000564 <__aeabi_i2d>
 800dea2:	4622      	mov	r2, r4
 800dea4:	4680      	mov	r8, r0
 800dea6:	4689      	mov	r9, r1
 800dea8:	462b      	mov	r3, r5
 800deaa:	4620      	mov	r0, r4
 800deac:	4629      	mov	r1, r5
 800deae:	f7f2 fbc3 	bl	8000638 <__aeabi_dmul>
 800deb2:	4642      	mov	r2, r8
 800deb4:	4606      	mov	r6, r0
 800deb6:	460f      	mov	r7, r1
 800deb8:	464b      	mov	r3, r9
 800deba:	4620      	mov	r0, r4
 800debc:	4629      	mov	r1, r5
 800debe:	f7f2 fa05 	bl	80002cc <__adddf3>
 800dec2:	4602      	mov	r2, r0
 800dec4:	460b      	mov	r3, r1
 800dec6:	4630      	mov	r0, r6
 800dec8:	4639      	mov	r1, r7
 800deca:	f7f2 fcdf 	bl	800088c <__aeabi_ddiv>
 800dece:	ec53 2b18 	vmov	r2, r3, d8
 800ded2:	f7f2 f9f9 	bl	80002c8 <__aeabi_dsub>
 800ded6:	4602      	mov	r2, r0
 800ded8:	460b      	mov	r3, r1
 800deda:	4650      	mov	r0, sl
 800dedc:	4659      	mov	r1, fp
 800dede:	f7f2 f9f3 	bl	80002c8 <__aeabi_dsub>
 800dee2:	4602      	mov	r2, r0
 800dee4:	460b      	mov	r3, r1
 800dee6:	f7f2 f9f1 	bl	80002cc <__adddf3>
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	4640      	mov	r0, r8
 800def0:	4649      	mov	r1, r9
 800def2:	f7f2 f9e9 	bl	80002c8 <__aeabi_dsub>
 800def6:	9b00      	ldr	r3, [sp, #0]
 800def8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800defc:	f00a 0a02 	and.w	sl, sl, #2
 800df00:	4604      	mov	r4, r0
 800df02:	f1ca 0001 	rsb	r0, sl, #1
 800df06:	460d      	mov	r5, r1
 800df08:	f7f2 fb2c 	bl	8000564 <__aeabi_i2d>
 800df0c:	4602      	mov	r2, r0
 800df0e:	460b      	mov	r3, r1
 800df10:	4620      	mov	r0, r4
 800df12:	4629      	mov	r1, r5
 800df14:	f7f2 fb90 	bl	8000638 <__aeabi_dmul>
 800df18:	e69f      	b.n	800dc5a <__kernel_tan+0x52>
 800df1a:	bf00      	nop
 800df1c:	f3af 8000 	nop.w
 800df20:	54442d18 	.word	0x54442d18
 800df24:	3fe921fb 	.word	0x3fe921fb
 800df28:	33145c07 	.word	0x33145c07
 800df2c:	3c81a626 	.word	0x3c81a626
 800df30:	74bf7ad4 	.word	0x74bf7ad4
 800df34:	3efb2a70 	.word	0x3efb2a70
 800df38:	32f0a7e9 	.word	0x32f0a7e9
 800df3c:	3f12b80f 	.word	0x3f12b80f
 800df40:	1a8d1068 	.word	0x1a8d1068
 800df44:	3f3026f7 	.word	0x3f3026f7
 800df48:	fee08315 	.word	0xfee08315
 800df4c:	3f57dbc8 	.word	0x3f57dbc8
 800df50:	e96e8493 	.word	0xe96e8493
 800df54:	3f8226e3 	.word	0x3f8226e3
 800df58:	1bb341fe 	.word	0x1bb341fe
 800df5c:	3faba1ba 	.word	0x3faba1ba
 800df60:	db605373 	.word	0xdb605373
 800df64:	bef375cb 	.word	0xbef375cb
 800df68:	a03792a6 	.word	0xa03792a6
 800df6c:	3f147e88 	.word	0x3f147e88
 800df70:	f2f26501 	.word	0xf2f26501
 800df74:	3f4344d8 	.word	0x3f4344d8
 800df78:	c9560328 	.word	0xc9560328
 800df7c:	3f6d6d22 	.word	0x3f6d6d22
 800df80:	8406d637 	.word	0x8406d637
 800df84:	3f9664f4 	.word	0x3f9664f4
 800df88:	1110fe7a 	.word	0x1110fe7a
 800df8c:	3fc11111 	.word	0x3fc11111
 800df90:	55555563 	.word	0x55555563
 800df94:	3fd55555 	.word	0x3fd55555
 800df98:	3e2fffff 	.word	0x3e2fffff
 800df9c:	3ff00000 	.word	0x3ff00000
 800dfa0:	bff00000 	.word	0xbff00000
 800dfa4:	3fe59427 	.word	0x3fe59427
 800dfa8:	2e01      	cmp	r6, #1
 800dfaa:	d02f      	beq.n	800e00c <__kernel_tan+0x404>
 800dfac:	460f      	mov	r7, r1
 800dfae:	4602      	mov	r2, r0
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	4689      	mov	r9, r1
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	4917      	ldr	r1, [pc, #92]	; (800e014 <__kernel_tan+0x40c>)
 800dfb8:	f7f2 fc68 	bl	800088c <__aeabi_ddiv>
 800dfbc:	2600      	movs	r6, #0
 800dfbe:	e9cd 0100 	strd	r0, r1, [sp]
 800dfc2:	4652      	mov	r2, sl
 800dfc4:	465b      	mov	r3, fp
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	4639      	mov	r1, r7
 800dfca:	f7f2 f97d 	bl	80002c8 <__aeabi_dsub>
 800dfce:	e9dd 4500 	ldrd	r4, r5, [sp]
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	ec51 0b18 	vmov	r0, r1, d8
 800dfda:	f7f2 f975 	bl	80002c8 <__aeabi_dsub>
 800dfde:	4632      	mov	r2, r6
 800dfe0:	462b      	mov	r3, r5
 800dfe2:	f7f2 fb29 	bl	8000638 <__aeabi_dmul>
 800dfe6:	46b0      	mov	r8, r6
 800dfe8:	460f      	mov	r7, r1
 800dfea:	4642      	mov	r2, r8
 800dfec:	462b      	mov	r3, r5
 800dfee:	4634      	mov	r4, r6
 800dff0:	4649      	mov	r1, r9
 800dff2:	4606      	mov	r6, r0
 800dff4:	4640      	mov	r0, r8
 800dff6:	f7f2 fb1f 	bl	8000638 <__aeabi_dmul>
 800dffa:	4b07      	ldr	r3, [pc, #28]	; (800e018 <__kernel_tan+0x410>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	f7f2 f965 	bl	80002cc <__adddf3>
 800e002:	4602      	mov	r2, r0
 800e004:	460b      	mov	r3, r1
 800e006:	4630      	mov	r0, r6
 800e008:	4639      	mov	r1, r7
 800e00a:	e665      	b.n	800dcd8 <__kernel_tan+0xd0>
 800e00c:	4682      	mov	sl, r0
 800e00e:	468b      	mov	fp, r1
 800e010:	e625      	b.n	800dc5e <__kernel_tan+0x56>
 800e012:	bf00      	nop
 800e014:	bff00000 	.word	0xbff00000
 800e018:	3ff00000 	.word	0x3ff00000
 800e01c:	00000000 	.word	0x00000000

0800e020 <floor>:
 800e020:	ec51 0b10 	vmov	r0, r1, d0
 800e024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e028:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e02c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e030:	2e13      	cmp	r6, #19
 800e032:	ee10 5a10 	vmov	r5, s0
 800e036:	ee10 8a10 	vmov	r8, s0
 800e03a:	460c      	mov	r4, r1
 800e03c:	dc32      	bgt.n	800e0a4 <floor+0x84>
 800e03e:	2e00      	cmp	r6, #0
 800e040:	da14      	bge.n	800e06c <floor+0x4c>
 800e042:	a333      	add	r3, pc, #204	; (adr r3, 800e110 <floor+0xf0>)
 800e044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e048:	f7f2 f940 	bl	80002cc <__adddf3>
 800e04c:	2200      	movs	r2, #0
 800e04e:	2300      	movs	r3, #0
 800e050:	f7f2 fd82 	bl	8000b58 <__aeabi_dcmpgt>
 800e054:	b138      	cbz	r0, 800e066 <floor+0x46>
 800e056:	2c00      	cmp	r4, #0
 800e058:	da57      	bge.n	800e10a <floor+0xea>
 800e05a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e05e:	431d      	orrs	r5, r3
 800e060:	d001      	beq.n	800e066 <floor+0x46>
 800e062:	4c2d      	ldr	r4, [pc, #180]	; (800e118 <floor+0xf8>)
 800e064:	2500      	movs	r5, #0
 800e066:	4621      	mov	r1, r4
 800e068:	4628      	mov	r0, r5
 800e06a:	e025      	b.n	800e0b8 <floor+0x98>
 800e06c:	4f2b      	ldr	r7, [pc, #172]	; (800e11c <floor+0xfc>)
 800e06e:	4137      	asrs	r7, r6
 800e070:	ea01 0307 	and.w	r3, r1, r7
 800e074:	4303      	orrs	r3, r0
 800e076:	d01f      	beq.n	800e0b8 <floor+0x98>
 800e078:	a325      	add	r3, pc, #148	; (adr r3, 800e110 <floor+0xf0>)
 800e07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07e:	f7f2 f925 	bl	80002cc <__adddf3>
 800e082:	2200      	movs	r2, #0
 800e084:	2300      	movs	r3, #0
 800e086:	f7f2 fd67 	bl	8000b58 <__aeabi_dcmpgt>
 800e08a:	2800      	cmp	r0, #0
 800e08c:	d0eb      	beq.n	800e066 <floor+0x46>
 800e08e:	2c00      	cmp	r4, #0
 800e090:	bfbe      	ittt	lt
 800e092:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e096:	fa43 f606 	asrlt.w	r6, r3, r6
 800e09a:	19a4      	addlt	r4, r4, r6
 800e09c:	ea24 0407 	bic.w	r4, r4, r7
 800e0a0:	2500      	movs	r5, #0
 800e0a2:	e7e0      	b.n	800e066 <floor+0x46>
 800e0a4:	2e33      	cmp	r6, #51	; 0x33
 800e0a6:	dd0b      	ble.n	800e0c0 <floor+0xa0>
 800e0a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e0ac:	d104      	bne.n	800e0b8 <floor+0x98>
 800e0ae:	ee10 2a10 	vmov	r2, s0
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	f7f2 f90a 	bl	80002cc <__adddf3>
 800e0b8:	ec41 0b10 	vmov	d0, r0, r1
 800e0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e0c8:	fa23 f707 	lsr.w	r7, r3, r7
 800e0cc:	4207      	tst	r7, r0
 800e0ce:	d0f3      	beq.n	800e0b8 <floor+0x98>
 800e0d0:	a30f      	add	r3, pc, #60	; (adr r3, 800e110 <floor+0xf0>)
 800e0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d6:	f7f2 f8f9 	bl	80002cc <__adddf3>
 800e0da:	2200      	movs	r2, #0
 800e0dc:	2300      	movs	r3, #0
 800e0de:	f7f2 fd3b 	bl	8000b58 <__aeabi_dcmpgt>
 800e0e2:	2800      	cmp	r0, #0
 800e0e4:	d0bf      	beq.n	800e066 <floor+0x46>
 800e0e6:	2c00      	cmp	r4, #0
 800e0e8:	da02      	bge.n	800e0f0 <floor+0xd0>
 800e0ea:	2e14      	cmp	r6, #20
 800e0ec:	d103      	bne.n	800e0f6 <floor+0xd6>
 800e0ee:	3401      	adds	r4, #1
 800e0f0:	ea25 0507 	bic.w	r5, r5, r7
 800e0f4:	e7b7      	b.n	800e066 <floor+0x46>
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e0fc:	fa03 f606 	lsl.w	r6, r3, r6
 800e100:	4435      	add	r5, r6
 800e102:	4545      	cmp	r5, r8
 800e104:	bf38      	it	cc
 800e106:	18e4      	addcc	r4, r4, r3
 800e108:	e7f2      	b.n	800e0f0 <floor+0xd0>
 800e10a:	2500      	movs	r5, #0
 800e10c:	462c      	mov	r4, r5
 800e10e:	e7aa      	b.n	800e066 <floor+0x46>
 800e110:	8800759c 	.word	0x8800759c
 800e114:	7e37e43c 	.word	0x7e37e43c
 800e118:	bff00000 	.word	0xbff00000
 800e11c:	000fffff 	.word	0x000fffff

0800e120 <scalbn>:
 800e120:	b570      	push	{r4, r5, r6, lr}
 800e122:	ec55 4b10 	vmov	r4, r5, d0
 800e126:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e12a:	4606      	mov	r6, r0
 800e12c:	462b      	mov	r3, r5
 800e12e:	b99a      	cbnz	r2, 800e158 <scalbn+0x38>
 800e130:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e134:	4323      	orrs	r3, r4
 800e136:	d036      	beq.n	800e1a6 <scalbn+0x86>
 800e138:	4b39      	ldr	r3, [pc, #228]	; (800e220 <scalbn+0x100>)
 800e13a:	4629      	mov	r1, r5
 800e13c:	ee10 0a10 	vmov	r0, s0
 800e140:	2200      	movs	r2, #0
 800e142:	f7f2 fa79 	bl	8000638 <__aeabi_dmul>
 800e146:	4b37      	ldr	r3, [pc, #220]	; (800e224 <scalbn+0x104>)
 800e148:	429e      	cmp	r6, r3
 800e14a:	4604      	mov	r4, r0
 800e14c:	460d      	mov	r5, r1
 800e14e:	da10      	bge.n	800e172 <scalbn+0x52>
 800e150:	a32b      	add	r3, pc, #172	; (adr r3, 800e200 <scalbn+0xe0>)
 800e152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e156:	e03a      	b.n	800e1ce <scalbn+0xae>
 800e158:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e15c:	428a      	cmp	r2, r1
 800e15e:	d10c      	bne.n	800e17a <scalbn+0x5a>
 800e160:	ee10 2a10 	vmov	r2, s0
 800e164:	4620      	mov	r0, r4
 800e166:	4629      	mov	r1, r5
 800e168:	f7f2 f8b0 	bl	80002cc <__adddf3>
 800e16c:	4604      	mov	r4, r0
 800e16e:	460d      	mov	r5, r1
 800e170:	e019      	b.n	800e1a6 <scalbn+0x86>
 800e172:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e176:	460b      	mov	r3, r1
 800e178:	3a36      	subs	r2, #54	; 0x36
 800e17a:	4432      	add	r2, r6
 800e17c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e180:	428a      	cmp	r2, r1
 800e182:	dd08      	ble.n	800e196 <scalbn+0x76>
 800e184:	2d00      	cmp	r5, #0
 800e186:	a120      	add	r1, pc, #128	; (adr r1, 800e208 <scalbn+0xe8>)
 800e188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e18c:	da1c      	bge.n	800e1c8 <scalbn+0xa8>
 800e18e:	a120      	add	r1, pc, #128	; (adr r1, 800e210 <scalbn+0xf0>)
 800e190:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e194:	e018      	b.n	800e1c8 <scalbn+0xa8>
 800e196:	2a00      	cmp	r2, #0
 800e198:	dd08      	ble.n	800e1ac <scalbn+0x8c>
 800e19a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e19e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e1a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e1a6:	ec45 4b10 	vmov	d0, r4, r5
 800e1aa:	bd70      	pop	{r4, r5, r6, pc}
 800e1ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e1b0:	da19      	bge.n	800e1e6 <scalbn+0xc6>
 800e1b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e1b6:	429e      	cmp	r6, r3
 800e1b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e1bc:	dd0a      	ble.n	800e1d4 <scalbn+0xb4>
 800e1be:	a112      	add	r1, pc, #72	; (adr r1, 800e208 <scalbn+0xe8>)
 800e1c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d1e2      	bne.n	800e18e <scalbn+0x6e>
 800e1c8:	a30f      	add	r3, pc, #60	; (adr r3, 800e208 <scalbn+0xe8>)
 800e1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ce:	f7f2 fa33 	bl	8000638 <__aeabi_dmul>
 800e1d2:	e7cb      	b.n	800e16c <scalbn+0x4c>
 800e1d4:	a10a      	add	r1, pc, #40	; (adr r1, 800e200 <scalbn+0xe0>)
 800e1d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d0b8      	beq.n	800e150 <scalbn+0x30>
 800e1de:	a10e      	add	r1, pc, #56	; (adr r1, 800e218 <scalbn+0xf8>)
 800e1e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1e4:	e7b4      	b.n	800e150 <scalbn+0x30>
 800e1e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e1ea:	3236      	adds	r2, #54	; 0x36
 800e1ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e1f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	4b0c      	ldr	r3, [pc, #48]	; (800e228 <scalbn+0x108>)
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	e7e8      	b.n	800e1ce <scalbn+0xae>
 800e1fc:	f3af 8000 	nop.w
 800e200:	c2f8f359 	.word	0xc2f8f359
 800e204:	01a56e1f 	.word	0x01a56e1f
 800e208:	8800759c 	.word	0x8800759c
 800e20c:	7e37e43c 	.word	0x7e37e43c
 800e210:	8800759c 	.word	0x8800759c
 800e214:	fe37e43c 	.word	0xfe37e43c
 800e218:	c2f8f359 	.word	0xc2f8f359
 800e21c:	81a56e1f 	.word	0x81a56e1f
 800e220:	43500000 	.word	0x43500000
 800e224:	ffff3cb0 	.word	0xffff3cb0
 800e228:	3c900000 	.word	0x3c900000

0800e22c <_init>:
 800e22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e22e:	bf00      	nop
 800e230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e232:	bc08      	pop	{r3}
 800e234:	469e      	mov	lr, r3
 800e236:	4770      	bx	lr

0800e238 <_fini>:
 800e238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e23a:	bf00      	nop
 800e23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e23e:	bc08      	pop	{r3}
 800e240:	469e      	mov	lr, r3
 800e242:	4770      	bx	lr
