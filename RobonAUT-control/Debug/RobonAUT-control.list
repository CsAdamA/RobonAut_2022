
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b61c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800b7f0  0800b7f0  0001b7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be58  0800be58  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800be58  0800be58  0001be58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be60  0800be60  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be60  0800be60  0001be60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be64  0800be64  0001be64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800be68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000204  0800c06c  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  0800c06c  00020660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fa3  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b82  00000000  00000000  000341d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00036d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00037d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254ea  00000000  00000000  00038ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145fb  00000000  00000000  0005e092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0147  00000000  00000000  0007268d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001527d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c4  00000000  00000000  00152824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b7d4 	.word	0x0800b7d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	0800b7d4 	.word	0x0800b7d4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <F4_Basic_Init>:


uint8_t swState[]={0,0};

void F4_Basic_Init(UART_HandleTypeDef *huart,TIM_HandleTypeDef *htim,TIM_HandleTypeDef *htim3,TIM_HandleTypeDef *htim2)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	603b      	str	r3, [r7, #0]
	uint8_t buf[30];
	LED_R(0);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe0:	482a      	ldr	r0, [pc, #168]	; (800108c <F4_Basic_Init+0xc0>)
 8000fe2:	f003 f9e5 	bl	80043b0 <HAL_GPIO_WritePin>
	LED_B(0);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fec:	4827      	ldr	r0, [pc, #156]	; (800108c <F4_Basic_Init+0xc0>)
 8000fee:	f003 f9df 	bl	80043b0 <HAL_GPIO_WritePin>
	LED_G(0);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4825      	ldr	r0, [pc, #148]	; (800108c <F4_Basic_Init+0xc0>)
 8000ff8:	f003 f9da 	bl	80043b0 <HAL_GPIO_WritePin>
	LED_Y(0);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001002:	4822      	ldr	r0, [pc, #136]	; (800108c <F4_Basic_Init+0xc0>)
 8001004:	f003 f9d4 	bl	80043b0 <HAL_GPIO_WritePin>
	memset(buf,0,30); //a buf tömböt feltöltöm 0-kkal
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	221e      	movs	r2, #30
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f006 faa7 	bl	8007564 <memset>
	sprintf(buf,"RobonAUT 2022 Bit Bangers\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	491d      	ldr	r1, [pc, #116]	; (8001090 <F4_Basic_Init+0xc4>)
 800101c:	4618      	mov	r0, r3
 800101e:	f006 ff13 	bl	8007e48 <siprintf>
	HAL_UART_Transmit(huart, buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f8f2 	bl	8000210 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	b29a      	uxth	r2, r3
 8001030:	f107 0110 	add.w	r1, r7, #16
 8001034:	2364      	movs	r3, #100	; 0x64
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f005 fe53 	bl	8006ce2 <HAL_UART_Transmit>
	HAL_TIM_Base_Start(htim);//heart beat timer tick start
 800103c:	68b8      	ldr	r0, [r7, #8]
 800103e:	f004 f873 	bl	8005128 <HAL_TIM_Base_Start>

	//MotorEnable engedélyezése
	motorEnRemote=1;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <F4_Basic_Init+0xc8>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
	motorEnBattOk=1;
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <F4_Basic_Init+0xcc>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
	motorEnLineOk=1;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <F4_Basic_Init+0xd0>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]

	//kezdeti pwm kitoltes megadasa->0 hiszen nem akarjuk h forogjon
	TIM3->CCR1=0;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <F4_Basic_Init+0xd4>)
 8001056:	2200      	movs	r2, #0
 8001058:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=0;
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <F4_Basic_Init+0xd4>)
 800105c:	2200      	movs	r2, #0
 800105e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8001060:	2100      	movs	r1, #0
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f004 f918 	bl	8005298 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 8001068:	2104      	movs	r1, #4
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f004 f914 	bl	8005298 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 8001070:	2100      	movs	r1, #0
 8001072:	6838      	ldr	r0, [r7, #0]
 8001074:	f004 f910 	bl	8005298 <HAL_TIM_PWM_Start>
	TIM2->CCR1=600;
 8001078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800107c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001082:	bf00      	nop
 8001084:	3730      	adds	r7, #48	; 0x30
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40020400 	.word	0x40020400
 8001090:	0800b7f0 	.word	0x0800b7f0
 8001094:	20000624 	.word	0x20000624
 8001098:	20000625 	.word	0x20000625
 800109c:	20000626 	.word	0x20000626
 80010a0:	40000400 	.word	0x40000400
 80010a4:	00000000 	.word	0x00000000

080010a8 <Meas_Bat_Task>:


void Meas_Bat_Task(ADC_HandleTypeDef *hadc,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
	float bat;
	static char msg[20];
	static uint32_t meas_bat_tick=0;


	if(meas_bat_tick>tick) return;
 80010b6:	4b44      	ldr	r3, [pc, #272]	; (80011c8 <Meas_Bat_Task+0x120>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d379      	bcc.n	80011b4 <Meas_Bat_Task+0x10c>
	meas_bat_tick= tick + period;
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <Meas_Bat_Task+0x120>)
 80010c8:	6013      	str	r3, [r2, #0]

	//get ADC value
	HAL_ADC_Start(hadc);
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f001 ff78 	bl	8002fc0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 3);
 80010d0:	2103      	movs	r1, #3
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f002 f846 	bl	8003164 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(hadc);
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f002 f8ce 	bl	800327a <HAL_ADC_GetValue>
 80010de:	4603      	mov	r3, r0
 80010e0:	82fb      	strh	r3, [r7, #22]

	//Raw to Volt
	bat=(float)raw/2091*8.05;
 80010e2:	8afb      	ldrh	r3, [r7, #22]
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ec:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80011cc <Meas_Bat_Task+0x124>
 80010f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010f4:	ee16 0a90 	vmov	r0, s13
 80010f8:	f7ff fa46 	bl	8000588 <__aeabi_f2d>
 80010fc:	a330      	add	r3, pc, #192	; (adr r3, 80011c0 <Meas_Bat_Task+0x118>)
 80010fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001102:	f7ff fa99 	bl	8000638 <__aeabi_dmul>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fd8b 	bl	8000c28 <__aeabi_d2f>
 8001112:	4603      	mov	r3, r0
 8001114:	613b      	str	r3, [r7, #16]

	//Print Value
	sprintf(msg,"NI-MH feszultsege: %3.2f [V] (%d)\r\n",bat,raw);
 8001116:	6938      	ldr	r0, [r7, #16]
 8001118:	f7ff fa36 	bl	8000588 <__aeabi_f2d>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	8af9      	ldrh	r1, [r7, #22]
 8001122:	9100      	str	r1, [sp, #0]
 8001124:	492a      	ldr	r1, [pc, #168]	; (80011d0 <Meas_Bat_Task+0x128>)
 8001126:	482b      	ldr	r0, [pc, #172]	; (80011d4 <Meas_Bat_Task+0x12c>)
 8001128:	f006 fe8e 	bl	8007e48 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*)msg, strlen(msg),3);
 800112c:	4829      	ldr	r0, [pc, #164]	; (80011d4 <Meas_Bat_Task+0x12c>)
 800112e:	f7ff f86f 	bl	8000210 <strlen>
 8001132:	4603      	mov	r3, r0
 8001134:	b29a      	uxth	r2, r3
 8001136:	2303      	movs	r3, #3
 8001138:	4926      	ldr	r1, [pc, #152]	; (80011d4 <Meas_Bat_Task+0x12c>)
 800113a:	68b8      	ldr	r0, [r7, #8]
 800113c:	f005 fdd1 	bl	8006ce2 <HAL_UART_Transmit>


	memset(msg,0,30);
 8001140:	221e      	movs	r2, #30
 8001142:	2100      	movs	r1, #0
 8001144:	4823      	ldr	r0, [pc, #140]	; (80011d4 <Meas_Bat_Task+0x12c>)
 8001146:	f006 fa0d 	bl	8007564 <memset>
	if (raw<1600 && EN_FB) //ha be van kapcolva a motorvezérlő és az akkuja feszültsége alacsony
 800114a:	8afb      	ldrh	r3, [r7, #22]
 800114c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001150:	d226      	bcs.n	80011a0 <Meas_Bat_Task+0xf8>
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	4820      	ldr	r0, [pc, #128]	; (80011d8 <Meas_Bat_Task+0x130>)
 8001156:	f003 f913 	bl	8004380 <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d01f      	beq.n	80011a0 <Meas_Bat_Task+0xf8>
	{
		meas_bat_tick= tick + period/10;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	4a1e      	ldr	r2, [pc, #120]	; (80011dc <Meas_Bat_Task+0x134>)
 8001164:	fba2 2303 	umull	r2, r3, r2, r3
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <Meas_Bat_Task+0x120>)
 8001170:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 8001172:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001176:	4818      	ldr	r0, [pc, #96]	; (80011d8 <Meas_Bat_Task+0x130>)
 8001178:	f003 f933 	bl	80043e2 <HAL_GPIO_TogglePin>
		sprintf(msg,"Toltes szukseges\r\n");
 800117c:	4918      	ldr	r1, [pc, #96]	; (80011e0 <Meas_Bat_Task+0x138>)
 800117e:	4815      	ldr	r0, [pc, #84]	; (80011d4 <Meas_Bat_Task+0x12c>)
 8001180:	f006 fe62 	bl	8007e48 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*)msg, strlen(msg),10);
 8001184:	4813      	ldr	r0, [pc, #76]	; (80011d4 <Meas_Bat_Task+0x12c>)
 8001186:	f7ff f843 	bl	8000210 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	b29a      	uxth	r2, r3
 800118e:	230a      	movs	r3, #10
 8001190:	4910      	ldr	r1, [pc, #64]	; (80011d4 <Meas_Bat_Task+0x12c>)
 8001192:	68b8      	ldr	r0, [r7, #8]
 8001194:	f005 fda5 	bl	8006ce2 <HAL_UART_Transmit>

		//MotorEnable kikapcsolása ha akksi fesz beesik.
		motorEnBattOk=0;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <Meas_Bat_Task+0x13c>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	e00a      	b.n	80011b6 <Meas_Bat_Task+0x10e>

	}
	else
	{
		LED_Y(0);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a6:	480c      	ldr	r0, [pc, #48]	; (80011d8 <Meas_Bat_Task+0x130>)
 80011a8:	f003 f902 	bl	80043b0 <HAL_GPIO_WritePin>
		motorEnBattOk=1;
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <Meas_Bat_Task+0x13c>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e000      	b.n	80011b6 <Meas_Bat_Task+0x10e>
	if(meas_bat_tick>tick) return;
 80011b4:	bf00      	nop
	}


}
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	f3af 8000 	nop.w
 80011c0:	9999999a 	.word	0x9999999a
 80011c4:	40201999 	.word	0x40201999
 80011c8:	20000224 	.word	0x20000224
 80011cc:	4502b000 	.word	0x4502b000
 80011d0:	0800b80c 	.word	0x0800b80c
 80011d4:	20000228 	.word	0x20000228
 80011d8:	40020400 	.word	0x40020400
 80011dc:	cccccccd 	.word	0xcccccccd
 80011e0:	0800b830 	.word	0x0800b830
 80011e4:	20000625 	.word	0x20000625

080011e8 <SW_Read_Task>:


void SW_Read_Task(uint32_t tick, uint32_t period)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
	static uint32_t sw_read_task_tick=0;

	if(sw_read_task_tick>tick) return;
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <SW_Read_Task+0x8c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d337      	bcc.n	800126c <SW_Read_Task+0x84>
	sw_read_task_tick = tick + period;
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	4413      	add	r3, r2
 8001202:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <SW_Read_Task+0x8c>)
 8001204:	6013      	str	r3, [r2, #0]

	swState[0]=SW1;
 8001206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120a:	481b      	ldr	r0, [pc, #108]	; (8001278 <SW_Read_Task+0x90>)
 800120c:	f003 f8b8 	bl	8004380 <HAL_GPIO_ReadPin>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <SW_Read_Task+0x94>)
 8001216:	701a      	strb	r2, [r3, #0]
	swState[1]=SW2;
 8001218:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800121c:	4818      	ldr	r0, [pc, #96]	; (8001280 <SW_Read_Task+0x98>)
 800121e:	f003 f8af 	bl	8004380 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <SW_Read_Task+0x94>)
 8001228:	705a      	strb	r2, [r3, #1]

	if(swState[0]) LED_G(1);
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <SW_Read_Task+0x94>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d005      	beq.n	800123e <SW_Read_Task+0x56>
 8001232:	2200      	movs	r2, #0
 8001234:	2102      	movs	r1, #2
 8001236:	4812      	ldr	r0, [pc, #72]	; (8001280 <SW_Read_Task+0x98>)
 8001238:	f003 f8ba 	bl	80043b0 <HAL_GPIO_WritePin>
 800123c:	e004      	b.n	8001248 <SW_Read_Task+0x60>
	else LED_G(0);
 800123e:	2201      	movs	r2, #1
 8001240:	2102      	movs	r1, #2
 8001242:	480f      	ldr	r0, [pc, #60]	; (8001280 <SW_Read_Task+0x98>)
 8001244:	f003 f8b4 	bl	80043b0 <HAL_GPIO_WritePin>
	if(swState[1]) LED_B(1);
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <SW_Read_Task+0x94>)
 800124a:	785b      	ldrb	r3, [r3, #1]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <SW_Read_Task+0x76>
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001256:	480a      	ldr	r0, [pc, #40]	; (8001280 <SW_Read_Task+0x98>)
 8001258:	f003 f8aa 	bl	80043b0 <HAL_GPIO_WritePin>
 800125c:	e007      	b.n	800126e <SW_Read_Task+0x86>
	else LED_B(0);
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001264:	4806      	ldr	r0, [pc, #24]	; (8001280 <SW_Read_Task+0x98>)
 8001266:	f003 f8a3 	bl	80043b0 <HAL_GPIO_WritePin>
 800126a:	e000      	b.n	800126e <SW_Read_Task+0x86>
	if(sw_read_task_tick>tick) return;
 800126c:	bf00      	nop
}
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2000023c 	.word	0x2000023c
 8001278:	40020000 	.word	0x40020000
 800127c:	20000220 	.word	0x20000220
 8001280:	40020400 	.word	0x40020400

08001284 <Motor_Drive_Task>:
int32_t motorDuty=200;//(-1000)-től (1000)-ig változhasson elméletben (gykorlatban -950 től 950 ig és a [-50,50] sáv is tiltott)
//ha 1000 akkor a motor full csutkán megy előre
//ha -1000 akkor a motor full csutkán megy hátra

void Motor_Drive_Task(TIM_HandleTypeDef *htim, UART_HandleTypeDef *huart, uint32_t tick, uint32_t period) //DUTY paramtert kiszedtem -> változtassuk a globális változót
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
	static uint32_t motorDutyPrev=0;
	static uint32_t motor_drive_task_tick=0;
	int32_t ccr1;
	int32_t ccr2;
	if(motor_drive_task_tick>tick) return;
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <Motor_Drive_Task+0x98>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	d33b      	bcc.n	8001314 <Motor_Drive_Task+0x90>
	motor_drive_task_tick= tick + period;
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	4413      	add	r3, r2
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <Motor_Drive_Task+0x98>)
 80012a4:	6013      	str	r3, [r2, #0]
	sprintf(buf,"Kitoltesi tenyezo: %d \r\n",DUTY);
	HAL_UART_Transmit(huart, buf, strlen(buf), 10);
	motor_drive_task_tick= tick + 2000;
#endif

	if(motorEnBattOk && motorEnRemote && motorEnLineOk) MOTOR_EN(1);//ha nem nyomtunk vészstopot és az akkuk is rendben vannak akkor pöröghet a motor
 80012a6:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <Motor_Drive_Task+0x9c>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00d      	beq.n	80012ca <Motor_Drive_Task+0x46>
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <Motor_Drive_Task+0xa0>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d009      	beq.n	80012ca <Motor_Drive_Task+0x46>
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <Motor_Drive_Task+0xa4>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <Motor_Drive_Task+0x46>
 80012be:	2201      	movs	r2, #1
 80012c0:	2140      	movs	r1, #64	; 0x40
 80012c2:	481a      	ldr	r0, [pc, #104]	; (800132c <Motor_Drive_Task+0xa8>)
 80012c4:	f003 f874 	bl	80043b0 <HAL_GPIO_WritePin>
 80012c8:	e004      	b.n	80012d4 <Motor_Drive_Task+0x50>
	else MOTOR_EN(0); //amugy stop
 80012ca:	2200      	movs	r2, #0
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	4817      	ldr	r0, [pc, #92]	; (800132c <Motor_Drive_Task+0xa8>)
 80012d0:	f003 f86e 	bl	80043b0 <HAL_GPIO_WritePin>
	//A két érték amit irogatsz (TIM3->CCR1,CCR2) konkrét timer periféria regiszterek, nem feltétlen jó őket folyamatosan újraírni
	if(motorDuty!=motorDutyPrev)//csak akkor írjuk át őket ha tényleg muszáj (ha változtak az előző taskhívás óta)
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <Motor_Drive_Task+0xac>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a16      	ldr	r2, [pc, #88]	; (8001334 <Motor_Drive_Task+0xb0>)
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	4293      	cmp	r3, r2
 80012de:	d013      	beq.n	8001308 <Motor_Drive_Task+0x84>
	{
		ccr2 = (motorDuty + 1000)/2-1;
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <Motor_Drive_Task+0xac>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80012e8:	0fda      	lsrs	r2, r3, #31
 80012ea:	4413      	add	r3, r2
 80012ec:	105b      	asrs	r3, r3, #1
 80012ee:	3b01      	subs	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
		ccr1= 1000-ccr2-2;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 80012f8:	3302      	adds	r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
		//2 Referencia megadása
		//Ezeket a loopba kéne változtatni folyamatosan, pwm-elinditas mashova kell majd
		TIM3->CCR1=ccr1;
 80012fc:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <Motor_Drive_Task+0xb4>)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2=ccr2;
 8001302:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <Motor_Drive_Task+0xb4>)
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	6393      	str	r3, [r2, #56]	; 0x38
	}
	motorDutyPrev=motorDuty;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <Motor_Drive_Task+0xac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <Motor_Drive_Task+0xb0>)
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e000      	b.n	8001316 <Motor_Drive_Task+0x92>
	if(motor_drive_task_tick>tick) return;
 8001314:	bf00      	nop


}
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000240 	.word	0x20000240
 8001320:	20000625 	.word	0x20000625
 8001324:	20000624 	.word	0x20000624
 8001328:	20000626 	.word	0x20000626
 800132c:	40020400 	.word	0x40020400
 8001330:	20000000 	.word	0x20000000
 8001334:	20000244 	.word	0x20000244
 8001338:	40000400 	.word	0x40000400

0800133c <G0_Read>:
uint8_t txBuf[]={CMD_READ};
uint8_t rxBuf[]={0,0,0,0,0,0,0,0};


uint8_t G0_Read(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debug)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
#ifdef G0_DEBUG
	uint8_t str[40];
#endif
	uint8_t state=0;
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart_stm, txBuf,1, 1);
 800134a:	2301      	movs	r3, #1
 800134c:	2201      	movs	r2, #1
 800134e:	4910      	ldr	r1, [pc, #64]	; (8001390 <G0_Read+0x54>)
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f005 fcc6 	bl	8006ce2 <HAL_UART_Transmit>
	state = HAL_UART_Receive(huart_stm, rxBuf, 8, 2);
 8001356:	2302      	movs	r3, #2
 8001358:	2208      	movs	r2, #8
 800135a:	490e      	ldr	r1, [pc, #56]	; (8001394 <G0_Read+0x58>)
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f005 fd52 	bl	8006e06 <HAL_UART_Receive>
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]
	if((state==0) && (rxBuf[0]==START_BYTE) && (rxBuf[7]==STOP_BYTE) )//jöt adat a G0 tól és a keret is megfelelő
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d109      	bne.n	8001380 <G0_Read+0x44>
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <G0_Read+0x58>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b17      	cmp	r3, #23
 8001372:	d105      	bne.n	8001380 <G0_Read+0x44>
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <G0_Read+0x58>)
 8001376:	79db      	ldrb	r3, [r3, #7]
 8001378:	2b12      	cmp	r3, #18
 800137a:	d101      	bne.n	8001380 <G0_Read+0x44>
	#ifdef G0_DEBUG
			sprintf(str,"LS: %1d, %3d, %3d   -   TOF1: %1d, %4d \n\r", rxBuf[1],rxBuf[2],rxBuf[3], rxBuf[4],dist);
			HAL_UART_Transmit(huart_debug, str, strlen(str), 10);
			read_g0_task_tick+=1000;
	#endif
		return 0;
 800137c:	2300      	movs	r3, #0
 800137e:	e003      	b.n	8001388 <G0_Read+0x4c>
	}
	else //nem jött szabályos adat a G0-tól
	{
		motorEnLineOk=0;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <G0_Read+0x5c>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
#ifdef G0_DEBUG
		sprintf(str,"G0 read error!\n\r");
		HAL_UART_Transmit(huart_debug, str, strlen(str), 10);
		read_g0_task_tick+=1000;
#endif
		return 1;
 8001386:	2301      	movs	r3, #1
	}
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000004 	.word	0x20000004
 8001394:	20000248 	.word	0x20000248
 8001398:	20000626 	.word	0x20000626
 800139c:	00000000 	.word	0x00000000

080013a0 <Line_Track_Task>:


void Line_Track_Task(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debug, uint32_t tick, uint32_t period)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	603b      	str	r3, [r7, #0]

	uint32_t dist=0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
	static float gamma;

	static float k_p = K_P_600;
	static float k_delta = K_DELTA_600;
	static uint8_t speed = GO_FAST;
	int32_t ccr = SERVO_CCR_MIDDLE;
 80013b2:	f240 2351 	movw	r3, #593	; 0x251
 80013b6:	617b      	str	r3, [r7, #20]

	if(read_g0_task_tick>tick) return;
 80013b8:	4b69      	ldr	r3, [pc, #420]	; (8001560 <Line_Track_Task+0x1c0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	429a      	cmp	r2, r3
 80013c0:	f0c0 81f0 	bcc.w	80017a4 <Line_Track_Task+0x404>
	read_g0_task_tick = tick + period;
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a65      	ldr	r2, [pc, #404]	; (8001560 <Line_Track_Task+0x1c0>)
 80013cc:	6013      	str	r3, [r2, #0]

	if(G0_Read(huart_stm, huart_debug)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 80013ce:	68b9      	ldr	r1, [r7, #8]
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff ffb3 	bl	800133c <G0_Read>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f040 81e5 	bne.w	80017a8 <Line_Track_Task+0x408>

	if (LINE_CNT<1) //ha nincs vonal a kocsi alatt
 80013de:	4b61      	ldr	r3, [pc, #388]	; (8001564 <Line_Track_Task+0x1c4>)
 80013e0:	785b      	ldrb	r3, [r3, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d103      	bne.n	80013ee <Line_Track_Task+0x4e>
	{
		motorEnLineOk=0; //áljunk meg
 80013e6:	4b60      	ldr	r3, [pc, #384]	; (8001568 <Line_Track_Task+0x1c8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
		return;
 80013ec:	e1dd      	b.n	80017aa <Line_Track_Task+0x40a>
	}
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 80013ee:	4b5e      	ldr	r3, [pc, #376]	; (8001568 <Line_Track_Task+0x1c8>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]

	/*****Gyorsasági pálya üzemmód******/
	if(swState[0]==FAST_MODE)
 80013f4:	4b5d      	ldr	r3, [pc, #372]	; (800156c <Line_Track_Task+0x1cc>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d15c      	bne.n	80014b6 <Line_Track_Task+0x116>
	{
		/*****Gyorsító jelölés figyelése (szaggatott 3 vonal)*****/
		if(LINE_CNT != lineCnt_prev) //ha változik az alattunk lévő vonalak száma
 80013fc:	4b59      	ldr	r3, [pc, #356]	; (8001564 <Line_Track_Task+0x1c4>)
 80013fe:	785a      	ldrb	r2, [r3, #1]
 8001400:	4b5b      	ldr	r3, [pc, #364]	; (8001570 <Line_Track_Task+0x1d0>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d031      	beq.n	800146c <Line_Track_Task+0xcc>
		{
			dt[index] = tick - tick_prev;
 8001408:	4b5a      	ldr	r3, [pc, #360]	; (8001574 <Line_Track_Task+0x1d4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a5a      	ldr	r2, [pc, #360]	; (8001578 <Line_Track_Task+0x1d8>)
 800140e:	7812      	ldrb	r2, [r2, #0]
 8001410:	4611      	mov	r1, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	4a59      	ldr	r2, [pc, #356]	; (800157c <Line_Track_Task+0x1dc>)
 8001418:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			if((dt[0] + dt[1] + dt[2] + dt[3] + dt[4]) < DRAG_TIME_MS)
 800141c:	4b57      	ldr	r3, [pc, #348]	; (800157c <Line_Track_Task+0x1dc>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b56      	ldr	r3, [pc, #344]	; (800157c <Line_Track_Task+0x1dc>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	441a      	add	r2, r3
 8001426:	4b55      	ldr	r3, [pc, #340]	; (800157c <Line_Track_Task+0x1dc>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	441a      	add	r2, r3
 800142c:	4b53      	ldr	r3, [pc, #332]	; (800157c <Line_Track_Task+0x1dc>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	441a      	add	r2, r3
 8001432:	4b52      	ldr	r3, [pc, #328]	; (800157c <Line_Track_Task+0x1dc>)
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	4413      	add	r3, r2
 8001438:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800143c:	d209      	bcs.n	8001452 <Line_Track_Task+0xb2>
			{
				motorDuty=600;
 800143e:	4b50      	ldr	r3, [pc, #320]	; (8001580 <Line_Track_Task+0x1e0>)
 8001440:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001444:	601a      	str	r2, [r3, #0]
				k_p = K_P_600;
 8001446:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <Line_Track_Task+0x1e4>)
 8001448:	4a4f      	ldr	r2, [pc, #316]	; (8001588 <Line_Track_Task+0x1e8>)
 800144a:	601a      	str	r2, [r3, #0]
				k_delta = K_DELTA_600;
 800144c:	4b4f      	ldr	r3, [pc, #316]	; (800158c <Line_Track_Task+0x1ec>)
 800144e:	4a50      	ldr	r2, [pc, #320]	; (8001590 <Line_Track_Task+0x1f0>)
 8001450:	601a      	str	r2, [r3, #0]
			}

			index++;
 8001452:	4b49      	ldr	r3, [pc, #292]	; (8001578 <Line_Track_Task+0x1d8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b47      	ldr	r3, [pc, #284]	; (8001578 <Line_Track_Task+0x1d8>)
 800145c:	701a      	strb	r2, [r3, #0]
			if(index>4) index=0;
 800145e:	4b46      	ldr	r3, [pc, #280]	; (8001578 <Line_Track_Task+0x1d8>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b04      	cmp	r3, #4
 8001464:	d902      	bls.n	800146c <Line_Track_Task+0xcc>
 8001466:	4b44      	ldr	r3, [pc, #272]	; (8001578 <Line_Track_Task+0x1d8>)
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
		}
		/* A memóriajellegű statikus változók segítségével vizsgáljuk a szaggatott vonalat*/
		if(LINE_CNT != 2) //a kettőre váltás nem érdekel minket csak az 1 be vagy 3 ba váltás
 800146c:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <Line_Track_Task+0x1c4>)
 800146e:	785b      	ldrb	r3, [r3, #1]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d006      	beq.n	8001482 <Line_Track_Task+0xe2>
		{
			lineCnt_prev = LINE_CNT; //az előző értéket a jelenlegihez hangoljuk
 8001474:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <Line_Track_Task+0x1c4>)
 8001476:	785a      	ldrb	r2, [r3, #1]
 8001478:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <Line_Track_Task+0x1d0>)
 800147a:	701a      	strb	r2, [r3, #0]
			tick_prev = tick;
 800147c:	4a3d      	ldr	r2, [pc, #244]	; (8001574 <Line_Track_Task+0x1d4>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
		}

		/*****Lassító jelölés figyelése (folytonos 3 vonal)*****/
		if(LINE_CNT > 1) //ha 3 vonalat érzékelünk
 8001482:	4b38      	ldr	r3, [pc, #224]	; (8001564 <Line_Track_Task+0x1c4>)
 8001484:	785b      	ldrb	r3, [r3, #1]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d911      	bls.n	80014ae <Line_Track_Task+0x10e>
		{
			if(tick > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 800148a:	4b42      	ldr	r3, [pc, #264]	; (8001594 <Line_Track_Task+0x1f4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	f240 8097 	bls.w	80015c8 <Line_Track_Task+0x228>
			{
				motorDuty = 200;
 800149a:	4b39      	ldr	r3, [pc, #228]	; (8001580 <Line_Track_Task+0x1e0>)
 800149c:	22c8      	movs	r2, #200	; 0xc8
 800149e:	601a      	str	r2, [r3, #0]
				k_p = K_P_200;
 80014a0:	4b38      	ldr	r3, [pc, #224]	; (8001584 <Line_Track_Task+0x1e4>)
 80014a2:	4a3d      	ldr	r2, [pc, #244]	; (8001598 <Line_Track_Task+0x1f8>)
 80014a4:	601a      	str	r2, [r3, #0]
				k_delta = K_DELTA_200;
 80014a6:	4b39      	ldr	r3, [pc, #228]	; (800158c <Line_Track_Task+0x1ec>)
 80014a8:	4a39      	ldr	r2, [pc, #228]	; (8001590 <Line_Track_Task+0x1f0>)
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e08c      	b.n	80015c8 <Line_Track_Task+0x228>
			}
		}
		else //ha 1 vonalat érzékelünk
		{
			start3time = tick;
 80014ae:	4a39      	ldr	r2, [pc, #228]	; (8001594 <Line_Track_Task+0x1f4>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e088      	b.n	80015c8 <Line_Track_Task+0x228>
		}
	}

	/*****SC üzemmód******/
	else if(swState[0]==SC_MODE)
 80014b6:	4b2d      	ldr	r3, [pc, #180]	; (800156c <Line_Track_Task+0x1cc>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f040 8084 	bne.w	80015c8 <Line_Track_Task+0x228>
	{
		dist=(((uint16_t)rxBuf[5])<<8) | ((uint16_t)rxBuf[6]);
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <Line_Track_Task+0x1c4>)
 80014c2:	795b      	ldrb	r3, [r3, #5]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	4a27      	ldr	r2, [pc, #156]	; (8001564 <Line_Track_Task+0x1c4>)
 80014c8:	7992      	ldrb	r2, [r2, #6]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]

		if(speed==GO_FAST) //Ha túl messze vagyunk a SC -tól
 80014ce:	4b33      	ldr	r3, [pc, #204]	; (800159c <Line_Track_Task+0x1fc>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d11f      	bne.n	8001516 <Line_Track_Task+0x176>
		{
			motorDuty = 250;
 80014d6:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <Line_Track_Task+0x1e0>)
 80014d8:	22fa      	movs	r2, #250	; 0xfa
 80014da:	601a      	str	r2, [r3, #0]
			k_p = K_P_250;
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <Line_Track_Task+0x1e4>)
 80014de:	4a2a      	ldr	r2, [pc, #168]	; (8001588 <Line_Track_Task+0x1e8>)
 80014e0:	601a      	str	r2, [r3, #0]
			k_delta = K_DELTA_250;
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <Line_Track_Task+0x1ec>)
 80014e4:	4a2a      	ldr	r2, [pc, #168]	; (8001590 <Line_Track_Task+0x1f0>)
 80014e6:	601a      	str	r2, [r3, #0]

			if((dist < DIST_SLOW_MM) && rxBuf[4]) speed = GO_SLOW;
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014ee:	d206      	bcs.n	80014fe <Line_Track_Task+0x15e>
 80014f0:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <Line_Track_Task+0x1c4>)
 80014f2:	791b      	ldrb	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <Line_Track_Task+0x15e>
 80014f8:	4b28      	ldr	r3, [pc, #160]	; (800159c <Line_Track_Task+0x1fc>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
			if((dist < DIST_STOP_MM) && rxBuf[4]) speed = STOP;
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001504:	d260      	bcs.n	80015c8 <Line_Track_Task+0x228>
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <Line_Track_Task+0x1c4>)
 8001508:	791b      	ldrb	r3, [r3, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d05c      	beq.n	80015c8 <Line_Track_Task+0x228>
 800150e:	4b23      	ldr	r3, [pc, #140]	; (800159c <Line_Track_Task+0x1fc>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	e058      	b.n	80015c8 <Line_Track_Task+0x228>
		}
		else if(speed==GO_SLOW) //Ha túl közel vagyunk a SC-hoz
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <Line_Track_Task+0x1fc>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d142      	bne.n	80015a4 <Line_Track_Task+0x204>
		{
			motorDuty = 150;
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <Line_Track_Task+0x1e0>)
 8001520:	2296      	movs	r2, #150	; 0x96
 8001522:	601a      	str	r2, [r3, #0]
			k_p = K_P_150;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <Line_Track_Task+0x1e4>)
 8001526:	4a18      	ldr	r2, [pc, #96]	; (8001588 <Line_Track_Task+0x1e8>)
 8001528:	601a      	str	r2, [r3, #0]
			k_delta = K_DELTA_150;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <Line_Track_Task+0x1ec>)
 800152c:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <Line_Track_Task+0x200>)
 800152e:	601a      	str	r2, [r3, #0]

			if((dist > DIST_FAST_MM) && rxBuf[4]) speed = GO_FAST;
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001536:	d906      	bls.n	8001546 <Line_Track_Task+0x1a6>
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <Line_Track_Task+0x1c4>)
 800153a:	791b      	ldrb	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <Line_Track_Task+0x1a6>
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <Line_Track_Task+0x1fc>)
 8001542:	2202      	movs	r2, #2
 8001544:	701a      	strb	r2, [r3, #0]
			if((dist < DIST_STOP_MM) && rxBuf[4]) speed = STOP;
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800154c:	d23c      	bcs.n	80015c8 <Line_Track_Task+0x228>
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <Line_Track_Task+0x1c4>)
 8001550:	791b      	ldrb	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d038      	beq.n	80015c8 <Line_Track_Task+0x228>
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <Line_Track_Task+0x1fc>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	e034      	b.n	80015c8 <Line_Track_Task+0x228>
 800155e:	bf00      	nop
 8001560:	20000250 	.word	0x20000250
 8001564:	20000248 	.word	0x20000248
 8001568:	20000626 	.word	0x20000626
 800156c:	20000220 	.word	0x20000220
 8001570:	20000005 	.word	0x20000005
 8001574:	20000254 	.word	0x20000254
 8001578:	20000258 	.word	0x20000258
 800157c:	20000008 	.word	0x20000008
 8001580:	20000000 	.word	0x20000000
 8001584:	2000001c 	.word	0x2000001c
 8001588:	bf1d844d 	.word	0xbf1d844d
 800158c:	20000020 	.word	0x20000020
 8001590:	ba324207 	.word	0xba324207
 8001594:	2000025c 	.word	0x2000025c
 8001598:	bf218937 	.word	0xbf218937
 800159c:	20000024 	.word	0x20000024
 80015a0:	ba41a551 	.word	0xba41a551
		}
		else if(speed==STOP) //Ha a SC megállt
 80015a4:	4b90      	ldr	r3, [pc, #576]	; (80017e8 <Line_Track_Task+0x448>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10d      	bne.n	80015c8 <Line_Track_Task+0x228>
		{
			if((dist > DIST_STOP_MM) && rxBuf[4]) speed = GO_SLOW;
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015b2:	d906      	bls.n	80015c2 <Line_Track_Task+0x222>
 80015b4:	4b8d      	ldr	r3, [pc, #564]	; (80017ec <Line_Track_Task+0x44c>)
 80015b6:	791b      	ldrb	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <Line_Track_Task+0x222>
 80015bc:	4b8a      	ldr	r3, [pc, #552]	; (80017e8 <Line_Track_Task+0x448>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
			motorDuty = 50; //ezzel már meg kell hogy álljon
 80015c2:	4b8b      	ldr	r3, [pc, #556]	; (80017f0 <Line_Track_Task+0x450>)
 80015c4:	2232      	movs	r2, #50	; 0x32
 80015c6:	601a      	str	r2, [r3, #0]
		}


	}
	x_elso=((float)rxBuf[2]-123.5)*0.8158995;//*195/239;
 80015c8:	4b88      	ldr	r3, [pc, #544]	; (80017ec <Line_Track_Task+0x44c>)
 80015ca:	789b      	ldrb	r3, [r3, #2]
 80015cc:	ee07 3a90 	vmov	s15, r3
 80015d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d4:	ee17 0a90 	vmov	r0, s15
 80015d8:	f7fe ffd6 	bl	8000588 <__aeabi_f2d>
 80015dc:	a374      	add	r3, pc, #464	; (adr r3, 80017b0 <Line_Track_Task+0x410>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7fe fe71 	bl	80002c8 <__aeabi_dsub>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	a372      	add	r3, pc, #456	; (adr r3, 80017b8 <Line_Track_Task+0x418>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	f7ff f820 	bl	8000638 <__aeabi_dmul>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff fb12 	bl	8000c28 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	4a7b      	ldr	r2, [pc, #492]	; (80017f4 <Line_Track_Task+0x454>)
 8001608:	6013      	str	r3, [r2, #0]
	x_hatso=((float)rxBuf[3]-122.5)*0.8227848;//*195/237;
 800160a:	4b78      	ldr	r3, [pc, #480]	; (80017ec <Line_Track_Task+0x44c>)
 800160c:	78db      	ldrb	r3, [r3, #3]
 800160e:	ee07 3a90 	vmov	s15, r3
 8001612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001616:	ee17 0a90 	vmov	r0, s15
 800161a:	f7fe ffb5 	bl	8000588 <__aeabi_f2d>
 800161e:	a368      	add	r3, pc, #416	; (adr r3, 80017c0 <Line_Track_Task+0x420>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7fe fe50 	bl	80002c8 <__aeabi_dsub>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	a365      	add	r3, pc, #404	; (adr r3, 80017c8 <Line_Track_Task+0x428>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe ffff 	bl	8000638 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff faf1 	bl	8000c28 <__aeabi_d2f>
 8001646:	4603      	mov	r3, r0
 8001648:	4a6b      	ldr	r2, [pc, #428]	; (80017f8 <Line_Track_Task+0x458>)
 800164a:	6013      	str	r3, [r2, #0]
	delta=atan((float)(x_elso-x_hatso)/L_SENSOR);
 800164c:	4b69      	ldr	r3, [pc, #420]	; (80017f4 <Line_Track_Task+0x454>)
 800164e:	ed93 7a00 	vldr	s14, [r3]
 8001652:	4b69      	ldr	r3, [pc, #420]	; (80017f8 <Line_Track_Task+0x458>)
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80017fc <Line_Track_Task+0x45c>
 8001660:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001664:	ee16 0a90 	vmov	r0, s13
 8001668:	f7fe ff8e 	bl	8000588 <__aeabi_f2d>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	ec43 2b10 	vmov	d0, r2, r3
 8001674:	f008 fe60 	bl	800a338 <atan>
 8001678:	ec53 2b10 	vmov	r2, r3, d0
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f7ff fad2 	bl	8000c28 <__aeabi_d2f>
 8001684:	4603      	mov	r3, r0
 8001686:	4a5e      	ldr	r2, [pc, #376]	; (8001800 <Line_Track_Task+0x460>)
 8001688:	6013      	str	r3, [r2, #0]

	gamma = -k_p * x_elso -k_delta * delta;
 800168a:	4b5e      	ldr	r3, [pc, #376]	; (8001804 <Line_Track_Task+0x464>)
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	eeb1 7a67 	vneg.f32	s14, s15
 8001694:	4b57      	ldr	r3, [pc, #348]	; (80017f4 <Line_Track_Task+0x454>)
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800169e:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <Line_Track_Task+0x468>)
 80016a0:	edd3 6a00 	vldr	s13, [r3]
 80016a4:	4b56      	ldr	r3, [pc, #344]	; (8001800 <Line_Track_Task+0x460>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b2:	4b56      	ldr	r3, [pc, #344]	; (800180c <Line_Track_Task+0x46c>)
 80016b4:	edc3 7a00 	vstr	s15, [r3]
	PHI = atan(((float)L/(L+D))*tan(gamma))*57.29578;//*180.0/3.1415;
 80016b8:	4b54      	ldr	r3, [pc, #336]	; (800180c <Line_Track_Task+0x46c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ff63 	bl	8000588 <__aeabi_f2d>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	ec43 2b10 	vmov	d0, r2, r3
 80016ca:	f008 ffe1 	bl	800a690 <tan>
 80016ce:	ec51 0b10 	vmov	r0, r1, d0
 80016d2:	a33f      	add	r3, pc, #252	; (adr r3, 80017d0 <Line_Track_Task+0x430>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7fe ffae 	bl	8000638 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	ec43 2b17 	vmov	d7, r2, r3
 80016e4:	eeb0 0a47 	vmov.f32	s0, s14
 80016e8:	eef0 0a67 	vmov.f32	s1, s15
 80016ec:	f008 fe24 	bl	800a338 <atan>
 80016f0:	ec51 0b10 	vmov	r0, r1, d0
 80016f4:	a338      	add	r3, pc, #224	; (adr r3, 80017d8 <Line_Track_Task+0x438>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7fe ff9d 	bl	8000638 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f7ff fa8f 	bl	8000c28 <__aeabi_d2f>
 800170a:	4603      	mov	r3, r0
 800170c:	4a40      	ldr	r2, [pc, #256]	; (8001810 <Line_Track_Task+0x470>)
 800170e:	6013      	str	r3, [r2, #0]

	if(PHI<0) ccr = (uint16_t)(-SERVO_M * PHI + 593);//más a két irányba a szervóérzékenység
 8001710:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <Line_Track_Task+0x470>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	d511      	bpl.n	8001744 <Line_Track_Task+0x3a4>
 8001720:	4b3b      	ldr	r3, [pc, #236]	; (8001810 <Line_Track_Task+0x470>)
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800172a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001814 <Line_Track_Task+0x474>
 8001732:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800173a:	ee17 3a90 	vmov	r3, s15
 800173e:	b29b      	uxth	r3, r3
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e01b      	b.n	800177c <Line_Track_Task+0x3dc>
	else ccr = (uint16_t) (-0.6425*SERVO_M * PHI + 593); //különboző meredekséű egyenesek illesztünk
 8001744:	4b32      	ldr	r3, [pc, #200]	; (8001810 <Line_Track_Task+0x470>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe ff1d 	bl	8000588 <__aeabi_f2d>
 800174e:	a324      	add	r3, pc, #144	; (adr r3, 80017e0 <Line_Track_Task+0x440>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe ff70 	bl	8000638 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <Line_Track_Task+0x478>)
 8001766:	f7fe fdb1 	bl	80002cc <__adddf3>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff fa39 	bl	8000be8 <__aeabi_d2uiz>
 8001776:	4603      	mov	r3, r0
 8001778:	b29b      	uxth	r3, r3
 800177a:	617b      	str	r3, [r7, #20]

	if(ccr > CCR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001782:	dd03      	ble.n	800178c <Line_Track_Task+0x3ec>
	{
		ccr = CCR_MAX;
 8001784:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e006      	b.n	800179a <Line_Track_Task+0x3fa>
	}
	else if(ccr < CCR_MIN)//egyik irányba se
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8001792:	da02      	bge.n	800179a <Line_Track_Task+0x3fa>
	{
		ccr = CCR_MIN;
 8001794:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8001798:	617b      	str	r3, [r7, #20]
	}
	TIM2->CCR1 = ccr;
 800179a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	6353      	str	r3, [r2, #52]	; 0x34
 80017a2:	e002      	b.n	80017aa <Line_Track_Task+0x40a>
	if(read_g0_task_tick>tick) return;
 80017a4:	bf00      	nop
 80017a6:	e000      	b.n	80017aa <Line_Track_Task+0x40a>
	if(G0_Read(huart_stm, huart_debug)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 80017a8:	bf00      	nop
}
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	00000000 	.word	0x00000000
 80017b4:	405ee000 	.word	0x405ee000
 80017b8:	44aa53fc 	.word	0x44aa53fc
 80017bc:	3fea1bd9 	.word	0x3fea1bd9
 80017c0:	00000000 	.word	0x00000000
 80017c4:	405ea000 	.word	0x405ea000
 80017c8:	c9f4ab38 	.word	0xc9f4ab38
 80017cc:	3fea5440 	.word	0x3fea5440
 80017d0:	20000000 	.word	0x20000000
 80017d4:	3fe86186 	.word	0x3fe86186
 80017d8:	1e7967cb 	.word	0x1e7967cb
 80017dc:	404ca5dc 	.word	0x404ca5dc
 80017e0:	66666666 	.word	0x66666666
 80017e4:	c0334666 	.word	0xc0334666
 80017e8:	20000024 	.word	0x20000024
 80017ec:	20000248 	.word	0x20000248
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000260 	.word	0x20000260
 80017f8:	20000264 	.word	0x20000264
 80017fc:	437a0000 	.word	0x437a0000
 8001800:	20000268 	.word	0x20000268
 8001804:	2000001c 	.word	0x2000001c
 8001808:	20000020 	.word	0x20000020
 800180c:	2000026c 	.word	0x2000026c
 8001810:	20000270 	.word	0x20000270
 8001814:	44144000 	.word	0x44144000
 8001818:	40828800 	.word	0x40828800

0800181c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001822:	f001 fb17 	bl	8002e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001826:	f000 f85f 	bl	80018e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800182a:	f000 fcd7 	bl	80021dc <MX_GPIO_Init>
  MX_DMA_Init();
 800182e:	f000 fcb5 	bl	800219c <MX_DMA_Init>
  MX_TIM2_Init();
 8001832:	f000 f9f1 	bl	8001c18 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001836:	f000 fc33 	bl	80020a0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800183a:	f000 fae5 	bl	8001e08 <MX_TIM4_Init>
  MX_ADC2_Init();
 800183e:	f000 f917 	bl	8001a70 <MX_ADC2_Init>
  MX_TIM3_Init();
 8001842:	f000 fa5f 	bl	8001d04 <MX_TIM3_Init>
  MX_UART5_Init();
 8001846:	f000 fc01 	bl	800204c <MX_UART5_Init>
  MX_USART2_UART_Init();
 800184a:	f000 fc53 	bl	80020f4 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800184e:	f000 fba5 	bl	8001f9c <MX_TIM8_Init>
  MX_ADC1_Init();
 8001852:	f000 f8bb 	bl	80019cc <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001856:	f000 fc77 	bl	8002148 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 800185a:	f000 fb51 	bl	8001f00 <MX_TIM5_Init>
  MX_TIM1_Init();
 800185e:	f000 f959 	bl	8001b14 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  F4_Basic_Init(&huart2, &htim5,&htim3,&htim2);
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <main+0xb0>)
 8001864:	4a1a      	ldr	r2, [pc, #104]	; (80018d0 <main+0xb4>)
 8001866:	491b      	ldr	r1, [pc, #108]	; (80018d4 <main+0xb8>)
 8001868:	481b      	ldr	r0, [pc, #108]	; (80018d8 <main+0xbc>)
 800186a:	f7ff fbaf 	bl	8000fcc <F4_Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3); //inicializálunk a megfelelő perifériákkal
 800186e:	2108      	movs	r1, #8
 8001870:	481a      	ldr	r0, [pc, #104]	; (80018dc <main+0xc0>)
 8001872:	f000 fd83 	bl	800237c <Remote_Control_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart2, TICK, 43);
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <main+0xb8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	222b      	movs	r2, #43	; 0x2b
 800187e:	9200      	str	r2, [sp, #0]
 8001880:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <main+0xbc>)
 8001882:	2108      	movs	r1, #8
 8001884:	4815      	ldr	r0, [pc, #84]	; (80018dc <main+0xc0>)
 8001886:	f000 fd93 	bl	80023b0 <Remote_Control_Task>
	  Meas_Bat_Task(&hadc2, &huart2, TICK, 10000);
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <main+0xb8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001890:	f242 7310 	movw	r3, #10000	; 0x2710
 8001894:	4910      	ldr	r1, [pc, #64]	; (80018d8 <main+0xbc>)
 8001896:	4812      	ldr	r0, [pc, #72]	; (80018e0 <main+0xc4>)
 8001898:	f7ff fc06 	bl	80010a8 <Meas_Bat_Task>
	  Motor_Drive_Task(&htim3, &huart2, TICK, 13);
 800189c:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <main+0xb8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a2:	230d      	movs	r3, #13
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <main+0xbc>)
 80018a6:	480a      	ldr	r0, [pc, #40]	; (80018d0 <main+0xb4>)
 80018a8:	f7ff fcec 	bl	8001284 <Motor_Drive_Task>
	  SW_Read_Task(TICK, 97);
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <main+0xb8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	2161      	movs	r1, #97	; 0x61
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fc97 	bl	80011e8 <SW_Read_Task>
	  Line_Track_Task(&huart5, &huart2, TICK, 11);
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <main+0xb8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c0:	230b      	movs	r3, #11
 80018c2:	4905      	ldr	r1, [pc, #20]	; (80018d8 <main+0xbc>)
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <main+0xc8>)
 80018c6:	f7ff fd6b 	bl	80013a0 <Line_Track_Task>
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart2, TICK, 43);
 80018ca:	e7d4      	b.n	8001876 <main+0x5a>
 80018cc:	2000034c 	.word	0x2000034c
 80018d0:	20000394 	.word	0x20000394
 80018d4:	20000424 	.word	0x20000424
 80018d8:	2000059c 	.word	0x2000059c
 80018dc:	200003dc 	.word	0x200003dc
 80018e0:	200002bc 	.word	0x200002bc
 80018e4:	20000514 	.word	0x20000514

080018e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b094      	sub	sp, #80	; 0x50
 80018ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	2234      	movs	r2, #52	; 0x34
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f005 fe34 	bl	8007564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <SystemClock_Config+0xdc>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	4a2b      	ldr	r2, [pc, #172]	; (80019c4 <SystemClock_Config+0xdc>)
 8001916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191a:	6413      	str	r3, [r2, #64]	; 0x40
 800191c:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <SystemClock_Config+0xdc>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001928:	2300      	movs	r3, #0
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <SystemClock_Config+0xe0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <SystemClock_Config+0xe0>)
 8001932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <SystemClock_Config+0xe0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001944:	2301      	movs	r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800194c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194e:	2302      	movs	r3, #2
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001952:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001958:	2304      	movs	r3, #4
 800195a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800195c:	23b4      	movs	r3, #180	; 0xb4
 800195e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001960:	2302      	movs	r3, #2
 8001962:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001964:	2302      	movs	r3, #2
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001968:	2302      	movs	r3, #2
 800196a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	4618      	mov	r0, r3
 8001972:	f003 f8eb 	bl	8004b4c <HAL_RCC_OscConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800197c:	f000 fcf8 	bl	8002370 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001980:	f002 fd4a 	bl	8004418 <HAL_PWREx_EnableOverDrive>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800198a:	f000 fcf1 	bl	8002370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800198e:	230f      	movs	r3, #15
 8001990:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001992:	2302      	movs	r3, #2
 8001994:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800199a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800199e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	2105      	movs	r1, #5
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 fd83 	bl	80044b8 <HAL_RCC_ClockConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80019b8:	f000 fcda 	bl	8002370 <Error_Handler>
  }
}
 80019bc:	bf00      	nop
 80019be:	3750      	adds	r7, #80	; 0x50
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40007000 	.word	0x40007000

080019cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019d2:	463b      	mov	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <MX_ADC1_Init+0x98>)
 80019e0:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <MX_ADC1_Init+0x9c>)
 80019e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <MX_ADC1_Init+0x98>)
 80019e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_ADC1_Init+0x98>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <MX_ADC1_Init+0x98>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_ADC1_Init+0x98>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a0e:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <MX_ADC1_Init+0xa0>)
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a2c:	480d      	ldr	r0, [pc, #52]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a2e:	f001 fa83 	bl	8002f38 <HAL_ADC_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a38:	f000 fc9a 	bl	8002370 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a40:	2301      	movs	r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a48:	463b      	mov	r3, r7
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a4e:	f001 fc21 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a58:	f000 fc8a 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000274 	.word	0x20000274
 8001a68:	40012000 	.word	0x40012000
 8001a6c:	0f000001 	.word	0x0f000001

08001a70 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a76:	463b      	mov	r3, r7
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <MX_ADC2_Init+0x98>)
 8001a84:	4a21      	ldr	r2, [pc, #132]	; (8001b0c <MX_ADC2_Init+0x9c>)
 8001a86:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a88:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <MX_ADC2_Init+0x98>)
 8001a8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a8e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <MX_ADC2_Init+0x98>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <MX_ADC2_Init+0x98>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <MX_ADC2_Init+0x98>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001aa2:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <MX_ADC2_Init+0x98>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <MX_ADC2_Init+0x98>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <MX_ADC2_Init+0x98>)
 8001ab2:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <MX_ADC2_Init+0xa0>)
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_ADC2_Init+0x98>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <MX_ADC2_Init+0x98>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_ADC2_Init+0x98>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_ADC2_Init+0x98>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ad0:	480d      	ldr	r0, [pc, #52]	; (8001b08 <MX_ADC2_Init+0x98>)
 8001ad2:	f001 fa31 	bl	8002f38 <HAL_ADC_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001adc:	f000 fc48 	bl	8002370 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001aec:	463b      	mov	r3, r7
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_ADC2_Init+0x98>)
 8001af2:	f001 fbcf 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001afc:	f000 fc38 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200002bc 	.word	0x200002bc
 8001b0c:	40012100 	.word	0x40012100
 8001b10:	0f000001 	.word	0x0f000001

08001b14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b092      	sub	sp, #72	; 0x48
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
 8001b34:	615a      	str	r2, [r3, #20]
 8001b36:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f005 fd10 	bl	8007564 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b44:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <MX_TIM1_Init+0xfc>)
 8001b46:	4a33      	ldr	r2, [pc, #204]	; (8001c14 <MX_TIM1_Init+0x100>)
 8001b48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b4a:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <MX_TIM1_Init+0xfc>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b50:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <MX_TIM1_Init+0xfc>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b56:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <MX_TIM1_Init+0xfc>)
 8001b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <MX_TIM1_Init+0xfc>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <MX_TIM1_Init+0xfc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6a:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <MX_TIM1_Init+0xfc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b70:	4827      	ldr	r0, [pc, #156]	; (8001c10 <MX_TIM1_Init+0xfc>)
 8001b72:	f003 fb41 	bl	80051f8 <HAL_TIM_PWM_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001b7c:	f000 fbf8 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4820      	ldr	r0, [pc, #128]	; (8001c10 <MX_TIM1_Init+0xfc>)
 8001b90:	f004 ff78 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001b9a:	f000 fbe9 	bl	8002370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b9e:	2360      	movs	r3, #96	; 0x60
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bba:	220c      	movs	r2, #12
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4814      	ldr	r0, [pc, #80]	; (8001c10 <MX_TIM1_Init+0xfc>)
 8001bc0:	f004 f880 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8001bca:	f000 fbd1 	bl	8002370 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4807      	ldr	r0, [pc, #28]	; (8001c10 <MX_TIM1_Init+0xfc>)
 8001bf2:	f004 ffc3 	bl	8006b7c <HAL_TIMEx_ConfigBreakDeadTime>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001bfc:	f000 fbb8 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c00:	4803      	ldr	r0, [pc, #12]	; (8001c10 <MX_TIM1_Init+0xfc>)
 8001c02:	f000 fe59 	bl	80028b8 <HAL_TIM_MspPostInit>

}
 8001c06:	bf00      	nop
 8001c08:	3748      	adds	r7, #72	; 0x48
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000304 	.word	0x20000304
 8001c14:	40010000 	.word	0x40010000

08001c18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08e      	sub	sp, #56	; 0x38
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2c:	f107 0320 	add.w	r3, r7, #32
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
 8001c44:	615a      	str	r2, [r3, #20]
 8001c46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c48:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c52:	2259      	movs	r2, #89	; 0x59
 8001c54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c5e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c64:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c6a:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c6c:	2280      	movs	r2, #128	; 0x80
 8001c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c70:	4823      	ldr	r0, [pc, #140]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c72:	f003 fa09 	bl	8005088 <HAL_TIM_Base_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c7c:	f000 fb78 	bl	8002370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	481c      	ldr	r0, [pc, #112]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c8e:	f004 f8db 	bl	8005e48 <HAL_TIM_ConfigClockSource>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c98:	f000 fb6a 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c9c:	4818      	ldr	r0, [pc, #96]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c9e:	f003 faab 	bl	80051f8 <HAL_TIM_PWM_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ca8:	f000 fb62 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cb4:	f107 0320 	add.w	r3, r7, #32
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4811      	ldr	r0, [pc, #68]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001cbc:	f004 fee2 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001cc6:	f000 fb53 	bl	8002370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cca:	2360      	movs	r3, #96	; 0x60
 8001ccc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 8001cce:	f240 23ed 	movw	r3, #749	; 0x2ed
 8001cd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2200      	movs	r2, #0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4807      	ldr	r0, [pc, #28]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001ce4:	f003 ffee 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001cee:	f000 fb3f 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cf2:	4803      	ldr	r0, [pc, #12]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001cf4:	f000 fde0 	bl	80028b8 <HAL_TIM_MspPostInit>

}
 8001cf8:	bf00      	nop
 8001cfa:	3738      	adds	r7, #56	; 0x38
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	2000034c 	.word	0x2000034c

08001d04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08e      	sub	sp, #56	; 0x38
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
 8001d30:	615a      	str	r2, [r3, #20]
 8001d32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d34:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <MX_TIM3_Init+0xfc>)
 8001d36:	4a33      	ldr	r2, [pc, #204]	; (8001e04 <MX_TIM3_Init+0x100>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 8001d3a:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <MX_TIM3_Init+0xfc>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001d40:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <MX_TIM3_Init+0xfc>)
 8001d42:	2260      	movs	r2, #96	; 0x60
 8001d44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <MX_TIM3_Init+0xfc>)
 8001d48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4e:	4b2c      	ldr	r3, [pc, #176]	; (8001e00 <MX_TIM3_Init+0xfc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d54:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <MX_TIM3_Init+0xfc>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d5a:	4829      	ldr	r0, [pc, #164]	; (8001e00 <MX_TIM3_Init+0xfc>)
 8001d5c:	f003 f994 	bl	8005088 <HAL_TIM_Base_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d66:	f000 fb03 	bl	8002370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d74:	4619      	mov	r1, r3
 8001d76:	4822      	ldr	r0, [pc, #136]	; (8001e00 <MX_TIM3_Init+0xfc>)
 8001d78:	f004 f866 	bl	8005e48 <HAL_TIM_ConfigClockSource>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d82:	f000 faf5 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d86:	481e      	ldr	r0, [pc, #120]	; (8001e00 <MX_TIM3_Init+0xfc>)
 8001d88:	f003 fa36 	bl	80051f8 <HAL_TIM_PWM_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d92:	f000 faed 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	4619      	mov	r1, r3
 8001da4:	4816      	ldr	r0, [pc, #88]	; (8001e00 <MX_TIM3_Init+0xfc>)
 8001da6:	f004 fe6d 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001db0:	f000 fade 	bl	8002370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db4:	2360      	movs	r3, #96	; 0x60
 8001db6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480d      	ldr	r0, [pc, #52]	; (8001e00 <MX_TIM3_Init+0xfc>)
 8001dcc:	f003 ff7a 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001dd6:	f000 facb 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2204      	movs	r2, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4807      	ldr	r0, [pc, #28]	; (8001e00 <MX_TIM3_Init+0xfc>)
 8001de2:	f003 ff6f 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001dec:	f000 fac0 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001df0:	4803      	ldr	r0, [pc, #12]	; (8001e00 <MX_TIM3_Init+0xfc>)
 8001df2:	f000 fd61 	bl	80028b8 <HAL_TIM_MspPostInit>

}
 8001df6:	bf00      	nop
 8001df8:	3738      	adds	r7, #56	; 0x38
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000394 	.word	0x20000394
 8001e04:	40000400 	.word	0x40000400

08001e08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0e:	f107 0318 	add.w	r3, r7, #24
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e26:	463b      	mov	r3, r7
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e32:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <MX_TIM4_Init+0xf0>)
 8001e34:	4a31      	ldr	r2, [pc, #196]	; (8001efc <MX_TIM4_Init+0xf4>)
 8001e36:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 8001e38:	4b2f      	ldr	r3, [pc, #188]	; (8001ef8 <MX_TIM4_Init+0xf0>)
 8001e3a:	f240 321f 	movw	r2, #799	; 0x31f
 8001e3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <MX_TIM4_Init+0xf0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8001e46:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <MX_TIM4_Init+0xf0>)
 8001e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <MX_TIM4_Init+0xf0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e54:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <MX_TIM4_Init+0xf0>)
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e5a:	4827      	ldr	r0, [pc, #156]	; (8001ef8 <MX_TIM4_Init+0xf0>)
 8001e5c:	f003 f914 	bl	8005088 <HAL_TIM_Base_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001e66:	f000 fa83 	bl	8002370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e70:	f107 0318 	add.w	r3, r7, #24
 8001e74:	4619      	mov	r1, r3
 8001e76:	4820      	ldr	r0, [pc, #128]	; (8001ef8 <MX_TIM4_Init+0xf0>)
 8001e78:	f003 ffe6 	bl	8005e48 <HAL_TIM_ConfigClockSource>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001e82:	f000 fa75 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001e86:	481c      	ldr	r0, [pc, #112]	; (8001ef8 <MX_TIM4_Init+0xf0>)
 8001e88:	f003 face 	bl	8005428 <HAL_TIM_IC_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001e92:	f000 fa6d 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <MX_TIM4_Init+0xf0>)
 8001ea6:	f004 fded 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001eb0:	f000 fa5e 	bl	8002370 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001eb4:	230a      	movs	r3, #10
 8001eb6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	2208      	movs	r2, #8
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <MX_TIM4_Init+0xf0>)
 8001ecc:	f003 fe5e 	bl	8005b8c <HAL_TIM_IC_ConfigChannel>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001ed6:	f000 fa4b 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001eda:	463b      	mov	r3, r7
 8001edc:	220c      	movs	r2, #12
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <MX_TIM4_Init+0xf0>)
 8001ee2:	f003 fe53 	bl	8005b8c <HAL_TIM_IC_ConfigChannel>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8001eec:	f000 fa40 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ef0:	bf00      	nop
 8001ef2:	3728      	adds	r7, #40	; 0x28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200003dc 	.word	0x200003dc
 8001efc:	40000800 	.word	0x40000800

08001f00 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	463b      	mov	r3, r7
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <MX_TIM5_Init+0x94>)
 8001f1e:	4a1e      	ldr	r2, [pc, #120]	; (8001f98 <MX_TIM5_Init+0x98>)
 8001f20:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <MX_TIM5_Init+0x94>)
 8001f24:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001f28:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <MX_TIM5_Init+0x94>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f30:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <MX_TIM5_Init+0x94>)
 8001f32:	f04f 32ff 	mov.w	r2, #4294967295
 8001f36:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <MX_TIM5_Init+0x94>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <MX_TIM5_Init+0x94>)
 8001f40:	2280      	movs	r2, #128	; 0x80
 8001f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f44:	4813      	ldr	r0, [pc, #76]	; (8001f94 <MX_TIM5_Init+0x94>)
 8001f46:	f003 f89f 	bl	8005088 <HAL_TIM_Base_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001f50:	f000 fa0e 	bl	8002370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	4619      	mov	r1, r3
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <MX_TIM5_Init+0x94>)
 8001f62:	f003 ff71 	bl	8005e48 <HAL_TIM_ConfigClockSource>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001f6c:	f000 fa00 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f70:	2300      	movs	r3, #0
 8001f72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f78:	463b      	mov	r3, r7
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4805      	ldr	r0, [pc, #20]	; (8001f94 <MX_TIM5_Init+0x94>)
 8001f7e:	f004 fd81 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001f88:	f000 f9f2 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f8c:	bf00      	nop
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000424 	.word	0x20000424
 8001f98:	40000c00 	.word	0x40000c00

08001f9c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08c      	sub	sp, #48	; 0x30
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	2224      	movs	r2, #36	; 0x24
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f005 fada 	bl	8007564 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <MX_TIM8_Init+0xa8>)
 8001fba:	4a23      	ldr	r2, [pc, #140]	; (8002048 <MX_TIM8_Init+0xac>)
 8001fbc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001fbe:	4b21      	ldr	r3, [pc, #132]	; (8002044 <MX_TIM8_Init+0xa8>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <MX_TIM8_Init+0xa8>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <MX_TIM8_Init+0xa8>)
 8001fcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <MX_TIM8_Init+0xa8>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <MX_TIM8_Init+0xa8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <MX_TIM8_Init+0xa8>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fec:	2301      	movs	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002000:	2300      	movs	r3, #0
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	4619      	mov	r1, r3
 800200e:	480d      	ldr	r0, [pc, #52]	; (8002044 <MX_TIM8_Init+0xa8>)
 8002010:	f003 fc0e 	bl	8005830 <HAL_TIM_Encoder_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800201a:	f000 f9a9 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	4619      	mov	r1, r3
 800202a:	4806      	ldr	r0, [pc, #24]	; (8002044 <MX_TIM8_Init+0xa8>)
 800202c:	f004 fd2a 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002036:	f000 f99b 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800203a:	bf00      	nop
 800203c:	3730      	adds	r7, #48	; 0x30
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	2000046c 	.word	0x2000046c
 8002048:	40010400 	.word	0x40010400

0800204c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <MX_UART5_Init+0x4c>)
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <MX_UART5_Init+0x50>)
 8002054:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <MX_UART5_Init+0x4c>)
 8002058:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 800205c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MX_UART5_Init+0x4c>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <MX_UART5_Init+0x4c>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <MX_UART5_Init+0x4c>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <MX_UART5_Init+0x4c>)
 8002072:	220c      	movs	r2, #12
 8002074:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <MX_UART5_Init+0x4c>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <MX_UART5_Init+0x4c>)
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002082:	4805      	ldr	r0, [pc, #20]	; (8002098 <MX_UART5_Init+0x4c>)
 8002084:	f004 fde0 	bl	8006c48 <HAL_UART_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800208e:	f000 f96f 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000514 	.word	0x20000514
 800209c:	40005000 	.word	0x40005000

080020a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <MX_USART1_UART_Init+0x50>)
 80020a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020d8:	f004 fdb6 	bl	8006c48 <HAL_UART_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020e2:	f000 f945 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000558 	.word	0x20000558
 80020f0:	40011000 	.word	0x40011000

080020f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <MX_USART2_UART_Init+0x50>)
 80020fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002100:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002104:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 800211a:	220c      	movs	r2, #12
 800211c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 800212c:	f004 fd8c 	bl	8006c48 <HAL_UART_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002136:	f000 f91b 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000059c 	.word	0x2000059c
 8002144:	40004400 	.word	0x40004400

08002148 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <MX_USART3_UART_Init+0x4c>)
 800214e:	4a12      	ldr	r2, [pc, #72]	; (8002198 <MX_USART3_UART_Init+0x50>)
 8002150:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <MX_USART3_UART_Init+0x4c>)
 8002154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002158:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <MX_USART3_UART_Init+0x4c>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <MX_USART3_UART_Init+0x4c>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <MX_USART3_UART_Init+0x4c>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <MX_USART3_UART_Init+0x4c>)
 800216e:	220c      	movs	r2, #12
 8002170:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <MX_USART3_UART_Init+0x4c>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <MX_USART3_UART_Init+0x4c>)
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <MX_USART3_UART_Init+0x4c>)
 8002180:	f004 fd62 	bl	8006c48 <HAL_UART_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800218a:	f000 f8f1 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200005e0 	.word	0x200005e0
 8002198:	40004800 	.word	0x40004800

0800219c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <MX_DMA_Init+0x3c>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <MX_DMA_Init+0x3c>)
 80021ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <MX_DMA_Init+0x3c>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	202f      	movs	r0, #47	; 0x2f
 80021c4:	f001 fb93 	bl	80038ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80021c8:	202f      	movs	r0, #47	; 0x2f
 80021ca:	f001 fbac 	bl	8003926 <HAL_NVIC_EnableIRQ>

}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800

080021dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
 80021f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	4b55      	ldr	r3, [pc, #340]	; (800234c <MX_GPIO_Init+0x170>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a54      	ldr	r2, [pc, #336]	; (800234c <MX_GPIO_Init+0x170>)
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b52      	ldr	r3, [pc, #328]	; (800234c <MX_GPIO_Init+0x170>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	4b4e      	ldr	r3, [pc, #312]	; (800234c <MX_GPIO_Init+0x170>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a4d      	ldr	r2, [pc, #308]	; (800234c <MX_GPIO_Init+0x170>)
 8002218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b4b      	ldr	r3, [pc, #300]	; (800234c <MX_GPIO_Init+0x170>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <MX_GPIO_Init+0x170>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a46      	ldr	r2, [pc, #280]	; (800234c <MX_GPIO_Init+0x170>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b44      	ldr	r3, [pc, #272]	; (800234c <MX_GPIO_Init+0x170>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	4b40      	ldr	r3, [pc, #256]	; (800234c <MX_GPIO_Init+0x170>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a3f      	ldr	r2, [pc, #252]	; (800234c <MX_GPIO_Init+0x170>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b3d      	ldr	r3, [pc, #244]	; (800234c <MX_GPIO_Init+0x170>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	4b39      	ldr	r3, [pc, #228]	; (800234c <MX_GPIO_Init+0x170>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a38      	ldr	r2, [pc, #224]	; (800234c <MX_GPIO_Init+0x170>)
 800226c:	f043 0308 	orr.w	r3, r3, #8
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b36      	ldr	r3, [pc, #216]	; (800234c <MX_GPIO_Init+0x170>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	2102      	movs	r1, #2
 8002282:	4833      	ldr	r0, [pc, #204]	; (8002350 <MX_GPIO_Init+0x174>)
 8002284:	f002 f894 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 8002288:	2200      	movs	r2, #0
 800228a:	2122      	movs	r1, #34	; 0x22
 800228c:	4831      	ldr	r0, [pc, #196]	; (8002354 <MX_GPIO_Init+0x178>)
 800228e:	f002 f88f 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8002292:	2200      	movs	r2, #0
 8002294:	f24e 0142 	movw	r1, #57410	; 0xe042
 8002298:	482f      	ldr	r0, [pc, #188]	; (8002358 <MX_GPIO_Init+0x17c>)
 800229a:	f002 f889 	bl	80043b0 <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800229e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4826      	ldr	r0, [pc, #152]	; (8002350 <MX_GPIO_Init+0x174>)
 80022b6:	f001 fecf 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 80022ba:	2302      	movs	r3, #2
 80022bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022be:	2301      	movs	r3, #1
 80022c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	481f      	ldr	r0, [pc, #124]	; (8002350 <MX_GPIO_Init+0x174>)
 80022d2:	f001 fec1 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 80022d6:	2322      	movs	r3, #34	; 0x22
 80022d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022da:	2301      	movs	r3, #1
 80022dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	4819      	ldr	r0, [pc, #100]	; (8002354 <MX_GPIO_Init+0x178>)
 80022ee:	f001 feb3 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 80022f2:	f24e 0342 	movw	r3, #57410	; 0xe042
 80022f6:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f8:	2301      	movs	r3, #1
 80022fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2300      	movs	r3, #0
 8002302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	4619      	mov	r1, r3
 800230a:	4813      	ldr	r0, [pc, #76]	; (8002358 <MX_GPIO_Init+0x17c>)
 800230c:	f001 fea4 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B1B4_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B1B4_Pin|B2_Pin|Motor_Feedback_Pin;
 8002310:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	4619      	mov	r1, r3
 8002324:	480c      	ldr	r0, [pc, #48]	; (8002358 <MX_GPIO_Init+0x17c>)
 8002326:	f001 fe97 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 800232a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800232e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	4805      	ldr	r0, [pc, #20]	; (8002354 <MX_GPIO_Init+0x178>)
 8002340:	f001 fe8a 	bl	8004058 <HAL_GPIO_Init>

}
 8002344:	bf00      	nop
 8002346:	3728      	adds	r7, #40	; 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40023800 	.word	0x40023800
 8002350:	40020800 	.word	0x40020800
 8002354:	40020000 	.word	0x40020000
 8002358:	40020400 	.word	0x40020400

0800235c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){};
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002374:	b672      	cpsid	i
}
 8002376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002378:	e7fe      	b.n	8002378 <Error_Handler+0x8>
	...

0800237c <Remote_Control_Init>:
#include <math.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
	tEdge[0] = 0;
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <Remote_Control_Init+0x30>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
	tEdge[1] = 0;
 800238c:	4b07      	ldr	r3, [pc, #28]	; (80023ac <Remote_Control_Init+0x30>)
 800238e:	2200      	movs	r2, #0
 8002390:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <Remote_Control_Init+0x30>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 8002398:	2303      	movs	r3, #3
 800239a:	4a04      	ldr	r2, [pc, #16]	; (80023ac <Remote_Control_Init+0x30>)
 800239c:	6839      	ldr	r1, [r7, #0]
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f003 f89c 	bl	80054dc <HAL_TIM_IC_Start_DMA>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000628 	.word	0x20000628

080023b0 <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
	static int32_t dt1=0;
	static int32_t dt2=0;
	static uint32_t tLow=0;
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 80023be:	4b4f      	ldr	r3, [pc, #316]	; (80024fc <Remote_Control_Task+0x14c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	f0c0 8095 	bcc.w	80024f4 <Remote_Control_Task+0x144>
	remote_control_tick = tick + period;
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	4413      	add	r3, r2
 80023d0:	4a4a      	ldr	r2, [pc, #296]	; (80024fc <Remote_Control_Task+0x14c>)
 80023d2:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 80023d4:	201e      	movs	r0, #30
 80023d6:	f001 fab4 	bl	8003942 <HAL_NVIC_DisableIRQ>
	dt0=abs(tEdge[1]-tEdge[0]);
 80023da:	4b49      	ldr	r3, [pc, #292]	; (8002500 <Remote_Control_Task+0x150>)
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	4b48      	ldr	r3, [pc, #288]	; (8002500 <Remote_Control_Task+0x150>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bfb8      	it	lt
 80023e8:	425b      	neglt	r3, r3
 80023ea:	4a46      	ldr	r2, [pc, #280]	; (8002504 <Remote_Control_Task+0x154>)
 80023ec:	6013      	str	r3, [r2, #0]
	dt1=abs(tEdge[2]-tEdge[1]);
 80023ee:	4b44      	ldr	r3, [pc, #272]	; (8002500 <Remote_Control_Task+0x150>)
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	4b43      	ldr	r3, [pc, #268]	; (8002500 <Remote_Control_Task+0x150>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bfb8      	it	lt
 80023fc:	425b      	neglt	r3, r3
 80023fe:	4a42      	ldr	r2, [pc, #264]	; (8002508 <Remote_Control_Task+0x158>)
 8002400:	6013      	str	r3, [r2, #0]
	dt2=abs(tEdge[0]-tEdge[2]);
 8002402:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <Remote_Control_Task+0x150>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <Remote_Control_Task+0x150>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	bfb8      	it	lt
 8002410:	425b      	neglt	r3, r3
 8002412:	4a3e      	ldr	r2, [pc, #248]	; (800250c <Remote_Control_Task+0x15c>)
 8002414:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 8002416:	201e      	movs	r0, #30
 8002418:	f001 fa85 	bl	8003926 <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 800241c:	4b39      	ldr	r3, [pc, #228]	; (8002504 <Remote_Control_Task+0x154>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f241 3288 	movw	r2, #5000	; 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	dd06      	ble.n	8002436 <Remote_Control_Task+0x86>
 8002428:	4b36      	ldr	r3, [pc, #216]	; (8002504 <Remote_Control_Task+0x154>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002430:	33ff      	adds	r3, #255	; 0xff
 8002432:	4a34      	ldr	r2, [pc, #208]	; (8002504 <Remote_Control_Task+0x154>)
 8002434:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 8002436:	4b34      	ldr	r3, [pc, #208]	; (8002508 <Remote_Control_Task+0x158>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	dd06      	ble.n	8002450 <Remote_Control_Task+0xa0>
 8002442:	4b31      	ldr	r3, [pc, #196]	; (8002508 <Remote_Control_Task+0x158>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800244a:	33ff      	adds	r3, #255	; 0xff
 800244c:	4a2e      	ldr	r2, [pc, #184]	; (8002508 <Remote_Control_Task+0x158>)
 800244e:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 8002450:	4b2e      	ldr	r3, [pc, #184]	; (800250c <Remote_Control_Task+0x15c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	dd06      	ble.n	800246a <Remote_Control_Task+0xba>
 800245c:	4b2b      	ldr	r3, [pc, #172]	; (800250c <Remote_Control_Task+0x15c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002464:	33ff      	adds	r3, #255	; 0xff
 8002466:	4a29      	ldr	r2, [pc, #164]	; (800250c <Remote_Control_Task+0x15c>)
 8002468:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 800246a:	4b26      	ldr	r3, [pc, #152]	; (8002504 <Remote_Control_Task+0x154>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b26      	ldr	r3, [pc, #152]	; (8002508 <Remote_Control_Task+0x158>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	da0b      	bge.n	800248e <Remote_Control_Task+0xde>
 8002476:	4b23      	ldr	r3, [pc, #140]	; (8002504 <Remote_Control_Task+0x154>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b24      	ldr	r3, [pc, #144]	; (800250c <Remote_Control_Task+0x15c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	da05      	bge.n	800248e <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <Remote_Control_Task+0x154>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	4b21      	ldr	r3, [pc, #132]	; (8002510 <Remote_Control_Task+0x160>)
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e016      	b.n	80024bc <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 800248e:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <Remote_Control_Task+0x158>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <Remote_Control_Task+0x154>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	da0b      	bge.n	80024b2 <Remote_Control_Task+0x102>
 800249a:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <Remote_Control_Task+0x158>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4b1b      	ldr	r3, [pc, #108]	; (800250c <Remote_Control_Task+0x15c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	da05      	bge.n	80024b2 <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 80024a6:	4b18      	ldr	r3, [pc, #96]	; (8002508 <Remote_Control_Task+0x158>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <Remote_Control_Task+0x160>)
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e004      	b.n	80024bc <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <Remote_Control_Task+0x15c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <Remote_Control_Task+0x160>)
 80024ba:	601a      	str	r2, [r3, #0]
	}
/*
	sprintf(string,"%d\n\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 100);
*/
	if(tLow<70 || tLow>100)
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <Remote_Control_Task+0x160>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b45      	cmp	r3, #69	; 0x45
 80024c2:	d903      	bls.n	80024cc <Remote_Control_Task+0x11c>
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <Remote_Control_Task+0x160>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b64      	cmp	r3, #100	; 0x64
 80024ca:	d909      	bls.n	80024e0 <Remote_Control_Task+0x130>
	{
		LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
 80024cc:	2200      	movs	r2, #0
 80024ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024d2:	4810      	ldr	r0, [pc, #64]	; (8002514 <Remote_Control_Task+0x164>)
 80024d4:	f001 ff6c 	bl	80043b0 <HAL_GPIO_WritePin>
		motorEnRemote=0;//állítsuk le a motort ha meghuzzuk a ravaszt
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <Remote_Control_Task+0x168>)
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e00a      	b.n	80024f6 <Remote_Control_Task+0x146>
	}
	else
	{
		LED_R(0);
 80024e0:	2201      	movs	r2, #1
 80024e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024e6:	480b      	ldr	r0, [pc, #44]	; (8002514 <Remote_Control_Task+0x164>)
 80024e8:	f001 ff62 	bl	80043b0 <HAL_GPIO_WritePin>
		motorEnRemote=1;
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <Remote_Control_Task+0x168>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e000      	b.n	80024f6 <Remote_Control_Task+0x146>
	if(remote_control_tick>tick) return;
 80024f4:	bf00      	nop
	}
}
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20000634 	.word	0x20000634
 8002500:	20000628 	.word	0x20000628
 8002504:	20000638 	.word	0x20000638
 8002508:	2000063c 	.word	0x2000063c
 800250c:	20000640 	.word	0x20000640
 8002510:	20000644 	.word	0x20000644
 8002514:	40020400 	.word	0x40020400
 8002518:	20000624 	.word	0x20000624

0800251c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_MspInit+0x4c>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4a0f      	ldr	r2, [pc, #60]	; (8002568 <HAL_MspInit+0x4c>)
 800252c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002530:	6453      	str	r3, [r2, #68]	; 0x44
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <HAL_MspInit+0x4c>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_MspInit+0x4c>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	4a08      	ldr	r2, [pc, #32]	; (8002568 <HAL_MspInit+0x4c>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_MspInit+0x4c>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800255a:	2007      	movs	r0, #7
 800255c:	f001 f9bc 	bl	80038d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40023800 	.word	0x40023800

0800256c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08c      	sub	sp, #48	; 0x30
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 031c 	add.w	r3, r7, #28
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2e      	ldr	r2, [pc, #184]	; (8002644 <HAL_ADC_MspInit+0xd8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d128      	bne.n	80025e0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	4a2c      	ldr	r2, [pc, #176]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259c:	6453      	str	r3, [r2, #68]	; 0x44
 800259e:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	4b26      	ldr	r3, [pc, #152]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a25      	ldr	r2, [pc, #148]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b23      	ldr	r3, [pc, #140]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ca:	2303      	movs	r3, #3
 80025cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 80025d2:	f107 031c 	add.w	r3, r7, #28
 80025d6:	4619      	mov	r1, r3
 80025d8:	481c      	ldr	r0, [pc, #112]	; (800264c <HAL_ADC_MspInit+0xe0>)
 80025da:	f001 fd3d 	bl	8004058 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80025de:	e02c      	b.n	800263a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1a      	ldr	r2, [pc, #104]	; (8002650 <HAL_ADC_MspInit+0xe4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d127      	bne.n	800263a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	4a15      	ldr	r2, [pc, #84]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 80025f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 8002610:	f043 0304 	orr.w	r3, r3, #4
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Curr_Pin|Motor_Bat_Pin;
 8002622:	230c      	movs	r3, #12
 8002624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002626:	2303      	movs	r3, #3
 8002628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4619      	mov	r1, r3
 8002634:	4807      	ldr	r0, [pc, #28]	; (8002654 <HAL_ADC_MspInit+0xe8>)
 8002636:	f001 fd0f 	bl	8004058 <HAL_GPIO_Init>
}
 800263a:	bf00      	nop
 800263c:	3730      	adds	r7, #48	; 0x30
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40012000 	.word	0x40012000
 8002648:	40023800 	.word	0x40023800
 800264c:	40020400 	.word	0x40020400
 8002650:	40012100 	.word	0x40012100
 8002654:	40020800 	.word	0x40020800

08002658 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <HAL_TIM_PWM_MspInit+0x3c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10d      	bne.n	8002686 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <HAL_TIM_PWM_MspInit+0x40>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <HAL_TIM_PWM_MspInit+0x40>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6453      	str	r3, [r2, #68]	; 0x44
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_TIM_PWM_MspInit+0x40>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40010000 	.word	0x40010000
 8002698:	40023800 	.word	0x40023800

0800269c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08c      	sub	sp, #48	; 0x30
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 031c 	add.w	r3, r7, #28
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026bc:	d116      	bne.n	80026ec <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	4b52      	ldr	r3, [pc, #328]	; (800280c <HAL_TIM_Base_MspInit+0x170>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a51      	ldr	r2, [pc, #324]	; (800280c <HAL_TIM_Base_MspInit+0x170>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b4f      	ldr	r3, [pc, #316]	; (800280c <HAL_TIM_Base_MspInit+0x170>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	201c      	movs	r0, #28
 80026e0:	f001 f905 	bl	80038ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026e4:	201c      	movs	r0, #28
 80026e6:	f001 f91e 	bl	8003926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80026ea:	e08b      	b.n	8002804 <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM3)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a47      	ldr	r2, [pc, #284]	; (8002810 <HAL_TIM_Base_MspInit+0x174>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10e      	bne.n	8002714 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	4b44      	ldr	r3, [pc, #272]	; (800280c <HAL_TIM_Base_MspInit+0x170>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a43      	ldr	r2, [pc, #268]	; (800280c <HAL_TIM_Base_MspInit+0x170>)
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b41      	ldr	r3, [pc, #260]	; (800280c <HAL_TIM_Base_MspInit+0x170>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697b      	ldr	r3, [r7, #20]
}
 8002712:	e077      	b.n	8002804 <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM4)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a3e      	ldr	r2, [pc, #248]	; (8002814 <HAL_TIM_Base_MspInit+0x178>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d15f      	bne.n	80027de <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	4b3a      	ldr	r3, [pc, #232]	; (800280c <HAL_TIM_Base_MspInit+0x170>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a39      	ldr	r2, [pc, #228]	; (800280c <HAL_TIM_Base_MspInit+0x170>)
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b37      	ldr	r3, [pc, #220]	; (800280c <HAL_TIM_Base_MspInit+0x170>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b33      	ldr	r3, [pc, #204]	; (800280c <HAL_TIM_Base_MspInit+0x170>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a32      	ldr	r2, [pc, #200]	; (800280c <HAL_TIM_Base_MspInit+0x170>)
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b30      	ldr	r3, [pc, #192]	; (800280c <HAL_TIM_Base_MspInit+0x170>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 8002756:	f44f 7340 	mov.w	r3, #768	; 0x300
 800275a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002764:	2300      	movs	r3, #0
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002768:	2302      	movs	r3, #2
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276c:	f107 031c 	add.w	r3, r7, #28
 8002770:	4619      	mov	r1, r3
 8002772:	4829      	ldr	r0, [pc, #164]	; (8002818 <HAL_TIM_Base_MspInit+0x17c>)
 8002774:	f001 fc70 	bl	8004058 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8002778:	4b28      	ldr	r3, [pc, #160]	; (800281c <HAL_TIM_Base_MspInit+0x180>)
 800277a:	4a29      	ldr	r2, [pc, #164]	; (8002820 <HAL_TIM_Base_MspInit+0x184>)
 800277c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 800277e:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_TIM_Base_MspInit+0x180>)
 8002780:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002784:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002786:	4b25      	ldr	r3, [pc, #148]	; (800281c <HAL_TIM_Base_MspInit+0x180>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800278c:	4b23      	ldr	r3, [pc, #140]	; (800281c <HAL_TIM_Base_MspInit+0x180>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002792:	4b22      	ldr	r3, [pc, #136]	; (800281c <HAL_TIM_Base_MspInit+0x180>)
 8002794:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002798:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_TIM_Base_MspInit+0x180>)
 800279c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027a0:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027a2:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_TIM_Base_MspInit+0x180>)
 80027a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027a8:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <HAL_TIM_Base_MspInit+0x180>)
 80027ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027b0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80027b2:	4b1a      	ldr	r3, [pc, #104]	; (800281c <HAL_TIM_Base_MspInit+0x180>)
 80027b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027b8:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027ba:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_TIM_Base_MspInit+0x180>)
 80027bc:	2200      	movs	r2, #0
 80027be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80027c0:	4816      	ldr	r0, [pc, #88]	; (800281c <HAL_TIM_Base_MspInit+0x180>)
 80027c2:	f001 f8d9 	bl	8003978 <HAL_DMA_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 80027cc:	f7ff fdd0 	bl	8002370 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <HAL_TIM_Base_MspInit+0x180>)
 80027d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027d6:	4a11      	ldr	r2, [pc, #68]	; (800281c <HAL_TIM_Base_MspInit+0x180>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6393      	str	r3, [r2, #56]	; 0x38
}
 80027dc:	e012      	b.n	8002804 <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM5)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a10      	ldr	r2, [pc, #64]	; (8002824 <HAL_TIM_Base_MspInit+0x188>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d10d      	bne.n	8002804 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	4b07      	ldr	r3, [pc, #28]	; (800280c <HAL_TIM_Base_MspInit+0x170>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	4a06      	ldr	r2, [pc, #24]	; (800280c <HAL_TIM_Base_MspInit+0x170>)
 80027f2:	f043 0308 	orr.w	r3, r3, #8
 80027f6:	6413      	str	r3, [r2, #64]	; 0x40
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <HAL_TIM_Base_MspInit+0x170>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
}
 8002804:	bf00      	nop
 8002806:	3730      	adds	r7, #48	; 0x30
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	40000400 	.word	0x40000400
 8002814:	40000800 	.word	0x40000800
 8002818:	40020400 	.word	0x40020400
 800281c:	200004b4 	.word	0x200004b4
 8002820:	400260b8 	.word	0x400260b8
 8002824:	40000c00 	.word	0x40000c00

08002828 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a19      	ldr	r2, [pc, #100]	; (80028ac <HAL_TIM_Encoder_MspInit+0x84>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d12b      	bne.n	80028a2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	6453      	str	r3, [r2, #68]	; 0x44
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <HAL_TIM_Encoder_MspInit+0x88>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_TIM_Encoder_MspInit+0x88>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = Enkoder_A_Pin|Enkoder_B_Pin;
 8002882:	23c0      	movs	r3, #192	; 0xc0
 8002884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002892:	2303      	movs	r3, #3
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	4619      	mov	r1, r3
 800289c:	4805      	ldr	r0, [pc, #20]	; (80028b4 <HAL_TIM_Encoder_MspInit+0x8c>)
 800289e:	f001 fbdb 	bl	8004058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80028a2:	bf00      	nop
 80028a4:	3728      	adds	r7, #40	; 0x28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40010400 	.word	0x40010400
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40020800 	.word	0x40020800

080028b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a37      	ldr	r2, [pc, #220]	; (80029b4 <HAL_TIM_MspPostInit+0xfc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d11f      	bne.n	800291a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <HAL_TIM_MspPostInit+0x100>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a35      	ldr	r2, [pc, #212]	; (80029b8 <HAL_TIM_MspPostInit+0x100>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b33      	ldr	r3, [pc, #204]	; (80029b8 <HAL_TIM_MspPostInit+0x100>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 80028f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2302      	movs	r3, #2
 80028fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002908:	2301      	movs	r3, #1
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	4619      	mov	r1, r3
 8002912:	482a      	ldr	r0, [pc, #168]	; (80029bc <HAL_TIM_MspPostInit+0x104>)
 8002914:	f001 fba0 	bl	8004058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002918:	e047      	b.n	80029aa <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002922:	d11f      	bne.n	8002964 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <HAL_TIM_MspPostInit+0x100>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	4a22      	ldr	r2, [pc, #136]	; (80029b8 <HAL_TIM_MspPostInit+0x100>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6313      	str	r3, [r2, #48]	; 0x30
 8002934:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_TIM_MspPostInit+0x100>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 8002940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294e:	2300      	movs	r3, #0
 8002950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002952:	2301      	movs	r3, #1
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	4817      	ldr	r0, [pc, #92]	; (80029bc <HAL_TIM_MspPostInit+0x104>)
 800295e:	f001 fb7b 	bl	8004058 <HAL_GPIO_Init>
}
 8002962:	e022      	b.n	80029aa <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a15      	ldr	r2, [pc, #84]	; (80029c0 <HAL_TIM_MspPostInit+0x108>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d11d      	bne.n	80029aa <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <HAL_TIM_MspPostInit+0x100>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a10      	ldr	r2, [pc, #64]	; (80029b8 <HAL_TIM_MspPostInit+0x100>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <HAL_TIM_MspPostInit+0x100>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 800298a:	23c0      	movs	r3, #192	; 0xc0
 800298c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	2302      	movs	r3, #2
 8002990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	2300      	movs	r3, #0
 8002998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800299a:	2302      	movs	r3, #2
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	4619      	mov	r1, r3
 80029a4:	4805      	ldr	r0, [pc, #20]	; (80029bc <HAL_TIM_MspPostInit+0x104>)
 80029a6:	f001 fb57 	bl	8004058 <HAL_GPIO_Init>
}
 80029aa:	bf00      	nop
 80029ac:	3728      	adds	r7, #40	; 0x28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40010000 	.word	0x40010000
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40020000 	.word	0x40020000
 80029c0:	40000400 	.word	0x40000400

080029c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b090      	sub	sp, #64	; 0x40
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a74      	ldr	r2, [pc, #464]	; (8002bb4 <HAL_UART_MspInit+0x1f0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d14b      	bne.n	8002a7e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ea:	4b73      	ldr	r3, [pc, #460]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	4a72      	ldr	r2, [pc, #456]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 80029f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029f4:	6413      	str	r3, [r2, #64]	; 0x40
 80029f6:	4b70      	ldr	r3, [pc, #448]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	4b6c      	ldr	r3, [pc, #432]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a6b      	ldr	r2, [pc, #428]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b69      	ldr	r3, [pc, #420]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	4b65      	ldr	r3, [pc, #404]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a64      	ldr	r2, [pc, #400]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002a28:	f043 0308 	orr.w	r3, r3, #8
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b62      	ldr	r3, [pc, #392]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	623b      	str	r3, [r7, #32]
 8002a38:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 8002a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2302      	movs	r3, #2
 8002a42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a4c:	2308      	movs	r3, #8
 8002a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 8002a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a54:	4619      	mov	r1, r3
 8002a56:	4859      	ldr	r0, [pc, #356]	; (8002bbc <HAL_UART_MspInit+0x1f8>)
 8002a58:	f001 fafe 	bl	8004058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a6c:	2308      	movs	r3, #8
 8002a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 8002a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a74:	4619      	mov	r1, r3
 8002a76:	4852      	ldr	r0, [pc, #328]	; (8002bc0 <HAL_UART_MspInit+0x1fc>)
 8002a78:	f001 faee 	bl	8004058 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a7c:	e096      	b.n	8002bac <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a50      	ldr	r2, [pc, #320]	; (8002bc4 <HAL_UART_MspInit+0x200>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d12d      	bne.n	8002ae4 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a90:	4a49      	ldr	r2, [pc, #292]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002a92:	f043 0310 	orr.w	r3, r3, #16
 8002a96:	6453      	str	r3, [r2, #68]	; 0x44
 8002a98:	4b47      	ldr	r3, [pc, #284]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	4b43      	ldr	r3, [pc, #268]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	4a42      	ldr	r2, [pc, #264]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab4:	4b40      	ldr	r3, [pc, #256]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 8002ac0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ad2:	2307      	movs	r3, #7
 8002ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ada:	4619      	mov	r1, r3
 8002adc:	483a      	ldr	r0, [pc, #232]	; (8002bc8 <HAL_UART_MspInit+0x204>)
 8002ade:	f001 fabb 	bl	8004058 <HAL_GPIO_Init>
}
 8002ae2:	e063      	b.n	8002bac <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a38      	ldr	r2, [pc, #224]	; (8002bcc <HAL_UART_MspInit+0x208>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d12c      	bne.n	8002b48 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a30      	ldr	r2, [pc, #192]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
 8002afe:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	4b2a      	ldr	r3, [pc, #168]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	4a29      	ldr	r2, [pc, #164]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1a:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8002b26:	230c      	movs	r3, #12
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b36:	2307      	movs	r3, #7
 8002b38:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4821      	ldr	r0, [pc, #132]	; (8002bc8 <HAL_UART_MspInit+0x204>)
 8002b42:	f001 fa89 	bl	8004058 <HAL_GPIO_Init>
}
 8002b46:	e031      	b.n	8002bac <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a20      	ldr	r2, [pc, #128]	; (8002bd0 <HAL_UART_MspInit+0x20c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d12c      	bne.n	8002bac <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a17      	ldr	r2, [pc, #92]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 8002b8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b9c:	2307      	movs	r3, #7
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4805      	ldr	r0, [pc, #20]	; (8002bbc <HAL_UART_MspInit+0x1f8>)
 8002ba8:	f001 fa56 	bl	8004058 <HAL_GPIO_Init>
}
 8002bac:	bf00      	nop
 8002bae:	3740      	adds	r7, #64	; 0x40
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40005000 	.word	0x40005000
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40020800 	.word	0x40020800
 8002bc0:	40020c00 	.word	0x40020c00
 8002bc4:	40011000 	.word	0x40011000
 8002bc8:	40020000 	.word	0x40020000
 8002bcc:	40004400 	.word	0x40004400
 8002bd0:	40004800 	.word	0x40004800

08002bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bd8:	e7fe      	b.n	8002bd8 <NMI_Handler+0x4>

08002bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bde:	e7fe      	b.n	8002bde <HardFault_Handler+0x4>

08002be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <MemManage_Handler+0x4>

08002be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bea:	e7fe      	b.n	8002bea <BusFault_Handler+0x4>

08002bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <UsageFault_Handler+0x4>

08002bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c20:	f000 f96a 	bl	8002ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c2c:	4802      	ldr	r0, [pc, #8]	; (8002c38 <TIM2_IRQHandler+0x10>)
 8002c2e:	f002 fea5 	bl	800597c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000034c 	.word	0x2000034c

08002c3c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <DMA1_Stream7_IRQHandler+0x10>)
 8002c42:	f000 ff9f 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200004b4 	.word	0x200004b4

08002c50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
	return 1;
 8002c54:	2301      	movs	r3, #1
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <_kill>:

int _kill(int pid, int sig)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c6a:	f004 fc51 	bl	8007510 <__errno>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2216      	movs	r2, #22
 8002c72:	601a      	str	r2, [r3, #0]
	return -1;
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_exit>:

void _exit (int status)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c88:	f04f 31ff 	mov.w	r1, #4294967295
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff ffe7 	bl	8002c60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c92:	e7fe      	b.n	8002c92 <_exit+0x12>

08002c94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e00a      	b.n	8002cbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ca6:	f3af 8000 	nop.w
 8002caa:	4601      	mov	r1, r0
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	60ba      	str	r2, [r7, #8]
 8002cb2:	b2ca      	uxtb	r2, r1
 8002cb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	dbf0      	blt.n	8002ca6 <_read+0x12>
	}

return len;
 8002cc4:	687b      	ldr	r3, [r7, #4]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e009      	b.n	8002cf4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	60ba      	str	r2, [r7, #8]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	dbf1      	blt.n	8002ce0 <_write+0x12>
	}
	return len;
 8002cfc:	687b      	ldr	r3, [r7, #4]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_close>:

int _close(int file)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
	return -1;
 8002d0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d2e:	605a      	str	r2, [r3, #4]
	return 0;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <_isatty>:

int _isatty(int file)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
	return 1;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
	return 0;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d78:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <_sbrk+0x5c>)
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <_sbrk+0x60>)
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d84:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <_sbrk+0x64>)
 8002d8e:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <_sbrk+0x68>)
 8002d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d92:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <_sbrk+0x64>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d207      	bcs.n	8002db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da0:	f004 fbb6 	bl	8007510 <__errno>
 8002da4:	4603      	mov	r3, r0
 8002da6:	220c      	movs	r2, #12
 8002da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dae:	e009      	b.n	8002dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002db6:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <_sbrk+0x64>)
 8002dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20020000 	.word	0x20020000
 8002dd0:	00000400 	.word	0x00000400
 8002dd4:	20000648 	.word	0x20000648
 8002dd8:	20000660 	.word	0x20000660

08002ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <SystemInit+0x20>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <SystemInit+0x20>)
 8002de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e04:	480d      	ldr	r0, [pc, #52]	; (8002e3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e06:	490e      	ldr	r1, [pc, #56]	; (8002e40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e08:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e0c:	e002      	b.n	8002e14 <LoopCopyDataInit>

08002e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e12:	3304      	adds	r3, #4

08002e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e18:	d3f9      	bcc.n	8002e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e1a:	4a0b      	ldr	r2, [pc, #44]	; (8002e48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e1c:	4c0b      	ldr	r4, [pc, #44]	; (8002e4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e20:	e001      	b.n	8002e26 <LoopFillZerobss>

08002e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e24:	3204      	adds	r2, #4

08002e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e28:	d3fb      	bcc.n	8002e22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e2a:	f7ff ffd7 	bl	8002ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e2e:	f004 fb75 	bl	800751c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e32:	f7fe fcf3 	bl	800181c <main>
  bx  lr    
 8002e36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e40:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002e44:	0800be68 	.word	0x0800be68
  ldr r2, =_sbss
 8002e48:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002e4c:	20000660 	.word	0x20000660

08002e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e50:	e7fe      	b.n	8002e50 <ADC_IRQHandler>
	...

08002e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e58:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <HAL_Init+0x40>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <HAL_Init+0x40>)
 8002e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_Init+0x40>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <HAL_Init+0x40>)
 8002e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <HAL_Init+0x40>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <HAL_Init+0x40>)
 8002e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e7c:	2003      	movs	r0, #3
 8002e7e:	f000 fd2b 	bl	80038d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f000 f808 	bl	8002e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e88:	f7ff fb48 	bl	800251c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023c00 	.word	0x40023c00

08002e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_InitTick+0x54>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_InitTick+0x58>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fd51 	bl	800395e <HAL_SYSTICK_Config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e00e      	b.n	8002ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b0f      	cmp	r3, #15
 8002eca:	d80a      	bhi.n	8002ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ecc:	2200      	movs	r2, #0
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed4:	f000 fd0b 	bl	80038ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ed8:	4a06      	ldr	r2, [pc, #24]	; (8002ef4 <HAL_InitTick+0x5c>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e000      	b.n	8002ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000028 	.word	0x20000028
 8002ef0:	20000030 	.word	0x20000030
 8002ef4:	2000002c 	.word	0x2000002c

08002ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_IncTick+0x20>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_IncTick+0x24>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <HAL_IncTick+0x24>)
 8002f0a:	6013      	str	r3, [r2, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000030 	.word	0x20000030
 8002f1c:	2000064c 	.word	0x2000064c

08002f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return uwTick;
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <HAL_GetTick+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	2000064c 	.word	0x2000064c

08002f38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e033      	b.n	8002fb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff fb08 	bl	800256c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d118      	bne.n	8002fa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f7e:	f023 0302 	bic.w	r3, r3, #2
 8002f82:	f043 0202 	orr.w	r2, r3, #2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fab4 	bl	80034f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f023 0303 	bic.w	r3, r3, #3
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8002fa6:	e001      	b.n	8002fac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_ADC_Start+0x1a>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e0b2      	b.n	8003140 <HAL_ADC_Start+0x180>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d018      	beq.n	8003022 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003000:	4b52      	ldr	r3, [pc, #328]	; (800314c <HAL_ADC_Start+0x18c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a52      	ldr	r2, [pc, #328]	; (8003150 <HAL_ADC_Start+0x190>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0c9a      	lsrs	r2, r3, #18
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003014:	e002      	b.n	800301c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3b01      	subs	r3, #1
 800301a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f9      	bne.n	8003016 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d17a      	bne.n	8003126 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800305a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800306a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306e:	d106      	bne.n	800307e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	f023 0206 	bic.w	r2, r3, #6
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	645a      	str	r2, [r3, #68]	; 0x44
 800307c:	e002      	b.n	8003084 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800308c:	4b31      	ldr	r3, [pc, #196]	; (8003154 <HAL_ADC_Start+0x194>)
 800308e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003098:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d12a      	bne.n	80030fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2b      	ldr	r2, [pc, #172]	; (8003158 <HAL_ADC_Start+0x198>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d015      	beq.n	80030dc <HAL_ADC_Start+0x11c>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a29      	ldr	r2, [pc, #164]	; (800315c <HAL_ADC_Start+0x19c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d105      	bne.n	80030c6 <HAL_ADC_Start+0x106>
 80030ba:	4b26      	ldr	r3, [pc, #152]	; (8003154 <HAL_ADC_Start+0x194>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a25      	ldr	r2, [pc, #148]	; (8003160 <HAL_ADC_Start+0x1a0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d136      	bne.n	800313e <HAL_ADC_Start+0x17e>
 80030d0:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_ADC_Start+0x194>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d130      	bne.n	800313e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d129      	bne.n	800313e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	e020      	b.n	800313e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a15      	ldr	r2, [pc, #84]	; (8003158 <HAL_ADC_Start+0x198>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d11b      	bne.n	800313e <HAL_ADC_Start+0x17e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d114      	bne.n	800313e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	e00b      	b.n	800313e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f043 0210 	orr.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	20000028 	.word	0x20000028
 8003150:	431bde83 	.word	0x431bde83
 8003154:	40012300 	.word	0x40012300
 8003158:	40012000 	.word	0x40012000
 800315c:	40012100 	.word	0x40012100
 8003160:	40012200 	.word	0x40012200

08003164 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003180:	d113      	bne.n	80031aa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800318c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003190:	d10b      	bne.n	80031aa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f043 0220 	orr.w	r2, r3, #32
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e063      	b.n	8003272 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80031aa:	f7ff feb9 	bl	8002f20 <HAL_GetTick>
 80031ae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031b0:	e021      	b.n	80031f6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d01d      	beq.n	80031f6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d007      	beq.n	80031d0 <HAL_ADC_PollForConversion+0x6c>
 80031c0:	f7ff feae 	bl	8002f20 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d212      	bcs.n	80031f6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d00b      	beq.n	80031f6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f043 0204 	orr.w	r2, r3, #4
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e03d      	b.n	8003272 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b02      	cmp	r3, #2
 8003202:	d1d6      	bne.n	80031b2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0212 	mvn.w	r2, #18
 800320c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d123      	bne.n	8003270 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11f      	bne.n	8003270 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800323a:	2b00      	cmp	r3, #0
 800323c:	d006      	beq.n	800324c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003248:	2b00      	cmp	r3, #0
 800324a:	d111      	bne.n	8003270 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	f043 0201 	orr.w	r2, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x1c>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e113      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x244>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b09      	cmp	r3, #9
 80032be:	d925      	bls.n	800330c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68d9      	ldr	r1, [r3, #12]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	4613      	mov	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
 80032d4:	3b1e      	subs	r3, #30
 80032d6:	2207      	movs	r2, #7
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43da      	mvns	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	400a      	ands	r2, r1
 80032e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68d9      	ldr	r1, [r3, #12]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	4618      	mov	r0, r3
 80032f8:	4603      	mov	r3, r0
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4403      	add	r3, r0
 80032fe:	3b1e      	subs	r3, #30
 8003300:	409a      	lsls	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	e022      	b.n	8003352 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6919      	ldr	r1, [r3, #16]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	2207      	movs	r2, #7
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43da      	mvns	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	400a      	ands	r2, r1
 800332e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6919      	ldr	r1, [r3, #16]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	b29b      	uxth	r3, r3
 8003340:	4618      	mov	r0, r3
 8003342:	4603      	mov	r3, r0
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4403      	add	r3, r0
 8003348:	409a      	lsls	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b06      	cmp	r3, #6
 8003358:	d824      	bhi.n	80033a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	3b05      	subs	r3, #5
 800336c:	221f      	movs	r2, #31
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43da      	mvns	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	400a      	ands	r2, r1
 800337a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	4618      	mov	r0, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	3b05      	subs	r3, #5
 8003396:	fa00 f203 	lsl.w	r2, r0, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	635a      	str	r2, [r3, #52]	; 0x34
 80033a2:	e04c      	b.n	800343e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	d824      	bhi.n	80033f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	3b23      	subs	r3, #35	; 0x23
 80033be:	221f      	movs	r2, #31
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43da      	mvns	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	400a      	ands	r2, r1
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	4618      	mov	r0, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	3b23      	subs	r3, #35	; 0x23
 80033e8:	fa00 f203 	lsl.w	r2, r0, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
 80033f4:	e023      	b.n	800343e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	3b41      	subs	r3, #65	; 0x41
 8003408:	221f      	movs	r2, #31
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43da      	mvns	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	400a      	ands	r2, r1
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	4618      	mov	r0, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	3b41      	subs	r3, #65	; 0x41
 8003432:	fa00 f203 	lsl.w	r2, r0, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800343e:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <HAL_ADC_ConfigChannel+0x250>)
 8003440:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a28      	ldr	r2, [pc, #160]	; (80034e8 <HAL_ADC_ConfigChannel+0x254>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d10f      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1d8>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b12      	cmp	r3, #18
 8003452:	d10b      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <HAL_ADC_ConfigChannel+0x254>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d12b      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x23a>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1c      	ldr	r2, [pc, #112]	; (80034ec <HAL_ADC_ConfigChannel+0x258>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <HAL_ADC_ConfigChannel+0x1f4>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b11      	cmp	r3, #17
 8003486:	d122      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a11      	ldr	r2, [pc, #68]	; (80034ec <HAL_ADC_ConfigChannel+0x258>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d111      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034aa:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <HAL_ADC_ConfigChannel+0x25c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a11      	ldr	r2, [pc, #68]	; (80034f4 <HAL_ADC_ConfigChannel+0x260>)
 80034b0:	fba2 2303 	umull	r2, r3, r2, r3
 80034b4:	0c9a      	lsrs	r2, r3, #18
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034c0:	e002      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f9      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40012300 	.word	0x40012300
 80034e8:	40012000 	.word	0x40012000
 80034ec:	10000012 	.word	0x10000012
 80034f0:	20000028 	.word	0x20000028
 80034f4:	431bde83 	.word	0x431bde83

080034f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003500:	4b79      	ldr	r3, [pc, #484]	; (80036e8 <ADC_Init+0x1f0>)
 8003502:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	431a      	orrs	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800352c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	021a      	lsls	r2, r3, #8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003572:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6899      	ldr	r1, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	4a58      	ldr	r2, [pc, #352]	; (80036ec <ADC_Init+0x1f4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d022      	beq.n	80035d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800359e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6899      	ldr	r1, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6899      	ldr	r1, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	e00f      	b.n	80035f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0202 	bic.w	r2, r2, #2
 8003604:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6899      	ldr	r1, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	7e1b      	ldrb	r3, [r3, #24]
 8003610:	005a      	lsls	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01b      	beq.n	800365c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003632:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003642:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6859      	ldr	r1, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	3b01      	subs	r3, #1
 8003650:	035a      	lsls	r2, r3, #13
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	e007      	b.n	800366c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800366a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	3b01      	subs	r3, #1
 8003688:	051a      	lsls	r2, r3, #20
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6899      	ldr	r1, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036ae:	025a      	lsls	r2, r3, #9
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6899      	ldr	r1, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	029a      	lsls	r2, r3, #10
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40012300 	.word	0x40012300
 80036ec:	0f000001 	.word	0x0f000001

080036f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800370c:	4013      	ands	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800371c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003722:	4a04      	ldr	r2, [pc, #16]	; (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	60d3      	str	r3, [r2, #12]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <__NVIC_GetPriorityGrouping+0x18>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	f003 0307 	and.w	r3, r3, #7
}
 8003746:	4618      	mov	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	2b00      	cmp	r3, #0
 8003764:	db0b      	blt.n	800377e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	f003 021f 	and.w	r2, r3, #31
 800376c:	4907      	ldr	r1, [pc, #28]	; (800378c <__NVIC_EnableIRQ+0x38>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2001      	movs	r0, #1
 8003776:	fa00 f202 	lsl.w	r2, r0, r2
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000e100 	.word	0xe000e100

08003790 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	db12      	blt.n	80037c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	f003 021f 	and.w	r2, r3, #31
 80037a8:	490a      	ldr	r1, [pc, #40]	; (80037d4 <__NVIC_DisableIRQ+0x44>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2001      	movs	r0, #1
 80037b2:	fa00 f202 	lsl.w	r2, r0, r2
 80037b6:	3320      	adds	r3, #32
 80037b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037bc:	f3bf 8f4f 	dsb	sy
}
 80037c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037c2:	f3bf 8f6f 	isb	sy
}
 80037c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000e100 	.word	0xe000e100

080037d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	6039      	str	r1, [r7, #0]
 80037e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	db0a      	blt.n	8003802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	490c      	ldr	r1, [pc, #48]	; (8003824 <__NVIC_SetPriority+0x4c>)
 80037f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f6:	0112      	lsls	r2, r2, #4
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	440b      	add	r3, r1
 80037fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003800:	e00a      	b.n	8003818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	b2da      	uxtb	r2, r3
 8003806:	4908      	ldr	r1, [pc, #32]	; (8003828 <__NVIC_SetPriority+0x50>)
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	3b04      	subs	r3, #4
 8003810:	0112      	lsls	r2, r2, #4
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	440b      	add	r3, r1
 8003816:	761a      	strb	r2, [r3, #24]
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	e000e100 	.word	0xe000e100
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	; 0x24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f1c3 0307 	rsb	r3, r3, #7
 8003846:	2b04      	cmp	r3, #4
 8003848:	bf28      	it	cs
 800384a:	2304      	movcs	r3, #4
 800384c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3304      	adds	r3, #4
 8003852:	2b06      	cmp	r3, #6
 8003854:	d902      	bls.n	800385c <NVIC_EncodePriority+0x30>
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	3b03      	subs	r3, #3
 800385a:	e000      	b.n	800385e <NVIC_EncodePriority+0x32>
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003860:	f04f 32ff 	mov.w	r2, #4294967295
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43da      	mvns	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	401a      	ands	r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003874:	f04f 31ff 	mov.w	r1, #4294967295
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	fa01 f303 	lsl.w	r3, r1, r3
 800387e:	43d9      	mvns	r1, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003884:	4313      	orrs	r3, r2
         );
}
 8003886:	4618      	mov	r0, r3
 8003888:	3724      	adds	r7, #36	; 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3b01      	subs	r3, #1
 80038a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038a4:	d301      	bcc.n	80038aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038a6:	2301      	movs	r3, #1
 80038a8:	e00f      	b.n	80038ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <SysTick_Config+0x40>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038b2:	210f      	movs	r1, #15
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	f7ff ff8e 	bl	80037d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <SysTick_Config+0x40>)
 80038be:	2200      	movs	r2, #0
 80038c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038c2:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <SysTick_Config+0x40>)
 80038c4:	2207      	movs	r2, #7
 80038c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	e000e010 	.word	0xe000e010

080038d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff05 	bl	80036f0 <__NVIC_SetPriorityGrouping>
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	4603      	mov	r3, r0
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003900:	f7ff ff1a 	bl	8003738 <__NVIC_GetPriorityGrouping>
 8003904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	6978      	ldr	r0, [r7, #20]
 800390c:	f7ff ff8e 	bl	800382c <NVIC_EncodePriority>
 8003910:	4602      	mov	r2, r0
 8003912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ff5d 	bl	80037d8 <__NVIC_SetPriority>
}
 800391e:	bf00      	nop
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	4603      	mov	r3, r0
 800392e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ff0d 	bl	8003754 <__NVIC_EnableIRQ>
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	4603      	mov	r3, r0
 800394a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800394c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff1d 	bl	8003790 <__NVIC_DisableIRQ>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff ff94 	bl	8003894 <SysTick_Config>
 800396c:	4603      	mov	r3, r0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003984:	f7ff facc 	bl	8002f20 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e099      	b.n	8003ac8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039b4:	e00f      	b.n	80039d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039b6:	f7ff fab3 	bl	8002f20 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b05      	cmp	r3, #5
 80039c2:	d908      	bls.n	80039d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2203      	movs	r2, #3
 80039ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e078      	b.n	8003ac8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e8      	bne.n	80039b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4b38      	ldr	r3, [pc, #224]	; (8003ad0 <HAL_DMA_Init+0x158>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d107      	bne.n	8003a40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f023 0307 	bic.w	r3, r3, #7
 8003a56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d117      	bne.n	8003a9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00e      	beq.n	8003a9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fa6f 	bl	8003f60 <DMA_CheckFifoParam>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2240      	movs	r2, #64	; 0x40
 8003a8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a96:	2301      	movs	r3, #1
 8003a98:	e016      	b.n	8003ac8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa26 	bl	8003ef4 <DMA_CalcBaseAndBitshift>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab0:	223f      	movs	r2, #63	; 0x3f
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	f010803f 	.word	0xf010803f

08003ad4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_DMA_Start_IT+0x26>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e040      	b.n	8003b7c <HAL_DMA_Start_IT+0xa8>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d12f      	bne.n	8003b6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f9b8 	bl	8003e98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	223f      	movs	r2, #63	; 0x3f
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0216 	orr.w	r2, r2, #22
 8003b42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0208 	orr.w	r2, r2, #8
 8003b5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e005      	b.n	8003b7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
 8003b78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b90:	4b8e      	ldr	r3, [pc, #568]	; (8003dcc <HAL_DMA_IRQHandler+0x248>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a8e      	ldr	r2, [pc, #568]	; (8003dd0 <HAL_DMA_IRQHandler+0x24c>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	0a9b      	lsrs	r3, r3, #10
 8003b9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bae:	2208      	movs	r2, #8
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01a      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0204 	bic.w	r2, r2, #4
 8003bd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bdc:	2208      	movs	r2, #8
 8003bde:	409a      	lsls	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	f043 0201 	orr.w	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d012      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c12:	2201      	movs	r2, #1
 8003c14:	409a      	lsls	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1e:	f043 0202 	orr.w	r2, r3, #2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d012      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00b      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	2204      	movs	r2, #4
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	f043 0204 	orr.w	r2, r3, #4
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	2210      	movs	r2, #16
 8003c62:	409a      	lsls	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d043      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d03c      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	2210      	movs	r2, #16
 8003c80:	409a      	lsls	r2, r3
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d018      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d108      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d024      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
 8003cb2:	e01f      	b.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01b      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
 8003cc4:	e016      	b.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0208 	bic.w	r2, r2, #8
 8003ce2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 808f 	beq.w	8003e24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 8087 	beq.w	8003e24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d136      	bne.n	8003d9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0216 	bic.w	r2, r2, #22
 8003d3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d103      	bne.n	8003d5e <HAL_DMA_IRQHandler+0x1da>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0208 	bic.w	r2, r2, #8
 8003d6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d72:	223f      	movs	r2, #63	; 0x3f
 8003d74:	409a      	lsls	r2, r3
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d07e      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	4798      	blx	r3
        }
        return;
 8003d9a:	e079      	b.n	8003e90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d01d      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10d      	bne.n	8003dd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d031      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
 8003dc8:	e02c      	b.n	8003e24 <HAL_DMA_IRQHandler+0x2a0>
 8003dca:	bf00      	nop
 8003dcc:	20000028 	.word	0x20000028
 8003dd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d023      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
 8003de4:	e01e      	b.n	8003e24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10f      	bne.n	8003e14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0210 	bic.w	r2, r2, #16
 8003e02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d032      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d022      	beq.n	8003e7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2205      	movs	r2, #5
 8003e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	3301      	adds	r3, #1
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d307      	bcc.n	8003e6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f2      	bne.n	8003e50 <HAL_DMA_IRQHandler+0x2cc>
 8003e6a:	e000      	b.n	8003e6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
 8003e8e:	e000      	b.n	8003e92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e90:	bf00      	nop
    }
  }
}
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b40      	cmp	r3, #64	; 0x40
 8003ec4:	d108      	bne.n	8003ed8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ed6:	e007      	b.n	8003ee8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	3b10      	subs	r3, #16
 8003f04:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <DMA_CalcBaseAndBitshift+0x64>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f0e:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <DMA_CalcBaseAndBitshift+0x68>)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d909      	bls.n	8003f36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	1d1a      	adds	r2, r3, #4
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	659a      	str	r2, [r3, #88]	; 0x58
 8003f34:	e007      	b.n	8003f46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f3e:	f023 0303 	bic.w	r3, r3, #3
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	aaaaaaab 	.word	0xaaaaaaab
 8003f5c:	0800b85c 	.word	0x0800b85c

08003f60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d11f      	bne.n	8003fba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d856      	bhi.n	800402e <DMA_CheckFifoParam+0xce>
 8003f80:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <DMA_CheckFifoParam+0x28>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003f99 	.word	0x08003f99
 8003f8c:	08003fab 	.word	0x08003fab
 8003f90:	08003f99 	.word	0x08003f99
 8003f94:	0800402f 	.word	0x0800402f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d046      	beq.n	8004032 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa8:	e043      	b.n	8004032 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fb2:	d140      	bne.n	8004036 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb8:	e03d      	b.n	8004036 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc2:	d121      	bne.n	8004008 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d837      	bhi.n	800403a <DMA_CheckFifoParam+0xda>
 8003fca:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <DMA_CheckFifoParam+0x70>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08003fe1 	.word	0x08003fe1
 8003fd4:	08003fe7 	.word	0x08003fe7
 8003fd8:	08003fe1 	.word	0x08003fe1
 8003fdc:	08003ff9 	.word	0x08003ff9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe4:	e030      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d025      	beq.n	800403e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff6:	e022      	b.n	800403e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004000:	d11f      	bne.n	8004042 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004006:	e01c      	b.n	8004042 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d903      	bls.n	8004016 <DMA_CheckFifoParam+0xb6>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b03      	cmp	r3, #3
 8004012:	d003      	beq.n	800401c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004014:	e018      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
      break;
 800401a:	e015      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00e      	beq.n	8004046 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      break;
 800402c:	e00b      	b.n	8004046 <DMA_CheckFifoParam+0xe6>
      break;
 800402e:	bf00      	nop
 8004030:	e00a      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;
 8004032:	bf00      	nop
 8004034:	e008      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;
 8004036:	bf00      	nop
 8004038:	e006      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;
 800403a:	bf00      	nop
 800403c:	e004      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;
 800403e:	bf00      	nop
 8004040:	e002      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;   
 8004042:	bf00      	nop
 8004044:	e000      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;
 8004046:	bf00      	nop
    }
  } 
  
  return status; 
 8004048:	7bfb      	ldrb	r3, [r7, #15]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop

08004058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004058:	b480      	push	{r7}
 800405a:	b089      	sub	sp, #36	; 0x24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004066:	2300      	movs	r3, #0
 8004068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800406a:	2300      	movs	r3, #0
 800406c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	e165      	b.n	8004340 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004074:	2201      	movs	r2, #1
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4013      	ands	r3, r2
 8004086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	429a      	cmp	r2, r3
 800408e:	f040 8154 	bne.w	800433a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d005      	beq.n	80040aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d130      	bne.n	800410c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	2203      	movs	r2, #3
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43db      	mvns	r3, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4013      	ands	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040e0:	2201      	movs	r2, #1
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	091b      	lsrs	r3, r3, #4
 80040f6:	f003 0201 	and.w	r2, r3, #1
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0303 	and.w	r3, r3, #3
 8004114:	2b03      	cmp	r3, #3
 8004116:	d017      	beq.n	8004148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	2203      	movs	r2, #3
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d123      	bne.n	800419c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	08da      	lsrs	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3208      	adds	r2, #8
 800415c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	220f      	movs	r2, #15
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	43db      	mvns	r3, r3
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4013      	ands	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4313      	orrs	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	08da      	lsrs	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3208      	adds	r2, #8
 8004196:	69b9      	ldr	r1, [r7, #24]
 8004198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	2203      	movs	r2, #3
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f003 0203 	and.w	r2, r3, #3
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80ae 	beq.w	800433a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	4b5d      	ldr	r3, [pc, #372]	; (8004358 <HAL_GPIO_Init+0x300>)
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	4a5c      	ldr	r2, [pc, #368]	; (8004358 <HAL_GPIO_Init+0x300>)
 80041e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041ec:	6453      	str	r3, [r2, #68]	; 0x44
 80041ee:	4b5a      	ldr	r3, [pc, #360]	; (8004358 <HAL_GPIO_Init+0x300>)
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041fa:	4a58      	ldr	r2, [pc, #352]	; (800435c <HAL_GPIO_Init+0x304>)
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	089b      	lsrs	r3, r3, #2
 8004200:	3302      	adds	r3, #2
 8004202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	220f      	movs	r2, #15
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4013      	ands	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a4f      	ldr	r2, [pc, #316]	; (8004360 <HAL_GPIO_Init+0x308>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d025      	beq.n	8004272 <HAL_GPIO_Init+0x21a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a4e      	ldr	r2, [pc, #312]	; (8004364 <HAL_GPIO_Init+0x30c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01f      	beq.n	800426e <HAL_GPIO_Init+0x216>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a4d      	ldr	r2, [pc, #308]	; (8004368 <HAL_GPIO_Init+0x310>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d019      	beq.n	800426a <HAL_GPIO_Init+0x212>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a4c      	ldr	r2, [pc, #304]	; (800436c <HAL_GPIO_Init+0x314>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <HAL_GPIO_Init+0x20e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a4b      	ldr	r2, [pc, #300]	; (8004370 <HAL_GPIO_Init+0x318>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00d      	beq.n	8004262 <HAL_GPIO_Init+0x20a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a4a      	ldr	r2, [pc, #296]	; (8004374 <HAL_GPIO_Init+0x31c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d007      	beq.n	800425e <HAL_GPIO_Init+0x206>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a49      	ldr	r2, [pc, #292]	; (8004378 <HAL_GPIO_Init+0x320>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <HAL_GPIO_Init+0x202>
 8004256:	2306      	movs	r3, #6
 8004258:	e00c      	b.n	8004274 <HAL_GPIO_Init+0x21c>
 800425a:	2307      	movs	r3, #7
 800425c:	e00a      	b.n	8004274 <HAL_GPIO_Init+0x21c>
 800425e:	2305      	movs	r3, #5
 8004260:	e008      	b.n	8004274 <HAL_GPIO_Init+0x21c>
 8004262:	2304      	movs	r3, #4
 8004264:	e006      	b.n	8004274 <HAL_GPIO_Init+0x21c>
 8004266:	2303      	movs	r3, #3
 8004268:	e004      	b.n	8004274 <HAL_GPIO_Init+0x21c>
 800426a:	2302      	movs	r3, #2
 800426c:	e002      	b.n	8004274 <HAL_GPIO_Init+0x21c>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <HAL_GPIO_Init+0x21c>
 8004272:	2300      	movs	r3, #0
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	f002 0203 	and.w	r2, r2, #3
 800427a:	0092      	lsls	r2, r2, #2
 800427c:	4093      	lsls	r3, r2
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4313      	orrs	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004284:	4935      	ldr	r1, [pc, #212]	; (800435c <HAL_GPIO_Init+0x304>)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	089b      	lsrs	r3, r3, #2
 800428a:	3302      	adds	r3, #2
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004292:	4b3a      	ldr	r3, [pc, #232]	; (800437c <HAL_GPIO_Init+0x324>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	43db      	mvns	r3, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4013      	ands	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042b6:	4a31      	ldr	r2, [pc, #196]	; (800437c <HAL_GPIO_Init+0x324>)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042bc:	4b2f      	ldr	r3, [pc, #188]	; (800437c <HAL_GPIO_Init+0x324>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	43db      	mvns	r3, r3
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4013      	ands	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042e0:	4a26      	ldr	r2, [pc, #152]	; (800437c <HAL_GPIO_Init+0x324>)
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042e6:	4b25      	ldr	r3, [pc, #148]	; (800437c <HAL_GPIO_Init+0x324>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	43db      	mvns	r3, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4013      	ands	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800430a:	4a1c      	ldr	r2, [pc, #112]	; (800437c <HAL_GPIO_Init+0x324>)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004310:	4b1a      	ldr	r3, [pc, #104]	; (800437c <HAL_GPIO_Init+0x324>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	43db      	mvns	r3, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004334:	4a11      	ldr	r2, [pc, #68]	; (800437c <HAL_GPIO_Init+0x324>)
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3301      	adds	r3, #1
 800433e:	61fb      	str	r3, [r7, #28]
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b0f      	cmp	r3, #15
 8004344:	f67f ae96 	bls.w	8004074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	3724      	adds	r7, #36	; 0x24
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40023800 	.word	0x40023800
 800435c:	40013800 	.word	0x40013800
 8004360:	40020000 	.word	0x40020000
 8004364:	40020400 	.word	0x40020400
 8004368:	40020800 	.word	0x40020800
 800436c:	40020c00 	.word	0x40020c00
 8004370:	40021000 	.word	0x40021000
 8004374:	40021400 	.word	0x40021400
 8004378:	40021800 	.word	0x40021800
 800437c:	40013c00 	.word	0x40013c00

08004380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	887b      	ldrh	r3, [r7, #2]
 8004392:	4013      	ands	r3, r2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004398:	2301      	movs	r3, #1
 800439a:	73fb      	strb	r3, [r7, #15]
 800439c:	e001      	b.n	80043a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800439e:	2300      	movs	r3, #0
 80043a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
 80043bc:	4613      	mov	r3, r2
 80043be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043c0:	787b      	ldrb	r3, [r7, #1]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043c6:	887a      	ldrh	r2, [r7, #2]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043cc:	e003      	b.n	80043d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043ce:	887b      	ldrh	r3, [r7, #2]
 80043d0:	041a      	lsls	r2, r3, #16
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	619a      	str	r2, [r3, #24]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	460b      	mov	r3, r1
 80043ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043f4:	887a      	ldrh	r2, [r7, #2]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4013      	ands	r3, r2
 80043fa:	041a      	lsls	r2, r3, #16
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	43d9      	mvns	r1, r3
 8004400:	887b      	ldrh	r3, [r7, #2]
 8004402:	400b      	ands	r3, r1
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	619a      	str	r2, [r3, #24]
}
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	4b20      	ldr	r3, [pc, #128]	; (80044a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	4a1f      	ldr	r2, [pc, #124]	; (80044a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800442c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004430:	6413      	str	r3, [r2, #64]	; 0x40
 8004432:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800443e:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <HAL_PWREx_EnableOverDrive+0x94>)
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004444:	f7fe fd6c 	bl	8002f20 <HAL_GetTick>
 8004448:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800444a:	e009      	b.n	8004460 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800444c:	f7fe fd68 	bl	8002f20 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800445a:	d901      	bls.n	8004460 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e01f      	b.n	80044a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004460:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446c:	d1ee      	bne.n	800444c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800446e:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004470:	2201      	movs	r2, #1
 8004472:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004474:	f7fe fd54 	bl	8002f20 <HAL_GetTick>
 8004478:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800447a:	e009      	b.n	8004490 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800447c:	f7fe fd50 	bl	8002f20 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800448a:	d901      	bls.n	8004490 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e007      	b.n	80044a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800449c:	d1ee      	bne.n	800447c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40023800 	.word	0x40023800
 80044ac:	420e0040 	.word	0x420e0040
 80044b0:	40007000 	.word	0x40007000
 80044b4:	420e0044 	.word	0x420e0044

080044b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0cc      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044cc:	4b68      	ldr	r3, [pc, #416]	; (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d90c      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044da:	4b65      	ldr	r3, [pc, #404]	; (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b63      	ldr	r3, [pc, #396]	; (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0b8      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d020      	beq.n	8004542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800450c:	4b59      	ldr	r3, [pc, #356]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4a58      	ldr	r2, [pc, #352]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004524:	4b53      	ldr	r3, [pc, #332]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4a52      	ldr	r2, [pc, #328]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800452e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004530:	4b50      	ldr	r3, [pc, #320]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	494d      	ldr	r1, [pc, #308]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	4313      	orrs	r3, r2
 8004540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d044      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d107      	bne.n	8004566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004556:	4b47      	ldr	r3, [pc, #284]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d119      	bne.n	8004596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e07f      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b02      	cmp	r3, #2
 800456c:	d003      	beq.n	8004576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004572:	2b03      	cmp	r3, #3
 8004574:	d107      	bne.n	8004586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004576:	4b3f      	ldr	r3, [pc, #252]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e06f      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004586:	4b3b      	ldr	r3, [pc, #236]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e067      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004596:	4b37      	ldr	r3, [pc, #220]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f023 0203 	bic.w	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4934      	ldr	r1, [pc, #208]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a8:	f7fe fcba 	bl	8002f20 <HAL_GetTick>
 80045ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b0:	f7fe fcb6 	bl	8002f20 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e04f      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c6:	4b2b      	ldr	r3, [pc, #172]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 020c 	and.w	r2, r3, #12
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d1eb      	bne.n	80045b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045d8:	4b25      	ldr	r3, [pc, #148]	; (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d20c      	bcs.n	8004600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e6:	4b22      	ldr	r3, [pc, #136]	; (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ee:	4b20      	ldr	r3, [pc, #128]	; (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e032      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800460c:	4b19      	ldr	r3, [pc, #100]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	4916      	ldr	r1, [pc, #88]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800462a:	4b12      	ldr	r3, [pc, #72]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	490e      	ldr	r1, [pc, #56]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800463e:	f000 f855 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 8004642:	4602      	mov	r2, r0
 8004644:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	490a      	ldr	r1, [pc, #40]	; (8004678 <HAL_RCC_ClockConfig+0x1c0>)
 8004650:	5ccb      	ldrb	r3, [r1, r3]
 8004652:	fa22 f303 	lsr.w	r3, r2, r3
 8004656:	4a09      	ldr	r2, [pc, #36]	; (800467c <HAL_RCC_ClockConfig+0x1c4>)
 8004658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_RCC_ClockConfig+0x1c8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fc1a 	bl	8002e98 <HAL_InitTick>

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40023c00 	.word	0x40023c00
 8004674:	40023800 	.word	0x40023800
 8004678:	0800b844 	.word	0x0800b844
 800467c:	20000028 	.word	0x20000028
 8004680:	2000002c 	.word	0x2000002c

08004684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004688:	4b03      	ldr	r3, [pc, #12]	; (8004698 <HAL_RCC_GetHCLKFreq+0x14>)
 800468a:	681b      	ldr	r3, [r3, #0]
}
 800468c:	4618      	mov	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000028 	.word	0x20000028

0800469c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046a0:	f7ff fff0 	bl	8004684 <HAL_RCC_GetHCLKFreq>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	0a9b      	lsrs	r3, r3, #10
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	4903      	ldr	r1, [pc, #12]	; (80046c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b2:	5ccb      	ldrb	r3, [r1, r3]
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40023800 	.word	0x40023800
 80046c0:	0800b854 	.word	0x0800b854

080046c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046c8:	f7ff ffdc 	bl	8004684 <HAL_RCC_GetHCLKFreq>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	0b5b      	lsrs	r3, r3, #13
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	4903      	ldr	r1, [pc, #12]	; (80046e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046da:	5ccb      	ldrb	r3, [r1, r3]
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40023800 	.word	0x40023800
 80046e8:	0800b854 	.word	0x0800b854

080046ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f0:	b0ae      	sub	sp, #184	; 0xb8
 80046f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004712:	4bcb      	ldr	r3, [pc, #812]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b0c      	cmp	r3, #12
 800471c:	f200 8206 	bhi.w	8004b2c <HAL_RCC_GetSysClockFreq+0x440>
 8004720:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	0800475d 	.word	0x0800475d
 800472c:	08004b2d 	.word	0x08004b2d
 8004730:	08004b2d 	.word	0x08004b2d
 8004734:	08004b2d 	.word	0x08004b2d
 8004738:	08004765 	.word	0x08004765
 800473c:	08004b2d 	.word	0x08004b2d
 8004740:	08004b2d 	.word	0x08004b2d
 8004744:	08004b2d 	.word	0x08004b2d
 8004748:	0800476d 	.word	0x0800476d
 800474c:	08004b2d 	.word	0x08004b2d
 8004750:	08004b2d 	.word	0x08004b2d
 8004754:	08004b2d 	.word	0x08004b2d
 8004758:	0800495d 	.word	0x0800495d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800475c:	4bb9      	ldr	r3, [pc, #740]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x358>)
 800475e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004762:	e1e7      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004764:	4bb8      	ldr	r3, [pc, #736]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800476a:	e1e3      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800476c:	4bb4      	ldr	r3, [pc, #720]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x354>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004778:	4bb1      	ldr	r3, [pc, #708]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x354>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d071      	beq.n	8004868 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004784:	4bae      	ldr	r3, [pc, #696]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	2200      	movs	r2, #0
 800478c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004790:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004794:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047a0:	2300      	movs	r3, #0
 80047a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047aa:	4622      	mov	r2, r4
 80047ac:	462b      	mov	r3, r5
 80047ae:	f04f 0000 	mov.w	r0, #0
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	0159      	lsls	r1, r3, #5
 80047b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047bc:	0150      	lsls	r0, r2, #5
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4621      	mov	r1, r4
 80047c4:	1a51      	subs	r1, r2, r1
 80047c6:	6439      	str	r1, [r7, #64]	; 0x40
 80047c8:	4629      	mov	r1, r5
 80047ca:	eb63 0301 	sbc.w	r3, r3, r1
 80047ce:	647b      	str	r3, [r7, #68]	; 0x44
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80047dc:	4649      	mov	r1, r9
 80047de:	018b      	lsls	r3, r1, #6
 80047e0:	4641      	mov	r1, r8
 80047e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047e6:	4641      	mov	r1, r8
 80047e8:	018a      	lsls	r2, r1, #6
 80047ea:	4641      	mov	r1, r8
 80047ec:	1a51      	subs	r1, r2, r1
 80047ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80047f0:	4649      	mov	r1, r9
 80047f2:	eb63 0301 	sbc.w	r3, r3, r1
 80047f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004804:	4649      	mov	r1, r9
 8004806:	00cb      	lsls	r3, r1, #3
 8004808:	4641      	mov	r1, r8
 800480a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800480e:	4641      	mov	r1, r8
 8004810:	00ca      	lsls	r2, r1, #3
 8004812:	4610      	mov	r0, r2
 8004814:	4619      	mov	r1, r3
 8004816:	4603      	mov	r3, r0
 8004818:	4622      	mov	r2, r4
 800481a:	189b      	adds	r3, r3, r2
 800481c:	633b      	str	r3, [r7, #48]	; 0x30
 800481e:	462b      	mov	r3, r5
 8004820:	460a      	mov	r2, r1
 8004822:	eb42 0303 	adc.w	r3, r2, r3
 8004826:	637b      	str	r3, [r7, #52]	; 0x34
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004834:	4629      	mov	r1, r5
 8004836:	024b      	lsls	r3, r1, #9
 8004838:	4621      	mov	r1, r4
 800483a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800483e:	4621      	mov	r1, r4
 8004840:	024a      	lsls	r2, r1, #9
 8004842:	4610      	mov	r0, r2
 8004844:	4619      	mov	r1, r3
 8004846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800484a:	2200      	movs	r2, #0
 800484c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004850:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004854:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004858:	f7fc fa36 	bl	8000cc8 <__aeabi_uldivmod>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4613      	mov	r3, r2
 8004862:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004866:	e067      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004868:	4b75      	ldr	r3, [pc, #468]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x354>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	099b      	lsrs	r3, r3, #6
 800486e:	2200      	movs	r2, #0
 8004870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004874:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004878:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800487c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004880:	67bb      	str	r3, [r7, #120]	; 0x78
 8004882:	2300      	movs	r3, #0
 8004884:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004886:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800488a:	4622      	mov	r2, r4
 800488c:	462b      	mov	r3, r5
 800488e:	f04f 0000 	mov.w	r0, #0
 8004892:	f04f 0100 	mov.w	r1, #0
 8004896:	0159      	lsls	r1, r3, #5
 8004898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800489c:	0150      	lsls	r0, r2, #5
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4621      	mov	r1, r4
 80048a4:	1a51      	subs	r1, r2, r1
 80048a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80048a8:	4629      	mov	r1, r5
 80048aa:	eb63 0301 	sbc.w	r3, r3, r1
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80048bc:	4649      	mov	r1, r9
 80048be:	018b      	lsls	r3, r1, #6
 80048c0:	4641      	mov	r1, r8
 80048c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048c6:	4641      	mov	r1, r8
 80048c8:	018a      	lsls	r2, r1, #6
 80048ca:	4641      	mov	r1, r8
 80048cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80048d0:	4649      	mov	r1, r9
 80048d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048ea:	4692      	mov	sl, r2
 80048ec:	469b      	mov	fp, r3
 80048ee:	4623      	mov	r3, r4
 80048f0:	eb1a 0303 	adds.w	r3, sl, r3
 80048f4:	623b      	str	r3, [r7, #32]
 80048f6:	462b      	mov	r3, r5
 80048f8:	eb4b 0303 	adc.w	r3, fp, r3
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800490a:	4629      	mov	r1, r5
 800490c:	028b      	lsls	r3, r1, #10
 800490e:	4621      	mov	r1, r4
 8004910:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004914:	4621      	mov	r1, r4
 8004916:	028a      	lsls	r2, r1, #10
 8004918:	4610      	mov	r0, r2
 800491a:	4619      	mov	r1, r3
 800491c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004920:	2200      	movs	r2, #0
 8004922:	673b      	str	r3, [r7, #112]	; 0x70
 8004924:	677a      	str	r2, [r7, #116]	; 0x74
 8004926:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800492a:	f7fc f9cd 	bl	8000cc8 <__aeabi_uldivmod>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4613      	mov	r3, r2
 8004934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004938:	4b41      	ldr	r3, [pc, #260]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x354>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	0c1b      	lsrs	r3, r3, #16
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	3301      	adds	r3, #1
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800494a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800494e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004952:	fbb2 f3f3 	udiv	r3, r2, r3
 8004956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800495a:	e0eb      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800495c:	4b38      	ldr	r3, [pc, #224]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x354>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004964:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004968:	4b35      	ldr	r3, [pc, #212]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x354>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d06b      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004974:	4b32      	ldr	r3, [pc, #200]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	099b      	lsrs	r3, r3, #6
 800497a:	2200      	movs	r2, #0
 800497c:	66bb      	str	r3, [r7, #104]	; 0x68
 800497e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004986:	663b      	str	r3, [r7, #96]	; 0x60
 8004988:	2300      	movs	r3, #0
 800498a:	667b      	str	r3, [r7, #100]	; 0x64
 800498c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004990:	4622      	mov	r2, r4
 8004992:	462b      	mov	r3, r5
 8004994:	f04f 0000 	mov.w	r0, #0
 8004998:	f04f 0100 	mov.w	r1, #0
 800499c:	0159      	lsls	r1, r3, #5
 800499e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049a2:	0150      	lsls	r0, r2, #5
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4621      	mov	r1, r4
 80049aa:	1a51      	subs	r1, r2, r1
 80049ac:	61b9      	str	r1, [r7, #24]
 80049ae:	4629      	mov	r1, r5
 80049b0:	eb63 0301 	sbc.w	r3, r3, r1
 80049b4:	61fb      	str	r3, [r7, #28]
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80049c2:	4659      	mov	r1, fp
 80049c4:	018b      	lsls	r3, r1, #6
 80049c6:	4651      	mov	r1, sl
 80049c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049cc:	4651      	mov	r1, sl
 80049ce:	018a      	lsls	r2, r1, #6
 80049d0:	4651      	mov	r1, sl
 80049d2:	ebb2 0801 	subs.w	r8, r2, r1
 80049d6:	4659      	mov	r1, fp
 80049d8:	eb63 0901 	sbc.w	r9, r3, r1
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049f0:	4690      	mov	r8, r2
 80049f2:	4699      	mov	r9, r3
 80049f4:	4623      	mov	r3, r4
 80049f6:	eb18 0303 	adds.w	r3, r8, r3
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	462b      	mov	r3, r5
 80049fe:	eb49 0303 	adc.w	r3, r9, r3
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a10:	4629      	mov	r1, r5
 8004a12:	024b      	lsls	r3, r1, #9
 8004a14:	4621      	mov	r1, r4
 8004a16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	024a      	lsls	r2, r1, #9
 8004a1e:	4610      	mov	r0, r2
 8004a20:	4619      	mov	r1, r3
 8004a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a26:	2200      	movs	r2, #0
 8004a28:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a2a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a30:	f7fc f94a 	bl	8000cc8 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4613      	mov	r3, r2
 8004a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a3e:	e065      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x420>
 8004a40:	40023800 	.word	0x40023800
 8004a44:	00f42400 	.word	0x00f42400
 8004a48:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a4c:	4b3d      	ldr	r3, [pc, #244]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x458>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	099b      	lsrs	r3, r3, #6
 8004a52:	2200      	movs	r2, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	4611      	mov	r1, r2
 8004a58:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004a5e:	2300      	movs	r3, #0
 8004a60:	657b      	str	r3, [r7, #84]	; 0x54
 8004a62:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004a66:	4642      	mov	r2, r8
 8004a68:	464b      	mov	r3, r9
 8004a6a:	f04f 0000 	mov.w	r0, #0
 8004a6e:	f04f 0100 	mov.w	r1, #0
 8004a72:	0159      	lsls	r1, r3, #5
 8004a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a78:	0150      	lsls	r0, r2, #5
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4641      	mov	r1, r8
 8004a80:	1a51      	subs	r1, r2, r1
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	4649      	mov	r1, r9
 8004a86:	eb63 0301 	sbc.w	r3, r3, r1
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004a98:	4659      	mov	r1, fp
 8004a9a:	018b      	lsls	r3, r1, #6
 8004a9c:	4651      	mov	r1, sl
 8004a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aa2:	4651      	mov	r1, sl
 8004aa4:	018a      	lsls	r2, r1, #6
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	1a54      	subs	r4, r2, r1
 8004aaa:	4659      	mov	r1, fp
 8004aac:	eb63 0501 	sbc.w	r5, r3, r1
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	00eb      	lsls	r3, r5, #3
 8004aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004abe:	00e2      	lsls	r2, r4, #3
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	461d      	mov	r5, r3
 8004ac4:	4643      	mov	r3, r8
 8004ac6:	18e3      	adds	r3, r4, r3
 8004ac8:	603b      	str	r3, [r7, #0]
 8004aca:	464b      	mov	r3, r9
 8004acc:	eb45 0303 	adc.w	r3, r5, r3
 8004ad0:	607b      	str	r3, [r7, #4]
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ade:	4629      	mov	r1, r5
 8004ae0:	028b      	lsls	r3, r1, #10
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ae8:	4621      	mov	r1, r4
 8004aea:	028a      	lsls	r2, r1, #10
 8004aec:	4610      	mov	r0, r2
 8004aee:	4619      	mov	r1, r3
 8004af0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004af4:	2200      	movs	r2, #0
 8004af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004af8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004afa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004afe:	f7fc f8e3 	bl	8000cc8 <__aeabi_uldivmod>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4613      	mov	r3, r2
 8004b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b0c:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	0f1b      	lsrs	r3, r3, #28
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b2a:	e003      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	37b8      	adds	r7, #184	; 0xb8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	00f42400 	.word	0x00f42400

08004b4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e28d      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 8083 	beq.w	8004c72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b6c:	4b94      	ldr	r3, [pc, #592]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 030c 	and.w	r3, r3, #12
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d019      	beq.n	8004bac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b78:	4b91      	ldr	r3, [pc, #580]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d106      	bne.n	8004b92 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b84:	4b8e      	ldr	r3, [pc, #568]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b90:	d00c      	beq.n	8004bac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b92:	4b8b      	ldr	r3, [pc, #556]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b9a:	2b0c      	cmp	r3, #12
 8004b9c:	d112      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b9e:	4b88      	ldr	r3, [pc, #544]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004baa:	d10b      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bac:	4b84      	ldr	r3, [pc, #528]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d05b      	beq.n	8004c70 <HAL_RCC_OscConfig+0x124>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d157      	bne.n	8004c70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e25a      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bcc:	d106      	bne.n	8004bdc <HAL_RCC_OscConfig+0x90>
 8004bce:	4b7c      	ldr	r3, [pc, #496]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a7b      	ldr	r2, [pc, #492]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	e01d      	b.n	8004c18 <HAL_RCC_OscConfig+0xcc>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004be4:	d10c      	bne.n	8004c00 <HAL_RCC_OscConfig+0xb4>
 8004be6:	4b76      	ldr	r3, [pc, #472]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a75      	ldr	r2, [pc, #468]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	4b73      	ldr	r3, [pc, #460]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a72      	ldr	r2, [pc, #456]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e00b      	b.n	8004c18 <HAL_RCC_OscConfig+0xcc>
 8004c00:	4b6f      	ldr	r3, [pc, #444]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a6e      	ldr	r2, [pc, #440]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	4b6c      	ldr	r3, [pc, #432]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a6b      	ldr	r2, [pc, #428]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d013      	beq.n	8004c48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7fe f97e 	bl	8002f20 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c28:	f7fe f97a 	bl	8002f20 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b64      	cmp	r3, #100	; 0x64
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e21f      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3a:	4b61      	ldr	r3, [pc, #388]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0xdc>
 8004c46:	e014      	b.n	8004c72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c48:	f7fe f96a 	bl	8002f20 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c50:	f7fe f966 	bl	8002f20 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	; 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e20b      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c62:	4b57      	ldr	r3, [pc, #348]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f0      	bne.n	8004c50 <HAL_RCC_OscConfig+0x104>
 8004c6e:	e000      	b.n	8004c72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d06f      	beq.n	8004d5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c7e:	4b50      	ldr	r3, [pc, #320]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 030c 	and.w	r3, r3, #12
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d017      	beq.n	8004cba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c8a:	4b4d      	ldr	r3, [pc, #308]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d105      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c96:	4b4a      	ldr	r3, [pc, #296]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00b      	beq.n	8004cba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ca2:	4b47      	ldr	r3, [pc, #284]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004caa:	2b0c      	cmp	r3, #12
 8004cac:	d11c      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cae:	4b44      	ldr	r3, [pc, #272]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d116      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cba:	4b41      	ldr	r3, [pc, #260]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x186>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d001      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e1d3      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd2:	4b3b      	ldr	r3, [pc, #236]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4937      	ldr	r1, [pc, #220]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce6:	e03a      	b.n	8004d5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d020      	beq.n	8004d32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf0:	4b34      	ldr	r3, [pc, #208]	; (8004dc4 <HAL_RCC_OscConfig+0x278>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf6:	f7fe f913 	bl	8002f20 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cfe:	f7fe f90f 	bl	8002f20 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e1b4      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d10:	4b2b      	ldr	r3, [pc, #172]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1c:	4b28      	ldr	r3, [pc, #160]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	4925      	ldr	r1, [pc, #148]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	600b      	str	r3, [r1, #0]
 8004d30:	e015      	b.n	8004d5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d32:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <HAL_RCC_OscConfig+0x278>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fe f8f2 	bl	8002f20 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d40:	f7fe f8ee 	bl	8002f20 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e193      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d52:	4b1b      	ldr	r3, [pc, #108]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d036      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d016      	beq.n	8004da0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d72:	4b15      	ldr	r3, [pc, #84]	; (8004dc8 <HAL_RCC_OscConfig+0x27c>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d78:	f7fe f8d2 	bl	8002f20 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d80:	f7fe f8ce 	bl	8002f20 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e173      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0x234>
 8004d9e:	e01b      	b.n	8004dd8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da0:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <HAL_RCC_OscConfig+0x27c>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da6:	f7fe f8bb 	bl	8002f20 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dac:	e00e      	b.n	8004dcc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dae:	f7fe f8b7 	bl	8002f20 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d907      	bls.n	8004dcc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e15c      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	42470000 	.word	0x42470000
 8004dc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dcc:	4b8a      	ldr	r3, [pc, #552]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1ea      	bne.n	8004dae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 8097 	beq.w	8004f14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dea:	4b83      	ldr	r3, [pc, #524]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10f      	bne.n	8004e16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004df6:	2300      	movs	r3, #0
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	4b7f      	ldr	r3, [pc, #508]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	4a7e      	ldr	r2, [pc, #504]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e04:	6413      	str	r3, [r2, #64]	; 0x40
 8004e06:	4b7c      	ldr	r3, [pc, #496]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0e:	60bb      	str	r3, [r7, #8]
 8004e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e12:	2301      	movs	r3, #1
 8004e14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e16:	4b79      	ldr	r3, [pc, #484]	; (8004ffc <HAL_RCC_OscConfig+0x4b0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d118      	bne.n	8004e54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e22:	4b76      	ldr	r3, [pc, #472]	; (8004ffc <HAL_RCC_OscConfig+0x4b0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a75      	ldr	r2, [pc, #468]	; (8004ffc <HAL_RCC_OscConfig+0x4b0>)
 8004e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e2e:	f7fe f877 	bl	8002f20 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e36:	f7fe f873 	bl	8002f20 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e118      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e48:	4b6c      	ldr	r3, [pc, #432]	; (8004ffc <HAL_RCC_OscConfig+0x4b0>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d106      	bne.n	8004e6a <HAL_RCC_OscConfig+0x31e>
 8004e5c:	4b66      	ldr	r3, [pc, #408]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e60:	4a65      	ldr	r2, [pc, #404]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	6713      	str	r3, [r2, #112]	; 0x70
 8004e68:	e01c      	b.n	8004ea4 <HAL_RCC_OscConfig+0x358>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b05      	cmp	r3, #5
 8004e70:	d10c      	bne.n	8004e8c <HAL_RCC_OscConfig+0x340>
 8004e72:	4b61      	ldr	r3, [pc, #388]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	4a60      	ldr	r2, [pc, #384]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004e78:	f043 0304 	orr.w	r3, r3, #4
 8004e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e7e:	4b5e      	ldr	r3, [pc, #376]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	4a5d      	ldr	r2, [pc, #372]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8a:	e00b      	b.n	8004ea4 <HAL_RCC_OscConfig+0x358>
 8004e8c:	4b5a      	ldr	r3, [pc, #360]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	4a59      	ldr	r2, [pc, #356]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004e92:	f023 0301 	bic.w	r3, r3, #1
 8004e96:	6713      	str	r3, [r2, #112]	; 0x70
 8004e98:	4b57      	ldr	r3, [pc, #348]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	4a56      	ldr	r2, [pc, #344]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004e9e:	f023 0304 	bic.w	r3, r3, #4
 8004ea2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d015      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eac:	f7fe f838 	bl	8002f20 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb2:	e00a      	b.n	8004eca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb4:	f7fe f834 	bl	8002f20 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e0d7      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eca:	4b4b      	ldr	r3, [pc, #300]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0ee      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x368>
 8004ed6:	e014      	b.n	8004f02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed8:	f7fe f822 	bl	8002f20 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee0:	f7fe f81e 	bl	8002f20 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e0c1      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef6:	4b40      	ldr	r3, [pc, #256]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1ee      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d105      	bne.n	8004f14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f08:	4b3b      	ldr	r3, [pc, #236]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	4a3a      	ldr	r2, [pc, #232]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80ad 	beq.w	8005078 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f1e:	4b36      	ldr	r3, [pc, #216]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d060      	beq.n	8004fec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d145      	bne.n	8004fbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f32:	4b33      	ldr	r3, [pc, #204]	; (8005000 <HAL_RCC_OscConfig+0x4b4>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fd fff2 	bl	8002f20 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f40:	f7fd ffee 	bl	8002f20 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e093      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f52:	4b29      	ldr	r3, [pc, #164]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69da      	ldr	r2, [r3, #28]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	019b      	lsls	r3, r3, #6
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	3b01      	subs	r3, #1
 8004f78:	041b      	lsls	r3, r3, #16
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	061b      	lsls	r3, r3, #24
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	071b      	lsls	r3, r3, #28
 8004f8a:	491b      	ldr	r1, [pc, #108]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f90:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <HAL_RCC_OscConfig+0x4b4>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f96:	f7fd ffc3 	bl	8002f20 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f9e:	f7fd ffbf 	bl	8002f20 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e064      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb0:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0x452>
 8004fbc:	e05c      	b.n	8005078 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbe:	4b10      	ldr	r3, [pc, #64]	; (8005000 <HAL_RCC_OscConfig+0x4b4>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fd ffac 	bl	8002f20 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fd ffa8 	bl	8002f20 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e04d      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fde:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <HAL_RCC_OscConfig+0x4ac>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x480>
 8004fea:	e045      	b.n	8005078 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d107      	bne.n	8005004 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e040      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	40007000 	.word	0x40007000
 8005000:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005004:	4b1f      	ldr	r3, [pc, #124]	; (8005084 <HAL_RCC_OscConfig+0x538>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d030      	beq.n	8005074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800501c:	429a      	cmp	r2, r3
 800501e:	d129      	bne.n	8005074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	429a      	cmp	r2, r3
 800502c:	d122      	bne.n	8005074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005034:	4013      	ands	r3, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800503a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800503c:	4293      	cmp	r3, r2
 800503e:	d119      	bne.n	8005074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	085b      	lsrs	r3, r3, #1
 800504c:	3b01      	subs	r3, #1
 800504e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d10f      	bne.n	8005074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d107      	bne.n	8005074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40023800 	.word	0x40023800

08005088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e041      	b.n	800511e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fd faf4 	bl	800269c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3304      	adds	r3, #4
 80050c4:	4619      	mov	r1, r3
 80050c6:	4610      	mov	r0, r2
 80050c8:	f001 f8a2 	bl	8006210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	d001      	beq.n	8005140 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e046      	b.n	80051ce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a23      	ldr	r2, [pc, #140]	; (80051dc <HAL_TIM_Base_Start+0xb4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d022      	beq.n	8005198 <HAL_TIM_Base_Start+0x70>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515a:	d01d      	beq.n	8005198 <HAL_TIM_Base_Start+0x70>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1f      	ldr	r2, [pc, #124]	; (80051e0 <HAL_TIM_Base_Start+0xb8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d018      	beq.n	8005198 <HAL_TIM_Base_Start+0x70>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1e      	ldr	r2, [pc, #120]	; (80051e4 <HAL_TIM_Base_Start+0xbc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d013      	beq.n	8005198 <HAL_TIM_Base_Start+0x70>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a1c      	ldr	r2, [pc, #112]	; (80051e8 <HAL_TIM_Base_Start+0xc0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00e      	beq.n	8005198 <HAL_TIM_Base_Start+0x70>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1b      	ldr	r2, [pc, #108]	; (80051ec <HAL_TIM_Base_Start+0xc4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d009      	beq.n	8005198 <HAL_TIM_Base_Start+0x70>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a19      	ldr	r2, [pc, #100]	; (80051f0 <HAL_TIM_Base_Start+0xc8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d004      	beq.n	8005198 <HAL_TIM_Base_Start+0x70>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_TIM_Base_Start+0xcc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d111      	bne.n	80051bc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b06      	cmp	r3, #6
 80051a8:	d010      	beq.n	80051cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ba:	e007      	b.n	80051cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40010000 	.word	0x40010000
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40000800 	.word	0x40000800
 80051e8:	40000c00 	.word	0x40000c00
 80051ec:	40010400 	.word	0x40010400
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40001800 	.word	0x40001800

080051f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e041      	b.n	800528e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fd fa1a 	bl	8002658 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f000 ffea 	bl	8006210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d109      	bne.n	80052bc <HAL_TIM_PWM_Start+0x24>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	bf14      	ite	ne
 80052b4:	2301      	movne	r3, #1
 80052b6:	2300      	moveq	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	e022      	b.n	8005302 <HAL_TIM_PWM_Start+0x6a>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d109      	bne.n	80052d6 <HAL_TIM_PWM_Start+0x3e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	bf14      	ite	ne
 80052ce:	2301      	movne	r3, #1
 80052d0:	2300      	moveq	r3, #0
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	e015      	b.n	8005302 <HAL_TIM_PWM_Start+0x6a>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d109      	bne.n	80052f0 <HAL_TIM_PWM_Start+0x58>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	bf14      	ite	ne
 80052e8:	2301      	movne	r3, #1
 80052ea:	2300      	moveq	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	e008      	b.n	8005302 <HAL_TIM_PWM_Start+0x6a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	bf14      	ite	ne
 80052fc:	2301      	movne	r3, #1
 80052fe:	2300      	moveq	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e07c      	b.n	8005404 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d104      	bne.n	800531a <HAL_TIM_PWM_Start+0x82>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005318:	e013      	b.n	8005342 <HAL_TIM_PWM_Start+0xaa>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b04      	cmp	r3, #4
 800531e:	d104      	bne.n	800532a <HAL_TIM_PWM_Start+0x92>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005328:	e00b      	b.n	8005342 <HAL_TIM_PWM_Start+0xaa>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b08      	cmp	r3, #8
 800532e:	d104      	bne.n	800533a <HAL_TIM_PWM_Start+0xa2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005338:	e003      	b.n	8005342 <HAL_TIM_PWM_Start+0xaa>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2201      	movs	r2, #1
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f001 fb74 	bl	8006a38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2d      	ldr	r2, [pc, #180]	; (800540c <HAL_TIM_PWM_Start+0x174>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <HAL_TIM_PWM_Start+0xcc>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a2c      	ldr	r2, [pc, #176]	; (8005410 <HAL_TIM_PWM_Start+0x178>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d101      	bne.n	8005368 <HAL_TIM_PWM_Start+0xd0>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <HAL_TIM_PWM_Start+0xd2>
 8005368:	2300      	movs	r3, #0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800537c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a22      	ldr	r2, [pc, #136]	; (800540c <HAL_TIM_PWM_Start+0x174>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d022      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005390:	d01d      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1f      	ldr	r2, [pc, #124]	; (8005414 <HAL_TIM_PWM_Start+0x17c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d018      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1d      	ldr	r2, [pc, #116]	; (8005418 <HAL_TIM_PWM_Start+0x180>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1c      	ldr	r2, [pc, #112]	; (800541c <HAL_TIM_PWM_Start+0x184>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00e      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a16      	ldr	r2, [pc, #88]	; (8005410 <HAL_TIM_PWM_Start+0x178>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d009      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a18      	ldr	r2, [pc, #96]	; (8005420 <HAL_TIM_PWM_Start+0x188>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d004      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a16      	ldr	r2, [pc, #88]	; (8005424 <HAL_TIM_PWM_Start+0x18c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d111      	bne.n	80053f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b06      	cmp	r3, #6
 80053de:	d010      	beq.n	8005402 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f0:	e007      	b.n	8005402 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40010000 	.word	0x40010000
 8005410:	40010400 	.word	0x40010400
 8005414:	40000400 	.word	0x40000400
 8005418:	40000800 	.word	0x40000800
 800541c:	40000c00 	.word	0x40000c00
 8005420:	40014000 	.word	0x40014000
 8005424:	40001800 	.word	0x40001800

08005428 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e041      	b.n	80054be <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f839 	bl	80054c6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3304      	adds	r3, #4
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f000 fed2 	bl	8006210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
	...

080054dc <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d104      	bne.n	80054fe <HAL_TIM_IC_Start_DMA+0x22>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	e013      	b.n	8005526 <HAL_TIM_IC_Start_DMA+0x4a>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b04      	cmp	r3, #4
 8005502:	d104      	bne.n	800550e <HAL_TIM_IC_Start_DMA+0x32>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800550a:	b2db      	uxtb	r3, r3
 800550c:	e00b      	b.n	8005526 <HAL_TIM_IC_Start_DMA+0x4a>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b08      	cmp	r3, #8
 8005512:	d104      	bne.n	800551e <HAL_TIM_IC_Start_DMA+0x42>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800551a:	b2db      	uxtb	r3, r3
 800551c:	e003      	b.n	8005526 <HAL_TIM_IC_Start_DMA+0x4a>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005524:	b2db      	uxtb	r3, r3
 8005526:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d104      	bne.n	8005538 <HAL_TIM_IC_Start_DMA+0x5c>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005534:	b2db      	uxtb	r3, r3
 8005536:	e013      	b.n	8005560 <HAL_TIM_IC_Start_DMA+0x84>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b04      	cmp	r3, #4
 800553c:	d104      	bne.n	8005548 <HAL_TIM_IC_Start_DMA+0x6c>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005544:	b2db      	uxtb	r3, r3
 8005546:	e00b      	b.n	8005560 <HAL_TIM_IC_Start_DMA+0x84>
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b08      	cmp	r3, #8
 800554c:	d104      	bne.n	8005558 <HAL_TIM_IC_Start_DMA+0x7c>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005554:	b2db      	uxtb	r3, r3
 8005556:	e003      	b.n	8005560 <HAL_TIM_IC_Start_DMA+0x84>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800555e:	b2db      	uxtb	r3, r3
 8005560:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005562:	7dbb      	ldrb	r3, [r7, #22]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d002      	beq.n	800556e <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005568:	7d7b      	ldrb	r3, [r7, #21]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d101      	bne.n	8005572 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800556e:	2302      	movs	r3, #2
 8005570:	e146      	b.n	8005800 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8005572:	7dbb      	ldrb	r3, [r7, #22]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d143      	bne.n	8005600 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8005578:	7d7b      	ldrb	r3, [r7, #21]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d140      	bne.n	8005600 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d104      	bne.n	800558e <HAL_TIM_IC_Start_DMA+0xb2>
 8005584:	887b      	ldrh	r3, [r7, #2]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e138      	b.n	8005800 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d104      	bne.n	800559e <HAL_TIM_IC_Start_DMA+0xc2>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800559c:	e013      	b.n	80055c6 <HAL_TIM_IC_Start_DMA+0xea>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_IC_Start_DMA+0xd2>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ac:	e00b      	b.n	80055c6 <HAL_TIM_IC_Start_DMA+0xea>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d104      	bne.n	80055be <HAL_TIM_IC_Start_DMA+0xe2>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055bc:	e003      	b.n	80055c6 <HAL_TIM_IC_Start_DMA+0xea>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d104      	bne.n	80055d6 <HAL_TIM_IC_Start_DMA+0xfa>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80055d4:	e016      	b.n	8005604 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_IC_Start_DMA+0x10a>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80055e4:	e00e      	b.n	8005604 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d104      	bne.n	80055f6 <HAL_TIM_IC_Start_DMA+0x11a>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80055f4:	e006      	b.n	8005604 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2202      	movs	r2, #2
 80055fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80055fe:	e001      	b.n	8005604 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e0fd      	b.n	8005800 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2201      	movs	r2, #1
 800560a:	68b9      	ldr	r1, [r7, #8]
 800560c:	4618      	mov	r0, r3
 800560e:	f001 fa13 	bl	8006a38 <TIM_CCxChannelCmd>

  switch (Channel)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b0c      	cmp	r3, #12
 8005616:	f200 80ad 	bhi.w	8005774 <HAL_TIM_IC_Start_DMA+0x298>
 800561a:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <HAL_TIM_IC_Start_DMA+0x144>)
 800561c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005620:	08005655 	.word	0x08005655
 8005624:	08005775 	.word	0x08005775
 8005628:	08005775 	.word	0x08005775
 800562c:	08005775 	.word	0x08005775
 8005630:	0800569d 	.word	0x0800569d
 8005634:	08005775 	.word	0x08005775
 8005638:	08005775 	.word	0x08005775
 800563c:	08005775 	.word	0x08005775
 8005640:	080056e5 	.word	0x080056e5
 8005644:	08005775 	.word	0x08005775
 8005648:	08005775 	.word	0x08005775
 800564c:	08005775 	.word	0x08005775
 8005650:	0800572d 	.word	0x0800572d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	4a6b      	ldr	r2, [pc, #428]	; (8005808 <HAL_TIM_IC_Start_DMA+0x32c>)
 800565a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	4a6a      	ldr	r2, [pc, #424]	; (800580c <HAL_TIM_IC_Start_DMA+0x330>)
 8005662:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	4a69      	ldr	r2, [pc, #420]	; (8005810 <HAL_TIM_IC_Start_DMA+0x334>)
 800566a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3334      	adds	r3, #52	; 0x34
 8005676:	4619      	mov	r1, r3
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	887b      	ldrh	r3, [r7, #2]
 800567c:	f7fe fa2a 	bl	8003ad4 <HAL_DMA_Start_IT>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e0ba      	b.n	8005800 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005698:	60da      	str	r2, [r3, #12]
      break;
 800569a:	e06e      	b.n	800577a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a0:	4a59      	ldr	r2, [pc, #356]	; (8005808 <HAL_TIM_IC_Start_DMA+0x32c>)
 80056a2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	4a58      	ldr	r2, [pc, #352]	; (800580c <HAL_TIM_IC_Start_DMA+0x330>)
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b0:	4a57      	ldr	r2, [pc, #348]	; (8005810 <HAL_TIM_IC_Start_DMA+0x334>)
 80056b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3338      	adds	r3, #56	; 0x38
 80056be:	4619      	mov	r1, r3
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	887b      	ldrh	r3, [r7, #2]
 80056c4:	f7fe fa06 	bl	8003ad4 <HAL_DMA_Start_IT>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e096      	b.n	8005800 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056e0:	60da      	str	r2, [r3, #12]
      break;
 80056e2:	e04a      	b.n	800577a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	4a47      	ldr	r2, [pc, #284]	; (8005808 <HAL_TIM_IC_Start_DMA+0x32c>)
 80056ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	4a46      	ldr	r2, [pc, #280]	; (800580c <HAL_TIM_IC_Start_DMA+0x330>)
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	4a45      	ldr	r2, [pc, #276]	; (8005810 <HAL_TIM_IC_Start_DMA+0x334>)
 80056fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	333c      	adds	r3, #60	; 0x3c
 8005706:	4619      	mov	r1, r3
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	887b      	ldrh	r3, [r7, #2]
 800570c:	f7fe f9e2 	bl	8003ad4 <HAL_DMA_Start_IT>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e072      	b.n	8005800 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005728:	60da      	str	r2, [r3, #12]
      break;
 800572a:	e026      	b.n	800577a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	4a35      	ldr	r2, [pc, #212]	; (8005808 <HAL_TIM_IC_Start_DMA+0x32c>)
 8005732:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	4a34      	ldr	r2, [pc, #208]	; (800580c <HAL_TIM_IC_Start_DMA+0x330>)
 800573a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	4a33      	ldr	r2, [pc, #204]	; (8005810 <HAL_TIM_IC_Start_DMA+0x334>)
 8005742:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3340      	adds	r3, #64	; 0x40
 800574e:	4619      	mov	r1, r3
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	887b      	ldrh	r3, [r7, #2]
 8005754:	f7fe f9be 	bl	8003ad4 <HAL_DMA_Start_IT>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e04e      	b.n	8005800 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005770:	60da      	str	r2, [r3, #12]
      break;
 8005772:	e002      	b.n	800577a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	75fb      	strb	r3, [r7, #23]
      break;
 8005778:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a25      	ldr	r2, [pc, #148]	; (8005814 <HAL_TIM_IC_Start_DMA+0x338>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d022      	beq.n	80057ca <HAL_TIM_IC_Start_DMA+0x2ee>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578c:	d01d      	beq.n	80057ca <HAL_TIM_IC_Start_DMA+0x2ee>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a21      	ldr	r2, [pc, #132]	; (8005818 <HAL_TIM_IC_Start_DMA+0x33c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d018      	beq.n	80057ca <HAL_TIM_IC_Start_DMA+0x2ee>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1f      	ldr	r2, [pc, #124]	; (800581c <HAL_TIM_IC_Start_DMA+0x340>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <HAL_TIM_IC_Start_DMA+0x2ee>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1e      	ldr	r2, [pc, #120]	; (8005820 <HAL_TIM_IC_Start_DMA+0x344>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00e      	beq.n	80057ca <HAL_TIM_IC_Start_DMA+0x2ee>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1c      	ldr	r2, [pc, #112]	; (8005824 <HAL_TIM_IC_Start_DMA+0x348>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d009      	beq.n	80057ca <HAL_TIM_IC_Start_DMA+0x2ee>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <HAL_TIM_IC_Start_DMA+0x34c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d004      	beq.n	80057ca <HAL_TIM_IC_Start_DMA+0x2ee>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a19      	ldr	r2, [pc, #100]	; (800582c <HAL_TIM_IC_Start_DMA+0x350>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d111      	bne.n	80057ee <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b06      	cmp	r3, #6
 80057da:	d010      	beq.n	80057fe <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ec:	e007      	b.n	80057fe <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0201 	orr.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	080060e1 	.word	0x080060e1
 800580c:	080061a9 	.word	0x080061a9
 8005810:	0800604f 	.word	0x0800604f
 8005814:	40010000 	.word	0x40010000
 8005818:	40000400 	.word	0x40000400
 800581c:	40000800 	.word	0x40000800
 8005820:	40000c00 	.word	0x40000c00
 8005824:	40010400 	.word	0x40010400
 8005828:	40014000 	.word	0x40014000
 800582c:	40001800 	.word	0x40001800

08005830 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e097      	b.n	8005974 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d106      	bne.n	800585e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7fc ffe5 	bl	8002828 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6812      	ldr	r2, [r2, #0]
 8005870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005874:	f023 0307 	bic.w	r3, r3, #7
 8005878:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3304      	adds	r3, #4
 8005882:	4619      	mov	r1, r3
 8005884:	4610      	mov	r0, r2
 8005886:	f000 fcc3 	bl	8006210 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b2:	f023 0303 	bic.w	r3, r3, #3
 80058b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	4313      	orrs	r3, r2
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80058d0:	f023 030c 	bic.w	r3, r3, #12
 80058d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	4313      	orrs	r3, r2
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	011a      	lsls	r2, r3, #4
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	031b      	lsls	r3, r3, #12
 8005900:	4313      	orrs	r3, r2
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800590e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005916:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	4313      	orrs	r3, r2
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b02      	cmp	r3, #2
 8005990:	d122      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b02      	cmp	r3, #2
 800599e:	d11b      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0202 	mvn.w	r2, #2
 80059a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fc fccc 	bl	800235c <HAL_TIM_IC_CaptureCallback>
 80059c4:	e005      	b.n	80059d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fb0f 	bl	8005fea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fb20 	bl	8006012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d122      	bne.n	8005a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d11b      	bne.n	8005a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f06f 0204 	mvn.w	r2, #4
 80059fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2202      	movs	r2, #2
 8005a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fc fca2 	bl	800235c <HAL_TIM_IC_CaptureCallback>
 8005a18:	e005      	b.n	8005a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fae5 	bl	8005fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 faf6 	bl	8006012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d122      	bne.n	8005a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d11b      	bne.n	8005a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0208 	mvn.w	r2, #8
 8005a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2204      	movs	r2, #4
 8005a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fc fc78 	bl	800235c <HAL_TIM_IC_CaptureCallback>
 8005a6c:	e005      	b.n	8005a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fabb 	bl	8005fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 facc 	bl	8006012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0310 	and.w	r3, r3, #16
 8005a8a:	2b10      	cmp	r3, #16
 8005a8c:	d122      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b10      	cmp	r3, #16
 8005a9a:	d11b      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0210 	mvn.w	r2, #16
 8005aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fc fc4e 	bl	800235c <HAL_TIM_IC_CaptureCallback>
 8005ac0:	e005      	b.n	8005ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fa91 	bl	8005fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 faa2 	bl	8006012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d10e      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d107      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f06f 0201 	mvn.w	r2, #1
 8005af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fa6b 	bl	8005fd6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b80      	cmp	r3, #128	; 0x80
 8005b0c:	d10e      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b18:	2b80      	cmp	r3, #128	; 0x80
 8005b1a:	d107      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 f884 	bl	8006c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b36:	2b40      	cmp	r3, #64	; 0x40
 8005b38:	d10e      	bne.n	8005b58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	d107      	bne.n	8005b58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fa67 	bl	8006026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d10e      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d107      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0220 	mvn.w	r2, #32
 8005b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f001 f84e 	bl	8006c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b84:	bf00      	nop
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <HAL_TIM_IC_ConfigChannel+0x1e>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e088      	b.n	8005cbc <HAL_TIM_IC_ConfigChannel+0x130>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d11b      	bne.n	8005bf0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6818      	ldr	r0, [r3, #0]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	6819      	ldr	r1, [r3, #0]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f000 fd72 	bl	80066b0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 020c 	bic.w	r2, r2, #12
 8005bda:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6999      	ldr	r1, [r3, #24]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	619a      	str	r2, [r3, #24]
 8005bee:	e060      	b.n	8005cb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d11c      	bne.n	8005c30 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	6819      	ldr	r1, [r3, #0]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f000 fdf6 	bl	80067f6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	699a      	ldr	r2, [r3, #24]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c18:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6999      	ldr	r1, [r3, #24]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	021a      	lsls	r2, r3, #8
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	619a      	str	r2, [r3, #24]
 8005c2e:	e040      	b.n	8005cb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d11b      	bne.n	8005c6e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	6819      	ldr	r1, [r3, #0]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f000 fe43 	bl	80068d0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 020c 	bic.w	r2, r2, #12
 8005c58:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69d9      	ldr	r1, [r3, #28]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	61da      	str	r2, [r3, #28]
 8005c6c:	e021      	b.n	8005cb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b0c      	cmp	r3, #12
 8005c72:	d11c      	bne.n	8005cae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6819      	ldr	r1, [r3, #0]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f000 fe60 	bl	8006948 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	69da      	ldr	r2, [r3, #28]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c96:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	69d9      	ldr	r1, [r3, #28]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	021a      	lsls	r2, r3, #8
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	61da      	str	r2, [r3, #28]
 8005cac:	e001      	b.n	8005cb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e0ae      	b.n	8005e40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b0c      	cmp	r3, #12
 8005cee:	f200 809f 	bhi.w	8005e30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005cf2:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d2d 	.word	0x08005d2d
 8005cfc:	08005e31 	.word	0x08005e31
 8005d00:	08005e31 	.word	0x08005e31
 8005d04:	08005e31 	.word	0x08005e31
 8005d08:	08005d6d 	.word	0x08005d6d
 8005d0c:	08005e31 	.word	0x08005e31
 8005d10:	08005e31 	.word	0x08005e31
 8005d14:	08005e31 	.word	0x08005e31
 8005d18:	08005daf 	.word	0x08005daf
 8005d1c:	08005e31 	.word	0x08005e31
 8005d20:	08005e31 	.word	0x08005e31
 8005d24:	08005e31 	.word	0x08005e31
 8005d28:	08005def 	.word	0x08005def
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fb0c 	bl	8006350 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699a      	ldr	r2, [r3, #24]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0208 	orr.w	r2, r2, #8
 8005d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0204 	bic.w	r2, r2, #4
 8005d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6999      	ldr	r1, [r3, #24]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	691a      	ldr	r2, [r3, #16]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	619a      	str	r2, [r3, #24]
      break;
 8005d6a:	e064      	b.n	8005e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fb5c 	bl	8006430 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6999      	ldr	r1, [r3, #24]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	021a      	lsls	r2, r3, #8
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	619a      	str	r2, [r3, #24]
      break;
 8005dac:	e043      	b.n	8005e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68b9      	ldr	r1, [r7, #8]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fbb1 	bl	800651c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f042 0208 	orr.w	r2, r2, #8
 8005dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0204 	bic.w	r2, r2, #4
 8005dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69d9      	ldr	r1, [r3, #28]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	61da      	str	r2, [r3, #28]
      break;
 8005dec:	e023      	b.n	8005e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68b9      	ldr	r1, [r7, #8]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 fc05 	bl	8006604 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69da      	ldr	r2, [r3, #28]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69d9      	ldr	r1, [r3, #28]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	021a      	lsls	r2, r3, #8
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	61da      	str	r2, [r3, #28]
      break;
 8005e2e:	e002      	b.n	8005e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	75fb      	strb	r3, [r7, #23]
      break;
 8005e34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_TIM_ConfigClockSource+0x1c>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e0b4      	b.n	8005fce <HAL_TIM_ConfigClockSource+0x186>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e9c:	d03e      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0xd4>
 8005e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea2:	f200 8087 	bhi.w	8005fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eaa:	f000 8086 	beq.w	8005fba <HAL_TIM_ConfigClockSource+0x172>
 8005eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb2:	d87f      	bhi.n	8005fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb4:	2b70      	cmp	r3, #112	; 0x70
 8005eb6:	d01a      	beq.n	8005eee <HAL_TIM_ConfigClockSource+0xa6>
 8005eb8:	2b70      	cmp	r3, #112	; 0x70
 8005eba:	d87b      	bhi.n	8005fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ebc:	2b60      	cmp	r3, #96	; 0x60
 8005ebe:	d050      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0x11a>
 8005ec0:	2b60      	cmp	r3, #96	; 0x60
 8005ec2:	d877      	bhi.n	8005fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec4:	2b50      	cmp	r3, #80	; 0x50
 8005ec6:	d03c      	beq.n	8005f42 <HAL_TIM_ConfigClockSource+0xfa>
 8005ec8:	2b50      	cmp	r3, #80	; 0x50
 8005eca:	d873      	bhi.n	8005fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d058      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x13a>
 8005ed0:	2b40      	cmp	r3, #64	; 0x40
 8005ed2:	d86f      	bhi.n	8005fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed4:	2b30      	cmp	r3, #48	; 0x30
 8005ed6:	d064      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ed8:	2b30      	cmp	r3, #48	; 0x30
 8005eda:	d86b      	bhi.n	8005fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d060      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ee0:	2b20      	cmp	r3, #32
 8005ee2:	d867      	bhi.n	8005fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d05c      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ee8:	2b10      	cmp	r3, #16
 8005eea:	d05a      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8005eec:	e062      	b.n	8005fb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6899      	ldr	r1, [r3, #8]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f000 fd7b 	bl	80069f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	609a      	str	r2, [r3, #8]
      break;
 8005f1a:	e04f      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	6899      	ldr	r1, [r3, #8]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f000 fd64 	bl	80069f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f3e:	609a      	str	r2, [r3, #8]
      break;
 8005f40:	e03c      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6859      	ldr	r1, [r3, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f000 fc22 	bl	8006798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2150      	movs	r1, #80	; 0x50
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 fd31 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8005f60:	e02c      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6859      	ldr	r1, [r3, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f000 fc7e 	bl	8006870 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2160      	movs	r1, #96	; 0x60
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fd21 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8005f80:	e01c      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f000 fc02 	bl	8006798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2140      	movs	r1, #64	; 0x40
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fd11 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8005fa0:	e00c      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4619      	mov	r1, r3
 8005fac:	4610      	mov	r0, r2
 8005fae:	f000 fd08 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8005fb2:	e003      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fb8:	e000      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	429a      	cmp	r2, r3
 8006064:	d107      	bne.n	8006076 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006074:	e02a      	b.n	80060cc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	429a      	cmp	r2, r3
 800607e:	d107      	bne.n	8006090 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2202      	movs	r2, #2
 8006084:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800608e:	e01d      	b.n	80060cc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	429a      	cmp	r2, r3
 8006098:	d107      	bne.n	80060aa <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2204      	movs	r2, #4
 800609e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060a8:	e010      	b.n	80060cc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d107      	bne.n	80060c4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2208      	movs	r2, #8
 80060b8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060c2:	e003      	b.n	80060cc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f7ff ffb4 	bl	800603a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	771a      	strb	r2, [r3, #28]
}
 80060d8:	bf00      	nop
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d10f      	bne.n	8006118 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2201      	movs	r2, #1
 80060fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d146      	bne.n	8006194 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006116:	e03d      	b.n	8006194 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	429a      	cmp	r2, r3
 8006120:	d10f      	bne.n	8006142 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2202      	movs	r2, #2
 8006126:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d131      	bne.n	8006194 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006140:	e028      	b.n	8006194 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	429a      	cmp	r2, r3
 800614a:	d10f      	bne.n	800616c <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2204      	movs	r2, #4
 8006150:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d11c      	bne.n	8006194 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800616a:	e013      	b.n	8006194 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	429a      	cmp	r2, r3
 8006174:	d10e      	bne.n	8006194 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2208      	movs	r2, #8
 800617a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d107      	bne.n	8006194 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7fc f8e1 	bl	800235c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	771a      	strb	r2, [r3, #28]
}
 80061a0:	bf00      	nop
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d103      	bne.n	80061c8 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	771a      	strb	r2, [r3, #28]
 80061c6:	e019      	b.n	80061fc <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d103      	bne.n	80061da <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2202      	movs	r2, #2
 80061d6:	771a      	strb	r2, [r3, #28]
 80061d8:	e010      	b.n	80061fc <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d103      	bne.n	80061ec <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2204      	movs	r2, #4
 80061e8:	771a      	strb	r2, [r3, #28]
 80061ea:	e007      	b.n	80061fc <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d102      	bne.n	80061fc <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2208      	movs	r2, #8
 80061fa:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7ff fefe 	bl	8005ffe <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	771a      	strb	r2, [r3, #28]
}
 8006208:	bf00      	nop
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a40      	ldr	r2, [pc, #256]	; (8006324 <TIM_Base_SetConfig+0x114>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d013      	beq.n	8006250 <TIM_Base_SetConfig+0x40>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622e:	d00f      	beq.n	8006250 <TIM_Base_SetConfig+0x40>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a3d      	ldr	r2, [pc, #244]	; (8006328 <TIM_Base_SetConfig+0x118>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00b      	beq.n	8006250 <TIM_Base_SetConfig+0x40>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a3c      	ldr	r2, [pc, #240]	; (800632c <TIM_Base_SetConfig+0x11c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d007      	beq.n	8006250 <TIM_Base_SetConfig+0x40>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a3b      	ldr	r2, [pc, #236]	; (8006330 <TIM_Base_SetConfig+0x120>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d003      	beq.n	8006250 <TIM_Base_SetConfig+0x40>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a3a      	ldr	r2, [pc, #232]	; (8006334 <TIM_Base_SetConfig+0x124>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d108      	bne.n	8006262 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a2f      	ldr	r2, [pc, #188]	; (8006324 <TIM_Base_SetConfig+0x114>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d02b      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006270:	d027      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a2c      	ldr	r2, [pc, #176]	; (8006328 <TIM_Base_SetConfig+0x118>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d023      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a2b      	ldr	r2, [pc, #172]	; (800632c <TIM_Base_SetConfig+0x11c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d01f      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a2a      	ldr	r2, [pc, #168]	; (8006330 <TIM_Base_SetConfig+0x120>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d01b      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a29      	ldr	r2, [pc, #164]	; (8006334 <TIM_Base_SetConfig+0x124>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d017      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a28      	ldr	r2, [pc, #160]	; (8006338 <TIM_Base_SetConfig+0x128>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a27      	ldr	r2, [pc, #156]	; (800633c <TIM_Base_SetConfig+0x12c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00f      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a26      	ldr	r2, [pc, #152]	; (8006340 <TIM_Base_SetConfig+0x130>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00b      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a25      	ldr	r2, [pc, #148]	; (8006344 <TIM_Base_SetConfig+0x134>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d007      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a24      	ldr	r2, [pc, #144]	; (8006348 <TIM_Base_SetConfig+0x138>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d003      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a23      	ldr	r2, [pc, #140]	; (800634c <TIM_Base_SetConfig+0x13c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d108      	bne.n	80062d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a0a      	ldr	r2, [pc, #40]	; (8006324 <TIM_Base_SetConfig+0x114>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <TIM_Base_SetConfig+0xf8>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a0c      	ldr	r2, [pc, #48]	; (8006334 <TIM_Base_SetConfig+0x124>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d103      	bne.n	8006310 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	615a      	str	r2, [r3, #20]
}
 8006316:	bf00      	nop
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40010000 	.word	0x40010000
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800
 8006330:	40000c00 	.word	0x40000c00
 8006334:	40010400 	.word	0x40010400
 8006338:	40014000 	.word	0x40014000
 800633c:	40014400 	.word	0x40014400
 8006340:	40014800 	.word	0x40014800
 8006344:	40001800 	.word	0x40001800
 8006348:	40001c00 	.word	0x40001c00
 800634c:	40002000 	.word	0x40002000

08006350 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	f023 0201 	bic.w	r2, r3, #1
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f023 0302 	bic.w	r3, r3, #2
 8006398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a20      	ldr	r2, [pc, #128]	; (8006428 <TIM_OC1_SetConfig+0xd8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d003      	beq.n	80063b4 <TIM_OC1_SetConfig+0x64>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a1f      	ldr	r2, [pc, #124]	; (800642c <TIM_OC1_SetConfig+0xdc>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d10c      	bne.n	80063ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f023 0308 	bic.w	r3, r3, #8
 80063ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f023 0304 	bic.w	r3, r3, #4
 80063cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a15      	ldr	r2, [pc, #84]	; (8006428 <TIM_OC1_SetConfig+0xd8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d003      	beq.n	80063de <TIM_OC1_SetConfig+0x8e>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a14      	ldr	r2, [pc, #80]	; (800642c <TIM_OC1_SetConfig+0xdc>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d111      	bne.n	8006402 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	621a      	str	r2, [r3, #32]
}
 800641c:	bf00      	nop
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	40010000 	.word	0x40010000
 800642c:	40010400 	.word	0x40010400

08006430 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	f023 0210 	bic.w	r2, r3, #16
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800645e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	4313      	orrs	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f023 0320 	bic.w	r3, r3, #32
 800647a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a22      	ldr	r2, [pc, #136]	; (8006514 <TIM_OC2_SetConfig+0xe4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d003      	beq.n	8006498 <TIM_OC2_SetConfig+0x68>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a21      	ldr	r2, [pc, #132]	; (8006518 <TIM_OC2_SetConfig+0xe8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d10d      	bne.n	80064b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800649e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a17      	ldr	r2, [pc, #92]	; (8006514 <TIM_OC2_SetConfig+0xe4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_OC2_SetConfig+0x94>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a16      	ldr	r2, [pc, #88]	; (8006518 <TIM_OC2_SetConfig+0xe8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d113      	bne.n	80064ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	621a      	str	r2, [r3, #32]
}
 8006506:	bf00      	nop
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40010000 	.word	0x40010000
 8006518:	40010400 	.word	0x40010400

0800651c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0303 	bic.w	r3, r3, #3
 8006552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a21      	ldr	r2, [pc, #132]	; (80065fc <TIM_OC3_SetConfig+0xe0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d003      	beq.n	8006582 <TIM_OC3_SetConfig+0x66>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a20      	ldr	r2, [pc, #128]	; (8006600 <TIM_OC3_SetConfig+0xe4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d10d      	bne.n	800659e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800659c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a16      	ldr	r2, [pc, #88]	; (80065fc <TIM_OC3_SetConfig+0xe0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d003      	beq.n	80065ae <TIM_OC3_SetConfig+0x92>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a15      	ldr	r2, [pc, #84]	; (8006600 <TIM_OC3_SetConfig+0xe4>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d113      	bne.n	80065d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	011b      	lsls	r3, r3, #4
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	621a      	str	r2, [r3, #32]
}
 80065f0:	bf00      	nop
 80065f2:	371c      	adds	r7, #28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	40010000 	.word	0x40010000
 8006600:	40010400 	.word	0x40010400

08006604 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800663a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800664e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	031b      	lsls	r3, r3, #12
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	4313      	orrs	r3, r2
 800665a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a12      	ldr	r2, [pc, #72]	; (80066a8 <TIM_OC4_SetConfig+0xa4>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_OC4_SetConfig+0x68>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a11      	ldr	r2, [pc, #68]	; (80066ac <TIM_OC4_SetConfig+0xa8>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d109      	bne.n	8006680 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	019b      	lsls	r3, r3, #6
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	621a      	str	r2, [r3, #32]
}
 800669a:	bf00      	nop
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	40010000 	.word	0x40010000
 80066ac:	40010400 	.word	0x40010400

080066b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	f023 0201 	bic.w	r2, r3, #1
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4a28      	ldr	r2, [pc, #160]	; (800677c <TIM_TI1_SetConfig+0xcc>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d01b      	beq.n	8006716 <TIM_TI1_SetConfig+0x66>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e4:	d017      	beq.n	8006716 <TIM_TI1_SetConfig+0x66>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4a25      	ldr	r2, [pc, #148]	; (8006780 <TIM_TI1_SetConfig+0xd0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d013      	beq.n	8006716 <TIM_TI1_SetConfig+0x66>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4a24      	ldr	r2, [pc, #144]	; (8006784 <TIM_TI1_SetConfig+0xd4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00f      	beq.n	8006716 <TIM_TI1_SetConfig+0x66>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4a23      	ldr	r2, [pc, #140]	; (8006788 <TIM_TI1_SetConfig+0xd8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00b      	beq.n	8006716 <TIM_TI1_SetConfig+0x66>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4a22      	ldr	r2, [pc, #136]	; (800678c <TIM_TI1_SetConfig+0xdc>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d007      	beq.n	8006716 <TIM_TI1_SetConfig+0x66>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4a21      	ldr	r2, [pc, #132]	; (8006790 <TIM_TI1_SetConfig+0xe0>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <TIM_TI1_SetConfig+0x66>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4a20      	ldr	r2, [pc, #128]	; (8006794 <TIM_TI1_SetConfig+0xe4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d101      	bne.n	800671a <TIM_TI1_SetConfig+0x6a>
 8006716:	2301      	movs	r3, #1
 8006718:	e000      	b.n	800671c <TIM_TI1_SetConfig+0x6c>
 800671a:	2300      	movs	r3, #0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d008      	beq.n	8006732 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f023 0303 	bic.w	r3, r3, #3
 8006726:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4313      	orrs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	e003      	b.n	800673a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f043 0301 	orr.w	r3, r3, #1
 8006738:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006740:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	b2db      	uxtb	r3, r3
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f023 030a 	bic.w	r3, r3, #10
 8006754:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f003 030a 	and.w	r3, r3, #10
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40010000 	.word	0x40010000
 8006780:	40000400 	.word	0x40000400
 8006784:	40000800 	.word	0x40000800
 8006788:	40000c00 	.word	0x40000c00
 800678c:	40010400 	.word	0x40010400
 8006790:	40014000 	.word	0x40014000
 8006794:	40001800 	.word	0x40001800

08006798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	f023 0201 	bic.w	r2, r3, #1
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f023 030a 	bic.w	r3, r3, #10
 80067d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	621a      	str	r2, [r3, #32]
}
 80067ea:	bf00      	nop
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b087      	sub	sp, #28
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	60f8      	str	r0, [r7, #12]
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	607a      	str	r2, [r7, #4]
 8006802:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	f023 0210 	bic.w	r2, r3, #16
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006822:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	021b      	lsls	r3, r3, #8
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006834:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	031b      	lsls	r3, r3, #12
 800683a:	b29b      	uxth	r3, r3
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006848:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	621a      	str	r2, [r3, #32]
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	f023 0210 	bic.w	r2, r3, #16
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800689a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	031b      	lsls	r3, r3, #12
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	621a      	str	r2, [r3, #32]
}
 80068c4:	bf00      	nop
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f023 0303 	bic.w	r3, r3, #3
 80068fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4313      	orrs	r3, r2
 8006904:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800690c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	b2db      	uxtb	r3, r3
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006920:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	621a      	str	r2, [r3, #32]
}
 800693c:	bf00      	nop
 800693e:	371c      	adds	r7, #28
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006974:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	4313      	orrs	r3, r2
 800697e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006986:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	031b      	lsls	r3, r3, #12
 800698c:	b29b      	uxth	r3, r3
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800699a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	031b      	lsls	r3, r3, #12
 80069a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	621a      	str	r2, [r3, #32]
}
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	f043 0307 	orr.w	r3, r3, #7
 80069e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	609a      	str	r2, [r3, #8]
}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	021a      	lsls	r2, r3, #8
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	609a      	str	r2, [r3, #8]
}
 8006a2c:	bf00      	nop
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f003 031f 	and.w	r3, r3, #31
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1a      	ldr	r2, [r3, #32]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	401a      	ands	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a1a      	ldr	r2, [r3, #32]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a70:	431a      	orrs	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	621a      	str	r2, [r3, #32]
}
 8006a76:	bf00      	nop
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
	...

08006a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d101      	bne.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e05a      	b.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a21      	ldr	r2, [pc, #132]	; (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d022      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae8:	d01d      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a1d      	ldr	r2, [pc, #116]	; (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d018      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d013      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a1a      	ldr	r2, [pc, #104]	; (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d00e      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a18      	ldr	r2, [pc, #96]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d009      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a17      	ldr	r2, [pc, #92]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d004      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a15      	ldr	r2, [pc, #84]	; (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d10c      	bne.n	8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40000400 	.word	0x40000400
 8006b68:	40000800 	.word	0x40000800
 8006b6c:	40000c00 	.word	0x40000c00
 8006b70:	40010400 	.word	0x40010400
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40001800 	.word	0x40001800

08006b7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e03d      	b.n	8006c14 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e03f      	b.n	8006cda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fb fea8 	bl	80029c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2224      	movs	r2, #36	; 0x24
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f9cb 	bl	8007028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	691a      	ldr	r2, [r3, #16]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	695a      	ldr	r2, [r3, #20]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b08a      	sub	sp, #40	; 0x28
 8006ce6:	af02      	add	r7, sp, #8
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	603b      	str	r3, [r7, #0]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	d17c      	bne.n	8006dfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <HAL_UART_Transmit+0x2c>
 8006d08:	88fb      	ldrh	r3, [r7, #6]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e075      	b.n	8006dfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d101      	bne.n	8006d20 <HAL_UART_Transmit+0x3e>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e06e      	b.n	8006dfe <HAL_UART_Transmit+0x11c>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2221      	movs	r2, #33	; 0x21
 8006d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d36:	f7fc f8f3 	bl	8002f20 <HAL_GetTick>
 8006d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	88fa      	ldrh	r2, [r7, #6]
 8006d40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	88fa      	ldrh	r2, [r7, #6]
 8006d46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d50:	d108      	bne.n	8006d64 <HAL_UART_Transmit+0x82>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d104      	bne.n	8006d64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	e003      	b.n	8006d6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006d74:	e02a      	b.n	8006dcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2180      	movs	r1, #128	; 0x80
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 f8e2 	bl	8006f4a <UART_WaitOnFlagUntilTimeout>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e036      	b.n	8006dfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10b      	bne.n	8006dae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006da4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	3302      	adds	r3, #2
 8006daa:	61bb      	str	r3, [r7, #24]
 8006dac:	e007      	b.n	8006dbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	781a      	ldrb	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1cf      	bne.n	8006d76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2140      	movs	r1, #64	; 0x40
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 f8b2 	bl	8006f4a <UART_WaitOnFlagUntilTimeout>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e006      	b.n	8006dfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e000      	b.n	8006dfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006dfc:	2302      	movs	r3, #2
  }
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3720      	adds	r7, #32
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b08a      	sub	sp, #40	; 0x28
 8006e0a:	af02      	add	r7, sp, #8
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	603b      	str	r3, [r7, #0]
 8006e12:	4613      	mov	r3, r2
 8006e14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	f040 808c 	bne.w	8006f40 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <HAL_UART_Receive+0x2e>
 8006e2e:	88fb      	ldrh	r3, [r7, #6]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e084      	b.n	8006f42 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d101      	bne.n	8006e46 <HAL_UART_Receive+0x40>
 8006e42:	2302      	movs	r3, #2
 8006e44:	e07d      	b.n	8006f42 <HAL_UART_Receive+0x13c>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2222      	movs	r2, #34	; 0x22
 8006e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e62:	f7fc f85d 	bl	8002f20 <HAL_GetTick>
 8006e66:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	88fa      	ldrh	r2, [r7, #6]
 8006e6c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	88fa      	ldrh	r2, [r7, #6]
 8006e72:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e7c:	d108      	bne.n	8006e90 <HAL_UART_Receive+0x8a>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d104      	bne.n	8006e90 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	61bb      	str	r3, [r7, #24]
 8006e8e:	e003      	b.n	8006e98 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e94:	2300      	movs	r3, #0
 8006e96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006ea0:	e043      	b.n	8006f2a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2120      	movs	r1, #32
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 f84c 	bl	8006f4a <UART_WaitOnFlagUntilTimeout>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e042      	b.n	8006f42 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10c      	bne.n	8006edc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	3302      	adds	r3, #2
 8006ed8:	61bb      	str	r3, [r7, #24]
 8006eda:	e01f      	b.n	8006f1c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee4:	d007      	beq.n	8006ef6 <HAL_UART_Receive+0xf0>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <HAL_UART_Receive+0xfe>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d106      	bne.n	8006f04 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	701a      	strb	r2, [r3, #0]
 8006f02:	e008      	b.n	8006f16 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	3b01      	subs	r3, #1
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1b6      	bne.n	8006ea2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	e000      	b.n	8006f42 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006f40:	2302      	movs	r3, #2
  }
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3720      	adds	r7, #32
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b090      	sub	sp, #64	; 0x40
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	603b      	str	r3, [r7, #0]
 8006f56:	4613      	mov	r3, r2
 8006f58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f5a:	e050      	b.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f62:	d04c      	beq.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d007      	beq.n	8006f7a <UART_WaitOnFlagUntilTimeout+0x30>
 8006f6a:	f7fb ffd9 	bl	8002f20 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d241      	bcs.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	330c      	adds	r3, #12
 8006f80:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	330c      	adds	r3, #12
 8006f98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f9a:	637a      	str	r2, [r7, #52]	; 0x34
 8006f9c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e5      	bne.n	8006f7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3314      	adds	r3, #20
 8006fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f023 0301 	bic.w	r3, r3, #1
 8006fc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3314      	adds	r3, #20
 8006fcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fce:	623a      	str	r2, [r7, #32]
 8006fd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	69f9      	ldr	r1, [r7, #28]
 8006fd4:	6a3a      	ldr	r2, [r7, #32]
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e5      	bne.n	8006fae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e00f      	b.n	800701e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	4013      	ands	r3, r2
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	429a      	cmp	r2, r3
 800700c:	bf0c      	ite	eq
 800700e:	2301      	moveq	r3, #1
 8007010:	2300      	movne	r3, #0
 8007012:	b2db      	uxtb	r3, r3
 8007014:	461a      	mov	r2, r3
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	429a      	cmp	r2, r3
 800701a:	d09f      	beq.n	8006f5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3740      	adds	r7, #64	; 0x40
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800702c:	b0c0      	sub	sp, #256	; 0x100
 800702e:	af00      	add	r7, sp, #0
 8007030:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007044:	68d9      	ldr	r1, [r3, #12]
 8007046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	ea40 0301 	orr.w	r3, r0, r1
 8007050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	431a      	orrs	r2, r3
 8007060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	431a      	orrs	r2, r3
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	4313      	orrs	r3, r2
 8007070:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007080:	f021 010c 	bic.w	r1, r1, #12
 8007084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800708e:	430b      	orrs	r3, r1
 8007090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800709e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a2:	6999      	ldr	r1, [r3, #24]
 80070a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	ea40 0301 	orr.w	r3, r0, r1
 80070ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	4b8f      	ldr	r3, [pc, #572]	; (80072f4 <UART_SetConfig+0x2cc>)
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d005      	beq.n	80070c8 <UART_SetConfig+0xa0>
 80070bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4b8d      	ldr	r3, [pc, #564]	; (80072f8 <UART_SetConfig+0x2d0>)
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d104      	bne.n	80070d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070c8:	f7fd fafc 	bl	80046c4 <HAL_RCC_GetPCLK2Freq>
 80070cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80070d0:	e003      	b.n	80070da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070d2:	f7fd fae3 	bl	800469c <HAL_RCC_GetPCLK1Freq>
 80070d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e4:	f040 810c 	bne.w	8007300 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070ec:	2200      	movs	r2, #0
 80070ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80070f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80070fa:	4622      	mov	r2, r4
 80070fc:	462b      	mov	r3, r5
 80070fe:	1891      	adds	r1, r2, r2
 8007100:	65b9      	str	r1, [r7, #88]	; 0x58
 8007102:	415b      	adcs	r3, r3
 8007104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800710a:	4621      	mov	r1, r4
 800710c:	eb12 0801 	adds.w	r8, r2, r1
 8007110:	4629      	mov	r1, r5
 8007112:	eb43 0901 	adc.w	r9, r3, r1
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	f04f 0300 	mov.w	r3, #0
 800711e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800712a:	4690      	mov	r8, r2
 800712c:	4699      	mov	r9, r3
 800712e:	4623      	mov	r3, r4
 8007130:	eb18 0303 	adds.w	r3, r8, r3
 8007134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007138:	462b      	mov	r3, r5
 800713a:	eb49 0303 	adc.w	r3, r9, r3
 800713e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800714e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007152:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007156:	460b      	mov	r3, r1
 8007158:	18db      	adds	r3, r3, r3
 800715a:	653b      	str	r3, [r7, #80]	; 0x50
 800715c:	4613      	mov	r3, r2
 800715e:	eb42 0303 	adc.w	r3, r2, r3
 8007162:	657b      	str	r3, [r7, #84]	; 0x54
 8007164:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800716c:	f7f9 fdac 	bl	8000cc8 <__aeabi_uldivmod>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4b61      	ldr	r3, [pc, #388]	; (80072fc <UART_SetConfig+0x2d4>)
 8007176:	fba3 2302 	umull	r2, r3, r3, r2
 800717a:	095b      	lsrs	r3, r3, #5
 800717c:	011c      	lsls	r4, r3, #4
 800717e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007182:	2200      	movs	r2, #0
 8007184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007188:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800718c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007190:	4642      	mov	r2, r8
 8007192:	464b      	mov	r3, r9
 8007194:	1891      	adds	r1, r2, r2
 8007196:	64b9      	str	r1, [r7, #72]	; 0x48
 8007198:	415b      	adcs	r3, r3
 800719a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800719c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071a0:	4641      	mov	r1, r8
 80071a2:	eb12 0a01 	adds.w	sl, r2, r1
 80071a6:	4649      	mov	r1, r9
 80071a8:	eb43 0b01 	adc.w	fp, r3, r1
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	f04f 0300 	mov.w	r3, #0
 80071b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80071b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80071bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071c0:	4692      	mov	sl, r2
 80071c2:	469b      	mov	fp, r3
 80071c4:	4643      	mov	r3, r8
 80071c6:	eb1a 0303 	adds.w	r3, sl, r3
 80071ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071ce:	464b      	mov	r3, r9
 80071d0:	eb4b 0303 	adc.w	r3, fp, r3
 80071d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80071e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80071ec:	460b      	mov	r3, r1
 80071ee:	18db      	adds	r3, r3, r3
 80071f0:	643b      	str	r3, [r7, #64]	; 0x40
 80071f2:	4613      	mov	r3, r2
 80071f4:	eb42 0303 	adc.w	r3, r2, r3
 80071f8:	647b      	str	r3, [r7, #68]	; 0x44
 80071fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80071fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007202:	f7f9 fd61 	bl	8000cc8 <__aeabi_uldivmod>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4611      	mov	r1, r2
 800720c:	4b3b      	ldr	r3, [pc, #236]	; (80072fc <UART_SetConfig+0x2d4>)
 800720e:	fba3 2301 	umull	r2, r3, r3, r1
 8007212:	095b      	lsrs	r3, r3, #5
 8007214:	2264      	movs	r2, #100	; 0x64
 8007216:	fb02 f303 	mul.w	r3, r2, r3
 800721a:	1acb      	subs	r3, r1, r3
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007222:	4b36      	ldr	r3, [pc, #216]	; (80072fc <UART_SetConfig+0x2d4>)
 8007224:	fba3 2302 	umull	r2, r3, r3, r2
 8007228:	095b      	lsrs	r3, r3, #5
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007230:	441c      	add	r4, r3
 8007232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007236:	2200      	movs	r2, #0
 8007238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800723c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007240:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007244:	4642      	mov	r2, r8
 8007246:	464b      	mov	r3, r9
 8007248:	1891      	adds	r1, r2, r2
 800724a:	63b9      	str	r1, [r7, #56]	; 0x38
 800724c:	415b      	adcs	r3, r3
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007254:	4641      	mov	r1, r8
 8007256:	1851      	adds	r1, r2, r1
 8007258:	6339      	str	r1, [r7, #48]	; 0x30
 800725a:	4649      	mov	r1, r9
 800725c:	414b      	adcs	r3, r1
 800725e:	637b      	str	r3, [r7, #52]	; 0x34
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800726c:	4659      	mov	r1, fp
 800726e:	00cb      	lsls	r3, r1, #3
 8007270:	4651      	mov	r1, sl
 8007272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007276:	4651      	mov	r1, sl
 8007278:	00ca      	lsls	r2, r1, #3
 800727a:	4610      	mov	r0, r2
 800727c:	4619      	mov	r1, r3
 800727e:	4603      	mov	r3, r0
 8007280:	4642      	mov	r2, r8
 8007282:	189b      	adds	r3, r3, r2
 8007284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007288:	464b      	mov	r3, r9
 800728a:	460a      	mov	r2, r1
 800728c:	eb42 0303 	adc.w	r3, r2, r3
 8007290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80072a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80072a8:	460b      	mov	r3, r1
 80072aa:	18db      	adds	r3, r3, r3
 80072ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ae:	4613      	mov	r3, r2
 80072b0:	eb42 0303 	adc.w	r3, r2, r3
 80072b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80072be:	f7f9 fd03 	bl	8000cc8 <__aeabi_uldivmod>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <UART_SetConfig+0x2d4>)
 80072c8:	fba3 1302 	umull	r1, r3, r3, r2
 80072cc:	095b      	lsrs	r3, r3, #5
 80072ce:	2164      	movs	r1, #100	; 0x64
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	3332      	adds	r3, #50	; 0x32
 80072da:	4a08      	ldr	r2, [pc, #32]	; (80072fc <UART_SetConfig+0x2d4>)
 80072dc:	fba2 2303 	umull	r2, r3, r2, r3
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	f003 0207 	and.w	r2, r3, #7
 80072e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4422      	add	r2, r4
 80072ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072f0:	e105      	b.n	80074fe <UART_SetConfig+0x4d6>
 80072f2:	bf00      	nop
 80072f4:	40011000 	.word	0x40011000
 80072f8:	40011400 	.word	0x40011400
 80072fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007304:	2200      	movs	r2, #0
 8007306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800730a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800730e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007312:	4642      	mov	r2, r8
 8007314:	464b      	mov	r3, r9
 8007316:	1891      	adds	r1, r2, r2
 8007318:	6239      	str	r1, [r7, #32]
 800731a:	415b      	adcs	r3, r3
 800731c:	627b      	str	r3, [r7, #36]	; 0x24
 800731e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007322:	4641      	mov	r1, r8
 8007324:	1854      	adds	r4, r2, r1
 8007326:	4649      	mov	r1, r9
 8007328:	eb43 0501 	adc.w	r5, r3, r1
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	00eb      	lsls	r3, r5, #3
 8007336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800733a:	00e2      	lsls	r2, r4, #3
 800733c:	4614      	mov	r4, r2
 800733e:	461d      	mov	r5, r3
 8007340:	4643      	mov	r3, r8
 8007342:	18e3      	adds	r3, r4, r3
 8007344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007348:	464b      	mov	r3, r9
 800734a:	eb45 0303 	adc.w	r3, r5, r3
 800734e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800735e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007362:	f04f 0200 	mov.w	r2, #0
 8007366:	f04f 0300 	mov.w	r3, #0
 800736a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800736e:	4629      	mov	r1, r5
 8007370:	008b      	lsls	r3, r1, #2
 8007372:	4621      	mov	r1, r4
 8007374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007378:	4621      	mov	r1, r4
 800737a:	008a      	lsls	r2, r1, #2
 800737c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007380:	f7f9 fca2 	bl	8000cc8 <__aeabi_uldivmod>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4b60      	ldr	r3, [pc, #384]	; (800750c <UART_SetConfig+0x4e4>)
 800738a:	fba3 2302 	umull	r2, r3, r3, r2
 800738e:	095b      	lsrs	r3, r3, #5
 8007390:	011c      	lsls	r4, r3, #4
 8007392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007396:	2200      	movs	r2, #0
 8007398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800739c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80073a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80073a4:	4642      	mov	r2, r8
 80073a6:	464b      	mov	r3, r9
 80073a8:	1891      	adds	r1, r2, r2
 80073aa:	61b9      	str	r1, [r7, #24]
 80073ac:	415b      	adcs	r3, r3
 80073ae:	61fb      	str	r3, [r7, #28]
 80073b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073b4:	4641      	mov	r1, r8
 80073b6:	1851      	adds	r1, r2, r1
 80073b8:	6139      	str	r1, [r7, #16]
 80073ba:	4649      	mov	r1, r9
 80073bc:	414b      	adcs	r3, r1
 80073be:	617b      	str	r3, [r7, #20]
 80073c0:	f04f 0200 	mov.w	r2, #0
 80073c4:	f04f 0300 	mov.w	r3, #0
 80073c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073cc:	4659      	mov	r1, fp
 80073ce:	00cb      	lsls	r3, r1, #3
 80073d0:	4651      	mov	r1, sl
 80073d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073d6:	4651      	mov	r1, sl
 80073d8:	00ca      	lsls	r2, r1, #3
 80073da:	4610      	mov	r0, r2
 80073dc:	4619      	mov	r1, r3
 80073de:	4603      	mov	r3, r0
 80073e0:	4642      	mov	r2, r8
 80073e2:	189b      	adds	r3, r3, r2
 80073e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073e8:	464b      	mov	r3, r9
 80073ea:	460a      	mov	r2, r1
 80073ec:	eb42 0303 	adc.w	r3, r2, r3
 80073f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80073fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800740c:	4649      	mov	r1, r9
 800740e:	008b      	lsls	r3, r1, #2
 8007410:	4641      	mov	r1, r8
 8007412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007416:	4641      	mov	r1, r8
 8007418:	008a      	lsls	r2, r1, #2
 800741a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800741e:	f7f9 fc53 	bl	8000cc8 <__aeabi_uldivmod>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4b39      	ldr	r3, [pc, #228]	; (800750c <UART_SetConfig+0x4e4>)
 8007428:	fba3 1302 	umull	r1, r3, r3, r2
 800742c:	095b      	lsrs	r3, r3, #5
 800742e:	2164      	movs	r1, #100	; 0x64
 8007430:	fb01 f303 	mul.w	r3, r1, r3
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	011b      	lsls	r3, r3, #4
 8007438:	3332      	adds	r3, #50	; 0x32
 800743a:	4a34      	ldr	r2, [pc, #208]	; (800750c <UART_SetConfig+0x4e4>)
 800743c:	fba2 2303 	umull	r2, r3, r2, r3
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007446:	441c      	add	r4, r3
 8007448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800744c:	2200      	movs	r2, #0
 800744e:	673b      	str	r3, [r7, #112]	; 0x70
 8007450:	677a      	str	r2, [r7, #116]	; 0x74
 8007452:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007456:	4642      	mov	r2, r8
 8007458:	464b      	mov	r3, r9
 800745a:	1891      	adds	r1, r2, r2
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	415b      	adcs	r3, r3
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007466:	4641      	mov	r1, r8
 8007468:	1851      	adds	r1, r2, r1
 800746a:	6039      	str	r1, [r7, #0]
 800746c:	4649      	mov	r1, r9
 800746e:	414b      	adcs	r3, r1
 8007470:	607b      	str	r3, [r7, #4]
 8007472:	f04f 0200 	mov.w	r2, #0
 8007476:	f04f 0300 	mov.w	r3, #0
 800747a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800747e:	4659      	mov	r1, fp
 8007480:	00cb      	lsls	r3, r1, #3
 8007482:	4651      	mov	r1, sl
 8007484:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007488:	4651      	mov	r1, sl
 800748a:	00ca      	lsls	r2, r1, #3
 800748c:	4610      	mov	r0, r2
 800748e:	4619      	mov	r1, r3
 8007490:	4603      	mov	r3, r0
 8007492:	4642      	mov	r2, r8
 8007494:	189b      	adds	r3, r3, r2
 8007496:	66bb      	str	r3, [r7, #104]	; 0x68
 8007498:	464b      	mov	r3, r9
 800749a:	460a      	mov	r2, r1
 800749c:	eb42 0303 	adc.w	r3, r2, r3
 80074a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	663b      	str	r3, [r7, #96]	; 0x60
 80074ac:	667a      	str	r2, [r7, #100]	; 0x64
 80074ae:	f04f 0200 	mov.w	r2, #0
 80074b2:	f04f 0300 	mov.w	r3, #0
 80074b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80074ba:	4649      	mov	r1, r9
 80074bc:	008b      	lsls	r3, r1, #2
 80074be:	4641      	mov	r1, r8
 80074c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074c4:	4641      	mov	r1, r8
 80074c6:	008a      	lsls	r2, r1, #2
 80074c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80074cc:	f7f9 fbfc 	bl	8000cc8 <__aeabi_uldivmod>
 80074d0:	4602      	mov	r2, r0
 80074d2:	460b      	mov	r3, r1
 80074d4:	4b0d      	ldr	r3, [pc, #52]	; (800750c <UART_SetConfig+0x4e4>)
 80074d6:	fba3 1302 	umull	r1, r3, r3, r2
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	2164      	movs	r1, #100	; 0x64
 80074de:	fb01 f303 	mul.w	r3, r1, r3
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	3332      	adds	r3, #50	; 0x32
 80074e8:	4a08      	ldr	r2, [pc, #32]	; (800750c <UART_SetConfig+0x4e4>)
 80074ea:	fba2 2303 	umull	r2, r3, r2, r3
 80074ee:	095b      	lsrs	r3, r3, #5
 80074f0:	f003 020f 	and.w	r2, r3, #15
 80074f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4422      	add	r2, r4
 80074fc:	609a      	str	r2, [r3, #8]
}
 80074fe:	bf00      	nop
 8007500:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007504:	46bd      	mov	sp, r7
 8007506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800750a:	bf00      	nop
 800750c:	51eb851f 	.word	0x51eb851f

08007510 <__errno>:
 8007510:	4b01      	ldr	r3, [pc, #4]	; (8007518 <__errno+0x8>)
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	20000034 	.word	0x20000034

0800751c <__libc_init_array>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	4d0d      	ldr	r5, [pc, #52]	; (8007554 <__libc_init_array+0x38>)
 8007520:	4c0d      	ldr	r4, [pc, #52]	; (8007558 <__libc_init_array+0x3c>)
 8007522:	1b64      	subs	r4, r4, r5
 8007524:	10a4      	asrs	r4, r4, #2
 8007526:	2600      	movs	r6, #0
 8007528:	42a6      	cmp	r6, r4
 800752a:	d109      	bne.n	8007540 <__libc_init_array+0x24>
 800752c:	4d0b      	ldr	r5, [pc, #44]	; (800755c <__libc_init_array+0x40>)
 800752e:	4c0c      	ldr	r4, [pc, #48]	; (8007560 <__libc_init_array+0x44>)
 8007530:	f004 f950 	bl	800b7d4 <_init>
 8007534:	1b64      	subs	r4, r4, r5
 8007536:	10a4      	asrs	r4, r4, #2
 8007538:	2600      	movs	r6, #0
 800753a:	42a6      	cmp	r6, r4
 800753c:	d105      	bne.n	800754a <__libc_init_array+0x2e>
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	f855 3b04 	ldr.w	r3, [r5], #4
 8007544:	4798      	blx	r3
 8007546:	3601      	adds	r6, #1
 8007548:	e7ee      	b.n	8007528 <__libc_init_array+0xc>
 800754a:	f855 3b04 	ldr.w	r3, [r5], #4
 800754e:	4798      	blx	r3
 8007550:	3601      	adds	r6, #1
 8007552:	e7f2      	b.n	800753a <__libc_init_array+0x1e>
 8007554:	0800be60 	.word	0x0800be60
 8007558:	0800be60 	.word	0x0800be60
 800755c:	0800be60 	.word	0x0800be60
 8007560:	0800be64 	.word	0x0800be64

08007564 <memset>:
 8007564:	4402      	add	r2, r0
 8007566:	4603      	mov	r3, r0
 8007568:	4293      	cmp	r3, r2
 800756a:	d100      	bne.n	800756e <memset+0xa>
 800756c:	4770      	bx	lr
 800756e:	f803 1b01 	strb.w	r1, [r3], #1
 8007572:	e7f9      	b.n	8007568 <memset+0x4>

08007574 <__cvt>:
 8007574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007578:	ec55 4b10 	vmov	r4, r5, d0
 800757c:	2d00      	cmp	r5, #0
 800757e:	460e      	mov	r6, r1
 8007580:	4619      	mov	r1, r3
 8007582:	462b      	mov	r3, r5
 8007584:	bfbb      	ittet	lt
 8007586:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800758a:	461d      	movlt	r5, r3
 800758c:	2300      	movge	r3, #0
 800758e:	232d      	movlt	r3, #45	; 0x2d
 8007590:	700b      	strb	r3, [r1, #0]
 8007592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007594:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007598:	4691      	mov	r9, r2
 800759a:	f023 0820 	bic.w	r8, r3, #32
 800759e:	bfbc      	itt	lt
 80075a0:	4622      	movlt	r2, r4
 80075a2:	4614      	movlt	r4, r2
 80075a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075a8:	d005      	beq.n	80075b6 <__cvt+0x42>
 80075aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80075ae:	d100      	bne.n	80075b2 <__cvt+0x3e>
 80075b0:	3601      	adds	r6, #1
 80075b2:	2102      	movs	r1, #2
 80075b4:	e000      	b.n	80075b8 <__cvt+0x44>
 80075b6:	2103      	movs	r1, #3
 80075b8:	ab03      	add	r3, sp, #12
 80075ba:	9301      	str	r3, [sp, #4]
 80075bc:	ab02      	add	r3, sp, #8
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	ec45 4b10 	vmov	d0, r4, r5
 80075c4:	4653      	mov	r3, sl
 80075c6:	4632      	mov	r2, r6
 80075c8:	f000 fcea 	bl	8007fa0 <_dtoa_r>
 80075cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80075d0:	4607      	mov	r7, r0
 80075d2:	d102      	bne.n	80075da <__cvt+0x66>
 80075d4:	f019 0f01 	tst.w	r9, #1
 80075d8:	d022      	beq.n	8007620 <__cvt+0xac>
 80075da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075de:	eb07 0906 	add.w	r9, r7, r6
 80075e2:	d110      	bne.n	8007606 <__cvt+0x92>
 80075e4:	783b      	ldrb	r3, [r7, #0]
 80075e6:	2b30      	cmp	r3, #48	; 0x30
 80075e8:	d10a      	bne.n	8007600 <__cvt+0x8c>
 80075ea:	2200      	movs	r2, #0
 80075ec:	2300      	movs	r3, #0
 80075ee:	4620      	mov	r0, r4
 80075f0:	4629      	mov	r1, r5
 80075f2:	f7f9 fa89 	bl	8000b08 <__aeabi_dcmpeq>
 80075f6:	b918      	cbnz	r0, 8007600 <__cvt+0x8c>
 80075f8:	f1c6 0601 	rsb	r6, r6, #1
 80075fc:	f8ca 6000 	str.w	r6, [sl]
 8007600:	f8da 3000 	ldr.w	r3, [sl]
 8007604:	4499      	add	r9, r3
 8007606:	2200      	movs	r2, #0
 8007608:	2300      	movs	r3, #0
 800760a:	4620      	mov	r0, r4
 800760c:	4629      	mov	r1, r5
 800760e:	f7f9 fa7b 	bl	8000b08 <__aeabi_dcmpeq>
 8007612:	b108      	cbz	r0, 8007618 <__cvt+0xa4>
 8007614:	f8cd 900c 	str.w	r9, [sp, #12]
 8007618:	2230      	movs	r2, #48	; 0x30
 800761a:	9b03      	ldr	r3, [sp, #12]
 800761c:	454b      	cmp	r3, r9
 800761e:	d307      	bcc.n	8007630 <__cvt+0xbc>
 8007620:	9b03      	ldr	r3, [sp, #12]
 8007622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007624:	1bdb      	subs	r3, r3, r7
 8007626:	4638      	mov	r0, r7
 8007628:	6013      	str	r3, [r2, #0]
 800762a:	b004      	add	sp, #16
 800762c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007630:	1c59      	adds	r1, r3, #1
 8007632:	9103      	str	r1, [sp, #12]
 8007634:	701a      	strb	r2, [r3, #0]
 8007636:	e7f0      	b.n	800761a <__cvt+0xa6>

08007638 <__exponent>:
 8007638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800763a:	4603      	mov	r3, r0
 800763c:	2900      	cmp	r1, #0
 800763e:	bfb8      	it	lt
 8007640:	4249      	neglt	r1, r1
 8007642:	f803 2b02 	strb.w	r2, [r3], #2
 8007646:	bfb4      	ite	lt
 8007648:	222d      	movlt	r2, #45	; 0x2d
 800764a:	222b      	movge	r2, #43	; 0x2b
 800764c:	2909      	cmp	r1, #9
 800764e:	7042      	strb	r2, [r0, #1]
 8007650:	dd2a      	ble.n	80076a8 <__exponent+0x70>
 8007652:	f10d 0407 	add.w	r4, sp, #7
 8007656:	46a4      	mov	ip, r4
 8007658:	270a      	movs	r7, #10
 800765a:	46a6      	mov	lr, r4
 800765c:	460a      	mov	r2, r1
 800765e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007662:	fb07 1516 	mls	r5, r7, r6, r1
 8007666:	3530      	adds	r5, #48	; 0x30
 8007668:	2a63      	cmp	r2, #99	; 0x63
 800766a:	f104 34ff 	add.w	r4, r4, #4294967295
 800766e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007672:	4631      	mov	r1, r6
 8007674:	dcf1      	bgt.n	800765a <__exponent+0x22>
 8007676:	3130      	adds	r1, #48	; 0x30
 8007678:	f1ae 0502 	sub.w	r5, lr, #2
 800767c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007680:	1c44      	adds	r4, r0, #1
 8007682:	4629      	mov	r1, r5
 8007684:	4561      	cmp	r1, ip
 8007686:	d30a      	bcc.n	800769e <__exponent+0x66>
 8007688:	f10d 0209 	add.w	r2, sp, #9
 800768c:	eba2 020e 	sub.w	r2, r2, lr
 8007690:	4565      	cmp	r5, ip
 8007692:	bf88      	it	hi
 8007694:	2200      	movhi	r2, #0
 8007696:	4413      	add	r3, r2
 8007698:	1a18      	subs	r0, r3, r0
 800769a:	b003      	add	sp, #12
 800769c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800769e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80076a6:	e7ed      	b.n	8007684 <__exponent+0x4c>
 80076a8:	2330      	movs	r3, #48	; 0x30
 80076aa:	3130      	adds	r1, #48	; 0x30
 80076ac:	7083      	strb	r3, [r0, #2]
 80076ae:	70c1      	strb	r1, [r0, #3]
 80076b0:	1d03      	adds	r3, r0, #4
 80076b2:	e7f1      	b.n	8007698 <__exponent+0x60>

080076b4 <_printf_float>:
 80076b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b8:	ed2d 8b02 	vpush	{d8}
 80076bc:	b08d      	sub	sp, #52	; 0x34
 80076be:	460c      	mov	r4, r1
 80076c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80076c4:	4616      	mov	r6, r2
 80076c6:	461f      	mov	r7, r3
 80076c8:	4605      	mov	r5, r0
 80076ca:	f001 fa57 	bl	8008b7c <_localeconv_r>
 80076ce:	f8d0 a000 	ldr.w	sl, [r0]
 80076d2:	4650      	mov	r0, sl
 80076d4:	f7f8 fd9c 	bl	8000210 <strlen>
 80076d8:	2300      	movs	r3, #0
 80076da:	930a      	str	r3, [sp, #40]	; 0x28
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	9305      	str	r3, [sp, #20]
 80076e0:	f8d8 3000 	ldr.w	r3, [r8]
 80076e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80076e8:	3307      	adds	r3, #7
 80076ea:	f023 0307 	bic.w	r3, r3, #7
 80076ee:	f103 0208 	add.w	r2, r3, #8
 80076f2:	f8c8 2000 	str.w	r2, [r8]
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80076fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007702:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007706:	9307      	str	r3, [sp, #28]
 8007708:	f8cd 8018 	str.w	r8, [sp, #24]
 800770c:	ee08 0a10 	vmov	s16, r0
 8007710:	4b9f      	ldr	r3, [pc, #636]	; (8007990 <_printf_float+0x2dc>)
 8007712:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007716:	f04f 32ff 	mov.w	r2, #4294967295
 800771a:	f7f9 fa27 	bl	8000b6c <__aeabi_dcmpun>
 800771e:	bb88      	cbnz	r0, 8007784 <_printf_float+0xd0>
 8007720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007724:	4b9a      	ldr	r3, [pc, #616]	; (8007990 <_printf_float+0x2dc>)
 8007726:	f04f 32ff 	mov.w	r2, #4294967295
 800772a:	f7f9 fa01 	bl	8000b30 <__aeabi_dcmple>
 800772e:	bb48      	cbnz	r0, 8007784 <_printf_float+0xd0>
 8007730:	2200      	movs	r2, #0
 8007732:	2300      	movs	r3, #0
 8007734:	4640      	mov	r0, r8
 8007736:	4649      	mov	r1, r9
 8007738:	f7f9 f9f0 	bl	8000b1c <__aeabi_dcmplt>
 800773c:	b110      	cbz	r0, 8007744 <_printf_float+0x90>
 800773e:	232d      	movs	r3, #45	; 0x2d
 8007740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007744:	4b93      	ldr	r3, [pc, #588]	; (8007994 <_printf_float+0x2e0>)
 8007746:	4894      	ldr	r0, [pc, #592]	; (8007998 <_printf_float+0x2e4>)
 8007748:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800774c:	bf94      	ite	ls
 800774e:	4698      	movls	r8, r3
 8007750:	4680      	movhi	r8, r0
 8007752:	2303      	movs	r3, #3
 8007754:	6123      	str	r3, [r4, #16]
 8007756:	9b05      	ldr	r3, [sp, #20]
 8007758:	f023 0204 	bic.w	r2, r3, #4
 800775c:	6022      	str	r2, [r4, #0]
 800775e:	f04f 0900 	mov.w	r9, #0
 8007762:	9700      	str	r7, [sp, #0]
 8007764:	4633      	mov	r3, r6
 8007766:	aa0b      	add	r2, sp, #44	; 0x2c
 8007768:	4621      	mov	r1, r4
 800776a:	4628      	mov	r0, r5
 800776c:	f000 f9d8 	bl	8007b20 <_printf_common>
 8007770:	3001      	adds	r0, #1
 8007772:	f040 8090 	bne.w	8007896 <_printf_float+0x1e2>
 8007776:	f04f 30ff 	mov.w	r0, #4294967295
 800777a:	b00d      	add	sp, #52	; 0x34
 800777c:	ecbd 8b02 	vpop	{d8}
 8007780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007784:	4642      	mov	r2, r8
 8007786:	464b      	mov	r3, r9
 8007788:	4640      	mov	r0, r8
 800778a:	4649      	mov	r1, r9
 800778c:	f7f9 f9ee 	bl	8000b6c <__aeabi_dcmpun>
 8007790:	b140      	cbz	r0, 80077a4 <_printf_float+0xf0>
 8007792:	464b      	mov	r3, r9
 8007794:	2b00      	cmp	r3, #0
 8007796:	bfbc      	itt	lt
 8007798:	232d      	movlt	r3, #45	; 0x2d
 800779a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800779e:	487f      	ldr	r0, [pc, #508]	; (800799c <_printf_float+0x2e8>)
 80077a0:	4b7f      	ldr	r3, [pc, #508]	; (80079a0 <_printf_float+0x2ec>)
 80077a2:	e7d1      	b.n	8007748 <_printf_float+0x94>
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80077aa:	9206      	str	r2, [sp, #24]
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	d13f      	bne.n	8007830 <_printf_float+0x17c>
 80077b0:	2306      	movs	r3, #6
 80077b2:	6063      	str	r3, [r4, #4]
 80077b4:	9b05      	ldr	r3, [sp, #20]
 80077b6:	6861      	ldr	r1, [r4, #4]
 80077b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80077bc:	2300      	movs	r3, #0
 80077be:	9303      	str	r3, [sp, #12]
 80077c0:	ab0a      	add	r3, sp, #40	; 0x28
 80077c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80077c6:	ab09      	add	r3, sp, #36	; 0x24
 80077c8:	ec49 8b10 	vmov	d0, r8, r9
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	6022      	str	r2, [r4, #0]
 80077d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80077d4:	4628      	mov	r0, r5
 80077d6:	f7ff fecd 	bl	8007574 <__cvt>
 80077da:	9b06      	ldr	r3, [sp, #24]
 80077dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077de:	2b47      	cmp	r3, #71	; 0x47
 80077e0:	4680      	mov	r8, r0
 80077e2:	d108      	bne.n	80077f6 <_printf_float+0x142>
 80077e4:	1cc8      	adds	r0, r1, #3
 80077e6:	db02      	blt.n	80077ee <_printf_float+0x13a>
 80077e8:	6863      	ldr	r3, [r4, #4]
 80077ea:	4299      	cmp	r1, r3
 80077ec:	dd41      	ble.n	8007872 <_printf_float+0x1be>
 80077ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80077f2:	fa5f fb8b 	uxtb.w	fp, fp
 80077f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077fa:	d820      	bhi.n	800783e <_printf_float+0x18a>
 80077fc:	3901      	subs	r1, #1
 80077fe:	465a      	mov	r2, fp
 8007800:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007804:	9109      	str	r1, [sp, #36]	; 0x24
 8007806:	f7ff ff17 	bl	8007638 <__exponent>
 800780a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800780c:	1813      	adds	r3, r2, r0
 800780e:	2a01      	cmp	r2, #1
 8007810:	4681      	mov	r9, r0
 8007812:	6123      	str	r3, [r4, #16]
 8007814:	dc02      	bgt.n	800781c <_printf_float+0x168>
 8007816:	6822      	ldr	r2, [r4, #0]
 8007818:	07d2      	lsls	r2, r2, #31
 800781a:	d501      	bpl.n	8007820 <_printf_float+0x16c>
 800781c:	3301      	adds	r3, #1
 800781e:	6123      	str	r3, [r4, #16]
 8007820:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007824:	2b00      	cmp	r3, #0
 8007826:	d09c      	beq.n	8007762 <_printf_float+0xae>
 8007828:	232d      	movs	r3, #45	; 0x2d
 800782a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800782e:	e798      	b.n	8007762 <_printf_float+0xae>
 8007830:	9a06      	ldr	r2, [sp, #24]
 8007832:	2a47      	cmp	r2, #71	; 0x47
 8007834:	d1be      	bne.n	80077b4 <_printf_float+0x100>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1bc      	bne.n	80077b4 <_printf_float+0x100>
 800783a:	2301      	movs	r3, #1
 800783c:	e7b9      	b.n	80077b2 <_printf_float+0xfe>
 800783e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007842:	d118      	bne.n	8007876 <_printf_float+0x1c2>
 8007844:	2900      	cmp	r1, #0
 8007846:	6863      	ldr	r3, [r4, #4]
 8007848:	dd0b      	ble.n	8007862 <_printf_float+0x1ae>
 800784a:	6121      	str	r1, [r4, #16]
 800784c:	b913      	cbnz	r3, 8007854 <_printf_float+0x1a0>
 800784e:	6822      	ldr	r2, [r4, #0]
 8007850:	07d0      	lsls	r0, r2, #31
 8007852:	d502      	bpl.n	800785a <_printf_float+0x1a6>
 8007854:	3301      	adds	r3, #1
 8007856:	440b      	add	r3, r1
 8007858:	6123      	str	r3, [r4, #16]
 800785a:	65a1      	str	r1, [r4, #88]	; 0x58
 800785c:	f04f 0900 	mov.w	r9, #0
 8007860:	e7de      	b.n	8007820 <_printf_float+0x16c>
 8007862:	b913      	cbnz	r3, 800786a <_printf_float+0x1b6>
 8007864:	6822      	ldr	r2, [r4, #0]
 8007866:	07d2      	lsls	r2, r2, #31
 8007868:	d501      	bpl.n	800786e <_printf_float+0x1ba>
 800786a:	3302      	adds	r3, #2
 800786c:	e7f4      	b.n	8007858 <_printf_float+0x1a4>
 800786e:	2301      	movs	r3, #1
 8007870:	e7f2      	b.n	8007858 <_printf_float+0x1a4>
 8007872:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007878:	4299      	cmp	r1, r3
 800787a:	db05      	blt.n	8007888 <_printf_float+0x1d4>
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	6121      	str	r1, [r4, #16]
 8007880:	07d8      	lsls	r0, r3, #31
 8007882:	d5ea      	bpl.n	800785a <_printf_float+0x1a6>
 8007884:	1c4b      	adds	r3, r1, #1
 8007886:	e7e7      	b.n	8007858 <_printf_float+0x1a4>
 8007888:	2900      	cmp	r1, #0
 800788a:	bfd4      	ite	le
 800788c:	f1c1 0202 	rsble	r2, r1, #2
 8007890:	2201      	movgt	r2, #1
 8007892:	4413      	add	r3, r2
 8007894:	e7e0      	b.n	8007858 <_printf_float+0x1a4>
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	055a      	lsls	r2, r3, #21
 800789a:	d407      	bmi.n	80078ac <_printf_float+0x1f8>
 800789c:	6923      	ldr	r3, [r4, #16]
 800789e:	4642      	mov	r2, r8
 80078a0:	4631      	mov	r1, r6
 80078a2:	4628      	mov	r0, r5
 80078a4:	47b8      	blx	r7
 80078a6:	3001      	adds	r0, #1
 80078a8:	d12c      	bne.n	8007904 <_printf_float+0x250>
 80078aa:	e764      	b.n	8007776 <_printf_float+0xc2>
 80078ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078b0:	f240 80e0 	bls.w	8007a74 <_printf_float+0x3c0>
 80078b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078b8:	2200      	movs	r2, #0
 80078ba:	2300      	movs	r3, #0
 80078bc:	f7f9 f924 	bl	8000b08 <__aeabi_dcmpeq>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d034      	beq.n	800792e <_printf_float+0x27a>
 80078c4:	4a37      	ldr	r2, [pc, #220]	; (80079a4 <_printf_float+0x2f0>)
 80078c6:	2301      	movs	r3, #1
 80078c8:	4631      	mov	r1, r6
 80078ca:	4628      	mov	r0, r5
 80078cc:	47b8      	blx	r7
 80078ce:	3001      	adds	r0, #1
 80078d0:	f43f af51 	beq.w	8007776 <_printf_float+0xc2>
 80078d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078d8:	429a      	cmp	r2, r3
 80078da:	db02      	blt.n	80078e2 <_printf_float+0x22e>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	07d8      	lsls	r0, r3, #31
 80078e0:	d510      	bpl.n	8007904 <_printf_float+0x250>
 80078e2:	ee18 3a10 	vmov	r3, s16
 80078e6:	4652      	mov	r2, sl
 80078e8:	4631      	mov	r1, r6
 80078ea:	4628      	mov	r0, r5
 80078ec:	47b8      	blx	r7
 80078ee:	3001      	adds	r0, #1
 80078f0:	f43f af41 	beq.w	8007776 <_printf_float+0xc2>
 80078f4:	f04f 0800 	mov.w	r8, #0
 80078f8:	f104 091a 	add.w	r9, r4, #26
 80078fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078fe:	3b01      	subs	r3, #1
 8007900:	4543      	cmp	r3, r8
 8007902:	dc09      	bgt.n	8007918 <_printf_float+0x264>
 8007904:	6823      	ldr	r3, [r4, #0]
 8007906:	079b      	lsls	r3, r3, #30
 8007908:	f100 8105 	bmi.w	8007b16 <_printf_float+0x462>
 800790c:	68e0      	ldr	r0, [r4, #12]
 800790e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007910:	4298      	cmp	r0, r3
 8007912:	bfb8      	it	lt
 8007914:	4618      	movlt	r0, r3
 8007916:	e730      	b.n	800777a <_printf_float+0xc6>
 8007918:	2301      	movs	r3, #1
 800791a:	464a      	mov	r2, r9
 800791c:	4631      	mov	r1, r6
 800791e:	4628      	mov	r0, r5
 8007920:	47b8      	blx	r7
 8007922:	3001      	adds	r0, #1
 8007924:	f43f af27 	beq.w	8007776 <_printf_float+0xc2>
 8007928:	f108 0801 	add.w	r8, r8, #1
 800792c:	e7e6      	b.n	80078fc <_printf_float+0x248>
 800792e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007930:	2b00      	cmp	r3, #0
 8007932:	dc39      	bgt.n	80079a8 <_printf_float+0x2f4>
 8007934:	4a1b      	ldr	r2, [pc, #108]	; (80079a4 <_printf_float+0x2f0>)
 8007936:	2301      	movs	r3, #1
 8007938:	4631      	mov	r1, r6
 800793a:	4628      	mov	r0, r5
 800793c:	47b8      	blx	r7
 800793e:	3001      	adds	r0, #1
 8007940:	f43f af19 	beq.w	8007776 <_printf_float+0xc2>
 8007944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007948:	4313      	orrs	r3, r2
 800794a:	d102      	bne.n	8007952 <_printf_float+0x29e>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	07d9      	lsls	r1, r3, #31
 8007950:	d5d8      	bpl.n	8007904 <_printf_float+0x250>
 8007952:	ee18 3a10 	vmov	r3, s16
 8007956:	4652      	mov	r2, sl
 8007958:	4631      	mov	r1, r6
 800795a:	4628      	mov	r0, r5
 800795c:	47b8      	blx	r7
 800795e:	3001      	adds	r0, #1
 8007960:	f43f af09 	beq.w	8007776 <_printf_float+0xc2>
 8007964:	f04f 0900 	mov.w	r9, #0
 8007968:	f104 0a1a 	add.w	sl, r4, #26
 800796c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800796e:	425b      	negs	r3, r3
 8007970:	454b      	cmp	r3, r9
 8007972:	dc01      	bgt.n	8007978 <_printf_float+0x2c4>
 8007974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007976:	e792      	b.n	800789e <_printf_float+0x1ea>
 8007978:	2301      	movs	r3, #1
 800797a:	4652      	mov	r2, sl
 800797c:	4631      	mov	r1, r6
 800797e:	4628      	mov	r0, r5
 8007980:	47b8      	blx	r7
 8007982:	3001      	adds	r0, #1
 8007984:	f43f aef7 	beq.w	8007776 <_printf_float+0xc2>
 8007988:	f109 0901 	add.w	r9, r9, #1
 800798c:	e7ee      	b.n	800796c <_printf_float+0x2b8>
 800798e:	bf00      	nop
 8007990:	7fefffff 	.word	0x7fefffff
 8007994:	0800b868 	.word	0x0800b868
 8007998:	0800b86c 	.word	0x0800b86c
 800799c:	0800b874 	.word	0x0800b874
 80079a0:	0800b870 	.word	0x0800b870
 80079a4:	0800b878 	.word	0x0800b878
 80079a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079ac:	429a      	cmp	r2, r3
 80079ae:	bfa8      	it	ge
 80079b0:	461a      	movge	r2, r3
 80079b2:	2a00      	cmp	r2, #0
 80079b4:	4691      	mov	r9, r2
 80079b6:	dc37      	bgt.n	8007a28 <_printf_float+0x374>
 80079b8:	f04f 0b00 	mov.w	fp, #0
 80079bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079c0:	f104 021a 	add.w	r2, r4, #26
 80079c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079c6:	9305      	str	r3, [sp, #20]
 80079c8:	eba3 0309 	sub.w	r3, r3, r9
 80079cc:	455b      	cmp	r3, fp
 80079ce:	dc33      	bgt.n	8007a38 <_printf_float+0x384>
 80079d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079d4:	429a      	cmp	r2, r3
 80079d6:	db3b      	blt.n	8007a50 <_printf_float+0x39c>
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	07da      	lsls	r2, r3, #31
 80079dc:	d438      	bmi.n	8007a50 <_printf_float+0x39c>
 80079de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e0:	9a05      	ldr	r2, [sp, #20]
 80079e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079e4:	1a9a      	subs	r2, r3, r2
 80079e6:	eba3 0901 	sub.w	r9, r3, r1
 80079ea:	4591      	cmp	r9, r2
 80079ec:	bfa8      	it	ge
 80079ee:	4691      	movge	r9, r2
 80079f0:	f1b9 0f00 	cmp.w	r9, #0
 80079f4:	dc35      	bgt.n	8007a62 <_printf_float+0x3ae>
 80079f6:	f04f 0800 	mov.w	r8, #0
 80079fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079fe:	f104 0a1a 	add.w	sl, r4, #26
 8007a02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a06:	1a9b      	subs	r3, r3, r2
 8007a08:	eba3 0309 	sub.w	r3, r3, r9
 8007a0c:	4543      	cmp	r3, r8
 8007a0e:	f77f af79 	ble.w	8007904 <_printf_float+0x250>
 8007a12:	2301      	movs	r3, #1
 8007a14:	4652      	mov	r2, sl
 8007a16:	4631      	mov	r1, r6
 8007a18:	4628      	mov	r0, r5
 8007a1a:	47b8      	blx	r7
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	f43f aeaa 	beq.w	8007776 <_printf_float+0xc2>
 8007a22:	f108 0801 	add.w	r8, r8, #1
 8007a26:	e7ec      	b.n	8007a02 <_printf_float+0x34e>
 8007a28:	4613      	mov	r3, r2
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4642      	mov	r2, r8
 8007a2e:	4628      	mov	r0, r5
 8007a30:	47b8      	blx	r7
 8007a32:	3001      	adds	r0, #1
 8007a34:	d1c0      	bne.n	80079b8 <_printf_float+0x304>
 8007a36:	e69e      	b.n	8007776 <_printf_float+0xc2>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	9205      	str	r2, [sp, #20]
 8007a40:	47b8      	blx	r7
 8007a42:	3001      	adds	r0, #1
 8007a44:	f43f ae97 	beq.w	8007776 <_printf_float+0xc2>
 8007a48:	9a05      	ldr	r2, [sp, #20]
 8007a4a:	f10b 0b01 	add.w	fp, fp, #1
 8007a4e:	e7b9      	b.n	80079c4 <_printf_float+0x310>
 8007a50:	ee18 3a10 	vmov	r3, s16
 8007a54:	4652      	mov	r2, sl
 8007a56:	4631      	mov	r1, r6
 8007a58:	4628      	mov	r0, r5
 8007a5a:	47b8      	blx	r7
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d1be      	bne.n	80079de <_printf_float+0x32a>
 8007a60:	e689      	b.n	8007776 <_printf_float+0xc2>
 8007a62:	9a05      	ldr	r2, [sp, #20]
 8007a64:	464b      	mov	r3, r9
 8007a66:	4442      	add	r2, r8
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	47b8      	blx	r7
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d1c1      	bne.n	80079f6 <_printf_float+0x342>
 8007a72:	e680      	b.n	8007776 <_printf_float+0xc2>
 8007a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a76:	2a01      	cmp	r2, #1
 8007a78:	dc01      	bgt.n	8007a7e <_printf_float+0x3ca>
 8007a7a:	07db      	lsls	r3, r3, #31
 8007a7c:	d538      	bpl.n	8007af0 <_printf_float+0x43c>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	4642      	mov	r2, r8
 8007a82:	4631      	mov	r1, r6
 8007a84:	4628      	mov	r0, r5
 8007a86:	47b8      	blx	r7
 8007a88:	3001      	adds	r0, #1
 8007a8a:	f43f ae74 	beq.w	8007776 <_printf_float+0xc2>
 8007a8e:	ee18 3a10 	vmov	r3, s16
 8007a92:	4652      	mov	r2, sl
 8007a94:	4631      	mov	r1, r6
 8007a96:	4628      	mov	r0, r5
 8007a98:	47b8      	blx	r7
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	f43f ae6b 	beq.w	8007776 <_printf_float+0xc2>
 8007aa0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f7f9 f82e 	bl	8000b08 <__aeabi_dcmpeq>
 8007aac:	b9d8      	cbnz	r0, 8007ae6 <_printf_float+0x432>
 8007aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab0:	f108 0201 	add.w	r2, r8, #1
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	4628      	mov	r0, r5
 8007aba:	47b8      	blx	r7
 8007abc:	3001      	adds	r0, #1
 8007abe:	d10e      	bne.n	8007ade <_printf_float+0x42a>
 8007ac0:	e659      	b.n	8007776 <_printf_float+0xc2>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	4652      	mov	r2, sl
 8007ac6:	4631      	mov	r1, r6
 8007ac8:	4628      	mov	r0, r5
 8007aca:	47b8      	blx	r7
 8007acc:	3001      	adds	r0, #1
 8007ace:	f43f ae52 	beq.w	8007776 <_printf_float+0xc2>
 8007ad2:	f108 0801 	add.w	r8, r8, #1
 8007ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	4543      	cmp	r3, r8
 8007adc:	dcf1      	bgt.n	8007ac2 <_printf_float+0x40e>
 8007ade:	464b      	mov	r3, r9
 8007ae0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ae4:	e6dc      	b.n	80078a0 <_printf_float+0x1ec>
 8007ae6:	f04f 0800 	mov.w	r8, #0
 8007aea:	f104 0a1a 	add.w	sl, r4, #26
 8007aee:	e7f2      	b.n	8007ad6 <_printf_float+0x422>
 8007af0:	2301      	movs	r3, #1
 8007af2:	4642      	mov	r2, r8
 8007af4:	e7df      	b.n	8007ab6 <_printf_float+0x402>
 8007af6:	2301      	movs	r3, #1
 8007af8:	464a      	mov	r2, r9
 8007afa:	4631      	mov	r1, r6
 8007afc:	4628      	mov	r0, r5
 8007afe:	47b8      	blx	r7
 8007b00:	3001      	adds	r0, #1
 8007b02:	f43f ae38 	beq.w	8007776 <_printf_float+0xc2>
 8007b06:	f108 0801 	add.w	r8, r8, #1
 8007b0a:	68e3      	ldr	r3, [r4, #12]
 8007b0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b0e:	1a5b      	subs	r3, r3, r1
 8007b10:	4543      	cmp	r3, r8
 8007b12:	dcf0      	bgt.n	8007af6 <_printf_float+0x442>
 8007b14:	e6fa      	b.n	800790c <_printf_float+0x258>
 8007b16:	f04f 0800 	mov.w	r8, #0
 8007b1a:	f104 0919 	add.w	r9, r4, #25
 8007b1e:	e7f4      	b.n	8007b0a <_printf_float+0x456>

08007b20 <_printf_common>:
 8007b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b24:	4616      	mov	r6, r2
 8007b26:	4699      	mov	r9, r3
 8007b28:	688a      	ldr	r2, [r1, #8]
 8007b2a:	690b      	ldr	r3, [r1, #16]
 8007b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b30:	4293      	cmp	r3, r2
 8007b32:	bfb8      	it	lt
 8007b34:	4613      	movlt	r3, r2
 8007b36:	6033      	str	r3, [r6, #0]
 8007b38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b3c:	4607      	mov	r7, r0
 8007b3e:	460c      	mov	r4, r1
 8007b40:	b10a      	cbz	r2, 8007b46 <_printf_common+0x26>
 8007b42:	3301      	adds	r3, #1
 8007b44:	6033      	str	r3, [r6, #0]
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	0699      	lsls	r1, r3, #26
 8007b4a:	bf42      	ittt	mi
 8007b4c:	6833      	ldrmi	r3, [r6, #0]
 8007b4e:	3302      	addmi	r3, #2
 8007b50:	6033      	strmi	r3, [r6, #0]
 8007b52:	6825      	ldr	r5, [r4, #0]
 8007b54:	f015 0506 	ands.w	r5, r5, #6
 8007b58:	d106      	bne.n	8007b68 <_printf_common+0x48>
 8007b5a:	f104 0a19 	add.w	sl, r4, #25
 8007b5e:	68e3      	ldr	r3, [r4, #12]
 8007b60:	6832      	ldr	r2, [r6, #0]
 8007b62:	1a9b      	subs	r3, r3, r2
 8007b64:	42ab      	cmp	r3, r5
 8007b66:	dc26      	bgt.n	8007bb6 <_printf_common+0x96>
 8007b68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b6c:	1e13      	subs	r3, r2, #0
 8007b6e:	6822      	ldr	r2, [r4, #0]
 8007b70:	bf18      	it	ne
 8007b72:	2301      	movne	r3, #1
 8007b74:	0692      	lsls	r2, r2, #26
 8007b76:	d42b      	bmi.n	8007bd0 <_printf_common+0xb0>
 8007b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	4638      	mov	r0, r7
 8007b80:	47c0      	blx	r8
 8007b82:	3001      	adds	r0, #1
 8007b84:	d01e      	beq.n	8007bc4 <_printf_common+0xa4>
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	68e5      	ldr	r5, [r4, #12]
 8007b8a:	6832      	ldr	r2, [r6, #0]
 8007b8c:	f003 0306 	and.w	r3, r3, #6
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	bf08      	it	eq
 8007b94:	1aad      	subeq	r5, r5, r2
 8007b96:	68a3      	ldr	r3, [r4, #8]
 8007b98:	6922      	ldr	r2, [r4, #16]
 8007b9a:	bf0c      	ite	eq
 8007b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ba0:	2500      	movne	r5, #0
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	bfc4      	itt	gt
 8007ba6:	1a9b      	subgt	r3, r3, r2
 8007ba8:	18ed      	addgt	r5, r5, r3
 8007baa:	2600      	movs	r6, #0
 8007bac:	341a      	adds	r4, #26
 8007bae:	42b5      	cmp	r5, r6
 8007bb0:	d11a      	bne.n	8007be8 <_printf_common+0xc8>
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	e008      	b.n	8007bc8 <_printf_common+0xa8>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	4652      	mov	r2, sl
 8007bba:	4649      	mov	r1, r9
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	47c0      	blx	r8
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d103      	bne.n	8007bcc <_printf_common+0xac>
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bcc:	3501      	adds	r5, #1
 8007bce:	e7c6      	b.n	8007b5e <_printf_common+0x3e>
 8007bd0:	18e1      	adds	r1, r4, r3
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	2030      	movs	r0, #48	; 0x30
 8007bd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bda:	4422      	add	r2, r4
 8007bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007be0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007be4:	3302      	adds	r3, #2
 8007be6:	e7c7      	b.n	8007b78 <_printf_common+0x58>
 8007be8:	2301      	movs	r3, #1
 8007bea:	4622      	mov	r2, r4
 8007bec:	4649      	mov	r1, r9
 8007bee:	4638      	mov	r0, r7
 8007bf0:	47c0      	blx	r8
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	d0e6      	beq.n	8007bc4 <_printf_common+0xa4>
 8007bf6:	3601      	adds	r6, #1
 8007bf8:	e7d9      	b.n	8007bae <_printf_common+0x8e>
	...

08007bfc <_printf_i>:
 8007bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c00:	7e0f      	ldrb	r7, [r1, #24]
 8007c02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c04:	2f78      	cmp	r7, #120	; 0x78
 8007c06:	4691      	mov	r9, r2
 8007c08:	4680      	mov	r8, r0
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	469a      	mov	sl, r3
 8007c0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c12:	d807      	bhi.n	8007c24 <_printf_i+0x28>
 8007c14:	2f62      	cmp	r7, #98	; 0x62
 8007c16:	d80a      	bhi.n	8007c2e <_printf_i+0x32>
 8007c18:	2f00      	cmp	r7, #0
 8007c1a:	f000 80d8 	beq.w	8007dce <_printf_i+0x1d2>
 8007c1e:	2f58      	cmp	r7, #88	; 0x58
 8007c20:	f000 80a3 	beq.w	8007d6a <_printf_i+0x16e>
 8007c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c2c:	e03a      	b.n	8007ca4 <_printf_i+0xa8>
 8007c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c32:	2b15      	cmp	r3, #21
 8007c34:	d8f6      	bhi.n	8007c24 <_printf_i+0x28>
 8007c36:	a101      	add	r1, pc, #4	; (adr r1, 8007c3c <_printf_i+0x40>)
 8007c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c3c:	08007c95 	.word	0x08007c95
 8007c40:	08007ca9 	.word	0x08007ca9
 8007c44:	08007c25 	.word	0x08007c25
 8007c48:	08007c25 	.word	0x08007c25
 8007c4c:	08007c25 	.word	0x08007c25
 8007c50:	08007c25 	.word	0x08007c25
 8007c54:	08007ca9 	.word	0x08007ca9
 8007c58:	08007c25 	.word	0x08007c25
 8007c5c:	08007c25 	.word	0x08007c25
 8007c60:	08007c25 	.word	0x08007c25
 8007c64:	08007c25 	.word	0x08007c25
 8007c68:	08007db5 	.word	0x08007db5
 8007c6c:	08007cd9 	.word	0x08007cd9
 8007c70:	08007d97 	.word	0x08007d97
 8007c74:	08007c25 	.word	0x08007c25
 8007c78:	08007c25 	.word	0x08007c25
 8007c7c:	08007dd7 	.word	0x08007dd7
 8007c80:	08007c25 	.word	0x08007c25
 8007c84:	08007cd9 	.word	0x08007cd9
 8007c88:	08007c25 	.word	0x08007c25
 8007c8c:	08007c25 	.word	0x08007c25
 8007c90:	08007d9f 	.word	0x08007d9f
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	1d1a      	adds	r2, r3, #4
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	602a      	str	r2, [r5, #0]
 8007c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e0a3      	b.n	8007df0 <_printf_i+0x1f4>
 8007ca8:	6820      	ldr	r0, [r4, #0]
 8007caa:	6829      	ldr	r1, [r5, #0]
 8007cac:	0606      	lsls	r6, r0, #24
 8007cae:	f101 0304 	add.w	r3, r1, #4
 8007cb2:	d50a      	bpl.n	8007cca <_printf_i+0xce>
 8007cb4:	680e      	ldr	r6, [r1, #0]
 8007cb6:	602b      	str	r3, [r5, #0]
 8007cb8:	2e00      	cmp	r6, #0
 8007cba:	da03      	bge.n	8007cc4 <_printf_i+0xc8>
 8007cbc:	232d      	movs	r3, #45	; 0x2d
 8007cbe:	4276      	negs	r6, r6
 8007cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cc4:	485e      	ldr	r0, [pc, #376]	; (8007e40 <_printf_i+0x244>)
 8007cc6:	230a      	movs	r3, #10
 8007cc8:	e019      	b.n	8007cfe <_printf_i+0x102>
 8007cca:	680e      	ldr	r6, [r1, #0]
 8007ccc:	602b      	str	r3, [r5, #0]
 8007cce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007cd2:	bf18      	it	ne
 8007cd4:	b236      	sxthne	r6, r6
 8007cd6:	e7ef      	b.n	8007cb8 <_printf_i+0xbc>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	6820      	ldr	r0, [r4, #0]
 8007cdc:	1d19      	adds	r1, r3, #4
 8007cde:	6029      	str	r1, [r5, #0]
 8007ce0:	0601      	lsls	r1, r0, #24
 8007ce2:	d501      	bpl.n	8007ce8 <_printf_i+0xec>
 8007ce4:	681e      	ldr	r6, [r3, #0]
 8007ce6:	e002      	b.n	8007cee <_printf_i+0xf2>
 8007ce8:	0646      	lsls	r6, r0, #25
 8007cea:	d5fb      	bpl.n	8007ce4 <_printf_i+0xe8>
 8007cec:	881e      	ldrh	r6, [r3, #0]
 8007cee:	4854      	ldr	r0, [pc, #336]	; (8007e40 <_printf_i+0x244>)
 8007cf0:	2f6f      	cmp	r7, #111	; 0x6f
 8007cf2:	bf0c      	ite	eq
 8007cf4:	2308      	moveq	r3, #8
 8007cf6:	230a      	movne	r3, #10
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cfe:	6865      	ldr	r5, [r4, #4]
 8007d00:	60a5      	str	r5, [r4, #8]
 8007d02:	2d00      	cmp	r5, #0
 8007d04:	bfa2      	ittt	ge
 8007d06:	6821      	ldrge	r1, [r4, #0]
 8007d08:	f021 0104 	bicge.w	r1, r1, #4
 8007d0c:	6021      	strge	r1, [r4, #0]
 8007d0e:	b90e      	cbnz	r6, 8007d14 <_printf_i+0x118>
 8007d10:	2d00      	cmp	r5, #0
 8007d12:	d04d      	beq.n	8007db0 <_printf_i+0x1b4>
 8007d14:	4615      	mov	r5, r2
 8007d16:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d1a:	fb03 6711 	mls	r7, r3, r1, r6
 8007d1e:	5dc7      	ldrb	r7, [r0, r7]
 8007d20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d24:	4637      	mov	r7, r6
 8007d26:	42bb      	cmp	r3, r7
 8007d28:	460e      	mov	r6, r1
 8007d2a:	d9f4      	bls.n	8007d16 <_printf_i+0x11a>
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	d10b      	bne.n	8007d48 <_printf_i+0x14c>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	07de      	lsls	r6, r3, #31
 8007d34:	d508      	bpl.n	8007d48 <_printf_i+0x14c>
 8007d36:	6923      	ldr	r3, [r4, #16]
 8007d38:	6861      	ldr	r1, [r4, #4]
 8007d3a:	4299      	cmp	r1, r3
 8007d3c:	bfde      	ittt	le
 8007d3e:	2330      	movle	r3, #48	; 0x30
 8007d40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d48:	1b52      	subs	r2, r2, r5
 8007d4a:	6122      	str	r2, [r4, #16]
 8007d4c:	f8cd a000 	str.w	sl, [sp]
 8007d50:	464b      	mov	r3, r9
 8007d52:	aa03      	add	r2, sp, #12
 8007d54:	4621      	mov	r1, r4
 8007d56:	4640      	mov	r0, r8
 8007d58:	f7ff fee2 	bl	8007b20 <_printf_common>
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	d14c      	bne.n	8007dfa <_printf_i+0x1fe>
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295
 8007d64:	b004      	add	sp, #16
 8007d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6a:	4835      	ldr	r0, [pc, #212]	; (8007e40 <_printf_i+0x244>)
 8007d6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d70:	6829      	ldr	r1, [r5, #0]
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d78:	6029      	str	r1, [r5, #0]
 8007d7a:	061d      	lsls	r5, r3, #24
 8007d7c:	d514      	bpl.n	8007da8 <_printf_i+0x1ac>
 8007d7e:	07df      	lsls	r7, r3, #31
 8007d80:	bf44      	itt	mi
 8007d82:	f043 0320 	orrmi.w	r3, r3, #32
 8007d86:	6023      	strmi	r3, [r4, #0]
 8007d88:	b91e      	cbnz	r6, 8007d92 <_printf_i+0x196>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	f023 0320 	bic.w	r3, r3, #32
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	2310      	movs	r3, #16
 8007d94:	e7b0      	b.n	8007cf8 <_printf_i+0xfc>
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	f043 0320 	orr.w	r3, r3, #32
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	2378      	movs	r3, #120	; 0x78
 8007da0:	4828      	ldr	r0, [pc, #160]	; (8007e44 <_printf_i+0x248>)
 8007da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007da6:	e7e3      	b.n	8007d70 <_printf_i+0x174>
 8007da8:	0659      	lsls	r1, r3, #25
 8007daa:	bf48      	it	mi
 8007dac:	b2b6      	uxthmi	r6, r6
 8007dae:	e7e6      	b.n	8007d7e <_printf_i+0x182>
 8007db0:	4615      	mov	r5, r2
 8007db2:	e7bb      	b.n	8007d2c <_printf_i+0x130>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	6826      	ldr	r6, [r4, #0]
 8007db8:	6961      	ldr	r1, [r4, #20]
 8007dba:	1d18      	adds	r0, r3, #4
 8007dbc:	6028      	str	r0, [r5, #0]
 8007dbe:	0635      	lsls	r5, r6, #24
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	d501      	bpl.n	8007dc8 <_printf_i+0x1cc>
 8007dc4:	6019      	str	r1, [r3, #0]
 8007dc6:	e002      	b.n	8007dce <_printf_i+0x1d2>
 8007dc8:	0670      	lsls	r0, r6, #25
 8007dca:	d5fb      	bpl.n	8007dc4 <_printf_i+0x1c8>
 8007dcc:	8019      	strh	r1, [r3, #0]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	6123      	str	r3, [r4, #16]
 8007dd2:	4615      	mov	r5, r2
 8007dd4:	e7ba      	b.n	8007d4c <_printf_i+0x150>
 8007dd6:	682b      	ldr	r3, [r5, #0]
 8007dd8:	1d1a      	adds	r2, r3, #4
 8007dda:	602a      	str	r2, [r5, #0]
 8007ddc:	681d      	ldr	r5, [r3, #0]
 8007dde:	6862      	ldr	r2, [r4, #4]
 8007de0:	2100      	movs	r1, #0
 8007de2:	4628      	mov	r0, r5
 8007de4:	f7f8 fa1c 	bl	8000220 <memchr>
 8007de8:	b108      	cbz	r0, 8007dee <_printf_i+0x1f2>
 8007dea:	1b40      	subs	r0, r0, r5
 8007dec:	6060      	str	r0, [r4, #4]
 8007dee:	6863      	ldr	r3, [r4, #4]
 8007df0:	6123      	str	r3, [r4, #16]
 8007df2:	2300      	movs	r3, #0
 8007df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007df8:	e7a8      	b.n	8007d4c <_printf_i+0x150>
 8007dfa:	6923      	ldr	r3, [r4, #16]
 8007dfc:	462a      	mov	r2, r5
 8007dfe:	4649      	mov	r1, r9
 8007e00:	4640      	mov	r0, r8
 8007e02:	47d0      	blx	sl
 8007e04:	3001      	adds	r0, #1
 8007e06:	d0ab      	beq.n	8007d60 <_printf_i+0x164>
 8007e08:	6823      	ldr	r3, [r4, #0]
 8007e0a:	079b      	lsls	r3, r3, #30
 8007e0c:	d413      	bmi.n	8007e36 <_printf_i+0x23a>
 8007e0e:	68e0      	ldr	r0, [r4, #12]
 8007e10:	9b03      	ldr	r3, [sp, #12]
 8007e12:	4298      	cmp	r0, r3
 8007e14:	bfb8      	it	lt
 8007e16:	4618      	movlt	r0, r3
 8007e18:	e7a4      	b.n	8007d64 <_printf_i+0x168>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	4632      	mov	r2, r6
 8007e1e:	4649      	mov	r1, r9
 8007e20:	4640      	mov	r0, r8
 8007e22:	47d0      	blx	sl
 8007e24:	3001      	adds	r0, #1
 8007e26:	d09b      	beq.n	8007d60 <_printf_i+0x164>
 8007e28:	3501      	adds	r5, #1
 8007e2a:	68e3      	ldr	r3, [r4, #12]
 8007e2c:	9903      	ldr	r1, [sp, #12]
 8007e2e:	1a5b      	subs	r3, r3, r1
 8007e30:	42ab      	cmp	r3, r5
 8007e32:	dcf2      	bgt.n	8007e1a <_printf_i+0x21e>
 8007e34:	e7eb      	b.n	8007e0e <_printf_i+0x212>
 8007e36:	2500      	movs	r5, #0
 8007e38:	f104 0619 	add.w	r6, r4, #25
 8007e3c:	e7f5      	b.n	8007e2a <_printf_i+0x22e>
 8007e3e:	bf00      	nop
 8007e40:	0800b87a 	.word	0x0800b87a
 8007e44:	0800b88b 	.word	0x0800b88b

08007e48 <siprintf>:
 8007e48:	b40e      	push	{r1, r2, r3}
 8007e4a:	b500      	push	{lr}
 8007e4c:	b09c      	sub	sp, #112	; 0x70
 8007e4e:	ab1d      	add	r3, sp, #116	; 0x74
 8007e50:	9002      	str	r0, [sp, #8]
 8007e52:	9006      	str	r0, [sp, #24]
 8007e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e58:	4809      	ldr	r0, [pc, #36]	; (8007e80 <siprintf+0x38>)
 8007e5a:	9107      	str	r1, [sp, #28]
 8007e5c:	9104      	str	r1, [sp, #16]
 8007e5e:	4909      	ldr	r1, [pc, #36]	; (8007e84 <siprintf+0x3c>)
 8007e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e64:	9105      	str	r1, [sp, #20]
 8007e66:	6800      	ldr	r0, [r0, #0]
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	a902      	add	r1, sp, #8
 8007e6c:	f001 fb76 	bl	800955c <_svfiprintf_r>
 8007e70:	9b02      	ldr	r3, [sp, #8]
 8007e72:	2200      	movs	r2, #0
 8007e74:	701a      	strb	r2, [r3, #0]
 8007e76:	b01c      	add	sp, #112	; 0x70
 8007e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e7c:	b003      	add	sp, #12
 8007e7e:	4770      	bx	lr
 8007e80:	20000034 	.word	0x20000034
 8007e84:	ffff0208 	.word	0xffff0208

08007e88 <quorem>:
 8007e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	6903      	ldr	r3, [r0, #16]
 8007e8e:	690c      	ldr	r4, [r1, #16]
 8007e90:	42a3      	cmp	r3, r4
 8007e92:	4607      	mov	r7, r0
 8007e94:	f2c0 8081 	blt.w	8007f9a <quorem+0x112>
 8007e98:	3c01      	subs	r4, #1
 8007e9a:	f101 0814 	add.w	r8, r1, #20
 8007e9e:	f100 0514 	add.w	r5, r0, #20
 8007ea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ea6:	9301      	str	r3, [sp, #4]
 8007ea8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007eac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007eb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ebc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ec0:	d331      	bcc.n	8007f26 <quorem+0x9e>
 8007ec2:	f04f 0e00 	mov.w	lr, #0
 8007ec6:	4640      	mov	r0, r8
 8007ec8:	46ac      	mov	ip, r5
 8007eca:	46f2      	mov	sl, lr
 8007ecc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ed0:	b293      	uxth	r3, r2
 8007ed2:	fb06 e303 	mla	r3, r6, r3, lr
 8007ed6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	ebaa 0303 	sub.w	r3, sl, r3
 8007ee0:	f8dc a000 	ldr.w	sl, [ip]
 8007ee4:	0c12      	lsrs	r2, r2, #16
 8007ee6:	fa13 f38a 	uxtah	r3, r3, sl
 8007eea:	fb06 e202 	mla	r2, r6, r2, lr
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	9b00      	ldr	r3, [sp, #0]
 8007ef2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ef6:	b292      	uxth	r2, r2
 8007ef8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007efc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f00:	f8bd 3000 	ldrh.w	r3, [sp]
 8007f04:	4581      	cmp	r9, r0
 8007f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f0a:	f84c 3b04 	str.w	r3, [ip], #4
 8007f0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f12:	d2db      	bcs.n	8007ecc <quorem+0x44>
 8007f14:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f18:	b92b      	cbnz	r3, 8007f26 <quorem+0x9e>
 8007f1a:	9b01      	ldr	r3, [sp, #4]
 8007f1c:	3b04      	subs	r3, #4
 8007f1e:	429d      	cmp	r5, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	d32e      	bcc.n	8007f82 <quorem+0xfa>
 8007f24:	613c      	str	r4, [r7, #16]
 8007f26:	4638      	mov	r0, r7
 8007f28:	f001 f8c4 	bl	80090b4 <__mcmp>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	db24      	blt.n	8007f7a <quorem+0xf2>
 8007f30:	3601      	adds	r6, #1
 8007f32:	4628      	mov	r0, r5
 8007f34:	f04f 0c00 	mov.w	ip, #0
 8007f38:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f3c:	f8d0 e000 	ldr.w	lr, [r0]
 8007f40:	b293      	uxth	r3, r2
 8007f42:	ebac 0303 	sub.w	r3, ip, r3
 8007f46:	0c12      	lsrs	r2, r2, #16
 8007f48:	fa13 f38e 	uxtah	r3, r3, lr
 8007f4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f5a:	45c1      	cmp	r9, r8
 8007f5c:	f840 3b04 	str.w	r3, [r0], #4
 8007f60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f64:	d2e8      	bcs.n	8007f38 <quorem+0xb0>
 8007f66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f6e:	b922      	cbnz	r2, 8007f7a <quorem+0xf2>
 8007f70:	3b04      	subs	r3, #4
 8007f72:	429d      	cmp	r5, r3
 8007f74:	461a      	mov	r2, r3
 8007f76:	d30a      	bcc.n	8007f8e <quorem+0x106>
 8007f78:	613c      	str	r4, [r7, #16]
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	b003      	add	sp, #12
 8007f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f82:	6812      	ldr	r2, [r2, #0]
 8007f84:	3b04      	subs	r3, #4
 8007f86:	2a00      	cmp	r2, #0
 8007f88:	d1cc      	bne.n	8007f24 <quorem+0x9c>
 8007f8a:	3c01      	subs	r4, #1
 8007f8c:	e7c7      	b.n	8007f1e <quorem+0x96>
 8007f8e:	6812      	ldr	r2, [r2, #0]
 8007f90:	3b04      	subs	r3, #4
 8007f92:	2a00      	cmp	r2, #0
 8007f94:	d1f0      	bne.n	8007f78 <quorem+0xf0>
 8007f96:	3c01      	subs	r4, #1
 8007f98:	e7eb      	b.n	8007f72 <quorem+0xea>
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	e7ee      	b.n	8007f7c <quorem+0xf4>
	...

08007fa0 <_dtoa_r>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	ed2d 8b04 	vpush	{d8-d9}
 8007fa8:	ec57 6b10 	vmov	r6, r7, d0
 8007fac:	b093      	sub	sp, #76	; 0x4c
 8007fae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fb4:	9106      	str	r1, [sp, #24]
 8007fb6:	ee10 aa10 	vmov	sl, s0
 8007fba:	4604      	mov	r4, r0
 8007fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8007fbe:	930c      	str	r3, [sp, #48]	; 0x30
 8007fc0:	46bb      	mov	fp, r7
 8007fc2:	b975      	cbnz	r5, 8007fe2 <_dtoa_r+0x42>
 8007fc4:	2010      	movs	r0, #16
 8007fc6:	f000 fddd 	bl	8008b84 <malloc>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	6260      	str	r0, [r4, #36]	; 0x24
 8007fce:	b920      	cbnz	r0, 8007fda <_dtoa_r+0x3a>
 8007fd0:	4ba7      	ldr	r3, [pc, #668]	; (8008270 <_dtoa_r+0x2d0>)
 8007fd2:	21ea      	movs	r1, #234	; 0xea
 8007fd4:	48a7      	ldr	r0, [pc, #668]	; (8008274 <_dtoa_r+0x2d4>)
 8007fd6:	f001 fbd1 	bl	800977c <__assert_func>
 8007fda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fde:	6005      	str	r5, [r0, #0]
 8007fe0:	60c5      	str	r5, [r0, #12]
 8007fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fe4:	6819      	ldr	r1, [r3, #0]
 8007fe6:	b151      	cbz	r1, 8007ffe <_dtoa_r+0x5e>
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	604a      	str	r2, [r1, #4]
 8007fec:	2301      	movs	r3, #1
 8007fee:	4093      	lsls	r3, r2
 8007ff0:	608b      	str	r3, [r1, #8]
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f000 fe1c 	bl	8008c30 <_Bfree>
 8007ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	1e3b      	subs	r3, r7, #0
 8008000:	bfaa      	itet	ge
 8008002:	2300      	movge	r3, #0
 8008004:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008008:	f8c8 3000 	strge.w	r3, [r8]
 800800c:	4b9a      	ldr	r3, [pc, #616]	; (8008278 <_dtoa_r+0x2d8>)
 800800e:	bfbc      	itt	lt
 8008010:	2201      	movlt	r2, #1
 8008012:	f8c8 2000 	strlt.w	r2, [r8]
 8008016:	ea33 030b 	bics.w	r3, r3, fp
 800801a:	d11b      	bne.n	8008054 <_dtoa_r+0xb4>
 800801c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800801e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008028:	4333      	orrs	r3, r6
 800802a:	f000 8592 	beq.w	8008b52 <_dtoa_r+0xbb2>
 800802e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008030:	b963      	cbnz	r3, 800804c <_dtoa_r+0xac>
 8008032:	4b92      	ldr	r3, [pc, #584]	; (800827c <_dtoa_r+0x2dc>)
 8008034:	e022      	b.n	800807c <_dtoa_r+0xdc>
 8008036:	4b92      	ldr	r3, [pc, #584]	; (8008280 <_dtoa_r+0x2e0>)
 8008038:	9301      	str	r3, [sp, #4]
 800803a:	3308      	adds	r3, #8
 800803c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	9801      	ldr	r0, [sp, #4]
 8008042:	b013      	add	sp, #76	; 0x4c
 8008044:	ecbd 8b04 	vpop	{d8-d9}
 8008048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804c:	4b8b      	ldr	r3, [pc, #556]	; (800827c <_dtoa_r+0x2dc>)
 800804e:	9301      	str	r3, [sp, #4]
 8008050:	3303      	adds	r3, #3
 8008052:	e7f3      	b.n	800803c <_dtoa_r+0x9c>
 8008054:	2200      	movs	r2, #0
 8008056:	2300      	movs	r3, #0
 8008058:	4650      	mov	r0, sl
 800805a:	4659      	mov	r1, fp
 800805c:	f7f8 fd54 	bl	8000b08 <__aeabi_dcmpeq>
 8008060:	ec4b ab19 	vmov	d9, sl, fp
 8008064:	4680      	mov	r8, r0
 8008066:	b158      	cbz	r0, 8008080 <_dtoa_r+0xe0>
 8008068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800806a:	2301      	movs	r3, #1
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 856b 	beq.w	8008b4c <_dtoa_r+0xbac>
 8008076:	4883      	ldr	r0, [pc, #524]	; (8008284 <_dtoa_r+0x2e4>)
 8008078:	6018      	str	r0, [r3, #0]
 800807a:	1e43      	subs	r3, r0, #1
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	e7df      	b.n	8008040 <_dtoa_r+0xa0>
 8008080:	ec4b ab10 	vmov	d0, sl, fp
 8008084:	aa10      	add	r2, sp, #64	; 0x40
 8008086:	a911      	add	r1, sp, #68	; 0x44
 8008088:	4620      	mov	r0, r4
 800808a:	f001 f8b9 	bl	8009200 <__d2b>
 800808e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008092:	ee08 0a10 	vmov	s16, r0
 8008096:	2d00      	cmp	r5, #0
 8008098:	f000 8084 	beq.w	80081a4 <_dtoa_r+0x204>
 800809c:	ee19 3a90 	vmov	r3, s19
 80080a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80080a8:	4656      	mov	r6, sl
 80080aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80080ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80080b6:	4b74      	ldr	r3, [pc, #464]	; (8008288 <_dtoa_r+0x2e8>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	4630      	mov	r0, r6
 80080bc:	4639      	mov	r1, r7
 80080be:	f7f8 f903 	bl	80002c8 <__aeabi_dsub>
 80080c2:	a365      	add	r3, pc, #404	; (adr r3, 8008258 <_dtoa_r+0x2b8>)
 80080c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c8:	f7f8 fab6 	bl	8000638 <__aeabi_dmul>
 80080cc:	a364      	add	r3, pc, #400	; (adr r3, 8008260 <_dtoa_r+0x2c0>)
 80080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d2:	f7f8 f8fb 	bl	80002cc <__adddf3>
 80080d6:	4606      	mov	r6, r0
 80080d8:	4628      	mov	r0, r5
 80080da:	460f      	mov	r7, r1
 80080dc:	f7f8 fa42 	bl	8000564 <__aeabi_i2d>
 80080e0:	a361      	add	r3, pc, #388	; (adr r3, 8008268 <_dtoa_r+0x2c8>)
 80080e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e6:	f7f8 faa7 	bl	8000638 <__aeabi_dmul>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4630      	mov	r0, r6
 80080f0:	4639      	mov	r1, r7
 80080f2:	f7f8 f8eb 	bl	80002cc <__adddf3>
 80080f6:	4606      	mov	r6, r0
 80080f8:	460f      	mov	r7, r1
 80080fa:	f7f8 fd4d 	bl	8000b98 <__aeabi_d2iz>
 80080fe:	2200      	movs	r2, #0
 8008100:	9000      	str	r0, [sp, #0]
 8008102:	2300      	movs	r3, #0
 8008104:	4630      	mov	r0, r6
 8008106:	4639      	mov	r1, r7
 8008108:	f7f8 fd08 	bl	8000b1c <__aeabi_dcmplt>
 800810c:	b150      	cbz	r0, 8008124 <_dtoa_r+0x184>
 800810e:	9800      	ldr	r0, [sp, #0]
 8008110:	f7f8 fa28 	bl	8000564 <__aeabi_i2d>
 8008114:	4632      	mov	r2, r6
 8008116:	463b      	mov	r3, r7
 8008118:	f7f8 fcf6 	bl	8000b08 <__aeabi_dcmpeq>
 800811c:	b910      	cbnz	r0, 8008124 <_dtoa_r+0x184>
 800811e:	9b00      	ldr	r3, [sp, #0]
 8008120:	3b01      	subs	r3, #1
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	9b00      	ldr	r3, [sp, #0]
 8008126:	2b16      	cmp	r3, #22
 8008128:	d85a      	bhi.n	80081e0 <_dtoa_r+0x240>
 800812a:	9a00      	ldr	r2, [sp, #0]
 800812c:	4b57      	ldr	r3, [pc, #348]	; (800828c <_dtoa_r+0x2ec>)
 800812e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	ec51 0b19 	vmov	r0, r1, d9
 800813a:	f7f8 fcef 	bl	8000b1c <__aeabi_dcmplt>
 800813e:	2800      	cmp	r0, #0
 8008140:	d050      	beq.n	80081e4 <_dtoa_r+0x244>
 8008142:	9b00      	ldr	r3, [sp, #0]
 8008144:	3b01      	subs	r3, #1
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	2300      	movs	r3, #0
 800814a:	930b      	str	r3, [sp, #44]	; 0x2c
 800814c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800814e:	1b5d      	subs	r5, r3, r5
 8008150:	1e6b      	subs	r3, r5, #1
 8008152:	9305      	str	r3, [sp, #20]
 8008154:	bf45      	ittet	mi
 8008156:	f1c5 0301 	rsbmi	r3, r5, #1
 800815a:	9304      	strmi	r3, [sp, #16]
 800815c:	2300      	movpl	r3, #0
 800815e:	2300      	movmi	r3, #0
 8008160:	bf4c      	ite	mi
 8008162:	9305      	strmi	r3, [sp, #20]
 8008164:	9304      	strpl	r3, [sp, #16]
 8008166:	9b00      	ldr	r3, [sp, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	db3d      	blt.n	80081e8 <_dtoa_r+0x248>
 800816c:	9b05      	ldr	r3, [sp, #20]
 800816e:	9a00      	ldr	r2, [sp, #0]
 8008170:	920a      	str	r2, [sp, #40]	; 0x28
 8008172:	4413      	add	r3, r2
 8008174:	9305      	str	r3, [sp, #20]
 8008176:	2300      	movs	r3, #0
 8008178:	9307      	str	r3, [sp, #28]
 800817a:	9b06      	ldr	r3, [sp, #24]
 800817c:	2b09      	cmp	r3, #9
 800817e:	f200 8089 	bhi.w	8008294 <_dtoa_r+0x2f4>
 8008182:	2b05      	cmp	r3, #5
 8008184:	bfc4      	itt	gt
 8008186:	3b04      	subgt	r3, #4
 8008188:	9306      	strgt	r3, [sp, #24]
 800818a:	9b06      	ldr	r3, [sp, #24]
 800818c:	f1a3 0302 	sub.w	r3, r3, #2
 8008190:	bfcc      	ite	gt
 8008192:	2500      	movgt	r5, #0
 8008194:	2501      	movle	r5, #1
 8008196:	2b03      	cmp	r3, #3
 8008198:	f200 8087 	bhi.w	80082aa <_dtoa_r+0x30a>
 800819c:	e8df f003 	tbb	[pc, r3]
 80081a0:	59383a2d 	.word	0x59383a2d
 80081a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80081a8:	441d      	add	r5, r3
 80081aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80081ae:	2b20      	cmp	r3, #32
 80081b0:	bfc1      	itttt	gt
 80081b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80081b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80081ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80081be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80081c2:	bfda      	itte	le
 80081c4:	f1c3 0320 	rsble	r3, r3, #32
 80081c8:	fa06 f003 	lslle.w	r0, r6, r3
 80081cc:	4318      	orrgt	r0, r3
 80081ce:	f7f8 f9b9 	bl	8000544 <__aeabi_ui2d>
 80081d2:	2301      	movs	r3, #1
 80081d4:	4606      	mov	r6, r0
 80081d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80081da:	3d01      	subs	r5, #1
 80081dc:	930e      	str	r3, [sp, #56]	; 0x38
 80081de:	e76a      	b.n	80080b6 <_dtoa_r+0x116>
 80081e0:	2301      	movs	r3, #1
 80081e2:	e7b2      	b.n	800814a <_dtoa_r+0x1aa>
 80081e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80081e6:	e7b1      	b.n	800814c <_dtoa_r+0x1ac>
 80081e8:	9b04      	ldr	r3, [sp, #16]
 80081ea:	9a00      	ldr	r2, [sp, #0]
 80081ec:	1a9b      	subs	r3, r3, r2
 80081ee:	9304      	str	r3, [sp, #16]
 80081f0:	4253      	negs	r3, r2
 80081f2:	9307      	str	r3, [sp, #28]
 80081f4:	2300      	movs	r3, #0
 80081f6:	930a      	str	r3, [sp, #40]	; 0x28
 80081f8:	e7bf      	b.n	800817a <_dtoa_r+0x1da>
 80081fa:	2300      	movs	r3, #0
 80081fc:	9308      	str	r3, [sp, #32]
 80081fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008200:	2b00      	cmp	r3, #0
 8008202:	dc55      	bgt.n	80082b0 <_dtoa_r+0x310>
 8008204:	2301      	movs	r3, #1
 8008206:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800820a:	461a      	mov	r2, r3
 800820c:	9209      	str	r2, [sp, #36]	; 0x24
 800820e:	e00c      	b.n	800822a <_dtoa_r+0x28a>
 8008210:	2301      	movs	r3, #1
 8008212:	e7f3      	b.n	80081fc <_dtoa_r+0x25c>
 8008214:	2300      	movs	r3, #0
 8008216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008218:	9308      	str	r3, [sp, #32]
 800821a:	9b00      	ldr	r3, [sp, #0]
 800821c:	4413      	add	r3, r2
 800821e:	9302      	str	r3, [sp, #8]
 8008220:	3301      	adds	r3, #1
 8008222:	2b01      	cmp	r3, #1
 8008224:	9303      	str	r3, [sp, #12]
 8008226:	bfb8      	it	lt
 8008228:	2301      	movlt	r3, #1
 800822a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800822c:	2200      	movs	r2, #0
 800822e:	6042      	str	r2, [r0, #4]
 8008230:	2204      	movs	r2, #4
 8008232:	f102 0614 	add.w	r6, r2, #20
 8008236:	429e      	cmp	r6, r3
 8008238:	6841      	ldr	r1, [r0, #4]
 800823a:	d93d      	bls.n	80082b8 <_dtoa_r+0x318>
 800823c:	4620      	mov	r0, r4
 800823e:	f000 fcb7 	bl	8008bb0 <_Balloc>
 8008242:	9001      	str	r0, [sp, #4]
 8008244:	2800      	cmp	r0, #0
 8008246:	d13b      	bne.n	80082c0 <_dtoa_r+0x320>
 8008248:	4b11      	ldr	r3, [pc, #68]	; (8008290 <_dtoa_r+0x2f0>)
 800824a:	4602      	mov	r2, r0
 800824c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008250:	e6c0      	b.n	8007fd4 <_dtoa_r+0x34>
 8008252:	2301      	movs	r3, #1
 8008254:	e7df      	b.n	8008216 <_dtoa_r+0x276>
 8008256:	bf00      	nop
 8008258:	636f4361 	.word	0x636f4361
 800825c:	3fd287a7 	.word	0x3fd287a7
 8008260:	8b60c8b3 	.word	0x8b60c8b3
 8008264:	3fc68a28 	.word	0x3fc68a28
 8008268:	509f79fb 	.word	0x509f79fb
 800826c:	3fd34413 	.word	0x3fd34413
 8008270:	0800b8a9 	.word	0x0800b8a9
 8008274:	0800b8c0 	.word	0x0800b8c0
 8008278:	7ff00000 	.word	0x7ff00000
 800827c:	0800b8a5 	.word	0x0800b8a5
 8008280:	0800b89c 	.word	0x0800b89c
 8008284:	0800b879 	.word	0x0800b879
 8008288:	3ff80000 	.word	0x3ff80000
 800828c:	0800b9b0 	.word	0x0800b9b0
 8008290:	0800b91b 	.word	0x0800b91b
 8008294:	2501      	movs	r5, #1
 8008296:	2300      	movs	r3, #0
 8008298:	9306      	str	r3, [sp, #24]
 800829a:	9508      	str	r5, [sp, #32]
 800829c:	f04f 33ff 	mov.w	r3, #4294967295
 80082a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082a4:	2200      	movs	r2, #0
 80082a6:	2312      	movs	r3, #18
 80082a8:	e7b0      	b.n	800820c <_dtoa_r+0x26c>
 80082aa:	2301      	movs	r3, #1
 80082ac:	9308      	str	r3, [sp, #32]
 80082ae:	e7f5      	b.n	800829c <_dtoa_r+0x2fc>
 80082b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082b6:	e7b8      	b.n	800822a <_dtoa_r+0x28a>
 80082b8:	3101      	adds	r1, #1
 80082ba:	6041      	str	r1, [r0, #4]
 80082bc:	0052      	lsls	r2, r2, #1
 80082be:	e7b8      	b.n	8008232 <_dtoa_r+0x292>
 80082c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082c2:	9a01      	ldr	r2, [sp, #4]
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	9b03      	ldr	r3, [sp, #12]
 80082c8:	2b0e      	cmp	r3, #14
 80082ca:	f200 809d 	bhi.w	8008408 <_dtoa_r+0x468>
 80082ce:	2d00      	cmp	r5, #0
 80082d0:	f000 809a 	beq.w	8008408 <_dtoa_r+0x468>
 80082d4:	9b00      	ldr	r3, [sp, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	dd32      	ble.n	8008340 <_dtoa_r+0x3a0>
 80082da:	4ab7      	ldr	r2, [pc, #732]	; (80085b8 <_dtoa_r+0x618>)
 80082dc:	f003 030f 	and.w	r3, r3, #15
 80082e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082e8:	9b00      	ldr	r3, [sp, #0]
 80082ea:	05d8      	lsls	r0, r3, #23
 80082ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80082f0:	d516      	bpl.n	8008320 <_dtoa_r+0x380>
 80082f2:	4bb2      	ldr	r3, [pc, #712]	; (80085bc <_dtoa_r+0x61c>)
 80082f4:	ec51 0b19 	vmov	r0, r1, d9
 80082f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082fc:	f7f8 fac6 	bl	800088c <__aeabi_ddiv>
 8008300:	f007 070f 	and.w	r7, r7, #15
 8008304:	4682      	mov	sl, r0
 8008306:	468b      	mov	fp, r1
 8008308:	2503      	movs	r5, #3
 800830a:	4eac      	ldr	r6, [pc, #688]	; (80085bc <_dtoa_r+0x61c>)
 800830c:	b957      	cbnz	r7, 8008324 <_dtoa_r+0x384>
 800830e:	4642      	mov	r2, r8
 8008310:	464b      	mov	r3, r9
 8008312:	4650      	mov	r0, sl
 8008314:	4659      	mov	r1, fp
 8008316:	f7f8 fab9 	bl	800088c <__aeabi_ddiv>
 800831a:	4682      	mov	sl, r0
 800831c:	468b      	mov	fp, r1
 800831e:	e028      	b.n	8008372 <_dtoa_r+0x3d2>
 8008320:	2502      	movs	r5, #2
 8008322:	e7f2      	b.n	800830a <_dtoa_r+0x36a>
 8008324:	07f9      	lsls	r1, r7, #31
 8008326:	d508      	bpl.n	800833a <_dtoa_r+0x39a>
 8008328:	4640      	mov	r0, r8
 800832a:	4649      	mov	r1, r9
 800832c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008330:	f7f8 f982 	bl	8000638 <__aeabi_dmul>
 8008334:	3501      	adds	r5, #1
 8008336:	4680      	mov	r8, r0
 8008338:	4689      	mov	r9, r1
 800833a:	107f      	asrs	r7, r7, #1
 800833c:	3608      	adds	r6, #8
 800833e:	e7e5      	b.n	800830c <_dtoa_r+0x36c>
 8008340:	f000 809b 	beq.w	800847a <_dtoa_r+0x4da>
 8008344:	9b00      	ldr	r3, [sp, #0]
 8008346:	4f9d      	ldr	r7, [pc, #628]	; (80085bc <_dtoa_r+0x61c>)
 8008348:	425e      	negs	r6, r3
 800834a:	4b9b      	ldr	r3, [pc, #620]	; (80085b8 <_dtoa_r+0x618>)
 800834c:	f006 020f 	and.w	r2, r6, #15
 8008350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	ec51 0b19 	vmov	r0, r1, d9
 800835c:	f7f8 f96c 	bl	8000638 <__aeabi_dmul>
 8008360:	1136      	asrs	r6, r6, #4
 8008362:	4682      	mov	sl, r0
 8008364:	468b      	mov	fp, r1
 8008366:	2300      	movs	r3, #0
 8008368:	2502      	movs	r5, #2
 800836a:	2e00      	cmp	r6, #0
 800836c:	d17a      	bne.n	8008464 <_dtoa_r+0x4c4>
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1d3      	bne.n	800831a <_dtoa_r+0x37a>
 8008372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 8082 	beq.w	800847e <_dtoa_r+0x4de>
 800837a:	4b91      	ldr	r3, [pc, #580]	; (80085c0 <_dtoa_r+0x620>)
 800837c:	2200      	movs	r2, #0
 800837e:	4650      	mov	r0, sl
 8008380:	4659      	mov	r1, fp
 8008382:	f7f8 fbcb 	bl	8000b1c <__aeabi_dcmplt>
 8008386:	2800      	cmp	r0, #0
 8008388:	d079      	beq.n	800847e <_dtoa_r+0x4de>
 800838a:	9b03      	ldr	r3, [sp, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d076      	beq.n	800847e <_dtoa_r+0x4de>
 8008390:	9b02      	ldr	r3, [sp, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	dd36      	ble.n	8008404 <_dtoa_r+0x464>
 8008396:	9b00      	ldr	r3, [sp, #0]
 8008398:	4650      	mov	r0, sl
 800839a:	4659      	mov	r1, fp
 800839c:	1e5f      	subs	r7, r3, #1
 800839e:	2200      	movs	r2, #0
 80083a0:	4b88      	ldr	r3, [pc, #544]	; (80085c4 <_dtoa_r+0x624>)
 80083a2:	f7f8 f949 	bl	8000638 <__aeabi_dmul>
 80083a6:	9e02      	ldr	r6, [sp, #8]
 80083a8:	4682      	mov	sl, r0
 80083aa:	468b      	mov	fp, r1
 80083ac:	3501      	adds	r5, #1
 80083ae:	4628      	mov	r0, r5
 80083b0:	f7f8 f8d8 	bl	8000564 <__aeabi_i2d>
 80083b4:	4652      	mov	r2, sl
 80083b6:	465b      	mov	r3, fp
 80083b8:	f7f8 f93e 	bl	8000638 <__aeabi_dmul>
 80083bc:	4b82      	ldr	r3, [pc, #520]	; (80085c8 <_dtoa_r+0x628>)
 80083be:	2200      	movs	r2, #0
 80083c0:	f7f7 ff84 	bl	80002cc <__adddf3>
 80083c4:	46d0      	mov	r8, sl
 80083c6:	46d9      	mov	r9, fp
 80083c8:	4682      	mov	sl, r0
 80083ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80083ce:	2e00      	cmp	r6, #0
 80083d0:	d158      	bne.n	8008484 <_dtoa_r+0x4e4>
 80083d2:	4b7e      	ldr	r3, [pc, #504]	; (80085cc <_dtoa_r+0x62c>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	4640      	mov	r0, r8
 80083d8:	4649      	mov	r1, r9
 80083da:	f7f7 ff75 	bl	80002c8 <__aeabi_dsub>
 80083de:	4652      	mov	r2, sl
 80083e0:	465b      	mov	r3, fp
 80083e2:	4680      	mov	r8, r0
 80083e4:	4689      	mov	r9, r1
 80083e6:	f7f8 fbb7 	bl	8000b58 <__aeabi_dcmpgt>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	f040 8295 	bne.w	800891a <_dtoa_r+0x97a>
 80083f0:	4652      	mov	r2, sl
 80083f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80083f6:	4640      	mov	r0, r8
 80083f8:	4649      	mov	r1, r9
 80083fa:	f7f8 fb8f 	bl	8000b1c <__aeabi_dcmplt>
 80083fe:	2800      	cmp	r0, #0
 8008400:	f040 8289 	bne.w	8008916 <_dtoa_r+0x976>
 8008404:	ec5b ab19 	vmov	sl, fp, d9
 8008408:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800840a:	2b00      	cmp	r3, #0
 800840c:	f2c0 8148 	blt.w	80086a0 <_dtoa_r+0x700>
 8008410:	9a00      	ldr	r2, [sp, #0]
 8008412:	2a0e      	cmp	r2, #14
 8008414:	f300 8144 	bgt.w	80086a0 <_dtoa_r+0x700>
 8008418:	4b67      	ldr	r3, [pc, #412]	; (80085b8 <_dtoa_r+0x618>)
 800841a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800841e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008424:	2b00      	cmp	r3, #0
 8008426:	f280 80d5 	bge.w	80085d4 <_dtoa_r+0x634>
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	f300 80d1 	bgt.w	80085d4 <_dtoa_r+0x634>
 8008432:	f040 826f 	bne.w	8008914 <_dtoa_r+0x974>
 8008436:	4b65      	ldr	r3, [pc, #404]	; (80085cc <_dtoa_r+0x62c>)
 8008438:	2200      	movs	r2, #0
 800843a:	4640      	mov	r0, r8
 800843c:	4649      	mov	r1, r9
 800843e:	f7f8 f8fb 	bl	8000638 <__aeabi_dmul>
 8008442:	4652      	mov	r2, sl
 8008444:	465b      	mov	r3, fp
 8008446:	f7f8 fb7d 	bl	8000b44 <__aeabi_dcmpge>
 800844a:	9e03      	ldr	r6, [sp, #12]
 800844c:	4637      	mov	r7, r6
 800844e:	2800      	cmp	r0, #0
 8008450:	f040 8245 	bne.w	80088de <_dtoa_r+0x93e>
 8008454:	9d01      	ldr	r5, [sp, #4]
 8008456:	2331      	movs	r3, #49	; 0x31
 8008458:	f805 3b01 	strb.w	r3, [r5], #1
 800845c:	9b00      	ldr	r3, [sp, #0]
 800845e:	3301      	adds	r3, #1
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	e240      	b.n	80088e6 <_dtoa_r+0x946>
 8008464:	07f2      	lsls	r2, r6, #31
 8008466:	d505      	bpl.n	8008474 <_dtoa_r+0x4d4>
 8008468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800846c:	f7f8 f8e4 	bl	8000638 <__aeabi_dmul>
 8008470:	3501      	adds	r5, #1
 8008472:	2301      	movs	r3, #1
 8008474:	1076      	asrs	r6, r6, #1
 8008476:	3708      	adds	r7, #8
 8008478:	e777      	b.n	800836a <_dtoa_r+0x3ca>
 800847a:	2502      	movs	r5, #2
 800847c:	e779      	b.n	8008372 <_dtoa_r+0x3d2>
 800847e:	9f00      	ldr	r7, [sp, #0]
 8008480:	9e03      	ldr	r6, [sp, #12]
 8008482:	e794      	b.n	80083ae <_dtoa_r+0x40e>
 8008484:	9901      	ldr	r1, [sp, #4]
 8008486:	4b4c      	ldr	r3, [pc, #304]	; (80085b8 <_dtoa_r+0x618>)
 8008488:	4431      	add	r1, r6
 800848a:	910d      	str	r1, [sp, #52]	; 0x34
 800848c:	9908      	ldr	r1, [sp, #32]
 800848e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008492:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008496:	2900      	cmp	r1, #0
 8008498:	d043      	beq.n	8008522 <_dtoa_r+0x582>
 800849a:	494d      	ldr	r1, [pc, #308]	; (80085d0 <_dtoa_r+0x630>)
 800849c:	2000      	movs	r0, #0
 800849e:	f7f8 f9f5 	bl	800088c <__aeabi_ddiv>
 80084a2:	4652      	mov	r2, sl
 80084a4:	465b      	mov	r3, fp
 80084a6:	f7f7 ff0f 	bl	80002c8 <__aeabi_dsub>
 80084aa:	9d01      	ldr	r5, [sp, #4]
 80084ac:	4682      	mov	sl, r0
 80084ae:	468b      	mov	fp, r1
 80084b0:	4649      	mov	r1, r9
 80084b2:	4640      	mov	r0, r8
 80084b4:	f7f8 fb70 	bl	8000b98 <__aeabi_d2iz>
 80084b8:	4606      	mov	r6, r0
 80084ba:	f7f8 f853 	bl	8000564 <__aeabi_i2d>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4640      	mov	r0, r8
 80084c4:	4649      	mov	r1, r9
 80084c6:	f7f7 feff 	bl	80002c8 <__aeabi_dsub>
 80084ca:	3630      	adds	r6, #48	; 0x30
 80084cc:	f805 6b01 	strb.w	r6, [r5], #1
 80084d0:	4652      	mov	r2, sl
 80084d2:	465b      	mov	r3, fp
 80084d4:	4680      	mov	r8, r0
 80084d6:	4689      	mov	r9, r1
 80084d8:	f7f8 fb20 	bl	8000b1c <__aeabi_dcmplt>
 80084dc:	2800      	cmp	r0, #0
 80084de:	d163      	bne.n	80085a8 <_dtoa_r+0x608>
 80084e0:	4642      	mov	r2, r8
 80084e2:	464b      	mov	r3, r9
 80084e4:	4936      	ldr	r1, [pc, #216]	; (80085c0 <_dtoa_r+0x620>)
 80084e6:	2000      	movs	r0, #0
 80084e8:	f7f7 feee 	bl	80002c8 <__aeabi_dsub>
 80084ec:	4652      	mov	r2, sl
 80084ee:	465b      	mov	r3, fp
 80084f0:	f7f8 fb14 	bl	8000b1c <__aeabi_dcmplt>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	f040 80b5 	bne.w	8008664 <_dtoa_r+0x6c4>
 80084fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084fc:	429d      	cmp	r5, r3
 80084fe:	d081      	beq.n	8008404 <_dtoa_r+0x464>
 8008500:	4b30      	ldr	r3, [pc, #192]	; (80085c4 <_dtoa_r+0x624>)
 8008502:	2200      	movs	r2, #0
 8008504:	4650      	mov	r0, sl
 8008506:	4659      	mov	r1, fp
 8008508:	f7f8 f896 	bl	8000638 <__aeabi_dmul>
 800850c:	4b2d      	ldr	r3, [pc, #180]	; (80085c4 <_dtoa_r+0x624>)
 800850e:	4682      	mov	sl, r0
 8008510:	468b      	mov	fp, r1
 8008512:	4640      	mov	r0, r8
 8008514:	4649      	mov	r1, r9
 8008516:	2200      	movs	r2, #0
 8008518:	f7f8 f88e 	bl	8000638 <__aeabi_dmul>
 800851c:	4680      	mov	r8, r0
 800851e:	4689      	mov	r9, r1
 8008520:	e7c6      	b.n	80084b0 <_dtoa_r+0x510>
 8008522:	4650      	mov	r0, sl
 8008524:	4659      	mov	r1, fp
 8008526:	f7f8 f887 	bl	8000638 <__aeabi_dmul>
 800852a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800852c:	9d01      	ldr	r5, [sp, #4]
 800852e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008530:	4682      	mov	sl, r0
 8008532:	468b      	mov	fp, r1
 8008534:	4649      	mov	r1, r9
 8008536:	4640      	mov	r0, r8
 8008538:	f7f8 fb2e 	bl	8000b98 <__aeabi_d2iz>
 800853c:	4606      	mov	r6, r0
 800853e:	f7f8 f811 	bl	8000564 <__aeabi_i2d>
 8008542:	3630      	adds	r6, #48	; 0x30
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4640      	mov	r0, r8
 800854a:	4649      	mov	r1, r9
 800854c:	f7f7 febc 	bl	80002c8 <__aeabi_dsub>
 8008550:	f805 6b01 	strb.w	r6, [r5], #1
 8008554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008556:	429d      	cmp	r5, r3
 8008558:	4680      	mov	r8, r0
 800855a:	4689      	mov	r9, r1
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	d124      	bne.n	80085ac <_dtoa_r+0x60c>
 8008562:	4b1b      	ldr	r3, [pc, #108]	; (80085d0 <_dtoa_r+0x630>)
 8008564:	4650      	mov	r0, sl
 8008566:	4659      	mov	r1, fp
 8008568:	f7f7 feb0 	bl	80002cc <__adddf3>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4640      	mov	r0, r8
 8008572:	4649      	mov	r1, r9
 8008574:	f7f8 faf0 	bl	8000b58 <__aeabi_dcmpgt>
 8008578:	2800      	cmp	r0, #0
 800857a:	d173      	bne.n	8008664 <_dtoa_r+0x6c4>
 800857c:	4652      	mov	r2, sl
 800857e:	465b      	mov	r3, fp
 8008580:	4913      	ldr	r1, [pc, #76]	; (80085d0 <_dtoa_r+0x630>)
 8008582:	2000      	movs	r0, #0
 8008584:	f7f7 fea0 	bl	80002c8 <__aeabi_dsub>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	4640      	mov	r0, r8
 800858e:	4649      	mov	r1, r9
 8008590:	f7f8 fac4 	bl	8000b1c <__aeabi_dcmplt>
 8008594:	2800      	cmp	r0, #0
 8008596:	f43f af35 	beq.w	8008404 <_dtoa_r+0x464>
 800859a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800859c:	1e6b      	subs	r3, r5, #1
 800859e:	930f      	str	r3, [sp, #60]	; 0x3c
 80085a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085a4:	2b30      	cmp	r3, #48	; 0x30
 80085a6:	d0f8      	beq.n	800859a <_dtoa_r+0x5fa>
 80085a8:	9700      	str	r7, [sp, #0]
 80085aa:	e049      	b.n	8008640 <_dtoa_r+0x6a0>
 80085ac:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <_dtoa_r+0x624>)
 80085ae:	f7f8 f843 	bl	8000638 <__aeabi_dmul>
 80085b2:	4680      	mov	r8, r0
 80085b4:	4689      	mov	r9, r1
 80085b6:	e7bd      	b.n	8008534 <_dtoa_r+0x594>
 80085b8:	0800b9b0 	.word	0x0800b9b0
 80085bc:	0800b988 	.word	0x0800b988
 80085c0:	3ff00000 	.word	0x3ff00000
 80085c4:	40240000 	.word	0x40240000
 80085c8:	401c0000 	.word	0x401c0000
 80085cc:	40140000 	.word	0x40140000
 80085d0:	3fe00000 	.word	0x3fe00000
 80085d4:	9d01      	ldr	r5, [sp, #4]
 80085d6:	4656      	mov	r6, sl
 80085d8:	465f      	mov	r7, fp
 80085da:	4642      	mov	r2, r8
 80085dc:	464b      	mov	r3, r9
 80085de:	4630      	mov	r0, r6
 80085e0:	4639      	mov	r1, r7
 80085e2:	f7f8 f953 	bl	800088c <__aeabi_ddiv>
 80085e6:	f7f8 fad7 	bl	8000b98 <__aeabi_d2iz>
 80085ea:	4682      	mov	sl, r0
 80085ec:	f7f7 ffba 	bl	8000564 <__aeabi_i2d>
 80085f0:	4642      	mov	r2, r8
 80085f2:	464b      	mov	r3, r9
 80085f4:	f7f8 f820 	bl	8000638 <__aeabi_dmul>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4630      	mov	r0, r6
 80085fe:	4639      	mov	r1, r7
 8008600:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008604:	f7f7 fe60 	bl	80002c8 <__aeabi_dsub>
 8008608:	f805 6b01 	strb.w	r6, [r5], #1
 800860c:	9e01      	ldr	r6, [sp, #4]
 800860e:	9f03      	ldr	r7, [sp, #12]
 8008610:	1bae      	subs	r6, r5, r6
 8008612:	42b7      	cmp	r7, r6
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	d135      	bne.n	8008686 <_dtoa_r+0x6e6>
 800861a:	f7f7 fe57 	bl	80002cc <__adddf3>
 800861e:	4642      	mov	r2, r8
 8008620:	464b      	mov	r3, r9
 8008622:	4606      	mov	r6, r0
 8008624:	460f      	mov	r7, r1
 8008626:	f7f8 fa97 	bl	8000b58 <__aeabi_dcmpgt>
 800862a:	b9d0      	cbnz	r0, 8008662 <_dtoa_r+0x6c2>
 800862c:	4642      	mov	r2, r8
 800862e:	464b      	mov	r3, r9
 8008630:	4630      	mov	r0, r6
 8008632:	4639      	mov	r1, r7
 8008634:	f7f8 fa68 	bl	8000b08 <__aeabi_dcmpeq>
 8008638:	b110      	cbz	r0, 8008640 <_dtoa_r+0x6a0>
 800863a:	f01a 0f01 	tst.w	sl, #1
 800863e:	d110      	bne.n	8008662 <_dtoa_r+0x6c2>
 8008640:	4620      	mov	r0, r4
 8008642:	ee18 1a10 	vmov	r1, s16
 8008646:	f000 faf3 	bl	8008c30 <_Bfree>
 800864a:	2300      	movs	r3, #0
 800864c:	9800      	ldr	r0, [sp, #0]
 800864e:	702b      	strb	r3, [r5, #0]
 8008650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008652:	3001      	adds	r0, #1
 8008654:	6018      	str	r0, [r3, #0]
 8008656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008658:	2b00      	cmp	r3, #0
 800865a:	f43f acf1 	beq.w	8008040 <_dtoa_r+0xa0>
 800865e:	601d      	str	r5, [r3, #0]
 8008660:	e4ee      	b.n	8008040 <_dtoa_r+0xa0>
 8008662:	9f00      	ldr	r7, [sp, #0]
 8008664:	462b      	mov	r3, r5
 8008666:	461d      	mov	r5, r3
 8008668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800866c:	2a39      	cmp	r2, #57	; 0x39
 800866e:	d106      	bne.n	800867e <_dtoa_r+0x6de>
 8008670:	9a01      	ldr	r2, [sp, #4]
 8008672:	429a      	cmp	r2, r3
 8008674:	d1f7      	bne.n	8008666 <_dtoa_r+0x6c6>
 8008676:	9901      	ldr	r1, [sp, #4]
 8008678:	2230      	movs	r2, #48	; 0x30
 800867a:	3701      	adds	r7, #1
 800867c:	700a      	strb	r2, [r1, #0]
 800867e:	781a      	ldrb	r2, [r3, #0]
 8008680:	3201      	adds	r2, #1
 8008682:	701a      	strb	r2, [r3, #0]
 8008684:	e790      	b.n	80085a8 <_dtoa_r+0x608>
 8008686:	4ba6      	ldr	r3, [pc, #664]	; (8008920 <_dtoa_r+0x980>)
 8008688:	2200      	movs	r2, #0
 800868a:	f7f7 ffd5 	bl	8000638 <__aeabi_dmul>
 800868e:	2200      	movs	r2, #0
 8008690:	2300      	movs	r3, #0
 8008692:	4606      	mov	r6, r0
 8008694:	460f      	mov	r7, r1
 8008696:	f7f8 fa37 	bl	8000b08 <__aeabi_dcmpeq>
 800869a:	2800      	cmp	r0, #0
 800869c:	d09d      	beq.n	80085da <_dtoa_r+0x63a>
 800869e:	e7cf      	b.n	8008640 <_dtoa_r+0x6a0>
 80086a0:	9a08      	ldr	r2, [sp, #32]
 80086a2:	2a00      	cmp	r2, #0
 80086a4:	f000 80d7 	beq.w	8008856 <_dtoa_r+0x8b6>
 80086a8:	9a06      	ldr	r2, [sp, #24]
 80086aa:	2a01      	cmp	r2, #1
 80086ac:	f300 80ba 	bgt.w	8008824 <_dtoa_r+0x884>
 80086b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086b2:	2a00      	cmp	r2, #0
 80086b4:	f000 80b2 	beq.w	800881c <_dtoa_r+0x87c>
 80086b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086bc:	9e07      	ldr	r6, [sp, #28]
 80086be:	9d04      	ldr	r5, [sp, #16]
 80086c0:	9a04      	ldr	r2, [sp, #16]
 80086c2:	441a      	add	r2, r3
 80086c4:	9204      	str	r2, [sp, #16]
 80086c6:	9a05      	ldr	r2, [sp, #20]
 80086c8:	2101      	movs	r1, #1
 80086ca:	441a      	add	r2, r3
 80086cc:	4620      	mov	r0, r4
 80086ce:	9205      	str	r2, [sp, #20]
 80086d0:	f000 fb66 	bl	8008da0 <__i2b>
 80086d4:	4607      	mov	r7, r0
 80086d6:	2d00      	cmp	r5, #0
 80086d8:	dd0c      	ble.n	80086f4 <_dtoa_r+0x754>
 80086da:	9b05      	ldr	r3, [sp, #20]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	dd09      	ble.n	80086f4 <_dtoa_r+0x754>
 80086e0:	42ab      	cmp	r3, r5
 80086e2:	9a04      	ldr	r2, [sp, #16]
 80086e4:	bfa8      	it	ge
 80086e6:	462b      	movge	r3, r5
 80086e8:	1ad2      	subs	r2, r2, r3
 80086ea:	9204      	str	r2, [sp, #16]
 80086ec:	9a05      	ldr	r2, [sp, #20]
 80086ee:	1aed      	subs	r5, r5, r3
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	9305      	str	r3, [sp, #20]
 80086f4:	9b07      	ldr	r3, [sp, #28]
 80086f6:	b31b      	cbz	r3, 8008740 <_dtoa_r+0x7a0>
 80086f8:	9b08      	ldr	r3, [sp, #32]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f000 80af 	beq.w	800885e <_dtoa_r+0x8be>
 8008700:	2e00      	cmp	r6, #0
 8008702:	dd13      	ble.n	800872c <_dtoa_r+0x78c>
 8008704:	4639      	mov	r1, r7
 8008706:	4632      	mov	r2, r6
 8008708:	4620      	mov	r0, r4
 800870a:	f000 fc09 	bl	8008f20 <__pow5mult>
 800870e:	ee18 2a10 	vmov	r2, s16
 8008712:	4601      	mov	r1, r0
 8008714:	4607      	mov	r7, r0
 8008716:	4620      	mov	r0, r4
 8008718:	f000 fb58 	bl	8008dcc <__multiply>
 800871c:	ee18 1a10 	vmov	r1, s16
 8008720:	4680      	mov	r8, r0
 8008722:	4620      	mov	r0, r4
 8008724:	f000 fa84 	bl	8008c30 <_Bfree>
 8008728:	ee08 8a10 	vmov	s16, r8
 800872c:	9b07      	ldr	r3, [sp, #28]
 800872e:	1b9a      	subs	r2, r3, r6
 8008730:	d006      	beq.n	8008740 <_dtoa_r+0x7a0>
 8008732:	ee18 1a10 	vmov	r1, s16
 8008736:	4620      	mov	r0, r4
 8008738:	f000 fbf2 	bl	8008f20 <__pow5mult>
 800873c:	ee08 0a10 	vmov	s16, r0
 8008740:	2101      	movs	r1, #1
 8008742:	4620      	mov	r0, r4
 8008744:	f000 fb2c 	bl	8008da0 <__i2b>
 8008748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800874a:	2b00      	cmp	r3, #0
 800874c:	4606      	mov	r6, r0
 800874e:	f340 8088 	ble.w	8008862 <_dtoa_r+0x8c2>
 8008752:	461a      	mov	r2, r3
 8008754:	4601      	mov	r1, r0
 8008756:	4620      	mov	r0, r4
 8008758:	f000 fbe2 	bl	8008f20 <__pow5mult>
 800875c:	9b06      	ldr	r3, [sp, #24]
 800875e:	2b01      	cmp	r3, #1
 8008760:	4606      	mov	r6, r0
 8008762:	f340 8081 	ble.w	8008868 <_dtoa_r+0x8c8>
 8008766:	f04f 0800 	mov.w	r8, #0
 800876a:	6933      	ldr	r3, [r6, #16]
 800876c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008770:	6918      	ldr	r0, [r3, #16]
 8008772:	f000 fac5 	bl	8008d00 <__hi0bits>
 8008776:	f1c0 0020 	rsb	r0, r0, #32
 800877a:	9b05      	ldr	r3, [sp, #20]
 800877c:	4418      	add	r0, r3
 800877e:	f010 001f 	ands.w	r0, r0, #31
 8008782:	f000 8092 	beq.w	80088aa <_dtoa_r+0x90a>
 8008786:	f1c0 0320 	rsb	r3, r0, #32
 800878a:	2b04      	cmp	r3, #4
 800878c:	f340 808a 	ble.w	80088a4 <_dtoa_r+0x904>
 8008790:	f1c0 001c 	rsb	r0, r0, #28
 8008794:	9b04      	ldr	r3, [sp, #16]
 8008796:	4403      	add	r3, r0
 8008798:	9304      	str	r3, [sp, #16]
 800879a:	9b05      	ldr	r3, [sp, #20]
 800879c:	4403      	add	r3, r0
 800879e:	4405      	add	r5, r0
 80087a0:	9305      	str	r3, [sp, #20]
 80087a2:	9b04      	ldr	r3, [sp, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	dd07      	ble.n	80087b8 <_dtoa_r+0x818>
 80087a8:	ee18 1a10 	vmov	r1, s16
 80087ac:	461a      	mov	r2, r3
 80087ae:	4620      	mov	r0, r4
 80087b0:	f000 fc10 	bl	8008fd4 <__lshift>
 80087b4:	ee08 0a10 	vmov	s16, r0
 80087b8:	9b05      	ldr	r3, [sp, #20]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	dd05      	ble.n	80087ca <_dtoa_r+0x82a>
 80087be:	4631      	mov	r1, r6
 80087c0:	461a      	mov	r2, r3
 80087c2:	4620      	mov	r0, r4
 80087c4:	f000 fc06 	bl	8008fd4 <__lshift>
 80087c8:	4606      	mov	r6, r0
 80087ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d06e      	beq.n	80088ae <_dtoa_r+0x90e>
 80087d0:	ee18 0a10 	vmov	r0, s16
 80087d4:	4631      	mov	r1, r6
 80087d6:	f000 fc6d 	bl	80090b4 <__mcmp>
 80087da:	2800      	cmp	r0, #0
 80087dc:	da67      	bge.n	80088ae <_dtoa_r+0x90e>
 80087de:	9b00      	ldr	r3, [sp, #0]
 80087e0:	3b01      	subs	r3, #1
 80087e2:	ee18 1a10 	vmov	r1, s16
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	220a      	movs	r2, #10
 80087ea:	2300      	movs	r3, #0
 80087ec:	4620      	mov	r0, r4
 80087ee:	f000 fa41 	bl	8008c74 <__multadd>
 80087f2:	9b08      	ldr	r3, [sp, #32]
 80087f4:	ee08 0a10 	vmov	s16, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 81b1 	beq.w	8008b60 <_dtoa_r+0xbc0>
 80087fe:	2300      	movs	r3, #0
 8008800:	4639      	mov	r1, r7
 8008802:	220a      	movs	r2, #10
 8008804:	4620      	mov	r0, r4
 8008806:	f000 fa35 	bl	8008c74 <__multadd>
 800880a:	9b02      	ldr	r3, [sp, #8]
 800880c:	2b00      	cmp	r3, #0
 800880e:	4607      	mov	r7, r0
 8008810:	f300 808e 	bgt.w	8008930 <_dtoa_r+0x990>
 8008814:	9b06      	ldr	r3, [sp, #24]
 8008816:	2b02      	cmp	r3, #2
 8008818:	dc51      	bgt.n	80088be <_dtoa_r+0x91e>
 800881a:	e089      	b.n	8008930 <_dtoa_r+0x990>
 800881c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800881e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008822:	e74b      	b.n	80086bc <_dtoa_r+0x71c>
 8008824:	9b03      	ldr	r3, [sp, #12]
 8008826:	1e5e      	subs	r6, r3, #1
 8008828:	9b07      	ldr	r3, [sp, #28]
 800882a:	42b3      	cmp	r3, r6
 800882c:	bfbf      	itttt	lt
 800882e:	9b07      	ldrlt	r3, [sp, #28]
 8008830:	9607      	strlt	r6, [sp, #28]
 8008832:	1af2      	sublt	r2, r6, r3
 8008834:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008836:	bfb6      	itet	lt
 8008838:	189b      	addlt	r3, r3, r2
 800883a:	1b9e      	subge	r6, r3, r6
 800883c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800883e:	9b03      	ldr	r3, [sp, #12]
 8008840:	bfb8      	it	lt
 8008842:	2600      	movlt	r6, #0
 8008844:	2b00      	cmp	r3, #0
 8008846:	bfb7      	itett	lt
 8008848:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800884c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008850:	1a9d      	sublt	r5, r3, r2
 8008852:	2300      	movlt	r3, #0
 8008854:	e734      	b.n	80086c0 <_dtoa_r+0x720>
 8008856:	9e07      	ldr	r6, [sp, #28]
 8008858:	9d04      	ldr	r5, [sp, #16]
 800885a:	9f08      	ldr	r7, [sp, #32]
 800885c:	e73b      	b.n	80086d6 <_dtoa_r+0x736>
 800885e:	9a07      	ldr	r2, [sp, #28]
 8008860:	e767      	b.n	8008732 <_dtoa_r+0x792>
 8008862:	9b06      	ldr	r3, [sp, #24]
 8008864:	2b01      	cmp	r3, #1
 8008866:	dc18      	bgt.n	800889a <_dtoa_r+0x8fa>
 8008868:	f1ba 0f00 	cmp.w	sl, #0
 800886c:	d115      	bne.n	800889a <_dtoa_r+0x8fa>
 800886e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008872:	b993      	cbnz	r3, 800889a <_dtoa_r+0x8fa>
 8008874:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008878:	0d1b      	lsrs	r3, r3, #20
 800887a:	051b      	lsls	r3, r3, #20
 800887c:	b183      	cbz	r3, 80088a0 <_dtoa_r+0x900>
 800887e:	9b04      	ldr	r3, [sp, #16]
 8008880:	3301      	adds	r3, #1
 8008882:	9304      	str	r3, [sp, #16]
 8008884:	9b05      	ldr	r3, [sp, #20]
 8008886:	3301      	adds	r3, #1
 8008888:	9305      	str	r3, [sp, #20]
 800888a:	f04f 0801 	mov.w	r8, #1
 800888e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008890:	2b00      	cmp	r3, #0
 8008892:	f47f af6a 	bne.w	800876a <_dtoa_r+0x7ca>
 8008896:	2001      	movs	r0, #1
 8008898:	e76f      	b.n	800877a <_dtoa_r+0x7da>
 800889a:	f04f 0800 	mov.w	r8, #0
 800889e:	e7f6      	b.n	800888e <_dtoa_r+0x8ee>
 80088a0:	4698      	mov	r8, r3
 80088a2:	e7f4      	b.n	800888e <_dtoa_r+0x8ee>
 80088a4:	f43f af7d 	beq.w	80087a2 <_dtoa_r+0x802>
 80088a8:	4618      	mov	r0, r3
 80088aa:	301c      	adds	r0, #28
 80088ac:	e772      	b.n	8008794 <_dtoa_r+0x7f4>
 80088ae:	9b03      	ldr	r3, [sp, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	dc37      	bgt.n	8008924 <_dtoa_r+0x984>
 80088b4:	9b06      	ldr	r3, [sp, #24]
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	dd34      	ble.n	8008924 <_dtoa_r+0x984>
 80088ba:	9b03      	ldr	r3, [sp, #12]
 80088bc:	9302      	str	r3, [sp, #8]
 80088be:	9b02      	ldr	r3, [sp, #8]
 80088c0:	b96b      	cbnz	r3, 80088de <_dtoa_r+0x93e>
 80088c2:	4631      	mov	r1, r6
 80088c4:	2205      	movs	r2, #5
 80088c6:	4620      	mov	r0, r4
 80088c8:	f000 f9d4 	bl	8008c74 <__multadd>
 80088cc:	4601      	mov	r1, r0
 80088ce:	4606      	mov	r6, r0
 80088d0:	ee18 0a10 	vmov	r0, s16
 80088d4:	f000 fbee 	bl	80090b4 <__mcmp>
 80088d8:	2800      	cmp	r0, #0
 80088da:	f73f adbb 	bgt.w	8008454 <_dtoa_r+0x4b4>
 80088de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e0:	9d01      	ldr	r5, [sp, #4]
 80088e2:	43db      	mvns	r3, r3
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	f04f 0800 	mov.w	r8, #0
 80088ea:	4631      	mov	r1, r6
 80088ec:	4620      	mov	r0, r4
 80088ee:	f000 f99f 	bl	8008c30 <_Bfree>
 80088f2:	2f00      	cmp	r7, #0
 80088f4:	f43f aea4 	beq.w	8008640 <_dtoa_r+0x6a0>
 80088f8:	f1b8 0f00 	cmp.w	r8, #0
 80088fc:	d005      	beq.n	800890a <_dtoa_r+0x96a>
 80088fe:	45b8      	cmp	r8, r7
 8008900:	d003      	beq.n	800890a <_dtoa_r+0x96a>
 8008902:	4641      	mov	r1, r8
 8008904:	4620      	mov	r0, r4
 8008906:	f000 f993 	bl	8008c30 <_Bfree>
 800890a:	4639      	mov	r1, r7
 800890c:	4620      	mov	r0, r4
 800890e:	f000 f98f 	bl	8008c30 <_Bfree>
 8008912:	e695      	b.n	8008640 <_dtoa_r+0x6a0>
 8008914:	2600      	movs	r6, #0
 8008916:	4637      	mov	r7, r6
 8008918:	e7e1      	b.n	80088de <_dtoa_r+0x93e>
 800891a:	9700      	str	r7, [sp, #0]
 800891c:	4637      	mov	r7, r6
 800891e:	e599      	b.n	8008454 <_dtoa_r+0x4b4>
 8008920:	40240000 	.word	0x40240000
 8008924:	9b08      	ldr	r3, [sp, #32]
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 80ca 	beq.w	8008ac0 <_dtoa_r+0xb20>
 800892c:	9b03      	ldr	r3, [sp, #12]
 800892e:	9302      	str	r3, [sp, #8]
 8008930:	2d00      	cmp	r5, #0
 8008932:	dd05      	ble.n	8008940 <_dtoa_r+0x9a0>
 8008934:	4639      	mov	r1, r7
 8008936:	462a      	mov	r2, r5
 8008938:	4620      	mov	r0, r4
 800893a:	f000 fb4b 	bl	8008fd4 <__lshift>
 800893e:	4607      	mov	r7, r0
 8008940:	f1b8 0f00 	cmp.w	r8, #0
 8008944:	d05b      	beq.n	80089fe <_dtoa_r+0xa5e>
 8008946:	6879      	ldr	r1, [r7, #4]
 8008948:	4620      	mov	r0, r4
 800894a:	f000 f931 	bl	8008bb0 <_Balloc>
 800894e:	4605      	mov	r5, r0
 8008950:	b928      	cbnz	r0, 800895e <_dtoa_r+0x9be>
 8008952:	4b87      	ldr	r3, [pc, #540]	; (8008b70 <_dtoa_r+0xbd0>)
 8008954:	4602      	mov	r2, r0
 8008956:	f240 21ea 	movw	r1, #746	; 0x2ea
 800895a:	f7ff bb3b 	b.w	8007fd4 <_dtoa_r+0x34>
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	3202      	adds	r2, #2
 8008962:	0092      	lsls	r2, r2, #2
 8008964:	f107 010c 	add.w	r1, r7, #12
 8008968:	300c      	adds	r0, #12
 800896a:	f000 f913 	bl	8008b94 <memcpy>
 800896e:	2201      	movs	r2, #1
 8008970:	4629      	mov	r1, r5
 8008972:	4620      	mov	r0, r4
 8008974:	f000 fb2e 	bl	8008fd4 <__lshift>
 8008978:	9b01      	ldr	r3, [sp, #4]
 800897a:	f103 0901 	add.w	r9, r3, #1
 800897e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008982:	4413      	add	r3, r2
 8008984:	9305      	str	r3, [sp, #20]
 8008986:	f00a 0301 	and.w	r3, sl, #1
 800898a:	46b8      	mov	r8, r7
 800898c:	9304      	str	r3, [sp, #16]
 800898e:	4607      	mov	r7, r0
 8008990:	4631      	mov	r1, r6
 8008992:	ee18 0a10 	vmov	r0, s16
 8008996:	f7ff fa77 	bl	8007e88 <quorem>
 800899a:	4641      	mov	r1, r8
 800899c:	9002      	str	r0, [sp, #8]
 800899e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80089a2:	ee18 0a10 	vmov	r0, s16
 80089a6:	f000 fb85 	bl	80090b4 <__mcmp>
 80089aa:	463a      	mov	r2, r7
 80089ac:	9003      	str	r0, [sp, #12]
 80089ae:	4631      	mov	r1, r6
 80089b0:	4620      	mov	r0, r4
 80089b2:	f000 fb9b 	bl	80090ec <__mdiff>
 80089b6:	68c2      	ldr	r2, [r0, #12]
 80089b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80089bc:	4605      	mov	r5, r0
 80089be:	bb02      	cbnz	r2, 8008a02 <_dtoa_r+0xa62>
 80089c0:	4601      	mov	r1, r0
 80089c2:	ee18 0a10 	vmov	r0, s16
 80089c6:	f000 fb75 	bl	80090b4 <__mcmp>
 80089ca:	4602      	mov	r2, r0
 80089cc:	4629      	mov	r1, r5
 80089ce:	4620      	mov	r0, r4
 80089d0:	9207      	str	r2, [sp, #28]
 80089d2:	f000 f92d 	bl	8008c30 <_Bfree>
 80089d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80089da:	ea43 0102 	orr.w	r1, r3, r2
 80089de:	9b04      	ldr	r3, [sp, #16]
 80089e0:	430b      	orrs	r3, r1
 80089e2:	464d      	mov	r5, r9
 80089e4:	d10f      	bne.n	8008a06 <_dtoa_r+0xa66>
 80089e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089ea:	d02a      	beq.n	8008a42 <_dtoa_r+0xaa2>
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	dd02      	ble.n	80089f8 <_dtoa_r+0xa58>
 80089f2:	9b02      	ldr	r3, [sp, #8]
 80089f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80089f8:	f88b a000 	strb.w	sl, [fp]
 80089fc:	e775      	b.n	80088ea <_dtoa_r+0x94a>
 80089fe:	4638      	mov	r0, r7
 8008a00:	e7ba      	b.n	8008978 <_dtoa_r+0x9d8>
 8008a02:	2201      	movs	r2, #1
 8008a04:	e7e2      	b.n	80089cc <_dtoa_r+0xa2c>
 8008a06:	9b03      	ldr	r3, [sp, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	db04      	blt.n	8008a16 <_dtoa_r+0xa76>
 8008a0c:	9906      	ldr	r1, [sp, #24]
 8008a0e:	430b      	orrs	r3, r1
 8008a10:	9904      	ldr	r1, [sp, #16]
 8008a12:	430b      	orrs	r3, r1
 8008a14:	d122      	bne.n	8008a5c <_dtoa_r+0xabc>
 8008a16:	2a00      	cmp	r2, #0
 8008a18:	ddee      	ble.n	80089f8 <_dtoa_r+0xa58>
 8008a1a:	ee18 1a10 	vmov	r1, s16
 8008a1e:	2201      	movs	r2, #1
 8008a20:	4620      	mov	r0, r4
 8008a22:	f000 fad7 	bl	8008fd4 <__lshift>
 8008a26:	4631      	mov	r1, r6
 8008a28:	ee08 0a10 	vmov	s16, r0
 8008a2c:	f000 fb42 	bl	80090b4 <__mcmp>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	dc03      	bgt.n	8008a3c <_dtoa_r+0xa9c>
 8008a34:	d1e0      	bne.n	80089f8 <_dtoa_r+0xa58>
 8008a36:	f01a 0f01 	tst.w	sl, #1
 8008a3a:	d0dd      	beq.n	80089f8 <_dtoa_r+0xa58>
 8008a3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a40:	d1d7      	bne.n	80089f2 <_dtoa_r+0xa52>
 8008a42:	2339      	movs	r3, #57	; 0x39
 8008a44:	f88b 3000 	strb.w	r3, [fp]
 8008a48:	462b      	mov	r3, r5
 8008a4a:	461d      	mov	r5, r3
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a52:	2a39      	cmp	r2, #57	; 0x39
 8008a54:	d071      	beq.n	8008b3a <_dtoa_r+0xb9a>
 8008a56:	3201      	adds	r2, #1
 8008a58:	701a      	strb	r2, [r3, #0]
 8008a5a:	e746      	b.n	80088ea <_dtoa_r+0x94a>
 8008a5c:	2a00      	cmp	r2, #0
 8008a5e:	dd07      	ble.n	8008a70 <_dtoa_r+0xad0>
 8008a60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a64:	d0ed      	beq.n	8008a42 <_dtoa_r+0xaa2>
 8008a66:	f10a 0301 	add.w	r3, sl, #1
 8008a6a:	f88b 3000 	strb.w	r3, [fp]
 8008a6e:	e73c      	b.n	80088ea <_dtoa_r+0x94a>
 8008a70:	9b05      	ldr	r3, [sp, #20]
 8008a72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008a76:	4599      	cmp	r9, r3
 8008a78:	d047      	beq.n	8008b0a <_dtoa_r+0xb6a>
 8008a7a:	ee18 1a10 	vmov	r1, s16
 8008a7e:	2300      	movs	r3, #0
 8008a80:	220a      	movs	r2, #10
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 f8f6 	bl	8008c74 <__multadd>
 8008a88:	45b8      	cmp	r8, r7
 8008a8a:	ee08 0a10 	vmov	s16, r0
 8008a8e:	f04f 0300 	mov.w	r3, #0
 8008a92:	f04f 020a 	mov.w	r2, #10
 8008a96:	4641      	mov	r1, r8
 8008a98:	4620      	mov	r0, r4
 8008a9a:	d106      	bne.n	8008aaa <_dtoa_r+0xb0a>
 8008a9c:	f000 f8ea 	bl	8008c74 <__multadd>
 8008aa0:	4680      	mov	r8, r0
 8008aa2:	4607      	mov	r7, r0
 8008aa4:	f109 0901 	add.w	r9, r9, #1
 8008aa8:	e772      	b.n	8008990 <_dtoa_r+0x9f0>
 8008aaa:	f000 f8e3 	bl	8008c74 <__multadd>
 8008aae:	4639      	mov	r1, r7
 8008ab0:	4680      	mov	r8, r0
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	220a      	movs	r2, #10
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f000 f8dc 	bl	8008c74 <__multadd>
 8008abc:	4607      	mov	r7, r0
 8008abe:	e7f1      	b.n	8008aa4 <_dtoa_r+0xb04>
 8008ac0:	9b03      	ldr	r3, [sp, #12]
 8008ac2:	9302      	str	r3, [sp, #8]
 8008ac4:	9d01      	ldr	r5, [sp, #4]
 8008ac6:	ee18 0a10 	vmov	r0, s16
 8008aca:	4631      	mov	r1, r6
 8008acc:	f7ff f9dc 	bl	8007e88 <quorem>
 8008ad0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008ad4:	9b01      	ldr	r3, [sp, #4]
 8008ad6:	f805 ab01 	strb.w	sl, [r5], #1
 8008ada:	1aea      	subs	r2, r5, r3
 8008adc:	9b02      	ldr	r3, [sp, #8]
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	dd09      	ble.n	8008af6 <_dtoa_r+0xb56>
 8008ae2:	ee18 1a10 	vmov	r1, s16
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	220a      	movs	r2, #10
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 f8c2 	bl	8008c74 <__multadd>
 8008af0:	ee08 0a10 	vmov	s16, r0
 8008af4:	e7e7      	b.n	8008ac6 <_dtoa_r+0xb26>
 8008af6:	9b02      	ldr	r3, [sp, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	bfc8      	it	gt
 8008afc:	461d      	movgt	r5, r3
 8008afe:	9b01      	ldr	r3, [sp, #4]
 8008b00:	bfd8      	it	le
 8008b02:	2501      	movle	r5, #1
 8008b04:	441d      	add	r5, r3
 8008b06:	f04f 0800 	mov.w	r8, #0
 8008b0a:	ee18 1a10 	vmov	r1, s16
 8008b0e:	2201      	movs	r2, #1
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 fa5f 	bl	8008fd4 <__lshift>
 8008b16:	4631      	mov	r1, r6
 8008b18:	ee08 0a10 	vmov	s16, r0
 8008b1c:	f000 faca 	bl	80090b4 <__mcmp>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	dc91      	bgt.n	8008a48 <_dtoa_r+0xaa8>
 8008b24:	d102      	bne.n	8008b2c <_dtoa_r+0xb8c>
 8008b26:	f01a 0f01 	tst.w	sl, #1
 8008b2a:	d18d      	bne.n	8008a48 <_dtoa_r+0xaa8>
 8008b2c:	462b      	mov	r3, r5
 8008b2e:	461d      	mov	r5, r3
 8008b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b34:	2a30      	cmp	r2, #48	; 0x30
 8008b36:	d0fa      	beq.n	8008b2e <_dtoa_r+0xb8e>
 8008b38:	e6d7      	b.n	80088ea <_dtoa_r+0x94a>
 8008b3a:	9a01      	ldr	r2, [sp, #4]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d184      	bne.n	8008a4a <_dtoa_r+0xaaa>
 8008b40:	9b00      	ldr	r3, [sp, #0]
 8008b42:	3301      	adds	r3, #1
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	2331      	movs	r3, #49	; 0x31
 8008b48:	7013      	strb	r3, [r2, #0]
 8008b4a:	e6ce      	b.n	80088ea <_dtoa_r+0x94a>
 8008b4c:	4b09      	ldr	r3, [pc, #36]	; (8008b74 <_dtoa_r+0xbd4>)
 8008b4e:	f7ff ba95 	b.w	800807c <_dtoa_r+0xdc>
 8008b52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f47f aa6e 	bne.w	8008036 <_dtoa_r+0x96>
 8008b5a:	4b07      	ldr	r3, [pc, #28]	; (8008b78 <_dtoa_r+0xbd8>)
 8008b5c:	f7ff ba8e 	b.w	800807c <_dtoa_r+0xdc>
 8008b60:	9b02      	ldr	r3, [sp, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	dcae      	bgt.n	8008ac4 <_dtoa_r+0xb24>
 8008b66:	9b06      	ldr	r3, [sp, #24]
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	f73f aea8 	bgt.w	80088be <_dtoa_r+0x91e>
 8008b6e:	e7a9      	b.n	8008ac4 <_dtoa_r+0xb24>
 8008b70:	0800b91b 	.word	0x0800b91b
 8008b74:	0800b878 	.word	0x0800b878
 8008b78:	0800b89c 	.word	0x0800b89c

08008b7c <_localeconv_r>:
 8008b7c:	4800      	ldr	r0, [pc, #0]	; (8008b80 <_localeconv_r+0x4>)
 8008b7e:	4770      	bx	lr
 8008b80:	20000188 	.word	0x20000188

08008b84 <malloc>:
 8008b84:	4b02      	ldr	r3, [pc, #8]	; (8008b90 <malloc+0xc>)
 8008b86:	4601      	mov	r1, r0
 8008b88:	6818      	ldr	r0, [r3, #0]
 8008b8a:	f000 bc17 	b.w	80093bc <_malloc_r>
 8008b8e:	bf00      	nop
 8008b90:	20000034 	.word	0x20000034

08008b94 <memcpy>:
 8008b94:	440a      	add	r2, r1
 8008b96:	4291      	cmp	r1, r2
 8008b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b9c:	d100      	bne.n	8008ba0 <memcpy+0xc>
 8008b9e:	4770      	bx	lr
 8008ba0:	b510      	push	{r4, lr}
 8008ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008baa:	4291      	cmp	r1, r2
 8008bac:	d1f9      	bne.n	8008ba2 <memcpy+0xe>
 8008bae:	bd10      	pop	{r4, pc}

08008bb0 <_Balloc>:
 8008bb0:	b570      	push	{r4, r5, r6, lr}
 8008bb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	460d      	mov	r5, r1
 8008bb8:	b976      	cbnz	r6, 8008bd8 <_Balloc+0x28>
 8008bba:	2010      	movs	r0, #16
 8008bbc:	f7ff ffe2 	bl	8008b84 <malloc>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	6260      	str	r0, [r4, #36]	; 0x24
 8008bc4:	b920      	cbnz	r0, 8008bd0 <_Balloc+0x20>
 8008bc6:	4b18      	ldr	r3, [pc, #96]	; (8008c28 <_Balloc+0x78>)
 8008bc8:	4818      	ldr	r0, [pc, #96]	; (8008c2c <_Balloc+0x7c>)
 8008bca:	2166      	movs	r1, #102	; 0x66
 8008bcc:	f000 fdd6 	bl	800977c <__assert_func>
 8008bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bd4:	6006      	str	r6, [r0, #0]
 8008bd6:	60c6      	str	r6, [r0, #12]
 8008bd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008bda:	68f3      	ldr	r3, [r6, #12]
 8008bdc:	b183      	cbz	r3, 8008c00 <_Balloc+0x50>
 8008bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008be6:	b9b8      	cbnz	r0, 8008c18 <_Balloc+0x68>
 8008be8:	2101      	movs	r1, #1
 8008bea:	fa01 f605 	lsl.w	r6, r1, r5
 8008bee:	1d72      	adds	r2, r6, #5
 8008bf0:	0092      	lsls	r2, r2, #2
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 fb60 	bl	80092b8 <_calloc_r>
 8008bf8:	b160      	cbz	r0, 8008c14 <_Balloc+0x64>
 8008bfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bfe:	e00e      	b.n	8008c1e <_Balloc+0x6e>
 8008c00:	2221      	movs	r2, #33	; 0x21
 8008c02:	2104      	movs	r1, #4
 8008c04:	4620      	mov	r0, r4
 8008c06:	f000 fb57 	bl	80092b8 <_calloc_r>
 8008c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c0c:	60f0      	str	r0, [r6, #12]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e4      	bne.n	8008bde <_Balloc+0x2e>
 8008c14:	2000      	movs	r0, #0
 8008c16:	bd70      	pop	{r4, r5, r6, pc}
 8008c18:	6802      	ldr	r2, [r0, #0]
 8008c1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c24:	e7f7      	b.n	8008c16 <_Balloc+0x66>
 8008c26:	bf00      	nop
 8008c28:	0800b8a9 	.word	0x0800b8a9
 8008c2c:	0800b92c 	.word	0x0800b92c

08008c30 <_Bfree>:
 8008c30:	b570      	push	{r4, r5, r6, lr}
 8008c32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c34:	4605      	mov	r5, r0
 8008c36:	460c      	mov	r4, r1
 8008c38:	b976      	cbnz	r6, 8008c58 <_Bfree+0x28>
 8008c3a:	2010      	movs	r0, #16
 8008c3c:	f7ff ffa2 	bl	8008b84 <malloc>
 8008c40:	4602      	mov	r2, r0
 8008c42:	6268      	str	r0, [r5, #36]	; 0x24
 8008c44:	b920      	cbnz	r0, 8008c50 <_Bfree+0x20>
 8008c46:	4b09      	ldr	r3, [pc, #36]	; (8008c6c <_Bfree+0x3c>)
 8008c48:	4809      	ldr	r0, [pc, #36]	; (8008c70 <_Bfree+0x40>)
 8008c4a:	218a      	movs	r1, #138	; 0x8a
 8008c4c:	f000 fd96 	bl	800977c <__assert_func>
 8008c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c54:	6006      	str	r6, [r0, #0]
 8008c56:	60c6      	str	r6, [r0, #12]
 8008c58:	b13c      	cbz	r4, 8008c6a <_Bfree+0x3a>
 8008c5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c5c:	6862      	ldr	r2, [r4, #4]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c64:	6021      	str	r1, [r4, #0]
 8008c66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c6a:	bd70      	pop	{r4, r5, r6, pc}
 8008c6c:	0800b8a9 	.word	0x0800b8a9
 8008c70:	0800b92c 	.word	0x0800b92c

08008c74 <__multadd>:
 8008c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c78:	690d      	ldr	r5, [r1, #16]
 8008c7a:	4607      	mov	r7, r0
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	461e      	mov	r6, r3
 8008c80:	f101 0c14 	add.w	ip, r1, #20
 8008c84:	2000      	movs	r0, #0
 8008c86:	f8dc 3000 	ldr.w	r3, [ip]
 8008c8a:	b299      	uxth	r1, r3
 8008c8c:	fb02 6101 	mla	r1, r2, r1, r6
 8008c90:	0c1e      	lsrs	r6, r3, #16
 8008c92:	0c0b      	lsrs	r3, r1, #16
 8008c94:	fb02 3306 	mla	r3, r2, r6, r3
 8008c98:	b289      	uxth	r1, r1
 8008c9a:	3001      	adds	r0, #1
 8008c9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ca0:	4285      	cmp	r5, r0
 8008ca2:	f84c 1b04 	str.w	r1, [ip], #4
 8008ca6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008caa:	dcec      	bgt.n	8008c86 <__multadd+0x12>
 8008cac:	b30e      	cbz	r6, 8008cf2 <__multadd+0x7e>
 8008cae:	68a3      	ldr	r3, [r4, #8]
 8008cb0:	42ab      	cmp	r3, r5
 8008cb2:	dc19      	bgt.n	8008ce8 <__multadd+0x74>
 8008cb4:	6861      	ldr	r1, [r4, #4]
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	3101      	adds	r1, #1
 8008cba:	f7ff ff79 	bl	8008bb0 <_Balloc>
 8008cbe:	4680      	mov	r8, r0
 8008cc0:	b928      	cbnz	r0, 8008cce <__multadd+0x5a>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	4b0c      	ldr	r3, [pc, #48]	; (8008cf8 <__multadd+0x84>)
 8008cc6:	480d      	ldr	r0, [pc, #52]	; (8008cfc <__multadd+0x88>)
 8008cc8:	21b5      	movs	r1, #181	; 0xb5
 8008cca:	f000 fd57 	bl	800977c <__assert_func>
 8008cce:	6922      	ldr	r2, [r4, #16]
 8008cd0:	3202      	adds	r2, #2
 8008cd2:	f104 010c 	add.w	r1, r4, #12
 8008cd6:	0092      	lsls	r2, r2, #2
 8008cd8:	300c      	adds	r0, #12
 8008cda:	f7ff ff5b 	bl	8008b94 <memcpy>
 8008cde:	4621      	mov	r1, r4
 8008ce0:	4638      	mov	r0, r7
 8008ce2:	f7ff ffa5 	bl	8008c30 <_Bfree>
 8008ce6:	4644      	mov	r4, r8
 8008ce8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cec:	3501      	adds	r5, #1
 8008cee:	615e      	str	r6, [r3, #20]
 8008cf0:	6125      	str	r5, [r4, #16]
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf8:	0800b91b 	.word	0x0800b91b
 8008cfc:	0800b92c 	.word	0x0800b92c

08008d00 <__hi0bits>:
 8008d00:	0c03      	lsrs	r3, r0, #16
 8008d02:	041b      	lsls	r3, r3, #16
 8008d04:	b9d3      	cbnz	r3, 8008d3c <__hi0bits+0x3c>
 8008d06:	0400      	lsls	r0, r0, #16
 8008d08:	2310      	movs	r3, #16
 8008d0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d0e:	bf04      	itt	eq
 8008d10:	0200      	lsleq	r0, r0, #8
 8008d12:	3308      	addeq	r3, #8
 8008d14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d18:	bf04      	itt	eq
 8008d1a:	0100      	lsleq	r0, r0, #4
 8008d1c:	3304      	addeq	r3, #4
 8008d1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d22:	bf04      	itt	eq
 8008d24:	0080      	lsleq	r0, r0, #2
 8008d26:	3302      	addeq	r3, #2
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	db05      	blt.n	8008d38 <__hi0bits+0x38>
 8008d2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d30:	f103 0301 	add.w	r3, r3, #1
 8008d34:	bf08      	it	eq
 8008d36:	2320      	moveq	r3, #32
 8008d38:	4618      	mov	r0, r3
 8008d3a:	4770      	bx	lr
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	e7e4      	b.n	8008d0a <__hi0bits+0xa>

08008d40 <__lo0bits>:
 8008d40:	6803      	ldr	r3, [r0, #0]
 8008d42:	f013 0207 	ands.w	r2, r3, #7
 8008d46:	4601      	mov	r1, r0
 8008d48:	d00b      	beq.n	8008d62 <__lo0bits+0x22>
 8008d4a:	07da      	lsls	r2, r3, #31
 8008d4c:	d423      	bmi.n	8008d96 <__lo0bits+0x56>
 8008d4e:	0798      	lsls	r0, r3, #30
 8008d50:	bf49      	itett	mi
 8008d52:	085b      	lsrmi	r3, r3, #1
 8008d54:	089b      	lsrpl	r3, r3, #2
 8008d56:	2001      	movmi	r0, #1
 8008d58:	600b      	strmi	r3, [r1, #0]
 8008d5a:	bf5c      	itt	pl
 8008d5c:	600b      	strpl	r3, [r1, #0]
 8008d5e:	2002      	movpl	r0, #2
 8008d60:	4770      	bx	lr
 8008d62:	b298      	uxth	r0, r3
 8008d64:	b9a8      	cbnz	r0, 8008d92 <__lo0bits+0x52>
 8008d66:	0c1b      	lsrs	r3, r3, #16
 8008d68:	2010      	movs	r0, #16
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	b90a      	cbnz	r2, 8008d72 <__lo0bits+0x32>
 8008d6e:	3008      	adds	r0, #8
 8008d70:	0a1b      	lsrs	r3, r3, #8
 8008d72:	071a      	lsls	r2, r3, #28
 8008d74:	bf04      	itt	eq
 8008d76:	091b      	lsreq	r3, r3, #4
 8008d78:	3004      	addeq	r0, #4
 8008d7a:	079a      	lsls	r2, r3, #30
 8008d7c:	bf04      	itt	eq
 8008d7e:	089b      	lsreq	r3, r3, #2
 8008d80:	3002      	addeq	r0, #2
 8008d82:	07da      	lsls	r2, r3, #31
 8008d84:	d403      	bmi.n	8008d8e <__lo0bits+0x4e>
 8008d86:	085b      	lsrs	r3, r3, #1
 8008d88:	f100 0001 	add.w	r0, r0, #1
 8008d8c:	d005      	beq.n	8008d9a <__lo0bits+0x5a>
 8008d8e:	600b      	str	r3, [r1, #0]
 8008d90:	4770      	bx	lr
 8008d92:	4610      	mov	r0, r2
 8008d94:	e7e9      	b.n	8008d6a <__lo0bits+0x2a>
 8008d96:	2000      	movs	r0, #0
 8008d98:	4770      	bx	lr
 8008d9a:	2020      	movs	r0, #32
 8008d9c:	4770      	bx	lr
	...

08008da0 <__i2b>:
 8008da0:	b510      	push	{r4, lr}
 8008da2:	460c      	mov	r4, r1
 8008da4:	2101      	movs	r1, #1
 8008da6:	f7ff ff03 	bl	8008bb0 <_Balloc>
 8008daa:	4602      	mov	r2, r0
 8008dac:	b928      	cbnz	r0, 8008dba <__i2b+0x1a>
 8008dae:	4b05      	ldr	r3, [pc, #20]	; (8008dc4 <__i2b+0x24>)
 8008db0:	4805      	ldr	r0, [pc, #20]	; (8008dc8 <__i2b+0x28>)
 8008db2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008db6:	f000 fce1 	bl	800977c <__assert_func>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	6144      	str	r4, [r0, #20]
 8008dbe:	6103      	str	r3, [r0, #16]
 8008dc0:	bd10      	pop	{r4, pc}
 8008dc2:	bf00      	nop
 8008dc4:	0800b91b 	.word	0x0800b91b
 8008dc8:	0800b92c 	.word	0x0800b92c

08008dcc <__multiply>:
 8008dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd0:	4691      	mov	r9, r2
 8008dd2:	690a      	ldr	r2, [r1, #16]
 8008dd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	bfb8      	it	lt
 8008ddc:	460b      	movlt	r3, r1
 8008dde:	460c      	mov	r4, r1
 8008de0:	bfbc      	itt	lt
 8008de2:	464c      	movlt	r4, r9
 8008de4:	4699      	movlt	r9, r3
 8008de6:	6927      	ldr	r7, [r4, #16]
 8008de8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008dec:	68a3      	ldr	r3, [r4, #8]
 8008dee:	6861      	ldr	r1, [r4, #4]
 8008df0:	eb07 060a 	add.w	r6, r7, sl
 8008df4:	42b3      	cmp	r3, r6
 8008df6:	b085      	sub	sp, #20
 8008df8:	bfb8      	it	lt
 8008dfa:	3101      	addlt	r1, #1
 8008dfc:	f7ff fed8 	bl	8008bb0 <_Balloc>
 8008e00:	b930      	cbnz	r0, 8008e10 <__multiply+0x44>
 8008e02:	4602      	mov	r2, r0
 8008e04:	4b44      	ldr	r3, [pc, #272]	; (8008f18 <__multiply+0x14c>)
 8008e06:	4845      	ldr	r0, [pc, #276]	; (8008f1c <__multiply+0x150>)
 8008e08:	f240 115d 	movw	r1, #349	; 0x15d
 8008e0c:	f000 fcb6 	bl	800977c <__assert_func>
 8008e10:	f100 0514 	add.w	r5, r0, #20
 8008e14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e18:	462b      	mov	r3, r5
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	4543      	cmp	r3, r8
 8008e1e:	d321      	bcc.n	8008e64 <__multiply+0x98>
 8008e20:	f104 0314 	add.w	r3, r4, #20
 8008e24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008e28:	f109 0314 	add.w	r3, r9, #20
 8008e2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008e30:	9202      	str	r2, [sp, #8]
 8008e32:	1b3a      	subs	r2, r7, r4
 8008e34:	3a15      	subs	r2, #21
 8008e36:	f022 0203 	bic.w	r2, r2, #3
 8008e3a:	3204      	adds	r2, #4
 8008e3c:	f104 0115 	add.w	r1, r4, #21
 8008e40:	428f      	cmp	r7, r1
 8008e42:	bf38      	it	cc
 8008e44:	2204      	movcc	r2, #4
 8008e46:	9201      	str	r2, [sp, #4]
 8008e48:	9a02      	ldr	r2, [sp, #8]
 8008e4a:	9303      	str	r3, [sp, #12]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d80c      	bhi.n	8008e6a <__multiply+0x9e>
 8008e50:	2e00      	cmp	r6, #0
 8008e52:	dd03      	ble.n	8008e5c <__multiply+0x90>
 8008e54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d05a      	beq.n	8008f12 <__multiply+0x146>
 8008e5c:	6106      	str	r6, [r0, #16]
 8008e5e:	b005      	add	sp, #20
 8008e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e64:	f843 2b04 	str.w	r2, [r3], #4
 8008e68:	e7d8      	b.n	8008e1c <__multiply+0x50>
 8008e6a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008e6e:	f1ba 0f00 	cmp.w	sl, #0
 8008e72:	d024      	beq.n	8008ebe <__multiply+0xf2>
 8008e74:	f104 0e14 	add.w	lr, r4, #20
 8008e78:	46a9      	mov	r9, r5
 8008e7a:	f04f 0c00 	mov.w	ip, #0
 8008e7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008e82:	f8d9 1000 	ldr.w	r1, [r9]
 8008e86:	fa1f fb82 	uxth.w	fp, r2
 8008e8a:	b289      	uxth	r1, r1
 8008e8c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008e90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008e94:	f8d9 2000 	ldr.w	r2, [r9]
 8008e98:	4461      	add	r1, ip
 8008e9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e9e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008ea2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ea6:	b289      	uxth	r1, r1
 8008ea8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008eac:	4577      	cmp	r7, lr
 8008eae:	f849 1b04 	str.w	r1, [r9], #4
 8008eb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008eb6:	d8e2      	bhi.n	8008e7e <__multiply+0xb2>
 8008eb8:	9a01      	ldr	r2, [sp, #4]
 8008eba:	f845 c002 	str.w	ip, [r5, r2]
 8008ebe:	9a03      	ldr	r2, [sp, #12]
 8008ec0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	f1b9 0f00 	cmp.w	r9, #0
 8008eca:	d020      	beq.n	8008f0e <__multiply+0x142>
 8008ecc:	6829      	ldr	r1, [r5, #0]
 8008ece:	f104 0c14 	add.w	ip, r4, #20
 8008ed2:	46ae      	mov	lr, r5
 8008ed4:	f04f 0a00 	mov.w	sl, #0
 8008ed8:	f8bc b000 	ldrh.w	fp, [ip]
 8008edc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ee0:	fb09 220b 	mla	r2, r9, fp, r2
 8008ee4:	4492      	add	sl, r2
 8008ee6:	b289      	uxth	r1, r1
 8008ee8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008eec:	f84e 1b04 	str.w	r1, [lr], #4
 8008ef0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008ef4:	f8be 1000 	ldrh.w	r1, [lr]
 8008ef8:	0c12      	lsrs	r2, r2, #16
 8008efa:	fb09 1102 	mla	r1, r9, r2, r1
 8008efe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008f02:	4567      	cmp	r7, ip
 8008f04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f08:	d8e6      	bhi.n	8008ed8 <__multiply+0x10c>
 8008f0a:	9a01      	ldr	r2, [sp, #4]
 8008f0c:	50a9      	str	r1, [r5, r2]
 8008f0e:	3504      	adds	r5, #4
 8008f10:	e79a      	b.n	8008e48 <__multiply+0x7c>
 8008f12:	3e01      	subs	r6, #1
 8008f14:	e79c      	b.n	8008e50 <__multiply+0x84>
 8008f16:	bf00      	nop
 8008f18:	0800b91b 	.word	0x0800b91b
 8008f1c:	0800b92c 	.word	0x0800b92c

08008f20 <__pow5mult>:
 8008f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f24:	4615      	mov	r5, r2
 8008f26:	f012 0203 	ands.w	r2, r2, #3
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	460f      	mov	r7, r1
 8008f2e:	d007      	beq.n	8008f40 <__pow5mult+0x20>
 8008f30:	4c25      	ldr	r4, [pc, #148]	; (8008fc8 <__pow5mult+0xa8>)
 8008f32:	3a01      	subs	r2, #1
 8008f34:	2300      	movs	r3, #0
 8008f36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f3a:	f7ff fe9b 	bl	8008c74 <__multadd>
 8008f3e:	4607      	mov	r7, r0
 8008f40:	10ad      	asrs	r5, r5, #2
 8008f42:	d03d      	beq.n	8008fc0 <__pow5mult+0xa0>
 8008f44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f46:	b97c      	cbnz	r4, 8008f68 <__pow5mult+0x48>
 8008f48:	2010      	movs	r0, #16
 8008f4a:	f7ff fe1b 	bl	8008b84 <malloc>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	6270      	str	r0, [r6, #36]	; 0x24
 8008f52:	b928      	cbnz	r0, 8008f60 <__pow5mult+0x40>
 8008f54:	4b1d      	ldr	r3, [pc, #116]	; (8008fcc <__pow5mult+0xac>)
 8008f56:	481e      	ldr	r0, [pc, #120]	; (8008fd0 <__pow5mult+0xb0>)
 8008f58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008f5c:	f000 fc0e 	bl	800977c <__assert_func>
 8008f60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f64:	6004      	str	r4, [r0, #0]
 8008f66:	60c4      	str	r4, [r0, #12]
 8008f68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008f6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f70:	b94c      	cbnz	r4, 8008f86 <__pow5mult+0x66>
 8008f72:	f240 2171 	movw	r1, #625	; 0x271
 8008f76:	4630      	mov	r0, r6
 8008f78:	f7ff ff12 	bl	8008da0 <__i2b>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f82:	4604      	mov	r4, r0
 8008f84:	6003      	str	r3, [r0, #0]
 8008f86:	f04f 0900 	mov.w	r9, #0
 8008f8a:	07eb      	lsls	r3, r5, #31
 8008f8c:	d50a      	bpl.n	8008fa4 <__pow5mult+0x84>
 8008f8e:	4639      	mov	r1, r7
 8008f90:	4622      	mov	r2, r4
 8008f92:	4630      	mov	r0, r6
 8008f94:	f7ff ff1a 	bl	8008dcc <__multiply>
 8008f98:	4639      	mov	r1, r7
 8008f9a:	4680      	mov	r8, r0
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	f7ff fe47 	bl	8008c30 <_Bfree>
 8008fa2:	4647      	mov	r7, r8
 8008fa4:	106d      	asrs	r5, r5, #1
 8008fa6:	d00b      	beq.n	8008fc0 <__pow5mult+0xa0>
 8008fa8:	6820      	ldr	r0, [r4, #0]
 8008faa:	b938      	cbnz	r0, 8008fbc <__pow5mult+0x9c>
 8008fac:	4622      	mov	r2, r4
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f7ff ff0b 	bl	8008dcc <__multiply>
 8008fb6:	6020      	str	r0, [r4, #0]
 8008fb8:	f8c0 9000 	str.w	r9, [r0]
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	e7e4      	b.n	8008f8a <__pow5mult+0x6a>
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fc6:	bf00      	nop
 8008fc8:	0800ba78 	.word	0x0800ba78
 8008fcc:	0800b8a9 	.word	0x0800b8a9
 8008fd0:	0800b92c 	.word	0x0800b92c

08008fd4 <__lshift>:
 8008fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd8:	460c      	mov	r4, r1
 8008fda:	6849      	ldr	r1, [r1, #4]
 8008fdc:	6923      	ldr	r3, [r4, #16]
 8008fde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fe2:	68a3      	ldr	r3, [r4, #8]
 8008fe4:	4607      	mov	r7, r0
 8008fe6:	4691      	mov	r9, r2
 8008fe8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fec:	f108 0601 	add.w	r6, r8, #1
 8008ff0:	42b3      	cmp	r3, r6
 8008ff2:	db0b      	blt.n	800900c <__lshift+0x38>
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	f7ff fddb 	bl	8008bb0 <_Balloc>
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	b948      	cbnz	r0, 8009012 <__lshift+0x3e>
 8008ffe:	4602      	mov	r2, r0
 8009000:	4b2a      	ldr	r3, [pc, #168]	; (80090ac <__lshift+0xd8>)
 8009002:	482b      	ldr	r0, [pc, #172]	; (80090b0 <__lshift+0xdc>)
 8009004:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009008:	f000 fbb8 	bl	800977c <__assert_func>
 800900c:	3101      	adds	r1, #1
 800900e:	005b      	lsls	r3, r3, #1
 8009010:	e7ee      	b.n	8008ff0 <__lshift+0x1c>
 8009012:	2300      	movs	r3, #0
 8009014:	f100 0114 	add.w	r1, r0, #20
 8009018:	f100 0210 	add.w	r2, r0, #16
 800901c:	4618      	mov	r0, r3
 800901e:	4553      	cmp	r3, sl
 8009020:	db37      	blt.n	8009092 <__lshift+0xbe>
 8009022:	6920      	ldr	r0, [r4, #16]
 8009024:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009028:	f104 0314 	add.w	r3, r4, #20
 800902c:	f019 091f 	ands.w	r9, r9, #31
 8009030:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009034:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009038:	d02f      	beq.n	800909a <__lshift+0xc6>
 800903a:	f1c9 0e20 	rsb	lr, r9, #32
 800903e:	468a      	mov	sl, r1
 8009040:	f04f 0c00 	mov.w	ip, #0
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	fa02 f209 	lsl.w	r2, r2, r9
 800904a:	ea42 020c 	orr.w	r2, r2, ip
 800904e:	f84a 2b04 	str.w	r2, [sl], #4
 8009052:	f853 2b04 	ldr.w	r2, [r3], #4
 8009056:	4298      	cmp	r0, r3
 8009058:	fa22 fc0e 	lsr.w	ip, r2, lr
 800905c:	d8f2      	bhi.n	8009044 <__lshift+0x70>
 800905e:	1b03      	subs	r3, r0, r4
 8009060:	3b15      	subs	r3, #21
 8009062:	f023 0303 	bic.w	r3, r3, #3
 8009066:	3304      	adds	r3, #4
 8009068:	f104 0215 	add.w	r2, r4, #21
 800906c:	4290      	cmp	r0, r2
 800906e:	bf38      	it	cc
 8009070:	2304      	movcc	r3, #4
 8009072:	f841 c003 	str.w	ip, [r1, r3]
 8009076:	f1bc 0f00 	cmp.w	ip, #0
 800907a:	d001      	beq.n	8009080 <__lshift+0xac>
 800907c:	f108 0602 	add.w	r6, r8, #2
 8009080:	3e01      	subs	r6, #1
 8009082:	4638      	mov	r0, r7
 8009084:	612e      	str	r6, [r5, #16]
 8009086:	4621      	mov	r1, r4
 8009088:	f7ff fdd2 	bl	8008c30 <_Bfree>
 800908c:	4628      	mov	r0, r5
 800908e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009092:	f842 0f04 	str.w	r0, [r2, #4]!
 8009096:	3301      	adds	r3, #1
 8009098:	e7c1      	b.n	800901e <__lshift+0x4a>
 800909a:	3904      	subs	r1, #4
 800909c:	f853 2b04 	ldr.w	r2, [r3], #4
 80090a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80090a4:	4298      	cmp	r0, r3
 80090a6:	d8f9      	bhi.n	800909c <__lshift+0xc8>
 80090a8:	e7ea      	b.n	8009080 <__lshift+0xac>
 80090aa:	bf00      	nop
 80090ac:	0800b91b 	.word	0x0800b91b
 80090b0:	0800b92c 	.word	0x0800b92c

080090b4 <__mcmp>:
 80090b4:	b530      	push	{r4, r5, lr}
 80090b6:	6902      	ldr	r2, [r0, #16]
 80090b8:	690c      	ldr	r4, [r1, #16]
 80090ba:	1b12      	subs	r2, r2, r4
 80090bc:	d10e      	bne.n	80090dc <__mcmp+0x28>
 80090be:	f100 0314 	add.w	r3, r0, #20
 80090c2:	3114      	adds	r1, #20
 80090c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80090c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80090cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80090d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80090d4:	42a5      	cmp	r5, r4
 80090d6:	d003      	beq.n	80090e0 <__mcmp+0x2c>
 80090d8:	d305      	bcc.n	80090e6 <__mcmp+0x32>
 80090da:	2201      	movs	r2, #1
 80090dc:	4610      	mov	r0, r2
 80090de:	bd30      	pop	{r4, r5, pc}
 80090e0:	4283      	cmp	r3, r0
 80090e2:	d3f3      	bcc.n	80090cc <__mcmp+0x18>
 80090e4:	e7fa      	b.n	80090dc <__mcmp+0x28>
 80090e6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ea:	e7f7      	b.n	80090dc <__mcmp+0x28>

080090ec <__mdiff>:
 80090ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f0:	460c      	mov	r4, r1
 80090f2:	4606      	mov	r6, r0
 80090f4:	4611      	mov	r1, r2
 80090f6:	4620      	mov	r0, r4
 80090f8:	4690      	mov	r8, r2
 80090fa:	f7ff ffdb 	bl	80090b4 <__mcmp>
 80090fe:	1e05      	subs	r5, r0, #0
 8009100:	d110      	bne.n	8009124 <__mdiff+0x38>
 8009102:	4629      	mov	r1, r5
 8009104:	4630      	mov	r0, r6
 8009106:	f7ff fd53 	bl	8008bb0 <_Balloc>
 800910a:	b930      	cbnz	r0, 800911a <__mdiff+0x2e>
 800910c:	4b3a      	ldr	r3, [pc, #232]	; (80091f8 <__mdiff+0x10c>)
 800910e:	4602      	mov	r2, r0
 8009110:	f240 2132 	movw	r1, #562	; 0x232
 8009114:	4839      	ldr	r0, [pc, #228]	; (80091fc <__mdiff+0x110>)
 8009116:	f000 fb31 	bl	800977c <__assert_func>
 800911a:	2301      	movs	r3, #1
 800911c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009120:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009124:	bfa4      	itt	ge
 8009126:	4643      	movge	r3, r8
 8009128:	46a0      	movge	r8, r4
 800912a:	4630      	mov	r0, r6
 800912c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009130:	bfa6      	itte	ge
 8009132:	461c      	movge	r4, r3
 8009134:	2500      	movge	r5, #0
 8009136:	2501      	movlt	r5, #1
 8009138:	f7ff fd3a 	bl	8008bb0 <_Balloc>
 800913c:	b920      	cbnz	r0, 8009148 <__mdiff+0x5c>
 800913e:	4b2e      	ldr	r3, [pc, #184]	; (80091f8 <__mdiff+0x10c>)
 8009140:	4602      	mov	r2, r0
 8009142:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009146:	e7e5      	b.n	8009114 <__mdiff+0x28>
 8009148:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800914c:	6926      	ldr	r6, [r4, #16]
 800914e:	60c5      	str	r5, [r0, #12]
 8009150:	f104 0914 	add.w	r9, r4, #20
 8009154:	f108 0514 	add.w	r5, r8, #20
 8009158:	f100 0e14 	add.w	lr, r0, #20
 800915c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009160:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009164:	f108 0210 	add.w	r2, r8, #16
 8009168:	46f2      	mov	sl, lr
 800916a:	2100      	movs	r1, #0
 800916c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009170:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009174:	fa1f f883 	uxth.w	r8, r3
 8009178:	fa11 f18b 	uxtah	r1, r1, fp
 800917c:	0c1b      	lsrs	r3, r3, #16
 800917e:	eba1 0808 	sub.w	r8, r1, r8
 8009182:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009186:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800918a:	fa1f f888 	uxth.w	r8, r8
 800918e:	1419      	asrs	r1, r3, #16
 8009190:	454e      	cmp	r6, r9
 8009192:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009196:	f84a 3b04 	str.w	r3, [sl], #4
 800919a:	d8e7      	bhi.n	800916c <__mdiff+0x80>
 800919c:	1b33      	subs	r3, r6, r4
 800919e:	3b15      	subs	r3, #21
 80091a0:	f023 0303 	bic.w	r3, r3, #3
 80091a4:	3304      	adds	r3, #4
 80091a6:	3415      	adds	r4, #21
 80091a8:	42a6      	cmp	r6, r4
 80091aa:	bf38      	it	cc
 80091ac:	2304      	movcc	r3, #4
 80091ae:	441d      	add	r5, r3
 80091b0:	4473      	add	r3, lr
 80091b2:	469e      	mov	lr, r3
 80091b4:	462e      	mov	r6, r5
 80091b6:	4566      	cmp	r6, ip
 80091b8:	d30e      	bcc.n	80091d8 <__mdiff+0xec>
 80091ba:	f10c 0203 	add.w	r2, ip, #3
 80091be:	1b52      	subs	r2, r2, r5
 80091c0:	f022 0203 	bic.w	r2, r2, #3
 80091c4:	3d03      	subs	r5, #3
 80091c6:	45ac      	cmp	ip, r5
 80091c8:	bf38      	it	cc
 80091ca:	2200      	movcc	r2, #0
 80091cc:	441a      	add	r2, r3
 80091ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80091d2:	b17b      	cbz	r3, 80091f4 <__mdiff+0x108>
 80091d4:	6107      	str	r7, [r0, #16]
 80091d6:	e7a3      	b.n	8009120 <__mdiff+0x34>
 80091d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80091dc:	fa11 f288 	uxtah	r2, r1, r8
 80091e0:	1414      	asrs	r4, r2, #16
 80091e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80091e6:	b292      	uxth	r2, r2
 80091e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80091ec:	f84e 2b04 	str.w	r2, [lr], #4
 80091f0:	1421      	asrs	r1, r4, #16
 80091f2:	e7e0      	b.n	80091b6 <__mdiff+0xca>
 80091f4:	3f01      	subs	r7, #1
 80091f6:	e7ea      	b.n	80091ce <__mdiff+0xe2>
 80091f8:	0800b91b 	.word	0x0800b91b
 80091fc:	0800b92c 	.word	0x0800b92c

08009200 <__d2b>:
 8009200:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009204:	4689      	mov	r9, r1
 8009206:	2101      	movs	r1, #1
 8009208:	ec57 6b10 	vmov	r6, r7, d0
 800920c:	4690      	mov	r8, r2
 800920e:	f7ff fccf 	bl	8008bb0 <_Balloc>
 8009212:	4604      	mov	r4, r0
 8009214:	b930      	cbnz	r0, 8009224 <__d2b+0x24>
 8009216:	4602      	mov	r2, r0
 8009218:	4b25      	ldr	r3, [pc, #148]	; (80092b0 <__d2b+0xb0>)
 800921a:	4826      	ldr	r0, [pc, #152]	; (80092b4 <__d2b+0xb4>)
 800921c:	f240 310a 	movw	r1, #778	; 0x30a
 8009220:	f000 faac 	bl	800977c <__assert_func>
 8009224:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009228:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800922c:	bb35      	cbnz	r5, 800927c <__d2b+0x7c>
 800922e:	2e00      	cmp	r6, #0
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	d028      	beq.n	8009286 <__d2b+0x86>
 8009234:	4668      	mov	r0, sp
 8009236:	9600      	str	r6, [sp, #0]
 8009238:	f7ff fd82 	bl	8008d40 <__lo0bits>
 800923c:	9900      	ldr	r1, [sp, #0]
 800923e:	b300      	cbz	r0, 8009282 <__d2b+0x82>
 8009240:	9a01      	ldr	r2, [sp, #4]
 8009242:	f1c0 0320 	rsb	r3, r0, #32
 8009246:	fa02 f303 	lsl.w	r3, r2, r3
 800924a:	430b      	orrs	r3, r1
 800924c:	40c2      	lsrs	r2, r0
 800924e:	6163      	str	r3, [r4, #20]
 8009250:	9201      	str	r2, [sp, #4]
 8009252:	9b01      	ldr	r3, [sp, #4]
 8009254:	61a3      	str	r3, [r4, #24]
 8009256:	2b00      	cmp	r3, #0
 8009258:	bf14      	ite	ne
 800925a:	2202      	movne	r2, #2
 800925c:	2201      	moveq	r2, #1
 800925e:	6122      	str	r2, [r4, #16]
 8009260:	b1d5      	cbz	r5, 8009298 <__d2b+0x98>
 8009262:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009266:	4405      	add	r5, r0
 8009268:	f8c9 5000 	str.w	r5, [r9]
 800926c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009270:	f8c8 0000 	str.w	r0, [r8]
 8009274:	4620      	mov	r0, r4
 8009276:	b003      	add	sp, #12
 8009278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800927c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009280:	e7d5      	b.n	800922e <__d2b+0x2e>
 8009282:	6161      	str	r1, [r4, #20]
 8009284:	e7e5      	b.n	8009252 <__d2b+0x52>
 8009286:	a801      	add	r0, sp, #4
 8009288:	f7ff fd5a 	bl	8008d40 <__lo0bits>
 800928c:	9b01      	ldr	r3, [sp, #4]
 800928e:	6163      	str	r3, [r4, #20]
 8009290:	2201      	movs	r2, #1
 8009292:	6122      	str	r2, [r4, #16]
 8009294:	3020      	adds	r0, #32
 8009296:	e7e3      	b.n	8009260 <__d2b+0x60>
 8009298:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800929c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092a0:	f8c9 0000 	str.w	r0, [r9]
 80092a4:	6918      	ldr	r0, [r3, #16]
 80092a6:	f7ff fd2b 	bl	8008d00 <__hi0bits>
 80092aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092ae:	e7df      	b.n	8009270 <__d2b+0x70>
 80092b0:	0800b91b 	.word	0x0800b91b
 80092b4:	0800b92c 	.word	0x0800b92c

080092b8 <_calloc_r>:
 80092b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092ba:	fba1 2402 	umull	r2, r4, r1, r2
 80092be:	b94c      	cbnz	r4, 80092d4 <_calloc_r+0x1c>
 80092c0:	4611      	mov	r1, r2
 80092c2:	9201      	str	r2, [sp, #4]
 80092c4:	f000 f87a 	bl	80093bc <_malloc_r>
 80092c8:	9a01      	ldr	r2, [sp, #4]
 80092ca:	4605      	mov	r5, r0
 80092cc:	b930      	cbnz	r0, 80092dc <_calloc_r+0x24>
 80092ce:	4628      	mov	r0, r5
 80092d0:	b003      	add	sp, #12
 80092d2:	bd30      	pop	{r4, r5, pc}
 80092d4:	220c      	movs	r2, #12
 80092d6:	6002      	str	r2, [r0, #0]
 80092d8:	2500      	movs	r5, #0
 80092da:	e7f8      	b.n	80092ce <_calloc_r+0x16>
 80092dc:	4621      	mov	r1, r4
 80092de:	f7fe f941 	bl	8007564 <memset>
 80092e2:	e7f4      	b.n	80092ce <_calloc_r+0x16>

080092e4 <_free_r>:
 80092e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092e6:	2900      	cmp	r1, #0
 80092e8:	d044      	beq.n	8009374 <_free_r+0x90>
 80092ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092ee:	9001      	str	r0, [sp, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f1a1 0404 	sub.w	r4, r1, #4
 80092f6:	bfb8      	it	lt
 80092f8:	18e4      	addlt	r4, r4, r3
 80092fa:	f000 fa9b 	bl	8009834 <__malloc_lock>
 80092fe:	4a1e      	ldr	r2, [pc, #120]	; (8009378 <_free_r+0x94>)
 8009300:	9801      	ldr	r0, [sp, #4]
 8009302:	6813      	ldr	r3, [r2, #0]
 8009304:	b933      	cbnz	r3, 8009314 <_free_r+0x30>
 8009306:	6063      	str	r3, [r4, #4]
 8009308:	6014      	str	r4, [r2, #0]
 800930a:	b003      	add	sp, #12
 800930c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009310:	f000 ba96 	b.w	8009840 <__malloc_unlock>
 8009314:	42a3      	cmp	r3, r4
 8009316:	d908      	bls.n	800932a <_free_r+0x46>
 8009318:	6825      	ldr	r5, [r4, #0]
 800931a:	1961      	adds	r1, r4, r5
 800931c:	428b      	cmp	r3, r1
 800931e:	bf01      	itttt	eq
 8009320:	6819      	ldreq	r1, [r3, #0]
 8009322:	685b      	ldreq	r3, [r3, #4]
 8009324:	1949      	addeq	r1, r1, r5
 8009326:	6021      	streq	r1, [r4, #0]
 8009328:	e7ed      	b.n	8009306 <_free_r+0x22>
 800932a:	461a      	mov	r2, r3
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	b10b      	cbz	r3, 8009334 <_free_r+0x50>
 8009330:	42a3      	cmp	r3, r4
 8009332:	d9fa      	bls.n	800932a <_free_r+0x46>
 8009334:	6811      	ldr	r1, [r2, #0]
 8009336:	1855      	adds	r5, r2, r1
 8009338:	42a5      	cmp	r5, r4
 800933a:	d10b      	bne.n	8009354 <_free_r+0x70>
 800933c:	6824      	ldr	r4, [r4, #0]
 800933e:	4421      	add	r1, r4
 8009340:	1854      	adds	r4, r2, r1
 8009342:	42a3      	cmp	r3, r4
 8009344:	6011      	str	r1, [r2, #0]
 8009346:	d1e0      	bne.n	800930a <_free_r+0x26>
 8009348:	681c      	ldr	r4, [r3, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	6053      	str	r3, [r2, #4]
 800934e:	4421      	add	r1, r4
 8009350:	6011      	str	r1, [r2, #0]
 8009352:	e7da      	b.n	800930a <_free_r+0x26>
 8009354:	d902      	bls.n	800935c <_free_r+0x78>
 8009356:	230c      	movs	r3, #12
 8009358:	6003      	str	r3, [r0, #0]
 800935a:	e7d6      	b.n	800930a <_free_r+0x26>
 800935c:	6825      	ldr	r5, [r4, #0]
 800935e:	1961      	adds	r1, r4, r5
 8009360:	428b      	cmp	r3, r1
 8009362:	bf04      	itt	eq
 8009364:	6819      	ldreq	r1, [r3, #0]
 8009366:	685b      	ldreq	r3, [r3, #4]
 8009368:	6063      	str	r3, [r4, #4]
 800936a:	bf04      	itt	eq
 800936c:	1949      	addeq	r1, r1, r5
 800936e:	6021      	streq	r1, [r4, #0]
 8009370:	6054      	str	r4, [r2, #4]
 8009372:	e7ca      	b.n	800930a <_free_r+0x26>
 8009374:	b003      	add	sp, #12
 8009376:	bd30      	pop	{r4, r5, pc}
 8009378:	20000650 	.word	0x20000650

0800937c <sbrk_aligned>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	4e0e      	ldr	r6, [pc, #56]	; (80093b8 <sbrk_aligned+0x3c>)
 8009380:	460c      	mov	r4, r1
 8009382:	6831      	ldr	r1, [r6, #0]
 8009384:	4605      	mov	r5, r0
 8009386:	b911      	cbnz	r1, 800938e <sbrk_aligned+0x12>
 8009388:	f000 f9e8 	bl	800975c <_sbrk_r>
 800938c:	6030      	str	r0, [r6, #0]
 800938e:	4621      	mov	r1, r4
 8009390:	4628      	mov	r0, r5
 8009392:	f000 f9e3 	bl	800975c <_sbrk_r>
 8009396:	1c43      	adds	r3, r0, #1
 8009398:	d00a      	beq.n	80093b0 <sbrk_aligned+0x34>
 800939a:	1cc4      	adds	r4, r0, #3
 800939c:	f024 0403 	bic.w	r4, r4, #3
 80093a0:	42a0      	cmp	r0, r4
 80093a2:	d007      	beq.n	80093b4 <sbrk_aligned+0x38>
 80093a4:	1a21      	subs	r1, r4, r0
 80093a6:	4628      	mov	r0, r5
 80093a8:	f000 f9d8 	bl	800975c <_sbrk_r>
 80093ac:	3001      	adds	r0, #1
 80093ae:	d101      	bne.n	80093b4 <sbrk_aligned+0x38>
 80093b0:	f04f 34ff 	mov.w	r4, #4294967295
 80093b4:	4620      	mov	r0, r4
 80093b6:	bd70      	pop	{r4, r5, r6, pc}
 80093b8:	20000654 	.word	0x20000654

080093bc <_malloc_r>:
 80093bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c0:	1ccd      	adds	r5, r1, #3
 80093c2:	f025 0503 	bic.w	r5, r5, #3
 80093c6:	3508      	adds	r5, #8
 80093c8:	2d0c      	cmp	r5, #12
 80093ca:	bf38      	it	cc
 80093cc:	250c      	movcc	r5, #12
 80093ce:	2d00      	cmp	r5, #0
 80093d0:	4607      	mov	r7, r0
 80093d2:	db01      	blt.n	80093d8 <_malloc_r+0x1c>
 80093d4:	42a9      	cmp	r1, r5
 80093d6:	d905      	bls.n	80093e4 <_malloc_r+0x28>
 80093d8:	230c      	movs	r3, #12
 80093da:	603b      	str	r3, [r7, #0]
 80093dc:	2600      	movs	r6, #0
 80093de:	4630      	mov	r0, r6
 80093e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e4:	4e2e      	ldr	r6, [pc, #184]	; (80094a0 <_malloc_r+0xe4>)
 80093e6:	f000 fa25 	bl	8009834 <__malloc_lock>
 80093ea:	6833      	ldr	r3, [r6, #0]
 80093ec:	461c      	mov	r4, r3
 80093ee:	bb34      	cbnz	r4, 800943e <_malloc_r+0x82>
 80093f0:	4629      	mov	r1, r5
 80093f2:	4638      	mov	r0, r7
 80093f4:	f7ff ffc2 	bl	800937c <sbrk_aligned>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	4604      	mov	r4, r0
 80093fc:	d14d      	bne.n	800949a <_malloc_r+0xde>
 80093fe:	6834      	ldr	r4, [r6, #0]
 8009400:	4626      	mov	r6, r4
 8009402:	2e00      	cmp	r6, #0
 8009404:	d140      	bne.n	8009488 <_malloc_r+0xcc>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	4631      	mov	r1, r6
 800940a:	4638      	mov	r0, r7
 800940c:	eb04 0803 	add.w	r8, r4, r3
 8009410:	f000 f9a4 	bl	800975c <_sbrk_r>
 8009414:	4580      	cmp	r8, r0
 8009416:	d13a      	bne.n	800948e <_malloc_r+0xd2>
 8009418:	6821      	ldr	r1, [r4, #0]
 800941a:	3503      	adds	r5, #3
 800941c:	1a6d      	subs	r5, r5, r1
 800941e:	f025 0503 	bic.w	r5, r5, #3
 8009422:	3508      	adds	r5, #8
 8009424:	2d0c      	cmp	r5, #12
 8009426:	bf38      	it	cc
 8009428:	250c      	movcc	r5, #12
 800942a:	4629      	mov	r1, r5
 800942c:	4638      	mov	r0, r7
 800942e:	f7ff ffa5 	bl	800937c <sbrk_aligned>
 8009432:	3001      	adds	r0, #1
 8009434:	d02b      	beq.n	800948e <_malloc_r+0xd2>
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	442b      	add	r3, r5
 800943a:	6023      	str	r3, [r4, #0]
 800943c:	e00e      	b.n	800945c <_malloc_r+0xa0>
 800943e:	6822      	ldr	r2, [r4, #0]
 8009440:	1b52      	subs	r2, r2, r5
 8009442:	d41e      	bmi.n	8009482 <_malloc_r+0xc6>
 8009444:	2a0b      	cmp	r2, #11
 8009446:	d916      	bls.n	8009476 <_malloc_r+0xba>
 8009448:	1961      	adds	r1, r4, r5
 800944a:	42a3      	cmp	r3, r4
 800944c:	6025      	str	r5, [r4, #0]
 800944e:	bf18      	it	ne
 8009450:	6059      	strne	r1, [r3, #4]
 8009452:	6863      	ldr	r3, [r4, #4]
 8009454:	bf08      	it	eq
 8009456:	6031      	streq	r1, [r6, #0]
 8009458:	5162      	str	r2, [r4, r5]
 800945a:	604b      	str	r3, [r1, #4]
 800945c:	4638      	mov	r0, r7
 800945e:	f104 060b 	add.w	r6, r4, #11
 8009462:	f000 f9ed 	bl	8009840 <__malloc_unlock>
 8009466:	f026 0607 	bic.w	r6, r6, #7
 800946a:	1d23      	adds	r3, r4, #4
 800946c:	1af2      	subs	r2, r6, r3
 800946e:	d0b6      	beq.n	80093de <_malloc_r+0x22>
 8009470:	1b9b      	subs	r3, r3, r6
 8009472:	50a3      	str	r3, [r4, r2]
 8009474:	e7b3      	b.n	80093de <_malloc_r+0x22>
 8009476:	6862      	ldr	r2, [r4, #4]
 8009478:	42a3      	cmp	r3, r4
 800947a:	bf0c      	ite	eq
 800947c:	6032      	streq	r2, [r6, #0]
 800947e:	605a      	strne	r2, [r3, #4]
 8009480:	e7ec      	b.n	800945c <_malloc_r+0xa0>
 8009482:	4623      	mov	r3, r4
 8009484:	6864      	ldr	r4, [r4, #4]
 8009486:	e7b2      	b.n	80093ee <_malloc_r+0x32>
 8009488:	4634      	mov	r4, r6
 800948a:	6876      	ldr	r6, [r6, #4]
 800948c:	e7b9      	b.n	8009402 <_malloc_r+0x46>
 800948e:	230c      	movs	r3, #12
 8009490:	603b      	str	r3, [r7, #0]
 8009492:	4638      	mov	r0, r7
 8009494:	f000 f9d4 	bl	8009840 <__malloc_unlock>
 8009498:	e7a1      	b.n	80093de <_malloc_r+0x22>
 800949a:	6025      	str	r5, [r4, #0]
 800949c:	e7de      	b.n	800945c <_malloc_r+0xa0>
 800949e:	bf00      	nop
 80094a0:	20000650 	.word	0x20000650

080094a4 <__ssputs_r>:
 80094a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a8:	688e      	ldr	r6, [r1, #8]
 80094aa:	429e      	cmp	r6, r3
 80094ac:	4682      	mov	sl, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	4690      	mov	r8, r2
 80094b2:	461f      	mov	r7, r3
 80094b4:	d838      	bhi.n	8009528 <__ssputs_r+0x84>
 80094b6:	898a      	ldrh	r2, [r1, #12]
 80094b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094bc:	d032      	beq.n	8009524 <__ssputs_r+0x80>
 80094be:	6825      	ldr	r5, [r4, #0]
 80094c0:	6909      	ldr	r1, [r1, #16]
 80094c2:	eba5 0901 	sub.w	r9, r5, r1
 80094c6:	6965      	ldr	r5, [r4, #20]
 80094c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094d0:	3301      	adds	r3, #1
 80094d2:	444b      	add	r3, r9
 80094d4:	106d      	asrs	r5, r5, #1
 80094d6:	429d      	cmp	r5, r3
 80094d8:	bf38      	it	cc
 80094da:	461d      	movcc	r5, r3
 80094dc:	0553      	lsls	r3, r2, #21
 80094de:	d531      	bpl.n	8009544 <__ssputs_r+0xa0>
 80094e0:	4629      	mov	r1, r5
 80094e2:	f7ff ff6b 	bl	80093bc <_malloc_r>
 80094e6:	4606      	mov	r6, r0
 80094e8:	b950      	cbnz	r0, 8009500 <__ssputs_r+0x5c>
 80094ea:	230c      	movs	r3, #12
 80094ec:	f8ca 3000 	str.w	r3, [sl]
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f6:	81a3      	strh	r3, [r4, #12]
 80094f8:	f04f 30ff 	mov.w	r0, #4294967295
 80094fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009500:	6921      	ldr	r1, [r4, #16]
 8009502:	464a      	mov	r2, r9
 8009504:	f7ff fb46 	bl	8008b94 <memcpy>
 8009508:	89a3      	ldrh	r3, [r4, #12]
 800950a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800950e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009512:	81a3      	strh	r3, [r4, #12]
 8009514:	6126      	str	r6, [r4, #16]
 8009516:	6165      	str	r5, [r4, #20]
 8009518:	444e      	add	r6, r9
 800951a:	eba5 0509 	sub.w	r5, r5, r9
 800951e:	6026      	str	r6, [r4, #0]
 8009520:	60a5      	str	r5, [r4, #8]
 8009522:	463e      	mov	r6, r7
 8009524:	42be      	cmp	r6, r7
 8009526:	d900      	bls.n	800952a <__ssputs_r+0x86>
 8009528:	463e      	mov	r6, r7
 800952a:	6820      	ldr	r0, [r4, #0]
 800952c:	4632      	mov	r2, r6
 800952e:	4641      	mov	r1, r8
 8009530:	f000 f966 	bl	8009800 <memmove>
 8009534:	68a3      	ldr	r3, [r4, #8]
 8009536:	1b9b      	subs	r3, r3, r6
 8009538:	60a3      	str	r3, [r4, #8]
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	4433      	add	r3, r6
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	2000      	movs	r0, #0
 8009542:	e7db      	b.n	80094fc <__ssputs_r+0x58>
 8009544:	462a      	mov	r2, r5
 8009546:	f000 f981 	bl	800984c <_realloc_r>
 800954a:	4606      	mov	r6, r0
 800954c:	2800      	cmp	r0, #0
 800954e:	d1e1      	bne.n	8009514 <__ssputs_r+0x70>
 8009550:	6921      	ldr	r1, [r4, #16]
 8009552:	4650      	mov	r0, sl
 8009554:	f7ff fec6 	bl	80092e4 <_free_r>
 8009558:	e7c7      	b.n	80094ea <__ssputs_r+0x46>
	...

0800955c <_svfiprintf_r>:
 800955c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009560:	4698      	mov	r8, r3
 8009562:	898b      	ldrh	r3, [r1, #12]
 8009564:	061b      	lsls	r3, r3, #24
 8009566:	b09d      	sub	sp, #116	; 0x74
 8009568:	4607      	mov	r7, r0
 800956a:	460d      	mov	r5, r1
 800956c:	4614      	mov	r4, r2
 800956e:	d50e      	bpl.n	800958e <_svfiprintf_r+0x32>
 8009570:	690b      	ldr	r3, [r1, #16]
 8009572:	b963      	cbnz	r3, 800958e <_svfiprintf_r+0x32>
 8009574:	2140      	movs	r1, #64	; 0x40
 8009576:	f7ff ff21 	bl	80093bc <_malloc_r>
 800957a:	6028      	str	r0, [r5, #0]
 800957c:	6128      	str	r0, [r5, #16]
 800957e:	b920      	cbnz	r0, 800958a <_svfiprintf_r+0x2e>
 8009580:	230c      	movs	r3, #12
 8009582:	603b      	str	r3, [r7, #0]
 8009584:	f04f 30ff 	mov.w	r0, #4294967295
 8009588:	e0d1      	b.n	800972e <_svfiprintf_r+0x1d2>
 800958a:	2340      	movs	r3, #64	; 0x40
 800958c:	616b      	str	r3, [r5, #20]
 800958e:	2300      	movs	r3, #0
 8009590:	9309      	str	r3, [sp, #36]	; 0x24
 8009592:	2320      	movs	r3, #32
 8009594:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009598:	f8cd 800c 	str.w	r8, [sp, #12]
 800959c:	2330      	movs	r3, #48	; 0x30
 800959e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009748 <_svfiprintf_r+0x1ec>
 80095a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095a6:	f04f 0901 	mov.w	r9, #1
 80095aa:	4623      	mov	r3, r4
 80095ac:	469a      	mov	sl, r3
 80095ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095b2:	b10a      	cbz	r2, 80095b8 <_svfiprintf_r+0x5c>
 80095b4:	2a25      	cmp	r2, #37	; 0x25
 80095b6:	d1f9      	bne.n	80095ac <_svfiprintf_r+0x50>
 80095b8:	ebba 0b04 	subs.w	fp, sl, r4
 80095bc:	d00b      	beq.n	80095d6 <_svfiprintf_r+0x7a>
 80095be:	465b      	mov	r3, fp
 80095c0:	4622      	mov	r2, r4
 80095c2:	4629      	mov	r1, r5
 80095c4:	4638      	mov	r0, r7
 80095c6:	f7ff ff6d 	bl	80094a4 <__ssputs_r>
 80095ca:	3001      	adds	r0, #1
 80095cc:	f000 80aa 	beq.w	8009724 <_svfiprintf_r+0x1c8>
 80095d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095d2:	445a      	add	r2, fp
 80095d4:	9209      	str	r2, [sp, #36]	; 0x24
 80095d6:	f89a 3000 	ldrb.w	r3, [sl]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 80a2 	beq.w	8009724 <_svfiprintf_r+0x1c8>
 80095e0:	2300      	movs	r3, #0
 80095e2:	f04f 32ff 	mov.w	r2, #4294967295
 80095e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ea:	f10a 0a01 	add.w	sl, sl, #1
 80095ee:	9304      	str	r3, [sp, #16]
 80095f0:	9307      	str	r3, [sp, #28]
 80095f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095f6:	931a      	str	r3, [sp, #104]	; 0x68
 80095f8:	4654      	mov	r4, sl
 80095fa:	2205      	movs	r2, #5
 80095fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009600:	4851      	ldr	r0, [pc, #324]	; (8009748 <_svfiprintf_r+0x1ec>)
 8009602:	f7f6 fe0d 	bl	8000220 <memchr>
 8009606:	9a04      	ldr	r2, [sp, #16]
 8009608:	b9d8      	cbnz	r0, 8009642 <_svfiprintf_r+0xe6>
 800960a:	06d0      	lsls	r0, r2, #27
 800960c:	bf44      	itt	mi
 800960e:	2320      	movmi	r3, #32
 8009610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009614:	0711      	lsls	r1, r2, #28
 8009616:	bf44      	itt	mi
 8009618:	232b      	movmi	r3, #43	; 0x2b
 800961a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800961e:	f89a 3000 	ldrb.w	r3, [sl]
 8009622:	2b2a      	cmp	r3, #42	; 0x2a
 8009624:	d015      	beq.n	8009652 <_svfiprintf_r+0xf6>
 8009626:	9a07      	ldr	r2, [sp, #28]
 8009628:	4654      	mov	r4, sl
 800962a:	2000      	movs	r0, #0
 800962c:	f04f 0c0a 	mov.w	ip, #10
 8009630:	4621      	mov	r1, r4
 8009632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009636:	3b30      	subs	r3, #48	; 0x30
 8009638:	2b09      	cmp	r3, #9
 800963a:	d94e      	bls.n	80096da <_svfiprintf_r+0x17e>
 800963c:	b1b0      	cbz	r0, 800966c <_svfiprintf_r+0x110>
 800963e:	9207      	str	r2, [sp, #28]
 8009640:	e014      	b.n	800966c <_svfiprintf_r+0x110>
 8009642:	eba0 0308 	sub.w	r3, r0, r8
 8009646:	fa09 f303 	lsl.w	r3, r9, r3
 800964a:	4313      	orrs	r3, r2
 800964c:	9304      	str	r3, [sp, #16]
 800964e:	46a2      	mov	sl, r4
 8009650:	e7d2      	b.n	80095f8 <_svfiprintf_r+0x9c>
 8009652:	9b03      	ldr	r3, [sp, #12]
 8009654:	1d19      	adds	r1, r3, #4
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	9103      	str	r1, [sp, #12]
 800965a:	2b00      	cmp	r3, #0
 800965c:	bfbb      	ittet	lt
 800965e:	425b      	neglt	r3, r3
 8009660:	f042 0202 	orrlt.w	r2, r2, #2
 8009664:	9307      	strge	r3, [sp, #28]
 8009666:	9307      	strlt	r3, [sp, #28]
 8009668:	bfb8      	it	lt
 800966a:	9204      	strlt	r2, [sp, #16]
 800966c:	7823      	ldrb	r3, [r4, #0]
 800966e:	2b2e      	cmp	r3, #46	; 0x2e
 8009670:	d10c      	bne.n	800968c <_svfiprintf_r+0x130>
 8009672:	7863      	ldrb	r3, [r4, #1]
 8009674:	2b2a      	cmp	r3, #42	; 0x2a
 8009676:	d135      	bne.n	80096e4 <_svfiprintf_r+0x188>
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	1d1a      	adds	r2, r3, #4
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	9203      	str	r2, [sp, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	bfb8      	it	lt
 8009684:	f04f 33ff 	movlt.w	r3, #4294967295
 8009688:	3402      	adds	r4, #2
 800968a:	9305      	str	r3, [sp, #20]
 800968c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009758 <_svfiprintf_r+0x1fc>
 8009690:	7821      	ldrb	r1, [r4, #0]
 8009692:	2203      	movs	r2, #3
 8009694:	4650      	mov	r0, sl
 8009696:	f7f6 fdc3 	bl	8000220 <memchr>
 800969a:	b140      	cbz	r0, 80096ae <_svfiprintf_r+0x152>
 800969c:	2340      	movs	r3, #64	; 0x40
 800969e:	eba0 000a 	sub.w	r0, r0, sl
 80096a2:	fa03 f000 	lsl.w	r0, r3, r0
 80096a6:	9b04      	ldr	r3, [sp, #16]
 80096a8:	4303      	orrs	r3, r0
 80096aa:	3401      	adds	r4, #1
 80096ac:	9304      	str	r3, [sp, #16]
 80096ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b2:	4826      	ldr	r0, [pc, #152]	; (800974c <_svfiprintf_r+0x1f0>)
 80096b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096b8:	2206      	movs	r2, #6
 80096ba:	f7f6 fdb1 	bl	8000220 <memchr>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d038      	beq.n	8009734 <_svfiprintf_r+0x1d8>
 80096c2:	4b23      	ldr	r3, [pc, #140]	; (8009750 <_svfiprintf_r+0x1f4>)
 80096c4:	bb1b      	cbnz	r3, 800970e <_svfiprintf_r+0x1b2>
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	3307      	adds	r3, #7
 80096ca:	f023 0307 	bic.w	r3, r3, #7
 80096ce:	3308      	adds	r3, #8
 80096d0:	9303      	str	r3, [sp, #12]
 80096d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d4:	4433      	add	r3, r6
 80096d6:	9309      	str	r3, [sp, #36]	; 0x24
 80096d8:	e767      	b.n	80095aa <_svfiprintf_r+0x4e>
 80096da:	fb0c 3202 	mla	r2, ip, r2, r3
 80096de:	460c      	mov	r4, r1
 80096e0:	2001      	movs	r0, #1
 80096e2:	e7a5      	b.n	8009630 <_svfiprintf_r+0xd4>
 80096e4:	2300      	movs	r3, #0
 80096e6:	3401      	adds	r4, #1
 80096e8:	9305      	str	r3, [sp, #20]
 80096ea:	4619      	mov	r1, r3
 80096ec:	f04f 0c0a 	mov.w	ip, #10
 80096f0:	4620      	mov	r0, r4
 80096f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096f6:	3a30      	subs	r2, #48	; 0x30
 80096f8:	2a09      	cmp	r2, #9
 80096fa:	d903      	bls.n	8009704 <_svfiprintf_r+0x1a8>
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d0c5      	beq.n	800968c <_svfiprintf_r+0x130>
 8009700:	9105      	str	r1, [sp, #20]
 8009702:	e7c3      	b.n	800968c <_svfiprintf_r+0x130>
 8009704:	fb0c 2101 	mla	r1, ip, r1, r2
 8009708:	4604      	mov	r4, r0
 800970a:	2301      	movs	r3, #1
 800970c:	e7f0      	b.n	80096f0 <_svfiprintf_r+0x194>
 800970e:	ab03      	add	r3, sp, #12
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	462a      	mov	r2, r5
 8009714:	4b0f      	ldr	r3, [pc, #60]	; (8009754 <_svfiprintf_r+0x1f8>)
 8009716:	a904      	add	r1, sp, #16
 8009718:	4638      	mov	r0, r7
 800971a:	f7fd ffcb 	bl	80076b4 <_printf_float>
 800971e:	1c42      	adds	r2, r0, #1
 8009720:	4606      	mov	r6, r0
 8009722:	d1d6      	bne.n	80096d2 <_svfiprintf_r+0x176>
 8009724:	89ab      	ldrh	r3, [r5, #12]
 8009726:	065b      	lsls	r3, r3, #25
 8009728:	f53f af2c 	bmi.w	8009584 <_svfiprintf_r+0x28>
 800972c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800972e:	b01d      	add	sp, #116	; 0x74
 8009730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009734:	ab03      	add	r3, sp, #12
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	462a      	mov	r2, r5
 800973a:	4b06      	ldr	r3, [pc, #24]	; (8009754 <_svfiprintf_r+0x1f8>)
 800973c:	a904      	add	r1, sp, #16
 800973e:	4638      	mov	r0, r7
 8009740:	f7fe fa5c 	bl	8007bfc <_printf_i>
 8009744:	e7eb      	b.n	800971e <_svfiprintf_r+0x1c2>
 8009746:	bf00      	nop
 8009748:	0800ba84 	.word	0x0800ba84
 800974c:	0800ba8e 	.word	0x0800ba8e
 8009750:	080076b5 	.word	0x080076b5
 8009754:	080094a5 	.word	0x080094a5
 8009758:	0800ba8a 	.word	0x0800ba8a

0800975c <_sbrk_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4d06      	ldr	r5, [pc, #24]	; (8009778 <_sbrk_r+0x1c>)
 8009760:	2300      	movs	r3, #0
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	602b      	str	r3, [r5, #0]
 8009768:	f7f9 fb02 	bl	8002d70 <_sbrk>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_sbrk_r+0x1a>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_sbrk_r+0x1a>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20000658 	.word	0x20000658

0800977c <__assert_func>:
 800977c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800977e:	4614      	mov	r4, r2
 8009780:	461a      	mov	r2, r3
 8009782:	4b09      	ldr	r3, [pc, #36]	; (80097a8 <__assert_func+0x2c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4605      	mov	r5, r0
 8009788:	68d8      	ldr	r0, [r3, #12]
 800978a:	b14c      	cbz	r4, 80097a0 <__assert_func+0x24>
 800978c:	4b07      	ldr	r3, [pc, #28]	; (80097ac <__assert_func+0x30>)
 800978e:	9100      	str	r1, [sp, #0]
 8009790:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009794:	4906      	ldr	r1, [pc, #24]	; (80097b0 <__assert_func+0x34>)
 8009796:	462b      	mov	r3, r5
 8009798:	f000 f80e 	bl	80097b8 <fiprintf>
 800979c:	f000 faac 	bl	8009cf8 <abort>
 80097a0:	4b04      	ldr	r3, [pc, #16]	; (80097b4 <__assert_func+0x38>)
 80097a2:	461c      	mov	r4, r3
 80097a4:	e7f3      	b.n	800978e <__assert_func+0x12>
 80097a6:	bf00      	nop
 80097a8:	20000034 	.word	0x20000034
 80097ac:	0800ba95 	.word	0x0800ba95
 80097b0:	0800baa2 	.word	0x0800baa2
 80097b4:	0800bad0 	.word	0x0800bad0

080097b8 <fiprintf>:
 80097b8:	b40e      	push	{r1, r2, r3}
 80097ba:	b503      	push	{r0, r1, lr}
 80097bc:	4601      	mov	r1, r0
 80097be:	ab03      	add	r3, sp, #12
 80097c0:	4805      	ldr	r0, [pc, #20]	; (80097d8 <fiprintf+0x20>)
 80097c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c6:	6800      	ldr	r0, [r0, #0]
 80097c8:	9301      	str	r3, [sp, #4]
 80097ca:	f000 f897 	bl	80098fc <_vfiprintf_r>
 80097ce:	b002      	add	sp, #8
 80097d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80097d4:	b003      	add	sp, #12
 80097d6:	4770      	bx	lr
 80097d8:	20000034 	.word	0x20000034

080097dc <__ascii_mbtowc>:
 80097dc:	b082      	sub	sp, #8
 80097de:	b901      	cbnz	r1, 80097e2 <__ascii_mbtowc+0x6>
 80097e0:	a901      	add	r1, sp, #4
 80097e2:	b142      	cbz	r2, 80097f6 <__ascii_mbtowc+0x1a>
 80097e4:	b14b      	cbz	r3, 80097fa <__ascii_mbtowc+0x1e>
 80097e6:	7813      	ldrb	r3, [r2, #0]
 80097e8:	600b      	str	r3, [r1, #0]
 80097ea:	7812      	ldrb	r2, [r2, #0]
 80097ec:	1e10      	subs	r0, r2, #0
 80097ee:	bf18      	it	ne
 80097f0:	2001      	movne	r0, #1
 80097f2:	b002      	add	sp, #8
 80097f4:	4770      	bx	lr
 80097f6:	4610      	mov	r0, r2
 80097f8:	e7fb      	b.n	80097f2 <__ascii_mbtowc+0x16>
 80097fa:	f06f 0001 	mvn.w	r0, #1
 80097fe:	e7f8      	b.n	80097f2 <__ascii_mbtowc+0x16>

08009800 <memmove>:
 8009800:	4288      	cmp	r0, r1
 8009802:	b510      	push	{r4, lr}
 8009804:	eb01 0402 	add.w	r4, r1, r2
 8009808:	d902      	bls.n	8009810 <memmove+0x10>
 800980a:	4284      	cmp	r4, r0
 800980c:	4623      	mov	r3, r4
 800980e:	d807      	bhi.n	8009820 <memmove+0x20>
 8009810:	1e43      	subs	r3, r0, #1
 8009812:	42a1      	cmp	r1, r4
 8009814:	d008      	beq.n	8009828 <memmove+0x28>
 8009816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800981a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800981e:	e7f8      	b.n	8009812 <memmove+0x12>
 8009820:	4402      	add	r2, r0
 8009822:	4601      	mov	r1, r0
 8009824:	428a      	cmp	r2, r1
 8009826:	d100      	bne.n	800982a <memmove+0x2a>
 8009828:	bd10      	pop	{r4, pc}
 800982a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800982e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009832:	e7f7      	b.n	8009824 <memmove+0x24>

08009834 <__malloc_lock>:
 8009834:	4801      	ldr	r0, [pc, #4]	; (800983c <__malloc_lock+0x8>)
 8009836:	f000 bc1f 	b.w	800a078 <__retarget_lock_acquire_recursive>
 800983a:	bf00      	nop
 800983c:	2000065c 	.word	0x2000065c

08009840 <__malloc_unlock>:
 8009840:	4801      	ldr	r0, [pc, #4]	; (8009848 <__malloc_unlock+0x8>)
 8009842:	f000 bc1a 	b.w	800a07a <__retarget_lock_release_recursive>
 8009846:	bf00      	nop
 8009848:	2000065c 	.word	0x2000065c

0800984c <_realloc_r>:
 800984c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009850:	4680      	mov	r8, r0
 8009852:	4614      	mov	r4, r2
 8009854:	460e      	mov	r6, r1
 8009856:	b921      	cbnz	r1, 8009862 <_realloc_r+0x16>
 8009858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800985c:	4611      	mov	r1, r2
 800985e:	f7ff bdad 	b.w	80093bc <_malloc_r>
 8009862:	b92a      	cbnz	r2, 8009870 <_realloc_r+0x24>
 8009864:	f7ff fd3e 	bl	80092e4 <_free_r>
 8009868:	4625      	mov	r5, r4
 800986a:	4628      	mov	r0, r5
 800986c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009870:	f000 fc6a 	bl	800a148 <_malloc_usable_size_r>
 8009874:	4284      	cmp	r4, r0
 8009876:	4607      	mov	r7, r0
 8009878:	d802      	bhi.n	8009880 <_realloc_r+0x34>
 800987a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800987e:	d812      	bhi.n	80098a6 <_realloc_r+0x5a>
 8009880:	4621      	mov	r1, r4
 8009882:	4640      	mov	r0, r8
 8009884:	f7ff fd9a 	bl	80093bc <_malloc_r>
 8009888:	4605      	mov	r5, r0
 800988a:	2800      	cmp	r0, #0
 800988c:	d0ed      	beq.n	800986a <_realloc_r+0x1e>
 800988e:	42bc      	cmp	r4, r7
 8009890:	4622      	mov	r2, r4
 8009892:	4631      	mov	r1, r6
 8009894:	bf28      	it	cs
 8009896:	463a      	movcs	r2, r7
 8009898:	f7ff f97c 	bl	8008b94 <memcpy>
 800989c:	4631      	mov	r1, r6
 800989e:	4640      	mov	r0, r8
 80098a0:	f7ff fd20 	bl	80092e4 <_free_r>
 80098a4:	e7e1      	b.n	800986a <_realloc_r+0x1e>
 80098a6:	4635      	mov	r5, r6
 80098a8:	e7df      	b.n	800986a <_realloc_r+0x1e>

080098aa <__sfputc_r>:
 80098aa:	6893      	ldr	r3, [r2, #8]
 80098ac:	3b01      	subs	r3, #1
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	b410      	push	{r4}
 80098b2:	6093      	str	r3, [r2, #8]
 80098b4:	da08      	bge.n	80098c8 <__sfputc_r+0x1e>
 80098b6:	6994      	ldr	r4, [r2, #24]
 80098b8:	42a3      	cmp	r3, r4
 80098ba:	db01      	blt.n	80098c0 <__sfputc_r+0x16>
 80098bc:	290a      	cmp	r1, #10
 80098be:	d103      	bne.n	80098c8 <__sfputc_r+0x1e>
 80098c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098c4:	f000 b94a 	b.w	8009b5c <__swbuf_r>
 80098c8:	6813      	ldr	r3, [r2, #0]
 80098ca:	1c58      	adds	r0, r3, #1
 80098cc:	6010      	str	r0, [r2, #0]
 80098ce:	7019      	strb	r1, [r3, #0]
 80098d0:	4608      	mov	r0, r1
 80098d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <__sfputs_r>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	4606      	mov	r6, r0
 80098dc:	460f      	mov	r7, r1
 80098de:	4614      	mov	r4, r2
 80098e0:	18d5      	adds	r5, r2, r3
 80098e2:	42ac      	cmp	r4, r5
 80098e4:	d101      	bne.n	80098ea <__sfputs_r+0x12>
 80098e6:	2000      	movs	r0, #0
 80098e8:	e007      	b.n	80098fa <__sfputs_r+0x22>
 80098ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ee:	463a      	mov	r2, r7
 80098f0:	4630      	mov	r0, r6
 80098f2:	f7ff ffda 	bl	80098aa <__sfputc_r>
 80098f6:	1c43      	adds	r3, r0, #1
 80098f8:	d1f3      	bne.n	80098e2 <__sfputs_r+0xa>
 80098fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098fc <_vfiprintf_r>:
 80098fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009900:	460d      	mov	r5, r1
 8009902:	b09d      	sub	sp, #116	; 0x74
 8009904:	4614      	mov	r4, r2
 8009906:	4698      	mov	r8, r3
 8009908:	4606      	mov	r6, r0
 800990a:	b118      	cbz	r0, 8009914 <_vfiprintf_r+0x18>
 800990c:	6983      	ldr	r3, [r0, #24]
 800990e:	b90b      	cbnz	r3, 8009914 <_vfiprintf_r+0x18>
 8009910:	f000 fb14 	bl	8009f3c <__sinit>
 8009914:	4b89      	ldr	r3, [pc, #548]	; (8009b3c <_vfiprintf_r+0x240>)
 8009916:	429d      	cmp	r5, r3
 8009918:	d11b      	bne.n	8009952 <_vfiprintf_r+0x56>
 800991a:	6875      	ldr	r5, [r6, #4]
 800991c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800991e:	07d9      	lsls	r1, r3, #31
 8009920:	d405      	bmi.n	800992e <_vfiprintf_r+0x32>
 8009922:	89ab      	ldrh	r3, [r5, #12]
 8009924:	059a      	lsls	r2, r3, #22
 8009926:	d402      	bmi.n	800992e <_vfiprintf_r+0x32>
 8009928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800992a:	f000 fba5 	bl	800a078 <__retarget_lock_acquire_recursive>
 800992e:	89ab      	ldrh	r3, [r5, #12]
 8009930:	071b      	lsls	r3, r3, #28
 8009932:	d501      	bpl.n	8009938 <_vfiprintf_r+0x3c>
 8009934:	692b      	ldr	r3, [r5, #16]
 8009936:	b9eb      	cbnz	r3, 8009974 <_vfiprintf_r+0x78>
 8009938:	4629      	mov	r1, r5
 800993a:	4630      	mov	r0, r6
 800993c:	f000 f96e 	bl	8009c1c <__swsetup_r>
 8009940:	b1c0      	cbz	r0, 8009974 <_vfiprintf_r+0x78>
 8009942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009944:	07dc      	lsls	r4, r3, #31
 8009946:	d50e      	bpl.n	8009966 <_vfiprintf_r+0x6a>
 8009948:	f04f 30ff 	mov.w	r0, #4294967295
 800994c:	b01d      	add	sp, #116	; 0x74
 800994e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009952:	4b7b      	ldr	r3, [pc, #492]	; (8009b40 <_vfiprintf_r+0x244>)
 8009954:	429d      	cmp	r5, r3
 8009956:	d101      	bne.n	800995c <_vfiprintf_r+0x60>
 8009958:	68b5      	ldr	r5, [r6, #8]
 800995a:	e7df      	b.n	800991c <_vfiprintf_r+0x20>
 800995c:	4b79      	ldr	r3, [pc, #484]	; (8009b44 <_vfiprintf_r+0x248>)
 800995e:	429d      	cmp	r5, r3
 8009960:	bf08      	it	eq
 8009962:	68f5      	ldreq	r5, [r6, #12]
 8009964:	e7da      	b.n	800991c <_vfiprintf_r+0x20>
 8009966:	89ab      	ldrh	r3, [r5, #12]
 8009968:	0598      	lsls	r0, r3, #22
 800996a:	d4ed      	bmi.n	8009948 <_vfiprintf_r+0x4c>
 800996c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800996e:	f000 fb84 	bl	800a07a <__retarget_lock_release_recursive>
 8009972:	e7e9      	b.n	8009948 <_vfiprintf_r+0x4c>
 8009974:	2300      	movs	r3, #0
 8009976:	9309      	str	r3, [sp, #36]	; 0x24
 8009978:	2320      	movs	r3, #32
 800997a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800997e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009982:	2330      	movs	r3, #48	; 0x30
 8009984:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b48 <_vfiprintf_r+0x24c>
 8009988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800998c:	f04f 0901 	mov.w	r9, #1
 8009990:	4623      	mov	r3, r4
 8009992:	469a      	mov	sl, r3
 8009994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009998:	b10a      	cbz	r2, 800999e <_vfiprintf_r+0xa2>
 800999a:	2a25      	cmp	r2, #37	; 0x25
 800999c:	d1f9      	bne.n	8009992 <_vfiprintf_r+0x96>
 800999e:	ebba 0b04 	subs.w	fp, sl, r4
 80099a2:	d00b      	beq.n	80099bc <_vfiprintf_r+0xc0>
 80099a4:	465b      	mov	r3, fp
 80099a6:	4622      	mov	r2, r4
 80099a8:	4629      	mov	r1, r5
 80099aa:	4630      	mov	r0, r6
 80099ac:	f7ff ff94 	bl	80098d8 <__sfputs_r>
 80099b0:	3001      	adds	r0, #1
 80099b2:	f000 80aa 	beq.w	8009b0a <_vfiprintf_r+0x20e>
 80099b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099b8:	445a      	add	r2, fp
 80099ba:	9209      	str	r2, [sp, #36]	; 0x24
 80099bc:	f89a 3000 	ldrb.w	r3, [sl]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f000 80a2 	beq.w	8009b0a <_vfiprintf_r+0x20e>
 80099c6:	2300      	movs	r3, #0
 80099c8:	f04f 32ff 	mov.w	r2, #4294967295
 80099cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099d0:	f10a 0a01 	add.w	sl, sl, #1
 80099d4:	9304      	str	r3, [sp, #16]
 80099d6:	9307      	str	r3, [sp, #28]
 80099d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099dc:	931a      	str	r3, [sp, #104]	; 0x68
 80099de:	4654      	mov	r4, sl
 80099e0:	2205      	movs	r2, #5
 80099e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099e6:	4858      	ldr	r0, [pc, #352]	; (8009b48 <_vfiprintf_r+0x24c>)
 80099e8:	f7f6 fc1a 	bl	8000220 <memchr>
 80099ec:	9a04      	ldr	r2, [sp, #16]
 80099ee:	b9d8      	cbnz	r0, 8009a28 <_vfiprintf_r+0x12c>
 80099f0:	06d1      	lsls	r1, r2, #27
 80099f2:	bf44      	itt	mi
 80099f4:	2320      	movmi	r3, #32
 80099f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099fa:	0713      	lsls	r3, r2, #28
 80099fc:	bf44      	itt	mi
 80099fe:	232b      	movmi	r3, #43	; 0x2b
 8009a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a04:	f89a 3000 	ldrb.w	r3, [sl]
 8009a08:	2b2a      	cmp	r3, #42	; 0x2a
 8009a0a:	d015      	beq.n	8009a38 <_vfiprintf_r+0x13c>
 8009a0c:	9a07      	ldr	r2, [sp, #28]
 8009a0e:	4654      	mov	r4, sl
 8009a10:	2000      	movs	r0, #0
 8009a12:	f04f 0c0a 	mov.w	ip, #10
 8009a16:	4621      	mov	r1, r4
 8009a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a1c:	3b30      	subs	r3, #48	; 0x30
 8009a1e:	2b09      	cmp	r3, #9
 8009a20:	d94e      	bls.n	8009ac0 <_vfiprintf_r+0x1c4>
 8009a22:	b1b0      	cbz	r0, 8009a52 <_vfiprintf_r+0x156>
 8009a24:	9207      	str	r2, [sp, #28]
 8009a26:	e014      	b.n	8009a52 <_vfiprintf_r+0x156>
 8009a28:	eba0 0308 	sub.w	r3, r0, r8
 8009a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a30:	4313      	orrs	r3, r2
 8009a32:	9304      	str	r3, [sp, #16]
 8009a34:	46a2      	mov	sl, r4
 8009a36:	e7d2      	b.n	80099de <_vfiprintf_r+0xe2>
 8009a38:	9b03      	ldr	r3, [sp, #12]
 8009a3a:	1d19      	adds	r1, r3, #4
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	9103      	str	r1, [sp, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	bfbb      	ittet	lt
 8009a44:	425b      	neglt	r3, r3
 8009a46:	f042 0202 	orrlt.w	r2, r2, #2
 8009a4a:	9307      	strge	r3, [sp, #28]
 8009a4c:	9307      	strlt	r3, [sp, #28]
 8009a4e:	bfb8      	it	lt
 8009a50:	9204      	strlt	r2, [sp, #16]
 8009a52:	7823      	ldrb	r3, [r4, #0]
 8009a54:	2b2e      	cmp	r3, #46	; 0x2e
 8009a56:	d10c      	bne.n	8009a72 <_vfiprintf_r+0x176>
 8009a58:	7863      	ldrb	r3, [r4, #1]
 8009a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a5c:	d135      	bne.n	8009aca <_vfiprintf_r+0x1ce>
 8009a5e:	9b03      	ldr	r3, [sp, #12]
 8009a60:	1d1a      	adds	r2, r3, #4
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	9203      	str	r2, [sp, #12]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	bfb8      	it	lt
 8009a6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a6e:	3402      	adds	r4, #2
 8009a70:	9305      	str	r3, [sp, #20]
 8009a72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b58 <_vfiprintf_r+0x25c>
 8009a76:	7821      	ldrb	r1, [r4, #0]
 8009a78:	2203      	movs	r2, #3
 8009a7a:	4650      	mov	r0, sl
 8009a7c:	f7f6 fbd0 	bl	8000220 <memchr>
 8009a80:	b140      	cbz	r0, 8009a94 <_vfiprintf_r+0x198>
 8009a82:	2340      	movs	r3, #64	; 0x40
 8009a84:	eba0 000a 	sub.w	r0, r0, sl
 8009a88:	fa03 f000 	lsl.w	r0, r3, r0
 8009a8c:	9b04      	ldr	r3, [sp, #16]
 8009a8e:	4303      	orrs	r3, r0
 8009a90:	3401      	adds	r4, #1
 8009a92:	9304      	str	r3, [sp, #16]
 8009a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a98:	482c      	ldr	r0, [pc, #176]	; (8009b4c <_vfiprintf_r+0x250>)
 8009a9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a9e:	2206      	movs	r2, #6
 8009aa0:	f7f6 fbbe 	bl	8000220 <memchr>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d03f      	beq.n	8009b28 <_vfiprintf_r+0x22c>
 8009aa8:	4b29      	ldr	r3, [pc, #164]	; (8009b50 <_vfiprintf_r+0x254>)
 8009aaa:	bb1b      	cbnz	r3, 8009af4 <_vfiprintf_r+0x1f8>
 8009aac:	9b03      	ldr	r3, [sp, #12]
 8009aae:	3307      	adds	r3, #7
 8009ab0:	f023 0307 	bic.w	r3, r3, #7
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	9303      	str	r3, [sp, #12]
 8009ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aba:	443b      	add	r3, r7
 8009abc:	9309      	str	r3, [sp, #36]	; 0x24
 8009abe:	e767      	b.n	8009990 <_vfiprintf_r+0x94>
 8009ac0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	2001      	movs	r0, #1
 8009ac8:	e7a5      	b.n	8009a16 <_vfiprintf_r+0x11a>
 8009aca:	2300      	movs	r3, #0
 8009acc:	3401      	adds	r4, #1
 8009ace:	9305      	str	r3, [sp, #20]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	f04f 0c0a 	mov.w	ip, #10
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009adc:	3a30      	subs	r2, #48	; 0x30
 8009ade:	2a09      	cmp	r2, #9
 8009ae0:	d903      	bls.n	8009aea <_vfiprintf_r+0x1ee>
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d0c5      	beq.n	8009a72 <_vfiprintf_r+0x176>
 8009ae6:	9105      	str	r1, [sp, #20]
 8009ae8:	e7c3      	b.n	8009a72 <_vfiprintf_r+0x176>
 8009aea:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aee:	4604      	mov	r4, r0
 8009af0:	2301      	movs	r3, #1
 8009af2:	e7f0      	b.n	8009ad6 <_vfiprintf_r+0x1da>
 8009af4:	ab03      	add	r3, sp, #12
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	462a      	mov	r2, r5
 8009afa:	4b16      	ldr	r3, [pc, #88]	; (8009b54 <_vfiprintf_r+0x258>)
 8009afc:	a904      	add	r1, sp, #16
 8009afe:	4630      	mov	r0, r6
 8009b00:	f7fd fdd8 	bl	80076b4 <_printf_float>
 8009b04:	4607      	mov	r7, r0
 8009b06:	1c78      	adds	r0, r7, #1
 8009b08:	d1d6      	bne.n	8009ab8 <_vfiprintf_r+0x1bc>
 8009b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b0c:	07d9      	lsls	r1, r3, #31
 8009b0e:	d405      	bmi.n	8009b1c <_vfiprintf_r+0x220>
 8009b10:	89ab      	ldrh	r3, [r5, #12]
 8009b12:	059a      	lsls	r2, r3, #22
 8009b14:	d402      	bmi.n	8009b1c <_vfiprintf_r+0x220>
 8009b16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b18:	f000 faaf 	bl	800a07a <__retarget_lock_release_recursive>
 8009b1c:	89ab      	ldrh	r3, [r5, #12]
 8009b1e:	065b      	lsls	r3, r3, #25
 8009b20:	f53f af12 	bmi.w	8009948 <_vfiprintf_r+0x4c>
 8009b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b26:	e711      	b.n	800994c <_vfiprintf_r+0x50>
 8009b28:	ab03      	add	r3, sp, #12
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	462a      	mov	r2, r5
 8009b2e:	4b09      	ldr	r3, [pc, #36]	; (8009b54 <_vfiprintf_r+0x258>)
 8009b30:	a904      	add	r1, sp, #16
 8009b32:	4630      	mov	r0, r6
 8009b34:	f7fe f862 	bl	8007bfc <_printf_i>
 8009b38:	e7e4      	b.n	8009b04 <_vfiprintf_r+0x208>
 8009b3a:	bf00      	nop
 8009b3c:	0800bbfc 	.word	0x0800bbfc
 8009b40:	0800bc1c 	.word	0x0800bc1c
 8009b44:	0800bbdc 	.word	0x0800bbdc
 8009b48:	0800ba84 	.word	0x0800ba84
 8009b4c:	0800ba8e 	.word	0x0800ba8e
 8009b50:	080076b5 	.word	0x080076b5
 8009b54:	080098d9 	.word	0x080098d9
 8009b58:	0800ba8a 	.word	0x0800ba8a

08009b5c <__swbuf_r>:
 8009b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5e:	460e      	mov	r6, r1
 8009b60:	4614      	mov	r4, r2
 8009b62:	4605      	mov	r5, r0
 8009b64:	b118      	cbz	r0, 8009b6e <__swbuf_r+0x12>
 8009b66:	6983      	ldr	r3, [r0, #24]
 8009b68:	b90b      	cbnz	r3, 8009b6e <__swbuf_r+0x12>
 8009b6a:	f000 f9e7 	bl	8009f3c <__sinit>
 8009b6e:	4b21      	ldr	r3, [pc, #132]	; (8009bf4 <__swbuf_r+0x98>)
 8009b70:	429c      	cmp	r4, r3
 8009b72:	d12b      	bne.n	8009bcc <__swbuf_r+0x70>
 8009b74:	686c      	ldr	r4, [r5, #4]
 8009b76:	69a3      	ldr	r3, [r4, #24]
 8009b78:	60a3      	str	r3, [r4, #8]
 8009b7a:	89a3      	ldrh	r3, [r4, #12]
 8009b7c:	071a      	lsls	r2, r3, #28
 8009b7e:	d52f      	bpl.n	8009be0 <__swbuf_r+0x84>
 8009b80:	6923      	ldr	r3, [r4, #16]
 8009b82:	b36b      	cbz	r3, 8009be0 <__swbuf_r+0x84>
 8009b84:	6923      	ldr	r3, [r4, #16]
 8009b86:	6820      	ldr	r0, [r4, #0]
 8009b88:	1ac0      	subs	r0, r0, r3
 8009b8a:	6963      	ldr	r3, [r4, #20]
 8009b8c:	b2f6      	uxtb	r6, r6
 8009b8e:	4283      	cmp	r3, r0
 8009b90:	4637      	mov	r7, r6
 8009b92:	dc04      	bgt.n	8009b9e <__swbuf_r+0x42>
 8009b94:	4621      	mov	r1, r4
 8009b96:	4628      	mov	r0, r5
 8009b98:	f000 f93c 	bl	8009e14 <_fflush_r>
 8009b9c:	bb30      	cbnz	r0, 8009bec <__swbuf_r+0x90>
 8009b9e:	68a3      	ldr	r3, [r4, #8]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	60a3      	str	r3, [r4, #8]
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	1c5a      	adds	r2, r3, #1
 8009ba8:	6022      	str	r2, [r4, #0]
 8009baa:	701e      	strb	r6, [r3, #0]
 8009bac:	6963      	ldr	r3, [r4, #20]
 8009bae:	3001      	adds	r0, #1
 8009bb0:	4283      	cmp	r3, r0
 8009bb2:	d004      	beq.n	8009bbe <__swbuf_r+0x62>
 8009bb4:	89a3      	ldrh	r3, [r4, #12]
 8009bb6:	07db      	lsls	r3, r3, #31
 8009bb8:	d506      	bpl.n	8009bc8 <__swbuf_r+0x6c>
 8009bba:	2e0a      	cmp	r6, #10
 8009bbc:	d104      	bne.n	8009bc8 <__swbuf_r+0x6c>
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	f000 f927 	bl	8009e14 <_fflush_r>
 8009bc6:	b988      	cbnz	r0, 8009bec <__swbuf_r+0x90>
 8009bc8:	4638      	mov	r0, r7
 8009bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bcc:	4b0a      	ldr	r3, [pc, #40]	; (8009bf8 <__swbuf_r+0x9c>)
 8009bce:	429c      	cmp	r4, r3
 8009bd0:	d101      	bne.n	8009bd6 <__swbuf_r+0x7a>
 8009bd2:	68ac      	ldr	r4, [r5, #8]
 8009bd4:	e7cf      	b.n	8009b76 <__swbuf_r+0x1a>
 8009bd6:	4b09      	ldr	r3, [pc, #36]	; (8009bfc <__swbuf_r+0xa0>)
 8009bd8:	429c      	cmp	r4, r3
 8009bda:	bf08      	it	eq
 8009bdc:	68ec      	ldreq	r4, [r5, #12]
 8009bde:	e7ca      	b.n	8009b76 <__swbuf_r+0x1a>
 8009be0:	4621      	mov	r1, r4
 8009be2:	4628      	mov	r0, r5
 8009be4:	f000 f81a 	bl	8009c1c <__swsetup_r>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d0cb      	beq.n	8009b84 <__swbuf_r+0x28>
 8009bec:	f04f 37ff 	mov.w	r7, #4294967295
 8009bf0:	e7ea      	b.n	8009bc8 <__swbuf_r+0x6c>
 8009bf2:	bf00      	nop
 8009bf4:	0800bbfc 	.word	0x0800bbfc
 8009bf8:	0800bc1c 	.word	0x0800bc1c
 8009bfc:	0800bbdc 	.word	0x0800bbdc

08009c00 <__ascii_wctomb>:
 8009c00:	b149      	cbz	r1, 8009c16 <__ascii_wctomb+0x16>
 8009c02:	2aff      	cmp	r2, #255	; 0xff
 8009c04:	bf85      	ittet	hi
 8009c06:	238a      	movhi	r3, #138	; 0x8a
 8009c08:	6003      	strhi	r3, [r0, #0]
 8009c0a:	700a      	strbls	r2, [r1, #0]
 8009c0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c10:	bf98      	it	ls
 8009c12:	2001      	movls	r0, #1
 8009c14:	4770      	bx	lr
 8009c16:	4608      	mov	r0, r1
 8009c18:	4770      	bx	lr
	...

08009c1c <__swsetup_r>:
 8009c1c:	4b32      	ldr	r3, [pc, #200]	; (8009ce8 <__swsetup_r+0xcc>)
 8009c1e:	b570      	push	{r4, r5, r6, lr}
 8009c20:	681d      	ldr	r5, [r3, #0]
 8009c22:	4606      	mov	r6, r0
 8009c24:	460c      	mov	r4, r1
 8009c26:	b125      	cbz	r5, 8009c32 <__swsetup_r+0x16>
 8009c28:	69ab      	ldr	r3, [r5, #24]
 8009c2a:	b913      	cbnz	r3, 8009c32 <__swsetup_r+0x16>
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	f000 f985 	bl	8009f3c <__sinit>
 8009c32:	4b2e      	ldr	r3, [pc, #184]	; (8009cec <__swsetup_r+0xd0>)
 8009c34:	429c      	cmp	r4, r3
 8009c36:	d10f      	bne.n	8009c58 <__swsetup_r+0x3c>
 8009c38:	686c      	ldr	r4, [r5, #4]
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c40:	0719      	lsls	r1, r3, #28
 8009c42:	d42c      	bmi.n	8009c9e <__swsetup_r+0x82>
 8009c44:	06dd      	lsls	r5, r3, #27
 8009c46:	d411      	bmi.n	8009c6c <__swsetup_r+0x50>
 8009c48:	2309      	movs	r3, #9
 8009c4a:	6033      	str	r3, [r6, #0]
 8009c4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c50:	81a3      	strh	r3, [r4, #12]
 8009c52:	f04f 30ff 	mov.w	r0, #4294967295
 8009c56:	e03e      	b.n	8009cd6 <__swsetup_r+0xba>
 8009c58:	4b25      	ldr	r3, [pc, #148]	; (8009cf0 <__swsetup_r+0xd4>)
 8009c5a:	429c      	cmp	r4, r3
 8009c5c:	d101      	bne.n	8009c62 <__swsetup_r+0x46>
 8009c5e:	68ac      	ldr	r4, [r5, #8]
 8009c60:	e7eb      	b.n	8009c3a <__swsetup_r+0x1e>
 8009c62:	4b24      	ldr	r3, [pc, #144]	; (8009cf4 <__swsetup_r+0xd8>)
 8009c64:	429c      	cmp	r4, r3
 8009c66:	bf08      	it	eq
 8009c68:	68ec      	ldreq	r4, [r5, #12]
 8009c6a:	e7e6      	b.n	8009c3a <__swsetup_r+0x1e>
 8009c6c:	0758      	lsls	r0, r3, #29
 8009c6e:	d512      	bpl.n	8009c96 <__swsetup_r+0x7a>
 8009c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c72:	b141      	cbz	r1, 8009c86 <__swsetup_r+0x6a>
 8009c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c78:	4299      	cmp	r1, r3
 8009c7a:	d002      	beq.n	8009c82 <__swsetup_r+0x66>
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	f7ff fb31 	bl	80092e4 <_free_r>
 8009c82:	2300      	movs	r3, #0
 8009c84:	6363      	str	r3, [r4, #52]	; 0x34
 8009c86:	89a3      	ldrh	r3, [r4, #12]
 8009c88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c8c:	81a3      	strh	r3, [r4, #12]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	6063      	str	r3, [r4, #4]
 8009c92:	6923      	ldr	r3, [r4, #16]
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	89a3      	ldrh	r3, [r4, #12]
 8009c98:	f043 0308 	orr.w	r3, r3, #8
 8009c9c:	81a3      	strh	r3, [r4, #12]
 8009c9e:	6923      	ldr	r3, [r4, #16]
 8009ca0:	b94b      	cbnz	r3, 8009cb6 <__swsetup_r+0x9a>
 8009ca2:	89a3      	ldrh	r3, [r4, #12]
 8009ca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cac:	d003      	beq.n	8009cb6 <__swsetup_r+0x9a>
 8009cae:	4621      	mov	r1, r4
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	f000 fa09 	bl	800a0c8 <__smakebuf_r>
 8009cb6:	89a0      	ldrh	r0, [r4, #12]
 8009cb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cbc:	f010 0301 	ands.w	r3, r0, #1
 8009cc0:	d00a      	beq.n	8009cd8 <__swsetup_r+0xbc>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	60a3      	str	r3, [r4, #8]
 8009cc6:	6963      	ldr	r3, [r4, #20]
 8009cc8:	425b      	negs	r3, r3
 8009cca:	61a3      	str	r3, [r4, #24]
 8009ccc:	6923      	ldr	r3, [r4, #16]
 8009cce:	b943      	cbnz	r3, 8009ce2 <__swsetup_r+0xc6>
 8009cd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cd4:	d1ba      	bne.n	8009c4c <__swsetup_r+0x30>
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}
 8009cd8:	0781      	lsls	r1, r0, #30
 8009cda:	bf58      	it	pl
 8009cdc:	6963      	ldrpl	r3, [r4, #20]
 8009cde:	60a3      	str	r3, [r4, #8]
 8009ce0:	e7f4      	b.n	8009ccc <__swsetup_r+0xb0>
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	e7f7      	b.n	8009cd6 <__swsetup_r+0xba>
 8009ce6:	bf00      	nop
 8009ce8:	20000034 	.word	0x20000034
 8009cec:	0800bbfc 	.word	0x0800bbfc
 8009cf0:	0800bc1c 	.word	0x0800bc1c
 8009cf4:	0800bbdc 	.word	0x0800bbdc

08009cf8 <abort>:
 8009cf8:	b508      	push	{r3, lr}
 8009cfa:	2006      	movs	r0, #6
 8009cfc:	f000 fa54 	bl	800a1a8 <raise>
 8009d00:	2001      	movs	r0, #1
 8009d02:	f7f8 ffbd 	bl	8002c80 <_exit>
	...

08009d08 <__sflush_r>:
 8009d08:	898a      	ldrh	r2, [r1, #12]
 8009d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0e:	4605      	mov	r5, r0
 8009d10:	0710      	lsls	r0, r2, #28
 8009d12:	460c      	mov	r4, r1
 8009d14:	d458      	bmi.n	8009dc8 <__sflush_r+0xc0>
 8009d16:	684b      	ldr	r3, [r1, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	dc05      	bgt.n	8009d28 <__sflush_r+0x20>
 8009d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	dc02      	bgt.n	8009d28 <__sflush_r+0x20>
 8009d22:	2000      	movs	r0, #0
 8009d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d2a:	2e00      	cmp	r6, #0
 8009d2c:	d0f9      	beq.n	8009d22 <__sflush_r+0x1a>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d34:	682f      	ldr	r7, [r5, #0]
 8009d36:	602b      	str	r3, [r5, #0]
 8009d38:	d032      	beq.n	8009da0 <__sflush_r+0x98>
 8009d3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	075a      	lsls	r2, r3, #29
 8009d40:	d505      	bpl.n	8009d4e <__sflush_r+0x46>
 8009d42:	6863      	ldr	r3, [r4, #4]
 8009d44:	1ac0      	subs	r0, r0, r3
 8009d46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d48:	b10b      	cbz	r3, 8009d4e <__sflush_r+0x46>
 8009d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d4c:	1ac0      	subs	r0, r0, r3
 8009d4e:	2300      	movs	r3, #0
 8009d50:	4602      	mov	r2, r0
 8009d52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d54:	6a21      	ldr	r1, [r4, #32]
 8009d56:	4628      	mov	r0, r5
 8009d58:	47b0      	blx	r6
 8009d5a:	1c43      	adds	r3, r0, #1
 8009d5c:	89a3      	ldrh	r3, [r4, #12]
 8009d5e:	d106      	bne.n	8009d6e <__sflush_r+0x66>
 8009d60:	6829      	ldr	r1, [r5, #0]
 8009d62:	291d      	cmp	r1, #29
 8009d64:	d82c      	bhi.n	8009dc0 <__sflush_r+0xb8>
 8009d66:	4a2a      	ldr	r2, [pc, #168]	; (8009e10 <__sflush_r+0x108>)
 8009d68:	40ca      	lsrs	r2, r1
 8009d6a:	07d6      	lsls	r6, r2, #31
 8009d6c:	d528      	bpl.n	8009dc0 <__sflush_r+0xb8>
 8009d6e:	2200      	movs	r2, #0
 8009d70:	6062      	str	r2, [r4, #4]
 8009d72:	04d9      	lsls	r1, r3, #19
 8009d74:	6922      	ldr	r2, [r4, #16]
 8009d76:	6022      	str	r2, [r4, #0]
 8009d78:	d504      	bpl.n	8009d84 <__sflush_r+0x7c>
 8009d7a:	1c42      	adds	r2, r0, #1
 8009d7c:	d101      	bne.n	8009d82 <__sflush_r+0x7a>
 8009d7e:	682b      	ldr	r3, [r5, #0]
 8009d80:	b903      	cbnz	r3, 8009d84 <__sflush_r+0x7c>
 8009d82:	6560      	str	r0, [r4, #84]	; 0x54
 8009d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d86:	602f      	str	r7, [r5, #0]
 8009d88:	2900      	cmp	r1, #0
 8009d8a:	d0ca      	beq.n	8009d22 <__sflush_r+0x1a>
 8009d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d90:	4299      	cmp	r1, r3
 8009d92:	d002      	beq.n	8009d9a <__sflush_r+0x92>
 8009d94:	4628      	mov	r0, r5
 8009d96:	f7ff faa5 	bl	80092e4 <_free_r>
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	6360      	str	r0, [r4, #52]	; 0x34
 8009d9e:	e7c1      	b.n	8009d24 <__sflush_r+0x1c>
 8009da0:	6a21      	ldr	r1, [r4, #32]
 8009da2:	2301      	movs	r3, #1
 8009da4:	4628      	mov	r0, r5
 8009da6:	47b0      	blx	r6
 8009da8:	1c41      	adds	r1, r0, #1
 8009daa:	d1c7      	bne.n	8009d3c <__sflush_r+0x34>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d0c4      	beq.n	8009d3c <__sflush_r+0x34>
 8009db2:	2b1d      	cmp	r3, #29
 8009db4:	d001      	beq.n	8009dba <__sflush_r+0xb2>
 8009db6:	2b16      	cmp	r3, #22
 8009db8:	d101      	bne.n	8009dbe <__sflush_r+0xb6>
 8009dba:	602f      	str	r7, [r5, #0]
 8009dbc:	e7b1      	b.n	8009d22 <__sflush_r+0x1a>
 8009dbe:	89a3      	ldrh	r3, [r4, #12]
 8009dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dc4:	81a3      	strh	r3, [r4, #12]
 8009dc6:	e7ad      	b.n	8009d24 <__sflush_r+0x1c>
 8009dc8:	690f      	ldr	r7, [r1, #16]
 8009dca:	2f00      	cmp	r7, #0
 8009dcc:	d0a9      	beq.n	8009d22 <__sflush_r+0x1a>
 8009dce:	0793      	lsls	r3, r2, #30
 8009dd0:	680e      	ldr	r6, [r1, #0]
 8009dd2:	bf08      	it	eq
 8009dd4:	694b      	ldreq	r3, [r1, #20]
 8009dd6:	600f      	str	r7, [r1, #0]
 8009dd8:	bf18      	it	ne
 8009dda:	2300      	movne	r3, #0
 8009ddc:	eba6 0807 	sub.w	r8, r6, r7
 8009de0:	608b      	str	r3, [r1, #8]
 8009de2:	f1b8 0f00 	cmp.w	r8, #0
 8009de6:	dd9c      	ble.n	8009d22 <__sflush_r+0x1a>
 8009de8:	6a21      	ldr	r1, [r4, #32]
 8009dea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009dec:	4643      	mov	r3, r8
 8009dee:	463a      	mov	r2, r7
 8009df0:	4628      	mov	r0, r5
 8009df2:	47b0      	blx	r6
 8009df4:	2800      	cmp	r0, #0
 8009df6:	dc06      	bgt.n	8009e06 <__sflush_r+0xfe>
 8009df8:	89a3      	ldrh	r3, [r4, #12]
 8009dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dfe:	81a3      	strh	r3, [r4, #12]
 8009e00:	f04f 30ff 	mov.w	r0, #4294967295
 8009e04:	e78e      	b.n	8009d24 <__sflush_r+0x1c>
 8009e06:	4407      	add	r7, r0
 8009e08:	eba8 0800 	sub.w	r8, r8, r0
 8009e0c:	e7e9      	b.n	8009de2 <__sflush_r+0xda>
 8009e0e:	bf00      	nop
 8009e10:	20400001 	.word	0x20400001

08009e14 <_fflush_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	690b      	ldr	r3, [r1, #16]
 8009e18:	4605      	mov	r5, r0
 8009e1a:	460c      	mov	r4, r1
 8009e1c:	b913      	cbnz	r3, 8009e24 <_fflush_r+0x10>
 8009e1e:	2500      	movs	r5, #0
 8009e20:	4628      	mov	r0, r5
 8009e22:	bd38      	pop	{r3, r4, r5, pc}
 8009e24:	b118      	cbz	r0, 8009e2e <_fflush_r+0x1a>
 8009e26:	6983      	ldr	r3, [r0, #24]
 8009e28:	b90b      	cbnz	r3, 8009e2e <_fflush_r+0x1a>
 8009e2a:	f000 f887 	bl	8009f3c <__sinit>
 8009e2e:	4b14      	ldr	r3, [pc, #80]	; (8009e80 <_fflush_r+0x6c>)
 8009e30:	429c      	cmp	r4, r3
 8009e32:	d11b      	bne.n	8009e6c <_fflush_r+0x58>
 8009e34:	686c      	ldr	r4, [r5, #4]
 8009e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d0ef      	beq.n	8009e1e <_fflush_r+0xa>
 8009e3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e40:	07d0      	lsls	r0, r2, #31
 8009e42:	d404      	bmi.n	8009e4e <_fflush_r+0x3a>
 8009e44:	0599      	lsls	r1, r3, #22
 8009e46:	d402      	bmi.n	8009e4e <_fflush_r+0x3a>
 8009e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e4a:	f000 f915 	bl	800a078 <__retarget_lock_acquire_recursive>
 8009e4e:	4628      	mov	r0, r5
 8009e50:	4621      	mov	r1, r4
 8009e52:	f7ff ff59 	bl	8009d08 <__sflush_r>
 8009e56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e58:	07da      	lsls	r2, r3, #31
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	d4e0      	bmi.n	8009e20 <_fflush_r+0xc>
 8009e5e:	89a3      	ldrh	r3, [r4, #12]
 8009e60:	059b      	lsls	r3, r3, #22
 8009e62:	d4dd      	bmi.n	8009e20 <_fflush_r+0xc>
 8009e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e66:	f000 f908 	bl	800a07a <__retarget_lock_release_recursive>
 8009e6a:	e7d9      	b.n	8009e20 <_fflush_r+0xc>
 8009e6c:	4b05      	ldr	r3, [pc, #20]	; (8009e84 <_fflush_r+0x70>)
 8009e6e:	429c      	cmp	r4, r3
 8009e70:	d101      	bne.n	8009e76 <_fflush_r+0x62>
 8009e72:	68ac      	ldr	r4, [r5, #8]
 8009e74:	e7df      	b.n	8009e36 <_fflush_r+0x22>
 8009e76:	4b04      	ldr	r3, [pc, #16]	; (8009e88 <_fflush_r+0x74>)
 8009e78:	429c      	cmp	r4, r3
 8009e7a:	bf08      	it	eq
 8009e7c:	68ec      	ldreq	r4, [r5, #12]
 8009e7e:	e7da      	b.n	8009e36 <_fflush_r+0x22>
 8009e80:	0800bbfc 	.word	0x0800bbfc
 8009e84:	0800bc1c 	.word	0x0800bc1c
 8009e88:	0800bbdc 	.word	0x0800bbdc

08009e8c <std>:
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	b510      	push	{r4, lr}
 8009e90:	4604      	mov	r4, r0
 8009e92:	e9c0 3300 	strd	r3, r3, [r0]
 8009e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e9a:	6083      	str	r3, [r0, #8]
 8009e9c:	8181      	strh	r1, [r0, #12]
 8009e9e:	6643      	str	r3, [r0, #100]	; 0x64
 8009ea0:	81c2      	strh	r2, [r0, #14]
 8009ea2:	6183      	str	r3, [r0, #24]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	2208      	movs	r2, #8
 8009ea8:	305c      	adds	r0, #92	; 0x5c
 8009eaa:	f7fd fb5b 	bl	8007564 <memset>
 8009eae:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <std+0x38>)
 8009eb0:	6263      	str	r3, [r4, #36]	; 0x24
 8009eb2:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <std+0x3c>)
 8009eb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009eb6:	4b05      	ldr	r3, [pc, #20]	; (8009ecc <std+0x40>)
 8009eb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009eba:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <std+0x44>)
 8009ebc:	6224      	str	r4, [r4, #32]
 8009ebe:	6323      	str	r3, [r4, #48]	; 0x30
 8009ec0:	bd10      	pop	{r4, pc}
 8009ec2:	bf00      	nop
 8009ec4:	0800a1e1 	.word	0x0800a1e1
 8009ec8:	0800a203 	.word	0x0800a203
 8009ecc:	0800a23b 	.word	0x0800a23b
 8009ed0:	0800a25f 	.word	0x0800a25f

08009ed4 <_cleanup_r>:
 8009ed4:	4901      	ldr	r1, [pc, #4]	; (8009edc <_cleanup_r+0x8>)
 8009ed6:	f000 b8af 	b.w	800a038 <_fwalk_reent>
 8009eda:	bf00      	nop
 8009edc:	08009e15 	.word	0x08009e15

08009ee0 <__sfmoreglue>:
 8009ee0:	b570      	push	{r4, r5, r6, lr}
 8009ee2:	2268      	movs	r2, #104	; 0x68
 8009ee4:	1e4d      	subs	r5, r1, #1
 8009ee6:	4355      	muls	r5, r2
 8009ee8:	460e      	mov	r6, r1
 8009eea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009eee:	f7ff fa65 	bl	80093bc <_malloc_r>
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	b140      	cbz	r0, 8009f08 <__sfmoreglue+0x28>
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	e9c0 1600 	strd	r1, r6, [r0]
 8009efc:	300c      	adds	r0, #12
 8009efe:	60a0      	str	r0, [r4, #8]
 8009f00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f04:	f7fd fb2e 	bl	8007564 <memset>
 8009f08:	4620      	mov	r0, r4
 8009f0a:	bd70      	pop	{r4, r5, r6, pc}

08009f0c <__sfp_lock_acquire>:
 8009f0c:	4801      	ldr	r0, [pc, #4]	; (8009f14 <__sfp_lock_acquire+0x8>)
 8009f0e:	f000 b8b3 	b.w	800a078 <__retarget_lock_acquire_recursive>
 8009f12:	bf00      	nop
 8009f14:	2000065d 	.word	0x2000065d

08009f18 <__sfp_lock_release>:
 8009f18:	4801      	ldr	r0, [pc, #4]	; (8009f20 <__sfp_lock_release+0x8>)
 8009f1a:	f000 b8ae 	b.w	800a07a <__retarget_lock_release_recursive>
 8009f1e:	bf00      	nop
 8009f20:	2000065d 	.word	0x2000065d

08009f24 <__sinit_lock_acquire>:
 8009f24:	4801      	ldr	r0, [pc, #4]	; (8009f2c <__sinit_lock_acquire+0x8>)
 8009f26:	f000 b8a7 	b.w	800a078 <__retarget_lock_acquire_recursive>
 8009f2a:	bf00      	nop
 8009f2c:	2000065e 	.word	0x2000065e

08009f30 <__sinit_lock_release>:
 8009f30:	4801      	ldr	r0, [pc, #4]	; (8009f38 <__sinit_lock_release+0x8>)
 8009f32:	f000 b8a2 	b.w	800a07a <__retarget_lock_release_recursive>
 8009f36:	bf00      	nop
 8009f38:	2000065e 	.word	0x2000065e

08009f3c <__sinit>:
 8009f3c:	b510      	push	{r4, lr}
 8009f3e:	4604      	mov	r4, r0
 8009f40:	f7ff fff0 	bl	8009f24 <__sinit_lock_acquire>
 8009f44:	69a3      	ldr	r3, [r4, #24]
 8009f46:	b11b      	cbz	r3, 8009f50 <__sinit+0x14>
 8009f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f4c:	f7ff bff0 	b.w	8009f30 <__sinit_lock_release>
 8009f50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f54:	6523      	str	r3, [r4, #80]	; 0x50
 8009f56:	4b13      	ldr	r3, [pc, #76]	; (8009fa4 <__sinit+0x68>)
 8009f58:	4a13      	ldr	r2, [pc, #76]	; (8009fa8 <__sinit+0x6c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f5e:	42a3      	cmp	r3, r4
 8009f60:	bf04      	itt	eq
 8009f62:	2301      	moveq	r3, #1
 8009f64:	61a3      	streq	r3, [r4, #24]
 8009f66:	4620      	mov	r0, r4
 8009f68:	f000 f820 	bl	8009fac <__sfp>
 8009f6c:	6060      	str	r0, [r4, #4]
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f000 f81c 	bl	8009fac <__sfp>
 8009f74:	60a0      	str	r0, [r4, #8]
 8009f76:	4620      	mov	r0, r4
 8009f78:	f000 f818 	bl	8009fac <__sfp>
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	60e0      	str	r0, [r4, #12]
 8009f80:	2104      	movs	r1, #4
 8009f82:	6860      	ldr	r0, [r4, #4]
 8009f84:	f7ff ff82 	bl	8009e8c <std>
 8009f88:	68a0      	ldr	r0, [r4, #8]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	2109      	movs	r1, #9
 8009f8e:	f7ff ff7d 	bl	8009e8c <std>
 8009f92:	68e0      	ldr	r0, [r4, #12]
 8009f94:	2202      	movs	r2, #2
 8009f96:	2112      	movs	r1, #18
 8009f98:	f7ff ff78 	bl	8009e8c <std>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	61a3      	str	r3, [r4, #24]
 8009fa0:	e7d2      	b.n	8009f48 <__sinit+0xc>
 8009fa2:	bf00      	nop
 8009fa4:	0800b864 	.word	0x0800b864
 8009fa8:	08009ed5 	.word	0x08009ed5

08009fac <__sfp>:
 8009fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fae:	4607      	mov	r7, r0
 8009fb0:	f7ff ffac 	bl	8009f0c <__sfp_lock_acquire>
 8009fb4:	4b1e      	ldr	r3, [pc, #120]	; (800a030 <__sfp+0x84>)
 8009fb6:	681e      	ldr	r6, [r3, #0]
 8009fb8:	69b3      	ldr	r3, [r6, #24]
 8009fba:	b913      	cbnz	r3, 8009fc2 <__sfp+0x16>
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	f7ff ffbd 	bl	8009f3c <__sinit>
 8009fc2:	3648      	adds	r6, #72	; 0x48
 8009fc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	d503      	bpl.n	8009fd4 <__sfp+0x28>
 8009fcc:	6833      	ldr	r3, [r6, #0]
 8009fce:	b30b      	cbz	r3, 800a014 <__sfp+0x68>
 8009fd0:	6836      	ldr	r6, [r6, #0]
 8009fd2:	e7f7      	b.n	8009fc4 <__sfp+0x18>
 8009fd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fd8:	b9d5      	cbnz	r5, 800a010 <__sfp+0x64>
 8009fda:	4b16      	ldr	r3, [pc, #88]	; (800a034 <__sfp+0x88>)
 8009fdc:	60e3      	str	r3, [r4, #12]
 8009fde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fe2:	6665      	str	r5, [r4, #100]	; 0x64
 8009fe4:	f000 f847 	bl	800a076 <__retarget_lock_init_recursive>
 8009fe8:	f7ff ff96 	bl	8009f18 <__sfp_lock_release>
 8009fec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ff0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ff4:	6025      	str	r5, [r4, #0]
 8009ff6:	61a5      	str	r5, [r4, #24]
 8009ff8:	2208      	movs	r2, #8
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a000:	f7fd fab0 	bl	8007564 <memset>
 800a004:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a008:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a00c:	4620      	mov	r0, r4
 800a00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a010:	3468      	adds	r4, #104	; 0x68
 800a012:	e7d9      	b.n	8009fc8 <__sfp+0x1c>
 800a014:	2104      	movs	r1, #4
 800a016:	4638      	mov	r0, r7
 800a018:	f7ff ff62 	bl	8009ee0 <__sfmoreglue>
 800a01c:	4604      	mov	r4, r0
 800a01e:	6030      	str	r0, [r6, #0]
 800a020:	2800      	cmp	r0, #0
 800a022:	d1d5      	bne.n	8009fd0 <__sfp+0x24>
 800a024:	f7ff ff78 	bl	8009f18 <__sfp_lock_release>
 800a028:	230c      	movs	r3, #12
 800a02a:	603b      	str	r3, [r7, #0]
 800a02c:	e7ee      	b.n	800a00c <__sfp+0x60>
 800a02e:	bf00      	nop
 800a030:	0800b864 	.word	0x0800b864
 800a034:	ffff0001 	.word	0xffff0001

0800a038 <_fwalk_reent>:
 800a038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a03c:	4606      	mov	r6, r0
 800a03e:	4688      	mov	r8, r1
 800a040:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a044:	2700      	movs	r7, #0
 800a046:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a04a:	f1b9 0901 	subs.w	r9, r9, #1
 800a04e:	d505      	bpl.n	800a05c <_fwalk_reent+0x24>
 800a050:	6824      	ldr	r4, [r4, #0]
 800a052:	2c00      	cmp	r4, #0
 800a054:	d1f7      	bne.n	800a046 <_fwalk_reent+0xe>
 800a056:	4638      	mov	r0, r7
 800a058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a05c:	89ab      	ldrh	r3, [r5, #12]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d907      	bls.n	800a072 <_fwalk_reent+0x3a>
 800a062:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a066:	3301      	adds	r3, #1
 800a068:	d003      	beq.n	800a072 <_fwalk_reent+0x3a>
 800a06a:	4629      	mov	r1, r5
 800a06c:	4630      	mov	r0, r6
 800a06e:	47c0      	blx	r8
 800a070:	4307      	orrs	r7, r0
 800a072:	3568      	adds	r5, #104	; 0x68
 800a074:	e7e9      	b.n	800a04a <_fwalk_reent+0x12>

0800a076 <__retarget_lock_init_recursive>:
 800a076:	4770      	bx	lr

0800a078 <__retarget_lock_acquire_recursive>:
 800a078:	4770      	bx	lr

0800a07a <__retarget_lock_release_recursive>:
 800a07a:	4770      	bx	lr

0800a07c <__swhatbuf_r>:
 800a07c:	b570      	push	{r4, r5, r6, lr}
 800a07e:	460e      	mov	r6, r1
 800a080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a084:	2900      	cmp	r1, #0
 800a086:	b096      	sub	sp, #88	; 0x58
 800a088:	4614      	mov	r4, r2
 800a08a:	461d      	mov	r5, r3
 800a08c:	da08      	bge.n	800a0a0 <__swhatbuf_r+0x24>
 800a08e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	602a      	str	r2, [r5, #0]
 800a096:	061a      	lsls	r2, r3, #24
 800a098:	d410      	bmi.n	800a0bc <__swhatbuf_r+0x40>
 800a09a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a09e:	e00e      	b.n	800a0be <__swhatbuf_r+0x42>
 800a0a0:	466a      	mov	r2, sp
 800a0a2:	f000 f903 	bl	800a2ac <_fstat_r>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	dbf1      	blt.n	800a08e <__swhatbuf_r+0x12>
 800a0aa:	9a01      	ldr	r2, [sp, #4]
 800a0ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0b4:	425a      	negs	r2, r3
 800a0b6:	415a      	adcs	r2, r3
 800a0b8:	602a      	str	r2, [r5, #0]
 800a0ba:	e7ee      	b.n	800a09a <__swhatbuf_r+0x1e>
 800a0bc:	2340      	movs	r3, #64	; 0x40
 800a0be:	2000      	movs	r0, #0
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	b016      	add	sp, #88	; 0x58
 800a0c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a0c8 <__smakebuf_r>:
 800a0c8:	898b      	ldrh	r3, [r1, #12]
 800a0ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0cc:	079d      	lsls	r5, r3, #30
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	d507      	bpl.n	800a0e4 <__smakebuf_r+0x1c>
 800a0d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	6123      	str	r3, [r4, #16]
 800a0dc:	2301      	movs	r3, #1
 800a0de:	6163      	str	r3, [r4, #20]
 800a0e0:	b002      	add	sp, #8
 800a0e2:	bd70      	pop	{r4, r5, r6, pc}
 800a0e4:	ab01      	add	r3, sp, #4
 800a0e6:	466a      	mov	r2, sp
 800a0e8:	f7ff ffc8 	bl	800a07c <__swhatbuf_r>
 800a0ec:	9900      	ldr	r1, [sp, #0]
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f7ff f963 	bl	80093bc <_malloc_r>
 800a0f6:	b948      	cbnz	r0, 800a10c <__smakebuf_r+0x44>
 800a0f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0fc:	059a      	lsls	r2, r3, #22
 800a0fe:	d4ef      	bmi.n	800a0e0 <__smakebuf_r+0x18>
 800a100:	f023 0303 	bic.w	r3, r3, #3
 800a104:	f043 0302 	orr.w	r3, r3, #2
 800a108:	81a3      	strh	r3, [r4, #12]
 800a10a:	e7e3      	b.n	800a0d4 <__smakebuf_r+0xc>
 800a10c:	4b0d      	ldr	r3, [pc, #52]	; (800a144 <__smakebuf_r+0x7c>)
 800a10e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a110:	89a3      	ldrh	r3, [r4, #12]
 800a112:	6020      	str	r0, [r4, #0]
 800a114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a118:	81a3      	strh	r3, [r4, #12]
 800a11a:	9b00      	ldr	r3, [sp, #0]
 800a11c:	6163      	str	r3, [r4, #20]
 800a11e:	9b01      	ldr	r3, [sp, #4]
 800a120:	6120      	str	r0, [r4, #16]
 800a122:	b15b      	cbz	r3, 800a13c <__smakebuf_r+0x74>
 800a124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a128:	4630      	mov	r0, r6
 800a12a:	f000 f8d1 	bl	800a2d0 <_isatty_r>
 800a12e:	b128      	cbz	r0, 800a13c <__smakebuf_r+0x74>
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	f023 0303 	bic.w	r3, r3, #3
 800a136:	f043 0301 	orr.w	r3, r3, #1
 800a13a:	81a3      	strh	r3, [r4, #12]
 800a13c:	89a0      	ldrh	r0, [r4, #12]
 800a13e:	4305      	orrs	r5, r0
 800a140:	81a5      	strh	r5, [r4, #12]
 800a142:	e7cd      	b.n	800a0e0 <__smakebuf_r+0x18>
 800a144:	08009ed5 	.word	0x08009ed5

0800a148 <_malloc_usable_size_r>:
 800a148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a14c:	1f18      	subs	r0, r3, #4
 800a14e:	2b00      	cmp	r3, #0
 800a150:	bfbc      	itt	lt
 800a152:	580b      	ldrlt	r3, [r1, r0]
 800a154:	18c0      	addlt	r0, r0, r3
 800a156:	4770      	bx	lr

0800a158 <_raise_r>:
 800a158:	291f      	cmp	r1, #31
 800a15a:	b538      	push	{r3, r4, r5, lr}
 800a15c:	4604      	mov	r4, r0
 800a15e:	460d      	mov	r5, r1
 800a160:	d904      	bls.n	800a16c <_raise_r+0x14>
 800a162:	2316      	movs	r3, #22
 800a164:	6003      	str	r3, [r0, #0]
 800a166:	f04f 30ff 	mov.w	r0, #4294967295
 800a16a:	bd38      	pop	{r3, r4, r5, pc}
 800a16c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a16e:	b112      	cbz	r2, 800a176 <_raise_r+0x1e>
 800a170:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a174:	b94b      	cbnz	r3, 800a18a <_raise_r+0x32>
 800a176:	4620      	mov	r0, r4
 800a178:	f000 f830 	bl	800a1dc <_getpid_r>
 800a17c:	462a      	mov	r2, r5
 800a17e:	4601      	mov	r1, r0
 800a180:	4620      	mov	r0, r4
 800a182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a186:	f000 b817 	b.w	800a1b8 <_kill_r>
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d00a      	beq.n	800a1a4 <_raise_r+0x4c>
 800a18e:	1c59      	adds	r1, r3, #1
 800a190:	d103      	bne.n	800a19a <_raise_r+0x42>
 800a192:	2316      	movs	r3, #22
 800a194:	6003      	str	r3, [r0, #0]
 800a196:	2001      	movs	r0, #1
 800a198:	e7e7      	b.n	800a16a <_raise_r+0x12>
 800a19a:	2400      	movs	r4, #0
 800a19c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	4798      	blx	r3
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	e7e0      	b.n	800a16a <_raise_r+0x12>

0800a1a8 <raise>:
 800a1a8:	4b02      	ldr	r3, [pc, #8]	; (800a1b4 <raise+0xc>)
 800a1aa:	4601      	mov	r1, r0
 800a1ac:	6818      	ldr	r0, [r3, #0]
 800a1ae:	f7ff bfd3 	b.w	800a158 <_raise_r>
 800a1b2:	bf00      	nop
 800a1b4:	20000034 	.word	0x20000034

0800a1b8 <_kill_r>:
 800a1b8:	b538      	push	{r3, r4, r5, lr}
 800a1ba:	4d07      	ldr	r5, [pc, #28]	; (800a1d8 <_kill_r+0x20>)
 800a1bc:	2300      	movs	r3, #0
 800a1be:	4604      	mov	r4, r0
 800a1c0:	4608      	mov	r0, r1
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	602b      	str	r3, [r5, #0]
 800a1c6:	f7f8 fd4b 	bl	8002c60 <_kill>
 800a1ca:	1c43      	adds	r3, r0, #1
 800a1cc:	d102      	bne.n	800a1d4 <_kill_r+0x1c>
 800a1ce:	682b      	ldr	r3, [r5, #0]
 800a1d0:	b103      	cbz	r3, 800a1d4 <_kill_r+0x1c>
 800a1d2:	6023      	str	r3, [r4, #0]
 800a1d4:	bd38      	pop	{r3, r4, r5, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20000658 	.word	0x20000658

0800a1dc <_getpid_r>:
 800a1dc:	f7f8 bd38 	b.w	8002c50 <_getpid>

0800a1e0 <__sread>:
 800a1e0:	b510      	push	{r4, lr}
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e8:	f000 f894 	bl	800a314 <_read_r>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	bfab      	itete	ge
 800a1f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1f2:	89a3      	ldrhlt	r3, [r4, #12]
 800a1f4:	181b      	addge	r3, r3, r0
 800a1f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1fa:	bfac      	ite	ge
 800a1fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1fe:	81a3      	strhlt	r3, [r4, #12]
 800a200:	bd10      	pop	{r4, pc}

0800a202 <__swrite>:
 800a202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a206:	461f      	mov	r7, r3
 800a208:	898b      	ldrh	r3, [r1, #12]
 800a20a:	05db      	lsls	r3, r3, #23
 800a20c:	4605      	mov	r5, r0
 800a20e:	460c      	mov	r4, r1
 800a210:	4616      	mov	r6, r2
 800a212:	d505      	bpl.n	800a220 <__swrite+0x1e>
 800a214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a218:	2302      	movs	r3, #2
 800a21a:	2200      	movs	r2, #0
 800a21c:	f000 f868 	bl	800a2f0 <_lseek_r>
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	4632      	mov	r2, r6
 800a22e:	463b      	mov	r3, r7
 800a230:	4628      	mov	r0, r5
 800a232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a236:	f000 b817 	b.w	800a268 <_write_r>

0800a23a <__sseek>:
 800a23a:	b510      	push	{r4, lr}
 800a23c:	460c      	mov	r4, r1
 800a23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a242:	f000 f855 	bl	800a2f0 <_lseek_r>
 800a246:	1c43      	adds	r3, r0, #1
 800a248:	89a3      	ldrh	r3, [r4, #12]
 800a24a:	bf15      	itete	ne
 800a24c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a24e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a252:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a256:	81a3      	strheq	r3, [r4, #12]
 800a258:	bf18      	it	ne
 800a25a:	81a3      	strhne	r3, [r4, #12]
 800a25c:	bd10      	pop	{r4, pc}

0800a25e <__sclose>:
 800a25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a262:	f000 b813 	b.w	800a28c <_close_r>
	...

0800a268 <_write_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	4d07      	ldr	r5, [pc, #28]	; (800a288 <_write_r+0x20>)
 800a26c:	4604      	mov	r4, r0
 800a26e:	4608      	mov	r0, r1
 800a270:	4611      	mov	r1, r2
 800a272:	2200      	movs	r2, #0
 800a274:	602a      	str	r2, [r5, #0]
 800a276:	461a      	mov	r2, r3
 800a278:	f7f8 fd29 	bl	8002cce <_write>
 800a27c:	1c43      	adds	r3, r0, #1
 800a27e:	d102      	bne.n	800a286 <_write_r+0x1e>
 800a280:	682b      	ldr	r3, [r5, #0]
 800a282:	b103      	cbz	r3, 800a286 <_write_r+0x1e>
 800a284:	6023      	str	r3, [r4, #0]
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	20000658 	.word	0x20000658

0800a28c <_close_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	4d06      	ldr	r5, [pc, #24]	; (800a2a8 <_close_r+0x1c>)
 800a290:	2300      	movs	r3, #0
 800a292:	4604      	mov	r4, r0
 800a294:	4608      	mov	r0, r1
 800a296:	602b      	str	r3, [r5, #0]
 800a298:	f7f8 fd35 	bl	8002d06 <_close>
 800a29c:	1c43      	adds	r3, r0, #1
 800a29e:	d102      	bne.n	800a2a6 <_close_r+0x1a>
 800a2a0:	682b      	ldr	r3, [r5, #0]
 800a2a2:	b103      	cbz	r3, 800a2a6 <_close_r+0x1a>
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}
 800a2a8:	20000658 	.word	0x20000658

0800a2ac <_fstat_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4d07      	ldr	r5, [pc, #28]	; (800a2cc <_fstat_r+0x20>)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	4611      	mov	r1, r2
 800a2b8:	602b      	str	r3, [r5, #0]
 800a2ba:	f7f8 fd30 	bl	8002d1e <_fstat>
 800a2be:	1c43      	adds	r3, r0, #1
 800a2c0:	d102      	bne.n	800a2c8 <_fstat_r+0x1c>
 800a2c2:	682b      	ldr	r3, [r5, #0]
 800a2c4:	b103      	cbz	r3, 800a2c8 <_fstat_r+0x1c>
 800a2c6:	6023      	str	r3, [r4, #0]
 800a2c8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20000658 	.word	0x20000658

0800a2d0 <_isatty_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	4d06      	ldr	r5, [pc, #24]	; (800a2ec <_isatty_r+0x1c>)
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	4608      	mov	r0, r1
 800a2da:	602b      	str	r3, [r5, #0]
 800a2dc:	f7f8 fd2f 	bl	8002d3e <_isatty>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d102      	bne.n	800a2ea <_isatty_r+0x1a>
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	b103      	cbz	r3, 800a2ea <_isatty_r+0x1a>
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	bd38      	pop	{r3, r4, r5, pc}
 800a2ec:	20000658 	.word	0x20000658

0800a2f0 <_lseek_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4d07      	ldr	r5, [pc, #28]	; (800a310 <_lseek_r+0x20>)
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	4608      	mov	r0, r1
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	602a      	str	r2, [r5, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	f7f8 fd28 	bl	8002d54 <_lseek>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_lseek_r+0x1e>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_lseek_r+0x1e>
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	20000658 	.word	0x20000658

0800a314 <_read_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4d07      	ldr	r5, [pc, #28]	; (800a334 <_read_r+0x20>)
 800a318:	4604      	mov	r4, r0
 800a31a:	4608      	mov	r0, r1
 800a31c:	4611      	mov	r1, r2
 800a31e:	2200      	movs	r2, #0
 800a320:	602a      	str	r2, [r5, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	f7f8 fcb6 	bl	8002c94 <_read>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d102      	bne.n	800a332 <_read_r+0x1e>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	b103      	cbz	r3, 800a332 <_read_r+0x1e>
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	bd38      	pop	{r3, r4, r5, pc}
 800a334:	20000658 	.word	0x20000658

0800a338 <atan>:
 800a338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33c:	ec55 4b10 	vmov	r4, r5, d0
 800a340:	4bc3      	ldr	r3, [pc, #780]	; (800a650 <atan+0x318>)
 800a342:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a346:	429e      	cmp	r6, r3
 800a348:	46ab      	mov	fp, r5
 800a34a:	dd18      	ble.n	800a37e <atan+0x46>
 800a34c:	4bc1      	ldr	r3, [pc, #772]	; (800a654 <atan+0x31c>)
 800a34e:	429e      	cmp	r6, r3
 800a350:	dc01      	bgt.n	800a356 <atan+0x1e>
 800a352:	d109      	bne.n	800a368 <atan+0x30>
 800a354:	b144      	cbz	r4, 800a368 <atan+0x30>
 800a356:	4622      	mov	r2, r4
 800a358:	462b      	mov	r3, r5
 800a35a:	4620      	mov	r0, r4
 800a35c:	4629      	mov	r1, r5
 800a35e:	f7f5 ffb5 	bl	80002cc <__adddf3>
 800a362:	4604      	mov	r4, r0
 800a364:	460d      	mov	r5, r1
 800a366:	e006      	b.n	800a376 <atan+0x3e>
 800a368:	f1bb 0f00 	cmp.w	fp, #0
 800a36c:	f300 8131 	bgt.w	800a5d2 <atan+0x29a>
 800a370:	a59b      	add	r5, pc, #620	; (adr r5, 800a5e0 <atan+0x2a8>)
 800a372:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a376:	ec45 4b10 	vmov	d0, r4, r5
 800a37a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37e:	4bb6      	ldr	r3, [pc, #728]	; (800a658 <atan+0x320>)
 800a380:	429e      	cmp	r6, r3
 800a382:	dc14      	bgt.n	800a3ae <atan+0x76>
 800a384:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a388:	429e      	cmp	r6, r3
 800a38a:	dc0d      	bgt.n	800a3a8 <atan+0x70>
 800a38c:	a396      	add	r3, pc, #600	; (adr r3, 800a5e8 <atan+0x2b0>)
 800a38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a392:	ee10 0a10 	vmov	r0, s0
 800a396:	4629      	mov	r1, r5
 800a398:	f7f5 ff98 	bl	80002cc <__adddf3>
 800a39c:	4baf      	ldr	r3, [pc, #700]	; (800a65c <atan+0x324>)
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f7f6 fbda 	bl	8000b58 <__aeabi_dcmpgt>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d1e6      	bne.n	800a376 <atan+0x3e>
 800a3a8:	f04f 3aff 	mov.w	sl, #4294967295
 800a3ac:	e02b      	b.n	800a406 <atan+0xce>
 800a3ae:	f000 f963 	bl	800a678 <fabs>
 800a3b2:	4bab      	ldr	r3, [pc, #684]	; (800a660 <atan+0x328>)
 800a3b4:	429e      	cmp	r6, r3
 800a3b6:	ec55 4b10 	vmov	r4, r5, d0
 800a3ba:	f300 80bf 	bgt.w	800a53c <atan+0x204>
 800a3be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a3c2:	429e      	cmp	r6, r3
 800a3c4:	f300 80a0 	bgt.w	800a508 <atan+0x1d0>
 800a3c8:	ee10 2a10 	vmov	r2, s0
 800a3cc:	ee10 0a10 	vmov	r0, s0
 800a3d0:	462b      	mov	r3, r5
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	f7f5 ff7a 	bl	80002cc <__adddf3>
 800a3d8:	4ba0      	ldr	r3, [pc, #640]	; (800a65c <atan+0x324>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f7f5 ff74 	bl	80002c8 <__aeabi_dsub>
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	460f      	mov	r7, r1
 800a3e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	f7f5 ff6d 	bl	80002cc <__adddf3>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	4639      	mov	r1, r7
 800a3fa:	f7f6 fa47 	bl	800088c <__aeabi_ddiv>
 800a3fe:	f04f 0a00 	mov.w	sl, #0
 800a402:	4604      	mov	r4, r0
 800a404:	460d      	mov	r5, r1
 800a406:	4622      	mov	r2, r4
 800a408:	462b      	mov	r3, r5
 800a40a:	4620      	mov	r0, r4
 800a40c:	4629      	mov	r1, r5
 800a40e:	f7f6 f913 	bl	8000638 <__aeabi_dmul>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	4680      	mov	r8, r0
 800a418:	4689      	mov	r9, r1
 800a41a:	f7f6 f90d 	bl	8000638 <__aeabi_dmul>
 800a41e:	a374      	add	r3, pc, #464	; (adr r3, 800a5f0 <atan+0x2b8>)
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	4606      	mov	r6, r0
 800a426:	460f      	mov	r7, r1
 800a428:	f7f6 f906 	bl	8000638 <__aeabi_dmul>
 800a42c:	a372      	add	r3, pc, #456	; (adr r3, 800a5f8 <atan+0x2c0>)
 800a42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a432:	f7f5 ff4b 	bl	80002cc <__adddf3>
 800a436:	4632      	mov	r2, r6
 800a438:	463b      	mov	r3, r7
 800a43a:	f7f6 f8fd 	bl	8000638 <__aeabi_dmul>
 800a43e:	a370      	add	r3, pc, #448	; (adr r3, 800a600 <atan+0x2c8>)
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	f7f5 ff42 	bl	80002cc <__adddf3>
 800a448:	4632      	mov	r2, r6
 800a44a:	463b      	mov	r3, r7
 800a44c:	f7f6 f8f4 	bl	8000638 <__aeabi_dmul>
 800a450:	a36d      	add	r3, pc, #436	; (adr r3, 800a608 <atan+0x2d0>)
 800a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a456:	f7f5 ff39 	bl	80002cc <__adddf3>
 800a45a:	4632      	mov	r2, r6
 800a45c:	463b      	mov	r3, r7
 800a45e:	f7f6 f8eb 	bl	8000638 <__aeabi_dmul>
 800a462:	a36b      	add	r3, pc, #428	; (adr r3, 800a610 <atan+0x2d8>)
 800a464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a468:	f7f5 ff30 	bl	80002cc <__adddf3>
 800a46c:	4632      	mov	r2, r6
 800a46e:	463b      	mov	r3, r7
 800a470:	f7f6 f8e2 	bl	8000638 <__aeabi_dmul>
 800a474:	a368      	add	r3, pc, #416	; (adr r3, 800a618 <atan+0x2e0>)
 800a476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47a:	f7f5 ff27 	bl	80002cc <__adddf3>
 800a47e:	4642      	mov	r2, r8
 800a480:	464b      	mov	r3, r9
 800a482:	f7f6 f8d9 	bl	8000638 <__aeabi_dmul>
 800a486:	a366      	add	r3, pc, #408	; (adr r3, 800a620 <atan+0x2e8>)
 800a488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48c:	4680      	mov	r8, r0
 800a48e:	4689      	mov	r9, r1
 800a490:	4630      	mov	r0, r6
 800a492:	4639      	mov	r1, r7
 800a494:	f7f6 f8d0 	bl	8000638 <__aeabi_dmul>
 800a498:	a363      	add	r3, pc, #396	; (adr r3, 800a628 <atan+0x2f0>)
 800a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49e:	f7f5 ff13 	bl	80002c8 <__aeabi_dsub>
 800a4a2:	4632      	mov	r2, r6
 800a4a4:	463b      	mov	r3, r7
 800a4a6:	f7f6 f8c7 	bl	8000638 <__aeabi_dmul>
 800a4aa:	a361      	add	r3, pc, #388	; (adr r3, 800a630 <atan+0x2f8>)
 800a4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b0:	f7f5 ff0a 	bl	80002c8 <__aeabi_dsub>
 800a4b4:	4632      	mov	r2, r6
 800a4b6:	463b      	mov	r3, r7
 800a4b8:	f7f6 f8be 	bl	8000638 <__aeabi_dmul>
 800a4bc:	a35e      	add	r3, pc, #376	; (adr r3, 800a638 <atan+0x300>)
 800a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c2:	f7f5 ff01 	bl	80002c8 <__aeabi_dsub>
 800a4c6:	4632      	mov	r2, r6
 800a4c8:	463b      	mov	r3, r7
 800a4ca:	f7f6 f8b5 	bl	8000638 <__aeabi_dmul>
 800a4ce:	a35c      	add	r3, pc, #368	; (adr r3, 800a640 <atan+0x308>)
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	f7f5 fef8 	bl	80002c8 <__aeabi_dsub>
 800a4d8:	4632      	mov	r2, r6
 800a4da:	463b      	mov	r3, r7
 800a4dc:	f7f6 f8ac 	bl	8000638 <__aeabi_dmul>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4640      	mov	r0, r8
 800a4e6:	4649      	mov	r1, r9
 800a4e8:	f7f5 fef0 	bl	80002cc <__adddf3>
 800a4ec:	4622      	mov	r2, r4
 800a4ee:	462b      	mov	r3, r5
 800a4f0:	f7f6 f8a2 	bl	8000638 <__aeabi_dmul>
 800a4f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	d14b      	bne.n	800a596 <atan+0x25e>
 800a4fe:	4620      	mov	r0, r4
 800a500:	4629      	mov	r1, r5
 800a502:	f7f5 fee1 	bl	80002c8 <__aeabi_dsub>
 800a506:	e72c      	b.n	800a362 <atan+0x2a>
 800a508:	ee10 0a10 	vmov	r0, s0
 800a50c:	4b53      	ldr	r3, [pc, #332]	; (800a65c <atan+0x324>)
 800a50e:	2200      	movs	r2, #0
 800a510:	4629      	mov	r1, r5
 800a512:	f7f5 fed9 	bl	80002c8 <__aeabi_dsub>
 800a516:	4b51      	ldr	r3, [pc, #324]	; (800a65c <atan+0x324>)
 800a518:	4606      	mov	r6, r0
 800a51a:	460f      	mov	r7, r1
 800a51c:	2200      	movs	r2, #0
 800a51e:	4620      	mov	r0, r4
 800a520:	4629      	mov	r1, r5
 800a522:	f7f5 fed3 	bl	80002cc <__adddf3>
 800a526:	4602      	mov	r2, r0
 800a528:	460b      	mov	r3, r1
 800a52a:	4630      	mov	r0, r6
 800a52c:	4639      	mov	r1, r7
 800a52e:	f7f6 f9ad 	bl	800088c <__aeabi_ddiv>
 800a532:	f04f 0a01 	mov.w	sl, #1
 800a536:	4604      	mov	r4, r0
 800a538:	460d      	mov	r5, r1
 800a53a:	e764      	b.n	800a406 <atan+0xce>
 800a53c:	4b49      	ldr	r3, [pc, #292]	; (800a664 <atan+0x32c>)
 800a53e:	429e      	cmp	r6, r3
 800a540:	da1d      	bge.n	800a57e <atan+0x246>
 800a542:	ee10 0a10 	vmov	r0, s0
 800a546:	4b48      	ldr	r3, [pc, #288]	; (800a668 <atan+0x330>)
 800a548:	2200      	movs	r2, #0
 800a54a:	4629      	mov	r1, r5
 800a54c:	f7f5 febc 	bl	80002c8 <__aeabi_dsub>
 800a550:	4b45      	ldr	r3, [pc, #276]	; (800a668 <atan+0x330>)
 800a552:	4606      	mov	r6, r0
 800a554:	460f      	mov	r7, r1
 800a556:	2200      	movs	r2, #0
 800a558:	4620      	mov	r0, r4
 800a55a:	4629      	mov	r1, r5
 800a55c:	f7f6 f86c 	bl	8000638 <__aeabi_dmul>
 800a560:	4b3e      	ldr	r3, [pc, #248]	; (800a65c <atan+0x324>)
 800a562:	2200      	movs	r2, #0
 800a564:	f7f5 feb2 	bl	80002cc <__adddf3>
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	4630      	mov	r0, r6
 800a56e:	4639      	mov	r1, r7
 800a570:	f7f6 f98c 	bl	800088c <__aeabi_ddiv>
 800a574:	f04f 0a02 	mov.w	sl, #2
 800a578:	4604      	mov	r4, r0
 800a57a:	460d      	mov	r5, r1
 800a57c:	e743      	b.n	800a406 <atan+0xce>
 800a57e:	462b      	mov	r3, r5
 800a580:	ee10 2a10 	vmov	r2, s0
 800a584:	4939      	ldr	r1, [pc, #228]	; (800a66c <atan+0x334>)
 800a586:	2000      	movs	r0, #0
 800a588:	f7f6 f980 	bl	800088c <__aeabi_ddiv>
 800a58c:	f04f 0a03 	mov.w	sl, #3
 800a590:	4604      	mov	r4, r0
 800a592:	460d      	mov	r5, r1
 800a594:	e737      	b.n	800a406 <atan+0xce>
 800a596:	4b36      	ldr	r3, [pc, #216]	; (800a670 <atan+0x338>)
 800a598:	4e36      	ldr	r6, [pc, #216]	; (800a674 <atan+0x33c>)
 800a59a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a59e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a5a2:	e9da 2300 	ldrd	r2, r3, [sl]
 800a5a6:	f7f5 fe8f 	bl	80002c8 <__aeabi_dsub>
 800a5aa:	4622      	mov	r2, r4
 800a5ac:	462b      	mov	r3, r5
 800a5ae:	f7f5 fe8b 	bl	80002c8 <__aeabi_dsub>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a5ba:	f7f5 fe85 	bl	80002c8 <__aeabi_dsub>
 800a5be:	f1bb 0f00 	cmp.w	fp, #0
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	460d      	mov	r5, r1
 800a5c6:	f6bf aed6 	bge.w	800a376 <atan+0x3e>
 800a5ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5ce:	461d      	mov	r5, r3
 800a5d0:	e6d1      	b.n	800a376 <atan+0x3e>
 800a5d2:	a51d      	add	r5, pc, #116	; (adr r5, 800a648 <atan+0x310>)
 800a5d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a5d8:	e6cd      	b.n	800a376 <atan+0x3e>
 800a5da:	bf00      	nop
 800a5dc:	f3af 8000 	nop.w
 800a5e0:	54442d18 	.word	0x54442d18
 800a5e4:	bff921fb 	.word	0xbff921fb
 800a5e8:	8800759c 	.word	0x8800759c
 800a5ec:	7e37e43c 	.word	0x7e37e43c
 800a5f0:	e322da11 	.word	0xe322da11
 800a5f4:	3f90ad3a 	.word	0x3f90ad3a
 800a5f8:	24760deb 	.word	0x24760deb
 800a5fc:	3fa97b4b 	.word	0x3fa97b4b
 800a600:	a0d03d51 	.word	0xa0d03d51
 800a604:	3fb10d66 	.word	0x3fb10d66
 800a608:	c54c206e 	.word	0xc54c206e
 800a60c:	3fb745cd 	.word	0x3fb745cd
 800a610:	920083ff 	.word	0x920083ff
 800a614:	3fc24924 	.word	0x3fc24924
 800a618:	5555550d 	.word	0x5555550d
 800a61c:	3fd55555 	.word	0x3fd55555
 800a620:	2c6a6c2f 	.word	0x2c6a6c2f
 800a624:	bfa2b444 	.word	0xbfa2b444
 800a628:	52defd9a 	.word	0x52defd9a
 800a62c:	3fadde2d 	.word	0x3fadde2d
 800a630:	af749a6d 	.word	0xaf749a6d
 800a634:	3fb3b0f2 	.word	0x3fb3b0f2
 800a638:	fe231671 	.word	0xfe231671
 800a63c:	3fbc71c6 	.word	0x3fbc71c6
 800a640:	9998ebc4 	.word	0x9998ebc4
 800a644:	3fc99999 	.word	0x3fc99999
 800a648:	54442d18 	.word	0x54442d18
 800a64c:	3ff921fb 	.word	0x3ff921fb
 800a650:	440fffff 	.word	0x440fffff
 800a654:	7ff00000 	.word	0x7ff00000
 800a658:	3fdbffff 	.word	0x3fdbffff
 800a65c:	3ff00000 	.word	0x3ff00000
 800a660:	3ff2ffff 	.word	0x3ff2ffff
 800a664:	40038000 	.word	0x40038000
 800a668:	3ff80000 	.word	0x3ff80000
 800a66c:	bff00000 	.word	0xbff00000
 800a670:	0800bc60 	.word	0x0800bc60
 800a674:	0800bc40 	.word	0x0800bc40

0800a678 <fabs>:
 800a678:	ec51 0b10 	vmov	r0, r1, d0
 800a67c:	ee10 2a10 	vmov	r2, s0
 800a680:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a684:	ec43 2b10 	vmov	d0, r2, r3
 800a688:	4770      	bx	lr
 800a68a:	0000      	movs	r0, r0
 800a68c:	0000      	movs	r0, r0
	...

0800a690 <tan>:
 800a690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a692:	ec53 2b10 	vmov	r2, r3, d0
 800a696:	4816      	ldr	r0, [pc, #88]	; (800a6f0 <tan+0x60>)
 800a698:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a69c:	4281      	cmp	r1, r0
 800a69e:	dc07      	bgt.n	800a6b0 <tan+0x20>
 800a6a0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800a6e8 <tan+0x58>
 800a6a4:	2001      	movs	r0, #1
 800a6a6:	b005      	add	sp, #20
 800a6a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6ac:	f000 bd80 	b.w	800b1b0 <__kernel_tan>
 800a6b0:	4810      	ldr	r0, [pc, #64]	; (800a6f4 <tan+0x64>)
 800a6b2:	4281      	cmp	r1, r0
 800a6b4:	dd09      	ble.n	800a6ca <tan+0x3a>
 800a6b6:	ee10 0a10 	vmov	r0, s0
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	f7f5 fe04 	bl	80002c8 <__aeabi_dsub>
 800a6c0:	ec41 0b10 	vmov	d0, r0, r1
 800a6c4:	b005      	add	sp, #20
 800a6c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6ca:	4668      	mov	r0, sp
 800a6cc:	f000 f814 	bl	800a6f8 <__ieee754_rem_pio2>
 800a6d0:	0040      	lsls	r0, r0, #1
 800a6d2:	f000 0002 	and.w	r0, r0, #2
 800a6d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6da:	ed9d 0b00 	vldr	d0, [sp]
 800a6de:	f1c0 0001 	rsb	r0, r0, #1
 800a6e2:	f000 fd65 	bl	800b1b0 <__kernel_tan>
 800a6e6:	e7ed      	b.n	800a6c4 <tan+0x34>
	...
 800a6f0:	3fe921fb 	.word	0x3fe921fb
 800a6f4:	7fefffff 	.word	0x7fefffff

0800a6f8 <__ieee754_rem_pio2>:
 800a6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	ed2d 8b02 	vpush	{d8}
 800a700:	ec55 4b10 	vmov	r4, r5, d0
 800a704:	4bca      	ldr	r3, [pc, #808]	; (800aa30 <__ieee754_rem_pio2+0x338>)
 800a706:	b08b      	sub	sp, #44	; 0x2c
 800a708:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a70c:	4598      	cmp	r8, r3
 800a70e:	4682      	mov	sl, r0
 800a710:	9502      	str	r5, [sp, #8]
 800a712:	dc08      	bgt.n	800a726 <__ieee754_rem_pio2+0x2e>
 800a714:	2200      	movs	r2, #0
 800a716:	2300      	movs	r3, #0
 800a718:	ed80 0b00 	vstr	d0, [r0]
 800a71c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a720:	f04f 0b00 	mov.w	fp, #0
 800a724:	e028      	b.n	800a778 <__ieee754_rem_pio2+0x80>
 800a726:	4bc3      	ldr	r3, [pc, #780]	; (800aa34 <__ieee754_rem_pio2+0x33c>)
 800a728:	4598      	cmp	r8, r3
 800a72a:	dc78      	bgt.n	800a81e <__ieee754_rem_pio2+0x126>
 800a72c:	9b02      	ldr	r3, [sp, #8]
 800a72e:	4ec2      	ldr	r6, [pc, #776]	; (800aa38 <__ieee754_rem_pio2+0x340>)
 800a730:	2b00      	cmp	r3, #0
 800a732:	ee10 0a10 	vmov	r0, s0
 800a736:	a3b0      	add	r3, pc, #704	; (adr r3, 800a9f8 <__ieee754_rem_pio2+0x300>)
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	4629      	mov	r1, r5
 800a73e:	dd39      	ble.n	800a7b4 <__ieee754_rem_pio2+0xbc>
 800a740:	f7f5 fdc2 	bl	80002c8 <__aeabi_dsub>
 800a744:	45b0      	cmp	r8, r6
 800a746:	4604      	mov	r4, r0
 800a748:	460d      	mov	r5, r1
 800a74a:	d01b      	beq.n	800a784 <__ieee754_rem_pio2+0x8c>
 800a74c:	a3ac      	add	r3, pc, #688	; (adr r3, 800aa00 <__ieee754_rem_pio2+0x308>)
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	f7f5 fdb9 	bl	80002c8 <__aeabi_dsub>
 800a756:	4602      	mov	r2, r0
 800a758:	460b      	mov	r3, r1
 800a75a:	e9ca 2300 	strd	r2, r3, [sl]
 800a75e:	4620      	mov	r0, r4
 800a760:	4629      	mov	r1, r5
 800a762:	f7f5 fdb1 	bl	80002c8 <__aeabi_dsub>
 800a766:	a3a6      	add	r3, pc, #664	; (adr r3, 800aa00 <__ieee754_rem_pio2+0x308>)
 800a768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76c:	f7f5 fdac 	bl	80002c8 <__aeabi_dsub>
 800a770:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a774:	f04f 0b01 	mov.w	fp, #1
 800a778:	4658      	mov	r0, fp
 800a77a:	b00b      	add	sp, #44	; 0x2c
 800a77c:	ecbd 8b02 	vpop	{d8}
 800a780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a784:	a3a0      	add	r3, pc, #640	; (adr r3, 800aa08 <__ieee754_rem_pio2+0x310>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f5 fd9d 	bl	80002c8 <__aeabi_dsub>
 800a78e:	a3a0      	add	r3, pc, #640	; (adr r3, 800aa10 <__ieee754_rem_pio2+0x318>)
 800a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a794:	4604      	mov	r4, r0
 800a796:	460d      	mov	r5, r1
 800a798:	f7f5 fd96 	bl	80002c8 <__aeabi_dsub>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	e9ca 2300 	strd	r2, r3, [sl]
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	f7f5 fd8e 	bl	80002c8 <__aeabi_dsub>
 800a7ac:	a398      	add	r3, pc, #608	; (adr r3, 800aa10 <__ieee754_rem_pio2+0x318>)
 800a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b2:	e7db      	b.n	800a76c <__ieee754_rem_pio2+0x74>
 800a7b4:	f7f5 fd8a 	bl	80002cc <__adddf3>
 800a7b8:	45b0      	cmp	r8, r6
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	460d      	mov	r5, r1
 800a7be:	d016      	beq.n	800a7ee <__ieee754_rem_pio2+0xf6>
 800a7c0:	a38f      	add	r3, pc, #572	; (adr r3, 800aa00 <__ieee754_rem_pio2+0x308>)
 800a7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c6:	f7f5 fd81 	bl	80002cc <__adddf3>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	e9ca 2300 	strd	r2, r3, [sl]
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	f7f5 fd77 	bl	80002c8 <__aeabi_dsub>
 800a7da:	a389      	add	r3, pc, #548	; (adr r3, 800aa00 <__ieee754_rem_pio2+0x308>)
 800a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e0:	f7f5 fd74 	bl	80002cc <__adddf3>
 800a7e4:	f04f 3bff 	mov.w	fp, #4294967295
 800a7e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a7ec:	e7c4      	b.n	800a778 <__ieee754_rem_pio2+0x80>
 800a7ee:	a386      	add	r3, pc, #536	; (adr r3, 800aa08 <__ieee754_rem_pio2+0x310>)
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	f7f5 fd6a 	bl	80002cc <__adddf3>
 800a7f8:	a385      	add	r3, pc, #532	; (adr r3, 800aa10 <__ieee754_rem_pio2+0x318>)
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	4604      	mov	r4, r0
 800a800:	460d      	mov	r5, r1
 800a802:	f7f5 fd63 	bl	80002cc <__adddf3>
 800a806:	4602      	mov	r2, r0
 800a808:	460b      	mov	r3, r1
 800a80a:	e9ca 2300 	strd	r2, r3, [sl]
 800a80e:	4620      	mov	r0, r4
 800a810:	4629      	mov	r1, r5
 800a812:	f7f5 fd59 	bl	80002c8 <__aeabi_dsub>
 800a816:	a37e      	add	r3, pc, #504	; (adr r3, 800aa10 <__ieee754_rem_pio2+0x318>)
 800a818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81c:	e7e0      	b.n	800a7e0 <__ieee754_rem_pio2+0xe8>
 800a81e:	4b87      	ldr	r3, [pc, #540]	; (800aa3c <__ieee754_rem_pio2+0x344>)
 800a820:	4598      	cmp	r8, r3
 800a822:	f300 80d9 	bgt.w	800a9d8 <__ieee754_rem_pio2+0x2e0>
 800a826:	f7ff ff27 	bl	800a678 <fabs>
 800a82a:	ec55 4b10 	vmov	r4, r5, d0
 800a82e:	ee10 0a10 	vmov	r0, s0
 800a832:	a379      	add	r3, pc, #484	; (adr r3, 800aa18 <__ieee754_rem_pio2+0x320>)
 800a834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a838:	4629      	mov	r1, r5
 800a83a:	f7f5 fefd 	bl	8000638 <__aeabi_dmul>
 800a83e:	4b80      	ldr	r3, [pc, #512]	; (800aa40 <__ieee754_rem_pio2+0x348>)
 800a840:	2200      	movs	r2, #0
 800a842:	f7f5 fd43 	bl	80002cc <__adddf3>
 800a846:	f7f6 f9a7 	bl	8000b98 <__aeabi_d2iz>
 800a84a:	4683      	mov	fp, r0
 800a84c:	f7f5 fe8a 	bl	8000564 <__aeabi_i2d>
 800a850:	4602      	mov	r2, r0
 800a852:	460b      	mov	r3, r1
 800a854:	ec43 2b18 	vmov	d8, r2, r3
 800a858:	a367      	add	r3, pc, #412	; (adr r3, 800a9f8 <__ieee754_rem_pio2+0x300>)
 800a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85e:	f7f5 feeb 	bl	8000638 <__aeabi_dmul>
 800a862:	4602      	mov	r2, r0
 800a864:	460b      	mov	r3, r1
 800a866:	4620      	mov	r0, r4
 800a868:	4629      	mov	r1, r5
 800a86a:	f7f5 fd2d 	bl	80002c8 <__aeabi_dsub>
 800a86e:	a364      	add	r3, pc, #400	; (adr r3, 800aa00 <__ieee754_rem_pio2+0x308>)
 800a870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a874:	4606      	mov	r6, r0
 800a876:	460f      	mov	r7, r1
 800a878:	ec51 0b18 	vmov	r0, r1, d8
 800a87c:	f7f5 fedc 	bl	8000638 <__aeabi_dmul>
 800a880:	f1bb 0f1f 	cmp.w	fp, #31
 800a884:	4604      	mov	r4, r0
 800a886:	460d      	mov	r5, r1
 800a888:	dc0d      	bgt.n	800a8a6 <__ieee754_rem_pio2+0x1ae>
 800a88a:	4b6e      	ldr	r3, [pc, #440]	; (800aa44 <__ieee754_rem_pio2+0x34c>)
 800a88c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a894:	4543      	cmp	r3, r8
 800a896:	d006      	beq.n	800a8a6 <__ieee754_rem_pio2+0x1ae>
 800a898:	4622      	mov	r2, r4
 800a89a:	462b      	mov	r3, r5
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	f7f5 fd12 	bl	80002c8 <__aeabi_dsub>
 800a8a4:	e00f      	b.n	800a8c6 <__ieee754_rem_pio2+0x1ce>
 800a8a6:	462b      	mov	r3, r5
 800a8a8:	4622      	mov	r2, r4
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	4639      	mov	r1, r7
 800a8ae:	f7f5 fd0b 	bl	80002c8 <__aeabi_dsub>
 800a8b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a8b6:	9303      	str	r3, [sp, #12]
 800a8b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a8bc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a8c0:	f1b8 0f10 	cmp.w	r8, #16
 800a8c4:	dc02      	bgt.n	800a8cc <__ieee754_rem_pio2+0x1d4>
 800a8c6:	e9ca 0100 	strd	r0, r1, [sl]
 800a8ca:	e039      	b.n	800a940 <__ieee754_rem_pio2+0x248>
 800a8cc:	a34e      	add	r3, pc, #312	; (adr r3, 800aa08 <__ieee754_rem_pio2+0x310>)
 800a8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d2:	ec51 0b18 	vmov	r0, r1, d8
 800a8d6:	f7f5 feaf 	bl	8000638 <__aeabi_dmul>
 800a8da:	4604      	mov	r4, r0
 800a8dc:	460d      	mov	r5, r1
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	4639      	mov	r1, r7
 800a8e6:	f7f5 fcef 	bl	80002c8 <__aeabi_dsub>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	4680      	mov	r8, r0
 800a8f0:	4689      	mov	r9, r1
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	4639      	mov	r1, r7
 800a8f6:	f7f5 fce7 	bl	80002c8 <__aeabi_dsub>
 800a8fa:	4622      	mov	r2, r4
 800a8fc:	462b      	mov	r3, r5
 800a8fe:	f7f5 fce3 	bl	80002c8 <__aeabi_dsub>
 800a902:	a343      	add	r3, pc, #268	; (adr r3, 800aa10 <__ieee754_rem_pio2+0x318>)
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	4604      	mov	r4, r0
 800a90a:	460d      	mov	r5, r1
 800a90c:	ec51 0b18 	vmov	r0, r1, d8
 800a910:	f7f5 fe92 	bl	8000638 <__aeabi_dmul>
 800a914:	4622      	mov	r2, r4
 800a916:	462b      	mov	r3, r5
 800a918:	f7f5 fcd6 	bl	80002c8 <__aeabi_dsub>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4604      	mov	r4, r0
 800a922:	460d      	mov	r5, r1
 800a924:	4640      	mov	r0, r8
 800a926:	4649      	mov	r1, r9
 800a928:	f7f5 fcce 	bl	80002c8 <__aeabi_dsub>
 800a92c:	9a03      	ldr	r2, [sp, #12]
 800a92e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	2b31      	cmp	r3, #49	; 0x31
 800a936:	dc24      	bgt.n	800a982 <__ieee754_rem_pio2+0x28a>
 800a938:	e9ca 0100 	strd	r0, r1, [sl]
 800a93c:	4646      	mov	r6, r8
 800a93e:	464f      	mov	r7, r9
 800a940:	e9da 8900 	ldrd	r8, r9, [sl]
 800a944:	4630      	mov	r0, r6
 800a946:	4642      	mov	r2, r8
 800a948:	464b      	mov	r3, r9
 800a94a:	4639      	mov	r1, r7
 800a94c:	f7f5 fcbc 	bl	80002c8 <__aeabi_dsub>
 800a950:	462b      	mov	r3, r5
 800a952:	4622      	mov	r2, r4
 800a954:	f7f5 fcb8 	bl	80002c8 <__aeabi_dsub>
 800a958:	9b02      	ldr	r3, [sp, #8]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a960:	f6bf af0a 	bge.w	800a778 <__ieee754_rem_pio2+0x80>
 800a964:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a968:	f8ca 3004 	str.w	r3, [sl, #4]
 800a96c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a970:	f8ca 8000 	str.w	r8, [sl]
 800a974:	f8ca 0008 	str.w	r0, [sl, #8]
 800a978:	f8ca 300c 	str.w	r3, [sl, #12]
 800a97c:	f1cb 0b00 	rsb	fp, fp, #0
 800a980:	e6fa      	b.n	800a778 <__ieee754_rem_pio2+0x80>
 800a982:	a327      	add	r3, pc, #156	; (adr r3, 800aa20 <__ieee754_rem_pio2+0x328>)
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	ec51 0b18 	vmov	r0, r1, d8
 800a98c:	f7f5 fe54 	bl	8000638 <__aeabi_dmul>
 800a990:	4604      	mov	r4, r0
 800a992:	460d      	mov	r5, r1
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	4640      	mov	r0, r8
 800a99a:	4649      	mov	r1, r9
 800a99c:	f7f5 fc94 	bl	80002c8 <__aeabi_dsub>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	4606      	mov	r6, r0
 800a9a6:	460f      	mov	r7, r1
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	4649      	mov	r1, r9
 800a9ac:	f7f5 fc8c 	bl	80002c8 <__aeabi_dsub>
 800a9b0:	4622      	mov	r2, r4
 800a9b2:	462b      	mov	r3, r5
 800a9b4:	f7f5 fc88 	bl	80002c8 <__aeabi_dsub>
 800a9b8:	a31b      	add	r3, pc, #108	; (adr r3, 800aa28 <__ieee754_rem_pio2+0x330>)
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	4604      	mov	r4, r0
 800a9c0:	460d      	mov	r5, r1
 800a9c2:	ec51 0b18 	vmov	r0, r1, d8
 800a9c6:	f7f5 fe37 	bl	8000638 <__aeabi_dmul>
 800a9ca:	4622      	mov	r2, r4
 800a9cc:	462b      	mov	r3, r5
 800a9ce:	f7f5 fc7b 	bl	80002c8 <__aeabi_dsub>
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	e75f      	b.n	800a898 <__ieee754_rem_pio2+0x1a0>
 800a9d8:	4b1b      	ldr	r3, [pc, #108]	; (800aa48 <__ieee754_rem_pio2+0x350>)
 800a9da:	4598      	cmp	r8, r3
 800a9dc:	dd36      	ble.n	800aa4c <__ieee754_rem_pio2+0x354>
 800a9de:	ee10 2a10 	vmov	r2, s0
 800a9e2:	462b      	mov	r3, r5
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	f7f5 fc6e 	bl	80002c8 <__aeabi_dsub>
 800a9ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9f0:	e9ca 0100 	strd	r0, r1, [sl]
 800a9f4:	e694      	b.n	800a720 <__ieee754_rem_pio2+0x28>
 800a9f6:	bf00      	nop
 800a9f8:	54400000 	.word	0x54400000
 800a9fc:	3ff921fb 	.word	0x3ff921fb
 800aa00:	1a626331 	.word	0x1a626331
 800aa04:	3dd0b461 	.word	0x3dd0b461
 800aa08:	1a600000 	.word	0x1a600000
 800aa0c:	3dd0b461 	.word	0x3dd0b461
 800aa10:	2e037073 	.word	0x2e037073
 800aa14:	3ba3198a 	.word	0x3ba3198a
 800aa18:	6dc9c883 	.word	0x6dc9c883
 800aa1c:	3fe45f30 	.word	0x3fe45f30
 800aa20:	2e000000 	.word	0x2e000000
 800aa24:	3ba3198a 	.word	0x3ba3198a
 800aa28:	252049c1 	.word	0x252049c1
 800aa2c:	397b839a 	.word	0x397b839a
 800aa30:	3fe921fb 	.word	0x3fe921fb
 800aa34:	4002d97b 	.word	0x4002d97b
 800aa38:	3ff921fb 	.word	0x3ff921fb
 800aa3c:	413921fb 	.word	0x413921fb
 800aa40:	3fe00000 	.word	0x3fe00000
 800aa44:	0800bc80 	.word	0x0800bc80
 800aa48:	7fefffff 	.word	0x7fefffff
 800aa4c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800aa50:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800aa54:	ee10 0a10 	vmov	r0, s0
 800aa58:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800aa5c:	ee10 6a10 	vmov	r6, s0
 800aa60:	460f      	mov	r7, r1
 800aa62:	f7f6 f899 	bl	8000b98 <__aeabi_d2iz>
 800aa66:	f7f5 fd7d 	bl	8000564 <__aeabi_i2d>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	4630      	mov	r0, r6
 800aa70:	4639      	mov	r1, r7
 800aa72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa76:	f7f5 fc27 	bl	80002c8 <__aeabi_dsub>
 800aa7a:	4b23      	ldr	r3, [pc, #140]	; (800ab08 <__ieee754_rem_pio2+0x410>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f7f5 fddb 	bl	8000638 <__aeabi_dmul>
 800aa82:	460f      	mov	r7, r1
 800aa84:	4606      	mov	r6, r0
 800aa86:	f7f6 f887 	bl	8000b98 <__aeabi_d2iz>
 800aa8a:	f7f5 fd6b 	bl	8000564 <__aeabi_i2d>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	460b      	mov	r3, r1
 800aa92:	4630      	mov	r0, r6
 800aa94:	4639      	mov	r1, r7
 800aa96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa9a:	f7f5 fc15 	bl	80002c8 <__aeabi_dsub>
 800aa9e:	4b1a      	ldr	r3, [pc, #104]	; (800ab08 <__ieee754_rem_pio2+0x410>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f7f5 fdc9 	bl	8000638 <__aeabi_dmul>
 800aaa6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aaaa:	ad04      	add	r5, sp, #16
 800aaac:	f04f 0803 	mov.w	r8, #3
 800aab0:	46a9      	mov	r9, r5
 800aab2:	2600      	movs	r6, #0
 800aab4:	2700      	movs	r7, #0
 800aab6:	4632      	mov	r2, r6
 800aab8:	463b      	mov	r3, r7
 800aaba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800aabe:	46c3      	mov	fp, r8
 800aac0:	3d08      	subs	r5, #8
 800aac2:	f108 38ff 	add.w	r8, r8, #4294967295
 800aac6:	f7f6 f81f 	bl	8000b08 <__aeabi_dcmpeq>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d1f3      	bne.n	800aab6 <__ieee754_rem_pio2+0x3be>
 800aace:	4b0f      	ldr	r3, [pc, #60]	; (800ab0c <__ieee754_rem_pio2+0x414>)
 800aad0:	9301      	str	r3, [sp, #4]
 800aad2:	2302      	movs	r3, #2
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	4622      	mov	r2, r4
 800aad8:	465b      	mov	r3, fp
 800aada:	4651      	mov	r1, sl
 800aadc:	4648      	mov	r0, r9
 800aade:	f000 f817 	bl	800ab10 <__kernel_rem_pio2>
 800aae2:	9b02      	ldr	r3, [sp, #8]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	4683      	mov	fp, r0
 800aae8:	f6bf ae46 	bge.w	800a778 <__ieee754_rem_pio2+0x80>
 800aaec:	e9da 2100 	ldrd	r2, r1, [sl]
 800aaf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aaf4:	e9ca 2300 	strd	r2, r3, [sl]
 800aaf8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800aafc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab00:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ab04:	e73a      	b.n	800a97c <__ieee754_rem_pio2+0x284>
 800ab06:	bf00      	nop
 800ab08:	41700000 	.word	0x41700000
 800ab0c:	0800bd00 	.word	0x0800bd00

0800ab10 <__kernel_rem_pio2>:
 800ab10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab14:	ed2d 8b02 	vpush	{d8}
 800ab18:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ab1c:	f112 0f14 	cmn.w	r2, #20
 800ab20:	9308      	str	r3, [sp, #32]
 800ab22:	9101      	str	r1, [sp, #4]
 800ab24:	4bc4      	ldr	r3, [pc, #784]	; (800ae38 <__kernel_rem_pio2+0x328>)
 800ab26:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ab28:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab2e:	9302      	str	r3, [sp, #8]
 800ab30:	9b08      	ldr	r3, [sp, #32]
 800ab32:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab36:	bfa8      	it	ge
 800ab38:	1ed4      	subge	r4, r2, #3
 800ab3a:	9306      	str	r3, [sp, #24]
 800ab3c:	bfb2      	itee	lt
 800ab3e:	2400      	movlt	r4, #0
 800ab40:	2318      	movge	r3, #24
 800ab42:	fb94 f4f3 	sdivge	r4, r4, r3
 800ab46:	f06f 0317 	mvn.w	r3, #23
 800ab4a:	fb04 3303 	mla	r3, r4, r3, r3
 800ab4e:	eb03 0a02 	add.w	sl, r3, r2
 800ab52:	9b02      	ldr	r3, [sp, #8]
 800ab54:	9a06      	ldr	r2, [sp, #24]
 800ab56:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ae28 <__kernel_rem_pio2+0x318>
 800ab5a:	eb03 0802 	add.w	r8, r3, r2
 800ab5e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ab60:	1aa7      	subs	r7, r4, r2
 800ab62:	ae22      	add	r6, sp, #136	; 0x88
 800ab64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ab68:	2500      	movs	r5, #0
 800ab6a:	4545      	cmp	r5, r8
 800ab6c:	dd13      	ble.n	800ab96 <__kernel_rem_pio2+0x86>
 800ab6e:	9b08      	ldr	r3, [sp, #32]
 800ab70:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ae28 <__kernel_rem_pio2+0x318>
 800ab74:	aa22      	add	r2, sp, #136	; 0x88
 800ab76:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ab7a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ab7e:	f04f 0800 	mov.w	r8, #0
 800ab82:	9b02      	ldr	r3, [sp, #8]
 800ab84:	4598      	cmp	r8, r3
 800ab86:	dc2f      	bgt.n	800abe8 <__kernel_rem_pio2+0xd8>
 800ab88:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ab8c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ab90:	462f      	mov	r7, r5
 800ab92:	2600      	movs	r6, #0
 800ab94:	e01b      	b.n	800abce <__kernel_rem_pio2+0xbe>
 800ab96:	42ef      	cmn	r7, r5
 800ab98:	d407      	bmi.n	800abaa <__kernel_rem_pio2+0x9a>
 800ab9a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ab9e:	f7f5 fce1 	bl	8000564 <__aeabi_i2d>
 800aba2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aba6:	3501      	adds	r5, #1
 800aba8:	e7df      	b.n	800ab6a <__kernel_rem_pio2+0x5a>
 800abaa:	ec51 0b18 	vmov	r0, r1, d8
 800abae:	e7f8      	b.n	800aba2 <__kernel_rem_pio2+0x92>
 800abb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abb4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800abb8:	f7f5 fd3e 	bl	8000638 <__aeabi_dmul>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abc4:	f7f5 fb82 	bl	80002cc <__adddf3>
 800abc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abcc:	3601      	adds	r6, #1
 800abce:	9b06      	ldr	r3, [sp, #24]
 800abd0:	429e      	cmp	r6, r3
 800abd2:	f1a7 0708 	sub.w	r7, r7, #8
 800abd6:	ddeb      	ble.n	800abb0 <__kernel_rem_pio2+0xa0>
 800abd8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800abdc:	f108 0801 	add.w	r8, r8, #1
 800abe0:	ecab 7b02 	vstmia	fp!, {d7}
 800abe4:	3508      	adds	r5, #8
 800abe6:	e7cc      	b.n	800ab82 <__kernel_rem_pio2+0x72>
 800abe8:	9b02      	ldr	r3, [sp, #8]
 800abea:	aa0e      	add	r2, sp, #56	; 0x38
 800abec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abf0:	930d      	str	r3, [sp, #52]	; 0x34
 800abf2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800abf4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800abf8:	9c02      	ldr	r4, [sp, #8]
 800abfa:	930c      	str	r3, [sp, #48]	; 0x30
 800abfc:	00e3      	lsls	r3, r4, #3
 800abfe:	930a      	str	r3, [sp, #40]	; 0x28
 800ac00:	ab9a      	add	r3, sp, #616	; 0x268
 800ac02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac06:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ac0a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ac0e:	ab72      	add	r3, sp, #456	; 0x1c8
 800ac10:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ac14:	46c3      	mov	fp, r8
 800ac16:	46a1      	mov	r9, r4
 800ac18:	f1b9 0f00 	cmp.w	r9, #0
 800ac1c:	f1a5 0508 	sub.w	r5, r5, #8
 800ac20:	dc77      	bgt.n	800ad12 <__kernel_rem_pio2+0x202>
 800ac22:	ec47 6b10 	vmov	d0, r6, r7
 800ac26:	4650      	mov	r0, sl
 800ac28:	f000 fd4e 	bl	800b6c8 <scalbn>
 800ac2c:	ec57 6b10 	vmov	r6, r7, d0
 800ac30:	2200      	movs	r2, #0
 800ac32:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ac36:	ee10 0a10 	vmov	r0, s0
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	f7f5 fcfc 	bl	8000638 <__aeabi_dmul>
 800ac40:	ec41 0b10 	vmov	d0, r0, r1
 800ac44:	f000 fcc0 	bl	800b5c8 <floor>
 800ac48:	4b7c      	ldr	r3, [pc, #496]	; (800ae3c <__kernel_rem_pio2+0x32c>)
 800ac4a:	ec51 0b10 	vmov	r0, r1, d0
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f7f5 fcf2 	bl	8000638 <__aeabi_dmul>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	4630      	mov	r0, r6
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	f7f5 fb34 	bl	80002c8 <__aeabi_dsub>
 800ac60:	460f      	mov	r7, r1
 800ac62:	4606      	mov	r6, r0
 800ac64:	f7f5 ff98 	bl	8000b98 <__aeabi_d2iz>
 800ac68:	9004      	str	r0, [sp, #16]
 800ac6a:	f7f5 fc7b 	bl	8000564 <__aeabi_i2d>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	4630      	mov	r0, r6
 800ac74:	4639      	mov	r1, r7
 800ac76:	f7f5 fb27 	bl	80002c8 <__aeabi_dsub>
 800ac7a:	f1ba 0f00 	cmp.w	sl, #0
 800ac7e:	4606      	mov	r6, r0
 800ac80:	460f      	mov	r7, r1
 800ac82:	dd6d      	ble.n	800ad60 <__kernel_rem_pio2+0x250>
 800ac84:	1e62      	subs	r2, r4, #1
 800ac86:	ab0e      	add	r3, sp, #56	; 0x38
 800ac88:	9d04      	ldr	r5, [sp, #16]
 800ac8a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ac8e:	f1ca 0118 	rsb	r1, sl, #24
 800ac92:	fa40 f301 	asr.w	r3, r0, r1
 800ac96:	441d      	add	r5, r3
 800ac98:	408b      	lsls	r3, r1
 800ac9a:	1ac0      	subs	r0, r0, r3
 800ac9c:	ab0e      	add	r3, sp, #56	; 0x38
 800ac9e:	9504      	str	r5, [sp, #16]
 800aca0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800aca4:	f1ca 0317 	rsb	r3, sl, #23
 800aca8:	fa40 fb03 	asr.w	fp, r0, r3
 800acac:	f1bb 0f00 	cmp.w	fp, #0
 800acb0:	dd65      	ble.n	800ad7e <__kernel_rem_pio2+0x26e>
 800acb2:	9b04      	ldr	r3, [sp, #16]
 800acb4:	2200      	movs	r2, #0
 800acb6:	3301      	adds	r3, #1
 800acb8:	9304      	str	r3, [sp, #16]
 800acba:	4615      	mov	r5, r2
 800acbc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800acc0:	4294      	cmp	r4, r2
 800acc2:	f300 809c 	bgt.w	800adfe <__kernel_rem_pio2+0x2ee>
 800acc6:	f1ba 0f00 	cmp.w	sl, #0
 800acca:	dd07      	ble.n	800acdc <__kernel_rem_pio2+0x1cc>
 800accc:	f1ba 0f01 	cmp.w	sl, #1
 800acd0:	f000 80c0 	beq.w	800ae54 <__kernel_rem_pio2+0x344>
 800acd4:	f1ba 0f02 	cmp.w	sl, #2
 800acd8:	f000 80c6 	beq.w	800ae68 <__kernel_rem_pio2+0x358>
 800acdc:	f1bb 0f02 	cmp.w	fp, #2
 800ace0:	d14d      	bne.n	800ad7e <__kernel_rem_pio2+0x26e>
 800ace2:	4632      	mov	r2, r6
 800ace4:	463b      	mov	r3, r7
 800ace6:	4956      	ldr	r1, [pc, #344]	; (800ae40 <__kernel_rem_pio2+0x330>)
 800ace8:	2000      	movs	r0, #0
 800acea:	f7f5 faed 	bl	80002c8 <__aeabi_dsub>
 800acee:	4606      	mov	r6, r0
 800acf0:	460f      	mov	r7, r1
 800acf2:	2d00      	cmp	r5, #0
 800acf4:	d043      	beq.n	800ad7e <__kernel_rem_pio2+0x26e>
 800acf6:	4650      	mov	r0, sl
 800acf8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ae30 <__kernel_rem_pio2+0x320>
 800acfc:	f000 fce4 	bl	800b6c8 <scalbn>
 800ad00:	4630      	mov	r0, r6
 800ad02:	4639      	mov	r1, r7
 800ad04:	ec53 2b10 	vmov	r2, r3, d0
 800ad08:	f7f5 fade 	bl	80002c8 <__aeabi_dsub>
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	460f      	mov	r7, r1
 800ad10:	e035      	b.n	800ad7e <__kernel_rem_pio2+0x26e>
 800ad12:	4b4c      	ldr	r3, [pc, #304]	; (800ae44 <__kernel_rem_pio2+0x334>)
 800ad14:	2200      	movs	r2, #0
 800ad16:	4630      	mov	r0, r6
 800ad18:	4639      	mov	r1, r7
 800ad1a:	f7f5 fc8d 	bl	8000638 <__aeabi_dmul>
 800ad1e:	f7f5 ff3b 	bl	8000b98 <__aeabi_d2iz>
 800ad22:	f7f5 fc1f 	bl	8000564 <__aeabi_i2d>
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	ec43 2b18 	vmov	d8, r2, r3
 800ad2e:	4b46      	ldr	r3, [pc, #280]	; (800ae48 <__kernel_rem_pio2+0x338>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	f7f5 fc81 	bl	8000638 <__aeabi_dmul>
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	4639      	mov	r1, r7
 800ad3e:	f7f5 fac3 	bl	80002c8 <__aeabi_dsub>
 800ad42:	f7f5 ff29 	bl	8000b98 <__aeabi_d2iz>
 800ad46:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad4a:	f84b 0b04 	str.w	r0, [fp], #4
 800ad4e:	ec51 0b18 	vmov	r0, r1, d8
 800ad52:	f7f5 fabb 	bl	80002cc <__adddf3>
 800ad56:	f109 39ff 	add.w	r9, r9, #4294967295
 800ad5a:	4606      	mov	r6, r0
 800ad5c:	460f      	mov	r7, r1
 800ad5e:	e75b      	b.n	800ac18 <__kernel_rem_pio2+0x108>
 800ad60:	d106      	bne.n	800ad70 <__kernel_rem_pio2+0x260>
 800ad62:	1e63      	subs	r3, r4, #1
 800ad64:	aa0e      	add	r2, sp, #56	; 0x38
 800ad66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ad6a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ad6e:	e79d      	b.n	800acac <__kernel_rem_pio2+0x19c>
 800ad70:	4b36      	ldr	r3, [pc, #216]	; (800ae4c <__kernel_rem_pio2+0x33c>)
 800ad72:	2200      	movs	r2, #0
 800ad74:	f7f5 fee6 	bl	8000b44 <__aeabi_dcmpge>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d13d      	bne.n	800adf8 <__kernel_rem_pio2+0x2e8>
 800ad7c:	4683      	mov	fp, r0
 800ad7e:	2200      	movs	r2, #0
 800ad80:	2300      	movs	r3, #0
 800ad82:	4630      	mov	r0, r6
 800ad84:	4639      	mov	r1, r7
 800ad86:	f7f5 febf 	bl	8000b08 <__aeabi_dcmpeq>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	f000 80c0 	beq.w	800af10 <__kernel_rem_pio2+0x400>
 800ad90:	1e65      	subs	r5, r4, #1
 800ad92:	462b      	mov	r3, r5
 800ad94:	2200      	movs	r2, #0
 800ad96:	9902      	ldr	r1, [sp, #8]
 800ad98:	428b      	cmp	r3, r1
 800ad9a:	da6c      	bge.n	800ae76 <__kernel_rem_pio2+0x366>
 800ad9c:	2a00      	cmp	r2, #0
 800ad9e:	f000 8089 	beq.w	800aeb4 <__kernel_rem_pio2+0x3a4>
 800ada2:	ab0e      	add	r3, sp, #56	; 0x38
 800ada4:	f1aa 0a18 	sub.w	sl, sl, #24
 800ada8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800adac:	2b00      	cmp	r3, #0
 800adae:	f000 80ad 	beq.w	800af0c <__kernel_rem_pio2+0x3fc>
 800adb2:	4650      	mov	r0, sl
 800adb4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ae30 <__kernel_rem_pio2+0x320>
 800adb8:	f000 fc86 	bl	800b6c8 <scalbn>
 800adbc:	ab9a      	add	r3, sp, #616	; 0x268
 800adbe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800adc2:	ec57 6b10 	vmov	r6, r7, d0
 800adc6:	00ec      	lsls	r4, r5, #3
 800adc8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800adcc:	46aa      	mov	sl, r5
 800adce:	f1ba 0f00 	cmp.w	sl, #0
 800add2:	f280 80d6 	bge.w	800af82 <__kernel_rem_pio2+0x472>
 800add6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ae28 <__kernel_rem_pio2+0x318>
 800adda:	462e      	mov	r6, r5
 800addc:	2e00      	cmp	r6, #0
 800adde:	f2c0 8104 	blt.w	800afea <__kernel_rem_pio2+0x4da>
 800ade2:	ab72      	add	r3, sp, #456	; 0x1c8
 800ade4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ade8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ae50 <__kernel_rem_pio2+0x340>
 800adec:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800adf0:	f04f 0800 	mov.w	r8, #0
 800adf4:	1baf      	subs	r7, r5, r6
 800adf6:	e0ea      	b.n	800afce <__kernel_rem_pio2+0x4be>
 800adf8:	f04f 0b02 	mov.w	fp, #2
 800adfc:	e759      	b.n	800acb2 <__kernel_rem_pio2+0x1a2>
 800adfe:	f8d8 3000 	ldr.w	r3, [r8]
 800ae02:	b955      	cbnz	r5, 800ae1a <__kernel_rem_pio2+0x30a>
 800ae04:	b123      	cbz	r3, 800ae10 <__kernel_rem_pio2+0x300>
 800ae06:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ae0a:	f8c8 3000 	str.w	r3, [r8]
 800ae0e:	2301      	movs	r3, #1
 800ae10:	3201      	adds	r2, #1
 800ae12:	f108 0804 	add.w	r8, r8, #4
 800ae16:	461d      	mov	r5, r3
 800ae18:	e752      	b.n	800acc0 <__kernel_rem_pio2+0x1b0>
 800ae1a:	1acb      	subs	r3, r1, r3
 800ae1c:	f8c8 3000 	str.w	r3, [r8]
 800ae20:	462b      	mov	r3, r5
 800ae22:	e7f5      	b.n	800ae10 <__kernel_rem_pio2+0x300>
 800ae24:	f3af 8000 	nop.w
	...
 800ae34:	3ff00000 	.word	0x3ff00000
 800ae38:	0800be48 	.word	0x0800be48
 800ae3c:	40200000 	.word	0x40200000
 800ae40:	3ff00000 	.word	0x3ff00000
 800ae44:	3e700000 	.word	0x3e700000
 800ae48:	41700000 	.word	0x41700000
 800ae4c:	3fe00000 	.word	0x3fe00000
 800ae50:	0800be08 	.word	0x0800be08
 800ae54:	1e62      	subs	r2, r4, #1
 800ae56:	ab0e      	add	r3, sp, #56	; 0x38
 800ae58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ae60:	a90e      	add	r1, sp, #56	; 0x38
 800ae62:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ae66:	e739      	b.n	800acdc <__kernel_rem_pio2+0x1cc>
 800ae68:	1e62      	subs	r2, r4, #1
 800ae6a:	ab0e      	add	r3, sp, #56	; 0x38
 800ae6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae70:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ae74:	e7f4      	b.n	800ae60 <__kernel_rem_pio2+0x350>
 800ae76:	a90e      	add	r1, sp, #56	; 0x38
 800ae78:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	430a      	orrs	r2, r1
 800ae80:	e789      	b.n	800ad96 <__kernel_rem_pio2+0x286>
 800ae82:	3301      	adds	r3, #1
 800ae84:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ae88:	2900      	cmp	r1, #0
 800ae8a:	d0fa      	beq.n	800ae82 <__kernel_rem_pio2+0x372>
 800ae8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae8e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ae92:	446a      	add	r2, sp
 800ae94:	3a98      	subs	r2, #152	; 0x98
 800ae96:	920a      	str	r2, [sp, #40]	; 0x28
 800ae98:	9a08      	ldr	r2, [sp, #32]
 800ae9a:	18e3      	adds	r3, r4, r3
 800ae9c:	18a5      	adds	r5, r4, r2
 800ae9e:	aa22      	add	r2, sp, #136	; 0x88
 800aea0:	f104 0801 	add.w	r8, r4, #1
 800aea4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800aea8:	9304      	str	r3, [sp, #16]
 800aeaa:	9b04      	ldr	r3, [sp, #16]
 800aeac:	4543      	cmp	r3, r8
 800aeae:	da04      	bge.n	800aeba <__kernel_rem_pio2+0x3aa>
 800aeb0:	461c      	mov	r4, r3
 800aeb2:	e6a3      	b.n	800abfc <__kernel_rem_pio2+0xec>
 800aeb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e7e4      	b.n	800ae84 <__kernel_rem_pio2+0x374>
 800aeba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aebc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800aec0:	f7f5 fb50 	bl	8000564 <__aeabi_i2d>
 800aec4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800aec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeca:	46ab      	mov	fp, r5
 800aecc:	461c      	mov	r4, r3
 800aece:	f04f 0900 	mov.w	r9, #0
 800aed2:	2600      	movs	r6, #0
 800aed4:	2700      	movs	r7, #0
 800aed6:	9b06      	ldr	r3, [sp, #24]
 800aed8:	4599      	cmp	r9, r3
 800aeda:	dd06      	ble.n	800aeea <__kernel_rem_pio2+0x3da>
 800aedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aede:	e8e3 6702 	strd	r6, r7, [r3], #8
 800aee2:	f108 0801 	add.w	r8, r8, #1
 800aee6:	930a      	str	r3, [sp, #40]	; 0x28
 800aee8:	e7df      	b.n	800aeaa <__kernel_rem_pio2+0x39a>
 800aeea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800aeee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800aef2:	f7f5 fba1 	bl	8000638 <__aeabi_dmul>
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	4630      	mov	r0, r6
 800aefc:	4639      	mov	r1, r7
 800aefe:	f7f5 f9e5 	bl	80002cc <__adddf3>
 800af02:	f109 0901 	add.w	r9, r9, #1
 800af06:	4606      	mov	r6, r0
 800af08:	460f      	mov	r7, r1
 800af0a:	e7e4      	b.n	800aed6 <__kernel_rem_pio2+0x3c6>
 800af0c:	3d01      	subs	r5, #1
 800af0e:	e748      	b.n	800ada2 <__kernel_rem_pio2+0x292>
 800af10:	ec47 6b10 	vmov	d0, r6, r7
 800af14:	f1ca 0000 	rsb	r0, sl, #0
 800af18:	f000 fbd6 	bl	800b6c8 <scalbn>
 800af1c:	ec57 6b10 	vmov	r6, r7, d0
 800af20:	4ba0      	ldr	r3, [pc, #640]	; (800b1a4 <__kernel_rem_pio2+0x694>)
 800af22:	ee10 0a10 	vmov	r0, s0
 800af26:	2200      	movs	r2, #0
 800af28:	4639      	mov	r1, r7
 800af2a:	f7f5 fe0b 	bl	8000b44 <__aeabi_dcmpge>
 800af2e:	b1f8      	cbz	r0, 800af70 <__kernel_rem_pio2+0x460>
 800af30:	4b9d      	ldr	r3, [pc, #628]	; (800b1a8 <__kernel_rem_pio2+0x698>)
 800af32:	2200      	movs	r2, #0
 800af34:	4630      	mov	r0, r6
 800af36:	4639      	mov	r1, r7
 800af38:	f7f5 fb7e 	bl	8000638 <__aeabi_dmul>
 800af3c:	f7f5 fe2c 	bl	8000b98 <__aeabi_d2iz>
 800af40:	4680      	mov	r8, r0
 800af42:	f7f5 fb0f 	bl	8000564 <__aeabi_i2d>
 800af46:	4b97      	ldr	r3, [pc, #604]	; (800b1a4 <__kernel_rem_pio2+0x694>)
 800af48:	2200      	movs	r2, #0
 800af4a:	f7f5 fb75 	bl	8000638 <__aeabi_dmul>
 800af4e:	460b      	mov	r3, r1
 800af50:	4602      	mov	r2, r0
 800af52:	4639      	mov	r1, r7
 800af54:	4630      	mov	r0, r6
 800af56:	f7f5 f9b7 	bl	80002c8 <__aeabi_dsub>
 800af5a:	f7f5 fe1d 	bl	8000b98 <__aeabi_d2iz>
 800af5e:	1c65      	adds	r5, r4, #1
 800af60:	ab0e      	add	r3, sp, #56	; 0x38
 800af62:	f10a 0a18 	add.w	sl, sl, #24
 800af66:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800af6a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800af6e:	e720      	b.n	800adb2 <__kernel_rem_pio2+0x2a2>
 800af70:	4630      	mov	r0, r6
 800af72:	4639      	mov	r1, r7
 800af74:	f7f5 fe10 	bl	8000b98 <__aeabi_d2iz>
 800af78:	ab0e      	add	r3, sp, #56	; 0x38
 800af7a:	4625      	mov	r5, r4
 800af7c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800af80:	e717      	b.n	800adb2 <__kernel_rem_pio2+0x2a2>
 800af82:	ab0e      	add	r3, sp, #56	; 0x38
 800af84:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800af88:	f7f5 faec 	bl	8000564 <__aeabi_i2d>
 800af8c:	4632      	mov	r2, r6
 800af8e:	463b      	mov	r3, r7
 800af90:	f7f5 fb52 	bl	8000638 <__aeabi_dmul>
 800af94:	4b84      	ldr	r3, [pc, #528]	; (800b1a8 <__kernel_rem_pio2+0x698>)
 800af96:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800af9a:	2200      	movs	r2, #0
 800af9c:	4630      	mov	r0, r6
 800af9e:	4639      	mov	r1, r7
 800afa0:	f7f5 fb4a 	bl	8000638 <__aeabi_dmul>
 800afa4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afa8:	4606      	mov	r6, r0
 800afaa:	460f      	mov	r7, r1
 800afac:	e70f      	b.n	800adce <__kernel_rem_pio2+0x2be>
 800afae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800afb2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800afb6:	f7f5 fb3f 	bl	8000638 <__aeabi_dmul>
 800afba:	4602      	mov	r2, r0
 800afbc:	460b      	mov	r3, r1
 800afbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afc2:	f7f5 f983 	bl	80002cc <__adddf3>
 800afc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800afca:	f108 0801 	add.w	r8, r8, #1
 800afce:	9b02      	ldr	r3, [sp, #8]
 800afd0:	4598      	cmp	r8, r3
 800afd2:	dc01      	bgt.n	800afd8 <__kernel_rem_pio2+0x4c8>
 800afd4:	45b8      	cmp	r8, r7
 800afd6:	ddea      	ble.n	800afae <__kernel_rem_pio2+0x49e>
 800afd8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800afdc:	ab4a      	add	r3, sp, #296	; 0x128
 800afde:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800afe2:	ed87 7b00 	vstr	d7, [r7]
 800afe6:	3e01      	subs	r6, #1
 800afe8:	e6f8      	b.n	800addc <__kernel_rem_pio2+0x2cc>
 800afea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800afec:	2b02      	cmp	r3, #2
 800afee:	dc0b      	bgt.n	800b008 <__kernel_rem_pio2+0x4f8>
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	dc35      	bgt.n	800b060 <__kernel_rem_pio2+0x550>
 800aff4:	d059      	beq.n	800b0aa <__kernel_rem_pio2+0x59a>
 800aff6:	9b04      	ldr	r3, [sp, #16]
 800aff8:	f003 0007 	and.w	r0, r3, #7
 800affc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b000:	ecbd 8b02 	vpop	{d8}
 800b004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b008:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	d1f3      	bne.n	800aff6 <__kernel_rem_pio2+0x4e6>
 800b00e:	ab4a      	add	r3, sp, #296	; 0x128
 800b010:	4423      	add	r3, r4
 800b012:	9306      	str	r3, [sp, #24]
 800b014:	461c      	mov	r4, r3
 800b016:	469a      	mov	sl, r3
 800b018:	9502      	str	r5, [sp, #8]
 800b01a:	9b02      	ldr	r3, [sp, #8]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f1aa 0a08 	sub.w	sl, sl, #8
 800b022:	dc6b      	bgt.n	800b0fc <__kernel_rem_pio2+0x5ec>
 800b024:	46aa      	mov	sl, r5
 800b026:	f1ba 0f01 	cmp.w	sl, #1
 800b02a:	f1a4 0408 	sub.w	r4, r4, #8
 800b02e:	f300 8085 	bgt.w	800b13c <__kernel_rem_pio2+0x62c>
 800b032:	9c06      	ldr	r4, [sp, #24]
 800b034:	2000      	movs	r0, #0
 800b036:	3408      	adds	r4, #8
 800b038:	2100      	movs	r1, #0
 800b03a:	2d01      	cmp	r5, #1
 800b03c:	f300 809d 	bgt.w	800b17a <__kernel_rem_pio2+0x66a>
 800b040:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b044:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b048:	f1bb 0f00 	cmp.w	fp, #0
 800b04c:	f040 809b 	bne.w	800b186 <__kernel_rem_pio2+0x676>
 800b050:	9b01      	ldr	r3, [sp, #4]
 800b052:	e9c3 5600 	strd	r5, r6, [r3]
 800b056:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b05a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b05e:	e7ca      	b.n	800aff6 <__kernel_rem_pio2+0x4e6>
 800b060:	3408      	adds	r4, #8
 800b062:	ab4a      	add	r3, sp, #296	; 0x128
 800b064:	441c      	add	r4, r3
 800b066:	462e      	mov	r6, r5
 800b068:	2000      	movs	r0, #0
 800b06a:	2100      	movs	r1, #0
 800b06c:	2e00      	cmp	r6, #0
 800b06e:	da36      	bge.n	800b0de <__kernel_rem_pio2+0x5ce>
 800b070:	f1bb 0f00 	cmp.w	fp, #0
 800b074:	d039      	beq.n	800b0ea <__kernel_rem_pio2+0x5da>
 800b076:	4602      	mov	r2, r0
 800b078:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b07c:	9c01      	ldr	r4, [sp, #4]
 800b07e:	e9c4 2300 	strd	r2, r3, [r4]
 800b082:	4602      	mov	r2, r0
 800b084:	460b      	mov	r3, r1
 800b086:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b08a:	f7f5 f91d 	bl	80002c8 <__aeabi_dsub>
 800b08e:	ae4c      	add	r6, sp, #304	; 0x130
 800b090:	2401      	movs	r4, #1
 800b092:	42a5      	cmp	r5, r4
 800b094:	da2c      	bge.n	800b0f0 <__kernel_rem_pio2+0x5e0>
 800b096:	f1bb 0f00 	cmp.w	fp, #0
 800b09a:	d002      	beq.n	800b0a2 <__kernel_rem_pio2+0x592>
 800b09c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	9b01      	ldr	r3, [sp, #4]
 800b0a4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b0a8:	e7a5      	b.n	800aff6 <__kernel_rem_pio2+0x4e6>
 800b0aa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b0ae:	eb0d 0403 	add.w	r4, sp, r3
 800b0b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	2d00      	cmp	r5, #0
 800b0bc:	da09      	bge.n	800b0d2 <__kernel_rem_pio2+0x5c2>
 800b0be:	f1bb 0f00 	cmp.w	fp, #0
 800b0c2:	d002      	beq.n	800b0ca <__kernel_rem_pio2+0x5ba>
 800b0c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	9b01      	ldr	r3, [sp, #4]
 800b0cc:	e9c3 0100 	strd	r0, r1, [r3]
 800b0d0:	e791      	b.n	800aff6 <__kernel_rem_pio2+0x4e6>
 800b0d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b0d6:	f7f5 f8f9 	bl	80002cc <__adddf3>
 800b0da:	3d01      	subs	r5, #1
 800b0dc:	e7ed      	b.n	800b0ba <__kernel_rem_pio2+0x5aa>
 800b0de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b0e2:	f7f5 f8f3 	bl	80002cc <__adddf3>
 800b0e6:	3e01      	subs	r6, #1
 800b0e8:	e7c0      	b.n	800b06c <__kernel_rem_pio2+0x55c>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	e7c5      	b.n	800b07c <__kernel_rem_pio2+0x56c>
 800b0f0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b0f4:	f7f5 f8ea 	bl	80002cc <__adddf3>
 800b0f8:	3401      	adds	r4, #1
 800b0fa:	e7ca      	b.n	800b092 <__kernel_rem_pio2+0x582>
 800b0fc:	e9da 8900 	ldrd	r8, r9, [sl]
 800b100:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b104:	9b02      	ldr	r3, [sp, #8]
 800b106:	3b01      	subs	r3, #1
 800b108:	9302      	str	r3, [sp, #8]
 800b10a:	4632      	mov	r2, r6
 800b10c:	463b      	mov	r3, r7
 800b10e:	4640      	mov	r0, r8
 800b110:	4649      	mov	r1, r9
 800b112:	f7f5 f8db 	bl	80002cc <__adddf3>
 800b116:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	4640      	mov	r0, r8
 800b120:	4649      	mov	r1, r9
 800b122:	f7f5 f8d1 	bl	80002c8 <__aeabi_dsub>
 800b126:	4632      	mov	r2, r6
 800b128:	463b      	mov	r3, r7
 800b12a:	f7f5 f8cf 	bl	80002cc <__adddf3>
 800b12e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b132:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b136:	ed8a 7b00 	vstr	d7, [sl]
 800b13a:	e76e      	b.n	800b01a <__kernel_rem_pio2+0x50a>
 800b13c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b140:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b144:	4640      	mov	r0, r8
 800b146:	4632      	mov	r2, r6
 800b148:	463b      	mov	r3, r7
 800b14a:	4649      	mov	r1, r9
 800b14c:	f7f5 f8be 	bl	80002cc <__adddf3>
 800b150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	4640      	mov	r0, r8
 800b15a:	4649      	mov	r1, r9
 800b15c:	f7f5 f8b4 	bl	80002c8 <__aeabi_dsub>
 800b160:	4632      	mov	r2, r6
 800b162:	463b      	mov	r3, r7
 800b164:	f7f5 f8b2 	bl	80002cc <__adddf3>
 800b168:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b16c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b170:	ed84 7b00 	vstr	d7, [r4]
 800b174:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b178:	e755      	b.n	800b026 <__kernel_rem_pio2+0x516>
 800b17a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b17e:	f7f5 f8a5 	bl	80002cc <__adddf3>
 800b182:	3d01      	subs	r5, #1
 800b184:	e759      	b.n	800b03a <__kernel_rem_pio2+0x52a>
 800b186:	9b01      	ldr	r3, [sp, #4]
 800b188:	9a01      	ldr	r2, [sp, #4]
 800b18a:	601d      	str	r5, [r3, #0]
 800b18c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b190:	605c      	str	r4, [r3, #4]
 800b192:	609f      	str	r7, [r3, #8]
 800b194:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b198:	60d3      	str	r3, [r2, #12]
 800b19a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b19e:	6110      	str	r0, [r2, #16]
 800b1a0:	6153      	str	r3, [r2, #20]
 800b1a2:	e728      	b.n	800aff6 <__kernel_rem_pio2+0x4e6>
 800b1a4:	41700000 	.word	0x41700000
 800b1a8:	3e700000 	.word	0x3e700000
 800b1ac:	00000000 	.word	0x00000000

0800b1b0 <__kernel_tan>:
 800b1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b4:	ed2d 8b06 	vpush	{d8-d10}
 800b1b8:	ec5b ab10 	vmov	sl, fp, d0
 800b1bc:	4be0      	ldr	r3, [pc, #896]	; (800b540 <__kernel_tan+0x390>)
 800b1be:	b083      	sub	sp, #12
 800b1c0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800b1c4:	429f      	cmp	r7, r3
 800b1c6:	ec59 8b11 	vmov	r8, r9, d1
 800b1ca:	4606      	mov	r6, r0
 800b1cc:	f8cd b000 	str.w	fp, [sp]
 800b1d0:	dc61      	bgt.n	800b296 <__kernel_tan+0xe6>
 800b1d2:	ee10 0a10 	vmov	r0, s0
 800b1d6:	4659      	mov	r1, fp
 800b1d8:	f7f5 fcde 	bl	8000b98 <__aeabi_d2iz>
 800b1dc:	4605      	mov	r5, r0
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	f040 8083 	bne.w	800b2ea <__kernel_tan+0x13a>
 800b1e4:	1c73      	adds	r3, r6, #1
 800b1e6:	4652      	mov	r2, sl
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	433b      	orrs	r3, r7
 800b1ec:	d112      	bne.n	800b214 <__kernel_tan+0x64>
 800b1ee:	ec4b ab10 	vmov	d0, sl, fp
 800b1f2:	f7ff fa41 	bl	800a678 <fabs>
 800b1f6:	49d3      	ldr	r1, [pc, #844]	; (800b544 <__kernel_tan+0x394>)
 800b1f8:	ec53 2b10 	vmov	r2, r3, d0
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	f7f5 fb45 	bl	800088c <__aeabi_ddiv>
 800b202:	4682      	mov	sl, r0
 800b204:	468b      	mov	fp, r1
 800b206:	ec4b ab10 	vmov	d0, sl, fp
 800b20a:	b003      	add	sp, #12
 800b20c:	ecbd 8b06 	vpop	{d8-d10}
 800b210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b214:	2e01      	cmp	r6, #1
 800b216:	d0f6      	beq.n	800b206 <__kernel_tan+0x56>
 800b218:	4642      	mov	r2, r8
 800b21a:	464b      	mov	r3, r9
 800b21c:	4650      	mov	r0, sl
 800b21e:	4659      	mov	r1, fp
 800b220:	f7f5 f854 	bl	80002cc <__adddf3>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	460f      	mov	r7, r1
 800b22a:	2000      	movs	r0, #0
 800b22c:	49c6      	ldr	r1, [pc, #792]	; (800b548 <__kernel_tan+0x398>)
 800b22e:	f7f5 fb2d 	bl	800088c <__aeabi_ddiv>
 800b232:	e9cd 0100 	strd	r0, r1, [sp]
 800b236:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b23a:	462e      	mov	r6, r5
 800b23c:	4652      	mov	r2, sl
 800b23e:	462c      	mov	r4, r5
 800b240:	4630      	mov	r0, r6
 800b242:	461d      	mov	r5, r3
 800b244:	4639      	mov	r1, r7
 800b246:	465b      	mov	r3, fp
 800b248:	f7f5 f83e 	bl	80002c8 <__aeabi_dsub>
 800b24c:	4602      	mov	r2, r0
 800b24e:	460b      	mov	r3, r1
 800b250:	4640      	mov	r0, r8
 800b252:	4649      	mov	r1, r9
 800b254:	f7f5 f838 	bl	80002c8 <__aeabi_dsub>
 800b258:	4632      	mov	r2, r6
 800b25a:	462b      	mov	r3, r5
 800b25c:	f7f5 f9ec 	bl	8000638 <__aeabi_dmul>
 800b260:	4632      	mov	r2, r6
 800b262:	4680      	mov	r8, r0
 800b264:	4689      	mov	r9, r1
 800b266:	462b      	mov	r3, r5
 800b268:	4630      	mov	r0, r6
 800b26a:	4639      	mov	r1, r7
 800b26c:	f7f5 f9e4 	bl	8000638 <__aeabi_dmul>
 800b270:	4bb4      	ldr	r3, [pc, #720]	; (800b544 <__kernel_tan+0x394>)
 800b272:	2200      	movs	r2, #0
 800b274:	f7f5 f82a 	bl	80002cc <__adddf3>
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	4640      	mov	r0, r8
 800b27e:	4649      	mov	r1, r9
 800b280:	f7f5 f824 	bl	80002cc <__adddf3>
 800b284:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b288:	f7f5 f9d6 	bl	8000638 <__aeabi_dmul>
 800b28c:	4622      	mov	r2, r4
 800b28e:	462b      	mov	r3, r5
 800b290:	f7f5 f81c 	bl	80002cc <__adddf3>
 800b294:	e7b5      	b.n	800b202 <__kernel_tan+0x52>
 800b296:	4bad      	ldr	r3, [pc, #692]	; (800b54c <__kernel_tan+0x39c>)
 800b298:	429f      	cmp	r7, r3
 800b29a:	dd26      	ble.n	800b2ea <__kernel_tan+0x13a>
 800b29c:	9b00      	ldr	r3, [sp, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	da09      	bge.n	800b2b6 <__kernel_tan+0x106>
 800b2a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b2a6:	469b      	mov	fp, r3
 800b2a8:	ee10 aa10 	vmov	sl, s0
 800b2ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b2b0:	ee11 8a10 	vmov	r8, s2
 800b2b4:	4699      	mov	r9, r3
 800b2b6:	4652      	mov	r2, sl
 800b2b8:	465b      	mov	r3, fp
 800b2ba:	a183      	add	r1, pc, #524	; (adr r1, 800b4c8 <__kernel_tan+0x318>)
 800b2bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2c0:	f7f5 f802 	bl	80002c8 <__aeabi_dsub>
 800b2c4:	4642      	mov	r2, r8
 800b2c6:	464b      	mov	r3, r9
 800b2c8:	4604      	mov	r4, r0
 800b2ca:	460d      	mov	r5, r1
 800b2cc:	a180      	add	r1, pc, #512	; (adr r1, 800b4d0 <__kernel_tan+0x320>)
 800b2ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2d2:	f7f4 fff9 	bl	80002c8 <__aeabi_dsub>
 800b2d6:	4622      	mov	r2, r4
 800b2d8:	462b      	mov	r3, r5
 800b2da:	f7f4 fff7 	bl	80002cc <__adddf3>
 800b2de:	f04f 0800 	mov.w	r8, #0
 800b2e2:	4682      	mov	sl, r0
 800b2e4:	468b      	mov	fp, r1
 800b2e6:	f04f 0900 	mov.w	r9, #0
 800b2ea:	4652      	mov	r2, sl
 800b2ec:	465b      	mov	r3, fp
 800b2ee:	4650      	mov	r0, sl
 800b2f0:	4659      	mov	r1, fp
 800b2f2:	f7f5 f9a1 	bl	8000638 <__aeabi_dmul>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	ec43 2b18 	vmov	d8, r2, r3
 800b2fe:	f7f5 f99b 	bl	8000638 <__aeabi_dmul>
 800b302:	ec53 2b18 	vmov	r2, r3, d8
 800b306:	4604      	mov	r4, r0
 800b308:	460d      	mov	r5, r1
 800b30a:	4650      	mov	r0, sl
 800b30c:	4659      	mov	r1, fp
 800b30e:	f7f5 f993 	bl	8000638 <__aeabi_dmul>
 800b312:	a371      	add	r3, pc, #452	; (adr r3, 800b4d8 <__kernel_tan+0x328>)
 800b314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b318:	ec41 0b19 	vmov	d9, r0, r1
 800b31c:	4620      	mov	r0, r4
 800b31e:	4629      	mov	r1, r5
 800b320:	f7f5 f98a 	bl	8000638 <__aeabi_dmul>
 800b324:	a36e      	add	r3, pc, #440	; (adr r3, 800b4e0 <__kernel_tan+0x330>)
 800b326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32a:	f7f4 ffcf 	bl	80002cc <__adddf3>
 800b32e:	4622      	mov	r2, r4
 800b330:	462b      	mov	r3, r5
 800b332:	f7f5 f981 	bl	8000638 <__aeabi_dmul>
 800b336:	a36c      	add	r3, pc, #432	; (adr r3, 800b4e8 <__kernel_tan+0x338>)
 800b338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33c:	f7f4 ffc6 	bl	80002cc <__adddf3>
 800b340:	4622      	mov	r2, r4
 800b342:	462b      	mov	r3, r5
 800b344:	f7f5 f978 	bl	8000638 <__aeabi_dmul>
 800b348:	a369      	add	r3, pc, #420	; (adr r3, 800b4f0 <__kernel_tan+0x340>)
 800b34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34e:	f7f4 ffbd 	bl	80002cc <__adddf3>
 800b352:	4622      	mov	r2, r4
 800b354:	462b      	mov	r3, r5
 800b356:	f7f5 f96f 	bl	8000638 <__aeabi_dmul>
 800b35a:	a367      	add	r3, pc, #412	; (adr r3, 800b4f8 <__kernel_tan+0x348>)
 800b35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b360:	f7f4 ffb4 	bl	80002cc <__adddf3>
 800b364:	4622      	mov	r2, r4
 800b366:	462b      	mov	r3, r5
 800b368:	f7f5 f966 	bl	8000638 <__aeabi_dmul>
 800b36c:	a364      	add	r3, pc, #400	; (adr r3, 800b500 <__kernel_tan+0x350>)
 800b36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b372:	f7f4 ffab 	bl	80002cc <__adddf3>
 800b376:	ec53 2b18 	vmov	r2, r3, d8
 800b37a:	f7f5 f95d 	bl	8000638 <__aeabi_dmul>
 800b37e:	a362      	add	r3, pc, #392	; (adr r3, 800b508 <__kernel_tan+0x358>)
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	ec41 0b1a 	vmov	d10, r0, r1
 800b388:	4620      	mov	r0, r4
 800b38a:	4629      	mov	r1, r5
 800b38c:	f7f5 f954 	bl	8000638 <__aeabi_dmul>
 800b390:	a35f      	add	r3, pc, #380	; (adr r3, 800b510 <__kernel_tan+0x360>)
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	f7f4 ff99 	bl	80002cc <__adddf3>
 800b39a:	4622      	mov	r2, r4
 800b39c:	462b      	mov	r3, r5
 800b39e:	f7f5 f94b 	bl	8000638 <__aeabi_dmul>
 800b3a2:	a35d      	add	r3, pc, #372	; (adr r3, 800b518 <__kernel_tan+0x368>)
 800b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a8:	f7f4 ff90 	bl	80002cc <__adddf3>
 800b3ac:	4622      	mov	r2, r4
 800b3ae:	462b      	mov	r3, r5
 800b3b0:	f7f5 f942 	bl	8000638 <__aeabi_dmul>
 800b3b4:	a35a      	add	r3, pc, #360	; (adr r3, 800b520 <__kernel_tan+0x370>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	f7f4 ff87 	bl	80002cc <__adddf3>
 800b3be:	4622      	mov	r2, r4
 800b3c0:	462b      	mov	r3, r5
 800b3c2:	f7f5 f939 	bl	8000638 <__aeabi_dmul>
 800b3c6:	a358      	add	r3, pc, #352	; (adr r3, 800b528 <__kernel_tan+0x378>)
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f7f4 ff7e 	bl	80002cc <__adddf3>
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	462b      	mov	r3, r5
 800b3d4:	f7f5 f930 	bl	8000638 <__aeabi_dmul>
 800b3d8:	a355      	add	r3, pc, #340	; (adr r3, 800b530 <__kernel_tan+0x380>)
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f7f4 ff75 	bl	80002cc <__adddf3>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	ec51 0b1a 	vmov	r0, r1, d10
 800b3ea:	f7f4 ff6f 	bl	80002cc <__adddf3>
 800b3ee:	ec53 2b19 	vmov	r2, r3, d9
 800b3f2:	f7f5 f921 	bl	8000638 <__aeabi_dmul>
 800b3f6:	4642      	mov	r2, r8
 800b3f8:	464b      	mov	r3, r9
 800b3fa:	f7f4 ff67 	bl	80002cc <__adddf3>
 800b3fe:	ec53 2b18 	vmov	r2, r3, d8
 800b402:	f7f5 f919 	bl	8000638 <__aeabi_dmul>
 800b406:	4642      	mov	r2, r8
 800b408:	464b      	mov	r3, r9
 800b40a:	f7f4 ff5f 	bl	80002cc <__adddf3>
 800b40e:	a34a      	add	r3, pc, #296	; (adr r3, 800b538 <__kernel_tan+0x388>)
 800b410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b414:	4604      	mov	r4, r0
 800b416:	460d      	mov	r5, r1
 800b418:	ec51 0b19 	vmov	r0, r1, d9
 800b41c:	f7f5 f90c 	bl	8000638 <__aeabi_dmul>
 800b420:	4622      	mov	r2, r4
 800b422:	462b      	mov	r3, r5
 800b424:	f7f4 ff52 	bl	80002cc <__adddf3>
 800b428:	460b      	mov	r3, r1
 800b42a:	ec41 0b18 	vmov	d8, r0, r1
 800b42e:	4602      	mov	r2, r0
 800b430:	4659      	mov	r1, fp
 800b432:	4650      	mov	r0, sl
 800b434:	f7f4 ff4a 	bl	80002cc <__adddf3>
 800b438:	4b44      	ldr	r3, [pc, #272]	; (800b54c <__kernel_tan+0x39c>)
 800b43a:	429f      	cmp	r7, r3
 800b43c:	4604      	mov	r4, r0
 800b43e:	460d      	mov	r5, r1
 800b440:	f340 8086 	ble.w	800b550 <__kernel_tan+0x3a0>
 800b444:	4630      	mov	r0, r6
 800b446:	f7f5 f88d 	bl	8000564 <__aeabi_i2d>
 800b44a:	4622      	mov	r2, r4
 800b44c:	4680      	mov	r8, r0
 800b44e:	4689      	mov	r9, r1
 800b450:	462b      	mov	r3, r5
 800b452:	4620      	mov	r0, r4
 800b454:	4629      	mov	r1, r5
 800b456:	f7f5 f8ef 	bl	8000638 <__aeabi_dmul>
 800b45a:	4642      	mov	r2, r8
 800b45c:	4606      	mov	r6, r0
 800b45e:	460f      	mov	r7, r1
 800b460:	464b      	mov	r3, r9
 800b462:	4620      	mov	r0, r4
 800b464:	4629      	mov	r1, r5
 800b466:	f7f4 ff31 	bl	80002cc <__adddf3>
 800b46a:	4602      	mov	r2, r0
 800b46c:	460b      	mov	r3, r1
 800b46e:	4630      	mov	r0, r6
 800b470:	4639      	mov	r1, r7
 800b472:	f7f5 fa0b 	bl	800088c <__aeabi_ddiv>
 800b476:	ec53 2b18 	vmov	r2, r3, d8
 800b47a:	f7f4 ff25 	bl	80002c8 <__aeabi_dsub>
 800b47e:	4602      	mov	r2, r0
 800b480:	460b      	mov	r3, r1
 800b482:	4650      	mov	r0, sl
 800b484:	4659      	mov	r1, fp
 800b486:	f7f4 ff1f 	bl	80002c8 <__aeabi_dsub>
 800b48a:	4602      	mov	r2, r0
 800b48c:	460b      	mov	r3, r1
 800b48e:	f7f4 ff1d 	bl	80002cc <__adddf3>
 800b492:	4602      	mov	r2, r0
 800b494:	460b      	mov	r3, r1
 800b496:	4640      	mov	r0, r8
 800b498:	4649      	mov	r1, r9
 800b49a:	f7f4 ff15 	bl	80002c8 <__aeabi_dsub>
 800b49e:	9b00      	ldr	r3, [sp, #0]
 800b4a0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800b4a4:	f00a 0a02 	and.w	sl, sl, #2
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	f1ca 0001 	rsb	r0, sl, #1
 800b4ae:	460d      	mov	r5, r1
 800b4b0:	f7f5 f858 	bl	8000564 <__aeabi_i2d>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	4629      	mov	r1, r5
 800b4bc:	f7f5 f8bc 	bl	8000638 <__aeabi_dmul>
 800b4c0:	e69f      	b.n	800b202 <__kernel_tan+0x52>
 800b4c2:	bf00      	nop
 800b4c4:	f3af 8000 	nop.w
 800b4c8:	54442d18 	.word	0x54442d18
 800b4cc:	3fe921fb 	.word	0x3fe921fb
 800b4d0:	33145c07 	.word	0x33145c07
 800b4d4:	3c81a626 	.word	0x3c81a626
 800b4d8:	74bf7ad4 	.word	0x74bf7ad4
 800b4dc:	3efb2a70 	.word	0x3efb2a70
 800b4e0:	32f0a7e9 	.word	0x32f0a7e9
 800b4e4:	3f12b80f 	.word	0x3f12b80f
 800b4e8:	1a8d1068 	.word	0x1a8d1068
 800b4ec:	3f3026f7 	.word	0x3f3026f7
 800b4f0:	fee08315 	.word	0xfee08315
 800b4f4:	3f57dbc8 	.word	0x3f57dbc8
 800b4f8:	e96e8493 	.word	0xe96e8493
 800b4fc:	3f8226e3 	.word	0x3f8226e3
 800b500:	1bb341fe 	.word	0x1bb341fe
 800b504:	3faba1ba 	.word	0x3faba1ba
 800b508:	db605373 	.word	0xdb605373
 800b50c:	bef375cb 	.word	0xbef375cb
 800b510:	a03792a6 	.word	0xa03792a6
 800b514:	3f147e88 	.word	0x3f147e88
 800b518:	f2f26501 	.word	0xf2f26501
 800b51c:	3f4344d8 	.word	0x3f4344d8
 800b520:	c9560328 	.word	0xc9560328
 800b524:	3f6d6d22 	.word	0x3f6d6d22
 800b528:	8406d637 	.word	0x8406d637
 800b52c:	3f9664f4 	.word	0x3f9664f4
 800b530:	1110fe7a 	.word	0x1110fe7a
 800b534:	3fc11111 	.word	0x3fc11111
 800b538:	55555563 	.word	0x55555563
 800b53c:	3fd55555 	.word	0x3fd55555
 800b540:	3e2fffff 	.word	0x3e2fffff
 800b544:	3ff00000 	.word	0x3ff00000
 800b548:	bff00000 	.word	0xbff00000
 800b54c:	3fe59427 	.word	0x3fe59427
 800b550:	2e01      	cmp	r6, #1
 800b552:	d02f      	beq.n	800b5b4 <__kernel_tan+0x404>
 800b554:	460f      	mov	r7, r1
 800b556:	4602      	mov	r2, r0
 800b558:	460b      	mov	r3, r1
 800b55a:	4689      	mov	r9, r1
 800b55c:	2000      	movs	r0, #0
 800b55e:	4917      	ldr	r1, [pc, #92]	; (800b5bc <__kernel_tan+0x40c>)
 800b560:	f7f5 f994 	bl	800088c <__aeabi_ddiv>
 800b564:	2600      	movs	r6, #0
 800b566:	e9cd 0100 	strd	r0, r1, [sp]
 800b56a:	4652      	mov	r2, sl
 800b56c:	465b      	mov	r3, fp
 800b56e:	4630      	mov	r0, r6
 800b570:	4639      	mov	r1, r7
 800b572:	f7f4 fea9 	bl	80002c8 <__aeabi_dsub>
 800b576:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	ec51 0b18 	vmov	r0, r1, d8
 800b582:	f7f4 fea1 	bl	80002c8 <__aeabi_dsub>
 800b586:	4632      	mov	r2, r6
 800b588:	462b      	mov	r3, r5
 800b58a:	f7f5 f855 	bl	8000638 <__aeabi_dmul>
 800b58e:	46b0      	mov	r8, r6
 800b590:	460f      	mov	r7, r1
 800b592:	4642      	mov	r2, r8
 800b594:	462b      	mov	r3, r5
 800b596:	4634      	mov	r4, r6
 800b598:	4649      	mov	r1, r9
 800b59a:	4606      	mov	r6, r0
 800b59c:	4640      	mov	r0, r8
 800b59e:	f7f5 f84b 	bl	8000638 <__aeabi_dmul>
 800b5a2:	4b07      	ldr	r3, [pc, #28]	; (800b5c0 <__kernel_tan+0x410>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f7f4 fe91 	bl	80002cc <__adddf3>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	4639      	mov	r1, r7
 800b5b2:	e665      	b.n	800b280 <__kernel_tan+0xd0>
 800b5b4:	4682      	mov	sl, r0
 800b5b6:	468b      	mov	fp, r1
 800b5b8:	e625      	b.n	800b206 <__kernel_tan+0x56>
 800b5ba:	bf00      	nop
 800b5bc:	bff00000 	.word	0xbff00000
 800b5c0:	3ff00000 	.word	0x3ff00000
 800b5c4:	00000000 	.word	0x00000000

0800b5c8 <floor>:
 800b5c8:	ec51 0b10 	vmov	r0, r1, d0
 800b5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b5d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b5d8:	2e13      	cmp	r6, #19
 800b5da:	ee10 5a10 	vmov	r5, s0
 800b5de:	ee10 8a10 	vmov	r8, s0
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	dc32      	bgt.n	800b64c <floor+0x84>
 800b5e6:	2e00      	cmp	r6, #0
 800b5e8:	da14      	bge.n	800b614 <floor+0x4c>
 800b5ea:	a333      	add	r3, pc, #204	; (adr r3, 800b6b8 <floor+0xf0>)
 800b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f0:	f7f4 fe6c 	bl	80002cc <__adddf3>
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	f7f5 faae 	bl	8000b58 <__aeabi_dcmpgt>
 800b5fc:	b138      	cbz	r0, 800b60e <floor+0x46>
 800b5fe:	2c00      	cmp	r4, #0
 800b600:	da57      	bge.n	800b6b2 <floor+0xea>
 800b602:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b606:	431d      	orrs	r5, r3
 800b608:	d001      	beq.n	800b60e <floor+0x46>
 800b60a:	4c2d      	ldr	r4, [pc, #180]	; (800b6c0 <floor+0xf8>)
 800b60c:	2500      	movs	r5, #0
 800b60e:	4621      	mov	r1, r4
 800b610:	4628      	mov	r0, r5
 800b612:	e025      	b.n	800b660 <floor+0x98>
 800b614:	4f2b      	ldr	r7, [pc, #172]	; (800b6c4 <floor+0xfc>)
 800b616:	4137      	asrs	r7, r6
 800b618:	ea01 0307 	and.w	r3, r1, r7
 800b61c:	4303      	orrs	r3, r0
 800b61e:	d01f      	beq.n	800b660 <floor+0x98>
 800b620:	a325      	add	r3, pc, #148	; (adr r3, 800b6b8 <floor+0xf0>)
 800b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b626:	f7f4 fe51 	bl	80002cc <__adddf3>
 800b62a:	2200      	movs	r2, #0
 800b62c:	2300      	movs	r3, #0
 800b62e:	f7f5 fa93 	bl	8000b58 <__aeabi_dcmpgt>
 800b632:	2800      	cmp	r0, #0
 800b634:	d0eb      	beq.n	800b60e <floor+0x46>
 800b636:	2c00      	cmp	r4, #0
 800b638:	bfbe      	ittt	lt
 800b63a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b63e:	fa43 f606 	asrlt.w	r6, r3, r6
 800b642:	19a4      	addlt	r4, r4, r6
 800b644:	ea24 0407 	bic.w	r4, r4, r7
 800b648:	2500      	movs	r5, #0
 800b64a:	e7e0      	b.n	800b60e <floor+0x46>
 800b64c:	2e33      	cmp	r6, #51	; 0x33
 800b64e:	dd0b      	ble.n	800b668 <floor+0xa0>
 800b650:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b654:	d104      	bne.n	800b660 <floor+0x98>
 800b656:	ee10 2a10 	vmov	r2, s0
 800b65a:	460b      	mov	r3, r1
 800b65c:	f7f4 fe36 	bl	80002cc <__adddf3>
 800b660:	ec41 0b10 	vmov	d0, r0, r1
 800b664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b668:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b66c:	f04f 33ff 	mov.w	r3, #4294967295
 800b670:	fa23 f707 	lsr.w	r7, r3, r7
 800b674:	4207      	tst	r7, r0
 800b676:	d0f3      	beq.n	800b660 <floor+0x98>
 800b678:	a30f      	add	r3, pc, #60	; (adr r3, 800b6b8 <floor+0xf0>)
 800b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67e:	f7f4 fe25 	bl	80002cc <__adddf3>
 800b682:	2200      	movs	r2, #0
 800b684:	2300      	movs	r3, #0
 800b686:	f7f5 fa67 	bl	8000b58 <__aeabi_dcmpgt>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d0bf      	beq.n	800b60e <floor+0x46>
 800b68e:	2c00      	cmp	r4, #0
 800b690:	da02      	bge.n	800b698 <floor+0xd0>
 800b692:	2e14      	cmp	r6, #20
 800b694:	d103      	bne.n	800b69e <floor+0xd6>
 800b696:	3401      	adds	r4, #1
 800b698:	ea25 0507 	bic.w	r5, r5, r7
 800b69c:	e7b7      	b.n	800b60e <floor+0x46>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b6a4:	fa03 f606 	lsl.w	r6, r3, r6
 800b6a8:	4435      	add	r5, r6
 800b6aa:	4545      	cmp	r5, r8
 800b6ac:	bf38      	it	cc
 800b6ae:	18e4      	addcc	r4, r4, r3
 800b6b0:	e7f2      	b.n	800b698 <floor+0xd0>
 800b6b2:	2500      	movs	r5, #0
 800b6b4:	462c      	mov	r4, r5
 800b6b6:	e7aa      	b.n	800b60e <floor+0x46>
 800b6b8:	8800759c 	.word	0x8800759c
 800b6bc:	7e37e43c 	.word	0x7e37e43c
 800b6c0:	bff00000 	.word	0xbff00000
 800b6c4:	000fffff 	.word	0x000fffff

0800b6c8 <scalbn>:
 800b6c8:	b570      	push	{r4, r5, r6, lr}
 800b6ca:	ec55 4b10 	vmov	r4, r5, d0
 800b6ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b6d2:	4606      	mov	r6, r0
 800b6d4:	462b      	mov	r3, r5
 800b6d6:	b99a      	cbnz	r2, 800b700 <scalbn+0x38>
 800b6d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b6dc:	4323      	orrs	r3, r4
 800b6de:	d036      	beq.n	800b74e <scalbn+0x86>
 800b6e0:	4b39      	ldr	r3, [pc, #228]	; (800b7c8 <scalbn+0x100>)
 800b6e2:	4629      	mov	r1, r5
 800b6e4:	ee10 0a10 	vmov	r0, s0
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f7f4 ffa5 	bl	8000638 <__aeabi_dmul>
 800b6ee:	4b37      	ldr	r3, [pc, #220]	; (800b7cc <scalbn+0x104>)
 800b6f0:	429e      	cmp	r6, r3
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	460d      	mov	r5, r1
 800b6f6:	da10      	bge.n	800b71a <scalbn+0x52>
 800b6f8:	a32b      	add	r3, pc, #172	; (adr r3, 800b7a8 <scalbn+0xe0>)
 800b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fe:	e03a      	b.n	800b776 <scalbn+0xae>
 800b700:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b704:	428a      	cmp	r2, r1
 800b706:	d10c      	bne.n	800b722 <scalbn+0x5a>
 800b708:	ee10 2a10 	vmov	r2, s0
 800b70c:	4620      	mov	r0, r4
 800b70e:	4629      	mov	r1, r5
 800b710:	f7f4 fddc 	bl	80002cc <__adddf3>
 800b714:	4604      	mov	r4, r0
 800b716:	460d      	mov	r5, r1
 800b718:	e019      	b.n	800b74e <scalbn+0x86>
 800b71a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b71e:	460b      	mov	r3, r1
 800b720:	3a36      	subs	r2, #54	; 0x36
 800b722:	4432      	add	r2, r6
 800b724:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b728:	428a      	cmp	r2, r1
 800b72a:	dd08      	ble.n	800b73e <scalbn+0x76>
 800b72c:	2d00      	cmp	r5, #0
 800b72e:	a120      	add	r1, pc, #128	; (adr r1, 800b7b0 <scalbn+0xe8>)
 800b730:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b734:	da1c      	bge.n	800b770 <scalbn+0xa8>
 800b736:	a120      	add	r1, pc, #128	; (adr r1, 800b7b8 <scalbn+0xf0>)
 800b738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b73c:	e018      	b.n	800b770 <scalbn+0xa8>
 800b73e:	2a00      	cmp	r2, #0
 800b740:	dd08      	ble.n	800b754 <scalbn+0x8c>
 800b742:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b746:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b74a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b74e:	ec45 4b10 	vmov	d0, r4, r5
 800b752:	bd70      	pop	{r4, r5, r6, pc}
 800b754:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b758:	da19      	bge.n	800b78e <scalbn+0xc6>
 800b75a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b75e:	429e      	cmp	r6, r3
 800b760:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b764:	dd0a      	ble.n	800b77c <scalbn+0xb4>
 800b766:	a112      	add	r1, pc, #72	; (adr r1, 800b7b0 <scalbn+0xe8>)
 800b768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1e2      	bne.n	800b736 <scalbn+0x6e>
 800b770:	a30f      	add	r3, pc, #60	; (adr r3, 800b7b0 <scalbn+0xe8>)
 800b772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b776:	f7f4 ff5f 	bl	8000638 <__aeabi_dmul>
 800b77a:	e7cb      	b.n	800b714 <scalbn+0x4c>
 800b77c:	a10a      	add	r1, pc, #40	; (adr r1, 800b7a8 <scalbn+0xe0>)
 800b77e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d0b8      	beq.n	800b6f8 <scalbn+0x30>
 800b786:	a10e      	add	r1, pc, #56	; (adr r1, 800b7c0 <scalbn+0xf8>)
 800b788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b78c:	e7b4      	b.n	800b6f8 <scalbn+0x30>
 800b78e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b792:	3236      	adds	r2, #54	; 0x36
 800b794:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b798:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b79c:	4620      	mov	r0, r4
 800b79e:	4b0c      	ldr	r3, [pc, #48]	; (800b7d0 <scalbn+0x108>)
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	e7e8      	b.n	800b776 <scalbn+0xae>
 800b7a4:	f3af 8000 	nop.w
 800b7a8:	c2f8f359 	.word	0xc2f8f359
 800b7ac:	01a56e1f 	.word	0x01a56e1f
 800b7b0:	8800759c 	.word	0x8800759c
 800b7b4:	7e37e43c 	.word	0x7e37e43c
 800b7b8:	8800759c 	.word	0x8800759c
 800b7bc:	fe37e43c 	.word	0xfe37e43c
 800b7c0:	c2f8f359 	.word	0xc2f8f359
 800b7c4:	81a56e1f 	.word	0x81a56e1f
 800b7c8:	43500000 	.word	0x43500000
 800b7cc:	ffff3cb0 	.word	0xffff3cb0
 800b7d0:	3c900000 	.word	0x3c900000

0800b7d4 <_init>:
 800b7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7d6:	bf00      	nop
 800b7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7da:	bc08      	pop	{r3}
 800b7dc:	469e      	mov	lr, r3
 800b7de:	4770      	bx	lr

0800b7e0 <_fini>:
 800b7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e2:	bf00      	nop
 800b7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7e6:	bc08      	pop	{r3}
 800b7e8:	469e      	mov	lr, r3
 800b7ea:	4770      	bx	lr
