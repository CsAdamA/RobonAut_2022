
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f9c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003178  08003178  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003180  08003180  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08003194  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08003194  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0c8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bed  00000000  00000000  0002e104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  0002fcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  00030938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210b6  00000000  00000000  000314d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4d1  00000000  00000000  00052586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc9e7  00000000  00000000  00060a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012d43e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000337c  00000000  00000000  0012d494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003148 	.word	0x08003148

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003148 	.word	0x08003148

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fafc 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f826 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f936 	bl	8000778 <MX_GPIO_Init>
  MX_TIM2_Init();
 800050c:	f000 f894 	bl	8000638 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000510:	f000 f908 	bl	8000724 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	480e      	ldr	r0, [pc, #56]	; (8000550 <main+0x54>)
 8000518:	f001 fca8 	bl	8001e6c <HAL_TIM_PWM_Start>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  htim2.Instance->CCR1=25;
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <main+0x54>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2219      	movs	r2, #25
 8000522:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 8000524:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000528:	f000 fb5a 	bl	8000be0 <HAL_Delay>
	  htim2.Instance->CCR1=75;
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <main+0x54>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	224b      	movs	r2, #75	; 0x4b
 8000532:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 8000534:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000538:	f000 fb52 	bl	8000be0 <HAL_Delay>
	  htim2.Instance->CCR1=125;
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <main+0x54>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	227d      	movs	r2, #125	; 0x7d
 8000542:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 8000544:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000548:	f000 fb4a 	bl	8000be0 <HAL_Delay>
	  htim2.Instance->CCR1=25;
 800054c:	e7e6      	b.n	800051c <main+0x20>
 800054e:	bf00      	nop
 8000550:	2000006c 	.word	0x2000006c

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2234      	movs	r2, #52	; 0x34
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f002 fde8 	bl	8003138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <SystemClock_Config+0xdc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a2b      	ldr	r2, [pc, #172]	; (8000630 <SystemClock_Config+0xdc>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <SystemClock_Config+0xdc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	4b26      	ldr	r3, [pc, #152]	; (8000634 <SystemClock_Config+0xe0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a25      	ldr	r2, [pc, #148]	; (8000634 <SystemClock_Config+0xe0>)
 800059e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <SystemClock_Config+0xe0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005c8:	23b4      	movs	r3, #180	; 0xb4
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 f8ff 	bl	80017e0 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005e8:	f000 f944 	bl	8000874 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005ec:	f000 fddc 	bl	80011a8 <HAL_PWREx_EnableOverDrive>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005f6:	f000 f93d 	bl	8000874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2302      	movs	r3, #2
 8000600:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000606:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000610:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	2105      	movs	r1, #5
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fe15 	bl	8001248 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000624:	f000 f926 	bl	8000874 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	; 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08e      	sub	sp, #56	; 0x38
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
 8000664:	615a      	str	r2, [r3, #20]
 8000666:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000668:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <MX_TIM2_Init+0xe8>)
 800066a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800066e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900;
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <MX_TIM2_Init+0xe8>)
 8000672:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000676:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <MX_TIM2_Init+0xe8>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800067e:	4b28      	ldr	r3, [pc, #160]	; (8000720 <MX_TIM2_Init+0xe8>)
 8000680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000684:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <MX_TIM2_Init+0xe8>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <MX_TIM2_Init+0xe8>)
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000692:	4823      	ldr	r0, [pc, #140]	; (8000720 <MX_TIM2_Init+0xe8>)
 8000694:	f001 fb42 	bl	8001d1c <HAL_TIM_Base_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800069e:	f000 f8e9 	bl	8000874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ac:	4619      	mov	r1, r3
 80006ae:	481c      	ldr	r0, [pc, #112]	; (8000720 <MX_TIM2_Init+0xe8>)
 80006b0:	f001 fe6e 	bl	8002390 <HAL_TIM_ConfigClockSource>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80006ba:	f000 f8db 	bl	8000874 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006be:	4818      	ldr	r0, [pc, #96]	; (8000720 <MX_TIM2_Init+0xe8>)
 80006c0:	f001 fb7b 	bl	8001dba <HAL_TIM_PWM_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80006ca:	f000 f8d3 	bl	8000874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	4619      	mov	r1, r3
 80006dc:	4810      	ldr	r0, [pc, #64]	; (8000720 <MX_TIM2_Init+0xe8>)
 80006de:	f002 fa61 	bl	8002ba4 <HAL_TIMEx_MasterConfigSynchronization>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80006e8:	f000 f8c4 	bl	8000874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ec:	2360      	movs	r3, #96	; 0x60
 80006ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	4619      	mov	r1, r3
 8000702:	4807      	ldr	r0, [pc, #28]	; (8000720 <MX_TIM2_Init+0xe8>)
 8000704:	f001 fd82 	bl	800220c <HAL_TIM_PWM_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800070e:	f000 f8b1 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <MX_TIM2_Init+0xe8>)
 8000714:	f000 f902 	bl	800091c <HAL_TIM_MspPostInit>

}
 8000718:	bf00      	nop
 800071a:	3738      	adds	r7, #56	; 0x38
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000006c 	.word	0x2000006c

08000724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART1_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800075c:	f002 fab2 	bl	8002cc4 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f885 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000028 	.word	0x20000028
 8000774:	40011000 	.word	0x40011000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b35      	ldr	r3, [pc, #212]	; (8000868 <MX_GPIO_Init+0xf0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a34      	ldr	r2, [pc, #208]	; (8000868 <MX_GPIO_Init+0xf0>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b32      	ldr	r3, [pc, #200]	; (8000868 <MX_GPIO_Init+0xf0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <MX_GPIO_Init+0xf0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a2d      	ldr	r2, [pc, #180]	; (8000868 <MX_GPIO_Init+0xf0>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <MX_GPIO_Init+0xf0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b27      	ldr	r3, [pc, #156]	; (8000868 <MX_GPIO_Init+0xf0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a26      	ldr	r2, [pc, #152]	; (8000868 <MX_GPIO_Init+0xf0>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_GPIO_Init+0xf0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_GPIO_Init+0xf0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a1f      	ldr	r2, [pc, #124]	; (8000868 <MX_GPIO_Init+0xf0>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_GPIO_Init+0xf0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2120      	movs	r1, #32
 8000802:	481a      	ldr	r0, [pc, #104]	; (800086c <MX_GPIO_Init+0xf4>)
 8000804:	f000 fcb6 	bl	8001174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4814      	ldr	r0, [pc, #80]	; (8000870 <MX_GPIO_Init+0xf8>)
 8000820:	f000 fb14 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000824:	230c      	movs	r3, #12
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000834:	2307      	movs	r3, #7
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <MX_GPIO_Init+0xf4>)
 8000840:	f000 fb04 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000844:	2320      	movs	r3, #32
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_GPIO_Init+0xf4>)
 800085c:	f000 faf6 	bl	8000e4c <HAL_GPIO_Init>

}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	; 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000
 8000870:	40020800 	.word	0x40020800

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	e7fe      	b.n	800087c <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <HAL_MspInit+0x4c>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000894:	6453      	str	r3, [r2, #68]	; 0x44
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_MspInit+0x4c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008be:	2007      	movs	r0, #7
 80008c0:	f000 fa82 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008e0:	d115      	bne.n	800090e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_TIM_Base_MspInit+0x48>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <HAL_TIM_Base_MspInit+0x48>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_TIM_Base_MspInit+0x48>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	201c      	movs	r0, #28
 8000904:	f000 fa6b 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000908:	201c      	movs	r0, #28
 800090a:	f000 fa84 	bl	8000e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800093c:	d11d      	bne.n	800097a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <HAL_TIM_MspPostInit+0x68>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <HAL_TIM_MspPostInit+0x68>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <HAL_TIM_MspPostInit+0x68>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095a:	2301      	movs	r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800096a:	2301      	movs	r3, #1
 800096c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4619      	mov	r1, r3
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <HAL_TIM_MspPostInit+0x6c>)
 8000976:	f000 fa69 	bl	8000e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	3720      	adds	r7, #32
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40020000 	.word	0x40020000

0800098c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <HAL_UART_MspInit+0x84>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d12c      	bne.n	8000a08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009b8:	f043 0310 	orr.w	r3, r3, #16
 80009bc:	6453      	str	r3, [r2, #68]	; 0x44
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f003 0310 	and.w	r3, r3, #16
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009f8:	2307      	movs	r3, #7
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <HAL_UART_MspInit+0x8c>)
 8000a04:	f000 fa22 	bl	8000e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40011000 	.word	0x40011000
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020000 	.word	0x40020000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a68:	f000 f89a 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <TIM2_IRQHandler+0x10>)
 8000a76:	f001 fac1 	bl	8001ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000006c 	.word	0x2000006c

08000a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <SystemInit+0x20>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <SystemInit+0x20>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aae:	490e      	ldr	r1, [pc, #56]	; (8000ae8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac4:	4c0b      	ldr	r4, [pc, #44]	; (8000af4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ad2:	f7ff ffd7 	bl	8000a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f002 fb0b 	bl	80030f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ada:	f7ff fd0f 	bl	80004fc <main>
  bx  lr    
 8000ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aec:	08003188 	.word	0x08003188
  ldr r2, =_sbss
 8000af0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af4:	200000b8 	.word	0x200000b8

08000af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC_IRQHandler>
	...

08000afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <HAL_Init+0x40>)
 8000b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_Init+0x40>)
 8000b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_Init+0x40>)
 8000b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f94f 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f000 f808 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fea6 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023c00 	.word	0x40023c00

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x54>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x58>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f967 	bl	8000e32 <HAL_SYSTICK_Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00e      	b.n	8000b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d80a      	bhi.n	8000b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b74:	2200      	movs	r2, #0
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f000 f92f 	bl	8000dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <HAL_InitTick+0x5c>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e000      	b.n	8000b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x20>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	200000b4 	.word	0x200000b4

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GetTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	200000b4 	.word	0x200000b4

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff ffee 	bl	8000bc8 <HAL_GetTick>
 8000bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf8:	d005      	beq.n	8000c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_Delay+0x44>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c06:	bf00      	nop
 8000c08:	f7ff ffde 	bl	8000bc8 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8f7      	bhi.n	8000c08 <HAL_Delay+0x28>
  {
  }
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff29 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff3e 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff8e 	bl	8000d1c <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff31 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffa2 	bl	8000d84 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	e165      	b.n	8001134 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	f040 8154 	bne.w	800112e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d005      	beq.n	8000e9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d130      	bne.n	8000f00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	091b      	lsrs	r3, r3, #4
 8000eea:	f003 0201 	and.w	r2, r3, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d017      	beq.n	8000f3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d123      	bne.n	8000f90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	691a      	ldr	r2, [r3, #16]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	08da      	lsrs	r2, r3, #3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3208      	adds	r2, #8
 8000f8a:	69b9      	ldr	r1, [r7, #24]
 8000f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0203 	and.w	r2, r3, #3
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 80ae 	beq.w	800112e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b5d      	ldr	r3, [pc, #372]	; (800114c <HAL_GPIO_Init+0x300>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a5c      	ldr	r2, [pc, #368]	; (800114c <HAL_GPIO_Init+0x300>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b5a      	ldr	r3, [pc, #360]	; (800114c <HAL_GPIO_Init+0x300>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fee:	4a58      	ldr	r2, [pc, #352]	; (8001150 <HAL_GPIO_Init+0x304>)
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	089b      	lsrs	r3, r3, #2
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	220f      	movs	r2, #15
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4f      	ldr	r2, [pc, #316]	; (8001154 <HAL_GPIO_Init+0x308>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d025      	beq.n	8001066 <HAL_GPIO_Init+0x21a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4e      	ldr	r2, [pc, #312]	; (8001158 <HAL_GPIO_Init+0x30c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d01f      	beq.n	8001062 <HAL_GPIO_Init+0x216>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4d      	ldr	r2, [pc, #308]	; (800115c <HAL_GPIO_Init+0x310>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d019      	beq.n	800105e <HAL_GPIO_Init+0x212>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <HAL_GPIO_Init+0x314>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d013      	beq.n	800105a <HAL_GPIO_Init+0x20e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4b      	ldr	r2, [pc, #300]	; (8001164 <HAL_GPIO_Init+0x318>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d00d      	beq.n	8001056 <HAL_GPIO_Init+0x20a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <HAL_GPIO_Init+0x31c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d007      	beq.n	8001052 <HAL_GPIO_Init+0x206>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a49      	ldr	r2, [pc, #292]	; (800116c <HAL_GPIO_Init+0x320>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d101      	bne.n	800104e <HAL_GPIO_Init+0x202>
 800104a:	2306      	movs	r3, #6
 800104c:	e00c      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 800104e:	2307      	movs	r3, #7
 8001050:	e00a      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 8001052:	2305      	movs	r3, #5
 8001054:	e008      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 8001056:	2304      	movs	r3, #4
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 800105a:	2303      	movs	r3, #3
 800105c:	e004      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 800105e:	2302      	movs	r3, #2
 8001060:	e002      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 8001066:	2300      	movs	r3, #0
 8001068:	69fa      	ldr	r2, [r7, #28]
 800106a:	f002 0203 	and.w	r2, r2, #3
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	4093      	lsls	r3, r2
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001078:	4935      	ldr	r1, [pc, #212]	; (8001150 <HAL_GPIO_Init+0x304>)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001086:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <HAL_GPIO_Init+0x324>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010aa:	4a31      	ldr	r2, [pc, #196]	; (8001170 <HAL_GPIO_Init+0x324>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010b0:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <HAL_GPIO_Init+0x324>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d4:	4a26      	ldr	r2, [pc, #152]	; (8001170 <HAL_GPIO_Init+0x324>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <HAL_GPIO_Init+0x324>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <HAL_GPIO_Init+0x324>)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <HAL_GPIO_Init+0x324>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001128:	4a11      	ldr	r2, [pc, #68]	; (8001170 <HAL_GPIO_Init+0x324>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3301      	adds	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	2b0f      	cmp	r3, #15
 8001138:	f67f ae96 	bls.w	8000e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40013800 	.word	0x40013800
 8001154:	40020000 	.word	0x40020000
 8001158:	40020400 	.word	0x40020400
 800115c:	40020800 	.word	0x40020800
 8001160:	40020c00 	.word	0x40020c00
 8001164:	40021000 	.word	0x40021000
 8001168:	40021400 	.word	0x40021400
 800116c:	40021800 	.word	0x40021800
 8001170:	40013c00 	.word	0x40013c00

08001174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
 8001180:	4613      	mov	r3, r2
 8001182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001190:	e003      	b.n	800119a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	041a      	lsls	r2, r3, #16
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	619a      	str	r2, [r3, #24]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <HAL_PWREx_EnableOverDrive+0x90>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	4a1f      	ldr	r2, [pc, #124]	; (8001238 <HAL_PWREx_EnableOverDrive+0x90>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_PWREx_EnableOverDrive+0x90>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <HAL_PWREx_EnableOverDrive+0x94>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011d4:	f7ff fcf8 	bl	8000bc8 <HAL_GetTick>
 80011d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011da:	e009      	b.n	80011f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011dc:	f7ff fcf4 	bl	8000bc8 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011ea:	d901      	bls.n	80011f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e01f      	b.n	8001230 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_PWREx_EnableOverDrive+0x98>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fc:	d1ee      	bne.n	80011dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001204:	f7ff fce0 	bl	8000bc8 <HAL_GetTick>
 8001208:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800120a:	e009      	b.n	8001220 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800120c:	f7ff fcdc 	bl	8000bc8 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800121a:	d901      	bls.n	8001220 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e007      	b.n	8001230 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <HAL_PWREx_EnableOverDrive+0x98>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800122c:	d1ee      	bne.n	800120c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40023800 	.word	0x40023800
 800123c:	420e0040 	.word	0x420e0040
 8001240:	40007000 	.word	0x40007000
 8001244:	420e0044 	.word	0x420e0044

08001248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0cc      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800125c:	4b68      	ldr	r3, [pc, #416]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 030f 	and.w	r3, r3, #15
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d90c      	bls.n	8001284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126a:	4b65      	ldr	r3, [pc, #404]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001272:	4b63      	ldr	r3, [pc, #396]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d001      	beq.n	8001284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0b8      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d020      	beq.n	80012d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800129c:	4b59      	ldr	r3, [pc, #356]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	4a58      	ldr	r2, [pc, #352]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012b4:	4b53      	ldr	r3, [pc, #332]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	4a52      	ldr	r2, [pc, #328]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c0:	4b50      	ldr	r3, [pc, #320]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	494d      	ldr	r1, [pc, #308]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d044      	beq.n	8001368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b47      	ldr	r3, [pc, #284]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d119      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e07f      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d003      	beq.n	8001306 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001302:	2b03      	cmp	r3, #3
 8001304:	d107      	bne.n	8001316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001306:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d109      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e06f      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001316:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e067      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001326:	4b37      	ldr	r3, [pc, #220]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f023 0203 	bic.w	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4934      	ldr	r1, [pc, #208]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	4313      	orrs	r3, r2
 8001336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001338:	f7ff fc46 	bl	8000bc8 <HAL_GetTick>
 800133c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133e:	e00a      	b.n	8001356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001340:	f7ff fc42 	bl	8000bc8 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f241 3288 	movw	r2, #5000	; 0x1388
 800134e:	4293      	cmp	r3, r2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e04f      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 020c 	and.w	r2, r3, #12
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	429a      	cmp	r2, r3
 8001366:	d1eb      	bne.n	8001340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d20c      	bcs.n	8001390 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d001      	beq.n	8001390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e032      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d008      	beq.n	80013ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	4916      	ldr	r1, [pc, #88]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	490e      	ldr	r1, [pc, #56]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013ce:	f000 f855 	bl	800147c <HAL_RCC_GetSysClockFreq>
 80013d2:	4602      	mov	r2, r0
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	490a      	ldr	r1, [pc, #40]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 80013e0:	5ccb      	ldrb	r3, [r1, r3]
 80013e2:	fa22 f303 	lsr.w	r3, r2, r3
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_RCC_ClockConfig+0x1c8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fba6 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023c00 	.word	0x40023c00
 8001404:	40023800 	.word	0x40023800
 8001408:	08003160 	.word	0x08003160
 800140c:	20000000 	.word	0x20000000
 8001410:	20000004 	.word	0x20000004

08001414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_RCC_GetHCLKFreq+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000000 	.word	0x20000000

0800142c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001430:	f7ff fff0 	bl	8001414 <HAL_RCC_GetHCLKFreq>
 8001434:	4602      	mov	r2, r0
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	0a9b      	lsrs	r3, r3, #10
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	4903      	ldr	r1, [pc, #12]	; (8001450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001442:	5ccb      	ldrb	r3, [r1, r3]
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001448:	4618      	mov	r0, r3
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	08003170 	.word	0x08003170

08001454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001458:	f7ff ffdc 	bl	8001414 <HAL_RCC_GetHCLKFreq>
 800145c:	4602      	mov	r2, r0
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	0b5b      	lsrs	r3, r3, #13
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	4903      	ldr	r1, [pc, #12]	; (8001478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800146a:	5ccb      	ldrb	r3, [r1, r3]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001470:	4618      	mov	r0, r3
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	08003170 	.word	0x08003170

0800147c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800147c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001480:	b088      	sub	sp, #32
 8001482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001498:	4bce      	ldr	r3, [pc, #824]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x358>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b0c      	cmp	r3, #12
 80014a2:	f200 818d 	bhi.w	80017c0 <HAL_RCC_GetSysClockFreq+0x344>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <HAL_RCC_GetSysClockFreq+0x30>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	080014e1 	.word	0x080014e1
 80014b0:	080017c1 	.word	0x080017c1
 80014b4:	080017c1 	.word	0x080017c1
 80014b8:	080017c1 	.word	0x080017c1
 80014bc:	080014e7 	.word	0x080014e7
 80014c0:	080017c1 	.word	0x080017c1
 80014c4:	080017c1 	.word	0x080017c1
 80014c8:	080017c1 	.word	0x080017c1
 80014cc:	080014ed 	.word	0x080014ed
 80014d0:	080017c1 	.word	0x080017c1
 80014d4:	080017c1 	.word	0x080017c1
 80014d8:	080017c1 	.word	0x080017c1
 80014dc:	08001661 	.word	0x08001661
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014e0:	4bbd      	ldr	r3, [pc, #756]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014e2:	61bb      	str	r3, [r7, #24]
       break;
 80014e4:	e16f      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014e6:	4bbd      	ldr	r3, [pc, #756]	; (80017dc <HAL_RCC_GetSysClockFreq+0x360>)
 80014e8:	61bb      	str	r3, [r7, #24]
      break;
 80014ea:	e16c      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014ec:	4bb9      	ldr	r3, [pc, #740]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014f4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014f6:	4bb7      	ldr	r3, [pc, #732]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d053      	beq.n	80015aa <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001502:	4bb4      	ldr	r3, [pc, #720]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	099b      	lsrs	r3, r3, #6
 8001508:	461a      	mov	r2, r3
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001512:	f04f 0100 	mov.w	r1, #0
 8001516:	ea02 0400 	and.w	r4, r2, r0
 800151a:	603c      	str	r4, [r7, #0]
 800151c:	400b      	ands	r3, r1
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001524:	4620      	mov	r0, r4
 8001526:	4629      	mov	r1, r5
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	014b      	lsls	r3, r1, #5
 8001532:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001536:	0142      	lsls	r2, r0, #5
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	4623      	mov	r3, r4
 800153e:	1ac0      	subs	r0, r0, r3
 8001540:	462b      	mov	r3, r5
 8001542:	eb61 0103 	sbc.w	r1, r1, r3
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	018b      	lsls	r3, r1, #6
 8001550:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001554:	0182      	lsls	r2, r0, #6
 8001556:	1a12      	subs	r2, r2, r0
 8001558:	eb63 0301 	sbc.w	r3, r3, r1
 800155c:	f04f 0000 	mov.w	r0, #0
 8001560:	f04f 0100 	mov.w	r1, #0
 8001564:	00d9      	lsls	r1, r3, #3
 8001566:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800156a:	00d0      	lsls	r0, r2, #3
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4621      	mov	r1, r4
 8001572:	1852      	adds	r2, r2, r1
 8001574:	4629      	mov	r1, r5
 8001576:	eb43 0101 	adc.w	r1, r3, r1
 800157a:	460b      	mov	r3, r1
 800157c:	f04f 0000 	mov.w	r0, #0
 8001580:	f04f 0100 	mov.w	r1, #0
 8001584:	0259      	lsls	r1, r3, #9
 8001586:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800158a:	0250      	lsls	r0, r2, #9
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	461a      	mov	r2, r3
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	f7fe fe32 	bl	8000204 <__aeabi_uldivmod>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4613      	mov	r3, r2
 80015a6:	61fb      	str	r3, [r7, #28]
 80015a8:	e04c      	b.n	8001644 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015aa:	4b8a      	ldr	r3, [pc, #552]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	099b      	lsrs	r3, r3, #6
 80015b0:	461a      	mov	r2, r3
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015ba:	f04f 0100 	mov.w	r1, #0
 80015be:	ea02 0a00 	and.w	sl, r2, r0
 80015c2:	ea03 0b01 	and.w	fp, r3, r1
 80015c6:	4650      	mov	r0, sl
 80015c8:	4659      	mov	r1, fp
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	014b      	lsls	r3, r1, #5
 80015d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015d8:	0142      	lsls	r2, r0, #5
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	ebb0 000a 	subs.w	r0, r0, sl
 80015e2:	eb61 010b 	sbc.w	r1, r1, fp
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	018b      	lsls	r3, r1, #6
 80015f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015f4:	0182      	lsls	r2, r0, #6
 80015f6:	1a12      	subs	r2, r2, r0
 80015f8:	eb63 0301 	sbc.w	r3, r3, r1
 80015fc:	f04f 0000 	mov.w	r0, #0
 8001600:	f04f 0100 	mov.w	r1, #0
 8001604:	00d9      	lsls	r1, r3, #3
 8001606:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800160a:	00d0      	lsls	r0, r2, #3
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	eb12 020a 	adds.w	r2, r2, sl
 8001614:	eb43 030b 	adc.w	r3, r3, fp
 8001618:	f04f 0000 	mov.w	r0, #0
 800161c:	f04f 0100 	mov.w	r1, #0
 8001620:	0299      	lsls	r1, r3, #10
 8001622:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001626:	0290      	lsls	r0, r2, #10
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	461a      	mov	r2, r3
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	f7fe fde4 	bl	8000204 <__aeabi_uldivmod>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4613      	mov	r3, r2
 8001642:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001644:	4b63      	ldr	r3, [pc, #396]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	0c1b      	lsrs	r3, r3, #16
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	3301      	adds	r3, #1
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	fbb2 f3f3 	udiv	r3, r2, r3
 800165c:	61bb      	str	r3, [r7, #24]
      break;
 800165e:	e0b2      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001660:	4b5c      	ldr	r3, [pc, #368]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001668:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800166a:	4b5a      	ldr	r3, [pc, #360]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x358>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d04d      	beq.n	8001712 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001676:	4b57      	ldr	r3, [pc, #348]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	099b      	lsrs	r3, r3, #6
 800167c:	461a      	mov	r2, r3
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	ea02 0800 	and.w	r8, r2, r0
 800168e:	ea03 0901 	and.w	r9, r3, r1
 8001692:	4640      	mov	r0, r8
 8001694:	4649      	mov	r1, r9
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	014b      	lsls	r3, r1, #5
 80016a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016a4:	0142      	lsls	r2, r0, #5
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	ebb0 0008 	subs.w	r0, r0, r8
 80016ae:	eb61 0109 	sbc.w	r1, r1, r9
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	018b      	lsls	r3, r1, #6
 80016bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016c0:	0182      	lsls	r2, r0, #6
 80016c2:	1a12      	subs	r2, r2, r0
 80016c4:	eb63 0301 	sbc.w	r3, r3, r1
 80016c8:	f04f 0000 	mov.w	r0, #0
 80016cc:	f04f 0100 	mov.w	r1, #0
 80016d0:	00d9      	lsls	r1, r3, #3
 80016d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016d6:	00d0      	lsls	r0, r2, #3
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	eb12 0208 	adds.w	r2, r2, r8
 80016e0:	eb43 0309 	adc.w	r3, r3, r9
 80016e4:	f04f 0000 	mov.w	r0, #0
 80016e8:	f04f 0100 	mov.w	r1, #0
 80016ec:	0259      	lsls	r1, r3, #9
 80016ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016f2:	0250      	lsls	r0, r2, #9
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	461a      	mov	r2, r3
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	f7fe fd7e 	bl	8000204 <__aeabi_uldivmod>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4613      	mov	r3, r2
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	e04a      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001712:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	099b      	lsrs	r3, r3, #6
 8001718:	461a      	mov	r2, r3
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	ea02 0400 	and.w	r4, r2, r0
 800172a:	ea03 0501 	and.w	r5, r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	014b      	lsls	r3, r1, #5
 800173c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001740:	0142      	lsls	r2, r0, #5
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	1b00      	subs	r0, r0, r4
 8001748:	eb61 0105 	sbc.w	r1, r1, r5
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	018b      	lsls	r3, r1, #6
 8001756:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800175a:	0182      	lsls	r2, r0, #6
 800175c:	1a12      	subs	r2, r2, r0
 800175e:	eb63 0301 	sbc.w	r3, r3, r1
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	00d9      	lsls	r1, r3, #3
 800176c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001770:	00d0      	lsls	r0, r2, #3
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	1912      	adds	r2, r2, r4
 8001778:	eb45 0303 	adc.w	r3, r5, r3
 800177c:	f04f 0000 	mov.w	r0, #0
 8001780:	f04f 0100 	mov.w	r1, #0
 8001784:	0299      	lsls	r1, r3, #10
 8001786:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800178a:	0290      	lsls	r0, r2, #10
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	461a      	mov	r2, r3
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	f7fe fd32 	bl	8000204 <__aeabi_uldivmod>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4613      	mov	r3, r2
 80017a6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	0f1b      	lsrs	r3, r3, #28
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017bc:	61bb      	str	r3, [r7, #24]
      break;
 80017be:	e002      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80017c2:	61bb      	str	r3, [r7, #24]
      break;
 80017c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c6:	69bb      	ldr	r3, [r7, #24]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	00f42400 	.word	0x00f42400
 80017dc:	007a1200 	.word	0x007a1200

080017e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e28d      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 8083 	beq.w	8001906 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001800:	4b94      	ldr	r3, [pc, #592]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b04      	cmp	r3, #4
 800180a:	d019      	beq.n	8001840 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800180c:	4b91      	ldr	r3, [pc, #580]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001814:	2b08      	cmp	r3, #8
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001818:	4b8e      	ldr	r3, [pc, #568]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001824:	d00c      	beq.n	8001840 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001826:	4b8b      	ldr	r3, [pc, #556]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d112      	bne.n	8001858 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001832:	4b88      	ldr	r3, [pc, #544]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800183e:	d10b      	bne.n	8001858 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	4b84      	ldr	r3, [pc, #528]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d05b      	beq.n	8001904 <HAL_RCC_OscConfig+0x124>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d157      	bne.n	8001904 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e25a      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001860:	d106      	bne.n	8001870 <HAL_RCC_OscConfig+0x90>
 8001862:	4b7c      	ldr	r3, [pc, #496]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a7b      	ldr	r2, [pc, #492]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e01d      	b.n	80018ac <HAL_RCC_OscConfig+0xcc>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0xb4>
 800187a:	4b76      	ldr	r3, [pc, #472]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a75      	ldr	r2, [pc, #468]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b73      	ldr	r3, [pc, #460]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a72      	ldr	r2, [pc, #456]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 800188c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e00b      	b.n	80018ac <HAL_RCC_OscConfig+0xcc>
 8001894:	4b6f      	ldr	r3, [pc, #444]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a6e      	ldr	r2, [pc, #440]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 800189a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b6c      	ldr	r3, [pc, #432]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a6b      	ldr	r2, [pc, #428]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80018a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d013      	beq.n	80018dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff f988 	bl	8000bc8 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff f984 	bl	8000bc8 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	; 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e21f      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	4b61      	ldr	r3, [pc, #388]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0xdc>
 80018da:	e014      	b.n	8001906 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff f974 	bl	8000bc8 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff f970 	bl	8000bc8 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e20b      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f6:	4b57      	ldr	r3, [pc, #348]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x104>
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d06f      	beq.n	80019f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001912:	4b50      	ldr	r3, [pc, #320]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b00      	cmp	r3, #0
 800191c:	d017      	beq.n	800194e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800191e:	4b4d      	ldr	r3, [pc, #308]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001926:	2b08      	cmp	r3, #8
 8001928:	d105      	bne.n	8001936 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800192a:	4b4a      	ldr	r3, [pc, #296]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d11c      	bne.n	800197c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001942:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x186>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e1d3      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4937      	ldr	r1, [pc, #220]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	e03a      	b.n	80019f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001984:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_RCC_OscConfig+0x278>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff f91d 	bl	8000bc8 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001992:	f7ff f919 	bl	8000bc8 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e1b4      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4925      	ldr	r1, [pc, #148]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
 80019c4:	e015      	b.n	80019f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c6:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <HAL_RCC_OscConfig+0x278>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff f8fc 	bl	8000bc8 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff f8f8 	bl	8000bc8 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e193      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d036      	beq.n	8001a6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d016      	beq.n	8001a34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_RCC_OscConfig+0x27c>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0c:	f7ff f8dc 	bl	8000bc8 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff f8d8 	bl	8000bc8 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e173      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x234>
 8001a32:	e01b      	b.n	8001a6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCC_OscConfig+0x27c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3a:	f7ff f8c5 	bl	8000bc8 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a40:	e00e      	b.n	8001a60 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a42:	f7ff f8c1 	bl	8000bc8 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d907      	bls.n	8001a60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e15c      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
 8001a54:	40023800 	.word	0x40023800
 8001a58:	42470000 	.word	0x42470000
 8001a5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	4b8a      	ldr	r3, [pc, #552]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ea      	bne.n	8001a42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8097 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7e:	4b83      	ldr	r3, [pc, #524]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10f      	bne.n	8001aaa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	4b7f      	ldr	r3, [pc, #508]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	4a7e      	ldr	r2, [pc, #504]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9a:	4b7c      	ldr	r3, [pc, #496]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aaa:	4b79      	ldr	r3, [pc, #484]	; (8001c90 <HAL_RCC_OscConfig+0x4b0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d118      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab6:	4b76      	ldr	r3, [pc, #472]	; (8001c90 <HAL_RCC_OscConfig+0x4b0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a75      	ldr	r2, [pc, #468]	; (8001c90 <HAL_RCC_OscConfig+0x4b0>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f881 	bl	8000bc8 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aca:	f7ff f87d 	bl	8000bc8 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e118      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	4b6c      	ldr	r3, [pc, #432]	; (8001c90 <HAL_RCC_OscConfig+0x4b0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x31e>
 8001af0:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	4a65      	ldr	r2, [pc, #404]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6713      	str	r3, [r2, #112]	; 0x70
 8001afc:	e01c      	b.n	8001b38 <HAL_RCC_OscConfig+0x358>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x340>
 8001b06:	4b61      	ldr	r3, [pc, #388]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0a:	4a60      	ldr	r2, [pc, #384]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6713      	str	r3, [r2, #112]	; 0x70
 8001b12:	4b5e      	ldr	r3, [pc, #376]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b16:	4a5d      	ldr	r2, [pc, #372]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0x358>
 8001b20:	4b5a      	ldr	r3, [pc, #360]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b24:	4a59      	ldr	r2, [pc, #356]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2c:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b30:	4a56      	ldr	r2, [pc, #344]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b32:	f023 0304 	bic.w	r3, r3, #4
 8001b36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d015      	beq.n	8001b6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff f842 	bl	8000bc8 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b48:	f7ff f83e 	bl	8000bc8 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e0d7      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0ee      	beq.n	8001b48 <HAL_RCC_OscConfig+0x368>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f82c 	bl	8000bc8 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b74:	f7ff f828 	bl	8000bc8 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e0c1      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8a:	4b40      	ldr	r3, [pc, #256]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ee      	bne.n	8001b74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b96:	7dfb      	ldrb	r3, [r7, #23]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9c:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	4a3a      	ldr	r2, [pc, #232]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80ad 	beq.w	8001d0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bb2:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d060      	beq.n	8001c80 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d145      	bne.n	8001c52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	4b33      	ldr	r3, [pc, #204]	; (8001c94 <HAL_RCC_OscConfig+0x4b4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7fe fffc 	bl	8000bc8 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7fe fff8 	bl	8000bc8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e093      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69da      	ldr	r2, [r3, #28]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	019b      	lsls	r3, r3, #6
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	085b      	lsrs	r3, r3, #1
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	041b      	lsls	r3, r3, #16
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	061b      	lsls	r3, r3, #24
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	071b      	lsls	r3, r3, #28
 8001c1e:	491b      	ldr	r1, [pc, #108]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <HAL_RCC_OscConfig+0x4b4>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2a:	f7fe ffcd 	bl	8000bc8 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c32:	f7fe ffc9 	bl	8000bc8 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e064      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x452>
 8001c50:	e05c      	b.n	8001d0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_RCC_OscConfig+0x4b4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7fe ffb6 	bl	8000bc8 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c60:	f7fe ffb2 	bl	8000bc8 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e04d      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x480>
 8001c7e:	e045      	b.n	8001d0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e040      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40007000 	.word	0x40007000
 8001c94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <HAL_RCC_OscConfig+0x538>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d030      	beq.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d129      	bne.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d122      	bne.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cc8:	4013      	ands	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d119      	bne.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	085b      	lsrs	r3, r3, #1
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d10f      	bne.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e041      	b.n	8001db2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d106      	bne.n	8001d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7fe fdc4 	bl	80008d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3304      	adds	r3, #4
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f000 fc12 	bl	8002584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e041      	b.n	8001e50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d106      	bne.n	8001de6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f839 	bl	8001e58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2202      	movs	r2, #2
 8001dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3304      	adds	r3, #4
 8001df6:	4619      	mov	r1, r3
 8001df8:	4610      	mov	r0, r2
 8001dfa:	f000 fbc3 	bl	8002584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_TIM_PWM_Start+0x24>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	bf14      	ite	ne
 8001e88:	2301      	movne	r3, #1
 8001e8a:	2300      	moveq	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e022      	b.n	8001ed6 <HAL_TIM_PWM_Start+0x6a>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d109      	bne.n	8001eaa <HAL_TIM_PWM_Start+0x3e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	bf14      	ite	ne
 8001ea2:	2301      	movne	r3, #1
 8001ea4:	2300      	moveq	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	e015      	b.n	8001ed6 <HAL_TIM_PWM_Start+0x6a>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d109      	bne.n	8001ec4 <HAL_TIM_PWM_Start+0x58>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	bf14      	ite	ne
 8001ebc:	2301      	movne	r3, #1
 8001ebe:	2300      	moveq	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e008      	b.n	8001ed6 <HAL_TIM_PWM_Start+0x6a>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	bf14      	ite	ne
 8001ed0:	2301      	movne	r3, #1
 8001ed2:	2300      	moveq	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e07c      	b.n	8001fd8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d104      	bne.n	8001eee <HAL_TIM_PWM_Start+0x82>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eec:	e013      	b.n	8001f16 <HAL_TIM_PWM_Start+0xaa>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d104      	bne.n	8001efe <HAL_TIM_PWM_Start+0x92>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001efc:	e00b      	b.n	8001f16 <HAL_TIM_PWM_Start+0xaa>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d104      	bne.n	8001f0e <HAL_TIM_PWM_Start+0xa2>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f0c:	e003      	b.n	8001f16 <HAL_TIM_PWM_Start+0xaa>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	6839      	ldr	r1, [r7, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 fe1a 	bl	8002b58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a2d      	ldr	r2, [pc, #180]	; (8001fe0 <HAL_TIM_PWM_Start+0x174>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d004      	beq.n	8001f38 <HAL_TIM_PWM_Start+0xcc>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a2c      	ldr	r2, [pc, #176]	; (8001fe4 <HAL_TIM_PWM_Start+0x178>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d101      	bne.n	8001f3c <HAL_TIM_PWM_Start+0xd0>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <HAL_TIM_PWM_Start+0xd2>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d007      	beq.n	8001f52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <HAL_TIM_PWM_Start+0x174>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d022      	beq.n	8001fa2 <HAL_TIM_PWM_Start+0x136>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f64:	d01d      	beq.n	8001fa2 <HAL_TIM_PWM_Start+0x136>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1f      	ldr	r2, [pc, #124]	; (8001fe8 <HAL_TIM_PWM_Start+0x17c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d018      	beq.n	8001fa2 <HAL_TIM_PWM_Start+0x136>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <HAL_TIM_PWM_Start+0x180>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <HAL_TIM_PWM_Start+0x136>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_TIM_PWM_Start+0x184>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d00e      	beq.n	8001fa2 <HAL_TIM_PWM_Start+0x136>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a16      	ldr	r2, [pc, #88]	; (8001fe4 <HAL_TIM_PWM_Start+0x178>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d009      	beq.n	8001fa2 <HAL_TIM_PWM_Start+0x136>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <HAL_TIM_PWM_Start+0x188>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d004      	beq.n	8001fa2 <HAL_TIM_PWM_Start+0x136>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <HAL_TIM_PWM_Start+0x18c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d111      	bne.n	8001fc6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b06      	cmp	r3, #6
 8001fb2:	d010      	beq.n	8001fd6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc4:	e007      	b.n	8001fd6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40010400 	.word	0x40010400
 8001fe8:	40000400 	.word	0x40000400
 8001fec:	40000800 	.word	0x40000800
 8001ff0:	40000c00 	.word	0x40000c00
 8001ff4:	40014000 	.word	0x40014000
 8001ff8:	40001800 	.word	0x40001800

08001ffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b02      	cmp	r3, #2
 8002010:	d122      	bne.n	8002058 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b02      	cmp	r3, #2
 800201e:	d11b      	bne.n	8002058 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0202 	mvn.w	r2, #2
 8002028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fa81 	bl	8002546 <HAL_TIM_IC_CaptureCallback>
 8002044:	e005      	b.n	8002052 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 fa73 	bl	8002532 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 fa84 	bl	800255a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b04      	cmp	r3, #4
 8002064:	d122      	bne.n	80020ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b04      	cmp	r3, #4
 8002072:	d11b      	bne.n	80020ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0204 	mvn.w	r2, #4
 800207c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2202      	movs	r2, #2
 8002082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 fa57 	bl	8002546 <HAL_TIM_IC_CaptureCallback>
 8002098:	e005      	b.n	80020a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa49 	bl	8002532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fa5a 	bl	800255a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d122      	bne.n	8002100 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d11b      	bne.n	8002100 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0208 	mvn.w	r2, #8
 80020d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2204      	movs	r2, #4
 80020d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fa2d 	bl	8002546 <HAL_TIM_IC_CaptureCallback>
 80020ec:	e005      	b.n	80020fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fa1f 	bl	8002532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fa30 	bl	800255a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b10      	cmp	r3, #16
 800210c:	d122      	bne.n	8002154 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b10      	cmp	r3, #16
 800211a:	d11b      	bne.n	8002154 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0210 	mvn.w	r2, #16
 8002124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2208      	movs	r2, #8
 800212a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fa03 	bl	8002546 <HAL_TIM_IC_CaptureCallback>
 8002140:	e005      	b.n	800214e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f9f5 	bl	8002532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 fa06 	bl	800255a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b01      	cmp	r3, #1
 8002160:	d10e      	bne.n	8002180 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b01      	cmp	r3, #1
 800216e:	d107      	bne.n	8002180 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0201 	mvn.w	r2, #1
 8002178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f9cf 	bl	800251e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218a:	2b80      	cmp	r3, #128	; 0x80
 800218c:	d10e      	bne.n	80021ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002198:	2b80      	cmp	r3, #128	; 0x80
 800219a:	d107      	bne.n	80021ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fd82 	bl	8002cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b6:	2b40      	cmp	r3, #64	; 0x40
 80021b8:	d10e      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c4:	2b40      	cmp	r3, #64	; 0x40
 80021c6:	d107      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f9cb 	bl	800256e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	2b20      	cmp	r3, #32
 80021e4:	d10e      	bne.n	8002204 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f003 0320 	and.w	r3, r3, #32
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d107      	bne.n	8002204 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0220 	mvn.w	r2, #32
 80021fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fd4c 	bl	8002c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002226:	2302      	movs	r3, #2
 8002228:	e0ae      	b.n	8002388 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b0c      	cmp	r3, #12
 8002236:	f200 809f 	bhi.w	8002378 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800223a:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002240:	08002275 	.word	0x08002275
 8002244:	08002379 	.word	0x08002379
 8002248:	08002379 	.word	0x08002379
 800224c:	08002379 	.word	0x08002379
 8002250:	080022b5 	.word	0x080022b5
 8002254:	08002379 	.word	0x08002379
 8002258:	08002379 	.word	0x08002379
 800225c:	08002379 	.word	0x08002379
 8002260:	080022f7 	.word	0x080022f7
 8002264:	08002379 	.word	0x08002379
 8002268:	08002379 	.word	0x08002379
 800226c:	08002379 	.word	0x08002379
 8002270:	08002337 	.word	0x08002337
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fa22 	bl	80026c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0208 	orr.w	r2, r2, #8
 800228e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0204 	bic.w	r2, r2, #4
 800229e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6999      	ldr	r1, [r3, #24]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	691a      	ldr	r2, [r3, #16]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	619a      	str	r2, [r3, #24]
      break;
 80022b2:	e064      	b.n	800237e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fa72 	bl	80027a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6999      	ldr	r1, [r3, #24]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	021a      	lsls	r2, r3, #8
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	619a      	str	r2, [r3, #24]
      break;
 80022f4:	e043      	b.n	800237e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fac7 	bl	8002890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69da      	ldr	r2, [r3, #28]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0208 	orr.w	r2, r2, #8
 8002310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0204 	bic.w	r2, r2, #4
 8002320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69d9      	ldr	r1, [r3, #28]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	61da      	str	r2, [r3, #28]
      break;
 8002334:	e023      	b.n	800237e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fb1b 	bl	8002978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69da      	ldr	r2, [r3, #28]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69d9      	ldr	r1, [r3, #28]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	021a      	lsls	r2, r3, #8
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	61da      	str	r2, [r3, #28]
      break;
 8002376:	e002      	b.n	800237e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	75fb      	strb	r3, [r7, #23]
      break;
 800237c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002386:	7dfb      	ldrb	r3, [r7, #23]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_TIM_ConfigClockSource+0x1c>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e0b4      	b.n	8002516 <HAL_TIM_ConfigClockSource+0x186>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e4:	d03e      	beq.n	8002464 <HAL_TIM_ConfigClockSource+0xd4>
 80023e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ea:	f200 8087 	bhi.w	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 80023ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f2:	f000 8086 	beq.w	8002502 <HAL_TIM_ConfigClockSource+0x172>
 80023f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fa:	d87f      	bhi.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 80023fc:	2b70      	cmp	r3, #112	; 0x70
 80023fe:	d01a      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0xa6>
 8002400:	2b70      	cmp	r3, #112	; 0x70
 8002402:	d87b      	bhi.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 8002404:	2b60      	cmp	r3, #96	; 0x60
 8002406:	d050      	beq.n	80024aa <HAL_TIM_ConfigClockSource+0x11a>
 8002408:	2b60      	cmp	r3, #96	; 0x60
 800240a:	d877      	bhi.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 800240c:	2b50      	cmp	r3, #80	; 0x50
 800240e:	d03c      	beq.n	800248a <HAL_TIM_ConfigClockSource+0xfa>
 8002410:	2b50      	cmp	r3, #80	; 0x50
 8002412:	d873      	bhi.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 8002414:	2b40      	cmp	r3, #64	; 0x40
 8002416:	d058      	beq.n	80024ca <HAL_TIM_ConfigClockSource+0x13a>
 8002418:	2b40      	cmp	r3, #64	; 0x40
 800241a:	d86f      	bhi.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 800241c:	2b30      	cmp	r3, #48	; 0x30
 800241e:	d064      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0x15a>
 8002420:	2b30      	cmp	r3, #48	; 0x30
 8002422:	d86b      	bhi.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 8002424:	2b20      	cmp	r3, #32
 8002426:	d060      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0x15a>
 8002428:	2b20      	cmp	r3, #32
 800242a:	d867      	bhi.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 800242c:	2b00      	cmp	r3, #0
 800242e:	d05c      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0x15a>
 8002430:	2b10      	cmp	r3, #16
 8002432:	d05a      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0x15a>
 8002434:	e062      	b.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6899      	ldr	r1, [r3, #8]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f000 fb67 	bl	8002b18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002458:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	609a      	str	r2, [r3, #8]
      break;
 8002462:	e04f      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6818      	ldr	r0, [r3, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	6899      	ldr	r1, [r3, #8]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f000 fb50 	bl	8002b18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002486:	609a      	str	r2, [r3, #8]
      break;
 8002488:	e03c      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6859      	ldr	r1, [r3, #4]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	461a      	mov	r2, r3
 8002498:	f000 fac4 	bl	8002a24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2150      	movs	r1, #80	; 0x50
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fb1d 	bl	8002ae2 <TIM_ITRx_SetConfig>
      break;
 80024a8:	e02c      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6859      	ldr	r1, [r3, #4]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	461a      	mov	r2, r3
 80024b8:	f000 fae3 	bl	8002a82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2160      	movs	r1, #96	; 0x60
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fb0d 	bl	8002ae2 <TIM_ITRx_SetConfig>
      break;
 80024c8:	e01c      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	6859      	ldr	r1, [r3, #4]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	461a      	mov	r2, r3
 80024d8:	f000 faa4 	bl	8002a24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2140      	movs	r1, #64	; 0x40
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fafd 	bl	8002ae2 <TIM_ITRx_SetConfig>
      break;
 80024e8:	e00c      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4619      	mov	r1, r3
 80024f4:	4610      	mov	r0, r2
 80024f6:	f000 faf4 	bl	8002ae2 <TIM_ITRx_SetConfig>
      break;
 80024fa:	e003      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002500:	e000      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a40      	ldr	r2, [pc, #256]	; (8002698 <TIM_Base_SetConfig+0x114>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d013      	beq.n	80025c4 <TIM_Base_SetConfig+0x40>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a2:	d00f      	beq.n	80025c4 <TIM_Base_SetConfig+0x40>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a3d      	ldr	r2, [pc, #244]	; (800269c <TIM_Base_SetConfig+0x118>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d00b      	beq.n	80025c4 <TIM_Base_SetConfig+0x40>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a3c      	ldr	r2, [pc, #240]	; (80026a0 <TIM_Base_SetConfig+0x11c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d007      	beq.n	80025c4 <TIM_Base_SetConfig+0x40>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a3b      	ldr	r2, [pc, #236]	; (80026a4 <TIM_Base_SetConfig+0x120>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d003      	beq.n	80025c4 <TIM_Base_SetConfig+0x40>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a3a      	ldr	r2, [pc, #232]	; (80026a8 <TIM_Base_SetConfig+0x124>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d108      	bne.n	80025d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a2f      	ldr	r2, [pc, #188]	; (8002698 <TIM_Base_SetConfig+0x114>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d02b      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e4:	d027      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a2c      	ldr	r2, [pc, #176]	; (800269c <TIM_Base_SetConfig+0x118>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d023      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a2b      	ldr	r2, [pc, #172]	; (80026a0 <TIM_Base_SetConfig+0x11c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d01f      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a2a      	ldr	r2, [pc, #168]	; (80026a4 <TIM_Base_SetConfig+0x120>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01b      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a29      	ldr	r2, [pc, #164]	; (80026a8 <TIM_Base_SetConfig+0x124>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d017      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a28      	ldr	r2, [pc, #160]	; (80026ac <TIM_Base_SetConfig+0x128>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a27      	ldr	r2, [pc, #156]	; (80026b0 <TIM_Base_SetConfig+0x12c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00f      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a26      	ldr	r2, [pc, #152]	; (80026b4 <TIM_Base_SetConfig+0x130>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00b      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a25      	ldr	r2, [pc, #148]	; (80026b8 <TIM_Base_SetConfig+0x134>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a24      	ldr	r2, [pc, #144]	; (80026bc <TIM_Base_SetConfig+0x138>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a23      	ldr	r2, [pc, #140]	; (80026c0 <TIM_Base_SetConfig+0x13c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <TIM_Base_SetConfig+0x114>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d003      	beq.n	800267c <TIM_Base_SetConfig+0xf8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a0c      	ldr	r2, [pc, #48]	; (80026a8 <TIM_Base_SetConfig+0x124>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d103      	bne.n	8002684 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	615a      	str	r2, [r3, #20]
}
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40010000 	.word	0x40010000
 800269c:	40000400 	.word	0x40000400
 80026a0:	40000800 	.word	0x40000800
 80026a4:	40000c00 	.word	0x40000c00
 80026a8:	40010400 	.word	0x40010400
 80026ac:	40014000 	.word	0x40014000
 80026b0:	40014400 	.word	0x40014400
 80026b4:	40014800 	.word	0x40014800
 80026b8:	40001800 	.word	0x40001800
 80026bc:	40001c00 	.word	0x40001c00
 80026c0:	40002000 	.word	0x40002000

080026c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	f023 0201 	bic.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0303 	bic.w	r3, r3, #3
 80026fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f023 0302 	bic.w	r3, r3, #2
 800270c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a20      	ldr	r2, [pc, #128]	; (800279c <TIM_OC1_SetConfig+0xd8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d003      	beq.n	8002728 <TIM_OC1_SetConfig+0x64>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <TIM_OC1_SetConfig+0xdc>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d10c      	bne.n	8002742 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f023 0308 	bic.w	r3, r3, #8
 800272e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a15      	ldr	r2, [pc, #84]	; (800279c <TIM_OC1_SetConfig+0xd8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d003      	beq.n	8002752 <TIM_OC1_SetConfig+0x8e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <TIM_OC1_SetConfig+0xdc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d111      	bne.n	8002776 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	621a      	str	r2, [r3, #32]
}
 8002790:	bf00      	nop
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40010000 	.word	0x40010000
 80027a0:	40010400 	.word	0x40010400

080027a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	f023 0210 	bic.w	r2, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f023 0320 	bic.w	r3, r3, #32
 80027ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a22      	ldr	r2, [pc, #136]	; (8002888 <TIM_OC2_SetConfig+0xe4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d003      	beq.n	800280c <TIM_OC2_SetConfig+0x68>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a21      	ldr	r2, [pc, #132]	; (800288c <TIM_OC2_SetConfig+0xe8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d10d      	bne.n	8002828 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a17      	ldr	r2, [pc, #92]	; (8002888 <TIM_OC2_SetConfig+0xe4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <TIM_OC2_SetConfig+0x94>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a16      	ldr	r2, [pc, #88]	; (800288c <TIM_OC2_SetConfig+0xe8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d113      	bne.n	8002860 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800283e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	621a      	str	r2, [r3, #32]
}
 800287a:	bf00      	nop
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40010000 	.word	0x40010000
 800288c:	40010400 	.word	0x40010400

08002890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0303 	bic.w	r3, r3, #3
 80028c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a21      	ldr	r2, [pc, #132]	; (8002970 <TIM_OC3_SetConfig+0xe0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d003      	beq.n	80028f6 <TIM_OC3_SetConfig+0x66>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a20      	ldr	r2, [pc, #128]	; (8002974 <TIM_OC3_SetConfig+0xe4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10d      	bne.n	8002912 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a16      	ldr	r2, [pc, #88]	; (8002970 <TIM_OC3_SetConfig+0xe0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d003      	beq.n	8002922 <TIM_OC3_SetConfig+0x92>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a15      	ldr	r2, [pc, #84]	; (8002974 <TIM_OC3_SetConfig+0xe4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d113      	bne.n	800294a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	621a      	str	r2, [r3, #32]
}
 8002964:	bf00      	nop
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	40010000 	.word	0x40010000
 8002974:	40010400 	.word	0x40010400

08002978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	031b      	lsls	r3, r3, #12
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <TIM_OC4_SetConfig+0xa4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d003      	beq.n	80029e0 <TIM_OC4_SetConfig+0x68>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <TIM_OC4_SetConfig+0xa8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d109      	bne.n	80029f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	019b      	lsls	r3, r3, #6
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	621a      	str	r2, [r3, #32]
}
 8002a0e:	bf00      	nop
 8002a10:	371c      	adds	r7, #28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	40010400 	.word	0x40010400

08002a24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f023 0201 	bic.w	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f023 030a 	bic.w	r3, r3, #10
 8002a60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	621a      	str	r2, [r3, #32]
}
 8002a76:	bf00      	nop
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b087      	sub	sp, #28
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	f023 0210 	bic.w	r2, r3, #16
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	031b      	lsls	r3, r3, #12
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002abe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	621a      	str	r2, [r3, #32]
}
 8002ad6:	bf00      	nop
 8002ad8:	371c      	adds	r7, #28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f043 0307 	orr.w	r3, r3, #7
 8002b04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	609a      	str	r2, [r3, #8]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	021a      	lsls	r2, r3, #8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	609a      	str	r2, [r3, #8]
}
 8002b4c:	bf00      	nop
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a1a      	ldr	r2, [r3, #32]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a1a      	ldr	r2, [r3, #32]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	431a      	orrs	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	621a      	str	r2, [r3, #32]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e05a      	b.n	8002c72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a21      	ldr	r2, [pc, #132]	; (8002c80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d022      	beq.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c08:	d01d      	beq.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1d      	ldr	r2, [pc, #116]	; (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d018      	beq.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1b      	ldr	r2, [pc, #108]	; (8002c88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00e      	beq.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a18      	ldr	r2, [pc, #96]	; (8002c90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a17      	ldr	r2, [pc, #92]	; (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d004      	beq.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a15      	ldr	r2, [pc, #84]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d10c      	bne.n	8002c60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40010000 	.word	0x40010000
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40000800 	.word	0x40000800
 8002c8c:	40000c00 	.word	0x40000c00
 8002c90:	40010400 	.word	0x40010400
 8002c94:	40014000 	.word	0x40014000
 8002c98:	40001800 	.word	0x40001800

08002c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e03f      	b.n	8002d56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fd fe4e 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2224      	movs	r2, #36	; 0x24
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f829 	bl	8002d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d64:	b09f      	sub	sp, #124	; 0x7c
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d76:	68d9      	ldr	r1, [r3, #12]
 8002d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	ea40 0301 	orr.w	r3, r0, r1
 8002d80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002da4:	f021 010c 	bic.w	r1, r1, #12
 8002da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dae:	430b      	orrs	r3, r1
 8002db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbe:	6999      	ldr	r1, [r3, #24]
 8002dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	ea40 0301 	orr.w	r3, r0, r1
 8002dc8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4bc5      	ldr	r3, [pc, #788]	; (80030e4 <UART_SetConfig+0x384>)
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d004      	beq.n	8002dde <UART_SetConfig+0x7e>
 8002dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4bc3      	ldr	r3, [pc, #780]	; (80030e8 <UART_SetConfig+0x388>)
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d103      	bne.n	8002de6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dde:	f7fe fb39 	bl	8001454 <HAL_RCC_GetPCLK2Freq>
 8002de2:	6778      	str	r0, [r7, #116]	; 0x74
 8002de4:	e002      	b.n	8002dec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002de6:	f7fe fb21 	bl	800142c <HAL_RCC_GetPCLK1Freq>
 8002dea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df4:	f040 80b6 	bne.w	8002f64 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dfa:	461c      	mov	r4, r3
 8002dfc:	f04f 0500 	mov.w	r5, #0
 8002e00:	4622      	mov	r2, r4
 8002e02:	462b      	mov	r3, r5
 8002e04:	1891      	adds	r1, r2, r2
 8002e06:	6439      	str	r1, [r7, #64]	; 0x40
 8002e08:	415b      	adcs	r3, r3
 8002e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e10:	1912      	adds	r2, r2, r4
 8002e12:	eb45 0303 	adc.w	r3, r5, r3
 8002e16:	f04f 0000 	mov.w	r0, #0
 8002e1a:	f04f 0100 	mov.w	r1, #0
 8002e1e:	00d9      	lsls	r1, r3, #3
 8002e20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e24:	00d0      	lsls	r0, r2, #3
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	1911      	adds	r1, r2, r4
 8002e2c:	6639      	str	r1, [r7, #96]	; 0x60
 8002e2e:	416b      	adcs	r3, r5
 8002e30:	667b      	str	r3, [r7, #100]	; 0x64
 8002e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	461a      	mov	r2, r3
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	1891      	adds	r1, r2, r2
 8002e3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e40:	415b      	adcs	r3, r3
 8002e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e48:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002e4c:	f7fd f9da 	bl	8000204 <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4ba5      	ldr	r3, [pc, #660]	; (80030ec <UART_SetConfig+0x38c>)
 8002e56:	fba3 2302 	umull	r2, r3, r3, r2
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	011e      	lsls	r6, r3, #4
 8002e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e60:	461c      	mov	r4, r3
 8002e62:	f04f 0500 	mov.w	r5, #0
 8002e66:	4622      	mov	r2, r4
 8002e68:	462b      	mov	r3, r5
 8002e6a:	1891      	adds	r1, r2, r2
 8002e6c:	6339      	str	r1, [r7, #48]	; 0x30
 8002e6e:	415b      	adcs	r3, r3
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
 8002e72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e76:	1912      	adds	r2, r2, r4
 8002e78:	eb45 0303 	adc.w	r3, r5, r3
 8002e7c:	f04f 0000 	mov.w	r0, #0
 8002e80:	f04f 0100 	mov.w	r1, #0
 8002e84:	00d9      	lsls	r1, r3, #3
 8002e86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e8a:	00d0      	lsls	r0, r2, #3
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	1911      	adds	r1, r2, r4
 8002e92:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e94:	416b      	adcs	r3, r5
 8002e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	1891      	adds	r1, r2, r2
 8002ea4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ea6:	415b      	adcs	r3, r3
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002eb2:	f7fd f9a7 	bl	8000204 <__aeabi_uldivmod>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4b8c      	ldr	r3, [pc, #560]	; (80030ec <UART_SetConfig+0x38c>)
 8002ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	2164      	movs	r1, #100	; 0x64
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	3332      	adds	r3, #50	; 0x32
 8002ece:	4a87      	ldr	r2, [pc, #540]	; (80030ec <UART_SetConfig+0x38c>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002edc:	441e      	add	r6, r3
 8002ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f04f 0100 	mov.w	r1, #0
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	1894      	adds	r4, r2, r2
 8002eec:	623c      	str	r4, [r7, #32]
 8002eee:	415b      	adcs	r3, r3
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ef6:	1812      	adds	r2, r2, r0
 8002ef8:	eb41 0303 	adc.w	r3, r1, r3
 8002efc:	f04f 0400 	mov.w	r4, #0
 8002f00:	f04f 0500 	mov.w	r5, #0
 8002f04:	00dd      	lsls	r5, r3, #3
 8002f06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f0a:	00d4      	lsls	r4, r2, #3
 8002f0c:	4622      	mov	r2, r4
 8002f0e:	462b      	mov	r3, r5
 8002f10:	1814      	adds	r4, r2, r0
 8002f12:	653c      	str	r4, [r7, #80]	; 0x50
 8002f14:	414b      	adcs	r3, r1
 8002f16:	657b      	str	r3, [r7, #84]	; 0x54
 8002f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	1891      	adds	r1, r2, r2
 8002f24:	61b9      	str	r1, [r7, #24]
 8002f26:	415b      	adcs	r3, r3
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f32:	f7fd f967 	bl	8000204 <__aeabi_uldivmod>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4b6c      	ldr	r3, [pc, #432]	; (80030ec <UART_SetConfig+0x38c>)
 8002f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	2164      	movs	r1, #100	; 0x64
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	3332      	adds	r3, #50	; 0x32
 8002f4e:	4a67      	ldr	r2, [pc, #412]	; (80030ec <UART_SetConfig+0x38c>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	f003 0207 	and.w	r2, r3, #7
 8002f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4432      	add	r2, r6
 8002f60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f62:	e0b9      	b.n	80030d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f66:	461c      	mov	r4, r3
 8002f68:	f04f 0500 	mov.w	r5, #0
 8002f6c:	4622      	mov	r2, r4
 8002f6e:	462b      	mov	r3, r5
 8002f70:	1891      	adds	r1, r2, r2
 8002f72:	6139      	str	r1, [r7, #16]
 8002f74:	415b      	adcs	r3, r3
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f7c:	1912      	adds	r2, r2, r4
 8002f7e:	eb45 0303 	adc.w	r3, r5, r3
 8002f82:	f04f 0000 	mov.w	r0, #0
 8002f86:	f04f 0100 	mov.w	r1, #0
 8002f8a:	00d9      	lsls	r1, r3, #3
 8002f8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f90:	00d0      	lsls	r0, r2, #3
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	eb12 0804 	adds.w	r8, r2, r4
 8002f9a:	eb43 0905 	adc.w	r9, r3, r5
 8002f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f04f 0100 	mov.w	r1, #0
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	008b      	lsls	r3, r1, #2
 8002fb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002fb6:	0082      	lsls	r2, r0, #2
 8002fb8:	4640      	mov	r0, r8
 8002fba:	4649      	mov	r1, r9
 8002fbc:	f7fd f922 	bl	8000204 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4b49      	ldr	r3, [pc, #292]	; (80030ec <UART_SetConfig+0x38c>)
 8002fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	011e      	lsls	r6, r3, #4
 8002fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f04f 0100 	mov.w	r1, #0
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	1894      	adds	r4, r2, r2
 8002fdc:	60bc      	str	r4, [r7, #8]
 8002fde:	415b      	adcs	r3, r3
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe6:	1812      	adds	r2, r2, r0
 8002fe8:	eb41 0303 	adc.w	r3, r1, r3
 8002fec:	f04f 0400 	mov.w	r4, #0
 8002ff0:	f04f 0500 	mov.w	r5, #0
 8002ff4:	00dd      	lsls	r5, r3, #3
 8002ff6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ffa:	00d4      	lsls	r4, r2, #3
 8002ffc:	4622      	mov	r2, r4
 8002ffe:	462b      	mov	r3, r5
 8003000:	1814      	adds	r4, r2, r0
 8003002:	64bc      	str	r4, [r7, #72]	; 0x48
 8003004:	414b      	adcs	r3, r1
 8003006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4618      	mov	r0, r3
 800300e:	f04f 0100 	mov.w	r1, #0
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	008b      	lsls	r3, r1, #2
 800301c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003020:	0082      	lsls	r2, r0, #2
 8003022:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003026:	f7fd f8ed 	bl	8000204 <__aeabi_uldivmod>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <UART_SetConfig+0x38c>)
 8003030:	fba3 1302 	umull	r1, r3, r3, r2
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	2164      	movs	r1, #100	; 0x64
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	3332      	adds	r3, #50	; 0x32
 8003042:	4a2a      	ldr	r2, [pc, #168]	; (80030ec <UART_SetConfig+0x38c>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800304e:	441e      	add	r6, r3
 8003050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003052:	4618      	mov	r0, r3
 8003054:	f04f 0100 	mov.w	r1, #0
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	1894      	adds	r4, r2, r2
 800305e:	603c      	str	r4, [r7, #0]
 8003060:	415b      	adcs	r3, r3
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003068:	1812      	adds	r2, r2, r0
 800306a:	eb41 0303 	adc.w	r3, r1, r3
 800306e:	f04f 0400 	mov.w	r4, #0
 8003072:	f04f 0500 	mov.w	r5, #0
 8003076:	00dd      	lsls	r5, r3, #3
 8003078:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800307c:	00d4      	lsls	r4, r2, #3
 800307e:	4622      	mov	r2, r4
 8003080:	462b      	mov	r3, r5
 8003082:	eb12 0a00 	adds.w	sl, r2, r0
 8003086:	eb43 0b01 	adc.w	fp, r3, r1
 800308a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4618      	mov	r0, r3
 8003090:	f04f 0100 	mov.w	r1, #0
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	008b      	lsls	r3, r1, #2
 800309e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030a2:	0082      	lsls	r2, r0, #2
 80030a4:	4650      	mov	r0, sl
 80030a6:	4659      	mov	r1, fp
 80030a8:	f7fd f8ac 	bl	8000204 <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <UART_SetConfig+0x38c>)
 80030b2:	fba3 1302 	umull	r1, r3, r3, r2
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2164      	movs	r1, #100	; 0x64
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	3332      	adds	r3, #50	; 0x32
 80030c4:	4a09      	ldr	r2, [pc, #36]	; (80030ec <UART_SetConfig+0x38c>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	f003 020f 	and.w	r2, r3, #15
 80030d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4432      	add	r2, r6
 80030d6:	609a      	str	r2, [r3, #8]
}
 80030d8:	bf00      	nop
 80030da:	377c      	adds	r7, #124	; 0x7c
 80030dc:	46bd      	mov	sp, r7
 80030de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030e2:	bf00      	nop
 80030e4:	40011000 	.word	0x40011000
 80030e8:	40011400 	.word	0x40011400
 80030ec:	51eb851f 	.word	0x51eb851f

080030f0 <__libc_init_array>:
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	4d0d      	ldr	r5, [pc, #52]	; (8003128 <__libc_init_array+0x38>)
 80030f4:	4c0d      	ldr	r4, [pc, #52]	; (800312c <__libc_init_array+0x3c>)
 80030f6:	1b64      	subs	r4, r4, r5
 80030f8:	10a4      	asrs	r4, r4, #2
 80030fa:	2600      	movs	r6, #0
 80030fc:	42a6      	cmp	r6, r4
 80030fe:	d109      	bne.n	8003114 <__libc_init_array+0x24>
 8003100:	4d0b      	ldr	r5, [pc, #44]	; (8003130 <__libc_init_array+0x40>)
 8003102:	4c0c      	ldr	r4, [pc, #48]	; (8003134 <__libc_init_array+0x44>)
 8003104:	f000 f820 	bl	8003148 <_init>
 8003108:	1b64      	subs	r4, r4, r5
 800310a:	10a4      	asrs	r4, r4, #2
 800310c:	2600      	movs	r6, #0
 800310e:	42a6      	cmp	r6, r4
 8003110:	d105      	bne.n	800311e <__libc_init_array+0x2e>
 8003112:	bd70      	pop	{r4, r5, r6, pc}
 8003114:	f855 3b04 	ldr.w	r3, [r5], #4
 8003118:	4798      	blx	r3
 800311a:	3601      	adds	r6, #1
 800311c:	e7ee      	b.n	80030fc <__libc_init_array+0xc>
 800311e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003122:	4798      	blx	r3
 8003124:	3601      	adds	r6, #1
 8003126:	e7f2      	b.n	800310e <__libc_init_array+0x1e>
 8003128:	08003180 	.word	0x08003180
 800312c:	08003180 	.word	0x08003180
 8003130:	08003180 	.word	0x08003180
 8003134:	08003184 	.word	0x08003184

08003138 <memset>:
 8003138:	4402      	add	r2, r0
 800313a:	4603      	mov	r3, r0
 800313c:	4293      	cmp	r3, r2
 800313e:	d100      	bne.n	8003142 <memset+0xa>
 8003140:	4770      	bx	lr
 8003142:	f803 1b01 	strb.w	r1, [r3], #1
 8003146:	e7f9      	b.n	800313c <memset+0x4>

08003148 <_init>:
 8003148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314a:	bf00      	nop
 800314c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314e:	bc08      	pop	{r3}
 8003150:	469e      	mov	lr, r3
 8003152:	4770      	bx	lr

08003154 <_fini>:
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	bf00      	nop
 8003158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315a:	bc08      	pop	{r3}
 800315c:	469e      	mov	lr, r3
 800315e:	4770      	bx	lr
