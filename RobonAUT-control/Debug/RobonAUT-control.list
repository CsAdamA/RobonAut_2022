
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  0800d6a0  0800d6a0  0001d6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd88  0800dd88  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd88  0800dd88  0001dd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd90  0800dd90  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd90  0800dd90  0001dd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd94  0800dd94  0001dd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800dd98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  20000228  0800dfc0  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  0800dfc0  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001692b  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003498  00000000  00000000  00036b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  0003a020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  0003b1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f11  00000000  00000000  0003c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fc4  00000000  00000000  00062179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0c17  00000000  00000000  0007913d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00159d54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d08  00000000  00000000  00159da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d684 	.word	0x0800d684

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	0800d684 	.word	0x0800d684

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f90:	f3bf 8f4f 	dsb	sy
}
 8000f94:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <__NVIC_SystemReset+0x24>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f9e:	4904      	ldr	r1, [pc, #16]	; (8000fb0 <__NVIC_SystemReset+0x24>)
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_SystemReset+0x28>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa6:	f3bf 8f4f 	dsb	sy
}
 8000faa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <__NVIC_SystemReset+0x20>
 8000fb0:	e000ed00 	.word	0xe000ed00
 8000fb4:	05fa0004 	.word	0x05fa0004

08000fb8 <F4_Basic_Init>:
volatile uint8_t fromPC[1];
uint8_t mode;
float v_ref; //mm/s

void F4_Basic_Init(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_scheduler,TIM_HandleTypeDef *htim_motor,TIM_HandleTypeDef *htim_servo, TIM_HandleTypeDef *htim_encoder)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08e      	sub	sp, #56	; 0x38
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	603b      	str	r3, [r7, #0]
	char buf[40];
	LED_R(0);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fcc:	483b      	ldr	r0, [pc, #236]	; (80010bc <F4_Basic_Init+0x104>)
 8000fce:	f004 fbe1 	bl	8005794 <HAL_GPIO_WritePin>
	LED_B(0);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd8:	4838      	ldr	r0, [pc, #224]	; (80010bc <F4_Basic_Init+0x104>)
 8000fda:	f004 fbdb 	bl	8005794 <HAL_GPIO_WritePin>
	LED_G(0);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4836      	ldr	r0, [pc, #216]	; (80010bc <F4_Basic_Init+0x104>)
 8000fe4:	f004 fbd6 	bl	8005794 <HAL_GPIO_WritePin>
	LED_Y(0);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fee:	4833      	ldr	r0, [pc, #204]	; (80010bc <F4_Basic_Init+0x104>)
 8000ff0:	f004 fbd0 	bl	8005794 <HAL_GPIO_WritePin>
	LED_NUCLEO(0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	4831      	ldr	r0, [pc, #196]	; (80010c0 <F4_Basic_Init+0x108>)
 8000ffa:	f004 fbcb 	bl	8005794 <HAL_GPIO_WritePin>
	sprintf(buf,"\r\nRobonAUT 2023 Bit Bangers F4\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4930      	ldr	r1, [pc, #192]	; (80010c4 <F4_Basic_Init+0x10c>)
 8001004:	4618      	mov	r0, r3
 8001006:	f008 fe77 	bl	8009cf8 <siprintf>
	HAL_UART_Transmit(huart_debugg,(uint8_t*) buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f8fe 	bl	8000210 <strlen>
 8001014:	4603      	mov	r3, r0
 8001016:	b29a      	uxth	r2, r3
 8001018:	f107 0110 	add.w	r1, r7, #16
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f007 f901 	bl	8008226 <HAL_UART_Transmit>

	//MotorEnable engedélyezése
	motorEnRemote=0;//csak akkor ha megnyomtuk a ravaszt
 8001024:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <F4_Basic_Init+0x110>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
	motorEnLineOk=1;
 800102a:	4b28      	ldr	r3, [pc, #160]	; (80010cc <F4_Basic_Init+0x114>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]

	swState[0] = swState[1] = 0;
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <F4_Basic_Init+0x118>)
 8001032:	2200      	movs	r2, #0
 8001034:	705a      	strb	r2, [r3, #1]
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <F4_Basic_Init+0x118>)
 8001038:	785a      	ldrb	r2, [r3, #1]
 800103a:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <F4_Basic_Init+0x118>)
 800103c:	701a      	strb	r2, [r3, #0]
	bFlag[0] = bFlag[1] = bFlag[2] = 0;
 800103e:	2200      	movs	r2, #0
 8001040:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <F4_Basic_Init+0x11c>)
 8001042:	4611      	mov	r1, r2
 8001044:	7099      	strb	r1, [r3, #2]
 8001046:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <F4_Basic_Init+0x11c>)
 8001048:	4611      	mov	r1, r2
 800104a:	7059      	strb	r1, [r3, #1]
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <F4_Basic_Init+0x11c>)
 800104e:	701a      	strb	r2, [r3, #0]
	fromPC[1]=150;
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <F4_Basic_Init+0x120>)
 8001052:	2296      	movs	r2, #150	; 0x96
 8001054:	705a      	strb	r2, [r3, #1]
	mode=SKILL;
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <F4_Basic_Init+0x124>)
 8001058:	2252      	movs	r2, #82	; 0x52
 800105a:	701a      	strb	r2, [r3, #0]
	v_ref = 500;
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <F4_Basic_Init+0x128>)
 800105e:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <F4_Basic_Init+0x12c>)
 8001060:	601a      	str	r2, [r3, #0]
	v=0;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <F4_Basic_Init+0x130>)
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	601a      	str	r2, [r3, #0]

	//timerek elindítása
	TIM2->CCR1=684; //servot középre
 800106a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800106e:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8001072:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR1=499; //0 kitöltési tényező a motorra
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <F4_Basic_Init+0x134>)
 8001076:	f240 12f3 	movw	r2, #499	; 0x1f3
 800107a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=499;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <F4_Basic_Init+0x134>)
 800107e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001082:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start(htim_scheduler);//heart beat timer tick start
 8001084:	68b8      	ldr	r0, [r7, #8]
 8001086:	f005 fa59 	bl	800653c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_1);//motor PWM-ek elindítása
 800108a:	2100      	movs	r1, #0
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f005 fb0d 	bl	80066ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_2);
 8001092:	2104      	movs	r1, #4
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f005 fb09 	bl	80066ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo, TIM_CHANNEL_1); //servo RC pwm elindítása
 800109a:	2100      	movs	r1, #0
 800109c:	6838      	ldr	r0, [r7, #0]
 800109e:	f005 fb05 	bl	80066ac <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(htim_encoder,TIM_CHANNEL_ALL);
 80010a2:	213c      	movs	r1, #60	; 0x3c
 80010a4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80010a6:	f005 fe73 	bl	8006d90 <HAL_TIM_Encoder_Start>

	//Ha a PC-ről küldünk vmit azt fogadjuk
	HAL_UART_Receive_IT(huart_debugg, fromPC, 1);
 80010aa:	2201      	movs	r2, #1
 80010ac:	490a      	ldr	r1, [pc, #40]	; (80010d8 <F4_Basic_Init+0x120>)
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f007 f9ed 	bl	800848e <HAL_UART_Receive_IT>
}
 80010b4:	bf00      	nop
 80010b6:	3738      	adds	r7, #56	; 0x38
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40020400 	.word	0x40020400
 80010c0:	40020000 	.word	0x40020000
 80010c4:	0800d6a0 	.word	0x0800d6a0
 80010c8:	20000678 	.word	0x20000678
 80010cc:	20000679 	.word	0x20000679
 80010d0:	20000244 	.word	0x20000244
 80010d4:	20000248 	.word	0x20000248
 80010d8:	2000024c 	.word	0x2000024c
 80010dc:	2000024d 	.word	0x2000024d
 80010e0:	20000250 	.word	0x20000250
 80010e4:	43fa0000 	.word	0x43fa0000
 80010e8:	20000278 	.word	0x20000278
 80010ec:	40000400 	.word	0x40000400

080010f0 <HDI_Read_Task>:
	}
}


void HDI_Read_Task(uint32_t tick, uint32_t period)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
	static uint32_t hdi_read_task_tick=0;

	if(hdi_read_task_tick>tick) return;
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <HDI_Read_Task+0xd8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	d35c      	bcc.n	80011be <HDI_Read_Task+0xce>
	hdi_read_task_tick = tick + period;
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	4413      	add	r3, r2
 800110a:	4a2f      	ldr	r2, [pc, #188]	; (80011c8 <HDI_Read_Task+0xd8>)
 800110c:	6013      	str	r3, [r2, #0]

	swState[0]=SW1;
 800110e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001112:	482e      	ldr	r0, [pc, #184]	; (80011cc <HDI_Read_Task+0xdc>)
 8001114:	f004 fb26 	bl	8005764 <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <HDI_Read_Task+0xe0>)
 800111e:	701a      	strb	r2, [r3, #0]
	swState[1]=SW2;
 8001120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001124:	482b      	ldr	r0, [pc, #172]	; (80011d4 <HDI_Read_Task+0xe4>)
 8001126:	f004 fb1d 	bl	8005764 <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <HDI_Read_Task+0xe0>)
 8001130:	705a      	strb	r2, [r3, #1]

	if(swState[0]) LED_G(1);
 8001132:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <HDI_Read_Task+0xe0>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d005      	beq.n	8001146 <HDI_Read_Task+0x56>
 800113a:	2200      	movs	r2, #0
 800113c:	2102      	movs	r1, #2
 800113e:	4825      	ldr	r0, [pc, #148]	; (80011d4 <HDI_Read_Task+0xe4>)
 8001140:	f004 fb28 	bl	8005794 <HAL_GPIO_WritePin>
 8001144:	e004      	b.n	8001150 <HDI_Read_Task+0x60>
	else LED_G(0);
 8001146:	2201      	movs	r2, #1
 8001148:	2102      	movs	r1, #2
 800114a:	4822      	ldr	r0, [pc, #136]	; (80011d4 <HDI_Read_Task+0xe4>)
 800114c:	f004 fb22 	bl	8005794 <HAL_GPIO_WritePin>
	/*if(swState[1]) LED_B(1);
	else LED_B(0);*/

	if(bFlag[0])
 8001150:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <HDI_Read_Task+0xe8>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d032      	beq.n	80011c0 <HDI_Read_Task+0xd0>
	{
		bFlag[0]=0;
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HDI_Read_Task+0xe8>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
		//Milyen módban voltunk eddig?
		HAL_FLASH_Unlock();
 8001160:	f003 ffb2 	bl	80050c8 <HAL_FLASH_Unlock>
		mode= *(__IO uint32_t *) FLASH_ADDRESS_SECTOR7;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HDI_Read_Task+0xec>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HDI_Read_Task+0xf0>)
 800116c:	701a      	strb	r2, [r3, #0]
		HAL_FLASH_Lock();
 800116e:	f003 ffcd 	bl	800510c <HAL_FLASH_Lock>

		//section 7 törlése, hogy újraírhassuk a módot jelző bytot
		HAL_FLASH_Unlock();
 8001172:	f003 ffa9 	bl	80050c8 <HAL_FLASH_Unlock>
		FLASH_Erase_Sector(7, FLASH_VOLTAGE_RANGE_3);
 8001176:	2102      	movs	r1, #2
 8001178:	2007      	movs	r0, #7
 800117a:	f004 f917 	bl	80053ac <FLASH_Erase_Sector>
		HAL_FLASH_Lock();
 800117e:	f003 ffc5 	bl	800510c <HAL_FLASH_Lock>
		HAL_Delay(200);
 8001182:	20c8      	movs	r0, #200	; 0xc8
 8001184:	f002 fe06 	bl	8003d94 <HAL_Delay>

		//Állítsuk át a módot
		HAL_FLASH_Unlock();
 8001188:	f003 ff9e 	bl	80050c8 <HAL_FLASH_Unlock>
		if(mode==SKILL) HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_SECTOR7, FAST);
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HDI_Read_Task+0xf0>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b52      	cmp	r3, #82	; 0x52
 8001192:	d108      	bne.n	80011a6 <HDI_Read_Task+0xb6>
 8001194:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	490f      	ldr	r1, [pc, #60]	; (80011dc <HDI_Read_Task+0xec>)
 800119e:	2000      	movs	r0, #0
 80011a0:	f003 ff3e 	bl	8005020 <HAL_FLASH_Program>
 80011a4:	e007      	b.n	80011b6 <HDI_Read_Task+0xc6>
		else HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_SECTOR7, SKILL);
 80011a6:	f04f 0252 	mov.w	r2, #82	; 0x52
 80011aa:	f04f 0300 	mov.w	r3, #0
 80011ae:	490b      	ldr	r1, [pc, #44]	; (80011dc <HDI_Read_Task+0xec>)
 80011b0:	2000      	movs	r0, #0
 80011b2:	f003 ff35 	bl	8005020 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80011b6:	f003 ffa9 	bl	800510c <HAL_FLASH_Lock>

		NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 80011ba:	f7ff fee7 	bl	8000f8c <__NVIC_SystemReset>
	if(hdi_read_task_tick>tick) return;
 80011be:	bf00      	nop
	}

}
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000254 	.word	0x20000254
 80011cc:	40020000 	.word	0x40020000
 80011d0:	20000244 	.word	0x20000244
 80011d4:	40020400 	.word	0x40020400
 80011d8:	20000248 	.word	0x20000248
 80011dc:	08060000 	.word	0x08060000
 80011e0:	2000024d 	.word	0x2000024d

080011e4 <Uart_Receive_From_PC_ISR>:

void Uart_Receive_From_PC_ISR(UART_HandleTypeDef *huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	LED_Y_TOGGLE;
 80011ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f0:	4809      	ldr	r0, [pc, #36]	; (8001218 <Uart_Receive_From_PC_ISR+0x34>)
 80011f2:	f004 fae8 	bl	80057c6 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(huart, fromPC, 1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	4908      	ldr	r1, [pc, #32]	; (800121c <Uart_Receive_From_PC_ISR+0x38>)
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f007 f947 	bl	800848e <HAL_UART_Receive_IT>
	TIM2->CCR1 = 4*fromPC[0];
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <Uart_Receive_From_PC_ISR+0x38>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	009a      	lsls	r2, r3, #2
 8001208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800120c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40020400 	.word	0x40020400
 800121c:	2000024c 	.word	0x2000024c

08001220 <Mode_Selector>:
uint8_t pirate_pos[6];
volatile uint8_t uartThunder[6];
volatile uint8_t thunderboardFlag=0;

void Mode_Selector(UART_HandleTypeDef *huart_debugg, UART_HandleTypeDef *huart_stm)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	; 0x30
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	//Milyen módban kell működni?
	uint8_t buffer[30];
	uint32_t tmp=0;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_FLASH_Unlock();
 800122e:	f003 ff4b 	bl	80050c8 <HAL_FLASH_Unlock>
	tmp= *(__IO uint32_t *) FLASH_ADDRESS_SECTOR7; //FLASH-ből kiolvassuk, hogy milyen módban vagyunk
 8001232:	4b4a      	ldr	r3, [pc, #296]	; (800135c <Mode_Selector+0x13c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_FLASH_Lock();
 8001238:	f003 ff68 	bl	800510c <HAL_FLASH_Lock>
	mode = (uint8_t)tmp;
 800123c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b47      	ldr	r3, [pc, #284]	; (8001360 <Mode_Selector+0x140>)
 8001242:	701a      	strb	r2, [r3, #0]

	if(mode==SKILL)
 8001244:	4b46      	ldr	r3, [pc, #280]	; (8001360 <Mode_Selector+0x140>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b52      	cmp	r3, #82	; 0x52
 800124a:	d135      	bne.n	80012b8 <Mode_Selector+0x98>
	{
		buffer[0] = CMD_MODE_SKILL; //szólunk a g0-nak, hogy ügyességi módban vagyunk
 800124c:	2352      	movs	r3, #82	; 0x52
 800124e:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8001250:	f107 010c 	add.w	r1, r7, #12
 8001254:	230a      	movs	r3, #10
 8001256:	2201      	movs	r2, #1
 8001258:	6838      	ldr	r0, [r7, #0]
 800125a:	f006 ffe4 	bl	8008226 <HAL_UART_Transmit>
		HAL_Delay(10);
 800125e:	200a      	movs	r0, #10
 8001260:	f002 fd98 	bl	8003d94 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);//3 szór is szólunk neki, hogy tuti megkapja a módváltásról az üzenetet
 8001264:	f107 010c 	add.w	r1, r7, #12
 8001268:	230a      	movs	r3, #10
 800126a:	2201      	movs	r2, #1
 800126c:	6838      	ldr	r0, [r7, #0]
 800126e:	f006 ffda 	bl	8008226 <HAL_UART_Transmit>
		HAL_Delay(10);
 8001272:	200a      	movs	r0, #10
 8001274:	f002 fd8e 	bl	8003d94 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8001278:	f107 010c 	add.w	r1, r7, #12
 800127c:	230a      	movs	r3, #10
 800127e:	2201      	movs	r2, #1
 8001280:	6838      	ldr	r0, [r7, #0]
 8001282:	f006 ffd0 	bl	8008226 <HAL_UART_Transmit>

		sprintf(buffer,"Skill mode!\n\r"); //Debugg uart-ra is kiküldjük, hogy milyen módban vagyunk
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4936      	ldr	r1, [pc, #216]	; (8001364 <Mode_Selector+0x144>)
 800128c:	4618      	mov	r0, r3
 800128e:	f008 fd33 	bl	8009cf8 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen(buffer), 100);
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4618      	mov	r0, r3
 8001298:	f7fe ffba 	bl	8000210 <strlen>
 800129c:	4603      	mov	r3, r0
 800129e:	b29a      	uxth	r2, r3
 80012a0:	f107 010c 	add.w	r1, r7, #12
 80012a4:	2364      	movs	r3, #100	; 0x64
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f006 ffbd 	bl	8008226 <HAL_UART_Transmit>
		LED_NUCLEO(1); //A NUCLEO zöld LED-je világít, ha ügyeségi üzemmódban vagyunk
 80012ac:	2201      	movs	r2, #1
 80012ae:	2120      	movs	r1, #32
 80012b0:	482d      	ldr	r0, [pc, #180]	; (8001368 <Mode_Selector+0x148>)
 80012b2:	f004 fa6f 	bl	8005794 <HAL_GPIO_WritePin>
		sprintf(buffer,"Flash error! Press blue button\n\r");
		HAL_UART_Transmit(huart_debugg, buffer, strlen(buffer), 100);
	}


}
 80012b6:	e04c      	b.n	8001352 <Mode_Selector+0x132>
	else if(mode==FAST)
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <Mode_Selector+0x140>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b3f      	cmp	r3, #63	; 0x3f
 80012be:	d135      	bne.n	800132c <Mode_Selector+0x10c>
		buffer[0] = CMD_MODE_FAST;
 80012c0:	233f      	movs	r3, #63	; 0x3f
 80012c2:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80012c4:	f107 010c 	add.w	r1, r7, #12
 80012c8:	230a      	movs	r3, #10
 80012ca:	2201      	movs	r2, #1
 80012cc:	6838      	ldr	r0, [r7, #0]
 80012ce:	f006 ffaa 	bl	8008226 <HAL_UART_Transmit>
		HAL_Delay(10);
 80012d2:	200a      	movs	r0, #10
 80012d4:	f002 fd5e 	bl	8003d94 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80012d8:	f107 010c 	add.w	r1, r7, #12
 80012dc:	230a      	movs	r3, #10
 80012de:	2201      	movs	r2, #1
 80012e0:	6838      	ldr	r0, [r7, #0]
 80012e2:	f006 ffa0 	bl	8008226 <HAL_UART_Transmit>
		HAL_Delay(10);
 80012e6:	200a      	movs	r0, #10
 80012e8:	f002 fd54 	bl	8003d94 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80012ec:	f107 010c 	add.w	r1, r7, #12
 80012f0:	230a      	movs	r3, #10
 80012f2:	2201      	movs	r2, #1
 80012f4:	6838      	ldr	r0, [r7, #0]
 80012f6:	f006 ff96 	bl	8008226 <HAL_UART_Transmit>
		sprintf(buffer,"Fast mode!\n\r");
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	491b      	ldr	r1, [pc, #108]	; (800136c <Mode_Selector+0x14c>)
 8001300:	4618      	mov	r0, r3
 8001302:	f008 fcf9 	bl	8009cf8 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen(buffer), 100);
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	4618      	mov	r0, r3
 800130c:	f7fe ff80 	bl	8000210 <strlen>
 8001310:	4603      	mov	r3, r0
 8001312:	b29a      	uxth	r2, r3
 8001314:	f107 010c 	add.w	r1, r7, #12
 8001318:	2364      	movs	r3, #100	; 0x64
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f006 ff83 	bl	8008226 <HAL_UART_Transmit>
		LED_NUCLEO(0);
 8001320:	2200      	movs	r2, #0
 8001322:	2120      	movs	r1, #32
 8001324:	4810      	ldr	r0, [pc, #64]	; (8001368 <Mode_Selector+0x148>)
 8001326:	f004 fa35 	bl	8005794 <HAL_GPIO_WritePin>
}
 800132a:	e012      	b.n	8001352 <Mode_Selector+0x132>
		sprintf(buffer,"Flash error! Press blue button\n\r");
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	490f      	ldr	r1, [pc, #60]	; (8001370 <Mode_Selector+0x150>)
 8001332:	4618      	mov	r0, r3
 8001334:	f008 fce0 	bl	8009cf8 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen(buffer), 100);
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	4618      	mov	r0, r3
 800133e:	f7fe ff67 	bl	8000210 <strlen>
 8001342:	4603      	mov	r3, r0
 8001344:	b29a      	uxth	r2, r3
 8001346:	f107 010c 	add.w	r1, r7, #12
 800134a:	2364      	movs	r3, #100	; 0x64
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f006 ff6a 	bl	8008226 <HAL_UART_Transmit>
}
 8001352:	bf00      	nop
 8001354:	3730      	adds	r7, #48	; 0x30
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	08060000 	.word	0x08060000
 8001360:	2000024d 	.word	0x2000024d
 8001364:	0800d6fc 	.word	0x0800d6fc
 8001368:	40020000 	.word	0x40020000
 800136c:	0800d70c 	.word	0x0800d70c
 8001370:	0800d71c 	.word	0x0800d71c
 8001374:	00000000 	.word	0x00000000

08001378 <Skill_Mode>:

//bemenet detect, kalozrobpoz; kimenet direction
float Skill_Mode(UART_HandleTypeDef *huart_debugg)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	static float x_elso=0;
	static float x_elso_prev=0;
	static float gamma;
	int i;

	x_elso=0;
 8001380:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <Skill_Mode+0x188>)
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
	for(i=0;i<rxBuf[1];i++)
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	e012      	b.n	80013b4 <Skill_Mode+0x3c>
	{
		x_elso += (float)rxBuf[i+2];
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3302      	adds	r3, #2
 8001392:	4a5c      	ldr	r2, [pc, #368]	; (8001504 <Skill_Mode+0x18c>)
 8001394:	5cd3      	ldrb	r3, [r2, r3]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800139e:	4b58      	ldr	r3, [pc, #352]	; (8001500 <Skill_Mode+0x188>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a8:	4b55      	ldr	r3, [pc, #340]	; (8001500 <Skill_Mode+0x188>)
 80013aa:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<rxBuf[1];i++)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3301      	adds	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	4b53      	ldr	r3, [pc, #332]	; (8001504 <Skill_Mode+0x18c>)
 80013b6:	785b      	ldrb	r3, [r3, #1]
 80013b8:	461a      	mov	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4293      	cmp	r3, r2
 80013be:	dbe6      	blt.n	800138e <Skill_Mode+0x16>
	}

	if(rxBuf[1]) x_elso /= rxBuf[1];
 80013c0:	4b50      	ldr	r3, [pc, #320]	; (8001504 <Skill_Mode+0x18c>)
 80013c2:	785b      	ldrb	r3, [r3, #1]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00d      	beq.n	80013e4 <Skill_Mode+0x6c>
 80013c8:	4b4d      	ldr	r3, [pc, #308]	; (8001500 <Skill_Mode+0x188>)
 80013ca:	edd3 6a00 	vldr	s13, [r3]
 80013ce:	4b4d      	ldr	r3, [pc, #308]	; (8001504 <Skill_Mode+0x18c>)
 80013d0:	785b      	ldrb	r3, [r3, #1]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013de:	4b48      	ldr	r3, [pc, #288]	; (8001500 <Skill_Mode+0x188>)
 80013e0:	edc3 7a00 	vstr	s15, [r3]

	x_elso = x_elso * 204/248.0-102;
 80013e4:	4b46      	ldr	r3, [pc, #280]	; (8001500 <Skill_Mode+0x188>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001508 <Skill_Mode+0x190>
 80013ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f2:	ee17 0a90 	vmov	r0, s15
 80013f6:	f7ff f8c7 	bl	8000588 <__aeabi_f2d>
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	4b43      	ldr	r3, [pc, #268]	; (800150c <Skill_Mode+0x194>)
 8001400:	f7ff fa44 	bl	800088c <__aeabi_ddiv>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <Skill_Mode+0x198>)
 8001412:	f7fe ff59 	bl	80002c8 <__aeabi_dsub>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	f7ff fbe3 	bl	8000be8 <__aeabi_d2f>
 8001422:	4603      	mov	r3, r0
 8001424:	4a36      	ldr	r2, [pc, #216]	; (8001500 <Skill_Mode+0x188>)
 8001426:	6013      	str	r3, [r2, #0]
	k_p =  -L/(v*v)*S1MULTS2_SLOW;
 8001428:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <Skill_Mode+0x19c>)
 800142a:	ed93 7a00 	vldr	s14, [r3]
 800142e:	4b39      	ldr	r3, [pc, #228]	; (8001514 <Skill_Mode+0x19c>)
 8001430:	edd3 7a00 	vldr	s15, [r3]
 8001434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001438:	ee17 0a90 	vmov	r0, s15
 800143c:	f7ff f8a4 	bl	8000588 <__aeabi_f2d>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	f04f 0000 	mov.w	r0, #0
 8001448:	4933      	ldr	r1, [pc, #204]	; (8001518 <Skill_Mode+0x1a0>)
 800144a:	f7ff fa1f 	bl	800088c <__aeabi_ddiv>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	a326      	add	r3, pc, #152	; (adr r3, 80014f0 <Skill_Mode+0x178>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff f8ec 	bl	8000638 <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fbbe 	bl	8000be8 <__aeabi_d2f>
 800146c:	4603      	mov	r3, r0
 800146e:	4a2b      	ldr	r2, [pc, #172]	; (800151c <Skill_Mode+0x1a4>)
 8001470:	6013      	str	r3, [r2, #0]
	gamma = -k_p * x_elso  - K_D*(x_elso-x_elso_prev);
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <Skill_Mode+0x1a4>)
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	eeb1 7a67 	vneg.f32	s14, s15
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <Skill_Mode+0x188>)
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001486:	ee17 0a90 	vmov	r0, s15
 800148a:	f7ff f87d 	bl	8000588 <__aeabi_f2d>
 800148e:	4604      	mov	r4, r0
 8001490:	460d      	mov	r5, r1
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <Skill_Mode+0x188>)
 8001494:	ed93 7a00 	vldr	s14, [r3]
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <Skill_Mode+0x1a8>)
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a2:	ee17 0a90 	vmov	r0, s15
 80014a6:	f7ff f86f 	bl	8000588 <__aeabi_f2d>
 80014aa:	a313      	add	r3, pc, #76	; (adr r3, 80014f8 <Skill_Mode+0x180>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8c2 	bl	8000638 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4620      	mov	r0, r4
 80014ba:	4629      	mov	r1, r5
 80014bc:	f7fe ff06 	bl	80002cc <__adddf3>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb8e 	bl	8000be8 <__aeabi_d2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a15      	ldr	r2, [pc, #84]	; (8001524 <Skill_Mode+0x1ac>)
 80014d0:	6013      	str	r3, [r2, #0]
	x_elso_prev = x_elso;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <Skill_Mode+0x188>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <Skill_Mode+0x1a8>)
 80014d8:	6013      	str	r3, [r2, #0]

	return gamma;
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <Skill_Mode+0x1ac>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	ee07 3a90 	vmov	s15, r3
}
 80014e2:	eeb0 0a67 	vmov.f32	s0, s15
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bdb0      	pop	{r4, r5, r7, pc}
 80014ec:	f3af 8000 	nop.w
 80014f0:	fd21ff2e 	.word	0xfd21ff2e
 80014f4:	402275f6 	.word	0x402275f6
 80014f8:	9999999a 	.word	0x9999999a
 80014fc:	3f999999 	.word	0x3f999999
 8001500:	2000025c 	.word	0x2000025c
 8001504:	20000290 	.word	0x20000290
 8001508:	434c0000 	.word	0x434c0000
 800150c:	406f0000 	.word	0x406f0000
 8001510:	40598000 	.word	0x40598000
 8001514:	20000278 	.word	0x20000278
 8001518:	c0710000 	.word	0xc0710000
 800151c:	20000000 	.word	0x20000000
 8001520:	20000260 	.word	0x20000260
 8001524:	20000264 	.word	0x20000264

08001528 <Detect_Node>:

void Detect_Node(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
	static uint8_t detect_node_state=0;
	static uint32_t dt=0;
	static uint32_t t_prev=0;

	switch(detect_node_state)
 8001532:	4b73      	ldr	r3, [pc, #460]	; (8001700 <Detect_Node+0x1d8>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b06      	cmp	r3, #6
 8001538:	f200 80dd 	bhi.w	80016f6 <Detect_Node+0x1ce>
 800153c:	a201      	add	r2, pc, #4	; (adr r2, 8001544 <Detect_Node+0x1c>)
 800153e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001542:	bf00      	nop
 8001544:	08001561 	.word	0x08001561
 8001548:	08001597 	.word	0x08001597
 800154c:	08001601 	.word	0x08001601
 8001550:	0800163d 	.word	0x0800163d
 8001554:	08001675 	.word	0x08001675
 8001558:	080016b1 	.word	0x080016b1
 800155c:	080016d3 	.word	0x080016d3
	{
	case STEADY: //többször futó állapot
		if(rxBuf[1]==4) dt = t-t_prev;//mennyi ideje van alattunk 4 vonal
 8001560:	4b68      	ldr	r3, [pc, #416]	; (8001704 <Detect_Node+0x1dc>)
 8001562:	785b      	ldrb	r3, [r3, #1]
 8001564:	2b04      	cmp	r3, #4
 8001566:	d106      	bne.n	8001576 <Detect_Node+0x4e>
 8001568:	4b67      	ldr	r3, [pc, #412]	; (8001708 <Detect_Node+0x1e0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	4a66      	ldr	r2, [pc, #408]	; (800170c <Detect_Node+0x1e4>)
 8001572:	6013      	str	r3, [r2, #0]
		else
		{
			t_prev=t;
			if(dt > TH_MIN(70))detect_node_state=QUAD_LINE_DETECTED;
		}
		break;
 8001574:	e0be      	b.n	80016f4 <Detect_Node+0x1cc>
			t_prev=t;
 8001576:	4a64      	ldr	r2, [pc, #400]	; (8001708 <Detect_Node+0x1e0>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	6013      	str	r3, [r2, #0]
			if(dt > TH_MIN(70))detect_node_state=QUAD_LINE_DETECTED;
 800157c:	2046      	movs	r0, #70	; 0x46
 800157e:	f000 f8c9 	bl	8001714 <TH_MIN>
 8001582:	4602      	mov	r2, r0
 8001584:	4b61      	ldr	r3, [pc, #388]	; (800170c <Detect_Node+0x1e4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	f080 80b3 	bcs.w	80016f4 <Detect_Node+0x1cc>
 800158e:	4b5c      	ldr	r3, [pc, #368]	; (8001700 <Detect_Node+0x1d8>)
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
		break;
 8001594:	e0ae      	b.n	80016f4 <Detect_Node+0x1cc>

	case QUAD_LINE_DETECTED: //egyszer futó állapot
		if(dt > TH_MIN(70) && dt < TH_MAX(70) && rxBuf[1]==2) detect_node_state=MAYBE_HORIZONTAL_NODE_1;
 8001596:	2046      	movs	r0, #70	; 0x46
 8001598:	f000 f8bc 	bl	8001714 <TH_MIN>
 800159c:	4602      	mov	r2, r0
 800159e:	4b5b      	ldr	r3, [pc, #364]	; (800170c <Detect_Node+0x1e4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d20f      	bcs.n	80015c6 <Detect_Node+0x9e>
 80015a6:	2046      	movs	r0, #70	; 0x46
 80015a8:	f000 f8ce 	bl	8001748 <TH_MAX>
 80015ac:	4602      	mov	r2, r0
 80015ae:	4b57      	ldr	r3, [pc, #348]	; (800170c <Detect_Node+0x1e4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d907      	bls.n	80015c6 <Detect_Node+0x9e>
 80015b6:	4b53      	ldr	r3, [pc, #332]	; (8001704 <Detect_Node+0x1dc>)
 80015b8:	785b      	ldrb	r3, [r3, #1]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d103      	bne.n	80015c6 <Detect_Node+0x9e>
 80015be:	4b50      	ldr	r3, [pc, #320]	; (8001700 <Detect_Node+0x1d8>)
 80015c0:	2202      	movs	r2, #2
 80015c2:	701a      	strb	r2, [r3, #0]
 80015c4:	e01b      	b.n	80015fe <Detect_Node+0xd6>
		else if(dt > TH_MIN(200) && dt < TH_MAX(200) && rxBuf[1]==1) detect_node_state=VERTICAL_NODE_DETECTED;
 80015c6:	20c8      	movs	r0, #200	; 0xc8
 80015c8:	f000 f8a4 	bl	8001714 <TH_MIN>
 80015cc:	4602      	mov	r2, r0
 80015ce:	4b4f      	ldr	r3, [pc, #316]	; (800170c <Detect_Node+0x1e4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d20f      	bcs.n	80015f6 <Detect_Node+0xce>
 80015d6:	20c8      	movs	r0, #200	; 0xc8
 80015d8:	f000 f8b6 	bl	8001748 <TH_MAX>
 80015dc:	4602      	mov	r2, r0
 80015de:	4b4b      	ldr	r3, [pc, #300]	; (800170c <Detect_Node+0x1e4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d907      	bls.n	80015f6 <Detect_Node+0xce>
 80015e6:	4b47      	ldr	r3, [pc, #284]	; (8001704 <Detect_Node+0x1dc>)
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d103      	bne.n	80015f6 <Detect_Node+0xce>
 80015ee:	4b44      	ldr	r3, [pc, #272]	; (8001700 <Detect_Node+0x1d8>)
 80015f0:	2206      	movs	r2, #6
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	e003      	b.n	80015fe <Detect_Node+0xd6>
		else detect_node_state=STEADY;
 80015f6:	4b42      	ldr	r3, [pc, #264]	; (8001700 <Detect_Node+0x1d8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
		break;
 80015fc:	e07b      	b.n	80016f6 <Detect_Node+0x1ce>
 80015fe:	e07a      	b.n	80016f6 <Detect_Node+0x1ce>

	case MAYBE_HORIZONTAL_NODE_1: //többször futó állapot
		if(rxBuf[1]==2) dt = t - t_prev;//mennyi ideje van alattunk 4 vonal
 8001600:	4b40      	ldr	r3, [pc, #256]	; (8001704 <Detect_Node+0x1dc>)
 8001602:	785b      	ldrb	r3, [r3, #1]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d106      	bne.n	8001616 <Detect_Node+0xee>
 8001608:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <Detect_Node+0x1e0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	4a3e      	ldr	r2, [pc, #248]	; (800170c <Detect_Node+0x1e4>)
 8001612:	6013      	str	r3, [r2, #0]
		{
			t_prev=t;
			if(dt > TH_MIN(60))detect_node_state=MAYBE_HORIZONTAL_NODE_2;
			else detect_node_state=STEADY;
		}
		break;
 8001614:	e06f      	b.n	80016f6 <Detect_Node+0x1ce>
			t_prev=t;
 8001616:	4a3c      	ldr	r2, [pc, #240]	; (8001708 <Detect_Node+0x1e0>)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	6013      	str	r3, [r2, #0]
			if(dt > TH_MIN(60))detect_node_state=MAYBE_HORIZONTAL_NODE_2;
 800161c:	203c      	movs	r0, #60	; 0x3c
 800161e:	f000 f879 	bl	8001714 <TH_MIN>
 8001622:	4602      	mov	r2, r0
 8001624:	4b39      	ldr	r3, [pc, #228]	; (800170c <Detect_Node+0x1e4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d203      	bcs.n	8001634 <Detect_Node+0x10c>
 800162c:	4b34      	ldr	r3, [pc, #208]	; (8001700 <Detect_Node+0x1d8>)
 800162e:	2203      	movs	r2, #3
 8001630:	701a      	strb	r2, [r3, #0]
		break;
 8001632:	e060      	b.n	80016f6 <Detect_Node+0x1ce>
			else detect_node_state=STEADY;
 8001634:	4b32      	ldr	r3, [pc, #200]	; (8001700 <Detect_Node+0x1d8>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
		break;
 800163a:	e05c      	b.n	80016f6 <Detect_Node+0x1ce>

	case MAYBE_HORIZONTAL_NODE_2: //egyszer futó állapot
		if(dt > TH_MIN(60) && dt < TH_MAX(60) && rxBuf[1]==4) detect_node_state=MAYBE_HORIZONTAL_NODE_3;
 800163c:	203c      	movs	r0, #60	; 0x3c
 800163e:	f000 f869 	bl	8001714 <TH_MIN>
 8001642:	4602      	mov	r2, r0
 8001644:	4b31      	ldr	r3, [pc, #196]	; (800170c <Detect_Node+0x1e4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d20f      	bcs.n	800166c <Detect_Node+0x144>
 800164c:	203c      	movs	r0, #60	; 0x3c
 800164e:	f000 f87b 	bl	8001748 <TH_MAX>
 8001652:	4602      	mov	r2, r0
 8001654:	4b2d      	ldr	r3, [pc, #180]	; (800170c <Detect_Node+0x1e4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d907      	bls.n	800166c <Detect_Node+0x144>
 800165c:	4b29      	ldr	r3, [pc, #164]	; (8001704 <Detect_Node+0x1dc>)
 800165e:	785b      	ldrb	r3, [r3, #1]
 8001660:	2b04      	cmp	r3, #4
 8001662:	d103      	bne.n	800166c <Detect_Node+0x144>
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <Detect_Node+0x1d8>)
 8001666:	2204      	movs	r2, #4
 8001668:	701a      	strb	r2, [r3, #0]
		else detect_node_state=STEADY;
		break;
 800166a:	e044      	b.n	80016f6 <Detect_Node+0x1ce>
		else detect_node_state=STEADY;
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <Detect_Node+0x1d8>)
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
		break;
 8001672:	e040      	b.n	80016f6 <Detect_Node+0x1ce>

	case MAYBE_HORIZONTAL_NODE_3:
		if(rxBuf[1]==4) dt = t - t_prev;//mennyi ideje van alattunk 4 vonal
 8001674:	4b23      	ldr	r3, [pc, #140]	; (8001704 <Detect_Node+0x1dc>)
 8001676:	785b      	ldrb	r3, [r3, #1]
 8001678:	2b04      	cmp	r3, #4
 800167a:	d106      	bne.n	800168a <Detect_Node+0x162>
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <Detect_Node+0x1e0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	4a21      	ldr	r2, [pc, #132]	; (800170c <Detect_Node+0x1e4>)
 8001686:	6013      	str	r3, [r2, #0]
		{
			t_prev=t;
			if(dt > TH_MIN(70))detect_node_state=HORIZONTAL_NODE_DETECTED;
			else detect_node_state=STEADY;
		}
		break;
 8001688:	e035      	b.n	80016f6 <Detect_Node+0x1ce>
			t_prev=t;
 800168a:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <Detect_Node+0x1e0>)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6013      	str	r3, [r2, #0]
			if(dt > TH_MIN(70))detect_node_state=HORIZONTAL_NODE_DETECTED;
 8001690:	2046      	movs	r0, #70	; 0x46
 8001692:	f000 f83f 	bl	8001714 <TH_MIN>
 8001696:	4602      	mov	r2, r0
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <Detect_Node+0x1e4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d203      	bcs.n	80016a8 <Detect_Node+0x180>
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <Detect_Node+0x1d8>)
 80016a2:	2205      	movs	r2, #5
 80016a4:	701a      	strb	r2, [r3, #0]
		break;
 80016a6:	e026      	b.n	80016f6 <Detect_Node+0x1ce>
			else detect_node_state=STEADY;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <Detect_Node+0x1d8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
		break;
 80016ae:	e022      	b.n	80016f6 <Detect_Node+0x1ce>

	case HORIZONTAL_NODE_DETECTED: //egyszer futó állapot
		if(rxBuf[1]==1) LED_B(1); //vízintes csomópont
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <Detect_Node+0x1dc>)
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d105      	bne.n	80016c4 <Detect_Node+0x19c>
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016be:	4814      	ldr	r0, [pc, #80]	; (8001710 <Detect_Node+0x1e8>)
 80016c0:	f004 f868 	bl	8005794 <HAL_GPIO_WritePin>
		detect_node_state=STEADY;
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <Detect_Node+0x1d8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
		t_prev=t;
 80016ca:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <Detect_Node+0x1e0>)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	6013      	str	r3, [r2, #0]
		break;
 80016d0:	e011      	b.n	80016f6 <Detect_Node+0x1ce>

	case VERTICAL_NODE_DETECTED: //egyszer futó állapot
		if(rxBuf[1]==1) LED_B(1); //függőleges csomópont
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <Detect_Node+0x1dc>)
 80016d4:	785b      	ldrb	r3, [r3, #1]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d105      	bne.n	80016e6 <Detect_Node+0x1be>
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <Detect_Node+0x1e8>)
 80016e2:	f004 f857 	bl	8005794 <HAL_GPIO_WritePin>
		detect_node_state=STEADY;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <Detect_Node+0x1d8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
		t_prev=t;
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <Detect_Node+0x1e0>)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	6013      	str	r3, [r2, #0]
		break;
 80016f2:	e000      	b.n	80016f6 <Detect_Node+0x1ce>
		break;
 80016f4:	bf00      	nop

	}
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000268 	.word	0x20000268
 8001704:	20000290 	.word	0x20000290
 8001708:	2000026c 	.word	0x2000026c
 800170c:	20000270 	.word	0x20000270
 8001710:	40020400 	.word	0x40020400

08001714 <TH_MIN>:

uint32_t TH_MIN(uint32_t mm)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	return mm*900/(int32_t)v; //1000 nek kéne lenni a névleges időtartamhoz
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	4a07      	ldr	r2, [pc, #28]	; (8001744 <TH_MIN+0x30>)
 8001728:	edd2 7a00 	vldr	s15, [r2]
 800172c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001730:	ee17 2a90 	vmov	r2, s15
 8001734:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	20000278 	.word	0x20000278

08001748 <TH_MAX>:

uint32_t TH_MAX(uint32_t mm)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	return mm*2000/(int32_t)v;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	4a07      	ldr	r2, [pc, #28]	; (8001778 <TH_MAX+0x30>)
 800175c:	edd2 7a00 	vldr	s15, [r2]
 8001760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001764:	ee17 2a90 	vmov	r2, s15
 8001768:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	20000278 	.word	0x20000278

0800177c <Monitoring_Task>:

void Monitoring_Task(UART_HandleTypeDef *huart_monitoring, int16_t sebesseg, uint8_t vonalszam, int32_t CCR, uint16_t tavolsag, uint32_t tick, uint32_t period)//csekkolni kell majd a typeokat!!!
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	817b      	strh	r3, [r7, #10]
 800178a:	4613      	mov	r3, r2
 800178c:	727b      	strb	r3, [r7, #9]
	uint8_t data[11];
	uint8_t lower_data;
	uint8_t upper_data;

	//header
	data[0]=255;
 800178e:	23ff      	movs	r3, #255	; 0xff
 8001790:	743b      	strb	r3, [r7, #16]
	data[1]=255;
 8001792:	23ff      	movs	r3, #255	; 0xff
 8001794:	747b      	strb	r3, [r7, #17]
	data[2]=255;
 8001796:	23ff      	movs	r3, #255	; 0xff
 8001798:	74bb      	strb	r3, [r7, #18]

	if(monitoring_tick>tick) return;
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <Monitoring_Task+0xa4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d339      	bcc.n	8001818 <Monitoring_Task+0x9c>
	monitoring_tick = tick + period;
 80017a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a8:	4413      	add	r3, r2
 80017aa:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <Monitoring_Task+0xa4>)
 80017ac:	6013      	str	r3, [r2, #0]


	sebesseg=sebesseg+10000;
 80017ae:	897b      	ldrh	r3, [r7, #10]
 80017b0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80017b4:	3310      	adds	r3, #16
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	817b      	strh	r3, [r7, #10]
	lower_data= (uint8_t)sebesseg;
 80017ba:	897b      	ldrh	r3, [r7, #10]
 80017bc:	77fb      	strb	r3, [r7, #31]
	upper_data= (uint8_t)(sebesseg>>8);
 80017be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017c2:	121b      	asrs	r3, r3, #8
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	77bb      	strb	r3, [r7, #30]

	data[3]=upper_data;
 80017c8:	7fbb      	ldrb	r3, [r7, #30]
 80017ca:	74fb      	strb	r3, [r7, #19]
	data[4]=lower_data;
 80017cc:	7ffb      	ldrb	r3, [r7, #31]
 80017ce:	753b      	strb	r3, [r7, #20]

	lower_data= (uint8_t)vonalszam;
 80017d0:	7a7b      	ldrb	r3, [r7, #9]
 80017d2:	77fb      	strb	r3, [r7, #31]
	upper_data= (uint8_t)(vonalszam>>8);
 80017d4:	7a7b      	ldrb	r3, [r7, #9]
 80017d6:	121b      	asrs	r3, r3, #8
 80017d8:	77bb      	strb	r3, [r7, #30]

	data[5]=upper_data;
 80017da:	7fbb      	ldrb	r3, [r7, #30]
 80017dc:	757b      	strb	r3, [r7, #21]
	data[6]=lower_data;
 80017de:	7ffb      	ldrb	r3, [r7, #31]
 80017e0:	75bb      	strb	r3, [r7, #22]

	lower_data= (uint8_t)CCR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	77fb      	strb	r3, [r7, #31]
	upper_data= (uint8_t)(CCR>>8);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	121b      	asrs	r3, r3, #8
 80017ea:	77bb      	strb	r3, [r7, #30]

	data[7]=upper_data;
 80017ec:	7fbb      	ldrb	r3, [r7, #30]
 80017ee:	75fb      	strb	r3, [r7, #23]
	data[8]=lower_data;
 80017f0:	7ffb      	ldrb	r3, [r7, #31]
 80017f2:	763b      	strb	r3, [r7, #24]

	lower_data= (uint8_t)tavolsag;
 80017f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017f6:	77fb      	strb	r3, [r7, #31]
	upper_data= (uint8_t)(tavolsag>>8);
 80017f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	77bb      	strb	r3, [r7, #30]

	data[9]=upper_data;
 8001800:	7fbb      	ldrb	r3, [r7, #30]
 8001802:	767b      	strb	r3, [r7, #25]
	data[10]=lower_data;
 8001804:	7ffb      	ldrb	r3, [r7, #31]
 8001806:	76bb      	strb	r3, [r7, #26]


	HAL_UART_Transmit(huart_monitoring, data, 11, 4);
 8001808:	f107 0110 	add.w	r1, r7, #16
 800180c:	2304      	movs	r3, #4
 800180e:	220b      	movs	r2, #11
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f006 fd08 	bl	8008226 <HAL_UART_Transmit>
 8001816:	e000      	b.n	800181a <Monitoring_Task+0x9e>
	if(monitoring_tick>tick) return;
 8001818:	bf00      	nop
}
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000274 	.word	0x20000274

08001824 <Uart_Receive_Thunderboard_ISR>:
		}
	}
}

void Uart_Receive_Thunderboard_ISR(UART_HandleTypeDef *huart)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	//LED_Y(1);	//Togglezzunk egy LED1-et
	thunderboardFlag=1;											//Globalis valtozo flag-et tegyuk 1-be, majd ha fogadtuk th.c-ben a uart-ot, vissza 0-ba
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <Uart_Receive_Thunderboard_ISR+0x1c>)
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
													//es inditsuk ujra a varakozast: HAL_UART_Receive_IT(huart, fromPC, 1)
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000258 	.word	0x20000258
 8001844:	00000000 	.word	0x00000000

08001848 <Battery_Voltage_Compensate>:
float v=0;
//ha 1000 akkor a motor full csutkán megy előre
//ha -1000 akkor a motor full csutkán megy hátra

void Battery_Voltage_Compensate(ADC_HandleTypeDef *hadc_UNiMh,ADC_HandleTypeDef *hadc_ULiPo,UART_HandleTypeDef *huart_debugg)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b090      	sub	sp, #64	; 0x40
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
	char msg[30];
	uint16_t raw=0;
 8001854:	2300      	movs	r3, #0
 8001856:	87fb      	strh	r3, [r7, #62]	; 0x3e
	float bat;
	int i;

	//NiMh akku mérése
	for(i=0;i<20;i++)
 8001858:	2300      	movs	r3, #0
 800185a:	63bb      	str	r3, [r7, #56]	; 0x38
 800185c:	e014      	b.n	8001888 <Battery_Voltage_Compensate+0x40>
	{
		HAL_ADC_Start(hadc_UNiMh);
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f002 fb00 	bl	8003e64 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc_UNiMh,20);
 8001864:	2114      	movs	r1, #20
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f002 fbce 	bl	8004008 <HAL_ADC_PollForConversion>
		raw += HAL_ADC_GetValue(hadc_UNiMh);
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f002 fc56 	bl	800411e <HAL_ADC_GetValue>
 8001872:	4603      	mov	r3, r0
 8001874:	b29a      	uxth	r2, r3
 8001876:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001878:	4413      	add	r3, r2
 800187a:	87fb      	strh	r3, [r7, #62]	; 0x3e
		HAL_Delay(2);
 800187c:	2002      	movs	r0, #2
 800187e:	f002 fa89 	bl	8003d94 <HAL_Delay>
	for(i=0;i<20;i++)
 8001882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001884:	3301      	adds	r3, #1
 8001886:	63bb      	str	r3, [r7, #56]	; 0x38
 8001888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800188a:	2b13      	cmp	r3, #19
 800188c:	dde7      	ble.n	800185e <Battery_Voltage_Compensate+0x16>
	}
	bat=(float)raw * 0.00460575 / 20.0;//ez a mi feszültségünk V-ban
 800188e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001890:	ee07 3a90 	vmov	s15, r3
 8001894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001898:	ee17 0a90 	vmov	r0, s15
 800189c:	f7fe fe74 	bl	8000588 <__aeabi_f2d>
 80018a0:	a36f      	add	r3, pc, #444	; (adr r3, 8001a60 <Battery_Voltage_Compensate+0x218>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fec7 	bl	8000638 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4b64      	ldr	r3, [pc, #400]	; (8001a48 <Battery_Voltage_Compensate+0x200>)
 80018b8:	f7fe ffe8 	bl	800088c <__aeabi_ddiv>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff f990 	bl	8000be8 <__aeabi_d2f>
 80018c8:	4603      	mov	r3, r0
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"NiMh charge: %2.2f V \r\n", bat);
 80018cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018ce:	f7fe fe5b 	bl	8000588 <__aeabi_f2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	f107 0014 	add.w	r0, r7, #20
 80018da:	495c      	ldr	r1, [pc, #368]	; (8001a4c <Battery_Voltage_Compensate+0x204>)
 80018dc:	f008 fa0c 	bl	8009cf8 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*) msg, strlen(msg),10);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fc93 	bl	8000210 <strlen>
 80018ea:	4603      	mov	r3, r0
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	f107 0114 	add.w	r1, r7, #20
 80018f2:	230a      	movs	r3, #10
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f006 fc96 	bl	8008226 <HAL_UART_Transmit>

	if(bat)compensation=7.75/bat;
 80018fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001906:	d009      	beq.n	800191c <Battery_Voltage_Compensate+0xd4>
 8001908:	eef1 6a0f 	vmov.f32	s13, #31	; 0x40f80000  7.750
 800190c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001914:	4b4e      	ldr	r3, [pc, #312]	; (8001a50 <Battery_Voltage_Compensate+0x208>)
 8001916:	edc3 7a00 	vstr	s15, [r3]
 800191a:	e003      	b.n	8001924 <Battery_Voltage_Compensate+0xdc>
	else compensation=1;
 800191c:	4b4c      	ldr	r3, [pc, #304]	; (8001a50 <Battery_Voltage_Compensate+0x208>)
 800191e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001922:	601a      	str	r2, [r3, #0]

	if(bat < 7.2)
 8001924:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001926:	f7fe fe2f 	bl	8000588 <__aeabi_f2d>
 800192a:	a341      	add	r3, pc, #260	; (adr r3, 8001a30 <Battery_Voltage_Compensate+0x1e8>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f7ff f8f4 	bl	8000b1c <__aeabi_dcmplt>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d010      	beq.n	800195c <Battery_Voltage_Compensate+0x114>
	{
		for(i=0;i<10;i++)
 800193a:	2300      	movs	r3, #0
 800193c:	63bb      	str	r3, [r7, #56]	; 0x38
 800193e:	e00a      	b.n	8001956 <Battery_Voltage_Compensate+0x10e>
		{
			LED_Y_TOGGLE;
 8001940:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001944:	4843      	ldr	r0, [pc, #268]	; (8001a54 <Battery_Voltage_Compensate+0x20c>)
 8001946:	f003 ff3e 	bl	80057c6 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 800194a:	20c8      	movs	r0, #200	; 0xc8
 800194c:	f002 fa22 	bl	8003d94 <HAL_Delay>
		for(i=0;i<10;i++)
 8001950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001952:	3301      	adds	r3, #1
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
 8001956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001958:	2b09      	cmp	r3, #9
 800195a:	ddf1      	ble.n	8001940 <Battery_Voltage_Compensate+0xf8>
		}
	}

	//LiPo akku mérése
	raw=0;
 800195c:	2300      	movs	r3, #0
 800195e:	87fb      	strh	r3, [r7, #62]	; 0x3e
	for(i=0;i<20;i++)
 8001960:	2300      	movs	r3, #0
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
 8001964:	e014      	b.n	8001990 <Battery_Voltage_Compensate+0x148>
	{
		HAL_ADC_Start(hadc_ULiPo);
 8001966:	68b8      	ldr	r0, [r7, #8]
 8001968:	f002 fa7c 	bl	8003e64 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc_ULiPo,20);
 800196c:	2114      	movs	r1, #20
 800196e:	68b8      	ldr	r0, [r7, #8]
 8001970:	f002 fb4a 	bl	8004008 <HAL_ADC_PollForConversion>
		raw += HAL_ADC_GetValue(hadc_ULiPo);
 8001974:	68b8      	ldr	r0, [r7, #8]
 8001976:	f002 fbd2 	bl	800411e <HAL_ADC_GetValue>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001980:	4413      	add	r3, r2
 8001982:	87fb      	strh	r3, [r7, #62]	; 0x3e
		HAL_Delay(2);
 8001984:	2002      	movs	r0, #2
 8001986:	f002 fa05 	bl	8003d94 <HAL_Delay>
	for(i=0;i<20;i++)
 800198a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800198c:	3301      	adds	r3, #1
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001992:	2b13      	cmp	r3, #19
 8001994:	dde7      	ble.n	8001966 <Battery_Voltage_Compensate+0x11e>
	}
	bat = (float)raw * 0.017963374 / 20.0 + 0.02;//ez a mi feszültségünk V-ban
 8001996:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019a0:	ee17 0a90 	vmov	r0, s15
 80019a4:	f7fe fdf0 	bl	8000588 <__aeabi_f2d>
 80019a8:	a323      	add	r3, pc, #140	; (adr r3, 8001a38 <Battery_Voltage_Compensate+0x1f0>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	f7fe fe43 	bl	8000638 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <Battery_Voltage_Compensate+0x200>)
 80019c0:	f7fe ff64 	bl	800088c <__aeabi_ddiv>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	a31c      	add	r3, pc, #112	; (adr r3, 8001a40 <Battery_Voltage_Compensate+0x1f8>)
 80019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d2:	f7fe fc7b 	bl	80002cc <__adddf3>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f7ff f903 	bl	8000be8 <__aeabi_d2f>
 80019e2:	4603      	mov	r3, r0
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"LiPo charge: %d V \r\n", raw/20);
 80019e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019e8:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <Battery_Voltage_Compensate+0x210>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4918      	ldr	r1, [pc, #96]	; (8001a5c <Battery_Voltage_Compensate+0x214>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f008 f97c 	bl	8009cf8 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)msg, strlen(msg),10);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fc03 	bl	8000210 <strlen>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	f107 0114 	add.w	r1, r7, #20
 8001a12:	230a      	movs	r3, #10
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f006 fc06 	bl	8008226 <HAL_UART_Transmit>
	LED_Y(0);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <Battery_Voltage_Compensate+0x20c>)
 8001a22:	f003 feb7 	bl	8005794 <HAL_GPIO_WritePin>
			HAL_Delay(200);
		}
	}
	*/

}
 8001a26:	bf00      	nop
 8001a28:	3740      	adds	r7, #64	; 0x40
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	cccccccd 	.word	0xcccccccd
 8001a34:	401ccccc 	.word	0x401ccccc
 8001a38:	9f6c5b37 	.word	0x9f6c5b37
 8001a3c:	3f9264fd 	.word	0x3f9264fd
 8001a40:	47ae147b 	.word	0x47ae147b
 8001a44:	3f947ae1 	.word	0x3f947ae1
 8001a48:	40340000 	.word	0x40340000
 8001a4c:	0800d740 	.word	0x0800d740
 8001a50:	20000004 	.word	0x20000004
 8001a54:	40020400 	.word	0x40020400
 8001a58:	cccccccd 	.word	0xcccccccd
 8001a5c:	0800d758 	.word	0x0800d758
 8001a60:	99fa11a9 	.word	0x99fa11a9
 8001a64:	3f72dd7a 	.word	0x3f72dd7a

08001a68 <Measure_Velocity_Task>:

void Measure_Velocity_Task(TIM_HandleTypeDef *htim_encoder,uint32_t tick, uint32_t period)
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
	static uint32_t tick_prev=0;
	static uint32_t measure_v_task_tick=4;
	static float alpha=0.2;
	float v_uj=0;
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]

	if(measure_v_task_tick>tick) return;
 8001a7a:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <Measure_Velocity_Task+0xe0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d358      	bcc.n	8001b36 <Measure_Velocity_Task+0xce>
	measure_v_task_tick= tick + period;
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	4a2f      	ldr	r2, [pc, #188]	; (8001b48 <Measure_Velocity_Task+0xe0>)
 8001a8c:	6013      	str	r3, [r2, #0]
	if(!tick_prev)
 8001a8e:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <Measure_Velocity_Task+0xe4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d103      	bne.n	8001a9e <Measure_Velocity_Task+0x36>
	{
		tick_prev=tick;
 8001a96:	4a2d      	ldr	r2, [pc, #180]	; (8001b4c <Measure_Velocity_Task+0xe4>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	6013      	str	r3, [r2, #0]
		return;
 8001a9c:	e04c      	b.n	8001b38 <Measure_Velocity_Task+0xd0>
	}
	v_uj =((float) 0x8000 - (float) __HAL_TIM_GET_COUNTER(htim_encoder))*7.49/(float)period; //mm/s dimenzió
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aac:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001b50 <Measure_Velocity_Task+0xe8>
 8001ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab4:	ee17 0a90 	vmov	r0, s15
 8001ab8:	f7fe fd66 	bl	8000588 <__aeabi_f2d>
 8001abc:	a320      	add	r3, pc, #128	; (adr r3, 8001b40 <Measure_Velocity_Task+0xd8>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fdb9 	bl	8000638 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4614      	mov	r4, r2
 8001acc:	461d      	mov	r5, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad8:	ee17 0a90 	vmov	r0, s15
 8001adc:	f7fe fd54 	bl	8000588 <__aeabi_f2d>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	f7fe fed0 	bl	800088c <__aeabi_ddiv>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f7ff f878 	bl	8000be8 <__aeabi_d2f>
 8001af8:	4603      	mov	r3, r0
 8001afa:	617b      	str	r3, [r7, #20]
	TIM8->CNT=0x8000;
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <Measure_Velocity_Task+0xec>)
 8001afe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24
	//tick_prev=tick;
	//exponenciális szűrés
	v = alpha*v_uj + (1-alpha)*v;
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <Measure_Velocity_Task+0xf0>)
 8001b06:	ed93 7a00 	vldr	s14, [r3]
 8001b0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <Measure_Velocity_Task+0xf0>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b1c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <Measure_Velocity_Task+0xf4>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <Measure_Velocity_Task+0xf4>)
 8001b30:	edc3 7a00 	vstr	s15, [r3]
 8001b34:	e000      	b.n	8001b38 <Measure_Velocity_Task+0xd0>
	if(measure_v_task_tick>tick) return;
 8001b36:	bf00      	nop
}
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	8f5c28f6 	.word	0x8f5c28f6
 8001b44:	401df5c2 	.word	0x401df5c2
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	2000027c 	.word	0x2000027c
 8001b50:	47000000 	.word	0x47000000
 8001b54:	40010400 	.word	0x40010400
 8001b58:	2000000c 	.word	0x2000000c
 8001b5c:	20000278 	.word	0x20000278

08001b60 <Motor_Drive_Task>:

void Motor_Drive_Task(TIM_HandleTypeDef *htim_motor, UART_HandleTypeDef *huart, uint32_t tick, uint32_t period) //DUTY paramtert kiszedtem -> változtassuk a globális változót
{
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
	static uint32_t motor_drive_task_tick=5;
	static float f,u=0;

	int32_t ccr1;
	int32_t ccr2;
	if(motor_drive_task_tick>tick) return;
 8001b6e:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <Motor_Drive_Task+0x230>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	f0c0 80f8 	bcc.w	8001d6a <Motor_Drive_Task+0x20a>
	motor_drive_task_tick= tick + period;
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a83      	ldr	r2, [pc, #524]	; (8001d90 <Motor_Drive_Task+0x230>)
 8001b82:	6013      	str	r3, [r2, #0]

	if(motorEnRemote && motorEnLineOk) //ha nem nyomtunk vészstopot és az akkuk is rendben vannak akkor pöröghet a motor
 8001b84:	4b83      	ldr	r3, [pc, #524]	; (8001d94 <Motor_Drive_Task+0x234>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80b4 	beq.w	8001cf6 <Motor_Drive_Task+0x196>
 8001b8e:	4b82      	ldr	r3, [pc, #520]	; (8001d98 <Motor_Drive_Task+0x238>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80af 	beq.w	8001cf6 <Motor_Drive_Task+0x196>
	{
		//az u paraméter a bevatkozó jel minusz holtásávot adja meg
		u= KC * (v_ref - v) * compensation + f;
 8001b98:	4b80      	ldr	r3, [pc, #512]	; (8001d9c <Motor_Drive_Task+0x23c>)
 8001b9a:	ed93 7a00 	vldr	s14, [r3]
 8001b9e:	4b80      	ldr	r3, [pc, #512]	; (8001da0 <Motor_Drive_Task+0x240>)
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba8:	ee17 0a90 	vmov	r0, s15
 8001bac:	f7fe fcec 	bl	8000588 <__aeabi_f2d>
 8001bb0:	a371      	add	r3, pc, #452	; (adr r3, 8001d78 <Motor_Drive_Task+0x218>)
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	f7fe fd3f 	bl	8000638 <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	461d      	mov	r5, r3
 8001bc2:	4b78      	ldr	r3, [pc, #480]	; (8001da4 <Motor_Drive_Task+0x244>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fcde 	bl	8000588 <__aeabi_f2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	f7fe fd30 	bl	8000638 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4614      	mov	r4, r2
 8001bde:	461d      	mov	r5, r3
 8001be0:	4b71      	ldr	r3, [pc, #452]	; (8001da8 <Motor_Drive_Task+0x248>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fccf 	bl	8000588 <__aeabi_f2d>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4620      	mov	r0, r4
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	f7fe fb6b 	bl	80002cc <__adddf3>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f7fe fff3 	bl	8000be8 <__aeabi_d2f>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4a69      	ldr	r2, [pc, #420]	; (8001dac <Motor_Drive_Task+0x24c>)
 8001c06:	6013      	str	r3, [r2, #0]
		if(u>880) u=880;
 8001c08:	4b68      	ldr	r3, [pc, #416]	; (8001dac <Motor_Drive_Task+0x24c>)
 8001c0a:	edd3 7a00 	vldr	s15, [r3]
 8001c0e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001db0 <Motor_Drive_Task+0x250>
 8001c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	dd03      	ble.n	8001c24 <Motor_Drive_Task+0xc4>
 8001c1c:	4b63      	ldr	r3, [pc, #396]	; (8001dac <Motor_Drive_Task+0x24c>)
 8001c1e:	4a65      	ldr	r2, [pc, #404]	; (8001db4 <Motor_Drive_Task+0x254>)
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e00c      	b.n	8001c3e <Motor_Drive_Task+0xde>
		else if(u<-200)u=-200;
 8001c24:	4b61      	ldr	r3, [pc, #388]	; (8001dac <Motor_Drive_Task+0x24c>)
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001db8 <Motor_Drive_Task+0x258>
 8001c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c36:	d502      	bpl.n	8001c3e <Motor_Drive_Task+0xde>
 8001c38:	4b5c      	ldr	r3, [pc, #368]	; (8001dac <Motor_Drive_Task+0x24c>)
 8001c3a:	4a60      	ldr	r2, [pc, #384]	; (8001dbc <Motor_Drive_Task+0x25c>)
 8001c3c:	601a      	str	r2, [r3, #0]
		f = ZD*f + (1-ZD)*u;
 8001c3e:	4b5a      	ldr	r3, [pc, #360]	; (8001da8 <Motor_Drive_Task+0x248>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fca0 	bl	8000588 <__aeabi_f2d>
 8001c48:	a34d      	add	r3, pc, #308	; (adr r3, 8001d80 <Motor_Drive_Task+0x220>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	f7fe fcf3 	bl	8000638 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	461d      	mov	r5, r3
 8001c5a:	4b54      	ldr	r3, [pc, #336]	; (8001dac <Motor_Drive_Task+0x24c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc92 	bl	8000588 <__aeabi_f2d>
 8001c64:	a348      	add	r3, pc, #288	; (adr r3, 8001d88 <Motor_Drive_Task+0x228>)
 8001c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6a:	f7fe fce5 	bl	8000638 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4620      	mov	r0, r4
 8001c74:	4629      	mov	r1, r5
 8001c76:	f7fe fb29 	bl	80002cc <__adddf3>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f7fe ffb1 	bl	8000be8 <__aeabi_d2f>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4a47      	ldr	r2, [pc, #284]	; (8001da8 <Motor_Drive_Task+0x248>)
 8001c8a:	6013      	str	r3, [r2, #0]
		//ez alapján a kiadandó kitöltési tényező
		if(u>0) motorDuty=(int)u+70;
 8001c8c:	4b47      	ldr	r3, [pc, #284]	; (8001dac <Motor_Drive_Task+0x24c>)
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	dd0a      	ble.n	8001cb2 <Motor_Drive_Task+0x152>
 8001c9c:	4b43      	ldr	r3, [pc, #268]	; (8001dac <Motor_Drive_Task+0x24c>)
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca6:	ee17 3a90 	vmov	r3, s15
 8001caa:	3346      	adds	r3, #70	; 0x46
 8001cac:	4a44      	ldr	r2, [pc, #272]	; (8001dc0 <Motor_Drive_Task+0x260>)
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	e01b      	b.n	8001cea <Motor_Drive_Task+0x18a>
		else if(u<0) motorDuty=(int)u-70;
 8001cb2:	4b3e      	ldr	r3, [pc, #248]	; (8001dac <Motor_Drive_Task+0x24c>)
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc0:	d50a      	bpl.n	8001cd8 <Motor_Drive_Task+0x178>
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <Motor_Drive_Task+0x24c>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ccc:	ee17 3a90 	vmov	r3, s15
 8001cd0:	3b46      	subs	r3, #70	; 0x46
 8001cd2:	4a3b      	ldr	r2, [pc, #236]	; (8001dc0 <Motor_Drive_Task+0x260>)
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e008      	b.n	8001cea <Motor_Drive_Task+0x18a>
		else motorDuty=(int)u;
 8001cd8:	4b34      	ldr	r3, [pc, #208]	; (8001dac <Motor_Drive_Task+0x24c>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce2:	ee17 2a90 	vmov	r2, s15
 8001ce6:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <Motor_Drive_Task+0x260>)
 8001ce8:	601a      	str	r2, [r3, #0]
		MOTOR_EN(1);
 8001cea:	2201      	movs	r2, #1
 8001cec:	2140      	movs	r1, #64	; 0x40
 8001cee:	4835      	ldr	r0, [pc, #212]	; (8001dc4 <Motor_Drive_Task+0x264>)
 8001cf0:	f003 fd50 	bl	8005794 <HAL_GPIO_WritePin>
 8001cf4:	e00c      	b.n	8001d10 <Motor_Drive_Task+0x1b0>
	}
	else
	{	f=u=0;
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <Motor_Drive_Task+0x24c>)
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <Motor_Drive_Task+0x24c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <Motor_Drive_Task+0x248>)
 8001d04:	6013      	str	r3, [r2, #0]
		MOTOR_EN(0); //amugy stop
 8001d06:	2200      	movs	r2, #0
 8001d08:	2140      	movs	r1, #64	; 0x40
 8001d0a:	482e      	ldr	r0, [pc, #184]	; (8001dc4 <Motor_Drive_Task+0x264>)
 8001d0c:	f003 fd42 	bl	8005794 <HAL_GPIO_WritePin>
	}
	//A két érték amit irogatsz (TIM3->CCR1,CCR2) konkrét timer periféria regiszterek, nem feltétlen jó őket folyamatosan újraírni 10ms enként
	if(motorDuty!=motorDutyPrev)//csak akkor írjuk át őket ha tényleg muszáj (ha változtak az előző taskhívás óta)
 8001d10:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <Motor_Drive_Task+0x260>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <Motor_Drive_Task+0x268>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d021      	beq.n	8001d60 <Motor_Drive_Task+0x200>
	{
		ccr2 = (motorDuty + 1000)/2-1;
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <Motor_Drive_Task+0x260>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d24:	0fda      	lsrs	r2, r3, #31
 8001d26:	4413      	add	r3, r2
 8001d28:	105b      	asrs	r3, r3, #1
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]
		if(ccr2>950)ccr2=950;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001d34:	4293      	cmp	r3, r2
 8001d36:	dd02      	ble.n	8001d3e <Motor_Drive_Task+0x1de>
 8001d38:	f240 33b6 	movw	r3, #950	; 0x3b6
 8001d3c:	617b      	str	r3, [r7, #20]
		if(ccr2<-950)ccr2=-950;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <Motor_Drive_Task+0x26c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	da01      	bge.n	8001d4a <Motor_Drive_Task+0x1ea>
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <Motor_Drive_Task+0x26c>)
 8001d48:	617b      	str	r3, [r7, #20]
		ccr1= 998-ccr2;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8001d50:	3302      	adds	r3, #2
 8001d52:	613b      	str	r3, [r7, #16]

		//2 Referencia megadása
		//Ezeket a loopba kéne változtatni folyamatosan, pwm-elinditas mashova kell majd
		TIM3->CCR1=ccr1;
 8001d54:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <Motor_Drive_Task+0x270>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2=ccr2;
 8001d5a:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <Motor_Drive_Task+0x270>)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	6393      	str	r3, [r2, #56]	; 0x38
	}
	motorDutyPrev=motorDuty;
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <Motor_Drive_Task+0x260>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <Motor_Drive_Task+0x268>)
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	e000      	b.n	8001d6c <Motor_Drive_Task+0x20c>
	if(motor_drive_task_tick>tick) return;
 8001d6a:	bf00      	nop
}
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bdb0      	pop	{r4, r5, r7, pc}
 8001d72:	bf00      	nop
 8001d74:	f3af 8000 	nop.w
 8001d78:	30be0ded 	.word	0x30be0ded
 8001d7c:	3fd02a99 	.word	0x3fd02a99
 8001d80:	9b3d07c8 	.word	0x9b3d07c8
 8001d84:	3fef9f55 	.word	0x3fef9f55
 8001d88:	30be0e00 	.word	0x30be0e00
 8001d8c:	3f882a99 	.word	0x3f882a99
 8001d90:	20000010 	.word	0x20000010
 8001d94:	20000678 	.word	0x20000678
 8001d98:	20000679 	.word	0x20000679
 8001d9c:	20000250 	.word	0x20000250
 8001da0:	20000278 	.word	0x20000278
 8001da4:	20000004 	.word	0x20000004
 8001da8:	20000280 	.word	0x20000280
 8001dac:	20000284 	.word	0x20000284
 8001db0:	445c0000 	.word	0x445c0000
 8001db4:	445c0000 	.word	0x445c0000
 8001db8:	c3480000 	.word	0xc3480000
 8001dbc:	c3480000 	.word	0xc3480000
 8001dc0:	20000288 	.word	0x20000288
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	2000028c 	.word	0x2000028c
 8001dcc:	fffffc4a 	.word	0xfffffc4a
 8001dd0:	40000400 	.word	0x40000400

08001dd4 <G0_Read_Fast>:
uint8_t txBuf[]={CMD_READ_SKILL};
uint8_t rxBuf[]={0,0,0,0,0,0,0,0};


uint8_t G0_Read_Fast(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]

	uint8_t state=0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
	txBuf[0]=CMD_READ_FAST;
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <G0_Read_Fast+0x5c>)
 8001de4:	222a      	movs	r2, #42	; 0x2a
 8001de6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 1);
 8001de8:	2301      	movs	r3, #1
 8001dea:	2201      	movs	r2, #1
 8001dec:	4910      	ldr	r1, [pc, #64]	; (8001e30 <G0_Read_Fast+0x5c>)
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f006 fa19 	bl	8008226 <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 8, 2);
 8001df4:	2302      	movs	r3, #2
 8001df6:	2208      	movs	r2, #8
 8001df8:	490e      	ldr	r1, [pc, #56]	; (8001e34 <G0_Read_Fast+0x60>)
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f006 faa5 	bl	800834a <HAL_UART_Receive>
 8001e00:	4603      	mov	r3, r0
 8001e02:	73fb      	strb	r3, [r7, #15]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <G0_Read_Fast+0x64>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE) && (rxBuf[7]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d109      	bne.n	8001e24 <G0_Read_Fast+0x50>
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <G0_Read_Fast+0x60>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b17      	cmp	r3, #23
 8001e16:	d105      	bne.n	8001e24 <G0_Read_Fast+0x50>
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <G0_Read_Fast+0x60>)
 8001e1a:	79db      	ldrb	r3, [r3, #7]
 8001e1c:	2b12      	cmp	r3, #18
 8001e1e:	d101      	bne.n	8001e24 <G0_Read_Fast+0x50>
	{
		return 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e000      	b.n	8001e26 <G0_Read_Fast+0x52>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8001e24:	2301      	movs	r3, #1
	}
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000014 	.word	0x20000014
 8001e34:	20000290 	.word	0x20000290
 8001e38:	20000679 	.word	0x20000679

08001e3c <G0_Read_Skill>:

uint8_t G0_Read_Skill(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
	uint8_t state=0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
	txBuf[0]=CMD_READ_SKILL;
 8001e4a:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <G0_Read_Skill+0x5c>)
 8001e4c:	2239      	movs	r2, #57	; 0x39
 8001e4e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 1);
 8001e50:	2301      	movs	r3, #1
 8001e52:	2201      	movs	r2, #1
 8001e54:	4910      	ldr	r1, [pc, #64]	; (8001e98 <G0_Read_Skill+0x5c>)
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f006 f9e5 	bl	8008226 <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 10, 2);
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	220a      	movs	r2, #10
 8001e60:	490e      	ldr	r1, [pc, #56]	; (8001e9c <G0_Read_Skill+0x60>)
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f006 fa71 	bl	800834a <HAL_UART_Receive>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	73fb      	strb	r3, [r7, #15]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <G0_Read_Skill+0x64>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE) && (rxBuf[9]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <G0_Read_Skill+0x50>
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <G0_Read_Skill+0x60>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b17      	cmp	r3, #23
 8001e7e:	d105      	bne.n	8001e8c <G0_Read_Skill+0x50>
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <G0_Read_Skill+0x60>)
 8001e82:	7a5b      	ldrb	r3, [r3, #9]
 8001e84:	2b12      	cmp	r3, #18
 8001e86:	d101      	bne.n	8001e8c <G0_Read_Skill+0x50>
	{
		return 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e000      	b.n	8001e8e <G0_Read_Skill+0x52>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8001e8c:	2301      	movs	r3, #1
	}
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000014 	.word	0x20000014
 8001e9c:	20000290 	.word	0x20000290
 8001ea0:	20000679 	.word	0x20000679
 8001ea4:	00000000 	.word	0x00000000

08001ea8 <Line_Track_Task>:

void Line_Track_Task(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint32_t tick, uint32_t period)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
	static uint32_t line_track_task_tick=0;
	static int32_t ccr = SERVO_CCR_MIDDLE;
	static float PHI;
	static float gamma;

	if(line_track_task_tick>tick) return;
 8001eb6:	4b64      	ldr	r3, [pc, #400]	; (8002048 <Line_Track_Task+0x1a0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	f0c0 80b0 	bcc.w	8002022 <Line_Track_Task+0x17a>
	line_track_task_tick = tick + period;
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4a5f      	ldr	r2, [pc, #380]	; (8002048 <Line_Track_Task+0x1a0>)
 8001eca:	6013      	str	r3, [r2, #0]

	if(mode == SKILL)
 8001ecc:	4b5f      	ldr	r3, [pc, #380]	; (800204c <Line_Track_Task+0x1a4>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b52      	cmp	r3, #82	; 0x52
 8001ed2:	d121      	bne.n	8001f18 <Line_Track_Task+0x70>
	{
		if(G0_Read_Skill(huart_stm, huart_debugg)) return;
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f7ff ffb0 	bl	8001e3c <G0_Read_Skill>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 80a1 	bne.w	8002026 <Line_Track_Task+0x17e>
		if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8001ee4:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <Line_Track_Task+0x1a8>)
 8001ee6:	785b      	ldrb	r3, [r3, #1]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 809e 	beq.w	800202a <Line_Track_Task+0x182>
 8001eee:	4b58      	ldr	r3, [pc, #352]	; (8002050 <Line_Track_Task+0x1a8>)
 8001ef0:	785b      	ldrb	r3, [r3, #1]
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	f200 8099 	bhi.w	800202a <Line_Track_Task+0x182>
		gamma = Skill_Mode(huart_debugg);
 8001ef8:	68b8      	ldr	r0, [r7, #8]
 8001efa:	f7ff fa3d 	bl	8001378 <Skill_Mode>
 8001efe:	eef0 7a40 	vmov.f32	s15, s0
 8001f02:	4b54      	ldr	r3, [pc, #336]	; (8002054 <Line_Track_Task+0x1ac>)
 8001f04:	edc3 7a00 	vstr	s15, [r3]
		v_ref=500;
 8001f08:	4b53      	ldr	r3, [pc, #332]	; (8002058 <Line_Track_Task+0x1b0>)
 8001f0a:	4a54      	ldr	r2, [pc, #336]	; (800205c <Line_Track_Task+0x1b4>)
 8001f0c:	601a      	str	r2, [r3, #0]
		Detect_Node(huart_debugg, tick);
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	68b8      	ldr	r0, [r7, #8]
 8001f12:	f7ff fb09 	bl	8001528 <Detect_Node>
 8001f16:	e017      	b.n	8001f48 <Line_Track_Task+0xa0>
	}
	/*****Gyorsasági pálya üzemmód******/
	else if(mode == FAST)
 8001f18:	4b4c      	ldr	r3, [pc, #304]	; (800204c <Line_Track_Task+0x1a4>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b3f      	cmp	r3, #63	; 0x3f
 8001f1e:	d113      	bne.n	8001f48 <Line_Track_Task+0xa0>
	{
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f7ff ff56 	bl	8001dd4 <G0_Read_Fast>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d17f      	bne.n	800202e <Line_Track_Task+0x186>
		if (LINE_CNT<1) return;//ha nincs vonal a kocsi alatt
 8001f2e:	4b48      	ldr	r3, [pc, #288]	; (8002050 <Line_Track_Task+0x1a8>)
 8001f30:	785b      	ldrb	r3, [r3, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d07d      	beq.n	8002032 <Line_Track_Task+0x18a>
		gamma = Fast_Mode(huart_debugg,tick);
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	68b8      	ldr	r0, [r7, #8]
 8001f3a:	f000 f899 	bl	8002070 <Fast_Mode>
 8001f3e:	eef0 7a40 	vmov.f32	s15, s0
 8001f42:	4b44      	ldr	r3, [pc, #272]	; (8002054 <Line_Track_Task+0x1ac>)
 8001f44:	edc3 7a00 	vstr	s15, [r3]
	}

	PHI = atan((L/(L+D))*tan(gamma));
 8001f48:	4b42      	ldr	r3, [pc, #264]	; (8002054 <Line_Track_Task+0x1ac>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fb1b 	bl	8000588 <__aeabi_f2d>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	ec43 2b10 	vmov	d0, r2, r3
 8001f5a:	f00a faf1 	bl	800c540 <tan>
 8001f5e:	ec51 0b10 	vmov	r0, r1, d0
 8001f62:	a337      	add	r3, pc, #220	; (adr r3, 8002040 <Line_Track_Task+0x198>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	f7fe fb66 	bl	8000638 <__aeabi_dmul>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	ec43 2b17 	vmov	d7, r2, r3
 8001f74:	eeb0 0a47 	vmov.f32	s0, s14
 8001f78:	eef0 0a67 	vmov.f32	s1, s15
 8001f7c:	f00a f934 	bl	800c1e8 <atan>
 8001f80:	ec53 2b10 	vmov	r2, r3, d0
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7fe fe2e 	bl	8000be8 <__aeabi_d2f>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4a34      	ldr	r2, [pc, #208]	; (8002060 <Line_Track_Task+0x1b8>)
 8001f90:	6013      	str	r3, [r2, #0]
	if(PHI<0) ccr = (uint16_t)(-SERVO_M * PHI + SERVO_CCR_MIDDLE);//balra kanyarodás
 8001f92:	4b33      	ldr	r3, [pc, #204]	; (8002060 <Line_Track_Task+0x1b8>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa0:	d513      	bpl.n	8001fca <Line_Track_Task+0x122>
 8001fa2:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <Line_Track_Task+0x1b8>)
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002064 <Line_Track_Task+0x1bc>
 8001fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002068 <Line_Track_Task+0x1c0>
 8001fb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fbc:	ee17 3a90 	vmov	r3, s15
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b29      	ldr	r3, [pc, #164]	; (800206c <Line_Track_Task+0x1c4>)
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e012      	b.n	8001ff0 <Line_Track_Task+0x148>
	else ccr = (uint16_t) (-SERVO_M */*1.2*/ PHI + SERVO_CCR_MIDDLE); //jobbra kanyrodás
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <Line_Track_Task+0x1b8>)
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002064 <Line_Track_Task+0x1bc>
 8001fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002068 <Line_Track_Task+0x1c0>
 8001fdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe4:	ee17 3a90 	vmov	r3, s15
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <Line_Track_Task+0x1c4>)
 8001fee:	601a      	str	r2, [r3, #0]

	if(ccr > CCR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <Line_Track_Task+0x1c4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001ff8:	dd04      	ble.n	8002004 <Line_Track_Task+0x15c>
	{
		ccr = CCR_MAX;
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	; (800206c <Line_Track_Task+0x1c4>)
 8001ffc:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	e008      	b.n	8002016 <Line_Track_Task+0x16e>
	}
	else if(ccr < CCR_MIN)//egyik irányba se
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <Line_Track_Task+0x1c4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800200c:	da03      	bge.n	8002016 <Line_Track_Task+0x16e>
	{
		ccr = CCR_MIN;
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <Line_Track_Task+0x1c4>)
 8002010:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002014:	601a      	str	r2, [r3, #0]
	}
	TIM2->CCR1 = ccr;
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <Line_Track_Task+0x1c4>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800201e:	635a      	str	r2, [r3, #52]	; 0x34
 8002020:	e008      	b.n	8002034 <Line_Track_Task+0x18c>
	if(line_track_task_tick>tick) return;
 8002022:	bf00      	nop
 8002024:	e006      	b.n	8002034 <Line_Track_Task+0x18c>
		if(G0_Read_Skill(huart_stm, huart_debugg)) return;
 8002026:	bf00      	nop
 8002028:	e004      	b.n	8002034 <Line_Track_Task+0x18c>
		if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 800202a:	bf00      	nop
 800202c:	e002      	b.n	8002034 <Line_Track_Task+0x18c>
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 800202e:	bf00      	nop
 8002030:	e000      	b.n	8002034 <Line_Track_Task+0x18c>
		if (LINE_CNT<1) return;//ha nincs vonal a kocsi alatt
 8002032:	bf00      	nop
}
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	f3af 8000 	nop.w
 8002040:	18618618 	.word	0x18618618
 8002044:	3fe86186 	.word	0x3fe86186
 8002048:	20000298 	.word	0x20000298
 800204c:	2000024d 	.word	0x2000024d
 8002050:	20000290 	.word	0x20000290
 8002054:	2000029c 	.word	0x2000029c
 8002058:	20000250 	.word	0x20000250
 800205c:	43fa0000 	.word	0x43fa0000
 8002060:	200002a0 	.word	0x200002a0
 8002064:	c4bb8000 	.word	0xc4bb8000
 8002068:	442b0000 	.word	0x442b0000
 800206c:	20000018 	.word	0x20000018

08002070 <Fast_Mode>:

float Fast_Mode(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
	static float x_elso_prev=0;
	static float x_hatso;
	static float delta;
	static float gamma;

	uint32_t sum=0;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
	uint32_t dist=0;
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]


	if(swState[0] == FREERUN_MODE)
 8002082:	4b44      	ldr	r3, [pc, #272]	; (8002194 <Fast_Mode+0x124>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d171      	bne.n	800216e <Fast_Mode+0xfe>
	{
		/*****Gyorsító jelölés figyelése (szaggatott 3 vonal)*****/
		if(LINE_CNT != lineCnt_prev && (!Free_Run_State || Free_Run_State==2)) //ha változik az alattunk lévő vonalak száma
 800208a:	4b43      	ldr	r3, [pc, #268]	; (8002198 <Fast_Mode+0x128>)
 800208c:	785a      	ldrb	r2, [r3, #1]
 800208e:	4b43      	ldr	r3, [pc, #268]	; (800219c <Fast_Mode+0x12c>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d044      	beq.n	8002120 <Fast_Mode+0xb0>
 8002096:	4b42      	ldr	r3, [pc, #264]	; (80021a0 <Fast_Mode+0x130>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <Fast_Mode+0x36>
 800209e:	4b40      	ldr	r3, [pc, #256]	; (80021a0 <Fast_Mode+0x130>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d13c      	bne.n	8002120 <Fast_Mode+0xb0>
		{
			dt[index] = t - t_prev;
 80020a6:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <Fast_Mode+0x134>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a3f      	ldr	r2, [pc, #252]	; (80021a8 <Fast_Mode+0x138>)
 80020ac:	7812      	ldrb	r2, [r2, #0]
 80020ae:	4611      	mov	r1, r2
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	4a3d      	ldr	r2, [pc, #244]	; (80021ac <Fast_Mode+0x13c>)
 80020b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			sum=dt[0] + dt[1] + dt[2] + dt[3]+ dt[4];
 80020ba:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <Fast_Mode+0x13c>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <Fast_Mode+0x13c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	441a      	add	r2, r3
 80020c4:	4b39      	ldr	r3, [pc, #228]	; (80021ac <Fast_Mode+0x13c>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	441a      	add	r2, r3
 80020ca:	4b38      	ldr	r3, [pc, #224]	; (80021ac <Fast_Mode+0x13c>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	441a      	add	r2, r3
 80020d0:	4b36      	ldr	r3, [pc, #216]	; (80021ac <Fast_Mode+0x13c>)
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	4413      	add	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
			if((sum > 300) && (sum < 700))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80020de:	d90f      	bls.n	8002100 <Fast_Mode+0x90>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80020e6:	d20b      	bcs.n	8002100 <Fast_Mode+0x90>
			{
				v_ref=4200;
 80020e8:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <Fast_Mode+0x140>)
 80020ea:	4a32      	ldr	r2, [pc, #200]	; (80021b4 <Fast_Mode+0x144>)
 80020ec:	601a      	str	r2, [r3, #0]
				LED_B(1);
 80020ee:	2200      	movs	r2, #0
 80020f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020f4:	4830      	ldr	r0, [pc, #192]	; (80021b8 <Fast_Mode+0x148>)
 80020f6:	f003 fb4d 	bl	8005794 <HAL_GPIO_WritePin>
				Free_Run_State=1;
 80020fa:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <Fast_Mode+0x130>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
			}
			index++;
 8002100:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <Fast_Mode+0x138>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <Fast_Mode+0x138>)
 800210a:	701a      	strb	r2, [r3, #0]
			if(index>4) index=0;
 800210c:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <Fast_Mode+0x138>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d902      	bls.n	800211a <Fast_Mode+0xaa>
 8002114:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <Fast_Mode+0x138>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
			t_prev = t;
 800211a:	4a22      	ldr	r2, [pc, #136]	; (80021a4 <Fast_Mode+0x134>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6013      	str	r3, [r2, #0]
		}
		/* A memóriajellegű statikus változók segítségével vizsgáljuk a szaggatott vonalat*/
		lineCnt_prev = LINE_CNT; //az előző értéket a jelenlegihez hangoljuk
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <Fast_Mode+0x128>)
 8002122:	785a      	ldrb	r2, [r3, #1]
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <Fast_Mode+0x12c>)
 8002126:	701a      	strb	r2, [r3, #0]

		/*****Lassító jelölés figyelése (folytonos 3 vonal)*****/
		if(LINE_CNT > 1 && (!Free_Run_State || Free_Run_State==1)) //ha 3 vonalat érzékelünk
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <Fast_Mode+0x128>)
 800212a:	785b      	ldrb	r3, [r3, #1]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d91a      	bls.n	8002166 <Fast_Mode+0xf6>
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <Fast_Mode+0x130>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <Fast_Mode+0xd0>
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <Fast_Mode+0x130>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d112      	bne.n	8002166 <Fast_Mode+0xf6>
		{
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 8002140:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <Fast_Mode+0x14c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	338c      	adds	r3, #140	; 0x8c
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d94d      	bls.n	80021e8 <Fast_Mode+0x178>
			{
				v_ref = 1100;
 800214c:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <Fast_Mode+0x140>)
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <Fast_Mode+0x150>)
 8002150:	601a      	str	r2, [r3, #0]
				Free_Run_State=2;
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <Fast_Mode+0x130>)
 8002154:	2202      	movs	r2, #2
 8002156:	701a      	strb	r2, [r3, #0]
				LED_B(0);
 8002158:	2201      	movs	r2, #1
 800215a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800215e:	4816      	ldr	r0, [pc, #88]	; (80021b8 <Fast_Mode+0x148>)
 8002160:	f003 fb18 	bl	8005794 <HAL_GPIO_WritePin>
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 8002164:	e040      	b.n	80021e8 <Fast_Mode+0x178>
			}
		}
		else //ha 1 vonalat érzékelünk
		{
			start3time = t;
 8002166:	4a15      	ldr	r2, [pc, #84]	; (80021bc <Fast_Mode+0x14c>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	e03c      	b.n	80021e8 <Fast_Mode+0x178>
		}
		/*****FÉKEZÉS NEGATÍV PWM-EL*******/
	}

	/*****SC üzemmód******/
	else if(swState[0]==SC_MODE)
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <Fast_Mode+0x124>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d138      	bne.n	80021e8 <Fast_Mode+0x178>
	{
		dist=(((uint16_t)rxBuf[5])<<8) | ((uint16_t)rxBuf[6]);
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <Fast_Mode+0x128>)
 8002178:	795b      	ldrb	r3, [r3, #5]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	4a06      	ldr	r2, [pc, #24]	; (8002198 <Fast_Mode+0x128>)
 800217e:	7992      	ldrb	r2, [r2, #6]
 8002180:	4313      	orrs	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
		if(dist>1000) v_ref=1500;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800218a:	d91f      	bls.n	80021cc <Fast_Mode+0x15c>
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <Fast_Mode+0x140>)
 800218e:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <Fast_Mode+0x154>)
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e029      	b.n	80021e8 <Fast_Mode+0x178>
 8002194:	20000244 	.word	0x20000244
 8002198:	20000290 	.word	0x20000290
 800219c:	2000001c 	.word	0x2000001c
 80021a0:	200002a4 	.word	0x200002a4
 80021a4:	200002a8 	.word	0x200002a8
 80021a8:	200002ac 	.word	0x200002ac
 80021ac:	20000020 	.word	0x20000020
 80021b0:	20000250 	.word	0x20000250
 80021b4:	45834000 	.word	0x45834000
 80021b8:	40020400 	.word	0x40020400
 80021bc:	200002b0 	.word	0x200002b0
 80021c0:	44898000 	.word	0x44898000
 80021c4:	44bb8000 	.word	0x44bb8000
 80021c8:	43fa0000 	.word	0x43fa0000
		else v_ref = 2*(float)dist-500;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021da:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 80021c8 <Fast_Mode+0x158>
 80021de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021e2:	4bc7      	ldr	r3, [pc, #796]	; (8002500 <Fast_Mode+0x490>)
 80021e4:	edc3 7a00 	vstr	s15, [r3]
	}

	x_elso=(float)rxBuf[2]*204/248.0-102;;
 80021e8:	4bc6      	ldr	r3, [pc, #792]	; (8002504 <Fast_Mode+0x494>)
 80021ea:	789b      	ldrb	r3, [r3, #2]
 80021ec:	ee07 3a90 	vmov	s15, r3
 80021f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021f4:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002508 <Fast_Mode+0x498>
 80021f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021fc:	ee17 0a90 	vmov	r0, s15
 8002200:	f7fe f9c2 	bl	8000588 <__aeabi_f2d>
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	4bc0      	ldr	r3, [pc, #768]	; (800250c <Fast_Mode+0x49c>)
 800220a:	f7fe fb3f 	bl	800088c <__aeabi_ddiv>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4610      	mov	r0, r2
 8002214:	4619      	mov	r1, r3
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	4bbd      	ldr	r3, [pc, #756]	; (8002510 <Fast_Mode+0x4a0>)
 800221c:	f7fe f854 	bl	80002c8 <__aeabi_dsub>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	f7fe fcde 	bl	8000be8 <__aeabi_d2f>
 800222c:	4603      	mov	r3, r0
 800222e:	4ab9      	ldr	r2, [pc, #740]	; (8002514 <Fast_Mode+0x4a4>)
 8002230:	6013      	str	r3, [r2, #0]
	x_hatso=(float)rxBuf[3]*204/244.0-102;
 8002232:	4bb4      	ldr	r3, [pc, #720]	; (8002504 <Fast_Mode+0x494>)
 8002234:	78db      	ldrb	r3, [r3, #3]
 8002236:	ee07 3a90 	vmov	s15, r3
 800223a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800223e:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8002508 <Fast_Mode+0x498>
 8002242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002246:	ee17 0a90 	vmov	r0, s15
 800224a:	f7fe f99d 	bl	8000588 <__aeabi_f2d>
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	4bb1      	ldr	r3, [pc, #708]	; (8002518 <Fast_Mode+0x4a8>)
 8002254:	f7fe fb1a 	bl	800088c <__aeabi_ddiv>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	4baa      	ldr	r3, [pc, #680]	; (8002510 <Fast_Mode+0x4a0>)
 8002266:	f7fe f82f 	bl	80002c8 <__aeabi_dsub>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4610      	mov	r0, r2
 8002270:	4619      	mov	r1, r3
 8002272:	f7fe fcb9 	bl	8000be8 <__aeabi_d2f>
 8002276:	4603      	mov	r3, r0
 8002278:	4aa8      	ldr	r2, [pc, #672]	; (800251c <Fast_Mode+0x4ac>)
 800227a:	6013      	str	r3, [r2, #0]
	delta=atan((float)(x_elso-x_hatso)/L_SENSOR);
 800227c:	4ba5      	ldr	r3, [pc, #660]	; (8002514 <Fast_Mode+0x4a4>)
 800227e:	ed93 7a00 	vldr	s14, [r3]
 8002282:	4ba6      	ldr	r3, [pc, #664]	; (800251c <Fast_Mode+0x4ac>)
 8002284:	edd3 7a00 	vldr	s15, [r3]
 8002288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800228c:	ee17 0a90 	vmov	r0, s15
 8002290:	f7fe f97a 	bl	8000588 <__aeabi_f2d>
 8002294:	a390      	add	r3, pc, #576	; (adr r3, 80024d8 <Fast_Mode+0x468>)
 8002296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229a:	f7fe faf7 	bl	800088c <__aeabi_ddiv>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	ec43 2b17 	vmov	d7, r2, r3
 80022a6:	eeb0 0a47 	vmov.f32	s0, s14
 80022aa:	eef0 0a67 	vmov.f32	s1, s15
 80022ae:	f009 ff9b 	bl	800c1e8 <atan>
 80022b2:	ec53 2b10 	vmov	r2, r3, d0
 80022b6:	4610      	mov	r0, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	f7fe fc95 	bl	8000be8 <__aeabi_d2f>
 80022be:	4603      	mov	r3, r0
 80022c0:	4a97      	ldr	r2, [pc, #604]	; (8002520 <Fast_Mode+0x4b0>)
 80022c2:	6013      	str	r3, [r2, #0]
	/**/
	//szabályozóparaméterek ujraszámolása az aktuális sebesség alapján
	if(v>100)
 80022c4:	4b97      	ldr	r3, [pc, #604]	; (8002524 <Fast_Mode+0x4b4>)
 80022c6:	edd3 7a00 	vldr	s15, [r3]
 80022ca:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002528 <Fast_Mode+0x4b8>
 80022ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d6:	f340 80b6 	ble.w	8002446 <Fast_Mode+0x3d6>
	{
		if(v<2000)
 80022da:	4b92      	ldr	r3, [pc, #584]	; (8002524 <Fast_Mode+0x4b4>)
 80022dc:	edd3 7a00 	vldr	s15, [r3]
 80022e0:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800252c <Fast_Mode+0x4bc>
 80022e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ec:	d554      	bpl.n	8002398 <Fast_Mode+0x328>
		{
			k_p = -L/(v*v)*S1MULTS2_SLOW;
 80022ee:	4b8d      	ldr	r3, [pc, #564]	; (8002524 <Fast_Mode+0x4b4>)
 80022f0:	ed93 7a00 	vldr	s14, [r3]
 80022f4:	4b8b      	ldr	r3, [pc, #556]	; (8002524 <Fast_Mode+0x4b4>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fe:	ee17 0a90 	vmov	r0, s15
 8002302:	f7fe f941 	bl	8000588 <__aeabi_f2d>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	f04f 0000 	mov.w	r0, #0
 800230e:	4988      	ldr	r1, [pc, #544]	; (8002530 <Fast_Mode+0x4c0>)
 8002310:	f7fe fabc 	bl	800088c <__aeabi_ddiv>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	a370      	add	r3, pc, #448	; (adr r3, 80024e0 <Fast_Mode+0x470>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	f7fe f989 	bl	8000638 <__aeabi_dmul>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f7fe fc5b 	bl	8000be8 <__aeabi_d2f>
 8002332:	4603      	mov	r3, r0
 8002334:	4a7f      	ldr	r2, [pc, #508]	; (8002534 <Fast_Mode+0x4c4>)
 8002336:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 8002338:	4b7a      	ldr	r3, [pc, #488]	; (8002524 <Fast_Mode+0x4b4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe f923 	bl	8000588 <__aeabi_f2d>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	f04f 0000 	mov.w	r0, #0
 800234a:	497b      	ldr	r1, [pc, #492]	; (8002538 <Fast_Mode+0x4c8>)
 800234c:	f7fe fa9e 	bl	800088c <__aeabi_ddiv>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4614      	mov	r4, r2
 8002356:	461d      	mov	r5, r3
 8002358:	4b72      	ldr	r3, [pc, #456]	; (8002524 <Fast_Mode+0x4b4>)
 800235a:	ed93 7a00 	vldr	s14, [r3]
 800235e:	4b75      	ldr	r3, [pc, #468]	; (8002534 <Fast_Mode+0x4c4>)
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002368:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 800236c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002370:	ee17 0a90 	vmov	r0, s15
 8002374:	f7fe f908 	bl	8000588 <__aeabi_f2d>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4620      	mov	r0, r4
 800237e:	4629      	mov	r1, r5
 8002380:	f7fe f95a 	bl	8000638 <__aeabi_dmul>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f7fe fc2c 	bl	8000be8 <__aeabi_d2f>
 8002390:	4603      	mov	r3, r0
 8002392:	4a6a      	ldr	r2, [pc, #424]	; (800253c <Fast_Mode+0x4cc>)
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e056      	b.n	8002446 <Fast_Mode+0x3d6>
		}
		else
		{
			k_p = -L/(v*v)*S1MULTS2_FAST;
 8002398:	4b62      	ldr	r3, [pc, #392]	; (8002524 <Fast_Mode+0x4b4>)
 800239a:	ed93 7a00 	vldr	s14, [r3]
 800239e:	4b61      	ldr	r3, [pc, #388]	; (8002524 <Fast_Mode+0x4b4>)
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a8:	ee17 0a90 	vmov	r0, s15
 80023ac:	f7fe f8ec 	bl	8000588 <__aeabi_f2d>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	f04f 0000 	mov.w	r0, #0
 80023b8:	495d      	ldr	r1, [pc, #372]	; (8002530 <Fast_Mode+0x4c0>)
 80023ba:	f7fe fa67 	bl	800088c <__aeabi_ddiv>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	a348      	add	r3, pc, #288	; (adr r3, 80024e8 <Fast_Mode+0x478>)
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	f7fe f934 	bl	8000638 <__aeabi_dmul>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	f7fe fc06 	bl	8000be8 <__aeabi_d2f>
 80023dc:	4603      	mov	r3, r0
 80023de:	4a55      	ldr	r2, [pc, #340]	; (8002534 <Fast_Mode+0x4c4>)
 80023e0:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_FAST-v*k_p);
 80023e2:	4b50      	ldr	r3, [pc, #320]	; (8002524 <Fast_Mode+0x4b4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f8ce 	bl	8000588 <__aeabi_f2d>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	f04f 0000 	mov.w	r0, #0
 80023f4:	4950      	ldr	r1, [pc, #320]	; (8002538 <Fast_Mode+0x4c8>)
 80023f6:	f7fe fa49 	bl	800088c <__aeabi_ddiv>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4614      	mov	r4, r2
 8002400:	461d      	mov	r5, r3
 8002402:	4b48      	ldr	r3, [pc, #288]	; (8002524 <Fast_Mode+0x4b4>)
 8002404:	ed93 7a00 	vldr	s14, [r3]
 8002408:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <Fast_Mode+0x4c4>)
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002412:	ee17 0a90 	vmov	r0, s15
 8002416:	f7fe f8b7 	bl	8000588 <__aeabi_f2d>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	a134      	add	r1, pc, #208	; (adr r1, 80024f0 <Fast_Mode+0x480>)
 8002420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002424:	f7fd ff50 	bl	80002c8 <__aeabi_dsub>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4620      	mov	r0, r4
 800242e:	4629      	mov	r1, r5
 8002430:	f7fe f902 	bl	8000638 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f7fe fbd4 	bl	8000be8 <__aeabi_d2f>
 8002440:	4603      	mov	r3, r0
 8002442:	4a3e      	ldr	r2, [pc, #248]	; (800253c <Fast_Mode+0x4cc>)
 8002444:	6013      	str	r3, [r2, #0]
		}
	}
	gamma = -k_p * x_elso -k_delta * delta - K_D*(x_elso-x_elso_prev);
 8002446:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <Fast_Mode+0x4c4>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	eeb1 7a67 	vneg.f32	s14, s15
 8002450:	4b30      	ldr	r3, [pc, #192]	; (8002514 <Fast_Mode+0x4a4>)
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800245a:	4b38      	ldr	r3, [pc, #224]	; (800253c <Fast_Mode+0x4cc>)
 800245c:	edd3 6a00 	vldr	s13, [r3]
 8002460:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <Fast_Mode+0x4b0>)
 8002462:	edd3 7a00 	vldr	s15, [r3]
 8002466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800246a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800246e:	ee17 0a90 	vmov	r0, s15
 8002472:	f7fe f889 	bl	8000588 <__aeabi_f2d>
 8002476:	4604      	mov	r4, r0
 8002478:	460d      	mov	r5, r1
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <Fast_Mode+0x4a4>)
 800247c:	ed93 7a00 	vldr	s14, [r3]
 8002480:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <Fast_Mode+0x4d0>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800248a:	ee17 0a90 	vmov	r0, s15
 800248e:	f7fe f87b 	bl	8000588 <__aeabi_f2d>
 8002492:	a319      	add	r3, pc, #100	; (adr r3, 80024f8 <Fast_Mode+0x488>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f7fe f8ce 	bl	8000638 <__aeabi_dmul>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4620      	mov	r0, r4
 80024a2:	4629      	mov	r1, r5
 80024a4:	f7fd ff12 	bl	80002cc <__adddf3>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fb9a 	bl	8000be8 <__aeabi_d2f>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4a23      	ldr	r2, [pc, #140]	; (8002544 <Fast_Mode+0x4d4>)
 80024b8:	6013      	str	r3, [r2, #0]
	x_elso_prev = x_elso;
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <Fast_Mode+0x4a4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a20      	ldr	r2, [pc, #128]	; (8002540 <Fast_Mode+0x4d0>)
 80024c0:	6013      	str	r3, [r2, #0]

	return gamma;
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <Fast_Mode+0x4d4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	ee07 3a90 	vmov	s15, r3
}
 80024ca:	eeb0 0a67 	vmov.f32	s0, s15
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bdb0      	pop	{r4, r5, r7, pc}
 80024d4:	f3af 8000 	nop.w
 80024d8:	00000000 	.word	0x00000000
 80024dc:	406fa000 	.word	0x406fa000
 80024e0:	fd21ff2e 	.word	0xfd21ff2e
 80024e4:	402275f6 	.word	0x402275f6
 80024e8:	ab367a10 	.word	0xab367a10
 80024ec:	402d573e 	.word	0x402d573e
 80024f0:	66666666 	.word	0x66666666
 80024f4:	c01e6666 	.word	0xc01e6666
 80024f8:	9999999a 	.word	0x9999999a
 80024fc:	3f999999 	.word	0x3f999999
 8002500:	20000250 	.word	0x20000250
 8002504:	20000290 	.word	0x20000290
 8002508:	434c0000 	.word	0x434c0000
 800250c:	406f0000 	.word	0x406f0000
 8002510:	40598000 	.word	0x40598000
 8002514:	200002b4 	.word	0x200002b4
 8002518:	406e8000 	.word	0x406e8000
 800251c:	200002b8 	.word	0x200002b8
 8002520:	200002bc 	.word	0x200002bc
 8002524:	20000278 	.word	0x20000278
 8002528:	42c80000 	.word	0x42c80000
 800252c:	44fa0000 	.word	0x44fa0000
 8002530:	c0710000 	.word	0xc0710000
 8002534:	20000034 	.word	0x20000034
 8002538:	40710000 	.word	0x40710000
 800253c:	20000038 	.word	0x20000038
 8002540:	200002c0 	.word	0x200002c0
 8002544:	200002c4 	.word	0x200002c4

08002548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b085      	sub	sp, #20
 800254c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800254e:	f001 fbaf 	bl	8003cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002552:	f000 f88d 	bl	8002670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002556:	f000 fd05 	bl	8002f64 <MX_GPIO_Init>
  MX_DMA_Init();
 800255a:	f000 fce3 	bl	8002f24 <MX_DMA_Init>
  MX_TIM2_Init();
 800255e:	f000 fa1f 	bl	80029a0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002562:	f000 fc61 	bl	8002e28 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8002566:	f000 fb13 	bl	8002b90 <MX_TIM4_Init>
  MX_ADC2_Init();
 800256a:	f000 f945 	bl	80027f8 <MX_ADC2_Init>
  MX_TIM3_Init();
 800256e:	f000 fa8d 	bl	8002a8c <MX_TIM3_Init>
  MX_UART5_Init();
 8002572:	f000 fc2f 	bl	8002dd4 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8002576:	f000 fc81 	bl	8002e7c <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800257a:	f000 fbd3 	bl	8002d24 <MX_TIM8_Init>
  MX_ADC1_Init();
 800257e:	f000 f8e9 	bl	8002754 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8002582:	f000 fca5 	bl	8002ed0 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8002586:	f000 fb7f 	bl	8002c88 <MX_TIM5_Init>
  MX_TIM1_Init();
 800258a:	f000 f987 	bl	800289c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  F4_Basic_Init(&huart1, &htim5, &htim3, &htim2, &htim8);
 800258e:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <main+0xfc>)
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <main+0x100>)
 8002594:	4a2d      	ldr	r2, [pc, #180]	; (800264c <main+0x104>)
 8002596:	492e      	ldr	r1, [pc, #184]	; (8002650 <main+0x108>)
 8002598:	482e      	ldr	r0, [pc, #184]	; (8002654 <main+0x10c>)
 800259a:	f7fe fd0d 	bl	8000fb8 <F4_Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3);
 800259e:	2108      	movs	r1, #8
 80025a0:	482d      	ldr	r0, [pc, #180]	; (8002658 <main+0x110>)
 80025a2:	f000 fddd 	bl	8003160 <Remote_Control_Init>
  Battery_Voltage_Compensate(&hadc2, &hadc1, &huart1);
 80025a6:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <main+0x10c>)
 80025a8:	492c      	ldr	r1, [pc, #176]	; (800265c <main+0x114>)
 80025aa:	482d      	ldr	r0, [pc, #180]	; (8002660 <main+0x118>)
 80025ac:	f7ff f94c 	bl	8001848 <Battery_Voltage_Compensate>
  Mode_Selector(&huart1, &huart5);
 80025b0:	492c      	ldr	r1, [pc, #176]	; (8002664 <main+0x11c>)
 80025b2:	4828      	ldr	r0, [pc, #160]	; (8002654 <main+0x10c>)
 80025b4:	f7fe fe34 	bl	8001220 <Mode_Selector>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Measure_Velocity_Task(&htim8,TICK, 4);
 80025b8:	4b25      	ldr	r3, [pc, #148]	; (8002650 <main+0x108>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	2204      	movs	r2, #4
 80025c0:	4619      	mov	r1, r3
 80025c2:	4820      	ldr	r0, [pc, #128]	; (8002644 <main+0xfc>)
 80025c4:	f7ff fa50 	bl	8001a68 <Measure_Velocity_Task>
	  Motor_Drive_Task(&htim3, &huart1, TICK, 10);
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <main+0x108>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ce:	230a      	movs	r3, #10
 80025d0:	4920      	ldr	r1, [pc, #128]	; (8002654 <main+0x10c>)
 80025d2:	481e      	ldr	r0, [pc, #120]	; (800264c <main+0x104>)
 80025d4:	f7ff fac4 	bl	8001b60 <Motor_Drive_Task>
	  Line_Track_Task(&huart5, &huart1, TICK, 10);
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <main+0x108>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025de:	230a      	movs	r3, #10
 80025e0:	491c      	ldr	r1, [pc, #112]	; (8002654 <main+0x10c>)
 80025e2:	4820      	ldr	r0, [pc, #128]	; (8002664 <main+0x11c>)
 80025e4:	f7ff fc60 	bl	8001ea8 <Line_Track_Task>
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart1, TICK, 29);
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <main+0x108>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	221d      	movs	r2, #29
 80025f0:	9200      	str	r2, [sp, #0]
 80025f2:	4a18      	ldr	r2, [pc, #96]	; (8002654 <main+0x10c>)
 80025f4:	2108      	movs	r1, #8
 80025f6:	4818      	ldr	r0, [pc, #96]	; (8002658 <main+0x110>)
 80025f8:	f000 fdce 	bl	8003198 <Remote_Control_Task>
	  HDI_Read_Task(TICK, 500);
 80025fc:	4b14      	ldr	r3, [pc, #80]	; (8002650 <main+0x108>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fd72 	bl	80010f0 <HDI_Read_Task>
	  Monitoring_Task(&huart1, (int16_t)v , rxBuf[1], TIM2->CCR1, 1000, TICK, 201);
 800260c:	4b16      	ldr	r3, [pc, #88]	; (8002668 <main+0x120>)
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002616:	ee17 3a90 	vmov	r3, s15
 800261a:	b219      	sxth	r1, r3
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <main+0x124>)
 800261e:	785a      	ldrb	r2, [r3, #1]
 8002620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002626:	461c      	mov	r4, r3
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <main+0x108>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	20c9      	movs	r0, #201	; 0xc9
 8002630:	9002      	str	r0, [sp, #8]
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	4623      	mov	r3, r4
 800263c:	4805      	ldr	r0, [pc, #20]	; (8002654 <main+0x10c>)
 800263e:	f7ff f89d 	bl	800177c <Monitoring_Task>
	  Measure_Velocity_Task(&htim8,TICK, 4);
 8002642:	e7b9      	b.n	80025b8 <main+0x70>
 8002644:	200004c0 	.word	0x200004c0
 8002648:	200003a0 	.word	0x200003a0
 800264c:	200003e8 	.word	0x200003e8
 8002650:	20000478 	.word	0x20000478
 8002654:	200005ac 	.word	0x200005ac
 8002658:	20000430 	.word	0x20000430
 800265c:	200002c8 	.word	0x200002c8
 8002660:	20000310 	.word	0x20000310
 8002664:	20000568 	.word	0x20000568
 8002668:	20000278 	.word	0x20000278
 800266c:	20000290 	.word	0x20000290

08002670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b094      	sub	sp, #80	; 0x50
 8002674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002676:	f107 031c 	add.w	r3, r7, #28
 800267a:	2234      	movs	r2, #52	; 0x34
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f006 fec8 	bl	8009414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002684:	f107 0308 	add.w	r3, r7, #8
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002694:	2300      	movs	r3, #0
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	4b2c      	ldr	r3, [pc, #176]	; (800274c <SystemClock_Config+0xdc>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	4a2b      	ldr	r2, [pc, #172]	; (800274c <SystemClock_Config+0xdc>)
 800269e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a2:	6413      	str	r3, [r2, #64]	; 0x40
 80026a4:	4b29      	ldr	r3, [pc, #164]	; (800274c <SystemClock_Config+0xdc>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b0:	2300      	movs	r3, #0
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	4b26      	ldr	r3, [pc, #152]	; (8002750 <SystemClock_Config+0xe0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a25      	ldr	r2, [pc, #148]	; (8002750 <SystemClock_Config+0xe0>)
 80026ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b23      	ldr	r3, [pc, #140]	; (8002750 <SystemClock_Config+0xe0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026cc:	2301      	movs	r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026d6:	2302      	movs	r3, #2
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026e0:	2304      	movs	r3, #4
 80026e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80026e4:	23b4      	movs	r3, #180	; 0xb4
 80026e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026e8:	2302      	movs	r3, #2
 80026ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80026ec:	2302      	movs	r3, #2
 80026ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026f0:	2302      	movs	r3, #2
 80026f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026f4:	f107 031c 	add.w	r3, r7, #28
 80026f8:	4618      	mov	r0, r3
 80026fa:	f003 fc31 	bl	8005f60 <HAL_RCC_OscConfig>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002704:	f000 fd26 	bl	8003154 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002708:	f003 f890 	bl	800582c <HAL_PWREx_EnableOverDrive>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002712:	f000 fd1f 	bl	8003154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002716:	230f      	movs	r3, #15
 8002718:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800271a:	2302      	movs	r3, #2
 800271c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002722:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800272c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	2105      	movs	r1, #5
 8002734:	4618      	mov	r0, r3
 8002736:	f003 f8c9 	bl	80058cc <HAL_RCC_ClockConfig>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002740:	f000 fd08 	bl	8003154 <Error_Handler>
  }
}
 8002744:	bf00      	nop
 8002746:	3750      	adds	r7, #80	; 0x50
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40023800 	.word	0x40023800
 8002750:	40007000 	.word	0x40007000

08002754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800275a:	463b      	mov	r3, r7
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002766:	4b21      	ldr	r3, [pc, #132]	; (80027ec <MX_ADC1_Init+0x98>)
 8002768:	4a21      	ldr	r2, [pc, #132]	; (80027f0 <MX_ADC1_Init+0x9c>)
 800276a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800276c:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <MX_ADC1_Init+0x98>)
 800276e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002772:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <MX_ADC1_Init+0x98>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <MX_ADC1_Init+0x98>)
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002780:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <MX_ADC1_Init+0x98>)
 8002782:	2200      	movs	r2, #0
 8002784:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002786:	4b19      	ldr	r3, [pc, #100]	; (80027ec <MX_ADC1_Init+0x98>)
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <MX_ADC1_Init+0x98>)
 8002790:	2200      	movs	r2, #0
 8002792:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <MX_ADC1_Init+0x98>)
 8002796:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <MX_ADC1_Init+0xa0>)
 8002798:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <MX_ADC1_Init+0x98>)
 800279c:	2200      	movs	r2, #0
 800279e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <MX_ADC1_Init+0x98>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_ADC1_Init+0x98>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <MX_ADC1_Init+0x98>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027b4:	480d      	ldr	r0, [pc, #52]	; (80027ec <MX_ADC1_Init+0x98>)
 80027b6:	f001 fb11 	bl	8003ddc <HAL_ADC_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80027c0:	f000 fcc8 	bl	8003154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80027c4:	2308      	movs	r3, #8
 80027c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027c8:	2301      	movs	r3, #1
 80027ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027d0:	463b      	mov	r3, r7
 80027d2:	4619      	mov	r1, r3
 80027d4:	4805      	ldr	r0, [pc, #20]	; (80027ec <MX_ADC1_Init+0x98>)
 80027d6:	f001 fcaf 	bl	8004138 <HAL_ADC_ConfigChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80027e0:	f000 fcb8 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	200002c8 	.word	0x200002c8
 80027f0:	40012000 	.word	0x40012000
 80027f4:	0f000001 	.word	0x0f000001

080027f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027fe:	463b      	mov	r3, r7
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <MX_ADC2_Init+0x98>)
 800280c:	4a21      	ldr	r2, [pc, #132]	; (8002894 <MX_ADC2_Init+0x9c>)
 800280e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002810:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <MX_ADC2_Init+0x98>)
 8002812:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002816:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002818:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <MX_ADC2_Init+0x98>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800281e:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <MX_ADC2_Init+0x98>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002824:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <MX_ADC2_Init+0x98>)
 8002826:	2200      	movs	r2, #0
 8002828:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800282a:	4b19      	ldr	r3, [pc, #100]	; (8002890 <MX_ADC2_Init+0x98>)
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002832:	4b17      	ldr	r3, [pc, #92]	; (8002890 <MX_ADC2_Init+0x98>)
 8002834:	2200      	movs	r2, #0
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002838:	4b15      	ldr	r3, [pc, #84]	; (8002890 <MX_ADC2_Init+0x98>)
 800283a:	4a17      	ldr	r2, [pc, #92]	; (8002898 <MX_ADC2_Init+0xa0>)
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800283e:	4b14      	ldr	r3, [pc, #80]	; (8002890 <MX_ADC2_Init+0x98>)
 8002840:	2200      	movs	r2, #0
 8002842:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <MX_ADC2_Init+0x98>)
 8002846:	2201      	movs	r2, #1
 8002848:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <MX_ADC2_Init+0x98>)
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002852:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <MX_ADC2_Init+0x98>)
 8002854:	2201      	movs	r2, #1
 8002856:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002858:	480d      	ldr	r0, [pc, #52]	; (8002890 <MX_ADC2_Init+0x98>)
 800285a:	f001 fabf 	bl	8003ddc <HAL_ADC_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002864:	f000 fc76 	bl	8003154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002868:	230d      	movs	r3, #13
 800286a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800286c:	2301      	movs	r3, #1
 800286e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002870:	2300      	movs	r3, #0
 8002872:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002874:	463b      	mov	r3, r7
 8002876:	4619      	mov	r1, r3
 8002878:	4805      	ldr	r0, [pc, #20]	; (8002890 <MX_ADC2_Init+0x98>)
 800287a:	f001 fc5d 	bl	8004138 <HAL_ADC_ConfigChannel>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002884:	f000 fc66 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000310 	.word	0x20000310
 8002894:	40012100 	.word	0x40012100
 8002898:	0f000001 	.word	0x0f000001

0800289c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b092      	sub	sp, #72	; 0x48
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
 80028bc:	615a      	str	r2, [r3, #20]
 80028be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	2220      	movs	r2, #32
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f006 fda4 	bl	8009414 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028cc:	4b32      	ldr	r3, [pc, #200]	; (8002998 <MX_TIM1_Init+0xfc>)
 80028ce:	4a33      	ldr	r2, [pc, #204]	; (800299c <MX_TIM1_Init+0x100>)
 80028d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028d2:	4b31      	ldr	r3, [pc, #196]	; (8002998 <MX_TIM1_Init+0xfc>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d8:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <MX_TIM1_Init+0xfc>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80028de:	4b2e      	ldr	r3, [pc, #184]	; (8002998 <MX_TIM1_Init+0xfc>)
 80028e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e6:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <MX_TIM1_Init+0xfc>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028ec:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <MX_TIM1_Init+0xfc>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f2:	4b29      	ldr	r3, [pc, #164]	; (8002998 <MX_TIM1_Init+0xfc>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80028f8:	4827      	ldr	r0, [pc, #156]	; (8002998 <MX_TIM1_Init+0xfc>)
 80028fa:	f003 fe87 	bl	800660c <HAL_TIM_PWM_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002904:	f000 fc26 	bl	8003154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002910:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002914:	4619      	mov	r1, r3
 8002916:	4820      	ldr	r0, [pc, #128]	; (8002998 <MX_TIM1_Init+0xfc>)
 8002918:	f005 fb56 	bl	8007fc8 <HAL_TIMEx_MasterConfigSynchronization>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002922:	f000 fc17 	bl	8003154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002926:	2360      	movs	r3, #96	; 0x60
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800292e:	2300      	movs	r3, #0
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800293e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002942:	220c      	movs	r2, #12
 8002944:	4619      	mov	r1, r3
 8002946:	4814      	ldr	r0, [pc, #80]	; (8002998 <MX_TIM1_Init+0xfc>)
 8002948:	f004 fc54 	bl	80071f4 <HAL_TIM_PWM_ConfigChannel>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8002952:	f000 fbff 	bl	8003154 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800296a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800296e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002970:	2300      	movs	r3, #0
 8002972:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	4619      	mov	r1, r3
 8002978:	4807      	ldr	r0, [pc, #28]	; (8002998 <MX_TIM1_Init+0xfc>)
 800297a:	f005 fba1 	bl	80080c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8002984:	f000 fbe6 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002988:	4803      	ldr	r0, [pc, #12]	; (8002998 <MX_TIM1_Init+0xfc>)
 800298a:	f000 fe97 	bl	80036bc <HAL_TIM_MspPostInit>

}
 800298e:	bf00      	nop
 8002990:	3748      	adds	r7, #72	; 0x48
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000358 	.word	0x20000358
 800299c:	40010000 	.word	0x40010000

080029a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08e      	sub	sp, #56	; 0x38
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b4:	f107 0320 	add.w	r3, r7, #32
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
 80029cc:	615a      	str	r2, [r3, #20]
 80029ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029d0:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <MX_TIM2_Init+0xe8>)
 80029d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <MX_TIM2_Init+0xe8>)
 80029da:	2259      	movs	r2, #89	; 0x59
 80029dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029de:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <MX_TIM2_Init+0xe8>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80029e4:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <MX_TIM2_Init+0xe8>)
 80029e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80029ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ec:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <MX_TIM2_Init+0xe8>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029f2:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <MX_TIM2_Init+0xe8>)
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029f8:	4823      	ldr	r0, [pc, #140]	; (8002a88 <MX_TIM2_Init+0xe8>)
 80029fa:	f003 fd4f 	bl	800649c <HAL_TIM_Base_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a04:	f000 fba6 	bl	8003154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a12:	4619      	mov	r1, r3
 8002a14:	481c      	ldr	r0, [pc, #112]	; (8002a88 <MX_TIM2_Init+0xe8>)
 8002a16:	f004 fcaf 	bl	8007378 <HAL_TIM_ConfigClockSource>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002a20:	f000 fb98 	bl	8003154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a24:	4818      	ldr	r0, [pc, #96]	; (8002a88 <MX_TIM2_Init+0xe8>)
 8002a26:	f003 fdf1 	bl	800660c <HAL_TIM_PWM_Init>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002a30:	f000 fb90 	bl	8003154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a34:	2300      	movs	r3, #0
 8002a36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a3c:	f107 0320 	add.w	r3, r7, #32
 8002a40:	4619      	mov	r1, r3
 8002a42:	4811      	ldr	r0, [pc, #68]	; (8002a88 <MX_TIM2_Init+0xe8>)
 8002a44:	f005 fac0 	bl	8007fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002a4e:	f000 fb81 	bl	8003154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a52:	2360      	movs	r3, #96	; 0x60
 8002a54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 8002a56:	f240 23ed 	movw	r3, #749	; 0x2ed
 8002a5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	2200      	movs	r2, #0
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4807      	ldr	r0, [pc, #28]	; (8002a88 <MX_TIM2_Init+0xe8>)
 8002a6c:	f004 fbc2 	bl	80071f4 <HAL_TIM_PWM_ConfigChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002a76:	f000 fb6d 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a7a:	4803      	ldr	r0, [pc, #12]	; (8002a88 <MX_TIM2_Init+0xe8>)
 8002a7c:	f000 fe1e 	bl	80036bc <HAL_TIM_MspPostInit>

}
 8002a80:	bf00      	nop
 8002a82:	3738      	adds	r7, #56	; 0x38
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	200003a0 	.word	0x200003a0

08002a8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08e      	sub	sp, #56	; 0x38
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa0:	f107 0320 	add.w	r3, r7, #32
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
 8002ab8:	615a      	str	r2, [r3, #20]
 8002aba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002abc:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <MX_TIM3_Init+0xfc>)
 8002abe:	4a33      	ldr	r2, [pc, #204]	; (8002b8c <MX_TIM3_Init+0x100>)
 8002ac0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 8002ac2:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <MX_TIM3_Init+0xfc>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8002ac8:	4b2f      	ldr	r3, [pc, #188]	; (8002b88 <MX_TIM3_Init+0xfc>)
 8002aca:	2260      	movs	r2, #96	; 0x60
 8002acc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002ace:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <MX_TIM3_Init+0xfc>)
 8002ad0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ad4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad6:	4b2c      	ldr	r3, [pc, #176]	; (8002b88 <MX_TIM3_Init+0xfc>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002adc:	4b2a      	ldr	r3, [pc, #168]	; (8002b88 <MX_TIM3_Init+0xfc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ae2:	4829      	ldr	r0, [pc, #164]	; (8002b88 <MX_TIM3_Init+0xfc>)
 8002ae4:	f003 fcda 	bl	800649c <HAL_TIM_Base_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002aee:	f000 fb31 	bl	8003154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002afc:	4619      	mov	r1, r3
 8002afe:	4822      	ldr	r0, [pc, #136]	; (8002b88 <MX_TIM3_Init+0xfc>)
 8002b00:	f004 fc3a 	bl	8007378 <HAL_TIM_ConfigClockSource>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002b0a:	f000 fb23 	bl	8003154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b0e:	481e      	ldr	r0, [pc, #120]	; (8002b88 <MX_TIM3_Init+0xfc>)
 8002b10:	f003 fd7c 	bl	800660c <HAL_TIM_PWM_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002b1a:	f000 fb1b 	bl	8003154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b26:	f107 0320 	add.w	r3, r7, #32
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4816      	ldr	r0, [pc, #88]	; (8002b88 <MX_TIM3_Init+0xfc>)
 8002b2e:	f005 fa4b 	bl	8007fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002b38:	f000 fb0c 	bl	8003154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b3c:	2360      	movs	r3, #96	; 0x60
 8002b3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	2200      	movs	r2, #0
 8002b50:	4619      	mov	r1, r3
 8002b52:	480d      	ldr	r0, [pc, #52]	; (8002b88 <MX_TIM3_Init+0xfc>)
 8002b54:	f004 fb4e 	bl	80071f4 <HAL_TIM_PWM_ConfigChannel>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002b5e:	f000 faf9 	bl	8003154 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	2204      	movs	r2, #4
 8002b66:	4619      	mov	r1, r3
 8002b68:	4807      	ldr	r0, [pc, #28]	; (8002b88 <MX_TIM3_Init+0xfc>)
 8002b6a:	f004 fb43 	bl	80071f4 <HAL_TIM_PWM_ConfigChannel>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002b74:	f000 faee 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b78:	4803      	ldr	r0, [pc, #12]	; (8002b88 <MX_TIM3_Init+0xfc>)
 8002b7a:	f000 fd9f 	bl	80036bc <HAL_TIM_MspPostInit>

}
 8002b7e:	bf00      	nop
 8002b80:	3738      	adds	r7, #56	; 0x38
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	200003e8 	.word	0x200003e8
 8002b8c:	40000400 	.word	0x40000400

08002b90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b96:	f107 0318 	add.w	r3, r7, #24
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba4:	f107 0310 	add.w	r3, r7, #16
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002bae:	463b      	mov	r3, r7
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002bba:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <MX_TIM4_Init+0xf0>)
 8002bbc:	4a31      	ldr	r2, [pc, #196]	; (8002c84 <MX_TIM4_Init+0xf4>)
 8002bbe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 8002bc0:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <MX_TIM4_Init+0xf0>)
 8002bc2:	f240 321f 	movw	r2, #799	; 0x31f
 8002bc6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <MX_TIM4_Init+0xf0>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8002bce:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <MX_TIM4_Init+0xf0>)
 8002bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bd4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd6:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <MX_TIM4_Init+0xf0>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bdc:	4b28      	ldr	r3, [pc, #160]	; (8002c80 <MX_TIM4_Init+0xf0>)
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002be2:	4827      	ldr	r0, [pc, #156]	; (8002c80 <MX_TIM4_Init+0xf0>)
 8002be4:	f003 fc5a 	bl	800649c <HAL_TIM_Base_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8002bee:	f000 fab1 	bl	8003154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bf6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002bf8:	f107 0318 	add.w	r3, r7, #24
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4820      	ldr	r0, [pc, #128]	; (8002c80 <MX_TIM4_Init+0xf0>)
 8002c00:	f004 fbba 	bl	8007378 <HAL_TIM_ConfigClockSource>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002c0a:	f000 faa3 	bl	8003154 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002c0e:	481c      	ldr	r0, [pc, #112]	; (8002c80 <MX_TIM4_Init+0xf0>)
 8002c10:	f003 fe14 	bl	800683c <HAL_TIM_IC_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002c1a:	f000 fa9b 	bl	8003154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c26:	f107 0310 	add.w	r3, r7, #16
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4814      	ldr	r0, [pc, #80]	; (8002c80 <MX_TIM4_Init+0xf0>)
 8002c2e:	f005 f9cb 	bl	8007fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8002c38:	f000 fa8c 	bl	8003154 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002c3c:	230a      	movs	r3, #10
 8002c3e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c40:	2301      	movs	r3, #1
 8002c42:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002c4c:	463b      	mov	r3, r7
 8002c4e:	2208      	movs	r2, #8
 8002c50:	4619      	mov	r1, r3
 8002c52:	480b      	ldr	r0, [pc, #44]	; (8002c80 <MX_TIM4_Init+0xf0>)
 8002c54:	f004 fa32 	bl	80070bc <HAL_TIM_IC_ConfigChannel>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8002c5e:	f000 fa79 	bl	8003154 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002c62:	463b      	mov	r3, r7
 8002c64:	220c      	movs	r2, #12
 8002c66:	4619      	mov	r1, r3
 8002c68:	4805      	ldr	r0, [pc, #20]	; (8002c80 <MX_TIM4_Init+0xf0>)
 8002c6a:	f004 fa27 	bl	80070bc <HAL_TIM_IC_ConfigChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8002c74:	f000 fa6e 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c78:	bf00      	nop
 8002c7a:	3728      	adds	r7, #40	; 0x28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000430 	.word	0x20000430
 8002c84:	40000800 	.word	0x40000800

08002c88 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c8e:	f107 0308 	add.w	r3, r7, #8
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c9c:	463b      	mov	r3, r7
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <MX_TIM5_Init+0x94>)
 8002ca6:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <MX_TIM5_Init+0x98>)
 8002ca8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 8002caa:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <MX_TIM5_Init+0x94>)
 8002cac:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002cb0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <MX_TIM5_Init+0x94>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002cb8:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <MX_TIM5_Init+0x94>)
 8002cba:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc0:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <MX_TIM5_Init+0x94>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cc6:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <MX_TIM5_Init+0x94>)
 8002cc8:	2280      	movs	r2, #128	; 0x80
 8002cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002ccc:	4813      	ldr	r0, [pc, #76]	; (8002d1c <MX_TIM5_Init+0x94>)
 8002cce:	f003 fbe5 	bl	800649c <HAL_TIM_Base_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002cd8:	f000 fa3c 	bl	8003154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002ce2:	f107 0308 	add.w	r3, r7, #8
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	480c      	ldr	r0, [pc, #48]	; (8002d1c <MX_TIM5_Init+0x94>)
 8002cea:	f004 fb45 	bl	8007378 <HAL_TIM_ConfigClockSource>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002cf4:	f000 fa2e 	bl	8003154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d00:	463b      	mov	r3, r7
 8002d02:	4619      	mov	r1, r3
 8002d04:	4805      	ldr	r0, [pc, #20]	; (8002d1c <MX_TIM5_Init+0x94>)
 8002d06:	f005 f95f 	bl	8007fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002d10:	f000 fa20 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d14:	bf00      	nop
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000478 	.word	0x20000478
 8002d20:	40000c00 	.word	0x40000c00

08002d24 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08c      	sub	sp, #48	; 0x30
 8002d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d2a:	f107 030c 	add.w	r3, r7, #12
 8002d2e:	2224      	movs	r2, #36	; 0x24
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f006 fb6e 	bl	8009414 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d38:	1d3b      	adds	r3, r7, #4
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002d40:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <MX_TIM8_Init+0xa8>)
 8002d42:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <MX_TIM8_Init+0xac>)
 8002d44:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002d46:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <MX_TIM8_Init+0xa8>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <MX_TIM8_Init+0xa8>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002d52:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <MX_TIM8_Init+0xa8>)
 8002d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d58:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d5a:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <MX_TIM8_Init+0xa8>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <MX_TIM8_Init+0xa8>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d66:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <MX_TIM8_Init+0xa8>)
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d74:	2301      	movs	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 12;
 8002d7c:	230c      	movs	r3, #12
 8002d7e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d84:	2301      	movs	r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 12;
 8002d8c:	230c      	movs	r3, #12
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002d90:	f107 030c 	add.w	r3, r7, #12
 8002d94:	4619      	mov	r1, r3
 8002d96:	480d      	ldr	r0, [pc, #52]	; (8002dcc <MX_TIM8_Init+0xa8>)
 8002d98:	f003 ff54 	bl	8006c44 <HAL_TIM_Encoder_Init>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002da2:	f000 f9d7 	bl	8003154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002da6:	2300      	movs	r3, #0
 8002da8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002dae:	1d3b      	adds	r3, r7, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4806      	ldr	r0, [pc, #24]	; (8002dcc <MX_TIM8_Init+0xa8>)
 8002db4:	f005 f908 	bl	8007fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002dbe:	f000 f9c9 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002dc2:	bf00      	nop
 8002dc4:	3730      	adds	r7, #48	; 0x30
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200004c0 	.word	0x200004c0
 8002dd0:	40010400 	.word	0x40010400

08002dd4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <MX_UART5_Init+0x4c>)
 8002dda:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <MX_UART5_Init+0x50>)
 8002ddc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <MX_UART5_Init+0x4c>)
 8002de0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8002de4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <MX_UART5_Init+0x4c>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <MX_UART5_Init+0x4c>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <MX_UART5_Init+0x4c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <MX_UART5_Init+0x4c>)
 8002dfa:	220c      	movs	r2, #12
 8002dfc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <MX_UART5_Init+0x4c>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <MX_UART5_Init+0x4c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e0a:	4805      	ldr	r0, [pc, #20]	; (8002e20 <MX_UART5_Init+0x4c>)
 8002e0c:	f005 f9be 	bl	800818c <HAL_UART_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002e16:	f000 f99d 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000568 	.word	0x20000568
 8002e24:	40005000 	.word	0x40005000

08002e28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <MX_USART1_UART_Init+0x4c>)
 8002e2e:	4a12      	ldr	r2, [pc, #72]	; (8002e78 <MX_USART1_UART_Init+0x50>)
 8002e30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e32:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <MX_USART1_UART_Init+0x4c>)
 8002e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <MX_USART1_UART_Init+0x4c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <MX_USART1_UART_Init+0x4c>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e46:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <MX_USART1_UART_Init+0x4c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <MX_USART1_UART_Init+0x4c>)
 8002e4e:	220c      	movs	r2, #12
 8002e50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e52:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <MX_USART1_UART_Init+0x4c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <MX_USART1_UART_Init+0x4c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e5e:	4805      	ldr	r0, [pc, #20]	; (8002e74 <MX_USART1_UART_Init+0x4c>)
 8002e60:	f005 f994 	bl	800818c <HAL_UART_Init>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e6a:	f000 f973 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200005ac 	.word	0x200005ac
 8002e78:	40011000 	.word	0x40011000

08002e7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <MX_USART2_UART_Init+0x4c>)
 8002e82:	4a12      	ldr	r2, [pc, #72]	; (8002ecc <MX_USART2_UART_Init+0x50>)
 8002e84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <MX_USART2_UART_Init+0x4c>)
 8002e88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <MX_USART2_UART_Init+0x4c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <MX_USART2_UART_Init+0x4c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <MX_USART2_UART_Init+0x4c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ea0:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <MX_USART2_UART_Init+0x4c>)
 8002ea2:	220c      	movs	r2, #12
 8002ea4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <MX_USART2_UART_Init+0x4c>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <MX_USART2_UART_Init+0x4c>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eb2:	4805      	ldr	r0, [pc, #20]	; (8002ec8 <MX_USART2_UART_Init+0x4c>)
 8002eb4:	f005 f96a 	bl	800818c <HAL_UART_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ebe:	f000 f949 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200005f0 	.word	0x200005f0
 8002ecc:	40004400 	.word	0x40004400

08002ed0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ed4:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <MX_USART3_UART_Init+0x4c>)
 8002ed6:	4a12      	ldr	r2, [pc, #72]	; (8002f20 <MX_USART3_UART_Init+0x50>)
 8002ed8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002eda:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <MX_USART3_UART_Init+0x4c>)
 8002edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ee0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <MX_USART3_UART_Init+0x4c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <MX_USART3_UART_Init+0x4c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <MX_USART3_UART_Init+0x4c>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <MX_USART3_UART_Init+0x4c>)
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <MX_USART3_UART_Init+0x4c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <MX_USART3_UART_Init+0x4c>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f06:	4805      	ldr	r0, [pc, #20]	; (8002f1c <MX_USART3_UART_Init+0x4c>)
 8002f08:	f005 f940 	bl	800818c <HAL_UART_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f12:	f000 f91f 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000634 	.word	0x20000634
 8002f20:	40004800 	.word	0x40004800

08002f24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <MX_DMA_Init+0x3c>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a0b      	ldr	r2, [pc, #44]	; (8002f60 <MX_DMA_Init+0x3c>)
 8002f34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <MX_DMA_Init+0x3c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2100      	movs	r1, #0
 8002f4a:	202f      	movs	r0, #47	; 0x2f
 8002f4c:	f001 fc21 	bl	8004792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002f50:	202f      	movs	r0, #47	; 0x2f
 8002f52:	f001 fc3a 	bl	80047ca <HAL_NVIC_EnableIRQ>

}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800

08002f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6a:	f107 0314 	add.w	r3, r7, #20
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
 8002f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	4b59      	ldr	r3, [pc, #356]	; (80030e4 <MX_GPIO_Init+0x180>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a58      	ldr	r2, [pc, #352]	; (80030e4 <MX_GPIO_Init+0x180>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b56      	ldr	r3, [pc, #344]	; (80030e4 <MX_GPIO_Init+0x180>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	4b52      	ldr	r3, [pc, #328]	; (80030e4 <MX_GPIO_Init+0x180>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a51      	ldr	r2, [pc, #324]	; (80030e4 <MX_GPIO_Init+0x180>)
 8002fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b4f      	ldr	r3, [pc, #316]	; (80030e4 <MX_GPIO_Init+0x180>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	4b4b      	ldr	r3, [pc, #300]	; (80030e4 <MX_GPIO_Init+0x180>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a4a      	ldr	r2, [pc, #296]	; (80030e4 <MX_GPIO_Init+0x180>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b48      	ldr	r3, [pc, #288]	; (80030e4 <MX_GPIO_Init+0x180>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	4b44      	ldr	r3, [pc, #272]	; (80030e4 <MX_GPIO_Init+0x180>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	4a43      	ldr	r2, [pc, #268]	; (80030e4 <MX_GPIO_Init+0x180>)
 8002fd8:	f043 0302 	orr.w	r3, r3, #2
 8002fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fde:	4b41      	ldr	r3, [pc, #260]	; (80030e4 <MX_GPIO_Init+0x180>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	607b      	str	r3, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	4b3d      	ldr	r3, [pc, #244]	; (80030e4 <MX_GPIO_Init+0x180>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a3c      	ldr	r2, [pc, #240]	; (80030e4 <MX_GPIO_Init+0x180>)
 8002ff4:	f043 0308 	orr.w	r3, r3, #8
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b3a      	ldr	r3, [pc, #232]	; (80030e4 <MX_GPIO_Init+0x180>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 8003006:	2200      	movs	r2, #0
 8003008:	2102      	movs	r1, #2
 800300a:	4837      	ldr	r0, [pc, #220]	; (80030e8 <MX_GPIO_Init+0x184>)
 800300c:	f002 fbc2 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 8003010:	2200      	movs	r2, #0
 8003012:	2122      	movs	r1, #34	; 0x22
 8003014:	4835      	ldr	r0, [pc, #212]	; (80030ec <MX_GPIO_Init+0x188>)
 8003016:	f002 fbbd 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 800301a:	2200      	movs	r2, #0
 800301c:	f24e 0142 	movw	r1, #57410	; 0xe042
 8003020:	4833      	ldr	r0, [pc, #204]	; (80030f0 <MX_GPIO_Init+0x18c>)
 8003022:	f002 fbb7 	bl	8005794 <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : On_Board_Button_Pin */
  GPIO_InitStruct.Pin = On_Board_Button_Pin;
 8003026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800302a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800302c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(On_Board_Button_GPIO_Port, &GPIO_InitStruct);
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	4619      	mov	r1, r3
 800303c:	482a      	ldr	r0, [pc, #168]	; (80030e8 <MX_GPIO_Init+0x184>)
 800303e:	f002 f9fd 	bl	800543c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 8003042:	2302      	movs	r3, #2
 8003044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003046:	2301      	movs	r3, #1
 8003048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304e:	2300      	movs	r3, #0
 8003050:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	4619      	mov	r1, r3
 8003058:	4823      	ldr	r0, [pc, #140]	; (80030e8 <MX_GPIO_Init+0x184>)
 800305a:	f002 f9ef 	bl	800543c <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 800305e:	2322      	movs	r3, #34	; 0x22
 8003060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003062:	2301      	movs	r3, #1
 8003064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306a:	2300      	movs	r3, #0
 800306c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306e:	f107 0314 	add.w	r3, r7, #20
 8003072:	4619      	mov	r1, r3
 8003074:	481d      	ldr	r0, [pc, #116]	; (80030ec <MX_GPIO_Init+0x188>)
 8003076:	f002 f9e1 	bl	800543c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 800307a:	f24e 0342 	movw	r3, #57410	; 0xe042
 800307e:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003080:	2301      	movs	r3, #1
 8003082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003088:	2300      	movs	r3, #0
 800308a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	4619      	mov	r1, r3
 8003092:	4817      	ldr	r0, [pc, #92]	; (80030f0 <MX_GPIO_Init+0x18c>)
 8003094:	f002 f9d2 	bl	800543c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B1_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B1_Pin|B2_Pin|Motor_Feedback_Pin;
 8003098:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800309c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a6:	f107 0314 	add.w	r3, r7, #20
 80030aa:	4619      	mov	r1, r3
 80030ac:	4810      	ldr	r0, [pc, #64]	; (80030f0 <MX_GPIO_Init+0x18c>)
 80030ae:	f002 f9c5 	bl	800543c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 80030b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 80030c0:	f107 0314 	add.w	r3, r7, #20
 80030c4:	4619      	mov	r1, r3
 80030c6:	4809      	ldr	r0, [pc, #36]	; (80030ec <MX_GPIO_Init+0x188>)
 80030c8:	f002 f9b8 	bl	800543c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80030cc:	2200      	movs	r2, #0
 80030ce:	2100      	movs	r1, #0
 80030d0:	2028      	movs	r0, #40	; 0x28
 80030d2:	f001 fb5e 	bl	8004792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030d6:	2028      	movs	r0, #40	; 0x28
 80030d8:	f001 fb77 	bl	80047ca <HAL_NVIC_EnableIRQ>

}
 80030dc:	bf00      	nop
 80030de:	3728      	adds	r7, #40	; 0x28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40020800 	.word	0x40020800
 80030ec:	40020000 	.word	0x40020000
 80030f0:	40020400 	.word	0x40020400

080030f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	80fb      	strh	r3, [r7, #6]
	//ha meg lett nyomva a nucleon a kék gomb
	if(GPIO_Pin == On_Board_Button_Pin) bFlag[0]=1;
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003104:	d102      	bne.n	800310c <HAL_GPIO_EXTI_Callback+0x18>
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <HAL_GPIO_EXTI_Callback+0x24>)
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	20000248 	.word	0x20000248

0800311c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)Uart_Receive_From_PC_ISR(huart);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <HAL_UART_RxCpltCallback+0x30>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d103      	bne.n	8003134 <HAL_UART_RxCpltCallback+0x18>
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7fe f859 	bl	80011e4 <Uart_Receive_From_PC_ISR>
	else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(huart);

}
 8003132:	e006      	b.n	8003142 <HAL_UART_RxCpltCallback+0x26>
	else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(huart);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a06      	ldr	r2, [pc, #24]	; (8003150 <HAL_UART_RxCpltCallback+0x34>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d102      	bne.n	8003142 <HAL_UART_RxCpltCallback+0x26>
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7fe fb71 	bl	8001824 <Uart_Receive_Thunderboard_ISR>
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	200005ac 	.word	0x200005ac
 8003150:	20000634 	.word	0x20000634

08003154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003158:	b672      	cpsid	i
}
 800315a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800315c:	e7fe      	b.n	800315c <Error_Handler+0x8>
	...

08003160 <Remote_Control_Init>:
#include <math.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
	tEdge[0] = 1000;
 800316a:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <Remote_Control_Init+0x34>)
 800316c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003170:	601a      	str	r2, [r3, #0]
	tEdge[1] = 500;
 8003172:	4b08      	ldr	r3, [pc, #32]	; (8003194 <Remote_Control_Init+0x34>)
 8003174:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003178:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <Remote_Control_Init+0x34>)
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 8003180:	2303      	movs	r3, #3
 8003182:	4a04      	ldr	r2, [pc, #16]	; (8003194 <Remote_Control_Init+0x34>)
 8003184:	6839      	ldr	r1, [r7, #0]
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f003 fbb2 	bl	80068f0 <HAL_TIM_IC_Start_DMA>
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	2000067c 	.word	0x2000067c

08003198 <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
	static int32_t dt1=85;
	static int32_t dt2=85;
	static uint32_t tLow=85;
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 80031a6:	4b56      	ldr	r3, [pc, #344]	; (8003300 <Remote_Control_Task+0x168>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	f0c0 80a2 	bcc.w	80032f6 <Remote_Control_Task+0x15e>
	remote_control_tick = tick + period;
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	4413      	add	r3, r2
 80031b8:	4a51      	ldr	r2, [pc, #324]	; (8003300 <Remote_Control_Task+0x168>)
 80031ba:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 80031bc:	201e      	movs	r0, #30
 80031be:	f001 fb12 	bl	80047e6 <HAL_NVIC_DisableIRQ>
	dt0=abs(tEdge[1]-tEdge[0]);
 80031c2:	4b50      	ldr	r3, [pc, #320]	; (8003304 <Remote_Control_Task+0x16c>)
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4b4f      	ldr	r3, [pc, #316]	; (8003304 <Remote_Control_Task+0x16c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bfb8      	it	lt
 80031d0:	425b      	neglt	r3, r3
 80031d2:	4a4d      	ldr	r2, [pc, #308]	; (8003308 <Remote_Control_Task+0x170>)
 80031d4:	6013      	str	r3, [r2, #0]
	dt1=abs(tEdge[2]-tEdge[1]);
 80031d6:	4b4b      	ldr	r3, [pc, #300]	; (8003304 <Remote_Control_Task+0x16c>)
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	4b4a      	ldr	r3, [pc, #296]	; (8003304 <Remote_Control_Task+0x16c>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bfb8      	it	lt
 80031e4:	425b      	neglt	r3, r3
 80031e6:	4a49      	ldr	r2, [pc, #292]	; (800330c <Remote_Control_Task+0x174>)
 80031e8:	6013      	str	r3, [r2, #0]
	dt2=abs(tEdge[0]-tEdge[2]);
 80031ea:	4b46      	ldr	r3, [pc, #280]	; (8003304 <Remote_Control_Task+0x16c>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b45      	ldr	r3, [pc, #276]	; (8003304 <Remote_Control_Task+0x16c>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bfb8      	it	lt
 80031f8:	425b      	neglt	r3, r3
 80031fa:	4a45      	ldr	r2, [pc, #276]	; (8003310 <Remote_Control_Task+0x178>)
 80031fc:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 80031fe:	201e      	movs	r0, #30
 8003200:	f001 fae3 	bl	80047ca <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 8003204:	4b40      	ldr	r3, [pc, #256]	; (8003308 <Remote_Control_Task+0x170>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f241 3288 	movw	r2, #5000	; 0x1388
 800320c:	4293      	cmp	r3, r2
 800320e:	dd06      	ble.n	800321e <Remote_Control_Task+0x86>
 8003210:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <Remote_Control_Task+0x170>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003218:	33ff      	adds	r3, #255	; 0xff
 800321a:	4a3b      	ldr	r2, [pc, #236]	; (8003308 <Remote_Control_Task+0x170>)
 800321c:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 800321e:	4b3b      	ldr	r3, [pc, #236]	; (800330c <Remote_Control_Task+0x174>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f241 3288 	movw	r2, #5000	; 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	dd06      	ble.n	8003238 <Remote_Control_Task+0xa0>
 800322a:	4b38      	ldr	r3, [pc, #224]	; (800330c <Remote_Control_Task+0x174>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003232:	33ff      	adds	r3, #255	; 0xff
 8003234:	4a35      	ldr	r2, [pc, #212]	; (800330c <Remote_Control_Task+0x174>)
 8003236:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 8003238:	4b35      	ldr	r3, [pc, #212]	; (8003310 <Remote_Control_Task+0x178>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	dd06      	ble.n	8003252 <Remote_Control_Task+0xba>
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <Remote_Control_Task+0x178>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800324c:	33ff      	adds	r3, #255	; 0xff
 800324e:	4a30      	ldr	r2, [pc, #192]	; (8003310 <Remote_Control_Task+0x178>)
 8003250:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 8003252:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <Remote_Control_Task+0x170>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4b2d      	ldr	r3, [pc, #180]	; (800330c <Remote_Control_Task+0x174>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	da0b      	bge.n	8003276 <Remote_Control_Task+0xde>
 800325e:	4b2a      	ldr	r3, [pc, #168]	; (8003308 <Remote_Control_Task+0x170>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <Remote_Control_Task+0x178>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	da05      	bge.n	8003276 <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 800326a:	4b27      	ldr	r3, [pc, #156]	; (8003308 <Remote_Control_Task+0x170>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	4b28      	ldr	r3, [pc, #160]	; (8003314 <Remote_Control_Task+0x17c>)
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e016      	b.n	80032a4 <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 8003276:	4b25      	ldr	r3, [pc, #148]	; (800330c <Remote_Control_Task+0x174>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	4b23      	ldr	r3, [pc, #140]	; (8003308 <Remote_Control_Task+0x170>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	da0b      	bge.n	800329a <Remote_Control_Task+0x102>
 8003282:	4b22      	ldr	r3, [pc, #136]	; (800330c <Remote_Control_Task+0x174>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b22      	ldr	r3, [pc, #136]	; (8003310 <Remote_Control_Task+0x178>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	da05      	bge.n	800329a <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 800328e:	4b1f      	ldr	r3, [pc, #124]	; (800330c <Remote_Control_Task+0x174>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	4b1f      	ldr	r3, [pc, #124]	; (8003314 <Remote_Control_Task+0x17c>)
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e004      	b.n	80032a4 <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <Remote_Control_Task+0x178>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <Remote_Control_Task+0x17c>)
 80032a2:	601a      	str	r2, [r3, #0]
	sprintf(string,"%d\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 10);
	remote_control_tick = tick + 1000;
#endif

	if((tLow>70 && tLow<100) || tLow==1000)
 80032a4:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <Remote_Control_Task+0x17c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b46      	cmp	r3, #70	; 0x46
 80032aa:	d903      	bls.n	80032b4 <Remote_Control_Task+0x11c>
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <Remote_Control_Task+0x17c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b63      	cmp	r3, #99	; 0x63
 80032b2:	d904      	bls.n	80032be <Remote_Control_Task+0x126>
 80032b4:	4b17      	ldr	r3, [pc, #92]	; (8003314 <Remote_Control_Task+0x17c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032bc:	d109      	bne.n	80032d2 <Remote_Control_Task+0x13a>
	{
		LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
 80032be:	2200      	movs	r2, #0
 80032c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032c4:	4814      	ldr	r0, [pc, #80]	; (8003318 <Remote_Control_Task+0x180>)
 80032c6:	f002 fa65 	bl	8005794 <HAL_GPIO_WritePin>
		motorEnRemote=0;//állítsuk le a motort ha meghuzzuk a ravaszt
 80032ca:	4b14      	ldr	r3, [pc, #80]	; (800331c <Remote_Control_Task+0x184>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
 80032d0:	e012      	b.n	80032f8 <Remote_Control_Task+0x160>
	}
	else
	{
		LED_R(0);
 80032d2:	2201      	movs	r2, #1
 80032d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032d8:	480f      	ldr	r0, [pc, #60]	; (8003318 <Remote_Control_Task+0x180>)
 80032da:	f002 fa5b 	bl	8005794 <HAL_GPIO_WritePin>
		if(tLow <= 70) motorEnRemote=1;
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <Remote_Control_Task+0x17c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b46      	cmp	r3, #70	; 0x46
 80032e4:	d803      	bhi.n	80032ee <Remote_Control_Task+0x156>
 80032e6:	4b0d      	ldr	r3, [pc, #52]	; (800331c <Remote_Control_Task+0x184>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e004      	b.n	80032f8 <Remote_Control_Task+0x160>
		else motorEnRemote=2;
 80032ee:	4b0b      	ldr	r3, [pc, #44]	; (800331c <Remote_Control_Task+0x184>)
 80032f0:	2202      	movs	r2, #2
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e000      	b.n	80032f8 <Remote_Control_Task+0x160>
	if(remote_control_tick>tick) return;
 80032f6:	bf00      	nop

	}
}
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000688 	.word	0x20000688
 8003304:	2000067c 	.word	0x2000067c
 8003308:	2000003c 	.word	0x2000003c
 800330c:	20000040 	.word	0x20000040
 8003310:	20000044 	.word	0x20000044
 8003314:	20000048 	.word	0x20000048
 8003318:	40020400 	.word	0x40020400
 800331c:	20000678 	.word	0x20000678

08003320 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	4b10      	ldr	r3, [pc, #64]	; (800336c <HAL_MspInit+0x4c>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	4a0f      	ldr	r2, [pc, #60]	; (800336c <HAL_MspInit+0x4c>)
 8003330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003334:	6453      	str	r3, [r2, #68]	; 0x44
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <HAL_MspInit+0x4c>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	4b09      	ldr	r3, [pc, #36]	; (800336c <HAL_MspInit+0x4c>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <HAL_MspInit+0x4c>)
 800334c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003350:	6413      	str	r3, [r2, #64]	; 0x40
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_MspInit+0x4c>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800335e:	2007      	movs	r0, #7
 8003360:	f001 fa0c 	bl	800477c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40023800 	.word	0x40023800

08003370 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08c      	sub	sp, #48	; 0x30
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003378:	f107 031c 	add.w	r3, r7, #28
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2e      	ldr	r2, [pc, #184]	; (8003448 <HAL_ADC_MspInit+0xd8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d128      	bne.n	80033e4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
 8003396:	4b2d      	ldr	r3, [pc, #180]	; (800344c <HAL_ADC_MspInit+0xdc>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	4a2c      	ldr	r2, [pc, #176]	; (800344c <HAL_ADC_MspInit+0xdc>)
 800339c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a0:	6453      	str	r3, [r2, #68]	; 0x44
 80033a2:	4b2a      	ldr	r3, [pc, #168]	; (800344c <HAL_ADC_MspInit+0xdc>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	4b26      	ldr	r3, [pc, #152]	; (800344c <HAL_ADC_MspInit+0xdc>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a25      	ldr	r2, [pc, #148]	; (800344c <HAL_ADC_MspInit+0xdc>)
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b23      	ldr	r3, [pc, #140]	; (800344c <HAL_ADC_MspInit+0xdc>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 80033ca:	2301      	movs	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ce:	2303      	movs	r3, #3
 80033d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 80033d6:	f107 031c 	add.w	r3, r7, #28
 80033da:	4619      	mov	r1, r3
 80033dc:	481c      	ldr	r0, [pc, #112]	; (8003450 <HAL_ADC_MspInit+0xe0>)
 80033de:	f002 f82d 	bl	800543c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80033e2:	e02c      	b.n	800343e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1a      	ldr	r2, [pc, #104]	; (8003454 <HAL_ADC_MspInit+0xe4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d127      	bne.n	800343e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	4b16      	ldr	r3, [pc, #88]	; (800344c <HAL_ADC_MspInit+0xdc>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	4a15      	ldr	r2, [pc, #84]	; (800344c <HAL_ADC_MspInit+0xdc>)
 80033f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033fc:	6453      	str	r3, [r2, #68]	; 0x44
 80033fe:	4b13      	ldr	r3, [pc, #76]	; (800344c <HAL_ADC_MspInit+0xdc>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	4b0f      	ldr	r3, [pc, #60]	; (800344c <HAL_ADC_MspInit+0xdc>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	4a0e      	ldr	r2, [pc, #56]	; (800344c <HAL_ADC_MspInit+0xdc>)
 8003414:	f043 0304 	orr.w	r3, r3, #4
 8003418:	6313      	str	r3, [r2, #48]	; 0x30
 800341a:	4b0c      	ldr	r3, [pc, #48]	; (800344c <HAL_ADC_MspInit+0xdc>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Bat_Pin;
 8003426:	2308      	movs	r3, #8
 8003428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800342a:	2303      	movs	r3, #3
 800342c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_Bat_GPIO_Port, &GPIO_InitStruct);
 8003432:	f107 031c 	add.w	r3, r7, #28
 8003436:	4619      	mov	r1, r3
 8003438:	4807      	ldr	r0, [pc, #28]	; (8003458 <HAL_ADC_MspInit+0xe8>)
 800343a:	f001 ffff 	bl	800543c <HAL_GPIO_Init>
}
 800343e:	bf00      	nop
 8003440:	3730      	adds	r7, #48	; 0x30
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40012000 	.word	0x40012000
 800344c:	40023800 	.word	0x40023800
 8003450:	40020400 	.word	0x40020400
 8003454:	40012100 	.word	0x40012100
 8003458:	40020800 	.word	0x40020800

0800345c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0b      	ldr	r2, [pc, #44]	; (8003498 <HAL_TIM_PWM_MspInit+0x3c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d10d      	bne.n	800348a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <HAL_TIM_PWM_MspInit+0x40>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	4a09      	ldr	r2, [pc, #36]	; (800349c <HAL_TIM_PWM_MspInit+0x40>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6453      	str	r3, [r2, #68]	; 0x44
 800347e:	4b07      	ldr	r3, [pc, #28]	; (800349c <HAL_TIM_PWM_MspInit+0x40>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40010000 	.word	0x40010000
 800349c:	40023800 	.word	0x40023800

080034a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08c      	sub	sp, #48	; 0x30
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a8:	f107 031c 	add.w	r3, r7, #28
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	60da      	str	r2, [r3, #12]
 80034b6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c0:	d116      	bne.n	80034f0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	4b52      	ldr	r3, [pc, #328]	; (8003610 <HAL_TIM_Base_MspInit+0x170>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	4a51      	ldr	r2, [pc, #324]	; (8003610 <HAL_TIM_Base_MspInit+0x170>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	6413      	str	r3, [r2, #64]	; 0x40
 80034d2:	4b4f      	ldr	r3, [pc, #316]	; (8003610 <HAL_TIM_Base_MspInit+0x170>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034de:	2200      	movs	r2, #0
 80034e0:	2100      	movs	r1, #0
 80034e2:	201c      	movs	r0, #28
 80034e4:	f001 f955 	bl	8004792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034e8:	201c      	movs	r0, #28
 80034ea:	f001 f96e 	bl	80047ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80034ee:	e08b      	b.n	8003608 <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM3)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a47      	ldr	r2, [pc, #284]	; (8003614 <HAL_TIM_Base_MspInit+0x174>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10e      	bne.n	8003518 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	4b44      	ldr	r3, [pc, #272]	; (8003610 <HAL_TIM_Base_MspInit+0x170>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	4a43      	ldr	r2, [pc, #268]	; (8003610 <HAL_TIM_Base_MspInit+0x170>)
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	6413      	str	r3, [r2, #64]	; 0x40
 800350a:	4b41      	ldr	r3, [pc, #260]	; (8003610 <HAL_TIM_Base_MspInit+0x170>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	697b      	ldr	r3, [r7, #20]
}
 8003516:	e077      	b.n	8003608 <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM4)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a3e      	ldr	r2, [pc, #248]	; (8003618 <HAL_TIM_Base_MspInit+0x178>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d15f      	bne.n	80035e2 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	4b3a      	ldr	r3, [pc, #232]	; (8003610 <HAL_TIM_Base_MspInit+0x170>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	4a39      	ldr	r2, [pc, #228]	; (8003610 <HAL_TIM_Base_MspInit+0x170>)
 800352c:	f043 0304 	orr.w	r3, r3, #4
 8003530:	6413      	str	r3, [r2, #64]	; 0x40
 8003532:	4b37      	ldr	r3, [pc, #220]	; (8003610 <HAL_TIM_Base_MspInit+0x170>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	4b33      	ldr	r3, [pc, #204]	; (8003610 <HAL_TIM_Base_MspInit+0x170>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a32      	ldr	r2, [pc, #200]	; (8003610 <HAL_TIM_Base_MspInit+0x170>)
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b30      	ldr	r3, [pc, #192]	; (8003610 <HAL_TIM_Base_MspInit+0x170>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 800355a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800355e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003560:	2302      	movs	r3, #2
 8003562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003568:	2300      	movs	r3, #0
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800356c:	2302      	movs	r3, #2
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003570:	f107 031c 	add.w	r3, r7, #28
 8003574:	4619      	mov	r1, r3
 8003576:	4829      	ldr	r0, [pc, #164]	; (800361c <HAL_TIM_Base_MspInit+0x17c>)
 8003578:	f001 ff60 	bl	800543c <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 800357c:	4b28      	ldr	r3, [pc, #160]	; (8003620 <HAL_TIM_Base_MspInit+0x180>)
 800357e:	4a29      	ldr	r2, [pc, #164]	; (8003624 <HAL_TIM_Base_MspInit+0x184>)
 8003580:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8003582:	4b27      	ldr	r3, [pc, #156]	; (8003620 <HAL_TIM_Base_MspInit+0x180>)
 8003584:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003588:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800358a:	4b25      	ldr	r3, [pc, #148]	; (8003620 <HAL_TIM_Base_MspInit+0x180>)
 800358c:	2200      	movs	r2, #0
 800358e:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003590:	4b23      	ldr	r3, [pc, #140]	; (8003620 <HAL_TIM_Base_MspInit+0x180>)
 8003592:	2200      	movs	r2, #0
 8003594:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003596:	4b22      	ldr	r3, [pc, #136]	; (8003620 <HAL_TIM_Base_MspInit+0x180>)
 8003598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800359c:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800359e:	4b20      	ldr	r3, [pc, #128]	; (8003620 <HAL_TIM_Base_MspInit+0x180>)
 80035a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035a4:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <HAL_TIM_Base_MspInit+0x180>)
 80035a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035ac:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 80035ae:	4b1c      	ldr	r3, [pc, #112]	; (8003620 <HAL_TIM_Base_MspInit+0x180>)
 80035b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035b4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80035b6:	4b1a      	ldr	r3, [pc, #104]	; (8003620 <HAL_TIM_Base_MspInit+0x180>)
 80035b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035bc:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035be:	4b18      	ldr	r3, [pc, #96]	; (8003620 <HAL_TIM_Base_MspInit+0x180>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80035c4:	4816      	ldr	r0, [pc, #88]	; (8003620 <HAL_TIM_Base_MspInit+0x180>)
 80035c6:	f001 f929 	bl	800481c <HAL_DMA_Init>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 80035d0:	f7ff fdc0 	bl	8003154 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a12      	ldr	r2, [pc, #72]	; (8003620 <HAL_TIM_Base_MspInit+0x180>)
 80035d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80035da:	4a11      	ldr	r2, [pc, #68]	; (8003620 <HAL_TIM_Base_MspInit+0x180>)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6393      	str	r3, [r2, #56]	; 0x38
}
 80035e0:	e012      	b.n	8003608 <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM5)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a10      	ldr	r2, [pc, #64]	; (8003628 <HAL_TIM_Base_MspInit+0x188>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d10d      	bne.n	8003608 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	4b07      	ldr	r3, [pc, #28]	; (8003610 <HAL_TIM_Base_MspInit+0x170>)
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	4a06      	ldr	r2, [pc, #24]	; (8003610 <HAL_TIM_Base_MspInit+0x170>)
 80035f6:	f043 0308 	orr.w	r3, r3, #8
 80035fa:	6413      	str	r3, [r2, #64]	; 0x40
 80035fc:	4b04      	ldr	r3, [pc, #16]	; (8003610 <HAL_TIM_Base_MspInit+0x170>)
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]
}
 8003608:	bf00      	nop
 800360a:	3730      	adds	r7, #48	; 0x30
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40023800 	.word	0x40023800
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800
 800361c:	40020400 	.word	0x40020400
 8003620:	20000508 	.word	0x20000508
 8003624:	400260b8 	.word	0x400260b8
 8003628:	40000c00 	.word	0x40000c00

0800362c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	; 0x28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_TIM_Encoder_MspInit+0x84>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d12b      	bne.n	80036a6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	4a17      	ldr	r2, [pc, #92]	; (80036b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003658:	f043 0302 	orr.w	r3, r3, #2
 800365c:	6453      	str	r3, [r2, #68]	; 0x44
 800365e:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4a10      	ldr	r2, [pc, #64]	; (80036b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003674:	f043 0304 	orr.w	r3, r3, #4
 8003678:	6313      	str	r3, [r2, #48]	; 0x30
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <HAL_TIM_Encoder_MspInit+0x88>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003686:	23c0      	movs	r3, #192	; 0xc0
 8003688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368a:	2302      	movs	r3, #2
 800368c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003692:	2300      	movs	r3, #0
 8003694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003696:	2303      	movs	r3, #3
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800369a:	f107 0314 	add.w	r3, r7, #20
 800369e:	4619      	mov	r1, r3
 80036a0:	4805      	ldr	r0, [pc, #20]	; (80036b8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80036a2:	f001 fecb 	bl	800543c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80036a6:	bf00      	nop
 80036a8:	3728      	adds	r7, #40	; 0x28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40010400 	.word	0x40010400
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40020800 	.word	0x40020800

080036bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	60da      	str	r2, [r3, #12]
 80036d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a37      	ldr	r2, [pc, #220]	; (80037b8 <HAL_TIM_MspPostInit+0xfc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d11f      	bne.n	800371e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	4b36      	ldr	r3, [pc, #216]	; (80037bc <HAL_TIM_MspPostInit+0x100>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	4a35      	ldr	r2, [pc, #212]	; (80037bc <HAL_TIM_MspPostInit+0x100>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6313      	str	r3, [r2, #48]	; 0x30
 80036ee:	4b33      	ldr	r3, [pc, #204]	; (80037bc <HAL_TIM_MspPostInit+0x100>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 80036fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003700:	2302      	movs	r3, #2
 8003702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2300      	movs	r3, #0
 8003706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003708:	2300      	movs	r3, #0
 800370a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800370c:	2301      	movs	r3, #1
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	4619      	mov	r1, r3
 8003716:	482a      	ldr	r0, [pc, #168]	; (80037c0 <HAL_TIM_MspPostInit+0x104>)
 8003718:	f001 fe90 	bl	800543c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800371c:	e047      	b.n	80037ae <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003726:	d11f      	bne.n	8003768 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	4b23      	ldr	r3, [pc, #140]	; (80037bc <HAL_TIM_MspPostInit+0x100>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	4a22      	ldr	r2, [pc, #136]	; (80037bc <HAL_TIM_MspPostInit+0x100>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6313      	str	r3, [r2, #48]	; 0x30
 8003738:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_TIM_MspPostInit+0x100>)
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 8003744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374a:	2302      	movs	r3, #2
 800374c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003752:	2300      	movs	r3, #0
 8003754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003756:	2301      	movs	r3, #1
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 800375a:	f107 0314 	add.w	r3, r7, #20
 800375e:	4619      	mov	r1, r3
 8003760:	4817      	ldr	r0, [pc, #92]	; (80037c0 <HAL_TIM_MspPostInit+0x104>)
 8003762:	f001 fe6b 	bl	800543c <HAL_GPIO_Init>
}
 8003766:	e022      	b.n	80037ae <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a15      	ldr	r2, [pc, #84]	; (80037c4 <HAL_TIM_MspPostInit+0x108>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d11d      	bne.n	80037ae <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_TIM_MspPostInit+0x100>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	4a10      	ldr	r2, [pc, #64]	; (80037bc <HAL_TIM_MspPostInit+0x100>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	6313      	str	r3, [r2, #48]	; 0x30
 8003782:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <HAL_TIM_MspPostInit+0x100>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 800378e:	23c0      	movs	r3, #192	; 0xc0
 8003790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003792:	2302      	movs	r3, #2
 8003794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379a:	2300      	movs	r3, #0
 800379c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800379e:	2302      	movs	r3, #2
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a2:	f107 0314 	add.w	r3, r7, #20
 80037a6:	4619      	mov	r1, r3
 80037a8:	4805      	ldr	r0, [pc, #20]	; (80037c0 <HAL_TIM_MspPostInit+0x104>)
 80037aa:	f001 fe47 	bl	800543c <HAL_GPIO_Init>
}
 80037ae:	bf00      	nop
 80037b0:	3728      	adds	r7, #40	; 0x28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40020000 	.word	0x40020000
 80037c4:	40000400 	.word	0x40000400

080037c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b090      	sub	sp, #64	; 0x40
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a7c      	ldr	r2, [pc, #496]	; (80039d8 <HAL_UART_MspInit+0x210>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d14b      	bne.n	8003882 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ee:	4b7b      	ldr	r3, [pc, #492]	; (80039dc <HAL_UART_MspInit+0x214>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	4a7a      	ldr	r2, [pc, #488]	; (80039dc <HAL_UART_MspInit+0x214>)
 80037f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f8:	6413      	str	r3, [r2, #64]	; 0x40
 80037fa:	4b78      	ldr	r3, [pc, #480]	; (80039dc <HAL_UART_MspInit+0x214>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
 800380a:	4b74      	ldr	r3, [pc, #464]	; (80039dc <HAL_UART_MspInit+0x214>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4a73      	ldr	r2, [pc, #460]	; (80039dc <HAL_UART_MspInit+0x214>)
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	6313      	str	r3, [r2, #48]	; 0x30
 8003816:	4b71      	ldr	r3, [pc, #452]	; (80039dc <HAL_UART_MspInit+0x214>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	623b      	str	r3, [r7, #32]
 8003826:	4b6d      	ldr	r3, [pc, #436]	; (80039dc <HAL_UART_MspInit+0x214>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4a6c      	ldr	r2, [pc, #432]	; (80039dc <HAL_UART_MspInit+0x214>)
 800382c:	f043 0308 	orr.w	r3, r3, #8
 8003830:	6313      	str	r3, [r2, #48]	; 0x30
 8003832:	4b6a      	ldr	r3, [pc, #424]	; (80039dc <HAL_UART_MspInit+0x214>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	623b      	str	r3, [r7, #32]
 800383c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 800383e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003844:	2302      	movs	r3, #2
 8003846:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	2300      	movs	r3, #0
 800384a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384c:	2303      	movs	r3, #3
 800384e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003850:	2308      	movs	r3, #8
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 8003854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003858:	4619      	mov	r1, r3
 800385a:	4861      	ldr	r0, [pc, #388]	; (80039e0 <HAL_UART_MspInit+0x218>)
 800385c:	f001 fdee 	bl	800543c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 8003860:	2304      	movs	r3, #4
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003864:	2302      	movs	r3, #2
 8003866:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003868:	2300      	movs	r3, #0
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386c:	2303      	movs	r3, #3
 800386e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003870:	2308      	movs	r3, #8
 8003872:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 8003874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003878:	4619      	mov	r1, r3
 800387a:	485a      	ldr	r0, [pc, #360]	; (80039e4 <HAL_UART_MspInit+0x21c>)
 800387c:	f001 fdde 	bl	800543c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003880:	e0a6      	b.n	80039d0 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a58      	ldr	r2, [pc, #352]	; (80039e8 <HAL_UART_MspInit+0x220>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d135      	bne.n	80038f8 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 800388c:	2300      	movs	r3, #0
 800388e:	61fb      	str	r3, [r7, #28]
 8003890:	4b52      	ldr	r3, [pc, #328]	; (80039dc <HAL_UART_MspInit+0x214>)
 8003892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003894:	4a51      	ldr	r2, [pc, #324]	; (80039dc <HAL_UART_MspInit+0x214>)
 8003896:	f043 0310 	orr.w	r3, r3, #16
 800389a:	6453      	str	r3, [r2, #68]	; 0x44
 800389c:	4b4f      	ldr	r3, [pc, #316]	; (80039dc <HAL_UART_MspInit+0x214>)
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a8:	2300      	movs	r3, #0
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	4b4b      	ldr	r3, [pc, #300]	; (80039dc <HAL_UART_MspInit+0x214>)
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	4a4a      	ldr	r2, [pc, #296]	; (80039dc <HAL_UART_MspInit+0x214>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6313      	str	r3, [r2, #48]	; 0x30
 80038b8:	4b48      	ldr	r3, [pc, #288]	; (80039dc <HAL_UART_MspInit+0x214>)
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 80038c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ca:	2302      	movs	r3, #2
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d2:	2303      	movs	r3, #3
 80038d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038d6:	2307      	movs	r3, #7
 80038d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038de:	4619      	mov	r1, r3
 80038e0:	4842      	ldr	r0, [pc, #264]	; (80039ec <HAL_UART_MspInit+0x224>)
 80038e2:	f001 fdab 	bl	800543c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80038e6:	2200      	movs	r2, #0
 80038e8:	2100      	movs	r1, #0
 80038ea:	2025      	movs	r0, #37	; 0x25
 80038ec:	f000 ff51 	bl	8004792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038f0:	2025      	movs	r0, #37	; 0x25
 80038f2:	f000 ff6a 	bl	80047ca <HAL_NVIC_EnableIRQ>
}
 80038f6:	e06b      	b.n	80039d0 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a3c      	ldr	r2, [pc, #240]	; (80039f0 <HAL_UART_MspInit+0x228>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d134      	bne.n	800396c <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	4b35      	ldr	r3, [pc, #212]	; (80039dc <HAL_UART_MspInit+0x214>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	4a34      	ldr	r2, [pc, #208]	; (80039dc <HAL_UART_MspInit+0x214>)
 800390c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003910:	6413      	str	r3, [r2, #64]	; 0x40
 8003912:	4b32      	ldr	r3, [pc, #200]	; (80039dc <HAL_UART_MspInit+0x214>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <HAL_UART_MspInit+0x214>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a2d      	ldr	r2, [pc, #180]	; (80039dc <HAL_UART_MspInit+0x214>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b2b      	ldr	r3, [pc, #172]	; (80039dc <HAL_UART_MspInit+0x214>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800393a:	230c      	movs	r3, #12
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393e:	2302      	movs	r3, #2
 8003940:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003942:	2300      	movs	r3, #0
 8003944:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003946:	2303      	movs	r3, #3
 8003948:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800394a:	2307      	movs	r3, #7
 800394c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003952:	4619      	mov	r1, r3
 8003954:	4825      	ldr	r0, [pc, #148]	; (80039ec <HAL_UART_MspInit+0x224>)
 8003956:	f001 fd71 	bl	800543c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800395a:	2200      	movs	r2, #0
 800395c:	2100      	movs	r1, #0
 800395e:	2026      	movs	r0, #38	; 0x26
 8003960:	f000 ff17 	bl	8004792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003964:	2026      	movs	r0, #38	; 0x26
 8003966:	f000 ff30 	bl	80047ca <HAL_NVIC_EnableIRQ>
}
 800396a:	e031      	b.n	80039d0 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a20      	ldr	r2, [pc, #128]	; (80039f4 <HAL_UART_MspInit+0x22c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d12c      	bne.n	80039d0 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	4b18      	ldr	r3, [pc, #96]	; (80039dc <HAL_UART_MspInit+0x214>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	4a17      	ldr	r2, [pc, #92]	; (80039dc <HAL_UART_MspInit+0x214>)
 8003980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003984:	6413      	str	r3, [r2, #64]	; 0x40
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <HAL_UART_MspInit+0x214>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <HAL_UART_MspInit+0x214>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	4a10      	ldr	r2, [pc, #64]	; (80039dc <HAL_UART_MspInit+0x214>)
 800399c:	f043 0304 	orr.w	r3, r3, #4
 80039a0:	6313      	str	r3, [r2, #48]	; 0x30
 80039a2:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <HAL_UART_MspInit+0x214>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 80039ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80039b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b4:	2302      	movs	r3, #2
 80039b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039bc:	2303      	movs	r3, #3
 80039be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039c0:	2307      	movs	r3, #7
 80039c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039c8:	4619      	mov	r1, r3
 80039ca:	4805      	ldr	r0, [pc, #20]	; (80039e0 <HAL_UART_MspInit+0x218>)
 80039cc:	f001 fd36 	bl	800543c <HAL_GPIO_Init>
}
 80039d0:	bf00      	nop
 80039d2:	3740      	adds	r7, #64	; 0x40
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40005000 	.word	0x40005000
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40020800 	.word	0x40020800
 80039e4:	40020c00 	.word	0x40020c00
 80039e8:	40011000 	.word	0x40011000
 80039ec:	40020000 	.word	0x40020000
 80039f0:	40004400 	.word	0x40004400
 80039f4:	40004800 	.word	0x40004800

080039f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039fc:	e7fe      	b.n	80039fc <NMI_Handler+0x4>

080039fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039fe:	b480      	push	{r7}
 8003a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a02:	e7fe      	b.n	8003a02 <HardFault_Handler+0x4>

08003a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a08:	e7fe      	b.n	8003a08 <MemManage_Handler+0x4>

08003a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a0e:	e7fe      	b.n	8003a0e <BusFault_Handler+0x4>

08003a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a14:	e7fe      	b.n	8003a14 <UsageFault_Handler+0x4>

08003a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a16:	b480      	push	{r7}
 8003a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a32:	b480      	push	{r7}
 8003a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a36:	bf00      	nop
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a44:	f000 f986 	bl	8003d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a48:	bf00      	nop
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a50:	4802      	ldr	r0, [pc, #8]	; (8003a5c <TIM2_IRQHandler+0x10>)
 8003a52:	f003 fa2b 	bl	8006eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	200003a0 	.word	0x200003a0

08003a60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a64:	4802      	ldr	r0, [pc, #8]	; (8003a70 <USART1_IRQHandler+0x10>)
 8003a66:	f004 fd43 	bl	80084f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	200005ac 	.word	0x200005ac

08003a74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <USART2_IRQHandler+0x10>)
 8003a7a:	f004 fd39 	bl	80084f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	200005f0 	.word	0x200005f0

08003a88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(On_Board_Button_Pin);
 8003a8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a90:	f001 feb4 	bl	80057fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a94:	bf00      	nop
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003a9c:	4802      	ldr	r0, [pc, #8]	; (8003aa8 <DMA1_Stream7_IRQHandler+0x10>)
 8003a9e:	f001 f855 	bl	8004b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000508 	.word	0x20000508

08003aac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
	return 1;
 8003ab0:	2301      	movs	r3, #1
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <_kill>:

int _kill(int pid, int sig)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ac6:	f005 fc7b 	bl	80093c0 <__errno>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2216      	movs	r2, #22
 8003ace:	601a      	str	r2, [r3, #0]
	return -1;
 8003ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <_exit>:

void _exit (int status)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff ffe7 	bl	8003abc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003aee:	e7fe      	b.n	8003aee <_exit+0x12>

08003af0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	e00a      	b.n	8003b18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b02:	f3af 8000 	nop.w
 8003b06:	4601      	mov	r1, r0
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	60ba      	str	r2, [r7, #8]
 8003b0e:	b2ca      	uxtb	r2, r1
 8003b10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	3301      	adds	r3, #1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	dbf0      	blt.n	8003b02 <_read+0x12>
	}

return len;
 8003b20:	687b      	ldr	r3, [r7, #4]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b086      	sub	sp, #24
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	e009      	b.n	8003b50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	60ba      	str	r2, [r7, #8]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	dbf1      	blt.n	8003b3c <_write+0x12>
	}
	return len;
 8003b58:	687b      	ldr	r3, [r7, #4]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <_close>:

int _close(int file)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
	return -1;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b8a:	605a      	str	r2, [r3, #4]
	return 0;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <_isatty>:

int _isatty(int file)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
	return 1;
 8003ba2:	2301      	movs	r3, #1
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
	return 0;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bd4:	4a14      	ldr	r2, [pc, #80]	; (8003c28 <_sbrk+0x5c>)
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <_sbrk+0x60>)
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003be0:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <_sbrk+0x64>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d102      	bne.n	8003bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <_sbrk+0x64>)
 8003bea:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <_sbrk+0x68>)
 8003bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bee:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <_sbrk+0x64>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d207      	bcs.n	8003c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bfc:	f005 fbe0 	bl	80093c0 <__errno>
 8003c00:	4603      	mov	r3, r0
 8003c02:	220c      	movs	r2, #12
 8003c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c06:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0a:	e009      	b.n	8003c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <_sbrk+0x64>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <_sbrk+0x64>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4413      	add	r3, r2
 8003c1a:	4a05      	ldr	r2, [pc, #20]	; (8003c30 <_sbrk+0x64>)
 8003c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20020000 	.word	0x20020000
 8003c2c:	00000400 	.word	0x00000400
 8003c30:	2000068c 	.word	0x2000068c
 8003c34:	200006c8 	.word	0x200006c8

08003c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <SystemInit+0x20>)
 8003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c42:	4a05      	ldr	r2, [pc, #20]	; (8003c58 <SystemInit+0x20>)
 8003c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000ed00 	.word	0xe000ed00

08003c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 8003c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c60:	480d      	ldr	r0, [pc, #52]	; (8003c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c62:	490e      	ldr	r1, [pc, #56]	; (8003c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c64:	4a0e      	ldr	r2, [pc, #56]	; (8003ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c68:	e002      	b.n	8003c70 <LoopCopyDataInit>

08003c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c6e:	3304      	adds	r3, #4

08003c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c74:	d3f9      	bcc.n	8003c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c76:	4a0b      	ldr	r2, [pc, #44]	; (8003ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c78:	4c0b      	ldr	r4, [pc, #44]	; (8003ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c7c:	e001      	b.n	8003c82 <LoopFillZerobss>

08003c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c80:	3204      	adds	r2, #4

08003c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c84:	d3fb      	bcc.n	8003c7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c86:	f7ff ffd7 	bl	8003c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c8a:	f005 fb9f 	bl	80093cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c8e:	f7fe fc5b 	bl	8002548 <main>
  bx  lr    
 8003c92:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 8003c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c9c:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003ca0:	0800dd98 	.word	0x0800dd98
  ldr r2, =_sbss
 8003ca4:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8003ca8:	200006c4 	.word	0x200006c4

08003cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cac:	e7fe      	b.n	8003cac <ADC_IRQHandler>
	...

08003cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <HAL_Init+0x40>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a0d      	ldr	r2, [pc, #52]	; (8003cf0 <HAL_Init+0x40>)
 8003cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_Init+0x40>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a0a      	ldr	r2, [pc, #40]	; (8003cf0 <HAL_Init+0x40>)
 8003cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <HAL_Init+0x40>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a07      	ldr	r2, [pc, #28]	; (8003cf0 <HAL_Init+0x40>)
 8003cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cd8:	2003      	movs	r0, #3
 8003cda:	f000 fd4f 	bl	800477c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cde:	2000      	movs	r0, #0
 8003ce0:	f000 f808 	bl	8003cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ce4:	f7ff fb1c 	bl	8003320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40023c00 	.word	0x40023c00

08003cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cfc:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <HAL_InitTick+0x54>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <HAL_InitTick+0x58>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	4619      	mov	r1, r3
 8003d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fd75 	bl	8004802 <HAL_SYSTICK_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e00e      	b.n	8003d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b0f      	cmp	r3, #15
 8003d26:	d80a      	bhi.n	8003d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d28:	2200      	movs	r2, #0
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d30:	f000 fd2f 	bl	8004792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d34:	4a06      	ldr	r2, [pc, #24]	; (8003d50 <HAL_InitTick+0x5c>)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e000      	b.n	8003d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	2000004c 	.word	0x2000004c
 8003d4c:	20000054 	.word	0x20000054
 8003d50:	20000050 	.word	0x20000050

08003d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <HAL_IncTick+0x20>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_IncTick+0x24>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4413      	add	r3, r2
 8003d64:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <HAL_IncTick+0x24>)
 8003d66:	6013      	str	r3, [r2, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000054 	.word	0x20000054
 8003d78:	20000690 	.word	0x20000690

08003d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d80:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <HAL_GetTick+0x14>)
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000690 	.word	0x20000690

08003d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d9c:	f7ff ffee 	bl	8003d7c <HAL_GetTick>
 8003da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dac:	d005      	beq.n	8003dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dae:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <HAL_Delay+0x44>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003dba:	bf00      	nop
 8003dbc:	f7ff ffde 	bl	8003d7c <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d8f7      	bhi.n	8003dbc <HAL_Delay+0x28>
  {
  }
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000054 	.word	0x20000054

08003ddc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e033      	b.n	8003e5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff fab8 	bl	8003370 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d118      	bne.n	8003e4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e22:	f023 0302 	bic.w	r3, r3, #2
 8003e26:	f043 0202 	orr.w	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fab4 	bl	800439c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f023 0303 	bic.w	r3, r3, #3
 8003e42:	f043 0201 	orr.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
 8003e4a:	e001      	b.n	8003e50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_ADC_Start+0x1a>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e0b2      	b.n	8003fe4 <HAL_ADC_Start+0x180>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d018      	beq.n	8003ec6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ea4:	4b52      	ldr	r3, [pc, #328]	; (8003ff0 <HAL_ADC_Start+0x18c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a52      	ldr	r2, [pc, #328]	; (8003ff4 <HAL_ADC_Start+0x190>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	0c9a      	lsrs	r2, r3, #18
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4413      	add	r3, r2
 8003eb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003eb8:	e002      	b.n	8003ec0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f9      	bne.n	8003eba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d17a      	bne.n	8003fca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003efe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f12:	d106      	bne.n	8003f22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	f023 0206 	bic.w	r2, r3, #6
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	645a      	str	r2, [r3, #68]	; 0x44
 8003f20:	e002      	b.n	8003f28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f30:	4b31      	ldr	r3, [pc, #196]	; (8003ff8 <HAL_ADC_Start+0x194>)
 8003f32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f3c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d12a      	bne.n	8003fa0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a2b      	ldr	r2, [pc, #172]	; (8003ffc <HAL_ADC_Start+0x198>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d015      	beq.n	8003f80 <HAL_ADC_Start+0x11c>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a29      	ldr	r2, [pc, #164]	; (8004000 <HAL_ADC_Start+0x19c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d105      	bne.n	8003f6a <HAL_ADC_Start+0x106>
 8003f5e:	4b26      	ldr	r3, [pc, #152]	; (8003ff8 <HAL_ADC_Start+0x194>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a25      	ldr	r2, [pc, #148]	; (8004004 <HAL_ADC_Start+0x1a0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d136      	bne.n	8003fe2 <HAL_ADC_Start+0x17e>
 8003f74:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <HAL_ADC_Start+0x194>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d130      	bne.n	8003fe2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d129      	bne.n	8003fe2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f9c:	609a      	str	r2, [r3, #8]
 8003f9e:	e020      	b.n	8003fe2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a15      	ldr	r2, [pc, #84]	; (8003ffc <HAL_ADC_Start+0x198>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d11b      	bne.n	8003fe2 <HAL_ADC_Start+0x17e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d114      	bne.n	8003fe2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	e00b      	b.n	8003fe2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0210 	orr.w	r2, r3, #16
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f043 0201 	orr.w	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	2000004c 	.word	0x2000004c
 8003ff4:	431bde83 	.word	0x431bde83
 8003ff8:	40012300 	.word	0x40012300
 8003ffc:	40012000 	.word	0x40012000
 8004000:	40012100 	.word	0x40012100
 8004004:	40012200 	.word	0x40012200

08004008 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004024:	d113      	bne.n	800404e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004034:	d10b      	bne.n	800404e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f043 0220 	orr.w	r2, r3, #32
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e063      	b.n	8004116 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800404e:	f7ff fe95 	bl	8003d7c <HAL_GetTick>
 8004052:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004054:	e021      	b.n	800409a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d01d      	beq.n	800409a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d007      	beq.n	8004074 <HAL_ADC_PollForConversion+0x6c>
 8004064:	f7ff fe8a 	bl	8003d7c <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d212      	bcs.n	800409a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b02      	cmp	r3, #2
 8004080:	d00b      	beq.n	800409a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f043 0204 	orr.w	r2, r3, #4
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e03d      	b.n	8004116 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d1d6      	bne.n	8004056 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0212 	mvn.w	r2, #18
 80040b0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d123      	bne.n	8004114 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d11f      	bne.n	8004114 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d006      	beq.n	80040f0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d111      	bne.n	8004114 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	f043 0201 	orr.w	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x1c>
 8004150:	2302      	movs	r3, #2
 8004152:	e113      	b.n	800437c <HAL_ADC_ConfigChannel+0x244>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b09      	cmp	r3, #9
 8004162:	d925      	bls.n	80041b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68d9      	ldr	r1, [r3, #12]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	4613      	mov	r3, r2
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	4413      	add	r3, r2
 8004178:	3b1e      	subs	r3, #30
 800417a:	2207      	movs	r2, #7
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43da      	mvns	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	400a      	ands	r2, r1
 8004188:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68d9      	ldr	r1, [r3, #12]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	b29b      	uxth	r3, r3
 800419a:	4618      	mov	r0, r3
 800419c:	4603      	mov	r3, r0
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4403      	add	r3, r0
 80041a2:	3b1e      	subs	r3, #30
 80041a4:	409a      	lsls	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	e022      	b.n	80041f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6919      	ldr	r1, [r3, #16]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	4613      	mov	r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	4413      	add	r3, r2
 80041c4:	2207      	movs	r2, #7
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43da      	mvns	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	400a      	ands	r2, r1
 80041d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6919      	ldr	r1, [r3, #16]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	4618      	mov	r0, r3
 80041e6:	4603      	mov	r3, r0
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	4403      	add	r3, r0
 80041ec:	409a      	lsls	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b06      	cmp	r3, #6
 80041fc:	d824      	bhi.n	8004248 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	3b05      	subs	r3, #5
 8004210:	221f      	movs	r2, #31
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43da      	mvns	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	400a      	ands	r2, r1
 800421e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	4618      	mov	r0, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	3b05      	subs	r3, #5
 800423a:	fa00 f203 	lsl.w	r2, r0, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	635a      	str	r2, [r3, #52]	; 0x34
 8004246:	e04c      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b0c      	cmp	r3, #12
 800424e:	d824      	bhi.n	800429a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	3b23      	subs	r3, #35	; 0x23
 8004262:	221f      	movs	r2, #31
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43da      	mvns	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	400a      	ands	r2, r1
 8004270:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	4618      	mov	r0, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	3b23      	subs	r3, #35	; 0x23
 800428c:	fa00 f203 	lsl.w	r2, r0, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	631a      	str	r2, [r3, #48]	; 0x30
 8004298:	e023      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	3b41      	subs	r3, #65	; 0x41
 80042ac:	221f      	movs	r2, #31
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	43da      	mvns	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	400a      	ands	r2, r1
 80042ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	4618      	mov	r0, r3
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	3b41      	subs	r3, #65	; 0x41
 80042d6:	fa00 f203 	lsl.w	r2, r0, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042e2:	4b29      	ldr	r3, [pc, #164]	; (8004388 <HAL_ADC_ConfigChannel+0x250>)
 80042e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a28      	ldr	r2, [pc, #160]	; (800438c <HAL_ADC_ConfigChannel+0x254>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d10f      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x1d8>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b12      	cmp	r3, #18
 80042f6:	d10b      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1d      	ldr	r2, [pc, #116]	; (800438c <HAL_ADC_ConfigChannel+0x254>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d12b      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x23a>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1c      	ldr	r2, [pc, #112]	; (8004390 <HAL_ADC_ConfigChannel+0x258>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <HAL_ADC_ConfigChannel+0x1f4>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b11      	cmp	r3, #17
 800432a:	d122      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a11      	ldr	r2, [pc, #68]	; (8004390 <HAL_ADC_ConfigChannel+0x258>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d111      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800434e:	4b11      	ldr	r3, [pc, #68]	; (8004394 <HAL_ADC_ConfigChannel+0x25c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a11      	ldr	r2, [pc, #68]	; (8004398 <HAL_ADC_ConfigChannel+0x260>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	0c9a      	lsrs	r2, r3, #18
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004364:	e002      	b.n	800436c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	3b01      	subs	r3, #1
 800436a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f9      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	40012300 	.word	0x40012300
 800438c:	40012000 	.word	0x40012000
 8004390:	10000012 	.word	0x10000012
 8004394:	2000004c 	.word	0x2000004c
 8004398:	431bde83 	.word	0x431bde83

0800439c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043a4:	4b79      	ldr	r3, [pc, #484]	; (800458c <ADC_Init+0x1f0>)
 80043a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	431a      	orrs	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	021a      	lsls	r2, r3, #8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80043f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6859      	ldr	r1, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6899      	ldr	r1, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	4a58      	ldr	r2, [pc, #352]	; (8004590 <ADC_Init+0x1f4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d022      	beq.n	800447a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004442:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6899      	ldr	r1, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004464:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6899      	ldr	r1, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	e00f      	b.n	800449a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004488:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004498:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0202 	bic.w	r2, r2, #2
 80044a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6899      	ldr	r1, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	7e1b      	ldrb	r3, [r3, #24]
 80044b4:	005a      	lsls	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01b      	beq.n	8004500 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80044e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6859      	ldr	r1, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	3b01      	subs	r3, #1
 80044f4:	035a      	lsls	r2, r3, #13
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	e007      	b.n	8004510 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800450e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	3b01      	subs	r3, #1
 800452c:	051a      	lsls	r2, r3, #20
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6899      	ldr	r1, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004552:	025a      	lsls	r2, r3, #9
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800456a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6899      	ldr	r1, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	029a      	lsls	r2, r3, #10
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	609a      	str	r2, [r3, #8]
}
 8004580:	bf00      	nop
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	40012300 	.word	0x40012300
 8004590:	0f000001 	.word	0x0f000001

08004594 <__NVIC_SetPriorityGrouping>:
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <__NVIC_SetPriorityGrouping+0x44>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045b0:	4013      	ands	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045c6:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <__NVIC_SetPriorityGrouping+0x44>)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	60d3      	str	r3, [r2, #12]
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	e000ed00 	.word	0xe000ed00

080045dc <__NVIC_GetPriorityGrouping>:
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <__NVIC_GetPriorityGrouping+0x18>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	0a1b      	lsrs	r3, r3, #8
 80045e6:	f003 0307 	and.w	r3, r3, #7
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	e000ed00 	.word	0xe000ed00

080045f8 <__NVIC_EnableIRQ>:
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004606:	2b00      	cmp	r3, #0
 8004608:	db0b      	blt.n	8004622 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	f003 021f 	and.w	r2, r3, #31
 8004610:	4907      	ldr	r1, [pc, #28]	; (8004630 <__NVIC_EnableIRQ+0x38>)
 8004612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	2001      	movs	r0, #1
 800461a:	fa00 f202 	lsl.w	r2, r0, r2
 800461e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	e000e100 	.word	0xe000e100

08004634 <__NVIC_DisableIRQ>:
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004642:	2b00      	cmp	r3, #0
 8004644:	db12      	blt.n	800466c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	f003 021f 	and.w	r2, r3, #31
 800464c:	490a      	ldr	r1, [pc, #40]	; (8004678 <__NVIC_DisableIRQ+0x44>)
 800464e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2001      	movs	r0, #1
 8004656:	fa00 f202 	lsl.w	r2, r0, r2
 800465a:	3320      	adds	r3, #32
 800465c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004660:	f3bf 8f4f 	dsb	sy
}
 8004664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004666:	f3bf 8f6f 	isb	sy
}
 800466a:	bf00      	nop
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	e000e100 	.word	0xe000e100

0800467c <__NVIC_SetPriority>:
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	6039      	str	r1, [r7, #0]
 8004686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468c:	2b00      	cmp	r3, #0
 800468e:	db0a      	blt.n	80046a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	b2da      	uxtb	r2, r3
 8004694:	490c      	ldr	r1, [pc, #48]	; (80046c8 <__NVIC_SetPriority+0x4c>)
 8004696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469a:	0112      	lsls	r2, r2, #4
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	440b      	add	r3, r1
 80046a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046a4:	e00a      	b.n	80046bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	4908      	ldr	r1, [pc, #32]	; (80046cc <__NVIC_SetPriority+0x50>)
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	3b04      	subs	r3, #4
 80046b4:	0112      	lsls	r2, r2, #4
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	440b      	add	r3, r1
 80046ba:	761a      	strb	r2, [r3, #24]
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	e000e100 	.word	0xe000e100
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <NVIC_EncodePriority>:
{
 80046d0:	b480      	push	{r7}
 80046d2:	b089      	sub	sp, #36	; 0x24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f1c3 0307 	rsb	r3, r3, #7
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	bf28      	it	cs
 80046ee:	2304      	movcs	r3, #4
 80046f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	d902      	bls.n	8004700 <NVIC_EncodePriority+0x30>
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3b03      	subs	r3, #3
 80046fe:	e000      	b.n	8004702 <NVIC_EncodePriority+0x32>
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004704:	f04f 32ff 	mov.w	r2, #4294967295
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43da      	mvns	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	401a      	ands	r2, r3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004718:	f04f 31ff 	mov.w	r1, #4294967295
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	fa01 f303 	lsl.w	r3, r1, r3
 8004722:	43d9      	mvns	r1, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004728:	4313      	orrs	r3, r2
}
 800472a:	4618      	mov	r0, r3
 800472c:	3724      	adds	r7, #36	; 0x24
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3b01      	subs	r3, #1
 8004744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004748:	d301      	bcc.n	800474e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800474a:	2301      	movs	r3, #1
 800474c:	e00f      	b.n	800476e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800474e:	4a0a      	ldr	r2, [pc, #40]	; (8004778 <SysTick_Config+0x40>)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3b01      	subs	r3, #1
 8004754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004756:	210f      	movs	r1, #15
 8004758:	f04f 30ff 	mov.w	r0, #4294967295
 800475c:	f7ff ff8e 	bl	800467c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <SysTick_Config+0x40>)
 8004762:	2200      	movs	r2, #0
 8004764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004766:	4b04      	ldr	r3, [pc, #16]	; (8004778 <SysTick_Config+0x40>)
 8004768:	2207      	movs	r2, #7
 800476a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	e000e010 	.word	0xe000e010

0800477c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ff05 	bl	8004594 <__NVIC_SetPriorityGrouping>
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004792:	b580      	push	{r7, lr}
 8004794:	b086      	sub	sp, #24
 8004796:	af00      	add	r7, sp, #0
 8004798:	4603      	mov	r3, r0
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047a4:	f7ff ff1a 	bl	80045dc <__NVIC_GetPriorityGrouping>
 80047a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	6978      	ldr	r0, [r7, #20]
 80047b0:	f7ff ff8e 	bl	80046d0 <NVIC_EncodePriority>
 80047b4:	4602      	mov	r2, r0
 80047b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ba:	4611      	mov	r1, r2
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff ff5d 	bl	800467c <__NVIC_SetPriority>
}
 80047c2:	bf00      	nop
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	4603      	mov	r3, r0
 80047d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff ff0d 	bl	80045f8 <__NVIC_EnableIRQ>
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	4603      	mov	r3, r0
 80047ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80047f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff ff1d 	bl	8004634 <__NVIC_DisableIRQ>
}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b082      	sub	sp, #8
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff ff94 	bl	8004738 <SysTick_Config>
 8004810:	4603      	mov	r3, r0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004828:	f7ff faa8 	bl	8003d7c <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e099      	b.n	800496c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004858:	e00f      	b.n	800487a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800485a:	f7ff fa8f 	bl	8003d7c <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b05      	cmp	r3, #5
 8004866:	d908      	bls.n	800487a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2220      	movs	r2, #32
 800486c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2203      	movs	r2, #3
 8004872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e078      	b.n	800496c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e8      	bne.n	800485a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4b38      	ldr	r3, [pc, #224]	; (8004974 <HAL_DMA_Init+0x158>)
 8004894:	4013      	ands	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d107      	bne.n	80048e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048dc:	4313      	orrs	r3, r2
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f023 0307 	bic.w	r3, r3, #7
 80048fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	2b04      	cmp	r3, #4
 800490c:	d117      	bne.n	800493e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4313      	orrs	r3, r2
 8004916:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00e      	beq.n	800493e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fb01 	bl	8004f28 <DMA_CheckFifoParam>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2240      	movs	r2, #64	; 0x40
 8004930:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800493a:	2301      	movs	r3, #1
 800493c:	e016      	b.n	800496c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fab8 	bl	8004ebc <DMA_CalcBaseAndBitshift>
 800494c:	4603      	mov	r3, r0
 800494e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004954:	223f      	movs	r2, #63	; 0x3f
 8004956:	409a      	lsls	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	f010803f 	.word	0xf010803f

08004978 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_DMA_Start_IT+0x26>
 800499a:	2302      	movs	r3, #2
 800499c:	e040      	b.n	8004a20 <HAL_DMA_Start_IT+0xa8>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d12f      	bne.n	8004a12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fa4a 	bl	8004e60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d0:	223f      	movs	r2, #63	; 0x3f
 80049d2:	409a      	lsls	r2, r3
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0216 	orr.w	r2, r2, #22
 80049e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0208 	orr.w	r2, r2, #8
 80049fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e005      	b.n	8004a1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a36:	f7ff f9a1 	bl	8003d7c <HAL_GetTick>
 8004a3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d008      	beq.n	8004a5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2280      	movs	r2, #128	; 0x80
 8004a4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e052      	b.n	8004b00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0216 	bic.w	r2, r2, #22
 8004a68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d103      	bne.n	8004a8a <HAL_DMA_Abort+0x62>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d007      	beq.n	8004a9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0208 	bic.w	r2, r2, #8
 8004a98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0201 	bic.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004aaa:	e013      	b.n	8004ad4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004aac:	f7ff f966 	bl	8003d7c <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b05      	cmp	r3, #5
 8004ab8:	d90c      	bls.n	8004ad4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e015      	b.n	8004b00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e4      	bne.n	8004aac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae6:	223f      	movs	r2, #63	; 0x3f
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d004      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2280      	movs	r2, #128	; 0x80
 8004b20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e00c      	b.n	8004b40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2205      	movs	r2, #5
 8004b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0201 	bic.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b58:	4b8e      	ldr	r3, [pc, #568]	; (8004d94 <HAL_DMA_IRQHandler+0x248>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a8e      	ldr	r2, [pc, #568]	; (8004d98 <HAL_DMA_IRQHandler+0x24c>)
 8004b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b62:	0a9b      	lsrs	r3, r3, #10
 8004b64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b76:	2208      	movs	r2, #8
 8004b78:	409a      	lsls	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01a      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d013      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0204 	bic.w	r2, r2, #4
 8004b9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba4:	2208      	movs	r2, #8
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb0:	f043 0201 	orr.w	r2, r3, #1
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	409a      	lsls	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d012      	beq.n	8004bee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00b      	beq.n	8004bee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bda:	2201      	movs	r2, #1
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be6:	f043 0202 	orr.w	r2, r3, #2
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	409a      	lsls	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d012      	beq.n	8004c24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00b      	beq.n	8004c24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c10:	2204      	movs	r2, #4
 8004c12:	409a      	lsls	r2, r3
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1c:	f043 0204 	orr.w	r2, r3, #4
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c28:	2210      	movs	r2, #16
 8004c2a:	409a      	lsls	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d043      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d03c      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c46:	2210      	movs	r2, #16
 8004c48:	409a      	lsls	r2, r3
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d018      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d108      	bne.n	8004c7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d024      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	4798      	blx	r3
 8004c7a:	e01f      	b.n	8004cbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01b      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	4798      	blx	r3
 8004c8c:	e016      	b.n	8004cbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d107      	bne.n	8004cac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0208 	bic.w	r2, r2, #8
 8004caa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 808f 	beq.w	8004dec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8087 	beq.w	8004dec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b05      	cmp	r3, #5
 8004cf4:	d136      	bne.n	8004d64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0216 	bic.w	r2, r2, #22
 8004d04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695a      	ldr	r2, [r3, #20]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d103      	bne.n	8004d26 <HAL_DMA_IRQHandler+0x1da>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0208 	bic.w	r2, r2, #8
 8004d34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3a:	223f      	movs	r2, #63	; 0x3f
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d07e      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	4798      	blx	r3
        }
        return;
 8004d62:	e079      	b.n	8004e58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01d      	beq.n	8004dae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10d      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d031      	beq.n	8004dec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	4798      	blx	r3
 8004d90:	e02c      	b.n	8004dec <HAL_DMA_IRQHandler+0x2a0>
 8004d92:	bf00      	nop
 8004d94:	2000004c 	.word	0x2000004c
 8004d98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d023      	beq.n	8004dec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	4798      	blx	r3
 8004dac:	e01e      	b.n	8004dec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10f      	bne.n	8004ddc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0210 	bic.w	r2, r2, #16
 8004dca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d032      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d022      	beq.n	8004e46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2205      	movs	r2, #5
 8004e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0201 	bic.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d307      	bcc.n	8004e34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f2      	bne.n	8004e18 <HAL_DMA_IRQHandler+0x2cc>
 8004e32:	e000      	b.n	8004e36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	4798      	blx	r3
 8004e56:	e000      	b.n	8004e5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e58:	bf00      	nop
    }
  }
}
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b40      	cmp	r3, #64	; 0x40
 8004e8c:	d108      	bne.n	8004ea0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e9e:	e007      	b.n	8004eb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	60da      	str	r2, [r3, #12]
}
 8004eb0:	bf00      	nop
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	3b10      	subs	r3, #16
 8004ecc:	4a14      	ldr	r2, [pc, #80]	; (8004f20 <DMA_CalcBaseAndBitshift+0x64>)
 8004ece:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed2:	091b      	lsrs	r3, r3, #4
 8004ed4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ed6:	4a13      	ldr	r2, [pc, #76]	; (8004f24 <DMA_CalcBaseAndBitshift+0x68>)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4413      	add	r3, r2
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d909      	bls.n	8004efe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ef2:	f023 0303 	bic.w	r3, r3, #3
 8004ef6:	1d1a      	adds	r2, r3, #4
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	659a      	str	r2, [r3, #88]	; 0x58
 8004efc:	e007      	b.n	8004f0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f06:	f023 0303 	bic.w	r3, r3, #3
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	aaaaaaab 	.word	0xaaaaaaab
 8004f24:	0800d788 	.word	0x0800d788

08004f28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d11f      	bne.n	8004f82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d856      	bhi.n	8004ff6 <DMA_CheckFifoParam+0xce>
 8004f48:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <DMA_CheckFifoParam+0x28>)
 8004f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4e:	bf00      	nop
 8004f50:	08004f61 	.word	0x08004f61
 8004f54:	08004f73 	.word	0x08004f73
 8004f58:	08004f61 	.word	0x08004f61
 8004f5c:	08004ff7 	.word	0x08004ff7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d046      	beq.n	8004ffa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f70:	e043      	b.n	8004ffa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f7a:	d140      	bne.n	8004ffe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f80:	e03d      	b.n	8004ffe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8a:	d121      	bne.n	8004fd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d837      	bhi.n	8005002 <DMA_CheckFifoParam+0xda>
 8004f92:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <DMA_CheckFifoParam+0x70>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004faf 	.word	0x08004faf
 8004fa0:	08004fa9 	.word	0x08004fa9
 8004fa4:	08004fc1 	.word	0x08004fc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
      break;
 8004fac:	e030      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d025      	beq.n	8005006 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fbe:	e022      	b.n	8005006 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fc8:	d11f      	bne.n	800500a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004fce:	e01c      	b.n	800500a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d903      	bls.n	8004fde <DMA_CheckFifoParam+0xb6>
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d003      	beq.n	8004fe4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fdc:	e018      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe2:	e015      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00e      	beq.n	800500e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff4:	e00b      	b.n	800500e <DMA_CheckFifoParam+0xe6>
      break;
 8004ff6:	bf00      	nop
 8004ff8:	e00a      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
      break;
 8004ffa:	bf00      	nop
 8004ffc:	e008      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
      break;
 8004ffe:	bf00      	nop
 8005000:	e006      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
      break;
 8005002:	bf00      	nop
 8005004:	e004      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
      break;
 8005006:	bf00      	nop
 8005008:	e002      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
      break;   
 800500a:	bf00      	nop
 800500c:	e000      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
      break;
 800500e:	bf00      	nop
    }
  } 
  
  return status; 
 8005010:	7bfb      	ldrb	r3, [r7, #15]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop

08005020 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005032:	4b23      	ldr	r3, [pc, #140]	; (80050c0 <HAL_FLASH_Program+0xa0>)
 8005034:	7e1b      	ldrb	r3, [r3, #24]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_FLASH_Program+0x1e>
 800503a:	2302      	movs	r3, #2
 800503c:	e03b      	b.n	80050b6 <HAL_FLASH_Program+0x96>
 800503e:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <HAL_FLASH_Program+0xa0>)
 8005040:	2201      	movs	r2, #1
 8005042:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005044:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005048:	f000 f870 	bl	800512c <FLASH_WaitForLastOperation>
 800504c:	4603      	mov	r3, r0
 800504e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005050:	7dfb      	ldrb	r3, [r7, #23]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d12b      	bne.n	80050ae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d105      	bne.n	8005068 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800505c:	783b      	ldrb	r3, [r7, #0]
 800505e:	4619      	mov	r1, r3
 8005060:	68b8      	ldr	r0, [r7, #8]
 8005062:	f000 f91b 	bl	800529c <FLASH_Program_Byte>
 8005066:	e016      	b.n	8005096 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d105      	bne.n	800507a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800506e:	883b      	ldrh	r3, [r7, #0]
 8005070:	4619      	mov	r1, r3
 8005072:	68b8      	ldr	r0, [r7, #8]
 8005074:	f000 f8ee 	bl	8005254 <FLASH_Program_HalfWord>
 8005078:	e00d      	b.n	8005096 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d105      	bne.n	800508c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	4619      	mov	r1, r3
 8005084:	68b8      	ldr	r0, [r7, #8]
 8005086:	f000 f8c3 	bl	8005210 <FLASH_Program_Word>
 800508a:	e004      	b.n	8005096 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800508c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005090:	68b8      	ldr	r0, [r7, #8]
 8005092:	f000 f88b 	bl	80051ac <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005096:	f24c 3050 	movw	r0, #50000	; 0xc350
 800509a:	f000 f847 	bl	800512c <FLASH_WaitForLastOperation>
 800509e:	4603      	mov	r3, r0
 80050a0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80050a2:	4b08      	ldr	r3, [pc, #32]	; (80050c4 <HAL_FLASH_Program+0xa4>)
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	4a07      	ldr	r2, [pc, #28]	; (80050c4 <HAL_FLASH_Program+0xa4>)
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80050ae:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <HAL_FLASH_Program+0xa0>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20000694 	.word	0x20000694
 80050c4:	40023c00 	.word	0x40023c00

080050c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80050d2:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <HAL_FLASH_Unlock+0x38>)
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	da0b      	bge.n	80050f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80050da:	4b09      	ldr	r3, [pc, #36]	; (8005100 <HAL_FLASH_Unlock+0x38>)
 80050dc:	4a09      	ldr	r2, [pc, #36]	; (8005104 <HAL_FLASH_Unlock+0x3c>)
 80050de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80050e0:	4b07      	ldr	r3, [pc, #28]	; (8005100 <HAL_FLASH_Unlock+0x38>)
 80050e2:	4a09      	ldr	r2, [pc, #36]	; (8005108 <HAL_FLASH_Unlock+0x40>)
 80050e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80050e6:	4b06      	ldr	r3, [pc, #24]	; (8005100 <HAL_FLASH_Unlock+0x38>)
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	da01      	bge.n	80050f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80050f2:	79fb      	ldrb	r3, [r7, #7]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	40023c00 	.word	0x40023c00
 8005104:	45670123 	.word	0x45670123
 8005108:	cdef89ab 	.word	0xcdef89ab

0800510c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005110:	4b05      	ldr	r3, [pc, #20]	; (8005128 <HAL_FLASH_Lock+0x1c>)
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	4a04      	ldr	r2, [pc, #16]	; (8005128 <HAL_FLASH_Lock+0x1c>)
 8005116:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800511a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40023c00 	.word	0x40023c00

0800512c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005138:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <FLASH_WaitForLastOperation+0x78>)
 800513a:	2200      	movs	r2, #0
 800513c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800513e:	f7fe fe1d 	bl	8003d7c <HAL_GetTick>
 8005142:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005144:	e010      	b.n	8005168 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d00c      	beq.n	8005168 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <FLASH_WaitForLastOperation+0x38>
 8005154:	f7fe fe12 	bl	8003d7c <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	d201      	bcs.n	8005168 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e019      	b.n	800519c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <FLASH_WaitForLastOperation+0x7c>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e8      	bne.n	8005146 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <FLASH_WaitForLastOperation+0x7c>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <FLASH_WaitForLastOperation+0x7c>)
 8005182:	2201      	movs	r2, #1
 8005184:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005186:	4b08      	ldr	r3, [pc, #32]	; (80051a8 <FLASH_WaitForLastOperation+0x7c>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005192:	f000 f8a5 	bl	80052e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
  
}  
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20000694 	.word	0x20000694
 80051a8:	40023c00 	.word	0x40023c00

080051ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80051b8:	4b14      	ldr	r3, [pc, #80]	; (800520c <FLASH_Program_DoubleWord+0x60>)
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	4a13      	ldr	r2, [pc, #76]	; (800520c <FLASH_Program_DoubleWord+0x60>)
 80051be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80051c4:	4b11      	ldr	r3, [pc, #68]	; (800520c <FLASH_Program_DoubleWord+0x60>)
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	4a10      	ldr	r2, [pc, #64]	; (800520c <FLASH_Program_DoubleWord+0x60>)
 80051ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80051ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80051d0:	4b0e      	ldr	r3, [pc, #56]	; (800520c <FLASH_Program_DoubleWord+0x60>)
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <FLASH_Program_DoubleWord+0x60>)
 80051d6:	f043 0301 	orr.w	r3, r3, #1
 80051da:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80051e2:	f3bf 8f6f 	isb	sy
}
 80051e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80051e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	000a      	movs	r2, r1
 80051f6:	2300      	movs	r3, #0
 80051f8:	68f9      	ldr	r1, [r7, #12]
 80051fa:	3104      	adds	r1, #4
 80051fc:	4613      	mov	r3, r2
 80051fe:	600b      	str	r3, [r1, #0]
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40023c00 	.word	0x40023c00

08005210 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800521a:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <FLASH_Program_Word+0x40>)
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	4a0c      	ldr	r2, [pc, #48]	; (8005250 <FLASH_Program_Word+0x40>)
 8005220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005224:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005226:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <FLASH_Program_Word+0x40>)
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	4a09      	ldr	r2, [pc, #36]	; (8005250 <FLASH_Program_Word+0x40>)
 800522c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005230:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005232:	4b07      	ldr	r3, [pc, #28]	; (8005250 <FLASH_Program_Word+0x40>)
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	4a06      	ldr	r2, [pc, #24]	; (8005250 <FLASH_Program_Word+0x40>)
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	601a      	str	r2, [r3, #0]
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40023c00 	.word	0x40023c00

08005254 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005260:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <FLASH_Program_HalfWord+0x44>)
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	4a0c      	ldr	r2, [pc, #48]	; (8005298 <FLASH_Program_HalfWord+0x44>)
 8005266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <FLASH_Program_HalfWord+0x44>)
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	4a09      	ldr	r2, [pc, #36]	; (8005298 <FLASH_Program_HalfWord+0x44>)
 8005272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005276:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005278:	4b07      	ldr	r3, [pc, #28]	; (8005298 <FLASH_Program_HalfWord+0x44>)
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	4a06      	ldr	r2, [pc, #24]	; (8005298 <FLASH_Program_HalfWord+0x44>)
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	887a      	ldrh	r2, [r7, #2]
 8005288:	801a      	strh	r2, [r3, #0]
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40023c00 	.word	0x40023c00

0800529c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	460b      	mov	r3, r1
 80052a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80052a8:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <FLASH_Program_Byte+0x40>)
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	4a0b      	ldr	r2, [pc, #44]	; (80052dc <FLASH_Program_Byte+0x40>)
 80052ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <FLASH_Program_Byte+0x40>)
 80052b6:	4a09      	ldr	r2, [pc, #36]	; (80052dc <FLASH_Program_Byte+0x40>)
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80052bc:	4b07      	ldr	r3, [pc, #28]	; (80052dc <FLASH_Program_Byte+0x40>)
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	4a06      	ldr	r2, [pc, #24]	; (80052dc <FLASH_Program_Byte+0x40>)
 80052c2:	f043 0301 	orr.w	r3, r3, #1
 80052c6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	78fa      	ldrb	r2, [r7, #3]
 80052cc:	701a      	strb	r2, [r3, #0]
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40023c00 	.word	0x40023c00

080052e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80052e4:	4b2f      	ldr	r3, [pc, #188]	; (80053a4 <FLASH_SetErrorCode+0xc4>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80052f0:	4b2d      	ldr	r3, [pc, #180]	; (80053a8 <FLASH_SetErrorCode+0xc8>)
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f043 0310 	orr.w	r3, r3, #16
 80052f8:	4a2b      	ldr	r2, [pc, #172]	; (80053a8 <FLASH_SetErrorCode+0xc8>)
 80052fa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80052fc:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <FLASH_SetErrorCode+0xc4>)
 80052fe:	2210      	movs	r2, #16
 8005300:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005302:	4b28      	ldr	r3, [pc, #160]	; (80053a4 <FLASH_SetErrorCode+0xc4>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d008      	beq.n	8005320 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800530e:	4b26      	ldr	r3, [pc, #152]	; (80053a8 <FLASH_SetErrorCode+0xc8>)
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f043 0308 	orr.w	r3, r3, #8
 8005316:	4a24      	ldr	r2, [pc, #144]	; (80053a8 <FLASH_SetErrorCode+0xc8>)
 8005318:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800531a:	4b22      	ldr	r3, [pc, #136]	; (80053a4 <FLASH_SetErrorCode+0xc4>)
 800531c:	2220      	movs	r2, #32
 800531e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005320:	4b20      	ldr	r3, [pc, #128]	; (80053a4 <FLASH_SetErrorCode+0xc4>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d008      	beq.n	800533e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800532c:	4b1e      	ldr	r3, [pc, #120]	; (80053a8 <FLASH_SetErrorCode+0xc8>)
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	f043 0304 	orr.w	r3, r3, #4
 8005334:	4a1c      	ldr	r2, [pc, #112]	; (80053a8 <FLASH_SetErrorCode+0xc8>)
 8005336:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005338:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <FLASH_SetErrorCode+0xc4>)
 800533a:	2240      	movs	r2, #64	; 0x40
 800533c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800533e:	4b19      	ldr	r3, [pc, #100]	; (80053a4 <FLASH_SetErrorCode+0xc4>)
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800534a:	4b17      	ldr	r3, [pc, #92]	; (80053a8 <FLASH_SetErrorCode+0xc8>)
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f043 0302 	orr.w	r3, r3, #2
 8005352:	4a15      	ldr	r2, [pc, #84]	; (80053a8 <FLASH_SetErrorCode+0xc8>)
 8005354:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005356:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <FLASH_SetErrorCode+0xc4>)
 8005358:	2280      	movs	r2, #128	; 0x80
 800535a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800535c:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <FLASH_SetErrorCode+0xc4>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005364:	2b00      	cmp	r3, #0
 8005366:	d009      	beq.n	800537c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005368:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <FLASH_SetErrorCode+0xc8>)
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	f043 0301 	orr.w	r3, r3, #1
 8005370:	4a0d      	ldr	r2, [pc, #52]	; (80053a8 <FLASH_SetErrorCode+0xc8>)
 8005372:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005374:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <FLASH_SetErrorCode+0xc4>)
 8005376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800537a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800537c:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <FLASH_SetErrorCode+0xc4>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005388:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <FLASH_SetErrorCode+0xc8>)
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f043 0320 	orr.w	r3, r3, #32
 8005390:	4a05      	ldr	r2, [pc, #20]	; (80053a8 <FLASH_SetErrorCode+0xc8>)
 8005392:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005394:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <FLASH_SetErrorCode+0xc4>)
 8005396:	2202      	movs	r2, #2
 8005398:	60da      	str	r2, [r3, #12]
  }
}
 800539a:	bf00      	nop
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	40023c00 	.word	0x40023c00
 80053a8:	20000694 	.word	0x20000694

080053ac <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d102      	bne.n	80053c8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	e010      	b.n	80053ea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d103      	bne.n	80053d6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80053ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e009      	b.n	80053ea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80053d6:	78fb      	ldrb	r3, [r7, #3]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d103      	bne.n	80053e4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80053dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	e002      	b.n	80053ea <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80053e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80053e8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80053ea:	4b13      	ldr	r3, [pc, #76]	; (8005438 <FLASH_Erase_Sector+0x8c>)
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	4a12      	ldr	r2, [pc, #72]	; (8005438 <FLASH_Erase_Sector+0x8c>)
 80053f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80053f6:	4b10      	ldr	r3, [pc, #64]	; (8005438 <FLASH_Erase_Sector+0x8c>)
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	490f      	ldr	r1, [pc, #60]	; (8005438 <FLASH_Erase_Sector+0x8c>)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005402:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <FLASH_Erase_Sector+0x8c>)
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	4a0c      	ldr	r2, [pc, #48]	; (8005438 <FLASH_Erase_Sector+0x8c>)
 8005408:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800540c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800540e:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <FLASH_Erase_Sector+0x8c>)
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	4313      	orrs	r3, r2
 8005418:	4a07      	ldr	r2, [pc, #28]	; (8005438 <FLASH_Erase_Sector+0x8c>)
 800541a:	f043 0302 	orr.w	r3, r3, #2
 800541e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005420:	4b05      	ldr	r3, [pc, #20]	; (8005438 <FLASH_Erase_Sector+0x8c>)
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	4a04      	ldr	r2, [pc, #16]	; (8005438 <FLASH_Erase_Sector+0x8c>)
 8005426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800542a:	6113      	str	r3, [r2, #16]
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	40023c00 	.word	0x40023c00

0800543c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800543c:	b480      	push	{r7}
 800543e:	b089      	sub	sp, #36	; 0x24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800544a:	2300      	movs	r3, #0
 800544c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800544e:	2300      	movs	r3, #0
 8005450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	e165      	b.n	8005724 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005458:	2201      	movs	r2, #1
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4013      	ands	r3, r2
 800546a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	429a      	cmp	r2, r3
 8005472:	f040 8154 	bne.w	800571e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b01      	cmp	r3, #1
 8005480:	d005      	beq.n	800548e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800548a:	2b02      	cmp	r3, #2
 800548c:	d130      	bne.n	80054f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	2203      	movs	r2, #3
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43db      	mvns	r3, r3
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4013      	ands	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054c4:	2201      	movs	r2, #1
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	43db      	mvns	r3, r3
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	4013      	ands	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	091b      	lsrs	r3, r3, #4
 80054da:	f003 0201 	and.w	r2, r3, #1
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f003 0303 	and.w	r3, r3, #3
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d017      	beq.n	800552c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	2203      	movs	r2, #3
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	4313      	orrs	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d123      	bne.n	8005580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	08da      	lsrs	r2, r3, #3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3208      	adds	r2, #8
 8005540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	220f      	movs	r2, #15
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	43db      	mvns	r3, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4013      	ands	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	4313      	orrs	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	08da      	lsrs	r2, r3, #3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3208      	adds	r2, #8
 800557a:	69b9      	ldr	r1, [r7, #24]
 800557c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	2203      	movs	r2, #3
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	43db      	mvns	r3, r3
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	4013      	ands	r3, r2
 8005596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f003 0203 	and.w	r2, r3, #3
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80ae 	beq.w	800571e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	4b5d      	ldr	r3, [pc, #372]	; (800573c <HAL_GPIO_Init+0x300>)
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	4a5c      	ldr	r2, [pc, #368]	; (800573c <HAL_GPIO_Init+0x300>)
 80055cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055d0:	6453      	str	r3, [r2, #68]	; 0x44
 80055d2:	4b5a      	ldr	r3, [pc, #360]	; (800573c <HAL_GPIO_Init+0x300>)
 80055d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055de:	4a58      	ldr	r2, [pc, #352]	; (8005740 <HAL_GPIO_Init+0x304>)
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	3302      	adds	r3, #2
 80055e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	220f      	movs	r2, #15
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	43db      	mvns	r3, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	4013      	ands	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a4f      	ldr	r2, [pc, #316]	; (8005744 <HAL_GPIO_Init+0x308>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d025      	beq.n	8005656 <HAL_GPIO_Init+0x21a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a4e      	ldr	r2, [pc, #312]	; (8005748 <HAL_GPIO_Init+0x30c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d01f      	beq.n	8005652 <HAL_GPIO_Init+0x216>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a4d      	ldr	r2, [pc, #308]	; (800574c <HAL_GPIO_Init+0x310>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d019      	beq.n	800564e <HAL_GPIO_Init+0x212>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a4c      	ldr	r2, [pc, #304]	; (8005750 <HAL_GPIO_Init+0x314>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <HAL_GPIO_Init+0x20e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a4b      	ldr	r2, [pc, #300]	; (8005754 <HAL_GPIO_Init+0x318>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00d      	beq.n	8005646 <HAL_GPIO_Init+0x20a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a4a      	ldr	r2, [pc, #296]	; (8005758 <HAL_GPIO_Init+0x31c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d007      	beq.n	8005642 <HAL_GPIO_Init+0x206>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a49      	ldr	r2, [pc, #292]	; (800575c <HAL_GPIO_Init+0x320>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d101      	bne.n	800563e <HAL_GPIO_Init+0x202>
 800563a:	2306      	movs	r3, #6
 800563c:	e00c      	b.n	8005658 <HAL_GPIO_Init+0x21c>
 800563e:	2307      	movs	r3, #7
 8005640:	e00a      	b.n	8005658 <HAL_GPIO_Init+0x21c>
 8005642:	2305      	movs	r3, #5
 8005644:	e008      	b.n	8005658 <HAL_GPIO_Init+0x21c>
 8005646:	2304      	movs	r3, #4
 8005648:	e006      	b.n	8005658 <HAL_GPIO_Init+0x21c>
 800564a:	2303      	movs	r3, #3
 800564c:	e004      	b.n	8005658 <HAL_GPIO_Init+0x21c>
 800564e:	2302      	movs	r3, #2
 8005650:	e002      	b.n	8005658 <HAL_GPIO_Init+0x21c>
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <HAL_GPIO_Init+0x21c>
 8005656:	2300      	movs	r3, #0
 8005658:	69fa      	ldr	r2, [r7, #28]
 800565a:	f002 0203 	and.w	r2, r2, #3
 800565e:	0092      	lsls	r2, r2, #2
 8005660:	4093      	lsls	r3, r2
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	4313      	orrs	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005668:	4935      	ldr	r1, [pc, #212]	; (8005740 <HAL_GPIO_Init+0x304>)
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	089b      	lsrs	r3, r3, #2
 800566e:	3302      	adds	r3, #2
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005676:	4b3a      	ldr	r3, [pc, #232]	; (8005760 <HAL_GPIO_Init+0x324>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	43db      	mvns	r3, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4013      	ands	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800569a:	4a31      	ldr	r2, [pc, #196]	; (8005760 <HAL_GPIO_Init+0x324>)
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056a0:	4b2f      	ldr	r3, [pc, #188]	; (8005760 <HAL_GPIO_Init+0x324>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	43db      	mvns	r3, r3
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	4013      	ands	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056c4:	4a26      	ldr	r2, [pc, #152]	; (8005760 <HAL_GPIO_Init+0x324>)
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056ca:	4b25      	ldr	r3, [pc, #148]	; (8005760 <HAL_GPIO_Init+0x324>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	43db      	mvns	r3, r3
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4013      	ands	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056ee:	4a1c      	ldr	r2, [pc, #112]	; (8005760 <HAL_GPIO_Init+0x324>)
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056f4:	4b1a      	ldr	r3, [pc, #104]	; (8005760 <HAL_GPIO_Init+0x324>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	43db      	mvns	r3, r3
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	4013      	ands	r3, r2
 8005702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005718:	4a11      	ldr	r2, [pc, #68]	; (8005760 <HAL_GPIO_Init+0x324>)
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	3301      	adds	r3, #1
 8005722:	61fb      	str	r3, [r7, #28]
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	2b0f      	cmp	r3, #15
 8005728:	f67f ae96 	bls.w	8005458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800572c:	bf00      	nop
 800572e:	bf00      	nop
 8005730:	3724      	adds	r7, #36	; 0x24
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40023800 	.word	0x40023800
 8005740:	40013800 	.word	0x40013800
 8005744:	40020000 	.word	0x40020000
 8005748:	40020400 	.word	0x40020400
 800574c:	40020800 	.word	0x40020800
 8005750:	40020c00 	.word	0x40020c00
 8005754:	40021000 	.word	0x40021000
 8005758:	40021400 	.word	0x40021400
 800575c:	40021800 	.word	0x40021800
 8005760:	40013c00 	.word	0x40013c00

08005764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691a      	ldr	r2, [r3, #16]
 8005774:	887b      	ldrh	r3, [r7, #2]
 8005776:	4013      	ands	r3, r2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800577c:	2301      	movs	r3, #1
 800577e:	73fb      	strb	r3, [r7, #15]
 8005780:	e001      	b.n	8005786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005786:	7bfb      	ldrb	r3, [r7, #15]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	807b      	strh	r3, [r7, #2]
 80057a0:	4613      	mov	r3, r2
 80057a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057a4:	787b      	ldrb	r3, [r7, #1]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057aa:	887a      	ldrh	r2, [r7, #2]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057b0:	e003      	b.n	80057ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057b2:	887b      	ldrh	r3, [r7, #2]
 80057b4:	041a      	lsls	r2, r3, #16
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	619a      	str	r2, [r3, #24]
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b085      	sub	sp, #20
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	460b      	mov	r3, r1
 80057d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057d8:	887a      	ldrh	r2, [r7, #2]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4013      	ands	r3, r2
 80057de:	041a      	lsls	r2, r3, #16
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	43d9      	mvns	r1, r3
 80057e4:	887b      	ldrh	r3, [r7, #2]
 80057e6:	400b      	ands	r3, r1
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	619a      	str	r2, [r3, #24]
}
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005806:	4b08      	ldr	r3, [pc, #32]	; (8005828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005808:	695a      	ldr	r2, [r3, #20]
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	4013      	ands	r3, r2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d006      	beq.n	8005820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005812:	4a05      	ldr	r2, [pc, #20]	; (8005828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005814:	88fb      	ldrh	r3, [r7, #6]
 8005816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	4618      	mov	r0, r3
 800581c:	f7fd fc6a 	bl	80030f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005820:	bf00      	nop
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40013c00 	.word	0x40013c00

0800582c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005836:	2300      	movs	r3, #0
 8005838:	603b      	str	r3, [r7, #0]
 800583a:	4b20      	ldr	r3, [pc, #128]	; (80058bc <HAL_PWREx_EnableOverDrive+0x90>)
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	4a1f      	ldr	r2, [pc, #124]	; (80058bc <HAL_PWREx_EnableOverDrive+0x90>)
 8005840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005844:	6413      	str	r3, [r2, #64]	; 0x40
 8005846:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <HAL_PWREx_EnableOverDrive+0x90>)
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005852:	4b1b      	ldr	r3, [pc, #108]	; (80058c0 <HAL_PWREx_EnableOverDrive+0x94>)
 8005854:	2201      	movs	r2, #1
 8005856:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005858:	f7fe fa90 	bl	8003d7c <HAL_GetTick>
 800585c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800585e:	e009      	b.n	8005874 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005860:	f7fe fa8c 	bl	8003d7c <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800586e:	d901      	bls.n	8005874 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e01f      	b.n	80058b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005874:	4b13      	ldr	r3, [pc, #76]	; (80058c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005880:	d1ee      	bne.n	8005860 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005882:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005884:	2201      	movs	r2, #1
 8005886:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005888:	f7fe fa78 	bl	8003d7c <HAL_GetTick>
 800588c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800588e:	e009      	b.n	80058a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005890:	f7fe fa74 	bl	8003d7c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800589e:	d901      	bls.n	80058a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e007      	b.n	80058b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80058a4:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <HAL_PWREx_EnableOverDrive+0x98>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058b0:	d1ee      	bne.n	8005890 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40023800 	.word	0x40023800
 80058c0:	420e0040 	.word	0x420e0040
 80058c4:	40007000 	.word	0x40007000
 80058c8:	420e0044 	.word	0x420e0044

080058cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0cc      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058e0:	4b68      	ldr	r3, [pc, #416]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d90c      	bls.n	8005908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ee:	4b65      	ldr	r3, [pc, #404]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f6:	4b63      	ldr	r3, [pc, #396]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d001      	beq.n	8005908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0b8      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d020      	beq.n	8005956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005920:	4b59      	ldr	r3, [pc, #356]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	4a58      	ldr	r2, [pc, #352]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800592a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d005      	beq.n	8005944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005938:	4b53      	ldr	r3, [pc, #332]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4a52      	ldr	r2, [pc, #328]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005944:	4b50      	ldr	r3, [pc, #320]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	494d      	ldr	r1, [pc, #308]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	4313      	orrs	r3, r2
 8005954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d044      	beq.n	80059ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d107      	bne.n	800597a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596a:	4b47      	ldr	r3, [pc, #284]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d119      	bne.n	80059aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e07f      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d003      	beq.n	800598a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005986:	2b03      	cmp	r3, #3
 8005988:	d107      	bne.n	800599a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800598a:	4b3f      	ldr	r3, [pc, #252]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e06f      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800599a:	4b3b      	ldr	r3, [pc, #236]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e067      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059aa:	4b37      	ldr	r3, [pc, #220]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f023 0203 	bic.w	r2, r3, #3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	4934      	ldr	r1, [pc, #208]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059bc:	f7fe f9de 	bl	8003d7c <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c2:	e00a      	b.n	80059da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c4:	f7fe f9da 	bl	8003d7c <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e04f      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059da:	4b2b      	ldr	r3, [pc, #172]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 020c 	and.w	r2, r3, #12
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d1eb      	bne.n	80059c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ec:	4b25      	ldr	r3, [pc, #148]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d20c      	bcs.n	8005a14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fa:	4b22      	ldr	r3, [pc, #136]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a02:	4b20      	ldr	r3, [pc, #128]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d001      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e032      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a20:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	4916      	ldr	r1, [pc, #88]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d009      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a3e:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	490e      	ldr	r1, [pc, #56]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a52:	f000 f855 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 8005a56:	4602      	mov	r2, r0
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	091b      	lsrs	r3, r3, #4
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	490a      	ldr	r1, [pc, #40]	; (8005a8c <HAL_RCC_ClockConfig+0x1c0>)
 8005a64:	5ccb      	ldrb	r3, [r1, r3]
 8005a66:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6a:	4a09      	ldr	r2, [pc, #36]	; (8005a90 <HAL_RCC_ClockConfig+0x1c4>)
 8005a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a6e:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <HAL_RCC_ClockConfig+0x1c8>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fe f93e 	bl	8003cf4 <HAL_InitTick>

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40023c00 	.word	0x40023c00
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	0800d770 	.word	0x0800d770
 8005a90:	2000004c 	.word	0x2000004c
 8005a94:	20000050 	.word	0x20000050

08005a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a9c:	4b03      	ldr	r3, [pc, #12]	; (8005aac <HAL_RCC_GetHCLKFreq+0x14>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	2000004c 	.word	0x2000004c

08005ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ab4:	f7ff fff0 	bl	8005a98 <HAL_RCC_GetHCLKFreq>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	0a9b      	lsrs	r3, r3, #10
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	4903      	ldr	r1, [pc, #12]	; (8005ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ac6:	5ccb      	ldrb	r3, [r1, r3]
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	0800d780 	.word	0x0800d780

08005ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005adc:	f7ff ffdc 	bl	8005a98 <HAL_RCC_GetHCLKFreq>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	0b5b      	lsrs	r3, r3, #13
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	4903      	ldr	r1, [pc, #12]	; (8005afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aee:	5ccb      	ldrb	r3, [r1, r3]
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40023800 	.word	0x40023800
 8005afc:	0800d780 	.word	0x0800d780

08005b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b04:	b0ae      	sub	sp, #184	; 0xb8
 8005b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b26:	4bcb      	ldr	r3, [pc, #812]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
 8005b2e:	2b0c      	cmp	r3, #12
 8005b30:	f200 8206 	bhi.w	8005f40 <HAL_RCC_GetSysClockFreq+0x440>
 8005b34:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3a:	bf00      	nop
 8005b3c:	08005b71 	.word	0x08005b71
 8005b40:	08005f41 	.word	0x08005f41
 8005b44:	08005f41 	.word	0x08005f41
 8005b48:	08005f41 	.word	0x08005f41
 8005b4c:	08005b79 	.word	0x08005b79
 8005b50:	08005f41 	.word	0x08005f41
 8005b54:	08005f41 	.word	0x08005f41
 8005b58:	08005f41 	.word	0x08005f41
 8005b5c:	08005b81 	.word	0x08005b81
 8005b60:	08005f41 	.word	0x08005f41
 8005b64:	08005f41 	.word	0x08005f41
 8005b68:	08005f41 	.word	0x08005f41
 8005b6c:	08005d71 	.word	0x08005d71
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b70:	4bb9      	ldr	r3, [pc, #740]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x358>)
 8005b72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005b76:	e1e7      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b78:	4bb8      	ldr	r3, [pc, #736]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005b7e:	e1e3      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b80:	4bb4      	ldr	r3, [pc, #720]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b8c:	4bb1      	ldr	r3, [pc, #708]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d071      	beq.n	8005c7c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b98:	4bae      	ldr	r3, [pc, #696]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	099b      	lsrs	r3, r3, #6
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ba4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	462b      	mov	r3, r5
 8005bc2:	f04f 0000 	mov.w	r0, #0
 8005bc6:	f04f 0100 	mov.w	r1, #0
 8005bca:	0159      	lsls	r1, r3, #5
 8005bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bd0:	0150      	lsls	r0, r2, #5
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	1a51      	subs	r1, r2, r1
 8005bda:	6439      	str	r1, [r7, #64]	; 0x40
 8005bdc:	4629      	mov	r1, r5
 8005bde:	eb63 0301 	sbc.w	r3, r3, r1
 8005be2:	647b      	str	r3, [r7, #68]	; 0x44
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	018b      	lsls	r3, r1, #6
 8005bf4:	4641      	mov	r1, r8
 8005bf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	018a      	lsls	r2, r1, #6
 8005bfe:	4641      	mov	r1, r8
 8005c00:	1a51      	subs	r1, r2, r1
 8005c02:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c04:	4649      	mov	r1, r9
 8005c06:	eb63 0301 	sbc.w	r3, r3, r1
 8005c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005c18:	4649      	mov	r1, r9
 8005c1a:	00cb      	lsls	r3, r1, #3
 8005c1c:	4641      	mov	r1, r8
 8005c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c22:	4641      	mov	r1, r8
 8005c24:	00ca      	lsls	r2, r1, #3
 8005c26:	4610      	mov	r0, r2
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	189b      	adds	r3, r3, r2
 8005c30:	633b      	str	r3, [r7, #48]	; 0x30
 8005c32:	462b      	mov	r3, r5
 8005c34:	460a      	mov	r2, r1
 8005c36:	eb42 0303 	adc.w	r3, r2, r3
 8005c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c48:	4629      	mov	r1, r5
 8005c4a:	024b      	lsls	r3, r1, #9
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c52:	4621      	mov	r1, r4
 8005c54:	024a      	lsls	r2, r1, #9
 8005c56:	4610      	mov	r0, r2
 8005c58:	4619      	mov	r1, r3
 8005c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c68:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005c6c:	f7fb f80c 	bl	8000c88 <__aeabi_uldivmod>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4613      	mov	r3, r2
 8005c76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c7a:	e067      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c7c:	4b75      	ldr	r3, [pc, #468]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	099b      	lsrs	r3, r3, #6
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c88:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005c8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c94:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c96:	2300      	movs	r3, #0
 8005c98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c9a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	462b      	mov	r3, r5
 8005ca2:	f04f 0000 	mov.w	r0, #0
 8005ca6:	f04f 0100 	mov.w	r1, #0
 8005caa:	0159      	lsls	r1, r3, #5
 8005cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cb0:	0150      	lsls	r0, r2, #5
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	1a51      	subs	r1, r2, r1
 8005cba:	62b9      	str	r1, [r7, #40]	; 0x28
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	018b      	lsls	r3, r1, #6
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cda:	4641      	mov	r1, r8
 8005cdc:	018a      	lsls	r2, r1, #6
 8005cde:	4641      	mov	r1, r8
 8005ce0:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	eb63 0b01 	sbc.w	fp, r3, r1
 8005cea:	f04f 0200 	mov.w	r2, #0
 8005cee:	f04f 0300 	mov.w	r3, #0
 8005cf2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cf6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cfe:	4692      	mov	sl, r2
 8005d00:	469b      	mov	fp, r3
 8005d02:	4623      	mov	r3, r4
 8005d04:	eb1a 0303 	adds.w	r3, sl, r3
 8005d08:	623b      	str	r3, [r7, #32]
 8005d0a:	462b      	mov	r3, r5
 8005d0c:	eb4b 0303 	adc.w	r3, fp, r3
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
 8005d12:	f04f 0200 	mov.w	r2, #0
 8005d16:	f04f 0300 	mov.w	r3, #0
 8005d1a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005d1e:	4629      	mov	r1, r5
 8005d20:	028b      	lsls	r3, r1, #10
 8005d22:	4621      	mov	r1, r4
 8005d24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d28:	4621      	mov	r1, r4
 8005d2a:	028a      	lsls	r2, r1, #10
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	4619      	mov	r1, r3
 8005d30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d34:	2200      	movs	r2, #0
 8005d36:	673b      	str	r3, [r7, #112]	; 0x70
 8005d38:	677a      	str	r2, [r7, #116]	; 0x74
 8005d3a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005d3e:	f7fa ffa3 	bl	8000c88 <__aeabi_uldivmod>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4613      	mov	r3, r2
 8005d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d4c:	4b41      	ldr	r3, [pc, #260]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	0c1b      	lsrs	r3, r3, #16
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	3301      	adds	r3, #1
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005d5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005d6e:	e0eb      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d70:	4b38      	ldr	r3, [pc, #224]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d7c:	4b35      	ldr	r3, [pc, #212]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d06b      	beq.n	8005e60 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d88:	4b32      	ldr	r3, [pc, #200]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	099b      	lsrs	r3, r3, #6
 8005d8e:	2200      	movs	r2, #0
 8005d90:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9a:	663b      	str	r3, [r7, #96]	; 0x60
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	667b      	str	r3, [r7, #100]	; 0x64
 8005da0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005da4:	4622      	mov	r2, r4
 8005da6:	462b      	mov	r3, r5
 8005da8:	f04f 0000 	mov.w	r0, #0
 8005dac:	f04f 0100 	mov.w	r1, #0
 8005db0:	0159      	lsls	r1, r3, #5
 8005db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005db6:	0150      	lsls	r0, r2, #5
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	1a51      	subs	r1, r2, r1
 8005dc0:	61b9      	str	r1, [r7, #24]
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	eb63 0301 	sbc.w	r3, r3, r1
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	f04f 0200 	mov.w	r2, #0
 8005dce:	f04f 0300 	mov.w	r3, #0
 8005dd2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005dd6:	4659      	mov	r1, fp
 8005dd8:	018b      	lsls	r3, r1, #6
 8005dda:	4651      	mov	r1, sl
 8005ddc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005de0:	4651      	mov	r1, sl
 8005de2:	018a      	lsls	r2, r1, #6
 8005de4:	4651      	mov	r1, sl
 8005de6:	ebb2 0801 	subs.w	r8, r2, r1
 8005dea:	4659      	mov	r1, fp
 8005dec:	eb63 0901 	sbc.w	r9, r3, r1
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e04:	4690      	mov	r8, r2
 8005e06:	4699      	mov	r9, r3
 8005e08:	4623      	mov	r3, r4
 8005e0a:	eb18 0303 	adds.w	r3, r8, r3
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	462b      	mov	r3, r5
 8005e12:	eb49 0303 	adc.w	r3, r9, r3
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	f04f 0200 	mov.w	r2, #0
 8005e1c:	f04f 0300 	mov.w	r3, #0
 8005e20:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005e24:	4629      	mov	r1, r5
 8005e26:	024b      	lsls	r3, r1, #9
 8005e28:	4621      	mov	r1, r4
 8005e2a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e2e:	4621      	mov	r1, r4
 8005e30:	024a      	lsls	r2, r1, #9
 8005e32:	4610      	mov	r0, r2
 8005e34:	4619      	mov	r1, r3
 8005e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e3e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005e40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e44:	f7fa ff20 	bl	8000c88 <__aeabi_uldivmod>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e52:	e065      	b.n	8005f20 <HAL_RCC_GetSysClockFreq+0x420>
 8005e54:	40023800 	.word	0x40023800
 8005e58:	00f42400 	.word	0x00f42400
 8005e5c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e60:	4b3d      	ldr	r3, [pc, #244]	; (8005f58 <HAL_RCC_GetSysClockFreq+0x458>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	099b      	lsrs	r3, r3, #6
 8005e66:	2200      	movs	r2, #0
 8005e68:	4618      	mov	r0, r3
 8005e6a:	4611      	mov	r1, r2
 8005e6c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e70:	653b      	str	r3, [r7, #80]	; 0x50
 8005e72:	2300      	movs	r3, #0
 8005e74:	657b      	str	r3, [r7, #84]	; 0x54
 8005e76:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005e7a:	4642      	mov	r2, r8
 8005e7c:	464b      	mov	r3, r9
 8005e7e:	f04f 0000 	mov.w	r0, #0
 8005e82:	f04f 0100 	mov.w	r1, #0
 8005e86:	0159      	lsls	r1, r3, #5
 8005e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e8c:	0150      	lsls	r0, r2, #5
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4641      	mov	r1, r8
 8005e94:	1a51      	subs	r1, r2, r1
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	4649      	mov	r1, r9
 8005e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	f04f 0300 	mov.w	r3, #0
 8005ea8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005eac:	4659      	mov	r1, fp
 8005eae:	018b      	lsls	r3, r1, #6
 8005eb0:	4651      	mov	r1, sl
 8005eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005eb6:	4651      	mov	r1, sl
 8005eb8:	018a      	lsls	r2, r1, #6
 8005eba:	4651      	mov	r1, sl
 8005ebc:	1a54      	subs	r4, r2, r1
 8005ebe:	4659      	mov	r1, fp
 8005ec0:	eb63 0501 	sbc.w	r5, r3, r1
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	00eb      	lsls	r3, r5, #3
 8005ece:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ed2:	00e2      	lsls	r2, r4, #3
 8005ed4:	4614      	mov	r4, r2
 8005ed6:	461d      	mov	r5, r3
 8005ed8:	4643      	mov	r3, r8
 8005eda:	18e3      	adds	r3, r4, r3
 8005edc:	603b      	str	r3, [r7, #0]
 8005ede:	464b      	mov	r3, r9
 8005ee0:	eb45 0303 	adc.w	r3, r5, r3
 8005ee4:	607b      	str	r3, [r7, #4]
 8005ee6:	f04f 0200 	mov.w	r2, #0
 8005eea:	f04f 0300 	mov.w	r3, #0
 8005eee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	028b      	lsls	r3, r1, #10
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005efc:	4621      	mov	r1, r4
 8005efe:	028a      	lsls	r2, r1, #10
 8005f00:	4610      	mov	r0, r2
 8005f02:	4619      	mov	r1, r3
 8005f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f08:	2200      	movs	r2, #0
 8005f0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f0c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005f0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f12:	f7fa feb9 	bl	8000c88 <__aeabi_uldivmod>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005f20:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <HAL_RCC_GetSysClockFreq+0x458>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	0f1b      	lsrs	r3, r3, #28
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005f2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005f3e:	e003      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f40:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005f42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005f46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	37b8      	adds	r7, #184	; 0xb8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f56:	bf00      	nop
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	00f42400 	.word	0x00f42400

08005f60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e28d      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 8083 	beq.w	8006086 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f80:	4b94      	ldr	r3, [pc, #592]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 030c 	and.w	r3, r3, #12
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d019      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f8c:	4b91      	ldr	r3, [pc, #580]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d106      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f98:	4b8e      	ldr	r3, [pc, #568]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fa4:	d00c      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fa6:	4b8b      	ldr	r3, [pc, #556]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005fae:	2b0c      	cmp	r3, #12
 8005fb0:	d112      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fb2:	4b88      	ldr	r3, [pc, #544]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fbe:	d10b      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fc0:	4b84      	ldr	r3, [pc, #528]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d05b      	beq.n	8006084 <HAL_RCC_OscConfig+0x124>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d157      	bne.n	8006084 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e25a      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe0:	d106      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x90>
 8005fe2:	4b7c      	ldr	r3, [pc, #496]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a7b      	ldr	r2, [pc, #492]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8005fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	e01d      	b.n	800602c <HAL_RCC_OscConfig+0xcc>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ff8:	d10c      	bne.n	8006014 <HAL_RCC_OscConfig+0xb4>
 8005ffa:	4b76      	ldr	r3, [pc, #472]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a75      	ldr	r2, [pc, #468]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8006000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	4b73      	ldr	r3, [pc, #460]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a72      	ldr	r2, [pc, #456]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 800600c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	e00b      	b.n	800602c <HAL_RCC_OscConfig+0xcc>
 8006014:	4b6f      	ldr	r3, [pc, #444]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a6e      	ldr	r2, [pc, #440]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 800601a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	4b6c      	ldr	r3, [pc, #432]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a6b      	ldr	r2, [pc, #428]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8006026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800602a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d013      	beq.n	800605c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006034:	f7fd fea2 	bl	8003d7c <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800603a:	e008      	b.n	800604e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800603c:	f7fd fe9e 	bl	8003d7c <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b64      	cmp	r3, #100	; 0x64
 8006048:	d901      	bls.n	800604e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e21f      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800604e:	4b61      	ldr	r3, [pc, #388]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0f0      	beq.n	800603c <HAL_RCC_OscConfig+0xdc>
 800605a:	e014      	b.n	8006086 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605c:	f7fd fe8e 	bl	8003d7c <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006064:	f7fd fe8a 	bl	8003d7c <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b64      	cmp	r3, #100	; 0x64
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e20b      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006076:	4b57      	ldr	r3, [pc, #348]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1f0      	bne.n	8006064 <HAL_RCC_OscConfig+0x104>
 8006082:	e000      	b.n	8006086 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d06f      	beq.n	8006172 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006092:	4b50      	ldr	r3, [pc, #320]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 030c 	and.w	r3, r3, #12
 800609a:	2b00      	cmp	r3, #0
 800609c:	d017      	beq.n	80060ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800609e:	4b4d      	ldr	r3, [pc, #308]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d105      	bne.n	80060b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80060aa:	4b4a      	ldr	r3, [pc, #296]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00b      	beq.n	80060ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060b6:	4b47      	ldr	r3, [pc, #284]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80060be:	2b0c      	cmp	r3, #12
 80060c0:	d11c      	bne.n	80060fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060c2:	4b44      	ldr	r3, [pc, #272]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d116      	bne.n	80060fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ce:	4b41      	ldr	r3, [pc, #260]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d005      	beq.n	80060e6 <HAL_RCC_OscConfig+0x186>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d001      	beq.n	80060e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e1d3      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e6:	4b3b      	ldr	r3, [pc, #236]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	4937      	ldr	r1, [pc, #220]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060fa:	e03a      	b.n	8006172 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d020      	beq.n	8006146 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006104:	4b34      	ldr	r3, [pc, #208]	; (80061d8 <HAL_RCC_OscConfig+0x278>)
 8006106:	2201      	movs	r2, #1
 8006108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800610a:	f7fd fe37 	bl	8003d7c <HAL_GetTick>
 800610e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006110:	e008      	b.n	8006124 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006112:	f7fd fe33 	bl	8003d7c <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e1b4      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006124:	4b2b      	ldr	r3, [pc, #172]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0f0      	beq.n	8006112 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006130:	4b28      	ldr	r3, [pc, #160]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	4925      	ldr	r1, [pc, #148]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8006140:	4313      	orrs	r3, r2
 8006142:	600b      	str	r3, [r1, #0]
 8006144:	e015      	b.n	8006172 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006146:	4b24      	ldr	r3, [pc, #144]	; (80061d8 <HAL_RCC_OscConfig+0x278>)
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614c:	f7fd fe16 	bl	8003d7c <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006154:	f7fd fe12 	bl	8003d7c <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e193      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006166:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f0      	bne.n	8006154 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0308 	and.w	r3, r3, #8
 800617a:	2b00      	cmp	r3, #0
 800617c:	d036      	beq.n	80061ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d016      	beq.n	80061b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006186:	4b15      	ldr	r3, [pc, #84]	; (80061dc <HAL_RCC_OscConfig+0x27c>)
 8006188:	2201      	movs	r2, #1
 800618a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800618c:	f7fd fdf6 	bl	8003d7c <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006194:	f7fd fdf2 	bl	8003d7c <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e173      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061a6:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <HAL_RCC_OscConfig+0x274>)
 80061a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0f0      	beq.n	8006194 <HAL_RCC_OscConfig+0x234>
 80061b2:	e01b      	b.n	80061ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061b4:	4b09      	ldr	r3, [pc, #36]	; (80061dc <HAL_RCC_OscConfig+0x27c>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ba:	f7fd fddf 	bl	8003d7c <HAL_GetTick>
 80061be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061c0:	e00e      	b.n	80061e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061c2:	f7fd fddb 	bl	8003d7c <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d907      	bls.n	80061e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e15c      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
 80061d4:	40023800 	.word	0x40023800
 80061d8:	42470000 	.word	0x42470000
 80061dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061e0:	4b8a      	ldr	r3, [pc, #552]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 80061e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1ea      	bne.n	80061c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 8097 	beq.w	8006328 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061fa:	2300      	movs	r3, #0
 80061fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061fe:	4b83      	ldr	r3, [pc, #524]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10f      	bne.n	800622a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800620a:	2300      	movs	r3, #0
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	4b7f      	ldr	r3, [pc, #508]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	4a7e      	ldr	r2, [pc, #504]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 8006214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006218:	6413      	str	r3, [r2, #64]	; 0x40
 800621a:	4b7c      	ldr	r3, [pc, #496]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006222:	60bb      	str	r3, [r7, #8]
 8006224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006226:	2301      	movs	r3, #1
 8006228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800622a:	4b79      	ldr	r3, [pc, #484]	; (8006410 <HAL_RCC_OscConfig+0x4b0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006232:	2b00      	cmp	r3, #0
 8006234:	d118      	bne.n	8006268 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006236:	4b76      	ldr	r3, [pc, #472]	; (8006410 <HAL_RCC_OscConfig+0x4b0>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a75      	ldr	r2, [pc, #468]	; (8006410 <HAL_RCC_OscConfig+0x4b0>)
 800623c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006242:	f7fd fd9b 	bl	8003d7c <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006248:	e008      	b.n	800625c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800624a:	f7fd fd97 	bl	8003d7c <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e118      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625c:	4b6c      	ldr	r3, [pc, #432]	; (8006410 <HAL_RCC_OscConfig+0x4b0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0f0      	beq.n	800624a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d106      	bne.n	800627e <HAL_RCC_OscConfig+0x31e>
 8006270:	4b66      	ldr	r3, [pc, #408]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 8006272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006274:	4a65      	ldr	r2, [pc, #404]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 8006276:	f043 0301 	orr.w	r3, r3, #1
 800627a:	6713      	str	r3, [r2, #112]	; 0x70
 800627c:	e01c      	b.n	80062b8 <HAL_RCC_OscConfig+0x358>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	2b05      	cmp	r3, #5
 8006284:	d10c      	bne.n	80062a0 <HAL_RCC_OscConfig+0x340>
 8006286:	4b61      	ldr	r3, [pc, #388]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 8006288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628a:	4a60      	ldr	r2, [pc, #384]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 800628c:	f043 0304 	orr.w	r3, r3, #4
 8006290:	6713      	str	r3, [r2, #112]	; 0x70
 8006292:	4b5e      	ldr	r3, [pc, #376]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 8006294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006296:	4a5d      	ldr	r2, [pc, #372]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 8006298:	f043 0301 	orr.w	r3, r3, #1
 800629c:	6713      	str	r3, [r2, #112]	; 0x70
 800629e:	e00b      	b.n	80062b8 <HAL_RCC_OscConfig+0x358>
 80062a0:	4b5a      	ldr	r3, [pc, #360]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 80062a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a4:	4a59      	ldr	r2, [pc, #356]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 80062a6:	f023 0301 	bic.w	r3, r3, #1
 80062aa:	6713      	str	r3, [r2, #112]	; 0x70
 80062ac:	4b57      	ldr	r3, [pc, #348]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 80062ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b0:	4a56      	ldr	r2, [pc, #344]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 80062b2:	f023 0304 	bic.w	r3, r3, #4
 80062b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d015      	beq.n	80062ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c0:	f7fd fd5c 	bl	8003d7c <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c6:	e00a      	b.n	80062de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062c8:	f7fd fd58 	bl	8003d7c <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e0d7      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062de:	4b4b      	ldr	r3, [pc, #300]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 80062e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0ee      	beq.n	80062c8 <HAL_RCC_OscConfig+0x368>
 80062ea:	e014      	b.n	8006316 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ec:	f7fd fd46 	bl	8003d7c <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062f2:	e00a      	b.n	800630a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062f4:	f7fd fd42 	bl	8003d7c <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006302:	4293      	cmp	r3, r2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e0c1      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800630a:	4b40      	ldr	r3, [pc, #256]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 800630c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1ee      	bne.n	80062f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d105      	bne.n	8006328 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800631c:	4b3b      	ldr	r3, [pc, #236]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	4a3a      	ldr	r2, [pc, #232]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 8006322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006326:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 80ad 	beq.w	800648c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006332:	4b36      	ldr	r3, [pc, #216]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	2b08      	cmp	r3, #8
 800633c:	d060      	beq.n	8006400 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	2b02      	cmp	r3, #2
 8006344:	d145      	bne.n	80063d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006346:	4b33      	ldr	r3, [pc, #204]	; (8006414 <HAL_RCC_OscConfig+0x4b4>)
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634c:	f7fd fd16 	bl	8003d7c <HAL_GetTick>
 8006350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006352:	e008      	b.n	8006366 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006354:	f7fd fd12 	bl	8003d7c <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e093      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006366:	4b29      	ldr	r3, [pc, #164]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1f0      	bne.n	8006354 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69da      	ldr	r2, [r3, #28]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	019b      	lsls	r3, r3, #6
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	3b01      	subs	r3, #1
 800638c:	041b      	lsls	r3, r3, #16
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	061b      	lsls	r3, r3, #24
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	071b      	lsls	r3, r3, #28
 800639e:	491b      	ldr	r1, [pc, #108]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063a4:	4b1b      	ldr	r3, [pc, #108]	; (8006414 <HAL_RCC_OscConfig+0x4b4>)
 80063a6:	2201      	movs	r2, #1
 80063a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063aa:	f7fd fce7 	bl	8003d7c <HAL_GetTick>
 80063ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063b0:	e008      	b.n	80063c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b2:	f7fd fce3 	bl	8003d7c <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d901      	bls.n	80063c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e064      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063c4:	4b11      	ldr	r3, [pc, #68]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0f0      	beq.n	80063b2 <HAL_RCC_OscConfig+0x452>
 80063d0:	e05c      	b.n	800648c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063d2:	4b10      	ldr	r3, [pc, #64]	; (8006414 <HAL_RCC_OscConfig+0x4b4>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d8:	f7fd fcd0 	bl	8003d7c <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063e0:	f7fd fccc 	bl	8003d7c <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e04d      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063f2:	4b06      	ldr	r3, [pc, #24]	; (800640c <HAL_RCC_OscConfig+0x4ac>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1f0      	bne.n	80063e0 <HAL_RCC_OscConfig+0x480>
 80063fe:	e045      	b.n	800648c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d107      	bne.n	8006418 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e040      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
 800640c:	40023800 	.word	0x40023800
 8006410:	40007000 	.word	0x40007000
 8006414:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006418:	4b1f      	ldr	r3, [pc, #124]	; (8006498 <HAL_RCC_OscConfig+0x538>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d030      	beq.n	8006488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006430:	429a      	cmp	r2, r3
 8006432:	d129      	bne.n	8006488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800643e:	429a      	cmp	r2, r3
 8006440:	d122      	bne.n	8006488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006448:	4013      	ands	r3, r2
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800644e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006450:	4293      	cmp	r3, r2
 8006452:	d119      	bne.n	8006488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	085b      	lsrs	r3, r3, #1
 8006460:	3b01      	subs	r3, #1
 8006462:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006464:	429a      	cmp	r2, r3
 8006466:	d10f      	bne.n	8006488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006472:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006474:	429a      	cmp	r2, r3
 8006476:	d107      	bne.n	8006488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006484:	429a      	cmp	r2, r3
 8006486:	d001      	beq.n	800648c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	40023800 	.word	0x40023800

0800649c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e041      	b.n	8006532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fc ffec 	bl	80034a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3304      	adds	r3, #4
 80064d8:	4619      	mov	r1, r3
 80064da:	4610      	mov	r0, r2
 80064dc:	f001 f93a 	bl	8007754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b01      	cmp	r3, #1
 800654e:	d001      	beq.n	8006554 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e046      	b.n	80065e2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a23      	ldr	r2, [pc, #140]	; (80065f0 <HAL_TIM_Base_Start+0xb4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d022      	beq.n	80065ac <HAL_TIM_Base_Start+0x70>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656e:	d01d      	beq.n	80065ac <HAL_TIM_Base_Start+0x70>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1f      	ldr	r2, [pc, #124]	; (80065f4 <HAL_TIM_Base_Start+0xb8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d018      	beq.n	80065ac <HAL_TIM_Base_Start+0x70>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a1e      	ldr	r2, [pc, #120]	; (80065f8 <HAL_TIM_Base_Start+0xbc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d013      	beq.n	80065ac <HAL_TIM_Base_Start+0x70>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a1c      	ldr	r2, [pc, #112]	; (80065fc <HAL_TIM_Base_Start+0xc0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00e      	beq.n	80065ac <HAL_TIM_Base_Start+0x70>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1b      	ldr	r2, [pc, #108]	; (8006600 <HAL_TIM_Base_Start+0xc4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d009      	beq.n	80065ac <HAL_TIM_Base_Start+0x70>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a19      	ldr	r2, [pc, #100]	; (8006604 <HAL_TIM_Base_Start+0xc8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d004      	beq.n	80065ac <HAL_TIM_Base_Start+0x70>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a18      	ldr	r2, [pc, #96]	; (8006608 <HAL_TIM_Base_Start+0xcc>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d111      	bne.n	80065d0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b06      	cmp	r3, #6
 80065bc:	d010      	beq.n	80065e0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f042 0201 	orr.w	r2, r2, #1
 80065cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ce:	e007      	b.n	80065e0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f042 0201 	orr.w	r2, r2, #1
 80065de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	40010000 	.word	0x40010000
 80065f4:	40000400 	.word	0x40000400
 80065f8:	40000800 	.word	0x40000800
 80065fc:	40000c00 	.word	0x40000c00
 8006600:	40010400 	.word	0x40010400
 8006604:	40014000 	.word	0x40014000
 8006608:	40001800 	.word	0x40001800

0800660c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e041      	b.n	80066a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fc ff12 	bl	800345c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3304      	adds	r3, #4
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f001 f882 	bl	8007754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d109      	bne.n	80066d0 <HAL_TIM_PWM_Start+0x24>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	bf14      	ite	ne
 80066c8:	2301      	movne	r3, #1
 80066ca:	2300      	moveq	r3, #0
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	e022      	b.n	8006716 <HAL_TIM_PWM_Start+0x6a>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d109      	bne.n	80066ea <HAL_TIM_PWM_Start+0x3e>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b01      	cmp	r3, #1
 80066e0:	bf14      	ite	ne
 80066e2:	2301      	movne	r3, #1
 80066e4:	2300      	moveq	r3, #0
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	e015      	b.n	8006716 <HAL_TIM_PWM_Start+0x6a>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d109      	bne.n	8006704 <HAL_TIM_PWM_Start+0x58>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	bf14      	ite	ne
 80066fc:	2301      	movne	r3, #1
 80066fe:	2300      	moveq	r3, #0
 8006700:	b2db      	uxtb	r3, r3
 8006702:	e008      	b.n	8006716 <HAL_TIM_PWM_Start+0x6a>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b01      	cmp	r3, #1
 800670e:	bf14      	ite	ne
 8006710:	2301      	movne	r3, #1
 8006712:	2300      	moveq	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e07c      	b.n	8006818 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d104      	bne.n	800672e <HAL_TIM_PWM_Start+0x82>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800672c:	e013      	b.n	8006756 <HAL_TIM_PWM_Start+0xaa>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b04      	cmp	r3, #4
 8006732:	d104      	bne.n	800673e <HAL_TIM_PWM_Start+0x92>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800673c:	e00b      	b.n	8006756 <HAL_TIM_PWM_Start+0xaa>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b08      	cmp	r3, #8
 8006742:	d104      	bne.n	800674e <HAL_TIM_PWM_Start+0xa2>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800674c:	e003      	b.n	8006756 <HAL_TIM_PWM_Start+0xaa>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2202      	movs	r2, #2
 8006752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2201      	movs	r2, #1
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f001 fc0c 	bl	8007f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a2d      	ldr	r2, [pc, #180]	; (8006820 <HAL_TIM_PWM_Start+0x174>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d004      	beq.n	8006778 <HAL_TIM_PWM_Start+0xcc>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a2c      	ldr	r2, [pc, #176]	; (8006824 <HAL_TIM_PWM_Start+0x178>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d101      	bne.n	800677c <HAL_TIM_PWM_Start+0xd0>
 8006778:	2301      	movs	r3, #1
 800677a:	e000      	b.n	800677e <HAL_TIM_PWM_Start+0xd2>
 800677c:	2300      	movs	r3, #0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006790:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a22      	ldr	r2, [pc, #136]	; (8006820 <HAL_TIM_PWM_Start+0x174>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d022      	beq.n	80067e2 <HAL_TIM_PWM_Start+0x136>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a4:	d01d      	beq.n	80067e2 <HAL_TIM_PWM_Start+0x136>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1f      	ldr	r2, [pc, #124]	; (8006828 <HAL_TIM_PWM_Start+0x17c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d018      	beq.n	80067e2 <HAL_TIM_PWM_Start+0x136>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1d      	ldr	r2, [pc, #116]	; (800682c <HAL_TIM_PWM_Start+0x180>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <HAL_TIM_PWM_Start+0x136>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <HAL_TIM_PWM_Start+0x184>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00e      	beq.n	80067e2 <HAL_TIM_PWM_Start+0x136>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a16      	ldr	r2, [pc, #88]	; (8006824 <HAL_TIM_PWM_Start+0x178>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d009      	beq.n	80067e2 <HAL_TIM_PWM_Start+0x136>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a18      	ldr	r2, [pc, #96]	; (8006834 <HAL_TIM_PWM_Start+0x188>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d004      	beq.n	80067e2 <HAL_TIM_PWM_Start+0x136>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a16      	ldr	r2, [pc, #88]	; (8006838 <HAL_TIM_PWM_Start+0x18c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d111      	bne.n	8006806 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b06      	cmp	r3, #6
 80067f2:	d010      	beq.n	8006816 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006804:	e007      	b.n	8006816 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0201 	orr.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	40010000 	.word	0x40010000
 8006824:	40010400 	.word	0x40010400
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800
 8006830:	40000c00 	.word	0x40000c00
 8006834:	40014000 	.word	0x40014000
 8006838:	40001800 	.word	0x40001800

0800683c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e041      	b.n	80068d2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f839 	bl	80068da <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3304      	adds	r3, #4
 8006878:	4619      	mov	r1, r3
 800687a:	4610      	mov	r0, r2
 800687c:	f000 ff6a 	bl	8007754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
	...

080068f0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d104      	bne.n	8006912 <HAL_TIM_IC_Start_DMA+0x22>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800690e:	b2db      	uxtb	r3, r3
 8006910:	e013      	b.n	800693a <HAL_TIM_IC_Start_DMA+0x4a>
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b04      	cmp	r3, #4
 8006916:	d104      	bne.n	8006922 <HAL_TIM_IC_Start_DMA+0x32>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800691e:	b2db      	uxtb	r3, r3
 8006920:	e00b      	b.n	800693a <HAL_TIM_IC_Start_DMA+0x4a>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b08      	cmp	r3, #8
 8006926:	d104      	bne.n	8006932 <HAL_TIM_IC_Start_DMA+0x42>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800692e:	b2db      	uxtb	r3, r3
 8006930:	e003      	b.n	800693a <HAL_TIM_IC_Start_DMA+0x4a>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006938:	b2db      	uxtb	r3, r3
 800693a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d104      	bne.n	800694c <HAL_TIM_IC_Start_DMA+0x5c>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006948:	b2db      	uxtb	r3, r3
 800694a:	e013      	b.n	8006974 <HAL_TIM_IC_Start_DMA+0x84>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b04      	cmp	r3, #4
 8006950:	d104      	bne.n	800695c <HAL_TIM_IC_Start_DMA+0x6c>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006958:	b2db      	uxtb	r3, r3
 800695a:	e00b      	b.n	8006974 <HAL_TIM_IC_Start_DMA+0x84>
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b08      	cmp	r3, #8
 8006960:	d104      	bne.n	800696c <HAL_TIM_IC_Start_DMA+0x7c>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006968:	b2db      	uxtb	r3, r3
 800696a:	e003      	b.n	8006974 <HAL_TIM_IC_Start_DMA+0x84>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006972:	b2db      	uxtb	r3, r3
 8006974:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8006976:	7dbb      	ldrb	r3, [r7, #22]
 8006978:	2b02      	cmp	r3, #2
 800697a:	d002      	beq.n	8006982 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800697c:	7d7b      	ldrb	r3, [r7, #21]
 800697e:	2b02      	cmp	r3, #2
 8006980:	d101      	bne.n	8006986 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8006982:	2302      	movs	r3, #2
 8006984:	e146      	b.n	8006c14 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8006986:	7dbb      	ldrb	r3, [r7, #22]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d143      	bne.n	8006a14 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800698c:	7d7b      	ldrb	r3, [r7, #21]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d140      	bne.n	8006a14 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d104      	bne.n	80069a2 <HAL_TIM_IC_Start_DMA+0xb2>
 8006998:	887b      	ldrh	r3, [r7, #2]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e138      	b.n	8006c14 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d104      	bne.n	80069b2 <HAL_TIM_IC_Start_DMA+0xc2>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069b0:	e013      	b.n	80069da <HAL_TIM_IC_Start_DMA+0xea>
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d104      	bne.n	80069c2 <HAL_TIM_IC_Start_DMA+0xd2>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069c0:	e00b      	b.n	80069da <HAL_TIM_IC_Start_DMA+0xea>
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d104      	bne.n	80069d2 <HAL_TIM_IC_Start_DMA+0xe2>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069d0:	e003      	b.n	80069da <HAL_TIM_IC_Start_DMA+0xea>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2202      	movs	r2, #2
 80069d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <HAL_TIM_IC_Start_DMA+0xfa>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80069e8:	e016      	b.n	8006a18 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d104      	bne.n	80069fa <HAL_TIM_IC_Start_DMA+0x10a>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80069f8:	e00e      	b.n	8006a18 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d104      	bne.n	8006a0a <HAL_TIM_IC_Start_DMA+0x11a>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8006a08:	e006      	b.n	8006a18 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8006a12:	e001      	b.n	8006a18 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e0fd      	b.n	8006c14 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	68b9      	ldr	r1, [r7, #8]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f001 faab 	bl	8007f7c <TIM_CCxChannelCmd>

  switch (Channel)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b0c      	cmp	r3, #12
 8006a2a:	f200 80ad 	bhi.w	8006b88 <HAL_TIM_IC_Start_DMA+0x298>
 8006a2e:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <HAL_TIM_IC_Start_DMA+0x144>)
 8006a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a34:	08006a69 	.word	0x08006a69
 8006a38:	08006b89 	.word	0x08006b89
 8006a3c:	08006b89 	.word	0x08006b89
 8006a40:	08006b89 	.word	0x08006b89
 8006a44:	08006ab1 	.word	0x08006ab1
 8006a48:	08006b89 	.word	0x08006b89
 8006a4c:	08006b89 	.word	0x08006b89
 8006a50:	08006b89 	.word	0x08006b89
 8006a54:	08006af9 	.word	0x08006af9
 8006a58:	08006b89 	.word	0x08006b89
 8006a5c:	08006b89 	.word	0x08006b89
 8006a60:	08006b89 	.word	0x08006b89
 8006a64:	08006b41 	.word	0x08006b41
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	4a6b      	ldr	r2, [pc, #428]	; (8006c1c <HAL_TIM_IC_Start_DMA+0x32c>)
 8006a6e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	4a6a      	ldr	r2, [pc, #424]	; (8006c20 <HAL_TIM_IC_Start_DMA+0x330>)
 8006a76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	4a69      	ldr	r2, [pc, #420]	; (8006c24 <HAL_TIM_IC_Start_DMA+0x334>)
 8006a7e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3334      	adds	r3, #52	; 0x34
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	887b      	ldrh	r3, [r7, #2]
 8006a90:	f7fd ff72 	bl	8004978 <HAL_DMA_Start_IT>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e0ba      	b.n	8006c14 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aac:	60da      	str	r2, [r3, #12]
      break;
 8006aae:	e06e      	b.n	8006b8e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab4:	4a59      	ldr	r2, [pc, #356]	; (8006c1c <HAL_TIM_IC_Start_DMA+0x32c>)
 8006ab6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	4a58      	ldr	r2, [pc, #352]	; (8006c20 <HAL_TIM_IC_Start_DMA+0x330>)
 8006abe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac4:	4a57      	ldr	r2, [pc, #348]	; (8006c24 <HAL_TIM_IC_Start_DMA+0x334>)
 8006ac6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3338      	adds	r3, #56	; 0x38
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	887b      	ldrh	r3, [r7, #2]
 8006ad8:	f7fd ff4e 	bl	8004978 <HAL_DMA_Start_IT>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e096      	b.n	8006c14 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006af4:	60da      	str	r2, [r3, #12]
      break;
 8006af6:	e04a      	b.n	8006b8e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	4a47      	ldr	r2, [pc, #284]	; (8006c1c <HAL_TIM_IC_Start_DMA+0x32c>)
 8006afe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	4a46      	ldr	r2, [pc, #280]	; (8006c20 <HAL_TIM_IC_Start_DMA+0x330>)
 8006b06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	4a45      	ldr	r2, [pc, #276]	; (8006c24 <HAL_TIM_IC_Start_DMA+0x334>)
 8006b0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	333c      	adds	r3, #60	; 0x3c
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	887b      	ldrh	r3, [r7, #2]
 8006b20:	f7fd ff2a 	bl	8004978 <HAL_DMA_Start_IT>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e072      	b.n	8006c14 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b3c:	60da      	str	r2, [r3, #12]
      break;
 8006b3e:	e026      	b.n	8006b8e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	4a35      	ldr	r2, [pc, #212]	; (8006c1c <HAL_TIM_IC_Start_DMA+0x32c>)
 8006b46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4c:	4a34      	ldr	r2, [pc, #208]	; (8006c20 <HAL_TIM_IC_Start_DMA+0x330>)
 8006b4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b54:	4a33      	ldr	r2, [pc, #204]	; (8006c24 <HAL_TIM_IC_Start_DMA+0x334>)
 8006b56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3340      	adds	r3, #64	; 0x40
 8006b62:	4619      	mov	r1, r3
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	887b      	ldrh	r3, [r7, #2]
 8006b68:	f7fd ff06 	bl	8004978 <HAL_DMA_Start_IT>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e04e      	b.n	8006c14 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b84:	60da      	str	r2, [r3, #12]
      break;
 8006b86:	e002      	b.n	8006b8e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b8c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a25      	ldr	r2, [pc, #148]	; (8006c28 <HAL_TIM_IC_Start_DMA+0x338>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d022      	beq.n	8006bde <HAL_TIM_IC_Start_DMA+0x2ee>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba0:	d01d      	beq.n	8006bde <HAL_TIM_IC_Start_DMA+0x2ee>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a21      	ldr	r2, [pc, #132]	; (8006c2c <HAL_TIM_IC_Start_DMA+0x33c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d018      	beq.n	8006bde <HAL_TIM_IC_Start_DMA+0x2ee>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a1f      	ldr	r2, [pc, #124]	; (8006c30 <HAL_TIM_IC_Start_DMA+0x340>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d013      	beq.n	8006bde <HAL_TIM_IC_Start_DMA+0x2ee>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a1e      	ldr	r2, [pc, #120]	; (8006c34 <HAL_TIM_IC_Start_DMA+0x344>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d00e      	beq.n	8006bde <HAL_TIM_IC_Start_DMA+0x2ee>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a1c      	ldr	r2, [pc, #112]	; (8006c38 <HAL_TIM_IC_Start_DMA+0x348>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d009      	beq.n	8006bde <HAL_TIM_IC_Start_DMA+0x2ee>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a1b      	ldr	r2, [pc, #108]	; (8006c3c <HAL_TIM_IC_Start_DMA+0x34c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d004      	beq.n	8006bde <HAL_TIM_IC_Start_DMA+0x2ee>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a19      	ldr	r2, [pc, #100]	; (8006c40 <HAL_TIM_IC_Start_DMA+0x350>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d111      	bne.n	8006c02 <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2b06      	cmp	r3, #6
 8006bee:	d010      	beq.n	8006c12 <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0201 	orr.w	r2, r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c00:	e007      	b.n	8006c12 <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f042 0201 	orr.w	r2, r2, #1
 8006c10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	08007625 	.word	0x08007625
 8006c20:	080076ed 	.word	0x080076ed
 8006c24:	08007593 	.word	0x08007593
 8006c28:	40010000 	.word	0x40010000
 8006c2c:	40000400 	.word	0x40000400
 8006c30:	40000800 	.word	0x40000800
 8006c34:	40000c00 	.word	0x40000c00
 8006c38:	40010400 	.word	0x40010400
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40001800 	.word	0x40001800

08006c44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e097      	b.n	8006d88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d106      	bne.n	8006c72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7fc fcdd 	bl	800362c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6812      	ldr	r2, [r2, #0]
 8006c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c88:	f023 0307 	bic.w	r3, r3, #7
 8006c8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	3304      	adds	r3, #4
 8006c96:	4619      	mov	r1, r3
 8006c98:	4610      	mov	r0, r2
 8006c9a:	f000 fd5b 	bl	8007754 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc6:	f023 0303 	bic.w	r3, r3, #3
 8006cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	021b      	lsls	r3, r3, #8
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006ce4:	f023 030c 	bic.w	r3, r3, #12
 8006ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	021b      	lsls	r3, r3, #8
 8006d00:	4313      	orrs	r3, r2
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	011a      	lsls	r2, r3, #4
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	031b      	lsls	r3, r3, #12
 8006d14:	4313      	orrs	r3, r2
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006d22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006d2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	011b      	lsls	r3, r3, #4
 8006d36:	4313      	orrs	r3, r2
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006da0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006da8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006db0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006db8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d110      	bne.n	8006de2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d102      	bne.n	8006dcc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006dc6:	7b7b      	ldrb	r3, [r7, #13]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d001      	beq.n	8006dd0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e069      	b.n	8006ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006de0:	e031      	b.n	8006e46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b04      	cmp	r3, #4
 8006de6:	d110      	bne.n	8006e0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006de8:	7bbb      	ldrb	r3, [r7, #14]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d102      	bne.n	8006df4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006dee:	7b3b      	ldrb	r3, [r7, #12]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d001      	beq.n	8006df8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e055      	b.n	8006ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e08:	e01d      	b.n	8006e46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d108      	bne.n	8006e22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e10:	7bbb      	ldrb	r3, [r7, #14]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d105      	bne.n	8006e22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e16:	7b7b      	ldrb	r3, [r7, #13]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d102      	bne.n	8006e22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e1c:	7b3b      	ldrb	r3, [r7, #12]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d001      	beq.n	8006e26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e03e      	b.n	8006ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2202      	movs	r2, #2
 8006e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2202      	movs	r2, #2
 8006e32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2202      	movs	r2, #2
 8006e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2202      	movs	r2, #2
 8006e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <HAL_TIM_Encoder_Start+0xc4>
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d008      	beq.n	8006e64 <HAL_TIM_Encoder_Start+0xd4>
 8006e52:	e00f      	b.n	8006e74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 f88d 	bl	8007f7c <TIM_CCxChannelCmd>
      break;
 8006e62:	e016      	b.n	8006e92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	2104      	movs	r1, #4
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f001 f885 	bl	8007f7c <TIM_CCxChannelCmd>
      break;
 8006e72:	e00e      	b.n	8006e92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f001 f87d 	bl	8007f7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2201      	movs	r2, #1
 8006e88:	2104      	movs	r1, #4
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f001 f876 	bl	8007f7c <TIM_CCxChannelCmd>
      break;
 8006e90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f042 0201 	orr.w	r2, r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d122      	bne.n	8006f08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d11b      	bne.n	8006f08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0202 	mvn.w	r2, #2
 8006ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fb1d 	bl	800752e <HAL_TIM_IC_CaptureCallback>
 8006ef4:	e005      	b.n	8006f02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fb0f 	bl	800751a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fb2a 	bl	8007556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0304 	and.w	r3, r3, #4
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d122      	bne.n	8006f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	d11b      	bne.n	8006f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0204 	mvn.w	r2, #4
 8006f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2202      	movs	r2, #2
 8006f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 faf3 	bl	800752e <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fae5 	bl	800751a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fb00 	bl	8007556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0308 	and.w	r3, r3, #8
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	d122      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0308 	and.w	r3, r3, #8
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d11b      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0208 	mvn.w	r2, #8
 8006f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2204      	movs	r2, #4
 8006f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fac9 	bl	800752e <HAL_TIM_IC_CaptureCallback>
 8006f9c:	e005      	b.n	8006faa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fabb 	bl	800751a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fad6 	bl	8007556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0310 	and.w	r3, r3, #16
 8006fba:	2b10      	cmp	r3, #16
 8006fbc:	d122      	bne.n	8007004 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0310 	and.w	r3, r3, #16
 8006fc8:	2b10      	cmp	r3, #16
 8006fca:	d11b      	bne.n	8007004 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0210 	mvn.w	r2, #16
 8006fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2208      	movs	r2, #8
 8006fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fa9f 	bl	800752e <HAL_TIM_IC_CaptureCallback>
 8006ff0:	e005      	b.n	8006ffe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa91 	bl	800751a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 faac 	bl	8007556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b01      	cmp	r3, #1
 8007010:	d10e      	bne.n	8007030 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b01      	cmp	r3, #1
 800701e:	d107      	bne.n	8007030 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0201 	mvn.w	r2, #1
 8007028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fa6b 	bl	8007506 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703a:	2b80      	cmp	r3, #128	; 0x80
 800703c:	d10e      	bne.n	800705c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007048:	2b80      	cmp	r3, #128	; 0x80
 800704a:	d107      	bne.n	800705c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 f88e 	bl	8008178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007066:	2b40      	cmp	r3, #64	; 0x40
 8007068:	d10e      	bne.n	8007088 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007074:	2b40      	cmp	r3, #64	; 0x40
 8007076:	d107      	bne.n	8007088 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa71 	bl	800756a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	2b20      	cmp	r3, #32
 8007094:	d10e      	bne.n	80070b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	f003 0320 	and.w	r3, r3, #32
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	d107      	bne.n	80070b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f06f 0220 	mvn.w	r2, #32
 80070ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f001 f858 	bl	8008164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070b4:	bf00      	nop
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d101      	bne.n	80070da <HAL_TIM_IC_ConfigChannel+0x1e>
 80070d6:	2302      	movs	r3, #2
 80070d8:	e088      	b.n	80071ec <HAL_TIM_IC_ConfigChannel+0x130>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d11b      	bne.n	8007120 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	6819      	ldr	r1, [r3, #0]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f000 fd7c 	bl	8007bf4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 020c 	bic.w	r2, r2, #12
 800710a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6999      	ldr	r1, [r3, #24]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	619a      	str	r2, [r3, #24]
 800711e:	e060      	b.n	80071e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b04      	cmp	r3, #4
 8007124:	d11c      	bne.n	8007160 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	6819      	ldr	r1, [r3, #0]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f000 fe00 	bl	8007d3a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	699a      	ldr	r2, [r3, #24]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007148:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6999      	ldr	r1, [r3, #24]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	021a      	lsls	r2, r3, #8
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	619a      	str	r2, [r3, #24]
 800715e:	e040      	b.n	80071e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b08      	cmp	r3, #8
 8007164:	d11b      	bne.n	800719e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	6819      	ldr	r1, [r3, #0]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f000 fe4d 	bl	8007e14 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69da      	ldr	r2, [r3, #28]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 020c 	bic.w	r2, r2, #12
 8007188:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69d9      	ldr	r1, [r3, #28]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	61da      	str	r2, [r3, #28]
 800719c:	e021      	b.n	80071e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b0c      	cmp	r3, #12
 80071a2:	d11c      	bne.n	80071de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6818      	ldr	r0, [r3, #0]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	6819      	ldr	r1, [r3, #0]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f000 fe6a 	bl	8007e8c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69da      	ldr	r2, [r3, #28]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	69d9      	ldr	r1, [r3, #28]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	021a      	lsls	r2, r3, #8
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	61da      	str	r2, [r3, #28]
 80071dc:	e001      	b.n	80071e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800720a:	2b01      	cmp	r3, #1
 800720c:	d101      	bne.n	8007212 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800720e:	2302      	movs	r3, #2
 8007210:	e0ae      	b.n	8007370 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b0c      	cmp	r3, #12
 800721e:	f200 809f 	bhi.w	8007360 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	0800725d 	.word	0x0800725d
 800722c:	08007361 	.word	0x08007361
 8007230:	08007361 	.word	0x08007361
 8007234:	08007361 	.word	0x08007361
 8007238:	0800729d 	.word	0x0800729d
 800723c:	08007361 	.word	0x08007361
 8007240:	08007361 	.word	0x08007361
 8007244:	08007361 	.word	0x08007361
 8007248:	080072df 	.word	0x080072df
 800724c:	08007361 	.word	0x08007361
 8007250:	08007361 	.word	0x08007361
 8007254:	08007361 	.word	0x08007361
 8007258:	0800731f 	.word	0x0800731f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68b9      	ldr	r1, [r7, #8]
 8007262:	4618      	mov	r0, r3
 8007264:	f000 fb16 	bl	8007894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699a      	ldr	r2, [r3, #24]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0208 	orr.w	r2, r2, #8
 8007276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699a      	ldr	r2, [r3, #24]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0204 	bic.w	r2, r2, #4
 8007286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6999      	ldr	r1, [r3, #24]
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	691a      	ldr	r2, [r3, #16]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	619a      	str	r2, [r3, #24]
      break;
 800729a:	e064      	b.n	8007366 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68b9      	ldr	r1, [r7, #8]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fb66 	bl	8007974 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699a      	ldr	r2, [r3, #24]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6999      	ldr	r1, [r3, #24]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	021a      	lsls	r2, r3, #8
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	430a      	orrs	r2, r1
 80072da:	619a      	str	r2, [r3, #24]
      break;
 80072dc:	e043      	b.n	8007366 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68b9      	ldr	r1, [r7, #8]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fbbb 	bl	8007a60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69da      	ldr	r2, [r3, #28]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 0208 	orr.w	r2, r2, #8
 80072f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69da      	ldr	r2, [r3, #28]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 0204 	bic.w	r2, r2, #4
 8007308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	69d9      	ldr	r1, [r3, #28]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	691a      	ldr	r2, [r3, #16]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	61da      	str	r2, [r3, #28]
      break;
 800731c:	e023      	b.n	8007366 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fc0f 	bl	8007b48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69da      	ldr	r2, [r3, #28]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69da      	ldr	r2, [r3, #28]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	69d9      	ldr	r1, [r3, #28]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	021a      	lsls	r2, r3, #8
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	61da      	str	r2, [r3, #28]
      break;
 800735e:	e002      	b.n	8007366 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	75fb      	strb	r3, [r7, #23]
      break;
 8007364:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800736e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <HAL_TIM_ConfigClockSource+0x1c>
 8007390:	2302      	movs	r3, #2
 8007392:	e0b4      	b.n	80074fe <HAL_TIM_ConfigClockSource+0x186>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073cc:	d03e      	beq.n	800744c <HAL_TIM_ConfigClockSource+0xd4>
 80073ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d2:	f200 8087 	bhi.w	80074e4 <HAL_TIM_ConfigClockSource+0x16c>
 80073d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073da:	f000 8086 	beq.w	80074ea <HAL_TIM_ConfigClockSource+0x172>
 80073de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e2:	d87f      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x16c>
 80073e4:	2b70      	cmp	r3, #112	; 0x70
 80073e6:	d01a      	beq.n	800741e <HAL_TIM_ConfigClockSource+0xa6>
 80073e8:	2b70      	cmp	r3, #112	; 0x70
 80073ea:	d87b      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x16c>
 80073ec:	2b60      	cmp	r3, #96	; 0x60
 80073ee:	d050      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x11a>
 80073f0:	2b60      	cmp	r3, #96	; 0x60
 80073f2:	d877      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x16c>
 80073f4:	2b50      	cmp	r3, #80	; 0x50
 80073f6:	d03c      	beq.n	8007472 <HAL_TIM_ConfigClockSource+0xfa>
 80073f8:	2b50      	cmp	r3, #80	; 0x50
 80073fa:	d873      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x16c>
 80073fc:	2b40      	cmp	r3, #64	; 0x40
 80073fe:	d058      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x13a>
 8007400:	2b40      	cmp	r3, #64	; 0x40
 8007402:	d86f      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007404:	2b30      	cmp	r3, #48	; 0x30
 8007406:	d064      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007408:	2b30      	cmp	r3, #48	; 0x30
 800740a:	d86b      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x16c>
 800740c:	2b20      	cmp	r3, #32
 800740e:	d060      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007410:	2b20      	cmp	r3, #32
 8007412:	d867      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007414:	2b00      	cmp	r3, #0
 8007416:	d05c      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007418:	2b10      	cmp	r3, #16
 800741a:	d05a      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x15a>
 800741c:	e062      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	6899      	ldr	r1, [r3, #8]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f000 fd85 	bl	8007f3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007440:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	609a      	str	r2, [r3, #8]
      break;
 800744a:	e04f      	b.n	80074ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	6899      	ldr	r1, [r3, #8]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f000 fd6e 	bl	8007f3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800746e:	609a      	str	r2, [r3, #8]
      break;
 8007470:	e03c      	b.n	80074ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6818      	ldr	r0, [r3, #0]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	6859      	ldr	r1, [r3, #4]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	461a      	mov	r2, r3
 8007480:	f000 fc2c 	bl	8007cdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2150      	movs	r1, #80	; 0x50
 800748a:	4618      	mov	r0, r3
 800748c:	f000 fd3b 	bl	8007f06 <TIM_ITRx_SetConfig>
      break;
 8007490:	e02c      	b.n	80074ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	6859      	ldr	r1, [r3, #4]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	461a      	mov	r2, r3
 80074a0:	f000 fc88 	bl	8007db4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2160      	movs	r1, #96	; 0x60
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fd2b 	bl	8007f06 <TIM_ITRx_SetConfig>
      break;
 80074b0:	e01c      	b.n	80074ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	6859      	ldr	r1, [r3, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	461a      	mov	r2, r3
 80074c0:	f000 fc0c 	bl	8007cdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2140      	movs	r1, #64	; 0x40
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fd1b 	bl	8007f06 <TIM_ITRx_SetConfig>
      break;
 80074d0:	e00c      	b.n	80074ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4619      	mov	r1, r3
 80074dc:	4610      	mov	r0, r2
 80074de:	f000 fd12 	bl	8007f06 <TIM_ITRx_SetConfig>
      break;
 80074e2:	e003      	b.n	80074ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]
      break;
 80074e8:	e000      	b.n	80074ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800750e:	bf00      	nop
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d107      	bne.n	80075ba <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2201      	movs	r2, #1
 80075ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075b8:	e02a      	b.n	8007610 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d107      	bne.n	80075d4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2202      	movs	r2, #2
 80075c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075d2:	e01d      	b.n	8007610 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d107      	bne.n	80075ee <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2204      	movs	r2, #4
 80075e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075ec:	e010      	b.n	8007610 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d107      	bne.n	8007608 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2208      	movs	r2, #8
 80075fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007606:	e003      	b.n	8007610 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f7ff ffb4 	bl	800757e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	771a      	strb	r2, [r3, #28]
}
 800761c:	bf00      	nop
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007630:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	429a      	cmp	r2, r3
 800763a:	d10f      	bne.n	800765c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2201      	movs	r2, #1
 8007640:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d146      	bne.n	80076d8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800765a:	e03d      	b.n	80076d8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	429a      	cmp	r2, r3
 8007664:	d10f      	bne.n	8007686 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2202      	movs	r2, #2
 800766a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d131      	bne.n	80076d8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007684:	e028      	b.n	80076d8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	429a      	cmp	r2, r3
 800768e:	d10f      	bne.n	80076b0 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2204      	movs	r2, #4
 8007694:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d11c      	bne.n	80076d8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076ae:	e013      	b.n	80076d8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d10e      	bne.n	80076d8 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2208      	movs	r2, #8
 80076be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d107      	bne.n	80076d8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f7ff ff28 	bl	800752e <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	771a      	strb	r2, [r3, #28]
}
 80076e4:	bf00      	nop
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	429a      	cmp	r2, r3
 8007702:	d103      	bne.n	800770c <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2201      	movs	r2, #1
 8007708:	771a      	strb	r2, [r3, #28]
 800770a:	e019      	b.n	8007740 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	429a      	cmp	r2, r3
 8007714:	d103      	bne.n	800771e <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2202      	movs	r2, #2
 800771a:	771a      	strb	r2, [r3, #28]
 800771c:	e010      	b.n	8007740 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	429a      	cmp	r2, r3
 8007726:	d103      	bne.n	8007730 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2204      	movs	r2, #4
 800772c:	771a      	strb	r2, [r3, #28]
 800772e:	e007      	b.n	8007740 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	429a      	cmp	r2, r3
 8007738:	d102      	bne.n	8007740 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2208      	movs	r2, #8
 800773e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7ff fefe 	bl	8007542 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	771a      	strb	r2, [r3, #28]
}
 800774c:	bf00      	nop
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a40      	ldr	r2, [pc, #256]	; (8007868 <TIM_Base_SetConfig+0x114>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d013      	beq.n	8007794 <TIM_Base_SetConfig+0x40>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007772:	d00f      	beq.n	8007794 <TIM_Base_SetConfig+0x40>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a3d      	ldr	r2, [pc, #244]	; (800786c <TIM_Base_SetConfig+0x118>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d00b      	beq.n	8007794 <TIM_Base_SetConfig+0x40>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a3c      	ldr	r2, [pc, #240]	; (8007870 <TIM_Base_SetConfig+0x11c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d007      	beq.n	8007794 <TIM_Base_SetConfig+0x40>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a3b      	ldr	r2, [pc, #236]	; (8007874 <TIM_Base_SetConfig+0x120>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d003      	beq.n	8007794 <TIM_Base_SetConfig+0x40>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a3a      	ldr	r2, [pc, #232]	; (8007878 <TIM_Base_SetConfig+0x124>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d108      	bne.n	80077a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800779a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a2f      	ldr	r2, [pc, #188]	; (8007868 <TIM_Base_SetConfig+0x114>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d02b      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b4:	d027      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a2c      	ldr	r2, [pc, #176]	; (800786c <TIM_Base_SetConfig+0x118>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d023      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a2b      	ldr	r2, [pc, #172]	; (8007870 <TIM_Base_SetConfig+0x11c>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d01f      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a2a      	ldr	r2, [pc, #168]	; (8007874 <TIM_Base_SetConfig+0x120>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d01b      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a29      	ldr	r2, [pc, #164]	; (8007878 <TIM_Base_SetConfig+0x124>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d017      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a28      	ldr	r2, [pc, #160]	; (800787c <TIM_Base_SetConfig+0x128>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d013      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a27      	ldr	r2, [pc, #156]	; (8007880 <TIM_Base_SetConfig+0x12c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00f      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a26      	ldr	r2, [pc, #152]	; (8007884 <TIM_Base_SetConfig+0x130>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00b      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a25      	ldr	r2, [pc, #148]	; (8007888 <TIM_Base_SetConfig+0x134>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d007      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a24      	ldr	r2, [pc, #144]	; (800788c <TIM_Base_SetConfig+0x138>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d003      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a23      	ldr	r2, [pc, #140]	; (8007890 <TIM_Base_SetConfig+0x13c>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d108      	bne.n	8007818 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800780c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	4313      	orrs	r3, r2
 8007816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	4313      	orrs	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a0a      	ldr	r2, [pc, #40]	; (8007868 <TIM_Base_SetConfig+0x114>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d003      	beq.n	800784c <TIM_Base_SetConfig+0xf8>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a0c      	ldr	r2, [pc, #48]	; (8007878 <TIM_Base_SetConfig+0x124>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d103      	bne.n	8007854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	691a      	ldr	r2, [r3, #16]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	615a      	str	r2, [r3, #20]
}
 800785a:	bf00      	nop
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	40010000 	.word	0x40010000
 800786c:	40000400 	.word	0x40000400
 8007870:	40000800 	.word	0x40000800
 8007874:	40000c00 	.word	0x40000c00
 8007878:	40010400 	.word	0x40010400
 800787c:	40014000 	.word	0x40014000
 8007880:	40014400 	.word	0x40014400
 8007884:	40014800 	.word	0x40014800
 8007888:	40001800 	.word	0x40001800
 800788c:	40001c00 	.word	0x40001c00
 8007890:	40002000 	.word	0x40002000

08007894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	f023 0201 	bic.w	r2, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 0303 	bic.w	r3, r3, #3
 80078ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f023 0302 	bic.w	r3, r3, #2
 80078dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a20      	ldr	r2, [pc, #128]	; (800796c <TIM_OC1_SetConfig+0xd8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d003      	beq.n	80078f8 <TIM_OC1_SetConfig+0x64>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a1f      	ldr	r2, [pc, #124]	; (8007970 <TIM_OC1_SetConfig+0xdc>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d10c      	bne.n	8007912 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f023 0308 	bic.w	r3, r3, #8
 80078fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	4313      	orrs	r3, r2
 8007908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f023 0304 	bic.w	r3, r3, #4
 8007910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a15      	ldr	r2, [pc, #84]	; (800796c <TIM_OC1_SetConfig+0xd8>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d003      	beq.n	8007922 <TIM_OC1_SetConfig+0x8e>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a14      	ldr	r2, [pc, #80]	; (8007970 <TIM_OC1_SetConfig+0xdc>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d111      	bne.n	8007946 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	4313      	orrs	r3, r2
 800793a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	4313      	orrs	r3, r2
 8007944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	621a      	str	r2, [r3, #32]
}
 8007960:	bf00      	nop
 8007962:	371c      	adds	r7, #28
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	40010000 	.word	0x40010000
 8007970:	40010400 	.word	0x40010400

08007974 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	f023 0210 	bic.w	r2, r3, #16
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	021b      	lsls	r3, r3, #8
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f023 0320 	bic.w	r3, r3, #32
 80079be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	011b      	lsls	r3, r3, #4
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a22      	ldr	r2, [pc, #136]	; (8007a58 <TIM_OC2_SetConfig+0xe4>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d003      	beq.n	80079dc <TIM_OC2_SetConfig+0x68>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a21      	ldr	r2, [pc, #132]	; (8007a5c <TIM_OC2_SetConfig+0xe8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d10d      	bne.n	80079f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	011b      	lsls	r3, r3, #4
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a17      	ldr	r2, [pc, #92]	; (8007a58 <TIM_OC2_SetConfig+0xe4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d003      	beq.n	8007a08 <TIM_OC2_SetConfig+0x94>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a16      	ldr	r2, [pc, #88]	; (8007a5c <TIM_OC2_SetConfig+0xe8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d113      	bne.n	8007a30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	621a      	str	r2, [r3, #32]
}
 8007a4a:	bf00      	nop
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	40010000 	.word	0x40010000
 8007a5c:	40010400 	.word	0x40010400

08007a60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f023 0303 	bic.w	r3, r3, #3
 8007a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	021b      	lsls	r3, r3, #8
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a21      	ldr	r2, [pc, #132]	; (8007b40 <TIM_OC3_SetConfig+0xe0>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d003      	beq.n	8007ac6 <TIM_OC3_SetConfig+0x66>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a20      	ldr	r2, [pc, #128]	; (8007b44 <TIM_OC3_SetConfig+0xe4>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d10d      	bne.n	8007ae2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007acc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	021b      	lsls	r3, r3, #8
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a16      	ldr	r2, [pc, #88]	; (8007b40 <TIM_OC3_SetConfig+0xe0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d003      	beq.n	8007af2 <TIM_OC3_SetConfig+0x92>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a15      	ldr	r2, [pc, #84]	; (8007b44 <TIM_OC3_SetConfig+0xe4>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d113      	bne.n	8007b1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	011b      	lsls	r3, r3, #4
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	621a      	str	r2, [r3, #32]
}
 8007b34:	bf00      	nop
 8007b36:	371c      	adds	r7, #28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	40010000 	.word	0x40010000
 8007b44:	40010400 	.word	0x40010400

08007b48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	031b      	lsls	r3, r3, #12
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a12      	ldr	r2, [pc, #72]	; (8007bec <TIM_OC4_SetConfig+0xa4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d003      	beq.n	8007bb0 <TIM_OC4_SetConfig+0x68>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a11      	ldr	r2, [pc, #68]	; (8007bf0 <TIM_OC4_SetConfig+0xa8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d109      	bne.n	8007bc4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	019b      	lsls	r3, r3, #6
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	621a      	str	r2, [r3, #32]
}
 8007bde:	bf00      	nop
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	40010000 	.word	0x40010000
 8007bf0:	40010400 	.word	0x40010400

08007bf4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b087      	sub	sp, #28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	f023 0201 	bic.w	r2, r3, #1
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	4a28      	ldr	r2, [pc, #160]	; (8007cc0 <TIM_TI1_SetConfig+0xcc>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d01b      	beq.n	8007c5a <TIM_TI1_SetConfig+0x66>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c28:	d017      	beq.n	8007c5a <TIM_TI1_SetConfig+0x66>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4a25      	ldr	r2, [pc, #148]	; (8007cc4 <TIM_TI1_SetConfig+0xd0>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d013      	beq.n	8007c5a <TIM_TI1_SetConfig+0x66>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	4a24      	ldr	r2, [pc, #144]	; (8007cc8 <TIM_TI1_SetConfig+0xd4>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00f      	beq.n	8007c5a <TIM_TI1_SetConfig+0x66>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4a23      	ldr	r2, [pc, #140]	; (8007ccc <TIM_TI1_SetConfig+0xd8>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d00b      	beq.n	8007c5a <TIM_TI1_SetConfig+0x66>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4a22      	ldr	r2, [pc, #136]	; (8007cd0 <TIM_TI1_SetConfig+0xdc>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d007      	beq.n	8007c5a <TIM_TI1_SetConfig+0x66>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	4a21      	ldr	r2, [pc, #132]	; (8007cd4 <TIM_TI1_SetConfig+0xe0>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d003      	beq.n	8007c5a <TIM_TI1_SetConfig+0x66>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4a20      	ldr	r2, [pc, #128]	; (8007cd8 <TIM_TI1_SetConfig+0xe4>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d101      	bne.n	8007c5e <TIM_TI1_SetConfig+0x6a>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e000      	b.n	8007c60 <TIM_TI1_SetConfig+0x6c>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d008      	beq.n	8007c76 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f023 0303 	bic.w	r3, r3, #3
 8007c6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	617b      	str	r3, [r7, #20]
 8007c74:	e003      	b.n	8007c7e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f043 0301 	orr.w	r3, r3, #1
 8007c7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	011b      	lsls	r3, r3, #4
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f023 030a 	bic.w	r3, r3, #10
 8007c98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f003 030a 	and.w	r3, r3, #10
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	621a      	str	r2, [r3, #32]
}
 8007cb2:	bf00      	nop
 8007cb4:	371c      	adds	r7, #28
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	40010000 	.word	0x40010000
 8007cc4:	40000400 	.word	0x40000400
 8007cc8:	40000800 	.word	0x40000800
 8007ccc:	40000c00 	.word	0x40000c00
 8007cd0:	40010400 	.word	0x40010400
 8007cd4:	40014000 	.word	0x40014000
 8007cd8:	40001800 	.word	0x40001800

08007cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	f023 0201 	bic.w	r2, r3, #1
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f023 030a 	bic.w	r3, r3, #10
 8007d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	621a      	str	r2, [r3, #32]
}
 8007d2e:	bf00      	nop
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b087      	sub	sp, #28
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	60f8      	str	r0, [r7, #12]
 8007d42:	60b9      	str	r1, [r7, #8]
 8007d44:	607a      	str	r2, [r7, #4]
 8007d46:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6a1b      	ldr	r3, [r3, #32]
 8007d4c:	f023 0210 	bic.w	r2, r3, #16
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	021b      	lsls	r3, r3, #8
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	031b      	lsls	r3, r3, #12
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d8c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	011b      	lsls	r3, r3, #4
 8007d92:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	621a      	str	r2, [r3, #32]
}
 8007da8:	bf00      	nop
 8007daa:	371c      	adds	r7, #28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	f023 0210 	bic.w	r2, r3, #16
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	031b      	lsls	r3, r3, #12
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007df0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	011b      	lsls	r3, r3, #4
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	621a      	str	r2, [r3, #32]
}
 8007e08:	bf00      	nop
 8007e0a:	371c      	adds	r7, #28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f023 0303 	bic.w	r3, r3, #3
 8007e40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007e64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	021b      	lsls	r3, r3, #8
 8007e6a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	621a      	str	r2, [r3, #32]
}
 8007e80:	bf00      	nop
 8007e82:	371c      	adds	r7, #28
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a1b      	ldr	r3, [r3, #32]
 8007eb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eb8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	021b      	lsls	r3, r3, #8
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007eca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	031b      	lsls	r3, r3, #12
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007ede:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	031b      	lsls	r3, r3, #12
 8007ee4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	621a      	str	r2, [r3, #32]
}
 8007efa:	bf00      	nop
 8007efc:	371c      	adds	r7, #28
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	f043 0307 	orr.w	r3, r3, #7
 8007f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	609a      	str	r2, [r3, #8]
}
 8007f30:	bf00      	nop
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
 8007f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	021a      	lsls	r2, r3, #8
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	609a      	str	r2, [r3, #8]
}
 8007f70:	bf00      	nop
 8007f72:	371c      	adds	r7, #28
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f003 031f 	and.w	r3, r3, #31
 8007f8e:	2201      	movs	r2, #1
 8007f90:	fa02 f303 	lsl.w	r3, r2, r3
 8007f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6a1a      	ldr	r2, [r3, #32]
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	43db      	mvns	r3, r3
 8007f9e:	401a      	ands	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6a1a      	ldr	r2, [r3, #32]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	f003 031f 	and.w	r3, r3, #31
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb4:	431a      	orrs	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	621a      	str	r2, [r3, #32]
}
 8007fba:	bf00      	nop
 8007fbc:	371c      	adds	r7, #28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
	...

08007fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d101      	bne.n	8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fdc:	2302      	movs	r3, #2
 8007fde:	e05a      	b.n	8008096 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008006:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	4313      	orrs	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a21      	ldr	r2, [pc, #132]	; (80080a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d022      	beq.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802c:	d01d      	beq.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a1d      	ldr	r2, [pc, #116]	; (80080a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d018      	beq.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a1b      	ldr	r2, [pc, #108]	; (80080ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d013      	beq.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a1a      	ldr	r2, [pc, #104]	; (80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d00e      	beq.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a18      	ldr	r2, [pc, #96]	; (80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d009      	beq.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a17      	ldr	r2, [pc, #92]	; (80080b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d004      	beq.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a15      	ldr	r2, [pc, #84]	; (80080bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d10c      	bne.n	8008084 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	4313      	orrs	r3, r2
 800807a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	40010000 	.word	0x40010000
 80080a8:	40000400 	.word	0x40000400
 80080ac:	40000800 	.word	0x40000800
 80080b0:	40000c00 	.word	0x40000c00
 80080b4:	40010400 	.word	0x40010400
 80080b8:	40014000 	.word	0x40014000
 80080bc:	40001800 	.word	0x40001800

080080c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d101      	bne.n	80080dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80080d8:	2302      	movs	r3, #2
 80080da:	e03d      	b.n	8008158 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	4313      	orrs	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	4313      	orrs	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	4313      	orrs	r3, r2
 8008144:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e03f      	b.n	800821e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d106      	bne.n	80081b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7fb fb08 	bl	80037c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2224      	movs	r2, #36	; 0x24
 80081bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fe81 	bl	8008ed8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	691a      	ldr	r2, [r3, #16]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	695a      	ldr	r2, [r3, #20]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68da      	ldr	r2, [r3, #12]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2220      	movs	r2, #32
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2220      	movs	r2, #32
 8008218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b08a      	sub	sp, #40	; 0x28
 800822a:	af02      	add	r7, sp, #8
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	603b      	str	r3, [r7, #0]
 8008232:	4613      	mov	r3, r2
 8008234:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b20      	cmp	r3, #32
 8008244:	d17c      	bne.n	8008340 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d002      	beq.n	8008252 <HAL_UART_Transmit+0x2c>
 800824c:	88fb      	ldrh	r3, [r7, #6]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e075      	b.n	8008342 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800825c:	2b01      	cmp	r3, #1
 800825e:	d101      	bne.n	8008264 <HAL_UART_Transmit+0x3e>
 8008260:	2302      	movs	r3, #2
 8008262:	e06e      	b.n	8008342 <HAL_UART_Transmit+0x11c>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2221      	movs	r2, #33	; 0x21
 8008276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800827a:	f7fb fd7f 	bl	8003d7c <HAL_GetTick>
 800827e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	88fa      	ldrh	r2, [r7, #6]
 8008284:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	88fa      	ldrh	r2, [r7, #6]
 800828a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008294:	d108      	bne.n	80082a8 <HAL_UART_Transmit+0x82>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d104      	bne.n	80082a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	61bb      	str	r3, [r7, #24]
 80082a6:	e003      	b.n	80082b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082ac:	2300      	movs	r3, #0
 80082ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80082b8:	e02a      	b.n	8008310 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2200      	movs	r2, #0
 80082c2:	2180      	movs	r1, #128	; 0x80
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 fbc1 	bl	8008a4c <UART_WaitOnFlagUntilTimeout>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e036      	b.n	8008342 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10b      	bne.n	80082f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	881b      	ldrh	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	3302      	adds	r3, #2
 80082ee:	61bb      	str	r3, [r7, #24]
 80082f0:	e007      	b.n	8008302 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	781a      	ldrb	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	3301      	adds	r3, #1
 8008300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008306:	b29b      	uxth	r3, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008314:	b29b      	uxth	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1cf      	bne.n	80082ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2200      	movs	r2, #0
 8008322:	2140      	movs	r1, #64	; 0x40
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 fb91 	bl	8008a4c <UART_WaitOnFlagUntilTimeout>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e006      	b.n	8008342 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2220      	movs	r2, #32
 8008338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	e000      	b.n	8008342 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008340:	2302      	movs	r3, #2
  }
}
 8008342:	4618      	mov	r0, r3
 8008344:	3720      	adds	r7, #32
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b08a      	sub	sp, #40	; 0x28
 800834e:	af02      	add	r7, sp, #8
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	603b      	str	r3, [r7, #0]
 8008356:	4613      	mov	r3, r2
 8008358:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b20      	cmp	r3, #32
 8008368:	f040 808c 	bne.w	8008484 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d002      	beq.n	8008378 <HAL_UART_Receive+0x2e>
 8008372:	88fb      	ldrh	r3, [r7, #6]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d101      	bne.n	800837c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e084      	b.n	8008486 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008382:	2b01      	cmp	r3, #1
 8008384:	d101      	bne.n	800838a <HAL_UART_Receive+0x40>
 8008386:	2302      	movs	r3, #2
 8008388:	e07d      	b.n	8008486 <HAL_UART_Receive+0x13c>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2222      	movs	r2, #34	; 0x22
 800839c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083a6:	f7fb fce9 	bl	8003d7c <HAL_GetTick>
 80083aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	88fa      	ldrh	r2, [r7, #6]
 80083b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	88fa      	ldrh	r2, [r7, #6]
 80083b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c0:	d108      	bne.n	80083d4 <HAL_UART_Receive+0x8a>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d104      	bne.n	80083d4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80083ca:	2300      	movs	r3, #0
 80083cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	61bb      	str	r3, [r7, #24]
 80083d2:	e003      	b.n	80083dc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083d8:	2300      	movs	r3, #0
 80083da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80083e4:	e043      	b.n	800846e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2200      	movs	r2, #0
 80083ee:	2120      	movs	r1, #32
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 fb2b 	bl	8008a4c <UART_WaitOnFlagUntilTimeout>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e042      	b.n	8008486 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10c      	bne.n	8008420 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	b29b      	uxth	r3, r3
 800840e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008412:	b29a      	uxth	r2, r3
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	3302      	adds	r3, #2
 800841c:	61bb      	str	r3, [r7, #24]
 800841e:	e01f      	b.n	8008460 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008428:	d007      	beq.n	800843a <HAL_UART_Receive+0xf0>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10a      	bne.n	8008448 <HAL_UART_Receive+0xfe>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d106      	bne.n	8008448 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	b2da      	uxtb	r2, r3
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	e008      	b.n	800845a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	b2db      	uxtb	r3, r3
 8008450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008454:	b2da      	uxtb	r2, r3
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	3301      	adds	r3, #1
 800845e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008464:	b29b      	uxth	r3, r3
 8008466:	3b01      	subs	r3, #1
 8008468:	b29a      	uxth	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008472:	b29b      	uxth	r3, r3
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1b6      	bne.n	80083e6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2220      	movs	r2, #32
 800847c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	e000      	b.n	8008486 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008484:	2302      	movs	r3, #2
  }
}
 8008486:	4618      	mov	r0, r3
 8008488:	3720      	adds	r7, #32
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	60f8      	str	r0, [r7, #12]
 8008496:	60b9      	str	r1, [r7, #8]
 8008498:	4613      	mov	r3, r2
 800849a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b20      	cmp	r3, #32
 80084a6:	d11d      	bne.n	80084e4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <HAL_UART_Receive_IT+0x26>
 80084ae:	88fb      	ldrh	r3, [r7, #6]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e016      	b.n	80084e6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d101      	bne.n	80084c6 <HAL_UART_Receive_IT+0x38>
 80084c2:	2302      	movs	r3, #2
 80084c4:	e00f      	b.n	80084e6 <HAL_UART_Receive_IT+0x58>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80084d4:	88fb      	ldrh	r3, [r7, #6]
 80084d6:	461a      	mov	r2, r3
 80084d8:	68b9      	ldr	r1, [r7, #8]
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 fb24 	bl	8008b28 <UART_Start_Receive_IT>
 80084e0:	4603      	mov	r3, r0
 80084e2:	e000      	b.n	80084e6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80084e4:	2302      	movs	r3, #2
  }
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
	...

080084f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b0ba      	sub	sp, #232	; 0xe8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008516:	2300      	movs	r3, #0
 8008518:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800851c:	2300      	movs	r3, #0
 800851e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008526:	f003 030f 	and.w	r3, r3, #15
 800852a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800852e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10f      	bne.n	8008556 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853a:	f003 0320 	and.w	r3, r3, #32
 800853e:	2b00      	cmp	r3, #0
 8008540:	d009      	beq.n	8008556 <HAL_UART_IRQHandler+0x66>
 8008542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008546:	f003 0320 	and.w	r3, r3, #32
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fc07 	bl	8008d62 <UART_Receive_IT>
      return;
 8008554:	e256      	b.n	8008a04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 80de 	beq.w	800871c <HAL_UART_IRQHandler+0x22c>
 8008560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	d106      	bne.n	800857a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800856c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008570:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 80d1 	beq.w	800871c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800857a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00b      	beq.n	800859e <HAL_UART_IRQHandler+0xae>
 8008586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800858a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800858e:	2b00      	cmp	r3, #0
 8008590:	d005      	beq.n	800859e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	f043 0201 	orr.w	r2, r3, #1
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800859e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a2:	f003 0304 	and.w	r3, r3, #4
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00b      	beq.n	80085c2 <HAL_UART_IRQHandler+0xd2>
 80085aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085ae:	f003 0301 	and.w	r3, r3, #1
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d005      	beq.n	80085c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ba:	f043 0202 	orr.w	r2, r3, #2
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00b      	beq.n	80085e6 <HAL_UART_IRQHandler+0xf6>
 80085ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	f043 0204 	orr.w	r2, r3, #4
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80085e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ea:	f003 0308 	and.w	r3, r3, #8
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d011      	beq.n	8008616 <HAL_UART_IRQHandler+0x126>
 80085f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085f6:	f003 0320 	and.w	r3, r3, #32
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d105      	bne.n	800860a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80085fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d005      	beq.n	8008616 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860e:	f043 0208 	orr.w	r2, r3, #8
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 81ed 	beq.w	80089fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008624:	f003 0320 	and.w	r3, r3, #32
 8008628:	2b00      	cmp	r3, #0
 800862a:	d008      	beq.n	800863e <HAL_UART_IRQHandler+0x14e>
 800862c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008630:	f003 0320 	and.w	r3, r3, #32
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fb92 	bl	8008d62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008648:	2b40      	cmp	r3, #64	; 0x40
 800864a:	bf0c      	ite	eq
 800864c:	2301      	moveq	r3, #1
 800864e:	2300      	movne	r3, #0
 8008650:	b2db      	uxtb	r3, r3
 8008652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865a:	f003 0308 	and.w	r3, r3, #8
 800865e:	2b00      	cmp	r3, #0
 8008660:	d103      	bne.n	800866a <HAL_UART_IRQHandler+0x17a>
 8008662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008666:	2b00      	cmp	r3, #0
 8008668:	d04f      	beq.n	800870a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fa9a 	bl	8008ba4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867a:	2b40      	cmp	r3, #64	; 0x40
 800867c:	d141      	bne.n	8008702 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3314      	adds	r3, #20
 8008684:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008688:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800868c:	e853 3f00 	ldrex	r3, [r3]
 8008690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008694:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800869c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3314      	adds	r3, #20
 80086a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80086aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80086ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80086b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80086ba:	e841 2300 	strex	r3, r2, [r1]
 80086be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80086c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1d9      	bne.n	800867e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d013      	beq.n	80086fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d6:	4a7d      	ldr	r2, [pc, #500]	; (80088cc <HAL_UART_IRQHandler+0x3dc>)
 80086d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fc fa12 	bl	8004b08 <HAL_DMA_Abort_IT>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d016      	beq.n	8008718 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80086f4:	4610      	mov	r0, r2
 80086f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f8:	e00e      	b.n	8008718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f990 	bl	8008a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008700:	e00a      	b.n	8008718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f98c 	bl	8008a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008708:	e006      	b.n	8008718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f988 	bl	8008a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008716:	e170      	b.n	80089fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008718:	bf00      	nop
    return;
 800871a:	e16e      	b.n	80089fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008720:	2b01      	cmp	r3, #1
 8008722:	f040 814a 	bne.w	80089ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872a:	f003 0310 	and.w	r3, r3, #16
 800872e:	2b00      	cmp	r3, #0
 8008730:	f000 8143 	beq.w	80089ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008738:	f003 0310 	and.w	r3, r3, #16
 800873c:	2b00      	cmp	r3, #0
 800873e:	f000 813c 	beq.w	80089ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008742:	2300      	movs	r3, #0
 8008744:	60bb      	str	r3, [r7, #8]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	60bb      	str	r3, [r7, #8]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	60bb      	str	r3, [r7, #8]
 8008756:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008762:	2b40      	cmp	r3, #64	; 0x40
 8008764:	f040 80b4 	bne.w	80088d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008774:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 8140 	beq.w	80089fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008786:	429a      	cmp	r2, r3
 8008788:	f080 8139 	bcs.w	80089fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008792:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008798:	69db      	ldr	r3, [r3, #28]
 800879a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800879e:	f000 8088 	beq.w	80088b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	330c      	adds	r3, #12
 80087a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80087b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	330c      	adds	r3, #12
 80087ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80087ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80087d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80087da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80087e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1d9      	bne.n	80087a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3314      	adds	r3, #20
 80087f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087f8:	e853 3f00 	ldrex	r3, [r3]
 80087fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008800:	f023 0301 	bic.w	r3, r3, #1
 8008804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3314      	adds	r3, #20
 800880e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008812:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008816:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800881a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e1      	bne.n	80087ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3314      	adds	r3, #20
 8008830:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800883a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800883c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008840:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3314      	adds	r3, #20
 800884a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800884e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008850:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008852:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008854:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008856:	e841 2300 	strex	r3, r2, [r1]
 800885a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800885c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1e3      	bne.n	800882a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2220      	movs	r2, #32
 8008866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	330c      	adds	r3, #12
 8008876:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800887a:	e853 3f00 	ldrex	r3, [r3]
 800887e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008882:	f023 0310 	bic.w	r3, r3, #16
 8008886:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	330c      	adds	r3, #12
 8008890:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008894:	65ba      	str	r2, [r7, #88]	; 0x58
 8008896:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008898:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800889a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800889c:	e841 2300 	strex	r3, r2, [r1]
 80088a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e3      	bne.n	8008870 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fc f8bb 	bl	8004a28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	b29b      	uxth	r3, r3
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f8b6 	bl	8008a34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80088c8:	e099      	b.n	80089fe <HAL_UART_IRQHandler+0x50e>
 80088ca:	bf00      	nop
 80088cc:	08008c6b 	.word	0x08008c6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088d8:	b29b      	uxth	r3, r3
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 808b 	beq.w	8008a02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80088ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 8086 	beq.w	8008a02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	330c      	adds	r3, #12
 80088fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008908:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800890c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	330c      	adds	r3, #12
 8008916:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800891a:	647a      	str	r2, [r7, #68]	; 0x44
 800891c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008920:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1e3      	bne.n	80088f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3314      	adds	r3, #20
 8008934:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	623b      	str	r3, [r7, #32]
   return(result);
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	f023 0301 	bic.w	r3, r3, #1
 8008944:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3314      	adds	r3, #20
 800894e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008952:	633a      	str	r2, [r7, #48]	; 0x30
 8008954:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800895a:	e841 2300 	strex	r3, r2, [r1]
 800895e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1e3      	bne.n	800892e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2220      	movs	r2, #32
 800896a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	330c      	adds	r3, #12
 800897a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	e853 3f00 	ldrex	r3, [r3]
 8008982:	60fb      	str	r3, [r7, #12]
   return(result);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f023 0310 	bic.w	r3, r3, #16
 800898a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	330c      	adds	r3, #12
 8008994:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008998:	61fa      	str	r2, [r7, #28]
 800899a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899c:	69b9      	ldr	r1, [r7, #24]
 800899e:	69fa      	ldr	r2, [r7, #28]
 80089a0:	e841 2300 	strex	r3, r2, [r1]
 80089a4:	617b      	str	r3, [r7, #20]
   return(result);
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1e3      	bne.n	8008974 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f83e 	bl	8008a34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089b8:	e023      	b.n	8008a02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80089ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d009      	beq.n	80089da <HAL_UART_IRQHandler+0x4ea>
 80089c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f95d 	bl	8008c92 <UART_Transmit_IT>
    return;
 80089d8:	e014      	b.n	8008a04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80089da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00e      	beq.n	8008a04 <HAL_UART_IRQHandler+0x514>
 80089e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d008      	beq.n	8008a04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f99d 	bl	8008d32 <UART_EndTransmit_IT>
    return;
 80089f8:	e004      	b.n	8008a04 <HAL_UART_IRQHandler+0x514>
    return;
 80089fa:	bf00      	nop
 80089fc:	e002      	b.n	8008a04 <HAL_UART_IRQHandler+0x514>
      return;
 80089fe:	bf00      	nop
 8008a00:	e000      	b.n	8008a04 <HAL_UART_IRQHandler+0x514>
      return;
 8008a02:	bf00      	nop
  }
}
 8008a04:	37e8      	adds	r7, #232	; 0xe8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop

08008a0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b090      	sub	sp, #64	; 0x40
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	603b      	str	r3, [r7, #0]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a5c:	e050      	b.n	8008b00 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a64:	d04c      	beq.n	8008b00 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d007      	beq.n	8008a7c <UART_WaitOnFlagUntilTimeout+0x30>
 8008a6c:	f7fb f986 	bl	8003d7c <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d241      	bcs.n	8008b00 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	330c      	adds	r3, #12
 8008a82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a86:	e853 3f00 	ldrex	r3, [r3]
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	330c      	adds	r3, #12
 8008a9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a9c:	637a      	str	r2, [r7, #52]	; 0x34
 8008a9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aa4:	e841 2300 	strex	r3, r2, [r1]
 8008aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1e5      	bne.n	8008a7c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3314      	adds	r3, #20
 8008ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	e853 3f00 	ldrex	r3, [r3]
 8008abe:	613b      	str	r3, [r7, #16]
   return(result);
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	f023 0301 	bic.w	r3, r3, #1
 8008ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3314      	adds	r3, #20
 8008ace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ad0:	623a      	str	r2, [r7, #32]
 8008ad2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad4:	69f9      	ldr	r1, [r7, #28]
 8008ad6:	6a3a      	ldr	r2, [r7, #32]
 8008ad8:	e841 2300 	strex	r3, r2, [r1]
 8008adc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1e5      	bne.n	8008ab0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e00f      	b.n	8008b20 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	bf0c      	ite	eq
 8008b10:	2301      	moveq	r3, #1
 8008b12:	2300      	movne	r3, #0
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	461a      	mov	r2, r3
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d09f      	beq.n	8008a5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3740      	adds	r7, #64	; 0x40
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	4613      	mov	r3, r2
 8008b34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	88fa      	ldrh	r2, [r7, #6]
 8008b40:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	88fa      	ldrh	r2, [r7, #6]
 8008b46:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2222      	movs	r2, #34	; 0x22
 8008b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d007      	beq.n	8008b76 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68da      	ldr	r2, [r3, #12]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b74:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	695a      	ldr	r2, [r3, #20]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f042 0201 	orr.w	r2, r2, #1
 8008b84:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68da      	ldr	r2, [r3, #12]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f042 0220 	orr.w	r2, r2, #32
 8008b94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3714      	adds	r7, #20
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b095      	sub	sp, #84	; 0x54
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	330c      	adds	r3, #12
 8008bb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	330c      	adds	r3, #12
 8008bca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bcc:	643a      	str	r2, [r7, #64]	; 0x40
 8008bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e5      	bne.n	8008bac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3314      	adds	r3, #20
 8008be6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	e853 3f00 	ldrex	r3, [r3]
 8008bee:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	f023 0301 	bic.w	r3, r3, #1
 8008bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3314      	adds	r3, #20
 8008bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c08:	e841 2300 	strex	r3, r2, [r1]
 8008c0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e5      	bne.n	8008be0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d119      	bne.n	8008c50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	330c      	adds	r3, #12
 8008c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	e853 3f00 	ldrex	r3, [r3]
 8008c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f023 0310 	bic.w	r3, r3, #16
 8008c32:	647b      	str	r3, [r7, #68]	; 0x44
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	330c      	adds	r3, #12
 8008c3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c3c:	61ba      	str	r2, [r7, #24]
 8008c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c40:	6979      	ldr	r1, [r7, #20]
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	e841 2300 	strex	r3, r2, [r1]
 8008c48:	613b      	str	r3, [r7, #16]
   return(result);
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1e5      	bne.n	8008c1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2220      	movs	r2, #32
 8008c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008c5e:	bf00      	nop
 8008c60:	3754      	adds	r7, #84	; 0x54
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f7ff fecb 	bl	8008a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c8a:	bf00      	nop
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b085      	sub	sp, #20
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b21      	cmp	r3, #33	; 0x21
 8008ca4:	d13e      	bne.n	8008d24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cae:	d114      	bne.n	8008cda <UART_Transmit_IT+0x48>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d110      	bne.n	8008cda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a1b      	ldr	r3, [r3, #32]
 8008cbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ccc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	1c9a      	adds	r2, r3, #2
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	621a      	str	r2, [r3, #32]
 8008cd8:	e008      	b.n	8008cec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	1c59      	adds	r1, r3, #1
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	6211      	str	r1, [r2, #32]
 8008ce4:	781a      	ldrb	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10f      	bne.n	8008d20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68da      	ldr	r2, [r3, #12]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68da      	ldr	r2, [r3, #12]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	e000      	b.n	8008d26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d24:	2302      	movs	r3, #2
  }
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b082      	sub	sp, #8
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68da      	ldr	r2, [r3, #12]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7ff fe5a 	bl	8008a0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b08c      	sub	sp, #48	; 0x30
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b22      	cmp	r3, #34	; 0x22
 8008d74:	f040 80ab 	bne.w	8008ece <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d80:	d117      	bne.n	8008db2 <UART_Receive_IT+0x50>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d113      	bne.n	8008db2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008daa:	1c9a      	adds	r2, r3, #2
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	629a      	str	r2, [r3, #40]	; 0x28
 8008db0:	e026      	b.n	8008e00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008db8:	2300      	movs	r3, #0
 8008dba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc4:	d007      	beq.n	8008dd6 <UART_Receive_IT+0x74>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <UART_Receive_IT+0x82>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d106      	bne.n	8008de4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de0:	701a      	strb	r2, [r3, #0]
 8008de2:	e008      	b.n	8008df6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d15a      	bne.n	8008eca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68da      	ldr	r2, [r3, #12]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f022 0220 	bic.w	r2, r2, #32
 8008e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68da      	ldr	r2, [r3, #12]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	695a      	ldr	r2, [r3, #20]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f022 0201 	bic.w	r2, r2, #1
 8008e42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2220      	movs	r2, #32
 8008e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d135      	bne.n	8008ec0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	330c      	adds	r3, #12
 8008e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	613b      	str	r3, [r7, #16]
   return(result);
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	f023 0310 	bic.w	r3, r3, #16
 8008e70:	627b      	str	r3, [r7, #36]	; 0x24
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	330c      	adds	r3, #12
 8008e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7a:	623a      	str	r2, [r7, #32]
 8008e7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	69f9      	ldr	r1, [r7, #28]
 8008e80:	6a3a      	ldr	r2, [r7, #32]
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e5      	bne.n	8008e5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0310 	and.w	r3, r3, #16
 8008e98:	2b10      	cmp	r3, #16
 8008e9a:	d10a      	bne.n	8008eb2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	60fb      	str	r3, [r7, #12]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	60fb      	str	r3, [r7, #12]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7ff fdbb 	bl	8008a34 <HAL_UARTEx_RxEventCallback>
 8008ebe:	e002      	b.n	8008ec6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f7fa f92b 	bl	800311c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	e002      	b.n	8008ed0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	e000      	b.n	8008ed0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008ece:	2302      	movs	r3, #2
  }
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3730      	adds	r7, #48	; 0x30
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008edc:	b0c0      	sub	sp, #256	; 0x100
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef4:	68d9      	ldr	r1, [r3, #12]
 8008ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	ea40 0301 	orr.w	r3, r0, r1
 8008f00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f06:	689a      	ldr	r2, [r3, #8]
 8008f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	431a      	orrs	r2, r3
 8008f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008f30:	f021 010c 	bic.w	r1, r1, #12
 8008f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f3e:	430b      	orrs	r3, r1
 8008f40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f52:	6999      	ldr	r1, [r3, #24]
 8008f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	ea40 0301 	orr.w	r3, r0, r1
 8008f5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	4b8f      	ldr	r3, [pc, #572]	; (80091a4 <UART_SetConfig+0x2cc>)
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d005      	beq.n	8008f78 <UART_SetConfig+0xa0>
 8008f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	4b8d      	ldr	r3, [pc, #564]	; (80091a8 <UART_SetConfig+0x2d0>)
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d104      	bne.n	8008f82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f78:	f7fc fdae 	bl	8005ad8 <HAL_RCC_GetPCLK2Freq>
 8008f7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008f80:	e003      	b.n	8008f8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f82:	f7fc fd95 	bl	8005ab0 <HAL_RCC_GetPCLK1Freq>
 8008f86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f94:	f040 810c 	bne.w	80091b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008fa2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008fa6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008faa:	4622      	mov	r2, r4
 8008fac:	462b      	mov	r3, r5
 8008fae:	1891      	adds	r1, r2, r2
 8008fb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8008fb2:	415b      	adcs	r3, r3
 8008fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008fba:	4621      	mov	r1, r4
 8008fbc:	eb12 0801 	adds.w	r8, r2, r1
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	eb43 0901 	adc.w	r9, r3, r1
 8008fc6:	f04f 0200 	mov.w	r2, #0
 8008fca:	f04f 0300 	mov.w	r3, #0
 8008fce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008fd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008fd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008fda:	4690      	mov	r8, r2
 8008fdc:	4699      	mov	r9, r3
 8008fde:	4623      	mov	r3, r4
 8008fe0:	eb18 0303 	adds.w	r3, r8, r3
 8008fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008fe8:	462b      	mov	r3, r5
 8008fea:	eb49 0303 	adc.w	r3, r9, r3
 8008fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ffe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009002:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009006:	460b      	mov	r3, r1
 8009008:	18db      	adds	r3, r3, r3
 800900a:	653b      	str	r3, [r7, #80]	; 0x50
 800900c:	4613      	mov	r3, r2
 800900e:	eb42 0303 	adc.w	r3, r2, r3
 8009012:	657b      	str	r3, [r7, #84]	; 0x54
 8009014:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009018:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800901c:	f7f7 fe34 	bl	8000c88 <__aeabi_uldivmod>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4b61      	ldr	r3, [pc, #388]	; (80091ac <UART_SetConfig+0x2d4>)
 8009026:	fba3 2302 	umull	r2, r3, r3, r2
 800902a:	095b      	lsrs	r3, r3, #5
 800902c:	011c      	lsls	r4, r3, #4
 800902e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009032:	2200      	movs	r2, #0
 8009034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009038:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800903c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009040:	4642      	mov	r2, r8
 8009042:	464b      	mov	r3, r9
 8009044:	1891      	adds	r1, r2, r2
 8009046:	64b9      	str	r1, [r7, #72]	; 0x48
 8009048:	415b      	adcs	r3, r3
 800904a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800904c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009050:	4641      	mov	r1, r8
 8009052:	eb12 0a01 	adds.w	sl, r2, r1
 8009056:	4649      	mov	r1, r9
 8009058:	eb43 0b01 	adc.w	fp, r3, r1
 800905c:	f04f 0200 	mov.w	r2, #0
 8009060:	f04f 0300 	mov.w	r3, #0
 8009064:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009068:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800906c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009070:	4692      	mov	sl, r2
 8009072:	469b      	mov	fp, r3
 8009074:	4643      	mov	r3, r8
 8009076:	eb1a 0303 	adds.w	r3, sl, r3
 800907a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800907e:	464b      	mov	r3, r9
 8009080:	eb4b 0303 	adc.w	r3, fp, r3
 8009084:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009094:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009098:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800909c:	460b      	mov	r3, r1
 800909e:	18db      	adds	r3, r3, r3
 80090a0:	643b      	str	r3, [r7, #64]	; 0x40
 80090a2:	4613      	mov	r3, r2
 80090a4:	eb42 0303 	adc.w	r3, r2, r3
 80090a8:	647b      	str	r3, [r7, #68]	; 0x44
 80090aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80090ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80090b2:	f7f7 fde9 	bl	8000c88 <__aeabi_uldivmod>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4611      	mov	r1, r2
 80090bc:	4b3b      	ldr	r3, [pc, #236]	; (80091ac <UART_SetConfig+0x2d4>)
 80090be:	fba3 2301 	umull	r2, r3, r3, r1
 80090c2:	095b      	lsrs	r3, r3, #5
 80090c4:	2264      	movs	r2, #100	; 0x64
 80090c6:	fb02 f303 	mul.w	r3, r2, r3
 80090ca:	1acb      	subs	r3, r1, r3
 80090cc:	00db      	lsls	r3, r3, #3
 80090ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80090d2:	4b36      	ldr	r3, [pc, #216]	; (80091ac <UART_SetConfig+0x2d4>)
 80090d4:	fba3 2302 	umull	r2, r3, r3, r2
 80090d8:	095b      	lsrs	r3, r3, #5
 80090da:	005b      	lsls	r3, r3, #1
 80090dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80090e0:	441c      	add	r4, r3
 80090e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80090f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80090f4:	4642      	mov	r2, r8
 80090f6:	464b      	mov	r3, r9
 80090f8:	1891      	adds	r1, r2, r2
 80090fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80090fc:	415b      	adcs	r3, r3
 80090fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009100:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009104:	4641      	mov	r1, r8
 8009106:	1851      	adds	r1, r2, r1
 8009108:	6339      	str	r1, [r7, #48]	; 0x30
 800910a:	4649      	mov	r1, r9
 800910c:	414b      	adcs	r3, r1
 800910e:	637b      	str	r3, [r7, #52]	; 0x34
 8009110:	f04f 0200 	mov.w	r2, #0
 8009114:	f04f 0300 	mov.w	r3, #0
 8009118:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800911c:	4659      	mov	r1, fp
 800911e:	00cb      	lsls	r3, r1, #3
 8009120:	4651      	mov	r1, sl
 8009122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009126:	4651      	mov	r1, sl
 8009128:	00ca      	lsls	r2, r1, #3
 800912a:	4610      	mov	r0, r2
 800912c:	4619      	mov	r1, r3
 800912e:	4603      	mov	r3, r0
 8009130:	4642      	mov	r2, r8
 8009132:	189b      	adds	r3, r3, r2
 8009134:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009138:	464b      	mov	r3, r9
 800913a:	460a      	mov	r2, r1
 800913c:	eb42 0303 	adc.w	r3, r2, r3
 8009140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009150:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009154:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009158:	460b      	mov	r3, r1
 800915a:	18db      	adds	r3, r3, r3
 800915c:	62bb      	str	r3, [r7, #40]	; 0x28
 800915e:	4613      	mov	r3, r2
 8009160:	eb42 0303 	adc.w	r3, r2, r3
 8009164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009166:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800916a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800916e:	f7f7 fd8b 	bl	8000c88 <__aeabi_uldivmod>
 8009172:	4602      	mov	r2, r0
 8009174:	460b      	mov	r3, r1
 8009176:	4b0d      	ldr	r3, [pc, #52]	; (80091ac <UART_SetConfig+0x2d4>)
 8009178:	fba3 1302 	umull	r1, r3, r3, r2
 800917c:	095b      	lsrs	r3, r3, #5
 800917e:	2164      	movs	r1, #100	; 0x64
 8009180:	fb01 f303 	mul.w	r3, r1, r3
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	3332      	adds	r3, #50	; 0x32
 800918a:	4a08      	ldr	r2, [pc, #32]	; (80091ac <UART_SetConfig+0x2d4>)
 800918c:	fba2 2303 	umull	r2, r3, r2, r3
 8009190:	095b      	lsrs	r3, r3, #5
 8009192:	f003 0207 	and.w	r2, r3, #7
 8009196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4422      	add	r2, r4
 800919e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80091a0:	e105      	b.n	80093ae <UART_SetConfig+0x4d6>
 80091a2:	bf00      	nop
 80091a4:	40011000 	.word	0x40011000
 80091a8:	40011400 	.word	0x40011400
 80091ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091b4:	2200      	movs	r2, #0
 80091b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80091ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80091be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80091c2:	4642      	mov	r2, r8
 80091c4:	464b      	mov	r3, r9
 80091c6:	1891      	adds	r1, r2, r2
 80091c8:	6239      	str	r1, [r7, #32]
 80091ca:	415b      	adcs	r3, r3
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
 80091ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80091d2:	4641      	mov	r1, r8
 80091d4:	1854      	adds	r4, r2, r1
 80091d6:	4649      	mov	r1, r9
 80091d8:	eb43 0501 	adc.w	r5, r3, r1
 80091dc:	f04f 0200 	mov.w	r2, #0
 80091e0:	f04f 0300 	mov.w	r3, #0
 80091e4:	00eb      	lsls	r3, r5, #3
 80091e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091ea:	00e2      	lsls	r2, r4, #3
 80091ec:	4614      	mov	r4, r2
 80091ee:	461d      	mov	r5, r3
 80091f0:	4643      	mov	r3, r8
 80091f2:	18e3      	adds	r3, r4, r3
 80091f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80091f8:	464b      	mov	r3, r9
 80091fa:	eb45 0303 	adc.w	r3, r5, r3
 80091fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800920e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009212:	f04f 0200 	mov.w	r2, #0
 8009216:	f04f 0300 	mov.w	r3, #0
 800921a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800921e:	4629      	mov	r1, r5
 8009220:	008b      	lsls	r3, r1, #2
 8009222:	4621      	mov	r1, r4
 8009224:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009228:	4621      	mov	r1, r4
 800922a:	008a      	lsls	r2, r1, #2
 800922c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009230:	f7f7 fd2a 	bl	8000c88 <__aeabi_uldivmod>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	4b60      	ldr	r3, [pc, #384]	; (80093bc <UART_SetConfig+0x4e4>)
 800923a:	fba3 2302 	umull	r2, r3, r3, r2
 800923e:	095b      	lsrs	r3, r3, #5
 8009240:	011c      	lsls	r4, r3, #4
 8009242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009246:	2200      	movs	r2, #0
 8009248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800924c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009250:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009254:	4642      	mov	r2, r8
 8009256:	464b      	mov	r3, r9
 8009258:	1891      	adds	r1, r2, r2
 800925a:	61b9      	str	r1, [r7, #24]
 800925c:	415b      	adcs	r3, r3
 800925e:	61fb      	str	r3, [r7, #28]
 8009260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009264:	4641      	mov	r1, r8
 8009266:	1851      	adds	r1, r2, r1
 8009268:	6139      	str	r1, [r7, #16]
 800926a:	4649      	mov	r1, r9
 800926c:	414b      	adcs	r3, r1
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	f04f 0200 	mov.w	r2, #0
 8009274:	f04f 0300 	mov.w	r3, #0
 8009278:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800927c:	4659      	mov	r1, fp
 800927e:	00cb      	lsls	r3, r1, #3
 8009280:	4651      	mov	r1, sl
 8009282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009286:	4651      	mov	r1, sl
 8009288:	00ca      	lsls	r2, r1, #3
 800928a:	4610      	mov	r0, r2
 800928c:	4619      	mov	r1, r3
 800928e:	4603      	mov	r3, r0
 8009290:	4642      	mov	r2, r8
 8009292:	189b      	adds	r3, r3, r2
 8009294:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009298:	464b      	mov	r3, r9
 800929a:	460a      	mov	r2, r1
 800929c:	eb42 0303 	adc.w	r3, r2, r3
 80092a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80092a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80092ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80092b0:	f04f 0200 	mov.w	r2, #0
 80092b4:	f04f 0300 	mov.w	r3, #0
 80092b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80092bc:	4649      	mov	r1, r9
 80092be:	008b      	lsls	r3, r1, #2
 80092c0:	4641      	mov	r1, r8
 80092c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092c6:	4641      	mov	r1, r8
 80092c8:	008a      	lsls	r2, r1, #2
 80092ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80092ce:	f7f7 fcdb 	bl	8000c88 <__aeabi_uldivmod>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	4b39      	ldr	r3, [pc, #228]	; (80093bc <UART_SetConfig+0x4e4>)
 80092d8:	fba3 1302 	umull	r1, r3, r3, r2
 80092dc:	095b      	lsrs	r3, r3, #5
 80092de:	2164      	movs	r1, #100	; 0x64
 80092e0:	fb01 f303 	mul.w	r3, r1, r3
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	011b      	lsls	r3, r3, #4
 80092e8:	3332      	adds	r3, #50	; 0x32
 80092ea:	4a34      	ldr	r2, [pc, #208]	; (80093bc <UART_SetConfig+0x4e4>)
 80092ec:	fba2 2303 	umull	r2, r3, r2, r3
 80092f0:	095b      	lsrs	r3, r3, #5
 80092f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092f6:	441c      	add	r4, r3
 80092f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092fc:	2200      	movs	r2, #0
 80092fe:	673b      	str	r3, [r7, #112]	; 0x70
 8009300:	677a      	str	r2, [r7, #116]	; 0x74
 8009302:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009306:	4642      	mov	r2, r8
 8009308:	464b      	mov	r3, r9
 800930a:	1891      	adds	r1, r2, r2
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	415b      	adcs	r3, r3
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009316:	4641      	mov	r1, r8
 8009318:	1851      	adds	r1, r2, r1
 800931a:	6039      	str	r1, [r7, #0]
 800931c:	4649      	mov	r1, r9
 800931e:	414b      	adcs	r3, r1
 8009320:	607b      	str	r3, [r7, #4]
 8009322:	f04f 0200 	mov.w	r2, #0
 8009326:	f04f 0300 	mov.w	r3, #0
 800932a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800932e:	4659      	mov	r1, fp
 8009330:	00cb      	lsls	r3, r1, #3
 8009332:	4651      	mov	r1, sl
 8009334:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009338:	4651      	mov	r1, sl
 800933a:	00ca      	lsls	r2, r1, #3
 800933c:	4610      	mov	r0, r2
 800933e:	4619      	mov	r1, r3
 8009340:	4603      	mov	r3, r0
 8009342:	4642      	mov	r2, r8
 8009344:	189b      	adds	r3, r3, r2
 8009346:	66bb      	str	r3, [r7, #104]	; 0x68
 8009348:	464b      	mov	r3, r9
 800934a:	460a      	mov	r2, r1
 800934c:	eb42 0303 	adc.w	r3, r2, r3
 8009350:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	663b      	str	r3, [r7, #96]	; 0x60
 800935c:	667a      	str	r2, [r7, #100]	; 0x64
 800935e:	f04f 0200 	mov.w	r2, #0
 8009362:	f04f 0300 	mov.w	r3, #0
 8009366:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800936a:	4649      	mov	r1, r9
 800936c:	008b      	lsls	r3, r1, #2
 800936e:	4641      	mov	r1, r8
 8009370:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009374:	4641      	mov	r1, r8
 8009376:	008a      	lsls	r2, r1, #2
 8009378:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800937c:	f7f7 fc84 	bl	8000c88 <__aeabi_uldivmod>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <UART_SetConfig+0x4e4>)
 8009386:	fba3 1302 	umull	r1, r3, r3, r2
 800938a:	095b      	lsrs	r3, r3, #5
 800938c:	2164      	movs	r1, #100	; 0x64
 800938e:	fb01 f303 	mul.w	r3, r1, r3
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	011b      	lsls	r3, r3, #4
 8009396:	3332      	adds	r3, #50	; 0x32
 8009398:	4a08      	ldr	r2, [pc, #32]	; (80093bc <UART_SetConfig+0x4e4>)
 800939a:	fba2 2303 	umull	r2, r3, r2, r3
 800939e:	095b      	lsrs	r3, r3, #5
 80093a0:	f003 020f 	and.w	r2, r3, #15
 80093a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4422      	add	r2, r4
 80093ac:	609a      	str	r2, [r3, #8]
}
 80093ae:	bf00      	nop
 80093b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80093b4:	46bd      	mov	sp, r7
 80093b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093ba:	bf00      	nop
 80093bc:	51eb851f 	.word	0x51eb851f

080093c0 <__errno>:
 80093c0:	4b01      	ldr	r3, [pc, #4]	; (80093c8 <__errno+0x8>)
 80093c2:	6818      	ldr	r0, [r3, #0]
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	20000058 	.word	0x20000058

080093cc <__libc_init_array>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	4d0d      	ldr	r5, [pc, #52]	; (8009404 <__libc_init_array+0x38>)
 80093d0:	4c0d      	ldr	r4, [pc, #52]	; (8009408 <__libc_init_array+0x3c>)
 80093d2:	1b64      	subs	r4, r4, r5
 80093d4:	10a4      	asrs	r4, r4, #2
 80093d6:	2600      	movs	r6, #0
 80093d8:	42a6      	cmp	r6, r4
 80093da:	d109      	bne.n	80093f0 <__libc_init_array+0x24>
 80093dc:	4d0b      	ldr	r5, [pc, #44]	; (800940c <__libc_init_array+0x40>)
 80093de:	4c0c      	ldr	r4, [pc, #48]	; (8009410 <__libc_init_array+0x44>)
 80093e0:	f004 f950 	bl	800d684 <_init>
 80093e4:	1b64      	subs	r4, r4, r5
 80093e6:	10a4      	asrs	r4, r4, #2
 80093e8:	2600      	movs	r6, #0
 80093ea:	42a6      	cmp	r6, r4
 80093ec:	d105      	bne.n	80093fa <__libc_init_array+0x2e>
 80093ee:	bd70      	pop	{r4, r5, r6, pc}
 80093f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80093f4:	4798      	blx	r3
 80093f6:	3601      	adds	r6, #1
 80093f8:	e7ee      	b.n	80093d8 <__libc_init_array+0xc>
 80093fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80093fe:	4798      	blx	r3
 8009400:	3601      	adds	r6, #1
 8009402:	e7f2      	b.n	80093ea <__libc_init_array+0x1e>
 8009404:	0800dd90 	.word	0x0800dd90
 8009408:	0800dd90 	.word	0x0800dd90
 800940c:	0800dd90 	.word	0x0800dd90
 8009410:	0800dd94 	.word	0x0800dd94

08009414 <memset>:
 8009414:	4402      	add	r2, r0
 8009416:	4603      	mov	r3, r0
 8009418:	4293      	cmp	r3, r2
 800941a:	d100      	bne.n	800941e <memset+0xa>
 800941c:	4770      	bx	lr
 800941e:	f803 1b01 	strb.w	r1, [r3], #1
 8009422:	e7f9      	b.n	8009418 <memset+0x4>

08009424 <__cvt>:
 8009424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009428:	ec55 4b10 	vmov	r4, r5, d0
 800942c:	2d00      	cmp	r5, #0
 800942e:	460e      	mov	r6, r1
 8009430:	4619      	mov	r1, r3
 8009432:	462b      	mov	r3, r5
 8009434:	bfbb      	ittet	lt
 8009436:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800943a:	461d      	movlt	r5, r3
 800943c:	2300      	movge	r3, #0
 800943e:	232d      	movlt	r3, #45	; 0x2d
 8009440:	700b      	strb	r3, [r1, #0]
 8009442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009444:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009448:	4691      	mov	r9, r2
 800944a:	f023 0820 	bic.w	r8, r3, #32
 800944e:	bfbc      	itt	lt
 8009450:	4622      	movlt	r2, r4
 8009452:	4614      	movlt	r4, r2
 8009454:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009458:	d005      	beq.n	8009466 <__cvt+0x42>
 800945a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800945e:	d100      	bne.n	8009462 <__cvt+0x3e>
 8009460:	3601      	adds	r6, #1
 8009462:	2102      	movs	r1, #2
 8009464:	e000      	b.n	8009468 <__cvt+0x44>
 8009466:	2103      	movs	r1, #3
 8009468:	ab03      	add	r3, sp, #12
 800946a:	9301      	str	r3, [sp, #4]
 800946c:	ab02      	add	r3, sp, #8
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	ec45 4b10 	vmov	d0, r4, r5
 8009474:	4653      	mov	r3, sl
 8009476:	4632      	mov	r2, r6
 8009478:	f000 fcea 	bl	8009e50 <_dtoa_r>
 800947c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009480:	4607      	mov	r7, r0
 8009482:	d102      	bne.n	800948a <__cvt+0x66>
 8009484:	f019 0f01 	tst.w	r9, #1
 8009488:	d022      	beq.n	80094d0 <__cvt+0xac>
 800948a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800948e:	eb07 0906 	add.w	r9, r7, r6
 8009492:	d110      	bne.n	80094b6 <__cvt+0x92>
 8009494:	783b      	ldrb	r3, [r7, #0]
 8009496:	2b30      	cmp	r3, #48	; 0x30
 8009498:	d10a      	bne.n	80094b0 <__cvt+0x8c>
 800949a:	2200      	movs	r2, #0
 800949c:	2300      	movs	r3, #0
 800949e:	4620      	mov	r0, r4
 80094a0:	4629      	mov	r1, r5
 80094a2:	f7f7 fb31 	bl	8000b08 <__aeabi_dcmpeq>
 80094a6:	b918      	cbnz	r0, 80094b0 <__cvt+0x8c>
 80094a8:	f1c6 0601 	rsb	r6, r6, #1
 80094ac:	f8ca 6000 	str.w	r6, [sl]
 80094b0:	f8da 3000 	ldr.w	r3, [sl]
 80094b4:	4499      	add	r9, r3
 80094b6:	2200      	movs	r2, #0
 80094b8:	2300      	movs	r3, #0
 80094ba:	4620      	mov	r0, r4
 80094bc:	4629      	mov	r1, r5
 80094be:	f7f7 fb23 	bl	8000b08 <__aeabi_dcmpeq>
 80094c2:	b108      	cbz	r0, 80094c8 <__cvt+0xa4>
 80094c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80094c8:	2230      	movs	r2, #48	; 0x30
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	454b      	cmp	r3, r9
 80094ce:	d307      	bcc.n	80094e0 <__cvt+0xbc>
 80094d0:	9b03      	ldr	r3, [sp, #12]
 80094d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094d4:	1bdb      	subs	r3, r3, r7
 80094d6:	4638      	mov	r0, r7
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	b004      	add	sp, #16
 80094dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e0:	1c59      	adds	r1, r3, #1
 80094e2:	9103      	str	r1, [sp, #12]
 80094e4:	701a      	strb	r2, [r3, #0]
 80094e6:	e7f0      	b.n	80094ca <__cvt+0xa6>

080094e8 <__exponent>:
 80094e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094ea:	4603      	mov	r3, r0
 80094ec:	2900      	cmp	r1, #0
 80094ee:	bfb8      	it	lt
 80094f0:	4249      	neglt	r1, r1
 80094f2:	f803 2b02 	strb.w	r2, [r3], #2
 80094f6:	bfb4      	ite	lt
 80094f8:	222d      	movlt	r2, #45	; 0x2d
 80094fa:	222b      	movge	r2, #43	; 0x2b
 80094fc:	2909      	cmp	r1, #9
 80094fe:	7042      	strb	r2, [r0, #1]
 8009500:	dd2a      	ble.n	8009558 <__exponent+0x70>
 8009502:	f10d 0407 	add.w	r4, sp, #7
 8009506:	46a4      	mov	ip, r4
 8009508:	270a      	movs	r7, #10
 800950a:	46a6      	mov	lr, r4
 800950c:	460a      	mov	r2, r1
 800950e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009512:	fb07 1516 	mls	r5, r7, r6, r1
 8009516:	3530      	adds	r5, #48	; 0x30
 8009518:	2a63      	cmp	r2, #99	; 0x63
 800951a:	f104 34ff 	add.w	r4, r4, #4294967295
 800951e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009522:	4631      	mov	r1, r6
 8009524:	dcf1      	bgt.n	800950a <__exponent+0x22>
 8009526:	3130      	adds	r1, #48	; 0x30
 8009528:	f1ae 0502 	sub.w	r5, lr, #2
 800952c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009530:	1c44      	adds	r4, r0, #1
 8009532:	4629      	mov	r1, r5
 8009534:	4561      	cmp	r1, ip
 8009536:	d30a      	bcc.n	800954e <__exponent+0x66>
 8009538:	f10d 0209 	add.w	r2, sp, #9
 800953c:	eba2 020e 	sub.w	r2, r2, lr
 8009540:	4565      	cmp	r5, ip
 8009542:	bf88      	it	hi
 8009544:	2200      	movhi	r2, #0
 8009546:	4413      	add	r3, r2
 8009548:	1a18      	subs	r0, r3, r0
 800954a:	b003      	add	sp, #12
 800954c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800954e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009552:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009556:	e7ed      	b.n	8009534 <__exponent+0x4c>
 8009558:	2330      	movs	r3, #48	; 0x30
 800955a:	3130      	adds	r1, #48	; 0x30
 800955c:	7083      	strb	r3, [r0, #2]
 800955e:	70c1      	strb	r1, [r0, #3]
 8009560:	1d03      	adds	r3, r0, #4
 8009562:	e7f1      	b.n	8009548 <__exponent+0x60>

08009564 <_printf_float>:
 8009564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009568:	ed2d 8b02 	vpush	{d8}
 800956c:	b08d      	sub	sp, #52	; 0x34
 800956e:	460c      	mov	r4, r1
 8009570:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009574:	4616      	mov	r6, r2
 8009576:	461f      	mov	r7, r3
 8009578:	4605      	mov	r5, r0
 800957a:	f001 fa57 	bl	800aa2c <_localeconv_r>
 800957e:	f8d0 a000 	ldr.w	sl, [r0]
 8009582:	4650      	mov	r0, sl
 8009584:	f7f6 fe44 	bl	8000210 <strlen>
 8009588:	2300      	movs	r3, #0
 800958a:	930a      	str	r3, [sp, #40]	; 0x28
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	9305      	str	r3, [sp, #20]
 8009590:	f8d8 3000 	ldr.w	r3, [r8]
 8009594:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009598:	3307      	adds	r3, #7
 800959a:	f023 0307 	bic.w	r3, r3, #7
 800959e:	f103 0208 	add.w	r2, r3, #8
 80095a2:	f8c8 2000 	str.w	r2, [r8]
 80095a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80095ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80095b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095b6:	9307      	str	r3, [sp, #28]
 80095b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80095bc:	ee08 0a10 	vmov	s16, r0
 80095c0:	4b9f      	ldr	r3, [pc, #636]	; (8009840 <_printf_float+0x2dc>)
 80095c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095c6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ca:	f7f7 facf 	bl	8000b6c <__aeabi_dcmpun>
 80095ce:	bb88      	cbnz	r0, 8009634 <_printf_float+0xd0>
 80095d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095d4:	4b9a      	ldr	r3, [pc, #616]	; (8009840 <_printf_float+0x2dc>)
 80095d6:	f04f 32ff 	mov.w	r2, #4294967295
 80095da:	f7f7 faa9 	bl	8000b30 <__aeabi_dcmple>
 80095de:	bb48      	cbnz	r0, 8009634 <_printf_float+0xd0>
 80095e0:	2200      	movs	r2, #0
 80095e2:	2300      	movs	r3, #0
 80095e4:	4640      	mov	r0, r8
 80095e6:	4649      	mov	r1, r9
 80095e8:	f7f7 fa98 	bl	8000b1c <__aeabi_dcmplt>
 80095ec:	b110      	cbz	r0, 80095f4 <_printf_float+0x90>
 80095ee:	232d      	movs	r3, #45	; 0x2d
 80095f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095f4:	4b93      	ldr	r3, [pc, #588]	; (8009844 <_printf_float+0x2e0>)
 80095f6:	4894      	ldr	r0, [pc, #592]	; (8009848 <_printf_float+0x2e4>)
 80095f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80095fc:	bf94      	ite	ls
 80095fe:	4698      	movls	r8, r3
 8009600:	4680      	movhi	r8, r0
 8009602:	2303      	movs	r3, #3
 8009604:	6123      	str	r3, [r4, #16]
 8009606:	9b05      	ldr	r3, [sp, #20]
 8009608:	f023 0204 	bic.w	r2, r3, #4
 800960c:	6022      	str	r2, [r4, #0]
 800960e:	f04f 0900 	mov.w	r9, #0
 8009612:	9700      	str	r7, [sp, #0]
 8009614:	4633      	mov	r3, r6
 8009616:	aa0b      	add	r2, sp, #44	; 0x2c
 8009618:	4621      	mov	r1, r4
 800961a:	4628      	mov	r0, r5
 800961c:	f000 f9d8 	bl	80099d0 <_printf_common>
 8009620:	3001      	adds	r0, #1
 8009622:	f040 8090 	bne.w	8009746 <_printf_float+0x1e2>
 8009626:	f04f 30ff 	mov.w	r0, #4294967295
 800962a:	b00d      	add	sp, #52	; 0x34
 800962c:	ecbd 8b02 	vpop	{d8}
 8009630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009634:	4642      	mov	r2, r8
 8009636:	464b      	mov	r3, r9
 8009638:	4640      	mov	r0, r8
 800963a:	4649      	mov	r1, r9
 800963c:	f7f7 fa96 	bl	8000b6c <__aeabi_dcmpun>
 8009640:	b140      	cbz	r0, 8009654 <_printf_float+0xf0>
 8009642:	464b      	mov	r3, r9
 8009644:	2b00      	cmp	r3, #0
 8009646:	bfbc      	itt	lt
 8009648:	232d      	movlt	r3, #45	; 0x2d
 800964a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800964e:	487f      	ldr	r0, [pc, #508]	; (800984c <_printf_float+0x2e8>)
 8009650:	4b7f      	ldr	r3, [pc, #508]	; (8009850 <_printf_float+0x2ec>)
 8009652:	e7d1      	b.n	80095f8 <_printf_float+0x94>
 8009654:	6863      	ldr	r3, [r4, #4]
 8009656:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800965a:	9206      	str	r2, [sp, #24]
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	d13f      	bne.n	80096e0 <_printf_float+0x17c>
 8009660:	2306      	movs	r3, #6
 8009662:	6063      	str	r3, [r4, #4]
 8009664:	9b05      	ldr	r3, [sp, #20]
 8009666:	6861      	ldr	r1, [r4, #4]
 8009668:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800966c:	2300      	movs	r3, #0
 800966e:	9303      	str	r3, [sp, #12]
 8009670:	ab0a      	add	r3, sp, #40	; 0x28
 8009672:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009676:	ab09      	add	r3, sp, #36	; 0x24
 8009678:	ec49 8b10 	vmov	d0, r8, r9
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	6022      	str	r2, [r4, #0]
 8009680:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009684:	4628      	mov	r0, r5
 8009686:	f7ff fecd 	bl	8009424 <__cvt>
 800968a:	9b06      	ldr	r3, [sp, #24]
 800968c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800968e:	2b47      	cmp	r3, #71	; 0x47
 8009690:	4680      	mov	r8, r0
 8009692:	d108      	bne.n	80096a6 <_printf_float+0x142>
 8009694:	1cc8      	adds	r0, r1, #3
 8009696:	db02      	blt.n	800969e <_printf_float+0x13a>
 8009698:	6863      	ldr	r3, [r4, #4]
 800969a:	4299      	cmp	r1, r3
 800969c:	dd41      	ble.n	8009722 <_printf_float+0x1be>
 800969e:	f1ab 0b02 	sub.w	fp, fp, #2
 80096a2:	fa5f fb8b 	uxtb.w	fp, fp
 80096a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096aa:	d820      	bhi.n	80096ee <_printf_float+0x18a>
 80096ac:	3901      	subs	r1, #1
 80096ae:	465a      	mov	r2, fp
 80096b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80096b4:	9109      	str	r1, [sp, #36]	; 0x24
 80096b6:	f7ff ff17 	bl	80094e8 <__exponent>
 80096ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096bc:	1813      	adds	r3, r2, r0
 80096be:	2a01      	cmp	r2, #1
 80096c0:	4681      	mov	r9, r0
 80096c2:	6123      	str	r3, [r4, #16]
 80096c4:	dc02      	bgt.n	80096cc <_printf_float+0x168>
 80096c6:	6822      	ldr	r2, [r4, #0]
 80096c8:	07d2      	lsls	r2, r2, #31
 80096ca:	d501      	bpl.n	80096d0 <_printf_float+0x16c>
 80096cc:	3301      	adds	r3, #1
 80096ce:	6123      	str	r3, [r4, #16]
 80096d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d09c      	beq.n	8009612 <_printf_float+0xae>
 80096d8:	232d      	movs	r3, #45	; 0x2d
 80096da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096de:	e798      	b.n	8009612 <_printf_float+0xae>
 80096e0:	9a06      	ldr	r2, [sp, #24]
 80096e2:	2a47      	cmp	r2, #71	; 0x47
 80096e4:	d1be      	bne.n	8009664 <_printf_float+0x100>
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1bc      	bne.n	8009664 <_printf_float+0x100>
 80096ea:	2301      	movs	r3, #1
 80096ec:	e7b9      	b.n	8009662 <_printf_float+0xfe>
 80096ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80096f2:	d118      	bne.n	8009726 <_printf_float+0x1c2>
 80096f4:	2900      	cmp	r1, #0
 80096f6:	6863      	ldr	r3, [r4, #4]
 80096f8:	dd0b      	ble.n	8009712 <_printf_float+0x1ae>
 80096fa:	6121      	str	r1, [r4, #16]
 80096fc:	b913      	cbnz	r3, 8009704 <_printf_float+0x1a0>
 80096fe:	6822      	ldr	r2, [r4, #0]
 8009700:	07d0      	lsls	r0, r2, #31
 8009702:	d502      	bpl.n	800970a <_printf_float+0x1a6>
 8009704:	3301      	adds	r3, #1
 8009706:	440b      	add	r3, r1
 8009708:	6123      	str	r3, [r4, #16]
 800970a:	65a1      	str	r1, [r4, #88]	; 0x58
 800970c:	f04f 0900 	mov.w	r9, #0
 8009710:	e7de      	b.n	80096d0 <_printf_float+0x16c>
 8009712:	b913      	cbnz	r3, 800971a <_printf_float+0x1b6>
 8009714:	6822      	ldr	r2, [r4, #0]
 8009716:	07d2      	lsls	r2, r2, #31
 8009718:	d501      	bpl.n	800971e <_printf_float+0x1ba>
 800971a:	3302      	adds	r3, #2
 800971c:	e7f4      	b.n	8009708 <_printf_float+0x1a4>
 800971e:	2301      	movs	r3, #1
 8009720:	e7f2      	b.n	8009708 <_printf_float+0x1a4>
 8009722:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009728:	4299      	cmp	r1, r3
 800972a:	db05      	blt.n	8009738 <_printf_float+0x1d4>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	6121      	str	r1, [r4, #16]
 8009730:	07d8      	lsls	r0, r3, #31
 8009732:	d5ea      	bpl.n	800970a <_printf_float+0x1a6>
 8009734:	1c4b      	adds	r3, r1, #1
 8009736:	e7e7      	b.n	8009708 <_printf_float+0x1a4>
 8009738:	2900      	cmp	r1, #0
 800973a:	bfd4      	ite	le
 800973c:	f1c1 0202 	rsble	r2, r1, #2
 8009740:	2201      	movgt	r2, #1
 8009742:	4413      	add	r3, r2
 8009744:	e7e0      	b.n	8009708 <_printf_float+0x1a4>
 8009746:	6823      	ldr	r3, [r4, #0]
 8009748:	055a      	lsls	r2, r3, #21
 800974a:	d407      	bmi.n	800975c <_printf_float+0x1f8>
 800974c:	6923      	ldr	r3, [r4, #16]
 800974e:	4642      	mov	r2, r8
 8009750:	4631      	mov	r1, r6
 8009752:	4628      	mov	r0, r5
 8009754:	47b8      	blx	r7
 8009756:	3001      	adds	r0, #1
 8009758:	d12c      	bne.n	80097b4 <_printf_float+0x250>
 800975a:	e764      	b.n	8009626 <_printf_float+0xc2>
 800975c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009760:	f240 80e0 	bls.w	8009924 <_printf_float+0x3c0>
 8009764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009768:	2200      	movs	r2, #0
 800976a:	2300      	movs	r3, #0
 800976c:	f7f7 f9cc 	bl	8000b08 <__aeabi_dcmpeq>
 8009770:	2800      	cmp	r0, #0
 8009772:	d034      	beq.n	80097de <_printf_float+0x27a>
 8009774:	4a37      	ldr	r2, [pc, #220]	; (8009854 <_printf_float+0x2f0>)
 8009776:	2301      	movs	r3, #1
 8009778:	4631      	mov	r1, r6
 800977a:	4628      	mov	r0, r5
 800977c:	47b8      	blx	r7
 800977e:	3001      	adds	r0, #1
 8009780:	f43f af51 	beq.w	8009626 <_printf_float+0xc2>
 8009784:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009788:	429a      	cmp	r2, r3
 800978a:	db02      	blt.n	8009792 <_printf_float+0x22e>
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	07d8      	lsls	r0, r3, #31
 8009790:	d510      	bpl.n	80097b4 <_printf_float+0x250>
 8009792:	ee18 3a10 	vmov	r3, s16
 8009796:	4652      	mov	r2, sl
 8009798:	4631      	mov	r1, r6
 800979a:	4628      	mov	r0, r5
 800979c:	47b8      	blx	r7
 800979e:	3001      	adds	r0, #1
 80097a0:	f43f af41 	beq.w	8009626 <_printf_float+0xc2>
 80097a4:	f04f 0800 	mov.w	r8, #0
 80097a8:	f104 091a 	add.w	r9, r4, #26
 80097ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ae:	3b01      	subs	r3, #1
 80097b0:	4543      	cmp	r3, r8
 80097b2:	dc09      	bgt.n	80097c8 <_printf_float+0x264>
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	079b      	lsls	r3, r3, #30
 80097b8:	f100 8105 	bmi.w	80099c6 <_printf_float+0x462>
 80097bc:	68e0      	ldr	r0, [r4, #12]
 80097be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097c0:	4298      	cmp	r0, r3
 80097c2:	bfb8      	it	lt
 80097c4:	4618      	movlt	r0, r3
 80097c6:	e730      	b.n	800962a <_printf_float+0xc6>
 80097c8:	2301      	movs	r3, #1
 80097ca:	464a      	mov	r2, r9
 80097cc:	4631      	mov	r1, r6
 80097ce:	4628      	mov	r0, r5
 80097d0:	47b8      	blx	r7
 80097d2:	3001      	adds	r0, #1
 80097d4:	f43f af27 	beq.w	8009626 <_printf_float+0xc2>
 80097d8:	f108 0801 	add.w	r8, r8, #1
 80097dc:	e7e6      	b.n	80097ac <_printf_float+0x248>
 80097de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	dc39      	bgt.n	8009858 <_printf_float+0x2f4>
 80097e4:	4a1b      	ldr	r2, [pc, #108]	; (8009854 <_printf_float+0x2f0>)
 80097e6:	2301      	movs	r3, #1
 80097e8:	4631      	mov	r1, r6
 80097ea:	4628      	mov	r0, r5
 80097ec:	47b8      	blx	r7
 80097ee:	3001      	adds	r0, #1
 80097f0:	f43f af19 	beq.w	8009626 <_printf_float+0xc2>
 80097f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097f8:	4313      	orrs	r3, r2
 80097fa:	d102      	bne.n	8009802 <_printf_float+0x29e>
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	07d9      	lsls	r1, r3, #31
 8009800:	d5d8      	bpl.n	80097b4 <_printf_float+0x250>
 8009802:	ee18 3a10 	vmov	r3, s16
 8009806:	4652      	mov	r2, sl
 8009808:	4631      	mov	r1, r6
 800980a:	4628      	mov	r0, r5
 800980c:	47b8      	blx	r7
 800980e:	3001      	adds	r0, #1
 8009810:	f43f af09 	beq.w	8009626 <_printf_float+0xc2>
 8009814:	f04f 0900 	mov.w	r9, #0
 8009818:	f104 0a1a 	add.w	sl, r4, #26
 800981c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800981e:	425b      	negs	r3, r3
 8009820:	454b      	cmp	r3, r9
 8009822:	dc01      	bgt.n	8009828 <_printf_float+0x2c4>
 8009824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009826:	e792      	b.n	800974e <_printf_float+0x1ea>
 8009828:	2301      	movs	r3, #1
 800982a:	4652      	mov	r2, sl
 800982c:	4631      	mov	r1, r6
 800982e:	4628      	mov	r0, r5
 8009830:	47b8      	blx	r7
 8009832:	3001      	adds	r0, #1
 8009834:	f43f aef7 	beq.w	8009626 <_printf_float+0xc2>
 8009838:	f109 0901 	add.w	r9, r9, #1
 800983c:	e7ee      	b.n	800981c <_printf_float+0x2b8>
 800983e:	bf00      	nop
 8009840:	7fefffff 	.word	0x7fefffff
 8009844:	0800d794 	.word	0x0800d794
 8009848:	0800d798 	.word	0x0800d798
 800984c:	0800d7a0 	.word	0x0800d7a0
 8009850:	0800d79c 	.word	0x0800d79c
 8009854:	0800d7a4 	.word	0x0800d7a4
 8009858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800985a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800985c:	429a      	cmp	r2, r3
 800985e:	bfa8      	it	ge
 8009860:	461a      	movge	r2, r3
 8009862:	2a00      	cmp	r2, #0
 8009864:	4691      	mov	r9, r2
 8009866:	dc37      	bgt.n	80098d8 <_printf_float+0x374>
 8009868:	f04f 0b00 	mov.w	fp, #0
 800986c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009870:	f104 021a 	add.w	r2, r4, #26
 8009874:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009876:	9305      	str	r3, [sp, #20]
 8009878:	eba3 0309 	sub.w	r3, r3, r9
 800987c:	455b      	cmp	r3, fp
 800987e:	dc33      	bgt.n	80098e8 <_printf_float+0x384>
 8009880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009884:	429a      	cmp	r2, r3
 8009886:	db3b      	blt.n	8009900 <_printf_float+0x39c>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	07da      	lsls	r2, r3, #31
 800988c:	d438      	bmi.n	8009900 <_printf_float+0x39c>
 800988e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009890:	9a05      	ldr	r2, [sp, #20]
 8009892:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009894:	1a9a      	subs	r2, r3, r2
 8009896:	eba3 0901 	sub.w	r9, r3, r1
 800989a:	4591      	cmp	r9, r2
 800989c:	bfa8      	it	ge
 800989e:	4691      	movge	r9, r2
 80098a0:	f1b9 0f00 	cmp.w	r9, #0
 80098a4:	dc35      	bgt.n	8009912 <_printf_float+0x3ae>
 80098a6:	f04f 0800 	mov.w	r8, #0
 80098aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098ae:	f104 0a1a 	add.w	sl, r4, #26
 80098b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098b6:	1a9b      	subs	r3, r3, r2
 80098b8:	eba3 0309 	sub.w	r3, r3, r9
 80098bc:	4543      	cmp	r3, r8
 80098be:	f77f af79 	ble.w	80097b4 <_printf_float+0x250>
 80098c2:	2301      	movs	r3, #1
 80098c4:	4652      	mov	r2, sl
 80098c6:	4631      	mov	r1, r6
 80098c8:	4628      	mov	r0, r5
 80098ca:	47b8      	blx	r7
 80098cc:	3001      	adds	r0, #1
 80098ce:	f43f aeaa 	beq.w	8009626 <_printf_float+0xc2>
 80098d2:	f108 0801 	add.w	r8, r8, #1
 80098d6:	e7ec      	b.n	80098b2 <_printf_float+0x34e>
 80098d8:	4613      	mov	r3, r2
 80098da:	4631      	mov	r1, r6
 80098dc:	4642      	mov	r2, r8
 80098de:	4628      	mov	r0, r5
 80098e0:	47b8      	blx	r7
 80098e2:	3001      	adds	r0, #1
 80098e4:	d1c0      	bne.n	8009868 <_printf_float+0x304>
 80098e6:	e69e      	b.n	8009626 <_printf_float+0xc2>
 80098e8:	2301      	movs	r3, #1
 80098ea:	4631      	mov	r1, r6
 80098ec:	4628      	mov	r0, r5
 80098ee:	9205      	str	r2, [sp, #20]
 80098f0:	47b8      	blx	r7
 80098f2:	3001      	adds	r0, #1
 80098f4:	f43f ae97 	beq.w	8009626 <_printf_float+0xc2>
 80098f8:	9a05      	ldr	r2, [sp, #20]
 80098fa:	f10b 0b01 	add.w	fp, fp, #1
 80098fe:	e7b9      	b.n	8009874 <_printf_float+0x310>
 8009900:	ee18 3a10 	vmov	r3, s16
 8009904:	4652      	mov	r2, sl
 8009906:	4631      	mov	r1, r6
 8009908:	4628      	mov	r0, r5
 800990a:	47b8      	blx	r7
 800990c:	3001      	adds	r0, #1
 800990e:	d1be      	bne.n	800988e <_printf_float+0x32a>
 8009910:	e689      	b.n	8009626 <_printf_float+0xc2>
 8009912:	9a05      	ldr	r2, [sp, #20]
 8009914:	464b      	mov	r3, r9
 8009916:	4442      	add	r2, r8
 8009918:	4631      	mov	r1, r6
 800991a:	4628      	mov	r0, r5
 800991c:	47b8      	blx	r7
 800991e:	3001      	adds	r0, #1
 8009920:	d1c1      	bne.n	80098a6 <_printf_float+0x342>
 8009922:	e680      	b.n	8009626 <_printf_float+0xc2>
 8009924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009926:	2a01      	cmp	r2, #1
 8009928:	dc01      	bgt.n	800992e <_printf_float+0x3ca>
 800992a:	07db      	lsls	r3, r3, #31
 800992c:	d538      	bpl.n	80099a0 <_printf_float+0x43c>
 800992e:	2301      	movs	r3, #1
 8009930:	4642      	mov	r2, r8
 8009932:	4631      	mov	r1, r6
 8009934:	4628      	mov	r0, r5
 8009936:	47b8      	blx	r7
 8009938:	3001      	adds	r0, #1
 800993a:	f43f ae74 	beq.w	8009626 <_printf_float+0xc2>
 800993e:	ee18 3a10 	vmov	r3, s16
 8009942:	4652      	mov	r2, sl
 8009944:	4631      	mov	r1, r6
 8009946:	4628      	mov	r0, r5
 8009948:	47b8      	blx	r7
 800994a:	3001      	adds	r0, #1
 800994c:	f43f ae6b 	beq.w	8009626 <_printf_float+0xc2>
 8009950:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009954:	2200      	movs	r2, #0
 8009956:	2300      	movs	r3, #0
 8009958:	f7f7 f8d6 	bl	8000b08 <__aeabi_dcmpeq>
 800995c:	b9d8      	cbnz	r0, 8009996 <_printf_float+0x432>
 800995e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009960:	f108 0201 	add.w	r2, r8, #1
 8009964:	3b01      	subs	r3, #1
 8009966:	4631      	mov	r1, r6
 8009968:	4628      	mov	r0, r5
 800996a:	47b8      	blx	r7
 800996c:	3001      	adds	r0, #1
 800996e:	d10e      	bne.n	800998e <_printf_float+0x42a>
 8009970:	e659      	b.n	8009626 <_printf_float+0xc2>
 8009972:	2301      	movs	r3, #1
 8009974:	4652      	mov	r2, sl
 8009976:	4631      	mov	r1, r6
 8009978:	4628      	mov	r0, r5
 800997a:	47b8      	blx	r7
 800997c:	3001      	adds	r0, #1
 800997e:	f43f ae52 	beq.w	8009626 <_printf_float+0xc2>
 8009982:	f108 0801 	add.w	r8, r8, #1
 8009986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009988:	3b01      	subs	r3, #1
 800998a:	4543      	cmp	r3, r8
 800998c:	dcf1      	bgt.n	8009972 <_printf_float+0x40e>
 800998e:	464b      	mov	r3, r9
 8009990:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009994:	e6dc      	b.n	8009750 <_printf_float+0x1ec>
 8009996:	f04f 0800 	mov.w	r8, #0
 800999a:	f104 0a1a 	add.w	sl, r4, #26
 800999e:	e7f2      	b.n	8009986 <_printf_float+0x422>
 80099a0:	2301      	movs	r3, #1
 80099a2:	4642      	mov	r2, r8
 80099a4:	e7df      	b.n	8009966 <_printf_float+0x402>
 80099a6:	2301      	movs	r3, #1
 80099a8:	464a      	mov	r2, r9
 80099aa:	4631      	mov	r1, r6
 80099ac:	4628      	mov	r0, r5
 80099ae:	47b8      	blx	r7
 80099b0:	3001      	adds	r0, #1
 80099b2:	f43f ae38 	beq.w	8009626 <_printf_float+0xc2>
 80099b6:	f108 0801 	add.w	r8, r8, #1
 80099ba:	68e3      	ldr	r3, [r4, #12]
 80099bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099be:	1a5b      	subs	r3, r3, r1
 80099c0:	4543      	cmp	r3, r8
 80099c2:	dcf0      	bgt.n	80099a6 <_printf_float+0x442>
 80099c4:	e6fa      	b.n	80097bc <_printf_float+0x258>
 80099c6:	f04f 0800 	mov.w	r8, #0
 80099ca:	f104 0919 	add.w	r9, r4, #25
 80099ce:	e7f4      	b.n	80099ba <_printf_float+0x456>

080099d0 <_printf_common>:
 80099d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d4:	4616      	mov	r6, r2
 80099d6:	4699      	mov	r9, r3
 80099d8:	688a      	ldr	r2, [r1, #8]
 80099da:	690b      	ldr	r3, [r1, #16]
 80099dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099e0:	4293      	cmp	r3, r2
 80099e2:	bfb8      	it	lt
 80099e4:	4613      	movlt	r3, r2
 80099e6:	6033      	str	r3, [r6, #0]
 80099e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099ec:	4607      	mov	r7, r0
 80099ee:	460c      	mov	r4, r1
 80099f0:	b10a      	cbz	r2, 80099f6 <_printf_common+0x26>
 80099f2:	3301      	adds	r3, #1
 80099f4:	6033      	str	r3, [r6, #0]
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	0699      	lsls	r1, r3, #26
 80099fa:	bf42      	ittt	mi
 80099fc:	6833      	ldrmi	r3, [r6, #0]
 80099fe:	3302      	addmi	r3, #2
 8009a00:	6033      	strmi	r3, [r6, #0]
 8009a02:	6825      	ldr	r5, [r4, #0]
 8009a04:	f015 0506 	ands.w	r5, r5, #6
 8009a08:	d106      	bne.n	8009a18 <_printf_common+0x48>
 8009a0a:	f104 0a19 	add.w	sl, r4, #25
 8009a0e:	68e3      	ldr	r3, [r4, #12]
 8009a10:	6832      	ldr	r2, [r6, #0]
 8009a12:	1a9b      	subs	r3, r3, r2
 8009a14:	42ab      	cmp	r3, r5
 8009a16:	dc26      	bgt.n	8009a66 <_printf_common+0x96>
 8009a18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a1c:	1e13      	subs	r3, r2, #0
 8009a1e:	6822      	ldr	r2, [r4, #0]
 8009a20:	bf18      	it	ne
 8009a22:	2301      	movne	r3, #1
 8009a24:	0692      	lsls	r2, r2, #26
 8009a26:	d42b      	bmi.n	8009a80 <_printf_common+0xb0>
 8009a28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a2c:	4649      	mov	r1, r9
 8009a2e:	4638      	mov	r0, r7
 8009a30:	47c0      	blx	r8
 8009a32:	3001      	adds	r0, #1
 8009a34:	d01e      	beq.n	8009a74 <_printf_common+0xa4>
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	68e5      	ldr	r5, [r4, #12]
 8009a3a:	6832      	ldr	r2, [r6, #0]
 8009a3c:	f003 0306 	and.w	r3, r3, #6
 8009a40:	2b04      	cmp	r3, #4
 8009a42:	bf08      	it	eq
 8009a44:	1aad      	subeq	r5, r5, r2
 8009a46:	68a3      	ldr	r3, [r4, #8]
 8009a48:	6922      	ldr	r2, [r4, #16]
 8009a4a:	bf0c      	ite	eq
 8009a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a50:	2500      	movne	r5, #0
 8009a52:	4293      	cmp	r3, r2
 8009a54:	bfc4      	itt	gt
 8009a56:	1a9b      	subgt	r3, r3, r2
 8009a58:	18ed      	addgt	r5, r5, r3
 8009a5a:	2600      	movs	r6, #0
 8009a5c:	341a      	adds	r4, #26
 8009a5e:	42b5      	cmp	r5, r6
 8009a60:	d11a      	bne.n	8009a98 <_printf_common+0xc8>
 8009a62:	2000      	movs	r0, #0
 8009a64:	e008      	b.n	8009a78 <_printf_common+0xa8>
 8009a66:	2301      	movs	r3, #1
 8009a68:	4652      	mov	r2, sl
 8009a6a:	4649      	mov	r1, r9
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	47c0      	blx	r8
 8009a70:	3001      	adds	r0, #1
 8009a72:	d103      	bne.n	8009a7c <_printf_common+0xac>
 8009a74:	f04f 30ff 	mov.w	r0, #4294967295
 8009a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a7c:	3501      	adds	r5, #1
 8009a7e:	e7c6      	b.n	8009a0e <_printf_common+0x3e>
 8009a80:	18e1      	adds	r1, r4, r3
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	2030      	movs	r0, #48	; 0x30
 8009a86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a8a:	4422      	add	r2, r4
 8009a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a94:	3302      	adds	r3, #2
 8009a96:	e7c7      	b.n	8009a28 <_printf_common+0x58>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	4649      	mov	r1, r9
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	47c0      	blx	r8
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	d0e6      	beq.n	8009a74 <_printf_common+0xa4>
 8009aa6:	3601      	adds	r6, #1
 8009aa8:	e7d9      	b.n	8009a5e <_printf_common+0x8e>
	...

08009aac <_printf_i>:
 8009aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab0:	7e0f      	ldrb	r7, [r1, #24]
 8009ab2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ab4:	2f78      	cmp	r7, #120	; 0x78
 8009ab6:	4691      	mov	r9, r2
 8009ab8:	4680      	mov	r8, r0
 8009aba:	460c      	mov	r4, r1
 8009abc:	469a      	mov	sl, r3
 8009abe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ac2:	d807      	bhi.n	8009ad4 <_printf_i+0x28>
 8009ac4:	2f62      	cmp	r7, #98	; 0x62
 8009ac6:	d80a      	bhi.n	8009ade <_printf_i+0x32>
 8009ac8:	2f00      	cmp	r7, #0
 8009aca:	f000 80d8 	beq.w	8009c7e <_printf_i+0x1d2>
 8009ace:	2f58      	cmp	r7, #88	; 0x58
 8009ad0:	f000 80a3 	beq.w	8009c1a <_printf_i+0x16e>
 8009ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009adc:	e03a      	b.n	8009b54 <_printf_i+0xa8>
 8009ade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ae2:	2b15      	cmp	r3, #21
 8009ae4:	d8f6      	bhi.n	8009ad4 <_printf_i+0x28>
 8009ae6:	a101      	add	r1, pc, #4	; (adr r1, 8009aec <_printf_i+0x40>)
 8009ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009aec:	08009b45 	.word	0x08009b45
 8009af0:	08009b59 	.word	0x08009b59
 8009af4:	08009ad5 	.word	0x08009ad5
 8009af8:	08009ad5 	.word	0x08009ad5
 8009afc:	08009ad5 	.word	0x08009ad5
 8009b00:	08009ad5 	.word	0x08009ad5
 8009b04:	08009b59 	.word	0x08009b59
 8009b08:	08009ad5 	.word	0x08009ad5
 8009b0c:	08009ad5 	.word	0x08009ad5
 8009b10:	08009ad5 	.word	0x08009ad5
 8009b14:	08009ad5 	.word	0x08009ad5
 8009b18:	08009c65 	.word	0x08009c65
 8009b1c:	08009b89 	.word	0x08009b89
 8009b20:	08009c47 	.word	0x08009c47
 8009b24:	08009ad5 	.word	0x08009ad5
 8009b28:	08009ad5 	.word	0x08009ad5
 8009b2c:	08009c87 	.word	0x08009c87
 8009b30:	08009ad5 	.word	0x08009ad5
 8009b34:	08009b89 	.word	0x08009b89
 8009b38:	08009ad5 	.word	0x08009ad5
 8009b3c:	08009ad5 	.word	0x08009ad5
 8009b40:	08009c4f 	.word	0x08009c4f
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	1d1a      	adds	r2, r3, #4
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	602a      	str	r2, [r5, #0]
 8009b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b54:	2301      	movs	r3, #1
 8009b56:	e0a3      	b.n	8009ca0 <_printf_i+0x1f4>
 8009b58:	6820      	ldr	r0, [r4, #0]
 8009b5a:	6829      	ldr	r1, [r5, #0]
 8009b5c:	0606      	lsls	r6, r0, #24
 8009b5e:	f101 0304 	add.w	r3, r1, #4
 8009b62:	d50a      	bpl.n	8009b7a <_printf_i+0xce>
 8009b64:	680e      	ldr	r6, [r1, #0]
 8009b66:	602b      	str	r3, [r5, #0]
 8009b68:	2e00      	cmp	r6, #0
 8009b6a:	da03      	bge.n	8009b74 <_printf_i+0xc8>
 8009b6c:	232d      	movs	r3, #45	; 0x2d
 8009b6e:	4276      	negs	r6, r6
 8009b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b74:	485e      	ldr	r0, [pc, #376]	; (8009cf0 <_printf_i+0x244>)
 8009b76:	230a      	movs	r3, #10
 8009b78:	e019      	b.n	8009bae <_printf_i+0x102>
 8009b7a:	680e      	ldr	r6, [r1, #0]
 8009b7c:	602b      	str	r3, [r5, #0]
 8009b7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b82:	bf18      	it	ne
 8009b84:	b236      	sxthne	r6, r6
 8009b86:	e7ef      	b.n	8009b68 <_printf_i+0xbc>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	6820      	ldr	r0, [r4, #0]
 8009b8c:	1d19      	adds	r1, r3, #4
 8009b8e:	6029      	str	r1, [r5, #0]
 8009b90:	0601      	lsls	r1, r0, #24
 8009b92:	d501      	bpl.n	8009b98 <_printf_i+0xec>
 8009b94:	681e      	ldr	r6, [r3, #0]
 8009b96:	e002      	b.n	8009b9e <_printf_i+0xf2>
 8009b98:	0646      	lsls	r6, r0, #25
 8009b9a:	d5fb      	bpl.n	8009b94 <_printf_i+0xe8>
 8009b9c:	881e      	ldrh	r6, [r3, #0]
 8009b9e:	4854      	ldr	r0, [pc, #336]	; (8009cf0 <_printf_i+0x244>)
 8009ba0:	2f6f      	cmp	r7, #111	; 0x6f
 8009ba2:	bf0c      	ite	eq
 8009ba4:	2308      	moveq	r3, #8
 8009ba6:	230a      	movne	r3, #10
 8009ba8:	2100      	movs	r1, #0
 8009baa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bae:	6865      	ldr	r5, [r4, #4]
 8009bb0:	60a5      	str	r5, [r4, #8]
 8009bb2:	2d00      	cmp	r5, #0
 8009bb4:	bfa2      	ittt	ge
 8009bb6:	6821      	ldrge	r1, [r4, #0]
 8009bb8:	f021 0104 	bicge.w	r1, r1, #4
 8009bbc:	6021      	strge	r1, [r4, #0]
 8009bbe:	b90e      	cbnz	r6, 8009bc4 <_printf_i+0x118>
 8009bc0:	2d00      	cmp	r5, #0
 8009bc2:	d04d      	beq.n	8009c60 <_printf_i+0x1b4>
 8009bc4:	4615      	mov	r5, r2
 8009bc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bca:	fb03 6711 	mls	r7, r3, r1, r6
 8009bce:	5dc7      	ldrb	r7, [r0, r7]
 8009bd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bd4:	4637      	mov	r7, r6
 8009bd6:	42bb      	cmp	r3, r7
 8009bd8:	460e      	mov	r6, r1
 8009bda:	d9f4      	bls.n	8009bc6 <_printf_i+0x11a>
 8009bdc:	2b08      	cmp	r3, #8
 8009bde:	d10b      	bne.n	8009bf8 <_printf_i+0x14c>
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	07de      	lsls	r6, r3, #31
 8009be4:	d508      	bpl.n	8009bf8 <_printf_i+0x14c>
 8009be6:	6923      	ldr	r3, [r4, #16]
 8009be8:	6861      	ldr	r1, [r4, #4]
 8009bea:	4299      	cmp	r1, r3
 8009bec:	bfde      	ittt	le
 8009bee:	2330      	movle	r3, #48	; 0x30
 8009bf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bf8:	1b52      	subs	r2, r2, r5
 8009bfa:	6122      	str	r2, [r4, #16]
 8009bfc:	f8cd a000 	str.w	sl, [sp]
 8009c00:	464b      	mov	r3, r9
 8009c02:	aa03      	add	r2, sp, #12
 8009c04:	4621      	mov	r1, r4
 8009c06:	4640      	mov	r0, r8
 8009c08:	f7ff fee2 	bl	80099d0 <_printf_common>
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	d14c      	bne.n	8009caa <_printf_i+0x1fe>
 8009c10:	f04f 30ff 	mov.w	r0, #4294967295
 8009c14:	b004      	add	sp, #16
 8009c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c1a:	4835      	ldr	r0, [pc, #212]	; (8009cf0 <_printf_i+0x244>)
 8009c1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c20:	6829      	ldr	r1, [r5, #0]
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c28:	6029      	str	r1, [r5, #0]
 8009c2a:	061d      	lsls	r5, r3, #24
 8009c2c:	d514      	bpl.n	8009c58 <_printf_i+0x1ac>
 8009c2e:	07df      	lsls	r7, r3, #31
 8009c30:	bf44      	itt	mi
 8009c32:	f043 0320 	orrmi.w	r3, r3, #32
 8009c36:	6023      	strmi	r3, [r4, #0]
 8009c38:	b91e      	cbnz	r6, 8009c42 <_printf_i+0x196>
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	f023 0320 	bic.w	r3, r3, #32
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	2310      	movs	r3, #16
 8009c44:	e7b0      	b.n	8009ba8 <_printf_i+0xfc>
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	f043 0320 	orr.w	r3, r3, #32
 8009c4c:	6023      	str	r3, [r4, #0]
 8009c4e:	2378      	movs	r3, #120	; 0x78
 8009c50:	4828      	ldr	r0, [pc, #160]	; (8009cf4 <_printf_i+0x248>)
 8009c52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c56:	e7e3      	b.n	8009c20 <_printf_i+0x174>
 8009c58:	0659      	lsls	r1, r3, #25
 8009c5a:	bf48      	it	mi
 8009c5c:	b2b6      	uxthmi	r6, r6
 8009c5e:	e7e6      	b.n	8009c2e <_printf_i+0x182>
 8009c60:	4615      	mov	r5, r2
 8009c62:	e7bb      	b.n	8009bdc <_printf_i+0x130>
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	6826      	ldr	r6, [r4, #0]
 8009c68:	6961      	ldr	r1, [r4, #20]
 8009c6a:	1d18      	adds	r0, r3, #4
 8009c6c:	6028      	str	r0, [r5, #0]
 8009c6e:	0635      	lsls	r5, r6, #24
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	d501      	bpl.n	8009c78 <_printf_i+0x1cc>
 8009c74:	6019      	str	r1, [r3, #0]
 8009c76:	e002      	b.n	8009c7e <_printf_i+0x1d2>
 8009c78:	0670      	lsls	r0, r6, #25
 8009c7a:	d5fb      	bpl.n	8009c74 <_printf_i+0x1c8>
 8009c7c:	8019      	strh	r1, [r3, #0]
 8009c7e:	2300      	movs	r3, #0
 8009c80:	6123      	str	r3, [r4, #16]
 8009c82:	4615      	mov	r5, r2
 8009c84:	e7ba      	b.n	8009bfc <_printf_i+0x150>
 8009c86:	682b      	ldr	r3, [r5, #0]
 8009c88:	1d1a      	adds	r2, r3, #4
 8009c8a:	602a      	str	r2, [r5, #0]
 8009c8c:	681d      	ldr	r5, [r3, #0]
 8009c8e:	6862      	ldr	r2, [r4, #4]
 8009c90:	2100      	movs	r1, #0
 8009c92:	4628      	mov	r0, r5
 8009c94:	f7f6 fac4 	bl	8000220 <memchr>
 8009c98:	b108      	cbz	r0, 8009c9e <_printf_i+0x1f2>
 8009c9a:	1b40      	subs	r0, r0, r5
 8009c9c:	6060      	str	r0, [r4, #4]
 8009c9e:	6863      	ldr	r3, [r4, #4]
 8009ca0:	6123      	str	r3, [r4, #16]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ca8:	e7a8      	b.n	8009bfc <_printf_i+0x150>
 8009caa:	6923      	ldr	r3, [r4, #16]
 8009cac:	462a      	mov	r2, r5
 8009cae:	4649      	mov	r1, r9
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	47d0      	blx	sl
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d0ab      	beq.n	8009c10 <_printf_i+0x164>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	079b      	lsls	r3, r3, #30
 8009cbc:	d413      	bmi.n	8009ce6 <_printf_i+0x23a>
 8009cbe:	68e0      	ldr	r0, [r4, #12]
 8009cc0:	9b03      	ldr	r3, [sp, #12]
 8009cc2:	4298      	cmp	r0, r3
 8009cc4:	bfb8      	it	lt
 8009cc6:	4618      	movlt	r0, r3
 8009cc8:	e7a4      	b.n	8009c14 <_printf_i+0x168>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	4632      	mov	r2, r6
 8009cce:	4649      	mov	r1, r9
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	47d0      	blx	sl
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d09b      	beq.n	8009c10 <_printf_i+0x164>
 8009cd8:	3501      	adds	r5, #1
 8009cda:	68e3      	ldr	r3, [r4, #12]
 8009cdc:	9903      	ldr	r1, [sp, #12]
 8009cde:	1a5b      	subs	r3, r3, r1
 8009ce0:	42ab      	cmp	r3, r5
 8009ce2:	dcf2      	bgt.n	8009cca <_printf_i+0x21e>
 8009ce4:	e7eb      	b.n	8009cbe <_printf_i+0x212>
 8009ce6:	2500      	movs	r5, #0
 8009ce8:	f104 0619 	add.w	r6, r4, #25
 8009cec:	e7f5      	b.n	8009cda <_printf_i+0x22e>
 8009cee:	bf00      	nop
 8009cf0:	0800d7a6 	.word	0x0800d7a6
 8009cf4:	0800d7b7 	.word	0x0800d7b7

08009cf8 <siprintf>:
 8009cf8:	b40e      	push	{r1, r2, r3}
 8009cfa:	b500      	push	{lr}
 8009cfc:	b09c      	sub	sp, #112	; 0x70
 8009cfe:	ab1d      	add	r3, sp, #116	; 0x74
 8009d00:	9002      	str	r0, [sp, #8]
 8009d02:	9006      	str	r0, [sp, #24]
 8009d04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d08:	4809      	ldr	r0, [pc, #36]	; (8009d30 <siprintf+0x38>)
 8009d0a:	9107      	str	r1, [sp, #28]
 8009d0c:	9104      	str	r1, [sp, #16]
 8009d0e:	4909      	ldr	r1, [pc, #36]	; (8009d34 <siprintf+0x3c>)
 8009d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d14:	9105      	str	r1, [sp, #20]
 8009d16:	6800      	ldr	r0, [r0, #0]
 8009d18:	9301      	str	r3, [sp, #4]
 8009d1a:	a902      	add	r1, sp, #8
 8009d1c:	f001 fb76 	bl	800b40c <_svfiprintf_r>
 8009d20:	9b02      	ldr	r3, [sp, #8]
 8009d22:	2200      	movs	r2, #0
 8009d24:	701a      	strb	r2, [r3, #0]
 8009d26:	b01c      	add	sp, #112	; 0x70
 8009d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d2c:	b003      	add	sp, #12
 8009d2e:	4770      	bx	lr
 8009d30:	20000058 	.word	0x20000058
 8009d34:	ffff0208 	.word	0xffff0208

08009d38 <quorem>:
 8009d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	6903      	ldr	r3, [r0, #16]
 8009d3e:	690c      	ldr	r4, [r1, #16]
 8009d40:	42a3      	cmp	r3, r4
 8009d42:	4607      	mov	r7, r0
 8009d44:	f2c0 8081 	blt.w	8009e4a <quorem+0x112>
 8009d48:	3c01      	subs	r4, #1
 8009d4a:	f101 0814 	add.w	r8, r1, #20
 8009d4e:	f100 0514 	add.w	r5, r0, #20
 8009d52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d56:	9301      	str	r3, [sp, #4]
 8009d58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d60:	3301      	adds	r3, #1
 8009d62:	429a      	cmp	r2, r3
 8009d64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d70:	d331      	bcc.n	8009dd6 <quorem+0x9e>
 8009d72:	f04f 0e00 	mov.w	lr, #0
 8009d76:	4640      	mov	r0, r8
 8009d78:	46ac      	mov	ip, r5
 8009d7a:	46f2      	mov	sl, lr
 8009d7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d80:	b293      	uxth	r3, r2
 8009d82:	fb06 e303 	mla	r3, r6, r3, lr
 8009d86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	ebaa 0303 	sub.w	r3, sl, r3
 8009d90:	f8dc a000 	ldr.w	sl, [ip]
 8009d94:	0c12      	lsrs	r2, r2, #16
 8009d96:	fa13 f38a 	uxtah	r3, r3, sl
 8009d9a:	fb06 e202 	mla	r2, r6, r2, lr
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	9b00      	ldr	r3, [sp, #0]
 8009da2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009da6:	b292      	uxth	r2, r2
 8009da8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009dac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009db0:	f8bd 3000 	ldrh.w	r3, [sp]
 8009db4:	4581      	cmp	r9, r0
 8009db6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dba:	f84c 3b04 	str.w	r3, [ip], #4
 8009dbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009dc2:	d2db      	bcs.n	8009d7c <quorem+0x44>
 8009dc4:	f855 300b 	ldr.w	r3, [r5, fp]
 8009dc8:	b92b      	cbnz	r3, 8009dd6 <quorem+0x9e>
 8009dca:	9b01      	ldr	r3, [sp, #4]
 8009dcc:	3b04      	subs	r3, #4
 8009dce:	429d      	cmp	r5, r3
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	d32e      	bcc.n	8009e32 <quorem+0xfa>
 8009dd4:	613c      	str	r4, [r7, #16]
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	f001 f8c4 	bl	800af64 <__mcmp>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	db24      	blt.n	8009e2a <quorem+0xf2>
 8009de0:	3601      	adds	r6, #1
 8009de2:	4628      	mov	r0, r5
 8009de4:	f04f 0c00 	mov.w	ip, #0
 8009de8:	f858 2b04 	ldr.w	r2, [r8], #4
 8009dec:	f8d0 e000 	ldr.w	lr, [r0]
 8009df0:	b293      	uxth	r3, r2
 8009df2:	ebac 0303 	sub.w	r3, ip, r3
 8009df6:	0c12      	lsrs	r2, r2, #16
 8009df8:	fa13 f38e 	uxtah	r3, r3, lr
 8009dfc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e0a:	45c1      	cmp	r9, r8
 8009e0c:	f840 3b04 	str.w	r3, [r0], #4
 8009e10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e14:	d2e8      	bcs.n	8009de8 <quorem+0xb0>
 8009e16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e1e:	b922      	cbnz	r2, 8009e2a <quorem+0xf2>
 8009e20:	3b04      	subs	r3, #4
 8009e22:	429d      	cmp	r5, r3
 8009e24:	461a      	mov	r2, r3
 8009e26:	d30a      	bcc.n	8009e3e <quorem+0x106>
 8009e28:	613c      	str	r4, [r7, #16]
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	b003      	add	sp, #12
 8009e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e32:	6812      	ldr	r2, [r2, #0]
 8009e34:	3b04      	subs	r3, #4
 8009e36:	2a00      	cmp	r2, #0
 8009e38:	d1cc      	bne.n	8009dd4 <quorem+0x9c>
 8009e3a:	3c01      	subs	r4, #1
 8009e3c:	e7c7      	b.n	8009dce <quorem+0x96>
 8009e3e:	6812      	ldr	r2, [r2, #0]
 8009e40:	3b04      	subs	r3, #4
 8009e42:	2a00      	cmp	r2, #0
 8009e44:	d1f0      	bne.n	8009e28 <quorem+0xf0>
 8009e46:	3c01      	subs	r4, #1
 8009e48:	e7eb      	b.n	8009e22 <quorem+0xea>
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	e7ee      	b.n	8009e2c <quorem+0xf4>
	...

08009e50 <_dtoa_r>:
 8009e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e54:	ed2d 8b04 	vpush	{d8-d9}
 8009e58:	ec57 6b10 	vmov	r6, r7, d0
 8009e5c:	b093      	sub	sp, #76	; 0x4c
 8009e5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e64:	9106      	str	r1, [sp, #24]
 8009e66:	ee10 aa10 	vmov	sl, s0
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8009e6e:	930c      	str	r3, [sp, #48]	; 0x30
 8009e70:	46bb      	mov	fp, r7
 8009e72:	b975      	cbnz	r5, 8009e92 <_dtoa_r+0x42>
 8009e74:	2010      	movs	r0, #16
 8009e76:	f000 fddd 	bl	800aa34 <malloc>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	6260      	str	r0, [r4, #36]	; 0x24
 8009e7e:	b920      	cbnz	r0, 8009e8a <_dtoa_r+0x3a>
 8009e80:	4ba7      	ldr	r3, [pc, #668]	; (800a120 <_dtoa_r+0x2d0>)
 8009e82:	21ea      	movs	r1, #234	; 0xea
 8009e84:	48a7      	ldr	r0, [pc, #668]	; (800a124 <_dtoa_r+0x2d4>)
 8009e86:	f001 fbd1 	bl	800b62c <__assert_func>
 8009e8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e8e:	6005      	str	r5, [r0, #0]
 8009e90:	60c5      	str	r5, [r0, #12]
 8009e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e94:	6819      	ldr	r1, [r3, #0]
 8009e96:	b151      	cbz	r1, 8009eae <_dtoa_r+0x5e>
 8009e98:	685a      	ldr	r2, [r3, #4]
 8009e9a:	604a      	str	r2, [r1, #4]
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	4093      	lsls	r3, r2
 8009ea0:	608b      	str	r3, [r1, #8]
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 fe1c 	bl	800aae0 <_Bfree>
 8009ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eaa:	2200      	movs	r2, #0
 8009eac:	601a      	str	r2, [r3, #0]
 8009eae:	1e3b      	subs	r3, r7, #0
 8009eb0:	bfaa      	itet	ge
 8009eb2:	2300      	movge	r3, #0
 8009eb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009eb8:	f8c8 3000 	strge.w	r3, [r8]
 8009ebc:	4b9a      	ldr	r3, [pc, #616]	; (800a128 <_dtoa_r+0x2d8>)
 8009ebe:	bfbc      	itt	lt
 8009ec0:	2201      	movlt	r2, #1
 8009ec2:	f8c8 2000 	strlt.w	r2, [r8]
 8009ec6:	ea33 030b 	bics.w	r3, r3, fp
 8009eca:	d11b      	bne.n	8009f04 <_dtoa_r+0xb4>
 8009ecc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ece:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ed2:	6013      	str	r3, [r2, #0]
 8009ed4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ed8:	4333      	orrs	r3, r6
 8009eda:	f000 8592 	beq.w	800aa02 <_dtoa_r+0xbb2>
 8009ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ee0:	b963      	cbnz	r3, 8009efc <_dtoa_r+0xac>
 8009ee2:	4b92      	ldr	r3, [pc, #584]	; (800a12c <_dtoa_r+0x2dc>)
 8009ee4:	e022      	b.n	8009f2c <_dtoa_r+0xdc>
 8009ee6:	4b92      	ldr	r3, [pc, #584]	; (800a130 <_dtoa_r+0x2e0>)
 8009ee8:	9301      	str	r3, [sp, #4]
 8009eea:	3308      	adds	r3, #8
 8009eec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009eee:	6013      	str	r3, [r2, #0]
 8009ef0:	9801      	ldr	r0, [sp, #4]
 8009ef2:	b013      	add	sp, #76	; 0x4c
 8009ef4:	ecbd 8b04 	vpop	{d8-d9}
 8009ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009efc:	4b8b      	ldr	r3, [pc, #556]	; (800a12c <_dtoa_r+0x2dc>)
 8009efe:	9301      	str	r3, [sp, #4]
 8009f00:	3303      	adds	r3, #3
 8009f02:	e7f3      	b.n	8009eec <_dtoa_r+0x9c>
 8009f04:	2200      	movs	r2, #0
 8009f06:	2300      	movs	r3, #0
 8009f08:	4650      	mov	r0, sl
 8009f0a:	4659      	mov	r1, fp
 8009f0c:	f7f6 fdfc 	bl	8000b08 <__aeabi_dcmpeq>
 8009f10:	ec4b ab19 	vmov	d9, sl, fp
 8009f14:	4680      	mov	r8, r0
 8009f16:	b158      	cbz	r0, 8009f30 <_dtoa_r+0xe0>
 8009f18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	6013      	str	r3, [r2, #0]
 8009f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f000 856b 	beq.w	800a9fc <_dtoa_r+0xbac>
 8009f26:	4883      	ldr	r0, [pc, #524]	; (800a134 <_dtoa_r+0x2e4>)
 8009f28:	6018      	str	r0, [r3, #0]
 8009f2a:	1e43      	subs	r3, r0, #1
 8009f2c:	9301      	str	r3, [sp, #4]
 8009f2e:	e7df      	b.n	8009ef0 <_dtoa_r+0xa0>
 8009f30:	ec4b ab10 	vmov	d0, sl, fp
 8009f34:	aa10      	add	r2, sp, #64	; 0x40
 8009f36:	a911      	add	r1, sp, #68	; 0x44
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f001 f8b9 	bl	800b0b0 <__d2b>
 8009f3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009f42:	ee08 0a10 	vmov	s16, r0
 8009f46:	2d00      	cmp	r5, #0
 8009f48:	f000 8084 	beq.w	800a054 <_dtoa_r+0x204>
 8009f4c:	ee19 3a90 	vmov	r3, s19
 8009f50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009f58:	4656      	mov	r6, sl
 8009f5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009f5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009f66:	4b74      	ldr	r3, [pc, #464]	; (800a138 <_dtoa_r+0x2e8>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	4639      	mov	r1, r7
 8009f6e:	f7f6 f9ab 	bl	80002c8 <__aeabi_dsub>
 8009f72:	a365      	add	r3, pc, #404	; (adr r3, 800a108 <_dtoa_r+0x2b8>)
 8009f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f78:	f7f6 fb5e 	bl	8000638 <__aeabi_dmul>
 8009f7c:	a364      	add	r3, pc, #400	; (adr r3, 800a110 <_dtoa_r+0x2c0>)
 8009f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f82:	f7f6 f9a3 	bl	80002cc <__adddf3>
 8009f86:	4606      	mov	r6, r0
 8009f88:	4628      	mov	r0, r5
 8009f8a:	460f      	mov	r7, r1
 8009f8c:	f7f6 faea 	bl	8000564 <__aeabi_i2d>
 8009f90:	a361      	add	r3, pc, #388	; (adr r3, 800a118 <_dtoa_r+0x2c8>)
 8009f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f96:	f7f6 fb4f 	bl	8000638 <__aeabi_dmul>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	4639      	mov	r1, r7
 8009fa2:	f7f6 f993 	bl	80002cc <__adddf3>
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	460f      	mov	r7, r1
 8009faa:	f7f6 fdf5 	bl	8000b98 <__aeabi_d2iz>
 8009fae:	2200      	movs	r2, #0
 8009fb0:	9000      	str	r0, [sp, #0]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	4639      	mov	r1, r7
 8009fb8:	f7f6 fdb0 	bl	8000b1c <__aeabi_dcmplt>
 8009fbc:	b150      	cbz	r0, 8009fd4 <_dtoa_r+0x184>
 8009fbe:	9800      	ldr	r0, [sp, #0]
 8009fc0:	f7f6 fad0 	bl	8000564 <__aeabi_i2d>
 8009fc4:	4632      	mov	r2, r6
 8009fc6:	463b      	mov	r3, r7
 8009fc8:	f7f6 fd9e 	bl	8000b08 <__aeabi_dcmpeq>
 8009fcc:	b910      	cbnz	r0, 8009fd4 <_dtoa_r+0x184>
 8009fce:	9b00      	ldr	r3, [sp, #0]
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	9b00      	ldr	r3, [sp, #0]
 8009fd6:	2b16      	cmp	r3, #22
 8009fd8:	d85a      	bhi.n	800a090 <_dtoa_r+0x240>
 8009fda:	9a00      	ldr	r2, [sp, #0]
 8009fdc:	4b57      	ldr	r3, [pc, #348]	; (800a13c <_dtoa_r+0x2ec>)
 8009fde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	ec51 0b19 	vmov	r0, r1, d9
 8009fea:	f7f6 fd97 	bl	8000b1c <__aeabi_dcmplt>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d050      	beq.n	800a094 <_dtoa_r+0x244>
 8009ff2:	9b00      	ldr	r3, [sp, #0]
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ffe:	1b5d      	subs	r5, r3, r5
 800a000:	1e6b      	subs	r3, r5, #1
 800a002:	9305      	str	r3, [sp, #20]
 800a004:	bf45      	ittet	mi
 800a006:	f1c5 0301 	rsbmi	r3, r5, #1
 800a00a:	9304      	strmi	r3, [sp, #16]
 800a00c:	2300      	movpl	r3, #0
 800a00e:	2300      	movmi	r3, #0
 800a010:	bf4c      	ite	mi
 800a012:	9305      	strmi	r3, [sp, #20]
 800a014:	9304      	strpl	r3, [sp, #16]
 800a016:	9b00      	ldr	r3, [sp, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	db3d      	blt.n	800a098 <_dtoa_r+0x248>
 800a01c:	9b05      	ldr	r3, [sp, #20]
 800a01e:	9a00      	ldr	r2, [sp, #0]
 800a020:	920a      	str	r2, [sp, #40]	; 0x28
 800a022:	4413      	add	r3, r2
 800a024:	9305      	str	r3, [sp, #20]
 800a026:	2300      	movs	r3, #0
 800a028:	9307      	str	r3, [sp, #28]
 800a02a:	9b06      	ldr	r3, [sp, #24]
 800a02c:	2b09      	cmp	r3, #9
 800a02e:	f200 8089 	bhi.w	800a144 <_dtoa_r+0x2f4>
 800a032:	2b05      	cmp	r3, #5
 800a034:	bfc4      	itt	gt
 800a036:	3b04      	subgt	r3, #4
 800a038:	9306      	strgt	r3, [sp, #24]
 800a03a:	9b06      	ldr	r3, [sp, #24]
 800a03c:	f1a3 0302 	sub.w	r3, r3, #2
 800a040:	bfcc      	ite	gt
 800a042:	2500      	movgt	r5, #0
 800a044:	2501      	movle	r5, #1
 800a046:	2b03      	cmp	r3, #3
 800a048:	f200 8087 	bhi.w	800a15a <_dtoa_r+0x30a>
 800a04c:	e8df f003 	tbb	[pc, r3]
 800a050:	59383a2d 	.word	0x59383a2d
 800a054:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a058:	441d      	add	r5, r3
 800a05a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a05e:	2b20      	cmp	r3, #32
 800a060:	bfc1      	itttt	gt
 800a062:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a066:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a06a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a06e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a072:	bfda      	itte	le
 800a074:	f1c3 0320 	rsble	r3, r3, #32
 800a078:	fa06 f003 	lslle.w	r0, r6, r3
 800a07c:	4318      	orrgt	r0, r3
 800a07e:	f7f6 fa61 	bl	8000544 <__aeabi_ui2d>
 800a082:	2301      	movs	r3, #1
 800a084:	4606      	mov	r6, r0
 800a086:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a08a:	3d01      	subs	r5, #1
 800a08c:	930e      	str	r3, [sp, #56]	; 0x38
 800a08e:	e76a      	b.n	8009f66 <_dtoa_r+0x116>
 800a090:	2301      	movs	r3, #1
 800a092:	e7b2      	b.n	8009ffa <_dtoa_r+0x1aa>
 800a094:	900b      	str	r0, [sp, #44]	; 0x2c
 800a096:	e7b1      	b.n	8009ffc <_dtoa_r+0x1ac>
 800a098:	9b04      	ldr	r3, [sp, #16]
 800a09a:	9a00      	ldr	r2, [sp, #0]
 800a09c:	1a9b      	subs	r3, r3, r2
 800a09e:	9304      	str	r3, [sp, #16]
 800a0a0:	4253      	negs	r3, r2
 800a0a2:	9307      	str	r3, [sp, #28]
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a0a8:	e7bf      	b.n	800a02a <_dtoa_r+0x1da>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	9308      	str	r3, [sp, #32]
 800a0ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	dc55      	bgt.n	800a160 <_dtoa_r+0x310>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0be:	e00c      	b.n	800a0da <_dtoa_r+0x28a>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e7f3      	b.n	800a0ac <_dtoa_r+0x25c>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0c8:	9308      	str	r3, [sp, #32]
 800a0ca:	9b00      	ldr	r3, [sp, #0]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	9302      	str	r3, [sp, #8]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	9303      	str	r3, [sp, #12]
 800a0d6:	bfb8      	it	lt
 800a0d8:	2301      	movlt	r3, #1
 800a0da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a0dc:	2200      	movs	r2, #0
 800a0de:	6042      	str	r2, [r0, #4]
 800a0e0:	2204      	movs	r2, #4
 800a0e2:	f102 0614 	add.w	r6, r2, #20
 800a0e6:	429e      	cmp	r6, r3
 800a0e8:	6841      	ldr	r1, [r0, #4]
 800a0ea:	d93d      	bls.n	800a168 <_dtoa_r+0x318>
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f000 fcb7 	bl	800aa60 <_Balloc>
 800a0f2:	9001      	str	r0, [sp, #4]
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	d13b      	bne.n	800a170 <_dtoa_r+0x320>
 800a0f8:	4b11      	ldr	r3, [pc, #68]	; (800a140 <_dtoa_r+0x2f0>)
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a100:	e6c0      	b.n	8009e84 <_dtoa_r+0x34>
 800a102:	2301      	movs	r3, #1
 800a104:	e7df      	b.n	800a0c6 <_dtoa_r+0x276>
 800a106:	bf00      	nop
 800a108:	636f4361 	.word	0x636f4361
 800a10c:	3fd287a7 	.word	0x3fd287a7
 800a110:	8b60c8b3 	.word	0x8b60c8b3
 800a114:	3fc68a28 	.word	0x3fc68a28
 800a118:	509f79fb 	.word	0x509f79fb
 800a11c:	3fd34413 	.word	0x3fd34413
 800a120:	0800d7d5 	.word	0x0800d7d5
 800a124:	0800d7ec 	.word	0x0800d7ec
 800a128:	7ff00000 	.word	0x7ff00000
 800a12c:	0800d7d1 	.word	0x0800d7d1
 800a130:	0800d7c8 	.word	0x0800d7c8
 800a134:	0800d7a5 	.word	0x0800d7a5
 800a138:	3ff80000 	.word	0x3ff80000
 800a13c:	0800d8e0 	.word	0x0800d8e0
 800a140:	0800d847 	.word	0x0800d847
 800a144:	2501      	movs	r5, #1
 800a146:	2300      	movs	r3, #0
 800a148:	9306      	str	r3, [sp, #24]
 800a14a:	9508      	str	r5, [sp, #32]
 800a14c:	f04f 33ff 	mov.w	r3, #4294967295
 800a150:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a154:	2200      	movs	r2, #0
 800a156:	2312      	movs	r3, #18
 800a158:	e7b0      	b.n	800a0bc <_dtoa_r+0x26c>
 800a15a:	2301      	movs	r3, #1
 800a15c:	9308      	str	r3, [sp, #32]
 800a15e:	e7f5      	b.n	800a14c <_dtoa_r+0x2fc>
 800a160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a162:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a166:	e7b8      	b.n	800a0da <_dtoa_r+0x28a>
 800a168:	3101      	adds	r1, #1
 800a16a:	6041      	str	r1, [r0, #4]
 800a16c:	0052      	lsls	r2, r2, #1
 800a16e:	e7b8      	b.n	800a0e2 <_dtoa_r+0x292>
 800a170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a172:	9a01      	ldr	r2, [sp, #4]
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	9b03      	ldr	r3, [sp, #12]
 800a178:	2b0e      	cmp	r3, #14
 800a17a:	f200 809d 	bhi.w	800a2b8 <_dtoa_r+0x468>
 800a17e:	2d00      	cmp	r5, #0
 800a180:	f000 809a 	beq.w	800a2b8 <_dtoa_r+0x468>
 800a184:	9b00      	ldr	r3, [sp, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	dd32      	ble.n	800a1f0 <_dtoa_r+0x3a0>
 800a18a:	4ab7      	ldr	r2, [pc, #732]	; (800a468 <_dtoa_r+0x618>)
 800a18c:	f003 030f 	and.w	r3, r3, #15
 800a190:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a194:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a198:	9b00      	ldr	r3, [sp, #0]
 800a19a:	05d8      	lsls	r0, r3, #23
 800a19c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a1a0:	d516      	bpl.n	800a1d0 <_dtoa_r+0x380>
 800a1a2:	4bb2      	ldr	r3, [pc, #712]	; (800a46c <_dtoa_r+0x61c>)
 800a1a4:	ec51 0b19 	vmov	r0, r1, d9
 800a1a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1ac:	f7f6 fb6e 	bl	800088c <__aeabi_ddiv>
 800a1b0:	f007 070f 	and.w	r7, r7, #15
 800a1b4:	4682      	mov	sl, r0
 800a1b6:	468b      	mov	fp, r1
 800a1b8:	2503      	movs	r5, #3
 800a1ba:	4eac      	ldr	r6, [pc, #688]	; (800a46c <_dtoa_r+0x61c>)
 800a1bc:	b957      	cbnz	r7, 800a1d4 <_dtoa_r+0x384>
 800a1be:	4642      	mov	r2, r8
 800a1c0:	464b      	mov	r3, r9
 800a1c2:	4650      	mov	r0, sl
 800a1c4:	4659      	mov	r1, fp
 800a1c6:	f7f6 fb61 	bl	800088c <__aeabi_ddiv>
 800a1ca:	4682      	mov	sl, r0
 800a1cc:	468b      	mov	fp, r1
 800a1ce:	e028      	b.n	800a222 <_dtoa_r+0x3d2>
 800a1d0:	2502      	movs	r5, #2
 800a1d2:	e7f2      	b.n	800a1ba <_dtoa_r+0x36a>
 800a1d4:	07f9      	lsls	r1, r7, #31
 800a1d6:	d508      	bpl.n	800a1ea <_dtoa_r+0x39a>
 800a1d8:	4640      	mov	r0, r8
 800a1da:	4649      	mov	r1, r9
 800a1dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a1e0:	f7f6 fa2a 	bl	8000638 <__aeabi_dmul>
 800a1e4:	3501      	adds	r5, #1
 800a1e6:	4680      	mov	r8, r0
 800a1e8:	4689      	mov	r9, r1
 800a1ea:	107f      	asrs	r7, r7, #1
 800a1ec:	3608      	adds	r6, #8
 800a1ee:	e7e5      	b.n	800a1bc <_dtoa_r+0x36c>
 800a1f0:	f000 809b 	beq.w	800a32a <_dtoa_r+0x4da>
 800a1f4:	9b00      	ldr	r3, [sp, #0]
 800a1f6:	4f9d      	ldr	r7, [pc, #628]	; (800a46c <_dtoa_r+0x61c>)
 800a1f8:	425e      	negs	r6, r3
 800a1fa:	4b9b      	ldr	r3, [pc, #620]	; (800a468 <_dtoa_r+0x618>)
 800a1fc:	f006 020f 	and.w	r2, r6, #15
 800a200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	ec51 0b19 	vmov	r0, r1, d9
 800a20c:	f7f6 fa14 	bl	8000638 <__aeabi_dmul>
 800a210:	1136      	asrs	r6, r6, #4
 800a212:	4682      	mov	sl, r0
 800a214:	468b      	mov	fp, r1
 800a216:	2300      	movs	r3, #0
 800a218:	2502      	movs	r5, #2
 800a21a:	2e00      	cmp	r6, #0
 800a21c:	d17a      	bne.n	800a314 <_dtoa_r+0x4c4>
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1d3      	bne.n	800a1ca <_dtoa_r+0x37a>
 800a222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a224:	2b00      	cmp	r3, #0
 800a226:	f000 8082 	beq.w	800a32e <_dtoa_r+0x4de>
 800a22a:	4b91      	ldr	r3, [pc, #580]	; (800a470 <_dtoa_r+0x620>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	4650      	mov	r0, sl
 800a230:	4659      	mov	r1, fp
 800a232:	f7f6 fc73 	bl	8000b1c <__aeabi_dcmplt>
 800a236:	2800      	cmp	r0, #0
 800a238:	d079      	beq.n	800a32e <_dtoa_r+0x4de>
 800a23a:	9b03      	ldr	r3, [sp, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d076      	beq.n	800a32e <_dtoa_r+0x4de>
 800a240:	9b02      	ldr	r3, [sp, #8]
 800a242:	2b00      	cmp	r3, #0
 800a244:	dd36      	ble.n	800a2b4 <_dtoa_r+0x464>
 800a246:	9b00      	ldr	r3, [sp, #0]
 800a248:	4650      	mov	r0, sl
 800a24a:	4659      	mov	r1, fp
 800a24c:	1e5f      	subs	r7, r3, #1
 800a24e:	2200      	movs	r2, #0
 800a250:	4b88      	ldr	r3, [pc, #544]	; (800a474 <_dtoa_r+0x624>)
 800a252:	f7f6 f9f1 	bl	8000638 <__aeabi_dmul>
 800a256:	9e02      	ldr	r6, [sp, #8]
 800a258:	4682      	mov	sl, r0
 800a25a:	468b      	mov	fp, r1
 800a25c:	3501      	adds	r5, #1
 800a25e:	4628      	mov	r0, r5
 800a260:	f7f6 f980 	bl	8000564 <__aeabi_i2d>
 800a264:	4652      	mov	r2, sl
 800a266:	465b      	mov	r3, fp
 800a268:	f7f6 f9e6 	bl	8000638 <__aeabi_dmul>
 800a26c:	4b82      	ldr	r3, [pc, #520]	; (800a478 <_dtoa_r+0x628>)
 800a26e:	2200      	movs	r2, #0
 800a270:	f7f6 f82c 	bl	80002cc <__adddf3>
 800a274:	46d0      	mov	r8, sl
 800a276:	46d9      	mov	r9, fp
 800a278:	4682      	mov	sl, r0
 800a27a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a27e:	2e00      	cmp	r6, #0
 800a280:	d158      	bne.n	800a334 <_dtoa_r+0x4e4>
 800a282:	4b7e      	ldr	r3, [pc, #504]	; (800a47c <_dtoa_r+0x62c>)
 800a284:	2200      	movs	r2, #0
 800a286:	4640      	mov	r0, r8
 800a288:	4649      	mov	r1, r9
 800a28a:	f7f6 f81d 	bl	80002c8 <__aeabi_dsub>
 800a28e:	4652      	mov	r2, sl
 800a290:	465b      	mov	r3, fp
 800a292:	4680      	mov	r8, r0
 800a294:	4689      	mov	r9, r1
 800a296:	f7f6 fc5f 	bl	8000b58 <__aeabi_dcmpgt>
 800a29a:	2800      	cmp	r0, #0
 800a29c:	f040 8295 	bne.w	800a7ca <_dtoa_r+0x97a>
 800a2a0:	4652      	mov	r2, sl
 800a2a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	4649      	mov	r1, r9
 800a2aa:	f7f6 fc37 	bl	8000b1c <__aeabi_dcmplt>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	f040 8289 	bne.w	800a7c6 <_dtoa_r+0x976>
 800a2b4:	ec5b ab19 	vmov	sl, fp, d9
 800a2b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f2c0 8148 	blt.w	800a550 <_dtoa_r+0x700>
 800a2c0:	9a00      	ldr	r2, [sp, #0]
 800a2c2:	2a0e      	cmp	r2, #14
 800a2c4:	f300 8144 	bgt.w	800a550 <_dtoa_r+0x700>
 800a2c8:	4b67      	ldr	r3, [pc, #412]	; (800a468 <_dtoa_r+0x618>)
 800a2ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f280 80d5 	bge.w	800a484 <_dtoa_r+0x634>
 800a2da:	9b03      	ldr	r3, [sp, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f300 80d1 	bgt.w	800a484 <_dtoa_r+0x634>
 800a2e2:	f040 826f 	bne.w	800a7c4 <_dtoa_r+0x974>
 800a2e6:	4b65      	ldr	r3, [pc, #404]	; (800a47c <_dtoa_r+0x62c>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	4640      	mov	r0, r8
 800a2ec:	4649      	mov	r1, r9
 800a2ee:	f7f6 f9a3 	bl	8000638 <__aeabi_dmul>
 800a2f2:	4652      	mov	r2, sl
 800a2f4:	465b      	mov	r3, fp
 800a2f6:	f7f6 fc25 	bl	8000b44 <__aeabi_dcmpge>
 800a2fa:	9e03      	ldr	r6, [sp, #12]
 800a2fc:	4637      	mov	r7, r6
 800a2fe:	2800      	cmp	r0, #0
 800a300:	f040 8245 	bne.w	800a78e <_dtoa_r+0x93e>
 800a304:	9d01      	ldr	r5, [sp, #4]
 800a306:	2331      	movs	r3, #49	; 0x31
 800a308:	f805 3b01 	strb.w	r3, [r5], #1
 800a30c:	9b00      	ldr	r3, [sp, #0]
 800a30e:	3301      	adds	r3, #1
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	e240      	b.n	800a796 <_dtoa_r+0x946>
 800a314:	07f2      	lsls	r2, r6, #31
 800a316:	d505      	bpl.n	800a324 <_dtoa_r+0x4d4>
 800a318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a31c:	f7f6 f98c 	bl	8000638 <__aeabi_dmul>
 800a320:	3501      	adds	r5, #1
 800a322:	2301      	movs	r3, #1
 800a324:	1076      	asrs	r6, r6, #1
 800a326:	3708      	adds	r7, #8
 800a328:	e777      	b.n	800a21a <_dtoa_r+0x3ca>
 800a32a:	2502      	movs	r5, #2
 800a32c:	e779      	b.n	800a222 <_dtoa_r+0x3d2>
 800a32e:	9f00      	ldr	r7, [sp, #0]
 800a330:	9e03      	ldr	r6, [sp, #12]
 800a332:	e794      	b.n	800a25e <_dtoa_r+0x40e>
 800a334:	9901      	ldr	r1, [sp, #4]
 800a336:	4b4c      	ldr	r3, [pc, #304]	; (800a468 <_dtoa_r+0x618>)
 800a338:	4431      	add	r1, r6
 800a33a:	910d      	str	r1, [sp, #52]	; 0x34
 800a33c:	9908      	ldr	r1, [sp, #32]
 800a33e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a342:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a346:	2900      	cmp	r1, #0
 800a348:	d043      	beq.n	800a3d2 <_dtoa_r+0x582>
 800a34a:	494d      	ldr	r1, [pc, #308]	; (800a480 <_dtoa_r+0x630>)
 800a34c:	2000      	movs	r0, #0
 800a34e:	f7f6 fa9d 	bl	800088c <__aeabi_ddiv>
 800a352:	4652      	mov	r2, sl
 800a354:	465b      	mov	r3, fp
 800a356:	f7f5 ffb7 	bl	80002c8 <__aeabi_dsub>
 800a35a:	9d01      	ldr	r5, [sp, #4]
 800a35c:	4682      	mov	sl, r0
 800a35e:	468b      	mov	fp, r1
 800a360:	4649      	mov	r1, r9
 800a362:	4640      	mov	r0, r8
 800a364:	f7f6 fc18 	bl	8000b98 <__aeabi_d2iz>
 800a368:	4606      	mov	r6, r0
 800a36a:	f7f6 f8fb 	bl	8000564 <__aeabi_i2d>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	4640      	mov	r0, r8
 800a374:	4649      	mov	r1, r9
 800a376:	f7f5 ffa7 	bl	80002c8 <__aeabi_dsub>
 800a37a:	3630      	adds	r6, #48	; 0x30
 800a37c:	f805 6b01 	strb.w	r6, [r5], #1
 800a380:	4652      	mov	r2, sl
 800a382:	465b      	mov	r3, fp
 800a384:	4680      	mov	r8, r0
 800a386:	4689      	mov	r9, r1
 800a388:	f7f6 fbc8 	bl	8000b1c <__aeabi_dcmplt>
 800a38c:	2800      	cmp	r0, #0
 800a38e:	d163      	bne.n	800a458 <_dtoa_r+0x608>
 800a390:	4642      	mov	r2, r8
 800a392:	464b      	mov	r3, r9
 800a394:	4936      	ldr	r1, [pc, #216]	; (800a470 <_dtoa_r+0x620>)
 800a396:	2000      	movs	r0, #0
 800a398:	f7f5 ff96 	bl	80002c8 <__aeabi_dsub>
 800a39c:	4652      	mov	r2, sl
 800a39e:	465b      	mov	r3, fp
 800a3a0:	f7f6 fbbc 	bl	8000b1c <__aeabi_dcmplt>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	f040 80b5 	bne.w	800a514 <_dtoa_r+0x6c4>
 800a3aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3ac:	429d      	cmp	r5, r3
 800a3ae:	d081      	beq.n	800a2b4 <_dtoa_r+0x464>
 800a3b0:	4b30      	ldr	r3, [pc, #192]	; (800a474 <_dtoa_r+0x624>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	4650      	mov	r0, sl
 800a3b6:	4659      	mov	r1, fp
 800a3b8:	f7f6 f93e 	bl	8000638 <__aeabi_dmul>
 800a3bc:	4b2d      	ldr	r3, [pc, #180]	; (800a474 <_dtoa_r+0x624>)
 800a3be:	4682      	mov	sl, r0
 800a3c0:	468b      	mov	fp, r1
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f7f6 f936 	bl	8000638 <__aeabi_dmul>
 800a3cc:	4680      	mov	r8, r0
 800a3ce:	4689      	mov	r9, r1
 800a3d0:	e7c6      	b.n	800a360 <_dtoa_r+0x510>
 800a3d2:	4650      	mov	r0, sl
 800a3d4:	4659      	mov	r1, fp
 800a3d6:	f7f6 f92f 	bl	8000638 <__aeabi_dmul>
 800a3da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3dc:	9d01      	ldr	r5, [sp, #4]
 800a3de:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3e0:	4682      	mov	sl, r0
 800a3e2:	468b      	mov	fp, r1
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	f7f6 fbd6 	bl	8000b98 <__aeabi_d2iz>
 800a3ec:	4606      	mov	r6, r0
 800a3ee:	f7f6 f8b9 	bl	8000564 <__aeabi_i2d>
 800a3f2:	3630      	adds	r6, #48	; 0x30
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4640      	mov	r0, r8
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	f7f5 ff64 	bl	80002c8 <__aeabi_dsub>
 800a400:	f805 6b01 	strb.w	r6, [r5], #1
 800a404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a406:	429d      	cmp	r5, r3
 800a408:	4680      	mov	r8, r0
 800a40a:	4689      	mov	r9, r1
 800a40c:	f04f 0200 	mov.w	r2, #0
 800a410:	d124      	bne.n	800a45c <_dtoa_r+0x60c>
 800a412:	4b1b      	ldr	r3, [pc, #108]	; (800a480 <_dtoa_r+0x630>)
 800a414:	4650      	mov	r0, sl
 800a416:	4659      	mov	r1, fp
 800a418:	f7f5 ff58 	bl	80002cc <__adddf3>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4640      	mov	r0, r8
 800a422:	4649      	mov	r1, r9
 800a424:	f7f6 fb98 	bl	8000b58 <__aeabi_dcmpgt>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d173      	bne.n	800a514 <_dtoa_r+0x6c4>
 800a42c:	4652      	mov	r2, sl
 800a42e:	465b      	mov	r3, fp
 800a430:	4913      	ldr	r1, [pc, #76]	; (800a480 <_dtoa_r+0x630>)
 800a432:	2000      	movs	r0, #0
 800a434:	f7f5 ff48 	bl	80002c8 <__aeabi_dsub>
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	4640      	mov	r0, r8
 800a43e:	4649      	mov	r1, r9
 800a440:	f7f6 fb6c 	bl	8000b1c <__aeabi_dcmplt>
 800a444:	2800      	cmp	r0, #0
 800a446:	f43f af35 	beq.w	800a2b4 <_dtoa_r+0x464>
 800a44a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a44c:	1e6b      	subs	r3, r5, #1
 800a44e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a450:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a454:	2b30      	cmp	r3, #48	; 0x30
 800a456:	d0f8      	beq.n	800a44a <_dtoa_r+0x5fa>
 800a458:	9700      	str	r7, [sp, #0]
 800a45a:	e049      	b.n	800a4f0 <_dtoa_r+0x6a0>
 800a45c:	4b05      	ldr	r3, [pc, #20]	; (800a474 <_dtoa_r+0x624>)
 800a45e:	f7f6 f8eb 	bl	8000638 <__aeabi_dmul>
 800a462:	4680      	mov	r8, r0
 800a464:	4689      	mov	r9, r1
 800a466:	e7bd      	b.n	800a3e4 <_dtoa_r+0x594>
 800a468:	0800d8e0 	.word	0x0800d8e0
 800a46c:	0800d8b8 	.word	0x0800d8b8
 800a470:	3ff00000 	.word	0x3ff00000
 800a474:	40240000 	.word	0x40240000
 800a478:	401c0000 	.word	0x401c0000
 800a47c:	40140000 	.word	0x40140000
 800a480:	3fe00000 	.word	0x3fe00000
 800a484:	9d01      	ldr	r5, [sp, #4]
 800a486:	4656      	mov	r6, sl
 800a488:	465f      	mov	r7, fp
 800a48a:	4642      	mov	r2, r8
 800a48c:	464b      	mov	r3, r9
 800a48e:	4630      	mov	r0, r6
 800a490:	4639      	mov	r1, r7
 800a492:	f7f6 f9fb 	bl	800088c <__aeabi_ddiv>
 800a496:	f7f6 fb7f 	bl	8000b98 <__aeabi_d2iz>
 800a49a:	4682      	mov	sl, r0
 800a49c:	f7f6 f862 	bl	8000564 <__aeabi_i2d>
 800a4a0:	4642      	mov	r2, r8
 800a4a2:	464b      	mov	r3, r9
 800a4a4:	f7f6 f8c8 	bl	8000638 <__aeabi_dmul>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a4b4:	f7f5 ff08 	bl	80002c8 <__aeabi_dsub>
 800a4b8:	f805 6b01 	strb.w	r6, [r5], #1
 800a4bc:	9e01      	ldr	r6, [sp, #4]
 800a4be:	9f03      	ldr	r7, [sp, #12]
 800a4c0:	1bae      	subs	r6, r5, r6
 800a4c2:	42b7      	cmp	r7, r6
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	d135      	bne.n	800a536 <_dtoa_r+0x6e6>
 800a4ca:	f7f5 feff 	bl	80002cc <__adddf3>
 800a4ce:	4642      	mov	r2, r8
 800a4d0:	464b      	mov	r3, r9
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	460f      	mov	r7, r1
 800a4d6:	f7f6 fb3f 	bl	8000b58 <__aeabi_dcmpgt>
 800a4da:	b9d0      	cbnz	r0, 800a512 <_dtoa_r+0x6c2>
 800a4dc:	4642      	mov	r2, r8
 800a4de:	464b      	mov	r3, r9
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	4639      	mov	r1, r7
 800a4e4:	f7f6 fb10 	bl	8000b08 <__aeabi_dcmpeq>
 800a4e8:	b110      	cbz	r0, 800a4f0 <_dtoa_r+0x6a0>
 800a4ea:	f01a 0f01 	tst.w	sl, #1
 800a4ee:	d110      	bne.n	800a512 <_dtoa_r+0x6c2>
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	ee18 1a10 	vmov	r1, s16
 800a4f6:	f000 faf3 	bl	800aae0 <_Bfree>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	9800      	ldr	r0, [sp, #0]
 800a4fe:	702b      	strb	r3, [r5, #0]
 800a500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a502:	3001      	adds	r0, #1
 800a504:	6018      	str	r0, [r3, #0]
 800a506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f43f acf1 	beq.w	8009ef0 <_dtoa_r+0xa0>
 800a50e:	601d      	str	r5, [r3, #0]
 800a510:	e4ee      	b.n	8009ef0 <_dtoa_r+0xa0>
 800a512:	9f00      	ldr	r7, [sp, #0]
 800a514:	462b      	mov	r3, r5
 800a516:	461d      	mov	r5, r3
 800a518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a51c:	2a39      	cmp	r2, #57	; 0x39
 800a51e:	d106      	bne.n	800a52e <_dtoa_r+0x6de>
 800a520:	9a01      	ldr	r2, [sp, #4]
 800a522:	429a      	cmp	r2, r3
 800a524:	d1f7      	bne.n	800a516 <_dtoa_r+0x6c6>
 800a526:	9901      	ldr	r1, [sp, #4]
 800a528:	2230      	movs	r2, #48	; 0x30
 800a52a:	3701      	adds	r7, #1
 800a52c:	700a      	strb	r2, [r1, #0]
 800a52e:	781a      	ldrb	r2, [r3, #0]
 800a530:	3201      	adds	r2, #1
 800a532:	701a      	strb	r2, [r3, #0]
 800a534:	e790      	b.n	800a458 <_dtoa_r+0x608>
 800a536:	4ba6      	ldr	r3, [pc, #664]	; (800a7d0 <_dtoa_r+0x980>)
 800a538:	2200      	movs	r2, #0
 800a53a:	f7f6 f87d 	bl	8000638 <__aeabi_dmul>
 800a53e:	2200      	movs	r2, #0
 800a540:	2300      	movs	r3, #0
 800a542:	4606      	mov	r6, r0
 800a544:	460f      	mov	r7, r1
 800a546:	f7f6 fadf 	bl	8000b08 <__aeabi_dcmpeq>
 800a54a:	2800      	cmp	r0, #0
 800a54c:	d09d      	beq.n	800a48a <_dtoa_r+0x63a>
 800a54e:	e7cf      	b.n	800a4f0 <_dtoa_r+0x6a0>
 800a550:	9a08      	ldr	r2, [sp, #32]
 800a552:	2a00      	cmp	r2, #0
 800a554:	f000 80d7 	beq.w	800a706 <_dtoa_r+0x8b6>
 800a558:	9a06      	ldr	r2, [sp, #24]
 800a55a:	2a01      	cmp	r2, #1
 800a55c:	f300 80ba 	bgt.w	800a6d4 <_dtoa_r+0x884>
 800a560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a562:	2a00      	cmp	r2, #0
 800a564:	f000 80b2 	beq.w	800a6cc <_dtoa_r+0x87c>
 800a568:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a56c:	9e07      	ldr	r6, [sp, #28]
 800a56e:	9d04      	ldr	r5, [sp, #16]
 800a570:	9a04      	ldr	r2, [sp, #16]
 800a572:	441a      	add	r2, r3
 800a574:	9204      	str	r2, [sp, #16]
 800a576:	9a05      	ldr	r2, [sp, #20]
 800a578:	2101      	movs	r1, #1
 800a57a:	441a      	add	r2, r3
 800a57c:	4620      	mov	r0, r4
 800a57e:	9205      	str	r2, [sp, #20]
 800a580:	f000 fb66 	bl	800ac50 <__i2b>
 800a584:	4607      	mov	r7, r0
 800a586:	2d00      	cmp	r5, #0
 800a588:	dd0c      	ble.n	800a5a4 <_dtoa_r+0x754>
 800a58a:	9b05      	ldr	r3, [sp, #20]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	dd09      	ble.n	800a5a4 <_dtoa_r+0x754>
 800a590:	42ab      	cmp	r3, r5
 800a592:	9a04      	ldr	r2, [sp, #16]
 800a594:	bfa8      	it	ge
 800a596:	462b      	movge	r3, r5
 800a598:	1ad2      	subs	r2, r2, r3
 800a59a:	9204      	str	r2, [sp, #16]
 800a59c:	9a05      	ldr	r2, [sp, #20]
 800a59e:	1aed      	subs	r5, r5, r3
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	9305      	str	r3, [sp, #20]
 800a5a4:	9b07      	ldr	r3, [sp, #28]
 800a5a6:	b31b      	cbz	r3, 800a5f0 <_dtoa_r+0x7a0>
 800a5a8:	9b08      	ldr	r3, [sp, #32]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f000 80af 	beq.w	800a70e <_dtoa_r+0x8be>
 800a5b0:	2e00      	cmp	r6, #0
 800a5b2:	dd13      	ble.n	800a5dc <_dtoa_r+0x78c>
 800a5b4:	4639      	mov	r1, r7
 800a5b6:	4632      	mov	r2, r6
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f000 fc09 	bl	800add0 <__pow5mult>
 800a5be:	ee18 2a10 	vmov	r2, s16
 800a5c2:	4601      	mov	r1, r0
 800a5c4:	4607      	mov	r7, r0
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f000 fb58 	bl	800ac7c <__multiply>
 800a5cc:	ee18 1a10 	vmov	r1, s16
 800a5d0:	4680      	mov	r8, r0
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f000 fa84 	bl	800aae0 <_Bfree>
 800a5d8:	ee08 8a10 	vmov	s16, r8
 800a5dc:	9b07      	ldr	r3, [sp, #28]
 800a5de:	1b9a      	subs	r2, r3, r6
 800a5e0:	d006      	beq.n	800a5f0 <_dtoa_r+0x7a0>
 800a5e2:	ee18 1a10 	vmov	r1, s16
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f000 fbf2 	bl	800add0 <__pow5mult>
 800a5ec:	ee08 0a10 	vmov	s16, r0
 800a5f0:	2101      	movs	r1, #1
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f000 fb2c 	bl	800ac50 <__i2b>
 800a5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	f340 8088 	ble.w	800a712 <_dtoa_r+0x8c2>
 800a602:	461a      	mov	r2, r3
 800a604:	4601      	mov	r1, r0
 800a606:	4620      	mov	r0, r4
 800a608:	f000 fbe2 	bl	800add0 <__pow5mult>
 800a60c:	9b06      	ldr	r3, [sp, #24]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	4606      	mov	r6, r0
 800a612:	f340 8081 	ble.w	800a718 <_dtoa_r+0x8c8>
 800a616:	f04f 0800 	mov.w	r8, #0
 800a61a:	6933      	ldr	r3, [r6, #16]
 800a61c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a620:	6918      	ldr	r0, [r3, #16]
 800a622:	f000 fac5 	bl	800abb0 <__hi0bits>
 800a626:	f1c0 0020 	rsb	r0, r0, #32
 800a62a:	9b05      	ldr	r3, [sp, #20]
 800a62c:	4418      	add	r0, r3
 800a62e:	f010 001f 	ands.w	r0, r0, #31
 800a632:	f000 8092 	beq.w	800a75a <_dtoa_r+0x90a>
 800a636:	f1c0 0320 	rsb	r3, r0, #32
 800a63a:	2b04      	cmp	r3, #4
 800a63c:	f340 808a 	ble.w	800a754 <_dtoa_r+0x904>
 800a640:	f1c0 001c 	rsb	r0, r0, #28
 800a644:	9b04      	ldr	r3, [sp, #16]
 800a646:	4403      	add	r3, r0
 800a648:	9304      	str	r3, [sp, #16]
 800a64a:	9b05      	ldr	r3, [sp, #20]
 800a64c:	4403      	add	r3, r0
 800a64e:	4405      	add	r5, r0
 800a650:	9305      	str	r3, [sp, #20]
 800a652:	9b04      	ldr	r3, [sp, #16]
 800a654:	2b00      	cmp	r3, #0
 800a656:	dd07      	ble.n	800a668 <_dtoa_r+0x818>
 800a658:	ee18 1a10 	vmov	r1, s16
 800a65c:	461a      	mov	r2, r3
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 fc10 	bl	800ae84 <__lshift>
 800a664:	ee08 0a10 	vmov	s16, r0
 800a668:	9b05      	ldr	r3, [sp, #20]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	dd05      	ble.n	800a67a <_dtoa_r+0x82a>
 800a66e:	4631      	mov	r1, r6
 800a670:	461a      	mov	r2, r3
 800a672:	4620      	mov	r0, r4
 800a674:	f000 fc06 	bl	800ae84 <__lshift>
 800a678:	4606      	mov	r6, r0
 800a67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d06e      	beq.n	800a75e <_dtoa_r+0x90e>
 800a680:	ee18 0a10 	vmov	r0, s16
 800a684:	4631      	mov	r1, r6
 800a686:	f000 fc6d 	bl	800af64 <__mcmp>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	da67      	bge.n	800a75e <_dtoa_r+0x90e>
 800a68e:	9b00      	ldr	r3, [sp, #0]
 800a690:	3b01      	subs	r3, #1
 800a692:	ee18 1a10 	vmov	r1, s16
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	220a      	movs	r2, #10
 800a69a:	2300      	movs	r3, #0
 800a69c:	4620      	mov	r0, r4
 800a69e:	f000 fa41 	bl	800ab24 <__multadd>
 800a6a2:	9b08      	ldr	r3, [sp, #32]
 800a6a4:	ee08 0a10 	vmov	s16, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f000 81b1 	beq.w	800aa10 <_dtoa_r+0xbc0>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	220a      	movs	r2, #10
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f000 fa35 	bl	800ab24 <__multadd>
 800a6ba:	9b02      	ldr	r3, [sp, #8]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	4607      	mov	r7, r0
 800a6c0:	f300 808e 	bgt.w	800a7e0 <_dtoa_r+0x990>
 800a6c4:	9b06      	ldr	r3, [sp, #24]
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	dc51      	bgt.n	800a76e <_dtoa_r+0x91e>
 800a6ca:	e089      	b.n	800a7e0 <_dtoa_r+0x990>
 800a6cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a6d2:	e74b      	b.n	800a56c <_dtoa_r+0x71c>
 800a6d4:	9b03      	ldr	r3, [sp, #12]
 800a6d6:	1e5e      	subs	r6, r3, #1
 800a6d8:	9b07      	ldr	r3, [sp, #28]
 800a6da:	42b3      	cmp	r3, r6
 800a6dc:	bfbf      	itttt	lt
 800a6de:	9b07      	ldrlt	r3, [sp, #28]
 800a6e0:	9607      	strlt	r6, [sp, #28]
 800a6e2:	1af2      	sublt	r2, r6, r3
 800a6e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a6e6:	bfb6      	itet	lt
 800a6e8:	189b      	addlt	r3, r3, r2
 800a6ea:	1b9e      	subge	r6, r3, r6
 800a6ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a6ee:	9b03      	ldr	r3, [sp, #12]
 800a6f0:	bfb8      	it	lt
 800a6f2:	2600      	movlt	r6, #0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	bfb7      	itett	lt
 800a6f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a6fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a700:	1a9d      	sublt	r5, r3, r2
 800a702:	2300      	movlt	r3, #0
 800a704:	e734      	b.n	800a570 <_dtoa_r+0x720>
 800a706:	9e07      	ldr	r6, [sp, #28]
 800a708:	9d04      	ldr	r5, [sp, #16]
 800a70a:	9f08      	ldr	r7, [sp, #32]
 800a70c:	e73b      	b.n	800a586 <_dtoa_r+0x736>
 800a70e:	9a07      	ldr	r2, [sp, #28]
 800a710:	e767      	b.n	800a5e2 <_dtoa_r+0x792>
 800a712:	9b06      	ldr	r3, [sp, #24]
 800a714:	2b01      	cmp	r3, #1
 800a716:	dc18      	bgt.n	800a74a <_dtoa_r+0x8fa>
 800a718:	f1ba 0f00 	cmp.w	sl, #0
 800a71c:	d115      	bne.n	800a74a <_dtoa_r+0x8fa>
 800a71e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a722:	b993      	cbnz	r3, 800a74a <_dtoa_r+0x8fa>
 800a724:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a728:	0d1b      	lsrs	r3, r3, #20
 800a72a:	051b      	lsls	r3, r3, #20
 800a72c:	b183      	cbz	r3, 800a750 <_dtoa_r+0x900>
 800a72e:	9b04      	ldr	r3, [sp, #16]
 800a730:	3301      	adds	r3, #1
 800a732:	9304      	str	r3, [sp, #16]
 800a734:	9b05      	ldr	r3, [sp, #20]
 800a736:	3301      	adds	r3, #1
 800a738:	9305      	str	r3, [sp, #20]
 800a73a:	f04f 0801 	mov.w	r8, #1
 800a73e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a740:	2b00      	cmp	r3, #0
 800a742:	f47f af6a 	bne.w	800a61a <_dtoa_r+0x7ca>
 800a746:	2001      	movs	r0, #1
 800a748:	e76f      	b.n	800a62a <_dtoa_r+0x7da>
 800a74a:	f04f 0800 	mov.w	r8, #0
 800a74e:	e7f6      	b.n	800a73e <_dtoa_r+0x8ee>
 800a750:	4698      	mov	r8, r3
 800a752:	e7f4      	b.n	800a73e <_dtoa_r+0x8ee>
 800a754:	f43f af7d 	beq.w	800a652 <_dtoa_r+0x802>
 800a758:	4618      	mov	r0, r3
 800a75a:	301c      	adds	r0, #28
 800a75c:	e772      	b.n	800a644 <_dtoa_r+0x7f4>
 800a75e:	9b03      	ldr	r3, [sp, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	dc37      	bgt.n	800a7d4 <_dtoa_r+0x984>
 800a764:	9b06      	ldr	r3, [sp, #24]
 800a766:	2b02      	cmp	r3, #2
 800a768:	dd34      	ble.n	800a7d4 <_dtoa_r+0x984>
 800a76a:	9b03      	ldr	r3, [sp, #12]
 800a76c:	9302      	str	r3, [sp, #8]
 800a76e:	9b02      	ldr	r3, [sp, #8]
 800a770:	b96b      	cbnz	r3, 800a78e <_dtoa_r+0x93e>
 800a772:	4631      	mov	r1, r6
 800a774:	2205      	movs	r2, #5
 800a776:	4620      	mov	r0, r4
 800a778:	f000 f9d4 	bl	800ab24 <__multadd>
 800a77c:	4601      	mov	r1, r0
 800a77e:	4606      	mov	r6, r0
 800a780:	ee18 0a10 	vmov	r0, s16
 800a784:	f000 fbee 	bl	800af64 <__mcmp>
 800a788:	2800      	cmp	r0, #0
 800a78a:	f73f adbb 	bgt.w	800a304 <_dtoa_r+0x4b4>
 800a78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a790:	9d01      	ldr	r5, [sp, #4]
 800a792:	43db      	mvns	r3, r3
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	f04f 0800 	mov.w	r8, #0
 800a79a:	4631      	mov	r1, r6
 800a79c:	4620      	mov	r0, r4
 800a79e:	f000 f99f 	bl	800aae0 <_Bfree>
 800a7a2:	2f00      	cmp	r7, #0
 800a7a4:	f43f aea4 	beq.w	800a4f0 <_dtoa_r+0x6a0>
 800a7a8:	f1b8 0f00 	cmp.w	r8, #0
 800a7ac:	d005      	beq.n	800a7ba <_dtoa_r+0x96a>
 800a7ae:	45b8      	cmp	r8, r7
 800a7b0:	d003      	beq.n	800a7ba <_dtoa_r+0x96a>
 800a7b2:	4641      	mov	r1, r8
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f000 f993 	bl	800aae0 <_Bfree>
 800a7ba:	4639      	mov	r1, r7
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f000 f98f 	bl	800aae0 <_Bfree>
 800a7c2:	e695      	b.n	800a4f0 <_dtoa_r+0x6a0>
 800a7c4:	2600      	movs	r6, #0
 800a7c6:	4637      	mov	r7, r6
 800a7c8:	e7e1      	b.n	800a78e <_dtoa_r+0x93e>
 800a7ca:	9700      	str	r7, [sp, #0]
 800a7cc:	4637      	mov	r7, r6
 800a7ce:	e599      	b.n	800a304 <_dtoa_r+0x4b4>
 800a7d0:	40240000 	.word	0x40240000
 800a7d4:	9b08      	ldr	r3, [sp, #32]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f000 80ca 	beq.w	800a970 <_dtoa_r+0xb20>
 800a7dc:	9b03      	ldr	r3, [sp, #12]
 800a7de:	9302      	str	r3, [sp, #8]
 800a7e0:	2d00      	cmp	r5, #0
 800a7e2:	dd05      	ble.n	800a7f0 <_dtoa_r+0x9a0>
 800a7e4:	4639      	mov	r1, r7
 800a7e6:	462a      	mov	r2, r5
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f000 fb4b 	bl	800ae84 <__lshift>
 800a7ee:	4607      	mov	r7, r0
 800a7f0:	f1b8 0f00 	cmp.w	r8, #0
 800a7f4:	d05b      	beq.n	800a8ae <_dtoa_r+0xa5e>
 800a7f6:	6879      	ldr	r1, [r7, #4]
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f000 f931 	bl	800aa60 <_Balloc>
 800a7fe:	4605      	mov	r5, r0
 800a800:	b928      	cbnz	r0, 800a80e <_dtoa_r+0x9be>
 800a802:	4b87      	ldr	r3, [pc, #540]	; (800aa20 <_dtoa_r+0xbd0>)
 800a804:	4602      	mov	r2, r0
 800a806:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a80a:	f7ff bb3b 	b.w	8009e84 <_dtoa_r+0x34>
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	3202      	adds	r2, #2
 800a812:	0092      	lsls	r2, r2, #2
 800a814:	f107 010c 	add.w	r1, r7, #12
 800a818:	300c      	adds	r0, #12
 800a81a:	f000 f913 	bl	800aa44 <memcpy>
 800a81e:	2201      	movs	r2, #1
 800a820:	4629      	mov	r1, r5
 800a822:	4620      	mov	r0, r4
 800a824:	f000 fb2e 	bl	800ae84 <__lshift>
 800a828:	9b01      	ldr	r3, [sp, #4]
 800a82a:	f103 0901 	add.w	r9, r3, #1
 800a82e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a832:	4413      	add	r3, r2
 800a834:	9305      	str	r3, [sp, #20]
 800a836:	f00a 0301 	and.w	r3, sl, #1
 800a83a:	46b8      	mov	r8, r7
 800a83c:	9304      	str	r3, [sp, #16]
 800a83e:	4607      	mov	r7, r0
 800a840:	4631      	mov	r1, r6
 800a842:	ee18 0a10 	vmov	r0, s16
 800a846:	f7ff fa77 	bl	8009d38 <quorem>
 800a84a:	4641      	mov	r1, r8
 800a84c:	9002      	str	r0, [sp, #8]
 800a84e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a852:	ee18 0a10 	vmov	r0, s16
 800a856:	f000 fb85 	bl	800af64 <__mcmp>
 800a85a:	463a      	mov	r2, r7
 800a85c:	9003      	str	r0, [sp, #12]
 800a85e:	4631      	mov	r1, r6
 800a860:	4620      	mov	r0, r4
 800a862:	f000 fb9b 	bl	800af9c <__mdiff>
 800a866:	68c2      	ldr	r2, [r0, #12]
 800a868:	f109 3bff 	add.w	fp, r9, #4294967295
 800a86c:	4605      	mov	r5, r0
 800a86e:	bb02      	cbnz	r2, 800a8b2 <_dtoa_r+0xa62>
 800a870:	4601      	mov	r1, r0
 800a872:	ee18 0a10 	vmov	r0, s16
 800a876:	f000 fb75 	bl	800af64 <__mcmp>
 800a87a:	4602      	mov	r2, r0
 800a87c:	4629      	mov	r1, r5
 800a87e:	4620      	mov	r0, r4
 800a880:	9207      	str	r2, [sp, #28]
 800a882:	f000 f92d 	bl	800aae0 <_Bfree>
 800a886:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a88a:	ea43 0102 	orr.w	r1, r3, r2
 800a88e:	9b04      	ldr	r3, [sp, #16]
 800a890:	430b      	orrs	r3, r1
 800a892:	464d      	mov	r5, r9
 800a894:	d10f      	bne.n	800a8b6 <_dtoa_r+0xa66>
 800a896:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a89a:	d02a      	beq.n	800a8f2 <_dtoa_r+0xaa2>
 800a89c:	9b03      	ldr	r3, [sp, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	dd02      	ble.n	800a8a8 <_dtoa_r+0xa58>
 800a8a2:	9b02      	ldr	r3, [sp, #8]
 800a8a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a8a8:	f88b a000 	strb.w	sl, [fp]
 800a8ac:	e775      	b.n	800a79a <_dtoa_r+0x94a>
 800a8ae:	4638      	mov	r0, r7
 800a8b0:	e7ba      	b.n	800a828 <_dtoa_r+0x9d8>
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	e7e2      	b.n	800a87c <_dtoa_r+0xa2c>
 800a8b6:	9b03      	ldr	r3, [sp, #12]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	db04      	blt.n	800a8c6 <_dtoa_r+0xa76>
 800a8bc:	9906      	ldr	r1, [sp, #24]
 800a8be:	430b      	orrs	r3, r1
 800a8c0:	9904      	ldr	r1, [sp, #16]
 800a8c2:	430b      	orrs	r3, r1
 800a8c4:	d122      	bne.n	800a90c <_dtoa_r+0xabc>
 800a8c6:	2a00      	cmp	r2, #0
 800a8c8:	ddee      	ble.n	800a8a8 <_dtoa_r+0xa58>
 800a8ca:	ee18 1a10 	vmov	r1, s16
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f000 fad7 	bl	800ae84 <__lshift>
 800a8d6:	4631      	mov	r1, r6
 800a8d8:	ee08 0a10 	vmov	s16, r0
 800a8dc:	f000 fb42 	bl	800af64 <__mcmp>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	dc03      	bgt.n	800a8ec <_dtoa_r+0xa9c>
 800a8e4:	d1e0      	bne.n	800a8a8 <_dtoa_r+0xa58>
 800a8e6:	f01a 0f01 	tst.w	sl, #1
 800a8ea:	d0dd      	beq.n	800a8a8 <_dtoa_r+0xa58>
 800a8ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a8f0:	d1d7      	bne.n	800a8a2 <_dtoa_r+0xa52>
 800a8f2:	2339      	movs	r3, #57	; 0x39
 800a8f4:	f88b 3000 	strb.w	r3, [fp]
 800a8f8:	462b      	mov	r3, r5
 800a8fa:	461d      	mov	r5, r3
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a902:	2a39      	cmp	r2, #57	; 0x39
 800a904:	d071      	beq.n	800a9ea <_dtoa_r+0xb9a>
 800a906:	3201      	adds	r2, #1
 800a908:	701a      	strb	r2, [r3, #0]
 800a90a:	e746      	b.n	800a79a <_dtoa_r+0x94a>
 800a90c:	2a00      	cmp	r2, #0
 800a90e:	dd07      	ble.n	800a920 <_dtoa_r+0xad0>
 800a910:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a914:	d0ed      	beq.n	800a8f2 <_dtoa_r+0xaa2>
 800a916:	f10a 0301 	add.w	r3, sl, #1
 800a91a:	f88b 3000 	strb.w	r3, [fp]
 800a91e:	e73c      	b.n	800a79a <_dtoa_r+0x94a>
 800a920:	9b05      	ldr	r3, [sp, #20]
 800a922:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a926:	4599      	cmp	r9, r3
 800a928:	d047      	beq.n	800a9ba <_dtoa_r+0xb6a>
 800a92a:	ee18 1a10 	vmov	r1, s16
 800a92e:	2300      	movs	r3, #0
 800a930:	220a      	movs	r2, #10
 800a932:	4620      	mov	r0, r4
 800a934:	f000 f8f6 	bl	800ab24 <__multadd>
 800a938:	45b8      	cmp	r8, r7
 800a93a:	ee08 0a10 	vmov	s16, r0
 800a93e:	f04f 0300 	mov.w	r3, #0
 800a942:	f04f 020a 	mov.w	r2, #10
 800a946:	4641      	mov	r1, r8
 800a948:	4620      	mov	r0, r4
 800a94a:	d106      	bne.n	800a95a <_dtoa_r+0xb0a>
 800a94c:	f000 f8ea 	bl	800ab24 <__multadd>
 800a950:	4680      	mov	r8, r0
 800a952:	4607      	mov	r7, r0
 800a954:	f109 0901 	add.w	r9, r9, #1
 800a958:	e772      	b.n	800a840 <_dtoa_r+0x9f0>
 800a95a:	f000 f8e3 	bl	800ab24 <__multadd>
 800a95e:	4639      	mov	r1, r7
 800a960:	4680      	mov	r8, r0
 800a962:	2300      	movs	r3, #0
 800a964:	220a      	movs	r2, #10
 800a966:	4620      	mov	r0, r4
 800a968:	f000 f8dc 	bl	800ab24 <__multadd>
 800a96c:	4607      	mov	r7, r0
 800a96e:	e7f1      	b.n	800a954 <_dtoa_r+0xb04>
 800a970:	9b03      	ldr	r3, [sp, #12]
 800a972:	9302      	str	r3, [sp, #8]
 800a974:	9d01      	ldr	r5, [sp, #4]
 800a976:	ee18 0a10 	vmov	r0, s16
 800a97a:	4631      	mov	r1, r6
 800a97c:	f7ff f9dc 	bl	8009d38 <quorem>
 800a980:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a984:	9b01      	ldr	r3, [sp, #4]
 800a986:	f805 ab01 	strb.w	sl, [r5], #1
 800a98a:	1aea      	subs	r2, r5, r3
 800a98c:	9b02      	ldr	r3, [sp, #8]
 800a98e:	4293      	cmp	r3, r2
 800a990:	dd09      	ble.n	800a9a6 <_dtoa_r+0xb56>
 800a992:	ee18 1a10 	vmov	r1, s16
 800a996:	2300      	movs	r3, #0
 800a998:	220a      	movs	r2, #10
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 f8c2 	bl	800ab24 <__multadd>
 800a9a0:	ee08 0a10 	vmov	s16, r0
 800a9a4:	e7e7      	b.n	800a976 <_dtoa_r+0xb26>
 800a9a6:	9b02      	ldr	r3, [sp, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	bfc8      	it	gt
 800a9ac:	461d      	movgt	r5, r3
 800a9ae:	9b01      	ldr	r3, [sp, #4]
 800a9b0:	bfd8      	it	le
 800a9b2:	2501      	movle	r5, #1
 800a9b4:	441d      	add	r5, r3
 800a9b6:	f04f 0800 	mov.w	r8, #0
 800a9ba:	ee18 1a10 	vmov	r1, s16
 800a9be:	2201      	movs	r2, #1
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f000 fa5f 	bl	800ae84 <__lshift>
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	ee08 0a10 	vmov	s16, r0
 800a9cc:	f000 faca 	bl	800af64 <__mcmp>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	dc91      	bgt.n	800a8f8 <_dtoa_r+0xaa8>
 800a9d4:	d102      	bne.n	800a9dc <_dtoa_r+0xb8c>
 800a9d6:	f01a 0f01 	tst.w	sl, #1
 800a9da:	d18d      	bne.n	800a8f8 <_dtoa_r+0xaa8>
 800a9dc:	462b      	mov	r3, r5
 800a9de:	461d      	mov	r5, r3
 800a9e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9e4:	2a30      	cmp	r2, #48	; 0x30
 800a9e6:	d0fa      	beq.n	800a9de <_dtoa_r+0xb8e>
 800a9e8:	e6d7      	b.n	800a79a <_dtoa_r+0x94a>
 800a9ea:	9a01      	ldr	r2, [sp, #4]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d184      	bne.n	800a8fa <_dtoa_r+0xaaa>
 800a9f0:	9b00      	ldr	r3, [sp, #0]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	2331      	movs	r3, #49	; 0x31
 800a9f8:	7013      	strb	r3, [r2, #0]
 800a9fa:	e6ce      	b.n	800a79a <_dtoa_r+0x94a>
 800a9fc:	4b09      	ldr	r3, [pc, #36]	; (800aa24 <_dtoa_r+0xbd4>)
 800a9fe:	f7ff ba95 	b.w	8009f2c <_dtoa_r+0xdc>
 800aa02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f47f aa6e 	bne.w	8009ee6 <_dtoa_r+0x96>
 800aa0a:	4b07      	ldr	r3, [pc, #28]	; (800aa28 <_dtoa_r+0xbd8>)
 800aa0c:	f7ff ba8e 	b.w	8009f2c <_dtoa_r+0xdc>
 800aa10:	9b02      	ldr	r3, [sp, #8]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	dcae      	bgt.n	800a974 <_dtoa_r+0xb24>
 800aa16:	9b06      	ldr	r3, [sp, #24]
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	f73f aea8 	bgt.w	800a76e <_dtoa_r+0x91e>
 800aa1e:	e7a9      	b.n	800a974 <_dtoa_r+0xb24>
 800aa20:	0800d847 	.word	0x0800d847
 800aa24:	0800d7a4 	.word	0x0800d7a4
 800aa28:	0800d7c8 	.word	0x0800d7c8

0800aa2c <_localeconv_r>:
 800aa2c:	4800      	ldr	r0, [pc, #0]	; (800aa30 <_localeconv_r+0x4>)
 800aa2e:	4770      	bx	lr
 800aa30:	200001ac 	.word	0x200001ac

0800aa34 <malloc>:
 800aa34:	4b02      	ldr	r3, [pc, #8]	; (800aa40 <malloc+0xc>)
 800aa36:	4601      	mov	r1, r0
 800aa38:	6818      	ldr	r0, [r3, #0]
 800aa3a:	f000 bc17 	b.w	800b26c <_malloc_r>
 800aa3e:	bf00      	nop
 800aa40:	20000058 	.word	0x20000058

0800aa44 <memcpy>:
 800aa44:	440a      	add	r2, r1
 800aa46:	4291      	cmp	r1, r2
 800aa48:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa4c:	d100      	bne.n	800aa50 <memcpy+0xc>
 800aa4e:	4770      	bx	lr
 800aa50:	b510      	push	{r4, lr}
 800aa52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa5a:	4291      	cmp	r1, r2
 800aa5c:	d1f9      	bne.n	800aa52 <memcpy+0xe>
 800aa5e:	bd10      	pop	{r4, pc}

0800aa60 <_Balloc>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa64:	4604      	mov	r4, r0
 800aa66:	460d      	mov	r5, r1
 800aa68:	b976      	cbnz	r6, 800aa88 <_Balloc+0x28>
 800aa6a:	2010      	movs	r0, #16
 800aa6c:	f7ff ffe2 	bl	800aa34 <malloc>
 800aa70:	4602      	mov	r2, r0
 800aa72:	6260      	str	r0, [r4, #36]	; 0x24
 800aa74:	b920      	cbnz	r0, 800aa80 <_Balloc+0x20>
 800aa76:	4b18      	ldr	r3, [pc, #96]	; (800aad8 <_Balloc+0x78>)
 800aa78:	4818      	ldr	r0, [pc, #96]	; (800aadc <_Balloc+0x7c>)
 800aa7a:	2166      	movs	r1, #102	; 0x66
 800aa7c:	f000 fdd6 	bl	800b62c <__assert_func>
 800aa80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa84:	6006      	str	r6, [r0, #0]
 800aa86:	60c6      	str	r6, [r0, #12]
 800aa88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa8a:	68f3      	ldr	r3, [r6, #12]
 800aa8c:	b183      	cbz	r3, 800aab0 <_Balloc+0x50>
 800aa8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa96:	b9b8      	cbnz	r0, 800aac8 <_Balloc+0x68>
 800aa98:	2101      	movs	r1, #1
 800aa9a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa9e:	1d72      	adds	r2, r6, #5
 800aaa0:	0092      	lsls	r2, r2, #2
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f000 fb60 	bl	800b168 <_calloc_r>
 800aaa8:	b160      	cbz	r0, 800aac4 <_Balloc+0x64>
 800aaaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aaae:	e00e      	b.n	800aace <_Balloc+0x6e>
 800aab0:	2221      	movs	r2, #33	; 0x21
 800aab2:	2104      	movs	r1, #4
 800aab4:	4620      	mov	r0, r4
 800aab6:	f000 fb57 	bl	800b168 <_calloc_r>
 800aaba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aabc:	60f0      	str	r0, [r6, #12]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1e4      	bne.n	800aa8e <_Balloc+0x2e>
 800aac4:	2000      	movs	r0, #0
 800aac6:	bd70      	pop	{r4, r5, r6, pc}
 800aac8:	6802      	ldr	r2, [r0, #0]
 800aaca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aace:	2300      	movs	r3, #0
 800aad0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aad4:	e7f7      	b.n	800aac6 <_Balloc+0x66>
 800aad6:	bf00      	nop
 800aad8:	0800d7d5 	.word	0x0800d7d5
 800aadc:	0800d858 	.word	0x0800d858

0800aae0 <_Bfree>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aae4:	4605      	mov	r5, r0
 800aae6:	460c      	mov	r4, r1
 800aae8:	b976      	cbnz	r6, 800ab08 <_Bfree+0x28>
 800aaea:	2010      	movs	r0, #16
 800aaec:	f7ff ffa2 	bl	800aa34 <malloc>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	6268      	str	r0, [r5, #36]	; 0x24
 800aaf4:	b920      	cbnz	r0, 800ab00 <_Bfree+0x20>
 800aaf6:	4b09      	ldr	r3, [pc, #36]	; (800ab1c <_Bfree+0x3c>)
 800aaf8:	4809      	ldr	r0, [pc, #36]	; (800ab20 <_Bfree+0x40>)
 800aafa:	218a      	movs	r1, #138	; 0x8a
 800aafc:	f000 fd96 	bl	800b62c <__assert_func>
 800ab00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab04:	6006      	str	r6, [r0, #0]
 800ab06:	60c6      	str	r6, [r0, #12]
 800ab08:	b13c      	cbz	r4, 800ab1a <_Bfree+0x3a>
 800ab0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab0c:	6862      	ldr	r2, [r4, #4]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab14:	6021      	str	r1, [r4, #0]
 800ab16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab1a:	bd70      	pop	{r4, r5, r6, pc}
 800ab1c:	0800d7d5 	.word	0x0800d7d5
 800ab20:	0800d858 	.word	0x0800d858

0800ab24 <__multadd>:
 800ab24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab28:	690d      	ldr	r5, [r1, #16]
 800ab2a:	4607      	mov	r7, r0
 800ab2c:	460c      	mov	r4, r1
 800ab2e:	461e      	mov	r6, r3
 800ab30:	f101 0c14 	add.w	ip, r1, #20
 800ab34:	2000      	movs	r0, #0
 800ab36:	f8dc 3000 	ldr.w	r3, [ip]
 800ab3a:	b299      	uxth	r1, r3
 800ab3c:	fb02 6101 	mla	r1, r2, r1, r6
 800ab40:	0c1e      	lsrs	r6, r3, #16
 800ab42:	0c0b      	lsrs	r3, r1, #16
 800ab44:	fb02 3306 	mla	r3, r2, r6, r3
 800ab48:	b289      	uxth	r1, r1
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab50:	4285      	cmp	r5, r0
 800ab52:	f84c 1b04 	str.w	r1, [ip], #4
 800ab56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab5a:	dcec      	bgt.n	800ab36 <__multadd+0x12>
 800ab5c:	b30e      	cbz	r6, 800aba2 <__multadd+0x7e>
 800ab5e:	68a3      	ldr	r3, [r4, #8]
 800ab60:	42ab      	cmp	r3, r5
 800ab62:	dc19      	bgt.n	800ab98 <__multadd+0x74>
 800ab64:	6861      	ldr	r1, [r4, #4]
 800ab66:	4638      	mov	r0, r7
 800ab68:	3101      	adds	r1, #1
 800ab6a:	f7ff ff79 	bl	800aa60 <_Balloc>
 800ab6e:	4680      	mov	r8, r0
 800ab70:	b928      	cbnz	r0, 800ab7e <__multadd+0x5a>
 800ab72:	4602      	mov	r2, r0
 800ab74:	4b0c      	ldr	r3, [pc, #48]	; (800aba8 <__multadd+0x84>)
 800ab76:	480d      	ldr	r0, [pc, #52]	; (800abac <__multadd+0x88>)
 800ab78:	21b5      	movs	r1, #181	; 0xb5
 800ab7a:	f000 fd57 	bl	800b62c <__assert_func>
 800ab7e:	6922      	ldr	r2, [r4, #16]
 800ab80:	3202      	adds	r2, #2
 800ab82:	f104 010c 	add.w	r1, r4, #12
 800ab86:	0092      	lsls	r2, r2, #2
 800ab88:	300c      	adds	r0, #12
 800ab8a:	f7ff ff5b 	bl	800aa44 <memcpy>
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4638      	mov	r0, r7
 800ab92:	f7ff ffa5 	bl	800aae0 <_Bfree>
 800ab96:	4644      	mov	r4, r8
 800ab98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab9c:	3501      	adds	r5, #1
 800ab9e:	615e      	str	r6, [r3, #20]
 800aba0:	6125      	str	r5, [r4, #16]
 800aba2:	4620      	mov	r0, r4
 800aba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba8:	0800d847 	.word	0x0800d847
 800abac:	0800d858 	.word	0x0800d858

0800abb0 <__hi0bits>:
 800abb0:	0c03      	lsrs	r3, r0, #16
 800abb2:	041b      	lsls	r3, r3, #16
 800abb4:	b9d3      	cbnz	r3, 800abec <__hi0bits+0x3c>
 800abb6:	0400      	lsls	r0, r0, #16
 800abb8:	2310      	movs	r3, #16
 800abba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800abbe:	bf04      	itt	eq
 800abc0:	0200      	lsleq	r0, r0, #8
 800abc2:	3308      	addeq	r3, #8
 800abc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800abc8:	bf04      	itt	eq
 800abca:	0100      	lsleq	r0, r0, #4
 800abcc:	3304      	addeq	r3, #4
 800abce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800abd2:	bf04      	itt	eq
 800abd4:	0080      	lsleq	r0, r0, #2
 800abd6:	3302      	addeq	r3, #2
 800abd8:	2800      	cmp	r0, #0
 800abda:	db05      	blt.n	800abe8 <__hi0bits+0x38>
 800abdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800abe0:	f103 0301 	add.w	r3, r3, #1
 800abe4:	bf08      	it	eq
 800abe6:	2320      	moveq	r3, #32
 800abe8:	4618      	mov	r0, r3
 800abea:	4770      	bx	lr
 800abec:	2300      	movs	r3, #0
 800abee:	e7e4      	b.n	800abba <__hi0bits+0xa>

0800abf0 <__lo0bits>:
 800abf0:	6803      	ldr	r3, [r0, #0]
 800abf2:	f013 0207 	ands.w	r2, r3, #7
 800abf6:	4601      	mov	r1, r0
 800abf8:	d00b      	beq.n	800ac12 <__lo0bits+0x22>
 800abfa:	07da      	lsls	r2, r3, #31
 800abfc:	d423      	bmi.n	800ac46 <__lo0bits+0x56>
 800abfe:	0798      	lsls	r0, r3, #30
 800ac00:	bf49      	itett	mi
 800ac02:	085b      	lsrmi	r3, r3, #1
 800ac04:	089b      	lsrpl	r3, r3, #2
 800ac06:	2001      	movmi	r0, #1
 800ac08:	600b      	strmi	r3, [r1, #0]
 800ac0a:	bf5c      	itt	pl
 800ac0c:	600b      	strpl	r3, [r1, #0]
 800ac0e:	2002      	movpl	r0, #2
 800ac10:	4770      	bx	lr
 800ac12:	b298      	uxth	r0, r3
 800ac14:	b9a8      	cbnz	r0, 800ac42 <__lo0bits+0x52>
 800ac16:	0c1b      	lsrs	r3, r3, #16
 800ac18:	2010      	movs	r0, #16
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	b90a      	cbnz	r2, 800ac22 <__lo0bits+0x32>
 800ac1e:	3008      	adds	r0, #8
 800ac20:	0a1b      	lsrs	r3, r3, #8
 800ac22:	071a      	lsls	r2, r3, #28
 800ac24:	bf04      	itt	eq
 800ac26:	091b      	lsreq	r3, r3, #4
 800ac28:	3004      	addeq	r0, #4
 800ac2a:	079a      	lsls	r2, r3, #30
 800ac2c:	bf04      	itt	eq
 800ac2e:	089b      	lsreq	r3, r3, #2
 800ac30:	3002      	addeq	r0, #2
 800ac32:	07da      	lsls	r2, r3, #31
 800ac34:	d403      	bmi.n	800ac3e <__lo0bits+0x4e>
 800ac36:	085b      	lsrs	r3, r3, #1
 800ac38:	f100 0001 	add.w	r0, r0, #1
 800ac3c:	d005      	beq.n	800ac4a <__lo0bits+0x5a>
 800ac3e:	600b      	str	r3, [r1, #0]
 800ac40:	4770      	bx	lr
 800ac42:	4610      	mov	r0, r2
 800ac44:	e7e9      	b.n	800ac1a <__lo0bits+0x2a>
 800ac46:	2000      	movs	r0, #0
 800ac48:	4770      	bx	lr
 800ac4a:	2020      	movs	r0, #32
 800ac4c:	4770      	bx	lr
	...

0800ac50 <__i2b>:
 800ac50:	b510      	push	{r4, lr}
 800ac52:	460c      	mov	r4, r1
 800ac54:	2101      	movs	r1, #1
 800ac56:	f7ff ff03 	bl	800aa60 <_Balloc>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	b928      	cbnz	r0, 800ac6a <__i2b+0x1a>
 800ac5e:	4b05      	ldr	r3, [pc, #20]	; (800ac74 <__i2b+0x24>)
 800ac60:	4805      	ldr	r0, [pc, #20]	; (800ac78 <__i2b+0x28>)
 800ac62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ac66:	f000 fce1 	bl	800b62c <__assert_func>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	6144      	str	r4, [r0, #20]
 800ac6e:	6103      	str	r3, [r0, #16]
 800ac70:	bd10      	pop	{r4, pc}
 800ac72:	bf00      	nop
 800ac74:	0800d847 	.word	0x0800d847
 800ac78:	0800d858 	.word	0x0800d858

0800ac7c <__multiply>:
 800ac7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac80:	4691      	mov	r9, r2
 800ac82:	690a      	ldr	r2, [r1, #16]
 800ac84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	bfb8      	it	lt
 800ac8c:	460b      	movlt	r3, r1
 800ac8e:	460c      	mov	r4, r1
 800ac90:	bfbc      	itt	lt
 800ac92:	464c      	movlt	r4, r9
 800ac94:	4699      	movlt	r9, r3
 800ac96:	6927      	ldr	r7, [r4, #16]
 800ac98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac9c:	68a3      	ldr	r3, [r4, #8]
 800ac9e:	6861      	ldr	r1, [r4, #4]
 800aca0:	eb07 060a 	add.w	r6, r7, sl
 800aca4:	42b3      	cmp	r3, r6
 800aca6:	b085      	sub	sp, #20
 800aca8:	bfb8      	it	lt
 800acaa:	3101      	addlt	r1, #1
 800acac:	f7ff fed8 	bl	800aa60 <_Balloc>
 800acb0:	b930      	cbnz	r0, 800acc0 <__multiply+0x44>
 800acb2:	4602      	mov	r2, r0
 800acb4:	4b44      	ldr	r3, [pc, #272]	; (800adc8 <__multiply+0x14c>)
 800acb6:	4845      	ldr	r0, [pc, #276]	; (800adcc <__multiply+0x150>)
 800acb8:	f240 115d 	movw	r1, #349	; 0x15d
 800acbc:	f000 fcb6 	bl	800b62c <__assert_func>
 800acc0:	f100 0514 	add.w	r5, r0, #20
 800acc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800acc8:	462b      	mov	r3, r5
 800acca:	2200      	movs	r2, #0
 800accc:	4543      	cmp	r3, r8
 800acce:	d321      	bcc.n	800ad14 <__multiply+0x98>
 800acd0:	f104 0314 	add.w	r3, r4, #20
 800acd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800acd8:	f109 0314 	add.w	r3, r9, #20
 800acdc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ace0:	9202      	str	r2, [sp, #8]
 800ace2:	1b3a      	subs	r2, r7, r4
 800ace4:	3a15      	subs	r2, #21
 800ace6:	f022 0203 	bic.w	r2, r2, #3
 800acea:	3204      	adds	r2, #4
 800acec:	f104 0115 	add.w	r1, r4, #21
 800acf0:	428f      	cmp	r7, r1
 800acf2:	bf38      	it	cc
 800acf4:	2204      	movcc	r2, #4
 800acf6:	9201      	str	r2, [sp, #4]
 800acf8:	9a02      	ldr	r2, [sp, #8]
 800acfa:	9303      	str	r3, [sp, #12]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d80c      	bhi.n	800ad1a <__multiply+0x9e>
 800ad00:	2e00      	cmp	r6, #0
 800ad02:	dd03      	ble.n	800ad0c <__multiply+0x90>
 800ad04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d05a      	beq.n	800adc2 <__multiply+0x146>
 800ad0c:	6106      	str	r6, [r0, #16]
 800ad0e:	b005      	add	sp, #20
 800ad10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad14:	f843 2b04 	str.w	r2, [r3], #4
 800ad18:	e7d8      	b.n	800accc <__multiply+0x50>
 800ad1a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ad1e:	f1ba 0f00 	cmp.w	sl, #0
 800ad22:	d024      	beq.n	800ad6e <__multiply+0xf2>
 800ad24:	f104 0e14 	add.w	lr, r4, #20
 800ad28:	46a9      	mov	r9, r5
 800ad2a:	f04f 0c00 	mov.w	ip, #0
 800ad2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ad32:	f8d9 1000 	ldr.w	r1, [r9]
 800ad36:	fa1f fb82 	uxth.w	fp, r2
 800ad3a:	b289      	uxth	r1, r1
 800ad3c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ad40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ad44:	f8d9 2000 	ldr.w	r2, [r9]
 800ad48:	4461      	add	r1, ip
 800ad4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad4e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ad52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad56:	b289      	uxth	r1, r1
 800ad58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad5c:	4577      	cmp	r7, lr
 800ad5e:	f849 1b04 	str.w	r1, [r9], #4
 800ad62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad66:	d8e2      	bhi.n	800ad2e <__multiply+0xb2>
 800ad68:	9a01      	ldr	r2, [sp, #4]
 800ad6a:	f845 c002 	str.w	ip, [r5, r2]
 800ad6e:	9a03      	ldr	r2, [sp, #12]
 800ad70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad74:	3304      	adds	r3, #4
 800ad76:	f1b9 0f00 	cmp.w	r9, #0
 800ad7a:	d020      	beq.n	800adbe <__multiply+0x142>
 800ad7c:	6829      	ldr	r1, [r5, #0]
 800ad7e:	f104 0c14 	add.w	ip, r4, #20
 800ad82:	46ae      	mov	lr, r5
 800ad84:	f04f 0a00 	mov.w	sl, #0
 800ad88:	f8bc b000 	ldrh.w	fp, [ip]
 800ad8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad90:	fb09 220b 	mla	r2, r9, fp, r2
 800ad94:	4492      	add	sl, r2
 800ad96:	b289      	uxth	r1, r1
 800ad98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ad9c:	f84e 1b04 	str.w	r1, [lr], #4
 800ada0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ada4:	f8be 1000 	ldrh.w	r1, [lr]
 800ada8:	0c12      	lsrs	r2, r2, #16
 800adaa:	fb09 1102 	mla	r1, r9, r2, r1
 800adae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800adb2:	4567      	cmp	r7, ip
 800adb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800adb8:	d8e6      	bhi.n	800ad88 <__multiply+0x10c>
 800adba:	9a01      	ldr	r2, [sp, #4]
 800adbc:	50a9      	str	r1, [r5, r2]
 800adbe:	3504      	adds	r5, #4
 800adc0:	e79a      	b.n	800acf8 <__multiply+0x7c>
 800adc2:	3e01      	subs	r6, #1
 800adc4:	e79c      	b.n	800ad00 <__multiply+0x84>
 800adc6:	bf00      	nop
 800adc8:	0800d847 	.word	0x0800d847
 800adcc:	0800d858 	.word	0x0800d858

0800add0 <__pow5mult>:
 800add0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800add4:	4615      	mov	r5, r2
 800add6:	f012 0203 	ands.w	r2, r2, #3
 800adda:	4606      	mov	r6, r0
 800addc:	460f      	mov	r7, r1
 800adde:	d007      	beq.n	800adf0 <__pow5mult+0x20>
 800ade0:	4c25      	ldr	r4, [pc, #148]	; (800ae78 <__pow5mult+0xa8>)
 800ade2:	3a01      	subs	r2, #1
 800ade4:	2300      	movs	r3, #0
 800ade6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adea:	f7ff fe9b 	bl	800ab24 <__multadd>
 800adee:	4607      	mov	r7, r0
 800adf0:	10ad      	asrs	r5, r5, #2
 800adf2:	d03d      	beq.n	800ae70 <__pow5mult+0xa0>
 800adf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800adf6:	b97c      	cbnz	r4, 800ae18 <__pow5mult+0x48>
 800adf8:	2010      	movs	r0, #16
 800adfa:	f7ff fe1b 	bl	800aa34 <malloc>
 800adfe:	4602      	mov	r2, r0
 800ae00:	6270      	str	r0, [r6, #36]	; 0x24
 800ae02:	b928      	cbnz	r0, 800ae10 <__pow5mult+0x40>
 800ae04:	4b1d      	ldr	r3, [pc, #116]	; (800ae7c <__pow5mult+0xac>)
 800ae06:	481e      	ldr	r0, [pc, #120]	; (800ae80 <__pow5mult+0xb0>)
 800ae08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ae0c:	f000 fc0e 	bl	800b62c <__assert_func>
 800ae10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae14:	6004      	str	r4, [r0, #0]
 800ae16:	60c4      	str	r4, [r0, #12]
 800ae18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae20:	b94c      	cbnz	r4, 800ae36 <__pow5mult+0x66>
 800ae22:	f240 2171 	movw	r1, #625	; 0x271
 800ae26:	4630      	mov	r0, r6
 800ae28:	f7ff ff12 	bl	800ac50 <__i2b>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae32:	4604      	mov	r4, r0
 800ae34:	6003      	str	r3, [r0, #0]
 800ae36:	f04f 0900 	mov.w	r9, #0
 800ae3a:	07eb      	lsls	r3, r5, #31
 800ae3c:	d50a      	bpl.n	800ae54 <__pow5mult+0x84>
 800ae3e:	4639      	mov	r1, r7
 800ae40:	4622      	mov	r2, r4
 800ae42:	4630      	mov	r0, r6
 800ae44:	f7ff ff1a 	bl	800ac7c <__multiply>
 800ae48:	4639      	mov	r1, r7
 800ae4a:	4680      	mov	r8, r0
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	f7ff fe47 	bl	800aae0 <_Bfree>
 800ae52:	4647      	mov	r7, r8
 800ae54:	106d      	asrs	r5, r5, #1
 800ae56:	d00b      	beq.n	800ae70 <__pow5mult+0xa0>
 800ae58:	6820      	ldr	r0, [r4, #0]
 800ae5a:	b938      	cbnz	r0, 800ae6c <__pow5mult+0x9c>
 800ae5c:	4622      	mov	r2, r4
 800ae5e:	4621      	mov	r1, r4
 800ae60:	4630      	mov	r0, r6
 800ae62:	f7ff ff0b 	bl	800ac7c <__multiply>
 800ae66:	6020      	str	r0, [r4, #0]
 800ae68:	f8c0 9000 	str.w	r9, [r0]
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	e7e4      	b.n	800ae3a <__pow5mult+0x6a>
 800ae70:	4638      	mov	r0, r7
 800ae72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae76:	bf00      	nop
 800ae78:	0800d9a8 	.word	0x0800d9a8
 800ae7c:	0800d7d5 	.word	0x0800d7d5
 800ae80:	0800d858 	.word	0x0800d858

0800ae84 <__lshift>:
 800ae84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae88:	460c      	mov	r4, r1
 800ae8a:	6849      	ldr	r1, [r1, #4]
 800ae8c:	6923      	ldr	r3, [r4, #16]
 800ae8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae92:	68a3      	ldr	r3, [r4, #8]
 800ae94:	4607      	mov	r7, r0
 800ae96:	4691      	mov	r9, r2
 800ae98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae9c:	f108 0601 	add.w	r6, r8, #1
 800aea0:	42b3      	cmp	r3, r6
 800aea2:	db0b      	blt.n	800aebc <__lshift+0x38>
 800aea4:	4638      	mov	r0, r7
 800aea6:	f7ff fddb 	bl	800aa60 <_Balloc>
 800aeaa:	4605      	mov	r5, r0
 800aeac:	b948      	cbnz	r0, 800aec2 <__lshift+0x3e>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	4b2a      	ldr	r3, [pc, #168]	; (800af5c <__lshift+0xd8>)
 800aeb2:	482b      	ldr	r0, [pc, #172]	; (800af60 <__lshift+0xdc>)
 800aeb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aeb8:	f000 fbb8 	bl	800b62c <__assert_func>
 800aebc:	3101      	adds	r1, #1
 800aebe:	005b      	lsls	r3, r3, #1
 800aec0:	e7ee      	b.n	800aea0 <__lshift+0x1c>
 800aec2:	2300      	movs	r3, #0
 800aec4:	f100 0114 	add.w	r1, r0, #20
 800aec8:	f100 0210 	add.w	r2, r0, #16
 800aecc:	4618      	mov	r0, r3
 800aece:	4553      	cmp	r3, sl
 800aed0:	db37      	blt.n	800af42 <__lshift+0xbe>
 800aed2:	6920      	ldr	r0, [r4, #16]
 800aed4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aed8:	f104 0314 	add.w	r3, r4, #20
 800aedc:	f019 091f 	ands.w	r9, r9, #31
 800aee0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aee4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aee8:	d02f      	beq.n	800af4a <__lshift+0xc6>
 800aeea:	f1c9 0e20 	rsb	lr, r9, #32
 800aeee:	468a      	mov	sl, r1
 800aef0:	f04f 0c00 	mov.w	ip, #0
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	fa02 f209 	lsl.w	r2, r2, r9
 800aefa:	ea42 020c 	orr.w	r2, r2, ip
 800aefe:	f84a 2b04 	str.w	r2, [sl], #4
 800af02:	f853 2b04 	ldr.w	r2, [r3], #4
 800af06:	4298      	cmp	r0, r3
 800af08:	fa22 fc0e 	lsr.w	ip, r2, lr
 800af0c:	d8f2      	bhi.n	800aef4 <__lshift+0x70>
 800af0e:	1b03      	subs	r3, r0, r4
 800af10:	3b15      	subs	r3, #21
 800af12:	f023 0303 	bic.w	r3, r3, #3
 800af16:	3304      	adds	r3, #4
 800af18:	f104 0215 	add.w	r2, r4, #21
 800af1c:	4290      	cmp	r0, r2
 800af1e:	bf38      	it	cc
 800af20:	2304      	movcc	r3, #4
 800af22:	f841 c003 	str.w	ip, [r1, r3]
 800af26:	f1bc 0f00 	cmp.w	ip, #0
 800af2a:	d001      	beq.n	800af30 <__lshift+0xac>
 800af2c:	f108 0602 	add.w	r6, r8, #2
 800af30:	3e01      	subs	r6, #1
 800af32:	4638      	mov	r0, r7
 800af34:	612e      	str	r6, [r5, #16]
 800af36:	4621      	mov	r1, r4
 800af38:	f7ff fdd2 	bl	800aae0 <_Bfree>
 800af3c:	4628      	mov	r0, r5
 800af3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af42:	f842 0f04 	str.w	r0, [r2, #4]!
 800af46:	3301      	adds	r3, #1
 800af48:	e7c1      	b.n	800aece <__lshift+0x4a>
 800af4a:	3904      	subs	r1, #4
 800af4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800af50:	f841 2f04 	str.w	r2, [r1, #4]!
 800af54:	4298      	cmp	r0, r3
 800af56:	d8f9      	bhi.n	800af4c <__lshift+0xc8>
 800af58:	e7ea      	b.n	800af30 <__lshift+0xac>
 800af5a:	bf00      	nop
 800af5c:	0800d847 	.word	0x0800d847
 800af60:	0800d858 	.word	0x0800d858

0800af64 <__mcmp>:
 800af64:	b530      	push	{r4, r5, lr}
 800af66:	6902      	ldr	r2, [r0, #16]
 800af68:	690c      	ldr	r4, [r1, #16]
 800af6a:	1b12      	subs	r2, r2, r4
 800af6c:	d10e      	bne.n	800af8c <__mcmp+0x28>
 800af6e:	f100 0314 	add.w	r3, r0, #20
 800af72:	3114      	adds	r1, #20
 800af74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800af80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800af84:	42a5      	cmp	r5, r4
 800af86:	d003      	beq.n	800af90 <__mcmp+0x2c>
 800af88:	d305      	bcc.n	800af96 <__mcmp+0x32>
 800af8a:	2201      	movs	r2, #1
 800af8c:	4610      	mov	r0, r2
 800af8e:	bd30      	pop	{r4, r5, pc}
 800af90:	4283      	cmp	r3, r0
 800af92:	d3f3      	bcc.n	800af7c <__mcmp+0x18>
 800af94:	e7fa      	b.n	800af8c <__mcmp+0x28>
 800af96:	f04f 32ff 	mov.w	r2, #4294967295
 800af9a:	e7f7      	b.n	800af8c <__mcmp+0x28>

0800af9c <__mdiff>:
 800af9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa0:	460c      	mov	r4, r1
 800afa2:	4606      	mov	r6, r0
 800afa4:	4611      	mov	r1, r2
 800afa6:	4620      	mov	r0, r4
 800afa8:	4690      	mov	r8, r2
 800afaa:	f7ff ffdb 	bl	800af64 <__mcmp>
 800afae:	1e05      	subs	r5, r0, #0
 800afb0:	d110      	bne.n	800afd4 <__mdiff+0x38>
 800afb2:	4629      	mov	r1, r5
 800afb4:	4630      	mov	r0, r6
 800afb6:	f7ff fd53 	bl	800aa60 <_Balloc>
 800afba:	b930      	cbnz	r0, 800afca <__mdiff+0x2e>
 800afbc:	4b3a      	ldr	r3, [pc, #232]	; (800b0a8 <__mdiff+0x10c>)
 800afbe:	4602      	mov	r2, r0
 800afc0:	f240 2132 	movw	r1, #562	; 0x232
 800afc4:	4839      	ldr	r0, [pc, #228]	; (800b0ac <__mdiff+0x110>)
 800afc6:	f000 fb31 	bl	800b62c <__assert_func>
 800afca:	2301      	movs	r3, #1
 800afcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800afd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd4:	bfa4      	itt	ge
 800afd6:	4643      	movge	r3, r8
 800afd8:	46a0      	movge	r8, r4
 800afda:	4630      	mov	r0, r6
 800afdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800afe0:	bfa6      	itte	ge
 800afe2:	461c      	movge	r4, r3
 800afe4:	2500      	movge	r5, #0
 800afe6:	2501      	movlt	r5, #1
 800afe8:	f7ff fd3a 	bl	800aa60 <_Balloc>
 800afec:	b920      	cbnz	r0, 800aff8 <__mdiff+0x5c>
 800afee:	4b2e      	ldr	r3, [pc, #184]	; (800b0a8 <__mdiff+0x10c>)
 800aff0:	4602      	mov	r2, r0
 800aff2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aff6:	e7e5      	b.n	800afc4 <__mdiff+0x28>
 800aff8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800affc:	6926      	ldr	r6, [r4, #16]
 800affe:	60c5      	str	r5, [r0, #12]
 800b000:	f104 0914 	add.w	r9, r4, #20
 800b004:	f108 0514 	add.w	r5, r8, #20
 800b008:	f100 0e14 	add.w	lr, r0, #20
 800b00c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b010:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b014:	f108 0210 	add.w	r2, r8, #16
 800b018:	46f2      	mov	sl, lr
 800b01a:	2100      	movs	r1, #0
 800b01c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b020:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b024:	fa1f f883 	uxth.w	r8, r3
 800b028:	fa11 f18b 	uxtah	r1, r1, fp
 800b02c:	0c1b      	lsrs	r3, r3, #16
 800b02e:	eba1 0808 	sub.w	r8, r1, r8
 800b032:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b036:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b03a:	fa1f f888 	uxth.w	r8, r8
 800b03e:	1419      	asrs	r1, r3, #16
 800b040:	454e      	cmp	r6, r9
 800b042:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b046:	f84a 3b04 	str.w	r3, [sl], #4
 800b04a:	d8e7      	bhi.n	800b01c <__mdiff+0x80>
 800b04c:	1b33      	subs	r3, r6, r4
 800b04e:	3b15      	subs	r3, #21
 800b050:	f023 0303 	bic.w	r3, r3, #3
 800b054:	3304      	adds	r3, #4
 800b056:	3415      	adds	r4, #21
 800b058:	42a6      	cmp	r6, r4
 800b05a:	bf38      	it	cc
 800b05c:	2304      	movcc	r3, #4
 800b05e:	441d      	add	r5, r3
 800b060:	4473      	add	r3, lr
 800b062:	469e      	mov	lr, r3
 800b064:	462e      	mov	r6, r5
 800b066:	4566      	cmp	r6, ip
 800b068:	d30e      	bcc.n	800b088 <__mdiff+0xec>
 800b06a:	f10c 0203 	add.w	r2, ip, #3
 800b06e:	1b52      	subs	r2, r2, r5
 800b070:	f022 0203 	bic.w	r2, r2, #3
 800b074:	3d03      	subs	r5, #3
 800b076:	45ac      	cmp	ip, r5
 800b078:	bf38      	it	cc
 800b07a:	2200      	movcc	r2, #0
 800b07c:	441a      	add	r2, r3
 800b07e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b082:	b17b      	cbz	r3, 800b0a4 <__mdiff+0x108>
 800b084:	6107      	str	r7, [r0, #16]
 800b086:	e7a3      	b.n	800afd0 <__mdiff+0x34>
 800b088:	f856 8b04 	ldr.w	r8, [r6], #4
 800b08c:	fa11 f288 	uxtah	r2, r1, r8
 800b090:	1414      	asrs	r4, r2, #16
 800b092:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b096:	b292      	uxth	r2, r2
 800b098:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b09c:	f84e 2b04 	str.w	r2, [lr], #4
 800b0a0:	1421      	asrs	r1, r4, #16
 800b0a2:	e7e0      	b.n	800b066 <__mdiff+0xca>
 800b0a4:	3f01      	subs	r7, #1
 800b0a6:	e7ea      	b.n	800b07e <__mdiff+0xe2>
 800b0a8:	0800d847 	.word	0x0800d847
 800b0ac:	0800d858 	.word	0x0800d858

0800b0b0 <__d2b>:
 800b0b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0b4:	4689      	mov	r9, r1
 800b0b6:	2101      	movs	r1, #1
 800b0b8:	ec57 6b10 	vmov	r6, r7, d0
 800b0bc:	4690      	mov	r8, r2
 800b0be:	f7ff fccf 	bl	800aa60 <_Balloc>
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	b930      	cbnz	r0, 800b0d4 <__d2b+0x24>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	4b25      	ldr	r3, [pc, #148]	; (800b160 <__d2b+0xb0>)
 800b0ca:	4826      	ldr	r0, [pc, #152]	; (800b164 <__d2b+0xb4>)
 800b0cc:	f240 310a 	movw	r1, #778	; 0x30a
 800b0d0:	f000 faac 	bl	800b62c <__assert_func>
 800b0d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b0d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b0dc:	bb35      	cbnz	r5, 800b12c <__d2b+0x7c>
 800b0de:	2e00      	cmp	r6, #0
 800b0e0:	9301      	str	r3, [sp, #4]
 800b0e2:	d028      	beq.n	800b136 <__d2b+0x86>
 800b0e4:	4668      	mov	r0, sp
 800b0e6:	9600      	str	r6, [sp, #0]
 800b0e8:	f7ff fd82 	bl	800abf0 <__lo0bits>
 800b0ec:	9900      	ldr	r1, [sp, #0]
 800b0ee:	b300      	cbz	r0, 800b132 <__d2b+0x82>
 800b0f0:	9a01      	ldr	r2, [sp, #4]
 800b0f2:	f1c0 0320 	rsb	r3, r0, #32
 800b0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fa:	430b      	orrs	r3, r1
 800b0fc:	40c2      	lsrs	r2, r0
 800b0fe:	6163      	str	r3, [r4, #20]
 800b100:	9201      	str	r2, [sp, #4]
 800b102:	9b01      	ldr	r3, [sp, #4]
 800b104:	61a3      	str	r3, [r4, #24]
 800b106:	2b00      	cmp	r3, #0
 800b108:	bf14      	ite	ne
 800b10a:	2202      	movne	r2, #2
 800b10c:	2201      	moveq	r2, #1
 800b10e:	6122      	str	r2, [r4, #16]
 800b110:	b1d5      	cbz	r5, 800b148 <__d2b+0x98>
 800b112:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b116:	4405      	add	r5, r0
 800b118:	f8c9 5000 	str.w	r5, [r9]
 800b11c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b120:	f8c8 0000 	str.w	r0, [r8]
 800b124:	4620      	mov	r0, r4
 800b126:	b003      	add	sp, #12
 800b128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b12c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b130:	e7d5      	b.n	800b0de <__d2b+0x2e>
 800b132:	6161      	str	r1, [r4, #20]
 800b134:	e7e5      	b.n	800b102 <__d2b+0x52>
 800b136:	a801      	add	r0, sp, #4
 800b138:	f7ff fd5a 	bl	800abf0 <__lo0bits>
 800b13c:	9b01      	ldr	r3, [sp, #4]
 800b13e:	6163      	str	r3, [r4, #20]
 800b140:	2201      	movs	r2, #1
 800b142:	6122      	str	r2, [r4, #16]
 800b144:	3020      	adds	r0, #32
 800b146:	e7e3      	b.n	800b110 <__d2b+0x60>
 800b148:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b14c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b150:	f8c9 0000 	str.w	r0, [r9]
 800b154:	6918      	ldr	r0, [r3, #16]
 800b156:	f7ff fd2b 	bl	800abb0 <__hi0bits>
 800b15a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b15e:	e7df      	b.n	800b120 <__d2b+0x70>
 800b160:	0800d847 	.word	0x0800d847
 800b164:	0800d858 	.word	0x0800d858

0800b168 <_calloc_r>:
 800b168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b16a:	fba1 2402 	umull	r2, r4, r1, r2
 800b16e:	b94c      	cbnz	r4, 800b184 <_calloc_r+0x1c>
 800b170:	4611      	mov	r1, r2
 800b172:	9201      	str	r2, [sp, #4]
 800b174:	f000 f87a 	bl	800b26c <_malloc_r>
 800b178:	9a01      	ldr	r2, [sp, #4]
 800b17a:	4605      	mov	r5, r0
 800b17c:	b930      	cbnz	r0, 800b18c <_calloc_r+0x24>
 800b17e:	4628      	mov	r0, r5
 800b180:	b003      	add	sp, #12
 800b182:	bd30      	pop	{r4, r5, pc}
 800b184:	220c      	movs	r2, #12
 800b186:	6002      	str	r2, [r0, #0]
 800b188:	2500      	movs	r5, #0
 800b18a:	e7f8      	b.n	800b17e <_calloc_r+0x16>
 800b18c:	4621      	mov	r1, r4
 800b18e:	f7fe f941 	bl	8009414 <memset>
 800b192:	e7f4      	b.n	800b17e <_calloc_r+0x16>

0800b194 <_free_r>:
 800b194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b196:	2900      	cmp	r1, #0
 800b198:	d044      	beq.n	800b224 <_free_r+0x90>
 800b19a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b19e:	9001      	str	r0, [sp, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f1a1 0404 	sub.w	r4, r1, #4
 800b1a6:	bfb8      	it	lt
 800b1a8:	18e4      	addlt	r4, r4, r3
 800b1aa:	f000 fa9b 	bl	800b6e4 <__malloc_lock>
 800b1ae:	4a1e      	ldr	r2, [pc, #120]	; (800b228 <_free_r+0x94>)
 800b1b0:	9801      	ldr	r0, [sp, #4]
 800b1b2:	6813      	ldr	r3, [r2, #0]
 800b1b4:	b933      	cbnz	r3, 800b1c4 <_free_r+0x30>
 800b1b6:	6063      	str	r3, [r4, #4]
 800b1b8:	6014      	str	r4, [r2, #0]
 800b1ba:	b003      	add	sp, #12
 800b1bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1c0:	f000 ba96 	b.w	800b6f0 <__malloc_unlock>
 800b1c4:	42a3      	cmp	r3, r4
 800b1c6:	d908      	bls.n	800b1da <_free_r+0x46>
 800b1c8:	6825      	ldr	r5, [r4, #0]
 800b1ca:	1961      	adds	r1, r4, r5
 800b1cc:	428b      	cmp	r3, r1
 800b1ce:	bf01      	itttt	eq
 800b1d0:	6819      	ldreq	r1, [r3, #0]
 800b1d2:	685b      	ldreq	r3, [r3, #4]
 800b1d4:	1949      	addeq	r1, r1, r5
 800b1d6:	6021      	streq	r1, [r4, #0]
 800b1d8:	e7ed      	b.n	800b1b6 <_free_r+0x22>
 800b1da:	461a      	mov	r2, r3
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	b10b      	cbz	r3, 800b1e4 <_free_r+0x50>
 800b1e0:	42a3      	cmp	r3, r4
 800b1e2:	d9fa      	bls.n	800b1da <_free_r+0x46>
 800b1e4:	6811      	ldr	r1, [r2, #0]
 800b1e6:	1855      	adds	r5, r2, r1
 800b1e8:	42a5      	cmp	r5, r4
 800b1ea:	d10b      	bne.n	800b204 <_free_r+0x70>
 800b1ec:	6824      	ldr	r4, [r4, #0]
 800b1ee:	4421      	add	r1, r4
 800b1f0:	1854      	adds	r4, r2, r1
 800b1f2:	42a3      	cmp	r3, r4
 800b1f4:	6011      	str	r1, [r2, #0]
 800b1f6:	d1e0      	bne.n	800b1ba <_free_r+0x26>
 800b1f8:	681c      	ldr	r4, [r3, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	6053      	str	r3, [r2, #4]
 800b1fe:	4421      	add	r1, r4
 800b200:	6011      	str	r1, [r2, #0]
 800b202:	e7da      	b.n	800b1ba <_free_r+0x26>
 800b204:	d902      	bls.n	800b20c <_free_r+0x78>
 800b206:	230c      	movs	r3, #12
 800b208:	6003      	str	r3, [r0, #0]
 800b20a:	e7d6      	b.n	800b1ba <_free_r+0x26>
 800b20c:	6825      	ldr	r5, [r4, #0]
 800b20e:	1961      	adds	r1, r4, r5
 800b210:	428b      	cmp	r3, r1
 800b212:	bf04      	itt	eq
 800b214:	6819      	ldreq	r1, [r3, #0]
 800b216:	685b      	ldreq	r3, [r3, #4]
 800b218:	6063      	str	r3, [r4, #4]
 800b21a:	bf04      	itt	eq
 800b21c:	1949      	addeq	r1, r1, r5
 800b21e:	6021      	streq	r1, [r4, #0]
 800b220:	6054      	str	r4, [r2, #4]
 800b222:	e7ca      	b.n	800b1ba <_free_r+0x26>
 800b224:	b003      	add	sp, #12
 800b226:	bd30      	pop	{r4, r5, pc}
 800b228:	200006b4 	.word	0x200006b4

0800b22c <sbrk_aligned>:
 800b22c:	b570      	push	{r4, r5, r6, lr}
 800b22e:	4e0e      	ldr	r6, [pc, #56]	; (800b268 <sbrk_aligned+0x3c>)
 800b230:	460c      	mov	r4, r1
 800b232:	6831      	ldr	r1, [r6, #0]
 800b234:	4605      	mov	r5, r0
 800b236:	b911      	cbnz	r1, 800b23e <sbrk_aligned+0x12>
 800b238:	f000 f9e8 	bl	800b60c <_sbrk_r>
 800b23c:	6030      	str	r0, [r6, #0]
 800b23e:	4621      	mov	r1, r4
 800b240:	4628      	mov	r0, r5
 800b242:	f000 f9e3 	bl	800b60c <_sbrk_r>
 800b246:	1c43      	adds	r3, r0, #1
 800b248:	d00a      	beq.n	800b260 <sbrk_aligned+0x34>
 800b24a:	1cc4      	adds	r4, r0, #3
 800b24c:	f024 0403 	bic.w	r4, r4, #3
 800b250:	42a0      	cmp	r0, r4
 800b252:	d007      	beq.n	800b264 <sbrk_aligned+0x38>
 800b254:	1a21      	subs	r1, r4, r0
 800b256:	4628      	mov	r0, r5
 800b258:	f000 f9d8 	bl	800b60c <_sbrk_r>
 800b25c:	3001      	adds	r0, #1
 800b25e:	d101      	bne.n	800b264 <sbrk_aligned+0x38>
 800b260:	f04f 34ff 	mov.w	r4, #4294967295
 800b264:	4620      	mov	r0, r4
 800b266:	bd70      	pop	{r4, r5, r6, pc}
 800b268:	200006b8 	.word	0x200006b8

0800b26c <_malloc_r>:
 800b26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b270:	1ccd      	adds	r5, r1, #3
 800b272:	f025 0503 	bic.w	r5, r5, #3
 800b276:	3508      	adds	r5, #8
 800b278:	2d0c      	cmp	r5, #12
 800b27a:	bf38      	it	cc
 800b27c:	250c      	movcc	r5, #12
 800b27e:	2d00      	cmp	r5, #0
 800b280:	4607      	mov	r7, r0
 800b282:	db01      	blt.n	800b288 <_malloc_r+0x1c>
 800b284:	42a9      	cmp	r1, r5
 800b286:	d905      	bls.n	800b294 <_malloc_r+0x28>
 800b288:	230c      	movs	r3, #12
 800b28a:	603b      	str	r3, [r7, #0]
 800b28c:	2600      	movs	r6, #0
 800b28e:	4630      	mov	r0, r6
 800b290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b294:	4e2e      	ldr	r6, [pc, #184]	; (800b350 <_malloc_r+0xe4>)
 800b296:	f000 fa25 	bl	800b6e4 <__malloc_lock>
 800b29a:	6833      	ldr	r3, [r6, #0]
 800b29c:	461c      	mov	r4, r3
 800b29e:	bb34      	cbnz	r4, 800b2ee <_malloc_r+0x82>
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	4638      	mov	r0, r7
 800b2a4:	f7ff ffc2 	bl	800b22c <sbrk_aligned>
 800b2a8:	1c43      	adds	r3, r0, #1
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	d14d      	bne.n	800b34a <_malloc_r+0xde>
 800b2ae:	6834      	ldr	r4, [r6, #0]
 800b2b0:	4626      	mov	r6, r4
 800b2b2:	2e00      	cmp	r6, #0
 800b2b4:	d140      	bne.n	800b338 <_malloc_r+0xcc>
 800b2b6:	6823      	ldr	r3, [r4, #0]
 800b2b8:	4631      	mov	r1, r6
 800b2ba:	4638      	mov	r0, r7
 800b2bc:	eb04 0803 	add.w	r8, r4, r3
 800b2c0:	f000 f9a4 	bl	800b60c <_sbrk_r>
 800b2c4:	4580      	cmp	r8, r0
 800b2c6:	d13a      	bne.n	800b33e <_malloc_r+0xd2>
 800b2c8:	6821      	ldr	r1, [r4, #0]
 800b2ca:	3503      	adds	r5, #3
 800b2cc:	1a6d      	subs	r5, r5, r1
 800b2ce:	f025 0503 	bic.w	r5, r5, #3
 800b2d2:	3508      	adds	r5, #8
 800b2d4:	2d0c      	cmp	r5, #12
 800b2d6:	bf38      	it	cc
 800b2d8:	250c      	movcc	r5, #12
 800b2da:	4629      	mov	r1, r5
 800b2dc:	4638      	mov	r0, r7
 800b2de:	f7ff ffa5 	bl	800b22c <sbrk_aligned>
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	d02b      	beq.n	800b33e <_malloc_r+0xd2>
 800b2e6:	6823      	ldr	r3, [r4, #0]
 800b2e8:	442b      	add	r3, r5
 800b2ea:	6023      	str	r3, [r4, #0]
 800b2ec:	e00e      	b.n	800b30c <_malloc_r+0xa0>
 800b2ee:	6822      	ldr	r2, [r4, #0]
 800b2f0:	1b52      	subs	r2, r2, r5
 800b2f2:	d41e      	bmi.n	800b332 <_malloc_r+0xc6>
 800b2f4:	2a0b      	cmp	r2, #11
 800b2f6:	d916      	bls.n	800b326 <_malloc_r+0xba>
 800b2f8:	1961      	adds	r1, r4, r5
 800b2fa:	42a3      	cmp	r3, r4
 800b2fc:	6025      	str	r5, [r4, #0]
 800b2fe:	bf18      	it	ne
 800b300:	6059      	strne	r1, [r3, #4]
 800b302:	6863      	ldr	r3, [r4, #4]
 800b304:	bf08      	it	eq
 800b306:	6031      	streq	r1, [r6, #0]
 800b308:	5162      	str	r2, [r4, r5]
 800b30a:	604b      	str	r3, [r1, #4]
 800b30c:	4638      	mov	r0, r7
 800b30e:	f104 060b 	add.w	r6, r4, #11
 800b312:	f000 f9ed 	bl	800b6f0 <__malloc_unlock>
 800b316:	f026 0607 	bic.w	r6, r6, #7
 800b31a:	1d23      	adds	r3, r4, #4
 800b31c:	1af2      	subs	r2, r6, r3
 800b31e:	d0b6      	beq.n	800b28e <_malloc_r+0x22>
 800b320:	1b9b      	subs	r3, r3, r6
 800b322:	50a3      	str	r3, [r4, r2]
 800b324:	e7b3      	b.n	800b28e <_malloc_r+0x22>
 800b326:	6862      	ldr	r2, [r4, #4]
 800b328:	42a3      	cmp	r3, r4
 800b32a:	bf0c      	ite	eq
 800b32c:	6032      	streq	r2, [r6, #0]
 800b32e:	605a      	strne	r2, [r3, #4]
 800b330:	e7ec      	b.n	800b30c <_malloc_r+0xa0>
 800b332:	4623      	mov	r3, r4
 800b334:	6864      	ldr	r4, [r4, #4]
 800b336:	e7b2      	b.n	800b29e <_malloc_r+0x32>
 800b338:	4634      	mov	r4, r6
 800b33a:	6876      	ldr	r6, [r6, #4]
 800b33c:	e7b9      	b.n	800b2b2 <_malloc_r+0x46>
 800b33e:	230c      	movs	r3, #12
 800b340:	603b      	str	r3, [r7, #0]
 800b342:	4638      	mov	r0, r7
 800b344:	f000 f9d4 	bl	800b6f0 <__malloc_unlock>
 800b348:	e7a1      	b.n	800b28e <_malloc_r+0x22>
 800b34a:	6025      	str	r5, [r4, #0]
 800b34c:	e7de      	b.n	800b30c <_malloc_r+0xa0>
 800b34e:	bf00      	nop
 800b350:	200006b4 	.word	0x200006b4

0800b354 <__ssputs_r>:
 800b354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b358:	688e      	ldr	r6, [r1, #8]
 800b35a:	429e      	cmp	r6, r3
 800b35c:	4682      	mov	sl, r0
 800b35e:	460c      	mov	r4, r1
 800b360:	4690      	mov	r8, r2
 800b362:	461f      	mov	r7, r3
 800b364:	d838      	bhi.n	800b3d8 <__ssputs_r+0x84>
 800b366:	898a      	ldrh	r2, [r1, #12]
 800b368:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b36c:	d032      	beq.n	800b3d4 <__ssputs_r+0x80>
 800b36e:	6825      	ldr	r5, [r4, #0]
 800b370:	6909      	ldr	r1, [r1, #16]
 800b372:	eba5 0901 	sub.w	r9, r5, r1
 800b376:	6965      	ldr	r5, [r4, #20]
 800b378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b37c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b380:	3301      	adds	r3, #1
 800b382:	444b      	add	r3, r9
 800b384:	106d      	asrs	r5, r5, #1
 800b386:	429d      	cmp	r5, r3
 800b388:	bf38      	it	cc
 800b38a:	461d      	movcc	r5, r3
 800b38c:	0553      	lsls	r3, r2, #21
 800b38e:	d531      	bpl.n	800b3f4 <__ssputs_r+0xa0>
 800b390:	4629      	mov	r1, r5
 800b392:	f7ff ff6b 	bl	800b26c <_malloc_r>
 800b396:	4606      	mov	r6, r0
 800b398:	b950      	cbnz	r0, 800b3b0 <__ssputs_r+0x5c>
 800b39a:	230c      	movs	r3, #12
 800b39c:	f8ca 3000 	str.w	r3, [sl]
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3a6:	81a3      	strh	r3, [r4, #12]
 800b3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3b0:	6921      	ldr	r1, [r4, #16]
 800b3b2:	464a      	mov	r2, r9
 800b3b4:	f7ff fb46 	bl	800aa44 <memcpy>
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3c2:	81a3      	strh	r3, [r4, #12]
 800b3c4:	6126      	str	r6, [r4, #16]
 800b3c6:	6165      	str	r5, [r4, #20]
 800b3c8:	444e      	add	r6, r9
 800b3ca:	eba5 0509 	sub.w	r5, r5, r9
 800b3ce:	6026      	str	r6, [r4, #0]
 800b3d0:	60a5      	str	r5, [r4, #8]
 800b3d2:	463e      	mov	r6, r7
 800b3d4:	42be      	cmp	r6, r7
 800b3d6:	d900      	bls.n	800b3da <__ssputs_r+0x86>
 800b3d8:	463e      	mov	r6, r7
 800b3da:	6820      	ldr	r0, [r4, #0]
 800b3dc:	4632      	mov	r2, r6
 800b3de:	4641      	mov	r1, r8
 800b3e0:	f000 f966 	bl	800b6b0 <memmove>
 800b3e4:	68a3      	ldr	r3, [r4, #8]
 800b3e6:	1b9b      	subs	r3, r3, r6
 800b3e8:	60a3      	str	r3, [r4, #8]
 800b3ea:	6823      	ldr	r3, [r4, #0]
 800b3ec:	4433      	add	r3, r6
 800b3ee:	6023      	str	r3, [r4, #0]
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	e7db      	b.n	800b3ac <__ssputs_r+0x58>
 800b3f4:	462a      	mov	r2, r5
 800b3f6:	f000 f981 	bl	800b6fc <_realloc_r>
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d1e1      	bne.n	800b3c4 <__ssputs_r+0x70>
 800b400:	6921      	ldr	r1, [r4, #16]
 800b402:	4650      	mov	r0, sl
 800b404:	f7ff fec6 	bl	800b194 <_free_r>
 800b408:	e7c7      	b.n	800b39a <__ssputs_r+0x46>
	...

0800b40c <_svfiprintf_r>:
 800b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b410:	4698      	mov	r8, r3
 800b412:	898b      	ldrh	r3, [r1, #12]
 800b414:	061b      	lsls	r3, r3, #24
 800b416:	b09d      	sub	sp, #116	; 0x74
 800b418:	4607      	mov	r7, r0
 800b41a:	460d      	mov	r5, r1
 800b41c:	4614      	mov	r4, r2
 800b41e:	d50e      	bpl.n	800b43e <_svfiprintf_r+0x32>
 800b420:	690b      	ldr	r3, [r1, #16]
 800b422:	b963      	cbnz	r3, 800b43e <_svfiprintf_r+0x32>
 800b424:	2140      	movs	r1, #64	; 0x40
 800b426:	f7ff ff21 	bl	800b26c <_malloc_r>
 800b42a:	6028      	str	r0, [r5, #0]
 800b42c:	6128      	str	r0, [r5, #16]
 800b42e:	b920      	cbnz	r0, 800b43a <_svfiprintf_r+0x2e>
 800b430:	230c      	movs	r3, #12
 800b432:	603b      	str	r3, [r7, #0]
 800b434:	f04f 30ff 	mov.w	r0, #4294967295
 800b438:	e0d1      	b.n	800b5de <_svfiprintf_r+0x1d2>
 800b43a:	2340      	movs	r3, #64	; 0x40
 800b43c:	616b      	str	r3, [r5, #20]
 800b43e:	2300      	movs	r3, #0
 800b440:	9309      	str	r3, [sp, #36]	; 0x24
 800b442:	2320      	movs	r3, #32
 800b444:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b448:	f8cd 800c 	str.w	r8, [sp, #12]
 800b44c:	2330      	movs	r3, #48	; 0x30
 800b44e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b5f8 <_svfiprintf_r+0x1ec>
 800b452:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b456:	f04f 0901 	mov.w	r9, #1
 800b45a:	4623      	mov	r3, r4
 800b45c:	469a      	mov	sl, r3
 800b45e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b462:	b10a      	cbz	r2, 800b468 <_svfiprintf_r+0x5c>
 800b464:	2a25      	cmp	r2, #37	; 0x25
 800b466:	d1f9      	bne.n	800b45c <_svfiprintf_r+0x50>
 800b468:	ebba 0b04 	subs.w	fp, sl, r4
 800b46c:	d00b      	beq.n	800b486 <_svfiprintf_r+0x7a>
 800b46e:	465b      	mov	r3, fp
 800b470:	4622      	mov	r2, r4
 800b472:	4629      	mov	r1, r5
 800b474:	4638      	mov	r0, r7
 800b476:	f7ff ff6d 	bl	800b354 <__ssputs_r>
 800b47a:	3001      	adds	r0, #1
 800b47c:	f000 80aa 	beq.w	800b5d4 <_svfiprintf_r+0x1c8>
 800b480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b482:	445a      	add	r2, fp
 800b484:	9209      	str	r2, [sp, #36]	; 0x24
 800b486:	f89a 3000 	ldrb.w	r3, [sl]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f000 80a2 	beq.w	800b5d4 <_svfiprintf_r+0x1c8>
 800b490:	2300      	movs	r3, #0
 800b492:	f04f 32ff 	mov.w	r2, #4294967295
 800b496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b49a:	f10a 0a01 	add.w	sl, sl, #1
 800b49e:	9304      	str	r3, [sp, #16]
 800b4a0:	9307      	str	r3, [sp, #28]
 800b4a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4a6:	931a      	str	r3, [sp, #104]	; 0x68
 800b4a8:	4654      	mov	r4, sl
 800b4aa:	2205      	movs	r2, #5
 800b4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b0:	4851      	ldr	r0, [pc, #324]	; (800b5f8 <_svfiprintf_r+0x1ec>)
 800b4b2:	f7f4 feb5 	bl	8000220 <memchr>
 800b4b6:	9a04      	ldr	r2, [sp, #16]
 800b4b8:	b9d8      	cbnz	r0, 800b4f2 <_svfiprintf_r+0xe6>
 800b4ba:	06d0      	lsls	r0, r2, #27
 800b4bc:	bf44      	itt	mi
 800b4be:	2320      	movmi	r3, #32
 800b4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4c4:	0711      	lsls	r1, r2, #28
 800b4c6:	bf44      	itt	mi
 800b4c8:	232b      	movmi	r3, #43	; 0x2b
 800b4ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4d4:	d015      	beq.n	800b502 <_svfiprintf_r+0xf6>
 800b4d6:	9a07      	ldr	r2, [sp, #28]
 800b4d8:	4654      	mov	r4, sl
 800b4da:	2000      	movs	r0, #0
 800b4dc:	f04f 0c0a 	mov.w	ip, #10
 800b4e0:	4621      	mov	r1, r4
 800b4e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4e6:	3b30      	subs	r3, #48	; 0x30
 800b4e8:	2b09      	cmp	r3, #9
 800b4ea:	d94e      	bls.n	800b58a <_svfiprintf_r+0x17e>
 800b4ec:	b1b0      	cbz	r0, 800b51c <_svfiprintf_r+0x110>
 800b4ee:	9207      	str	r2, [sp, #28]
 800b4f0:	e014      	b.n	800b51c <_svfiprintf_r+0x110>
 800b4f2:	eba0 0308 	sub.w	r3, r0, r8
 800b4f6:	fa09 f303 	lsl.w	r3, r9, r3
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	9304      	str	r3, [sp, #16]
 800b4fe:	46a2      	mov	sl, r4
 800b500:	e7d2      	b.n	800b4a8 <_svfiprintf_r+0x9c>
 800b502:	9b03      	ldr	r3, [sp, #12]
 800b504:	1d19      	adds	r1, r3, #4
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	9103      	str	r1, [sp, #12]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	bfbb      	ittet	lt
 800b50e:	425b      	neglt	r3, r3
 800b510:	f042 0202 	orrlt.w	r2, r2, #2
 800b514:	9307      	strge	r3, [sp, #28]
 800b516:	9307      	strlt	r3, [sp, #28]
 800b518:	bfb8      	it	lt
 800b51a:	9204      	strlt	r2, [sp, #16]
 800b51c:	7823      	ldrb	r3, [r4, #0]
 800b51e:	2b2e      	cmp	r3, #46	; 0x2e
 800b520:	d10c      	bne.n	800b53c <_svfiprintf_r+0x130>
 800b522:	7863      	ldrb	r3, [r4, #1]
 800b524:	2b2a      	cmp	r3, #42	; 0x2a
 800b526:	d135      	bne.n	800b594 <_svfiprintf_r+0x188>
 800b528:	9b03      	ldr	r3, [sp, #12]
 800b52a:	1d1a      	adds	r2, r3, #4
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	9203      	str	r2, [sp, #12]
 800b530:	2b00      	cmp	r3, #0
 800b532:	bfb8      	it	lt
 800b534:	f04f 33ff 	movlt.w	r3, #4294967295
 800b538:	3402      	adds	r4, #2
 800b53a:	9305      	str	r3, [sp, #20]
 800b53c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b608 <_svfiprintf_r+0x1fc>
 800b540:	7821      	ldrb	r1, [r4, #0]
 800b542:	2203      	movs	r2, #3
 800b544:	4650      	mov	r0, sl
 800b546:	f7f4 fe6b 	bl	8000220 <memchr>
 800b54a:	b140      	cbz	r0, 800b55e <_svfiprintf_r+0x152>
 800b54c:	2340      	movs	r3, #64	; 0x40
 800b54e:	eba0 000a 	sub.w	r0, r0, sl
 800b552:	fa03 f000 	lsl.w	r0, r3, r0
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	4303      	orrs	r3, r0
 800b55a:	3401      	adds	r4, #1
 800b55c:	9304      	str	r3, [sp, #16]
 800b55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b562:	4826      	ldr	r0, [pc, #152]	; (800b5fc <_svfiprintf_r+0x1f0>)
 800b564:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b568:	2206      	movs	r2, #6
 800b56a:	f7f4 fe59 	bl	8000220 <memchr>
 800b56e:	2800      	cmp	r0, #0
 800b570:	d038      	beq.n	800b5e4 <_svfiprintf_r+0x1d8>
 800b572:	4b23      	ldr	r3, [pc, #140]	; (800b600 <_svfiprintf_r+0x1f4>)
 800b574:	bb1b      	cbnz	r3, 800b5be <_svfiprintf_r+0x1b2>
 800b576:	9b03      	ldr	r3, [sp, #12]
 800b578:	3307      	adds	r3, #7
 800b57a:	f023 0307 	bic.w	r3, r3, #7
 800b57e:	3308      	adds	r3, #8
 800b580:	9303      	str	r3, [sp, #12]
 800b582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b584:	4433      	add	r3, r6
 800b586:	9309      	str	r3, [sp, #36]	; 0x24
 800b588:	e767      	b.n	800b45a <_svfiprintf_r+0x4e>
 800b58a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b58e:	460c      	mov	r4, r1
 800b590:	2001      	movs	r0, #1
 800b592:	e7a5      	b.n	800b4e0 <_svfiprintf_r+0xd4>
 800b594:	2300      	movs	r3, #0
 800b596:	3401      	adds	r4, #1
 800b598:	9305      	str	r3, [sp, #20]
 800b59a:	4619      	mov	r1, r3
 800b59c:	f04f 0c0a 	mov.w	ip, #10
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5a6:	3a30      	subs	r2, #48	; 0x30
 800b5a8:	2a09      	cmp	r2, #9
 800b5aa:	d903      	bls.n	800b5b4 <_svfiprintf_r+0x1a8>
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d0c5      	beq.n	800b53c <_svfiprintf_r+0x130>
 800b5b0:	9105      	str	r1, [sp, #20]
 800b5b2:	e7c3      	b.n	800b53c <_svfiprintf_r+0x130>
 800b5b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e7f0      	b.n	800b5a0 <_svfiprintf_r+0x194>
 800b5be:	ab03      	add	r3, sp, #12
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	462a      	mov	r2, r5
 800b5c4:	4b0f      	ldr	r3, [pc, #60]	; (800b604 <_svfiprintf_r+0x1f8>)
 800b5c6:	a904      	add	r1, sp, #16
 800b5c8:	4638      	mov	r0, r7
 800b5ca:	f7fd ffcb 	bl	8009564 <_printf_float>
 800b5ce:	1c42      	adds	r2, r0, #1
 800b5d0:	4606      	mov	r6, r0
 800b5d2:	d1d6      	bne.n	800b582 <_svfiprintf_r+0x176>
 800b5d4:	89ab      	ldrh	r3, [r5, #12]
 800b5d6:	065b      	lsls	r3, r3, #25
 800b5d8:	f53f af2c 	bmi.w	800b434 <_svfiprintf_r+0x28>
 800b5dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5de:	b01d      	add	sp, #116	; 0x74
 800b5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e4:	ab03      	add	r3, sp, #12
 800b5e6:	9300      	str	r3, [sp, #0]
 800b5e8:	462a      	mov	r2, r5
 800b5ea:	4b06      	ldr	r3, [pc, #24]	; (800b604 <_svfiprintf_r+0x1f8>)
 800b5ec:	a904      	add	r1, sp, #16
 800b5ee:	4638      	mov	r0, r7
 800b5f0:	f7fe fa5c 	bl	8009aac <_printf_i>
 800b5f4:	e7eb      	b.n	800b5ce <_svfiprintf_r+0x1c2>
 800b5f6:	bf00      	nop
 800b5f8:	0800d9b4 	.word	0x0800d9b4
 800b5fc:	0800d9be 	.word	0x0800d9be
 800b600:	08009565 	.word	0x08009565
 800b604:	0800b355 	.word	0x0800b355
 800b608:	0800d9ba 	.word	0x0800d9ba

0800b60c <_sbrk_r>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4d06      	ldr	r5, [pc, #24]	; (800b628 <_sbrk_r+0x1c>)
 800b610:	2300      	movs	r3, #0
 800b612:	4604      	mov	r4, r0
 800b614:	4608      	mov	r0, r1
 800b616:	602b      	str	r3, [r5, #0]
 800b618:	f7f8 fad8 	bl	8003bcc <_sbrk>
 800b61c:	1c43      	adds	r3, r0, #1
 800b61e:	d102      	bne.n	800b626 <_sbrk_r+0x1a>
 800b620:	682b      	ldr	r3, [r5, #0]
 800b622:	b103      	cbz	r3, 800b626 <_sbrk_r+0x1a>
 800b624:	6023      	str	r3, [r4, #0]
 800b626:	bd38      	pop	{r3, r4, r5, pc}
 800b628:	200006bc 	.word	0x200006bc

0800b62c <__assert_func>:
 800b62c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b62e:	4614      	mov	r4, r2
 800b630:	461a      	mov	r2, r3
 800b632:	4b09      	ldr	r3, [pc, #36]	; (800b658 <__assert_func+0x2c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4605      	mov	r5, r0
 800b638:	68d8      	ldr	r0, [r3, #12]
 800b63a:	b14c      	cbz	r4, 800b650 <__assert_func+0x24>
 800b63c:	4b07      	ldr	r3, [pc, #28]	; (800b65c <__assert_func+0x30>)
 800b63e:	9100      	str	r1, [sp, #0]
 800b640:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b644:	4906      	ldr	r1, [pc, #24]	; (800b660 <__assert_func+0x34>)
 800b646:	462b      	mov	r3, r5
 800b648:	f000 f80e 	bl	800b668 <fiprintf>
 800b64c:	f000 faac 	bl	800bba8 <abort>
 800b650:	4b04      	ldr	r3, [pc, #16]	; (800b664 <__assert_func+0x38>)
 800b652:	461c      	mov	r4, r3
 800b654:	e7f3      	b.n	800b63e <__assert_func+0x12>
 800b656:	bf00      	nop
 800b658:	20000058 	.word	0x20000058
 800b65c:	0800d9c5 	.word	0x0800d9c5
 800b660:	0800d9d2 	.word	0x0800d9d2
 800b664:	0800da00 	.word	0x0800da00

0800b668 <fiprintf>:
 800b668:	b40e      	push	{r1, r2, r3}
 800b66a:	b503      	push	{r0, r1, lr}
 800b66c:	4601      	mov	r1, r0
 800b66e:	ab03      	add	r3, sp, #12
 800b670:	4805      	ldr	r0, [pc, #20]	; (800b688 <fiprintf+0x20>)
 800b672:	f853 2b04 	ldr.w	r2, [r3], #4
 800b676:	6800      	ldr	r0, [r0, #0]
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	f000 f897 	bl	800b7ac <_vfiprintf_r>
 800b67e:	b002      	add	sp, #8
 800b680:	f85d eb04 	ldr.w	lr, [sp], #4
 800b684:	b003      	add	sp, #12
 800b686:	4770      	bx	lr
 800b688:	20000058 	.word	0x20000058

0800b68c <__ascii_mbtowc>:
 800b68c:	b082      	sub	sp, #8
 800b68e:	b901      	cbnz	r1, 800b692 <__ascii_mbtowc+0x6>
 800b690:	a901      	add	r1, sp, #4
 800b692:	b142      	cbz	r2, 800b6a6 <__ascii_mbtowc+0x1a>
 800b694:	b14b      	cbz	r3, 800b6aa <__ascii_mbtowc+0x1e>
 800b696:	7813      	ldrb	r3, [r2, #0]
 800b698:	600b      	str	r3, [r1, #0]
 800b69a:	7812      	ldrb	r2, [r2, #0]
 800b69c:	1e10      	subs	r0, r2, #0
 800b69e:	bf18      	it	ne
 800b6a0:	2001      	movne	r0, #1
 800b6a2:	b002      	add	sp, #8
 800b6a4:	4770      	bx	lr
 800b6a6:	4610      	mov	r0, r2
 800b6a8:	e7fb      	b.n	800b6a2 <__ascii_mbtowc+0x16>
 800b6aa:	f06f 0001 	mvn.w	r0, #1
 800b6ae:	e7f8      	b.n	800b6a2 <__ascii_mbtowc+0x16>

0800b6b0 <memmove>:
 800b6b0:	4288      	cmp	r0, r1
 800b6b2:	b510      	push	{r4, lr}
 800b6b4:	eb01 0402 	add.w	r4, r1, r2
 800b6b8:	d902      	bls.n	800b6c0 <memmove+0x10>
 800b6ba:	4284      	cmp	r4, r0
 800b6bc:	4623      	mov	r3, r4
 800b6be:	d807      	bhi.n	800b6d0 <memmove+0x20>
 800b6c0:	1e43      	subs	r3, r0, #1
 800b6c2:	42a1      	cmp	r1, r4
 800b6c4:	d008      	beq.n	800b6d8 <memmove+0x28>
 800b6c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6ce:	e7f8      	b.n	800b6c2 <memmove+0x12>
 800b6d0:	4402      	add	r2, r0
 800b6d2:	4601      	mov	r1, r0
 800b6d4:	428a      	cmp	r2, r1
 800b6d6:	d100      	bne.n	800b6da <memmove+0x2a>
 800b6d8:	bd10      	pop	{r4, pc}
 800b6da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6e2:	e7f7      	b.n	800b6d4 <memmove+0x24>

0800b6e4 <__malloc_lock>:
 800b6e4:	4801      	ldr	r0, [pc, #4]	; (800b6ec <__malloc_lock+0x8>)
 800b6e6:	f000 bc1f 	b.w	800bf28 <__retarget_lock_acquire_recursive>
 800b6ea:	bf00      	nop
 800b6ec:	200006c0 	.word	0x200006c0

0800b6f0 <__malloc_unlock>:
 800b6f0:	4801      	ldr	r0, [pc, #4]	; (800b6f8 <__malloc_unlock+0x8>)
 800b6f2:	f000 bc1a 	b.w	800bf2a <__retarget_lock_release_recursive>
 800b6f6:	bf00      	nop
 800b6f8:	200006c0 	.word	0x200006c0

0800b6fc <_realloc_r>:
 800b6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b700:	4680      	mov	r8, r0
 800b702:	4614      	mov	r4, r2
 800b704:	460e      	mov	r6, r1
 800b706:	b921      	cbnz	r1, 800b712 <_realloc_r+0x16>
 800b708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b70c:	4611      	mov	r1, r2
 800b70e:	f7ff bdad 	b.w	800b26c <_malloc_r>
 800b712:	b92a      	cbnz	r2, 800b720 <_realloc_r+0x24>
 800b714:	f7ff fd3e 	bl	800b194 <_free_r>
 800b718:	4625      	mov	r5, r4
 800b71a:	4628      	mov	r0, r5
 800b71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b720:	f000 fc6a 	bl	800bff8 <_malloc_usable_size_r>
 800b724:	4284      	cmp	r4, r0
 800b726:	4607      	mov	r7, r0
 800b728:	d802      	bhi.n	800b730 <_realloc_r+0x34>
 800b72a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b72e:	d812      	bhi.n	800b756 <_realloc_r+0x5a>
 800b730:	4621      	mov	r1, r4
 800b732:	4640      	mov	r0, r8
 800b734:	f7ff fd9a 	bl	800b26c <_malloc_r>
 800b738:	4605      	mov	r5, r0
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d0ed      	beq.n	800b71a <_realloc_r+0x1e>
 800b73e:	42bc      	cmp	r4, r7
 800b740:	4622      	mov	r2, r4
 800b742:	4631      	mov	r1, r6
 800b744:	bf28      	it	cs
 800b746:	463a      	movcs	r2, r7
 800b748:	f7ff f97c 	bl	800aa44 <memcpy>
 800b74c:	4631      	mov	r1, r6
 800b74e:	4640      	mov	r0, r8
 800b750:	f7ff fd20 	bl	800b194 <_free_r>
 800b754:	e7e1      	b.n	800b71a <_realloc_r+0x1e>
 800b756:	4635      	mov	r5, r6
 800b758:	e7df      	b.n	800b71a <_realloc_r+0x1e>

0800b75a <__sfputc_r>:
 800b75a:	6893      	ldr	r3, [r2, #8]
 800b75c:	3b01      	subs	r3, #1
 800b75e:	2b00      	cmp	r3, #0
 800b760:	b410      	push	{r4}
 800b762:	6093      	str	r3, [r2, #8]
 800b764:	da08      	bge.n	800b778 <__sfputc_r+0x1e>
 800b766:	6994      	ldr	r4, [r2, #24]
 800b768:	42a3      	cmp	r3, r4
 800b76a:	db01      	blt.n	800b770 <__sfputc_r+0x16>
 800b76c:	290a      	cmp	r1, #10
 800b76e:	d103      	bne.n	800b778 <__sfputc_r+0x1e>
 800b770:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b774:	f000 b94a 	b.w	800ba0c <__swbuf_r>
 800b778:	6813      	ldr	r3, [r2, #0]
 800b77a:	1c58      	adds	r0, r3, #1
 800b77c:	6010      	str	r0, [r2, #0]
 800b77e:	7019      	strb	r1, [r3, #0]
 800b780:	4608      	mov	r0, r1
 800b782:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <__sfputs_r>:
 800b788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78a:	4606      	mov	r6, r0
 800b78c:	460f      	mov	r7, r1
 800b78e:	4614      	mov	r4, r2
 800b790:	18d5      	adds	r5, r2, r3
 800b792:	42ac      	cmp	r4, r5
 800b794:	d101      	bne.n	800b79a <__sfputs_r+0x12>
 800b796:	2000      	movs	r0, #0
 800b798:	e007      	b.n	800b7aa <__sfputs_r+0x22>
 800b79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b79e:	463a      	mov	r2, r7
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f7ff ffda 	bl	800b75a <__sfputc_r>
 800b7a6:	1c43      	adds	r3, r0, #1
 800b7a8:	d1f3      	bne.n	800b792 <__sfputs_r+0xa>
 800b7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b7ac <_vfiprintf_r>:
 800b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b0:	460d      	mov	r5, r1
 800b7b2:	b09d      	sub	sp, #116	; 0x74
 800b7b4:	4614      	mov	r4, r2
 800b7b6:	4698      	mov	r8, r3
 800b7b8:	4606      	mov	r6, r0
 800b7ba:	b118      	cbz	r0, 800b7c4 <_vfiprintf_r+0x18>
 800b7bc:	6983      	ldr	r3, [r0, #24]
 800b7be:	b90b      	cbnz	r3, 800b7c4 <_vfiprintf_r+0x18>
 800b7c0:	f000 fb14 	bl	800bdec <__sinit>
 800b7c4:	4b89      	ldr	r3, [pc, #548]	; (800b9ec <_vfiprintf_r+0x240>)
 800b7c6:	429d      	cmp	r5, r3
 800b7c8:	d11b      	bne.n	800b802 <_vfiprintf_r+0x56>
 800b7ca:	6875      	ldr	r5, [r6, #4]
 800b7cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7ce:	07d9      	lsls	r1, r3, #31
 800b7d0:	d405      	bmi.n	800b7de <_vfiprintf_r+0x32>
 800b7d2:	89ab      	ldrh	r3, [r5, #12]
 800b7d4:	059a      	lsls	r2, r3, #22
 800b7d6:	d402      	bmi.n	800b7de <_vfiprintf_r+0x32>
 800b7d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7da:	f000 fba5 	bl	800bf28 <__retarget_lock_acquire_recursive>
 800b7de:	89ab      	ldrh	r3, [r5, #12]
 800b7e0:	071b      	lsls	r3, r3, #28
 800b7e2:	d501      	bpl.n	800b7e8 <_vfiprintf_r+0x3c>
 800b7e4:	692b      	ldr	r3, [r5, #16]
 800b7e6:	b9eb      	cbnz	r3, 800b824 <_vfiprintf_r+0x78>
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f000 f96e 	bl	800bacc <__swsetup_r>
 800b7f0:	b1c0      	cbz	r0, 800b824 <_vfiprintf_r+0x78>
 800b7f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7f4:	07dc      	lsls	r4, r3, #31
 800b7f6:	d50e      	bpl.n	800b816 <_vfiprintf_r+0x6a>
 800b7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fc:	b01d      	add	sp, #116	; 0x74
 800b7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b802:	4b7b      	ldr	r3, [pc, #492]	; (800b9f0 <_vfiprintf_r+0x244>)
 800b804:	429d      	cmp	r5, r3
 800b806:	d101      	bne.n	800b80c <_vfiprintf_r+0x60>
 800b808:	68b5      	ldr	r5, [r6, #8]
 800b80a:	e7df      	b.n	800b7cc <_vfiprintf_r+0x20>
 800b80c:	4b79      	ldr	r3, [pc, #484]	; (800b9f4 <_vfiprintf_r+0x248>)
 800b80e:	429d      	cmp	r5, r3
 800b810:	bf08      	it	eq
 800b812:	68f5      	ldreq	r5, [r6, #12]
 800b814:	e7da      	b.n	800b7cc <_vfiprintf_r+0x20>
 800b816:	89ab      	ldrh	r3, [r5, #12]
 800b818:	0598      	lsls	r0, r3, #22
 800b81a:	d4ed      	bmi.n	800b7f8 <_vfiprintf_r+0x4c>
 800b81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b81e:	f000 fb84 	bl	800bf2a <__retarget_lock_release_recursive>
 800b822:	e7e9      	b.n	800b7f8 <_vfiprintf_r+0x4c>
 800b824:	2300      	movs	r3, #0
 800b826:	9309      	str	r3, [sp, #36]	; 0x24
 800b828:	2320      	movs	r3, #32
 800b82a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b82e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b832:	2330      	movs	r3, #48	; 0x30
 800b834:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b9f8 <_vfiprintf_r+0x24c>
 800b838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b83c:	f04f 0901 	mov.w	r9, #1
 800b840:	4623      	mov	r3, r4
 800b842:	469a      	mov	sl, r3
 800b844:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b848:	b10a      	cbz	r2, 800b84e <_vfiprintf_r+0xa2>
 800b84a:	2a25      	cmp	r2, #37	; 0x25
 800b84c:	d1f9      	bne.n	800b842 <_vfiprintf_r+0x96>
 800b84e:	ebba 0b04 	subs.w	fp, sl, r4
 800b852:	d00b      	beq.n	800b86c <_vfiprintf_r+0xc0>
 800b854:	465b      	mov	r3, fp
 800b856:	4622      	mov	r2, r4
 800b858:	4629      	mov	r1, r5
 800b85a:	4630      	mov	r0, r6
 800b85c:	f7ff ff94 	bl	800b788 <__sfputs_r>
 800b860:	3001      	adds	r0, #1
 800b862:	f000 80aa 	beq.w	800b9ba <_vfiprintf_r+0x20e>
 800b866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b868:	445a      	add	r2, fp
 800b86a:	9209      	str	r2, [sp, #36]	; 0x24
 800b86c:	f89a 3000 	ldrb.w	r3, [sl]
 800b870:	2b00      	cmp	r3, #0
 800b872:	f000 80a2 	beq.w	800b9ba <_vfiprintf_r+0x20e>
 800b876:	2300      	movs	r3, #0
 800b878:	f04f 32ff 	mov.w	r2, #4294967295
 800b87c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b880:	f10a 0a01 	add.w	sl, sl, #1
 800b884:	9304      	str	r3, [sp, #16]
 800b886:	9307      	str	r3, [sp, #28]
 800b888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b88c:	931a      	str	r3, [sp, #104]	; 0x68
 800b88e:	4654      	mov	r4, sl
 800b890:	2205      	movs	r2, #5
 800b892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b896:	4858      	ldr	r0, [pc, #352]	; (800b9f8 <_vfiprintf_r+0x24c>)
 800b898:	f7f4 fcc2 	bl	8000220 <memchr>
 800b89c:	9a04      	ldr	r2, [sp, #16]
 800b89e:	b9d8      	cbnz	r0, 800b8d8 <_vfiprintf_r+0x12c>
 800b8a0:	06d1      	lsls	r1, r2, #27
 800b8a2:	bf44      	itt	mi
 800b8a4:	2320      	movmi	r3, #32
 800b8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8aa:	0713      	lsls	r3, r2, #28
 800b8ac:	bf44      	itt	mi
 800b8ae:	232b      	movmi	r3, #43	; 0x2b
 800b8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b8b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ba:	d015      	beq.n	800b8e8 <_vfiprintf_r+0x13c>
 800b8bc:	9a07      	ldr	r2, [sp, #28]
 800b8be:	4654      	mov	r4, sl
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	f04f 0c0a 	mov.w	ip, #10
 800b8c6:	4621      	mov	r1, r4
 800b8c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8cc:	3b30      	subs	r3, #48	; 0x30
 800b8ce:	2b09      	cmp	r3, #9
 800b8d0:	d94e      	bls.n	800b970 <_vfiprintf_r+0x1c4>
 800b8d2:	b1b0      	cbz	r0, 800b902 <_vfiprintf_r+0x156>
 800b8d4:	9207      	str	r2, [sp, #28]
 800b8d6:	e014      	b.n	800b902 <_vfiprintf_r+0x156>
 800b8d8:	eba0 0308 	sub.w	r3, r0, r8
 800b8dc:	fa09 f303 	lsl.w	r3, r9, r3
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	9304      	str	r3, [sp, #16]
 800b8e4:	46a2      	mov	sl, r4
 800b8e6:	e7d2      	b.n	800b88e <_vfiprintf_r+0xe2>
 800b8e8:	9b03      	ldr	r3, [sp, #12]
 800b8ea:	1d19      	adds	r1, r3, #4
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	9103      	str	r1, [sp, #12]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	bfbb      	ittet	lt
 800b8f4:	425b      	neglt	r3, r3
 800b8f6:	f042 0202 	orrlt.w	r2, r2, #2
 800b8fa:	9307      	strge	r3, [sp, #28]
 800b8fc:	9307      	strlt	r3, [sp, #28]
 800b8fe:	bfb8      	it	lt
 800b900:	9204      	strlt	r2, [sp, #16]
 800b902:	7823      	ldrb	r3, [r4, #0]
 800b904:	2b2e      	cmp	r3, #46	; 0x2e
 800b906:	d10c      	bne.n	800b922 <_vfiprintf_r+0x176>
 800b908:	7863      	ldrb	r3, [r4, #1]
 800b90a:	2b2a      	cmp	r3, #42	; 0x2a
 800b90c:	d135      	bne.n	800b97a <_vfiprintf_r+0x1ce>
 800b90e:	9b03      	ldr	r3, [sp, #12]
 800b910:	1d1a      	adds	r2, r3, #4
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	9203      	str	r2, [sp, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	bfb8      	it	lt
 800b91a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b91e:	3402      	adds	r4, #2
 800b920:	9305      	str	r3, [sp, #20]
 800b922:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba08 <_vfiprintf_r+0x25c>
 800b926:	7821      	ldrb	r1, [r4, #0]
 800b928:	2203      	movs	r2, #3
 800b92a:	4650      	mov	r0, sl
 800b92c:	f7f4 fc78 	bl	8000220 <memchr>
 800b930:	b140      	cbz	r0, 800b944 <_vfiprintf_r+0x198>
 800b932:	2340      	movs	r3, #64	; 0x40
 800b934:	eba0 000a 	sub.w	r0, r0, sl
 800b938:	fa03 f000 	lsl.w	r0, r3, r0
 800b93c:	9b04      	ldr	r3, [sp, #16]
 800b93e:	4303      	orrs	r3, r0
 800b940:	3401      	adds	r4, #1
 800b942:	9304      	str	r3, [sp, #16]
 800b944:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b948:	482c      	ldr	r0, [pc, #176]	; (800b9fc <_vfiprintf_r+0x250>)
 800b94a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b94e:	2206      	movs	r2, #6
 800b950:	f7f4 fc66 	bl	8000220 <memchr>
 800b954:	2800      	cmp	r0, #0
 800b956:	d03f      	beq.n	800b9d8 <_vfiprintf_r+0x22c>
 800b958:	4b29      	ldr	r3, [pc, #164]	; (800ba00 <_vfiprintf_r+0x254>)
 800b95a:	bb1b      	cbnz	r3, 800b9a4 <_vfiprintf_r+0x1f8>
 800b95c:	9b03      	ldr	r3, [sp, #12]
 800b95e:	3307      	adds	r3, #7
 800b960:	f023 0307 	bic.w	r3, r3, #7
 800b964:	3308      	adds	r3, #8
 800b966:	9303      	str	r3, [sp, #12]
 800b968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b96a:	443b      	add	r3, r7
 800b96c:	9309      	str	r3, [sp, #36]	; 0x24
 800b96e:	e767      	b.n	800b840 <_vfiprintf_r+0x94>
 800b970:	fb0c 3202 	mla	r2, ip, r2, r3
 800b974:	460c      	mov	r4, r1
 800b976:	2001      	movs	r0, #1
 800b978:	e7a5      	b.n	800b8c6 <_vfiprintf_r+0x11a>
 800b97a:	2300      	movs	r3, #0
 800b97c:	3401      	adds	r4, #1
 800b97e:	9305      	str	r3, [sp, #20]
 800b980:	4619      	mov	r1, r3
 800b982:	f04f 0c0a 	mov.w	ip, #10
 800b986:	4620      	mov	r0, r4
 800b988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b98c:	3a30      	subs	r2, #48	; 0x30
 800b98e:	2a09      	cmp	r2, #9
 800b990:	d903      	bls.n	800b99a <_vfiprintf_r+0x1ee>
 800b992:	2b00      	cmp	r3, #0
 800b994:	d0c5      	beq.n	800b922 <_vfiprintf_r+0x176>
 800b996:	9105      	str	r1, [sp, #20]
 800b998:	e7c3      	b.n	800b922 <_vfiprintf_r+0x176>
 800b99a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b99e:	4604      	mov	r4, r0
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e7f0      	b.n	800b986 <_vfiprintf_r+0x1da>
 800b9a4:	ab03      	add	r3, sp, #12
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	462a      	mov	r2, r5
 800b9aa:	4b16      	ldr	r3, [pc, #88]	; (800ba04 <_vfiprintf_r+0x258>)
 800b9ac:	a904      	add	r1, sp, #16
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	f7fd fdd8 	bl	8009564 <_printf_float>
 800b9b4:	4607      	mov	r7, r0
 800b9b6:	1c78      	adds	r0, r7, #1
 800b9b8:	d1d6      	bne.n	800b968 <_vfiprintf_r+0x1bc>
 800b9ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9bc:	07d9      	lsls	r1, r3, #31
 800b9be:	d405      	bmi.n	800b9cc <_vfiprintf_r+0x220>
 800b9c0:	89ab      	ldrh	r3, [r5, #12]
 800b9c2:	059a      	lsls	r2, r3, #22
 800b9c4:	d402      	bmi.n	800b9cc <_vfiprintf_r+0x220>
 800b9c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9c8:	f000 faaf 	bl	800bf2a <__retarget_lock_release_recursive>
 800b9cc:	89ab      	ldrh	r3, [r5, #12]
 800b9ce:	065b      	lsls	r3, r3, #25
 800b9d0:	f53f af12 	bmi.w	800b7f8 <_vfiprintf_r+0x4c>
 800b9d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9d6:	e711      	b.n	800b7fc <_vfiprintf_r+0x50>
 800b9d8:	ab03      	add	r3, sp, #12
 800b9da:	9300      	str	r3, [sp, #0]
 800b9dc:	462a      	mov	r2, r5
 800b9de:	4b09      	ldr	r3, [pc, #36]	; (800ba04 <_vfiprintf_r+0x258>)
 800b9e0:	a904      	add	r1, sp, #16
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	f7fe f862 	bl	8009aac <_printf_i>
 800b9e8:	e7e4      	b.n	800b9b4 <_vfiprintf_r+0x208>
 800b9ea:	bf00      	nop
 800b9ec:	0800db2c 	.word	0x0800db2c
 800b9f0:	0800db4c 	.word	0x0800db4c
 800b9f4:	0800db0c 	.word	0x0800db0c
 800b9f8:	0800d9b4 	.word	0x0800d9b4
 800b9fc:	0800d9be 	.word	0x0800d9be
 800ba00:	08009565 	.word	0x08009565
 800ba04:	0800b789 	.word	0x0800b789
 800ba08:	0800d9ba 	.word	0x0800d9ba

0800ba0c <__swbuf_r>:
 800ba0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0e:	460e      	mov	r6, r1
 800ba10:	4614      	mov	r4, r2
 800ba12:	4605      	mov	r5, r0
 800ba14:	b118      	cbz	r0, 800ba1e <__swbuf_r+0x12>
 800ba16:	6983      	ldr	r3, [r0, #24]
 800ba18:	b90b      	cbnz	r3, 800ba1e <__swbuf_r+0x12>
 800ba1a:	f000 f9e7 	bl	800bdec <__sinit>
 800ba1e:	4b21      	ldr	r3, [pc, #132]	; (800baa4 <__swbuf_r+0x98>)
 800ba20:	429c      	cmp	r4, r3
 800ba22:	d12b      	bne.n	800ba7c <__swbuf_r+0x70>
 800ba24:	686c      	ldr	r4, [r5, #4]
 800ba26:	69a3      	ldr	r3, [r4, #24]
 800ba28:	60a3      	str	r3, [r4, #8]
 800ba2a:	89a3      	ldrh	r3, [r4, #12]
 800ba2c:	071a      	lsls	r2, r3, #28
 800ba2e:	d52f      	bpl.n	800ba90 <__swbuf_r+0x84>
 800ba30:	6923      	ldr	r3, [r4, #16]
 800ba32:	b36b      	cbz	r3, 800ba90 <__swbuf_r+0x84>
 800ba34:	6923      	ldr	r3, [r4, #16]
 800ba36:	6820      	ldr	r0, [r4, #0]
 800ba38:	1ac0      	subs	r0, r0, r3
 800ba3a:	6963      	ldr	r3, [r4, #20]
 800ba3c:	b2f6      	uxtb	r6, r6
 800ba3e:	4283      	cmp	r3, r0
 800ba40:	4637      	mov	r7, r6
 800ba42:	dc04      	bgt.n	800ba4e <__swbuf_r+0x42>
 800ba44:	4621      	mov	r1, r4
 800ba46:	4628      	mov	r0, r5
 800ba48:	f000 f93c 	bl	800bcc4 <_fflush_r>
 800ba4c:	bb30      	cbnz	r0, 800ba9c <__swbuf_r+0x90>
 800ba4e:	68a3      	ldr	r3, [r4, #8]
 800ba50:	3b01      	subs	r3, #1
 800ba52:	60a3      	str	r3, [r4, #8]
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	1c5a      	adds	r2, r3, #1
 800ba58:	6022      	str	r2, [r4, #0]
 800ba5a:	701e      	strb	r6, [r3, #0]
 800ba5c:	6963      	ldr	r3, [r4, #20]
 800ba5e:	3001      	adds	r0, #1
 800ba60:	4283      	cmp	r3, r0
 800ba62:	d004      	beq.n	800ba6e <__swbuf_r+0x62>
 800ba64:	89a3      	ldrh	r3, [r4, #12]
 800ba66:	07db      	lsls	r3, r3, #31
 800ba68:	d506      	bpl.n	800ba78 <__swbuf_r+0x6c>
 800ba6a:	2e0a      	cmp	r6, #10
 800ba6c:	d104      	bne.n	800ba78 <__swbuf_r+0x6c>
 800ba6e:	4621      	mov	r1, r4
 800ba70:	4628      	mov	r0, r5
 800ba72:	f000 f927 	bl	800bcc4 <_fflush_r>
 800ba76:	b988      	cbnz	r0, 800ba9c <__swbuf_r+0x90>
 800ba78:	4638      	mov	r0, r7
 800ba7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba7c:	4b0a      	ldr	r3, [pc, #40]	; (800baa8 <__swbuf_r+0x9c>)
 800ba7e:	429c      	cmp	r4, r3
 800ba80:	d101      	bne.n	800ba86 <__swbuf_r+0x7a>
 800ba82:	68ac      	ldr	r4, [r5, #8]
 800ba84:	e7cf      	b.n	800ba26 <__swbuf_r+0x1a>
 800ba86:	4b09      	ldr	r3, [pc, #36]	; (800baac <__swbuf_r+0xa0>)
 800ba88:	429c      	cmp	r4, r3
 800ba8a:	bf08      	it	eq
 800ba8c:	68ec      	ldreq	r4, [r5, #12]
 800ba8e:	e7ca      	b.n	800ba26 <__swbuf_r+0x1a>
 800ba90:	4621      	mov	r1, r4
 800ba92:	4628      	mov	r0, r5
 800ba94:	f000 f81a 	bl	800bacc <__swsetup_r>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d0cb      	beq.n	800ba34 <__swbuf_r+0x28>
 800ba9c:	f04f 37ff 	mov.w	r7, #4294967295
 800baa0:	e7ea      	b.n	800ba78 <__swbuf_r+0x6c>
 800baa2:	bf00      	nop
 800baa4:	0800db2c 	.word	0x0800db2c
 800baa8:	0800db4c 	.word	0x0800db4c
 800baac:	0800db0c 	.word	0x0800db0c

0800bab0 <__ascii_wctomb>:
 800bab0:	b149      	cbz	r1, 800bac6 <__ascii_wctomb+0x16>
 800bab2:	2aff      	cmp	r2, #255	; 0xff
 800bab4:	bf85      	ittet	hi
 800bab6:	238a      	movhi	r3, #138	; 0x8a
 800bab8:	6003      	strhi	r3, [r0, #0]
 800baba:	700a      	strbls	r2, [r1, #0]
 800babc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bac0:	bf98      	it	ls
 800bac2:	2001      	movls	r0, #1
 800bac4:	4770      	bx	lr
 800bac6:	4608      	mov	r0, r1
 800bac8:	4770      	bx	lr
	...

0800bacc <__swsetup_r>:
 800bacc:	4b32      	ldr	r3, [pc, #200]	; (800bb98 <__swsetup_r+0xcc>)
 800bace:	b570      	push	{r4, r5, r6, lr}
 800bad0:	681d      	ldr	r5, [r3, #0]
 800bad2:	4606      	mov	r6, r0
 800bad4:	460c      	mov	r4, r1
 800bad6:	b125      	cbz	r5, 800bae2 <__swsetup_r+0x16>
 800bad8:	69ab      	ldr	r3, [r5, #24]
 800bada:	b913      	cbnz	r3, 800bae2 <__swsetup_r+0x16>
 800badc:	4628      	mov	r0, r5
 800bade:	f000 f985 	bl	800bdec <__sinit>
 800bae2:	4b2e      	ldr	r3, [pc, #184]	; (800bb9c <__swsetup_r+0xd0>)
 800bae4:	429c      	cmp	r4, r3
 800bae6:	d10f      	bne.n	800bb08 <__swsetup_r+0x3c>
 800bae8:	686c      	ldr	r4, [r5, #4]
 800baea:	89a3      	ldrh	r3, [r4, #12]
 800baec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baf0:	0719      	lsls	r1, r3, #28
 800baf2:	d42c      	bmi.n	800bb4e <__swsetup_r+0x82>
 800baf4:	06dd      	lsls	r5, r3, #27
 800baf6:	d411      	bmi.n	800bb1c <__swsetup_r+0x50>
 800baf8:	2309      	movs	r3, #9
 800bafa:	6033      	str	r3, [r6, #0]
 800bafc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb00:	81a3      	strh	r3, [r4, #12]
 800bb02:	f04f 30ff 	mov.w	r0, #4294967295
 800bb06:	e03e      	b.n	800bb86 <__swsetup_r+0xba>
 800bb08:	4b25      	ldr	r3, [pc, #148]	; (800bba0 <__swsetup_r+0xd4>)
 800bb0a:	429c      	cmp	r4, r3
 800bb0c:	d101      	bne.n	800bb12 <__swsetup_r+0x46>
 800bb0e:	68ac      	ldr	r4, [r5, #8]
 800bb10:	e7eb      	b.n	800baea <__swsetup_r+0x1e>
 800bb12:	4b24      	ldr	r3, [pc, #144]	; (800bba4 <__swsetup_r+0xd8>)
 800bb14:	429c      	cmp	r4, r3
 800bb16:	bf08      	it	eq
 800bb18:	68ec      	ldreq	r4, [r5, #12]
 800bb1a:	e7e6      	b.n	800baea <__swsetup_r+0x1e>
 800bb1c:	0758      	lsls	r0, r3, #29
 800bb1e:	d512      	bpl.n	800bb46 <__swsetup_r+0x7a>
 800bb20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb22:	b141      	cbz	r1, 800bb36 <__swsetup_r+0x6a>
 800bb24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb28:	4299      	cmp	r1, r3
 800bb2a:	d002      	beq.n	800bb32 <__swsetup_r+0x66>
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	f7ff fb31 	bl	800b194 <_free_r>
 800bb32:	2300      	movs	r3, #0
 800bb34:	6363      	str	r3, [r4, #52]	; 0x34
 800bb36:	89a3      	ldrh	r3, [r4, #12]
 800bb38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb3c:	81a3      	strh	r3, [r4, #12]
 800bb3e:	2300      	movs	r3, #0
 800bb40:	6063      	str	r3, [r4, #4]
 800bb42:	6923      	ldr	r3, [r4, #16]
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	89a3      	ldrh	r3, [r4, #12]
 800bb48:	f043 0308 	orr.w	r3, r3, #8
 800bb4c:	81a3      	strh	r3, [r4, #12]
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	b94b      	cbnz	r3, 800bb66 <__swsetup_r+0x9a>
 800bb52:	89a3      	ldrh	r3, [r4, #12]
 800bb54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb5c:	d003      	beq.n	800bb66 <__swsetup_r+0x9a>
 800bb5e:	4621      	mov	r1, r4
 800bb60:	4630      	mov	r0, r6
 800bb62:	f000 fa09 	bl	800bf78 <__smakebuf_r>
 800bb66:	89a0      	ldrh	r0, [r4, #12]
 800bb68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb6c:	f010 0301 	ands.w	r3, r0, #1
 800bb70:	d00a      	beq.n	800bb88 <__swsetup_r+0xbc>
 800bb72:	2300      	movs	r3, #0
 800bb74:	60a3      	str	r3, [r4, #8]
 800bb76:	6963      	ldr	r3, [r4, #20]
 800bb78:	425b      	negs	r3, r3
 800bb7a:	61a3      	str	r3, [r4, #24]
 800bb7c:	6923      	ldr	r3, [r4, #16]
 800bb7e:	b943      	cbnz	r3, 800bb92 <__swsetup_r+0xc6>
 800bb80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb84:	d1ba      	bne.n	800bafc <__swsetup_r+0x30>
 800bb86:	bd70      	pop	{r4, r5, r6, pc}
 800bb88:	0781      	lsls	r1, r0, #30
 800bb8a:	bf58      	it	pl
 800bb8c:	6963      	ldrpl	r3, [r4, #20]
 800bb8e:	60a3      	str	r3, [r4, #8]
 800bb90:	e7f4      	b.n	800bb7c <__swsetup_r+0xb0>
 800bb92:	2000      	movs	r0, #0
 800bb94:	e7f7      	b.n	800bb86 <__swsetup_r+0xba>
 800bb96:	bf00      	nop
 800bb98:	20000058 	.word	0x20000058
 800bb9c:	0800db2c 	.word	0x0800db2c
 800bba0:	0800db4c 	.word	0x0800db4c
 800bba4:	0800db0c 	.word	0x0800db0c

0800bba8 <abort>:
 800bba8:	b508      	push	{r3, lr}
 800bbaa:	2006      	movs	r0, #6
 800bbac:	f000 fa54 	bl	800c058 <raise>
 800bbb0:	2001      	movs	r0, #1
 800bbb2:	f7f7 ff93 	bl	8003adc <_exit>
	...

0800bbb8 <__sflush_r>:
 800bbb8:	898a      	ldrh	r2, [r1, #12]
 800bbba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	0710      	lsls	r0, r2, #28
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	d458      	bmi.n	800bc78 <__sflush_r+0xc0>
 800bbc6:	684b      	ldr	r3, [r1, #4]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	dc05      	bgt.n	800bbd8 <__sflush_r+0x20>
 800bbcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	dc02      	bgt.n	800bbd8 <__sflush_r+0x20>
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbda:	2e00      	cmp	r6, #0
 800bbdc:	d0f9      	beq.n	800bbd2 <__sflush_r+0x1a>
 800bbde:	2300      	movs	r3, #0
 800bbe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbe4:	682f      	ldr	r7, [r5, #0]
 800bbe6:	602b      	str	r3, [r5, #0]
 800bbe8:	d032      	beq.n	800bc50 <__sflush_r+0x98>
 800bbea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	075a      	lsls	r2, r3, #29
 800bbf0:	d505      	bpl.n	800bbfe <__sflush_r+0x46>
 800bbf2:	6863      	ldr	r3, [r4, #4]
 800bbf4:	1ac0      	subs	r0, r0, r3
 800bbf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbf8:	b10b      	cbz	r3, 800bbfe <__sflush_r+0x46>
 800bbfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbfc:	1ac0      	subs	r0, r0, r3
 800bbfe:	2300      	movs	r3, #0
 800bc00:	4602      	mov	r2, r0
 800bc02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc04:	6a21      	ldr	r1, [r4, #32]
 800bc06:	4628      	mov	r0, r5
 800bc08:	47b0      	blx	r6
 800bc0a:	1c43      	adds	r3, r0, #1
 800bc0c:	89a3      	ldrh	r3, [r4, #12]
 800bc0e:	d106      	bne.n	800bc1e <__sflush_r+0x66>
 800bc10:	6829      	ldr	r1, [r5, #0]
 800bc12:	291d      	cmp	r1, #29
 800bc14:	d82c      	bhi.n	800bc70 <__sflush_r+0xb8>
 800bc16:	4a2a      	ldr	r2, [pc, #168]	; (800bcc0 <__sflush_r+0x108>)
 800bc18:	40ca      	lsrs	r2, r1
 800bc1a:	07d6      	lsls	r6, r2, #31
 800bc1c:	d528      	bpl.n	800bc70 <__sflush_r+0xb8>
 800bc1e:	2200      	movs	r2, #0
 800bc20:	6062      	str	r2, [r4, #4]
 800bc22:	04d9      	lsls	r1, r3, #19
 800bc24:	6922      	ldr	r2, [r4, #16]
 800bc26:	6022      	str	r2, [r4, #0]
 800bc28:	d504      	bpl.n	800bc34 <__sflush_r+0x7c>
 800bc2a:	1c42      	adds	r2, r0, #1
 800bc2c:	d101      	bne.n	800bc32 <__sflush_r+0x7a>
 800bc2e:	682b      	ldr	r3, [r5, #0]
 800bc30:	b903      	cbnz	r3, 800bc34 <__sflush_r+0x7c>
 800bc32:	6560      	str	r0, [r4, #84]	; 0x54
 800bc34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc36:	602f      	str	r7, [r5, #0]
 800bc38:	2900      	cmp	r1, #0
 800bc3a:	d0ca      	beq.n	800bbd2 <__sflush_r+0x1a>
 800bc3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc40:	4299      	cmp	r1, r3
 800bc42:	d002      	beq.n	800bc4a <__sflush_r+0x92>
 800bc44:	4628      	mov	r0, r5
 800bc46:	f7ff faa5 	bl	800b194 <_free_r>
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	6360      	str	r0, [r4, #52]	; 0x34
 800bc4e:	e7c1      	b.n	800bbd4 <__sflush_r+0x1c>
 800bc50:	6a21      	ldr	r1, [r4, #32]
 800bc52:	2301      	movs	r3, #1
 800bc54:	4628      	mov	r0, r5
 800bc56:	47b0      	blx	r6
 800bc58:	1c41      	adds	r1, r0, #1
 800bc5a:	d1c7      	bne.n	800bbec <__sflush_r+0x34>
 800bc5c:	682b      	ldr	r3, [r5, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d0c4      	beq.n	800bbec <__sflush_r+0x34>
 800bc62:	2b1d      	cmp	r3, #29
 800bc64:	d001      	beq.n	800bc6a <__sflush_r+0xb2>
 800bc66:	2b16      	cmp	r3, #22
 800bc68:	d101      	bne.n	800bc6e <__sflush_r+0xb6>
 800bc6a:	602f      	str	r7, [r5, #0]
 800bc6c:	e7b1      	b.n	800bbd2 <__sflush_r+0x1a>
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc74:	81a3      	strh	r3, [r4, #12]
 800bc76:	e7ad      	b.n	800bbd4 <__sflush_r+0x1c>
 800bc78:	690f      	ldr	r7, [r1, #16]
 800bc7a:	2f00      	cmp	r7, #0
 800bc7c:	d0a9      	beq.n	800bbd2 <__sflush_r+0x1a>
 800bc7e:	0793      	lsls	r3, r2, #30
 800bc80:	680e      	ldr	r6, [r1, #0]
 800bc82:	bf08      	it	eq
 800bc84:	694b      	ldreq	r3, [r1, #20]
 800bc86:	600f      	str	r7, [r1, #0]
 800bc88:	bf18      	it	ne
 800bc8a:	2300      	movne	r3, #0
 800bc8c:	eba6 0807 	sub.w	r8, r6, r7
 800bc90:	608b      	str	r3, [r1, #8]
 800bc92:	f1b8 0f00 	cmp.w	r8, #0
 800bc96:	dd9c      	ble.n	800bbd2 <__sflush_r+0x1a>
 800bc98:	6a21      	ldr	r1, [r4, #32]
 800bc9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc9c:	4643      	mov	r3, r8
 800bc9e:	463a      	mov	r2, r7
 800bca0:	4628      	mov	r0, r5
 800bca2:	47b0      	blx	r6
 800bca4:	2800      	cmp	r0, #0
 800bca6:	dc06      	bgt.n	800bcb6 <__sflush_r+0xfe>
 800bca8:	89a3      	ldrh	r3, [r4, #12]
 800bcaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcae:	81a3      	strh	r3, [r4, #12]
 800bcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb4:	e78e      	b.n	800bbd4 <__sflush_r+0x1c>
 800bcb6:	4407      	add	r7, r0
 800bcb8:	eba8 0800 	sub.w	r8, r8, r0
 800bcbc:	e7e9      	b.n	800bc92 <__sflush_r+0xda>
 800bcbe:	bf00      	nop
 800bcc0:	20400001 	.word	0x20400001

0800bcc4 <_fflush_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	690b      	ldr	r3, [r1, #16]
 800bcc8:	4605      	mov	r5, r0
 800bcca:	460c      	mov	r4, r1
 800bccc:	b913      	cbnz	r3, 800bcd4 <_fflush_r+0x10>
 800bcce:	2500      	movs	r5, #0
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	bd38      	pop	{r3, r4, r5, pc}
 800bcd4:	b118      	cbz	r0, 800bcde <_fflush_r+0x1a>
 800bcd6:	6983      	ldr	r3, [r0, #24]
 800bcd8:	b90b      	cbnz	r3, 800bcde <_fflush_r+0x1a>
 800bcda:	f000 f887 	bl	800bdec <__sinit>
 800bcde:	4b14      	ldr	r3, [pc, #80]	; (800bd30 <_fflush_r+0x6c>)
 800bce0:	429c      	cmp	r4, r3
 800bce2:	d11b      	bne.n	800bd1c <_fflush_r+0x58>
 800bce4:	686c      	ldr	r4, [r5, #4]
 800bce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d0ef      	beq.n	800bcce <_fflush_r+0xa>
 800bcee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcf0:	07d0      	lsls	r0, r2, #31
 800bcf2:	d404      	bmi.n	800bcfe <_fflush_r+0x3a>
 800bcf4:	0599      	lsls	r1, r3, #22
 800bcf6:	d402      	bmi.n	800bcfe <_fflush_r+0x3a>
 800bcf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcfa:	f000 f915 	bl	800bf28 <__retarget_lock_acquire_recursive>
 800bcfe:	4628      	mov	r0, r5
 800bd00:	4621      	mov	r1, r4
 800bd02:	f7ff ff59 	bl	800bbb8 <__sflush_r>
 800bd06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd08:	07da      	lsls	r2, r3, #31
 800bd0a:	4605      	mov	r5, r0
 800bd0c:	d4e0      	bmi.n	800bcd0 <_fflush_r+0xc>
 800bd0e:	89a3      	ldrh	r3, [r4, #12]
 800bd10:	059b      	lsls	r3, r3, #22
 800bd12:	d4dd      	bmi.n	800bcd0 <_fflush_r+0xc>
 800bd14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd16:	f000 f908 	bl	800bf2a <__retarget_lock_release_recursive>
 800bd1a:	e7d9      	b.n	800bcd0 <_fflush_r+0xc>
 800bd1c:	4b05      	ldr	r3, [pc, #20]	; (800bd34 <_fflush_r+0x70>)
 800bd1e:	429c      	cmp	r4, r3
 800bd20:	d101      	bne.n	800bd26 <_fflush_r+0x62>
 800bd22:	68ac      	ldr	r4, [r5, #8]
 800bd24:	e7df      	b.n	800bce6 <_fflush_r+0x22>
 800bd26:	4b04      	ldr	r3, [pc, #16]	; (800bd38 <_fflush_r+0x74>)
 800bd28:	429c      	cmp	r4, r3
 800bd2a:	bf08      	it	eq
 800bd2c:	68ec      	ldreq	r4, [r5, #12]
 800bd2e:	e7da      	b.n	800bce6 <_fflush_r+0x22>
 800bd30:	0800db2c 	.word	0x0800db2c
 800bd34:	0800db4c 	.word	0x0800db4c
 800bd38:	0800db0c 	.word	0x0800db0c

0800bd3c <std>:
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	b510      	push	{r4, lr}
 800bd40:	4604      	mov	r4, r0
 800bd42:	e9c0 3300 	strd	r3, r3, [r0]
 800bd46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd4a:	6083      	str	r3, [r0, #8]
 800bd4c:	8181      	strh	r1, [r0, #12]
 800bd4e:	6643      	str	r3, [r0, #100]	; 0x64
 800bd50:	81c2      	strh	r2, [r0, #14]
 800bd52:	6183      	str	r3, [r0, #24]
 800bd54:	4619      	mov	r1, r3
 800bd56:	2208      	movs	r2, #8
 800bd58:	305c      	adds	r0, #92	; 0x5c
 800bd5a:	f7fd fb5b 	bl	8009414 <memset>
 800bd5e:	4b05      	ldr	r3, [pc, #20]	; (800bd74 <std+0x38>)
 800bd60:	6263      	str	r3, [r4, #36]	; 0x24
 800bd62:	4b05      	ldr	r3, [pc, #20]	; (800bd78 <std+0x3c>)
 800bd64:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd66:	4b05      	ldr	r3, [pc, #20]	; (800bd7c <std+0x40>)
 800bd68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd6a:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <std+0x44>)
 800bd6c:	6224      	str	r4, [r4, #32]
 800bd6e:	6323      	str	r3, [r4, #48]	; 0x30
 800bd70:	bd10      	pop	{r4, pc}
 800bd72:	bf00      	nop
 800bd74:	0800c091 	.word	0x0800c091
 800bd78:	0800c0b3 	.word	0x0800c0b3
 800bd7c:	0800c0eb 	.word	0x0800c0eb
 800bd80:	0800c10f 	.word	0x0800c10f

0800bd84 <_cleanup_r>:
 800bd84:	4901      	ldr	r1, [pc, #4]	; (800bd8c <_cleanup_r+0x8>)
 800bd86:	f000 b8af 	b.w	800bee8 <_fwalk_reent>
 800bd8a:	bf00      	nop
 800bd8c:	0800bcc5 	.word	0x0800bcc5

0800bd90 <__sfmoreglue>:
 800bd90:	b570      	push	{r4, r5, r6, lr}
 800bd92:	2268      	movs	r2, #104	; 0x68
 800bd94:	1e4d      	subs	r5, r1, #1
 800bd96:	4355      	muls	r5, r2
 800bd98:	460e      	mov	r6, r1
 800bd9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd9e:	f7ff fa65 	bl	800b26c <_malloc_r>
 800bda2:	4604      	mov	r4, r0
 800bda4:	b140      	cbz	r0, 800bdb8 <__sfmoreglue+0x28>
 800bda6:	2100      	movs	r1, #0
 800bda8:	e9c0 1600 	strd	r1, r6, [r0]
 800bdac:	300c      	adds	r0, #12
 800bdae:	60a0      	str	r0, [r4, #8]
 800bdb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bdb4:	f7fd fb2e 	bl	8009414 <memset>
 800bdb8:	4620      	mov	r0, r4
 800bdba:	bd70      	pop	{r4, r5, r6, pc}

0800bdbc <__sfp_lock_acquire>:
 800bdbc:	4801      	ldr	r0, [pc, #4]	; (800bdc4 <__sfp_lock_acquire+0x8>)
 800bdbe:	f000 b8b3 	b.w	800bf28 <__retarget_lock_acquire_recursive>
 800bdc2:	bf00      	nop
 800bdc4:	200006c1 	.word	0x200006c1

0800bdc8 <__sfp_lock_release>:
 800bdc8:	4801      	ldr	r0, [pc, #4]	; (800bdd0 <__sfp_lock_release+0x8>)
 800bdca:	f000 b8ae 	b.w	800bf2a <__retarget_lock_release_recursive>
 800bdce:	bf00      	nop
 800bdd0:	200006c1 	.word	0x200006c1

0800bdd4 <__sinit_lock_acquire>:
 800bdd4:	4801      	ldr	r0, [pc, #4]	; (800bddc <__sinit_lock_acquire+0x8>)
 800bdd6:	f000 b8a7 	b.w	800bf28 <__retarget_lock_acquire_recursive>
 800bdda:	bf00      	nop
 800bddc:	200006c2 	.word	0x200006c2

0800bde0 <__sinit_lock_release>:
 800bde0:	4801      	ldr	r0, [pc, #4]	; (800bde8 <__sinit_lock_release+0x8>)
 800bde2:	f000 b8a2 	b.w	800bf2a <__retarget_lock_release_recursive>
 800bde6:	bf00      	nop
 800bde8:	200006c2 	.word	0x200006c2

0800bdec <__sinit>:
 800bdec:	b510      	push	{r4, lr}
 800bdee:	4604      	mov	r4, r0
 800bdf0:	f7ff fff0 	bl	800bdd4 <__sinit_lock_acquire>
 800bdf4:	69a3      	ldr	r3, [r4, #24]
 800bdf6:	b11b      	cbz	r3, 800be00 <__sinit+0x14>
 800bdf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdfc:	f7ff bff0 	b.w	800bde0 <__sinit_lock_release>
 800be00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be04:	6523      	str	r3, [r4, #80]	; 0x50
 800be06:	4b13      	ldr	r3, [pc, #76]	; (800be54 <__sinit+0x68>)
 800be08:	4a13      	ldr	r2, [pc, #76]	; (800be58 <__sinit+0x6c>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800be0e:	42a3      	cmp	r3, r4
 800be10:	bf04      	itt	eq
 800be12:	2301      	moveq	r3, #1
 800be14:	61a3      	streq	r3, [r4, #24]
 800be16:	4620      	mov	r0, r4
 800be18:	f000 f820 	bl	800be5c <__sfp>
 800be1c:	6060      	str	r0, [r4, #4]
 800be1e:	4620      	mov	r0, r4
 800be20:	f000 f81c 	bl	800be5c <__sfp>
 800be24:	60a0      	str	r0, [r4, #8]
 800be26:	4620      	mov	r0, r4
 800be28:	f000 f818 	bl	800be5c <__sfp>
 800be2c:	2200      	movs	r2, #0
 800be2e:	60e0      	str	r0, [r4, #12]
 800be30:	2104      	movs	r1, #4
 800be32:	6860      	ldr	r0, [r4, #4]
 800be34:	f7ff ff82 	bl	800bd3c <std>
 800be38:	68a0      	ldr	r0, [r4, #8]
 800be3a:	2201      	movs	r2, #1
 800be3c:	2109      	movs	r1, #9
 800be3e:	f7ff ff7d 	bl	800bd3c <std>
 800be42:	68e0      	ldr	r0, [r4, #12]
 800be44:	2202      	movs	r2, #2
 800be46:	2112      	movs	r1, #18
 800be48:	f7ff ff78 	bl	800bd3c <std>
 800be4c:	2301      	movs	r3, #1
 800be4e:	61a3      	str	r3, [r4, #24]
 800be50:	e7d2      	b.n	800bdf8 <__sinit+0xc>
 800be52:	bf00      	nop
 800be54:	0800d790 	.word	0x0800d790
 800be58:	0800bd85 	.word	0x0800bd85

0800be5c <__sfp>:
 800be5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5e:	4607      	mov	r7, r0
 800be60:	f7ff ffac 	bl	800bdbc <__sfp_lock_acquire>
 800be64:	4b1e      	ldr	r3, [pc, #120]	; (800bee0 <__sfp+0x84>)
 800be66:	681e      	ldr	r6, [r3, #0]
 800be68:	69b3      	ldr	r3, [r6, #24]
 800be6a:	b913      	cbnz	r3, 800be72 <__sfp+0x16>
 800be6c:	4630      	mov	r0, r6
 800be6e:	f7ff ffbd 	bl	800bdec <__sinit>
 800be72:	3648      	adds	r6, #72	; 0x48
 800be74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be78:	3b01      	subs	r3, #1
 800be7a:	d503      	bpl.n	800be84 <__sfp+0x28>
 800be7c:	6833      	ldr	r3, [r6, #0]
 800be7e:	b30b      	cbz	r3, 800bec4 <__sfp+0x68>
 800be80:	6836      	ldr	r6, [r6, #0]
 800be82:	e7f7      	b.n	800be74 <__sfp+0x18>
 800be84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be88:	b9d5      	cbnz	r5, 800bec0 <__sfp+0x64>
 800be8a:	4b16      	ldr	r3, [pc, #88]	; (800bee4 <__sfp+0x88>)
 800be8c:	60e3      	str	r3, [r4, #12]
 800be8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be92:	6665      	str	r5, [r4, #100]	; 0x64
 800be94:	f000 f847 	bl	800bf26 <__retarget_lock_init_recursive>
 800be98:	f7ff ff96 	bl	800bdc8 <__sfp_lock_release>
 800be9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bea4:	6025      	str	r5, [r4, #0]
 800bea6:	61a5      	str	r5, [r4, #24]
 800bea8:	2208      	movs	r2, #8
 800beaa:	4629      	mov	r1, r5
 800beac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800beb0:	f7fd fab0 	bl	8009414 <memset>
 800beb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800beb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bebc:	4620      	mov	r0, r4
 800bebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bec0:	3468      	adds	r4, #104	; 0x68
 800bec2:	e7d9      	b.n	800be78 <__sfp+0x1c>
 800bec4:	2104      	movs	r1, #4
 800bec6:	4638      	mov	r0, r7
 800bec8:	f7ff ff62 	bl	800bd90 <__sfmoreglue>
 800becc:	4604      	mov	r4, r0
 800bece:	6030      	str	r0, [r6, #0]
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d1d5      	bne.n	800be80 <__sfp+0x24>
 800bed4:	f7ff ff78 	bl	800bdc8 <__sfp_lock_release>
 800bed8:	230c      	movs	r3, #12
 800beda:	603b      	str	r3, [r7, #0]
 800bedc:	e7ee      	b.n	800bebc <__sfp+0x60>
 800bede:	bf00      	nop
 800bee0:	0800d790 	.word	0x0800d790
 800bee4:	ffff0001 	.word	0xffff0001

0800bee8 <_fwalk_reent>:
 800bee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beec:	4606      	mov	r6, r0
 800beee:	4688      	mov	r8, r1
 800bef0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bef4:	2700      	movs	r7, #0
 800bef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800befa:	f1b9 0901 	subs.w	r9, r9, #1
 800befe:	d505      	bpl.n	800bf0c <_fwalk_reent+0x24>
 800bf00:	6824      	ldr	r4, [r4, #0]
 800bf02:	2c00      	cmp	r4, #0
 800bf04:	d1f7      	bne.n	800bef6 <_fwalk_reent+0xe>
 800bf06:	4638      	mov	r0, r7
 800bf08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf0c:	89ab      	ldrh	r3, [r5, #12]
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d907      	bls.n	800bf22 <_fwalk_reent+0x3a>
 800bf12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf16:	3301      	adds	r3, #1
 800bf18:	d003      	beq.n	800bf22 <_fwalk_reent+0x3a>
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	47c0      	blx	r8
 800bf20:	4307      	orrs	r7, r0
 800bf22:	3568      	adds	r5, #104	; 0x68
 800bf24:	e7e9      	b.n	800befa <_fwalk_reent+0x12>

0800bf26 <__retarget_lock_init_recursive>:
 800bf26:	4770      	bx	lr

0800bf28 <__retarget_lock_acquire_recursive>:
 800bf28:	4770      	bx	lr

0800bf2a <__retarget_lock_release_recursive>:
 800bf2a:	4770      	bx	lr

0800bf2c <__swhatbuf_r>:
 800bf2c:	b570      	push	{r4, r5, r6, lr}
 800bf2e:	460e      	mov	r6, r1
 800bf30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf34:	2900      	cmp	r1, #0
 800bf36:	b096      	sub	sp, #88	; 0x58
 800bf38:	4614      	mov	r4, r2
 800bf3a:	461d      	mov	r5, r3
 800bf3c:	da08      	bge.n	800bf50 <__swhatbuf_r+0x24>
 800bf3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bf42:	2200      	movs	r2, #0
 800bf44:	602a      	str	r2, [r5, #0]
 800bf46:	061a      	lsls	r2, r3, #24
 800bf48:	d410      	bmi.n	800bf6c <__swhatbuf_r+0x40>
 800bf4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf4e:	e00e      	b.n	800bf6e <__swhatbuf_r+0x42>
 800bf50:	466a      	mov	r2, sp
 800bf52:	f000 f903 	bl	800c15c <_fstat_r>
 800bf56:	2800      	cmp	r0, #0
 800bf58:	dbf1      	blt.n	800bf3e <__swhatbuf_r+0x12>
 800bf5a:	9a01      	ldr	r2, [sp, #4]
 800bf5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf64:	425a      	negs	r2, r3
 800bf66:	415a      	adcs	r2, r3
 800bf68:	602a      	str	r2, [r5, #0]
 800bf6a:	e7ee      	b.n	800bf4a <__swhatbuf_r+0x1e>
 800bf6c:	2340      	movs	r3, #64	; 0x40
 800bf6e:	2000      	movs	r0, #0
 800bf70:	6023      	str	r3, [r4, #0]
 800bf72:	b016      	add	sp, #88	; 0x58
 800bf74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf78 <__smakebuf_r>:
 800bf78:	898b      	ldrh	r3, [r1, #12]
 800bf7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf7c:	079d      	lsls	r5, r3, #30
 800bf7e:	4606      	mov	r6, r0
 800bf80:	460c      	mov	r4, r1
 800bf82:	d507      	bpl.n	800bf94 <__smakebuf_r+0x1c>
 800bf84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf88:	6023      	str	r3, [r4, #0]
 800bf8a:	6123      	str	r3, [r4, #16]
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	6163      	str	r3, [r4, #20]
 800bf90:	b002      	add	sp, #8
 800bf92:	bd70      	pop	{r4, r5, r6, pc}
 800bf94:	ab01      	add	r3, sp, #4
 800bf96:	466a      	mov	r2, sp
 800bf98:	f7ff ffc8 	bl	800bf2c <__swhatbuf_r>
 800bf9c:	9900      	ldr	r1, [sp, #0]
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	f7ff f963 	bl	800b26c <_malloc_r>
 800bfa6:	b948      	cbnz	r0, 800bfbc <__smakebuf_r+0x44>
 800bfa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfac:	059a      	lsls	r2, r3, #22
 800bfae:	d4ef      	bmi.n	800bf90 <__smakebuf_r+0x18>
 800bfb0:	f023 0303 	bic.w	r3, r3, #3
 800bfb4:	f043 0302 	orr.w	r3, r3, #2
 800bfb8:	81a3      	strh	r3, [r4, #12]
 800bfba:	e7e3      	b.n	800bf84 <__smakebuf_r+0xc>
 800bfbc:	4b0d      	ldr	r3, [pc, #52]	; (800bff4 <__smakebuf_r+0x7c>)
 800bfbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfc0:	89a3      	ldrh	r3, [r4, #12]
 800bfc2:	6020      	str	r0, [r4, #0]
 800bfc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfc8:	81a3      	strh	r3, [r4, #12]
 800bfca:	9b00      	ldr	r3, [sp, #0]
 800bfcc:	6163      	str	r3, [r4, #20]
 800bfce:	9b01      	ldr	r3, [sp, #4]
 800bfd0:	6120      	str	r0, [r4, #16]
 800bfd2:	b15b      	cbz	r3, 800bfec <__smakebuf_r+0x74>
 800bfd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f000 f8d1 	bl	800c180 <_isatty_r>
 800bfde:	b128      	cbz	r0, 800bfec <__smakebuf_r+0x74>
 800bfe0:	89a3      	ldrh	r3, [r4, #12]
 800bfe2:	f023 0303 	bic.w	r3, r3, #3
 800bfe6:	f043 0301 	orr.w	r3, r3, #1
 800bfea:	81a3      	strh	r3, [r4, #12]
 800bfec:	89a0      	ldrh	r0, [r4, #12]
 800bfee:	4305      	orrs	r5, r0
 800bff0:	81a5      	strh	r5, [r4, #12]
 800bff2:	e7cd      	b.n	800bf90 <__smakebuf_r+0x18>
 800bff4:	0800bd85 	.word	0x0800bd85

0800bff8 <_malloc_usable_size_r>:
 800bff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bffc:	1f18      	subs	r0, r3, #4
 800bffe:	2b00      	cmp	r3, #0
 800c000:	bfbc      	itt	lt
 800c002:	580b      	ldrlt	r3, [r1, r0]
 800c004:	18c0      	addlt	r0, r0, r3
 800c006:	4770      	bx	lr

0800c008 <_raise_r>:
 800c008:	291f      	cmp	r1, #31
 800c00a:	b538      	push	{r3, r4, r5, lr}
 800c00c:	4604      	mov	r4, r0
 800c00e:	460d      	mov	r5, r1
 800c010:	d904      	bls.n	800c01c <_raise_r+0x14>
 800c012:	2316      	movs	r3, #22
 800c014:	6003      	str	r3, [r0, #0]
 800c016:	f04f 30ff 	mov.w	r0, #4294967295
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c01e:	b112      	cbz	r2, 800c026 <_raise_r+0x1e>
 800c020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c024:	b94b      	cbnz	r3, 800c03a <_raise_r+0x32>
 800c026:	4620      	mov	r0, r4
 800c028:	f000 f830 	bl	800c08c <_getpid_r>
 800c02c:	462a      	mov	r2, r5
 800c02e:	4601      	mov	r1, r0
 800c030:	4620      	mov	r0, r4
 800c032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c036:	f000 b817 	b.w	800c068 <_kill_r>
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d00a      	beq.n	800c054 <_raise_r+0x4c>
 800c03e:	1c59      	adds	r1, r3, #1
 800c040:	d103      	bne.n	800c04a <_raise_r+0x42>
 800c042:	2316      	movs	r3, #22
 800c044:	6003      	str	r3, [r0, #0]
 800c046:	2001      	movs	r0, #1
 800c048:	e7e7      	b.n	800c01a <_raise_r+0x12>
 800c04a:	2400      	movs	r4, #0
 800c04c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c050:	4628      	mov	r0, r5
 800c052:	4798      	blx	r3
 800c054:	2000      	movs	r0, #0
 800c056:	e7e0      	b.n	800c01a <_raise_r+0x12>

0800c058 <raise>:
 800c058:	4b02      	ldr	r3, [pc, #8]	; (800c064 <raise+0xc>)
 800c05a:	4601      	mov	r1, r0
 800c05c:	6818      	ldr	r0, [r3, #0]
 800c05e:	f7ff bfd3 	b.w	800c008 <_raise_r>
 800c062:	bf00      	nop
 800c064:	20000058 	.word	0x20000058

0800c068 <_kill_r>:
 800c068:	b538      	push	{r3, r4, r5, lr}
 800c06a:	4d07      	ldr	r5, [pc, #28]	; (800c088 <_kill_r+0x20>)
 800c06c:	2300      	movs	r3, #0
 800c06e:	4604      	mov	r4, r0
 800c070:	4608      	mov	r0, r1
 800c072:	4611      	mov	r1, r2
 800c074:	602b      	str	r3, [r5, #0]
 800c076:	f7f7 fd21 	bl	8003abc <_kill>
 800c07a:	1c43      	adds	r3, r0, #1
 800c07c:	d102      	bne.n	800c084 <_kill_r+0x1c>
 800c07e:	682b      	ldr	r3, [r5, #0]
 800c080:	b103      	cbz	r3, 800c084 <_kill_r+0x1c>
 800c082:	6023      	str	r3, [r4, #0]
 800c084:	bd38      	pop	{r3, r4, r5, pc}
 800c086:	bf00      	nop
 800c088:	200006bc 	.word	0x200006bc

0800c08c <_getpid_r>:
 800c08c:	f7f7 bd0e 	b.w	8003aac <_getpid>

0800c090 <__sread>:
 800c090:	b510      	push	{r4, lr}
 800c092:	460c      	mov	r4, r1
 800c094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c098:	f000 f894 	bl	800c1c4 <_read_r>
 800c09c:	2800      	cmp	r0, #0
 800c09e:	bfab      	itete	ge
 800c0a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0a2:	89a3      	ldrhlt	r3, [r4, #12]
 800c0a4:	181b      	addge	r3, r3, r0
 800c0a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0aa:	bfac      	ite	ge
 800c0ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0ae:	81a3      	strhlt	r3, [r4, #12]
 800c0b0:	bd10      	pop	{r4, pc}

0800c0b2 <__swrite>:
 800c0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b6:	461f      	mov	r7, r3
 800c0b8:	898b      	ldrh	r3, [r1, #12]
 800c0ba:	05db      	lsls	r3, r3, #23
 800c0bc:	4605      	mov	r5, r0
 800c0be:	460c      	mov	r4, r1
 800c0c0:	4616      	mov	r6, r2
 800c0c2:	d505      	bpl.n	800c0d0 <__swrite+0x1e>
 800c0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0c8:	2302      	movs	r3, #2
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f000 f868 	bl	800c1a0 <_lseek_r>
 800c0d0:	89a3      	ldrh	r3, [r4, #12]
 800c0d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0da:	81a3      	strh	r3, [r4, #12]
 800c0dc:	4632      	mov	r2, r6
 800c0de:	463b      	mov	r3, r7
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0e6:	f000 b817 	b.w	800c118 <_write_r>

0800c0ea <__sseek>:
 800c0ea:	b510      	push	{r4, lr}
 800c0ec:	460c      	mov	r4, r1
 800c0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0f2:	f000 f855 	bl	800c1a0 <_lseek_r>
 800c0f6:	1c43      	adds	r3, r0, #1
 800c0f8:	89a3      	ldrh	r3, [r4, #12]
 800c0fa:	bf15      	itete	ne
 800c0fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c106:	81a3      	strheq	r3, [r4, #12]
 800c108:	bf18      	it	ne
 800c10a:	81a3      	strhne	r3, [r4, #12]
 800c10c:	bd10      	pop	{r4, pc}

0800c10e <__sclose>:
 800c10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c112:	f000 b813 	b.w	800c13c <_close_r>
	...

0800c118 <_write_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4d07      	ldr	r5, [pc, #28]	; (800c138 <_write_r+0x20>)
 800c11c:	4604      	mov	r4, r0
 800c11e:	4608      	mov	r0, r1
 800c120:	4611      	mov	r1, r2
 800c122:	2200      	movs	r2, #0
 800c124:	602a      	str	r2, [r5, #0]
 800c126:	461a      	mov	r2, r3
 800c128:	f7f7 fcff 	bl	8003b2a <_write>
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	d102      	bne.n	800c136 <_write_r+0x1e>
 800c130:	682b      	ldr	r3, [r5, #0]
 800c132:	b103      	cbz	r3, 800c136 <_write_r+0x1e>
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	bd38      	pop	{r3, r4, r5, pc}
 800c138:	200006bc 	.word	0x200006bc

0800c13c <_close_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	4d06      	ldr	r5, [pc, #24]	; (800c158 <_close_r+0x1c>)
 800c140:	2300      	movs	r3, #0
 800c142:	4604      	mov	r4, r0
 800c144:	4608      	mov	r0, r1
 800c146:	602b      	str	r3, [r5, #0]
 800c148:	f7f7 fd0b 	bl	8003b62 <_close>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	d102      	bne.n	800c156 <_close_r+0x1a>
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	b103      	cbz	r3, 800c156 <_close_r+0x1a>
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	bd38      	pop	{r3, r4, r5, pc}
 800c158:	200006bc 	.word	0x200006bc

0800c15c <_fstat_r>:
 800c15c:	b538      	push	{r3, r4, r5, lr}
 800c15e:	4d07      	ldr	r5, [pc, #28]	; (800c17c <_fstat_r+0x20>)
 800c160:	2300      	movs	r3, #0
 800c162:	4604      	mov	r4, r0
 800c164:	4608      	mov	r0, r1
 800c166:	4611      	mov	r1, r2
 800c168:	602b      	str	r3, [r5, #0]
 800c16a:	f7f7 fd06 	bl	8003b7a <_fstat>
 800c16e:	1c43      	adds	r3, r0, #1
 800c170:	d102      	bne.n	800c178 <_fstat_r+0x1c>
 800c172:	682b      	ldr	r3, [r5, #0]
 800c174:	b103      	cbz	r3, 800c178 <_fstat_r+0x1c>
 800c176:	6023      	str	r3, [r4, #0]
 800c178:	bd38      	pop	{r3, r4, r5, pc}
 800c17a:	bf00      	nop
 800c17c:	200006bc 	.word	0x200006bc

0800c180 <_isatty_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	4d06      	ldr	r5, [pc, #24]	; (800c19c <_isatty_r+0x1c>)
 800c184:	2300      	movs	r3, #0
 800c186:	4604      	mov	r4, r0
 800c188:	4608      	mov	r0, r1
 800c18a:	602b      	str	r3, [r5, #0]
 800c18c:	f7f7 fd05 	bl	8003b9a <_isatty>
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	d102      	bne.n	800c19a <_isatty_r+0x1a>
 800c194:	682b      	ldr	r3, [r5, #0]
 800c196:	b103      	cbz	r3, 800c19a <_isatty_r+0x1a>
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	bd38      	pop	{r3, r4, r5, pc}
 800c19c:	200006bc 	.word	0x200006bc

0800c1a0 <_lseek_r>:
 800c1a0:	b538      	push	{r3, r4, r5, lr}
 800c1a2:	4d07      	ldr	r5, [pc, #28]	; (800c1c0 <_lseek_r+0x20>)
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	4608      	mov	r0, r1
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	602a      	str	r2, [r5, #0]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	f7f7 fcfe 	bl	8003bb0 <_lseek>
 800c1b4:	1c43      	adds	r3, r0, #1
 800c1b6:	d102      	bne.n	800c1be <_lseek_r+0x1e>
 800c1b8:	682b      	ldr	r3, [r5, #0]
 800c1ba:	b103      	cbz	r3, 800c1be <_lseek_r+0x1e>
 800c1bc:	6023      	str	r3, [r4, #0]
 800c1be:	bd38      	pop	{r3, r4, r5, pc}
 800c1c0:	200006bc 	.word	0x200006bc

0800c1c4 <_read_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4d07      	ldr	r5, [pc, #28]	; (800c1e4 <_read_r+0x20>)
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	4608      	mov	r0, r1
 800c1cc:	4611      	mov	r1, r2
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	602a      	str	r2, [r5, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	f7f7 fc8c 	bl	8003af0 <_read>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d102      	bne.n	800c1e2 <_read_r+0x1e>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	b103      	cbz	r3, 800c1e2 <_read_r+0x1e>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	200006bc 	.word	0x200006bc

0800c1e8 <atan>:
 800c1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ec:	ec55 4b10 	vmov	r4, r5, d0
 800c1f0:	4bc3      	ldr	r3, [pc, #780]	; (800c500 <atan+0x318>)
 800c1f2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c1f6:	429e      	cmp	r6, r3
 800c1f8:	46ab      	mov	fp, r5
 800c1fa:	dd18      	ble.n	800c22e <atan+0x46>
 800c1fc:	4bc1      	ldr	r3, [pc, #772]	; (800c504 <atan+0x31c>)
 800c1fe:	429e      	cmp	r6, r3
 800c200:	dc01      	bgt.n	800c206 <atan+0x1e>
 800c202:	d109      	bne.n	800c218 <atan+0x30>
 800c204:	b144      	cbz	r4, 800c218 <atan+0x30>
 800c206:	4622      	mov	r2, r4
 800c208:	462b      	mov	r3, r5
 800c20a:	4620      	mov	r0, r4
 800c20c:	4629      	mov	r1, r5
 800c20e:	f7f4 f85d 	bl	80002cc <__adddf3>
 800c212:	4604      	mov	r4, r0
 800c214:	460d      	mov	r5, r1
 800c216:	e006      	b.n	800c226 <atan+0x3e>
 800c218:	f1bb 0f00 	cmp.w	fp, #0
 800c21c:	f300 8131 	bgt.w	800c482 <atan+0x29a>
 800c220:	a59b      	add	r5, pc, #620	; (adr r5, 800c490 <atan+0x2a8>)
 800c222:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c226:	ec45 4b10 	vmov	d0, r4, r5
 800c22a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c22e:	4bb6      	ldr	r3, [pc, #728]	; (800c508 <atan+0x320>)
 800c230:	429e      	cmp	r6, r3
 800c232:	dc14      	bgt.n	800c25e <atan+0x76>
 800c234:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c238:	429e      	cmp	r6, r3
 800c23a:	dc0d      	bgt.n	800c258 <atan+0x70>
 800c23c:	a396      	add	r3, pc, #600	; (adr r3, 800c498 <atan+0x2b0>)
 800c23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c242:	ee10 0a10 	vmov	r0, s0
 800c246:	4629      	mov	r1, r5
 800c248:	f7f4 f840 	bl	80002cc <__adddf3>
 800c24c:	4baf      	ldr	r3, [pc, #700]	; (800c50c <atan+0x324>)
 800c24e:	2200      	movs	r2, #0
 800c250:	f7f4 fc82 	bl	8000b58 <__aeabi_dcmpgt>
 800c254:	2800      	cmp	r0, #0
 800c256:	d1e6      	bne.n	800c226 <atan+0x3e>
 800c258:	f04f 3aff 	mov.w	sl, #4294967295
 800c25c:	e02b      	b.n	800c2b6 <atan+0xce>
 800c25e:	f000 f963 	bl	800c528 <fabs>
 800c262:	4bab      	ldr	r3, [pc, #684]	; (800c510 <atan+0x328>)
 800c264:	429e      	cmp	r6, r3
 800c266:	ec55 4b10 	vmov	r4, r5, d0
 800c26a:	f300 80bf 	bgt.w	800c3ec <atan+0x204>
 800c26e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c272:	429e      	cmp	r6, r3
 800c274:	f300 80a0 	bgt.w	800c3b8 <atan+0x1d0>
 800c278:	ee10 2a10 	vmov	r2, s0
 800c27c:	ee10 0a10 	vmov	r0, s0
 800c280:	462b      	mov	r3, r5
 800c282:	4629      	mov	r1, r5
 800c284:	f7f4 f822 	bl	80002cc <__adddf3>
 800c288:	4ba0      	ldr	r3, [pc, #640]	; (800c50c <atan+0x324>)
 800c28a:	2200      	movs	r2, #0
 800c28c:	f7f4 f81c 	bl	80002c8 <__aeabi_dsub>
 800c290:	2200      	movs	r2, #0
 800c292:	4606      	mov	r6, r0
 800c294:	460f      	mov	r7, r1
 800c296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c29a:	4620      	mov	r0, r4
 800c29c:	4629      	mov	r1, r5
 800c29e:	f7f4 f815 	bl	80002cc <__adddf3>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	4639      	mov	r1, r7
 800c2aa:	f7f4 faef 	bl	800088c <__aeabi_ddiv>
 800c2ae:	f04f 0a00 	mov.w	sl, #0
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	460d      	mov	r5, r1
 800c2b6:	4622      	mov	r2, r4
 800c2b8:	462b      	mov	r3, r5
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	4629      	mov	r1, r5
 800c2be:	f7f4 f9bb 	bl	8000638 <__aeabi_dmul>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4680      	mov	r8, r0
 800c2c8:	4689      	mov	r9, r1
 800c2ca:	f7f4 f9b5 	bl	8000638 <__aeabi_dmul>
 800c2ce:	a374      	add	r3, pc, #464	; (adr r3, 800c4a0 <atan+0x2b8>)
 800c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d4:	4606      	mov	r6, r0
 800c2d6:	460f      	mov	r7, r1
 800c2d8:	f7f4 f9ae 	bl	8000638 <__aeabi_dmul>
 800c2dc:	a372      	add	r3, pc, #456	; (adr r3, 800c4a8 <atan+0x2c0>)
 800c2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e2:	f7f3 fff3 	bl	80002cc <__adddf3>
 800c2e6:	4632      	mov	r2, r6
 800c2e8:	463b      	mov	r3, r7
 800c2ea:	f7f4 f9a5 	bl	8000638 <__aeabi_dmul>
 800c2ee:	a370      	add	r3, pc, #448	; (adr r3, 800c4b0 <atan+0x2c8>)
 800c2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f4:	f7f3 ffea 	bl	80002cc <__adddf3>
 800c2f8:	4632      	mov	r2, r6
 800c2fa:	463b      	mov	r3, r7
 800c2fc:	f7f4 f99c 	bl	8000638 <__aeabi_dmul>
 800c300:	a36d      	add	r3, pc, #436	; (adr r3, 800c4b8 <atan+0x2d0>)
 800c302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c306:	f7f3 ffe1 	bl	80002cc <__adddf3>
 800c30a:	4632      	mov	r2, r6
 800c30c:	463b      	mov	r3, r7
 800c30e:	f7f4 f993 	bl	8000638 <__aeabi_dmul>
 800c312:	a36b      	add	r3, pc, #428	; (adr r3, 800c4c0 <atan+0x2d8>)
 800c314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c318:	f7f3 ffd8 	bl	80002cc <__adddf3>
 800c31c:	4632      	mov	r2, r6
 800c31e:	463b      	mov	r3, r7
 800c320:	f7f4 f98a 	bl	8000638 <__aeabi_dmul>
 800c324:	a368      	add	r3, pc, #416	; (adr r3, 800c4c8 <atan+0x2e0>)
 800c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32a:	f7f3 ffcf 	bl	80002cc <__adddf3>
 800c32e:	4642      	mov	r2, r8
 800c330:	464b      	mov	r3, r9
 800c332:	f7f4 f981 	bl	8000638 <__aeabi_dmul>
 800c336:	a366      	add	r3, pc, #408	; (adr r3, 800c4d0 <atan+0x2e8>)
 800c338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33c:	4680      	mov	r8, r0
 800c33e:	4689      	mov	r9, r1
 800c340:	4630      	mov	r0, r6
 800c342:	4639      	mov	r1, r7
 800c344:	f7f4 f978 	bl	8000638 <__aeabi_dmul>
 800c348:	a363      	add	r3, pc, #396	; (adr r3, 800c4d8 <atan+0x2f0>)
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	f7f3 ffbb 	bl	80002c8 <__aeabi_dsub>
 800c352:	4632      	mov	r2, r6
 800c354:	463b      	mov	r3, r7
 800c356:	f7f4 f96f 	bl	8000638 <__aeabi_dmul>
 800c35a:	a361      	add	r3, pc, #388	; (adr r3, 800c4e0 <atan+0x2f8>)
 800c35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c360:	f7f3 ffb2 	bl	80002c8 <__aeabi_dsub>
 800c364:	4632      	mov	r2, r6
 800c366:	463b      	mov	r3, r7
 800c368:	f7f4 f966 	bl	8000638 <__aeabi_dmul>
 800c36c:	a35e      	add	r3, pc, #376	; (adr r3, 800c4e8 <atan+0x300>)
 800c36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c372:	f7f3 ffa9 	bl	80002c8 <__aeabi_dsub>
 800c376:	4632      	mov	r2, r6
 800c378:	463b      	mov	r3, r7
 800c37a:	f7f4 f95d 	bl	8000638 <__aeabi_dmul>
 800c37e:	a35c      	add	r3, pc, #368	; (adr r3, 800c4f0 <atan+0x308>)
 800c380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c384:	f7f3 ffa0 	bl	80002c8 <__aeabi_dsub>
 800c388:	4632      	mov	r2, r6
 800c38a:	463b      	mov	r3, r7
 800c38c:	f7f4 f954 	bl	8000638 <__aeabi_dmul>
 800c390:	4602      	mov	r2, r0
 800c392:	460b      	mov	r3, r1
 800c394:	4640      	mov	r0, r8
 800c396:	4649      	mov	r1, r9
 800c398:	f7f3 ff98 	bl	80002cc <__adddf3>
 800c39c:	4622      	mov	r2, r4
 800c39e:	462b      	mov	r3, r5
 800c3a0:	f7f4 f94a 	bl	8000638 <__aeabi_dmul>
 800c3a4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	d14b      	bne.n	800c446 <atan+0x25e>
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	4629      	mov	r1, r5
 800c3b2:	f7f3 ff89 	bl	80002c8 <__aeabi_dsub>
 800c3b6:	e72c      	b.n	800c212 <atan+0x2a>
 800c3b8:	ee10 0a10 	vmov	r0, s0
 800c3bc:	4b53      	ldr	r3, [pc, #332]	; (800c50c <atan+0x324>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	4629      	mov	r1, r5
 800c3c2:	f7f3 ff81 	bl	80002c8 <__aeabi_dsub>
 800c3c6:	4b51      	ldr	r3, [pc, #324]	; (800c50c <atan+0x324>)
 800c3c8:	4606      	mov	r6, r0
 800c3ca:	460f      	mov	r7, r1
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	4629      	mov	r1, r5
 800c3d2:	f7f3 ff7b 	bl	80002cc <__adddf3>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	460b      	mov	r3, r1
 800c3da:	4630      	mov	r0, r6
 800c3dc:	4639      	mov	r1, r7
 800c3de:	f7f4 fa55 	bl	800088c <__aeabi_ddiv>
 800c3e2:	f04f 0a01 	mov.w	sl, #1
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	460d      	mov	r5, r1
 800c3ea:	e764      	b.n	800c2b6 <atan+0xce>
 800c3ec:	4b49      	ldr	r3, [pc, #292]	; (800c514 <atan+0x32c>)
 800c3ee:	429e      	cmp	r6, r3
 800c3f0:	da1d      	bge.n	800c42e <atan+0x246>
 800c3f2:	ee10 0a10 	vmov	r0, s0
 800c3f6:	4b48      	ldr	r3, [pc, #288]	; (800c518 <atan+0x330>)
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	4629      	mov	r1, r5
 800c3fc:	f7f3 ff64 	bl	80002c8 <__aeabi_dsub>
 800c400:	4b45      	ldr	r3, [pc, #276]	; (800c518 <atan+0x330>)
 800c402:	4606      	mov	r6, r0
 800c404:	460f      	mov	r7, r1
 800c406:	2200      	movs	r2, #0
 800c408:	4620      	mov	r0, r4
 800c40a:	4629      	mov	r1, r5
 800c40c:	f7f4 f914 	bl	8000638 <__aeabi_dmul>
 800c410:	4b3e      	ldr	r3, [pc, #248]	; (800c50c <atan+0x324>)
 800c412:	2200      	movs	r2, #0
 800c414:	f7f3 ff5a 	bl	80002cc <__adddf3>
 800c418:	4602      	mov	r2, r0
 800c41a:	460b      	mov	r3, r1
 800c41c:	4630      	mov	r0, r6
 800c41e:	4639      	mov	r1, r7
 800c420:	f7f4 fa34 	bl	800088c <__aeabi_ddiv>
 800c424:	f04f 0a02 	mov.w	sl, #2
 800c428:	4604      	mov	r4, r0
 800c42a:	460d      	mov	r5, r1
 800c42c:	e743      	b.n	800c2b6 <atan+0xce>
 800c42e:	462b      	mov	r3, r5
 800c430:	ee10 2a10 	vmov	r2, s0
 800c434:	4939      	ldr	r1, [pc, #228]	; (800c51c <atan+0x334>)
 800c436:	2000      	movs	r0, #0
 800c438:	f7f4 fa28 	bl	800088c <__aeabi_ddiv>
 800c43c:	f04f 0a03 	mov.w	sl, #3
 800c440:	4604      	mov	r4, r0
 800c442:	460d      	mov	r5, r1
 800c444:	e737      	b.n	800c2b6 <atan+0xce>
 800c446:	4b36      	ldr	r3, [pc, #216]	; (800c520 <atan+0x338>)
 800c448:	4e36      	ldr	r6, [pc, #216]	; (800c524 <atan+0x33c>)
 800c44a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c44e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c452:	e9da 2300 	ldrd	r2, r3, [sl]
 800c456:	f7f3 ff37 	bl	80002c8 <__aeabi_dsub>
 800c45a:	4622      	mov	r2, r4
 800c45c:	462b      	mov	r3, r5
 800c45e:	f7f3 ff33 	bl	80002c8 <__aeabi_dsub>
 800c462:	4602      	mov	r2, r0
 800c464:	460b      	mov	r3, r1
 800c466:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c46a:	f7f3 ff2d 	bl	80002c8 <__aeabi_dsub>
 800c46e:	f1bb 0f00 	cmp.w	fp, #0
 800c472:	4604      	mov	r4, r0
 800c474:	460d      	mov	r5, r1
 800c476:	f6bf aed6 	bge.w	800c226 <atan+0x3e>
 800c47a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c47e:	461d      	mov	r5, r3
 800c480:	e6d1      	b.n	800c226 <atan+0x3e>
 800c482:	a51d      	add	r5, pc, #116	; (adr r5, 800c4f8 <atan+0x310>)
 800c484:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c488:	e6cd      	b.n	800c226 <atan+0x3e>
 800c48a:	bf00      	nop
 800c48c:	f3af 8000 	nop.w
 800c490:	54442d18 	.word	0x54442d18
 800c494:	bff921fb 	.word	0xbff921fb
 800c498:	8800759c 	.word	0x8800759c
 800c49c:	7e37e43c 	.word	0x7e37e43c
 800c4a0:	e322da11 	.word	0xe322da11
 800c4a4:	3f90ad3a 	.word	0x3f90ad3a
 800c4a8:	24760deb 	.word	0x24760deb
 800c4ac:	3fa97b4b 	.word	0x3fa97b4b
 800c4b0:	a0d03d51 	.word	0xa0d03d51
 800c4b4:	3fb10d66 	.word	0x3fb10d66
 800c4b8:	c54c206e 	.word	0xc54c206e
 800c4bc:	3fb745cd 	.word	0x3fb745cd
 800c4c0:	920083ff 	.word	0x920083ff
 800c4c4:	3fc24924 	.word	0x3fc24924
 800c4c8:	5555550d 	.word	0x5555550d
 800c4cc:	3fd55555 	.word	0x3fd55555
 800c4d0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c4d4:	bfa2b444 	.word	0xbfa2b444
 800c4d8:	52defd9a 	.word	0x52defd9a
 800c4dc:	3fadde2d 	.word	0x3fadde2d
 800c4e0:	af749a6d 	.word	0xaf749a6d
 800c4e4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c4e8:	fe231671 	.word	0xfe231671
 800c4ec:	3fbc71c6 	.word	0x3fbc71c6
 800c4f0:	9998ebc4 	.word	0x9998ebc4
 800c4f4:	3fc99999 	.word	0x3fc99999
 800c4f8:	54442d18 	.word	0x54442d18
 800c4fc:	3ff921fb 	.word	0x3ff921fb
 800c500:	440fffff 	.word	0x440fffff
 800c504:	7ff00000 	.word	0x7ff00000
 800c508:	3fdbffff 	.word	0x3fdbffff
 800c50c:	3ff00000 	.word	0x3ff00000
 800c510:	3ff2ffff 	.word	0x3ff2ffff
 800c514:	40038000 	.word	0x40038000
 800c518:	3ff80000 	.word	0x3ff80000
 800c51c:	bff00000 	.word	0xbff00000
 800c520:	0800db90 	.word	0x0800db90
 800c524:	0800db70 	.word	0x0800db70

0800c528 <fabs>:
 800c528:	ec51 0b10 	vmov	r0, r1, d0
 800c52c:	ee10 2a10 	vmov	r2, s0
 800c530:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c534:	ec43 2b10 	vmov	d0, r2, r3
 800c538:	4770      	bx	lr
 800c53a:	0000      	movs	r0, r0
 800c53c:	0000      	movs	r0, r0
	...

0800c540 <tan>:
 800c540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c542:	ec53 2b10 	vmov	r2, r3, d0
 800c546:	4816      	ldr	r0, [pc, #88]	; (800c5a0 <tan+0x60>)
 800c548:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c54c:	4281      	cmp	r1, r0
 800c54e:	dc07      	bgt.n	800c560 <tan+0x20>
 800c550:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800c598 <tan+0x58>
 800c554:	2001      	movs	r0, #1
 800c556:	b005      	add	sp, #20
 800c558:	f85d eb04 	ldr.w	lr, [sp], #4
 800c55c:	f000 bd80 	b.w	800d060 <__kernel_tan>
 800c560:	4810      	ldr	r0, [pc, #64]	; (800c5a4 <tan+0x64>)
 800c562:	4281      	cmp	r1, r0
 800c564:	dd09      	ble.n	800c57a <tan+0x3a>
 800c566:	ee10 0a10 	vmov	r0, s0
 800c56a:	4619      	mov	r1, r3
 800c56c:	f7f3 feac 	bl	80002c8 <__aeabi_dsub>
 800c570:	ec41 0b10 	vmov	d0, r0, r1
 800c574:	b005      	add	sp, #20
 800c576:	f85d fb04 	ldr.w	pc, [sp], #4
 800c57a:	4668      	mov	r0, sp
 800c57c:	f000 f814 	bl	800c5a8 <__ieee754_rem_pio2>
 800c580:	0040      	lsls	r0, r0, #1
 800c582:	f000 0002 	and.w	r0, r0, #2
 800c586:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c58a:	ed9d 0b00 	vldr	d0, [sp]
 800c58e:	f1c0 0001 	rsb	r0, r0, #1
 800c592:	f000 fd65 	bl	800d060 <__kernel_tan>
 800c596:	e7ed      	b.n	800c574 <tan+0x34>
	...
 800c5a0:	3fe921fb 	.word	0x3fe921fb
 800c5a4:	7fefffff 	.word	0x7fefffff

0800c5a8 <__ieee754_rem_pio2>:
 800c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ac:	ed2d 8b02 	vpush	{d8}
 800c5b0:	ec55 4b10 	vmov	r4, r5, d0
 800c5b4:	4bca      	ldr	r3, [pc, #808]	; (800c8e0 <__ieee754_rem_pio2+0x338>)
 800c5b6:	b08b      	sub	sp, #44	; 0x2c
 800c5b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c5bc:	4598      	cmp	r8, r3
 800c5be:	4682      	mov	sl, r0
 800c5c0:	9502      	str	r5, [sp, #8]
 800c5c2:	dc08      	bgt.n	800c5d6 <__ieee754_rem_pio2+0x2e>
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	ed80 0b00 	vstr	d0, [r0]
 800c5cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c5d0:	f04f 0b00 	mov.w	fp, #0
 800c5d4:	e028      	b.n	800c628 <__ieee754_rem_pio2+0x80>
 800c5d6:	4bc3      	ldr	r3, [pc, #780]	; (800c8e4 <__ieee754_rem_pio2+0x33c>)
 800c5d8:	4598      	cmp	r8, r3
 800c5da:	dc78      	bgt.n	800c6ce <__ieee754_rem_pio2+0x126>
 800c5dc:	9b02      	ldr	r3, [sp, #8]
 800c5de:	4ec2      	ldr	r6, [pc, #776]	; (800c8e8 <__ieee754_rem_pio2+0x340>)
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	ee10 0a10 	vmov	r0, s0
 800c5e6:	a3b0      	add	r3, pc, #704	; (adr r3, 800c8a8 <__ieee754_rem_pio2+0x300>)
 800c5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	dd39      	ble.n	800c664 <__ieee754_rem_pio2+0xbc>
 800c5f0:	f7f3 fe6a 	bl	80002c8 <__aeabi_dsub>
 800c5f4:	45b0      	cmp	r8, r6
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	460d      	mov	r5, r1
 800c5fa:	d01b      	beq.n	800c634 <__ieee754_rem_pio2+0x8c>
 800c5fc:	a3ac      	add	r3, pc, #688	; (adr r3, 800c8b0 <__ieee754_rem_pio2+0x308>)
 800c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c602:	f7f3 fe61 	bl	80002c8 <__aeabi_dsub>
 800c606:	4602      	mov	r2, r0
 800c608:	460b      	mov	r3, r1
 800c60a:	e9ca 2300 	strd	r2, r3, [sl]
 800c60e:	4620      	mov	r0, r4
 800c610:	4629      	mov	r1, r5
 800c612:	f7f3 fe59 	bl	80002c8 <__aeabi_dsub>
 800c616:	a3a6      	add	r3, pc, #664	; (adr r3, 800c8b0 <__ieee754_rem_pio2+0x308>)
 800c618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61c:	f7f3 fe54 	bl	80002c8 <__aeabi_dsub>
 800c620:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c624:	f04f 0b01 	mov.w	fp, #1
 800c628:	4658      	mov	r0, fp
 800c62a:	b00b      	add	sp, #44	; 0x2c
 800c62c:	ecbd 8b02 	vpop	{d8}
 800c630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c634:	a3a0      	add	r3, pc, #640	; (adr r3, 800c8b8 <__ieee754_rem_pio2+0x310>)
 800c636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63a:	f7f3 fe45 	bl	80002c8 <__aeabi_dsub>
 800c63e:	a3a0      	add	r3, pc, #640	; (adr r3, 800c8c0 <__ieee754_rem_pio2+0x318>)
 800c640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c644:	4604      	mov	r4, r0
 800c646:	460d      	mov	r5, r1
 800c648:	f7f3 fe3e 	bl	80002c8 <__aeabi_dsub>
 800c64c:	4602      	mov	r2, r0
 800c64e:	460b      	mov	r3, r1
 800c650:	e9ca 2300 	strd	r2, r3, [sl]
 800c654:	4620      	mov	r0, r4
 800c656:	4629      	mov	r1, r5
 800c658:	f7f3 fe36 	bl	80002c8 <__aeabi_dsub>
 800c65c:	a398      	add	r3, pc, #608	; (adr r3, 800c8c0 <__ieee754_rem_pio2+0x318>)
 800c65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c662:	e7db      	b.n	800c61c <__ieee754_rem_pio2+0x74>
 800c664:	f7f3 fe32 	bl	80002cc <__adddf3>
 800c668:	45b0      	cmp	r8, r6
 800c66a:	4604      	mov	r4, r0
 800c66c:	460d      	mov	r5, r1
 800c66e:	d016      	beq.n	800c69e <__ieee754_rem_pio2+0xf6>
 800c670:	a38f      	add	r3, pc, #572	; (adr r3, 800c8b0 <__ieee754_rem_pio2+0x308>)
 800c672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c676:	f7f3 fe29 	bl	80002cc <__adddf3>
 800c67a:	4602      	mov	r2, r0
 800c67c:	460b      	mov	r3, r1
 800c67e:	e9ca 2300 	strd	r2, r3, [sl]
 800c682:	4620      	mov	r0, r4
 800c684:	4629      	mov	r1, r5
 800c686:	f7f3 fe1f 	bl	80002c8 <__aeabi_dsub>
 800c68a:	a389      	add	r3, pc, #548	; (adr r3, 800c8b0 <__ieee754_rem_pio2+0x308>)
 800c68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c690:	f7f3 fe1c 	bl	80002cc <__adddf3>
 800c694:	f04f 3bff 	mov.w	fp, #4294967295
 800c698:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c69c:	e7c4      	b.n	800c628 <__ieee754_rem_pio2+0x80>
 800c69e:	a386      	add	r3, pc, #536	; (adr r3, 800c8b8 <__ieee754_rem_pio2+0x310>)
 800c6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a4:	f7f3 fe12 	bl	80002cc <__adddf3>
 800c6a8:	a385      	add	r3, pc, #532	; (adr r3, 800c8c0 <__ieee754_rem_pio2+0x318>)
 800c6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	460d      	mov	r5, r1
 800c6b2:	f7f3 fe0b 	bl	80002cc <__adddf3>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	e9ca 2300 	strd	r2, r3, [sl]
 800c6be:	4620      	mov	r0, r4
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	f7f3 fe01 	bl	80002c8 <__aeabi_dsub>
 800c6c6:	a37e      	add	r3, pc, #504	; (adr r3, 800c8c0 <__ieee754_rem_pio2+0x318>)
 800c6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6cc:	e7e0      	b.n	800c690 <__ieee754_rem_pio2+0xe8>
 800c6ce:	4b87      	ldr	r3, [pc, #540]	; (800c8ec <__ieee754_rem_pio2+0x344>)
 800c6d0:	4598      	cmp	r8, r3
 800c6d2:	f300 80d9 	bgt.w	800c888 <__ieee754_rem_pio2+0x2e0>
 800c6d6:	f7ff ff27 	bl	800c528 <fabs>
 800c6da:	ec55 4b10 	vmov	r4, r5, d0
 800c6de:	ee10 0a10 	vmov	r0, s0
 800c6e2:	a379      	add	r3, pc, #484	; (adr r3, 800c8c8 <__ieee754_rem_pio2+0x320>)
 800c6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	f7f3 ffa5 	bl	8000638 <__aeabi_dmul>
 800c6ee:	4b80      	ldr	r3, [pc, #512]	; (800c8f0 <__ieee754_rem_pio2+0x348>)
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f7f3 fdeb 	bl	80002cc <__adddf3>
 800c6f6:	f7f4 fa4f 	bl	8000b98 <__aeabi_d2iz>
 800c6fa:	4683      	mov	fp, r0
 800c6fc:	f7f3 ff32 	bl	8000564 <__aeabi_i2d>
 800c700:	4602      	mov	r2, r0
 800c702:	460b      	mov	r3, r1
 800c704:	ec43 2b18 	vmov	d8, r2, r3
 800c708:	a367      	add	r3, pc, #412	; (adr r3, 800c8a8 <__ieee754_rem_pio2+0x300>)
 800c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70e:	f7f3 ff93 	bl	8000638 <__aeabi_dmul>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	4620      	mov	r0, r4
 800c718:	4629      	mov	r1, r5
 800c71a:	f7f3 fdd5 	bl	80002c8 <__aeabi_dsub>
 800c71e:	a364      	add	r3, pc, #400	; (adr r3, 800c8b0 <__ieee754_rem_pio2+0x308>)
 800c720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c724:	4606      	mov	r6, r0
 800c726:	460f      	mov	r7, r1
 800c728:	ec51 0b18 	vmov	r0, r1, d8
 800c72c:	f7f3 ff84 	bl	8000638 <__aeabi_dmul>
 800c730:	f1bb 0f1f 	cmp.w	fp, #31
 800c734:	4604      	mov	r4, r0
 800c736:	460d      	mov	r5, r1
 800c738:	dc0d      	bgt.n	800c756 <__ieee754_rem_pio2+0x1ae>
 800c73a:	4b6e      	ldr	r3, [pc, #440]	; (800c8f4 <__ieee754_rem_pio2+0x34c>)
 800c73c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c744:	4543      	cmp	r3, r8
 800c746:	d006      	beq.n	800c756 <__ieee754_rem_pio2+0x1ae>
 800c748:	4622      	mov	r2, r4
 800c74a:	462b      	mov	r3, r5
 800c74c:	4630      	mov	r0, r6
 800c74e:	4639      	mov	r1, r7
 800c750:	f7f3 fdba 	bl	80002c8 <__aeabi_dsub>
 800c754:	e00f      	b.n	800c776 <__ieee754_rem_pio2+0x1ce>
 800c756:	462b      	mov	r3, r5
 800c758:	4622      	mov	r2, r4
 800c75a:	4630      	mov	r0, r6
 800c75c:	4639      	mov	r1, r7
 800c75e:	f7f3 fdb3 	bl	80002c8 <__aeabi_dsub>
 800c762:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c766:	9303      	str	r3, [sp, #12]
 800c768:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c76c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c770:	f1b8 0f10 	cmp.w	r8, #16
 800c774:	dc02      	bgt.n	800c77c <__ieee754_rem_pio2+0x1d4>
 800c776:	e9ca 0100 	strd	r0, r1, [sl]
 800c77a:	e039      	b.n	800c7f0 <__ieee754_rem_pio2+0x248>
 800c77c:	a34e      	add	r3, pc, #312	; (adr r3, 800c8b8 <__ieee754_rem_pio2+0x310>)
 800c77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c782:	ec51 0b18 	vmov	r0, r1, d8
 800c786:	f7f3 ff57 	bl	8000638 <__aeabi_dmul>
 800c78a:	4604      	mov	r4, r0
 800c78c:	460d      	mov	r5, r1
 800c78e:	4602      	mov	r2, r0
 800c790:	460b      	mov	r3, r1
 800c792:	4630      	mov	r0, r6
 800c794:	4639      	mov	r1, r7
 800c796:	f7f3 fd97 	bl	80002c8 <__aeabi_dsub>
 800c79a:	4602      	mov	r2, r0
 800c79c:	460b      	mov	r3, r1
 800c79e:	4680      	mov	r8, r0
 800c7a0:	4689      	mov	r9, r1
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	4639      	mov	r1, r7
 800c7a6:	f7f3 fd8f 	bl	80002c8 <__aeabi_dsub>
 800c7aa:	4622      	mov	r2, r4
 800c7ac:	462b      	mov	r3, r5
 800c7ae:	f7f3 fd8b 	bl	80002c8 <__aeabi_dsub>
 800c7b2:	a343      	add	r3, pc, #268	; (adr r3, 800c8c0 <__ieee754_rem_pio2+0x318>)
 800c7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b8:	4604      	mov	r4, r0
 800c7ba:	460d      	mov	r5, r1
 800c7bc:	ec51 0b18 	vmov	r0, r1, d8
 800c7c0:	f7f3 ff3a 	bl	8000638 <__aeabi_dmul>
 800c7c4:	4622      	mov	r2, r4
 800c7c6:	462b      	mov	r3, r5
 800c7c8:	f7f3 fd7e 	bl	80002c8 <__aeabi_dsub>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	460d      	mov	r5, r1
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	4649      	mov	r1, r9
 800c7d8:	f7f3 fd76 	bl	80002c8 <__aeabi_dsub>
 800c7dc:	9a03      	ldr	r2, [sp, #12]
 800c7de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c7e2:	1ad3      	subs	r3, r2, r3
 800c7e4:	2b31      	cmp	r3, #49	; 0x31
 800c7e6:	dc24      	bgt.n	800c832 <__ieee754_rem_pio2+0x28a>
 800c7e8:	e9ca 0100 	strd	r0, r1, [sl]
 800c7ec:	4646      	mov	r6, r8
 800c7ee:	464f      	mov	r7, r9
 800c7f0:	e9da 8900 	ldrd	r8, r9, [sl]
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	4642      	mov	r2, r8
 800c7f8:	464b      	mov	r3, r9
 800c7fa:	4639      	mov	r1, r7
 800c7fc:	f7f3 fd64 	bl	80002c8 <__aeabi_dsub>
 800c800:	462b      	mov	r3, r5
 800c802:	4622      	mov	r2, r4
 800c804:	f7f3 fd60 	bl	80002c8 <__aeabi_dsub>
 800c808:	9b02      	ldr	r3, [sp, #8]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c810:	f6bf af0a 	bge.w	800c628 <__ieee754_rem_pio2+0x80>
 800c814:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c818:	f8ca 3004 	str.w	r3, [sl, #4]
 800c81c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c820:	f8ca 8000 	str.w	r8, [sl]
 800c824:	f8ca 0008 	str.w	r0, [sl, #8]
 800c828:	f8ca 300c 	str.w	r3, [sl, #12]
 800c82c:	f1cb 0b00 	rsb	fp, fp, #0
 800c830:	e6fa      	b.n	800c628 <__ieee754_rem_pio2+0x80>
 800c832:	a327      	add	r3, pc, #156	; (adr r3, 800c8d0 <__ieee754_rem_pio2+0x328>)
 800c834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c838:	ec51 0b18 	vmov	r0, r1, d8
 800c83c:	f7f3 fefc 	bl	8000638 <__aeabi_dmul>
 800c840:	4604      	mov	r4, r0
 800c842:	460d      	mov	r5, r1
 800c844:	4602      	mov	r2, r0
 800c846:	460b      	mov	r3, r1
 800c848:	4640      	mov	r0, r8
 800c84a:	4649      	mov	r1, r9
 800c84c:	f7f3 fd3c 	bl	80002c8 <__aeabi_dsub>
 800c850:	4602      	mov	r2, r0
 800c852:	460b      	mov	r3, r1
 800c854:	4606      	mov	r6, r0
 800c856:	460f      	mov	r7, r1
 800c858:	4640      	mov	r0, r8
 800c85a:	4649      	mov	r1, r9
 800c85c:	f7f3 fd34 	bl	80002c8 <__aeabi_dsub>
 800c860:	4622      	mov	r2, r4
 800c862:	462b      	mov	r3, r5
 800c864:	f7f3 fd30 	bl	80002c8 <__aeabi_dsub>
 800c868:	a31b      	add	r3, pc, #108	; (adr r3, 800c8d8 <__ieee754_rem_pio2+0x330>)
 800c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86e:	4604      	mov	r4, r0
 800c870:	460d      	mov	r5, r1
 800c872:	ec51 0b18 	vmov	r0, r1, d8
 800c876:	f7f3 fedf 	bl	8000638 <__aeabi_dmul>
 800c87a:	4622      	mov	r2, r4
 800c87c:	462b      	mov	r3, r5
 800c87e:	f7f3 fd23 	bl	80002c8 <__aeabi_dsub>
 800c882:	4604      	mov	r4, r0
 800c884:	460d      	mov	r5, r1
 800c886:	e75f      	b.n	800c748 <__ieee754_rem_pio2+0x1a0>
 800c888:	4b1b      	ldr	r3, [pc, #108]	; (800c8f8 <__ieee754_rem_pio2+0x350>)
 800c88a:	4598      	cmp	r8, r3
 800c88c:	dd36      	ble.n	800c8fc <__ieee754_rem_pio2+0x354>
 800c88e:	ee10 2a10 	vmov	r2, s0
 800c892:	462b      	mov	r3, r5
 800c894:	4620      	mov	r0, r4
 800c896:	4629      	mov	r1, r5
 800c898:	f7f3 fd16 	bl	80002c8 <__aeabi_dsub>
 800c89c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c8a0:	e9ca 0100 	strd	r0, r1, [sl]
 800c8a4:	e694      	b.n	800c5d0 <__ieee754_rem_pio2+0x28>
 800c8a6:	bf00      	nop
 800c8a8:	54400000 	.word	0x54400000
 800c8ac:	3ff921fb 	.word	0x3ff921fb
 800c8b0:	1a626331 	.word	0x1a626331
 800c8b4:	3dd0b461 	.word	0x3dd0b461
 800c8b8:	1a600000 	.word	0x1a600000
 800c8bc:	3dd0b461 	.word	0x3dd0b461
 800c8c0:	2e037073 	.word	0x2e037073
 800c8c4:	3ba3198a 	.word	0x3ba3198a
 800c8c8:	6dc9c883 	.word	0x6dc9c883
 800c8cc:	3fe45f30 	.word	0x3fe45f30
 800c8d0:	2e000000 	.word	0x2e000000
 800c8d4:	3ba3198a 	.word	0x3ba3198a
 800c8d8:	252049c1 	.word	0x252049c1
 800c8dc:	397b839a 	.word	0x397b839a
 800c8e0:	3fe921fb 	.word	0x3fe921fb
 800c8e4:	4002d97b 	.word	0x4002d97b
 800c8e8:	3ff921fb 	.word	0x3ff921fb
 800c8ec:	413921fb 	.word	0x413921fb
 800c8f0:	3fe00000 	.word	0x3fe00000
 800c8f4:	0800dbb0 	.word	0x0800dbb0
 800c8f8:	7fefffff 	.word	0x7fefffff
 800c8fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c900:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c904:	ee10 0a10 	vmov	r0, s0
 800c908:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c90c:	ee10 6a10 	vmov	r6, s0
 800c910:	460f      	mov	r7, r1
 800c912:	f7f4 f941 	bl	8000b98 <__aeabi_d2iz>
 800c916:	f7f3 fe25 	bl	8000564 <__aeabi_i2d>
 800c91a:	4602      	mov	r2, r0
 800c91c:	460b      	mov	r3, r1
 800c91e:	4630      	mov	r0, r6
 800c920:	4639      	mov	r1, r7
 800c922:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c926:	f7f3 fccf 	bl	80002c8 <__aeabi_dsub>
 800c92a:	4b23      	ldr	r3, [pc, #140]	; (800c9b8 <__ieee754_rem_pio2+0x410>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	f7f3 fe83 	bl	8000638 <__aeabi_dmul>
 800c932:	460f      	mov	r7, r1
 800c934:	4606      	mov	r6, r0
 800c936:	f7f4 f92f 	bl	8000b98 <__aeabi_d2iz>
 800c93a:	f7f3 fe13 	bl	8000564 <__aeabi_i2d>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	4630      	mov	r0, r6
 800c944:	4639      	mov	r1, r7
 800c946:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c94a:	f7f3 fcbd 	bl	80002c8 <__aeabi_dsub>
 800c94e:	4b1a      	ldr	r3, [pc, #104]	; (800c9b8 <__ieee754_rem_pio2+0x410>)
 800c950:	2200      	movs	r2, #0
 800c952:	f7f3 fe71 	bl	8000638 <__aeabi_dmul>
 800c956:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c95a:	ad04      	add	r5, sp, #16
 800c95c:	f04f 0803 	mov.w	r8, #3
 800c960:	46a9      	mov	r9, r5
 800c962:	2600      	movs	r6, #0
 800c964:	2700      	movs	r7, #0
 800c966:	4632      	mov	r2, r6
 800c968:	463b      	mov	r3, r7
 800c96a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c96e:	46c3      	mov	fp, r8
 800c970:	3d08      	subs	r5, #8
 800c972:	f108 38ff 	add.w	r8, r8, #4294967295
 800c976:	f7f4 f8c7 	bl	8000b08 <__aeabi_dcmpeq>
 800c97a:	2800      	cmp	r0, #0
 800c97c:	d1f3      	bne.n	800c966 <__ieee754_rem_pio2+0x3be>
 800c97e:	4b0f      	ldr	r3, [pc, #60]	; (800c9bc <__ieee754_rem_pio2+0x414>)
 800c980:	9301      	str	r3, [sp, #4]
 800c982:	2302      	movs	r3, #2
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	4622      	mov	r2, r4
 800c988:	465b      	mov	r3, fp
 800c98a:	4651      	mov	r1, sl
 800c98c:	4648      	mov	r0, r9
 800c98e:	f000 f817 	bl	800c9c0 <__kernel_rem_pio2>
 800c992:	9b02      	ldr	r3, [sp, #8]
 800c994:	2b00      	cmp	r3, #0
 800c996:	4683      	mov	fp, r0
 800c998:	f6bf ae46 	bge.w	800c628 <__ieee754_rem_pio2+0x80>
 800c99c:	e9da 2100 	ldrd	r2, r1, [sl]
 800c9a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9a4:	e9ca 2300 	strd	r2, r3, [sl]
 800c9a8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c9ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9b0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c9b4:	e73a      	b.n	800c82c <__ieee754_rem_pio2+0x284>
 800c9b6:	bf00      	nop
 800c9b8:	41700000 	.word	0x41700000
 800c9bc:	0800dc30 	.word	0x0800dc30

0800c9c0 <__kernel_rem_pio2>:
 800c9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c4:	ed2d 8b02 	vpush	{d8}
 800c9c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c9cc:	f112 0f14 	cmn.w	r2, #20
 800c9d0:	9308      	str	r3, [sp, #32]
 800c9d2:	9101      	str	r1, [sp, #4]
 800c9d4:	4bc4      	ldr	r3, [pc, #784]	; (800cce8 <__kernel_rem_pio2+0x328>)
 800c9d6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c9d8:	900b      	str	r0, [sp, #44]	; 0x2c
 800c9da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9de:	9302      	str	r3, [sp, #8]
 800c9e0:	9b08      	ldr	r3, [sp, #32]
 800c9e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c9e6:	bfa8      	it	ge
 800c9e8:	1ed4      	subge	r4, r2, #3
 800c9ea:	9306      	str	r3, [sp, #24]
 800c9ec:	bfb2      	itee	lt
 800c9ee:	2400      	movlt	r4, #0
 800c9f0:	2318      	movge	r3, #24
 800c9f2:	fb94 f4f3 	sdivge	r4, r4, r3
 800c9f6:	f06f 0317 	mvn.w	r3, #23
 800c9fa:	fb04 3303 	mla	r3, r4, r3, r3
 800c9fe:	eb03 0a02 	add.w	sl, r3, r2
 800ca02:	9b02      	ldr	r3, [sp, #8]
 800ca04:	9a06      	ldr	r2, [sp, #24]
 800ca06:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ccd8 <__kernel_rem_pio2+0x318>
 800ca0a:	eb03 0802 	add.w	r8, r3, r2
 800ca0e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ca10:	1aa7      	subs	r7, r4, r2
 800ca12:	ae22      	add	r6, sp, #136	; 0x88
 800ca14:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ca18:	2500      	movs	r5, #0
 800ca1a:	4545      	cmp	r5, r8
 800ca1c:	dd13      	ble.n	800ca46 <__kernel_rem_pio2+0x86>
 800ca1e:	9b08      	ldr	r3, [sp, #32]
 800ca20:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ccd8 <__kernel_rem_pio2+0x318>
 800ca24:	aa22      	add	r2, sp, #136	; 0x88
 800ca26:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ca2a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ca2e:	f04f 0800 	mov.w	r8, #0
 800ca32:	9b02      	ldr	r3, [sp, #8]
 800ca34:	4598      	cmp	r8, r3
 800ca36:	dc2f      	bgt.n	800ca98 <__kernel_rem_pio2+0xd8>
 800ca38:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ca3c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ca40:	462f      	mov	r7, r5
 800ca42:	2600      	movs	r6, #0
 800ca44:	e01b      	b.n	800ca7e <__kernel_rem_pio2+0xbe>
 800ca46:	42ef      	cmn	r7, r5
 800ca48:	d407      	bmi.n	800ca5a <__kernel_rem_pio2+0x9a>
 800ca4a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ca4e:	f7f3 fd89 	bl	8000564 <__aeabi_i2d>
 800ca52:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ca56:	3501      	adds	r5, #1
 800ca58:	e7df      	b.n	800ca1a <__kernel_rem_pio2+0x5a>
 800ca5a:	ec51 0b18 	vmov	r0, r1, d8
 800ca5e:	e7f8      	b.n	800ca52 <__kernel_rem_pio2+0x92>
 800ca60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ca68:	f7f3 fde6 	bl	8000638 <__aeabi_dmul>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca74:	f7f3 fc2a 	bl	80002cc <__adddf3>
 800ca78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca7c:	3601      	adds	r6, #1
 800ca7e:	9b06      	ldr	r3, [sp, #24]
 800ca80:	429e      	cmp	r6, r3
 800ca82:	f1a7 0708 	sub.w	r7, r7, #8
 800ca86:	ddeb      	ble.n	800ca60 <__kernel_rem_pio2+0xa0>
 800ca88:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ca8c:	f108 0801 	add.w	r8, r8, #1
 800ca90:	ecab 7b02 	vstmia	fp!, {d7}
 800ca94:	3508      	adds	r5, #8
 800ca96:	e7cc      	b.n	800ca32 <__kernel_rem_pio2+0x72>
 800ca98:	9b02      	ldr	r3, [sp, #8]
 800ca9a:	aa0e      	add	r2, sp, #56	; 0x38
 800ca9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800caa0:	930d      	str	r3, [sp, #52]	; 0x34
 800caa2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800caa4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800caa8:	9c02      	ldr	r4, [sp, #8]
 800caaa:	930c      	str	r3, [sp, #48]	; 0x30
 800caac:	00e3      	lsls	r3, r4, #3
 800caae:	930a      	str	r3, [sp, #40]	; 0x28
 800cab0:	ab9a      	add	r3, sp, #616	; 0x268
 800cab2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cab6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800caba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800cabe:	ab72      	add	r3, sp, #456	; 0x1c8
 800cac0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800cac4:	46c3      	mov	fp, r8
 800cac6:	46a1      	mov	r9, r4
 800cac8:	f1b9 0f00 	cmp.w	r9, #0
 800cacc:	f1a5 0508 	sub.w	r5, r5, #8
 800cad0:	dc77      	bgt.n	800cbc2 <__kernel_rem_pio2+0x202>
 800cad2:	ec47 6b10 	vmov	d0, r6, r7
 800cad6:	4650      	mov	r0, sl
 800cad8:	f000 fd4e 	bl	800d578 <scalbn>
 800cadc:	ec57 6b10 	vmov	r6, r7, d0
 800cae0:	2200      	movs	r2, #0
 800cae2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cae6:	ee10 0a10 	vmov	r0, s0
 800caea:	4639      	mov	r1, r7
 800caec:	f7f3 fda4 	bl	8000638 <__aeabi_dmul>
 800caf0:	ec41 0b10 	vmov	d0, r0, r1
 800caf4:	f000 fcc0 	bl	800d478 <floor>
 800caf8:	4b7c      	ldr	r3, [pc, #496]	; (800ccec <__kernel_rem_pio2+0x32c>)
 800cafa:	ec51 0b10 	vmov	r0, r1, d0
 800cafe:	2200      	movs	r2, #0
 800cb00:	f7f3 fd9a 	bl	8000638 <__aeabi_dmul>
 800cb04:	4602      	mov	r2, r0
 800cb06:	460b      	mov	r3, r1
 800cb08:	4630      	mov	r0, r6
 800cb0a:	4639      	mov	r1, r7
 800cb0c:	f7f3 fbdc 	bl	80002c8 <__aeabi_dsub>
 800cb10:	460f      	mov	r7, r1
 800cb12:	4606      	mov	r6, r0
 800cb14:	f7f4 f840 	bl	8000b98 <__aeabi_d2iz>
 800cb18:	9004      	str	r0, [sp, #16]
 800cb1a:	f7f3 fd23 	bl	8000564 <__aeabi_i2d>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	460b      	mov	r3, r1
 800cb22:	4630      	mov	r0, r6
 800cb24:	4639      	mov	r1, r7
 800cb26:	f7f3 fbcf 	bl	80002c8 <__aeabi_dsub>
 800cb2a:	f1ba 0f00 	cmp.w	sl, #0
 800cb2e:	4606      	mov	r6, r0
 800cb30:	460f      	mov	r7, r1
 800cb32:	dd6d      	ble.n	800cc10 <__kernel_rem_pio2+0x250>
 800cb34:	1e62      	subs	r2, r4, #1
 800cb36:	ab0e      	add	r3, sp, #56	; 0x38
 800cb38:	9d04      	ldr	r5, [sp, #16]
 800cb3a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cb3e:	f1ca 0118 	rsb	r1, sl, #24
 800cb42:	fa40 f301 	asr.w	r3, r0, r1
 800cb46:	441d      	add	r5, r3
 800cb48:	408b      	lsls	r3, r1
 800cb4a:	1ac0      	subs	r0, r0, r3
 800cb4c:	ab0e      	add	r3, sp, #56	; 0x38
 800cb4e:	9504      	str	r5, [sp, #16]
 800cb50:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cb54:	f1ca 0317 	rsb	r3, sl, #23
 800cb58:	fa40 fb03 	asr.w	fp, r0, r3
 800cb5c:	f1bb 0f00 	cmp.w	fp, #0
 800cb60:	dd65      	ble.n	800cc2e <__kernel_rem_pio2+0x26e>
 800cb62:	9b04      	ldr	r3, [sp, #16]
 800cb64:	2200      	movs	r2, #0
 800cb66:	3301      	adds	r3, #1
 800cb68:	9304      	str	r3, [sp, #16]
 800cb6a:	4615      	mov	r5, r2
 800cb6c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cb70:	4294      	cmp	r4, r2
 800cb72:	f300 809c 	bgt.w	800ccae <__kernel_rem_pio2+0x2ee>
 800cb76:	f1ba 0f00 	cmp.w	sl, #0
 800cb7a:	dd07      	ble.n	800cb8c <__kernel_rem_pio2+0x1cc>
 800cb7c:	f1ba 0f01 	cmp.w	sl, #1
 800cb80:	f000 80c0 	beq.w	800cd04 <__kernel_rem_pio2+0x344>
 800cb84:	f1ba 0f02 	cmp.w	sl, #2
 800cb88:	f000 80c6 	beq.w	800cd18 <__kernel_rem_pio2+0x358>
 800cb8c:	f1bb 0f02 	cmp.w	fp, #2
 800cb90:	d14d      	bne.n	800cc2e <__kernel_rem_pio2+0x26e>
 800cb92:	4632      	mov	r2, r6
 800cb94:	463b      	mov	r3, r7
 800cb96:	4956      	ldr	r1, [pc, #344]	; (800ccf0 <__kernel_rem_pio2+0x330>)
 800cb98:	2000      	movs	r0, #0
 800cb9a:	f7f3 fb95 	bl	80002c8 <__aeabi_dsub>
 800cb9e:	4606      	mov	r6, r0
 800cba0:	460f      	mov	r7, r1
 800cba2:	2d00      	cmp	r5, #0
 800cba4:	d043      	beq.n	800cc2e <__kernel_rem_pio2+0x26e>
 800cba6:	4650      	mov	r0, sl
 800cba8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800cce0 <__kernel_rem_pio2+0x320>
 800cbac:	f000 fce4 	bl	800d578 <scalbn>
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	4639      	mov	r1, r7
 800cbb4:	ec53 2b10 	vmov	r2, r3, d0
 800cbb8:	f7f3 fb86 	bl	80002c8 <__aeabi_dsub>
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	460f      	mov	r7, r1
 800cbc0:	e035      	b.n	800cc2e <__kernel_rem_pio2+0x26e>
 800cbc2:	4b4c      	ldr	r3, [pc, #304]	; (800ccf4 <__kernel_rem_pio2+0x334>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	4639      	mov	r1, r7
 800cbca:	f7f3 fd35 	bl	8000638 <__aeabi_dmul>
 800cbce:	f7f3 ffe3 	bl	8000b98 <__aeabi_d2iz>
 800cbd2:	f7f3 fcc7 	bl	8000564 <__aeabi_i2d>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	460b      	mov	r3, r1
 800cbda:	ec43 2b18 	vmov	d8, r2, r3
 800cbde:	4b46      	ldr	r3, [pc, #280]	; (800ccf8 <__kernel_rem_pio2+0x338>)
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f7f3 fd29 	bl	8000638 <__aeabi_dmul>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	460b      	mov	r3, r1
 800cbea:	4630      	mov	r0, r6
 800cbec:	4639      	mov	r1, r7
 800cbee:	f7f3 fb6b 	bl	80002c8 <__aeabi_dsub>
 800cbf2:	f7f3 ffd1 	bl	8000b98 <__aeabi_d2iz>
 800cbf6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cbfa:	f84b 0b04 	str.w	r0, [fp], #4
 800cbfe:	ec51 0b18 	vmov	r0, r1, d8
 800cc02:	f7f3 fb63 	bl	80002cc <__adddf3>
 800cc06:	f109 39ff 	add.w	r9, r9, #4294967295
 800cc0a:	4606      	mov	r6, r0
 800cc0c:	460f      	mov	r7, r1
 800cc0e:	e75b      	b.n	800cac8 <__kernel_rem_pio2+0x108>
 800cc10:	d106      	bne.n	800cc20 <__kernel_rem_pio2+0x260>
 800cc12:	1e63      	subs	r3, r4, #1
 800cc14:	aa0e      	add	r2, sp, #56	; 0x38
 800cc16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cc1a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800cc1e:	e79d      	b.n	800cb5c <__kernel_rem_pio2+0x19c>
 800cc20:	4b36      	ldr	r3, [pc, #216]	; (800ccfc <__kernel_rem_pio2+0x33c>)
 800cc22:	2200      	movs	r2, #0
 800cc24:	f7f3 ff8e 	bl	8000b44 <__aeabi_dcmpge>
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	d13d      	bne.n	800cca8 <__kernel_rem_pio2+0x2e8>
 800cc2c:	4683      	mov	fp, r0
 800cc2e:	2200      	movs	r2, #0
 800cc30:	2300      	movs	r3, #0
 800cc32:	4630      	mov	r0, r6
 800cc34:	4639      	mov	r1, r7
 800cc36:	f7f3 ff67 	bl	8000b08 <__aeabi_dcmpeq>
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	f000 80c0 	beq.w	800cdc0 <__kernel_rem_pio2+0x400>
 800cc40:	1e65      	subs	r5, r4, #1
 800cc42:	462b      	mov	r3, r5
 800cc44:	2200      	movs	r2, #0
 800cc46:	9902      	ldr	r1, [sp, #8]
 800cc48:	428b      	cmp	r3, r1
 800cc4a:	da6c      	bge.n	800cd26 <__kernel_rem_pio2+0x366>
 800cc4c:	2a00      	cmp	r2, #0
 800cc4e:	f000 8089 	beq.w	800cd64 <__kernel_rem_pio2+0x3a4>
 800cc52:	ab0e      	add	r3, sp, #56	; 0x38
 800cc54:	f1aa 0a18 	sub.w	sl, sl, #24
 800cc58:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f000 80ad 	beq.w	800cdbc <__kernel_rem_pio2+0x3fc>
 800cc62:	4650      	mov	r0, sl
 800cc64:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800cce0 <__kernel_rem_pio2+0x320>
 800cc68:	f000 fc86 	bl	800d578 <scalbn>
 800cc6c:	ab9a      	add	r3, sp, #616	; 0x268
 800cc6e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cc72:	ec57 6b10 	vmov	r6, r7, d0
 800cc76:	00ec      	lsls	r4, r5, #3
 800cc78:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800cc7c:	46aa      	mov	sl, r5
 800cc7e:	f1ba 0f00 	cmp.w	sl, #0
 800cc82:	f280 80d6 	bge.w	800ce32 <__kernel_rem_pio2+0x472>
 800cc86:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ccd8 <__kernel_rem_pio2+0x318>
 800cc8a:	462e      	mov	r6, r5
 800cc8c:	2e00      	cmp	r6, #0
 800cc8e:	f2c0 8104 	blt.w	800ce9a <__kernel_rem_pio2+0x4da>
 800cc92:	ab72      	add	r3, sp, #456	; 0x1c8
 800cc94:	ed8d 8b06 	vstr	d8, [sp, #24]
 800cc98:	f8df a064 	ldr.w	sl, [pc, #100]	; 800cd00 <__kernel_rem_pio2+0x340>
 800cc9c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800cca0:	f04f 0800 	mov.w	r8, #0
 800cca4:	1baf      	subs	r7, r5, r6
 800cca6:	e0ea      	b.n	800ce7e <__kernel_rem_pio2+0x4be>
 800cca8:	f04f 0b02 	mov.w	fp, #2
 800ccac:	e759      	b.n	800cb62 <__kernel_rem_pio2+0x1a2>
 800ccae:	f8d8 3000 	ldr.w	r3, [r8]
 800ccb2:	b955      	cbnz	r5, 800ccca <__kernel_rem_pio2+0x30a>
 800ccb4:	b123      	cbz	r3, 800ccc0 <__kernel_rem_pio2+0x300>
 800ccb6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ccba:	f8c8 3000 	str.w	r3, [r8]
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	3201      	adds	r2, #1
 800ccc2:	f108 0804 	add.w	r8, r8, #4
 800ccc6:	461d      	mov	r5, r3
 800ccc8:	e752      	b.n	800cb70 <__kernel_rem_pio2+0x1b0>
 800ccca:	1acb      	subs	r3, r1, r3
 800cccc:	f8c8 3000 	str.w	r3, [r8]
 800ccd0:	462b      	mov	r3, r5
 800ccd2:	e7f5      	b.n	800ccc0 <__kernel_rem_pio2+0x300>
 800ccd4:	f3af 8000 	nop.w
	...
 800cce4:	3ff00000 	.word	0x3ff00000
 800cce8:	0800dd78 	.word	0x0800dd78
 800ccec:	40200000 	.word	0x40200000
 800ccf0:	3ff00000 	.word	0x3ff00000
 800ccf4:	3e700000 	.word	0x3e700000
 800ccf8:	41700000 	.word	0x41700000
 800ccfc:	3fe00000 	.word	0x3fe00000
 800cd00:	0800dd38 	.word	0x0800dd38
 800cd04:	1e62      	subs	r2, r4, #1
 800cd06:	ab0e      	add	r3, sp, #56	; 0x38
 800cd08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd0c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cd10:	a90e      	add	r1, sp, #56	; 0x38
 800cd12:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cd16:	e739      	b.n	800cb8c <__kernel_rem_pio2+0x1cc>
 800cd18:	1e62      	subs	r2, r4, #1
 800cd1a:	ab0e      	add	r3, sp, #56	; 0x38
 800cd1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd20:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cd24:	e7f4      	b.n	800cd10 <__kernel_rem_pio2+0x350>
 800cd26:	a90e      	add	r1, sp, #56	; 0x38
 800cd28:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	430a      	orrs	r2, r1
 800cd30:	e789      	b.n	800cc46 <__kernel_rem_pio2+0x286>
 800cd32:	3301      	adds	r3, #1
 800cd34:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cd38:	2900      	cmp	r1, #0
 800cd3a:	d0fa      	beq.n	800cd32 <__kernel_rem_pio2+0x372>
 800cd3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd3e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800cd42:	446a      	add	r2, sp
 800cd44:	3a98      	subs	r2, #152	; 0x98
 800cd46:	920a      	str	r2, [sp, #40]	; 0x28
 800cd48:	9a08      	ldr	r2, [sp, #32]
 800cd4a:	18e3      	adds	r3, r4, r3
 800cd4c:	18a5      	adds	r5, r4, r2
 800cd4e:	aa22      	add	r2, sp, #136	; 0x88
 800cd50:	f104 0801 	add.w	r8, r4, #1
 800cd54:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800cd58:	9304      	str	r3, [sp, #16]
 800cd5a:	9b04      	ldr	r3, [sp, #16]
 800cd5c:	4543      	cmp	r3, r8
 800cd5e:	da04      	bge.n	800cd6a <__kernel_rem_pio2+0x3aa>
 800cd60:	461c      	mov	r4, r3
 800cd62:	e6a3      	b.n	800caac <__kernel_rem_pio2+0xec>
 800cd64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd66:	2301      	movs	r3, #1
 800cd68:	e7e4      	b.n	800cd34 <__kernel_rem_pio2+0x374>
 800cd6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd6c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cd70:	f7f3 fbf8 	bl	8000564 <__aeabi_i2d>
 800cd74:	e8e5 0102 	strd	r0, r1, [r5], #8
 800cd78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd7a:	46ab      	mov	fp, r5
 800cd7c:	461c      	mov	r4, r3
 800cd7e:	f04f 0900 	mov.w	r9, #0
 800cd82:	2600      	movs	r6, #0
 800cd84:	2700      	movs	r7, #0
 800cd86:	9b06      	ldr	r3, [sp, #24]
 800cd88:	4599      	cmp	r9, r3
 800cd8a:	dd06      	ble.n	800cd9a <__kernel_rem_pio2+0x3da>
 800cd8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd8e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800cd92:	f108 0801 	add.w	r8, r8, #1
 800cd96:	930a      	str	r3, [sp, #40]	; 0x28
 800cd98:	e7df      	b.n	800cd5a <__kernel_rem_pio2+0x39a>
 800cd9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800cd9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800cda2:	f7f3 fc49 	bl	8000638 <__aeabi_dmul>
 800cda6:	4602      	mov	r2, r0
 800cda8:	460b      	mov	r3, r1
 800cdaa:	4630      	mov	r0, r6
 800cdac:	4639      	mov	r1, r7
 800cdae:	f7f3 fa8d 	bl	80002cc <__adddf3>
 800cdb2:	f109 0901 	add.w	r9, r9, #1
 800cdb6:	4606      	mov	r6, r0
 800cdb8:	460f      	mov	r7, r1
 800cdba:	e7e4      	b.n	800cd86 <__kernel_rem_pio2+0x3c6>
 800cdbc:	3d01      	subs	r5, #1
 800cdbe:	e748      	b.n	800cc52 <__kernel_rem_pio2+0x292>
 800cdc0:	ec47 6b10 	vmov	d0, r6, r7
 800cdc4:	f1ca 0000 	rsb	r0, sl, #0
 800cdc8:	f000 fbd6 	bl	800d578 <scalbn>
 800cdcc:	ec57 6b10 	vmov	r6, r7, d0
 800cdd0:	4ba0      	ldr	r3, [pc, #640]	; (800d054 <__kernel_rem_pio2+0x694>)
 800cdd2:	ee10 0a10 	vmov	r0, s0
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	4639      	mov	r1, r7
 800cdda:	f7f3 feb3 	bl	8000b44 <__aeabi_dcmpge>
 800cdde:	b1f8      	cbz	r0, 800ce20 <__kernel_rem_pio2+0x460>
 800cde0:	4b9d      	ldr	r3, [pc, #628]	; (800d058 <__kernel_rem_pio2+0x698>)
 800cde2:	2200      	movs	r2, #0
 800cde4:	4630      	mov	r0, r6
 800cde6:	4639      	mov	r1, r7
 800cde8:	f7f3 fc26 	bl	8000638 <__aeabi_dmul>
 800cdec:	f7f3 fed4 	bl	8000b98 <__aeabi_d2iz>
 800cdf0:	4680      	mov	r8, r0
 800cdf2:	f7f3 fbb7 	bl	8000564 <__aeabi_i2d>
 800cdf6:	4b97      	ldr	r3, [pc, #604]	; (800d054 <__kernel_rem_pio2+0x694>)
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f7f3 fc1d 	bl	8000638 <__aeabi_dmul>
 800cdfe:	460b      	mov	r3, r1
 800ce00:	4602      	mov	r2, r0
 800ce02:	4639      	mov	r1, r7
 800ce04:	4630      	mov	r0, r6
 800ce06:	f7f3 fa5f 	bl	80002c8 <__aeabi_dsub>
 800ce0a:	f7f3 fec5 	bl	8000b98 <__aeabi_d2iz>
 800ce0e:	1c65      	adds	r5, r4, #1
 800ce10:	ab0e      	add	r3, sp, #56	; 0x38
 800ce12:	f10a 0a18 	add.w	sl, sl, #24
 800ce16:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ce1a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ce1e:	e720      	b.n	800cc62 <__kernel_rem_pio2+0x2a2>
 800ce20:	4630      	mov	r0, r6
 800ce22:	4639      	mov	r1, r7
 800ce24:	f7f3 feb8 	bl	8000b98 <__aeabi_d2iz>
 800ce28:	ab0e      	add	r3, sp, #56	; 0x38
 800ce2a:	4625      	mov	r5, r4
 800ce2c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ce30:	e717      	b.n	800cc62 <__kernel_rem_pio2+0x2a2>
 800ce32:	ab0e      	add	r3, sp, #56	; 0x38
 800ce34:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ce38:	f7f3 fb94 	bl	8000564 <__aeabi_i2d>
 800ce3c:	4632      	mov	r2, r6
 800ce3e:	463b      	mov	r3, r7
 800ce40:	f7f3 fbfa 	bl	8000638 <__aeabi_dmul>
 800ce44:	4b84      	ldr	r3, [pc, #528]	; (800d058 <__kernel_rem_pio2+0x698>)
 800ce46:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	4630      	mov	r0, r6
 800ce4e:	4639      	mov	r1, r7
 800ce50:	f7f3 fbf2 	bl	8000638 <__aeabi_dmul>
 800ce54:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce58:	4606      	mov	r6, r0
 800ce5a:	460f      	mov	r7, r1
 800ce5c:	e70f      	b.n	800cc7e <__kernel_rem_pio2+0x2be>
 800ce5e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ce62:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ce66:	f7f3 fbe7 	bl	8000638 <__aeabi_dmul>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce72:	f7f3 fa2b 	bl	80002cc <__adddf3>
 800ce76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ce7a:	f108 0801 	add.w	r8, r8, #1
 800ce7e:	9b02      	ldr	r3, [sp, #8]
 800ce80:	4598      	cmp	r8, r3
 800ce82:	dc01      	bgt.n	800ce88 <__kernel_rem_pio2+0x4c8>
 800ce84:	45b8      	cmp	r8, r7
 800ce86:	ddea      	ble.n	800ce5e <__kernel_rem_pio2+0x49e>
 800ce88:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ce8c:	ab4a      	add	r3, sp, #296	; 0x128
 800ce8e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ce92:	ed87 7b00 	vstr	d7, [r7]
 800ce96:	3e01      	subs	r6, #1
 800ce98:	e6f8      	b.n	800cc8c <__kernel_rem_pio2+0x2cc>
 800ce9a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	dc0b      	bgt.n	800ceb8 <__kernel_rem_pio2+0x4f8>
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	dc35      	bgt.n	800cf10 <__kernel_rem_pio2+0x550>
 800cea4:	d059      	beq.n	800cf5a <__kernel_rem_pio2+0x59a>
 800cea6:	9b04      	ldr	r3, [sp, #16]
 800cea8:	f003 0007 	and.w	r0, r3, #7
 800ceac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ceb0:	ecbd 8b02 	vpop	{d8}
 800ceb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ceba:	2b03      	cmp	r3, #3
 800cebc:	d1f3      	bne.n	800cea6 <__kernel_rem_pio2+0x4e6>
 800cebe:	ab4a      	add	r3, sp, #296	; 0x128
 800cec0:	4423      	add	r3, r4
 800cec2:	9306      	str	r3, [sp, #24]
 800cec4:	461c      	mov	r4, r3
 800cec6:	469a      	mov	sl, r3
 800cec8:	9502      	str	r5, [sp, #8]
 800ceca:	9b02      	ldr	r3, [sp, #8]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f1aa 0a08 	sub.w	sl, sl, #8
 800ced2:	dc6b      	bgt.n	800cfac <__kernel_rem_pio2+0x5ec>
 800ced4:	46aa      	mov	sl, r5
 800ced6:	f1ba 0f01 	cmp.w	sl, #1
 800ceda:	f1a4 0408 	sub.w	r4, r4, #8
 800cede:	f300 8085 	bgt.w	800cfec <__kernel_rem_pio2+0x62c>
 800cee2:	9c06      	ldr	r4, [sp, #24]
 800cee4:	2000      	movs	r0, #0
 800cee6:	3408      	adds	r4, #8
 800cee8:	2100      	movs	r1, #0
 800ceea:	2d01      	cmp	r5, #1
 800ceec:	f300 809d 	bgt.w	800d02a <__kernel_rem_pio2+0x66a>
 800cef0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800cef4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800cef8:	f1bb 0f00 	cmp.w	fp, #0
 800cefc:	f040 809b 	bne.w	800d036 <__kernel_rem_pio2+0x676>
 800cf00:	9b01      	ldr	r3, [sp, #4]
 800cf02:	e9c3 5600 	strd	r5, r6, [r3]
 800cf06:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800cf0a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cf0e:	e7ca      	b.n	800cea6 <__kernel_rem_pio2+0x4e6>
 800cf10:	3408      	adds	r4, #8
 800cf12:	ab4a      	add	r3, sp, #296	; 0x128
 800cf14:	441c      	add	r4, r3
 800cf16:	462e      	mov	r6, r5
 800cf18:	2000      	movs	r0, #0
 800cf1a:	2100      	movs	r1, #0
 800cf1c:	2e00      	cmp	r6, #0
 800cf1e:	da36      	bge.n	800cf8e <__kernel_rem_pio2+0x5ce>
 800cf20:	f1bb 0f00 	cmp.w	fp, #0
 800cf24:	d039      	beq.n	800cf9a <__kernel_rem_pio2+0x5da>
 800cf26:	4602      	mov	r2, r0
 800cf28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf2c:	9c01      	ldr	r4, [sp, #4]
 800cf2e:	e9c4 2300 	strd	r2, r3, [r4]
 800cf32:	4602      	mov	r2, r0
 800cf34:	460b      	mov	r3, r1
 800cf36:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800cf3a:	f7f3 f9c5 	bl	80002c8 <__aeabi_dsub>
 800cf3e:	ae4c      	add	r6, sp, #304	; 0x130
 800cf40:	2401      	movs	r4, #1
 800cf42:	42a5      	cmp	r5, r4
 800cf44:	da2c      	bge.n	800cfa0 <__kernel_rem_pio2+0x5e0>
 800cf46:	f1bb 0f00 	cmp.w	fp, #0
 800cf4a:	d002      	beq.n	800cf52 <__kernel_rem_pio2+0x592>
 800cf4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf50:	4619      	mov	r1, r3
 800cf52:	9b01      	ldr	r3, [sp, #4]
 800cf54:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cf58:	e7a5      	b.n	800cea6 <__kernel_rem_pio2+0x4e6>
 800cf5a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800cf5e:	eb0d 0403 	add.w	r4, sp, r3
 800cf62:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800cf66:	2000      	movs	r0, #0
 800cf68:	2100      	movs	r1, #0
 800cf6a:	2d00      	cmp	r5, #0
 800cf6c:	da09      	bge.n	800cf82 <__kernel_rem_pio2+0x5c2>
 800cf6e:	f1bb 0f00 	cmp.w	fp, #0
 800cf72:	d002      	beq.n	800cf7a <__kernel_rem_pio2+0x5ba>
 800cf74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf78:	4619      	mov	r1, r3
 800cf7a:	9b01      	ldr	r3, [sp, #4]
 800cf7c:	e9c3 0100 	strd	r0, r1, [r3]
 800cf80:	e791      	b.n	800cea6 <__kernel_rem_pio2+0x4e6>
 800cf82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cf86:	f7f3 f9a1 	bl	80002cc <__adddf3>
 800cf8a:	3d01      	subs	r5, #1
 800cf8c:	e7ed      	b.n	800cf6a <__kernel_rem_pio2+0x5aa>
 800cf8e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cf92:	f7f3 f99b 	bl	80002cc <__adddf3>
 800cf96:	3e01      	subs	r6, #1
 800cf98:	e7c0      	b.n	800cf1c <__kernel_rem_pio2+0x55c>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	e7c5      	b.n	800cf2c <__kernel_rem_pio2+0x56c>
 800cfa0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800cfa4:	f7f3 f992 	bl	80002cc <__adddf3>
 800cfa8:	3401      	adds	r4, #1
 800cfaa:	e7ca      	b.n	800cf42 <__kernel_rem_pio2+0x582>
 800cfac:	e9da 8900 	ldrd	r8, r9, [sl]
 800cfb0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800cfb4:	9b02      	ldr	r3, [sp, #8]
 800cfb6:	3b01      	subs	r3, #1
 800cfb8:	9302      	str	r3, [sp, #8]
 800cfba:	4632      	mov	r2, r6
 800cfbc:	463b      	mov	r3, r7
 800cfbe:	4640      	mov	r0, r8
 800cfc0:	4649      	mov	r1, r9
 800cfc2:	f7f3 f983 	bl	80002cc <__adddf3>
 800cfc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cfca:	4602      	mov	r2, r0
 800cfcc:	460b      	mov	r3, r1
 800cfce:	4640      	mov	r0, r8
 800cfd0:	4649      	mov	r1, r9
 800cfd2:	f7f3 f979 	bl	80002c8 <__aeabi_dsub>
 800cfd6:	4632      	mov	r2, r6
 800cfd8:	463b      	mov	r3, r7
 800cfda:	f7f3 f977 	bl	80002cc <__adddf3>
 800cfde:	ed9d 7b08 	vldr	d7, [sp, #32]
 800cfe2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cfe6:	ed8a 7b00 	vstr	d7, [sl]
 800cfea:	e76e      	b.n	800ceca <__kernel_rem_pio2+0x50a>
 800cfec:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cff0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800cff4:	4640      	mov	r0, r8
 800cff6:	4632      	mov	r2, r6
 800cff8:	463b      	mov	r3, r7
 800cffa:	4649      	mov	r1, r9
 800cffc:	f7f3 f966 	bl	80002cc <__adddf3>
 800d000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d004:	4602      	mov	r2, r0
 800d006:	460b      	mov	r3, r1
 800d008:	4640      	mov	r0, r8
 800d00a:	4649      	mov	r1, r9
 800d00c:	f7f3 f95c 	bl	80002c8 <__aeabi_dsub>
 800d010:	4632      	mov	r2, r6
 800d012:	463b      	mov	r3, r7
 800d014:	f7f3 f95a 	bl	80002cc <__adddf3>
 800d018:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d01c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d020:	ed84 7b00 	vstr	d7, [r4]
 800d024:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d028:	e755      	b.n	800ced6 <__kernel_rem_pio2+0x516>
 800d02a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d02e:	f7f3 f94d 	bl	80002cc <__adddf3>
 800d032:	3d01      	subs	r5, #1
 800d034:	e759      	b.n	800ceea <__kernel_rem_pio2+0x52a>
 800d036:	9b01      	ldr	r3, [sp, #4]
 800d038:	9a01      	ldr	r2, [sp, #4]
 800d03a:	601d      	str	r5, [r3, #0]
 800d03c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d040:	605c      	str	r4, [r3, #4]
 800d042:	609f      	str	r7, [r3, #8]
 800d044:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d048:	60d3      	str	r3, [r2, #12]
 800d04a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d04e:	6110      	str	r0, [r2, #16]
 800d050:	6153      	str	r3, [r2, #20]
 800d052:	e728      	b.n	800cea6 <__kernel_rem_pio2+0x4e6>
 800d054:	41700000 	.word	0x41700000
 800d058:	3e700000 	.word	0x3e700000
 800d05c:	00000000 	.word	0x00000000

0800d060 <__kernel_tan>:
 800d060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d064:	ed2d 8b06 	vpush	{d8-d10}
 800d068:	ec5b ab10 	vmov	sl, fp, d0
 800d06c:	4be0      	ldr	r3, [pc, #896]	; (800d3f0 <__kernel_tan+0x390>)
 800d06e:	b083      	sub	sp, #12
 800d070:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800d074:	429f      	cmp	r7, r3
 800d076:	ec59 8b11 	vmov	r8, r9, d1
 800d07a:	4606      	mov	r6, r0
 800d07c:	f8cd b000 	str.w	fp, [sp]
 800d080:	dc61      	bgt.n	800d146 <__kernel_tan+0xe6>
 800d082:	ee10 0a10 	vmov	r0, s0
 800d086:	4659      	mov	r1, fp
 800d088:	f7f3 fd86 	bl	8000b98 <__aeabi_d2iz>
 800d08c:	4605      	mov	r5, r0
 800d08e:	2800      	cmp	r0, #0
 800d090:	f040 8083 	bne.w	800d19a <__kernel_tan+0x13a>
 800d094:	1c73      	adds	r3, r6, #1
 800d096:	4652      	mov	r2, sl
 800d098:	4313      	orrs	r3, r2
 800d09a:	433b      	orrs	r3, r7
 800d09c:	d112      	bne.n	800d0c4 <__kernel_tan+0x64>
 800d09e:	ec4b ab10 	vmov	d0, sl, fp
 800d0a2:	f7ff fa41 	bl	800c528 <fabs>
 800d0a6:	49d3      	ldr	r1, [pc, #844]	; (800d3f4 <__kernel_tan+0x394>)
 800d0a8:	ec53 2b10 	vmov	r2, r3, d0
 800d0ac:	2000      	movs	r0, #0
 800d0ae:	f7f3 fbed 	bl	800088c <__aeabi_ddiv>
 800d0b2:	4682      	mov	sl, r0
 800d0b4:	468b      	mov	fp, r1
 800d0b6:	ec4b ab10 	vmov	d0, sl, fp
 800d0ba:	b003      	add	sp, #12
 800d0bc:	ecbd 8b06 	vpop	{d8-d10}
 800d0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c4:	2e01      	cmp	r6, #1
 800d0c6:	d0f6      	beq.n	800d0b6 <__kernel_tan+0x56>
 800d0c8:	4642      	mov	r2, r8
 800d0ca:	464b      	mov	r3, r9
 800d0cc:	4650      	mov	r0, sl
 800d0ce:	4659      	mov	r1, fp
 800d0d0:	f7f3 f8fc 	bl	80002cc <__adddf3>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	460f      	mov	r7, r1
 800d0da:	2000      	movs	r0, #0
 800d0dc:	49c6      	ldr	r1, [pc, #792]	; (800d3f8 <__kernel_tan+0x398>)
 800d0de:	f7f3 fbd5 	bl	800088c <__aeabi_ddiv>
 800d0e2:	e9cd 0100 	strd	r0, r1, [sp]
 800d0e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0ea:	462e      	mov	r6, r5
 800d0ec:	4652      	mov	r2, sl
 800d0ee:	462c      	mov	r4, r5
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	461d      	mov	r5, r3
 800d0f4:	4639      	mov	r1, r7
 800d0f6:	465b      	mov	r3, fp
 800d0f8:	f7f3 f8e6 	bl	80002c8 <__aeabi_dsub>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	460b      	mov	r3, r1
 800d100:	4640      	mov	r0, r8
 800d102:	4649      	mov	r1, r9
 800d104:	f7f3 f8e0 	bl	80002c8 <__aeabi_dsub>
 800d108:	4632      	mov	r2, r6
 800d10a:	462b      	mov	r3, r5
 800d10c:	f7f3 fa94 	bl	8000638 <__aeabi_dmul>
 800d110:	4632      	mov	r2, r6
 800d112:	4680      	mov	r8, r0
 800d114:	4689      	mov	r9, r1
 800d116:	462b      	mov	r3, r5
 800d118:	4630      	mov	r0, r6
 800d11a:	4639      	mov	r1, r7
 800d11c:	f7f3 fa8c 	bl	8000638 <__aeabi_dmul>
 800d120:	4bb4      	ldr	r3, [pc, #720]	; (800d3f4 <__kernel_tan+0x394>)
 800d122:	2200      	movs	r2, #0
 800d124:	f7f3 f8d2 	bl	80002cc <__adddf3>
 800d128:	4602      	mov	r2, r0
 800d12a:	460b      	mov	r3, r1
 800d12c:	4640      	mov	r0, r8
 800d12e:	4649      	mov	r1, r9
 800d130:	f7f3 f8cc 	bl	80002cc <__adddf3>
 800d134:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d138:	f7f3 fa7e 	bl	8000638 <__aeabi_dmul>
 800d13c:	4622      	mov	r2, r4
 800d13e:	462b      	mov	r3, r5
 800d140:	f7f3 f8c4 	bl	80002cc <__adddf3>
 800d144:	e7b5      	b.n	800d0b2 <__kernel_tan+0x52>
 800d146:	4bad      	ldr	r3, [pc, #692]	; (800d3fc <__kernel_tan+0x39c>)
 800d148:	429f      	cmp	r7, r3
 800d14a:	dd26      	ble.n	800d19a <__kernel_tan+0x13a>
 800d14c:	9b00      	ldr	r3, [sp, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	da09      	bge.n	800d166 <__kernel_tan+0x106>
 800d152:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d156:	469b      	mov	fp, r3
 800d158:	ee10 aa10 	vmov	sl, s0
 800d15c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d160:	ee11 8a10 	vmov	r8, s2
 800d164:	4699      	mov	r9, r3
 800d166:	4652      	mov	r2, sl
 800d168:	465b      	mov	r3, fp
 800d16a:	a183      	add	r1, pc, #524	; (adr r1, 800d378 <__kernel_tan+0x318>)
 800d16c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d170:	f7f3 f8aa 	bl	80002c8 <__aeabi_dsub>
 800d174:	4642      	mov	r2, r8
 800d176:	464b      	mov	r3, r9
 800d178:	4604      	mov	r4, r0
 800d17a:	460d      	mov	r5, r1
 800d17c:	a180      	add	r1, pc, #512	; (adr r1, 800d380 <__kernel_tan+0x320>)
 800d17e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d182:	f7f3 f8a1 	bl	80002c8 <__aeabi_dsub>
 800d186:	4622      	mov	r2, r4
 800d188:	462b      	mov	r3, r5
 800d18a:	f7f3 f89f 	bl	80002cc <__adddf3>
 800d18e:	f04f 0800 	mov.w	r8, #0
 800d192:	4682      	mov	sl, r0
 800d194:	468b      	mov	fp, r1
 800d196:	f04f 0900 	mov.w	r9, #0
 800d19a:	4652      	mov	r2, sl
 800d19c:	465b      	mov	r3, fp
 800d19e:	4650      	mov	r0, sl
 800d1a0:	4659      	mov	r1, fp
 800d1a2:	f7f3 fa49 	bl	8000638 <__aeabi_dmul>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	ec43 2b18 	vmov	d8, r2, r3
 800d1ae:	f7f3 fa43 	bl	8000638 <__aeabi_dmul>
 800d1b2:	ec53 2b18 	vmov	r2, r3, d8
 800d1b6:	4604      	mov	r4, r0
 800d1b8:	460d      	mov	r5, r1
 800d1ba:	4650      	mov	r0, sl
 800d1bc:	4659      	mov	r1, fp
 800d1be:	f7f3 fa3b 	bl	8000638 <__aeabi_dmul>
 800d1c2:	a371      	add	r3, pc, #452	; (adr r3, 800d388 <__kernel_tan+0x328>)
 800d1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c8:	ec41 0b19 	vmov	d9, r0, r1
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	4629      	mov	r1, r5
 800d1d0:	f7f3 fa32 	bl	8000638 <__aeabi_dmul>
 800d1d4:	a36e      	add	r3, pc, #440	; (adr r3, 800d390 <__kernel_tan+0x330>)
 800d1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1da:	f7f3 f877 	bl	80002cc <__adddf3>
 800d1de:	4622      	mov	r2, r4
 800d1e0:	462b      	mov	r3, r5
 800d1e2:	f7f3 fa29 	bl	8000638 <__aeabi_dmul>
 800d1e6:	a36c      	add	r3, pc, #432	; (adr r3, 800d398 <__kernel_tan+0x338>)
 800d1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ec:	f7f3 f86e 	bl	80002cc <__adddf3>
 800d1f0:	4622      	mov	r2, r4
 800d1f2:	462b      	mov	r3, r5
 800d1f4:	f7f3 fa20 	bl	8000638 <__aeabi_dmul>
 800d1f8:	a369      	add	r3, pc, #420	; (adr r3, 800d3a0 <__kernel_tan+0x340>)
 800d1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fe:	f7f3 f865 	bl	80002cc <__adddf3>
 800d202:	4622      	mov	r2, r4
 800d204:	462b      	mov	r3, r5
 800d206:	f7f3 fa17 	bl	8000638 <__aeabi_dmul>
 800d20a:	a367      	add	r3, pc, #412	; (adr r3, 800d3a8 <__kernel_tan+0x348>)
 800d20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d210:	f7f3 f85c 	bl	80002cc <__adddf3>
 800d214:	4622      	mov	r2, r4
 800d216:	462b      	mov	r3, r5
 800d218:	f7f3 fa0e 	bl	8000638 <__aeabi_dmul>
 800d21c:	a364      	add	r3, pc, #400	; (adr r3, 800d3b0 <__kernel_tan+0x350>)
 800d21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d222:	f7f3 f853 	bl	80002cc <__adddf3>
 800d226:	ec53 2b18 	vmov	r2, r3, d8
 800d22a:	f7f3 fa05 	bl	8000638 <__aeabi_dmul>
 800d22e:	a362      	add	r3, pc, #392	; (adr r3, 800d3b8 <__kernel_tan+0x358>)
 800d230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d234:	ec41 0b1a 	vmov	d10, r0, r1
 800d238:	4620      	mov	r0, r4
 800d23a:	4629      	mov	r1, r5
 800d23c:	f7f3 f9fc 	bl	8000638 <__aeabi_dmul>
 800d240:	a35f      	add	r3, pc, #380	; (adr r3, 800d3c0 <__kernel_tan+0x360>)
 800d242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d246:	f7f3 f841 	bl	80002cc <__adddf3>
 800d24a:	4622      	mov	r2, r4
 800d24c:	462b      	mov	r3, r5
 800d24e:	f7f3 f9f3 	bl	8000638 <__aeabi_dmul>
 800d252:	a35d      	add	r3, pc, #372	; (adr r3, 800d3c8 <__kernel_tan+0x368>)
 800d254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d258:	f7f3 f838 	bl	80002cc <__adddf3>
 800d25c:	4622      	mov	r2, r4
 800d25e:	462b      	mov	r3, r5
 800d260:	f7f3 f9ea 	bl	8000638 <__aeabi_dmul>
 800d264:	a35a      	add	r3, pc, #360	; (adr r3, 800d3d0 <__kernel_tan+0x370>)
 800d266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26a:	f7f3 f82f 	bl	80002cc <__adddf3>
 800d26e:	4622      	mov	r2, r4
 800d270:	462b      	mov	r3, r5
 800d272:	f7f3 f9e1 	bl	8000638 <__aeabi_dmul>
 800d276:	a358      	add	r3, pc, #352	; (adr r3, 800d3d8 <__kernel_tan+0x378>)
 800d278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27c:	f7f3 f826 	bl	80002cc <__adddf3>
 800d280:	4622      	mov	r2, r4
 800d282:	462b      	mov	r3, r5
 800d284:	f7f3 f9d8 	bl	8000638 <__aeabi_dmul>
 800d288:	a355      	add	r3, pc, #340	; (adr r3, 800d3e0 <__kernel_tan+0x380>)
 800d28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28e:	f7f3 f81d 	bl	80002cc <__adddf3>
 800d292:	4602      	mov	r2, r0
 800d294:	460b      	mov	r3, r1
 800d296:	ec51 0b1a 	vmov	r0, r1, d10
 800d29a:	f7f3 f817 	bl	80002cc <__adddf3>
 800d29e:	ec53 2b19 	vmov	r2, r3, d9
 800d2a2:	f7f3 f9c9 	bl	8000638 <__aeabi_dmul>
 800d2a6:	4642      	mov	r2, r8
 800d2a8:	464b      	mov	r3, r9
 800d2aa:	f7f3 f80f 	bl	80002cc <__adddf3>
 800d2ae:	ec53 2b18 	vmov	r2, r3, d8
 800d2b2:	f7f3 f9c1 	bl	8000638 <__aeabi_dmul>
 800d2b6:	4642      	mov	r2, r8
 800d2b8:	464b      	mov	r3, r9
 800d2ba:	f7f3 f807 	bl	80002cc <__adddf3>
 800d2be:	a34a      	add	r3, pc, #296	; (adr r3, 800d3e8 <__kernel_tan+0x388>)
 800d2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c4:	4604      	mov	r4, r0
 800d2c6:	460d      	mov	r5, r1
 800d2c8:	ec51 0b19 	vmov	r0, r1, d9
 800d2cc:	f7f3 f9b4 	bl	8000638 <__aeabi_dmul>
 800d2d0:	4622      	mov	r2, r4
 800d2d2:	462b      	mov	r3, r5
 800d2d4:	f7f2 fffa 	bl	80002cc <__adddf3>
 800d2d8:	460b      	mov	r3, r1
 800d2da:	ec41 0b18 	vmov	d8, r0, r1
 800d2de:	4602      	mov	r2, r0
 800d2e0:	4659      	mov	r1, fp
 800d2e2:	4650      	mov	r0, sl
 800d2e4:	f7f2 fff2 	bl	80002cc <__adddf3>
 800d2e8:	4b44      	ldr	r3, [pc, #272]	; (800d3fc <__kernel_tan+0x39c>)
 800d2ea:	429f      	cmp	r7, r3
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	460d      	mov	r5, r1
 800d2f0:	f340 8086 	ble.w	800d400 <__kernel_tan+0x3a0>
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	f7f3 f935 	bl	8000564 <__aeabi_i2d>
 800d2fa:	4622      	mov	r2, r4
 800d2fc:	4680      	mov	r8, r0
 800d2fe:	4689      	mov	r9, r1
 800d300:	462b      	mov	r3, r5
 800d302:	4620      	mov	r0, r4
 800d304:	4629      	mov	r1, r5
 800d306:	f7f3 f997 	bl	8000638 <__aeabi_dmul>
 800d30a:	4642      	mov	r2, r8
 800d30c:	4606      	mov	r6, r0
 800d30e:	460f      	mov	r7, r1
 800d310:	464b      	mov	r3, r9
 800d312:	4620      	mov	r0, r4
 800d314:	4629      	mov	r1, r5
 800d316:	f7f2 ffd9 	bl	80002cc <__adddf3>
 800d31a:	4602      	mov	r2, r0
 800d31c:	460b      	mov	r3, r1
 800d31e:	4630      	mov	r0, r6
 800d320:	4639      	mov	r1, r7
 800d322:	f7f3 fab3 	bl	800088c <__aeabi_ddiv>
 800d326:	ec53 2b18 	vmov	r2, r3, d8
 800d32a:	f7f2 ffcd 	bl	80002c8 <__aeabi_dsub>
 800d32e:	4602      	mov	r2, r0
 800d330:	460b      	mov	r3, r1
 800d332:	4650      	mov	r0, sl
 800d334:	4659      	mov	r1, fp
 800d336:	f7f2 ffc7 	bl	80002c8 <__aeabi_dsub>
 800d33a:	4602      	mov	r2, r0
 800d33c:	460b      	mov	r3, r1
 800d33e:	f7f2 ffc5 	bl	80002cc <__adddf3>
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	4640      	mov	r0, r8
 800d348:	4649      	mov	r1, r9
 800d34a:	f7f2 ffbd 	bl	80002c8 <__aeabi_dsub>
 800d34e:	9b00      	ldr	r3, [sp, #0]
 800d350:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800d354:	f00a 0a02 	and.w	sl, sl, #2
 800d358:	4604      	mov	r4, r0
 800d35a:	f1ca 0001 	rsb	r0, sl, #1
 800d35e:	460d      	mov	r5, r1
 800d360:	f7f3 f900 	bl	8000564 <__aeabi_i2d>
 800d364:	4602      	mov	r2, r0
 800d366:	460b      	mov	r3, r1
 800d368:	4620      	mov	r0, r4
 800d36a:	4629      	mov	r1, r5
 800d36c:	f7f3 f964 	bl	8000638 <__aeabi_dmul>
 800d370:	e69f      	b.n	800d0b2 <__kernel_tan+0x52>
 800d372:	bf00      	nop
 800d374:	f3af 8000 	nop.w
 800d378:	54442d18 	.word	0x54442d18
 800d37c:	3fe921fb 	.word	0x3fe921fb
 800d380:	33145c07 	.word	0x33145c07
 800d384:	3c81a626 	.word	0x3c81a626
 800d388:	74bf7ad4 	.word	0x74bf7ad4
 800d38c:	3efb2a70 	.word	0x3efb2a70
 800d390:	32f0a7e9 	.word	0x32f0a7e9
 800d394:	3f12b80f 	.word	0x3f12b80f
 800d398:	1a8d1068 	.word	0x1a8d1068
 800d39c:	3f3026f7 	.word	0x3f3026f7
 800d3a0:	fee08315 	.word	0xfee08315
 800d3a4:	3f57dbc8 	.word	0x3f57dbc8
 800d3a8:	e96e8493 	.word	0xe96e8493
 800d3ac:	3f8226e3 	.word	0x3f8226e3
 800d3b0:	1bb341fe 	.word	0x1bb341fe
 800d3b4:	3faba1ba 	.word	0x3faba1ba
 800d3b8:	db605373 	.word	0xdb605373
 800d3bc:	bef375cb 	.word	0xbef375cb
 800d3c0:	a03792a6 	.word	0xa03792a6
 800d3c4:	3f147e88 	.word	0x3f147e88
 800d3c8:	f2f26501 	.word	0xf2f26501
 800d3cc:	3f4344d8 	.word	0x3f4344d8
 800d3d0:	c9560328 	.word	0xc9560328
 800d3d4:	3f6d6d22 	.word	0x3f6d6d22
 800d3d8:	8406d637 	.word	0x8406d637
 800d3dc:	3f9664f4 	.word	0x3f9664f4
 800d3e0:	1110fe7a 	.word	0x1110fe7a
 800d3e4:	3fc11111 	.word	0x3fc11111
 800d3e8:	55555563 	.word	0x55555563
 800d3ec:	3fd55555 	.word	0x3fd55555
 800d3f0:	3e2fffff 	.word	0x3e2fffff
 800d3f4:	3ff00000 	.word	0x3ff00000
 800d3f8:	bff00000 	.word	0xbff00000
 800d3fc:	3fe59427 	.word	0x3fe59427
 800d400:	2e01      	cmp	r6, #1
 800d402:	d02f      	beq.n	800d464 <__kernel_tan+0x404>
 800d404:	460f      	mov	r7, r1
 800d406:	4602      	mov	r2, r0
 800d408:	460b      	mov	r3, r1
 800d40a:	4689      	mov	r9, r1
 800d40c:	2000      	movs	r0, #0
 800d40e:	4917      	ldr	r1, [pc, #92]	; (800d46c <__kernel_tan+0x40c>)
 800d410:	f7f3 fa3c 	bl	800088c <__aeabi_ddiv>
 800d414:	2600      	movs	r6, #0
 800d416:	e9cd 0100 	strd	r0, r1, [sp]
 800d41a:	4652      	mov	r2, sl
 800d41c:	465b      	mov	r3, fp
 800d41e:	4630      	mov	r0, r6
 800d420:	4639      	mov	r1, r7
 800d422:	f7f2 ff51 	bl	80002c8 <__aeabi_dsub>
 800d426:	e9dd 4500 	ldrd	r4, r5, [sp]
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	ec51 0b18 	vmov	r0, r1, d8
 800d432:	f7f2 ff49 	bl	80002c8 <__aeabi_dsub>
 800d436:	4632      	mov	r2, r6
 800d438:	462b      	mov	r3, r5
 800d43a:	f7f3 f8fd 	bl	8000638 <__aeabi_dmul>
 800d43e:	46b0      	mov	r8, r6
 800d440:	460f      	mov	r7, r1
 800d442:	4642      	mov	r2, r8
 800d444:	462b      	mov	r3, r5
 800d446:	4634      	mov	r4, r6
 800d448:	4649      	mov	r1, r9
 800d44a:	4606      	mov	r6, r0
 800d44c:	4640      	mov	r0, r8
 800d44e:	f7f3 f8f3 	bl	8000638 <__aeabi_dmul>
 800d452:	4b07      	ldr	r3, [pc, #28]	; (800d470 <__kernel_tan+0x410>)
 800d454:	2200      	movs	r2, #0
 800d456:	f7f2 ff39 	bl	80002cc <__adddf3>
 800d45a:	4602      	mov	r2, r0
 800d45c:	460b      	mov	r3, r1
 800d45e:	4630      	mov	r0, r6
 800d460:	4639      	mov	r1, r7
 800d462:	e665      	b.n	800d130 <__kernel_tan+0xd0>
 800d464:	4682      	mov	sl, r0
 800d466:	468b      	mov	fp, r1
 800d468:	e625      	b.n	800d0b6 <__kernel_tan+0x56>
 800d46a:	bf00      	nop
 800d46c:	bff00000 	.word	0xbff00000
 800d470:	3ff00000 	.word	0x3ff00000
 800d474:	00000000 	.word	0x00000000

0800d478 <floor>:
 800d478:	ec51 0b10 	vmov	r0, r1, d0
 800d47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d480:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d484:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d488:	2e13      	cmp	r6, #19
 800d48a:	ee10 5a10 	vmov	r5, s0
 800d48e:	ee10 8a10 	vmov	r8, s0
 800d492:	460c      	mov	r4, r1
 800d494:	dc32      	bgt.n	800d4fc <floor+0x84>
 800d496:	2e00      	cmp	r6, #0
 800d498:	da14      	bge.n	800d4c4 <floor+0x4c>
 800d49a:	a333      	add	r3, pc, #204	; (adr r3, 800d568 <floor+0xf0>)
 800d49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a0:	f7f2 ff14 	bl	80002cc <__adddf3>
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	f7f3 fb56 	bl	8000b58 <__aeabi_dcmpgt>
 800d4ac:	b138      	cbz	r0, 800d4be <floor+0x46>
 800d4ae:	2c00      	cmp	r4, #0
 800d4b0:	da57      	bge.n	800d562 <floor+0xea>
 800d4b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d4b6:	431d      	orrs	r5, r3
 800d4b8:	d001      	beq.n	800d4be <floor+0x46>
 800d4ba:	4c2d      	ldr	r4, [pc, #180]	; (800d570 <floor+0xf8>)
 800d4bc:	2500      	movs	r5, #0
 800d4be:	4621      	mov	r1, r4
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	e025      	b.n	800d510 <floor+0x98>
 800d4c4:	4f2b      	ldr	r7, [pc, #172]	; (800d574 <floor+0xfc>)
 800d4c6:	4137      	asrs	r7, r6
 800d4c8:	ea01 0307 	and.w	r3, r1, r7
 800d4cc:	4303      	orrs	r3, r0
 800d4ce:	d01f      	beq.n	800d510 <floor+0x98>
 800d4d0:	a325      	add	r3, pc, #148	; (adr r3, 800d568 <floor+0xf0>)
 800d4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d6:	f7f2 fef9 	bl	80002cc <__adddf3>
 800d4da:	2200      	movs	r2, #0
 800d4dc:	2300      	movs	r3, #0
 800d4de:	f7f3 fb3b 	bl	8000b58 <__aeabi_dcmpgt>
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	d0eb      	beq.n	800d4be <floor+0x46>
 800d4e6:	2c00      	cmp	r4, #0
 800d4e8:	bfbe      	ittt	lt
 800d4ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d4ee:	fa43 f606 	asrlt.w	r6, r3, r6
 800d4f2:	19a4      	addlt	r4, r4, r6
 800d4f4:	ea24 0407 	bic.w	r4, r4, r7
 800d4f8:	2500      	movs	r5, #0
 800d4fa:	e7e0      	b.n	800d4be <floor+0x46>
 800d4fc:	2e33      	cmp	r6, #51	; 0x33
 800d4fe:	dd0b      	ble.n	800d518 <floor+0xa0>
 800d500:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d504:	d104      	bne.n	800d510 <floor+0x98>
 800d506:	ee10 2a10 	vmov	r2, s0
 800d50a:	460b      	mov	r3, r1
 800d50c:	f7f2 fede 	bl	80002cc <__adddf3>
 800d510:	ec41 0b10 	vmov	d0, r0, r1
 800d514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d518:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d51c:	f04f 33ff 	mov.w	r3, #4294967295
 800d520:	fa23 f707 	lsr.w	r7, r3, r7
 800d524:	4207      	tst	r7, r0
 800d526:	d0f3      	beq.n	800d510 <floor+0x98>
 800d528:	a30f      	add	r3, pc, #60	; (adr r3, 800d568 <floor+0xf0>)
 800d52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52e:	f7f2 fecd 	bl	80002cc <__adddf3>
 800d532:	2200      	movs	r2, #0
 800d534:	2300      	movs	r3, #0
 800d536:	f7f3 fb0f 	bl	8000b58 <__aeabi_dcmpgt>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d0bf      	beq.n	800d4be <floor+0x46>
 800d53e:	2c00      	cmp	r4, #0
 800d540:	da02      	bge.n	800d548 <floor+0xd0>
 800d542:	2e14      	cmp	r6, #20
 800d544:	d103      	bne.n	800d54e <floor+0xd6>
 800d546:	3401      	adds	r4, #1
 800d548:	ea25 0507 	bic.w	r5, r5, r7
 800d54c:	e7b7      	b.n	800d4be <floor+0x46>
 800d54e:	2301      	movs	r3, #1
 800d550:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d554:	fa03 f606 	lsl.w	r6, r3, r6
 800d558:	4435      	add	r5, r6
 800d55a:	4545      	cmp	r5, r8
 800d55c:	bf38      	it	cc
 800d55e:	18e4      	addcc	r4, r4, r3
 800d560:	e7f2      	b.n	800d548 <floor+0xd0>
 800d562:	2500      	movs	r5, #0
 800d564:	462c      	mov	r4, r5
 800d566:	e7aa      	b.n	800d4be <floor+0x46>
 800d568:	8800759c 	.word	0x8800759c
 800d56c:	7e37e43c 	.word	0x7e37e43c
 800d570:	bff00000 	.word	0xbff00000
 800d574:	000fffff 	.word	0x000fffff

0800d578 <scalbn>:
 800d578:	b570      	push	{r4, r5, r6, lr}
 800d57a:	ec55 4b10 	vmov	r4, r5, d0
 800d57e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d582:	4606      	mov	r6, r0
 800d584:	462b      	mov	r3, r5
 800d586:	b99a      	cbnz	r2, 800d5b0 <scalbn+0x38>
 800d588:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d58c:	4323      	orrs	r3, r4
 800d58e:	d036      	beq.n	800d5fe <scalbn+0x86>
 800d590:	4b39      	ldr	r3, [pc, #228]	; (800d678 <scalbn+0x100>)
 800d592:	4629      	mov	r1, r5
 800d594:	ee10 0a10 	vmov	r0, s0
 800d598:	2200      	movs	r2, #0
 800d59a:	f7f3 f84d 	bl	8000638 <__aeabi_dmul>
 800d59e:	4b37      	ldr	r3, [pc, #220]	; (800d67c <scalbn+0x104>)
 800d5a0:	429e      	cmp	r6, r3
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	460d      	mov	r5, r1
 800d5a6:	da10      	bge.n	800d5ca <scalbn+0x52>
 800d5a8:	a32b      	add	r3, pc, #172	; (adr r3, 800d658 <scalbn+0xe0>)
 800d5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ae:	e03a      	b.n	800d626 <scalbn+0xae>
 800d5b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d5b4:	428a      	cmp	r2, r1
 800d5b6:	d10c      	bne.n	800d5d2 <scalbn+0x5a>
 800d5b8:	ee10 2a10 	vmov	r2, s0
 800d5bc:	4620      	mov	r0, r4
 800d5be:	4629      	mov	r1, r5
 800d5c0:	f7f2 fe84 	bl	80002cc <__adddf3>
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	460d      	mov	r5, r1
 800d5c8:	e019      	b.n	800d5fe <scalbn+0x86>
 800d5ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d5ce:	460b      	mov	r3, r1
 800d5d0:	3a36      	subs	r2, #54	; 0x36
 800d5d2:	4432      	add	r2, r6
 800d5d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d5d8:	428a      	cmp	r2, r1
 800d5da:	dd08      	ble.n	800d5ee <scalbn+0x76>
 800d5dc:	2d00      	cmp	r5, #0
 800d5de:	a120      	add	r1, pc, #128	; (adr r1, 800d660 <scalbn+0xe8>)
 800d5e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5e4:	da1c      	bge.n	800d620 <scalbn+0xa8>
 800d5e6:	a120      	add	r1, pc, #128	; (adr r1, 800d668 <scalbn+0xf0>)
 800d5e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5ec:	e018      	b.n	800d620 <scalbn+0xa8>
 800d5ee:	2a00      	cmp	r2, #0
 800d5f0:	dd08      	ble.n	800d604 <scalbn+0x8c>
 800d5f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d5f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d5fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d5fe:	ec45 4b10 	vmov	d0, r4, r5
 800d602:	bd70      	pop	{r4, r5, r6, pc}
 800d604:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d608:	da19      	bge.n	800d63e <scalbn+0xc6>
 800d60a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d60e:	429e      	cmp	r6, r3
 800d610:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d614:	dd0a      	ble.n	800d62c <scalbn+0xb4>
 800d616:	a112      	add	r1, pc, #72	; (adr r1, 800d660 <scalbn+0xe8>)
 800d618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d1e2      	bne.n	800d5e6 <scalbn+0x6e>
 800d620:	a30f      	add	r3, pc, #60	; (adr r3, 800d660 <scalbn+0xe8>)
 800d622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d626:	f7f3 f807 	bl	8000638 <__aeabi_dmul>
 800d62a:	e7cb      	b.n	800d5c4 <scalbn+0x4c>
 800d62c:	a10a      	add	r1, pc, #40	; (adr r1, 800d658 <scalbn+0xe0>)
 800d62e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d0b8      	beq.n	800d5a8 <scalbn+0x30>
 800d636:	a10e      	add	r1, pc, #56	; (adr r1, 800d670 <scalbn+0xf8>)
 800d638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d63c:	e7b4      	b.n	800d5a8 <scalbn+0x30>
 800d63e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d642:	3236      	adds	r2, #54	; 0x36
 800d644:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d648:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d64c:	4620      	mov	r0, r4
 800d64e:	4b0c      	ldr	r3, [pc, #48]	; (800d680 <scalbn+0x108>)
 800d650:	2200      	movs	r2, #0
 800d652:	e7e8      	b.n	800d626 <scalbn+0xae>
 800d654:	f3af 8000 	nop.w
 800d658:	c2f8f359 	.word	0xc2f8f359
 800d65c:	01a56e1f 	.word	0x01a56e1f
 800d660:	8800759c 	.word	0x8800759c
 800d664:	7e37e43c 	.word	0x7e37e43c
 800d668:	8800759c 	.word	0x8800759c
 800d66c:	fe37e43c 	.word	0xfe37e43c
 800d670:	c2f8f359 	.word	0xc2f8f359
 800d674:	81a56e1f 	.word	0x81a56e1f
 800d678:	43500000 	.word	0x43500000
 800d67c:	ffff3cb0 	.word	0xffff3cb0
 800d680:	3c900000 	.word	0x3c900000

0800d684 <_init>:
 800d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d686:	bf00      	nop
 800d688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d68a:	bc08      	pop	{r3}
 800d68c:	469e      	mov	lr, r3
 800d68e:	4770      	bx	lr

0800d690 <_fini>:
 800d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d692:	bf00      	nop
 800d694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d696:	bc08      	pop	{r3}
 800d698:	469e      	mov	lr, r3
 800d69a:	4770      	bx	lr
