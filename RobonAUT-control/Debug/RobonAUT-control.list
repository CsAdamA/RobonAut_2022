
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0800fc60  0800fc60  0001fc60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080103a0  080103a0  00030278  2**0
                  CONTENTS
  4 .ARM          00000008  080103a0  080103a0  000203a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080103a8  080103a8  00030278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080103a8  080103a8  000203a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080103ac  080103ac  000203ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  080103b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e8  20000278  08010628  00030278  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b60  08010628  00030b60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ef3  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ec  00000000  00000000  0004819b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  0004b988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0004cc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026323  00000000  00000000  0004dda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e3c  00000000  00000000  000740c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e13e8  00000000  00000000  0008ceff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e2e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006094  00000000  00000000  0016e338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000278 	.word	0x20000278
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fc44 	.word	0x0800fc44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000027c 	.word	0x2000027c
 800020c:	0800fc44 	.word	0x0800fc44

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f90:	f3bf 8f4f 	dsb	sy
}
 8000f94:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <__NVIC_SystemReset+0x24>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f9e:	4904      	ldr	r1, [pc, #16]	; (8000fb0 <__NVIC_SystemReset+0x24>)
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_SystemReset+0x28>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa6:	f3bf 8f4f 	dsb	sy
}
 8000faa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <__NVIC_SystemReset+0x20>
 8000fb0:	e000ed00 	.word	0xe000ed00
 8000fb4:	05fa0004 	.word	0x05fa0004

08000fb8 <F4_Basic_Init>:
volatile uint8_t fromPC[2];
uint8_t mode;
float v_ref; //mm/s

void F4_Basic_Init(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_scheduler,TIM_HandleTypeDef *htim_motor,TIM_HandleTypeDef *htim_servo1,TIM_HandleTypeDef *htim_servo2, TIM_HandleTypeDef *htim_encoder,TIM_HandleTypeDef *htim_delay,TIM_HandleTypeDef *htim_rand)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08e      	sub	sp, #56	; 0x38
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	603b      	str	r3, [r7, #0]
	char buf[40];
	LED_R(0);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fcc:	4851      	ldr	r0, [pc, #324]	; (8001114 <F4_Basic_Init+0x15c>)
 8000fce:	f006 feb7 	bl	8007d40 <HAL_GPIO_WritePin>
	LED_B(0);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd8:	484e      	ldr	r0, [pc, #312]	; (8001114 <F4_Basic_Init+0x15c>)
 8000fda:	f006 feb1 	bl	8007d40 <HAL_GPIO_WritePin>
	LED_G(0);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	484c      	ldr	r0, [pc, #304]	; (8001114 <F4_Basic_Init+0x15c>)
 8000fe4:	f006 feac 	bl	8007d40 <HAL_GPIO_WritePin>
	LED_Y(0);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fee:	4849      	ldr	r0, [pc, #292]	; (8001114 <F4_Basic_Init+0x15c>)
 8000ff0:	f006 fea6 	bl	8007d40 <HAL_GPIO_WritePin>
	LED_NUCLEO(0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	4847      	ldr	r0, [pc, #284]	; (8001118 <F4_Basic_Init+0x160>)
 8000ffa:	f006 fea1 	bl	8007d40 <HAL_GPIO_WritePin>
	sprintf(buf,"\r\nRobonAUT 2023 Bit Bangers F4\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4946      	ldr	r1, [pc, #280]	; (800111c <F4_Basic_Init+0x164>)
 8001004:	4618      	mov	r0, r3
 8001006:	f00b f957 	bl	800c2b8 <siprintf>
	HAL_UART_Transmit(huart_debugg,(uint8_t*) buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f8fe 	bl	8000210 <strlen>
 8001014:	4603      	mov	r3, r0
 8001016:	b29a      	uxth	r2, r3
 8001018:	f107 0110 	add.w	r1, r7, #16
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f009 fbe1 	bl	800a7e6 <HAL_UART_Transmit>

	//MotorEnable engedélyezése
	motorEnRemote=0;//csak akkor ha megnyomtuk a ravaszt
 8001024:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <F4_Basic_Init+0x168>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
	motorEnLineOk=1;
 800102a:	4b3e      	ldr	r3, [pc, #248]	; (8001124 <F4_Basic_Init+0x16c>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]

	swState[0] = SW1;
 8001030:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001034:	4838      	ldr	r0, [pc, #224]	; (8001118 <F4_Basic_Init+0x160>)
 8001036:	f006 fe6b 	bl	8007d10 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <F4_Basic_Init+0x170>)
 8001040:	701a      	strb	r2, [r3, #0]
	swState[1] = SW2;
 8001042:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001046:	4833      	ldr	r0, [pc, #204]	; (8001114 <F4_Basic_Init+0x15c>)
 8001048:	f006 fe62 	bl	8007d10 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	4b35      	ldr	r3, [pc, #212]	; (8001128 <F4_Basic_Init+0x170>)
 8001052:	705a      	strb	r2, [r3, #1]
	if(SW2)LED_R(1);
 8001054:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001058:	482e      	ldr	r0, [pc, #184]	; (8001114 <F4_Basic_Init+0x15c>)
 800105a:	f006 fe59 	bl	8007d10 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <F4_Basic_Init+0xba>
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106a:	482a      	ldr	r0, [pc, #168]	; (8001114 <F4_Basic_Init+0x15c>)
 800106c:	f006 fe68 	bl	8007d40 <HAL_GPIO_WritePin>
 8001070:	e005      	b.n	800107e <F4_Basic_Init+0xc6>
	else LED_R(0);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001078:	4826      	ldr	r0, [pc, #152]	; (8001114 <F4_Basic_Init+0x15c>)
 800107a:	f006 fe61 	bl	8007d40 <HAL_GPIO_WritePin>

	bFlag[0] = bFlag[1] = bFlag[2] = 0;
 800107e:	2200      	movs	r2, #0
 8001080:	4b2a      	ldr	r3, [pc, #168]	; (800112c <F4_Basic_Init+0x174>)
 8001082:	4611      	mov	r1, r2
 8001084:	7099      	strb	r1, [r3, #2]
 8001086:	4b29      	ldr	r3, [pc, #164]	; (800112c <F4_Basic_Init+0x174>)
 8001088:	4611      	mov	r1, r2
 800108a:	7059      	strb	r1, [r3, #1]
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <F4_Basic_Init+0x174>)
 800108e:	701a      	strb	r2, [r3, #0]
	fromPC[0]=150;
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <F4_Basic_Init+0x178>)
 8001092:	2296      	movs	r2, #150	; 0x96
 8001094:	701a      	strb	r2, [r3, #0]
	fromPC[1]=150;
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <F4_Basic_Init+0x178>)
 8001098:	2296      	movs	r2, #150	; 0x96
 800109a:	705a      	strb	r2, [r3, #1]
	mode=SKILL;
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <F4_Basic_Init+0x17c>)
 800109e:	2252      	movs	r2, #82	; 0x52
 80010a0:	701a      	strb	r2, [r3, #0]
	v_ref = 1000;
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <F4_Basic_Init+0x180>)
 80010a4:	4a25      	ldr	r2, [pc, #148]	; (800113c <F4_Basic_Init+0x184>)
 80010a6:	601a      	str	r2, [r3, #0]
	v=0;
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <F4_Basic_Init+0x188>)
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]

	//timerek elindítása
	TIM1->CCR4=680;
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <F4_Basic_Init+0x18c>)
 80010b2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80010b6:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR1=684;
 80010b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010bc:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
	//TIM2->CCR1=684; //servot középre
	TIM3->CCR1=499; //0 kitöltési tényező a motorra
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <F4_Basic_Init+0x190>)
 80010c4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80010c8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=499;
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <F4_Basic_Init+0x190>)
 80010cc:	f240 12f3 	movw	r2, #499	; 0x1f3
 80010d0:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start(htim_scheduler);//heart beat timer tick start
 80010d2:	68b8      	ldr	r0, [r7, #8]
 80010d4:	f007 fd08 	bl	8008ae8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(htim_delay);//heart beat timer tick start
 80010d8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80010da:	f007 fd05 	bl	8008ae8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(htim_rand);//heart beat timer tick start
 80010de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80010e0:	f007 fd02 	bl	8008ae8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_1);//motor PWM-ek elindítása
 80010e4:	2100      	movs	r1, #0
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f007 fdc0 	bl	8008c6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_2);
 80010ec:	2104      	movs	r1, #4
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f007 fdbc 	bl	8008c6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo1, TIM_CHANNEL_1); //servo RC pwm elindítása
 80010f4:	2100      	movs	r1, #0
 80010f6:	6838      	ldr	r0, [r7, #0]
 80010f8:	f007 fdb8 	bl	8008c6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo2, TIM_CHANNEL_4); //servo RC pwm elindítása
 80010fc:	210c      	movs	r1, #12
 80010fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001100:	f007 fdb4 	bl	8008c6c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(htim_encoder,TIM_CHANNEL_ALL);
 8001104:	213c      	movs	r1, #60	; 0x3c
 8001106:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001108:	f008 f922 	bl	8009350 <HAL_TIM_Encoder_Start>

	//Ha a PC-ről küldünk vmit azt fogadjuk
	//HAL_UART_Receive_IT(huart_debugg, fromPC, 2);
}
 800110c:	bf00      	nop
 800110e:	3738      	adds	r7, #56	; 0x38
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40020400 	.word	0x40020400
 8001118:	40020000 	.word	0x40020000
 800111c:	0800fc60 	.word	0x0800fc60
 8001120:	20000b14 	.word	0x20000b14
 8001124:	20000b15 	.word	0x20000b15
 8001128:	20000294 	.word	0x20000294
 800112c:	20000298 	.word	0x20000298
 8001130:	2000029c 	.word	0x2000029c
 8001134:	2000029e 	.word	0x2000029e
 8001138:	200002a0 	.word	0x200002a0
 800113c:	447a0000 	.word	0x447a0000
 8001140:	2000063c 	.word	0x2000063c
 8001144:	40010000 	.word	0x40010000
 8001148:	40000400 	.word	0x40000400

0800114c <HDI_Read_Task>:


void HDI_Read_Task(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_servo,uint32_t tick, uint32_t period)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
	static uint32_t hdi_read_task_tick=0;

	if(hdi_read_task_tick>tick) return;
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <HDI_Read_Task+0xb4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	d349      	bcc.n	80011f8 <HDI_Read_Task+0xac>
	hdi_read_task_tick = tick + period;
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	4413      	add	r3, r2
 800116a:	4a25      	ldr	r2, [pc, #148]	; (8001200 <HDI_Read_Task+0xb4>)
 800116c:	6013      	str	r3, [r2, #0]

	swState[0]=SW1;
 800116e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001172:	4824      	ldr	r0, [pc, #144]	; (8001204 <HDI_Read_Task+0xb8>)
 8001174:	f006 fdcc 	bl	8007d10 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <HDI_Read_Task+0xbc>)
 800117e:	701a      	strb	r2, [r3, #0]
	swState[1]=SW2;
 8001180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001184:	4821      	ldr	r0, [pc, #132]	; (800120c <HDI_Read_Task+0xc0>)
 8001186:	f006 fdc3 	bl	8007d10 <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <HDI_Read_Task+0xbc>)
 8001190:	705a      	strb	r2, [r3, #1]

	if(swState[0] && mode==FAST) LED_G(1);
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HDI_Read_Task+0xbc>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d008      	beq.n	80011ac <HDI_Read_Task+0x60>
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HDI_Read_Task+0xc4>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b3f      	cmp	r3, #63	; 0x3f
 80011a0:	d104      	bne.n	80011ac <HDI_Read_Task+0x60>
 80011a2:	2200      	movs	r2, #0
 80011a4:	2102      	movs	r1, #2
 80011a6:	4819      	ldr	r0, [pc, #100]	; (800120c <HDI_Read_Task+0xc0>)
 80011a8:	f006 fdca 	bl	8007d40 <HAL_GPIO_WritePin>
	if(!swState[0] && mode==FAST) LED_G(0);
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HDI_Read_Task+0xbc>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d108      	bne.n	80011c6 <HDI_Read_Task+0x7a>
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HDI_Read_Task+0xc4>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b3f      	cmp	r3, #63	; 0x3f
 80011ba:	d104      	bne.n	80011c6 <HDI_Read_Task+0x7a>
 80011bc:	2201      	movs	r2, #1
 80011be:	2102      	movs	r1, #2
 80011c0:	4812      	ldr	r0, [pc, #72]	; (800120c <HDI_Read_Task+0xc0>)
 80011c2:	f006 fdbd 	bl	8007d40 <HAL_GPIO_WritePin>
	if(swState[1]) LED_R(1);
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HDI_Read_Task+0xbc>)
 80011c8:	785b      	ldrb	r3, [r3, #1]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <HDI_Read_Task+0x8e>
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <HDI_Read_Task+0xc0>)
 80011d6:	f006 fdb3 	bl	8007d40 <HAL_GPIO_WritePin>
	if(!swState[1]) LED_R(0);
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HDI_Read_Task+0xbc>)
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d105      	bne.n	80011ee <HDI_Read_Task+0xa2>
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e8:	4808      	ldr	r0, [pc, #32]	; (800120c <HDI_Read_Task+0xc0>)
 80011ea:	f006 fda9 	bl	8007d40 <HAL_GPIO_WritePin>

	if(bFlag[0]);
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HDI_Read_Task+0xc8>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
	if(bFlag[1]);
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HDI_Read_Task+0xc8>)
 80011f4:	785b      	ldrb	r3, [r3, #1]
 80011f6:	e000      	b.n	80011fa <HDI_Read_Task+0xae>
	if(hdi_read_task_tick>tick) return;
 80011f8:	bf00      	nop

}
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200002a4 	.word	0x200002a4
 8001204:	40020000 	.word	0x40020000
 8001208:	20000294 	.word	0x20000294
 800120c:	40020400 	.word	0x40020400
 8001210:	2000029e 	.word	0x2000029e
 8001214:	20000298 	.word	0x20000298

08001218 <Uart_Receive_From_PC_ISR>:

void Uart_Receive_From_PC_ISR(UART_HandleTypeDef *huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	LED_Y_TOGGLE;
 8001220:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <Uart_Receive_From_PC_ISR+0x40>)
 8001226:	f006 fda4 	bl	8007d72 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(huart, (uint8_t*)fromPC, 2);
 800122a:	2202      	movs	r2, #2
 800122c:	490b      	ldr	r1, [pc, #44]	; (800125c <Uart_Receive_From_PC_ISR+0x44>)
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f009 fc0d 	bl	800aa4e <HAL_UART_Receive_IT>
	TIM2->CCR1 = 4*fromPC[0];
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <Uart_Receive_From_PC_ISR+0x44>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	009a      	lsls	r2, r3, #2
 800123c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR4 = 4*fromPC[1];
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <Uart_Receive_From_PC_ISR+0x44>)
 8001244:	785b      	ldrb	r3, [r3, #1]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	009a      	lsls	r2, r3, #2
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <Uart_Receive_From_PC_ISR+0x48>)
 800124c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40020400 	.word	0x40020400
 800125c:	2000029c 	.word	0x2000029c
 8001260:	40010000 	.word	0x40010000

08001264 <B1_ISR>:

void B1_ISR(UART_HandleTypeDef *huart_debugg)
{
 8001264:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
		HAL_FLASH_Unlock();
 800126e:	f006 fa01 	bl	8007674 <HAL_FLASH_Unlock>
		Delay(50);
 8001272:	2032      	movs	r0, #50	; 0x32
 8001274:	f004 f872 	bl	800535c <Delay>
		FLASH_Erase_Sector(6, FLASH_VOLTAGE_RANGE_3);
 8001278:	2102      	movs	r1, #2
 800127a:	2006      	movs	r0, #6
 800127c:	f006 fb6c 	bl	8007958 <FLASH_Erase_Sector>
		Delay(50);
 8001280:	2032      	movs	r0, #50	; 0x32
 8001282:	f004 f86b 	bl	800535c <Delay>
		HAL_FLASH_Lock();
 8001286:	f006 fa17 	bl	80076b8 <HAL_FLASH_Lock>

		int i;
		for(i=0;i<8;i++)
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	e00a      	b.n	80012a6 <B1_ISR+0x42>
		{
			LED_R_TOGGLE;
 8001290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001294:	4826      	ldr	r0, [pc, #152]	; (8001330 <B1_ISR+0xcc>)
 8001296:	f006 fd6c 	bl	8007d72 <HAL_GPIO_TogglePin>
			Delay(150);
 800129a:	2096      	movs	r0, #150	; 0x96
 800129c:	f004 f85e 	bl	800535c <Delay>
		for(i=0;i<8;i++)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3301      	adds	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b07      	cmp	r3, #7
 80012aa:	ddf1      	ble.n	8001290 <B1_ISR+0x2c>
		}
		LED_R(0);
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b2:	481f      	ldr	r0, [pc, #124]	; (8001330 <B1_ISR+0xcc>)
 80012b4:	f006 fd44 	bl	8007d40 <HAL_GPIO_WritePin>

		HAL_FLASH_Unlock();
 80012b8:	f006 f9dc 	bl	8007674 <HAL_FLASH_Unlock>
		Delay(50);
 80012bc:	2032      	movs	r0, #50	; 0x32
 80012be:	f004 f84d 	bl	800535c <Delay>
		for(i=0;i<25;i++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e016      	b.n	80012f6 <B1_ISR+0x92>
		{
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+i, Nodes[i].worth);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80012ce:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80012d2:	4619      	mov	r1, r3
 80012d4:	4a17      	ldr	r2, [pc, #92]	; (8001334 <B1_ISR+0xd0>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	015b      	lsls	r3, r3, #5
 80012da:	4413      	add	r3, r2
 80012dc:	3304      	adds	r3, #4
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	17da      	asrs	r2, r3, #31
 80012e2:	4698      	mov	r8, r3
 80012e4:	4691      	mov	r9, r2
 80012e6:	4642      	mov	r2, r8
 80012e8:	464b      	mov	r3, r9
 80012ea:	2000      	movs	r0, #0
 80012ec:	f006 f96e 	bl	80075cc <HAL_FLASH_Program>
		for(i=0;i<25;i++)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b18      	cmp	r3, #24
 80012fa:	dde5      	ble.n	80012c8 <B1_ISR+0x64>
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+25, collectedPoints);
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <B1_ISR+0xd4>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2200      	movs	r2, #0
 8001304:	461c      	mov	r4, r3
 8001306:	4615      	mov	r5, r2
 8001308:	4622      	mov	r2, r4
 800130a:	462b      	mov	r3, r5
 800130c:	490b      	ldr	r1, [pc, #44]	; (800133c <B1_ISR+0xd8>)
 800130e:	2000      	movs	r0, #0
 8001310:	f006 f95c 	bl	80075cc <HAL_FLASH_Program>
		Delay(50);
 8001314:	2032      	movs	r0, #50	; 0x32
 8001316:	f004 f821 	bl	800535c <Delay>
		HAL_FLASH_Lock();
 800131a:	f006 f9cd 	bl	80076b8 <HAL_FLASH_Lock>
		HAL_UART_Transmit(huart_debugg,(uint8_t*) "\n\rBackup save!\n\r", 16, 10);
 800131e:	230a      	movs	r3, #10
 8001320:	2210      	movs	r2, #16
 8001322:	4907      	ldr	r1, [pc, #28]	; (8001340 <B1_ISR+0xdc>)
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f009 fa5e 	bl	800a7e6 <HAL_UART_Transmit>
		NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 800132a:	f7ff fe2f 	bl	8000f8c <__NVIC_SystemReset>
 800132e:	bf00      	nop
 8001330:	40020400 	.word	0x40020400
 8001334:	200002c0 	.word	0x200002c0
 8001338:	200002ab 	.word	0x200002ab
 800133c:	08040019 	.word	0x08040019
 8001340:	0800fc84 	.word	0x0800fc84

08001344 <B_NUCLEO_ISR>:
}

void B_NUCLEO_ISR(UART_HandleTypeDef *huart_debugg)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	//Milyen módban voltunk eddig?
	uint8_t tmp= *(__IO uint8_t *) FLASH_ADDRESS_MODESELECTOR;
 800134c:	4b41      	ldr	r3, [pc, #260]	; (8001454 <B_NUCLEO_ISR+0x110>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	72fb      	strb	r3, [r7, #11]
	if(tmp==SKILL || tmp==FAST)mode=tmp;
 8001352:	7afb      	ldrb	r3, [r7, #11]
 8001354:	2b52      	cmp	r3, #82	; 0x52
 8001356:	d002      	beq.n	800135e <B_NUCLEO_ISR+0x1a>
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	2b3f      	cmp	r3, #63	; 0x3f
 800135c:	d103      	bne.n	8001366 <B_NUCLEO_ISR+0x22>
 800135e:	4a3e      	ldr	r2, [pc, #248]	; (8001458 <B_NUCLEO_ISR+0x114>)
 8001360:	7afb      	ldrb	r3, [r7, #11]
 8001362:	7013      	strb	r3, [r2, #0]
 8001364:	e002      	b.n	800136c <B_NUCLEO_ISR+0x28>
	else mode=SKILL;
 8001366:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <B_NUCLEO_ISR+0x114>)
 8001368:	2252      	movs	r2, #82	; 0x52
 800136a:	701a      	strb	r2, [r3, #0]

	//section 7 törlése, hogy újraírhassuk a módot jelző bytot
	HAL_FLASH_Unlock();
 800136c:	f006 f982 	bl	8007674 <HAL_FLASH_Unlock>
	Delay(50);
 8001370:	2032      	movs	r0, #50	; 0x32
 8001372:	f003 fff3 	bl	800535c <Delay>
	FLASH_Erase_Sector(7, FLASH_VOLTAGE_RANGE_3);
 8001376:	2102      	movs	r1, #2
 8001378:	2007      	movs	r0, #7
 800137a:	f006 faed 	bl	8007958 <FLASH_Erase_Sector>
	Delay(50);
 800137e:	2032      	movs	r0, #50	; 0x32
 8001380:	f003 ffec 	bl	800535c <Delay>
	HAL_FLASH_Lock();
 8001384:	f006 f998 	bl	80076b8 <HAL_FLASH_Lock>

	LED_NUCLEO(0);
 8001388:	2200      	movs	r2, #0
 800138a:	2120      	movs	r1, #32
 800138c:	4833      	ldr	r0, [pc, #204]	; (800145c <B_NUCLEO_ISR+0x118>)
 800138e:	f006 fcd7 	bl	8007d40 <HAL_GPIO_WritePin>
	LED_Y(0);
 8001392:	2201      	movs	r2, #1
 8001394:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001398:	4831      	ldr	r0, [pc, #196]	; (8001460 <B_NUCLEO_ISR+0x11c>)
 800139a:	f006 fcd1 	bl	8007d40 <HAL_GPIO_WritePin>
	LED_G(0);
 800139e:	2201      	movs	r2, #1
 80013a0:	2102      	movs	r1, #2
 80013a2:	482f      	ldr	r0, [pc, #188]	; (8001460 <B_NUCLEO_ISR+0x11c>)
 80013a4:	f006 fccc 	bl	8007d40 <HAL_GPIO_WritePin>
	LED_B(0);
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ae:	482c      	ldr	r0, [pc, #176]	; (8001460 <B_NUCLEO_ISR+0x11c>)
 80013b0:	f006 fcc6 	bl	8007d40 <HAL_GPIO_WritePin>
	LED_R(0);
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ba:	4829      	ldr	r0, [pc, #164]	; (8001460 <B_NUCLEO_ISR+0x11c>)
 80013bc:	f006 fcc0 	bl	8007d40 <HAL_GPIO_WritePin>
	int i;
	for(i=0;i<8;i++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	e01c      	b.n	8001400 <B_NUCLEO_ISR+0xbc>
	{
		LED_NUCLEO_TOGGLE;
 80013c6:	2120      	movs	r1, #32
 80013c8:	4824      	ldr	r0, [pc, #144]	; (800145c <B_NUCLEO_ISR+0x118>)
 80013ca:	f006 fcd2 	bl	8007d72 <HAL_GPIO_TogglePin>
		LED_Y_TOGGLE;
 80013ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d2:	4823      	ldr	r0, [pc, #140]	; (8001460 <B_NUCLEO_ISR+0x11c>)
 80013d4:	f006 fccd 	bl	8007d72 <HAL_GPIO_TogglePin>
		LED_G_TOGGLE;
 80013d8:	2102      	movs	r1, #2
 80013da:	4821      	ldr	r0, [pc, #132]	; (8001460 <B_NUCLEO_ISR+0x11c>)
 80013dc:	f006 fcc9 	bl	8007d72 <HAL_GPIO_TogglePin>
		LED_B_TOGGLE;
 80013e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e4:	481e      	ldr	r0, [pc, #120]	; (8001460 <B_NUCLEO_ISR+0x11c>)
 80013e6:	f006 fcc4 	bl	8007d72 <HAL_GPIO_TogglePin>
		LED_R_TOGGLE;
 80013ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ee:	481c      	ldr	r0, [pc, #112]	; (8001460 <B_NUCLEO_ISR+0x11c>)
 80013f0:	f006 fcbf 	bl	8007d72 <HAL_GPIO_TogglePin>
		Delay(150);
 80013f4:	2096      	movs	r0, #150	; 0x96
 80013f6:	f003 ffb1 	bl	800535c <Delay>
	for(i=0;i<8;i++)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3301      	adds	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b07      	cmp	r3, #7
 8001404:	dddf      	ble.n	80013c6 <B_NUCLEO_ISR+0x82>
	}

	//Állítsuk át a módot
	HAL_FLASH_Unlock();
 8001406:	f006 f935 	bl	8007674 <HAL_FLASH_Unlock>
	Delay(50);
 800140a:	2032      	movs	r0, #50	; 0x32
 800140c:	f003 ffa6 	bl	800535c <Delay>
	if(mode==SKILL) HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, FAST); //ha eddig skill mód volt akor msot gyors lesz
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <B_NUCLEO_ISR+0x114>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b52      	cmp	r3, #82	; 0x52
 8001416:	d108      	bne.n	800142a <B_NUCLEO_ISR+0xe6>
 8001418:	f04f 023f 	mov.w	r2, #63	; 0x3f
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <B_NUCLEO_ISR+0x110>)
 8001422:	2000      	movs	r0, #0
 8001424:	f006 f8d2 	bl	80075cc <HAL_FLASH_Program>
 8001428:	e007      	b.n	800143a <B_NUCLEO_ISR+0xf6>
	else HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, SKILL); //ha eddig gyors mód vagy memóriaszemét volt akkor msot skil lesz
 800142a:	f04f 0252 	mov.w	r2, #82	; 0x52
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	4908      	ldr	r1, [pc, #32]	; (8001454 <B_NUCLEO_ISR+0x110>)
 8001434:	2000      	movs	r0, #0
 8001436:	f006 f8c9 	bl	80075cc <HAL_FLASH_Program>
	Delay(50);
 800143a:	2032      	movs	r0, #50	; 0x32
 800143c:	f003 ff8e 	bl	800535c <Delay>
	HAL_FLASH_Lock();
 8001440:	f006 f93a 	bl	80076b8 <HAL_FLASH_Lock>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\rMode change!\n\r", 16, 10);
 8001444:	230a      	movs	r3, #10
 8001446:	2210      	movs	r2, #16
 8001448:	4906      	ldr	r1, [pc, #24]	; (8001464 <B_NUCLEO_ISR+0x120>)
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f009 f9cb 	bl	800a7e6 <HAL_UART_Transmit>
	NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 8001450:	f7ff fd9c 	bl	8000f8c <__NVIC_SystemReset>
 8001454:	08060000 	.word	0x08060000
 8001458:	2000029e 	.word	0x2000029e
 800145c:	40020000 	.word	0x40020000
 8001460:	40020400 	.word	0x40020400
 8001464:	0800fc98 	.word	0x0800fc98

08001468 <Create_Nodes>:
volatile uint8_t uartThunder[6];

node Nodes[25];

void Create_Nodes(UART_HandleTypeDef *huart_debugg)
{
 8001468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800146c:	b09c      	sub	sp, #112	; 0x70
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
	int i;
	orientation=FORWARD;
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <Create_Nodes+0x28>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
	nodeDetected=1;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <Create_Nodes+0x2c>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
	collectedPoints=0;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <Create_Nodes+0x30>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
	laneChange=0;
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <Create_Nodes+0x34>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]

	for(i=0;i<25;i++)
 800148a:	2300      	movs	r3, #0
 800148c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800148e:	e076      	b.n	800157e <Create_Nodes+0x116>
 8001490:	200002a8 	.word	0x200002a8
 8001494:	200002a9 	.word	0x200002a9
 8001498:	200002ab 	.word	0x200002ab
 800149c:	200002ac 	.word	0x200002ac
	{
		Nodes[i].id=65+i;
 80014a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	3341      	adds	r3, #65	; 0x41
 80014a6:	b2d9      	uxtb	r1, r3
 80014a8:	4abc      	ldr	r2, [pc, #752]	; (800179c <Create_Nodes+0x334>)
 80014aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014ac:	015b      	lsls	r3, r3, #5
 80014ae:	4413      	add	r3, r2
 80014b0:	460a      	mov	r2, r1
 80014b2:	701a      	strb	r2, [r3, #0]
		Nodes[i].worth=0;
 80014b4:	4ab9      	ldr	r2, [pc, #740]	; (800179c <Create_Nodes+0x334>)
 80014b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014b8:	015b      	lsls	r3, r3, #5
 80014ba:	4413      	add	r3, r2
 80014bc:	3304      	adds	r3, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
		Nodes[i].type=0;
 80014c2:	4ab6      	ldr	r2, [pc, #728]	; (800179c <Create_Nodes+0x334>)
 80014c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014c6:	015b      	lsls	r3, r3, #5
 80014c8:	4413      	add	r3, r2
 80014ca:	3308      	adds	r3, #8
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
		VALUE(Nodes[i].neighbours,0,0,0,0);
 80014d0:	4ab2      	ldr	r2, [pc, #712]	; (800179c <Create_Nodes+0x334>)
 80014d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014d4:	015b      	lsls	r3, r3, #5
 80014d6:	4413      	add	r3, r2
 80014d8:	330c      	adds	r3, #12
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	4aaf      	ldr	r2, [pc, #700]	; (800179c <Create_Nodes+0x334>)
 80014e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014e2:	015b      	lsls	r3, r3, #5
 80014e4:	4413      	add	r3, r2
 80014e6:	330d      	adds	r3, #13
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	4aab      	ldr	r2, [pc, #684]	; (800179c <Create_Nodes+0x334>)
 80014ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014f0:	015b      	lsls	r3, r3, #5
 80014f2:	4413      	add	r3, r2
 80014f4:	330e      	adds	r3, #14
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	4aa8      	ldr	r2, [pc, #672]	; (800179c <Create_Nodes+0x334>)
 80014fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014fe:	015b      	lsls	r3, r3, #5
 8001500:	4413      	add	r3, r2
 8001502:	330f      	adds	r3, #15
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
		VALUE(Nodes[i].directions,0,0,0,0);
 8001508:	4aa4      	ldr	r2, [pc, #656]	; (800179c <Create_Nodes+0x334>)
 800150a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800150c:	015b      	lsls	r3, r3, #5
 800150e:	4413      	add	r3, r2
 8001510:	3310      	adds	r3, #16
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	4aa1      	ldr	r2, [pc, #644]	; (800179c <Create_Nodes+0x334>)
 8001518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800151a:	015b      	lsls	r3, r3, #5
 800151c:	4413      	add	r3, r2
 800151e:	3311      	adds	r3, #17
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	4a9d      	ldr	r2, [pc, #628]	; (800179c <Create_Nodes+0x334>)
 8001526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001528:	015b      	lsls	r3, r3, #5
 800152a:	4413      	add	r3, r2
 800152c:	3312      	adds	r3, #18
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	4a9a      	ldr	r2, [pc, #616]	; (800179c <Create_Nodes+0x334>)
 8001534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001536:	015b      	lsls	r3, r3, #5
 8001538:	4413      	add	r3, r2
 800153a:	3313      	adds	r3, #19
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
		VALUE(Nodes[i].distance,0,0,0,0);
 8001540:	4a96      	ldr	r2, [pc, #600]	; (800179c <Create_Nodes+0x334>)
 8001542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001544:	015b      	lsls	r3, r3, #5
 8001546:	4413      	add	r3, r2
 8001548:	3314      	adds	r3, #20
 800154a:	2200      	movs	r2, #0
 800154c:	801a      	strh	r2, [r3, #0]
 800154e:	4a93      	ldr	r2, [pc, #588]	; (800179c <Create_Nodes+0x334>)
 8001550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001552:	015b      	lsls	r3, r3, #5
 8001554:	4413      	add	r3, r2
 8001556:	3316      	adds	r3, #22
 8001558:	2200      	movs	r2, #0
 800155a:	801a      	strh	r2, [r3, #0]
 800155c:	4a8f      	ldr	r2, [pc, #572]	; (800179c <Create_Nodes+0x334>)
 800155e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001560:	015b      	lsls	r3, r3, #5
 8001562:	4413      	add	r3, r2
 8001564:	3318      	adds	r3, #24
 8001566:	2200      	movs	r2, #0
 8001568:	801a      	strh	r2, [r3, #0]
 800156a:	4a8c      	ldr	r2, [pc, #560]	; (800179c <Create_Nodes+0x334>)
 800156c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800156e:	015b      	lsls	r3, r3, #5
 8001570:	4413      	add	r3, r2
 8001572:	331a      	adds	r3, #26
 8001574:	2200      	movs	r2, #0
 8001576:	801a      	strh	r2, [r3, #0]
	for(i=0;i<25;i++)
 8001578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800157a:	3301      	adds	r3, #1
 800157c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800157e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001580:	2b18      	cmp	r3, #24
 8001582:	dd8d      	ble.n	80014a0 <Create_Nodes+0x38>
	}
	//A node
	N('A').worth=0;
 8001584:	4b85      	ldr	r3, [pc, #532]	; (800179c <Create_Nodes+0x334>)
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
	N('A').type=1;
 800158a:	4b84      	ldr	r3, [pc, #528]	; (800179c <Create_Nodes+0x334>)
 800158c:	2201      	movs	r2, #1
 800158e:	609a      	str	r2, [r3, #8]
	VALUE(N('A').neighbours,0,0,0,'C');
 8001590:	4b82      	ldr	r3, [pc, #520]	; (800179c <Create_Nodes+0x334>)
 8001592:	2200      	movs	r2, #0
 8001594:	731a      	strb	r2, [r3, #12]
 8001596:	4b81      	ldr	r3, [pc, #516]	; (800179c <Create_Nodes+0x334>)
 8001598:	2200      	movs	r2, #0
 800159a:	735a      	strb	r2, [r3, #13]
 800159c:	4b7f      	ldr	r3, [pc, #508]	; (800179c <Create_Nodes+0x334>)
 800159e:	2200      	movs	r2, #0
 80015a0:	739a      	strb	r2, [r3, #14]
 80015a2:	4b7e      	ldr	r3, [pc, #504]	; (800179c <Create_Nodes+0x334>)
 80015a4:	2243      	movs	r2, #67	; 0x43
 80015a6:	73da      	strb	r2, [r3, #15]
	VALUE(N('A').directions,0,0,0,2);
 80015a8:	4b7c      	ldr	r3, [pc, #496]	; (800179c <Create_Nodes+0x334>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	741a      	strb	r2, [r3, #16]
 80015ae:	4b7b      	ldr	r3, [pc, #492]	; (800179c <Create_Nodes+0x334>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	745a      	strb	r2, [r3, #17]
 80015b4:	4b79      	ldr	r3, [pc, #484]	; (800179c <Create_Nodes+0x334>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	749a      	strb	r2, [r3, #18]
 80015ba:	4b78      	ldr	r3, [pc, #480]	; (800179c <Create_Nodes+0x334>)
 80015bc:	2202      	movs	r2, #2
 80015be:	74da      	strb	r2, [r3, #19]
	VALUE(N('A').distance,0,0,0,365);
 80015c0:	4b76      	ldr	r3, [pc, #472]	; (800179c <Create_Nodes+0x334>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	829a      	strh	r2, [r3, #20]
 80015c6:	4b75      	ldr	r3, [pc, #468]	; (800179c <Create_Nodes+0x334>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	82da      	strh	r2, [r3, #22]
 80015cc:	4b73      	ldr	r3, [pc, #460]	; (800179c <Create_Nodes+0x334>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	831a      	strh	r2, [r3, #24]
 80015d2:	4b72      	ldr	r3, [pc, #456]	; (800179c <Create_Nodes+0x334>)
 80015d4:	f240 126d 	movw	r2, #365	; 0x16d
 80015d8:	835a      	strh	r2, [r3, #26]
	N('A').middle=NEIGHBOUR4;
 80015da:	4b70      	ldr	r3, [pc, #448]	; (800179c <Create_Nodes+0x334>)
 80015dc:	2203      	movs	r2, #3
 80015de:	771a      	strb	r2, [r3, #28]

	//B node
	N('B').worth=2;
 80015e0:	4b6e      	ldr	r3, [pc, #440]	; (800179c <Create_Nodes+0x334>)
 80015e2:	2202      	movs	r2, #2
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
	N('B').type=2;
 80015e6:	4b6d      	ldr	r3, [pc, #436]	; (800179c <Create_Nodes+0x334>)
 80015e8:	2202      	movs	r2, #2
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
	VALUE(N('B').neighbours,'D',0,'C',0);
 80015ec:	4b6b      	ldr	r3, [pc, #428]	; (800179c <Create_Nodes+0x334>)
 80015ee:	2244      	movs	r2, #68	; 0x44
 80015f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80015f4:	4b69      	ldr	r3, [pc, #420]	; (800179c <Create_Nodes+0x334>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80015fc:	4b67      	ldr	r3, [pc, #412]	; (800179c <Create_Nodes+0x334>)
 80015fe:	2243      	movs	r2, #67	; 0x43
 8001600:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8001604:	4b65      	ldr	r3, [pc, #404]	; (800179c <Create_Nodes+0x334>)
 8001606:	2200      	movs	r2, #0
 8001608:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	VALUE(N('B').directions,2,0,2,0);
 800160c:	4b63      	ldr	r3, [pc, #396]	; (800179c <Create_Nodes+0x334>)
 800160e:	2202      	movs	r2, #2
 8001610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001614:	4b61      	ldr	r3, [pc, #388]	; (800179c <Create_Nodes+0x334>)
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800161c:	4b5f      	ldr	r3, [pc, #380]	; (800179c <Create_Nodes+0x334>)
 800161e:	2202      	movs	r2, #2
 8001620:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001624:	4b5d      	ldr	r3, [pc, #372]	; (800179c <Create_Nodes+0x334>)
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	VALUE(N('B').distance,452,0,168,0);
 800162c:	4b5b      	ldr	r3, [pc, #364]	; (800179c <Create_Nodes+0x334>)
 800162e:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8001632:	869a      	strh	r2, [r3, #52]	; 0x34
 8001634:	4b59      	ldr	r3, [pc, #356]	; (800179c <Create_Nodes+0x334>)
 8001636:	2200      	movs	r2, #0
 8001638:	86da      	strh	r2, [r3, #54]	; 0x36
 800163a:	4b58      	ldr	r3, [pc, #352]	; (800179c <Create_Nodes+0x334>)
 800163c:	22a8      	movs	r2, #168	; 0xa8
 800163e:	871a      	strh	r2, [r3, #56]	; 0x38
 8001640:	4b56      	ldr	r3, [pc, #344]	; (800179c <Create_Nodes+0x334>)
 8001642:	2200      	movs	r2, #0
 8001644:	875a      	strh	r2, [r3, #58]	; 0x3a
	N('B').middle=NEIGHBOUR3;
 8001646:	4b55      	ldr	r3, [pc, #340]	; (800179c <Create_Nodes+0x334>)
 8001648:	2202      	movs	r2, #2
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	//C node
	N('C').worth=0; //beragadás ellen
 800164e:	4b53      	ldr	r3, [pc, #332]	; (800179c <Create_Nodes+0x334>)
 8001650:	2200      	movs	r2, #0
 8001652:	645a      	str	r2, [r3, #68]	; 0x44
	N('C').type=3;
 8001654:	4b51      	ldr	r3, [pc, #324]	; (800179c <Create_Nodes+0x334>)
 8001656:	2203      	movs	r2, #3
 8001658:	649a      	str	r2, [r3, #72]	; 0x48
	VALUE(N('C').neighbours,0,'B','E',0);
 800165a:	4b50      	ldr	r3, [pc, #320]	; (800179c <Create_Nodes+0x334>)
 800165c:	2200      	movs	r2, #0
 800165e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001662:	4b4e      	ldr	r3, [pc, #312]	; (800179c <Create_Nodes+0x334>)
 8001664:	2242      	movs	r2, #66	; 0x42
 8001666:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800166a:	4b4c      	ldr	r3, [pc, #304]	; (800179c <Create_Nodes+0x334>)
 800166c:	2245      	movs	r2, #69	; 0x45
 800166e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8001672:	4b4a      	ldr	r3, [pc, #296]	; (800179c <Create_Nodes+0x334>)
 8001674:	2200      	movs	r2, #0
 8001676:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	VALUE(N('C').directions,0,1,2,0);
 800167a:	4b48      	ldr	r3, [pc, #288]	; (800179c <Create_Nodes+0x334>)
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001682:	4b46      	ldr	r3, [pc, #280]	; (800179c <Create_Nodes+0x334>)
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800168a:	4b44      	ldr	r3, [pc, #272]	; (800179c <Create_Nodes+0x334>)
 800168c:	2202      	movs	r2, #2
 800168e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8001692:	4b42      	ldr	r3, [pc, #264]	; (800179c <Create_Nodes+0x334>)
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	VALUE(N('C').distance,0,218,130,0);
 800169a:	4b40      	ldr	r3, [pc, #256]	; (800179c <Create_Nodes+0x334>)
 800169c:	2200      	movs	r2, #0
 800169e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80016a2:	4b3e      	ldr	r3, [pc, #248]	; (800179c <Create_Nodes+0x334>)
 80016a4:	22da      	movs	r2, #218	; 0xda
 80016a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80016aa:	4b3c      	ldr	r3, [pc, #240]	; (800179c <Create_Nodes+0x334>)
 80016ac:	2282      	movs	r2, #130	; 0x82
 80016ae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80016b2:	4b3a      	ldr	r3, [pc, #232]	; (800179c <Create_Nodes+0x334>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	N('C').middle=NEIGHBOUR3;
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <Create_Nodes+0x334>)
 80016bc:	2202      	movs	r2, #2
 80016be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	//D node
	N('D').worth=2;
 80016c2:	4b36      	ldr	r3, [pc, #216]	; (800179c <Create_Nodes+0x334>)
 80016c4:	2202      	movs	r2, #2
 80016c6:	665a      	str	r2, [r3, #100]	; 0x64
	N('D').type=1;
 80016c8:	4b34      	ldr	r3, [pc, #208]	; (800179c <Create_Nodes+0x334>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	669a      	str	r2, [r3, #104]	; 0x68
	VALUE(N('D').neighbours,'B',0,'F',0);
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <Create_Nodes+0x334>)
 80016d0:	2242      	movs	r2, #66	; 0x42
 80016d2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80016d6:	4b31      	ldr	r3, [pc, #196]	; (800179c <Create_Nodes+0x334>)
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 80016de:	4b2f      	ldr	r3, [pc, #188]	; (800179c <Create_Nodes+0x334>)
 80016e0:	2246      	movs	r2, #70	; 0x46
 80016e2:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 80016e6:	4b2d      	ldr	r3, [pc, #180]	; (800179c <Create_Nodes+0x334>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	VALUE(N('D').directions,2,0,2,0);
 80016ee:	4b2b      	ldr	r3, [pc, #172]	; (800179c <Create_Nodes+0x334>)
 80016f0:	2202      	movs	r2, #2
 80016f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <Create_Nodes+0x334>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80016fe:	4b27      	ldr	r3, [pc, #156]	; (800179c <Create_Nodes+0x334>)
 8001700:	2202      	movs	r2, #2
 8001702:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <Create_Nodes+0x334>)
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	VALUE(N('D').distance,452,0,316,0);
 800170e:	4b23      	ldr	r3, [pc, #140]	; (800179c <Create_Nodes+0x334>)
 8001710:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8001714:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8001718:	4b20      	ldr	r3, [pc, #128]	; (800179c <Create_Nodes+0x334>)
 800171a:	2200      	movs	r2, #0
 800171c:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <Create_Nodes+0x334>)
 8001722:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8001726:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <Create_Nodes+0x334>)
 800172c:	2200      	movs	r2, #0
 800172e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	N('D').middle=NEIGHBOUR3;
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <Create_Nodes+0x334>)
 8001734:	2202      	movs	r2, #2
 8001736:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

	//E node
	N('E').worth=0; //beragadás ellen
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <Create_Nodes+0x334>)
 800173c:	2200      	movs	r2, #0
 800173e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	N('E').type=3;
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <Create_Nodes+0x334>)
 8001744:	2203      	movs	r2, #3
 8001746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	VALUE(N('E').neighbours,'C',0,'F','G');
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <Create_Nodes+0x334>)
 800174c:	2243      	movs	r2, #67	; 0x43
 800174e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <Create_Nodes+0x334>)
 8001754:	2200      	movs	r2, #0
 8001756:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <Create_Nodes+0x334>)
 800175c:	2246      	movs	r2, #70	; 0x46
 800175e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <Create_Nodes+0x334>)
 8001764:	2247      	movs	r2, #71	; 0x47
 8001766:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	VALUE(N('E').directions,1,0,2,2);
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <Create_Nodes+0x334>)
 800176c:	2201      	movs	r2, #1
 800176e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <Create_Nodes+0x334>)
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <Create_Nodes+0x334>)
 800177c:	2202      	movs	r2, #2
 800177e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <Create_Nodes+0x334>)
 8001784:	2202      	movs	r2, #2
 8001786:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	VALUE(N('E').distance,130,0,428,385);
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <Create_Nodes+0x334>)
 800178c:	2282      	movs	r2, #130	; 0x82
 800178e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8001792:	4b02      	ldr	r3, [pc, #8]	; (800179c <Create_Nodes+0x334>)
 8001794:	2200      	movs	r2, #0
 8001796:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 800179a:	e001      	b.n	80017a0 <Create_Nodes+0x338>
 800179c:	200002c0 	.word	0x200002c0
 80017a0:	4bcd      	ldr	r3, [pc, #820]	; (8001ad8 <Create_Nodes+0x670>)
 80017a2:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80017a6:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 80017aa:	4bcb      	ldr	r3, [pc, #812]	; (8001ad8 <Create_Nodes+0x670>)
 80017ac:	f240 1281 	movw	r2, #385	; 0x181
 80017b0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	N('E').middle=NEIGHBOUR4;
 80017b4:	4bc8      	ldr	r3, [pc, #800]	; (8001ad8 <Create_Nodes+0x670>)
 80017b6:	2203      	movs	r2, #3
 80017b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

	//F node
	N('F').worth=2;
 80017bc:	4bc6      	ldr	r3, [pc, #792]	; (8001ad8 <Create_Nodes+0x670>)
 80017be:	2202      	movs	r2, #2
 80017c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	N('F').type=1;
 80017c4:	4bc4      	ldr	r3, [pc, #784]	; (8001ad8 <Create_Nodes+0x670>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	VALUE(N('F').neighbours,'E','D','H','I');
 80017cc:	4bc2      	ldr	r3, [pc, #776]	; (8001ad8 <Create_Nodes+0x670>)
 80017ce:	2245      	movs	r2, #69	; 0x45
 80017d0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 80017d4:	4bc0      	ldr	r3, [pc, #768]	; (8001ad8 <Create_Nodes+0x670>)
 80017d6:	2244      	movs	r2, #68	; 0x44
 80017d8:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 80017dc:	4bbe      	ldr	r3, [pc, #760]	; (8001ad8 <Create_Nodes+0x670>)
 80017de:	2248      	movs	r2, #72	; 0x48
 80017e0:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 80017e4:	4bbc      	ldr	r3, [pc, #752]	; (8001ad8 <Create_Nodes+0x670>)
 80017e6:	2249      	movs	r2, #73	; 0x49
 80017e8:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	VALUE(N('F').directions,1,1,2,2);
 80017ec:	4bba      	ldr	r3, [pc, #744]	; (8001ad8 <Create_Nodes+0x670>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80017f4:	4bb8      	ldr	r3, [pc, #736]	; (8001ad8 <Create_Nodes+0x670>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 80017fc:	4bb6      	ldr	r3, [pc, #728]	; (8001ad8 <Create_Nodes+0x670>)
 80017fe:	2202      	movs	r2, #2
 8001800:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8001804:	4bb4      	ldr	r3, [pc, #720]	; (8001ad8 <Create_Nodes+0x670>)
 8001806:	2202      	movs	r2, #2
 8001808:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	VALUE(N('F').distance,428,316,284,335);
 800180c:	4bb2      	ldr	r3, [pc, #712]	; (8001ad8 <Create_Nodes+0x670>)
 800180e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8001812:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8001816:	4bb0      	ldr	r3, [pc, #704]	; (8001ad8 <Create_Nodes+0x670>)
 8001818:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800181c:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8001820:	4bad      	ldr	r3, [pc, #692]	; (8001ad8 <Create_Nodes+0x670>)
 8001822:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001826:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 800182a:	4bab      	ldr	r3, [pc, #684]	; (8001ad8 <Create_Nodes+0x670>)
 800182c:	f240 124f 	movw	r2, #335	; 0x14f
 8001830:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
	N('F').middle=NEIGHBOUR3;
 8001834:	4ba8      	ldr	r3, [pc, #672]	; (8001ad8 <Create_Nodes+0x670>)
 8001836:	2202      	movs	r2, #2
 8001838:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

	//G node
	N('G').worth=2;
 800183c:	4ba6      	ldr	r3, [pc, #664]	; (8001ad8 <Create_Nodes+0x670>)
 800183e:	2202      	movs	r2, #2
 8001840:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	N('G').type=1;
 8001844:	4ba4      	ldr	r3, [pc, #656]	; (8001ad8 <Create_Nodes+0x670>)
 8001846:	2201      	movs	r2, #1
 8001848:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	VALUE(N('G').neighbours,'E',0,'H','I');
 800184c:	4ba2      	ldr	r3, [pc, #648]	; (8001ad8 <Create_Nodes+0x670>)
 800184e:	2245      	movs	r2, #69	; 0x45
 8001850:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8001854:	4ba0      	ldr	r3, [pc, #640]	; (8001ad8 <Create_Nodes+0x670>)
 8001856:	2200      	movs	r2, #0
 8001858:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 800185c:	4b9e      	ldr	r3, [pc, #632]	; (8001ad8 <Create_Nodes+0x670>)
 800185e:	2248      	movs	r2, #72	; 0x48
 8001860:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
 8001864:	4b9c      	ldr	r3, [pc, #624]	; (8001ad8 <Create_Nodes+0x670>)
 8001866:	2249      	movs	r2, #73	; 0x49
 8001868:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	VALUE(N('G').directions,1,0,2,2);
 800186c:	4b9a      	ldr	r3, [pc, #616]	; (8001ad8 <Create_Nodes+0x670>)
 800186e:	2201      	movs	r2, #1
 8001870:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8001874:	4b98      	ldr	r3, [pc, #608]	; (8001ad8 <Create_Nodes+0x670>)
 8001876:	2200      	movs	r2, #0
 8001878:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 800187c:	4b96      	ldr	r3, [pc, #600]	; (8001ad8 <Create_Nodes+0x670>)
 800187e:	2202      	movs	r2, #2
 8001880:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 8001884:	4b94      	ldr	r3, [pc, #592]	; (8001ad8 <Create_Nodes+0x670>)
 8001886:	2202      	movs	r2, #2
 8001888:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
	VALUE(N('G').distance,385,0,336,284);
 800188c:	4b92      	ldr	r3, [pc, #584]	; (8001ad8 <Create_Nodes+0x670>)
 800188e:	f240 1281 	movw	r2, #385	; 0x181
 8001892:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8001896:	4b90      	ldr	r3, [pc, #576]	; (8001ad8 <Create_Nodes+0x670>)
 8001898:	2200      	movs	r2, #0
 800189a:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
 800189e:	4b8e      	ldr	r3, [pc, #568]	; (8001ad8 <Create_Nodes+0x670>)
 80018a0:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80018a4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
 80018a8:	4b8b      	ldr	r3, [pc, #556]	; (8001ad8 <Create_Nodes+0x670>)
 80018aa:	f44f 728e 	mov.w	r2, #284	; 0x11c
 80018ae:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	N('G').middle=NEIGHBOUR3;
 80018b2:	4b89      	ldr	r3, [pc, #548]	; (8001ad8 <Create_Nodes+0x670>)
 80018b4:	2202      	movs	r2, #2
 80018b6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

	//H node
	N('H').worth=2;
 80018ba:	4b87      	ldr	r3, [pc, #540]	; (8001ad8 <Create_Nodes+0x670>)
 80018bc:	2202      	movs	r2, #2
 80018be:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	N('H').type=1;
 80018c2:	4b85      	ldr	r3, [pc, #532]	; (8001ad8 <Create_Nodes+0x670>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	VALUE(N('H').neighbours,'G','F','K','J');
 80018ca:	4b83      	ldr	r3, [pc, #524]	; (8001ad8 <Create_Nodes+0x670>)
 80018cc:	2247      	movs	r2, #71	; 0x47
 80018ce:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80018d2:	4b81      	ldr	r3, [pc, #516]	; (8001ad8 <Create_Nodes+0x670>)
 80018d4:	2246      	movs	r2, #70	; 0x46
 80018d6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80018da:	4b7f      	ldr	r3, [pc, #508]	; (8001ad8 <Create_Nodes+0x670>)
 80018dc:	224b      	movs	r2, #75	; 0x4b
 80018de:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80018e2:	4b7d      	ldr	r3, [pc, #500]	; (8001ad8 <Create_Nodes+0x670>)
 80018e4:	224a      	movs	r2, #74	; 0x4a
 80018e6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
	VALUE(N('H').directions,1,1,2,2);
 80018ea:	4b7b      	ldr	r3, [pc, #492]	; (8001ad8 <Create_Nodes+0x670>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 80018f2:	4b79      	ldr	r3, [pc, #484]	; (8001ad8 <Create_Nodes+0x670>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 80018fa:	4b77      	ldr	r3, [pc, #476]	; (8001ad8 <Create_Nodes+0x670>)
 80018fc:	2202      	movs	r2, #2
 80018fe:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8001902:	4b75      	ldr	r3, [pc, #468]	; (8001ad8 <Create_Nodes+0x670>)
 8001904:	2202      	movs	r2, #2
 8001906:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
	VALUE(N('H').distance,336,284,407,230);
 800190a:	4b73      	ldr	r3, [pc, #460]	; (8001ad8 <Create_Nodes+0x670>)
 800190c:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001910:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 8001914:	4b70      	ldr	r3, [pc, #448]	; (8001ad8 <Create_Nodes+0x670>)
 8001916:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800191a:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 800191e:	4b6e      	ldr	r3, [pc, #440]	; (8001ad8 <Create_Nodes+0x670>)
 8001920:	f240 1297 	movw	r2, #407	; 0x197
 8001924:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8001928:	4b6b      	ldr	r3, [pc, #428]	; (8001ad8 <Create_Nodes+0x670>)
 800192a:	22e6      	movs	r2, #230	; 0xe6
 800192c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
	N('H').middle=NEIGHBOUR4;
 8001930:	4b69      	ldr	r3, [pc, #420]	; (8001ad8 <Create_Nodes+0x670>)
 8001932:	2203      	movs	r2, #3
 8001934:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc

	//I node
	N('I').worth=0;
 8001938:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <Create_Nodes+0x670>)
 800193a:	2200      	movs	r2, #0
 800193c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	N('I').type=3;
 8001940:	4b65      	ldr	r3, [pc, #404]	; (8001ad8 <Create_Nodes+0x670>)
 8001942:	2203      	movs	r2, #3
 8001944:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	VALUE(N('I').neighbours,'G','F',0,'L');
 8001948:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <Create_Nodes+0x670>)
 800194a:	2247      	movs	r2, #71	; 0x47
 800194c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8001950:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <Create_Nodes+0x670>)
 8001952:	2246      	movs	r2, #70	; 0x46
 8001954:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 8001958:	4b5f      	ldr	r3, [pc, #380]	; (8001ad8 <Create_Nodes+0x670>)
 800195a:	2200      	movs	r2, #0
 800195c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 8001960:	4b5d      	ldr	r3, [pc, #372]	; (8001ad8 <Create_Nodes+0x670>)
 8001962:	224c      	movs	r2, #76	; 0x4c
 8001964:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
	VALUE(N('I').directions,1,1,0,2);
 8001968:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <Create_Nodes+0x670>)
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8001970:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <Create_Nodes+0x670>)
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 8001978:	4b57      	ldr	r3, [pc, #348]	; (8001ad8 <Create_Nodes+0x670>)
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 8001980:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <Create_Nodes+0x670>)
 8001982:	2202      	movs	r2, #2
 8001984:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	VALUE(N('I').distance,284,335,0,418);
 8001988:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <Create_Nodes+0x670>)
 800198a:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800198e:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 8001992:	4b51      	ldr	r3, [pc, #324]	; (8001ad8 <Create_Nodes+0x670>)
 8001994:	f240 124f 	movw	r2, #335	; 0x14f
 8001998:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
 800199c:	4b4e      	ldr	r3, [pc, #312]	; (8001ad8 <Create_Nodes+0x670>)
 800199e:	2200      	movs	r2, #0
 80019a0:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 80019a4:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <Create_Nodes+0x670>)
 80019a6:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 80019aa:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	N('I').middle=NEIGHBOUR4;
 80019ae:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <Create_Nodes+0x670>)
 80019b0:	2203      	movs	r2, #3
 80019b2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

	//J node
	N('J').worth=0;
 80019b6:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <Create_Nodes+0x670>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	N('J').type=3;
 80019be:	4b46      	ldr	r3, [pc, #280]	; (8001ad8 <Create_Nodes+0x670>)
 80019c0:	2203      	movs	r2, #3
 80019c2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	VALUE(N('J').neighbours,'H',0,'K','L');
 80019c6:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <Create_Nodes+0x670>)
 80019c8:	2248      	movs	r2, #72	; 0x48
 80019ca:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 80019ce:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <Create_Nodes+0x670>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 80019d6:	4b40      	ldr	r3, [pc, #256]	; (8001ad8 <Create_Nodes+0x670>)
 80019d8:	224b      	movs	r2, #75	; 0x4b
 80019da:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
 80019de:	4b3e      	ldr	r3, [pc, #248]	; (8001ad8 <Create_Nodes+0x670>)
 80019e0:	224c      	movs	r2, #76	; 0x4c
 80019e2:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
	VALUE(N('J').directions,1,0,2,2);
 80019e6:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <Create_Nodes+0x670>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 80019ee:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <Create_Nodes+0x670>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <Create_Nodes+0x670>)
 80019f8:	2202      	movs	r2, #2
 80019fa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 80019fe:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <Create_Nodes+0x670>)
 8001a00:	2202      	movs	r2, #2
 8001a02:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
	VALUE(N('J').distance,230,0,204,229);
 8001a06:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <Create_Nodes+0x670>)
 8001a08:	22e6      	movs	r2, #230	; 0xe6
 8001a0a:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8001a0e:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <Create_Nodes+0x670>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <Create_Nodes+0x670>)
 8001a18:	22cc      	movs	r2, #204	; 0xcc
 8001a1a:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <Create_Nodes+0x670>)
 8001a20:	22e5      	movs	r2, #229	; 0xe5
 8001a22:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
	N('J').middle=NEIGHBOUR4;
 8001a26:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <Create_Nodes+0x670>)
 8001a28:	2203      	movs	r2, #3
 8001a2a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	//K node
	N('K').worth=2;
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <Create_Nodes+0x670>)
 8001a30:	2202      	movs	r2, #2
 8001a32:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	N('K').type=1;
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <Create_Nodes+0x670>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	VALUE(N('K').neighbours,'J','H','M','N');
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <Create_Nodes+0x670>)
 8001a40:	224a      	movs	r2, #74	; 0x4a
 8001a42:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <Create_Nodes+0x670>)
 8001a48:	2248      	movs	r2, #72	; 0x48
 8001a4a:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <Create_Nodes+0x670>)
 8001a50:	224d      	movs	r2, #77	; 0x4d
 8001a52:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <Create_Nodes+0x670>)
 8001a58:	224e      	movs	r2, #78	; 0x4e
 8001a5a:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
	VALUE(N('K').directions,1,1,2,2);
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <Create_Nodes+0x670>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <Create_Nodes+0x670>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <Create_Nodes+0x670>)
 8001a70:	2202      	movs	r2, #2
 8001a72:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <Create_Nodes+0x670>)
 8001a78:	2202      	movs	r2, #2
 8001a7a:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
	VALUE(N('K').distance,204,407,288,319);
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <Create_Nodes+0x670>)
 8001a80:	22cc      	movs	r2, #204	; 0xcc
 8001a82:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <Create_Nodes+0x670>)
 8001a88:	f240 1297 	movw	r2, #407	; 0x197
 8001a8c:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <Create_Nodes+0x670>)
 8001a92:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001a96:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <Create_Nodes+0x670>)
 8001a9c:	f240 123f 	movw	r2, #319	; 0x13f
 8001aa0:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
	N('K').middle=NEIGHBOUR1;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <Create_Nodes+0x670>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	//L node
	N('L').worth=2;
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <Create_Nodes+0x670>)
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	N('L').type=1;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <Create_Nodes+0x670>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	VALUE(N('L').neighbours,'I','J','M','N');
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <Create_Nodes+0x670>)
 8001abe:	2249      	movs	r2, #73	; 0x49
 8001ac0:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <Create_Nodes+0x670>)
 8001ac6:	224a      	movs	r2, #74	; 0x4a
 8001ac8:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
 8001acc:	4b02      	ldr	r3, [pc, #8]	; (8001ad8 <Create_Nodes+0x670>)
 8001ace:	224d      	movs	r2, #77	; 0x4d
 8001ad0:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
 8001ad4:	e002      	b.n	8001adc <Create_Nodes+0x674>
 8001ad6:	bf00      	nop
 8001ad8:	200002c0 	.word	0x200002c0
 8001adc:	4bcd      	ldr	r3, [pc, #820]	; (8001e14 <Create_Nodes+0x9ac>)
 8001ade:	224e      	movs	r2, #78	; 0x4e
 8001ae0:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
	VALUE(N('L').directions,1,1,2,2);
 8001ae4:	4bcb      	ldr	r3, [pc, #812]	; (8001e14 <Create_Nodes+0x9ac>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8001aec:	4bc9      	ldr	r3, [pc, #804]	; (8001e14 <Create_Nodes+0x9ac>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 8001af4:	4bc7      	ldr	r3, [pc, #796]	; (8001e14 <Create_Nodes+0x9ac>)
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
 8001afc:	4bc5      	ldr	r3, [pc, #788]	; (8001e14 <Create_Nodes+0x9ac>)
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
	VALUE(N('L').distance,418,229,329,258);
 8001b04:	4bc3      	ldr	r3, [pc, #780]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b06:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8001b0a:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
 8001b0e:	4bc1      	ldr	r3, [pc, #772]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b10:	22e5      	movs	r2, #229	; 0xe5
 8001b12:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
 8001b16:	4bbf      	ldr	r3, [pc, #764]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b18:	f240 1249 	movw	r2, #329	; 0x149
 8001b1c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
 8001b20:	4bbc      	ldr	r3, [pc, #752]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b22:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001b26:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
	N('L').middle=NEIGHBOUR2;
 8001b2a:	4bba      	ldr	r3, [pc, #744]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	//M node
	N('M').worth=2;
 8001b32:	4bb8      	ldr	r3, [pc, #736]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b34:	2202      	movs	r2, #2
 8001b36:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	N('M').type=1;
 8001b3a:	4bb6      	ldr	r3, [pc, #728]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	VALUE(N('M').neighbours,'L','K','P','O');
 8001b42:	4bb4      	ldr	r3, [pc, #720]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b44:	224c      	movs	r2, #76	; 0x4c
 8001b46:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
 8001b4a:	4bb2      	ldr	r3, [pc, #712]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b4c:	224b      	movs	r2, #75	; 0x4b
 8001b4e:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
 8001b52:	4bb0      	ldr	r3, [pc, #704]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b54:	2250      	movs	r2, #80	; 0x50
 8001b56:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
 8001b5a:	4bae      	ldr	r3, [pc, #696]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b5c:	224f      	movs	r2, #79	; 0x4f
 8001b5e:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
	VALUE(N('M').directions,1,1,2,2);
 8001b62:	4bac      	ldr	r3, [pc, #688]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8001b6a:	4baa      	ldr	r3, [pc, #680]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 8001b72:	4ba8      	ldr	r3, [pc, #672]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b74:	2202      	movs	r2, #2
 8001b76:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
 8001b7a:	4ba6      	ldr	r3, [pc, #664]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
	VALUE(N('M').distance,329,288,416,198);
 8001b82:	4ba4      	ldr	r3, [pc, #656]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b84:	f240 1249 	movw	r2, #329	; 0x149
 8001b88:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
 8001b8c:	4ba1      	ldr	r3, [pc, #644]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b8e:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001b92:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
 8001b96:	4b9f      	ldr	r3, [pc, #636]	; (8001e14 <Create_Nodes+0x9ac>)
 8001b98:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001b9c:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
 8001ba0:	4b9c      	ldr	r3, [pc, #624]	; (8001e14 <Create_Nodes+0x9ac>)
 8001ba2:	22c6      	movs	r2, #198	; 0xc6
 8001ba4:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
	N('M').middle=NEIGHBOUR1;
 8001ba8:	4b9a      	ldr	r3, [pc, #616]	; (8001e14 <Create_Nodes+0x9ac>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	//N node
	N('N').worth=0;
 8001bb0:	4b98      	ldr	r3, [pc, #608]	; (8001e14 <Create_Nodes+0x9ac>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	N('N').type=3;
 8001bb8:	4b96      	ldr	r3, [pc, #600]	; (8001e14 <Create_Nodes+0x9ac>)
 8001bba:	2203      	movs	r2, #3
 8001bbc:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	VALUE(N('N').neighbours,'L','K','O','Q');
 8001bc0:	4b94      	ldr	r3, [pc, #592]	; (8001e14 <Create_Nodes+0x9ac>)
 8001bc2:	224c      	movs	r2, #76	; 0x4c
 8001bc4:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
 8001bc8:	4b92      	ldr	r3, [pc, #584]	; (8001e14 <Create_Nodes+0x9ac>)
 8001bca:	224b      	movs	r2, #75	; 0x4b
 8001bcc:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
 8001bd0:	4b90      	ldr	r3, [pc, #576]	; (8001e14 <Create_Nodes+0x9ac>)
 8001bd2:	224f      	movs	r2, #79	; 0x4f
 8001bd4:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
 8001bd8:	4b8e      	ldr	r3, [pc, #568]	; (8001e14 <Create_Nodes+0x9ac>)
 8001bda:	2251      	movs	r2, #81	; 0x51
 8001bdc:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
	VALUE(N('N').directions,1,1,2,2);
 8001be0:	4b8c      	ldr	r3, [pc, #560]	; (8001e14 <Create_Nodes+0x9ac>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 8001be8:	4b8a      	ldr	r3, [pc, #552]	; (8001e14 <Create_Nodes+0x9ac>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 8001bf0:	4b88      	ldr	r3, [pc, #544]	; (8001e14 <Create_Nodes+0x9ac>)
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
 8001bf8:	4b86      	ldr	r3, [pc, #536]	; (8001e14 <Create_Nodes+0x9ac>)
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
	VALUE(N('N').distance,258,318,228,447);
 8001c00:	4b84      	ldr	r3, [pc, #528]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c02:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001c06:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
 8001c0a:	4b82      	ldr	r3, [pc, #520]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c0c:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8001c10:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
 8001c14:	4b7f      	ldr	r3, [pc, #508]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c16:	22e4      	movs	r2, #228	; 0xe4
 8001c18:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
 8001c1c:	4b7d      	ldr	r3, [pc, #500]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c1e:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001c22:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
	N('N').middle=NEIGHBOUR2;
 8001c26:	4b7b      	ldr	r3, [pc, #492]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc

	//O node
	N('O').worth=2;
 8001c2e:	4b79      	ldr	r3, [pc, #484]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c30:	2202      	movs	r2, #2
 8001c32:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
	N('O').type=1;
 8001c36:	4b77      	ldr	r3, [pc, #476]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	VALUE(N('O').neighbours,'N','M','P',0);
 8001c3e:	4b75      	ldr	r3, [pc, #468]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c40:	224e      	movs	r2, #78	; 0x4e
 8001c42:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8001c46:	4b73      	ldr	r3, [pc, #460]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c48:	224d      	movs	r2, #77	; 0x4d
 8001c4a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
 8001c4e:	4b71      	ldr	r3, [pc, #452]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c50:	2250      	movs	r2, #80	; 0x50
 8001c52:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 8001c56:	4b6f      	ldr	r3, [pc, #444]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
	VALUE(N('O').directions,1,1,2,0);
 8001c5e:	4b6d      	ldr	r3, [pc, #436]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 8001c66:	4b6b      	ldr	r3, [pc, #428]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 8001c6e:	4b69      	ldr	r3, [pc, #420]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c70:	2202      	movs	r2, #2
 8001c72:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 8001c76:	4b67      	ldr	r3, [pc, #412]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
	VALUE(N('O').distance,228,198,248,0);
 8001c7e:	4b65      	ldr	r3, [pc, #404]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c80:	22e4      	movs	r2, #228	; 0xe4
 8001c82:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
 8001c86:	4b63      	ldr	r3, [pc, #396]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c88:	22c6      	movs	r2, #198	; 0xc6
 8001c8a:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6
 8001c8e:	4b61      	ldr	r3, [pc, #388]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c90:	22f8      	movs	r2, #248	; 0xf8
 8001c92:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
 8001c96:	4b5f      	ldr	r3, [pc, #380]	; (8001e14 <Create_Nodes+0x9ac>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da
	N('O').middle=NEIGHBOUR2;
 8001c9e:	4b5d      	ldr	r3, [pc, #372]	; (8001e14 <Create_Nodes+0x9ac>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc

	//P node
	N('P').worth=2;
 8001ca6:	4b5b      	ldr	r3, [pc, #364]	; (8001e14 <Create_Nodes+0x9ac>)
 8001ca8:	2202      	movs	r2, #2
 8001caa:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	N('P').type=1;
 8001cae:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <Create_Nodes+0x9ac>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	VALUE(N('P').neighbours,'O','M','R','S');
 8001cb6:	4b57      	ldr	r3, [pc, #348]	; (8001e14 <Create_Nodes+0x9ac>)
 8001cb8:	224f      	movs	r2, #79	; 0x4f
 8001cba:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8001cbe:	4b55      	ldr	r3, [pc, #340]	; (8001e14 <Create_Nodes+0x9ac>)
 8001cc0:	224d      	movs	r2, #77	; 0x4d
 8001cc2:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8001cc6:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <Create_Nodes+0x9ac>)
 8001cc8:	2252      	movs	r2, #82	; 0x52
 8001cca:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8001cce:	4b51      	ldr	r3, [pc, #324]	; (8001e14 <Create_Nodes+0x9ac>)
 8001cd0:	2253      	movs	r2, #83	; 0x53
 8001cd2:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
	VALUE(N('P').directions,1,1,2,2);
 8001cd6:	4b4f      	ldr	r3, [pc, #316]	; (8001e14 <Create_Nodes+0x9ac>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 8001cde:	4b4d      	ldr	r3, [pc, #308]	; (8001e14 <Create_Nodes+0x9ac>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
 8001ce6:	4b4b      	ldr	r3, [pc, #300]	; (8001e14 <Create_Nodes+0x9ac>)
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
 8001cee:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <Create_Nodes+0x9ac>)
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	f883 21f3 	strb.w	r2, [r3, #499]	; 0x1f3
	VALUE(N('P').distance,248,416,305,346);
 8001cf6:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <Create_Nodes+0x9ac>)
 8001cf8:	22f8      	movs	r2, #248	; 0xf8
 8001cfa:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
 8001cfe:	4b45      	ldr	r3, [pc, #276]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d00:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001d04:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
 8001d08:	4b42      	ldr	r3, [pc, #264]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d0a:	f240 1231 	movw	r2, #305	; 0x131
 8001d0e:	f8a3 21f8 	strh.w	r2, [r3, #504]	; 0x1f8
 8001d12:	4b40      	ldr	r3, [pc, #256]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d14:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001d18:	f8a3 21fa 	strh.w	r2, [r3, #506]	; 0x1fa
	N('P').middle=NEIGHBOUR2;
 8001d1c:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc

	//Q node
	N('Q').worth=2;
 8001d24:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d26:	2202      	movs	r2, #2
 8001d28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	N('Q').type=1;
 8001d2c:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	VALUE(N('Q').neighbours,'N',0,'R','S');
 8001d34:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d36:	224e      	movs	r2, #78	; 0x4e
 8001d38:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
 8001d3c:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 220d 	strb.w	r2, [r3, #525]	; 0x20d
 8001d44:	4b33      	ldr	r3, [pc, #204]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d46:	2252      	movs	r2, #82	; 0x52
 8001d48:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
 8001d4c:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d4e:	2253      	movs	r2, #83	; 0x53
 8001d50:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
	VALUE(N('Q').directions,1,0,2,2);
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 8001d64:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
	VALUE(N('Q').distance,447,0,346,284);
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d76:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001d7a:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	f8a3 2216 	strh.w	r2, [r3, #534]	; 0x216
 8001d86:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d88:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001d8c:	f8a3 2218 	strh.w	r2, [r3, #536]	; 0x218
 8001d90:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d92:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001d96:	f8a3 221a 	strh.w	r2, [r3, #538]	; 0x21a
	N('Q').middle=NEIGHBOUR1;
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <Create_Nodes+0x9ac>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c

	//R node
	N('R').worth=2;
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <Create_Nodes+0x9ac>)
 8001da4:	2202      	movs	r2, #2
 8001da6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	N('R').type=1;
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <Create_Nodes+0x9ac>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	VALUE(N('R').neighbours,'Q','P','U','T');
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <Create_Nodes+0x9ac>)
 8001db4:	2251      	movs	r2, #81	; 0x51
 8001db6:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
 8001dba:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <Create_Nodes+0x9ac>)
 8001dbc:	2250      	movs	r2, #80	; 0x50
 8001dbe:	f883 222d 	strb.w	r2, [r3, #557]	; 0x22d
 8001dc2:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <Create_Nodes+0x9ac>)
 8001dc4:	2255      	movs	r2, #85	; 0x55
 8001dc6:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <Create_Nodes+0x9ac>)
 8001dcc:	2254      	movs	r2, #84	; 0x54
 8001dce:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
	VALUE(N('R').directions,1,1,2,2);
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <Create_Nodes+0x9ac>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <Create_Nodes+0x9ac>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <Create_Nodes+0x9ac>)
 8001de4:	2202      	movs	r2, #2
 8001de6:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <Create_Nodes+0x9ac>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
	VALUE(N('R').distance,346,305,366,204);
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <Create_Nodes+0x9ac>)
 8001df4:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001df8:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <Create_Nodes+0x9ac>)
 8001dfe:	f240 1231 	movw	r2, #305	; 0x131
 8001e02:	f8a3 2236 	strh.w	r2, [r3, #566]	; 0x236
 8001e06:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <Create_Nodes+0x9ac>)
 8001e08:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8001e0c:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
 8001e10:	e002      	b.n	8001e18 <Create_Nodes+0x9b0>
 8001e12:	bf00      	nop
 8001e14:	200002c0 	.word	0x200002c0
 8001e18:	4bcb      	ldr	r3, [pc, #812]	; (8002148 <Create_Nodes+0xce0>)
 8001e1a:	22cc      	movs	r2, #204	; 0xcc
 8001e1c:	f8a3 223a 	strh.w	r2, [r3, #570]	; 0x23a
	N('R').middle=NEIGHBOUR2;
 8001e20:	4bc9      	ldr	r3, [pc, #804]	; (8002148 <Create_Nodes+0xce0>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c

	//S node
	N('S').worth=2;
 8001e28:	4bc7      	ldr	r3, [pc, #796]	; (8002148 <Create_Nodes+0xce0>)
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	N('S').type=1;
 8001e30:	4bc5      	ldr	r3, [pc, #788]	; (8002148 <Create_Nodes+0xce0>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	VALUE(N('S').neighbours,'Q','P','T','V');
 8001e38:	4bc3      	ldr	r3, [pc, #780]	; (8002148 <Create_Nodes+0xce0>)
 8001e3a:	2251      	movs	r2, #81	; 0x51
 8001e3c:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
 8001e40:	4bc1      	ldr	r3, [pc, #772]	; (8002148 <Create_Nodes+0xce0>)
 8001e42:	2250      	movs	r2, #80	; 0x50
 8001e44:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
 8001e48:	4bbf      	ldr	r3, [pc, #764]	; (8002148 <Create_Nodes+0xce0>)
 8001e4a:	2254      	movs	r2, #84	; 0x54
 8001e4c:	f883 224e 	strb.w	r2, [r3, #590]	; 0x24e
 8001e50:	4bbd      	ldr	r3, [pc, #756]	; (8002148 <Create_Nodes+0xce0>)
 8001e52:	2256      	movs	r2, #86	; 0x56
 8001e54:	f883 224f 	strb.w	r2, [r3, #591]	; 0x24f
	VALUE(N('S').directions,1,1,2,2);
 8001e58:	4bbb      	ldr	r3, [pc, #748]	; (8002148 <Create_Nodes+0xce0>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 8001e60:	4bb9      	ldr	r3, [pc, #740]	; (8002148 <Create_Nodes+0xce0>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8001e68:	4bb7      	ldr	r3, [pc, #732]	; (8002148 <Create_Nodes+0xce0>)
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 8001e70:	4bb5      	ldr	r3, [pc, #724]	; (8002148 <Create_Nodes+0xce0>)
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
	VALUE(N('S').distance,284,346,223,406);
 8001e78:	4bb3      	ldr	r3, [pc, #716]	; (8002148 <Create_Nodes+0xce0>)
 8001e7a:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001e7e:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
 8001e82:	4bb1      	ldr	r3, [pc, #708]	; (8002148 <Create_Nodes+0xce0>)
 8001e84:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001e88:	f8a3 2256 	strh.w	r2, [r3, #598]	; 0x256
 8001e8c:	4bae      	ldr	r3, [pc, #696]	; (8002148 <Create_Nodes+0xce0>)
 8001e8e:	22df      	movs	r2, #223	; 0xdf
 8001e90:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
 8001e94:	4bac      	ldr	r3, [pc, #688]	; (8002148 <Create_Nodes+0xce0>)
 8001e96:	f44f 72cb 	mov.w	r2, #406	; 0x196
 8001e9a:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
	N('S').middle=NEIGHBOUR2;
 8001e9e:	4baa      	ldr	r3, [pc, #680]	; (8002148 <Create_Nodes+0xce0>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

	//T node
	N('T').worth=2;
 8001ea6:	4ba8      	ldr	r3, [pc, #672]	; (8002148 <Create_Nodes+0xce0>)
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	N('T').type=1;
 8001eae:	4ba6      	ldr	r3, [pc, #664]	; (8002148 <Create_Nodes+0xce0>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	VALUE(N('T').neighbours,'S','R','U','V');
 8001eb6:	4ba4      	ldr	r3, [pc, #656]	; (8002148 <Create_Nodes+0xce0>)
 8001eb8:	2253      	movs	r2, #83	; 0x53
 8001eba:	f883 226c 	strb.w	r2, [r3, #620]	; 0x26c
 8001ebe:	4ba2      	ldr	r3, [pc, #648]	; (8002148 <Create_Nodes+0xce0>)
 8001ec0:	2252      	movs	r2, #82	; 0x52
 8001ec2:	f883 226d 	strb.w	r2, [r3, #621]	; 0x26d
 8001ec6:	4ba0      	ldr	r3, [pc, #640]	; (8002148 <Create_Nodes+0xce0>)
 8001ec8:	2255      	movs	r2, #85	; 0x55
 8001eca:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 8001ece:	4b9e      	ldr	r3, [pc, #632]	; (8002148 <Create_Nodes+0xce0>)
 8001ed0:	2256      	movs	r2, #86	; 0x56
 8001ed2:	f883 226f 	strb.w	r2, [r3, #623]	; 0x26f
	VALUE(N('T').directions,1,1,2,2);
 8001ed6:	4b9c      	ldr	r3, [pc, #624]	; (8002148 <Create_Nodes+0xce0>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
 8001ede:	4b9a      	ldr	r3, [pc, #616]	; (8002148 <Create_Nodes+0xce0>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
 8001ee6:	4b98      	ldr	r3, [pc, #608]	; (8002148 <Create_Nodes+0xce0>)
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
 8001eee:	4b96      	ldr	r3, [pc, #600]	; (8002148 <Create_Nodes+0xce0>)
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
	VALUE(N('T').distance,223,204,192,233);
 8001ef6:	4b94      	ldr	r3, [pc, #592]	; (8002148 <Create_Nodes+0xce0>)
 8001ef8:	22df      	movs	r2, #223	; 0xdf
 8001efa:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
 8001efe:	4b92      	ldr	r3, [pc, #584]	; (8002148 <Create_Nodes+0xce0>)
 8001f00:	22cc      	movs	r2, #204	; 0xcc
 8001f02:	f8a3 2276 	strh.w	r2, [r3, #630]	; 0x276
 8001f06:	4b90      	ldr	r3, [pc, #576]	; (8002148 <Create_Nodes+0xce0>)
 8001f08:	22c0      	movs	r2, #192	; 0xc0
 8001f0a:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
 8001f0e:	4b8e      	ldr	r3, [pc, #568]	; (8002148 <Create_Nodes+0xce0>)
 8001f10:	22e9      	movs	r2, #233	; 0xe9
 8001f12:	f8a3 227a 	strh.w	r2, [r3, #634]	; 0x27a
	N('T').middle=NEIGHBOUR2;
 8001f16:	4b8c      	ldr	r3, [pc, #560]	; (8002148 <Create_Nodes+0xce0>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c

	//U node
	N('U').worth=2;
 8001f1e:	4b8a      	ldr	r3, [pc, #552]	; (8002148 <Create_Nodes+0xce0>)
 8001f20:	2202      	movs	r2, #2
 8001f22:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	N('U').type=1;
 8001f26:	4b88      	ldr	r3, [pc, #544]	; (8002148 <Create_Nodes+0xce0>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	VALUE(N('U').neighbours,'T','R','X',0);
 8001f2e:	4b86      	ldr	r3, [pc, #536]	; (8002148 <Create_Nodes+0xce0>)
 8001f30:	2254      	movs	r2, #84	; 0x54
 8001f32:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
 8001f36:	4b84      	ldr	r3, [pc, #528]	; (8002148 <Create_Nodes+0xce0>)
 8001f38:	2252      	movs	r2, #82	; 0x52
 8001f3a:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
 8001f3e:	4b82      	ldr	r3, [pc, #520]	; (8002148 <Create_Nodes+0xce0>)
 8001f40:	2258      	movs	r2, #88	; 0x58
 8001f42:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
 8001f46:	4b80      	ldr	r3, [pc, #512]	; (8002148 <Create_Nodes+0xce0>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 228f 	strb.w	r2, [r3, #655]	; 0x28f
	VALUE(N('U').directions,1,1,2,0);
 8001f4e:	4b7e      	ldr	r3, [pc, #504]	; (8002148 <Create_Nodes+0xce0>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 8001f56:	4b7c      	ldr	r3, [pc, #496]	; (8002148 <Create_Nodes+0xce0>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 8001f5e:	4b7a      	ldr	r3, [pc, #488]	; (8002148 <Create_Nodes+0xce0>)
 8001f60:	2202      	movs	r2, #2
 8001f62:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 8001f66:	4b78      	ldr	r3, [pc, #480]	; (8002148 <Create_Nodes+0xce0>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
	VALUE(N('U').distance,192,366,371,0);
 8001f6e:	4b76      	ldr	r3, [pc, #472]	; (8002148 <Create_Nodes+0xce0>)
 8001f70:	22c0      	movs	r2, #192	; 0xc0
 8001f72:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
 8001f76:	4b74      	ldr	r3, [pc, #464]	; (8002148 <Create_Nodes+0xce0>)
 8001f78:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8001f7c:	f8a3 2296 	strh.w	r2, [r3, #662]	; 0x296
 8001f80:	4b71      	ldr	r3, [pc, #452]	; (8002148 <Create_Nodes+0xce0>)
 8001f82:	f240 1273 	movw	r2, #371	; 0x173
 8001f86:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
 8001f8a:	4b6f      	ldr	r3, [pc, #444]	; (8002148 <Create_Nodes+0xce0>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
	N('U').middle=NEIGHBOUR1;
 8001f92:	4b6d      	ldr	r3, [pc, #436]	; (8002148 <Create_Nodes+0xce0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

	//V node
	N('V').worth=2;
 8001f9a:	4b6b      	ldr	r3, [pc, #428]	; (8002148 <Create_Nodes+0xce0>)
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	N('V').type=1;
 8001fa2:	4b69      	ldr	r3, [pc, #420]	; (8002148 <Create_Nodes+0xce0>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	VALUE(N('V').neighbours,'S','T','W',0);
 8001faa:	4b67      	ldr	r3, [pc, #412]	; (8002148 <Create_Nodes+0xce0>)
 8001fac:	2253      	movs	r2, #83	; 0x53
 8001fae:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
 8001fb2:	4b65      	ldr	r3, [pc, #404]	; (8002148 <Create_Nodes+0xce0>)
 8001fb4:	2254      	movs	r2, #84	; 0x54
 8001fb6:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
 8001fba:	4b63      	ldr	r3, [pc, #396]	; (8002148 <Create_Nodes+0xce0>)
 8001fbc:	2257      	movs	r2, #87	; 0x57
 8001fbe:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
 8001fc2:	4b61      	ldr	r3, [pc, #388]	; (8002148 <Create_Nodes+0xce0>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 22af 	strb.w	r2, [r3, #687]	; 0x2af
	VALUE(N('V').directions,1,1,2,0);
 8001fca:	4b5f      	ldr	r3, [pc, #380]	; (8002148 <Create_Nodes+0xce0>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <Create_Nodes+0xce0>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
 8001fda:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <Create_Nodes+0xce0>)
 8001fdc:	2202      	movs	r2, #2
 8001fde:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
 8001fe2:	4b59      	ldr	r3, [pc, #356]	; (8002148 <Create_Nodes+0xce0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
	VALUE(N('V').distance,406,233,149,0);
 8001fea:	4b57      	ldr	r3, [pc, #348]	; (8002148 <Create_Nodes+0xce0>)
 8001fec:	f44f 72cb 	mov.w	r2, #406	; 0x196
 8001ff0:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
 8001ff4:	4b54      	ldr	r3, [pc, #336]	; (8002148 <Create_Nodes+0xce0>)
 8001ff6:	22e9      	movs	r2, #233	; 0xe9
 8001ff8:	f8a3 22b6 	strh.w	r2, [r3, #694]	; 0x2b6
 8001ffc:	4b52      	ldr	r3, [pc, #328]	; (8002148 <Create_Nodes+0xce0>)
 8001ffe:	2295      	movs	r2, #149	; 0x95
 8002000:	f8a3 22b8 	strh.w	r2, [r3, #696]	; 0x2b8
 8002004:	4b50      	ldr	r3, [pc, #320]	; (8002148 <Create_Nodes+0xce0>)
 8002006:	2200      	movs	r2, #0
 8002008:	f8a3 22ba 	strh.w	r2, [r3, #698]	; 0x2ba
	N('V').middle=NEIGHBOUR2;
 800200c:	4b4e      	ldr	r3, [pc, #312]	; (8002148 <Create_Nodes+0xce0>)
 800200e:	2201      	movs	r2, #1
 8002010:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

	//W node
	N('W').worth=0;
 8002014:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <Create_Nodes+0xce0>)
 8002016:	2200      	movs	r2, #0
 8002018:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
	N('W').type=3;
 800201c:	4b4a      	ldr	r3, [pc, #296]	; (8002148 <Create_Nodes+0xce0>)
 800201e:	2203      	movs	r2, #3
 8002020:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
	VALUE(N('W').neighbours,'V',0,'X',0);
 8002024:	4b48      	ldr	r3, [pc, #288]	; (8002148 <Create_Nodes+0xce0>)
 8002026:	2256      	movs	r2, #86	; 0x56
 8002028:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
 800202c:	4b46      	ldr	r3, [pc, #280]	; (8002148 <Create_Nodes+0xce0>)
 800202e:	2200      	movs	r2, #0
 8002030:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
 8002034:	4b44      	ldr	r3, [pc, #272]	; (8002148 <Create_Nodes+0xce0>)
 8002036:	2258      	movs	r2, #88	; 0x58
 8002038:	f883 22ce 	strb.w	r2, [r3, #718]	; 0x2ce
 800203c:	4b42      	ldr	r3, [pc, #264]	; (8002148 <Create_Nodes+0xce0>)
 800203e:	2200      	movs	r2, #0
 8002040:	f883 22cf 	strb.w	r2, [r3, #719]	; 0x2cf
	VALUE(N('W').directions,1,0,1,0);
 8002044:	4b40      	ldr	r3, [pc, #256]	; (8002148 <Create_Nodes+0xce0>)
 8002046:	2201      	movs	r2, #1
 8002048:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 800204c:	4b3e      	ldr	r3, [pc, #248]	; (8002148 <Create_Nodes+0xce0>)
 800204e:	2200      	movs	r2, #0
 8002050:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
 8002054:	4b3c      	ldr	r3, [pc, #240]	; (8002148 <Create_Nodes+0xce0>)
 8002056:	2201      	movs	r2, #1
 8002058:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
 800205c:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <Create_Nodes+0xce0>)
 800205e:	2200      	movs	r2, #0
 8002060:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
	VALUE(N('W').distance,149,0,189,0);
 8002064:	4b38      	ldr	r3, [pc, #224]	; (8002148 <Create_Nodes+0xce0>)
 8002066:	2295      	movs	r2, #149	; 0x95
 8002068:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
 800206c:	4b36      	ldr	r3, [pc, #216]	; (8002148 <Create_Nodes+0xce0>)
 800206e:	2200      	movs	r2, #0
 8002070:	f8a3 22d6 	strh.w	r2, [r3, #726]	; 0x2d6
 8002074:	4b34      	ldr	r3, [pc, #208]	; (8002148 <Create_Nodes+0xce0>)
 8002076:	22bd      	movs	r2, #189	; 0xbd
 8002078:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8
 800207c:	4b32      	ldr	r3, [pc, #200]	; (8002148 <Create_Nodes+0xce0>)
 800207e:	2200      	movs	r2, #0
 8002080:	f8a3 22da 	strh.w	r2, [r3, #730]	; 0x2da
	N('W').middle=NEIGHBOUR1;
 8002084:	4b30      	ldr	r3, [pc, #192]	; (8002148 <Create_Nodes+0xce0>)
 8002086:	2200      	movs	r2, #0
 8002088:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc

	//X node
	N('X').worth=2;
 800208c:	4b2e      	ldr	r3, [pc, #184]	; (8002148 <Create_Nodes+0xce0>)
 800208e:	2202      	movs	r2, #2
 8002090:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
	N('X').type=2;
 8002094:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <Create_Nodes+0xce0>)
 8002096:	2202      	movs	r2, #2
 8002098:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
	VALUE(N('X').neighbours,'U',0,0,'W');
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <Create_Nodes+0xce0>)
 800209e:	2255      	movs	r2, #85	; 0x55
 80020a0:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
 80020a4:	4b28      	ldr	r3, [pc, #160]	; (8002148 <Create_Nodes+0xce0>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 22ed 	strb.w	r2, [r3, #749]	; 0x2ed
 80020ac:	4b26      	ldr	r3, [pc, #152]	; (8002148 <Create_Nodes+0xce0>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 22ee 	strb.w	r2, [r3, #750]	; 0x2ee
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <Create_Nodes+0xce0>)
 80020b6:	2257      	movs	r2, #87	; 0x57
 80020b8:	f883 22ef 	strb.w	r2, [r3, #751]	; 0x2ef
	VALUE(N('X').directions,1,0,0,1);
 80020bc:	4b22      	ldr	r3, [pc, #136]	; (8002148 <Create_Nodes+0xce0>)
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
 80020c4:	4b20      	ldr	r3, [pc, #128]	; (8002148 <Create_Nodes+0xce0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
 80020cc:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <Create_Nodes+0xce0>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
 80020d4:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <Create_Nodes+0xce0>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 22f3 	strb.w	r2, [r3, #755]	; 0x2f3
	VALUE(N('X').distance,371,0,0,189);
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <Create_Nodes+0xce0>)
 80020de:	f240 1273 	movw	r2, #371	; 0x173
 80020e2:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <Create_Nodes+0xce0>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	f8a3 22f6 	strh.w	r2, [r3, #758]	; 0x2f6
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <Create_Nodes+0xce0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
 80020f6:	4b14      	ldr	r3, [pc, #80]	; (8002148 <Create_Nodes+0xce0>)
 80020f8:	22bd      	movs	r2, #189	; 0xbd
 80020fa:	f8a3 22fa 	strh.w	r2, [r3, #762]	; 0x2fa
	N('X').middle=NEIGHBOUR1;
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <Create_Nodes+0xce0>)
 8002100:	2200      	movs	r2, #0
 8002102:	f883 22fc 	strb.w	r2, [r3, #764]	; 0x2fc

	//Y node
	/**/N('Y').worth=0;
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <Create_Nodes+0xce0>)
 8002108:	2200      	movs	r2, #0
 800210a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	N('Y').type=1;
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <Create_Nodes+0xce0>)
 8002110:	2201      	movs	r2, #1
 8002112:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	VALUE(N('Y').neighbours,'W',0,0,0);
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <Create_Nodes+0xce0>)
 8002118:	2257      	movs	r2, #87	; 0x57
 800211a:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <Create_Nodes+0xce0>)
 8002120:	2200      	movs	r2, #0
 8002122:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <Create_Nodes+0xce0>)
 8002128:	2200      	movs	r2, #0
 800212a:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <Create_Nodes+0xce0>)
 8002130:	2200      	movs	r2, #0
 8002132:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
	VALUE(N('Y').directions,1,0,0,0);
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <Create_Nodes+0xce0>)
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
 800213e:	4b02      	ldr	r3, [pc, #8]	; (8002148 <Create_Nodes+0xce0>)
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
 8002146:	e001      	b.n	800214c <Create_Nodes+0xce4>
 8002148:	200002c0 	.word	0x200002c0
 800214c:	4b6b      	ldr	r3, [pc, #428]	; (80022fc <Create_Nodes+0xe94>)
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
 8002154:	4b69      	ldr	r3, [pc, #420]	; (80022fc <Create_Nodes+0xe94>)
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
	VALUE(N('Y').distance,351,0,0,0);
 800215c:	4b67      	ldr	r3, [pc, #412]	; (80022fc <Create_Nodes+0xe94>)
 800215e:	f240 125f 	movw	r2, #351	; 0x15f
 8002162:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
 8002166:	4b65      	ldr	r3, [pc, #404]	; (80022fc <Create_Nodes+0xe94>)
 8002168:	2200      	movs	r2, #0
 800216a:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316
 800216e:	4b63      	ldr	r3, [pc, #396]	; (80022fc <Create_Nodes+0xe94>)
 8002170:	2200      	movs	r2, #0
 8002172:	f8a3 2318 	strh.w	r2, [r3, #792]	; 0x318
 8002176:	4b61      	ldr	r3, [pc, #388]	; (80022fc <Create_Nodes+0xe94>)
 8002178:	2200      	movs	r2, #0
 800217a:	f8a3 231a 	strh.w	r2, [r3, #794]	; 0x31a
	N('Y').middle=NEIGHBOUR1;
 800217e:	4b5f      	ldr	r3, [pc, #380]	; (80022fc <Create_Nodes+0xe94>)
 8002180:	2200      	movs	r2, #0
 8002182:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

	//Nodeértékek backup mentésből való visszatöltése
	if(SW2)//ha a kacsapoló2 a megfelelő állapotban van (világít a sárga LED)
 8002186:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800218a:	485d      	ldr	r0, [pc, #372]	; (8002300 <Create_Nodes+0xe98>)
 800218c:	f005 fdc0 	bl	8007d10 <HAL_GPIO_ReadPin>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 8099 	beq.w	80022ca <Create_Nodes+0xe62>
	{
		uint32_t check_flash = *(__IO uint32_t *) FLASH_ADDRESS_NODEWORTH; //tényleg ottvanak  flashbena megfelelő helyen a worth értékek?
 8002198:	4b5a      	ldr	r3, [pc, #360]	; (8002304 <Create_Nodes+0xe9c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	66bb      	str	r3, [r7, #104]	; 0x68

		if(check_flash==0xffffffff)//nincs semmi a flashben
 800219e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d15d      	bne.n	8002262 <Create_Nodes+0xdfa>
		{
			char str[]="Default worths because of FLASH ERROR!\n\r";
 80021a6:	4b58      	ldr	r3, [pc, #352]	; (8002308 <Create_Nodes+0xea0>)
 80021a8:	f107 040c 	add.w	r4, r7, #12
 80021ac:	461d      	mov	r5, r3
 80021ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021ba:	c403      	stmia	r4!, {r0, r1}
 80021bc:	7022      	strb	r2, [r4, #0]
			HAL_UART_Transmit(huart_debugg,(uint8_t*) str, strlen(str), 10);
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe f824 	bl	8000210 <strlen>
 80021c8:	4603      	mov	r3, r0
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	f107 010c 	add.w	r1, r7, #12
 80021d0:	230a      	movs	r3, #10
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f008 fb07 	bl	800a7e6 <HAL_UART_Transmit>
			HAL_FLASH_Unlock();
 80021d8:	f005 fa4c 	bl	8007674 <HAL_FLASH_Unlock>
			HAL_Delay(50);
 80021dc:	2032      	movs	r0, #50	; 0x32
 80021de:	f003 ff15 	bl	800600c <HAL_Delay>
			FLASH_Erase_Sector(6, FLASH_VOLTAGE_RANGE_3);
 80021e2:	2102      	movs	r1, #2
 80021e4:	2006      	movs	r0, #6
 80021e6:	f005 fbb7 	bl	8007958 <FLASH_Erase_Sector>
			HAL_Delay(50);
 80021ea:	2032      	movs	r0, #50	; 0x32
 80021ec:	f003 ff0e 	bl	800600c <HAL_Delay>
			HAL_FLASH_Lock();
 80021f0:	f005 fa62 	bl	80076b8 <HAL_FLASH_Lock>
			HAL_Delay(50);
 80021f4:	2032      	movs	r0, #50	; 0x32
 80021f6:	f003 ff09 	bl	800600c <HAL_Delay>
			HAL_FLASH_Unlock();
 80021fa:	f005 fa3b 	bl	8007674 <HAL_FLASH_Unlock>
			HAL_Delay(50);
 80021fe:	2032      	movs	r0, #50	; 0x32
 8002200:	f003 ff04 	bl	800600c <HAL_Delay>
			for(i=0;i<25;i++)
 8002204:	2300      	movs	r3, #0
 8002206:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002208:	e016      	b.n	8002238 <Create_Nodes+0xdd0>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+i, Nodes[i].worth);
 800220a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002210:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002214:	4619      	mov	r1, r3
 8002216:	4a39      	ldr	r2, [pc, #228]	; (80022fc <Create_Nodes+0xe94>)
 8002218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800221a:	015b      	lsls	r3, r3, #5
 800221c:	4413      	add	r3, r2
 800221e:	3304      	adds	r3, #4
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	17da      	asrs	r2, r3, #31
 8002224:	469a      	mov	sl, r3
 8002226:	4693      	mov	fp, r2
 8002228:	4652      	mov	r2, sl
 800222a:	465b      	mov	r3, fp
 800222c:	2000      	movs	r0, #0
 800222e:	f005 f9cd 	bl	80075cc <HAL_FLASH_Program>
			for(i=0;i<25;i++)
 8002232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002234:	3301      	adds	r3, #1
 8002236:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800223a:	2b18      	cmp	r3, #24
 800223c:	dde5      	ble.n	800220a <Create_Nodes+0xda2>
			}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+25, collectedPoints);
 800223e:	4b33      	ldr	r3, [pc, #204]	; (800230c <Create_Nodes+0xea4>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2200      	movs	r2, #0
 8002246:	4698      	mov	r8, r3
 8002248:	4691      	mov	r9, r2
 800224a:	4642      	mov	r2, r8
 800224c:	464b      	mov	r3, r9
 800224e:	4930      	ldr	r1, [pc, #192]	; (8002310 <Create_Nodes+0xea8>)
 8002250:	2000      	movs	r0, #0
 8002252:	f005 f9bb 	bl	80075cc <HAL_FLASH_Program>
			HAL_Delay(50);
 8002256:	2032      	movs	r0, #50	; 0x32
 8002258:	f003 fed8 	bl	800600c <HAL_Delay>
			HAL_FLASH_Lock();
 800225c:	f005 fa2c 	bl	80076b8 <HAL_FLASH_Lock>
 8002260:	e048      	b.n	80022f4 <Create_Nodes+0xe8c>
			return; //ha nem akkor használjuk a default értékeket
		}
		for(i=0;i<25;i++)
 8002262:	2300      	movs	r3, #0
 8002264:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002266:	e010      	b.n	800228a <Create_Nodes+0xe22>
		{
			Nodes[i].worth=*(__IO uint8_t *) (FLASH_ADDRESS_NODEWORTH+i); //ha igen akkor töltsük be a backup mentést
 8002268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800226e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	4619      	mov	r1, r3
 8002278:	4a20      	ldr	r2, [pc, #128]	; (80022fc <Create_Nodes+0xe94>)
 800227a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800227c:	015b      	lsls	r3, r3, #5
 800227e:	4413      	add	r3, r2
 8002280:	3304      	adds	r3, #4
 8002282:	6019      	str	r1, [r3, #0]
		for(i=0;i<25;i++)
 8002284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002286:	3301      	adds	r3, #1
 8002288:	66fb      	str	r3, [r7, #108]	; 0x6c
 800228a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228c:	2b18      	cmp	r3, #24
 800228e:	ddeb      	ble.n	8002268 <Create_Nodes+0xe00>
		}
		collectedPoints=*(__IO uint8_t *) (FLASH_ADDRESS_NODEWORTH+25);
 8002290:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <Create_Nodes+0xea8>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <Create_Nodes+0xea4>)
 8002298:	701a      	strb	r2, [r3, #0]
		char str[]="Worths from FLASH backup!\n\r";
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <Create_Nodes+0xeac>)
 800229c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80022a0:	461d      	mov	r5, r3
 80022a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit(huart_debugg,(uint8_t*) str, strlen(str), 10);
 80022ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fd ffac 	bl	8000210 <strlen>
 80022b8:	4603      	mov	r3, r0
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80022c0:	230a      	movs	r3, #10
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f008 fa8f 	bl	800a7e6 <HAL_UART_Transmit>
 80022c8:	e014      	b.n	80022f4 <Create_Nodes+0xe8c>
	}
	else
	{
		char str[]="Default worths!\n\r";
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <Create_Nodes+0xeb0>)
 80022cc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80022d0:	461d      	mov	r5, r3
 80022d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d6:	682b      	ldr	r3, [r5, #0]
 80022d8:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(huart_debugg,(uint8_t*) str, strlen(str), 10);
 80022da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fd ff96 	bl	8000210 <strlen>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022ec:	230a      	movs	r3, #10
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f008 fa79 	bl	800a7e6 <HAL_UART_Transmit>
	}

}
 80022f4:	3770      	adds	r7, #112	; 0x70
 80022f6:	46bd      	mov	sp, r7
 80022f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022fc:	200002c0 	.word	0x200002c0
 8002300:	40020400 	.word	0x40020400
 8002304:	08040000 	.word	0x08040000
 8002308:	0800fcac 	.word	0x0800fcac
 800230c:	200002ab 	.word	0x200002ab
 8002310:	08040019 	.word	0x08040019
 8002314:	0800fcd8 	.word	0x0800fcd8
 8002318:	0800fcf4 	.word	0x0800fcf4

0800231c <Control_Task>:


void Control_Task(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_rand,uint32_t tick, uint32_t period)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	603b      	str	r3, [r7, #0]

	static uint32_t control_task_tick = 0;
	static uint8_t control_task_state=NEIGHBOUR1;//5 db állapot ->5.után megint 1.jön
	//szomszéd1,szomszéd2,szomszéd3,szomszéd4,kiértékelés

	uint8_t nID=0;
 800232a:	2300      	movs	r3, #0
 800232c:	76fb      	strb	r3, [r7, #27]

	if(control_task_tick>tick)return;
 800232e:	4b7c      	ldr	r3, [pc, #496]	; (8002520 <Control_Task+0x204>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	f0c0 82ef 	bcc.w	8002918 <Control_Task+0x5fc>
	control_task_tick=tick+period;
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a77      	ldr	r2, [pc, #476]	; (8002520 <Control_Task+0x204>)
 8002342:	6013      	str	r3, [r2, #0]
	if(mode!=SKILL)return;
 8002344:	4b77      	ldr	r3, [pc, #476]	; (8002524 <Control_Task+0x208>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b52      	cmp	r3, #82	; 0x52
 800234a:	f040 82e7 	bne.w	800291c <Control_Task+0x600>
	//if(!readytorace)return;

	//ha kapu nélküli nodeba tartunk éppen, akkor időzítéssel "detektáljuk" a nodot
	if(N(pos[MY]).type>2)
 800234e:	4b76      	ldr	r3, [pc, #472]	; (8002528 <Control_Task+0x20c>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	3b41      	subs	r3, #65	; 0x41
 8002354:	4a75      	ldr	r2, [pc, #468]	; (800252c <Control_Task+0x210>)
 8002356:	015b      	lsls	r3, r3, #5
 8002358:	4413      	add	r3, r2
 800235a:	3308      	adds	r3, #8
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d934      	bls.n	80023cc <Control_Task+0xb0>
	{
		s += (float)(tick-tick_prev)*abs((int)v)/10000;
 8002362:	4b73      	ldr	r3, [pc, #460]	; (8002530 <Control_Task+0x214>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002372:	4b70      	ldr	r3, [pc, #448]	; (8002534 <Control_Task+0x218>)
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237c:	ee17 3a90 	vmov	r3, s15
 8002380:	2b00      	cmp	r3, #0
 8002382:	bfb8      	it	lt
 8002384:	425b      	neglt	r3, r3
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800238e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002392:	eddf 6a69 	vldr	s13, [pc, #420]	; 8002538 <Control_Task+0x21c>
 8002396:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800239a:	4b68      	ldr	r3, [pc, #416]	; (800253c <Control_Task+0x220>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a4:	4b65      	ldr	r3, [pc, #404]	; (800253c <Control_Task+0x220>)
 80023a6:	edc3 7a00 	vstr	s15, [r3]
		if(s>sMAX)nodeDetected=1;
 80023aa:	4b65      	ldr	r3, [pc, #404]	; (8002540 <Control_Task+0x224>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023b6:	4b61      	ldr	r3, [pc, #388]	; (800253c <Control_Task+0x220>)
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c4:	d502      	bpl.n	80023cc <Control_Task+0xb0>
 80023c6:	4b5f      	ldr	r3, [pc, #380]	; (8002544 <Control_Task+0x228>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]

	}
	tick_prev=tick;//mostantól mérjük az időt
 80023cc:	4a58      	ldr	r2, [pc, #352]	; (8002530 <Control_Task+0x214>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6013      	str	r3, [r2, #0]

	//ha odaértünk a myPositionbe, akkor indulhat a mozgás a nextPosition felé
	if(nodeDetected)
 80023d2:	4b5c      	ldr	r3, [pc, #368]	; (8002544 <Control_Task+0x228>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d07f      	beq.n	80024da <Control_Task+0x1be>
	{
		LED_B_TOGGLE;
 80023da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023de:	485a      	ldr	r0, [pc, #360]	; (8002548 <Control_Task+0x22c>)
 80023e0:	f005 fcc7 	bl	8007d72 <HAL_GPIO_TogglePin>
		if(N(pos[NEXT]).type>2)//ha a kövi node-on nincs kapu
 80023e4:	4b50      	ldr	r3, [pc, #320]	; (8002528 <Control_Task+0x20c>)
 80023e6:	785b      	ldrb	r3, [r3, #1]
 80023e8:	3b41      	subs	r3, #65	; 0x41
 80023ea:	4a50      	ldr	r2, [pc, #320]	; (800252c <Control_Task+0x210>)
 80023ec:	015b      	lsls	r3, r3, #5
 80023ee:	4413      	add	r3, r2
 80023f0:	3308      	adds	r3, #8
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d914      	bls.n	8002422 <Control_Task+0x106>
		{
			s=0;
 80023f8:	4b50      	ldr	r3, [pc, #320]	; (800253c <Control_Task+0x220>)
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
			sMAX=N(pos[MY]).distance[bestNb[NEXT]]+25;
 8002400:	4b49      	ldr	r3, [pc, #292]	; (8002528 <Control_Task+0x20c>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	3b41      	subs	r3, #65	; 0x41
 8002406:	4a51      	ldr	r2, [pc, #324]	; (800254c <Control_Task+0x230>)
 8002408:	7852      	ldrb	r2, [r2, #1]
 800240a:	4611      	mov	r1, r2
 800240c:	4a47      	ldr	r2, [pc, #284]	; (800252c <Control_Task+0x210>)
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	440b      	add	r3, r1
 8002412:	3308      	adds	r3, #8
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	889b      	ldrh	r3, [r3, #4]
 800241a:	3319      	adds	r3, #25
 800241c:	461a      	mov	r2, r3
 800241e:	4b48      	ldr	r3, [pc, #288]	; (8002540 <Control_Task+0x224>)
 8002420:	601a      	str	r2, [r3, #0]
		}

		//pontok nyugtázása
		if(!laneChange)//ha nem sávváltó üzemmódban vagyunk pontotszámolunk és felszedett kapukat nullázzuk
 8002422:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <Control_Task+0x234>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d117      	bne.n	800245a <Control_Task+0x13e>
		{
			collectedPoints +=N(pos[MY]).worth;//sávváltás módik vizsgáljuk az össezgyűjtött kapuk számát
 800242a:	4b3f      	ldr	r3, [pc, #252]	; (8002528 <Control_Task+0x20c>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	3b41      	subs	r3, #65	; 0x41
 8002430:	4a3e      	ldr	r2, [pc, #248]	; (800252c <Control_Task+0x210>)
 8002432:	015b      	lsls	r3, r3, #5
 8002434:	4413      	add	r3, r2
 8002436:	3304      	adds	r3, #4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b45      	ldr	r3, [pc, #276]	; (8002554 <Control_Task+0x238>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4413      	add	r3, r2
 8002442:	b2da      	uxtb	r2, r3
 8002444:	4b43      	ldr	r3, [pc, #268]	; (8002554 <Control_Task+0x238>)
 8002446:	701a      	strb	r2, [r3, #0]
			N(pos[MY]).worth=0;//ez a kapu már nem ér pontot
 8002448:	4b37      	ldr	r3, [pc, #220]	; (8002528 <Control_Task+0x20c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	3b41      	subs	r3, #65	; 0x41
 800244e:	4a37      	ldr	r2, [pc, #220]	; (800252c <Control_Task+0x210>)
 8002450:	015b      	lsls	r3, r3, #5
 8002452:	4413      	add	r3, r2
 8002454:	3304      	adds	r3, #4
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
		}

		if(collectedPoints >= 22 && !laneChange) //átváltás lane change módba
 800245a:	4b3e      	ldr	r3, [pc, #248]	; (8002554 <Control_Task+0x238>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b15      	cmp	r3, #21
 8002460:	d90e      	bls.n	8002480 <Control_Task+0x164>
 8002462:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <Control_Task+0x234>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10a      	bne.n	8002480 <Control_Task+0x164>
		{
			laneChange=1; //flag állítás
 800246a:	4b39      	ldr	r3, [pc, #228]	; (8002550 <Control_Task+0x234>)
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
			Lane_Change_Init(); //a sávváltóhely felé nőnek a rewardok
 8002470:	f000 fc2e 	bl	8002cd0 <Lane_Change_Init>
			LED_Y(1); //sárga led világít
 8002474:	2200      	movs	r2, #0
 8002476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800247a:	4833      	ldr	r0, [pc, #204]	; (8002548 <Control_Task+0x22c>)
 800247c:	f005 fc60 	bl	8007d40 <HAL_GPIO_WritePin>
		}

		if(laneChange==1 && pos[MY]=='N' && pos[NEXT]=='Q')//ha a tett színhelyén vagyunk
 8002480:	4b33      	ldr	r3, [pc, #204]	; (8002550 <Control_Task+0x234>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d10a      	bne.n	800249e <Control_Task+0x182>
 8002488:	4b27      	ldr	r3, [pc, #156]	; (8002528 <Control_Task+0x20c>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b4e      	cmp	r3, #78	; 0x4e
 800248e:	d106      	bne.n	800249e <Control_Task+0x182>
 8002490:	4b25      	ldr	r3, [pc, #148]	; (8002528 <Control_Task+0x20c>)
 8002492:	785b      	ldrb	r3, [r3, #1]
 8002494:	2b51      	cmp	r3, #81	; 0x51
 8002496:	d102      	bne.n	800249e <Control_Task+0x182>
		{
			laneChange=2;
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <Control_Task+0x234>)
 800249a:	2202      	movs	r2, #2
 800249c:	701a      	strb	r2, [r3, #0]
		}

		static char str[50]; //kiiratás
		//sprintf(str,"d,d,%2d,%3.2f,%3.2f,%3.2f,%3.2f\n\r",(int)collectedPoints,fitness[0],fitness[1],fitness[2],fitness[3]);
		str[0]=pos[MY];
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <Control_Task+0x20c>)
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <Control_Task+0x23c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		str[2]=pos[NEXT];
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <Control_Task+0x20c>)
 80024a8:	785a      	ldrb	r2, [r3, #1]
 80024aa:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <Control_Task+0x23c>)
 80024ac:	709a      	strb	r2, [r3, #2]
		//HAL_UART_Transmit(huart_debugg, (uint8_t*)str, strlen(str), 4);

		pos[MY]=pos[NEXT];
 80024ae:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <Control_Task+0x20c>)
 80024b0:	785a      	ldrb	r2, [r3, #1]
 80024b2:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <Control_Task+0x20c>)
 80024b4:	701a      	strb	r2, [r3, #0]
		path=nextPath;
 80024b6:	4b29      	ldr	r3, [pc, #164]	; (800255c <Control_Task+0x240>)
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <Control_Task+0x244>)
 80024bc:	701a      	strb	r2, [r3, #0]
		dir[MY]=dir[NEXT];
 80024be:	4b29      	ldr	r3, [pc, #164]	; (8002564 <Control_Task+0x248>)
 80024c0:	785a      	ldrb	r2, [r3, #1]
 80024c2:	4b28      	ldr	r3, [pc, #160]	; (8002564 <Control_Task+0x248>)
 80024c4:	701a      	strb	r2, [r3, #0]
		orientation=nextOri;//FORWARD
 80024c6:	4b28      	ldr	r3, [pc, #160]	; (8002568 <Control_Task+0x24c>)
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <Control_Task+0x250>)
 80024cc:	701a      	strb	r2, [r3, #0]

		control_task_state=NEIGHBOUR1;
 80024ce:	4b28      	ldr	r3, [pc, #160]	; (8002570 <Control_Task+0x254>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
		nodeDetected=0;
 80024d4:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <Control_Task+0x228>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
	}

	if(thunderboardFlag)//ha új kalózpozíció jött a TB-től ujrakezdjük a számolást (első szomszéd vizsgálata jön)
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <Control_Task+0x258>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d06c      	beq.n	80025be <Control_Task+0x2a2>
	{
		if(piratePos_prev[1]!=piratePos[1] && !laneChange)//a kalóz átment egy Node-on
 80024e4:	4b24      	ldr	r3, [pc, #144]	; (8002578 <Control_Task+0x25c>)
 80024e6:	785a      	ldrb	r2, [r3, #1]
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <Control_Task+0x260>)
 80024ea:	785b      	ldrb	r3, [r3, #1]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d050      	beq.n	8002592 <Control_Task+0x276>
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <Control_Task+0x234>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d14c      	bne.n	8002592 <Control_Task+0x276>
		{
			if(N(piratePos[0]).worth==2)N(piratePos[0]).worth=1; //az a node már kevesebbet ér
 80024f8:	4b20      	ldr	r3, [pc, #128]	; (800257c <Control_Task+0x260>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	3b41      	subs	r3, #65	; 0x41
 80024fe:	4a0b      	ldr	r2, [pc, #44]	; (800252c <Control_Task+0x210>)
 8002500:	015b      	lsls	r3, r3, #5
 8002502:	4413      	add	r3, r2
 8002504:	3304      	adds	r3, #4
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d139      	bne.n	8002580 <Control_Task+0x264>
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <Control_Task+0x260>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	3b41      	subs	r3, #65	; 0x41
 8002512:	4a06      	ldr	r2, [pc, #24]	; (800252c <Control_Task+0x210>)
 8002514:	015b      	lsls	r3, r3, #5
 8002516:	4413      	add	r3, r2
 8002518:	3304      	adds	r3, #4
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	e038      	b.n	8002592 <Control_Task+0x276>
 8002520:	200005e0 	.word	0x200005e0
 8002524:	2000029e 	.word	0x2000029e
 8002528:	20000000 	.word	0x20000000
 800252c:	200002c0 	.word	0x200002c0
 8002530:	200005e4 	.word	0x200005e4
 8002534:	2000063c 	.word	0x2000063c
 8002538:	461c4000 	.word	0x461c4000
 800253c:	200005e8 	.word	0x200005e8
 8002540:	20000004 	.word	0x20000004
 8002544:	200002a9 	.word	0x200002a9
 8002548:	40020400 	.word	0x40020400
 800254c:	200005ec 	.word	0x200005ec
 8002550:	200002ac 	.word	0x200002ac
 8002554:	200002ab 	.word	0x200002ab
 8002558:	200005f0 	.word	0x200005f0
 800255c:	20000622 	.word	0x20000622
 8002560:	200002aa 	.word	0x200002aa
 8002564:	20000008 	.word	0x20000008
 8002568:	20000623 	.word	0x20000623
 800256c:	200002a8 	.word	0x200002a8
 8002570:	20000624 	.word	0x20000624
 8002574:	200002ad 	.word	0x200002ad
 8002578:	2000000c 	.word	0x2000000c
 800257c:	200002b8 	.word	0x200002b8
			else N(piratePos[0]).worth=0;
 8002580:	4b95      	ldr	r3, [pc, #596]	; (80027d8 <Control_Task+0x4bc>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	3b41      	subs	r3, #65	; 0x41
 8002586:	4a95      	ldr	r2, [pc, #596]	; (80027dc <Control_Task+0x4c0>)
 8002588:	015b      	lsls	r3, r3, #5
 800258a:	4413      	add	r3, r2
 800258c:	3304      	adds	r3, #4
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
		}
		control_task_state=NEIGHBOUR1;//kezdjük előrröl a fitneszérték számítást az 1. szomszédtól
 8002592:	4b93      	ldr	r3, [pc, #588]	; (80027e0 <Control_Task+0x4c4>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]

		piratePos_prev[0]=piratePos[0];//előző kalozpozíció frissítése
 8002598:	4b8f      	ldr	r3, [pc, #572]	; (80027d8 <Control_Task+0x4bc>)
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	4b91      	ldr	r3, [pc, #580]	; (80027e4 <Control_Task+0x4c8>)
 800259e:	701a      	strb	r2, [r3, #0]
		piratePos_prev[1]=piratePos[1];
 80025a0:	4b8d      	ldr	r3, [pc, #564]	; (80027d8 <Control_Task+0x4bc>)
 80025a2:	785a      	ldrb	r2, [r3, #1]
 80025a4:	4b8f      	ldr	r3, [pc, #572]	; (80027e4 <Control_Task+0x4c8>)
 80025a6:	705a      	strb	r2, [r3, #1]
		piratePos_prev[2]=piratePos[2];
 80025a8:	4b8b      	ldr	r3, [pc, #556]	; (80027d8 <Control_Task+0x4bc>)
 80025aa:	789a      	ldrb	r2, [r3, #2]
 80025ac:	4b8d      	ldr	r3, [pc, #564]	; (80027e4 <Control_Task+0x4c8>)
 80025ae:	709a      	strb	r2, [r3, #2]
		piratePos_prev[3]=piratePos[3];
 80025b0:	4b89      	ldr	r3, [pc, #548]	; (80027d8 <Control_Task+0x4bc>)
 80025b2:	78da      	ldrb	r2, [r3, #3]
 80025b4:	4b8b      	ldr	r3, [pc, #556]	; (80027e4 <Control_Task+0x4c8>)
 80025b6:	70da      	strb	r2, [r3, #3]

		thunderboardFlag=0; //várjuk az újabb kalózrobot pozíciókat a thunderboardtól
 80025b8:	4b8b      	ldr	r3, [pc, #556]	; (80027e8 <Control_Task+0x4cc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
	str[15]=control_task_state+0x30;
	HAL_UART_Transmit(huart_debugg, (uint8_t*)str, strlen(str), 2);
#endif

	/******************LEGJOBB SZOMSZÉD KIVÁLASZTÁSA (első 4 állapot)******************/
	if(control_task_state <EVALUATE)//1.szomszéd/2.szomszéd/3.szomszéd/4.szomszéd
 80025be:	4b88      	ldr	r3, [pc, #544]	; (80027e0 <Control_Task+0x4c4>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	f200 8122 	bhi.w	800280c <Control_Task+0x4f0>
	{
		if(control_task_state==NEIGHBOUR1)
 80025c8:	4b85      	ldr	r3, [pc, #532]	; (80027e0 <Control_Task+0x4c4>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <Control_Task+0x2ba>
		{
			bestFitness=-100;//az előző számolás legjob fitneszértéke volt még benne
 80025d0:	4b86      	ldr	r3, [pc, #536]	; (80027ec <Control_Task+0x4d0>)
 80025d2:	4a87      	ldr	r2, [pc, #540]	; (80027f0 <Control_Task+0x4d4>)
 80025d4:	601a      	str	r2, [r3, #0]
		}
		nID=N(pos[MY]).neighbours[control_task_state]; //a vizsgált 1.rendű szomszéd azonosítója
 80025d6:	4b87      	ldr	r3, [pc, #540]	; (80027f4 <Control_Task+0x4d8>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	3b41      	subs	r3, #65	; 0x41
 80025dc:	4a80      	ldr	r2, [pc, #512]	; (80027e0 <Control_Task+0x4c4>)
 80025de:	7812      	ldrb	r2, [r2, #0]
 80025e0:	4611      	mov	r1, r2
 80025e2:	4a7e      	ldr	r2, [pc, #504]	; (80027dc <Control_Task+0x4c0>)
 80025e4:	015b      	lsls	r3, r3, #5
 80025e6:	4413      	add	r3, r2
 80025e8:	440b      	add	r3, r1
 80025ea:	330c      	adds	r3, #12
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	76fb      	strb	r3, [r7, #27]
		if(nID) //ha létezik a szomszéd
 80025f0:	7efb      	ldrb	r3, [r7, #27]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8087 	beq.w	8002706 <Control_Task+0x3ea>
		{
			fitness[control_task_state]=(float)N(nID).worth; //fitneszérték 1.rendű szomszéd alapján
 80025f8:	7efb      	ldrb	r3, [r7, #27]
 80025fa:	3b41      	subs	r3, #65	; 0x41
 80025fc:	4a77      	ldr	r2, [pc, #476]	; (80027dc <Control_Task+0x4c0>)
 80025fe:	015b      	lsls	r3, r3, #5
 8002600:	4413      	add	r3, r2
 8002602:	3304      	adds	r3, #4
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <Control_Task+0x4c4>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	ee07 2a90 	vmov	s15, r2
 800260e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002612:	4a79      	ldr	r2, [pc, #484]	; (80027f8 <Control_Task+0x4dc>)
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	edc3 7a00 	vstr	s15, [r3]
			//kalozrobot hatása az 1.rendű szomszéd esetén
			if(piratePos[1]==nID) fitness[control_task_state] -= 80/*P*/;//ha a kalóz is ebbe az 1.rendű tart éppen akkor kerüljük el az ütközést
 800261c:	4b6e      	ldr	r3, [pc, #440]	; (80027d8 <Control_Task+0x4bc>)
 800261e:	785b      	ldrb	r3, [r3, #1]
 8002620:	7efa      	ldrb	r2, [r7, #27]
 8002622:	429a      	cmp	r2, r3
 8002624:	d112      	bne.n	800264c <Control_Task+0x330>
 8002626:	4b6e      	ldr	r3, [pc, #440]	; (80027e0 <Control_Task+0x4c4>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	4a73      	ldr	r2, [pc, #460]	; (80027f8 <Control_Task+0x4dc>)
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	edd3 7a00 	vldr	s15, [r3]
 8002634:	4b6a      	ldr	r3, [pc, #424]	; (80027e0 <Control_Task+0x4c4>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80027fc <Control_Task+0x4e0>
 800263c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002640:	4a6d      	ldr	r2, [pc, #436]	; (80027f8 <Control_Task+0x4dc>)
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	edc3 7a00 	vstr	s15, [r3]
 800264a:	e016      	b.n	800267a <Control_Task+0x35e>
			else if(piratePos[2]==nID) fitness[control_task_state] -= 60/*P*/;//ha még csak tervezi, hogy odamegy, akkor is kerüljük a pontot
 800264c:	4b62      	ldr	r3, [pc, #392]	; (80027d8 <Control_Task+0x4bc>)
 800264e:	789b      	ldrb	r3, [r3, #2]
 8002650:	7efa      	ldrb	r2, [r7, #27]
 8002652:	429a      	cmp	r2, r3
 8002654:	d111      	bne.n	800267a <Control_Task+0x35e>
 8002656:	4b62      	ldr	r3, [pc, #392]	; (80027e0 <Control_Task+0x4c4>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	4a67      	ldr	r2, [pc, #412]	; (80027f8 <Control_Task+0x4dc>)
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	edd3 7a00 	vldr	s15, [r3]
 8002664:	4b5e      	ldr	r3, [pc, #376]	; (80027e0 <Control_Task+0x4c4>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002800 <Control_Task+0x4e4>
 800266c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002670:	4a61      	ldr	r2, [pc, #388]	; (80027f8 <Control_Task+0x4dc>)
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	edc3 7a00 	vstr	s15, [r3]
			int i;
			uint8_t nnID;
			float nnFit;
			for(i=0;i<4;i++)//2.rednű szomszédok
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	e03e      	b.n	80026fe <Control_Task+0x3e2>
			{
				nnFit=0.0;
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
				nnID=N(nID).neighbours[i]; //2.rednű szomszéd ID-ja
 8002686:	7efb      	ldrb	r3, [r7, #27]
 8002688:	3b41      	subs	r3, #65	; 0x41
 800268a:	4a54      	ldr	r2, [pc, #336]	; (80027dc <Control_Task+0x4c0>)
 800268c:	015b      	lsls	r3, r3, #5
 800268e:	441a      	add	r2, r3
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4413      	add	r3, r2
 8002694:	330c      	adds	r3, #12
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	74fb      	strb	r3, [r7, #19]
				if(nnID && nnID!=pos[MY])//ha létezik a 2.rendű szomszéd (és nem a myposition az)
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d02b      	beq.n	80026f8 <Control_Task+0x3dc>
 80026a0:	4b54      	ldr	r3, [pc, #336]	; (80027f4 <Control_Task+0x4d8>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	7cfa      	ldrb	r2, [r7, #19]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d026      	beq.n	80026f8 <Control_Task+0x3dc>
				{
					nnFit += (float)N(nnID).worth;
 80026aa:	7cfb      	ldrb	r3, [r7, #19]
 80026ac:	3b41      	subs	r3, #65	; 0x41
 80026ae:	4a4b      	ldr	r2, [pc, #300]	; (80027dc <Control_Task+0x4c0>)
 80026b0:	015b      	lsls	r3, r3, #5
 80026b2:	4413      	add	r3, r2
 80026b4:	3304      	adds	r3, #4
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80026c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c8:	edc7 7a05 	vstr	s15, [r7, #20]
					//if(piratePos[1]==nnID) nnFit -= 0.5/*P*/;//ha a kalóz is ebbe a pontba tart éppen akkor kerüljük el az ütközést
					//else if(piratePos[2]==nnID) fitness[control_task_state] -= 0.25/*P*/;//ha még csak tervezi, hogy odamegy, akkor se fogjuk tudni megelőnzi, mert mi 3 nodnyira vagyunk ő pedig csak 2
					//if(!lane_change)nnFit = nnFit * (float)DIST_AVG/N(nID).distance[i];//a 2.rendű szomszédhoz tartozó fitneszérték jobb ha az közelebb van az 1.rendű szomszédjához
					//ha a sávváltó szakaszt keressük akkor viszont nem díjazzuk a közelséget
					fitness[control_task_state] += nnFit/4/*P*/;
 80026cc:	4b44      	ldr	r3, [pc, #272]	; (80027e0 <Control_Task+0x4c4>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	4a49      	ldr	r2, [pc, #292]	; (80027f8 <Control_Task+0x4dc>)
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	ed93 7a00 	vldr	s14, [r3]
 80026da:	edd7 6a05 	vldr	s13, [r7, #20]
 80026de:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 80026e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80026e6:	4b3e      	ldr	r3, [pc, #248]	; (80027e0 <Control_Task+0x4c4>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ee:	4a42      	ldr	r2, [pc, #264]	; (80027f8 <Control_Task+0x4dc>)
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	edc3 7a00 	vstr	s15, [r3]
			for(i=0;i<4;i++)//2.rednű szomszédok
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	3301      	adds	r3, #1
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	2b03      	cmp	r3, #3
 8002702:	ddbd      	ble.n	8002680 <Control_Task+0x364>
 8002704:	e006      	b.n	8002714 <Control_Task+0x3f8>
			}
			//if(!lane_change) fitness[control_task_state] =fitness[control_task_state] * (float)DIST_AVG/N(pos[MY]).distance[control_task_state]; //minél közelebb van a szomszéd annál jobb
			//ha a sávváltó szakaszt keressük akkor viszont nem díjazzuk a közelséget

		}
		else fitness[control_task_state]=-150.0;//ha nem létezik a szomszéd erre tuti ne menjünk
 8002706:	4b36      	ldr	r3, [pc, #216]	; (80027e0 <Control_Task+0x4c4>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	4a3b      	ldr	r2, [pc, #236]	; (80027f8 <Control_Task+0x4dc>)
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	4a3c      	ldr	r2, [pc, #240]	; (8002804 <Control_Task+0x4e8>)
 8002712:	601a      	str	r2, [r3, #0]
		uint16_t tmp= __HAL_TIM_GET_COUNTER(htim_rand)%2;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	b29b      	uxth	r3, r3
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	823b      	strh	r3, [r7, #16]
		if((fitness[control_task_state]==bestFitness && tmp==1) || fitness[control_task_state]>bestFitness) //ha ez a fitness jobb mint az eddigi legjobb, akkor mostantól ez a legjobb
 8002722:	4b2f      	ldr	r3, [pc, #188]	; (80027e0 <Control_Task+0x4c4>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	4a34      	ldr	r2, [pc, #208]	; (80027f8 <Control_Task+0x4dc>)
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	ed93 7a00 	vldr	s14, [r3]
 8002730:	4b2e      	ldr	r3, [pc, #184]	; (80027ec <Control_Task+0x4d0>)
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	eeb4 7a67 	vcmp.f32	s14, s15
 800273a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273e:	d102      	bne.n	8002746 <Control_Task+0x42a>
 8002740:	8a3b      	ldrh	r3, [r7, #16]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d00e      	beq.n	8002764 <Control_Task+0x448>
 8002746:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <Control_Task+0x4c4>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	4a2b      	ldr	r2, [pc, #172]	; (80027f8 <Control_Task+0x4dc>)
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	ed93 7a00 	vldr	s14, [r3]
 8002754:	4b25      	ldr	r3, [pc, #148]	; (80027ec <Control_Task+0x4d0>)
 8002756:	edd3 7a00 	vldr	s15, [r3]
 800275a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002762:	dd0b      	ble.n	800277c <Control_Task+0x460>
		{
			bestFitness=fitness[control_task_state];
 8002764:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <Control_Task+0x4c4>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4a23      	ldr	r2, [pc, #140]	; (80027f8 <Control_Task+0x4dc>)
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <Control_Task+0x4d0>)
 8002772:	6013      	str	r3, [r2, #0]
			bestNb[TMP] = control_task_state;//ez az egy érték amivel a task első 4 (fitnesszámoló) álapota kommunikál a kiértékelő álapottal
 8002774:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <Control_Task+0x4c4>)
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <Control_Task+0x4ec>)
 800277a:	701a      	strb	r2, [r3, #0]
		}
		if(control_task_state>=NEIGHBOUR4 && bestNb[TMP]==0 && N(pos[MY]).neighbours[N(pos[MY]).middle]==0)
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <Control_Task+0x4c4>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d921      	bls.n	80027c8 <Control_Task+0x4ac>
 8002784:	4b20      	ldr	r3, [pc, #128]	; (8002808 <Control_Task+0x4ec>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d11d      	bne.n	80027c8 <Control_Task+0x4ac>
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <Control_Task+0x4d8>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	3b41      	subs	r3, #65	; 0x41
 8002792:	4a18      	ldr	r2, [pc, #96]	; (80027f4 <Control_Task+0x4d8>)
 8002794:	7812      	ldrb	r2, [r2, #0]
 8002796:	3a41      	subs	r2, #65	; 0x41
 8002798:	4910      	ldr	r1, [pc, #64]	; (80027dc <Control_Task+0x4c0>)
 800279a:	0152      	lsls	r2, r2, #5
 800279c:	440a      	add	r2, r1
 800279e:	321c      	adds	r2, #28
 80027a0:	7812      	ldrb	r2, [r2, #0]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <Control_Task+0x4c0>)
 80027a6:	015b      	lsls	r3, r3, #5
 80027a8:	4413      	add	r3, r2
 80027aa:	440b      	add	r3, r1
 80027ac:	330c      	adds	r3, #12
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <Control_Task+0x4ac>
		{
			bestNb[TMP]=N(pos[MY]).middle;
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <Control_Task+0x4d8>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	3b41      	subs	r3, #65	; 0x41
 80027ba:	4a08      	ldr	r2, [pc, #32]	; (80027dc <Control_Task+0x4c0>)
 80027bc:	015b      	lsls	r3, r3, #5
 80027be:	4413      	add	r3, r2
 80027c0:	331c      	adds	r3, #28
 80027c2:	781a      	ldrb	r2, [r3, #0]
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <Control_Task+0x4ec>)
 80027c6:	701a      	strb	r2, [r3, #0]
		}
		control_task_state++;
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <Control_Task+0x4c4>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	3301      	adds	r3, #1
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <Control_Task+0x4c4>)
 80027d2:	701a      	strb	r2, [r3, #0]
		return; //ha csak valamelyik szomszédot vizsgáltuk még akkor eddig tartott ez a task fuitás, itt kilépünk
 80027d4:	e0a3      	b.n	800291e <Control_Task+0x602>
 80027d6:	bf00      	nop
 80027d8:	200002b8 	.word	0x200002b8
 80027dc:	200002c0 	.word	0x200002c0
 80027e0:	20000624 	.word	0x20000624
 80027e4:	2000000c 	.word	0x2000000c
 80027e8:	200002ad 	.word	0x200002ad
 80027ec:	20000010 	.word	0x20000010
 80027f0:	c2c80000 	.word	0xc2c80000
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000628 	.word	0x20000628
 80027fc:	42a00000 	.word	0x42a00000
 8002800:	42700000 	.word	0x42700000
 8002804:	c3160000 	.word	0xc3160000
 8002808:	200005ec 	.word	0x200005ec
	}
	/**************************************************************************************/
	//ide csak akkor jutunk el ha control_task_state>NEIGHBOUR4

	/**********************KIÉRTÉKELÉS (control_task_state=EVALUATE ->5.állapot)**********************/
	bestNb[NEXT]=bestNb[TMP];
 800280c:	4b45      	ldr	r3, [pc, #276]	; (8002924 <Control_Task+0x608>)
 800280e:	781a      	ldrb	r2, [r3, #0]
 8002810:	4b44      	ldr	r3, [pc, #272]	; (8002924 <Control_Task+0x608>)
 8002812:	705a      	strb	r2, [r3, #1]
	pos[NEXT]=N(pos[MY]).neighbours[bestNb[NEXT]];//a következő poziciónk a legjobb szomszéd lesz
 8002814:	4b44      	ldr	r3, [pc, #272]	; (8002928 <Control_Task+0x60c>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	3b41      	subs	r3, #65	; 0x41
 800281a:	4a42      	ldr	r2, [pc, #264]	; (8002924 <Control_Task+0x608>)
 800281c:	7852      	ldrb	r2, [r2, #1]
 800281e:	4611      	mov	r1, r2
 8002820:	4a42      	ldr	r2, [pc, #264]	; (800292c <Control_Task+0x610>)
 8002822:	015b      	lsls	r3, r3, #5
 8002824:	4413      	add	r3, r2
 8002826:	440b      	add	r3, r1
 8002828:	330c      	adds	r3, #12
 800282a:	781a      	ldrb	r2, [r3, #0]
 800282c:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <Control_Task+0x60c>)
 800282e:	705a      	strb	r2, [r3, #1]
	dir[NEXT]=N(pos[MY]).directions[bestNb[NEXT]];//már most tudjuk, mi lesz az irányunk, ha odaértünk
 8002830:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <Control_Task+0x60c>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	3b41      	subs	r3, #65	; 0x41
 8002836:	4a3b      	ldr	r2, [pc, #236]	; (8002924 <Control_Task+0x608>)
 8002838:	7852      	ldrb	r2, [r2, #1]
 800283a:	4611      	mov	r1, r2
 800283c:	4a3b      	ldr	r2, [pc, #236]	; (800292c <Control_Task+0x610>)
 800283e:	015b      	lsls	r3, r3, #5
 8002840:	4413      	add	r3, r2
 8002842:	440b      	add	r3, r1
 8002844:	3310      	adds	r3, #16
 8002846:	781a      	ldrb	r2, [r3, #0]
 8002848:	4b39      	ldr	r3, [pc, #228]	; (8002930 <Control_Task+0x614>)
 800284a:	705a      	strb	r2, [r3, #1]

	//a kocsi az egyik node-ból átmegy egy másikba-> az irányok segítségével meghatározzu az új orientationt
	if(bestNb[NEXT] <= NEIGHBOUR2) //ha balra/le kell majd mennünk a nextPosition -höz
 800284c:	4b35      	ldr	r3, [pc, #212]	; (8002924 <Control_Task+0x608>)
 800284e:	785b      	ldrb	r3, [r3, #1]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d813      	bhi.n	800287c <Control_Task+0x560>
	{
		if(dir[MY]==2)//és eddig jobbra/fel mentünk,
 8002854:	4b36      	ldr	r3, [pc, #216]	; (8002930 <Control_Task+0x614>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d10a      	bne.n	8002872 <Control_Task+0x556>
			nextOri = !orientation;//akkor most orientációt kell váltanunk
 800285c:	4b35      	ldr	r3, [pc, #212]	; (8002934 <Control_Task+0x618>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	4b32      	ldr	r3, [pc, #200]	; (8002938 <Control_Task+0x61c>)
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e017      	b.n	80028a2 <Control_Task+0x586>
		else nextOri = orientation; //különben nem kell
 8002872:	4b30      	ldr	r3, [pc, #192]	; (8002934 <Control_Task+0x618>)
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	4b30      	ldr	r3, [pc, #192]	; (8002938 <Control_Task+0x61c>)
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	e012      	b.n	80028a2 <Control_Task+0x586>
	}
	else //ha jobbra kell majd mennünk
	{
		if(dir[MY]==1)//és eddig jobbra/fel mentünk,
 800287c:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <Control_Task+0x614>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d10a      	bne.n	800289a <Control_Task+0x57e>
			nextOri =! orientation;//akkor most irányt kell váltanunk
 8002884:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <Control_Task+0x618>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	4b28      	ldr	r3, [pc, #160]	; (8002938 <Control_Task+0x61c>)
 8002896:	701a      	strb	r2, [r3, #0]
 8002898:	e003      	b.n	80028a2 <Control_Task+0x586>
		else nextOri = orientation; //különben nem kell
 800289a:	4b26      	ldr	r3, [pc, #152]	; (8002934 <Control_Task+0x618>)
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <Control_Task+0x61c>)
 80028a0:	701a      	strb	r2, [r3, #0]
	}

	//path kiválasztás -> az orientációt mostmár tudjuk (tolatás/előre), már csak az ösvény kell kivákasztani, hogy a megfelelő szomszédhoz jussunk
	if(nextOri==FORWARD)
 80028a2:	4b25      	ldr	r3, [pc, #148]	; (8002938 <Control_Task+0x61c>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d117      	bne.n	80028da <Control_Task+0x5be>
	{
		if(bestNb[NEXT]==NEIGHBOUR1 || bestNb[NEXT]==NEIGHBOUR3)nextPath=LEFT;
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <Control_Task+0x608>)
 80028ac:	785b      	ldrb	r3, [r3, #1]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <Control_Task+0x59e>
 80028b2:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <Control_Task+0x608>)
 80028b4:	785b      	ldrb	r3, [r3, #1]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d103      	bne.n	80028c2 <Control_Task+0x5a6>
 80028ba:	4b20      	ldr	r3, [pc, #128]	; (800293c <Control_Task+0x620>)
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	e026      	b.n	8002910 <Control_Task+0x5f4>
		else if(bestNb[NEXT]==NEIGHBOUR2 || bestNb[NEXT]==NEIGHBOUR4)nextPath=RIGHT;
 80028c2:	4b18      	ldr	r3, [pc, #96]	; (8002924 <Control_Task+0x608>)
 80028c4:	785b      	ldrb	r3, [r3, #1]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d003      	beq.n	80028d2 <Control_Task+0x5b6>
 80028ca:	4b16      	ldr	r3, [pc, #88]	; (8002924 <Control_Task+0x608>)
 80028cc:	785b      	ldrb	r3, [r3, #1]
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d11e      	bne.n	8002910 <Control_Task+0x5f4>
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <Control_Task+0x620>)
 80028d4:	2202      	movs	r2, #2
 80028d6:	701a      	strb	r2, [r3, #0]
 80028d8:	e01a      	b.n	8002910 <Control_Task+0x5f4>
	}
	else if(nextOri==REVERSE) //tolatásnál pont forditva vannak a pathirányok
 80028da:	4b17      	ldr	r3, [pc, #92]	; (8002938 <Control_Task+0x61c>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d116      	bne.n	8002910 <Control_Task+0x5f4>
	{
		if(bestNb[NEXT]==NEIGHBOUR1 || bestNb[NEXT]==NEIGHBOUR3)nextPath=RIGHT;
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <Control_Task+0x608>)
 80028e4:	785b      	ldrb	r3, [r3, #1]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <Control_Task+0x5d6>
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <Control_Task+0x608>)
 80028ec:	785b      	ldrb	r3, [r3, #1]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d103      	bne.n	80028fa <Control_Task+0x5de>
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <Control_Task+0x620>)
 80028f4:	2202      	movs	r2, #2
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	e00a      	b.n	8002910 <Control_Task+0x5f4>
		else if(bestNb[NEXT]==NEIGHBOUR2 || bestNb[NEXT]==NEIGHBOUR4)nextPath=LEFT;
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <Control_Task+0x608>)
 80028fc:	785b      	ldrb	r3, [r3, #1]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d003      	beq.n	800290a <Control_Task+0x5ee>
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <Control_Task+0x608>)
 8002904:	785b      	ldrb	r3, [r3, #1]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d102      	bne.n	8002910 <Control_Task+0x5f4>
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <Control_Task+0x620>)
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
	}
	control_task_state=NEIGHBOUR1;
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <Control_Task+0x624>)
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
	//HAL_UART_Transmit(huart_debugg, (uint8_t*)"##\r\n", 4, 2);
	/**************************************************************************************/
	return;
 8002916:	e002      	b.n	800291e <Control_Task+0x602>
	if(control_task_tick>tick)return;
 8002918:	bf00      	nop
 800291a:	e000      	b.n	800291e <Control_Task+0x602>
	if(mode!=SKILL)return;
 800291c:	bf00      	nop
}
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200005ec 	.word	0x200005ec
 8002928:	20000000 	.word	0x20000000
 800292c:	200002c0 	.word	0x200002c0
 8002930:	20000008 	.word	0x20000008
 8002934:	200002a8 	.word	0x200002a8
 8002938:	20000623 	.word	0x20000623
 800293c:	20000622 	.word	0x20000622
 8002940:	20000624 	.word	0x20000624

08002944 <Mode_Selector>:


void Mode_Selector(UART_HandleTypeDef *huart_debugg, UART_HandleTypeDef *huart_stm)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08e      	sub	sp, #56	; 0x38
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
	//Milyen módban kell működni?
	uint8_t buffer[40];
	uint8_t tmp=*(__IO uint8_t *) FLASH_ADDRESS_MODESELECTOR; //FLASH-ből kiolvassuk, hogy milyen módban vagyunk
 800294e:	4b5f      	ldr	r3, [pc, #380]	; (8002acc <Mode_Selector+0x188>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if(tmp==SKILL || tmp==FAST) mode = tmp;
 8002956:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800295a:	2b52      	cmp	r3, #82	; 0x52
 800295c:	d003      	beq.n	8002966 <Mode_Selector+0x22>
 800295e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002962:	2b3f      	cmp	r3, #63	; 0x3f
 8002964:	d104      	bne.n	8002970 <Mode_Selector+0x2c>
 8002966:	4a5a      	ldr	r2, [pc, #360]	; (8002ad0 <Mode_Selector+0x18c>)
 8002968:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800296c:	7013      	strb	r3, [r2, #0]
 800296e:	e022      	b.n	80029b6 <Mode_Selector+0x72>
	else
	{
		HAL_FLASH_Unlock();
 8002970:	f004 fe80 	bl	8007674 <HAL_FLASH_Unlock>
		HAL_Delay(50);
 8002974:	2032      	movs	r0, #50	; 0x32
 8002976:	f003 fb49 	bl	800600c <HAL_Delay>
		FLASH_Erase_Sector(7, FLASH_VOLTAGE_RANGE_3);
 800297a:	2102      	movs	r1, #2
 800297c:	2007      	movs	r0, #7
 800297e:	f004 ffeb 	bl	8007958 <FLASH_Erase_Sector>
		HAL_Delay(50);
 8002982:	2032      	movs	r0, #50	; 0x32
 8002984:	f003 fb42 	bl	800600c <HAL_Delay>
		HAL_FLASH_Lock();
 8002988:	f004 fe96 	bl	80076b8 <HAL_FLASH_Lock>
		HAL_FLASH_Unlock();
 800298c:	f004 fe72 	bl	8007674 <HAL_FLASH_Unlock>
		HAL_Delay(50);
 8002990:	2032      	movs	r0, #50	; 0x32
 8002992:	f003 fb3b 	bl	800600c <HAL_Delay>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, SKILL); //ha eddig skill mód volt akor msot gyors lesz
 8002996:	f04f 0252 	mov.w	r2, #82	; 0x52
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	494b      	ldr	r1, [pc, #300]	; (8002acc <Mode_Selector+0x188>)
 80029a0:	2000      	movs	r0, #0
 80029a2:	f004 fe13 	bl	80075cc <HAL_FLASH_Program>
		HAL_Delay(50);
 80029a6:	2032      	movs	r0, #50	; 0x32
 80029a8:	f003 fb30 	bl	800600c <HAL_Delay>
		HAL_FLASH_Lock();
 80029ac:	f004 fe84 	bl	80076b8 <HAL_FLASH_Lock>

		mode=SKILL;
 80029b0:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <Mode_Selector+0x18c>)
 80029b2:	2252      	movs	r2, #82	; 0x52
 80029b4:	701a      	strb	r2, [r3, #0]
	}

	if(mode==SKILL)
 80029b6:	4b46      	ldr	r3, [pc, #280]	; (8002ad0 <Mode_Selector+0x18c>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b52      	cmp	r3, #82	; 0x52
 80029bc:	d135      	bne.n	8002a2a <Mode_Selector+0xe6>
	{
		buffer[0] = CMD_MODE_SKILL; //szólunk a g0-nak, hogy ügyességi módban vagyunk
 80029be:	2352      	movs	r3, #82	; 0x52
 80029c0:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80029c2:	f107 010c 	add.w	r1, r7, #12
 80029c6:	230a      	movs	r3, #10
 80029c8:	2201      	movs	r2, #1
 80029ca:	6838      	ldr	r0, [r7, #0]
 80029cc:	f007 ff0b 	bl	800a7e6 <HAL_UART_Transmit>
		HAL_Delay(10);
 80029d0:	200a      	movs	r0, #10
 80029d2:	f003 fb1b 	bl	800600c <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);//3 szór is szólunk neki, hogy tuti megkapja a módváltásról az üzenetet
 80029d6:	f107 010c 	add.w	r1, r7, #12
 80029da:	230a      	movs	r3, #10
 80029dc:	2201      	movs	r2, #1
 80029de:	6838      	ldr	r0, [r7, #0]
 80029e0:	f007 ff01 	bl	800a7e6 <HAL_UART_Transmit>
		HAL_Delay(10);
 80029e4:	200a      	movs	r0, #10
 80029e6:	f003 fb11 	bl	800600c <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80029ea:	f107 010c 	add.w	r1, r7, #12
 80029ee:	230a      	movs	r3, #10
 80029f0:	2201      	movs	r2, #1
 80029f2:	6838      	ldr	r0, [r7, #0]
 80029f4:	f007 fef7 	bl	800a7e6 <HAL_UART_Transmit>

		sprintf((char*)buffer,"Skill mode!\n\r"); //Debugg uart-ra is kiküldjük, hogy milyen módban vagyunk
 80029f8:	f107 030c 	add.w	r3, r7, #12
 80029fc:	4935      	ldr	r1, [pc, #212]	; (8002ad4 <Mode_Selector+0x190>)
 80029fe:	4618      	mov	r0, r3
 8002a00:	f009 fc5a 	bl	800c2b8 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fc01 	bl	8000210 <strlen>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	f107 010c 	add.w	r1, r7, #12
 8002a16:	2364      	movs	r3, #100	; 0x64
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f007 fee4 	bl	800a7e6 <HAL_UART_Transmit>
		LED_NUCLEO(1); //A NUCLEO zöld LED-je világít, ha ügyeségi üzemmódban vagyunk
 8002a1e:	2201      	movs	r2, #1
 8002a20:	2120      	movs	r1, #32
 8002a22:	482d      	ldr	r0, [pc, #180]	; (8002ad8 <Mode_Selector+0x194>)
 8002a24:	f005 f98c 	bl	8007d40 <HAL_GPIO_WritePin>
	else
	{
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
	}
}
 8002a28:	e04c      	b.n	8002ac4 <Mode_Selector+0x180>
	else if(mode==FAST)
 8002a2a:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <Mode_Selector+0x18c>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b3f      	cmp	r3, #63	; 0x3f
 8002a30:	d135      	bne.n	8002a9e <Mode_Selector+0x15a>
		buffer[0] = CMD_MODE_FAST;
 8002a32:	233f      	movs	r3, #63	; 0x3f
 8002a34:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8002a36:	f107 010c 	add.w	r1, r7, #12
 8002a3a:	230a      	movs	r3, #10
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	6838      	ldr	r0, [r7, #0]
 8002a40:	f007 fed1 	bl	800a7e6 <HAL_UART_Transmit>
		HAL_Delay(10);
 8002a44:	200a      	movs	r0, #10
 8002a46:	f003 fae1 	bl	800600c <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8002a4a:	f107 010c 	add.w	r1, r7, #12
 8002a4e:	230a      	movs	r3, #10
 8002a50:	2201      	movs	r2, #1
 8002a52:	6838      	ldr	r0, [r7, #0]
 8002a54:	f007 fec7 	bl	800a7e6 <HAL_UART_Transmit>
		HAL_Delay(10);
 8002a58:	200a      	movs	r0, #10
 8002a5a:	f003 fad7 	bl	800600c <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8002a5e:	f107 010c 	add.w	r1, r7, #12
 8002a62:	230a      	movs	r3, #10
 8002a64:	2201      	movs	r2, #1
 8002a66:	6838      	ldr	r0, [r7, #0]
 8002a68:	f007 febd 	bl	800a7e6 <HAL_UART_Transmit>
		sprintf((char*)buffer,"Fast mode!\n\r");
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	491a      	ldr	r1, [pc, #104]	; (8002adc <Mode_Selector+0x198>)
 8002a72:	4618      	mov	r0, r3
 8002a74:	f009 fc20 	bl	800c2b8 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fbc7 	bl	8000210 <strlen>
 8002a82:	4603      	mov	r3, r0
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	f107 010c 	add.w	r1, r7, #12
 8002a8a:	2364      	movs	r3, #100	; 0x64
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f007 feaa 	bl	800a7e6 <HAL_UART_Transmit>
		LED_NUCLEO(0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2120      	movs	r1, #32
 8002a96:	4810      	ldr	r0, [pc, #64]	; (8002ad8 <Mode_Selector+0x194>)
 8002a98:	f005 f952 	bl	8007d40 <HAL_GPIO_WritePin>
}
 8002a9c:	e012      	b.n	8002ac4 <Mode_Selector+0x180>
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
 8002a9e:	f107 030c 	add.w	r3, r7, #12
 8002aa2:	490f      	ldr	r1, [pc, #60]	; (8002ae0 <Mode_Selector+0x19c>)
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f009 fc07 	bl	800c2b8 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fd fbae 	bl	8000210 <strlen>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	f107 010c 	add.w	r1, r7, #12
 8002abc:	2364      	movs	r3, #100	; 0x64
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f007 fe91 	bl	800a7e6 <HAL_UART_Transmit>
}
 8002ac4:	bf00      	nop
 8002ac6:	3738      	adds	r7, #56	; 0x38
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	08060000 	.word	0x08060000
 8002ad0:	2000029e 	.word	0x2000029e
 8002ad4:	0800fd08 	.word	0x0800fd08
 8002ad8:	40020000 	.word	0x40020000
 8002adc:	0800fd18 	.word	0x0800fd18
 8002ae0:	0800fd28 	.word	0x0800fd28

08002ae4 <Wait_For_Start_Sigal>:
	HAL_UART_Transmit(huart_monitoring, data, 11, 4);
}


void Wait_For_Start_Sigal(UART_HandleTypeDef *huart_TB, UART_HandleTypeDef *huart_debugg)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
	uint8_t rcv[]={0};
 8002aee:	2300      	movs	r3, #0
 8002af0:	733b      	strb	r3, [r7, #12]
	static uint8_t cnt=5;
	if(mode==FAST)return;
 8002af2:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <Wait_For_Start_Sigal+0xd8>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b3f      	cmp	r3, #63	; 0x3f
 8002af8:	d05c      	beq.n	8002bb4 <Wait_For_Start_Sigal+0xd0>
	while(1)
	{
		if(SW2) //Gombal töerténő indítás
 8002afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002afe:	4830      	ldr	r0, [pc, #192]	; (8002bc0 <Wait_For_Start_Sigal+0xdc>)
 8002b00:	f005 f906 	bl	8007d10 <HAL_GPIO_ReadPin>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00d      	beq.n	8002b26 <Wait_For_Start_Sigal+0x42>
		{
			if(B2)
 8002b0a:	2120      	movs	r1, #32
 8002b0c:	482c      	ldr	r0, [pc, #176]	; (8002bc0 <Wait_For_Start_Sigal+0xdc>)
 8002b0e:	f005 f8ff 	bl	8007d10 <HAL_GPIO_ReadPin>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <Wait_For_Start_Sigal+0x16>
			{
				LED_R(0);//kilaszik a sárga fény pár másodpercre amiíg el nem indul a robot
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b1e:	4828      	ldr	r0, [pc, #160]	; (8002bc0 <Wait_For_Start_Sigal+0xdc>)
 8002b20:	f005 f90e 	bl	8007d40 <HAL_GPIO_WritePin>
				break;//ha megnyomtuka 2-es gombot kiugrunk a while ciklusból
 8002b24:	e02e      	b.n	8002b84 <Wait_For_Start_Sigal+0xa0>
			}
		}
		else //Bluetooth-on érkezika  start jel
		{
			HAL_UART_Receive(huart_TB, rcv, 1, HAL_MAX_DELAY);
 8002b26:	f107 010c 	add.w	r1, r7, #12
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2e:	2201      	movs	r2, #1
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f007 feea 	bl	800a90a <HAL_UART_Receive>
			if(rcv[0]==cnt+0x30)
 8002b36:	7b3b      	ldrb	r3, [r7, #12]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <Wait_For_Start_Sigal+0xe0>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	3330      	adds	r3, #48	; 0x30
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d11a      	bne.n	8002b7a <Wait_For_Start_Sigal+0x96>
			{
				if(cnt<4)
 8002b44:	4b1f      	ldr	r3, [pc, #124]	; (8002bc4 <Wait_For_Start_Sigal+0xe0>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d80c      	bhi.n	8002b66 <Wait_For_Start_Sigal+0x82>
				{
					HAL_UART_Transmit(huart_debugg, rcv, 1, 2);
 8002b4c:	f107 010c 	add.w	r1, r7, #12
 8002b50:	2302      	movs	r3, #2
 8002b52:	2201      	movs	r2, #1
 8002b54:	6838      	ldr	r0, [r7, #0]
 8002b56:	f007 fe46 	bl	800a7e6 <HAL_UART_Transmit>
					HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\r", 2, 2);
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	491a      	ldr	r1, [pc, #104]	; (8002bc8 <Wait_For_Start_Sigal+0xe4>)
 8002b60:	6838      	ldr	r0, [r7, #0]
 8002b62:	f007 fe40 	bl	800a7e6 <HAL_UART_Transmit>
				}
				if(rcv[0]=='0')break;
 8002b66:	7b3b      	ldrb	r3, [r7, #12]
 8002b68:	2b30      	cmp	r3, #48	; 0x30
 8002b6a:	d00a      	beq.n	8002b82 <Wait_For_Start_Sigal+0x9e>
				cnt--;
 8002b6c:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <Wait_For_Start_Sigal+0xe0>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <Wait_For_Start_Sigal+0xe0>)
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	e7bf      	b.n	8002afa <Wait_For_Start_Sigal+0x16>
			}
			else cnt=5;
 8002b7a:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <Wait_For_Start_Sigal+0xe0>)
 8002b7c:	2205      	movs	r2, #5
 8002b7e:	701a      	strb	r2, [r3, #0]
		if(SW2) //Gombal töerténő indítás
 8002b80:	e7bb      	b.n	8002afa <Wait_For_Start_Sigal+0x16>
				if(rcv[0]=='0')break;
 8002b82:	bf00      	nop
		}
	}
	HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 8002b84:	2206      	movs	r2, #6
 8002b86:	4911      	ldr	r1, [pc, #68]	; (8002bcc <Wait_For_Start_Sigal+0xe8>)
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f007 ff60 	bl	800aa4e <HAL_UART_Receive_IT>
	if(SW2)	HAL_Delay(2000);
 8002b8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b92:	480b      	ldr	r0, [pc, #44]	; (8002bc0 <Wait_For_Start_Sigal+0xdc>)
 8002b94:	f005 f8bc 	bl	8007d10 <HAL_GPIO_ReadPin>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <Wait_For_Start_Sigal+0xc2>
 8002b9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ba2:	f003 fa33 	bl	800600c <HAL_Delay>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)"START!\n\r",8, 3);
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	2208      	movs	r2, #8
 8002baa:	4909      	ldr	r1, [pc, #36]	; (8002bd0 <Wait_For_Start_Sigal+0xec>)
 8002bac:	6838      	ldr	r0, [r7, #0]
 8002bae:	f007 fe1a 	bl	800a7e6 <HAL_UART_Transmit>
 8002bb2:	e000      	b.n	8002bb6 <Wait_For_Start_Sigal+0xd2>
	if(mode==FAST)return;
 8002bb4:	bf00      	nop
}
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	2000029e 	.word	0x2000029e
 8002bc0:	40020400 	.word	0x40020400
 8002bc4:	20000014 	.word	0x20000014
 8002bc8:	0800fd4c 	.word	0x0800fd4c
 8002bcc:	200002b0 	.word	0x200002b0
 8002bd0:	0800fd50 	.word	0x0800fd50

08002bd4 <Uart_Receive_Thunderboard_ISR>:
void Uart_Receive_Thunderboard_ISR(UART_HandleTypeDef *huart_TB, UART_HandleTypeDef *huart_debugg)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
	static uint8_t sp[]={0};//slip protection
	static uint8_t cnt=0;
	if(tb_msg[0]>='A' && tb_msg[0]<='Z' && tb_msg[5]>='0' && tb_msg[5]<='9')
 8002bde:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b40      	cmp	r3, #64	; 0x40
 8002be4:	d93d      	bls.n	8002c62 <Uart_Receive_Thunderboard_ISR+0x8e>
 8002be6:	4b35      	ldr	r3, [pc, #212]	; (8002cbc <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b5a      	cmp	r3, #90	; 0x5a
 8002bec:	d839      	bhi.n	8002c62 <Uart_Receive_Thunderboard_ISR+0x8e>
 8002bee:	4b33      	ldr	r3, [pc, #204]	; (8002cbc <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002bf0:	795b      	ldrb	r3, [r3, #5]
 8002bf2:	2b2f      	cmp	r3, #47	; 0x2f
 8002bf4:	d935      	bls.n	8002c62 <Uart_Receive_Thunderboard_ISR+0x8e>
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002bf8:	795b      	ldrb	r3, [r3, #5]
 8002bfa:	2b39      	cmp	r3, #57	; 0x39
 8002bfc:	d831      	bhi.n	8002c62 <Uart_Receive_Thunderboard_ISR+0x8e>
	{
		piratePos[0]=tb_msg[0];	piratePos[1]=tb_msg[1];	piratePos[2]=tb_msg[2];
 8002bfe:	4b2f      	ldr	r3, [pc, #188]	; (8002cbc <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	4b2f      	ldr	r3, [pc, #188]	; (8002cc0 <Uart_Receive_Thunderboard_ISR+0xec>)
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002c08:	785a      	ldrb	r2, [r3, #1]
 8002c0a:	4b2d      	ldr	r3, [pc, #180]	; (8002cc0 <Uart_Receive_Thunderboard_ISR+0xec>)
 8002c0c:	705a      	strb	r2, [r3, #1]
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002c10:	789a      	ldrb	r2, [r3, #2]
 8002c12:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <Uart_Receive_Thunderboard_ISR+0xec>)
 8002c14:	709a      	strb	r2, [r3, #2]
		piratePos[3]=100*(tb_msg[3]-0x30) + 10*(tb_msg[4]-0x30) + (tb_msg[5]-0x30);
 8002c16:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002c18:	78db      	ldrb	r3, [r3, #3]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	0092      	lsls	r2, r2, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	461a      	mov	r2, r3
 8002c22:	0091      	lsls	r1, r2, #2
 8002c24:	461a      	mov	r2, r3
 8002c26:	460b      	mov	r3, r1
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002c30:	791b      	ldrb	r3, [r3, #4]
 8002c32:	4619      	mov	r1, r3
 8002c34:	0089      	lsls	r1, r1, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002c42:	795b      	ldrb	r3, [r3, #5]
 8002c44:	4413      	add	r3, r2
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	3330      	adds	r3, #48	; 0x30
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <Uart_Receive_Thunderboard_ISR+0xec>)
 8002c4e:	70da      	strb	r2, [r3, #3]
		thunderboardFlag=1;
 8002c50:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <Uart_Receive_Thunderboard_ISR+0xf0>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 8002c56:	2206      	movs	r2, #6
 8002c58:	4918      	ldr	r1, [pc, #96]	; (8002cbc <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f007 fef7 	bl	800aa4e <HAL_UART_Receive_IT>
#ifdef TB_DEBUGG
		HAL_UART_Transmit(huart_debugg, tb_msg, 6, 2);
		HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\r", 2, 2);
#endif
		return;
 8002c60:	e029      	b.n	8002cb6 <Uart_Receive_Thunderboard_ISR+0xe2>
	}
	//SLIP PROTECTION
	if(sp[0]>='0' && sp[0]<='9')cnt++;
 8002c62:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b2f      	cmp	r3, #47	; 0x2f
 8002c68:	d90a      	bls.n	8002c80 <Uart_Receive_Thunderboard_ISR+0xac>
 8002c6a:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b39      	cmp	r3, #57	; 0x39
 8002c70:	d806      	bhi.n	8002c80 <Uart_Receive_Thunderboard_ISR+0xac>
 8002c72:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <Uart_Receive_Thunderboard_ISR+0xf8>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <Uart_Receive_Thunderboard_ISR+0xf8>)
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e002      	b.n	8002c86 <Uart_Receive_Thunderboard_ISR+0xb2>
	else cnt=0;
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <Uart_Receive_Thunderboard_ISR+0xf8>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]

	if(cnt<3) //3 darab ASCI számnak össze kell gyűlnie egymás után
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <Uart_Receive_Thunderboard_ISR+0xf8>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d805      	bhi.n	8002c9a <Uart_Receive_Thunderboard_ISR+0xc6>
	{
		HAL_UART_Receive_IT(huart_TB, sp, 1);//amig ez nincs meg addig cask egyesével olvasunk
 8002c8e:	2201      	movs	r2, #1
 8002c90:	490d      	ldr	r1, [pc, #52]	; (8002cc8 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f007 fedb 	bl	800aa4e <HAL_UART_Receive_IT>
 8002c98:	e00d      	b.n	8002cb6 <Uart_Receive_Thunderboard_ISR+0xe2>
	}
	else//ha megvan megint 6-ossával olvasunk
	{
		sp[0]=0;
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
		cnt=0;
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <Uart_Receive_Thunderboard_ISR+0xf8>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 8002ca6:	2206      	movs	r2, #6
 8002ca8:	4904      	ldr	r1, [pc, #16]	; (8002cbc <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f007 fecf 	bl	800aa4e <HAL_UART_Receive_IT>
		thunderboardFlag=1;
 8002cb0:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <Uart_Receive_Thunderboard_ISR+0xf0>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
	}

}
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200002b0 	.word	0x200002b0
 8002cc0:	200002b8 	.word	0x200002b8
 8002cc4:	200002ad 	.word	0x200002ad
 8002cc8:	20000638 	.word	0x20000638
 8002ccc:	20000639 	.word	0x20000639

08002cd0 <Lane_Change_Init>:


void Lane_Change_Init(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
	N('A').worth = N('B').worth = N('C').worth = N('Y').worth = 0;
 8002cd4:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <Lane_Change_Init+0x114>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 8002cdc:	4b41      	ldr	r3, [pc, #260]	; (8002de4 <Lane_Change_Init+0x114>)
 8002cde:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8002ce2:	4a40      	ldr	r2, [pc, #256]	; (8002de4 <Lane_Change_Init+0x114>)
 8002ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce6:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <Lane_Change_Init+0x114>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	4a3e      	ldr	r2, [pc, #248]	; (8002de4 <Lane_Change_Init+0x114>)
 8002cec:	6253      	str	r3, [r2, #36]	; 0x24
 8002cee:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <Lane_Change_Init+0x114>)
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	4a3c      	ldr	r2, [pc, #240]	; (8002de4 <Lane_Change_Init+0x114>)
 8002cf4:	6053      	str	r3, [r2, #4]
	N('D').worth = N('E').worth=1;
 8002cf6:	4b3b      	ldr	r3, [pc, #236]	; (8002de4 <Lane_Change_Init+0x114>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002cfe:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d04:	4a37      	ldr	r2, [pc, #220]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d06:	6653      	str	r3, [r2, #100]	; 0x64
	N('F').worth = N('G').worth = N('W').worth = N('X').worth = 2;
 8002d08:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
 8002d10:	4b34      	ldr	r3, [pc, #208]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d12:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8002d16:	4a33      	ldr	r2, [pc, #204]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d18:	f8c2 32c4 	str.w	r3, [r2, #708]	; 0x2c4
 8002d1c:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002d22:	4a30      	ldr	r2, [pc, #192]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d24:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
 8002d28:	4b2e      	ldr	r3, [pc, #184]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002d2e:	4a2d      	ldr	r2, [pc, #180]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d30:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	N('H').worth = N('I').worth = N('J').worth = N('M').worth = N('P').worth = N('T').worth = N('V').worth = N('U').worth = 4;
 8002d34:	4b2b      	ldr	r3, [pc, #172]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d36:	2204      	movs	r2, #4
 8002d38:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
 8002d3c:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d3e:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 8002d42:	4a28      	ldr	r2, [pc, #160]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d44:	f8c2 32a4 	str.w	r3, [r2, #676]	; 0x2a4
 8002d48:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8002d4e:	4a25      	ldr	r2, [pc, #148]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d50:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
 8002d54:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d56:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8002d5a:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d5c:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
 8002d60:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d62:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8002d66:	4a1f      	ldr	r2, [pc, #124]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d68:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d6e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002d72:	4a1c      	ldr	r2, [pc, #112]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d74:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
 8002d78:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d7a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002d7e:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d80:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8002d84:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d86:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002d8a:	4a16      	ldr	r2, [pc, #88]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d8c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	N('L').worth = N('K').worth = N('O').worth = N('R').worth = N('S').worth = 8;
 8002d90:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d92:	2208      	movs	r2, #8
 8002d94:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8002d98:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <Lane_Change_Init+0x114>)
 8002d9a:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002d9e:	4a11      	ldr	r2, [pc, #68]	; (8002de4 <Lane_Change_Init+0x114>)
 8002da0:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <Lane_Change_Init+0x114>)
 8002da6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8002daa:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <Lane_Change_Init+0x114>)
 8002dac:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <Lane_Change_Init+0x114>)
 8002db2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8002db6:	4a0b      	ldr	r2, [pc, #44]	; (8002de4 <Lane_Change_Init+0x114>)
 8002db8:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <Lane_Change_Init+0x114>)
 8002dbe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002dc2:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <Lane_Change_Init+0x114>)
 8002dc4:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
	N('Q').worth = 16;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <Lane_Change_Init+0x114>)
 8002dca:	2210      	movs	r2, #16
 8002dcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	N('N').worth = 32;
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <Lane_Change_Init+0x114>)
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	200002c0 	.word	0x200002c0

08002de8 <Battery_Voltage_Compensate>:
float v=0;
//ha 1000 akkor a motor full csutkán megy előre
//ha -1000 akkor a motor full csutkán megy hátra

void Battery_Voltage_Compensate(ADC_HandleTypeDef *hadc_UNiMh,ADC_HandleTypeDef *hadc_ULiPo,UART_HandleTypeDef *huart_debugg)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b090      	sub	sp, #64	; 0x40
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
	char msg[30];
	uint32_t raw=0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	63fb      	str	r3, [r7, #60]	; 0x3c
	float bat;
	int i;

	//NiMh akku mérése
	for(i=0;i<20;i++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dfc:	e016      	b.n	8002e2c <Battery_Voltage_Compensate+0x44>
	{
		HAL_ADC_Start(hadc_UNiMh);
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f003 f96c 	bl	80060dc <HAL_ADC_Start>
		HAL_Delay(10);
 8002e04:	200a      	movs	r0, #10
 8002e06:	f003 f901 	bl	800600c <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_UNiMh,20);
 8002e0a:	2114      	movs	r1, #20
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f003 fa37 	bl	8006280 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 8002e12:	200a      	movs	r0, #10
 8002e14:	f003 f8fa 	bl	800600c <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_UNiMh);
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f003 fabc 	bl	8006396 <HAL_ADC_GetValue>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e22:	4413      	add	r3, r2
 8002e24:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8002e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e28:	3301      	adds	r3, #1
 8002e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2e:	2b13      	cmp	r3, #19
 8002e30:	dde5      	ble.n	8002dfe <Battery_Voltage_Compensate+0x16>
	}
	bat=(float)raw * 0.00460575 / 20.0;//ez a mi feszültségünk V-ban
 8002e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e34:	ee07 3a90 	vmov	s15, r3
 8002e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3c:	ee17 0a90 	vmov	r0, s15
 8002e40:	f7fd fba2 	bl	8000588 <__aeabi_f2d>
 8002e44:	a37b      	add	r3, pc, #492	; (adr r3, 8003034 <Battery_Voltage_Compensate+0x24c>)
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	f7fd fbf5 	bl	8000638 <__aeabi_dmul>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	4b71      	ldr	r3, [pc, #452]	; (8003020 <Battery_Voltage_Compensate+0x238>)
 8002e5c:	f7fd fd16 	bl	800088c <__aeabi_ddiv>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	f7fd febe 	bl	8000be8 <__aeabi_d2f>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"NiMh charge: %2.2f V \r\n", bat);
 8002e70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e72:	f7fd fb89 	bl	8000588 <__aeabi_f2d>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	f107 0014 	add.w	r0, r7, #20
 8002e7e:	4969      	ldr	r1, [pc, #420]	; (8003024 <Battery_Voltage_Compensate+0x23c>)
 8002e80:	f009 fa1a 	bl	800c2b8 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*) msg, strlen(msg),10);
 8002e84:	f107 0314 	add.w	r3, r7, #20
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd f9c1 	bl	8000210 <strlen>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	f107 0114 	add.w	r1, r7, #20
 8002e96:	230a      	movs	r3, #10
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f007 fca4 	bl	800a7e6 <HAL_UART_Transmit>

	if(bat)compensation=7.75/bat;
 8002e9e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ea2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eaa:	d009      	beq.n	8002ec0 <Battery_Voltage_Compensate+0xd8>
 8002eac:	eef1 6a0f 	vmov.f32	s13, #31	; 0x40f80000  7.750
 8002eb0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb8:	4b5b      	ldr	r3, [pc, #364]	; (8003028 <Battery_Voltage_Compensate+0x240>)
 8002eba:	edc3 7a00 	vstr	s15, [r3]
 8002ebe:	e003      	b.n	8002ec8 <Battery_Voltage_Compensate+0xe0>
	else compensation=1;
 8002ec0:	4b59      	ldr	r3, [pc, #356]	; (8003028 <Battery_Voltage_Compensate+0x240>)
 8002ec2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ec6:	601a      	str	r2, [r3, #0]

	if(bat < 7.2)
 8002ec8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002eca:	f7fd fb5d 	bl	8000588 <__aeabi_f2d>
 8002ece:	a34e      	add	r3, pc, #312	; (adr r3, 8003008 <Battery_Voltage_Compensate+0x220>)
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f7fd fe22 	bl	8000b1c <__aeabi_dcmplt>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d010      	beq.n	8002f00 <Battery_Voltage_Compensate+0x118>
	{
		for(i=0;i<10;i++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ee2:	e00a      	b.n	8002efa <Battery_Voltage_Compensate+0x112>
		{
			LED_Y_TOGGLE;
 8002ee4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ee8:	4850      	ldr	r0, [pc, #320]	; (800302c <Battery_Voltage_Compensate+0x244>)
 8002eea:	f004 ff42 	bl	8007d72 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8002eee:	20c8      	movs	r0, #200	; 0xc8
 8002ef0:	f003 f88c 	bl	800600c <HAL_Delay>
		for(i=0;i<10;i++)
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	2b09      	cmp	r3, #9
 8002efe:	ddf1      	ble.n	8002ee4 <Battery_Voltage_Compensate+0xfc>
		}
	}

	//LiPo akku mérése
	raw=0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8002f04:	2300      	movs	r3, #0
 8002f06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f08:	e016      	b.n	8002f38 <Battery_Voltage_Compensate+0x150>
	{
		HAL_ADC_Start(hadc_ULiPo);
 8002f0a:	68b8      	ldr	r0, [r7, #8]
 8002f0c:	f003 f8e6 	bl	80060dc <HAL_ADC_Start>
		HAL_Delay(10);
 8002f10:	200a      	movs	r0, #10
 8002f12:	f003 f87b 	bl	800600c <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_ULiPo,20);
 8002f16:	2114      	movs	r1, #20
 8002f18:	68b8      	ldr	r0, [r7, #8]
 8002f1a:	f003 f9b1 	bl	8006280 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 8002f1e:	200a      	movs	r0, #10
 8002f20:	f003 f874 	bl	800600c <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_ULiPo);
 8002f24:	68b8      	ldr	r0, [r7, #8]
 8002f26:	f003 fa36 	bl	8006396 <HAL_ADC_GetValue>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2e:	4413      	add	r3, r2
 8002f30:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	3301      	adds	r3, #1
 8002f36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3a:	2b13      	cmp	r3, #19
 8002f3c:	dde5      	ble.n	8002f0a <Battery_Voltage_Compensate+0x122>

	}
	bat = (float)raw * 0.003241242 / 20.0 + 0.02;//ez a mi feszültségünk V-ban
 8002f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f40:	ee07 3a90 	vmov	s15, r3
 8002f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f48:	ee17 0a90 	vmov	r0, s15
 8002f4c:	f7fd fb1c 	bl	8000588 <__aeabi_f2d>
 8002f50:	a32f      	add	r3, pc, #188	; (adr r3, 8003010 <Battery_Voltage_Compensate+0x228>)
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	f7fd fb6f 	bl	8000638 <__aeabi_dmul>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <Battery_Voltage_Compensate+0x238>)
 8002f68:	f7fd fc90 	bl	800088c <__aeabi_ddiv>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	a328      	add	r3, pc, #160	; (adr r3, 8003018 <Battery_Voltage_Compensate+0x230>)
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	f7fd f9a7 	bl	80002cc <__adddf3>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4610      	mov	r0, r2
 8002f84:	4619      	mov	r1, r3
 8002f86:	f7fd fe2f 	bl	8000be8 <__aeabi_d2f>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"LiPo charge: %2.2f V \r\n", bat);
 8002f8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f90:	f7fd fafa 	bl	8000588 <__aeabi_f2d>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	f107 0014 	add.w	r0, r7, #20
 8002f9c:	4924      	ldr	r1, [pc, #144]	; (8003030 <Battery_Voltage_Compensate+0x248>)
 8002f9e:	f009 f98b 	bl	800c2b8 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)msg, strlen(msg),10);
 8002fa2:	f107 0314 	add.w	r3, r7, #20
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd f932 	bl	8000210 <strlen>
 8002fac:	4603      	mov	r3, r0
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	f107 0114 	add.w	r1, r7, #20
 8002fb4:	230a      	movs	r3, #10
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f007 fc15 	bl	800a7e6 <HAL_UART_Transmit>

	/**/
	if(bat < 10)
 8002fbc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002fc0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fcc:	d510      	bpl.n	8002ff0 <Battery_Voltage_Compensate+0x208>
	{
		for(i=0;i<20;i++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fd2:	e00a      	b.n	8002fea <Battery_Voltage_Compensate+0x202>
		{
			LED_Y_TOGGLE;
 8002fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fd8:	4814      	ldr	r0, [pc, #80]	; (800302c <Battery_Voltage_Compensate+0x244>)
 8002fda:	f004 feca 	bl	8007d72 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8002fde:	20c8      	movs	r0, #200	; 0xc8
 8002fe0:	f003 f814 	bl	800600c <HAL_Delay>
		for(i=0;i<20;i++)
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fec:	2b13      	cmp	r3, #19
 8002fee:	ddf1      	ble.n	8002fd4 <Battery_Voltage_Compensate+0x1ec>
		}
	}

	LED_Y(0);
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ff6:	480d      	ldr	r0, [pc, #52]	; (800302c <Battery_Voltage_Compensate+0x244>)
 8002ff8:	f004 fea2 	bl	8007d40 <HAL_GPIO_WritePin>

}
 8002ffc:	bf00      	nop
 8002ffe:	3740      	adds	r7, #64	; 0x40
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	f3af 8000 	nop.w
 8003008:	cccccccd 	.word	0xcccccccd
 800300c:	401ccccc 	.word	0x401ccccc
 8003010:	8c6df334 	.word	0x8c6df334
 8003014:	3f6a8d60 	.word	0x3f6a8d60
 8003018:	47ae147b 	.word	0x47ae147b
 800301c:	3f947ae1 	.word	0x3f947ae1
 8003020:	40340000 	.word	0x40340000
 8003024:	0800fd5c 	.word	0x0800fd5c
 8003028:	20000018 	.word	0x20000018
 800302c:	40020400 	.word	0x40020400
 8003030:	0800fd74 	.word	0x0800fd74
 8003034:	99fa11a9 	.word	0x99fa11a9
 8003038:	3f72dd7a 	.word	0x3f72dd7a
 800303c:	00000000 	.word	0x00000000

08003040 <Measure_Velocity_Task>:

void Measure_Velocity_Task(TIM_HandleTypeDef *htim_encoder,uint32_t tick, uint32_t period)
{
 8003040:	b5b0      	push	{r4, r5, r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
	static uint32_t tick_prev=0;
	static uint32_t measure_v_task_tick=4;
	static float alpha=0.3;
	static float invalpha=0.7;
	float v_uj=0;
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	617b      	str	r3, [r7, #20]

	if(measure_v_task_tick>tick) return;
 8003052:	4b31      	ldr	r3, [pc, #196]	; (8003118 <Measure_Velocity_Task+0xd8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	429a      	cmp	r2, r3
 800305a:	d354      	bcc.n	8003106 <Measure_Velocity_Task+0xc6>
	measure_v_task_tick= tick + period;
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	4a2d      	ldr	r2, [pc, #180]	; (8003118 <Measure_Velocity_Task+0xd8>)
 8003064:	6013      	str	r3, [r2, #0]
	if(!tick_prev)
 8003066:	4b2d      	ldr	r3, [pc, #180]	; (800311c <Measure_Velocity_Task+0xdc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d103      	bne.n	8003076 <Measure_Velocity_Task+0x36>
	{
		tick_prev=tick;
 800306e:	4a2b      	ldr	r2, [pc, #172]	; (800311c <Measure_Velocity_Task+0xdc>)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	6013      	str	r3, [r2, #0]
		return;
 8003074:	e048      	b.n	8003108 <Measure_Velocity_Task+0xc8>
	}
	v_uj =((float) 0x8000 - (float) __HAL_TIM_GET_COUNTER(htim_encoder))*7.49/(float)period; //mm/s dimenzió
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	ee07 3a90 	vmov	s15, r3
 8003080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003084:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003120 <Measure_Velocity_Task+0xe0>
 8003088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308c:	ee17 0a90 	vmov	r0, s15
 8003090:	f7fd fa7a 	bl	8000588 <__aeabi_f2d>
 8003094:	a31e      	add	r3, pc, #120	; (adr r3, 8003110 <Measure_Velocity_Task+0xd0>)
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f7fd facd 	bl	8000638 <__aeabi_dmul>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4614      	mov	r4, r2
 80030a4:	461d      	mov	r5, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b0:	ee17 0a90 	vmov	r0, s15
 80030b4:	f7fd fa68 	bl	8000588 <__aeabi_f2d>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4620      	mov	r0, r4
 80030be:	4629      	mov	r1, r5
 80030c0:	f7fd fbe4 	bl	800088c <__aeabi_ddiv>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	f7fd fd8c 	bl	8000be8 <__aeabi_d2f>
 80030d0:	4603      	mov	r3, r0
 80030d2:	617b      	str	r3, [r7, #20]
	TIM8->CNT=0x8000;
 80030d4:	4b13      	ldr	r3, [pc, #76]	; (8003124 <Measure_Velocity_Task+0xe4>)
 80030d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
	//tick_prev=tick;
	//exponenciális szűrés
	v = alpha*(float)v_uj + invalpha*v;
 80030dc:	4b12      	ldr	r3, [pc, #72]	; (8003128 <Measure_Velocity_Task+0xe8>)
 80030de:	ed93 7a00 	vldr	s14, [r3]
 80030e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80030e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <Measure_Velocity_Task+0xec>)
 80030ec:	edd3 6a00 	vldr	s13, [r3]
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <Measure_Velocity_Task+0xf0>)
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <Measure_Velocity_Task+0xf0>)
 8003100:	edc3 7a00 	vstr	s15, [r3]
 8003104:	e000      	b.n	8003108 <Measure_Velocity_Task+0xc8>
	if(measure_v_task_tick>tick) return;
 8003106:	bf00      	nop
}
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bdb0      	pop	{r4, r5, r7, pc}
 800310e:	bf00      	nop
 8003110:	8f5c28f6 	.word	0x8f5c28f6
 8003114:	401df5c2 	.word	0x401df5c2
 8003118:	2000001c 	.word	0x2000001c
 800311c:	20000640 	.word	0x20000640
 8003120:	47000000 	.word	0x47000000
 8003124:	40010400 	.word	0x40010400
 8003128:	20000020 	.word	0x20000020
 800312c:	20000024 	.word	0x20000024
 8003130:	2000063c 	.word	0x2000063c
 8003134:	00000000 	.word	0x00000000

08003138 <Motor_Drive_Task>:

void Motor_Drive_Task(TIM_HandleTypeDef *htim_motor, UART_HandleTypeDef *huart, uint32_t tick, uint32_t period) //DUTY paramtert kiszedtem -> változtassuk a globális változót
{
 8003138:	b5b0      	push	{r4, r5, r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
	static uint32_t motor_drive_task_tick=5;
	static float f,u=0;

	int32_t ccr1;
	int32_t ccr2;
	if(motor_drive_task_tick>tick) return;
 8003146:	4b90      	ldr	r3, [pc, #576]	; (8003388 <Motor_Drive_Task+0x250>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	429a      	cmp	r2, r3
 800314e:	f0c0 8109 	bcc.w	8003364 <Motor_Drive_Task+0x22c>
	motor_drive_task_tick= tick + period;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	4413      	add	r3, r2
 8003158:	4a8b      	ldr	r2, [pc, #556]	; (8003388 <Motor_Drive_Task+0x250>)
 800315a:	6013      	str	r3, [r2, #0]

	if(motorEnRemote && motorEnLineOk) //ha nem nyomtunk vészstopot és az akkuk is rendben vannak akkor pöröghet a motor
 800315c:	4b8b      	ldr	r3, [pc, #556]	; (800338c <Motor_Drive_Task+0x254>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80b4 	beq.w	80032ce <Motor_Drive_Task+0x196>
 8003166:	4b8a      	ldr	r3, [pc, #552]	; (8003390 <Motor_Drive_Task+0x258>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80af 	beq.w	80032ce <Motor_Drive_Task+0x196>
	{
		//az u paraméter a bevatkozó jel minusz holtásávot adja meg
		u= KC * (v_ref - v) * compensation + f;
 8003170:	4b88      	ldr	r3, [pc, #544]	; (8003394 <Motor_Drive_Task+0x25c>)
 8003172:	ed93 7a00 	vldr	s14, [r3]
 8003176:	4b88      	ldr	r3, [pc, #544]	; (8003398 <Motor_Drive_Task+0x260>)
 8003178:	edd3 7a00 	vldr	s15, [r3]
 800317c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003180:	ee17 0a90 	vmov	r0, s15
 8003184:	f7fd fa00 	bl	8000588 <__aeabi_f2d>
 8003188:	a379      	add	r3, pc, #484	; (adr r3, 8003370 <Motor_Drive_Task+0x238>)
 800318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318e:	f7fd fa53 	bl	8000638 <__aeabi_dmul>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4614      	mov	r4, r2
 8003198:	461d      	mov	r5, r3
 800319a:	4b80      	ldr	r3, [pc, #512]	; (800339c <Motor_Drive_Task+0x264>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd f9f2 	bl	8000588 <__aeabi_f2d>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4620      	mov	r0, r4
 80031aa:	4629      	mov	r1, r5
 80031ac:	f7fd fa44 	bl	8000638 <__aeabi_dmul>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4614      	mov	r4, r2
 80031b6:	461d      	mov	r5, r3
 80031b8:	4b79      	ldr	r3, [pc, #484]	; (80033a0 <Motor_Drive_Task+0x268>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd f9e3 	bl	8000588 <__aeabi_f2d>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4620      	mov	r0, r4
 80031c8:	4629      	mov	r1, r5
 80031ca:	f7fd f87f 	bl	80002cc <__adddf3>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	f7fd fd07 	bl	8000be8 <__aeabi_d2f>
 80031da:	4603      	mov	r3, r0
 80031dc:	4a71      	ldr	r2, [pc, #452]	; (80033a4 <Motor_Drive_Task+0x26c>)
 80031de:	6013      	str	r3, [r2, #0]
		if(u>880) u=880;
 80031e0:	4b70      	ldr	r3, [pc, #448]	; (80033a4 <Motor_Drive_Task+0x26c>)
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80033a8 <Motor_Drive_Task+0x270>
 80031ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f2:	dd03      	ble.n	80031fc <Motor_Drive_Task+0xc4>
 80031f4:	4b6b      	ldr	r3, [pc, #428]	; (80033a4 <Motor_Drive_Task+0x26c>)
 80031f6:	4a6d      	ldr	r2, [pc, #436]	; (80033ac <Motor_Drive_Task+0x274>)
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e00c      	b.n	8003216 <Motor_Drive_Task+0xde>
		else if(u<-500)u=-500;
 80031fc:	4b69      	ldr	r3, [pc, #420]	; (80033a4 <Motor_Drive_Task+0x26c>)
 80031fe:	edd3 7a00 	vldr	s15, [r3]
 8003202:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80033b0 <Motor_Drive_Task+0x278>
 8003206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800320a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320e:	d502      	bpl.n	8003216 <Motor_Drive_Task+0xde>
 8003210:	4b64      	ldr	r3, [pc, #400]	; (80033a4 <Motor_Drive_Task+0x26c>)
 8003212:	4a68      	ldr	r2, [pc, #416]	; (80033b4 <Motor_Drive_Task+0x27c>)
 8003214:	601a      	str	r2, [r3, #0]
		f = ZD*f + (1-ZD)*u;
 8003216:	4b62      	ldr	r3, [pc, #392]	; (80033a0 <Motor_Drive_Task+0x268>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd f9b4 	bl	8000588 <__aeabi_f2d>
 8003220:	a355      	add	r3, pc, #340	; (adr r3, 8003378 <Motor_Drive_Task+0x240>)
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	f7fd fa07 	bl	8000638 <__aeabi_dmul>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4614      	mov	r4, r2
 8003230:	461d      	mov	r5, r3
 8003232:	4b5c      	ldr	r3, [pc, #368]	; (80033a4 <Motor_Drive_Task+0x26c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd f9a6 	bl	8000588 <__aeabi_f2d>
 800323c:	a350      	add	r3, pc, #320	; (adr r3, 8003380 <Motor_Drive_Task+0x248>)
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	f7fd f9f9 	bl	8000638 <__aeabi_dmul>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4620      	mov	r0, r4
 800324c:	4629      	mov	r1, r5
 800324e:	f7fd f83d 	bl	80002cc <__adddf3>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4610      	mov	r0, r2
 8003258:	4619      	mov	r1, r3
 800325a:	f7fd fcc5 	bl	8000be8 <__aeabi_d2f>
 800325e:	4603      	mov	r3, r0
 8003260:	4a4f      	ldr	r2, [pc, #316]	; (80033a0 <Motor_Drive_Task+0x268>)
 8003262:	6013      	str	r3, [r2, #0]
		//ez alapján a kiadandó kitöltési tényező
		if(u>0) motorDuty=(int)u+70;
 8003264:	4b4f      	ldr	r3, [pc, #316]	; (80033a4 <Motor_Drive_Task+0x26c>)
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003272:	dd0a      	ble.n	800328a <Motor_Drive_Task+0x152>
 8003274:	4b4b      	ldr	r3, [pc, #300]	; (80033a4 <Motor_Drive_Task+0x26c>)
 8003276:	edd3 7a00 	vldr	s15, [r3]
 800327a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800327e:	ee17 3a90 	vmov	r3, s15
 8003282:	3346      	adds	r3, #70	; 0x46
 8003284:	4a4c      	ldr	r2, [pc, #304]	; (80033b8 <Motor_Drive_Task+0x280>)
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	e01b      	b.n	80032c2 <Motor_Drive_Task+0x18a>
		else if(u<0) motorDuty=(int)u-70;
 800328a:	4b46      	ldr	r3, [pc, #280]	; (80033a4 <Motor_Drive_Task+0x26c>)
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003298:	d50a      	bpl.n	80032b0 <Motor_Drive_Task+0x178>
 800329a:	4b42      	ldr	r3, [pc, #264]	; (80033a4 <Motor_Drive_Task+0x26c>)
 800329c:	edd3 7a00 	vldr	s15, [r3]
 80032a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032a4:	ee17 3a90 	vmov	r3, s15
 80032a8:	3b46      	subs	r3, #70	; 0x46
 80032aa:	4a43      	ldr	r2, [pc, #268]	; (80033b8 <Motor_Drive_Task+0x280>)
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e008      	b.n	80032c2 <Motor_Drive_Task+0x18a>
		else motorDuty=(int)u;
 80032b0:	4b3c      	ldr	r3, [pc, #240]	; (80033a4 <Motor_Drive_Task+0x26c>)
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ba:	ee17 2a90 	vmov	r2, s15
 80032be:	4b3e      	ldr	r3, [pc, #248]	; (80033b8 <Motor_Drive_Task+0x280>)
 80032c0:	601a      	str	r2, [r3, #0]


		MOTOR_EN(1);
 80032c2:	2201      	movs	r2, #1
 80032c4:	2140      	movs	r1, #64	; 0x40
 80032c6:	483d      	ldr	r0, [pc, #244]	; (80033bc <Motor_Drive_Task+0x284>)
 80032c8:	f004 fd3a 	bl	8007d40 <HAL_GPIO_WritePin>
 80032cc:	e00c      	b.n	80032e8 <Motor_Drive_Task+0x1b0>
	}
	else
	{	f=u=0;
 80032ce:	4b35      	ldr	r3, [pc, #212]	; (80033a4 <Motor_Drive_Task+0x26c>)
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	4b33      	ldr	r3, [pc, #204]	; (80033a4 <Motor_Drive_Task+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a31      	ldr	r2, [pc, #196]	; (80033a0 <Motor_Drive_Task+0x268>)
 80032dc:	6013      	str	r3, [r2, #0]
		MOTOR_EN(0); //amugy stop
 80032de:	2200      	movs	r2, #0
 80032e0:	2140      	movs	r1, #64	; 0x40
 80032e2:	4836      	ldr	r0, [pc, #216]	; (80033bc <Motor_Drive_Task+0x284>)
 80032e4:	f004 fd2c 	bl	8007d40 <HAL_GPIO_WritePin>
	}
	//A két érték amit irogatsz (TIM3->CCR1,CCR2) konkrét timer periféria regiszterek, nem feltétlen jó őket folyamatosan újraírni 10ms enként
	/**/
	if(mode==FAST && rxBuf[1]<1)
 80032e8:	4b35      	ldr	r3, [pc, #212]	; (80033c0 <Motor_Drive_Task+0x288>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b3f      	cmp	r3, #63	; 0x3f
 80032ee:	d10c      	bne.n	800330a <Motor_Drive_Task+0x1d2>
 80032f0:	4b34      	ldr	r3, [pc, #208]	; (80033c4 <Motor_Drive_Task+0x28c>)
 80032f2:	785b      	ldrb	r3, [r3, #1]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d108      	bne.n	800330a <Motor_Drive_Task+0x1d2>
	{
		TIM3->CCR1=499;
 80032f8:	4b33      	ldr	r3, [pc, #204]	; (80033c8 <Motor_Drive_Task+0x290>)
 80032fa:	f240 12f3 	movw	r2, #499	; 0x1f3
 80032fe:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2=499;
 8003300:	4b31      	ldr	r3, [pc, #196]	; (80033c8 <Motor_Drive_Task+0x290>)
 8003302:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003306:	639a      	str	r2, [r3, #56]	; 0x38
 8003308:	e027      	b.n	800335a <Motor_Drive_Task+0x222>
		//LED_Y_TOGGLE;
	}
	else if(motorDuty!=motorDutyPrev)//csak akkor írjuk át őket ha tényleg muszáj (ha változtak az előző taskhívás óta)
 800330a:	4b2b      	ldr	r3, [pc, #172]	; (80033b8 <Motor_Drive_Task+0x280>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4b2f      	ldr	r3, [pc, #188]	; (80033cc <Motor_Drive_Task+0x294>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d021      	beq.n	800335a <Motor_Drive_Task+0x222>
	{
		ccr2 = (motorDuty + 1000)/2-1;
 8003316:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <Motor_Drive_Task+0x280>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800331e:	0fda      	lsrs	r2, r3, #31
 8003320:	4413      	add	r3, r2
 8003322:	105b      	asrs	r3, r3, #1
 8003324:	3b01      	subs	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
		if(ccr2>950)ccr2=950;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f240 32b6 	movw	r2, #950	; 0x3b6
 800332e:	4293      	cmp	r3, r2
 8003330:	dd02      	ble.n	8003338 <Motor_Drive_Task+0x200>
 8003332:	f240 33b6 	movw	r3, #950	; 0x3b6
 8003336:	617b      	str	r3, [r7, #20]
		if(ccr2<-950)ccr2=-950;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	4a25      	ldr	r2, [pc, #148]	; (80033d0 <Motor_Drive_Task+0x298>)
 800333c:	4293      	cmp	r3, r2
 800333e:	da01      	bge.n	8003344 <Motor_Drive_Task+0x20c>
 8003340:	4b23      	ldr	r3, [pc, #140]	; (80033d0 <Motor_Drive_Task+0x298>)
 8003342:	617b      	str	r3, [r7, #20]
		ccr1= 998-ccr2;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 800334a:	3302      	adds	r3, #2
 800334c:	613b      	str	r3, [r7, #16]

		//2 Referencia megadása
		//Ezeket a loopba kéne változtatni folyamatosan, pwm-elinditas mashova kell majd

		TIM3->CCR1=ccr1;
 800334e:	4a1e      	ldr	r2, [pc, #120]	; (80033c8 <Motor_Drive_Task+0x290>)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2=ccr2;
 8003354:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <Motor_Drive_Task+0x290>)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	6393      	str	r3, [r2, #56]	; 0x38
	}
	motorDutyPrev=motorDuty;
 800335a:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <Motor_Drive_Task+0x280>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1b      	ldr	r2, [pc, #108]	; (80033cc <Motor_Drive_Task+0x294>)
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e000      	b.n	8003366 <Motor_Drive_Task+0x22e>
	if(motor_drive_task_tick>tick) return;
 8003364:	bf00      	nop
}
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bdb0      	pop	{r4, r5, r7, pc}
 800336c:	f3af 8000 	nop.w
 8003370:	30be0ded 	.word	0x30be0ded
 8003374:	3fd02a99 	.word	0x3fd02a99
 8003378:	9b3d07c8 	.word	0x9b3d07c8
 800337c:	3fef9f55 	.word	0x3fef9f55
 8003380:	30be0e00 	.word	0x30be0e00
 8003384:	3f882a99 	.word	0x3f882a99
 8003388:	20000028 	.word	0x20000028
 800338c:	20000b14 	.word	0x20000b14
 8003390:	20000b15 	.word	0x20000b15
 8003394:	200002a0 	.word	0x200002a0
 8003398:	2000063c 	.word	0x2000063c
 800339c:	20000018 	.word	0x20000018
 80033a0:	20000644 	.word	0x20000644
 80033a4:	20000648 	.word	0x20000648
 80033a8:	445c0000 	.word	0x445c0000
 80033ac:	445c0000 	.word	0x445c0000
 80033b0:	c3fa0000 	.word	0xc3fa0000
 80033b4:	c3fa0000 	.word	0xc3fa0000
 80033b8:	2000064c 	.word	0x2000064c
 80033bc:	40020400 	.word	0x40020400
 80033c0:	2000029e 	.word	0x2000029e
 80033c4:	20000654 	.word	0x20000654
 80033c8:	40000400 	.word	0x40000400
 80033cc:	20000650 	.word	0x20000650
 80033d0:	fffffc4a 	.word	0xfffffc4a

080033d4 <G0_Read_Fast>:

volatile uint8_t flagG0=0;


uint8_t G0_Read_Fast(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]

	uint8_t state=0;
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
	txBuf[0]=CMD_READ_FAST;
 80033e2:	4b13      	ldr	r3, [pc, #76]	; (8003430 <G0_Read_Fast+0x5c>)
 80033e4:	222a      	movs	r2, #42	; 0x2a
 80033e6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 2);
 80033e8:	2302      	movs	r3, #2
 80033ea:	2201      	movs	r2, #1
 80033ec:	4910      	ldr	r1, [pc, #64]	; (8003430 <G0_Read_Fast+0x5c>)
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f007 f9f9 	bl	800a7e6 <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 8, 4);
 80033f4:	2304      	movs	r3, #4
 80033f6:	2208      	movs	r2, #8
 80033f8:	490e      	ldr	r1, [pc, #56]	; (8003434 <G0_Read_Fast+0x60>)
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f007 fa85 	bl	800a90a <HAL_UART_Receive>
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <G0_Read_Fast+0x64>)
 8003406:	2201      	movs	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE_FAST) && (rxBuf[7]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <G0_Read_Fast+0x50>
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <G0_Read_Fast+0x60>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b41      	cmp	r3, #65	; 0x41
 8003416:	d105      	bne.n	8003424 <G0_Read_Fast+0x50>
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <G0_Read_Fast+0x60>)
 800341a:	79db      	ldrb	r3, [r3, #7]
 800341c:	2b12      	cmp	r3, #18
 800341e:	d101      	bne.n	8003424 <G0_Read_Fast+0x50>
	{
		return 0;
 8003420:	2300      	movs	r3, #0
 8003422:	e000      	b.n	8003426 <G0_Read_Fast+0x52>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8003424:	2301      	movs	r3, #1
	}
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	2000002c 	.word	0x2000002c
 8003434:	20000654 	.word	0x20000654
 8003438:	20000b15 	.word	0x20000b15

0800343c <G0_Read_Skill>:

uint8_t G0_Read_Skill(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint8_t command)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	71fb      	strb	r3, [r7, #7]
	uint8_t state=0;
 800344a:	2300      	movs	r3, #0
 800344c:	75fb      	strb	r3, [r7, #23]
	txBuf[0]=command;
 800344e:	4a15      	ldr	r2, [pc, #84]	; (80034a4 <G0_Read_Skill+0x68>)
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 2);
 8003454:	2302      	movs	r3, #2
 8003456:	2201      	movs	r2, #1
 8003458:	4912      	ldr	r1, [pc, #72]	; (80034a4 <G0_Read_Skill+0x68>)
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f007 f9c3 	bl	800a7e6 <HAL_UART_Transmit>
	state = HAL_UART_Receive(huart_stm, rxBuf, 10, 4);
 8003460:	2304      	movs	r3, #4
 8003462:	220a      	movs	r2, #10
 8003464:	4910      	ldr	r1, [pc, #64]	; (80034a8 <G0_Read_Skill+0x6c>)
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f007 fa4f 	bl	800a90a <HAL_UART_Receive>
 800346c:	4603      	mov	r3, r0
 800346e:	75fb      	strb	r3, [r7, #23]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8003470:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <G0_Read_Skill+0x70>)
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE_SKILL_FORWARD || rxBuf[0]==START_BYTE_SKILL_REVERSE) && (rxBuf[9]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10d      	bne.n	8003498 <G0_Read_Skill+0x5c>
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <G0_Read_Skill+0x6c>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b50      	cmp	r3, #80	; 0x50
 8003482:	d003      	beq.n	800348c <G0_Read_Skill+0x50>
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <G0_Read_Skill+0x6c>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2ba8      	cmp	r3, #168	; 0xa8
 800348a:	d105      	bne.n	8003498 <G0_Read_Skill+0x5c>
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <G0_Read_Skill+0x6c>)
 800348e:	7a5b      	ldrb	r3, [r3, #9]
 8003490:	2b12      	cmp	r3, #18
 8003492:	d101      	bne.n	8003498 <G0_Read_Skill+0x5c>
	{
		return 0;
 8003494:	2300      	movs	r3, #0
 8003496:	e000      	b.n	800349a <G0_Read_Skill+0x5e>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8003498:	2301      	movs	r3, #1
	}
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	2000002c 	.word	0x2000002c
 80034a8:	20000654 	.word	0x20000654
 80034ac:	20000b15 	.word	0x20000b15

080034b0 <Line_Track_Task>:
	}
	else flagG0=0;
}

void Line_Track_Task(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint32_t tick, uint32_t period)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
	static float PHI;
	static float gamma=0;
	static uint32_t ccr_rear_prev=0;
	static uint32_t tick_prev=0;

	if(line_track_task_tick>tick) return;
 80034be:	4b8a      	ldr	r3, [pc, #552]	; (80036e8 <Line_Track_Task+0x238>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	f0c0 82cb 	bcc.w	8003a60 <Line_Track_Task+0x5b0>
	line_track_task_tick = tick + period;
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4413      	add	r3, r2
 80034d0:	4a85      	ldr	r2, [pc, #532]	; (80036e8 <Line_Track_Task+0x238>)
 80034d2:	6013      	str	r3, [r2, #0]

	if(mode == SKILL)
 80034d4:	4b85      	ldr	r3, [pc, #532]	; (80036ec <Line_Track_Task+0x23c>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b52      	cmp	r3, #82	; 0x52
 80034da:	f040 81f0 	bne.w	80038be <Line_Track_Task+0x40e>
	{
		//if(orientation==FORWARD) //ELŐREMENET
		if(orientation==FORWARD)
 80034de:	4b84      	ldr	r3, [pc, #528]	; (80036f0 <Line_Track_Task+0x240>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f040 80de 	bne.w	80036a4 <Line_Track_Task+0x1f4>
		{
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_FORWARD))return;
 80034e8:	2239      	movs	r2, #57	; 0x39
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7ff ffa5 	bl	800343c <G0_Read_Skill>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f040 82b5 	bne.w	8003a64 <Line_Track_Task+0x5b4>

			uint8_t tmp=Lane_Changer(tick);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 ff58 	bl	80043b0 <Lane_Changer>
 8003500:	4603      	mov	r3, r0
 8003502:	75bb      	strb	r3, [r7, #22]
			if(!tmp)v_ref=1100;
 8003504:	7dbb      	ldrb	r3, [r7, #22]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <Line_Track_Task+0x62>
 800350a:	4b7a      	ldr	r3, [pc, #488]	; (80036f4 <Line_Track_Task+0x244>)
 800350c:	4a7a      	ldr	r2, [pc, #488]	; (80036f8 <Line_Track_Task+0x248>)
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e002      	b.n	8003518 <Line_Track_Task+0x68>
			else v_ref=600;
 8003512:	4b78      	ldr	r3, [pc, #480]	; (80036f4 <Line_Track_Task+0x244>)
 8003514:	4a79      	ldr	r2, [pc, #484]	; (80036fc <Line_Track_Task+0x24c>)
 8003516:	601a      	str	r2, [r3, #0]
			if(tmp>1)return;
 8003518:	7dbb      	ldrb	r3, [r7, #22]
 800351a:	2b01      	cmp	r3, #1
 800351c:	f200 82a4 	bhi.w	8003a68 <Line_Track_Task+0x5b8>

			Detect_Node4(huart_debugg, tick);
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	68b8      	ldr	r0, [r7, #8]
 8003524:	f000 feb2 	bl	800428c <Detect_Node4>

			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8003528:	4b75      	ldr	r3, [pc, #468]	; (8003700 <Line_Track_Task+0x250>)
 800352a:	785b      	ldrb	r3, [r3, #1]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 829d 	beq.w	8003a6c <Line_Track_Task+0x5bc>
 8003532:	4b73      	ldr	r3, [pc, #460]	; (8003700 <Line_Track_Task+0x250>)
 8003534:	785b      	ldrb	r3, [r3, #1]
 8003536:	2b04      	cmp	r3, #4
 8003538:	f200 8298 	bhi.w	8003a6c <Line_Track_Task+0x5bc>
			gamma = Skill_Mode(huart_debugg, 0.004, 0.004, tick);
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	eddf 0a71 	vldr	s1, [pc, #452]	; 8003704 <Line_Track_Task+0x254>
 8003542:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8003704 <Line_Track_Task+0x254>
 8003546:	68b8      	ldr	r0, [r7, #8]
 8003548:	f000 fd1a 	bl	8003f80 <Skill_Mode>
 800354c:	eef0 7a40 	vmov.f32	s15, s0
 8003550:	4b6d      	ldr	r3, [pc, #436]	; (8003708 <Line_Track_Task+0x258>)
 8003552:	edc3 7a00 	vstr	s15, [r3]
			//ELSŐSZERVÓ ELŐREMENETBEN
			PHI = atan((L/(L+D_FRONT))*tan(gamma));
 8003556:	4b6c      	ldr	r3, [pc, #432]	; (8003708 <Line_Track_Task+0x258>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd f814 	bl	8000588 <__aeabi_f2d>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	ec43 2b10 	vmov	d0, r2, r3
 8003568:	f00b faca 	bl	800eb00 <tan>
 800356c:	ec51 0b10 	vmov	r0, r1, d0
 8003570:	a359      	add	r3, pc, #356	; (adr r3, 80036d8 <Line_Track_Task+0x228>)
 8003572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003576:	f7fd f85f 	bl	8000638 <__aeabi_dmul>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	ec43 2b17 	vmov	d7, r2, r3
 8003582:	eeb0 0a47 	vmov.f32	s0, s14
 8003586:	eef0 0a67 	vmov.f32	s1, s15
 800358a:	f00b f90d 	bl	800e7a8 <atan>
 800358e:	ec53 2b10 	vmov	r2, r3, d0
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	f7fd fb27 	bl	8000be8 <__aeabi_d2f>
 800359a:	4603      	mov	r3, r0
 800359c:	4a5b      	ldr	r2, [pc, #364]	; (800370c <Line_Track_Task+0x25c>)
 800359e:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_FRONT_CCR_MIDDLE);//balra kanyarodás
 80035a0:	4b5a      	ldr	r3, [pc, #360]	; (800370c <Line_Track_Task+0x25c>)
 80035a2:	edd3 7a00 	vldr	s15, [r3]
 80035a6:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8003710 <Line_Track_Task+0x260>
 80035aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035ae:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003714 <Line_Track_Task+0x264>
 80035b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ba:	ee17 3a90 	vmov	r3, s15
 80035be:	b29b      	uxth	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	4b55      	ldr	r3, [pc, #340]	; (8003718 <Line_Track_Task+0x268>)
 80035c4:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 80035c6:	4b54      	ldr	r3, [pc, #336]	; (8003718 <Line_Track_Task+0x268>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80035ce:	dd04      	ble.n	80035da <Line_Track_Task+0x12a>
			{
				ccr = CCR_FRONT_MAX;
 80035d0:	4b51      	ldr	r3, [pc, #324]	; (8003718 <Line_Track_Task+0x268>)
 80035d2:	f44f 7261 	mov.w	r2, #900	; 0x384
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	e008      	b.n	80035ec <Line_Track_Task+0x13c>
			}
			else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 80035da:	4b4f      	ldr	r3, [pc, #316]	; (8003718 <Line_Track_Task+0x268>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80035e2:	da03      	bge.n	80035ec <Line_Track_Task+0x13c>
			{
				ccr = CCR_FRONT_MIN;
 80035e4:	4b4c      	ldr	r3, [pc, #304]	; (8003718 <Line_Track_Task+0x268>)
 80035e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80035ea:	601a      	str	r2, [r3, #0]
			}
			TIM2->CCR1 = ccr;
 80035ec:	4b4a      	ldr	r3, [pc, #296]	; (8003718 <Line_Track_Task+0x268>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035f4:	635a      	str	r2, [r3, #52]	; 0x34
			//HÁTSÓSZERVÓ ELŐREMENETBEN
			PHI = atan((L/(L+D_REAR))*tan(gamma))/3;
 80035f6:	4b44      	ldr	r3, [pc, #272]	; (8003708 <Line_Track_Task+0x258>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fc ffc4 	bl	8000588 <__aeabi_f2d>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	ec43 2b10 	vmov	d0, r2, r3
 8003608:	f00b fa7a 	bl	800eb00 <tan>
 800360c:	ec51 0b10 	vmov	r0, r1, d0
 8003610:	a333      	add	r3, pc, #204	; (adr r3, 80036e0 <Line_Track_Task+0x230>)
 8003612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003616:	f7fd f80f 	bl	8000638 <__aeabi_dmul>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	ec43 2b17 	vmov	d7, r2, r3
 8003622:	eeb0 0a47 	vmov.f32	s0, s14
 8003626:	eef0 0a67 	vmov.f32	s1, s15
 800362a:	f00b f8bd 	bl	800e7a8 <atan>
 800362e:	ec51 0b10 	vmov	r0, r1, d0
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	4b39      	ldr	r3, [pc, #228]	; (800371c <Line_Track_Task+0x26c>)
 8003638:	f7fd f928 	bl	800088c <__aeabi_ddiv>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4610      	mov	r0, r2
 8003642:	4619      	mov	r1, r3
 8003644:	f7fd fad0 	bl	8000be8 <__aeabi_d2f>
 8003648:	4603      	mov	r3, r0
 800364a:	4a30      	ldr	r2, [pc, #192]	; (800370c <Line_Track_Task+0x25c>)
 800364c:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_REAR_CCR_MIDDLE);//balra kanyarodás
 800364e:	4b2f      	ldr	r3, [pc, #188]	; (800370c <Line_Track_Task+0x25c>)
 8003650:	edd3 7a00 	vldr	s15, [r3]
 8003654:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003710 <Line_Track_Task+0x260>
 8003658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800365c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003720 <Line_Track_Task+0x270>
 8003660:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003668:	ee17 3a90 	vmov	r3, s15
 800366c:	b29b      	uxth	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	4b29      	ldr	r3, [pc, #164]	; (8003718 <Line_Track_Task+0x268>)
 8003672:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_REAR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8003674:	4b28      	ldr	r3, [pc, #160]	; (8003718 <Line_Track_Task+0x268>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f5b3 7f5c 	cmp.w	r3, #880	; 0x370
 800367c:	dd04      	ble.n	8003688 <Line_Track_Task+0x1d8>
			{
				ccr = CCR_REAR_MAX;
 800367e:	4b26      	ldr	r3, [pc, #152]	; (8003718 <Line_Track_Task+0x268>)
 8003680:	f44f 725c 	mov.w	r2, #880	; 0x370
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	e008      	b.n	800369a <Line_Track_Task+0x1ea>
			}
			else if(ccr < CCR_REAR_MIN)//egyik irányba se
 8003688:	4b23      	ldr	r3, [pc, #140]	; (8003718 <Line_Track_Task+0x268>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8003690:	da03      	bge.n	800369a <Line_Track_Task+0x1ea>
			{
				ccr = CCR_REAR_MIN;
 8003692:	4b21      	ldr	r3, [pc, #132]	; (8003718 <Line_Track_Task+0x268>)
 8003694:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8003698:	601a      	str	r2, [r3, #0]
			}
			TIM1->CCR4 = ccr;
 800369a:	4b1f      	ldr	r3, [pc, #124]	; (8003718 <Line_Track_Task+0x268>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b21      	ldr	r3, [pc, #132]	; (8003724 <Line_Track_Task+0x274>)
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
 80036a2:	e1a8      	b.n	80039f6 <Line_Track_Task+0x546>
		}
		else if(orientation==REVERSE)//TOLATÁS
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <Line_Track_Task+0x240>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	f040 81a4 	bne.w	80039f6 <Line_Track_Task+0x546>
		{
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_REVERSE))return;
 80036ae:	2291      	movs	r2, #145	; 0x91
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f7ff fec2 	bl	800343c <G0_Read_Skill>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f040 81d8 	bne.w	8003a70 <Line_Track_Task+0x5c0>

			uint8_t tmp=Lane_Changer(tick);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fe75 	bl	80043b0 <Lane_Changer>
 80036c6:	4603      	mov	r3, r0
 80036c8:	75fb      	strb	r3, [r7, #23]
			if(!tmp)v_ref=-1100;
 80036ca:	7dfb      	ldrb	r3, [r7, #23]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d12d      	bne.n	800372c <Line_Track_Task+0x27c>
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <Line_Track_Task+0x244>)
 80036d2:	4a15      	ldr	r2, [pc, #84]	; (8003728 <Line_Track_Task+0x278>)
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e02c      	b.n	8003732 <Line_Track_Task+0x282>
 80036d8:	c4830201 	.word	0xc4830201
 80036dc:	3fe73a26 	.word	0x3fe73a26
 80036e0:	a3f47e90 	.word	0xa3f47e90
 80036e4:	3fe8fd1f 	.word	0x3fe8fd1f
 80036e8:	20000030 	.word	0x20000030
 80036ec:	2000029e 	.word	0x2000029e
 80036f0:	200002a8 	.word	0x200002a8
 80036f4:	200002a0 	.word	0x200002a0
 80036f8:	44898000 	.word	0x44898000
 80036fc:	44160000 	.word	0x44160000
 8003700:	20000654 	.word	0x20000654
 8003704:	3b83126f 	.word	0x3b83126f
 8003708:	20000660 	.word	0x20000660
 800370c:	20000664 	.word	0x20000664
 8003710:	44af0000 	.word	0x44af0000
 8003714:	442d0000 	.word	0x442d0000
 8003718:	20000034 	.word	0x20000034
 800371c:	40080000 	.word	0x40080000
 8003720:	441c8000 	.word	0x441c8000
 8003724:	40010000 	.word	0x40010000
 8003728:	c4898000 	.word	0xc4898000
			else v_ref=-600;
 800372c:	4bb8      	ldr	r3, [pc, #736]	; (8003a10 <Line_Track_Task+0x560>)
 800372e:	4ab9      	ldr	r2, [pc, #740]	; (8003a14 <Line_Track_Task+0x564>)
 8003730:	601a      	str	r2, [r3, #0]
			if(tmp>1)return;
 8003732:	7dfb      	ldrb	r3, [r7, #23]
 8003734:	2b01      	cmp	r3, #1
 8003736:	f200 819d 	bhi.w	8003a74 <Line_Track_Task+0x5c4>

			Detect_Node4(huart_debugg, tick);
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	68b8      	ldr	r0, [r7, #8]
 800373e:	f000 fda5 	bl	800428c <Detect_Node4>

			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8003742:	4bb5      	ldr	r3, [pc, #724]	; (8003a18 <Line_Track_Task+0x568>)
 8003744:	785b      	ldrb	r3, [r3, #1]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8196 	beq.w	8003a78 <Line_Track_Task+0x5c8>
 800374c:	4bb2      	ldr	r3, [pc, #712]	; (8003a18 <Line_Track_Task+0x568>)
 800374e:	785b      	ldrb	r3, [r3, #1]
 8003750:	2b04      	cmp	r3, #4
 8003752:	f200 8191 	bhi.w	8003a78 <Line_Track_Task+0x5c8>
			gamma = Skill_Mode(huart_debugg, 0.003, 0.032, tick);
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8003a1c <Line_Track_Task+0x56c>
 800375c:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8003a20 <Line_Track_Task+0x570>
 8003760:	68b8      	ldr	r0, [r7, #8]
 8003762:	f000 fc0d 	bl	8003f80 <Skill_Mode>
 8003766:	eef0 7a40 	vmov.f32	s15, s0
 800376a:	4bae      	ldr	r3, [pc, #696]	; (8003a24 <Line_Track_Task+0x574>)
 800376c:	edc3 7a00 	vstr	s15, [r3]
			//HÁTSÓ SZERVÓ HÁTRAMENETBEN
			PHI = atan((L/(L+D_REAR))*tan(gamma));////////////////////kiszámolni kézzel
 8003770:	4bac      	ldr	r3, [pc, #688]	; (8003a24 <Line_Track_Task+0x574>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7fc ff07 	bl	8000588 <__aeabi_f2d>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	ec43 2b10 	vmov	d0, r2, r3
 8003782:	f00b f9bd 	bl	800eb00 <tan>
 8003786:	ec51 0b10 	vmov	r0, r1, d0
 800378a:	a39d      	add	r3, pc, #628	; (adr r3, 8003a00 <Line_Track_Task+0x550>)
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	f7fc ff52 	bl	8000638 <__aeabi_dmul>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	ec43 2b17 	vmov	d7, r2, r3
 800379c:	eeb0 0a47 	vmov.f32	s0, s14
 80037a0:	eef0 0a67 	vmov.f32	s1, s15
 80037a4:	f00b f800 	bl	800e7a8 <atan>
 80037a8:	ec53 2b10 	vmov	r2, r3, d0
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	f7fd fa1a 	bl	8000be8 <__aeabi_d2f>
 80037b4:	4603      	mov	r3, r0
 80037b6:	4a9c      	ldr	r2, [pc, #624]	; (8003a28 <Line_Track_Task+0x578>)
 80037b8:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_REAR_CCR_MIDDLE);
 80037ba:	4b9b      	ldr	r3, [pc, #620]	; (8003a28 <Line_Track_Task+0x578>)
 80037bc:	edd3 7a00 	vldr	s15, [r3]
 80037c0:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8003a2c <Line_Track_Task+0x57c>
 80037c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037c8:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8003a30 <Line_Track_Task+0x580>
 80037cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037d4:	ee17 3a90 	vmov	r3, s15
 80037d8:	b29b      	uxth	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	4b95      	ldr	r3, [pc, #596]	; (8003a34 <Line_Track_Task+0x584>)
 80037de:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_REAR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 80037e0:	4b94      	ldr	r3, [pc, #592]	; (8003a34 <Line_Track_Task+0x584>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f5b3 7f5c 	cmp.w	r3, #880	; 0x370
 80037e8:	dd04      	ble.n	80037f4 <Line_Track_Task+0x344>
			{
				ccr = CCR_REAR_MAX;
 80037ea:	4b92      	ldr	r3, [pc, #584]	; (8003a34 <Line_Track_Task+0x584>)
 80037ec:	f44f 725c 	mov.w	r2, #880	; 0x370
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e008      	b.n	8003806 <Line_Track_Task+0x356>
			}
			else if(ccr < CCR_REAR_MIN)//egyik irányba se
 80037f4:	4b8f      	ldr	r3, [pc, #572]	; (8003a34 <Line_Track_Task+0x584>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 80037fc:	da03      	bge.n	8003806 <Line_Track_Task+0x356>
			{
				ccr = CCR_REAR_MIN;
 80037fe:	4b8d      	ldr	r3, [pc, #564]	; (8003a34 <Line_Track_Task+0x584>)
 8003800:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8003804:	601a      	str	r2, [r3, #0]
			}
			TIM1->CCR4 = ccr;
 8003806:	4b8b      	ldr	r3, [pc, #556]	; (8003a34 <Line_Track_Task+0x584>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b8b      	ldr	r3, [pc, #556]	; (8003a38 <Line_Track_Task+0x588>)
 800380c:	641a      	str	r2, [r3, #64]	; 0x40

			//ELSŐSZERVÓ HÁTRAMENETBEN
			PHI = atan((L/(L+D_FRONT))*tan(gamma))/3;
 800380e:	4b85      	ldr	r3, [pc, #532]	; (8003a24 <Line_Track_Task+0x574>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7fc feb8 	bl	8000588 <__aeabi_f2d>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	ec43 2b10 	vmov	d0, r2, r3
 8003820:	f00b f96e 	bl	800eb00 <tan>
 8003824:	ec51 0b10 	vmov	r0, r1, d0
 8003828:	a377      	add	r3, pc, #476	; (adr r3, 8003a08 <Line_Track_Task+0x558>)
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f7fc ff03 	bl	8000638 <__aeabi_dmul>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	ec43 2b17 	vmov	d7, r2, r3
 800383a:	eeb0 0a47 	vmov.f32	s0, s14
 800383e:	eef0 0a67 	vmov.f32	s1, s15
 8003842:	f00a ffb1 	bl	800e7a8 <atan>
 8003846:	ec51 0b10 	vmov	r0, r1, d0
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	4b7b      	ldr	r3, [pc, #492]	; (8003a3c <Line_Track_Task+0x58c>)
 8003850:	f7fd f81c 	bl	800088c <__aeabi_ddiv>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4610      	mov	r0, r2
 800385a:	4619      	mov	r1, r3
 800385c:	f7fd f9c4 	bl	8000be8 <__aeabi_d2f>
 8003860:	4603      	mov	r3, r0
 8003862:	4a71      	ldr	r2, [pc, #452]	; (8003a28 <Line_Track_Task+0x578>)
 8003864:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_FRONT_CCR_MIDDLE);//balra kanyarodás
 8003866:	4b70      	ldr	r3, [pc, #448]	; (8003a28 <Line_Track_Task+0x578>)
 8003868:	edd3 7a00 	vldr	s15, [r3]
 800386c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8003a2c <Line_Track_Task+0x57c>
 8003870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003874:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003a40 <Line_Track_Task+0x590>
 8003878:	ee77 7a87 	vadd.f32	s15, s15, s14
 800387c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003880:	ee17 3a90 	vmov	r3, s15
 8003884:	b29b      	uxth	r3, r3
 8003886:	461a      	mov	r2, r3
 8003888:	4b6a      	ldr	r3, [pc, #424]	; (8003a34 <Line_Track_Task+0x584>)
 800388a:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 800388c:	4b69      	ldr	r3, [pc, #420]	; (8003a34 <Line_Track_Task+0x584>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003894:	dd04      	ble.n	80038a0 <Line_Track_Task+0x3f0>
			{
				ccr = CCR_FRONT_MAX;
 8003896:	4b67      	ldr	r3, [pc, #412]	; (8003a34 <Line_Track_Task+0x584>)
 8003898:	f44f 7261 	mov.w	r2, #900	; 0x384
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e008      	b.n	80038b2 <Line_Track_Task+0x402>
			}
			else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 80038a0:	4b64      	ldr	r3, [pc, #400]	; (8003a34 <Line_Track_Task+0x584>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80038a8:	da03      	bge.n	80038b2 <Line_Track_Task+0x402>
			{
				ccr = CCR_FRONT_MIN;
 80038aa:	4b62      	ldr	r3, [pc, #392]	; (8003a34 <Line_Track_Task+0x584>)
 80038ac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80038b0:	601a      	str	r2, [r3, #0]
			}
			TIM2->CCR1 = ccr;
 80038b2:	4b60      	ldr	r3, [pc, #384]	; (8003a34 <Line_Track_Task+0x584>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038ba:	635a      	str	r2, [r3, #52]	; 0x34
 80038bc:	e09b      	b.n	80039f6 <Line_Track_Task+0x546>
		}

	}
	/*****Gyorsasági pálya üzemmód******/
	else if(mode == FAST)
 80038be:	4b61      	ldr	r3, [pc, #388]	; (8003a44 <Line_Track_Task+0x594>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b3f      	cmp	r3, #63	; 0x3f
 80038c4:	f040 8097 	bne.w	80039f6 <Line_Track_Task+0x546>
	{
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7ff fd82 	bl	80033d4 <G0_Read_Fast>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f040 80d2 	bne.w	8003a7c <Line_Track_Task+0x5cc>
		if (LINE_CNT<1 || LINE_CNT > 3) return;//ha nincs vonal a kocsi alatt
 80038d8:	4b4f      	ldr	r3, [pc, #316]	; (8003a18 <Line_Track_Task+0x568>)
 80038da:	785b      	ldrb	r3, [r3, #1]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80cf 	beq.w	8003a80 <Line_Track_Task+0x5d0>
 80038e2:	4b4d      	ldr	r3, [pc, #308]	; (8003a18 <Line_Track_Task+0x568>)
 80038e4:	785b      	ldrb	r3, [r3, #1]
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	f200 80ca 	bhi.w	8003a80 <Line_Track_Task+0x5d0>
		gamma = Fast_Mode(huart_debugg,tick);
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	68b8      	ldr	r0, [r7, #8]
 80038f0:	f000 f8ca 	bl	8003a88 <Fast_Mode>
 80038f4:	eef0 7a40 	vmov.f32	s15, s0
 80038f8:	4b4a      	ldr	r3, [pc, #296]	; (8003a24 <Line_Track_Task+0x574>)
 80038fa:	edc3 7a00 	vstr	s15, [r3]
		PHI = atan((L/(L+D_FRONT))*tan(gamma));
 80038fe:	4b49      	ldr	r3, [pc, #292]	; (8003a24 <Line_Track_Task+0x574>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fc fe40 	bl	8000588 <__aeabi_f2d>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	ec43 2b10 	vmov	d0, r2, r3
 8003910:	f00b f8f6 	bl	800eb00 <tan>
 8003914:	ec51 0b10 	vmov	r0, r1, d0
 8003918:	a33b      	add	r3, pc, #236	; (adr r3, 8003a08 <Line_Track_Task+0x558>)
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	f7fc fe8b 	bl	8000638 <__aeabi_dmul>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	ec43 2b17 	vmov	d7, r2, r3
 800392a:	eeb0 0a47 	vmov.f32	s0, s14
 800392e:	eef0 0a67 	vmov.f32	s1, s15
 8003932:	f00a ff39 	bl	800e7a8 <atan>
 8003936:	ec53 2b10 	vmov	r2, r3, d0
 800393a:	4610      	mov	r0, r2
 800393c:	4619      	mov	r1, r3
 800393e:	f7fd f953 	bl	8000be8 <__aeabi_d2f>
 8003942:	4603      	mov	r3, r0
 8003944:	4a38      	ldr	r2, [pc, #224]	; (8003a28 <Line_Track_Task+0x578>)
 8003946:	6013      	str	r3, [r2, #0]
		if(v>2000) ccr = (uint16_t)(-SERVO_M_STRAIGHT * PHI + SERVO_FRONT_CCR_MIDDLE);
 8003948:	4b3f      	ldr	r3, [pc, #252]	; (8003a48 <Line_Track_Task+0x598>)
 800394a:	edd3 7a00 	vldr	s15, [r3]
 800394e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003a4c <Line_Track_Task+0x59c>
 8003952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395a:	dd13      	ble.n	8003984 <Line_Track_Task+0x4d4>
 800395c:	4b32      	ldr	r3, [pc, #200]	; (8003a28 <Line_Track_Task+0x578>)
 800395e:	edd3 7a00 	vldr	s15, [r3]
 8003962:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003a50 <Line_Track_Task+0x5a0>
 8003966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800396a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003a40 <Line_Track_Task+0x590>
 800396e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003976:	ee17 3a90 	vmov	r3, s15
 800397a:	b29b      	uxth	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <Line_Track_Task+0x584>)
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e012      	b.n	80039aa <Line_Track_Task+0x4fa>
		else ccr =(uint16_t)(-SERVO_M_CORNER * PHI + SERVO_FRONT_CCR_MIDDLE);
 8003984:	4b28      	ldr	r3, [pc, #160]	; (8003a28 <Line_Track_Task+0x578>)
 8003986:	edd3 7a00 	vldr	s15, [r3]
 800398a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003a54 <Line_Track_Task+0x5a4>
 800398e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003992:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003a40 <Line_Track_Task+0x590>
 8003996:	ee77 7a87 	vadd.f32	s15, s15, s14
 800399a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800399e:	ee17 3a90 	vmov	r3, s15
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	4b23      	ldr	r3, [pc, #140]	; (8003a34 <Line_Track_Task+0x584>)
 80039a8:	601a      	str	r2, [r3, #0]
		if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 80039aa:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <Line_Track_Task+0x584>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80039b2:	dd04      	ble.n	80039be <Line_Track_Task+0x50e>
		{
			ccr = CCR_FRONT_MAX;
 80039b4:	4b1f      	ldr	r3, [pc, #124]	; (8003a34 <Line_Track_Task+0x584>)
 80039b6:	f44f 7261 	mov.w	r2, #900	; 0x384
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e008      	b.n	80039d0 <Line_Track_Task+0x520>
		}
		else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 80039be:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <Line_Track_Task+0x584>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80039c6:	da03      	bge.n	80039d0 <Line_Track_Task+0x520>
		{
			ccr = CCR_FRONT_MIN;
 80039c8:	4b1a      	ldr	r3, [pc, #104]	; (8003a34 <Line_Track_Task+0x584>)
 80039ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80039ce:	601a      	str	r2, [r3, #0]
		}
		TIM2->CCR1 = ccr;
 80039d0:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <Line_Track_Task+0x584>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039d8:	635a      	str	r2, [r3, #52]	; 0x34
		if(ccr_rear_prev!=SERVO_REAR_CCR_MIDDLE) TIM1->CCR4 = SERVO_REAR_CCR_MIDDLE;
 80039da:	4b1f      	ldr	r3, [pc, #124]	; (8003a58 <Line_Track_Task+0x5a8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f240 2272 	movw	r2, #626	; 0x272
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d003      	beq.n	80039ee <Line_Track_Task+0x53e>
 80039e6:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <Line_Track_Task+0x588>)
 80039e8:	f240 2272 	movw	r2, #626	; 0x272
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40
		ccr_rear_prev=SERVO_REAR_CCR_MIDDLE;
 80039ee:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <Line_Track_Task+0x5a8>)
 80039f0:	f240 2272 	movw	r2, #626	; 0x272
 80039f4:	601a      	str	r2, [r3, #0]
	}

	tick_prev=tick;
 80039f6:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <Line_Track_Task+0x5ac>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	e041      	b.n	8003a82 <Line_Track_Task+0x5d2>
 80039fe:	bf00      	nop
 8003a00:	a3f47e90 	.word	0xa3f47e90
 8003a04:	3fe8fd1f 	.word	0x3fe8fd1f
 8003a08:	c4830201 	.word	0xc4830201
 8003a0c:	3fe73a26 	.word	0x3fe73a26
 8003a10:	200002a0 	.word	0x200002a0
 8003a14:	c4160000 	.word	0xc4160000
 8003a18:	20000654 	.word	0x20000654
 8003a1c:	3d03126f 	.word	0x3d03126f
 8003a20:	3b449ba6 	.word	0x3b449ba6
 8003a24:	20000660 	.word	0x20000660
 8003a28:	20000664 	.word	0x20000664
 8003a2c:	44af0000 	.word	0x44af0000
 8003a30:	441c8000 	.word	0x441c8000
 8003a34:	20000034 	.word	0x20000034
 8003a38:	40010000 	.word	0x40010000
 8003a3c:	40080000 	.word	0x40080000
 8003a40:	442d0000 	.word	0x442d0000
 8003a44:	2000029e 	.word	0x2000029e
 8003a48:	2000063c 	.word	0x2000063c
 8003a4c:	44fa0000 	.word	0x44fa0000
 8003a50:	c4610000 	.word	0xc4610000
 8003a54:	c4c1c000 	.word	0xc4c1c000
 8003a58:	20000668 	.word	0x20000668
 8003a5c:	2000066c 	.word	0x2000066c
	if(line_track_task_tick>tick) return;
 8003a60:	bf00      	nop
 8003a62:	e00e      	b.n	8003a82 <Line_Track_Task+0x5d2>
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_FORWARD))return;
 8003a64:	bf00      	nop
 8003a66:	e00c      	b.n	8003a82 <Line_Track_Task+0x5d2>
			if(tmp>1)return;
 8003a68:	bf00      	nop
 8003a6a:	e00a      	b.n	8003a82 <Line_Track_Task+0x5d2>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8003a6c:	bf00      	nop
 8003a6e:	e008      	b.n	8003a82 <Line_Track_Task+0x5d2>
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_REVERSE))return;
 8003a70:	bf00      	nop
 8003a72:	e006      	b.n	8003a82 <Line_Track_Task+0x5d2>
			if(tmp>1)return;
 8003a74:	bf00      	nop
 8003a76:	e004      	b.n	8003a82 <Line_Track_Task+0x5d2>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8003a78:	bf00      	nop
 8003a7a:	e002      	b.n	8003a82 <Line_Track_Task+0x5d2>
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 8003a7c:	bf00      	nop
 8003a7e:	e000      	b.n	8003a82 <Line_Track_Task+0x5d2>
		if (LINE_CNT<1 || LINE_CNT > 3) return;//ha nincs vonal a kocsi alatt
 8003a80:	bf00      	nop
}
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <Fast_Mode>:

float Fast_Mode(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 8003a88:	b5b0      	push	{r4, r5, r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
	static float delta;
	static float gamma;

	static float kD=K_D;

	uint32_t sum=0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
	uint32_t dist=0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]


	if(swState[0] == FREERUN_MODE)
 8003a9a:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <Fast_Mode+0x154>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	f040 8084 	bne.w	8003bac <Fast_Mode+0x124>
	{
		/*****Gyorsító jelölés figyelése (szaggatott 3 vonal)*****/
		if(LINE_CNT != lineCnt_prev && (!Free_Run_State || Free_Run_State==2) && (LINE_CNT==1 || LINE_CNT==3)) //ha változik az alattunk lévő vonalak száma
 8003aa4:	4b4e      	ldr	r3, [pc, #312]	; (8003be0 <Fast_Mode+0x158>)
 8003aa6:	785a      	ldrb	r2, [r3, #1]
 8003aa8:	4b4e      	ldr	r3, [pc, #312]	; (8003be4 <Fast_Mode+0x15c>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d056      	beq.n	8003b5e <Fast_Mode+0xd6>
 8003ab0:	4b4d      	ldr	r3, [pc, #308]	; (8003be8 <Fast_Mode+0x160>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <Fast_Mode+0x38>
 8003ab8:	4b4b      	ldr	r3, [pc, #300]	; (8003be8 <Fast_Mode+0x160>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d14e      	bne.n	8003b5e <Fast_Mode+0xd6>
 8003ac0:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <Fast_Mode+0x158>)
 8003ac2:	785b      	ldrb	r3, [r3, #1]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d003      	beq.n	8003ad0 <Fast_Mode+0x48>
 8003ac8:	4b45      	ldr	r3, [pc, #276]	; (8003be0 <Fast_Mode+0x158>)
 8003aca:	785b      	ldrb	r3, [r3, #1]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d146      	bne.n	8003b5e <Fast_Mode+0xd6>
		{
			dt[index] = t - t_prev;
 8003ad0:	4b46      	ldr	r3, [pc, #280]	; (8003bec <Fast_Mode+0x164>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a46      	ldr	r2, [pc, #280]	; (8003bf0 <Fast_Mode+0x168>)
 8003ad6:	7812      	ldrb	r2, [r2, #0]
 8003ad8:	4611      	mov	r1, r2
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	4a45      	ldr	r2, [pc, #276]	; (8003bf4 <Fast_Mode+0x16c>)
 8003ae0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			sum=dt[0] + dt[1] + dt[2] + dt[3]+ dt[4]+dt[5] + dt[6] + dt[7];
 8003ae4:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <Fast_Mode+0x16c>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4b42      	ldr	r3, [pc, #264]	; (8003bf4 <Fast_Mode+0x16c>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	441a      	add	r2, r3
 8003aee:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <Fast_Mode+0x16c>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	441a      	add	r2, r3
 8003af4:	4b3f      	ldr	r3, [pc, #252]	; (8003bf4 <Fast_Mode+0x16c>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	441a      	add	r2, r3
 8003afa:	4b3e      	ldr	r3, [pc, #248]	; (8003bf4 <Fast_Mode+0x16c>)
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	441a      	add	r2, r3
 8003b00:	4b3c      	ldr	r3, [pc, #240]	; (8003bf4 <Fast_Mode+0x16c>)
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	441a      	add	r2, r3
 8003b06:	4b3b      	ldr	r3, [pc, #236]	; (8003bf4 <Fast_Mode+0x16c>)
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	441a      	add	r2, r3
 8003b0c:	4b39      	ldr	r3, [pc, #228]	; (8003bf4 <Fast_Mode+0x16c>)
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
			if((sum > 400) && (sum < 1100))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003b1a:	d910      	bls.n	8003b3e <Fast_Mode+0xb6>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f240 424b 	movw	r2, #1099	; 0x44b
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d80b      	bhi.n	8003b3e <Fast_Mode+0xb6>
			{
				v_ref=5500;
 8003b26:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <Fast_Mode+0x170>)
 8003b28:	4a34      	ldr	r2, [pc, #208]	; (8003bfc <Fast_Mode+0x174>)
 8003b2a:	601a      	str	r2, [r3, #0]
				LED_B(1);
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b32:	4833      	ldr	r0, [pc, #204]	; (8003c00 <Fast_Mode+0x178>)
 8003b34:	f004 f904 	bl	8007d40 <HAL_GPIO_WritePin>
				Free_Run_State=1;
 8003b38:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <Fast_Mode+0x160>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	701a      	strb	r2, [r3, #0]
			}
			index++;
 8003b3e:	4b2c      	ldr	r3, [pc, #176]	; (8003bf0 <Fast_Mode+0x168>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	3301      	adds	r3, #1
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4b2a      	ldr	r3, [pc, #168]	; (8003bf0 <Fast_Mode+0x168>)
 8003b48:	701a      	strb	r2, [r3, #0]
			if(index>7) index=0;
 8003b4a:	4b29      	ldr	r3, [pc, #164]	; (8003bf0 <Fast_Mode+0x168>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b07      	cmp	r3, #7
 8003b50:	d902      	bls.n	8003b58 <Fast_Mode+0xd0>
 8003b52:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <Fast_Mode+0x168>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
			t_prev = t;
 8003b58:	4a24      	ldr	r2, [pc, #144]	; (8003bec <Fast_Mode+0x164>)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6013      	str	r3, [r2, #0]
		}
		/* A memóriajellegű statikus változók segítségével vizsgáljuk a szaggatott vonalat*/
		lineCnt_prev = LINE_CNT; //az előző értéket a jelenlegihez hangoljuk
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <Fast_Mode+0x158>)
 8003b60:	785a      	ldrb	r2, [r3, #1]
 8003b62:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <Fast_Mode+0x15c>)
 8003b64:	701a      	strb	r2, [r3, #0]

		/*****Lassító jelölés figyelése (folytonos 3 vonal)*****/
		if(LINE_CNT > 1 && (!Free_Run_State || Free_Run_State==1)) //ha 3 vonalat érzékelünk
 8003b66:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <Fast_Mode+0x158>)
 8003b68:	785b      	ldrb	r3, [r3, #1]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d91a      	bls.n	8003ba4 <Fast_Mode+0x11c>
 8003b6e:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <Fast_Mode+0x160>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <Fast_Mode+0xf6>
 8003b76:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <Fast_Mode+0x160>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d112      	bne.n	8003ba4 <Fast_Mode+0x11c>
		{
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 8003b7e:	4b21      	ldr	r3, [pc, #132]	; (8003c04 <Fast_Mode+0x17c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3350      	adds	r3, #80	; 0x50
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d952      	bls.n	8003c30 <Fast_Mode+0x1a8>
			{
				v_ref = 1600;
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <Fast_Mode+0x170>)
 8003b8c:	4a1e      	ldr	r2, [pc, #120]	; (8003c08 <Fast_Mode+0x180>)
 8003b8e:	601a      	str	r2, [r3, #0]
				Free_Run_State=2;
 8003b90:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <Fast_Mode+0x160>)
 8003b92:	2202      	movs	r2, #2
 8003b94:	701a      	strb	r2, [r3, #0]
				LED_B(0);
 8003b96:	2201      	movs	r2, #1
 8003b98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b9c:	4818      	ldr	r0, [pc, #96]	; (8003c00 <Fast_Mode+0x178>)
 8003b9e:	f004 f8cf 	bl	8007d40 <HAL_GPIO_WritePin>
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 8003ba2:	e045      	b.n	8003c30 <Fast_Mode+0x1a8>
			}
		}
		else //ha 1 vonalat érzékelünk
		{
			start3time = t;
 8003ba4:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <Fast_Mode+0x17c>)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	e041      	b.n	8003c30 <Fast_Mode+0x1a8>
		}
		/*****FÉKEZÉS NEGATÍV PWM-EL*******/
	}

	/*****SC üzemmód******/
	else if(swState[0]==SC_MODE)
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <Fast_Mode+0x154>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d13d      	bne.n	8003c30 <Fast_Mode+0x1a8>
	{
		dist=(((uint16_t)rxBuf[5])<<8) | ((uint16_t)rxBuf[6]);
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <Fast_Mode+0x158>)
 8003bb6:	795b      	ldrb	r3, [r3, #5]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	4a09      	ldr	r2, [pc, #36]	; (8003be0 <Fast_Mode+0x158>)
 8003bbc:	7992      	ldrb	r2, [r2, #6]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60bb      	str	r3, [r7, #8]
		if(dist>1000 || rxBuf[4]) v_ref=1500; //ha tul messze vana  SC vagy érvénytelen az olvasás
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bc8:	d803      	bhi.n	8003bd2 <Fast_Mode+0x14a>
 8003bca:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <Fast_Mode+0x158>)
 8003bcc:	791b      	ldrb	r3, [r3, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d020      	beq.n	8003c14 <Fast_Mode+0x18c>
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <Fast_Mode+0x170>)
 8003bd4:	4a0d      	ldr	r2, [pc, #52]	; (8003c0c <Fast_Mode+0x184>)
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e02a      	b.n	8003c30 <Fast_Mode+0x1a8>
 8003bda:	bf00      	nop
 8003bdc:	20000294 	.word	0x20000294
 8003be0:	20000654 	.word	0x20000654
 8003be4:	20000038 	.word	0x20000038
 8003be8:	20000670 	.word	0x20000670
 8003bec:	20000674 	.word	0x20000674
 8003bf0:	20000678 	.word	0x20000678
 8003bf4:	2000003c 	.word	0x2000003c
 8003bf8:	200002a0 	.word	0x200002a0
 8003bfc:	45abe000 	.word	0x45abe000
 8003c00:	40020400 	.word	0x40020400
 8003c04:	2000067c 	.word	0x2000067c
 8003c08:	44c80000 	.word	0x44c80000
 8003c0c:	44bb8000 	.word	0x44bb8000
 8003c10:	43fa0000 	.word	0x43fa0000
		else v_ref = 2*(float)dist-500;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c22:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8003c10 <Fast_Mode+0x188>
 8003c26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c2a:	4bc1      	ldr	r3, [pc, #772]	; (8003f30 <Fast_Mode+0x4a8>)
 8003c2c:	edc3 7a00 	vstr	s15, [r3]
	}

	x_elso=(float)rxBuf[2]*204/255.0-102;//248
 8003c30:	4bc0      	ldr	r3, [pc, #768]	; (8003f34 <Fast_Mode+0x4ac>)
 8003c32:	789b      	ldrb	r3, [r3, #2]
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3c:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8003f38 <Fast_Mode+0x4b0>
 8003c40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c44:	ee17 0a90 	vmov	r0, s15
 8003c48:	f7fc fc9e 	bl	8000588 <__aeabi_f2d>
 8003c4c:	a3b0      	add	r3, pc, #704	; (adr r3, 8003f10 <Fast_Mode+0x488>)
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	f7fc fe1b 	bl	800088c <__aeabi_ddiv>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	4bb6      	ldr	r3, [pc, #728]	; (8003f3c <Fast_Mode+0x4b4>)
 8003c64:	f7fc fb30 	bl	80002c8 <__aeabi_dsub>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f7fc ffba 	bl	8000be8 <__aeabi_d2f>
 8003c74:	4603      	mov	r3, r0
 8003c76:	4ab2      	ldr	r2, [pc, #712]	; (8003f40 <Fast_Mode+0x4b8>)
 8003c78:	6013      	str	r3, [r2, #0]
	x_hatso=(float)rxBuf[3]*204/255.0-102; //244
 8003c7a:	4bae      	ldr	r3, [pc, #696]	; (8003f34 <Fast_Mode+0x4ac>)
 8003c7c:	78db      	ldrb	r3, [r3, #3]
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c86:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8003f38 <Fast_Mode+0x4b0>
 8003c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c8e:	ee17 0a90 	vmov	r0, s15
 8003c92:	f7fc fc79 	bl	8000588 <__aeabi_f2d>
 8003c96:	a39e      	add	r3, pc, #632	; (adr r3, 8003f10 <Fast_Mode+0x488>)
 8003c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9c:	f7fc fdf6 	bl	800088c <__aeabi_ddiv>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	4ba3      	ldr	r3, [pc, #652]	; (8003f3c <Fast_Mode+0x4b4>)
 8003cae:	f7fc fb0b 	bl	80002c8 <__aeabi_dsub>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f7fc ff95 	bl	8000be8 <__aeabi_d2f>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4aa0      	ldr	r2, [pc, #640]	; (8003f44 <Fast_Mode+0x4bc>)
 8003cc2:	6013      	str	r3, [r2, #0]
	delta=atan((float)(x_elso-x_hatso)/L_SENSOR);
 8003cc4:	4b9e      	ldr	r3, [pc, #632]	; (8003f40 <Fast_Mode+0x4b8>)
 8003cc6:	ed93 7a00 	vldr	s14, [r3]
 8003cca:	4b9e      	ldr	r3, [pc, #632]	; (8003f44 <Fast_Mode+0x4bc>)
 8003ccc:	edd3 7a00 	vldr	s15, [r3]
 8003cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cd4:	ee17 0a90 	vmov	r0, s15
 8003cd8:	f7fc fc56 	bl	8000588 <__aeabi_f2d>
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	4b99      	ldr	r3, [pc, #612]	; (8003f48 <Fast_Mode+0x4c0>)
 8003ce2:	f7fc fdd3 	bl	800088c <__aeabi_ddiv>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	ec43 2b17 	vmov	d7, r2, r3
 8003cee:	eeb0 0a47 	vmov.f32	s0, s14
 8003cf2:	eef0 0a67 	vmov.f32	s1, s15
 8003cf6:	f00a fd57 	bl	800e7a8 <atan>
 8003cfa:	ec53 2b10 	vmov	r2, r3, d0
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	f7fc ff71 	bl	8000be8 <__aeabi_d2f>
 8003d06:	4603      	mov	r3, r0
 8003d08:	4a90      	ldr	r2, [pc, #576]	; (8003f4c <Fast_Mode+0x4c4>)
 8003d0a:	6013      	str	r3, [r2, #0]
	/**/
	//szabályozóparaméterek ujraszámolása az aktuális sebesség alapján
	if(v>100 || v<-100)
 8003d0c:	4b90      	ldr	r3, [pc, #576]	; (8003f50 <Fast_Mode+0x4c8>)
 8003d0e:	edd3 7a00 	vldr	s15, [r3]
 8003d12:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8003f54 <Fast_Mode+0x4cc>
 8003d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1e:	dc0a      	bgt.n	8003d36 <Fast_Mode+0x2ae>
 8003d20:	4b8b      	ldr	r3, [pc, #556]	; (8003f50 <Fast_Mode+0x4c8>)
 8003d22:	edd3 7a00 	vldr	s15, [r3]
 8003d26:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8003f58 <Fast_Mode+0x4d0>
 8003d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d32:	f140 80b9 	bpl.w	8003ea8 <Fast_Mode+0x420>
	{
		if(v<2400)
 8003d36:	4b86      	ldr	r3, [pc, #536]	; (8003f50 <Fast_Mode+0x4c8>)
 8003d38:	edd3 7a00 	vldr	s15, [r3]
 8003d3c:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8003f5c <Fast_Mode+0x4d4>
 8003d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d48:	d557      	bpl.n	8003dfa <Fast_Mode+0x372>
		{
			k_p = -L/(v*v)*S1MULTS2_SLOW;
 8003d4a:	4b81      	ldr	r3, [pc, #516]	; (8003f50 <Fast_Mode+0x4c8>)
 8003d4c:	ed93 7a00 	vldr	s14, [r3]
 8003d50:	4b7f      	ldr	r3, [pc, #508]	; (8003f50 <Fast_Mode+0x4c8>)
 8003d52:	edd3 7a00 	vldr	s15, [r3]
 8003d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5a:	ee17 0a90 	vmov	r0, s15
 8003d5e:	f7fc fc13 	bl	8000588 <__aeabi_f2d>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	a16c      	add	r1, pc, #432	; (adr r1, 8003f18 <Fast_Mode+0x490>)
 8003d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d6c:	f7fc fd8e 	bl	800088c <__aeabi_ddiv>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4610      	mov	r0, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	a369      	add	r3, pc, #420	; (adr r3, 8003f20 <Fast_Mode+0x498>)
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f7fc fc5b 	bl	8000638 <__aeabi_dmul>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4610      	mov	r0, r2
 8003d88:	4619      	mov	r1, r3
 8003d8a:	f7fc ff2d 	bl	8000be8 <__aeabi_d2f>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4a73      	ldr	r2, [pc, #460]	; (8003f60 <Fast_Mode+0x4d8>)
 8003d92:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 8003d94:	4b6e      	ldr	r3, [pc, #440]	; (8003f50 <Fast_Mode+0x4c8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fc fbf5 	bl	8000588 <__aeabi_f2d>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	a161      	add	r1, pc, #388	; (adr r1, 8003f28 <Fast_Mode+0x4a0>)
 8003da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003da8:	f7fc fd70 	bl	800088c <__aeabi_ddiv>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4614      	mov	r4, r2
 8003db2:	461d      	mov	r5, r3
 8003db4:	4b66      	ldr	r3, [pc, #408]	; (8003f50 <Fast_Mode+0x4c8>)
 8003db6:	ed93 7a00 	vldr	s14, [r3]
 8003dba:	4b69      	ldr	r3, [pc, #420]	; (8003f60 <Fast_Mode+0x4d8>)
 8003dbc:	edd3 7a00 	vldr	s15, [r3]
 8003dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc4:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8003dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dcc:	ee17 0a90 	vmov	r0, s15
 8003dd0:	f7fc fbda 	bl	8000588 <__aeabi_f2d>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4620      	mov	r0, r4
 8003dda:	4629      	mov	r1, r5
 8003ddc:	f7fc fc2c 	bl	8000638 <__aeabi_dmul>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4610      	mov	r0, r2
 8003de6:	4619      	mov	r1, r3
 8003de8:	f7fc fefe 	bl	8000be8 <__aeabi_d2f>
 8003dec:	4603      	mov	r3, r0
 8003dee:	4a5d      	ldr	r2, [pc, #372]	; (8003f64 <Fast_Mode+0x4dc>)
 8003df0:	6013      	str	r3, [r2, #0]
			kD=-0.06;
 8003df2:	4b5d      	ldr	r3, [pc, #372]	; (8003f68 <Fast_Mode+0x4e0>)
 8003df4:	4a5d      	ldr	r2, [pc, #372]	; (8003f6c <Fast_Mode+0x4e4>)
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e056      	b.n	8003ea8 <Fast_Mode+0x420>
			//kD=0;
		}
		else
		{
			k_p = -L/(v*v)*S1MULTS2_SLOW;
 8003dfa:	4b55      	ldr	r3, [pc, #340]	; (8003f50 <Fast_Mode+0x4c8>)
 8003dfc:	ed93 7a00 	vldr	s14, [r3]
 8003e00:	4b53      	ldr	r3, [pc, #332]	; (8003f50 <Fast_Mode+0x4c8>)
 8003e02:	edd3 7a00 	vldr	s15, [r3]
 8003e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0a:	ee17 0a90 	vmov	r0, s15
 8003e0e:	f7fc fbbb 	bl	8000588 <__aeabi_f2d>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	a140      	add	r1, pc, #256	; (adr r1, 8003f18 <Fast_Mode+0x490>)
 8003e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e1c:	f7fc fd36 	bl	800088c <__aeabi_ddiv>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4610      	mov	r0, r2
 8003e26:	4619      	mov	r1, r3
 8003e28:	a33d      	add	r3, pc, #244	; (adr r3, 8003f20 <Fast_Mode+0x498>)
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	f7fc fc03 	bl	8000638 <__aeabi_dmul>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	f7fc fed5 	bl	8000be8 <__aeabi_d2f>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4a47      	ldr	r2, [pc, #284]	; (8003f60 <Fast_Mode+0x4d8>)
 8003e42:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 8003e44:	4b42      	ldr	r3, [pc, #264]	; (8003f50 <Fast_Mode+0x4c8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fc fb9d 	bl	8000588 <__aeabi_f2d>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	a135      	add	r1, pc, #212	; (adr r1, 8003f28 <Fast_Mode+0x4a0>)
 8003e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e58:	f7fc fd18 	bl	800088c <__aeabi_ddiv>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4614      	mov	r4, r2
 8003e62:	461d      	mov	r5, r3
 8003e64:	4b3a      	ldr	r3, [pc, #232]	; (8003f50 <Fast_Mode+0x4c8>)
 8003e66:	ed93 7a00 	vldr	s14, [r3]
 8003e6a:	4b3d      	ldr	r3, [pc, #244]	; (8003f60 <Fast_Mode+0x4d8>)
 8003e6c:	edd3 7a00 	vldr	s15, [r3]
 8003e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e74:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8003e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e7c:	ee17 0a90 	vmov	r0, s15
 8003e80:	f7fc fb82 	bl	8000588 <__aeabi_f2d>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4620      	mov	r0, r4
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	f7fc fbd4 	bl	8000638 <__aeabi_dmul>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	f7fc fea6 	bl	8000be8 <__aeabi_d2f>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	4a31      	ldr	r2, [pc, #196]	; (8003f64 <Fast_Mode+0x4dc>)
 8003ea0:	6013      	str	r3, [r2, #0]
			kD=-0.05;
 8003ea2:	4b31      	ldr	r3, [pc, #196]	; (8003f68 <Fast_Mode+0x4e0>)
 8003ea4:	4a32      	ldr	r2, [pc, #200]	; (8003f70 <Fast_Mode+0x4e8>)
 8003ea6:	601a      	str	r2, [r3, #0]
		}
	}

	gamma = -k_p * x_elso -k_delta * delta - kD * (x_elso-x_elso_prev);
 8003ea8:	4b2d      	ldr	r3, [pc, #180]	; (8003f60 <Fast_Mode+0x4d8>)
 8003eaa:	edd3 7a00 	vldr	s15, [r3]
 8003eae:	eeb1 7a67 	vneg.f32	s14, s15
 8003eb2:	4b23      	ldr	r3, [pc, #140]	; (8003f40 <Fast_Mode+0x4b8>)
 8003eb4:	edd3 7a00 	vldr	s15, [r3]
 8003eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ebc:	4b29      	ldr	r3, [pc, #164]	; (8003f64 <Fast_Mode+0x4dc>)
 8003ebe:	edd3 6a00 	vldr	s13, [r3]
 8003ec2:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <Fast_Mode+0x4c4>)
 8003ec4:	edd3 7a00 	vldr	s15, [r3]
 8003ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ecc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <Fast_Mode+0x4b8>)
 8003ed2:	edd3 6a00 	vldr	s13, [r3]
 8003ed6:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <Fast_Mode+0x4ec>)
 8003ed8:	edd3 7a00 	vldr	s15, [r3]
 8003edc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ee0:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <Fast_Mode+0x4e0>)
 8003ee2:	edd3 7a00 	vldr	s15, [r3]
 8003ee6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eee:	4b22      	ldr	r3, [pc, #136]	; (8003f78 <Fast_Mode+0x4f0>)
 8003ef0:	edc3 7a00 	vstr	s15, [r3]
	x_elso_prev = x_elso;
 8003ef4:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <Fast_Mode+0x4b8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1e      	ldr	r2, [pc, #120]	; (8003f74 <Fast_Mode+0x4ec>)
 8003efa:	6013      	str	r3, [r2, #0]

	return gamma;
 8003efc:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <Fast_Mode+0x4f0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	ee07 3a90 	vmov	s15, r3
}
 8003f04:	eeb0 0a67 	vmov.f32	s0, s15
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	00000000 	.word	0x00000000
 8003f14:	406fe000 	.word	0x406fe000
 8003f18:	00000000 	.word	0x00000000
 8003f1c:	c0716000 	.word	0xc0716000
 8003f20:	fd21ff2e 	.word	0xfd21ff2e
 8003f24:	402275f6 	.word	0x402275f6
 8003f28:	00000000 	.word	0x00000000
 8003f2c:	40716000 	.word	0x40716000
 8003f30:	200002a0 	.word	0x200002a0
 8003f34:	20000654 	.word	0x20000654
 8003f38:	434c0000 	.word	0x434c0000
 8003f3c:	40598000 	.word	0x40598000
 8003f40:	20000680 	.word	0x20000680
 8003f44:	20000684 	.word	0x20000684
 8003f48:	407c4000 	.word	0x407c4000
 8003f4c:	20000688 	.word	0x20000688
 8003f50:	2000063c 	.word	0x2000063c
 8003f54:	42c80000 	.word	0x42c80000
 8003f58:	c2c80000 	.word	0xc2c80000
 8003f5c:	45160000 	.word	0x45160000
 8003f60:	2000005c 	.word	0x2000005c
 8003f64:	20000060 	.word	0x20000060
 8003f68:	20000064 	.word	0x20000064
 8003f6c:	bd75c28f 	.word	0xbd75c28f
 8003f70:	bd4ccccd 	.word	0xbd4ccccd
 8003f74:	2000068c 	.word	0x2000068c
 8003f78:	20000690 	.word	0x20000690
 8003f7c:	00000000 	.word	0x00000000

08003f80 <Skill_Mode>:

float Skill_Mode(UART_HandleTypeDef *huart_debugg, float kP, float kD, uint32_t t)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f8c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
	static uint32_t t_prev=0;
	int byte=0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
	static int byte_prev=0;
	uint8_t delta_byte;
	float p=0;
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
/*	uint8_t str[40];
	sprintf(str,"%d,  %d,  %d,  %d,  %d\n\r",rxBuf[1],rxBuf[2],rxBuf[3],rxBuf[4],rxBuf[5]);
	HAL_UART_Transmit(huart_debugg, str, strlen(str), 10);
*/

	if(LINE_CNT>3 || ignore)//ha éppen node-on vagyunk, akkor az átlagot követjük
 8003f9c:	4b7f      	ldr	r3, [pc, #508]	; (800419c <Skill_Mode+0x21c>)
 8003f9e:	785b      	ldrb	r3, [r3, #1]
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d803      	bhi.n	8003fac <Skill_Mode+0x2c>
 8003fa4:	4b7e      	ldr	r3, [pc, #504]	; (80041a0 <Skill_Mode+0x220>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d022      	beq.n	8003ff2 <Skill_Mode+0x72>
	{
		byte=0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	e00a      	b.n	8003fcc <Skill_Mode+0x4c>
		{
			byte += rxBuf[i+2];
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	3302      	adds	r3, #2
 8003fba:	4a78      	ldr	r2, [pc, #480]	; (800419c <Skill_Mode+0x21c>)
 8003fbc:	5cd3      	ldrb	r3, [r2, r3]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	61bb      	str	r3, [r7, #24]
 8003fcc:	4b73      	ldr	r3, [pc, #460]	; (800419c <Skill_Mode+0x21c>)
 8003fce:	785b      	ldrb	r3, [r3, #1]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	dbee      	blt.n	8003fb6 <Skill_Mode+0x36>
		}

		if(LINE_CNT) byte /= LINE_CNT;
 8003fd8:	4b70      	ldr	r3, [pc, #448]	; (800419c <Skill_Mode+0x21c>)
 8003fda:	785b      	ldrb	r3, [r3, #1]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80f2 	beq.w	80041c6 <Skill_Mode+0x246>
 8003fe2:	4b6e      	ldr	r3, [pc, #440]	; (800419c <Skill_Mode+0x21c>)
 8003fe4:	785b      	ldrb	r3, [r3, #1]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fee:	61fb      	str	r3, [r7, #28]
 8003ff0:	e0e9      	b.n	80041c6 <Skill_Mode+0x246>
	}
	else if(path==LEFT)
 8003ff2:	4b6c      	ldr	r3, [pc, #432]	; (80041a4 <Skill_Mode+0x224>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d14d      	bne.n	8004096 <Skill_Mode+0x116>
	{
		byte = LINE1; //az első vonalt kell követni
 8003ffa:	4b68      	ldr	r3, [pc, #416]	; (800419c <Skill_Mode+0x21c>)
 8003ffc:	789b      	ldrb	r3, [r3, #2]
 8003ffe:	61fb      	str	r3, [r7, #28]
		delta_byte=abs((int)byte-byte_prev);
 8004000:	4b69      	ldr	r3, [pc, #420]	; (80041a8 <Skill_Mode+0x228>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	bfb8      	it	lt
 800400c:	425b      	neglt	r3, r3
 800400e:	74fb      	strb	r3, [r7, #19]
		/**/
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	2b46      	cmp	r3, #70	; 0x46
 8004014:	d903      	bls.n	800401e <Skill_Mode+0x9e>
 8004016:	4b65      	ldr	r3, [pc, #404]	; (80041ac <Skill_Mode+0x22c>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d103      	bne.n	8004026 <Skill_Mode+0xa6>
 800401e:	4b63      	ldr	r3, [pc, #396]	; (80041ac <Skill_Mode+0x22c>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d125      	bne.n	8004072 <Skill_Mode+0xf2>
		{

			if(estuary==ESTUARY_MODE_OFF)t_prev=t;//ha most kapcsoltuk be a torkolatkompenzálást, akkor mostantól mérjük az eltelt időt
 8004026:	4b61      	ldr	r3, [pc, #388]	; (80041ac <Skill_Mode+0x22c>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d102      	bne.n	8004034 <Skill_Mode+0xb4>
 800402e:	4a60      	ldr	r2, [pc, #384]	; (80041b0 <Skill_Mode+0x230>)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6013      	str	r3, [r2, #0]
			if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 8004034:	4b5e      	ldr	r3, [pc, #376]	; (80041b0 <Skill_Mode+0x230>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004040:	d908      	bls.n	8004054 <Skill_Mode+0xd4>
			{
				estuary=ESTUARY_MODE_OFF; //ha letelt a timeout kilépünk a kompenzálásból
 8004042:	4b5a      	ldr	r3, [pc, #360]	; (80041ac <Skill_Mode+0x22c>)
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
				LED_G(0);
 8004048:	2201      	movs	r2, #1
 800404a:	2102      	movs	r1, #2
 800404c:	4859      	ldr	r0, [pc, #356]	; (80041b4 <Skill_Mode+0x234>)
 800404e:	f003 fe77 	bl	8007d40 <HAL_GPIO_WritePin>
			if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 8004052:	e0b8      	b.n	80041c6 <Skill_Mode+0x246>
			}
			else //ha még nem telt le az timout idő
			{
				byte = rxBuf[1+LINE_CNT]; //ilyenkor az utolsó vonalat nézzük az első helyett
 8004054:	4b51      	ldr	r3, [pc, #324]	; (800419c <Skill_Mode+0x21c>)
 8004056:	785b      	ldrb	r3, [r3, #1]
 8004058:	3301      	adds	r3, #1
 800405a:	4a50      	ldr	r2, [pc, #320]	; (800419c <Skill_Mode+0x21c>)
 800405c:	5cd3      	ldrb	r3, [r2, r3]
 800405e:	61fb      	str	r3, [r7, #28]
				estuary=ESTUARY_MODE_ON; //öntartás
 8004060:	4b52      	ldr	r3, [pc, #328]	; (80041ac <Skill_Mode+0x22c>)
 8004062:	2202      	movs	r2, #2
 8004064:	701a      	strb	r2, [r3, #0]
				LED_G(1);
 8004066:	2200      	movs	r2, #0
 8004068:	2102      	movs	r1, #2
 800406a:	4852      	ldr	r0, [pc, #328]	; (80041b4 <Skill_Mode+0x234>)
 800406c:	f003 fe68 	bl	8007d40 <HAL_GPIO_WritePin>
			if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 8004070:	e0a9      	b.n	80041c6 <Skill_Mode+0x246>
			}
		}
		else if(delta_byte<ESTUARY_EXIT && estuary==ESTUARY_MODE_ON) //ha már eléggé összeszűkült a torkolat, akkor nem kell kompenzálni
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	2b2c      	cmp	r3, #44	; 0x2c
 8004076:	f200 80a6 	bhi.w	80041c6 <Skill_Mode+0x246>
 800407a:	4b4c      	ldr	r3, [pc, #304]	; (80041ac <Skill_Mode+0x22c>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b02      	cmp	r3, #2
 8004080:	f040 80a1 	bne.w	80041c6 <Skill_Mode+0x246>
		{
			estuary=ESTUARY_MODE_OFF;
 8004084:	4b49      	ldr	r3, [pc, #292]	; (80041ac <Skill_Mode+0x22c>)
 8004086:	2201      	movs	r2, #1
 8004088:	701a      	strb	r2, [r3, #0]
			LED_G(0);
 800408a:	2201      	movs	r2, #1
 800408c:	2102      	movs	r1, #2
 800408e:	4849      	ldr	r0, [pc, #292]	; (80041b4 <Skill_Mode+0x234>)
 8004090:	f003 fe56 	bl	8007d40 <HAL_GPIO_WritePin>
 8004094:	e097      	b.n	80041c6 <Skill_Mode+0x246>
		}

	}
	else if(path==RIGHT)
 8004096:	4b43      	ldr	r3, [pc, #268]	; (80041a4 <Skill_Mode+0x224>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d14b      	bne.n	8004136 <Skill_Mode+0x1b6>
	{
		byte = rxBuf[1+LINE_CNT];//az utolsó vonalat kell követni
 800409e:	4b3f      	ldr	r3, [pc, #252]	; (800419c <Skill_Mode+0x21c>)
 80040a0:	785b      	ldrb	r3, [r3, #1]
 80040a2:	3301      	adds	r3, #1
 80040a4:	4a3d      	ldr	r2, [pc, #244]	; (800419c <Skill_Mode+0x21c>)
 80040a6:	5cd3      	ldrb	r3, [r2, r3]
 80040a8:	61fb      	str	r3, [r7, #28]
		delta_byte=abs((int)byte-byte_prev);
 80040aa:	4b3f      	ldr	r3, [pc, #252]	; (80041a8 <Skill_Mode+0x228>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bfb8      	it	lt
 80040b6:	425b      	neglt	r3, r3
 80040b8:	74fb      	strb	r3, [r7, #19]
		/**/
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 80040ba:	7cfb      	ldrb	r3, [r7, #19]
 80040bc:	2b46      	cmp	r3, #70	; 0x46
 80040be:	d903      	bls.n	80040c8 <Skill_Mode+0x148>
 80040c0:	4b3a      	ldr	r3, [pc, #232]	; (80041ac <Skill_Mode+0x22c>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d103      	bne.n	80040d0 <Skill_Mode+0x150>
 80040c8:	4b38      	ldr	r3, [pc, #224]	; (80041ac <Skill_Mode+0x22c>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d122      	bne.n	8004116 <Skill_Mode+0x196>
		{
				if(estuary==ESTUARY_MODE_OFF)t_prev=t;//ha most kapcsoltuk be a torkolatkompenzálást, akkor mostantól mérjük az eltelt időt
 80040d0:	4b36      	ldr	r3, [pc, #216]	; (80041ac <Skill_Mode+0x22c>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d102      	bne.n	80040de <Skill_Mode+0x15e>
 80040d8:	4a35      	ldr	r2, [pc, #212]	; (80041b0 <Skill_Mode+0x230>)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6013      	str	r3, [r2, #0]
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 80040de:	4b34      	ldr	r3, [pc, #208]	; (80041b0 <Skill_Mode+0x230>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040ea:	d908      	bls.n	80040fe <Skill_Mode+0x17e>
				{
					estuary=ESTUARY_MODE_OFF; //ha letelt a timeout kilépünk a kompenzálásból
 80040ec:	4b2f      	ldr	r3, [pc, #188]	; (80041ac <Skill_Mode+0x22c>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]
					LED_G(0);
 80040f2:	2201      	movs	r2, #1
 80040f4:	2102      	movs	r1, #2
 80040f6:	482f      	ldr	r0, [pc, #188]	; (80041b4 <Skill_Mode+0x234>)
 80040f8:	f003 fe22 	bl	8007d40 <HAL_GPIO_WritePin>
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 80040fc:	e063      	b.n	80041c6 <Skill_Mode+0x246>
				}
				else //ha még nem telt le az idő
				{
					byte = rxBuf[2]; //ilyenkor az első vonalat nézzük az utolsó helyett
 80040fe:	4b27      	ldr	r3, [pc, #156]	; (800419c <Skill_Mode+0x21c>)
 8004100:	789b      	ldrb	r3, [r3, #2]
 8004102:	61fb      	str	r3, [r7, #28]
					estuary=ESTUARY_MODE_ON; //öntartás
 8004104:	4b29      	ldr	r3, [pc, #164]	; (80041ac <Skill_Mode+0x22c>)
 8004106:	2202      	movs	r2, #2
 8004108:	701a      	strb	r2, [r3, #0]
					LED_G(1);
 800410a:	2200      	movs	r2, #0
 800410c:	2102      	movs	r1, #2
 800410e:	4829      	ldr	r0, [pc, #164]	; (80041b4 <Skill_Mode+0x234>)
 8004110:	f003 fe16 	bl	8007d40 <HAL_GPIO_WritePin>
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 8004114:	e057      	b.n	80041c6 <Skill_Mode+0x246>
				}
		}
		else if(delta_byte<ESTUARY_EXIT && estuary==ESTUARY_MODE_ON) //ha már eléggé összeszűkült a torkolat, akkor nem kell kompenzálni
 8004116:	7cfb      	ldrb	r3, [r7, #19]
 8004118:	2b2c      	cmp	r3, #44	; 0x2c
 800411a:	d854      	bhi.n	80041c6 <Skill_Mode+0x246>
 800411c:	4b23      	ldr	r3, [pc, #140]	; (80041ac <Skill_Mode+0x22c>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d150      	bne.n	80041c6 <Skill_Mode+0x246>
		{
			estuary=ESTUARY_MODE_OFF;
 8004124:	4b21      	ldr	r3, [pc, #132]	; (80041ac <Skill_Mode+0x22c>)
 8004126:	2201      	movs	r2, #1
 8004128:	701a      	strb	r2, [r3, #0]
			LED_G(0);
 800412a:	2201      	movs	r2, #1
 800412c:	2102      	movs	r1, #2
 800412e:	4821      	ldr	r0, [pc, #132]	; (80041b4 <Skill_Mode+0x234>)
 8004130:	f003 fe06 	bl	8007d40 <HAL_GPIO_WritePin>
 8004134:	e047      	b.n	80041c6 <Skill_Mode+0x246>
		}

	}

	else if(path==MIDDLE)
 8004136:	4b1b      	ldr	r3, [pc, #108]	; (80041a4 <Skill_Mode+0x224>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d143      	bne.n	80041c6 <Skill_Mode+0x246>
	{
		if(LINE_CNT==1)byte = LINE1;//ha csak 1 vonal van, akkor azt követjük
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <Skill_Mode+0x21c>)
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d103      	bne.n	800414e <Skill_Mode+0x1ce>
 8004146:	4b15      	ldr	r3, [pc, #84]	; (800419c <Skill_Mode+0x21c>)
 8004148:	789b      	ldrb	r3, [r3, #2]
 800414a:	61fb      	str	r3, [r7, #28]
 800414c:	e03b      	b.n	80041c6 <Skill_Mode+0x246>
		else if(LINE_CNT==3)//ha 3 vonal van
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <Skill_Mode+0x21c>)
 8004150:	785b      	ldrb	r3, [r3, #1]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d113      	bne.n	800417e <Skill_Mode+0x1fe>
		{
			byte = rxBuf[3];//a középsőt követjük
 8004156:	4b11      	ldr	r3, [pc, #68]	; (800419c <Skill_Mode+0x21c>)
 8004158:	78db      	ldrb	r3, [r3, #3]
 800415a:	61fb      	str	r3, [r7, #28]
			//folyamatosan nézzük, hogy az 1. és 3.vonal milyen messze van a vonalszenor középontjától
			tmp1=abs((int)LINE1-123);
 800415c:	4b0f      	ldr	r3, [pc, #60]	; (800419c <Skill_Mode+0x21c>)
 800415e:	789b      	ldrb	r3, [r3, #2]
 8004160:	3b7b      	subs	r3, #123	; 0x7b
 8004162:	2b00      	cmp	r3, #0
 8004164:	bfb8      	it	lt
 8004166:	425b      	neglt	r3, r3
 8004168:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <Skill_Mode+0x238>)
 800416a:	6013      	str	r3, [r2, #0]
			tmp2=abs((int)LINE3-123);
 800416c:	4b0b      	ldr	r3, [pc, #44]	; (800419c <Skill_Mode+0x21c>)
 800416e:	791b      	ldrb	r3, [r3, #4]
 8004170:	3b7b      	subs	r3, #123	; 0x7b
 8004172:	2b00      	cmp	r3, #0
 8004174:	bfb8      	it	lt
 8004176:	425b      	neglt	r3, r3
 8004178:	4a10      	ldr	r2, [pc, #64]	; (80041bc <Skill_Mode+0x23c>)
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	e023      	b.n	80041c6 <Skill_Mode+0x246>
		}
		else if(LINE_CNT==2)//ha 2 vonal van, az azt jelenti, hogy az elágazás már annyira szétgáazott, hogy csak 2-t látunk a 3 vonalból
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <Skill_Mode+0x21c>)
 8004180:	785b      	ldrb	r3, [r3, #1]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d11f      	bne.n	80041c6 <Skill_Mode+0x246>
		{
			if(tmp1<tmp2) byte = LINE1; //ha a jobboldali vonalat veszítettük el
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <Skill_Mode+0x238>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <Skill_Mode+0x23c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	da16      	bge.n	80041c0 <Skill_Mode+0x240>
 8004192:	4b02      	ldr	r3, [pc, #8]	; (800419c <Skill_Mode+0x21c>)
 8004194:	789b      	ldrb	r3, [r3, #2]
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	e015      	b.n	80041c6 <Skill_Mode+0x246>
 800419a:	bf00      	nop
 800419c:	20000654 	.word	0x20000654
 80041a0:	2000065e 	.word	0x2000065e
 80041a4:	200002aa 	.word	0x200002aa
 80041a8:	20000694 	.word	0x20000694
 80041ac:	20000698 	.word	0x20000698
 80041b0:	2000069c 	.word	0x2000069c
 80041b4:	40020400 	.word	0x40020400
 80041b8:	200006a0 	.word	0x200006a0
 80041bc:	200006a4 	.word	0x200006a4
			else byte = LINE2; //ha a baloldali vonalat veszítettük el
 80041c0:	4b2b      	ldr	r3, [pc, #172]	; (8004270 <Skill_Mode+0x2f0>)
 80041c2:	78db      	ldrb	r3, [r3, #3]
 80041c4:	61fb      	str	r3, [r7, #28]
		}
	}
	if(estuary==ESTUARY_MODE_INIT)estuary=ESTUARY_MODE_OFF;
 80041c6:	4b2b      	ldr	r3, [pc, #172]	; (8004274 <Skill_Mode+0x2f4>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <Skill_Mode+0x254>
 80041ce:	4b29      	ldr	r3, [pc, #164]	; (8004274 <Skill_Mode+0x2f4>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
	//p = (float)byte * 204/248.0-102;
	p = (float)byte * 204/255.0-102;
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041de:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004278 <Skill_Mode+0x2f8>
 80041e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041e6:	ee17 0a90 	vmov	r0, s15
 80041ea:	f7fc f9cd 	bl	8000588 <__aeabi_f2d>
 80041ee:	a31e      	add	r3, pc, #120	; (adr r3, 8004268 <Skill_Mode+0x2e8>)
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f7fc fb4a 	bl	800088c <__aeabi_ddiv>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4610      	mov	r0, r2
 80041fe:	4619      	mov	r1, r3
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	4b1d      	ldr	r3, [pc, #116]	; (800427c <Skill_Mode+0x2fc>)
 8004206:	f7fc f85f 	bl	80002c8 <__aeabi_dsub>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4610      	mov	r0, r2
 8004210:	4619      	mov	r1, r3
 8004212:	f7fc fce9 	bl	8000be8 <__aeabi_d2f>
 8004216:	4603      	mov	r3, r0
 8004218:	617b      	str	r3, [r7, #20]
	gamma = -kP * p  - kD*(p-p_prev);
 800421a:	edd7 7a02 	vldr	s15, [r7, #8]
 800421e:	eeb1 7a67 	vneg.f32	s14, s15
 8004222:	edd7 7a05 	vldr	s15, [r7, #20]
 8004226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <Skill_Mode+0x300>)
 800422c:	edd3 7a00 	vldr	s15, [r3]
 8004230:	edd7 6a05 	vldr	s13, [r7, #20]
 8004234:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004238:	edd7 7a01 	vldr	s15, [r7, #4]
 800423c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004244:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <Skill_Mode+0x304>)
 8004246:	edc3 7a00 	vstr	s15, [r3]
	p_prev = p;
 800424a:	4a0d      	ldr	r2, [pc, #52]	; (8004280 <Skill_Mode+0x300>)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	6013      	str	r3, [r2, #0]
	byte_prev=byte;
 8004250:	4a0d      	ldr	r2, [pc, #52]	; (8004288 <Skill_Mode+0x308>)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	6013      	str	r3, [r2, #0]

	return gamma;
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <Skill_Mode+0x304>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	ee07 3a90 	vmov	s15, r3
}
 800425e:	eeb0 0a67 	vmov.f32	s0, s15
 8004262:	3720      	adds	r7, #32
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	00000000 	.word	0x00000000
 800426c:	406fe000 	.word	0x406fe000
 8004270:	20000654 	.word	0x20000654
 8004274:	20000698 	.word	0x20000698
 8004278:	434c0000 	.word	0x434c0000
 800427c:	40598000 	.word	0x40598000
 8004280:	200006a8 	.word	0x200006a8
 8004284:	200006ac 	.word	0x200006ac
 8004288:	20000694 	.word	0x20000694

0800428c <Detect_Node4>:
		ignore=0;
	}
}

void Detect_Node4(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
	static uint32_t t_prev=0;
	static uint32_t t_stamp=0;
	static uint8_t detect_node_state=0;
	static float s=0;

	if(LINE_CNT==4 && !detect_node_state)
 8004296:	4b3b      	ldr	r3, [pc, #236]	; (8004384 <Detect_Node4+0xf8>)
 8004298:	785b      	ldrb	r3, [r3, #1]
 800429a:	2b04      	cmp	r3, #4
 800429c:	d111      	bne.n	80042c2 <Detect_Node4+0x36>
 800429e:	4b3a      	ldr	r3, [pc, #232]	; (8004388 <Detect_Node4+0xfc>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10d      	bne.n	80042c2 <Detect_Node4+0x36>
	{
		s=0;
 80042a6:	4b39      	ldr	r3, [pc, #228]	; (800438c <Detect_Node4+0x100>)
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
		detect_node_state=1;//innentől mérünk
 80042ae:	4b36      	ldr	r3, [pc, #216]	; (8004388 <Detect_Node4+0xfc>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	701a      	strb	r2, [r3, #0]
		ignore=1;
 80042b4:	4b36      	ldr	r3, [pc, #216]	; (8004390 <Detect_Node4+0x104>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	701a      	strb	r2, [r3, #0]
		t_stamp=t;
 80042ba:	4a36      	ldr	r2, [pc, #216]	; (8004394 <Detect_Node4+0x108>)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	e02b      	b.n	800431a <Detect_Node4+0x8e>

	}
	else if(LINE_CNT==4 && detect_node_state)
 80042c2:	4b30      	ldr	r3, [pc, #192]	; (8004384 <Detect_Node4+0xf8>)
 80042c4:	785b      	ldrb	r3, [r3, #1]
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d127      	bne.n	800431a <Detect_Node4+0x8e>
 80042ca:	4b2f      	ldr	r3, [pc, #188]	; (8004388 <Detect_Node4+0xfc>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d023      	beq.n	800431a <Detect_Node4+0x8e>
	{
		s+=(float)abs(v)*(t-t_prev)/1000;
 80042d2:	4b31      	ldr	r3, [pc, #196]	; (8004398 <Detect_Node4+0x10c>)
 80042d4:	edd3 7a00 	vldr	s15, [r3]
 80042d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042dc:	ee17 3a90 	vmov	r3, s15
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bfb8      	it	lt
 80042e4:	425b      	neglt	r3, r3
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042ee:	4b2b      	ldr	r3, [pc, #172]	; (800439c <Detect_Node4+0x110>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004302:	eddf 6a27 	vldr	s13, [pc, #156]	; 80043a0 <Detect_Node4+0x114>
 8004306:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800430a:	4b20      	ldr	r3, [pc, #128]	; (800438c <Detect_Node4+0x100>)
 800430c:	edd3 7a00 	vldr	s15, [r3]
 8004310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004314:	4b1d      	ldr	r3, [pc, #116]	; (800438c <Detect_Node4+0x100>)
 8004316:	edc3 7a00 	vstr	s15, [r3]
	}
	if((t-t_stamp)>230 && detect_node_state)
 800431a:	4b1e      	ldr	r3, [pc, #120]	; (8004394 <Detect_Node4+0x108>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2be6      	cmp	r3, #230	; 0xe6
 8004324:	d924      	bls.n	8004370 <Detect_Node4+0xe4>
 8004326:	4b18      	ldr	r3, [pc, #96]	; (8004388 <Detect_Node4+0xfc>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d020      	beq.n	8004370 <Detect_Node4+0xe4>
	{
		detect_node_state=0;
 800432e:	4b16      	ldr	r3, [pc, #88]	; (8004388 <Detect_Node4+0xfc>)
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]
		ignore=0;
 8004334:	4b16      	ldr	r3, [pc, #88]	; (8004390 <Detect_Node4+0x104>)
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]
		if(s>140)//vertical node
 800433a:	4b14      	ldr	r3, [pc, #80]	; (800438c <Detect_Node4+0x100>)
 800433c:	edd3 7a00 	vldr	s15, [r3]
 8004340:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80043a4 <Detect_Node4+0x118>
 8004344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434c:	dd03      	ble.n	8004356 <Detect_Node4+0xca>
		{
			nodeDetected=1; //horizont node
 800434e:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <Detect_Node4+0x11c>)
 8004350:	2201      	movs	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]
 8004354:	e00c      	b.n	8004370 <Detect_Node4+0xe4>

		}
		else if(s>50)//horizontal node
 8004356:	4b0d      	ldr	r3, [pc, #52]	; (800438c <Detect_Node4+0x100>)
 8004358:	edd3 7a00 	vldr	s15, [r3]
 800435c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80043ac <Detect_Node4+0x120>
 8004360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004368:	dd02      	ble.n	8004370 <Detect_Node4+0xe4>
		{
			nodeDetected=1; //horizont node
 800436a:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <Detect_Node4+0x11c>)
 800436c:	2201      	movs	r2, #1
 800436e:	701a      	strb	r2, [r3, #0]
		}
	}
	t_prev=t;
 8004370:	4a0a      	ldr	r2, [pc, #40]	; (800439c <Detect_Node4+0x110>)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6013      	str	r3, [r2, #0]
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20000654 	.word	0x20000654
 8004388:	200006b0 	.word	0x200006b0
 800438c:	200006b4 	.word	0x200006b4
 8004390:	2000065e 	.word	0x2000065e
 8004394:	200006b8 	.word	0x200006b8
 8004398:	2000063c 	.word	0x2000063c
 800439c:	200006bc 	.word	0x200006bc
 80043a0:	447a0000 	.word	0x447a0000
 80043a4:	430c0000 	.word	0x430c0000
 80043a8:	200002a9 	.word	0x200002a9
 80043ac:	42480000 	.word	0x42480000

080043b0 <Lane_Changer>:

uint8_t Lane_Changer(uint32_t t)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	static uint8_t lineCnt_prev=1;
	static float s=0;
	static int i=0;
	static uint32_t dt[8]={1000,1000,1000,1000,1000,1000,1000,1000};

	if(laneChange<2)return 0;
 80043b8:	4b75      	ldr	r3, [pc, #468]	; (8004590 <Lane_Changer+0x1e0>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d801      	bhi.n	80043c4 <Lane_Changer+0x14>
 80043c0:	2300      	movs	r3, #0
 80043c2:	e0e1      	b.n	8004588 <Lane_Changer+0x1d8>
	if(LINE_CNT != lineCnt_prev && (LINE_CNT==1 || LINE_CNT==2) && laneChange==2) //ha változik az alattunk lévő vonalak száma
 80043c4:	4b73      	ldr	r3, [pc, #460]	; (8004594 <Lane_Changer+0x1e4>)
 80043c6:	785a      	ldrb	r2, [r3, #1]
 80043c8:	4b73      	ldr	r3, [pc, #460]	; (8004598 <Lane_Changer+0x1e8>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d04c      	beq.n	800446a <Lane_Changer+0xba>
 80043d0:	4b70      	ldr	r3, [pc, #448]	; (8004594 <Lane_Changer+0x1e4>)
 80043d2:	785b      	ldrb	r3, [r3, #1]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d003      	beq.n	80043e0 <Lane_Changer+0x30>
 80043d8:	4b6e      	ldr	r3, [pc, #440]	; (8004594 <Lane_Changer+0x1e4>)
 80043da:	785b      	ldrb	r3, [r3, #1]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d144      	bne.n	800446a <Lane_Changer+0xba>
 80043e0:	4b6b      	ldr	r3, [pc, #428]	; (8004590 <Lane_Changer+0x1e0>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d140      	bne.n	800446a <Lane_Changer+0xba>
	{
		dt[i] = t - t_stamp;
 80043e8:	4b6c      	ldr	r3, [pc, #432]	; (800459c <Lane_Changer+0x1ec>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4b6c      	ldr	r3, [pc, #432]	; (80045a0 <Lane_Changer+0x1f0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	1a8a      	subs	r2, r1, r2
 80043f4:	496b      	ldr	r1, [pc, #428]	; (80045a4 <Lane_Changer+0x1f4>)
 80043f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		uint32_t sum=dt[0] + dt[1] + dt[2] + dt[3]+ dt[4]+dt[5] + dt[6] + dt[7];
 80043fa:	4b6a      	ldr	r3, [pc, #424]	; (80045a4 <Lane_Changer+0x1f4>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b69      	ldr	r3, [pc, #420]	; (80045a4 <Lane_Changer+0x1f4>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	441a      	add	r2, r3
 8004404:	4b67      	ldr	r3, [pc, #412]	; (80045a4 <Lane_Changer+0x1f4>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	441a      	add	r2, r3
 800440a:	4b66      	ldr	r3, [pc, #408]	; (80045a4 <Lane_Changer+0x1f4>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	441a      	add	r2, r3
 8004410:	4b64      	ldr	r3, [pc, #400]	; (80045a4 <Lane_Changer+0x1f4>)
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	441a      	add	r2, r3
 8004416:	4b63      	ldr	r3, [pc, #396]	; (80045a4 <Lane_Changer+0x1f4>)
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	441a      	add	r2, r3
 800441c:	4b61      	ldr	r3, [pc, #388]	; (80045a4 <Lane_Changer+0x1f4>)
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	441a      	add	r2, r3
 8004422:	4b60      	ldr	r3, [pc, #384]	; (80045a4 <Lane_Changer+0x1f4>)
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	4413      	add	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
		if((sum > 400) && (sum < 1500))//ha másfél másodpercen belül van8 váltás
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004430:	d90b      	bls.n	800444a <Lane_Changer+0x9a>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f240 52db 	movw	r2, #1499	; 0x5db
 8004438:	4293      	cmp	r3, r2
 800443a:	d806      	bhi.n	800444a <Lane_Changer+0x9a>
		{
			s=0;
 800443c:	4b5a      	ldr	r3, [pc, #360]	; (80045a8 <Lane_Changer+0x1f8>)
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
			laneChange=3;
 8004444:	4b52      	ldr	r3, [pc, #328]	; (8004590 <Lane_Changer+0x1e0>)
 8004446:	2203      	movs	r2, #3
 8004448:	701a      	strb	r2, [r3, #0]
		}
		i++;
 800444a:	4b55      	ldr	r3, [pc, #340]	; (80045a0 <Lane_Changer+0x1f0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3301      	adds	r3, #1
 8004450:	4a53      	ldr	r2, [pc, #332]	; (80045a0 <Lane_Changer+0x1f0>)
 8004452:	6013      	str	r3, [r2, #0]
		if(i>7) i=0;
 8004454:	4b52      	ldr	r3, [pc, #328]	; (80045a0 <Lane_Changer+0x1f0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b07      	cmp	r3, #7
 800445a:	dd02      	ble.n	8004462 <Lane_Changer+0xb2>
 800445c:	4b50      	ldr	r3, [pc, #320]	; (80045a0 <Lane_Changer+0x1f0>)
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
		t_stamp = t;
 8004462:	4a4e      	ldr	r2, [pc, #312]	; (800459c <Lane_Changer+0x1ec>)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6013      	str	r3, [r2, #0]
	{
 8004468:	e086      	b.n	8004578 <Lane_Changer+0x1c8>
	}
	else if(laneChange==3)
 800446a:	4b49      	ldr	r3, [pc, #292]	; (8004590 <Lane_Changer+0x1e0>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b03      	cmp	r3, #3
 8004470:	d15f      	bne.n	8004532 <Lane_Changer+0x182>
	{
		s+=(float)abs(v)*(t-t_prev)/1000;
 8004472:	4b4e      	ldr	r3, [pc, #312]	; (80045ac <Lane_Changer+0x1fc>)
 8004474:	edd3 7a00 	vldr	s15, [r3]
 8004478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800447c:	ee17 3a90 	vmov	r3, s15
 8004480:	2b00      	cmp	r3, #0
 8004482:	bfb8      	it	lt
 8004484:	425b      	neglt	r3, r3
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800448e:	4b48      	ldr	r3, [pc, #288]	; (80045b0 <Lane_Changer+0x200>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a2:	eddf 6a44 	vldr	s13, [pc, #272]	; 80045b4 <Lane_Changer+0x204>
 80044a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80044aa:	4b3f      	ldr	r3, [pc, #252]	; (80045a8 <Lane_Changer+0x1f8>)
 80044ac:	edd3 7a00 	vldr	s15, [r3]
 80044b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b4:	4b3c      	ldr	r3, [pc, #240]	; (80045a8 <Lane_Changer+0x1f8>)
 80044b6:	edc3 7a00 	vstr	s15, [r3]
		if(orientation==FORWARD)
 80044ba:	4b3f      	ldr	r3, [pc, #252]	; (80045b8 <Lane_Changer+0x208>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d114      	bne.n	80044ec <Lane_Changer+0x13c>
		{
			TIM2->CCR1=CCR_FRONT_MAX-40;
 80044c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044c6:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80044ca:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR4=CCR_REAR_MIN;
 80044cc:	4b3b      	ldr	r3, [pc, #236]	; (80045bc <Lane_Changer+0x20c>)
 80044ce:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40
			timeout=1000;
 80044d4:	4b3a      	ldr	r3, [pc, #232]	; (80045c0 <Lane_Changer+0x210>)
 80044d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044da:	601a      	str	r2, [r3, #0]
			laneChange=4;
 80044dc:	4b2c      	ldr	r3, [pc, #176]	; (8004590 <Lane_Changer+0x1e0>)
 80044de:	2204      	movs	r2, #4
 80044e0:	701a      	strb	r2, [r3, #0]
			t_stamp=t;
 80044e2:	4a2e      	ldr	r2, [pc, #184]	; (800459c <Lane_Changer+0x1ec>)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6013      	str	r3, [r2, #0]
			return 2;
 80044e8:	2302      	movs	r3, #2
 80044ea:	e04d      	b.n	8004588 <Lane_Changer+0x1d8>
		}
		else if(orientation==REVERSE && s>1700)
 80044ec:	4b32      	ldr	r3, [pc, #200]	; (80045b8 <Lane_Changer+0x208>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d141      	bne.n	8004578 <Lane_Changer+0x1c8>
 80044f4:	4b2c      	ldr	r3, [pc, #176]	; (80045a8 <Lane_Changer+0x1f8>)
 80044f6:	edd3 7a00 	vldr	s15, [r3]
 80044fa:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80045c4 <Lane_Changer+0x214>
 80044fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004506:	dd37      	ble.n	8004578 <Lane_Changer+0x1c8>
		{
			TIM2->CCR1=CCR_FRONT_MIN;
 8004508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800450c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004510:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR4=CCR_REAR_MIN;
 8004512:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <Lane_Changer+0x20c>)
 8004514:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004518:	641a      	str	r2, [r3, #64]	; 0x40
			timeout=3000;
 800451a:	4b29      	ldr	r3, [pc, #164]	; (80045c0 <Lane_Changer+0x210>)
 800451c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004520:	601a      	str	r2, [r3, #0]
			laneChange=4;
 8004522:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <Lane_Changer+0x1e0>)
 8004524:	2204      	movs	r2, #4
 8004526:	701a      	strb	r2, [r3, #0]
			t_stamp=t;
 8004528:	4a1c      	ldr	r2, [pc, #112]	; (800459c <Lane_Changer+0x1ec>)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6013      	str	r3, [r2, #0]
			return 2;
 800452e:	2302      	movs	r3, #2
 8004530:	e02a      	b.n	8004588 <Lane_Changer+0x1d8>
		}
	}
	else if(laneChange==4)
 8004532:	4b17      	ldr	r3, [pc, #92]	; (8004590 <Lane_Changer+0x1e0>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b04      	cmp	r3, #4
 8004538:	d118      	bne.n	800456c <Lane_Changer+0x1bc>
	{
		LED_Y(0);
 800453a:	2201      	movs	r2, #1
 800453c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004540:	4821      	ldr	r0, [pc, #132]	; (80045c8 <Lane_Changer+0x218>)
 8004542:	f003 fbfd 	bl	8007d40 <HAL_GPIO_WritePin>
		if((t-t_stamp)>timeout && LINE_CNT==1)
 8004546:	4b15      	ldr	r3, [pc, #84]	; (800459c <Lane_Changer+0x1ec>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	1ad2      	subs	r2, r2, r3
 800454e:	4b1c      	ldr	r3, [pc, #112]	; (80045c0 <Lane_Changer+0x210>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d908      	bls.n	8004568 <Lane_Changer+0x1b8>
 8004556:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <Lane_Changer+0x1e4>)
 8004558:	785b      	ldrb	r3, [r3, #1]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d104      	bne.n	8004568 <Lane_Changer+0x1b8>
		{
			laneChange=5;
 800455e:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <Lane_Changer+0x1e0>)
 8004560:	2205      	movs	r2, #5
 8004562:	701a      	strb	r2, [r3, #0]
			return 1;
 8004564:	2301      	movs	r3, #1
 8004566:	e00f      	b.n	8004588 <Lane_Changer+0x1d8>
		}
		else return 2;
 8004568:	2302      	movs	r3, #2
 800456a:	e00d      	b.n	8004588 <Lane_Changer+0x1d8>
	}
	else if(laneChange==5)return 1;
 800456c:	4b08      	ldr	r3, [pc, #32]	; (8004590 <Lane_Changer+0x1e0>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b05      	cmp	r3, #5
 8004572:	d101      	bne.n	8004578 <Lane_Changer+0x1c8>
 8004574:	2301      	movs	r3, #1
 8004576:	e007      	b.n	8004588 <Lane_Changer+0x1d8>


	lineCnt_prev=LINE_CNT;
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <Lane_Changer+0x1e4>)
 800457a:	785a      	ldrb	r2, [r3, #1]
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <Lane_Changer+0x1e8>)
 800457e:	701a      	strb	r2, [r3, #0]
	t_prev=t;
 8004580:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <Lane_Changer+0x200>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6013      	str	r3, [r2, #0]
	return 0;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	200002ac 	.word	0x200002ac
 8004594:	20000654 	.word	0x20000654
 8004598:	20000068 	.word	0x20000068
 800459c:	200006c0 	.word	0x200006c0
 80045a0:	200006c4 	.word	0x200006c4
 80045a4:	2000006c 	.word	0x2000006c
 80045a8:	200006c8 	.word	0x200006c8
 80045ac:	2000063c 	.word	0x2000063c
 80045b0:	200006cc 	.word	0x200006cc
 80045b4:	447a0000 	.word	0x447a0000
 80045b8:	200002a8 	.word	0x200002a8
 80045bc:	40010000 	.word	0x40010000
 80045c0:	200006d0 	.word	0x200006d0
 80045c4:	44d48000 	.word	0x44d48000
 80045c8:	40020400 	.word	0x40020400

080045cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045d2:	f001 fca9 	bl	8005f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045d6:	f000 f88f 	bl	80046f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045da:	f000 fdad 	bl	8005138 <MX_GPIO_Init>
  MX_DMA_Init();
 80045de:	f000 fd8b 	bl	80050f8 <MX_DMA_Init>
  MX_TIM2_Init();
 80045e2:	f000 fa7f 	bl	8004ae4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80045e6:	f000 fd09 	bl	8004ffc <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80045ea:	f000 fb73 	bl	8004cd4 <MX_TIM4_Init>
  MX_ADC2_Init();
 80045ee:	f000 f987 	bl	8004900 <MX_ADC2_Init>
  MX_TIM3_Init();
 80045f2:	f000 faed 	bl	8004bd0 <MX_TIM3_Init>
  MX_UART5_Init();
 80045f6:	f000 fcd7 	bl	8004fa8 <MX_UART5_Init>
  MX_USART2_UART_Init();
 80045fa:	f000 fd29 	bl	8005050 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 80045fe:	f000 fc33 	bl	8004e68 <MX_TIM8_Init>
  MX_ADC1_Init();
 8004602:	f000 f8eb 	bl	80047dc <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8004606:	f000 fd4d 	bl	80050a4 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 800460a:	f000 fbdf 	bl	8004dcc <MX_TIM5_Init>
  MX_TIM1_Init();
 800460e:	f000 f9c9 	bl	80049a4 <MX_TIM1_Init>
  MX_TIM14_Init();
 8004612:	f000 fca5 	bl	8004f60 <MX_TIM14_Init>
  MX_TIM13_Init();
 8004616:	f000 fc7f 	bl	8004f18 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  F4_Basic_Init(&huart1, &htim5, &htim3, &htim2, &htim1, &htim8,&htim13,&htim14);
 800461a:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <main+0xf8>)
 800461c:	9303      	str	r3, [sp, #12]
 800461e:	4b2a      	ldr	r3, [pc, #168]	; (80046c8 <main+0xfc>)
 8004620:	9302      	str	r3, [sp, #8]
 8004622:	4b2a      	ldr	r3, [pc, #168]	; (80046cc <main+0x100>)
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	4b2a      	ldr	r3, [pc, #168]	; (80046d0 <main+0x104>)
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	4b2a      	ldr	r3, [pc, #168]	; (80046d4 <main+0x108>)
 800462c:	4a2a      	ldr	r2, [pc, #168]	; (80046d8 <main+0x10c>)
 800462e:	492b      	ldr	r1, [pc, #172]	; (80046dc <main+0x110>)
 8004630:	482b      	ldr	r0, [pc, #172]	; (80046e0 <main+0x114>)
 8004632:	f7fc fcc1 	bl	8000fb8 <F4_Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3);
 8004636:	2108      	movs	r1, #8
 8004638:	482a      	ldr	r0, [pc, #168]	; (80046e4 <main+0x118>)
 800463a:	f000 feaf 	bl	800539c <Remote_Control_Init>
  Battery_Voltage_Compensate(&hadc2, &hadc1, &huart1);
 800463e:	4a28      	ldr	r2, [pc, #160]	; (80046e0 <main+0x114>)
 8004640:	4929      	ldr	r1, [pc, #164]	; (80046e8 <main+0x11c>)
 8004642:	482a      	ldr	r0, [pc, #168]	; (80046ec <main+0x120>)
 8004644:	f7fe fbd0 	bl	8002de8 <Battery_Voltage_Compensate>

  Mode_Selector(&huart1, &huart5);
 8004648:	4929      	ldr	r1, [pc, #164]	; (80046f0 <main+0x124>)
 800464a:	4825      	ldr	r0, [pc, #148]	; (80046e0 <main+0x114>)
 800464c:	f7fe f97a 	bl	8002944 <Mode_Selector>
  Create_Nodes(&huart1);
 8004650:	4823      	ldr	r0, [pc, #140]	; (80046e0 <main+0x114>)
 8004652:	f7fc ff09 	bl	8001468 <Create_Nodes>
  Wait_For_Start_Sigal(&huart3,&huart1);
 8004656:	4922      	ldr	r1, [pc, #136]	; (80046e0 <main+0x114>)
 8004658:	4826      	ldr	r0, [pc, #152]	; (80046f4 <main+0x128>)
 800465a:	f7fe fa43 	bl	8002ae4 <Wait_For_Start_Sigal>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Measure_Velocity_Task(&htim8,TICK, 4);
 800465e:	4b1f      	ldr	r3, [pc, #124]	; (80046dc <main+0x110>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	2204      	movs	r2, #4
 8004666:	4619      	mov	r1, r3
 8004668:	4818      	ldr	r0, [pc, #96]	; (80046cc <main+0x100>)
 800466a:	f7fe fce9 	bl	8003040 <Measure_Velocity_Task>
	  Motor_Drive_Task(&htim3, &huart1, TICK, 10);
 800466e:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <main+0x110>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004674:	230a      	movs	r3, #10
 8004676:	491a      	ldr	r1, [pc, #104]	; (80046e0 <main+0x114>)
 8004678:	4817      	ldr	r0, [pc, #92]	; (80046d8 <main+0x10c>)
 800467a:	f7fe fd5d 	bl	8003138 <Motor_Drive_Task>
	  Line_Track_Task(&huart5, &huart1, TICK, 4);
 800467e:	4b17      	ldr	r3, [pc, #92]	; (80046dc <main+0x110>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004684:	2304      	movs	r3, #4
 8004686:	4916      	ldr	r1, [pc, #88]	; (80046e0 <main+0x114>)
 8004688:	4819      	ldr	r0, [pc, #100]	; (80046f0 <main+0x124>)
 800468a:	f7fe ff11 	bl	80034b0 <Line_Track_Task>
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart1, TICK, 29);
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <main+0x110>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	221d      	movs	r2, #29
 8004696:	9200      	str	r2, [sp, #0]
 8004698:	4a11      	ldr	r2, [pc, #68]	; (80046e0 <main+0x114>)
 800469a:	2108      	movs	r1, #8
 800469c:	4811      	ldr	r0, [pc, #68]	; (80046e4 <main+0x118>)
 800469e:	f000 fe99 	bl	80053d4 <Remote_Control_Task>
	  HDI_Read_Task(&huart1,&htim2,TICK, 200);
 80046a2:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <main+0x110>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046a8:	23c8      	movs	r3, #200	; 0xc8
 80046aa:	490a      	ldr	r1, [pc, #40]	; (80046d4 <main+0x108>)
 80046ac:	480c      	ldr	r0, [pc, #48]	; (80046e0 <main+0x114>)
 80046ae:	f7fc fd4d 	bl	800114c <HDI_Read_Task>
	  Control_Task(&huart1,&htim14,TICK, 43);
 80046b2:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <main+0x110>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046b8:	232b      	movs	r3, #43	; 0x2b
 80046ba:	4902      	ldr	r1, [pc, #8]	; (80046c4 <main+0xf8>)
 80046bc:	4808      	ldr	r0, [pc, #32]	; (80046e0 <main+0x114>)
 80046be:	f7fd fe2d 	bl	800231c <Control_Task>
	  Measure_Velocity_Task(&htim8,TICK, 4);
 80046c2:	e7cc      	b.n	800465e <main+0x92>
 80046c4:	2000095c 	.word	0x2000095c
 80046c8:	20000914 	.word	0x20000914
 80046cc:	200008cc 	.word	0x200008cc
 80046d0:	20000764 	.word	0x20000764
 80046d4:	200007ac 	.word	0x200007ac
 80046d8:	200007f4 	.word	0x200007f4
 80046dc:	20000884 	.word	0x20000884
 80046e0:	20000a48 	.word	0x20000a48
 80046e4:	2000083c 	.word	0x2000083c
 80046e8:	200006d4 	.word	0x200006d4
 80046ec:	2000071c 	.word	0x2000071c
 80046f0:	20000a04 	.word	0x20000a04
 80046f4:	20000ad0 	.word	0x20000ad0

080046f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b094      	sub	sp, #80	; 0x50
 80046fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046fe:	f107 031c 	add.w	r3, r7, #28
 8004702:	2234      	movs	r2, #52	; 0x34
 8004704:	2100      	movs	r1, #0
 8004706:	4618      	mov	r0, r3
 8004708:	f007 f964 	bl	800b9d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800470c:	f107 0308 	add.w	r3, r7, #8
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800471c:	2300      	movs	r3, #0
 800471e:	607b      	str	r3, [r7, #4]
 8004720:	4b2c      	ldr	r3, [pc, #176]	; (80047d4 <SystemClock_Config+0xdc>)
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	4a2b      	ldr	r2, [pc, #172]	; (80047d4 <SystemClock_Config+0xdc>)
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472a:	6413      	str	r3, [r2, #64]	; 0x40
 800472c:	4b29      	ldr	r3, [pc, #164]	; (80047d4 <SystemClock_Config+0xdc>)
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004734:	607b      	str	r3, [r7, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004738:	2300      	movs	r3, #0
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <SystemClock_Config+0xe0>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a25      	ldr	r2, [pc, #148]	; (80047d8 <SystemClock_Config+0xe0>)
 8004742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <SystemClock_Config+0xe0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004754:	2301      	movs	r3, #1
 8004756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800475c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800475e:	2302      	movs	r3, #2
 8004760:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004768:	2304      	movs	r3, #4
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800476c:	23b4      	movs	r3, #180	; 0xb4
 800476e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004770:	2302      	movs	r3, #2
 8004772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004774:	2302      	movs	r3, #2
 8004776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004778:	2302      	movs	r3, #2
 800477a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800477c:	f107 031c 	add.w	r3, r7, #28
 8004780:	4618      	mov	r0, r3
 8004782:	f003 fec3 	bl	800850c <HAL_RCC_OscConfig>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800478c:	f000 fe00 	bl	8005390 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004790:	f003 fb22 	bl	8007dd8 <HAL_PWREx_EnableOverDrive>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800479a:	f000 fdf9 	bl	8005390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800479e:	230f      	movs	r3, #15
 80047a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047a2:	2302      	movs	r3, #2
 80047a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80047aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80047ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80047b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80047b6:	f107 0308 	add.w	r3, r7, #8
 80047ba:	2105      	movs	r1, #5
 80047bc:	4618      	mov	r0, r3
 80047be:	f003 fb5b 	bl	8007e78 <HAL_RCC_ClockConfig>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80047c8:	f000 fde2 	bl	8005390 <Error_Handler>
  }
}
 80047cc:	bf00      	nop
 80047ce:	3750      	adds	r7, #80	; 0x50
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40023800 	.word	0x40023800
 80047d8:	40007000 	.word	0x40007000

080047dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08c      	sub	sp, #48	; 0x30
 80047e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80047e2:	f107 0320 	add.w	r3, r7, #32
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	605a      	str	r2, [r3, #4]
 80047ec:	609a      	str	r2, [r3, #8]
 80047ee:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80047f0:	463b      	mov	r3, r7
 80047f2:	2220      	movs	r2, #32
 80047f4:	2100      	movs	r1, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f007 f8ec 	bl	800b9d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80047fc:	4b3c      	ldr	r3, [pc, #240]	; (80048f0 <MX_ADC1_Init+0x114>)
 80047fe:	4a3d      	ldr	r2, [pc, #244]	; (80048f4 <MX_ADC1_Init+0x118>)
 8004800:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8004802:	4b3b      	ldr	r3, [pc, #236]	; (80048f0 <MX_ADC1_Init+0x114>)
 8004804:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004808:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800480a:	4b39      	ldr	r3, [pc, #228]	; (80048f0 <MX_ADC1_Init+0x114>)
 800480c:	2200      	movs	r2, #0
 800480e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004810:	4b37      	ldr	r3, [pc, #220]	; (80048f0 <MX_ADC1_Init+0x114>)
 8004812:	2201      	movs	r2, #1
 8004814:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004816:	4b36      	ldr	r3, [pc, #216]	; (80048f0 <MX_ADC1_Init+0x114>)
 8004818:	2200      	movs	r2, #0
 800481a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800481c:	4b34      	ldr	r3, [pc, #208]	; (80048f0 <MX_ADC1_Init+0x114>)
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004824:	4b32      	ldr	r3, [pc, #200]	; (80048f0 <MX_ADC1_Init+0x114>)
 8004826:	2200      	movs	r2, #0
 8004828:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800482a:	4b31      	ldr	r3, [pc, #196]	; (80048f0 <MX_ADC1_Init+0x114>)
 800482c:	4a32      	ldr	r2, [pc, #200]	; (80048f8 <MX_ADC1_Init+0x11c>)
 800482e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004830:	4b2f      	ldr	r3, [pc, #188]	; (80048f0 <MX_ADC1_Init+0x114>)
 8004832:	2200      	movs	r2, #0
 8004834:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8004836:	4b2e      	ldr	r3, [pc, #184]	; (80048f0 <MX_ADC1_Init+0x114>)
 8004838:	2203      	movs	r2, #3
 800483a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800483c:	4b2c      	ldr	r3, [pc, #176]	; (80048f0 <MX_ADC1_Init+0x114>)
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004844:	4b2a      	ldr	r3, [pc, #168]	; (80048f0 <MX_ADC1_Init+0x114>)
 8004846:	2201      	movs	r2, #1
 8004848:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800484a:	4829      	ldr	r0, [pc, #164]	; (80048f0 <MX_ADC1_Init+0x114>)
 800484c:	f001 fc02 	bl	8006054 <HAL_ADC_Init>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8004856:	f000 fd9b 	bl	8005390 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800485a:	2308      	movs	r3, #8
 800485c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800485e:	2301      	movs	r3, #1
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004862:	2307      	movs	r3, #7
 8004864:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004866:	f107 0320 	add.w	r3, r7, #32
 800486a:	4619      	mov	r1, r3
 800486c:	4820      	ldr	r0, [pc, #128]	; (80048f0 <MX_ADC1_Init+0x114>)
 800486e:	f001 fd9f 	bl	80063b0 <HAL_ADC_ConfigChannel>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8004878:	f000 fd8a 	bl	8005390 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800487c:	2302      	movs	r3, #2
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004880:	f107 0320 	add.w	r3, r7, #32
 8004884:	4619      	mov	r1, r3
 8004886:	481a      	ldr	r0, [pc, #104]	; (80048f0 <MX_ADC1_Init+0x114>)
 8004888:	f001 fd92 	bl	80063b0 <HAL_ADC_ConfigChannel>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8004892:	f000 fd7d 	bl	8005390 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8004896:	2303      	movs	r3, #3
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800489a:	f107 0320 	add.w	r3, r7, #32
 800489e:	4619      	mov	r1, r3
 80048a0:	4813      	ldr	r0, [pc, #76]	; (80048f0 <MX_ADC1_Init+0x114>)
 80048a2:	f001 fd85 	bl	80063b0 <HAL_ADC_ConfigChannel>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80048ac:	f000 fd70 	bl	8005390 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 80048b0:	2308      	movs	r3, #8
 80048b2:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80048b4:	2301      	movs	r3, #1
 80048b6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80048b8:	2301      	movs	r3, #1
 80048ba:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80048bc:	2300      	movs	r3, #0
 80048be:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80048c0:	2300      	movs	r3, #0
 80048c2:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80048c4:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <MX_ADC1_Init+0x120>)
 80048c6:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80048d4:	463b      	mov	r3, r7
 80048d6:	4619      	mov	r1, r3
 80048d8:	4805      	ldr	r0, [pc, #20]	; (80048f0 <MX_ADC1_Init+0x114>)
 80048da:	f001 ff97 	bl	800680c <HAL_ADCEx_InjectedConfigChannel>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80048e4:	f000 fd54 	bl	8005390 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80048e8:	bf00      	nop
 80048ea:	3730      	adds	r7, #48	; 0x30
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	200006d4 	.word	0x200006d4
 80048f4:	40012000 	.word	0x40012000
 80048f8:	0f000001 	.word	0x0f000001
 80048fc:	000f0001 	.word	0x000f0001

08004900 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004906:	463b      	mov	r3, r7
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	605a      	str	r2, [r3, #4]
 800490e:	609a      	str	r2, [r3, #8]
 8004910:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004912:	4b21      	ldr	r3, [pc, #132]	; (8004998 <MX_ADC2_Init+0x98>)
 8004914:	4a21      	ldr	r2, [pc, #132]	; (800499c <MX_ADC2_Init+0x9c>)
 8004916:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8004918:	4b1f      	ldr	r3, [pc, #124]	; (8004998 <MX_ADC2_Init+0x98>)
 800491a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800491e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004920:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <MX_ADC2_Init+0x98>)
 8004922:	2200      	movs	r2, #0
 8004924:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004926:	4b1c      	ldr	r3, [pc, #112]	; (8004998 <MX_ADC2_Init+0x98>)
 8004928:	2200      	movs	r2, #0
 800492a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800492c:	4b1a      	ldr	r3, [pc, #104]	; (8004998 <MX_ADC2_Init+0x98>)
 800492e:	2200      	movs	r2, #0
 8004930:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004932:	4b19      	ldr	r3, [pc, #100]	; (8004998 <MX_ADC2_Init+0x98>)
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800493a:	4b17      	ldr	r3, [pc, #92]	; (8004998 <MX_ADC2_Init+0x98>)
 800493c:	2200      	movs	r2, #0
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004940:	4b15      	ldr	r3, [pc, #84]	; (8004998 <MX_ADC2_Init+0x98>)
 8004942:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <MX_ADC2_Init+0xa0>)
 8004944:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004946:	4b14      	ldr	r3, [pc, #80]	; (8004998 <MX_ADC2_Init+0x98>)
 8004948:	2200      	movs	r2, #0
 800494a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800494c:	4b12      	ldr	r3, [pc, #72]	; (8004998 <MX_ADC2_Init+0x98>)
 800494e:	2201      	movs	r2, #1
 8004950:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004952:	4b11      	ldr	r3, [pc, #68]	; (8004998 <MX_ADC2_Init+0x98>)
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800495a:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <MX_ADC2_Init+0x98>)
 800495c:	2201      	movs	r2, #1
 800495e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004960:	480d      	ldr	r0, [pc, #52]	; (8004998 <MX_ADC2_Init+0x98>)
 8004962:	f001 fb77 	bl	8006054 <HAL_ADC_Init>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800496c:	f000 fd10 	bl	8005390 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004970:	230d      	movs	r3, #13
 8004972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004974:	2301      	movs	r3, #1
 8004976:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004978:	2307      	movs	r3, #7
 800497a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800497c:	463b      	mov	r3, r7
 800497e:	4619      	mov	r1, r3
 8004980:	4805      	ldr	r0, [pc, #20]	; (8004998 <MX_ADC2_Init+0x98>)
 8004982:	f001 fd15 	bl	80063b0 <HAL_ADC_ConfigChannel>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800498c:	f000 fd00 	bl	8005390 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	2000071c 	.word	0x2000071c
 800499c:	40012100 	.word	0x40012100
 80049a0:	0f000001 	.word	0x0f000001

080049a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b096      	sub	sp, #88	; 0x58
 80049a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	605a      	str	r2, [r3, #4]
 80049b4:	609a      	str	r2, [r3, #8]
 80049b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	605a      	str	r2, [r3, #4]
 80049cc:	609a      	str	r2, [r3, #8]
 80049ce:	60da      	str	r2, [r3, #12]
 80049d0:	611a      	str	r2, [r3, #16]
 80049d2:	615a      	str	r2, [r3, #20]
 80049d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80049d6:	1d3b      	adds	r3, r7, #4
 80049d8:	2220      	movs	r2, #32
 80049da:	2100      	movs	r1, #0
 80049dc:	4618      	mov	r0, r3
 80049de:	f006 fff9 	bl	800b9d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80049e2:	4b3e      	ldr	r3, [pc, #248]	; (8004adc <MX_TIM1_Init+0x138>)
 80049e4:	4a3e      	ldr	r2, [pc, #248]	; (8004ae0 <MX_TIM1_Init+0x13c>)
 80049e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 360-1;
 80049e8:	4b3c      	ldr	r3, [pc, #240]	; (8004adc <MX_TIM1_Init+0x138>)
 80049ea:	f240 1267 	movw	r2, #359	; 0x167
 80049ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049f0:	4b3a      	ldr	r3, [pc, #232]	; (8004adc <MX_TIM1_Init+0x138>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80049f6:	4b39      	ldr	r3, [pc, #228]	; (8004adc <MX_TIM1_Init+0x138>)
 80049f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80049fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049fe:	4b37      	ldr	r3, [pc, #220]	; (8004adc <MX_TIM1_Init+0x138>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a04:	4b35      	ldr	r3, [pc, #212]	; (8004adc <MX_TIM1_Init+0x138>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a0a:	4b34      	ldr	r3, [pc, #208]	; (8004adc <MX_TIM1_Init+0x138>)
 8004a0c:	2280      	movs	r2, #128	; 0x80
 8004a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004a10:	4832      	ldr	r0, [pc, #200]	; (8004adc <MX_TIM1_Init+0x138>)
 8004a12:	f004 f819 	bl	8008a48 <HAL_TIM_Base_Init>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004a1c:	f000 fcb8 	bl	8005390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	482b      	ldr	r0, [pc, #172]	; (8004adc <MX_TIM1_Init+0x138>)
 8004a2e:	f004 ff83 	bl	8009938 <HAL_TIM_ConfigClockSource>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004a38:	f000 fcaa 	bl	8005390 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a3c:	4827      	ldr	r0, [pc, #156]	; (8004adc <MX_TIM1_Init+0x138>)
 8004a3e:	f004 f8bb 	bl	8008bb8 <HAL_TIM_PWM_Init>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004a48:	f000 fca2 	bl	8005390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4820      	ldr	r0, [pc, #128]	; (8004adc <MX_TIM1_Init+0x138>)
 8004a5c:	f005 fd94 	bl	800a588 <HAL_TIMEx_MasterConfigSynchronization>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004a66:	f000 fc93 	bl	8005390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a6a:	2360      	movs	r3, #96	; 0x60
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 750-1;
 8004a6e:	f240 23ed 	movw	r3, #749	; 0x2ed
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a74:	2300      	movs	r3, #0
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a80:	2300      	movs	r3, #0
 8004a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a88:	220c      	movs	r2, #12
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4813      	ldr	r0, [pc, #76]	; (8004adc <MX_TIM1_Init+0x138>)
 8004a8e:	f004 fe91 	bl	80097b4 <HAL_TIM_PWM_ConfigChannel>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004a98:	f000 fc7a 	bl	8005390 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ab4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004aba:	1d3b      	adds	r3, r7, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	4807      	ldr	r0, [pc, #28]	; (8004adc <MX_TIM1_Init+0x138>)
 8004ac0:	f005 fdde 	bl	800a680 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8004aca:	f000 fc61 	bl	8005390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004ace:	4803      	ldr	r0, [pc, #12]	; (8004adc <MX_TIM1_Init+0x138>)
 8004ad0:	f000 ff28 	bl	8005924 <HAL_TIM_MspPostInit>

}
 8004ad4:	bf00      	nop
 8004ad6:	3758      	adds	r7, #88	; 0x58
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	20000764 	.word	0x20000764
 8004ae0:	40010000 	.word	0x40010000

08004ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08e      	sub	sp, #56	; 0x38
 8004ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	605a      	str	r2, [r3, #4]
 8004af4:	609a      	str	r2, [r3, #8]
 8004af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004af8:	f107 0320 	add.w	r3, r7, #32
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b02:	1d3b      	adds	r3, r7, #4
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	611a      	str	r2, [r3, #16]
 8004b10:	615a      	str	r2, [r3, #20]
 8004b12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b14:	4b2d      	ldr	r3, [pc, #180]	; (8004bcc <MX_TIM2_Init+0xe8>)
 8004b16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8004b1c:	4b2b      	ldr	r3, [pc, #172]	; (8004bcc <MX_TIM2_Init+0xe8>)
 8004b1e:	2259      	movs	r2, #89	; 0x59
 8004b20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b22:	4b2a      	ldr	r3, [pc, #168]	; (8004bcc <MX_TIM2_Init+0xe8>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8004b28:	4b28      	ldr	r3, [pc, #160]	; (8004bcc <MX_TIM2_Init+0xe8>)
 8004b2a:	f242 720f 	movw	r2, #9999	; 0x270f
 8004b2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b30:	4b26      	ldr	r3, [pc, #152]	; (8004bcc <MX_TIM2_Init+0xe8>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b36:	4b25      	ldr	r3, [pc, #148]	; (8004bcc <MX_TIM2_Init+0xe8>)
 8004b38:	2280      	movs	r2, #128	; 0x80
 8004b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004b3c:	4823      	ldr	r0, [pc, #140]	; (8004bcc <MX_TIM2_Init+0xe8>)
 8004b3e:	f003 ff83 	bl	8008a48 <HAL_TIM_Base_Init>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004b48:	f000 fc22 	bl	8005390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b56:	4619      	mov	r1, r3
 8004b58:	481c      	ldr	r0, [pc, #112]	; (8004bcc <MX_TIM2_Init+0xe8>)
 8004b5a:	f004 feed 	bl	8009938 <HAL_TIM_ConfigClockSource>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004b64:	f000 fc14 	bl	8005390 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004b68:	4818      	ldr	r0, [pc, #96]	; (8004bcc <MX_TIM2_Init+0xe8>)
 8004b6a:	f004 f825 	bl	8008bb8 <HAL_TIM_PWM_Init>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004b74:	f000 fc0c 	bl	8005390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b80:	f107 0320 	add.w	r3, r7, #32
 8004b84:	4619      	mov	r1, r3
 8004b86:	4811      	ldr	r0, [pc, #68]	; (8004bcc <MX_TIM2_Init+0xe8>)
 8004b88:	f005 fcfe 	bl	800a588 <HAL_TIMEx_MasterConfigSynchronization>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004b92:	f000 fbfd 	bl	8005390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b96:	2360      	movs	r3, #96	; 0x60
 8004b98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 8004b9a:	f240 23ed 	movw	r3, #749	; 0x2ed
 8004b9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ba8:	1d3b      	adds	r3, r7, #4
 8004baa:	2200      	movs	r2, #0
 8004bac:	4619      	mov	r1, r3
 8004bae:	4807      	ldr	r0, [pc, #28]	; (8004bcc <MX_TIM2_Init+0xe8>)
 8004bb0:	f004 fe00 	bl	80097b4 <HAL_TIM_PWM_ConfigChannel>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004bba:	f000 fbe9 	bl	8005390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004bbe:	4803      	ldr	r0, [pc, #12]	; (8004bcc <MX_TIM2_Init+0xe8>)
 8004bc0:	f000 feb0 	bl	8005924 <HAL_TIM_MspPostInit>

}
 8004bc4:	bf00      	nop
 8004bc6:	3738      	adds	r7, #56	; 0x38
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	200007ac 	.word	0x200007ac

08004bd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08e      	sub	sp, #56	; 0x38
 8004bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	605a      	str	r2, [r3, #4]
 8004be0:	609a      	str	r2, [r3, #8]
 8004be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004be4:	f107 0320 	add.w	r3, r7, #32
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bee:	1d3b      	adds	r3, r7, #4
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	605a      	str	r2, [r3, #4]
 8004bf6:	609a      	str	r2, [r3, #8]
 8004bf8:	60da      	str	r2, [r3, #12]
 8004bfa:	611a      	str	r2, [r3, #16]
 8004bfc:	615a      	str	r2, [r3, #20]
 8004bfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c00:	4b32      	ldr	r3, [pc, #200]	; (8004ccc <MX_TIM3_Init+0xfc>)
 8004c02:	4a33      	ldr	r2, [pc, #204]	; (8004cd0 <MX_TIM3_Init+0x100>)
 8004c04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 8004c06:	4b31      	ldr	r3, [pc, #196]	; (8004ccc <MX_TIM3_Init+0xfc>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8004c0c:	4b2f      	ldr	r3, [pc, #188]	; (8004ccc <MX_TIM3_Init+0xfc>)
 8004c0e:	2260      	movs	r2, #96	; 0x60
 8004c10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8004c12:	4b2e      	ldr	r3, [pc, #184]	; (8004ccc <MX_TIM3_Init+0xfc>)
 8004c14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c1a:	4b2c      	ldr	r3, [pc, #176]	; (8004ccc <MX_TIM3_Init+0xfc>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c20:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <MX_TIM3_Init+0xfc>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004c26:	4829      	ldr	r0, [pc, #164]	; (8004ccc <MX_TIM3_Init+0xfc>)
 8004c28:	f003 ff0e 	bl	8008a48 <HAL_TIM_Base_Init>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004c32:	f000 fbad 	bl	8005390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004c3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c40:	4619      	mov	r1, r3
 8004c42:	4822      	ldr	r0, [pc, #136]	; (8004ccc <MX_TIM3_Init+0xfc>)
 8004c44:	f004 fe78 	bl	8009938 <HAL_TIM_ConfigClockSource>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004c4e:	f000 fb9f 	bl	8005390 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004c52:	481e      	ldr	r0, [pc, #120]	; (8004ccc <MX_TIM3_Init+0xfc>)
 8004c54:	f003 ffb0 	bl	8008bb8 <HAL_TIM_PWM_Init>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004c5e:	f000 fb97 	bl	8005390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c62:	2300      	movs	r3, #0
 8004c64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c66:	2300      	movs	r3, #0
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c6a:	f107 0320 	add.w	r3, r7, #32
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4816      	ldr	r0, [pc, #88]	; (8004ccc <MX_TIM3_Init+0xfc>)
 8004c72:	f005 fc89 	bl	800a588 <HAL_TIMEx_MasterConfigSynchronization>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004c7c:	f000 fb88 	bl	8005390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c80:	2360      	movs	r3, #96	; 0x60
 8004c82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c90:	1d3b      	adds	r3, r7, #4
 8004c92:	2200      	movs	r2, #0
 8004c94:	4619      	mov	r1, r3
 8004c96:	480d      	ldr	r0, [pc, #52]	; (8004ccc <MX_TIM3_Init+0xfc>)
 8004c98:	f004 fd8c 	bl	80097b4 <HAL_TIM_PWM_ConfigChannel>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004ca2:	f000 fb75 	bl	8005390 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ca6:	1d3b      	adds	r3, r7, #4
 8004ca8:	2204      	movs	r2, #4
 8004caa:	4619      	mov	r1, r3
 8004cac:	4807      	ldr	r0, [pc, #28]	; (8004ccc <MX_TIM3_Init+0xfc>)
 8004cae:	f004 fd81 	bl	80097b4 <HAL_TIM_PWM_ConfigChannel>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004cb8:	f000 fb6a 	bl	8005390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004cbc:	4803      	ldr	r0, [pc, #12]	; (8004ccc <MX_TIM3_Init+0xfc>)
 8004cbe:	f000 fe31 	bl	8005924 <HAL_TIM_MspPostInit>

}
 8004cc2:	bf00      	nop
 8004cc4:	3738      	adds	r7, #56	; 0x38
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	200007f4 	.word	0x200007f4
 8004cd0:	40000400 	.word	0x40000400

08004cd4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08a      	sub	sp, #40	; 0x28
 8004cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cda:	f107 0318 	add.w	r3, r7, #24
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	605a      	str	r2, [r3, #4]
 8004ce4:	609a      	str	r2, [r3, #8]
 8004ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ce8:	f107 0310 	add.w	r3, r7, #16
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004cf2:	463b      	mov	r3, r7
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	605a      	str	r2, [r3, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
 8004cfc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004cfe:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <MX_TIM4_Init+0xf0>)
 8004d00:	4a31      	ldr	r2, [pc, #196]	; (8004dc8 <MX_TIM4_Init+0xf4>)
 8004d02:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 8004d04:	4b2f      	ldr	r3, [pc, #188]	; (8004dc4 <MX_TIM4_Init+0xf0>)
 8004d06:	f240 321f 	movw	r2, #799	; 0x31f
 8004d0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d0c:	4b2d      	ldr	r3, [pc, #180]	; (8004dc4 <MX_TIM4_Init+0xf0>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8004d12:	4b2c      	ldr	r3, [pc, #176]	; (8004dc4 <MX_TIM4_Init+0xf0>)
 8004d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d1a:	4b2a      	ldr	r3, [pc, #168]	; (8004dc4 <MX_TIM4_Init+0xf0>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d20:	4b28      	ldr	r3, [pc, #160]	; (8004dc4 <MX_TIM4_Init+0xf0>)
 8004d22:	2280      	movs	r2, #128	; 0x80
 8004d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004d26:	4827      	ldr	r0, [pc, #156]	; (8004dc4 <MX_TIM4_Init+0xf0>)
 8004d28:	f003 fe8e 	bl	8008a48 <HAL_TIM_Base_Init>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8004d32:	f000 fb2d 	bl	8005390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d3a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004d3c:	f107 0318 	add.w	r3, r7, #24
 8004d40:	4619      	mov	r1, r3
 8004d42:	4820      	ldr	r0, [pc, #128]	; (8004dc4 <MX_TIM4_Init+0xf0>)
 8004d44:	f004 fdf8 	bl	8009938 <HAL_TIM_ConfigClockSource>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004d4e:	f000 fb1f 	bl	8005390 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8004d52:	481c      	ldr	r0, [pc, #112]	; (8004dc4 <MX_TIM4_Init+0xf0>)
 8004d54:	f004 f852 	bl	8008dfc <HAL_TIM_IC_Init>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8004d5e:	f000 fb17 	bl	8005390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d62:	2300      	movs	r3, #0
 8004d64:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004d6a:	f107 0310 	add.w	r3, r7, #16
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4814      	ldr	r0, [pc, #80]	; (8004dc4 <MX_TIM4_Init+0xf0>)
 8004d72:	f005 fc09 	bl	800a588 <HAL_TIMEx_MasterConfigSynchronization>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8004d7c:	f000 fb08 	bl	8005390 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004d80:	230a      	movs	r3, #10
 8004d82:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004d84:	2301      	movs	r3, #1
 8004d86:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004d90:	463b      	mov	r3, r7
 8004d92:	2208      	movs	r2, #8
 8004d94:	4619      	mov	r1, r3
 8004d96:	480b      	ldr	r0, [pc, #44]	; (8004dc4 <MX_TIM4_Init+0xf0>)
 8004d98:	f004 fc70 	bl	800967c <HAL_TIM_IC_ConfigChannel>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8004da2:	f000 faf5 	bl	8005390 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004da6:	463b      	mov	r3, r7
 8004da8:	220c      	movs	r2, #12
 8004daa:	4619      	mov	r1, r3
 8004dac:	4805      	ldr	r0, [pc, #20]	; (8004dc4 <MX_TIM4_Init+0xf0>)
 8004dae:	f004 fc65 	bl	800967c <HAL_TIM_IC_ConfigChannel>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8004db8:	f000 faea 	bl	8005390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004dbc:	bf00      	nop
 8004dbe:	3728      	adds	r7, #40	; 0x28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	2000083c 	.word	0x2000083c
 8004dc8:	40000800 	.word	0x40000800

08004dcc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dd2:	f107 0308 	add.w	r3, r7, #8
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	605a      	str	r2, [r3, #4]
 8004ddc:	609a      	str	r2, [r3, #8]
 8004dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004de0:	463b      	mov	r3, r7
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004de8:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <MX_TIM5_Init+0x94>)
 8004dea:	4a1e      	ldr	r2, [pc, #120]	; (8004e64 <MX_TIM5_Init+0x98>)
 8004dec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 8004dee:	4b1c      	ldr	r3, [pc, #112]	; (8004e60 <MX_TIM5_Init+0x94>)
 8004df0:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8004df4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004df6:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <MX_TIM5_Init+0x94>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004dfc:	4b18      	ldr	r3, [pc, #96]	; (8004e60 <MX_TIM5_Init+0x94>)
 8004dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8004e02:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e04:	4b16      	ldr	r3, [pc, #88]	; (8004e60 <MX_TIM5_Init+0x94>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e0a:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <MX_TIM5_Init+0x94>)
 8004e0c:	2280      	movs	r2, #128	; 0x80
 8004e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004e10:	4813      	ldr	r0, [pc, #76]	; (8004e60 <MX_TIM5_Init+0x94>)
 8004e12:	f003 fe19 	bl	8008a48 <HAL_TIM_Base_Init>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004e1c:	f000 fab8 	bl	8005390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004e26:	f107 0308 	add.w	r3, r7, #8
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	480c      	ldr	r0, [pc, #48]	; (8004e60 <MX_TIM5_Init+0x94>)
 8004e2e:	f004 fd83 	bl	8009938 <HAL_TIM_ConfigClockSource>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004e38:	f000 faaa 	bl	8005390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e40:	2300      	movs	r3, #0
 8004e42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004e44:	463b      	mov	r3, r7
 8004e46:	4619      	mov	r1, r3
 8004e48:	4805      	ldr	r0, [pc, #20]	; (8004e60 <MX_TIM5_Init+0x94>)
 8004e4a:	f005 fb9d 	bl	800a588 <HAL_TIMEx_MasterConfigSynchronization>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004e54:	f000 fa9c 	bl	8005390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004e58:	bf00      	nop
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20000884 	.word	0x20000884
 8004e64:	40000c00 	.word	0x40000c00

08004e68 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08c      	sub	sp, #48	; 0x30
 8004e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004e6e:	f107 030c 	add.w	r3, r7, #12
 8004e72:	2224      	movs	r2, #36	; 0x24
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f006 fdac 	bl	800b9d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e7c:	1d3b      	adds	r3, r7, #4
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004e84:	4b22      	ldr	r3, [pc, #136]	; (8004f10 <MX_TIM8_Init+0xa8>)
 8004e86:	4a23      	ldr	r2, [pc, #140]	; (8004f14 <MX_TIM8_Init+0xac>)
 8004e88:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004e8a:	4b21      	ldr	r3, [pc, #132]	; (8004f10 <MX_TIM8_Init+0xa8>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e90:	4b1f      	ldr	r3, [pc, #124]	; (8004f10 <MX_TIM8_Init+0xa8>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004e96:	4b1e      	ldr	r3, [pc, #120]	; (8004f10 <MX_TIM8_Init+0xa8>)
 8004e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e9c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e9e:	4b1c      	ldr	r3, [pc, #112]	; (8004f10 <MX_TIM8_Init+0xa8>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004ea4:	4b1a      	ldr	r3, [pc, #104]	; (8004f10 <MX_TIM8_Init+0xa8>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004eaa:	4b19      	ldr	r3, [pc, #100]	; (8004f10 <MX_TIM8_Init+0xa8>)
 8004eac:	2280      	movs	r2, #128	; 0x80
 8004eae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 12;
 8004ec0:	230c      	movs	r3, #12
 8004ec2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 12;
 8004ed0:	230c      	movs	r3, #12
 8004ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004ed4:	f107 030c 	add.w	r3, r7, #12
 8004ed8:	4619      	mov	r1, r3
 8004eda:	480d      	ldr	r0, [pc, #52]	; (8004f10 <MX_TIM8_Init+0xa8>)
 8004edc:	f004 f992 	bl	8009204 <HAL_TIM_Encoder_Init>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004ee6:	f000 fa53 	bl	8005390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eea:	2300      	movs	r3, #0
 8004eec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004ef2:	1d3b      	adds	r3, r7, #4
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4806      	ldr	r0, [pc, #24]	; (8004f10 <MX_TIM8_Init+0xa8>)
 8004ef8:	f005 fb46 	bl	800a588 <HAL_TIMEx_MasterConfigSynchronization>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004f02:	f000 fa45 	bl	8005390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004f06:	bf00      	nop
 8004f08:	3730      	adds	r7, #48	; 0x30
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	200008cc 	.word	0x200008cc
 8004f14:	40010400 	.word	0x40010400

08004f18 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <MX_TIM13_Init+0x40>)
 8004f1e:	4a0f      	ldr	r2, [pc, #60]	; (8004f5c <MX_TIM13_Init+0x44>)
 8004f20:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 45000-1;
 8004f22:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <MX_TIM13_Init+0x40>)
 8004f24:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8004f28:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f2a:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <MX_TIM13_Init+0x40>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8004f30:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <MX_TIM13_Init+0x40>)
 8004f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f36:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f38:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <MX_TIM13_Init+0x40>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <MX_TIM13_Init+0x40>)
 8004f40:	2280      	movs	r2, #128	; 0x80
 8004f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004f44:	4804      	ldr	r0, [pc, #16]	; (8004f58 <MX_TIM13_Init+0x40>)
 8004f46:	f003 fd7f 	bl	8008a48 <HAL_TIM_Base_Init>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004f50:	f000 fa1e 	bl	8005390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004f54:	bf00      	nop
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	20000914 	.word	0x20000914
 8004f5c:	40001c00 	.word	0x40001c00

08004f60 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004f64:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <MX_TIM14_Init+0x40>)
 8004f66:	4a0f      	ldr	r2, [pc, #60]	; (8004fa4 <MX_TIM14_Init+0x44>)
 8004f68:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <MX_TIM14_Init+0x40>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <MX_TIM14_Init+0x40>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <MX_TIM14_Init+0x40>)
 8004f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f7c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f7e:	4b08      	ldr	r3, [pc, #32]	; (8004fa0 <MX_TIM14_Init+0x40>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <MX_TIM14_Init+0x40>)
 8004f86:	2280      	movs	r2, #128	; 0x80
 8004f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004f8a:	4805      	ldr	r0, [pc, #20]	; (8004fa0 <MX_TIM14_Init+0x40>)
 8004f8c:	f003 fd5c 	bl	8008a48 <HAL_TIM_Base_Init>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8004f96:	f000 f9fb 	bl	8005390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004f9a:	bf00      	nop
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	2000095c 	.word	0x2000095c
 8004fa4:	40002000 	.word	0x40002000

08004fa8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004fac:	4b11      	ldr	r3, [pc, #68]	; (8004ff4 <MX_UART5_Init+0x4c>)
 8004fae:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <MX_UART5_Init+0x50>)
 8004fb0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 8004fb2:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <MX_UART5_Init+0x4c>)
 8004fb4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8004fb8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004fba:	4b0e      	ldr	r3, [pc, #56]	; (8004ff4 <MX_UART5_Init+0x4c>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004fc0:	4b0c      	ldr	r3, [pc, #48]	; (8004ff4 <MX_UART5_Init+0x4c>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <MX_UART5_Init+0x4c>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004fcc:	4b09      	ldr	r3, [pc, #36]	; (8004ff4 <MX_UART5_Init+0x4c>)
 8004fce:	220c      	movs	r2, #12
 8004fd0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fd2:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <MX_UART5_Init+0x4c>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fd8:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <MX_UART5_Init+0x4c>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004fde:	4805      	ldr	r0, [pc, #20]	; (8004ff4 <MX_UART5_Init+0x4c>)
 8004fe0:	f005 fbb4 	bl	800a74c <HAL_UART_Init>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004fea:	f000 f9d1 	bl	8005390 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004fee:	bf00      	nop
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000a04 	.word	0x20000a04
 8004ff8:	40005000 	.word	0x40005000

08004ffc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005000:	4b11      	ldr	r3, [pc, #68]	; (8005048 <MX_USART1_UART_Init+0x4c>)
 8005002:	4a12      	ldr	r2, [pc, #72]	; (800504c <MX_USART1_UART_Init+0x50>)
 8005004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005006:	4b10      	ldr	r3, [pc, #64]	; (8005048 <MX_USART1_UART_Init+0x4c>)
 8005008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800500c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800500e:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <MX_USART1_UART_Init+0x4c>)
 8005010:	2200      	movs	r2, #0
 8005012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <MX_USART1_UART_Init+0x4c>)
 8005016:	2200      	movs	r2, #0
 8005018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800501a:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <MX_USART1_UART_Init+0x4c>)
 800501c:	2200      	movs	r2, #0
 800501e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005020:	4b09      	ldr	r3, [pc, #36]	; (8005048 <MX_USART1_UART_Init+0x4c>)
 8005022:	220c      	movs	r2, #12
 8005024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005026:	4b08      	ldr	r3, [pc, #32]	; (8005048 <MX_USART1_UART_Init+0x4c>)
 8005028:	2200      	movs	r2, #0
 800502a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800502c:	4b06      	ldr	r3, [pc, #24]	; (8005048 <MX_USART1_UART_Init+0x4c>)
 800502e:	2200      	movs	r2, #0
 8005030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005032:	4805      	ldr	r0, [pc, #20]	; (8005048 <MX_USART1_UART_Init+0x4c>)
 8005034:	f005 fb8a 	bl	800a74c <HAL_UART_Init>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800503e:	f000 f9a7 	bl	8005390 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005042:	bf00      	nop
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000a48 	.word	0x20000a48
 800504c:	40011000 	.word	0x40011000

08005050 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005054:	4b11      	ldr	r3, [pc, #68]	; (800509c <MX_USART2_UART_Init+0x4c>)
 8005056:	4a12      	ldr	r2, [pc, #72]	; (80050a0 <MX_USART2_UART_Init+0x50>)
 8005058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800505a:	4b10      	ldr	r3, [pc, #64]	; (800509c <MX_USART2_UART_Init+0x4c>)
 800505c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005060:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005062:	4b0e      	ldr	r3, [pc, #56]	; (800509c <MX_USART2_UART_Init+0x4c>)
 8005064:	2200      	movs	r2, #0
 8005066:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005068:	4b0c      	ldr	r3, [pc, #48]	; (800509c <MX_USART2_UART_Init+0x4c>)
 800506a:	2200      	movs	r2, #0
 800506c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800506e:	4b0b      	ldr	r3, [pc, #44]	; (800509c <MX_USART2_UART_Init+0x4c>)
 8005070:	2200      	movs	r2, #0
 8005072:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005074:	4b09      	ldr	r3, [pc, #36]	; (800509c <MX_USART2_UART_Init+0x4c>)
 8005076:	220c      	movs	r2, #12
 8005078:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800507a:	4b08      	ldr	r3, [pc, #32]	; (800509c <MX_USART2_UART_Init+0x4c>)
 800507c:	2200      	movs	r2, #0
 800507e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005080:	4b06      	ldr	r3, [pc, #24]	; (800509c <MX_USART2_UART_Init+0x4c>)
 8005082:	2200      	movs	r2, #0
 8005084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005086:	4805      	ldr	r0, [pc, #20]	; (800509c <MX_USART2_UART_Init+0x4c>)
 8005088:	f005 fb60 	bl	800a74c <HAL_UART_Init>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005092:	f000 f97d 	bl	8005390 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000a8c 	.word	0x20000a8c
 80050a0:	40004400 	.word	0x40004400

080050a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80050a8:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <MX_USART3_UART_Init+0x4c>)
 80050aa:	4a12      	ldr	r2, [pc, #72]	; (80050f4 <MX_USART3_UART_Init+0x50>)
 80050ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80050ae:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <MX_USART3_UART_Init+0x4c>)
 80050b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80050b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80050b6:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <MX_USART3_UART_Init+0x4c>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80050bc:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <MX_USART3_UART_Init+0x4c>)
 80050be:	2200      	movs	r2, #0
 80050c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80050c2:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <MX_USART3_UART_Init+0x4c>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80050c8:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <MX_USART3_UART_Init+0x4c>)
 80050ca:	220c      	movs	r2, #12
 80050cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050ce:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <MX_USART3_UART_Init+0x4c>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <MX_USART3_UART_Init+0x4c>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80050da:	4805      	ldr	r0, [pc, #20]	; (80050f0 <MX_USART3_UART_Init+0x4c>)
 80050dc:	f005 fb36 	bl	800a74c <HAL_UART_Init>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80050e6:	f000 f953 	bl	8005390 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80050ea:	bf00      	nop
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000ad0 	.word	0x20000ad0
 80050f4:	40004800 	.word	0x40004800

080050f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	607b      	str	r3, [r7, #4]
 8005102:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <MX_DMA_Init+0x3c>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	4a0b      	ldr	r2, [pc, #44]	; (8005134 <MX_DMA_Init+0x3c>)
 8005108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800510c:	6313      	str	r3, [r2, #48]	; 0x30
 800510e:	4b09      	ldr	r3, [pc, #36]	; (8005134 <MX_DMA_Init+0x3c>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800511a:	2200      	movs	r2, #0
 800511c:	2100      	movs	r1, #0
 800511e:	202f      	movs	r0, #47	; 0x2f
 8005120:	f001 fe0d 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8005124:	202f      	movs	r0, #47	; 0x2f
 8005126:	f001 fe26 	bl	8006d76 <HAL_NVIC_EnableIRQ>

}
 800512a:	bf00      	nop
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40023800 	.word	0x40023800

08005138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	; 0x28
 800513c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800513e:	f107 0314 	add.w	r3, r7, #20
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	605a      	str	r2, [r3, #4]
 8005148:	609a      	str	r2, [r3, #8]
 800514a:	60da      	str	r2, [r3, #12]
 800514c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800514e:	2300      	movs	r3, #0
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	4b64      	ldr	r3, [pc, #400]	; (80052e4 <MX_GPIO_Init+0x1ac>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	4a63      	ldr	r2, [pc, #396]	; (80052e4 <MX_GPIO_Init+0x1ac>)
 8005158:	f043 0304 	orr.w	r3, r3, #4
 800515c:	6313      	str	r3, [r2, #48]	; 0x30
 800515e:	4b61      	ldr	r3, [pc, #388]	; (80052e4 <MX_GPIO_Init+0x1ac>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	f003 0304 	and.w	r3, r3, #4
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	4b5d      	ldr	r3, [pc, #372]	; (80052e4 <MX_GPIO_Init+0x1ac>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	4a5c      	ldr	r2, [pc, #368]	; (80052e4 <MX_GPIO_Init+0x1ac>)
 8005174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005178:	6313      	str	r3, [r2, #48]	; 0x30
 800517a:	4b5a      	ldr	r3, [pc, #360]	; (80052e4 <MX_GPIO_Init+0x1ac>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	4b56      	ldr	r3, [pc, #344]	; (80052e4 <MX_GPIO_Init+0x1ac>)
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	4a55      	ldr	r2, [pc, #340]	; (80052e4 <MX_GPIO_Init+0x1ac>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6313      	str	r3, [r2, #48]	; 0x30
 8005196:	4b53      	ldr	r3, [pc, #332]	; (80052e4 <MX_GPIO_Init+0x1ac>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	60bb      	str	r3, [r7, #8]
 80051a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80051a2:	2300      	movs	r3, #0
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	4b4f      	ldr	r3, [pc, #316]	; (80052e4 <MX_GPIO_Init+0x1ac>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	4a4e      	ldr	r2, [pc, #312]	; (80052e4 <MX_GPIO_Init+0x1ac>)
 80051ac:	f043 0302 	orr.w	r3, r3, #2
 80051b0:	6313      	str	r3, [r2, #48]	; 0x30
 80051b2:	4b4c      	ldr	r3, [pc, #304]	; (80052e4 <MX_GPIO_Init+0x1ac>)
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	607b      	str	r3, [r7, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80051be:	2300      	movs	r3, #0
 80051c0:	603b      	str	r3, [r7, #0]
 80051c2:	4b48      	ldr	r3, [pc, #288]	; (80052e4 <MX_GPIO_Init+0x1ac>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	4a47      	ldr	r2, [pc, #284]	; (80052e4 <MX_GPIO_Init+0x1ac>)
 80051c8:	f043 0308 	orr.w	r3, r3, #8
 80051cc:	6313      	str	r3, [r2, #48]	; 0x30
 80051ce:	4b45      	ldr	r3, [pc, #276]	; (80052e4 <MX_GPIO_Init+0x1ac>)
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 80051da:	2200      	movs	r2, #0
 80051dc:	2102      	movs	r1, #2
 80051de:	4842      	ldr	r0, [pc, #264]	; (80052e8 <MX_GPIO_Init+0x1b0>)
 80051e0:	f002 fdae 	bl	8007d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 80051e4:	2200      	movs	r2, #0
 80051e6:	2122      	movs	r1, #34	; 0x22
 80051e8:	4840      	ldr	r0, [pc, #256]	; (80052ec <MX_GPIO_Init+0x1b4>)
 80051ea:	f002 fda9 	bl	8007d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 80051ee:	2200      	movs	r2, #0
 80051f0:	f24e 0142 	movw	r1, #57410	; 0xe042
 80051f4:	483e      	ldr	r0, [pc, #248]	; (80052f0 <MX_GPIO_Init+0x1b8>)
 80051f6:	f002 fda3 	bl	8007d40 <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : On_Board_Button_Pin */
  GPIO_InitStruct.Pin = On_Board_Button_Pin;
 80051fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005200:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(On_Board_Button_GPIO_Port, &GPIO_InitStruct);
 800520a:	f107 0314 	add.w	r3, r7, #20
 800520e:	4619      	mov	r1, r3
 8005210:	4835      	ldr	r0, [pc, #212]	; (80052e8 <MX_GPIO_Init+0x1b0>)
 8005212:	f002 fbe9 	bl	80079e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 8005216:	2302      	movs	r3, #2
 8005218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800521a:	2301      	movs	r3, #1
 800521c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005222:	2300      	movs	r3, #0
 8005224:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 8005226:	f107 0314 	add.w	r3, r7, #20
 800522a:	4619      	mov	r1, r3
 800522c:	482e      	ldr	r0, [pc, #184]	; (80052e8 <MX_GPIO_Init+0x1b0>)
 800522e:	f002 fbdb 	bl	80079e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 8005232:	2322      	movs	r3, #34	; 0x22
 8005234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005236:	2301      	movs	r3, #1
 8005238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800523e:	2300      	movs	r3, #0
 8005240:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005242:	f107 0314 	add.w	r3, r7, #20
 8005246:	4619      	mov	r1, r3
 8005248:	4828      	ldr	r0, [pc, #160]	; (80052ec <MX_GPIO_Init+0x1b4>)
 800524a:	f002 fbcd 	bl	80079e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 800524e:	f24e 0342 	movw	r3, #57410	; 0xe042
 8005252:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005254:	2301      	movs	r3, #1
 8005256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005258:	2300      	movs	r3, #0
 800525a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800525c:	2300      	movs	r3, #0
 800525e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005260:	f107 0314 	add.w	r3, r7, #20
 8005264:	4619      	mov	r1, r3
 8005266:	4822      	ldr	r0, [pc, #136]	; (80052f0 <MX_GPIO_Init+0x1b8>)
 8005268:	f002 fbbe 	bl	80079e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B2_Pin|Motor_Feedback_Pin;
 800526c:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
 8005270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005272:	2300      	movs	r3, #0
 8005274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005276:	2300      	movs	r3, #0
 8005278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800527a:	f107 0314 	add.w	r3, r7, #20
 800527e:	4619      	mov	r1, r3
 8005280:	481b      	ldr	r0, [pc, #108]	; (80052f0 <MX_GPIO_Init+0x1b8>)
 8005282:	f002 fbb1 	bl	80079e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8005286:	f44f 7380 	mov.w	r3, #256	; 0x100
 800528a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800528c:	2300      	movs	r3, #0
 800528e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8005294:	f107 0314 	add.w	r3, r7, #20
 8005298:	4619      	mov	r1, r3
 800529a:	4814      	ldr	r0, [pc, #80]	; (80052ec <MX_GPIO_Init+0x1b4>)
 800529c:	f002 fba4 	bl	80079e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80052a0:	2310      	movs	r3, #16
 80052a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80052a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80052a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80052ae:	f107 0314 	add.w	r3, r7, #20
 80052b2:	4619      	mov	r1, r3
 80052b4:	480e      	ldr	r0, [pc, #56]	; (80052f0 <MX_GPIO_Init+0x1b8>)
 80052b6:	f002 fb97 	bl	80079e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80052ba:	2200      	movs	r2, #0
 80052bc:	2100      	movs	r1, #0
 80052be:	200a      	movs	r0, #10
 80052c0:	f001 fd3d 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80052c4:	200a      	movs	r0, #10
 80052c6:	f001 fd56 	bl	8006d76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80052ca:	2200      	movs	r2, #0
 80052cc:	2100      	movs	r1, #0
 80052ce:	2028      	movs	r0, #40	; 0x28
 80052d0:	f001 fd35 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80052d4:	2028      	movs	r0, #40	; 0x28
 80052d6:	f001 fd4e 	bl	8006d76 <HAL_NVIC_EnableIRQ>

}
 80052da:	bf00      	nop
 80052dc:	3728      	adds	r7, #40	; 0x28
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40023800 	.word	0x40023800
 80052e8:	40020800 	.word	0x40020800
 80052ec:	40020000 	.word	0x40020000
 80052f0:	40020400 	.word	0x40020400

080052f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	80fb      	strh	r3, [r7, #6]
	//ha meg lett nyomva a nucleon a kék gomb
	if(GPIO_Pin == On_Board_Button_Pin)B_NUCLEO_ISR(&huart1);
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005304:	d102      	bne.n	800530c <HAL_GPIO_EXTI_Callback+0x18>
 8005306:	4806      	ldr	r0, [pc, #24]	; (8005320 <HAL_GPIO_EXTI_Callback+0x2c>)
 8005308:	f7fc f81c 	bl	8001344 <B_NUCLEO_ISR>
	if(GPIO_Pin == B1_Pin) B1_ISR(&huart1);
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	2b10      	cmp	r3, #16
 8005310:	d102      	bne.n	8005318 <HAL_GPIO_EXTI_Callback+0x24>
 8005312:	4803      	ldr	r0, [pc, #12]	; (8005320 <HAL_GPIO_EXTI_Callback+0x2c>)
 8005314:	f7fb ffa6 	bl	8001264 <B1_ISR>
}
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20000a48 	.word	0x20000a48

08005324 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)Uart_Receive_From_PC_ISR(&huart1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a09      	ldr	r2, [pc, #36]	; (8005354 <HAL_UART_RxCpltCallback+0x30>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d103      	bne.n	800533c <HAL_UART_RxCpltCallback+0x18>
 8005334:	4807      	ldr	r0, [pc, #28]	; (8005354 <HAL_UART_RxCpltCallback+0x30>)
 8005336:	f7fb ff6f 	bl	8001218 <Uart_Receive_From_PC_ISR>
	else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(&huart3, &huart1);
}
 800533a:	e007      	b.n	800534c <HAL_UART_RxCpltCallback+0x28>
	else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(&huart3, &huart1);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a06      	ldr	r2, [pc, #24]	; (8005358 <HAL_UART_RxCpltCallback+0x34>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d103      	bne.n	800534c <HAL_UART_RxCpltCallback+0x28>
 8005344:	4903      	ldr	r1, [pc, #12]	; (8005354 <HAL_UART_RxCpltCallback+0x30>)
 8005346:	4804      	ldr	r0, [pc, #16]	; (8005358 <HAL_UART_RxCpltCallback+0x34>)
 8005348:	f7fd fc44 	bl	8002bd4 <Uart_Receive_Thunderboard_ISR>
}
 800534c:	bf00      	nop
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	20000a48 	.word	0x20000a48
 8005358:	20000ad0 	.word	0x20000ad0

0800535c <Delay>:

void Delay(uint16_t ms)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	80fb      	strh	r3, [r7, #6]
	TIM13->CNT=0;
 8005366:	4b08      	ldr	r3, [pc, #32]	; (8005388 <Delay+0x2c>)
 8005368:	2200      	movs	r2, #0
 800536a:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		if(__HAL_TIM_GET_COUNTER(&htim13)>ms)break;
 800536c:	4b07      	ldr	r3, [pc, #28]	; (800538c <Delay+0x30>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	429a      	cmp	r2, r3
 8005376:	d800      	bhi.n	800537a <Delay+0x1e>
 8005378:	e7f8      	b.n	800536c <Delay+0x10>
 800537a:	bf00      	nop
	}

}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	40001c00 	.word	0x40001c00
 800538c:	20000914 	.word	0x20000914

08005390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005394:	b672      	cpsid	i
}
 8005396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005398:	e7fe      	b.n	8005398 <Error_Handler+0x8>
	...

0800539c <Remote_Control_Init>:
#include <math.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
	tEdge[0] = 1000;
 80053a6:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <Remote_Control_Init+0x34>)
 80053a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053ac:	601a      	str	r2, [r3, #0]
	tEdge[1] = 500;
 80053ae:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <Remote_Control_Init+0x34>)
 80053b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80053b4:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <Remote_Control_Init+0x34>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 80053bc:	2303      	movs	r3, #3
 80053be:	4a04      	ldr	r2, [pc, #16]	; (80053d0 <Remote_Control_Init+0x34>)
 80053c0:	6839      	ldr	r1, [r7, #0]
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f003 fd74 	bl	8008eb0 <HAL_TIM_IC_Start_DMA>
}
 80053c8:	bf00      	nop
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20000b18 	.word	0x20000b18

080053d4 <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
	static int32_t dt1=85;
	static int32_t dt2=85;
	static uint32_t tLow=85;
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 80053e2:	4b51      	ldr	r3, [pc, #324]	; (8005528 <Remote_Control_Task+0x154>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	f0c0 8099 	bcc.w	8005520 <Remote_Control_Task+0x14c>
	remote_control_tick = tick + period;
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	4413      	add	r3, r2
 80053f4:	4a4c      	ldr	r2, [pc, #304]	; (8005528 <Remote_Control_Task+0x154>)
 80053f6:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 80053f8:	201e      	movs	r0, #30
 80053fa:	f001 fcca 	bl	8006d92 <HAL_NVIC_DisableIRQ>
	dt0=abs(tEdge[1]-tEdge[0]);
 80053fe:	4b4b      	ldr	r3, [pc, #300]	; (800552c <Remote_Control_Task+0x158>)
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	4b4a      	ldr	r3, [pc, #296]	; (800552c <Remote_Control_Task+0x158>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	bfb8      	it	lt
 800540c:	425b      	neglt	r3, r3
 800540e:	4a48      	ldr	r2, [pc, #288]	; (8005530 <Remote_Control_Task+0x15c>)
 8005410:	6013      	str	r3, [r2, #0]
	dt1=abs(tEdge[2]-tEdge[1]);
 8005412:	4b46      	ldr	r3, [pc, #280]	; (800552c <Remote_Control_Task+0x158>)
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	4b45      	ldr	r3, [pc, #276]	; (800552c <Remote_Control_Task+0x158>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	bfb8      	it	lt
 8005420:	425b      	neglt	r3, r3
 8005422:	4a44      	ldr	r2, [pc, #272]	; (8005534 <Remote_Control_Task+0x160>)
 8005424:	6013      	str	r3, [r2, #0]
	dt2=abs(tEdge[0]-tEdge[2]);
 8005426:	4b41      	ldr	r3, [pc, #260]	; (800552c <Remote_Control_Task+0x158>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b40      	ldr	r3, [pc, #256]	; (800552c <Remote_Control_Task+0x158>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	bfb8      	it	lt
 8005434:	425b      	neglt	r3, r3
 8005436:	4a40      	ldr	r2, [pc, #256]	; (8005538 <Remote_Control_Task+0x164>)
 8005438:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 800543a:	201e      	movs	r0, #30
 800543c:	f001 fc9b 	bl	8006d76 <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 8005440:	4b3b      	ldr	r3, [pc, #236]	; (8005530 <Remote_Control_Task+0x15c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f241 3288 	movw	r2, #5000	; 0x1388
 8005448:	4293      	cmp	r3, r2
 800544a:	dd06      	ble.n	800545a <Remote_Control_Task+0x86>
 800544c:	4b38      	ldr	r3, [pc, #224]	; (8005530 <Remote_Control_Task+0x15c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8005454:	33ff      	adds	r3, #255	; 0xff
 8005456:	4a36      	ldr	r2, [pc, #216]	; (8005530 <Remote_Control_Task+0x15c>)
 8005458:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 800545a:	4b36      	ldr	r3, [pc, #216]	; (8005534 <Remote_Control_Task+0x160>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005462:	4293      	cmp	r3, r2
 8005464:	dd06      	ble.n	8005474 <Remote_Control_Task+0xa0>
 8005466:	4b33      	ldr	r3, [pc, #204]	; (8005534 <Remote_Control_Task+0x160>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800546e:	33ff      	adds	r3, #255	; 0xff
 8005470:	4a30      	ldr	r2, [pc, #192]	; (8005534 <Remote_Control_Task+0x160>)
 8005472:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 8005474:	4b30      	ldr	r3, [pc, #192]	; (8005538 <Remote_Control_Task+0x164>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f241 3288 	movw	r2, #5000	; 0x1388
 800547c:	4293      	cmp	r3, r2
 800547e:	dd06      	ble.n	800548e <Remote_Control_Task+0xba>
 8005480:	4b2d      	ldr	r3, [pc, #180]	; (8005538 <Remote_Control_Task+0x164>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8005488:	33ff      	adds	r3, #255	; 0xff
 800548a:	4a2b      	ldr	r2, [pc, #172]	; (8005538 <Remote_Control_Task+0x164>)
 800548c:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 800548e:	4b28      	ldr	r3, [pc, #160]	; (8005530 <Remote_Control_Task+0x15c>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4b28      	ldr	r3, [pc, #160]	; (8005534 <Remote_Control_Task+0x160>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	da0b      	bge.n	80054b2 <Remote_Control_Task+0xde>
 800549a:	4b25      	ldr	r3, [pc, #148]	; (8005530 <Remote_Control_Task+0x15c>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b26      	ldr	r3, [pc, #152]	; (8005538 <Remote_Control_Task+0x164>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	da05      	bge.n	80054b2 <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 80054a6:	4b22      	ldr	r3, [pc, #136]	; (8005530 <Remote_Control_Task+0x15c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	4b23      	ldr	r3, [pc, #140]	; (800553c <Remote_Control_Task+0x168>)
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e016      	b.n	80054e0 <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 80054b2:	4b20      	ldr	r3, [pc, #128]	; (8005534 <Remote_Control_Task+0x160>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4b1e      	ldr	r3, [pc, #120]	; (8005530 <Remote_Control_Task+0x15c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	da0b      	bge.n	80054d6 <Remote_Control_Task+0x102>
 80054be:	4b1d      	ldr	r3, [pc, #116]	; (8005534 <Remote_Control_Task+0x160>)
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b1d      	ldr	r3, [pc, #116]	; (8005538 <Remote_Control_Task+0x164>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	da05      	bge.n	80054d6 <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 80054ca:	4b1a      	ldr	r3, [pc, #104]	; (8005534 <Remote_Control_Task+0x160>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	4b1a      	ldr	r3, [pc, #104]	; (800553c <Remote_Control_Task+0x168>)
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	e004      	b.n	80054e0 <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 80054d6:	4b18      	ldr	r3, [pc, #96]	; (8005538 <Remote_Control_Task+0x164>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	4b17      	ldr	r3, [pc, #92]	; (800553c <Remote_Control_Task+0x168>)
 80054de:	601a      	str	r2, [r3, #0]
	sprintf(string,"%d\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 10);
	remote_control_tick = tick + 1000;
#endif

	if((tLow>70 && tLow<100) || tLow==1000)
 80054e0:	4b16      	ldr	r3, [pc, #88]	; (800553c <Remote_Control_Task+0x168>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b46      	cmp	r3, #70	; 0x46
 80054e6:	d903      	bls.n	80054f0 <Remote_Control_Task+0x11c>
 80054e8:	4b14      	ldr	r3, [pc, #80]	; (800553c <Remote_Control_Task+0x168>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b63      	cmp	r3, #99	; 0x63
 80054ee:	d904      	bls.n	80054fa <Remote_Control_Task+0x126>
 80054f0:	4b12      	ldr	r3, [pc, #72]	; (800553c <Remote_Control_Task+0x168>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054f8:	d103      	bne.n	8005502 <Remote_Control_Task+0x12e>
	{
		//LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
		motorEnRemote=0;//állítsuk le a motort ha meghuzzuk a ravaszt
 80054fa:	4b11      	ldr	r3, [pc, #68]	; (8005540 <Remote_Control_Task+0x16c>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	e00f      	b.n	8005522 <Remote_Control_Task+0x14e>
	}
	else
	{
		//LED_R(0);
		if(tLow <= 70) motorEnRemote=1;
 8005502:	4b0e      	ldr	r3, [pc, #56]	; (800553c <Remote_Control_Task+0x168>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b46      	cmp	r3, #70	; 0x46
 8005508:	d803      	bhi.n	8005512 <Remote_Control_Task+0x13e>
 800550a:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <Remote_Control_Task+0x16c>)
 800550c:	2201      	movs	r2, #1
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	e002      	b.n	8005518 <Remote_Control_Task+0x144>
		else motorEnRemote=2;
 8005512:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <Remote_Control_Task+0x16c>)
 8005514:	2202      	movs	r2, #2
 8005516:	701a      	strb	r2, [r3, #0]
		readytorace=1;
 8005518:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <Remote_Control_Task+0x170>)
 800551a:	2201      	movs	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	e000      	b.n	8005522 <Remote_Control_Task+0x14e>
	if(remote_control_tick>tick) return;
 8005520:	bf00      	nop

	}
}
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	20000b24 	.word	0x20000b24
 800552c:	20000b18 	.word	0x20000b18
 8005530:	2000008c 	.word	0x2000008c
 8005534:	20000090 	.word	0x20000090
 8005538:	20000094 	.word	0x20000094
 800553c:	20000098 	.word	0x20000098
 8005540:	20000b14 	.word	0x20000b14
 8005544:	200002bc 	.word	0x200002bc

08005548 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800554e:	2300      	movs	r3, #0
 8005550:	607b      	str	r3, [r7, #4]
 8005552:	4b10      	ldr	r3, [pc, #64]	; (8005594 <HAL_MspInit+0x4c>)
 8005554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005556:	4a0f      	ldr	r2, [pc, #60]	; (8005594 <HAL_MspInit+0x4c>)
 8005558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800555c:	6453      	str	r3, [r2, #68]	; 0x44
 800555e:	4b0d      	ldr	r3, [pc, #52]	; (8005594 <HAL_MspInit+0x4c>)
 8005560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005566:	607b      	str	r3, [r7, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800556a:	2300      	movs	r3, #0
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	4b09      	ldr	r3, [pc, #36]	; (8005594 <HAL_MspInit+0x4c>)
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	4a08      	ldr	r2, [pc, #32]	; (8005594 <HAL_MspInit+0x4c>)
 8005574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005578:	6413      	str	r3, [r2, #64]	; 0x40
 800557a:	4b06      	ldr	r3, [pc, #24]	; (8005594 <HAL_MspInit+0x4c>)
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005586:	2007      	movs	r0, #7
 8005588:	f001 fbce 	bl	8006d28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800558c:	bf00      	nop
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40023800 	.word	0x40023800

08005598 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08c      	sub	sp, #48	; 0x30
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a0:	f107 031c 	add.w	r3, r7, #28
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	605a      	str	r2, [r3, #4]
 80055aa:	609a      	str	r2, [r3, #8]
 80055ac:	60da      	str	r2, [r3, #12]
 80055ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a2e      	ldr	r2, [pc, #184]	; (8005670 <HAL_ADC_MspInit+0xd8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d128      	bne.n	800560c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80055ba:	2300      	movs	r3, #0
 80055bc:	61bb      	str	r3, [r7, #24]
 80055be:	4b2d      	ldr	r3, [pc, #180]	; (8005674 <HAL_ADC_MspInit+0xdc>)
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	4a2c      	ldr	r2, [pc, #176]	; (8005674 <HAL_ADC_MspInit+0xdc>)
 80055c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c8:	6453      	str	r3, [r2, #68]	; 0x44
 80055ca:	4b2a      	ldr	r3, [pc, #168]	; (8005674 <HAL_ADC_MspInit+0xdc>)
 80055cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	4b26      	ldr	r3, [pc, #152]	; (8005674 <HAL_ADC_MspInit+0xdc>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	4a25      	ldr	r2, [pc, #148]	; (8005674 <HAL_ADC_MspInit+0xdc>)
 80055e0:	f043 0302 	orr.w	r3, r3, #2
 80055e4:	6313      	str	r3, [r2, #48]	; 0x30
 80055e6:	4b23      	ldr	r3, [pc, #140]	; (8005674 <HAL_ADC_MspInit+0xdc>)
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 80055f2:	2301      	movs	r3, #1
 80055f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055f6:	2303      	movs	r3, #3
 80055f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 80055fe:	f107 031c 	add.w	r3, r7, #28
 8005602:	4619      	mov	r1, r3
 8005604:	481c      	ldr	r0, [pc, #112]	; (8005678 <HAL_ADC_MspInit+0xe0>)
 8005606:	f002 f9ef 	bl	80079e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800560a:	e02c      	b.n	8005666 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1a      	ldr	r2, [pc, #104]	; (800567c <HAL_ADC_MspInit+0xe4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d127      	bne.n	8005666 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005616:	2300      	movs	r3, #0
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	4b16      	ldr	r3, [pc, #88]	; (8005674 <HAL_ADC_MspInit+0xdc>)
 800561c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561e:	4a15      	ldr	r2, [pc, #84]	; (8005674 <HAL_ADC_MspInit+0xdc>)
 8005620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005624:	6453      	str	r3, [r2, #68]	; 0x44
 8005626:	4b13      	ldr	r3, [pc, #76]	; (8005674 <HAL_ADC_MspInit+0xdc>)
 8005628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800562e:	613b      	str	r3, [r7, #16]
 8005630:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <HAL_ADC_MspInit+0xdc>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	4a0e      	ldr	r2, [pc, #56]	; (8005674 <HAL_ADC_MspInit+0xdc>)
 800563c:	f043 0304 	orr.w	r3, r3, #4
 8005640:	6313      	str	r3, [r2, #48]	; 0x30
 8005642:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <HAL_ADC_MspInit+0xdc>)
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Bat_Pin;
 800564e:	2308      	movs	r3, #8
 8005650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005652:	2303      	movs	r3, #3
 8005654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005656:	2300      	movs	r3, #0
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_Bat_GPIO_Port, &GPIO_InitStruct);
 800565a:	f107 031c 	add.w	r3, r7, #28
 800565e:	4619      	mov	r1, r3
 8005660:	4807      	ldr	r0, [pc, #28]	; (8005680 <HAL_ADC_MspInit+0xe8>)
 8005662:	f002 f9c1 	bl	80079e8 <HAL_GPIO_Init>
}
 8005666:	bf00      	nop
 8005668:	3730      	adds	r7, #48	; 0x30
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40012000 	.word	0x40012000
 8005674:	40023800 	.word	0x40023800
 8005678:	40020400 	.word	0x40020400
 800567c:	40012100 	.word	0x40012100
 8005680:	40020800 	.word	0x40020800

08005684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b090      	sub	sp, #64	; 0x40
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800568c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	605a      	str	r2, [r3, #4]
 8005696:	609a      	str	r2, [r3, #8]
 8005698:	60da      	str	r2, [r3, #12]
 800569a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a72      	ldr	r2, [pc, #456]	; (800586c <HAL_TIM_Base_MspInit+0x1e8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d10e      	bne.n	80056c4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056a6:	2300      	movs	r3, #0
 80056a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056aa:	4b71      	ldr	r3, [pc, #452]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 80056ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ae:	4a70      	ldr	r2, [pc, #448]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 80056b0:	f043 0301 	orr.w	r3, r3, #1
 80056b4:	6453      	str	r3, [r2, #68]	; 0x44
 80056b6:	4b6e      	ldr	r3, [pc, #440]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 80056b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80056c2:	e0cf      	b.n	8005864 <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM2)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056cc:	d116      	bne.n	80056fc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80056ce:	2300      	movs	r3, #0
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
 80056d2:	4b67      	ldr	r3, [pc, #412]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	4a66      	ldr	r2, [pc, #408]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 80056d8:	f043 0301 	orr.w	r3, r3, #1
 80056dc:	6413      	str	r3, [r2, #64]	; 0x40
 80056de:	4b64      	ldr	r3, [pc, #400]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80056ea:	2200      	movs	r2, #0
 80056ec:	2100      	movs	r1, #0
 80056ee:	201c      	movs	r0, #28
 80056f0:	f001 fb25 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80056f4:	201c      	movs	r0, #28
 80056f6:	f001 fb3e 	bl	8006d76 <HAL_NVIC_EnableIRQ>
}
 80056fa:	e0b3      	b.n	8005864 <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM3)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a5c      	ldr	r2, [pc, #368]	; (8005874 <HAL_TIM_Base_MspInit+0x1f0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d10e      	bne.n	8005724 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005706:	2300      	movs	r3, #0
 8005708:	623b      	str	r3, [r7, #32]
 800570a:	4b59      	ldr	r3, [pc, #356]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	4a58      	ldr	r2, [pc, #352]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 8005710:	f043 0302 	orr.w	r3, r3, #2
 8005714:	6413      	str	r3, [r2, #64]	; 0x40
 8005716:	4b56      	ldr	r3, [pc, #344]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	623b      	str	r3, [r7, #32]
 8005720:	6a3b      	ldr	r3, [r7, #32]
}
 8005722:	e09f      	b.n	8005864 <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM4)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a53      	ldr	r2, [pc, #332]	; (8005878 <HAL_TIM_Base_MspInit+0x1f4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d15f      	bne.n	80057ee <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
 8005732:	4b4f      	ldr	r3, [pc, #316]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	4a4e      	ldr	r2, [pc, #312]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 8005738:	f043 0304 	orr.w	r3, r3, #4
 800573c:	6413      	str	r3, [r2, #64]	; 0x40
 800573e:	4b4c      	ldr	r3, [pc, #304]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800574a:	2300      	movs	r3, #0
 800574c:	61bb      	str	r3, [r7, #24]
 800574e:	4b48      	ldr	r3, [pc, #288]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 8005750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005752:	4a47      	ldr	r2, [pc, #284]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 8005754:	f043 0302 	orr.w	r3, r3, #2
 8005758:	6313      	str	r3, [r2, #48]	; 0x30
 800575a:	4b45      	ldr	r3, [pc, #276]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 8005766:	f44f 7340 	mov.w	r3, #768	; 0x300
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800576c:	2302      	movs	r3, #2
 800576e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005770:	2300      	movs	r3, #0
 8005772:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005774:	2300      	movs	r3, #0
 8005776:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005778:	2302      	movs	r3, #2
 800577a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800577c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005780:	4619      	mov	r1, r3
 8005782:	483e      	ldr	r0, [pc, #248]	; (800587c <HAL_TIM_Base_MspInit+0x1f8>)
 8005784:	f002 f930 	bl	80079e8 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8005788:	4b3d      	ldr	r3, [pc, #244]	; (8005880 <HAL_TIM_Base_MspInit+0x1fc>)
 800578a:	4a3e      	ldr	r2, [pc, #248]	; (8005884 <HAL_TIM_Base_MspInit+0x200>)
 800578c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 800578e:	4b3c      	ldr	r3, [pc, #240]	; (8005880 <HAL_TIM_Base_MspInit+0x1fc>)
 8005790:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005794:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005796:	4b3a      	ldr	r3, [pc, #232]	; (8005880 <HAL_TIM_Base_MspInit+0x1fc>)
 8005798:	2200      	movs	r2, #0
 800579a:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800579c:	4b38      	ldr	r3, [pc, #224]	; (8005880 <HAL_TIM_Base_MspInit+0x1fc>)
 800579e:	2200      	movs	r2, #0
 80057a0:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80057a2:	4b37      	ldr	r3, [pc, #220]	; (8005880 <HAL_TIM_Base_MspInit+0x1fc>)
 80057a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057a8:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80057aa:	4b35      	ldr	r3, [pc, #212]	; (8005880 <HAL_TIM_Base_MspInit+0x1fc>)
 80057ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057b0:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80057b2:	4b33      	ldr	r3, [pc, #204]	; (8005880 <HAL_TIM_Base_MspInit+0x1fc>)
 80057b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80057b8:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 80057ba:	4b31      	ldr	r3, [pc, #196]	; (8005880 <HAL_TIM_Base_MspInit+0x1fc>)
 80057bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80057c2:	4b2f      	ldr	r3, [pc, #188]	; (8005880 <HAL_TIM_Base_MspInit+0x1fc>)
 80057c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80057c8:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057ca:	4b2d      	ldr	r3, [pc, #180]	; (8005880 <HAL_TIM_Base_MspInit+0x1fc>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80057d0:	482b      	ldr	r0, [pc, #172]	; (8005880 <HAL_TIM_Base_MspInit+0x1fc>)
 80057d2:	f001 faf9 	bl	8006dc8 <HAL_DMA_Init>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <HAL_TIM_Base_MspInit+0x15c>
      Error_Handler();
 80057dc:	f7ff fdd8 	bl	8005390 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a27      	ldr	r2, [pc, #156]	; (8005880 <HAL_TIM_Base_MspInit+0x1fc>)
 80057e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80057e6:	4a26      	ldr	r2, [pc, #152]	; (8005880 <HAL_TIM_Base_MspInit+0x1fc>)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6393      	str	r3, [r2, #56]	; 0x38
}
 80057ec:	e03a      	b.n	8005864 <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM5)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a25      	ldr	r2, [pc, #148]	; (8005888 <HAL_TIM_Base_MspInit+0x204>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d10e      	bne.n	8005816 <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	4b1c      	ldr	r3, [pc, #112]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	4a1b      	ldr	r2, [pc, #108]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 8005802:	f043 0308 	orr.w	r3, r3, #8
 8005806:	6413      	str	r3, [r2, #64]	; 0x40
 8005808:	4b19      	ldr	r3, [pc, #100]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	697b      	ldr	r3, [r7, #20]
}
 8005814:	e026      	b.n	8005864 <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM13)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1c      	ldr	r2, [pc, #112]	; (800588c <HAL_TIM_Base_MspInit+0x208>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10e      	bne.n	800583e <HAL_TIM_Base_MspInit+0x1ba>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005820:	2300      	movs	r3, #0
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	4b12      	ldr	r3, [pc, #72]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	4a11      	ldr	r2, [pc, #68]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 800582a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582e:	6413      	str	r3, [r2, #64]	; 0x40
 8005830:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	693b      	ldr	r3, [r7, #16]
}
 800583c:	e012      	b.n	8005864 <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM14)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a13      	ldr	r2, [pc, #76]	; (8005890 <HAL_TIM_Base_MspInit+0x20c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d10d      	bne.n	8005864 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	4b08      	ldr	r3, [pc, #32]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	4a07      	ldr	r2, [pc, #28]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 8005852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005856:	6413      	str	r3, [r2, #64]	; 0x40
 8005858:	4b05      	ldr	r3, [pc, #20]	; (8005870 <HAL_TIM_Base_MspInit+0x1ec>)
 800585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	68fb      	ldr	r3, [r7, #12]
}
 8005864:	bf00      	nop
 8005866:	3740      	adds	r7, #64	; 0x40
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40010000 	.word	0x40010000
 8005870:	40023800 	.word	0x40023800
 8005874:	40000400 	.word	0x40000400
 8005878:	40000800 	.word	0x40000800
 800587c:	40020400 	.word	0x40020400
 8005880:	200009a4 	.word	0x200009a4
 8005884:	400260b8 	.word	0x400260b8
 8005888:	40000c00 	.word	0x40000c00
 800588c:	40001c00 	.word	0x40001c00
 8005890:	40002000 	.word	0x40002000

08005894 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08a      	sub	sp, #40	; 0x28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800589c:	f107 0314 	add.w	r3, r7, #20
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	605a      	str	r2, [r3, #4]
 80058a6:	609a      	str	r2, [r3, #8]
 80058a8:	60da      	str	r2, [r3, #12]
 80058aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a19      	ldr	r2, [pc, #100]	; (8005918 <HAL_TIM_Encoder_MspInit+0x84>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d12b      	bne.n	800590e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	4b18      	ldr	r3, [pc, #96]	; (800591c <HAL_TIM_Encoder_MspInit+0x88>)
 80058bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058be:	4a17      	ldr	r2, [pc, #92]	; (800591c <HAL_TIM_Encoder_MspInit+0x88>)
 80058c0:	f043 0302 	orr.w	r3, r3, #2
 80058c4:	6453      	str	r3, [r2, #68]	; 0x44
 80058c6:	4b15      	ldr	r3, [pc, #84]	; (800591c <HAL_TIM_Encoder_MspInit+0x88>)
 80058c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058d2:	2300      	movs	r3, #0
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	4b11      	ldr	r3, [pc, #68]	; (800591c <HAL_TIM_Encoder_MspInit+0x88>)
 80058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058da:	4a10      	ldr	r2, [pc, #64]	; (800591c <HAL_TIM_Encoder_MspInit+0x88>)
 80058dc:	f043 0304 	orr.w	r3, r3, #4
 80058e0:	6313      	str	r3, [r2, #48]	; 0x30
 80058e2:	4b0e      	ldr	r3, [pc, #56]	; (800591c <HAL_TIM_Encoder_MspInit+0x88>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80058ee:	23c0      	movs	r3, #192	; 0xc0
 80058f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058f2:	2302      	movs	r3, #2
 80058f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058fa:	2300      	movs	r3, #0
 80058fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80058fe:	2303      	movs	r3, #3
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005902:	f107 0314 	add.w	r3, r7, #20
 8005906:	4619      	mov	r1, r3
 8005908:	4805      	ldr	r0, [pc, #20]	; (8005920 <HAL_TIM_Encoder_MspInit+0x8c>)
 800590a:	f002 f86d 	bl	80079e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800590e:	bf00      	nop
 8005910:	3728      	adds	r7, #40	; 0x28
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40010400 	.word	0x40010400
 800591c:	40023800 	.word	0x40023800
 8005920:	40020800 	.word	0x40020800

08005924 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	; 0x28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800592c:	f107 0314 	add.w	r3, r7, #20
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	609a      	str	r2, [r3, #8]
 8005938:	60da      	str	r2, [r3, #12]
 800593a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a37      	ldr	r2, [pc, #220]	; (8005a20 <HAL_TIM_MspPostInit+0xfc>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d11f      	bne.n	8005986 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005946:	2300      	movs	r3, #0
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	4b36      	ldr	r3, [pc, #216]	; (8005a24 <HAL_TIM_MspPostInit+0x100>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	4a35      	ldr	r2, [pc, #212]	; (8005a24 <HAL_TIM_MspPostInit+0x100>)
 8005950:	f043 0301 	orr.w	r3, r3, #1
 8005954:	6313      	str	r3, [r2, #48]	; 0x30
 8005956:	4b33      	ldr	r3, [pc, #204]	; (8005a24 <HAL_TIM_MspPostInit+0x100>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 8005962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005968:	2302      	movs	r3, #2
 800596a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800596c:	2300      	movs	r3, #0
 800596e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005970:	2300      	movs	r3, #0
 8005972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005974:	2301      	movs	r3, #1
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 8005978:	f107 0314 	add.w	r3, r7, #20
 800597c:	4619      	mov	r1, r3
 800597e:	482a      	ldr	r0, [pc, #168]	; (8005a28 <HAL_TIM_MspPostInit+0x104>)
 8005980:	f002 f832 	bl	80079e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005984:	e047      	b.n	8005a16 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598e:	d11f      	bne.n	80059d0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	4b23      	ldr	r3, [pc, #140]	; (8005a24 <HAL_TIM_MspPostInit+0x100>)
 8005996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005998:	4a22      	ldr	r2, [pc, #136]	; (8005a24 <HAL_TIM_MspPostInit+0x100>)
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	6313      	str	r3, [r2, #48]	; 0x30
 80059a0:	4b20      	ldr	r3, [pc, #128]	; (8005a24 <HAL_TIM_MspPostInit+0x100>)
 80059a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 80059ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059b2:	2302      	movs	r3, #2
 80059b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059ba:	2300      	movs	r3, #0
 80059bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80059be:	2301      	movs	r3, #1
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 80059c2:	f107 0314 	add.w	r3, r7, #20
 80059c6:	4619      	mov	r1, r3
 80059c8:	4817      	ldr	r0, [pc, #92]	; (8005a28 <HAL_TIM_MspPostInit+0x104>)
 80059ca:	f002 f80d 	bl	80079e8 <HAL_GPIO_Init>
}
 80059ce:	e022      	b.n	8005a16 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a15      	ldr	r2, [pc, #84]	; (8005a2c <HAL_TIM_MspPostInit+0x108>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d11d      	bne.n	8005a16 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059da:	2300      	movs	r3, #0
 80059dc:	60bb      	str	r3, [r7, #8]
 80059de:	4b11      	ldr	r3, [pc, #68]	; (8005a24 <HAL_TIM_MspPostInit+0x100>)
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	4a10      	ldr	r2, [pc, #64]	; (8005a24 <HAL_TIM_MspPostInit+0x100>)
 80059e4:	f043 0301 	orr.w	r3, r3, #1
 80059e8:	6313      	str	r3, [r2, #48]	; 0x30
 80059ea:	4b0e      	ldr	r3, [pc, #56]	; (8005a24 <HAL_TIM_MspPostInit+0x100>)
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 80059f6:	23c0      	movs	r3, #192	; 0xc0
 80059f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059fa:	2302      	movs	r3, #2
 80059fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a02:	2300      	movs	r3, #0
 8005a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005a06:	2302      	movs	r3, #2
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a0a:	f107 0314 	add.w	r3, r7, #20
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4805      	ldr	r0, [pc, #20]	; (8005a28 <HAL_TIM_MspPostInit+0x104>)
 8005a12:	f001 ffe9 	bl	80079e8 <HAL_GPIO_Init>
}
 8005a16:	bf00      	nop
 8005a18:	3728      	adds	r7, #40	; 0x28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40023800 	.word	0x40023800
 8005a28:	40020000 	.word	0x40020000
 8005a2c:	40000400 	.word	0x40000400

08005a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b090      	sub	sp, #64	; 0x40
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	605a      	str	r2, [r3, #4]
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	60da      	str	r2, [r3, #12]
 8005a46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a7c      	ldr	r2, [pc, #496]	; (8005c40 <HAL_UART_MspInit+0x210>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d14b      	bne.n	8005aea <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005a52:	2300      	movs	r3, #0
 8005a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a56:	4b7b      	ldr	r3, [pc, #492]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	4a7a      	ldr	r2, [pc, #488]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a60:	6413      	str	r3, [r2, #64]	; 0x40
 8005a62:	4b78      	ldr	r3, [pc, #480]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a6e:	2300      	movs	r3, #0
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
 8005a72:	4b74      	ldr	r3, [pc, #464]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	4a73      	ldr	r2, [pc, #460]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005a78:	f043 0304 	orr.w	r3, r3, #4
 8005a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a7e:	4b71      	ldr	r3, [pc, #452]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	627b      	str	r3, [r7, #36]	; 0x24
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	623b      	str	r3, [r7, #32]
 8005a8e:	4b6d      	ldr	r3, [pc, #436]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	4a6c      	ldr	r2, [pc, #432]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005a94:	f043 0308 	orr.w	r3, r3, #8
 8005a98:	6313      	str	r3, [r2, #48]	; 0x30
 8005a9a:	4b6a      	ldr	r3, [pc, #424]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	623b      	str	r3, [r7, #32]
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 8005aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aac:	2302      	movs	r3, #2
 8005aae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005ab8:	2308      	movs	r3, #8
 8005aba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 8005abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4861      	ldr	r0, [pc, #388]	; (8005c48 <HAL_UART_MspInit+0x218>)
 8005ac4:	f001 ff90 	bl	80079e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 8005ac8:	2304      	movs	r3, #4
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005acc:	2302      	movs	r3, #2
 8005ace:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005ad8:	2308      	movs	r3, #8
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 8005adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	485a      	ldr	r0, [pc, #360]	; (8005c4c <HAL_UART_MspInit+0x21c>)
 8005ae4:	f001 ff80 	bl	80079e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005ae8:	e0a6      	b.n	8005c38 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a58      	ldr	r2, [pc, #352]	; (8005c50 <HAL_UART_MspInit+0x220>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d135      	bne.n	8005b60 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005af4:	2300      	movs	r3, #0
 8005af6:	61fb      	str	r3, [r7, #28]
 8005af8:	4b52      	ldr	r3, [pc, #328]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afc:	4a51      	ldr	r2, [pc, #324]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005afe:	f043 0310 	orr.w	r3, r3, #16
 8005b02:	6453      	str	r3, [r2, #68]	; 0x44
 8005b04:	4b4f      	ldr	r3, [pc, #316]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b10:	2300      	movs	r3, #0
 8005b12:	61bb      	str	r3, [r7, #24]
 8005b14:	4b4b      	ldr	r3, [pc, #300]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	4a4a      	ldr	r2, [pc, #296]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005b1a:	f043 0301 	orr.w	r3, r3, #1
 8005b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8005b20:	4b48      	ldr	r3, [pc, #288]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	61bb      	str	r3, [r7, #24]
 8005b2a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 8005b2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b32:	2302      	movs	r3, #2
 8005b34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b3e:	2307      	movs	r3, #7
 8005b40:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b46:	4619      	mov	r1, r3
 8005b48:	4842      	ldr	r0, [pc, #264]	; (8005c54 <HAL_UART_MspInit+0x224>)
 8005b4a:	f001 ff4d 	bl	80079e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2100      	movs	r1, #0
 8005b52:	2025      	movs	r0, #37	; 0x25
 8005b54:	f001 f8f3 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005b58:	2025      	movs	r0, #37	; 0x25
 8005b5a:	f001 f90c 	bl	8006d76 <HAL_NVIC_EnableIRQ>
}
 8005b5e:	e06b      	b.n	8005c38 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a3c      	ldr	r2, [pc, #240]	; (8005c58 <HAL_UART_MspInit+0x228>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d12c      	bne.n	8005bc4 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	4b35      	ldr	r3, [pc, #212]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	4a34      	ldr	r2, [pc, #208]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b78:	6413      	str	r3, [r2, #64]	; 0x40
 8005b7a:	4b32      	ldr	r3, [pc, #200]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b86:	2300      	movs	r3, #0
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	4b2e      	ldr	r3, [pc, #184]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8e:	4a2d      	ldr	r2, [pc, #180]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005b90:	f043 0301 	orr.w	r3, r3, #1
 8005b94:	6313      	str	r3, [r2, #48]	; 0x30
 8005b96:	4b2b      	ldr	r3, [pc, #172]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8005ba2:	230c      	movs	r3, #12
 8005ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005bb2:	2307      	movs	r3, #7
 8005bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4825      	ldr	r0, [pc, #148]	; (8005c54 <HAL_UART_MspInit+0x224>)
 8005bbe:	f001 ff13 	bl	80079e8 <HAL_GPIO_Init>
}
 8005bc2:	e039      	b.n	8005c38 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a24      	ldr	r2, [pc, #144]	; (8005c5c <HAL_UART_MspInit+0x22c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d134      	bne.n	8005c38 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	4b1c      	ldr	r3, [pc, #112]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	4a1b      	ldr	r2, [pc, #108]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8005bde:	4b19      	ldr	r3, [pc, #100]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bea:	2300      	movs	r3, #0
 8005bec:	60bb      	str	r3, [r7, #8]
 8005bee:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf2:	4a14      	ldr	r2, [pc, #80]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005bf4:	f043 0304 	orr.w	r3, r3, #4
 8005bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8005bfa:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <HAL_UART_MspInit+0x214>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	60bb      	str	r3, [r7, #8]
 8005c04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 8005c06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c10:	2300      	movs	r3, #0
 8005c12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c14:	2303      	movs	r3, #3
 8005c16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005c18:	2307      	movs	r3, #7
 8005c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c20:	4619      	mov	r1, r3
 8005c22:	4809      	ldr	r0, [pc, #36]	; (8005c48 <HAL_UART_MspInit+0x218>)
 8005c24:	f001 fee0 	bl	80079e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	2027      	movs	r0, #39	; 0x27
 8005c2e:	f001 f886 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005c32:	2027      	movs	r0, #39	; 0x27
 8005c34:	f001 f89f 	bl	8006d76 <HAL_NVIC_EnableIRQ>
}
 8005c38:	bf00      	nop
 8005c3a:	3740      	adds	r7, #64	; 0x40
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	40005000 	.word	0x40005000
 8005c44:	40023800 	.word	0x40023800
 8005c48:	40020800 	.word	0x40020800
 8005c4c:	40020c00 	.word	0x40020c00
 8005c50:	40011000 	.word	0x40011000
 8005c54:	40020000 	.word	0x40020000
 8005c58:	40004400 	.word	0x40004400
 8005c5c:	40004800 	.word	0x40004800

08005c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005c64:	e7fe      	b.n	8005c64 <NMI_Handler+0x4>

08005c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c66:	b480      	push	{r7}
 8005c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c6a:	e7fe      	b.n	8005c6a <HardFault_Handler+0x4>

08005c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c70:	e7fe      	b.n	8005c70 <MemManage_Handler+0x4>

08005c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c72:	b480      	push	{r7}
 8005c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c76:	e7fe      	b.n	8005c76 <BusFault_Handler+0x4>

08005c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c7c:	e7fe      	b.n	8005c7c <UsageFault_Handler+0x4>

08005c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c82:	bf00      	nop
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c90:	bf00      	nop
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c9e:	bf00      	nop
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005cac:	f000 f98e 	bl	8005fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005cb0:	bf00      	nop
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005cb8:	2010      	movs	r0, #16
 8005cba:	f002 f875 	bl	8007da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005cbe:	bf00      	nop
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005cc8:	4802      	ldr	r0, [pc, #8]	; (8005cd4 <TIM2_IRQHandler+0x10>)
 8005cca:	f003 fbcf 	bl	800946c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005cce:	bf00      	nop
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	200007ac 	.word	0x200007ac

08005cd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005cdc:	4802      	ldr	r0, [pc, #8]	; (8005ce8 <USART1_IRQHandler+0x10>)
 8005cde:	f004 fee7 	bl	800aab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005ce2:	bf00      	nop
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000a48 	.word	0x20000a48

08005cec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005cf0:	4802      	ldr	r0, [pc, #8]	; (8005cfc <USART3_IRQHandler+0x10>)
 8005cf2:	f004 fedd 	bl	800aab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005cf6:	bf00      	nop
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20000ad0 	.word	0x20000ad0

08005d00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(On_Board_Button_Pin);
 8005d04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005d08:	f002 f84e 	bl	8007da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005d0c:	bf00      	nop
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8005d14:	4802      	ldr	r0, [pc, #8]	; (8005d20 <DMA1_Stream7_IRQHandler+0x10>)
 8005d16:	f001 f9ef 	bl	80070f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8005d1a:	bf00      	nop
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	200009a4 	.word	0x200009a4

08005d24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
	return 1;
 8005d28:	2301      	movs	r3, #1
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <_kill>:

int _kill(int pid, int sig)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005d3e:	f005 fe1f 	bl	800b980 <__errno>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2216      	movs	r2, #22
 8005d46:	601a      	str	r2, [r3, #0]
	return -1;
 8005d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <_exit>:

void _exit (int status)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff ffe7 	bl	8005d34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005d66:	e7fe      	b.n	8005d66 <_exit+0x12>

08005d68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	e00a      	b.n	8005d90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005d7a:	f3af 8000 	nop.w
 8005d7e:	4601      	mov	r1, r0
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	60ba      	str	r2, [r7, #8]
 8005d86:	b2ca      	uxtb	r2, r1
 8005d88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	dbf0      	blt.n	8005d7a <_read+0x12>
	}

return len;
 8005d98:	687b      	ldr	r3, [r7, #4]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b086      	sub	sp, #24
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	e009      	b.n	8005dc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	60ba      	str	r2, [r7, #8]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	dbf1      	blt.n	8005db4 <_write+0x12>
	}
	return len;
 8005dd0:	687b      	ldr	r3, [r7, #4]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <_close>:

int _close(int file)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
	return -1;
 8005de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e02:	605a      	str	r2, [r3, #4]
	return 0;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <_isatty>:

int _isatty(int file)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
	return 1;
 8005e1a:	2301      	movs	r3, #1
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
	return 0;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e4c:	4a14      	ldr	r2, [pc, #80]	; (8005ea0 <_sbrk+0x5c>)
 8005e4e:	4b15      	ldr	r3, [pc, #84]	; (8005ea4 <_sbrk+0x60>)
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e58:	4b13      	ldr	r3, [pc, #76]	; (8005ea8 <_sbrk+0x64>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d102      	bne.n	8005e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e60:	4b11      	ldr	r3, [pc, #68]	; (8005ea8 <_sbrk+0x64>)
 8005e62:	4a12      	ldr	r2, [pc, #72]	; (8005eac <_sbrk+0x68>)
 8005e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e66:	4b10      	ldr	r3, [pc, #64]	; (8005ea8 <_sbrk+0x64>)
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d207      	bcs.n	8005e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e74:	f005 fd84 	bl	800b980 <__errno>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	220c      	movs	r2, #12
 8005e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e82:	e009      	b.n	8005e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e84:	4b08      	ldr	r3, [pc, #32]	; (8005ea8 <_sbrk+0x64>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e8a:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <_sbrk+0x64>)
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4413      	add	r3, r2
 8005e92:	4a05      	ldr	r2, [pc, #20]	; (8005ea8 <_sbrk+0x64>)
 8005e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e96:	68fb      	ldr	r3, [r7, #12]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20020000 	.word	0x20020000
 8005ea4:	00000400 	.word	0x00000400
 8005ea8:	20000b28 	.word	0x20000b28
 8005eac:	20000b60 	.word	0x20000b60

08005eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005eb4:	4b06      	ldr	r3, [pc, #24]	; (8005ed0 <SystemInit+0x20>)
 8005eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eba:	4a05      	ldr	r2, [pc, #20]	; (8005ed0 <SystemInit+0x20>)
 8005ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ec4:	bf00      	nop
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	e000ed00 	.word	0xe000ed00

08005ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 8005ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005ed8:	480d      	ldr	r0, [pc, #52]	; (8005f10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005eda:	490e      	ldr	r1, [pc, #56]	; (8005f14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005edc:	4a0e      	ldr	r2, [pc, #56]	; (8005f18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ee0:	e002      	b.n	8005ee8 <LoopCopyDataInit>

08005ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ee6:	3304      	adds	r3, #4

08005ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005eec:	d3f9      	bcc.n	8005ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005eee:	4a0b      	ldr	r2, [pc, #44]	; (8005f1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005ef0:	4c0b      	ldr	r4, [pc, #44]	; (8005f20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ef4:	e001      	b.n	8005efa <LoopFillZerobss>

08005ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ef8:	3204      	adds	r2, #4

08005efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005efc:	d3fb      	bcc.n	8005ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005efe:	f7ff ffd7 	bl	8005eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f02:	f005 fd43 	bl	800b98c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f06:	f7fe fb61 	bl	80045cc <main>
  bx  lr    
 8005f0a:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 8005f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f14:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8005f18:	080103b0 	.word	0x080103b0
  ldr r2, =_sbss
 8005f1c:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8005f20:	20000b60 	.word	0x20000b60

08005f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f24:	e7fe      	b.n	8005f24 <ADC_IRQHandler>
	...

08005f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f2c:	4b0e      	ldr	r3, [pc, #56]	; (8005f68 <HAL_Init+0x40>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a0d      	ldr	r2, [pc, #52]	; (8005f68 <HAL_Init+0x40>)
 8005f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f38:	4b0b      	ldr	r3, [pc, #44]	; (8005f68 <HAL_Init+0x40>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a0a      	ldr	r2, [pc, #40]	; (8005f68 <HAL_Init+0x40>)
 8005f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f44:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <HAL_Init+0x40>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a07      	ldr	r2, [pc, #28]	; (8005f68 <HAL_Init+0x40>)
 8005f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f50:	2003      	movs	r0, #3
 8005f52:	f000 fee9 	bl	8006d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f56:	2000      	movs	r0, #0
 8005f58:	f000 f808 	bl	8005f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f5c:	f7ff faf4 	bl	8005548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	40023c00 	.word	0x40023c00

08005f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f74:	4b12      	ldr	r3, [pc, #72]	; (8005fc0 <HAL_InitTick+0x54>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	4b12      	ldr	r3, [pc, #72]	; (8005fc4 <HAL_InitTick+0x58>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 ff0f 	bl	8006dae <HAL_SYSTICK_Config>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e00e      	b.n	8005fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b0f      	cmp	r3, #15
 8005f9e:	d80a      	bhi.n	8005fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	f000 fec9 	bl	8006d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005fac:	4a06      	ldr	r2, [pc, #24]	; (8005fc8 <HAL_InitTick+0x5c>)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e000      	b.n	8005fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	2000009c 	.word	0x2000009c
 8005fc4:	200000a4 	.word	0x200000a4
 8005fc8:	200000a0 	.word	0x200000a0

08005fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fd0:	4b06      	ldr	r3, [pc, #24]	; (8005fec <HAL_IncTick+0x20>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <HAL_IncTick+0x24>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4413      	add	r3, r2
 8005fdc:	4a04      	ldr	r2, [pc, #16]	; (8005ff0 <HAL_IncTick+0x24>)
 8005fde:	6013      	str	r3, [r2, #0]
}
 8005fe0:	bf00      	nop
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	200000a4 	.word	0x200000a4
 8005ff0:	20000b2c 	.word	0x20000b2c

08005ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8005ff8:	4b03      	ldr	r3, [pc, #12]	; (8006008 <HAL_GetTick+0x14>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	20000b2c 	.word	0x20000b2c

0800600c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006014:	f7ff ffee 	bl	8005ff4 <HAL_GetTick>
 8006018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d005      	beq.n	8006032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <HAL_Delay+0x44>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4413      	add	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006032:	bf00      	nop
 8006034:	f7ff ffde 	bl	8005ff4 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	429a      	cmp	r2, r3
 8006042:	d8f7      	bhi.n	8006034 <HAL_Delay+0x28>
  {
  }
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	200000a4 	.word	0x200000a4

08006054 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e033      	b.n	80060d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	2b00      	cmp	r3, #0
 8006070:	d109      	bne.n	8006086 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff fa90 	bl	8005598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	f003 0310 	and.w	r3, r3, #16
 800608e:	2b00      	cmp	r3, #0
 8006090:	d118      	bne.n	80060c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800609a:	f023 0302 	bic.w	r3, r3, #2
 800609e:	f043 0202 	orr.w	r2, r3, #2
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fab4 	bl	8006614 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f023 0303 	bic.w	r3, r3, #3
 80060ba:	f043 0201 	orr.w	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	641a      	str	r2, [r3, #64]	; 0x40
 80060c2:	e001      	b.n	80060c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_ADC_Start+0x1a>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e0b2      	b.n	800625c <HAL_ADC_Start+0x180>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b01      	cmp	r3, #1
 800610a:	d018      	beq.n	800613e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0201 	orr.w	r2, r2, #1
 800611a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800611c:	4b52      	ldr	r3, [pc, #328]	; (8006268 <HAL_ADC_Start+0x18c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a52      	ldr	r2, [pc, #328]	; (800626c <HAL_ADC_Start+0x190>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	0c9a      	lsrs	r2, r3, #18
 8006128:	4613      	mov	r3, r2
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	4413      	add	r3, r2
 800612e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006130:	e002      	b.n	8006138 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	3b01      	subs	r3, #1
 8006136:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1f9      	bne.n	8006132 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b01      	cmp	r3, #1
 800614a:	d17a      	bne.n	8006242 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006154:	f023 0301 	bic.w	r3, r3, #1
 8006158:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006176:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618a:	d106      	bne.n	800619a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006190:	f023 0206 	bic.w	r2, r3, #6
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	645a      	str	r2, [r3, #68]	; 0x44
 8006198:	e002      	b.n	80061a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80061a8:	4b31      	ldr	r3, [pc, #196]	; (8006270 <HAL_ADC_Start+0x194>)
 80061aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80061b4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f003 031f 	and.w	r3, r3, #31
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d12a      	bne.n	8006218 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a2b      	ldr	r2, [pc, #172]	; (8006274 <HAL_ADC_Start+0x198>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d015      	beq.n	80061f8 <HAL_ADC_Start+0x11c>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a29      	ldr	r2, [pc, #164]	; (8006278 <HAL_ADC_Start+0x19c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d105      	bne.n	80061e2 <HAL_ADC_Start+0x106>
 80061d6:	4b26      	ldr	r3, [pc, #152]	; (8006270 <HAL_ADC_Start+0x194>)
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f003 031f 	and.w	r3, r3, #31
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a25      	ldr	r2, [pc, #148]	; (800627c <HAL_ADC_Start+0x1a0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d136      	bne.n	800625a <HAL_ADC_Start+0x17e>
 80061ec:	4b20      	ldr	r3, [pc, #128]	; (8006270 <HAL_ADC_Start+0x194>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d130      	bne.n	800625a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d129      	bne.n	800625a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006214:	609a      	str	r2, [r3, #8]
 8006216:	e020      	b.n	800625a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a15      	ldr	r2, [pc, #84]	; (8006274 <HAL_ADC_Start+0x198>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d11b      	bne.n	800625a <HAL_ADC_Start+0x17e>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d114      	bne.n	800625a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689a      	ldr	r2, [r3, #8]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800623e:	609a      	str	r2, [r3, #8]
 8006240:	e00b      	b.n	800625a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f043 0210 	orr.w	r2, r3, #16
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006252:	f043 0201 	orr.w	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	2000009c 	.word	0x2000009c
 800626c:	431bde83 	.word	0x431bde83
 8006270:	40012300 	.word	0x40012300
 8006274:	40012000 	.word	0x40012000
 8006278:	40012100 	.word	0x40012100
 800627c:	40012200 	.word	0x40012200

08006280 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629c:	d113      	bne.n	80062c6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80062a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ac:	d10b      	bne.n	80062c6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	f043 0220 	orr.w	r2, r3, #32
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e063      	b.n	800638e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80062c6:	f7ff fe95 	bl	8005ff4 <HAL_GetTick>
 80062ca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80062cc:	e021      	b.n	8006312 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d4:	d01d      	beq.n	8006312 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d007      	beq.n	80062ec <HAL_ADC_PollForConversion+0x6c>
 80062dc:	f7ff fe8a 	bl	8005ff4 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d212      	bcs.n	8006312 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d00b      	beq.n	8006312 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	f043 0204 	orr.w	r2, r3, #4
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e03d      	b.n	800638e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b02      	cmp	r3, #2
 800631e:	d1d6      	bne.n	80062ce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0212 	mvn.w	r2, #18
 8006328:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d123      	bne.n	800638c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006348:	2b00      	cmp	r3, #0
 800634a:	d11f      	bne.n	800638c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006356:	2b00      	cmp	r3, #0
 8006358:	d006      	beq.n	8006368 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006364:	2b00      	cmp	r3, #0
 8006366:	d111      	bne.n	800638c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d105      	bne.n	800638c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	f043 0201 	orr.w	r2, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_ADC_ConfigChannel+0x1c>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e113      	b.n	80065f4 <HAL_ADC_ConfigChannel+0x244>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b09      	cmp	r3, #9
 80063da:	d925      	bls.n	8006428 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68d9      	ldr	r1, [r3, #12]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	4613      	mov	r3, r2
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	4413      	add	r3, r2
 80063f0:	3b1e      	subs	r3, #30
 80063f2:	2207      	movs	r2, #7
 80063f4:	fa02 f303 	lsl.w	r3, r2, r3
 80063f8:	43da      	mvns	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	400a      	ands	r2, r1
 8006400:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68d9      	ldr	r1, [r3, #12]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	b29b      	uxth	r3, r3
 8006412:	4618      	mov	r0, r3
 8006414:	4603      	mov	r3, r0
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	4403      	add	r3, r0
 800641a:	3b1e      	subs	r3, #30
 800641c:	409a      	lsls	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	60da      	str	r2, [r3, #12]
 8006426:	e022      	b.n	800646e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6919      	ldr	r1, [r3, #16]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	4613      	mov	r3, r2
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	4413      	add	r3, r2
 800643c:	2207      	movs	r2, #7
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	43da      	mvns	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	400a      	ands	r2, r1
 800644a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6919      	ldr	r1, [r3, #16]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	b29b      	uxth	r3, r3
 800645c:	4618      	mov	r0, r3
 800645e:	4603      	mov	r3, r0
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4403      	add	r3, r0
 8006464:	409a      	lsls	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b06      	cmp	r3, #6
 8006474:	d824      	bhi.n	80064c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	3b05      	subs	r3, #5
 8006488:	221f      	movs	r2, #31
 800648a:	fa02 f303 	lsl.w	r3, r2, r3
 800648e:	43da      	mvns	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	400a      	ands	r2, r1
 8006496:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	4618      	mov	r0, r3
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	3b05      	subs	r3, #5
 80064b2:	fa00 f203 	lsl.w	r2, r0, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	635a      	str	r2, [r3, #52]	; 0x34
 80064be:	e04c      	b.n	800655a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b0c      	cmp	r3, #12
 80064c6:	d824      	bhi.n	8006512 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	3b23      	subs	r3, #35	; 0x23
 80064da:	221f      	movs	r2, #31
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	43da      	mvns	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	400a      	ands	r2, r1
 80064e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	4618      	mov	r0, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	3b23      	subs	r3, #35	; 0x23
 8006504:	fa00 f203 	lsl.w	r2, r0, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
 8006510:	e023      	b.n	800655a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	3b41      	subs	r3, #65	; 0x41
 8006524:	221f      	movs	r2, #31
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	43da      	mvns	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	400a      	ands	r2, r1
 8006532:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	4618      	mov	r0, r3
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	3b41      	subs	r3, #65	; 0x41
 800654e:	fa00 f203 	lsl.w	r2, r0, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800655a:	4b29      	ldr	r3, [pc, #164]	; (8006600 <HAL_ADC_ConfigChannel+0x250>)
 800655c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a28      	ldr	r2, [pc, #160]	; (8006604 <HAL_ADC_ConfigChannel+0x254>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d10f      	bne.n	8006588 <HAL_ADC_ConfigChannel+0x1d8>
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b12      	cmp	r3, #18
 800656e:	d10b      	bne.n	8006588 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a1d      	ldr	r2, [pc, #116]	; (8006604 <HAL_ADC_ConfigChannel+0x254>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d12b      	bne.n	80065ea <HAL_ADC_ConfigChannel+0x23a>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a1c      	ldr	r2, [pc, #112]	; (8006608 <HAL_ADC_ConfigChannel+0x258>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d003      	beq.n	80065a4 <HAL_ADC_ConfigChannel+0x1f4>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b11      	cmp	r3, #17
 80065a2:	d122      	bne.n	80065ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a11      	ldr	r2, [pc, #68]	; (8006608 <HAL_ADC_ConfigChannel+0x258>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d111      	bne.n	80065ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80065c6:	4b11      	ldr	r3, [pc, #68]	; (800660c <HAL_ADC_ConfigChannel+0x25c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a11      	ldr	r2, [pc, #68]	; (8006610 <HAL_ADC_ConfigChannel+0x260>)
 80065cc:	fba2 2303 	umull	r2, r3, r2, r3
 80065d0:	0c9a      	lsrs	r2, r3, #18
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80065dc:	e002      	b.n	80065e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1f9      	bne.n	80065de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	40012300 	.word	0x40012300
 8006604:	40012000 	.word	0x40012000
 8006608:	10000012 	.word	0x10000012
 800660c:	2000009c 	.word	0x2000009c
 8006610:	431bde83 	.word	0x431bde83

08006614 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800661c:	4b79      	ldr	r3, [pc, #484]	; (8006804 <ADC_Init+0x1f0>)
 800661e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	431a      	orrs	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6859      	ldr	r1, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	021a      	lsls	r2, r3, #8
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800666c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6859      	ldr	r1, [r3, #4]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800668e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6899      	ldr	r1, [r3, #8]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a6:	4a58      	ldr	r2, [pc, #352]	; (8006808 <ADC_Init+0x1f4>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d022      	beq.n	80066f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6899      	ldr	r1, [r3, #8]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80066dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6899      	ldr	r1, [r3, #8]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	609a      	str	r2, [r3, #8]
 80066f0:	e00f      	b.n	8006712 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006700:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006710:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0202 	bic.w	r2, r2, #2
 8006720:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6899      	ldr	r1, [r3, #8]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	7e1b      	ldrb	r3, [r3, #24]
 800672c:	005a      	lsls	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01b      	beq.n	8006778 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800674e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800675e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6859      	ldr	r1, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	3b01      	subs	r3, #1
 800676c:	035a      	lsls	r2, r3, #13
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	605a      	str	r2, [r3, #4]
 8006776:	e007      	b.n	8006788 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006786:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	051a      	lsls	r2, r3, #20
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6899      	ldr	r1, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067ca:	025a      	lsls	r2, r3, #9
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6899      	ldr	r1, [r3, #8]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	029a      	lsls	r2, r3, #10
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	609a      	str	r2, [r3, #8]
}
 80067f8:	bf00      	nop
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	40012300 	.word	0x40012300
 8006808:	0f000001 	.word	0x0f000001

0800680c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8006820:	2302      	movs	r3, #2
 8006822:	e17e      	b.n	8006b22 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b09      	cmp	r3, #9
 8006832:	d925      	bls.n	8006880 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68d9      	ldr	r1, [r3, #12]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	461a      	mov	r2, r3
 8006842:	4613      	mov	r3, r2
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	4413      	add	r3, r2
 8006848:	3b1e      	subs	r3, #30
 800684a:	2207      	movs	r2, #7
 800684c:	fa02 f303 	lsl.w	r3, r2, r3
 8006850:	43da      	mvns	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	400a      	ands	r2, r1
 8006858:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68d9      	ldr	r1, [r3, #12]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	b29b      	uxth	r3, r3
 800686a:	4618      	mov	r0, r3
 800686c:	4603      	mov	r3, r0
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	4403      	add	r3, r0
 8006872:	3b1e      	subs	r3, #30
 8006874:	409a      	lsls	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	60da      	str	r2, [r3, #12]
 800687e:	e022      	b.n	80068c6 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6919      	ldr	r1, [r3, #16]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	461a      	mov	r2, r3
 800688e:	4613      	mov	r3, r2
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	4413      	add	r3, r2
 8006894:	2207      	movs	r2, #7
 8006896:	fa02 f303 	lsl.w	r3, r2, r3
 800689a:	43da      	mvns	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	400a      	ands	r2, r1
 80068a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6919      	ldr	r1, [r3, #16]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	4618      	mov	r0, r3
 80068b6:	4603      	mov	r3, r0
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	4403      	add	r3, r0
 80068bc:	409a      	lsls	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	051a      	lsls	r2, r3, #20
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	b2db      	uxtb	r3, r3
 8006902:	3303      	adds	r3, #3
 8006904:	b2db      	uxtb	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	221f      	movs	r2, #31
 8006910:	fa02 f303 	lsl.w	r3, r2, r3
 8006914:	43da      	mvns	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	400a      	ands	r2, r1
 800691c:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	4618      	mov	r0, r3
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	b2da      	uxtb	r2, r3
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	b2db      	uxtb	r3, r3
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	b2db      	uxtb	r3, r3
 800693c:	3303      	adds	r3, #3
 800693e:	b2db      	uxtb	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	fa00 f203 	lsl.w	r2, r0, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	4a75      	ldr	r2, [pc, #468]	; (8006b30 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d022      	beq.n	80069a4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800696c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6899      	ldr	r1, [r3, #8]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	699a      	ldr	r2, [r3, #24]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800698e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6899      	ldr	r1, [r3, #8]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	69da      	ldr	r2, [r3, #28]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	609a      	str	r2, [r3, #8]
 80069a2:	e00f      	b.n	80069c4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80069b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80069c2:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	7d5b      	ldrb	r3, [r3, #21]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d008      	beq.n	80069de <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069da:	605a      	str	r2, [r3, #4]
 80069dc:	e007      	b.n	80069ee <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ec:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	7d1b      	ldrb	r3, [r3, #20]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d008      	beq.n	8006a08 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a04:	605a      	str	r2, [r3, #4]
 8006a06:	e007      	b.n	8006a18 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a16:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d02e      	beq.n	8006a7e <HAL_ADCEx_InjectedConfigChannel+0x272>
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d840      	bhi.n	8006aa6 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d002      	beq.n	8006a2e <HAL_ADCEx_InjectedConfigChannel+0x222>
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d014      	beq.n	8006a56 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8006a2c:	e03b      	b.n	8006aa6 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6812      	ldr	r2, [r2, #0]
 8006a38:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006a3c:	f023 030f 	bic.w	r3, r3, #15
 8006a40:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6959      	ldr	r1, [r3, #20]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	615a      	str	r2, [r3, #20]
      break;
 8006a54:	e03b      	b.n	8006ace <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6812      	ldr	r2, [r2, #0]
 8006a60:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006a64:	f023 030f 	bic.w	r3, r3, #15
 8006a68:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6999      	ldr	r1, [r3, #24]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	619a      	str	r2, [r3, #24]
      break;
 8006a7c:	e027      	b.n	8006ace <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6812      	ldr	r2, [r2, #0]
 8006a88:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006a8c:	f023 030f 	bic.w	r3, r3, #15
 8006a90:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69d9      	ldr	r1, [r3, #28]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	61da      	str	r2, [r3, #28]
      break;
 8006aa4:	e013      	b.n	8006ace <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6812      	ldr	r2, [r2, #0]
 8006ab0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006ab4:	f023 030f 	bic.w	r3, r3, #15
 8006ab8:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6a19      	ldr	r1, [r3, #32]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	68da      	ldr	r2, [r3, #12]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	621a      	str	r2, [r3, #32]
      break;
 8006acc:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ace:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a18      	ldr	r2, [pc, #96]	; (8006b38 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d109      	bne.n	8006af0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b12      	cmp	r3, #18
 8006ae2:	d105      	bne.n	8006af0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a10      	ldr	r2, [pc, #64]	; (8006b38 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d10e      	bne.n	8006b18 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a0f      	ldr	r2, [pc, #60]	; (8006b3c <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d003      	beq.n	8006b0c <HAL_ADCEx_InjectedConfigChannel+0x300>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b11      	cmp	r3, #17
 8006b0a:	d105      	bne.n	8006b18 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	000f0001 	.word	0x000f0001
 8006b34:	40012300 	.word	0x40012300
 8006b38:	40012000 	.word	0x40012000
 8006b3c:	10000012 	.word	0x10000012

08006b40 <__NVIC_SetPriorityGrouping>:
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f003 0307 	and.w	r3, r3, #7
 8006b4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b50:	4b0c      	ldr	r3, [pc, #48]	; (8006b84 <__NVIC_SetPriorityGrouping+0x44>)
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b72:	4a04      	ldr	r2, [pc, #16]	; (8006b84 <__NVIC_SetPriorityGrouping+0x44>)
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	60d3      	str	r3, [r2, #12]
}
 8006b78:	bf00      	nop
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	e000ed00 	.word	0xe000ed00

08006b88 <__NVIC_GetPriorityGrouping>:
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b8c:	4b04      	ldr	r3, [pc, #16]	; (8006ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	0a1b      	lsrs	r3, r3, #8
 8006b92:	f003 0307 	and.w	r3, r3, #7
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	e000ed00 	.word	0xe000ed00

08006ba4 <__NVIC_EnableIRQ>:
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	4603      	mov	r3, r0
 8006bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	db0b      	blt.n	8006bce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bb6:	79fb      	ldrb	r3, [r7, #7]
 8006bb8:	f003 021f 	and.w	r2, r3, #31
 8006bbc:	4907      	ldr	r1, [pc, #28]	; (8006bdc <__NVIC_EnableIRQ+0x38>)
 8006bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bc2:	095b      	lsrs	r3, r3, #5
 8006bc4:	2001      	movs	r0, #1
 8006bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8006bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	e000e100 	.word	0xe000e100

08006be0 <__NVIC_DisableIRQ>:
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	db12      	blt.n	8006c18 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	f003 021f 	and.w	r2, r3, #31
 8006bf8:	490a      	ldr	r1, [pc, #40]	; (8006c24 <__NVIC_DisableIRQ+0x44>)
 8006bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	2001      	movs	r0, #1
 8006c02:	fa00 f202 	lsl.w	r2, r0, r2
 8006c06:	3320      	adds	r3, #32
 8006c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006c0c:	f3bf 8f4f 	dsb	sy
}
 8006c10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006c12:	f3bf 8f6f 	isb	sy
}
 8006c16:	bf00      	nop
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	e000e100 	.word	0xe000e100

08006c28 <__NVIC_SetPriority>:
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	6039      	str	r1, [r7, #0]
 8006c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	db0a      	blt.n	8006c52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	490c      	ldr	r1, [pc, #48]	; (8006c74 <__NVIC_SetPriority+0x4c>)
 8006c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c46:	0112      	lsls	r2, r2, #4
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c50:	e00a      	b.n	8006c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	4908      	ldr	r1, [pc, #32]	; (8006c78 <__NVIC_SetPriority+0x50>)
 8006c58:	79fb      	ldrb	r3, [r7, #7]
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	3b04      	subs	r3, #4
 8006c60:	0112      	lsls	r2, r2, #4
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	440b      	add	r3, r1
 8006c66:	761a      	strb	r2, [r3, #24]
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	e000e100 	.word	0xe000e100
 8006c78:	e000ed00 	.word	0xe000ed00

08006c7c <NVIC_EncodePriority>:
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b089      	sub	sp, #36	; 0x24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	f1c3 0307 	rsb	r3, r3, #7
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	bf28      	it	cs
 8006c9a:	2304      	movcs	r3, #4
 8006c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	2b06      	cmp	r3, #6
 8006ca4:	d902      	bls.n	8006cac <NVIC_EncodePriority+0x30>
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	3b03      	subs	r3, #3
 8006caa:	e000      	b.n	8006cae <NVIC_EncodePriority+0x32>
 8006cac:	2300      	movs	r3, #0
 8006cae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cba:	43da      	mvns	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	fa01 f303 	lsl.w	r3, r1, r3
 8006cce:	43d9      	mvns	r1, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cd4:	4313      	orrs	r3, r2
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3724      	adds	r7, #36	; 0x24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
	...

08006ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cf4:	d301      	bcc.n	8006cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e00f      	b.n	8006d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cfa:	4a0a      	ldr	r2, [pc, #40]	; (8006d24 <SysTick_Config+0x40>)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d02:	210f      	movs	r1, #15
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295
 8006d08:	f7ff ff8e 	bl	8006c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <SysTick_Config+0x40>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d12:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <SysTick_Config+0x40>)
 8006d14:	2207      	movs	r2, #7
 8006d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	e000e010 	.word	0xe000e010

08006d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff ff05 	bl	8006b40 <__NVIC_SetPriorityGrouping>
}
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b086      	sub	sp, #24
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	4603      	mov	r3, r0
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	607a      	str	r2, [r7, #4]
 8006d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d50:	f7ff ff1a 	bl	8006b88 <__NVIC_GetPriorityGrouping>
 8006d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	6978      	ldr	r0, [r7, #20]
 8006d5c:	f7ff ff8e 	bl	8006c7c <NVIC_EncodePriority>
 8006d60:	4602      	mov	r2, r0
 8006d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d66:	4611      	mov	r1, r2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff ff5d 	bl	8006c28 <__NVIC_SetPriority>
}
 8006d6e:	bf00      	nop
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff ff0d 	bl	8006ba4 <__NVIC_EnableIRQ>
}
 8006d8a:	bf00      	nop
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	4603      	mov	r3, r0
 8006d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff ff1d 	bl	8006be0 <__NVIC_DisableIRQ>
}
 8006da6:	bf00      	nop
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff ff94 	bl	8006ce4 <SysTick_Config>
 8006dbc:	4603      	mov	r3, r0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006dd4:	f7ff f90e 	bl	8005ff4 <HAL_GetTick>
 8006dd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e099      	b.n	8006f18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0201 	bic.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e04:	e00f      	b.n	8006e26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e06:	f7ff f8f5 	bl	8005ff4 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b05      	cmp	r3, #5
 8006e12:	d908      	bls.n	8006e26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2220      	movs	r2, #32
 8006e18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2203      	movs	r2, #3
 8006e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e078      	b.n	8006f18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e8      	bne.n	8006e06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	4b38      	ldr	r3, [pc, #224]	; (8006f20 <HAL_DMA_Init+0x158>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d107      	bne.n	8006e90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f023 0307 	bic.w	r3, r3, #7
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d117      	bne.n	8006eea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00e      	beq.n	8006eea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fb01 	bl	80074d4 <DMA_CheckFifoParam>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d008      	beq.n	8006eea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2240      	movs	r2, #64	; 0x40
 8006edc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e016      	b.n	8006f18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fab8 	bl	8007468 <DMA_CalcBaseAndBitshift>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f00:	223f      	movs	r2, #63	; 0x3f
 8006f02:	409a      	lsls	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	f010803f 	.word	0xf010803f

08006f24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d101      	bne.n	8006f4a <HAL_DMA_Start_IT+0x26>
 8006f46:	2302      	movs	r3, #2
 8006f48:	e040      	b.n	8006fcc <HAL_DMA_Start_IT+0xa8>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d12f      	bne.n	8006fbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2202      	movs	r2, #2
 8006f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	68b9      	ldr	r1, [r7, #8]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 fa4a 	bl	800740c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7c:	223f      	movs	r2, #63	; 0x3f
 8006f7e:	409a      	lsls	r2, r3
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0216 	orr.w	r2, r2, #22
 8006f92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d007      	beq.n	8006fac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f042 0208 	orr.w	r2, r2, #8
 8006faa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0201 	orr.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	e005      	b.n	8006fca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006fe2:	f7ff f807 	bl	8005ff4 <HAL_GetTick>
 8006fe6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d008      	beq.n	8007006 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2280      	movs	r2, #128	; 0x80
 8006ff8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e052      	b.n	80070ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 0216 	bic.w	r2, r2, #22
 8007014:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695a      	ldr	r2, [r3, #20]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007024:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	2b00      	cmp	r3, #0
 800702c:	d103      	bne.n	8007036 <HAL_DMA_Abort+0x62>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007032:	2b00      	cmp	r3, #0
 8007034:	d007      	beq.n	8007046 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0208 	bic.w	r2, r2, #8
 8007044:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0201 	bic.w	r2, r2, #1
 8007054:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007056:	e013      	b.n	8007080 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007058:	f7fe ffcc 	bl	8005ff4 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b05      	cmp	r3, #5
 8007064:	d90c      	bls.n	8007080 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2203      	movs	r2, #3
 8007070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e015      	b.n	80070ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e4      	bne.n	8007058 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007092:	223f      	movs	r2, #63	; 0x3f
 8007094:	409a      	lsls	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d004      	beq.n	80070d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2280      	movs	r2, #128	; 0x80
 80070cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e00c      	b.n	80070ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2205      	movs	r2, #5
 80070d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0201 	bic.w	r2, r2, #1
 80070e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007104:	4b8e      	ldr	r3, [pc, #568]	; (8007340 <HAL_DMA_IRQHandler+0x248>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a8e      	ldr	r2, [pc, #568]	; (8007344 <HAL_DMA_IRQHandler+0x24c>)
 800710a:	fba2 2303 	umull	r2, r3, r2, r3
 800710e:	0a9b      	lsrs	r3, r3, #10
 8007110:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007116:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007122:	2208      	movs	r2, #8
 8007124:	409a      	lsls	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4013      	ands	r3, r2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d01a      	beq.n	8007164 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d013      	beq.n	8007164 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 0204 	bic.w	r2, r2, #4
 800714a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007150:	2208      	movs	r2, #8
 8007152:	409a      	lsls	r2, r3
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715c:	f043 0201 	orr.w	r2, r3, #1
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007168:	2201      	movs	r2, #1
 800716a:	409a      	lsls	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4013      	ands	r3, r2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d012      	beq.n	800719a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00b      	beq.n	800719a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007186:	2201      	movs	r2, #1
 8007188:	409a      	lsls	r2, r3
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007192:	f043 0202 	orr.w	r2, r3, #2
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719e:	2204      	movs	r2, #4
 80071a0:	409a      	lsls	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4013      	ands	r3, r2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d012      	beq.n	80071d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00b      	beq.n	80071d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071bc:	2204      	movs	r2, #4
 80071be:	409a      	lsls	r2, r3
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c8:	f043 0204 	orr.w	r2, r3, #4
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d4:	2210      	movs	r2, #16
 80071d6:	409a      	lsls	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	4013      	ands	r3, r2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d043      	beq.n	8007268 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d03c      	beq.n	8007268 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f2:	2210      	movs	r2, #16
 80071f4:	409a      	lsls	r2, r3
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d018      	beq.n	800723a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d108      	bne.n	8007228 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721a:	2b00      	cmp	r3, #0
 800721c:	d024      	beq.n	8007268 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	4798      	blx	r3
 8007226:	e01f      	b.n	8007268 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800722c:	2b00      	cmp	r3, #0
 800722e:	d01b      	beq.n	8007268 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
 8007238:	e016      	b.n	8007268 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007244:	2b00      	cmp	r3, #0
 8007246:	d107      	bne.n	8007258 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0208 	bic.w	r2, r2, #8
 8007256:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800726c:	2220      	movs	r2, #32
 800726e:	409a      	lsls	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4013      	ands	r3, r2
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 808f 	beq.w	8007398 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0310 	and.w	r3, r3, #16
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 8087 	beq.w	8007398 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728e:	2220      	movs	r2, #32
 8007290:	409a      	lsls	r2, r3
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b05      	cmp	r3, #5
 80072a0:	d136      	bne.n	8007310 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0216 	bic.w	r2, r2, #22
 80072b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	695a      	ldr	r2, [r3, #20]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d103      	bne.n	80072d2 <HAL_DMA_IRQHandler+0x1da>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d007      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0208 	bic.w	r2, r2, #8
 80072e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072e6:	223f      	movs	r2, #63	; 0x3f
 80072e8:	409a      	lsls	r2, r3
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007302:	2b00      	cmp	r3, #0
 8007304:	d07e      	beq.n	8007404 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	4798      	blx	r3
        }
        return;
 800730e:	e079      	b.n	8007404 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d01d      	beq.n	800735a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10d      	bne.n	8007348 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007330:	2b00      	cmp	r3, #0
 8007332:	d031      	beq.n	8007398 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	4798      	blx	r3
 800733c:	e02c      	b.n	8007398 <HAL_DMA_IRQHandler+0x2a0>
 800733e:	bf00      	nop
 8007340:	2000009c 	.word	0x2000009c
 8007344:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d023      	beq.n	8007398 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	4798      	blx	r3
 8007358:	e01e      	b.n	8007398 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10f      	bne.n	8007388 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f022 0210 	bic.w	r2, r2, #16
 8007376:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739c:	2b00      	cmp	r3, #0
 800739e:	d032      	beq.n	8007406 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d022      	beq.n	80073f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2205      	movs	r2, #5
 80073b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0201 	bic.w	r2, r2, #1
 80073c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	3301      	adds	r3, #1
 80073c8:	60bb      	str	r3, [r7, #8]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d307      	bcc.n	80073e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f2      	bne.n	80073c4 <HAL_DMA_IRQHandler+0x2cc>
 80073de:	e000      	b.n	80073e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80073e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d005      	beq.n	8007406 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	4798      	blx	r3
 8007402:	e000      	b.n	8007406 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007404:	bf00      	nop
    }
  }
}
 8007406:	3718      	adds	r7, #24
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007428:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2b40      	cmp	r3, #64	; 0x40
 8007438:	d108      	bne.n	800744c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800744a:	e007      	b.n	800745c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	60da      	str	r2, [r3, #12]
}
 800745c:	bf00      	nop
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	b2db      	uxtb	r3, r3
 8007476:	3b10      	subs	r3, #16
 8007478:	4a14      	ldr	r2, [pc, #80]	; (80074cc <DMA_CalcBaseAndBitshift+0x64>)
 800747a:	fba2 2303 	umull	r2, r3, r2, r3
 800747e:	091b      	lsrs	r3, r3, #4
 8007480:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007482:	4a13      	ldr	r2, [pc, #76]	; (80074d0 <DMA_CalcBaseAndBitshift+0x68>)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4413      	add	r3, r2
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2b03      	cmp	r3, #3
 8007494:	d909      	bls.n	80074aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800749e:	f023 0303 	bic.w	r3, r3, #3
 80074a2:	1d1a      	adds	r2, r3, #4
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	659a      	str	r2, [r3, #88]	; 0x58
 80074a8:	e007      	b.n	80074ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80074b2:	f023 0303 	bic.w	r3, r3, #3
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	aaaaaaab 	.word	0xaaaaaaab
 80074d0:	0800fda4 	.word	0x0800fda4

080074d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074dc:	2300      	movs	r3, #0
 80074de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d11f      	bne.n	800752e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d856      	bhi.n	80075a2 <DMA_CheckFifoParam+0xce>
 80074f4:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <DMA_CheckFifoParam+0x28>)
 80074f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fa:	bf00      	nop
 80074fc:	0800750d 	.word	0x0800750d
 8007500:	0800751f 	.word	0x0800751f
 8007504:	0800750d 	.word	0x0800750d
 8007508:	080075a3 	.word	0x080075a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d046      	beq.n	80075a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800751c:	e043      	b.n	80075a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007526:	d140      	bne.n	80075aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800752c:	e03d      	b.n	80075aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007536:	d121      	bne.n	800757c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b03      	cmp	r3, #3
 800753c:	d837      	bhi.n	80075ae <DMA_CheckFifoParam+0xda>
 800753e:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <DMA_CheckFifoParam+0x70>)
 8007540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007544:	08007555 	.word	0x08007555
 8007548:	0800755b 	.word	0x0800755b
 800754c:	08007555 	.word	0x08007555
 8007550:	0800756d 	.word	0x0800756d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	73fb      	strb	r3, [r7, #15]
      break;
 8007558:	e030      	b.n	80075bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d025      	beq.n	80075b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800756a:	e022      	b.n	80075b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007570:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007574:	d11f      	bne.n	80075b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800757a:	e01c      	b.n	80075b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d903      	bls.n	800758a <DMA_CheckFifoParam+0xb6>
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b03      	cmp	r3, #3
 8007586:	d003      	beq.n	8007590 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007588:	e018      	b.n	80075bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	73fb      	strb	r3, [r7, #15]
      break;
 800758e:	e015      	b.n	80075bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00e      	beq.n	80075ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	73fb      	strb	r3, [r7, #15]
      break;
 80075a0:	e00b      	b.n	80075ba <DMA_CheckFifoParam+0xe6>
      break;
 80075a2:	bf00      	nop
 80075a4:	e00a      	b.n	80075bc <DMA_CheckFifoParam+0xe8>
      break;
 80075a6:	bf00      	nop
 80075a8:	e008      	b.n	80075bc <DMA_CheckFifoParam+0xe8>
      break;
 80075aa:	bf00      	nop
 80075ac:	e006      	b.n	80075bc <DMA_CheckFifoParam+0xe8>
      break;
 80075ae:	bf00      	nop
 80075b0:	e004      	b.n	80075bc <DMA_CheckFifoParam+0xe8>
      break;
 80075b2:	bf00      	nop
 80075b4:	e002      	b.n	80075bc <DMA_CheckFifoParam+0xe8>
      break;   
 80075b6:	bf00      	nop
 80075b8:	e000      	b.n	80075bc <DMA_CheckFifoParam+0xe8>
      break;
 80075ba:	bf00      	nop
    }
  } 
  
  return status; 
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop

080075cc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80075de:	4b23      	ldr	r3, [pc, #140]	; (800766c <HAL_FLASH_Program+0xa0>)
 80075e0:	7e1b      	ldrb	r3, [r3, #24]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d101      	bne.n	80075ea <HAL_FLASH_Program+0x1e>
 80075e6:	2302      	movs	r3, #2
 80075e8:	e03b      	b.n	8007662 <HAL_FLASH_Program+0x96>
 80075ea:	4b20      	ldr	r3, [pc, #128]	; (800766c <HAL_FLASH_Program+0xa0>)
 80075ec:	2201      	movs	r2, #1
 80075ee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80075f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80075f4:	f000 f870 	bl	80076d8 <FLASH_WaitForLastOperation>
 80075f8:	4603      	mov	r3, r0
 80075fa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d12b      	bne.n	800765a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d105      	bne.n	8007614 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007608:	783b      	ldrb	r3, [r7, #0]
 800760a:	4619      	mov	r1, r3
 800760c:	68b8      	ldr	r0, [r7, #8]
 800760e:	f000 f91b 	bl	8007848 <FLASH_Program_Byte>
 8007612:	e016      	b.n	8007642 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d105      	bne.n	8007626 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800761a:	883b      	ldrh	r3, [r7, #0]
 800761c:	4619      	mov	r1, r3
 800761e:	68b8      	ldr	r0, [r7, #8]
 8007620:	f000 f8ee 	bl	8007800 <FLASH_Program_HalfWord>
 8007624:	e00d      	b.n	8007642 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b02      	cmp	r3, #2
 800762a:	d105      	bne.n	8007638 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	4619      	mov	r1, r3
 8007630:	68b8      	ldr	r0, [r7, #8]
 8007632:	f000 f8c3 	bl	80077bc <FLASH_Program_Word>
 8007636:	e004      	b.n	8007642 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800763c:	68b8      	ldr	r0, [r7, #8]
 800763e:	f000 f88b 	bl	8007758 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007642:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007646:	f000 f847 	bl	80076d8 <FLASH_WaitForLastOperation>
 800764a:	4603      	mov	r3, r0
 800764c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800764e:	4b08      	ldr	r3, [pc, #32]	; (8007670 <HAL_FLASH_Program+0xa4>)
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	4a07      	ldr	r2, [pc, #28]	; (8007670 <HAL_FLASH_Program+0xa4>)
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800765a:	4b04      	ldr	r3, [pc, #16]	; (800766c <HAL_FLASH_Program+0xa0>)
 800765c:	2200      	movs	r2, #0
 800765e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007660:	7dfb      	ldrb	r3, [r7, #23]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20000b30 	.word	0x20000b30
 8007670:	40023c00 	.word	0x40023c00

08007674 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800767e:	4b0b      	ldr	r3, [pc, #44]	; (80076ac <HAL_FLASH_Unlock+0x38>)
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	da0b      	bge.n	800769e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007686:	4b09      	ldr	r3, [pc, #36]	; (80076ac <HAL_FLASH_Unlock+0x38>)
 8007688:	4a09      	ldr	r2, [pc, #36]	; (80076b0 <HAL_FLASH_Unlock+0x3c>)
 800768a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800768c:	4b07      	ldr	r3, [pc, #28]	; (80076ac <HAL_FLASH_Unlock+0x38>)
 800768e:	4a09      	ldr	r2, [pc, #36]	; (80076b4 <HAL_FLASH_Unlock+0x40>)
 8007690:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007692:	4b06      	ldr	r3, [pc, #24]	; (80076ac <HAL_FLASH_Unlock+0x38>)
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	da01      	bge.n	800769e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800769e:	79fb      	ldrb	r3, [r7, #7]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	40023c00 	.word	0x40023c00
 80076b0:	45670123 	.word	0x45670123
 80076b4:	cdef89ab 	.word	0xcdef89ab

080076b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80076bc:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <HAL_FLASH_Lock+0x1c>)
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	4a04      	ldr	r2, [pc, #16]	; (80076d4 <HAL_FLASH_Lock+0x1c>)
 80076c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076c6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	40023c00 	.word	0x40023c00

080076d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076e0:	2300      	movs	r3, #0
 80076e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80076e4:	4b1a      	ldr	r3, [pc, #104]	; (8007750 <FLASH_WaitForLastOperation+0x78>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80076ea:	f7fe fc83 	bl	8005ff4 <HAL_GetTick>
 80076ee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80076f0:	e010      	b.n	8007714 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f8:	d00c      	beq.n	8007714 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d007      	beq.n	8007710 <FLASH_WaitForLastOperation+0x38>
 8007700:	f7fe fc78 	bl	8005ff4 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	429a      	cmp	r2, r3
 800770e:	d201      	bcs.n	8007714 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e019      	b.n	8007748 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007714:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <FLASH_WaitForLastOperation+0x7c>)
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e8      	bne.n	80076f2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007720:	4b0c      	ldr	r3, [pc, #48]	; (8007754 <FLASH_WaitForLastOperation+0x7c>)
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800772c:	4b09      	ldr	r3, [pc, #36]	; (8007754 <FLASH_WaitForLastOperation+0x7c>)
 800772e:	2201      	movs	r2, #1
 8007730:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007732:	4b08      	ldr	r3, [pc, #32]	; (8007754 <FLASH_WaitForLastOperation+0x7c>)
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800773e:	f000 f8a5 	bl	800788c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e000      	b.n	8007748 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007746:	2300      	movs	r3, #0
  
}  
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000b30 	.word	0x20000b30
 8007754:	40023c00 	.word	0x40023c00

08007758 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007764:	4b14      	ldr	r3, [pc, #80]	; (80077b8 <FLASH_Program_DoubleWord+0x60>)
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	4a13      	ldr	r2, [pc, #76]	; (80077b8 <FLASH_Program_DoubleWord+0x60>)
 800776a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800776e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007770:	4b11      	ldr	r3, [pc, #68]	; (80077b8 <FLASH_Program_DoubleWord+0x60>)
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	4a10      	ldr	r2, [pc, #64]	; (80077b8 <FLASH_Program_DoubleWord+0x60>)
 8007776:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800777a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800777c:	4b0e      	ldr	r3, [pc, #56]	; (80077b8 <FLASH_Program_DoubleWord+0x60>)
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	4a0d      	ldr	r2, [pc, #52]	; (80077b8 <FLASH_Program_DoubleWord+0x60>)
 8007782:	f043 0301 	orr.w	r3, r3, #1
 8007786:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800778e:	f3bf 8f6f 	isb	sy
}
 8007792:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007794:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	f04f 0300 	mov.w	r3, #0
 80077a0:	000a      	movs	r2, r1
 80077a2:	2300      	movs	r3, #0
 80077a4:	68f9      	ldr	r1, [r7, #12]
 80077a6:	3104      	adds	r1, #4
 80077a8:	4613      	mov	r3, r2
 80077aa:	600b      	str	r3, [r1, #0]
}
 80077ac:	bf00      	nop
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	40023c00 	.word	0x40023c00

080077bc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80077c6:	4b0d      	ldr	r3, [pc, #52]	; (80077fc <FLASH_Program_Word+0x40>)
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	4a0c      	ldr	r2, [pc, #48]	; (80077fc <FLASH_Program_Word+0x40>)
 80077cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80077d2:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <FLASH_Program_Word+0x40>)
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	4a09      	ldr	r2, [pc, #36]	; (80077fc <FLASH_Program_Word+0x40>)
 80077d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80077de:	4b07      	ldr	r3, [pc, #28]	; (80077fc <FLASH_Program_Word+0x40>)
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	4a06      	ldr	r2, [pc, #24]	; (80077fc <FLASH_Program_Word+0x40>)
 80077e4:	f043 0301 	orr.w	r3, r3, #1
 80077e8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	601a      	str	r2, [r3, #0]
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	40023c00 	.word	0x40023c00

08007800 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800780c:	4b0d      	ldr	r3, [pc, #52]	; (8007844 <FLASH_Program_HalfWord+0x44>)
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	4a0c      	ldr	r2, [pc, #48]	; (8007844 <FLASH_Program_HalfWord+0x44>)
 8007812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007816:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007818:	4b0a      	ldr	r3, [pc, #40]	; (8007844 <FLASH_Program_HalfWord+0x44>)
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	4a09      	ldr	r2, [pc, #36]	; (8007844 <FLASH_Program_HalfWord+0x44>)
 800781e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007822:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007824:	4b07      	ldr	r3, [pc, #28]	; (8007844 <FLASH_Program_HalfWord+0x44>)
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	4a06      	ldr	r2, [pc, #24]	; (8007844 <FLASH_Program_HalfWord+0x44>)
 800782a:	f043 0301 	orr.w	r3, r3, #1
 800782e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	887a      	ldrh	r2, [r7, #2]
 8007834:	801a      	strh	r2, [r3, #0]
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	40023c00 	.word	0x40023c00

08007848 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007854:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <FLASH_Program_Byte+0x40>)
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	4a0b      	ldr	r2, [pc, #44]	; (8007888 <FLASH_Program_Byte+0x40>)
 800785a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800785e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007860:	4b09      	ldr	r3, [pc, #36]	; (8007888 <FLASH_Program_Byte+0x40>)
 8007862:	4a09      	ldr	r2, [pc, #36]	; (8007888 <FLASH_Program_Byte+0x40>)
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007868:	4b07      	ldr	r3, [pc, #28]	; (8007888 <FLASH_Program_Byte+0x40>)
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	4a06      	ldr	r2, [pc, #24]	; (8007888 <FLASH_Program_Byte+0x40>)
 800786e:	f043 0301 	orr.w	r3, r3, #1
 8007872:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	78fa      	ldrb	r2, [r7, #3]
 8007878:	701a      	strb	r2, [r3, #0]
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	40023c00 	.word	0x40023c00

0800788c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007890:	4b2f      	ldr	r3, [pc, #188]	; (8007950 <FLASH_SetErrorCode+0xc4>)
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f003 0310 	and.w	r3, r3, #16
 8007898:	2b00      	cmp	r3, #0
 800789a:	d008      	beq.n	80078ae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800789c:	4b2d      	ldr	r3, [pc, #180]	; (8007954 <FLASH_SetErrorCode+0xc8>)
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	f043 0310 	orr.w	r3, r3, #16
 80078a4:	4a2b      	ldr	r2, [pc, #172]	; (8007954 <FLASH_SetErrorCode+0xc8>)
 80078a6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80078a8:	4b29      	ldr	r3, [pc, #164]	; (8007950 <FLASH_SetErrorCode+0xc4>)
 80078aa:	2210      	movs	r2, #16
 80078ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80078ae:	4b28      	ldr	r3, [pc, #160]	; (8007950 <FLASH_SetErrorCode+0xc4>)
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d008      	beq.n	80078cc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80078ba:	4b26      	ldr	r3, [pc, #152]	; (8007954 <FLASH_SetErrorCode+0xc8>)
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	f043 0308 	orr.w	r3, r3, #8
 80078c2:	4a24      	ldr	r2, [pc, #144]	; (8007954 <FLASH_SetErrorCode+0xc8>)
 80078c4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80078c6:	4b22      	ldr	r3, [pc, #136]	; (8007950 <FLASH_SetErrorCode+0xc4>)
 80078c8:	2220      	movs	r2, #32
 80078ca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80078cc:	4b20      	ldr	r3, [pc, #128]	; (8007950 <FLASH_SetErrorCode+0xc4>)
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d008      	beq.n	80078ea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80078d8:	4b1e      	ldr	r3, [pc, #120]	; (8007954 <FLASH_SetErrorCode+0xc8>)
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	f043 0304 	orr.w	r3, r3, #4
 80078e0:	4a1c      	ldr	r2, [pc, #112]	; (8007954 <FLASH_SetErrorCode+0xc8>)
 80078e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80078e4:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <FLASH_SetErrorCode+0xc4>)
 80078e6:	2240      	movs	r2, #64	; 0x40
 80078e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80078ea:	4b19      	ldr	r3, [pc, #100]	; (8007950 <FLASH_SetErrorCode+0xc4>)
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d008      	beq.n	8007908 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80078f6:	4b17      	ldr	r3, [pc, #92]	; (8007954 <FLASH_SetErrorCode+0xc8>)
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	f043 0302 	orr.w	r3, r3, #2
 80078fe:	4a15      	ldr	r2, [pc, #84]	; (8007954 <FLASH_SetErrorCode+0xc8>)
 8007900:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007902:	4b13      	ldr	r3, [pc, #76]	; (8007950 <FLASH_SetErrorCode+0xc4>)
 8007904:	2280      	movs	r2, #128	; 0x80
 8007906:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8007908:	4b11      	ldr	r3, [pc, #68]	; (8007950 <FLASH_SetErrorCode+0xc4>)
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007910:	2b00      	cmp	r3, #0
 8007912:	d009      	beq.n	8007928 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007914:	4b0f      	ldr	r3, [pc, #60]	; (8007954 <FLASH_SetErrorCode+0xc8>)
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	f043 0301 	orr.w	r3, r3, #1
 800791c:	4a0d      	ldr	r2, [pc, #52]	; (8007954 <FLASH_SetErrorCode+0xc8>)
 800791e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8007920:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <FLASH_SetErrorCode+0xc4>)
 8007922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007926:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007928:	4b09      	ldr	r3, [pc, #36]	; (8007950 <FLASH_SetErrorCode+0xc4>)
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d008      	beq.n	8007946 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007934:	4b07      	ldr	r3, [pc, #28]	; (8007954 <FLASH_SetErrorCode+0xc8>)
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	f043 0320 	orr.w	r3, r3, #32
 800793c:	4a05      	ldr	r2, [pc, #20]	; (8007954 <FLASH_SetErrorCode+0xc8>)
 800793e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007940:	4b03      	ldr	r3, [pc, #12]	; (8007950 <FLASH_SetErrorCode+0xc4>)
 8007942:	2202      	movs	r2, #2
 8007944:	60da      	str	r2, [r3, #12]
  }
}
 8007946:	bf00      	nop
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	40023c00 	.word	0x40023c00
 8007954:	20000b30 	.word	0x20000b30

08007958 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d102      	bne.n	8007974 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
 8007972:	e010      	b.n	8007996 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007974:	78fb      	ldrb	r3, [r7, #3]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d103      	bne.n	8007982 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800797a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	e009      	b.n	8007996 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007982:	78fb      	ldrb	r3, [r7, #3]
 8007984:	2b02      	cmp	r3, #2
 8007986:	d103      	bne.n	8007990 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800798c:	60fb      	str	r3, [r7, #12]
 800798e:	e002      	b.n	8007996 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007990:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007994:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007996:	4b13      	ldr	r3, [pc, #76]	; (80079e4 <FLASH_Erase_Sector+0x8c>)
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	4a12      	ldr	r2, [pc, #72]	; (80079e4 <FLASH_Erase_Sector+0x8c>)
 800799c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80079a2:	4b10      	ldr	r3, [pc, #64]	; (80079e4 <FLASH_Erase_Sector+0x8c>)
 80079a4:	691a      	ldr	r2, [r3, #16]
 80079a6:	490f      	ldr	r1, [pc, #60]	; (80079e4 <FLASH_Erase_Sector+0x8c>)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80079ae:	4b0d      	ldr	r3, [pc, #52]	; (80079e4 <FLASH_Erase_Sector+0x8c>)
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	4a0c      	ldr	r2, [pc, #48]	; (80079e4 <FLASH_Erase_Sector+0x8c>)
 80079b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80079b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80079ba:	4b0a      	ldr	r3, [pc, #40]	; (80079e4 <FLASH_Erase_Sector+0x8c>)
 80079bc:	691a      	ldr	r2, [r3, #16]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	00db      	lsls	r3, r3, #3
 80079c2:	4313      	orrs	r3, r2
 80079c4:	4a07      	ldr	r2, [pc, #28]	; (80079e4 <FLASH_Erase_Sector+0x8c>)
 80079c6:	f043 0302 	orr.w	r3, r3, #2
 80079ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80079cc:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <FLASH_Erase_Sector+0x8c>)
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	4a04      	ldr	r2, [pc, #16]	; (80079e4 <FLASH_Erase_Sector+0x8c>)
 80079d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079d6:	6113      	str	r3, [r2, #16]
}
 80079d8:	bf00      	nop
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	40023c00 	.word	0x40023c00

080079e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b089      	sub	sp, #36	; 0x24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80079f6:	2300      	movs	r3, #0
 80079f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80079fe:	2300      	movs	r3, #0
 8007a00:	61fb      	str	r3, [r7, #28]
 8007a02:	e165      	b.n	8007cd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007a04:	2201      	movs	r2, #1
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	4013      	ands	r3, r2
 8007a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	f040 8154 	bne.w	8007cca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d005      	beq.n	8007a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d130      	bne.n	8007a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	2203      	movs	r2, #3
 8007a46:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4a:	43db      	mvns	r3, r3
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	4013      	ands	r3, r2
 8007a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a70:	2201      	movs	r2, #1
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	fa02 f303 	lsl.w	r3, r2, r3
 8007a78:	43db      	mvns	r3, r3
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	091b      	lsrs	r3, r3, #4
 8007a86:	f003 0201 	and.w	r2, r3, #1
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f003 0303 	and.w	r3, r3, #3
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	d017      	beq.n	8007ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	2203      	movs	r2, #3
 8007ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab8:	43db      	mvns	r3, r3
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	4013      	ands	r3, r2
 8007abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	689a      	ldr	r2, [r3, #8]
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	f003 0303 	and.w	r3, r3, #3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d123      	bne.n	8007b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	08da      	lsrs	r2, r3, #3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3208      	adds	r2, #8
 8007aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	f003 0307 	and.w	r3, r3, #7
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	220f      	movs	r2, #15
 8007afc:	fa02 f303 	lsl.w	r3, r2, r3
 8007b00:	43db      	mvns	r3, r3
 8007b02:	69ba      	ldr	r2, [r7, #24]
 8007b04:	4013      	ands	r3, r2
 8007b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	691a      	ldr	r2, [r3, #16]
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	f003 0307 	and.w	r3, r3, #7
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	08da      	lsrs	r2, r3, #3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3208      	adds	r2, #8
 8007b26:	69b9      	ldr	r1, [r7, #24]
 8007b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	2203      	movs	r2, #3
 8007b38:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3c:	43db      	mvns	r3, r3
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	4013      	ands	r3, r2
 8007b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f003 0203 	and.w	r2, r3, #3
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	005b      	lsls	r3, r3, #1
 8007b50:	fa02 f303 	lsl.w	r3, r2, r3
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 80ae 	beq.w	8007cca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b6e:	2300      	movs	r3, #0
 8007b70:	60fb      	str	r3, [r7, #12]
 8007b72:	4b5d      	ldr	r3, [pc, #372]	; (8007ce8 <HAL_GPIO_Init+0x300>)
 8007b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b76:	4a5c      	ldr	r2, [pc, #368]	; (8007ce8 <HAL_GPIO_Init+0x300>)
 8007b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8007b7e:	4b5a      	ldr	r3, [pc, #360]	; (8007ce8 <HAL_GPIO_Init+0x300>)
 8007b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b8a:	4a58      	ldr	r2, [pc, #352]	; (8007cec <HAL_GPIO_Init+0x304>)
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	089b      	lsrs	r3, r3, #2
 8007b90:	3302      	adds	r3, #2
 8007b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f003 0303 	and.w	r3, r3, #3
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	220f      	movs	r2, #15
 8007ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba6:	43db      	mvns	r3, r3
 8007ba8:	69ba      	ldr	r2, [r7, #24]
 8007baa:	4013      	ands	r3, r2
 8007bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a4f      	ldr	r2, [pc, #316]	; (8007cf0 <HAL_GPIO_Init+0x308>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d025      	beq.n	8007c02 <HAL_GPIO_Init+0x21a>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a4e      	ldr	r2, [pc, #312]	; (8007cf4 <HAL_GPIO_Init+0x30c>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d01f      	beq.n	8007bfe <HAL_GPIO_Init+0x216>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a4d      	ldr	r2, [pc, #308]	; (8007cf8 <HAL_GPIO_Init+0x310>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d019      	beq.n	8007bfa <HAL_GPIO_Init+0x212>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a4c      	ldr	r2, [pc, #304]	; (8007cfc <HAL_GPIO_Init+0x314>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d013      	beq.n	8007bf6 <HAL_GPIO_Init+0x20e>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a4b      	ldr	r2, [pc, #300]	; (8007d00 <HAL_GPIO_Init+0x318>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00d      	beq.n	8007bf2 <HAL_GPIO_Init+0x20a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a4a      	ldr	r2, [pc, #296]	; (8007d04 <HAL_GPIO_Init+0x31c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d007      	beq.n	8007bee <HAL_GPIO_Init+0x206>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a49      	ldr	r2, [pc, #292]	; (8007d08 <HAL_GPIO_Init+0x320>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d101      	bne.n	8007bea <HAL_GPIO_Init+0x202>
 8007be6:	2306      	movs	r3, #6
 8007be8:	e00c      	b.n	8007c04 <HAL_GPIO_Init+0x21c>
 8007bea:	2307      	movs	r3, #7
 8007bec:	e00a      	b.n	8007c04 <HAL_GPIO_Init+0x21c>
 8007bee:	2305      	movs	r3, #5
 8007bf0:	e008      	b.n	8007c04 <HAL_GPIO_Init+0x21c>
 8007bf2:	2304      	movs	r3, #4
 8007bf4:	e006      	b.n	8007c04 <HAL_GPIO_Init+0x21c>
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e004      	b.n	8007c04 <HAL_GPIO_Init+0x21c>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e002      	b.n	8007c04 <HAL_GPIO_Init+0x21c>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e000      	b.n	8007c04 <HAL_GPIO_Init+0x21c>
 8007c02:	2300      	movs	r3, #0
 8007c04:	69fa      	ldr	r2, [r7, #28]
 8007c06:	f002 0203 	and.w	r2, r2, #3
 8007c0a:	0092      	lsls	r2, r2, #2
 8007c0c:	4093      	lsls	r3, r2
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c14:	4935      	ldr	r1, [pc, #212]	; (8007cec <HAL_GPIO_Init+0x304>)
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	089b      	lsrs	r3, r3, #2
 8007c1a:	3302      	adds	r3, #2
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007c22:	4b3a      	ldr	r3, [pc, #232]	; (8007d0c <HAL_GPIO_Init+0x324>)
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	43db      	mvns	r3, r3
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007c46:	4a31      	ldr	r2, [pc, #196]	; (8007d0c <HAL_GPIO_Init+0x324>)
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007c4c:	4b2f      	ldr	r3, [pc, #188]	; (8007d0c <HAL_GPIO_Init+0x324>)
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	43db      	mvns	r3, r3
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	4013      	ands	r3, r2
 8007c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d003      	beq.n	8007c70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007c70:	4a26      	ldr	r2, [pc, #152]	; (8007d0c <HAL_GPIO_Init+0x324>)
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007c76:	4b25      	ldr	r3, [pc, #148]	; (8007d0c <HAL_GPIO_Init+0x324>)
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	43db      	mvns	r3, r3
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	4013      	ands	r3, r2
 8007c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c9a:	4a1c      	ldr	r2, [pc, #112]	; (8007d0c <HAL_GPIO_Init+0x324>)
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ca0:	4b1a      	ldr	r3, [pc, #104]	; (8007d0c <HAL_GPIO_Init+0x324>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	43db      	mvns	r3, r3
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	4013      	ands	r3, r2
 8007cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d003      	beq.n	8007cc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007cc4:	4a11      	ldr	r2, [pc, #68]	; (8007d0c <HAL_GPIO_Init+0x324>)
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	61fb      	str	r3, [r7, #28]
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	2b0f      	cmp	r3, #15
 8007cd4:	f67f ae96 	bls.w	8007a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	3724      	adds	r7, #36	; 0x24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	40023800 	.word	0x40023800
 8007cec:	40013800 	.word	0x40013800
 8007cf0:	40020000 	.word	0x40020000
 8007cf4:	40020400 	.word	0x40020400
 8007cf8:	40020800 	.word	0x40020800
 8007cfc:	40020c00 	.word	0x40020c00
 8007d00:	40021000 	.word	0x40021000
 8007d04:	40021400 	.word	0x40021400
 8007d08:	40021800 	.word	0x40021800
 8007d0c:	40013c00 	.word	0x40013c00

08007d10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	691a      	ldr	r2, [r3, #16]
 8007d20:	887b      	ldrh	r3, [r7, #2]
 8007d22:	4013      	ands	r3, r2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	73fb      	strb	r3, [r7, #15]
 8007d2c:	e001      	b.n	8007d32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	807b      	strh	r3, [r7, #2]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007d50:	787b      	ldrb	r3, [r7, #1]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d56:	887a      	ldrh	r2, [r7, #2]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007d5c:	e003      	b.n	8007d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007d5e:	887b      	ldrh	r3, [r7, #2]
 8007d60:	041a      	lsls	r2, r3, #16
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	619a      	str	r2, [r3, #24]
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b085      	sub	sp, #20
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d84:	887a      	ldrh	r2, [r7, #2]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4013      	ands	r3, r2
 8007d8a:	041a      	lsls	r2, r3, #16
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	43d9      	mvns	r1, r3
 8007d90:	887b      	ldrh	r3, [r7, #2]
 8007d92:	400b      	ands	r3, r1
 8007d94:	431a      	orrs	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	619a      	str	r2, [r3, #24]
}
 8007d9a:	bf00      	nop
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
	...

08007da8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	4603      	mov	r3, r0
 8007db0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007db2:	4b08      	ldr	r3, [pc, #32]	; (8007dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007db4:	695a      	ldr	r2, [r3, #20]
 8007db6:	88fb      	ldrh	r3, [r7, #6]
 8007db8:	4013      	ands	r3, r2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d006      	beq.n	8007dcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007dbe:	4a05      	ldr	r2, [pc, #20]	; (8007dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007dc0:	88fb      	ldrh	r3, [r7, #6]
 8007dc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007dc4:	88fb      	ldrh	r3, [r7, #6]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fd fa94 	bl	80052f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007dcc:	bf00      	nop
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	40013c00 	.word	0x40013c00

08007dd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007de2:	2300      	movs	r3, #0
 8007de4:	603b      	str	r3, [r7, #0]
 8007de6:	4b20      	ldr	r3, [pc, #128]	; (8007e68 <HAL_PWREx_EnableOverDrive+0x90>)
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	4a1f      	ldr	r2, [pc, #124]	; (8007e68 <HAL_PWREx_EnableOverDrive+0x90>)
 8007dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007df0:	6413      	str	r3, [r2, #64]	; 0x40
 8007df2:	4b1d      	ldr	r3, [pc, #116]	; (8007e68 <HAL_PWREx_EnableOverDrive+0x90>)
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dfa:	603b      	str	r3, [r7, #0]
 8007dfc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007dfe:	4b1b      	ldr	r3, [pc, #108]	; (8007e6c <HAL_PWREx_EnableOverDrive+0x94>)
 8007e00:	2201      	movs	r2, #1
 8007e02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007e04:	f7fe f8f6 	bl	8005ff4 <HAL_GetTick>
 8007e08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007e0a:	e009      	b.n	8007e20 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007e0c:	f7fe f8f2 	bl	8005ff4 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e1a:	d901      	bls.n	8007e20 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e01f      	b.n	8007e60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007e20:	4b13      	ldr	r3, [pc, #76]	; (8007e70 <HAL_PWREx_EnableOverDrive+0x98>)
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e2c:	d1ee      	bne.n	8007e0c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007e2e:	4b11      	ldr	r3, [pc, #68]	; (8007e74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007e30:	2201      	movs	r2, #1
 8007e32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007e34:	f7fe f8de 	bl	8005ff4 <HAL_GetTick>
 8007e38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007e3a:	e009      	b.n	8007e50 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007e3c:	f7fe f8da 	bl	8005ff4 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e4a:	d901      	bls.n	8007e50 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e007      	b.n	8007e60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007e50:	4b07      	ldr	r3, [pc, #28]	; (8007e70 <HAL_PWREx_EnableOverDrive+0x98>)
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e5c:	d1ee      	bne.n	8007e3c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	40023800 	.word	0x40023800
 8007e6c:	420e0040 	.word	0x420e0040
 8007e70:	40007000 	.word	0x40007000
 8007e74:	420e0044 	.word	0x420e0044

08007e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e0cc      	b.n	8008026 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e8c:	4b68      	ldr	r3, [pc, #416]	; (8008030 <HAL_RCC_ClockConfig+0x1b8>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 030f 	and.w	r3, r3, #15
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d90c      	bls.n	8007eb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e9a:	4b65      	ldr	r3, [pc, #404]	; (8008030 <HAL_RCC_ClockConfig+0x1b8>)
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	b2d2      	uxtb	r2, r2
 8007ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ea2:	4b63      	ldr	r3, [pc, #396]	; (8008030 <HAL_RCC_ClockConfig+0x1b8>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 030f 	and.w	r3, r3, #15
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d001      	beq.n	8007eb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e0b8      	b.n	8008026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d020      	beq.n	8007f02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0304 	and.w	r3, r3, #4
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d005      	beq.n	8007ed8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ecc:	4b59      	ldr	r3, [pc, #356]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	4a58      	ldr	r2, [pc, #352]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007ed2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ed6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0308 	and.w	r3, r3, #8
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d005      	beq.n	8007ef0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ee4:	4b53      	ldr	r3, [pc, #332]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	4a52      	ldr	r2, [pc, #328]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007eea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007eee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ef0:	4b50      	ldr	r3, [pc, #320]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	494d      	ldr	r1, [pc, #308]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d044      	beq.n	8007f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d107      	bne.n	8007f26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f16:	4b47      	ldr	r3, [pc, #284]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d119      	bne.n	8007f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e07f      	b.n	8008026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d003      	beq.n	8007f36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d107      	bne.n	8007f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f36:	4b3f      	ldr	r3, [pc, #252]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d109      	bne.n	8007f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e06f      	b.n	8008026 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f46:	4b3b      	ldr	r3, [pc, #236]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e067      	b.n	8008026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f56:	4b37      	ldr	r3, [pc, #220]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f023 0203 	bic.w	r2, r3, #3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	4934      	ldr	r1, [pc, #208]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f68:	f7fe f844 	bl	8005ff4 <HAL_GetTick>
 8007f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f6e:	e00a      	b.n	8007f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f70:	f7fe f840 	bl	8005ff4 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e04f      	b.n	8008026 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f86:	4b2b      	ldr	r3, [pc, #172]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f003 020c 	and.w	r2, r3, #12
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d1eb      	bne.n	8007f70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f98:	4b25      	ldr	r3, [pc, #148]	; (8008030 <HAL_RCC_ClockConfig+0x1b8>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 030f 	and.w	r3, r3, #15
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d20c      	bcs.n	8007fc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fa6:	4b22      	ldr	r3, [pc, #136]	; (8008030 <HAL_RCC_ClockConfig+0x1b8>)
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	b2d2      	uxtb	r2, r2
 8007fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fae:	4b20      	ldr	r3, [pc, #128]	; (8008030 <HAL_RCC_ClockConfig+0x1b8>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d001      	beq.n	8007fc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e032      	b.n	8008026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0304 	and.w	r3, r3, #4
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d008      	beq.n	8007fde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fcc:	4b19      	ldr	r3, [pc, #100]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	4916      	ldr	r1, [pc, #88]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0308 	and.w	r3, r3, #8
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d009      	beq.n	8007ffe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007fea:	4b12      	ldr	r3, [pc, #72]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	490e      	ldr	r1, [pc, #56]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ffe:	f000 f855 	bl	80080ac <HAL_RCC_GetSysClockFreq>
 8008002:	4602      	mov	r2, r0
 8008004:	4b0b      	ldr	r3, [pc, #44]	; (8008034 <HAL_RCC_ClockConfig+0x1bc>)
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	091b      	lsrs	r3, r3, #4
 800800a:	f003 030f 	and.w	r3, r3, #15
 800800e:	490a      	ldr	r1, [pc, #40]	; (8008038 <HAL_RCC_ClockConfig+0x1c0>)
 8008010:	5ccb      	ldrb	r3, [r1, r3]
 8008012:	fa22 f303 	lsr.w	r3, r2, r3
 8008016:	4a09      	ldr	r2, [pc, #36]	; (800803c <HAL_RCC_ClockConfig+0x1c4>)
 8008018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800801a:	4b09      	ldr	r3, [pc, #36]	; (8008040 <HAL_RCC_ClockConfig+0x1c8>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4618      	mov	r0, r3
 8008020:	f7fd ffa4 	bl	8005f6c <HAL_InitTick>

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	40023c00 	.word	0x40023c00
 8008034:	40023800 	.word	0x40023800
 8008038:	0800fd8c 	.word	0x0800fd8c
 800803c:	2000009c 	.word	0x2000009c
 8008040:	200000a0 	.word	0x200000a0

08008044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008044:	b480      	push	{r7}
 8008046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008048:	4b03      	ldr	r3, [pc, #12]	; (8008058 <HAL_RCC_GetHCLKFreq+0x14>)
 800804a:	681b      	ldr	r3, [r3, #0]
}
 800804c:	4618      	mov	r0, r3
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	2000009c 	.word	0x2000009c

0800805c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008060:	f7ff fff0 	bl	8008044 <HAL_RCC_GetHCLKFreq>
 8008064:	4602      	mov	r2, r0
 8008066:	4b05      	ldr	r3, [pc, #20]	; (800807c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	0a9b      	lsrs	r3, r3, #10
 800806c:	f003 0307 	and.w	r3, r3, #7
 8008070:	4903      	ldr	r1, [pc, #12]	; (8008080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008072:	5ccb      	ldrb	r3, [r1, r3]
 8008074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008078:	4618      	mov	r0, r3
 800807a:	bd80      	pop	{r7, pc}
 800807c:	40023800 	.word	0x40023800
 8008080:	0800fd9c 	.word	0x0800fd9c

08008084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008088:	f7ff ffdc 	bl	8008044 <HAL_RCC_GetHCLKFreq>
 800808c:	4602      	mov	r2, r0
 800808e:	4b05      	ldr	r3, [pc, #20]	; (80080a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	0b5b      	lsrs	r3, r3, #13
 8008094:	f003 0307 	and.w	r3, r3, #7
 8008098:	4903      	ldr	r1, [pc, #12]	; (80080a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800809a:	5ccb      	ldrb	r3, [r1, r3]
 800809c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	40023800 	.word	0x40023800
 80080a8:	0800fd9c 	.word	0x0800fd9c

080080ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080b0:	b0ae      	sub	sp, #184	; 0xb8
 80080b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080d2:	4bcb      	ldr	r3, [pc, #812]	; (8008400 <HAL_RCC_GetSysClockFreq+0x354>)
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 030c 	and.w	r3, r3, #12
 80080da:	2b0c      	cmp	r3, #12
 80080dc:	f200 8206 	bhi.w	80084ec <HAL_RCC_GetSysClockFreq+0x440>
 80080e0:	a201      	add	r2, pc, #4	; (adr r2, 80080e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80080e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e6:	bf00      	nop
 80080e8:	0800811d 	.word	0x0800811d
 80080ec:	080084ed 	.word	0x080084ed
 80080f0:	080084ed 	.word	0x080084ed
 80080f4:	080084ed 	.word	0x080084ed
 80080f8:	08008125 	.word	0x08008125
 80080fc:	080084ed 	.word	0x080084ed
 8008100:	080084ed 	.word	0x080084ed
 8008104:	080084ed 	.word	0x080084ed
 8008108:	0800812d 	.word	0x0800812d
 800810c:	080084ed 	.word	0x080084ed
 8008110:	080084ed 	.word	0x080084ed
 8008114:	080084ed 	.word	0x080084ed
 8008118:	0800831d 	.word	0x0800831d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800811c:	4bb9      	ldr	r3, [pc, #740]	; (8008404 <HAL_RCC_GetSysClockFreq+0x358>)
 800811e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008122:	e1e7      	b.n	80084f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008124:	4bb8      	ldr	r3, [pc, #736]	; (8008408 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800812a:	e1e3      	b.n	80084f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800812c:	4bb4      	ldr	r3, [pc, #720]	; (8008400 <HAL_RCC_GetSysClockFreq+0x354>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008134:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008138:	4bb1      	ldr	r3, [pc, #708]	; (8008400 <HAL_RCC_GetSysClockFreq+0x354>)
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d071      	beq.n	8008228 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008144:	4bae      	ldr	r3, [pc, #696]	; (8008400 <HAL_RCC_GetSysClockFreq+0x354>)
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	099b      	lsrs	r3, r3, #6
 800814a:	2200      	movs	r2, #0
 800814c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008150:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008154:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008160:	2300      	movs	r3, #0
 8008162:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008166:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800816a:	4622      	mov	r2, r4
 800816c:	462b      	mov	r3, r5
 800816e:	f04f 0000 	mov.w	r0, #0
 8008172:	f04f 0100 	mov.w	r1, #0
 8008176:	0159      	lsls	r1, r3, #5
 8008178:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800817c:	0150      	lsls	r0, r2, #5
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	4621      	mov	r1, r4
 8008184:	1a51      	subs	r1, r2, r1
 8008186:	6439      	str	r1, [r7, #64]	; 0x40
 8008188:	4629      	mov	r1, r5
 800818a:	eb63 0301 	sbc.w	r3, r3, r1
 800818e:	647b      	str	r3, [r7, #68]	; 0x44
 8008190:	f04f 0200 	mov.w	r2, #0
 8008194:	f04f 0300 	mov.w	r3, #0
 8008198:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800819c:	4649      	mov	r1, r9
 800819e:	018b      	lsls	r3, r1, #6
 80081a0:	4641      	mov	r1, r8
 80081a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80081a6:	4641      	mov	r1, r8
 80081a8:	018a      	lsls	r2, r1, #6
 80081aa:	4641      	mov	r1, r8
 80081ac:	1a51      	subs	r1, r2, r1
 80081ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80081b0:	4649      	mov	r1, r9
 80081b2:	eb63 0301 	sbc.w	r3, r3, r1
 80081b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081b8:	f04f 0200 	mov.w	r2, #0
 80081bc:	f04f 0300 	mov.w	r3, #0
 80081c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80081c4:	4649      	mov	r1, r9
 80081c6:	00cb      	lsls	r3, r1, #3
 80081c8:	4641      	mov	r1, r8
 80081ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081ce:	4641      	mov	r1, r8
 80081d0:	00ca      	lsls	r2, r1, #3
 80081d2:	4610      	mov	r0, r2
 80081d4:	4619      	mov	r1, r3
 80081d6:	4603      	mov	r3, r0
 80081d8:	4622      	mov	r2, r4
 80081da:	189b      	adds	r3, r3, r2
 80081dc:	633b      	str	r3, [r7, #48]	; 0x30
 80081de:	462b      	mov	r3, r5
 80081e0:	460a      	mov	r2, r1
 80081e2:	eb42 0303 	adc.w	r3, r2, r3
 80081e6:	637b      	str	r3, [r7, #52]	; 0x34
 80081e8:	f04f 0200 	mov.w	r2, #0
 80081ec:	f04f 0300 	mov.w	r3, #0
 80081f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80081f4:	4629      	mov	r1, r5
 80081f6:	024b      	lsls	r3, r1, #9
 80081f8:	4621      	mov	r1, r4
 80081fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80081fe:	4621      	mov	r1, r4
 8008200:	024a      	lsls	r2, r1, #9
 8008202:	4610      	mov	r0, r2
 8008204:	4619      	mov	r1, r3
 8008206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800820a:	2200      	movs	r2, #0
 800820c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008210:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008214:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008218:	f7f8 fd36 	bl	8000c88 <__aeabi_uldivmod>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4613      	mov	r3, r2
 8008222:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008226:	e067      	b.n	80082f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008228:	4b75      	ldr	r3, [pc, #468]	; (8008400 <HAL_RCC_GetSysClockFreq+0x354>)
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	099b      	lsrs	r3, r3, #6
 800822e:	2200      	movs	r2, #0
 8008230:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008234:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008238:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800823c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008240:	67bb      	str	r3, [r7, #120]	; 0x78
 8008242:	2300      	movs	r3, #0
 8008244:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008246:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800824a:	4622      	mov	r2, r4
 800824c:	462b      	mov	r3, r5
 800824e:	f04f 0000 	mov.w	r0, #0
 8008252:	f04f 0100 	mov.w	r1, #0
 8008256:	0159      	lsls	r1, r3, #5
 8008258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800825c:	0150      	lsls	r0, r2, #5
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	4621      	mov	r1, r4
 8008264:	1a51      	subs	r1, r2, r1
 8008266:	62b9      	str	r1, [r7, #40]	; 0x28
 8008268:	4629      	mov	r1, r5
 800826a:	eb63 0301 	sbc.w	r3, r3, r1
 800826e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008270:	f04f 0200 	mov.w	r2, #0
 8008274:	f04f 0300 	mov.w	r3, #0
 8008278:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800827c:	4649      	mov	r1, r9
 800827e:	018b      	lsls	r3, r1, #6
 8008280:	4641      	mov	r1, r8
 8008282:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008286:	4641      	mov	r1, r8
 8008288:	018a      	lsls	r2, r1, #6
 800828a:	4641      	mov	r1, r8
 800828c:	ebb2 0a01 	subs.w	sl, r2, r1
 8008290:	4649      	mov	r1, r9
 8008292:	eb63 0b01 	sbc.w	fp, r3, r1
 8008296:	f04f 0200 	mov.w	r2, #0
 800829a:	f04f 0300 	mov.w	r3, #0
 800829e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082aa:	4692      	mov	sl, r2
 80082ac:	469b      	mov	fp, r3
 80082ae:	4623      	mov	r3, r4
 80082b0:	eb1a 0303 	adds.w	r3, sl, r3
 80082b4:	623b      	str	r3, [r7, #32]
 80082b6:	462b      	mov	r3, r5
 80082b8:	eb4b 0303 	adc.w	r3, fp, r3
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
 80082be:	f04f 0200 	mov.w	r2, #0
 80082c2:	f04f 0300 	mov.w	r3, #0
 80082c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80082ca:	4629      	mov	r1, r5
 80082cc:	028b      	lsls	r3, r1, #10
 80082ce:	4621      	mov	r1, r4
 80082d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80082d4:	4621      	mov	r1, r4
 80082d6:	028a      	lsls	r2, r1, #10
 80082d8:	4610      	mov	r0, r2
 80082da:	4619      	mov	r1, r3
 80082dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082e0:	2200      	movs	r2, #0
 80082e2:	673b      	str	r3, [r7, #112]	; 0x70
 80082e4:	677a      	str	r2, [r7, #116]	; 0x74
 80082e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80082ea:	f7f8 fccd 	bl	8000c88 <__aeabi_uldivmod>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4613      	mov	r3, r2
 80082f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80082f8:	4b41      	ldr	r3, [pc, #260]	; (8008400 <HAL_RCC_GetSysClockFreq+0x354>)
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	0c1b      	lsrs	r3, r3, #16
 80082fe:	f003 0303 	and.w	r3, r3, #3
 8008302:	3301      	adds	r3, #1
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800830a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800830e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008312:	fbb2 f3f3 	udiv	r3, r2, r3
 8008316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800831a:	e0eb      	b.n	80084f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800831c:	4b38      	ldr	r3, [pc, #224]	; (8008400 <HAL_RCC_GetSysClockFreq+0x354>)
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008328:	4b35      	ldr	r3, [pc, #212]	; (8008400 <HAL_RCC_GetSysClockFreq+0x354>)
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d06b      	beq.n	800840c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008334:	4b32      	ldr	r3, [pc, #200]	; (8008400 <HAL_RCC_GetSysClockFreq+0x354>)
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	099b      	lsrs	r3, r3, #6
 800833a:	2200      	movs	r2, #0
 800833c:	66bb      	str	r3, [r7, #104]	; 0x68
 800833e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008346:	663b      	str	r3, [r7, #96]	; 0x60
 8008348:	2300      	movs	r3, #0
 800834a:	667b      	str	r3, [r7, #100]	; 0x64
 800834c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008350:	4622      	mov	r2, r4
 8008352:	462b      	mov	r3, r5
 8008354:	f04f 0000 	mov.w	r0, #0
 8008358:	f04f 0100 	mov.w	r1, #0
 800835c:	0159      	lsls	r1, r3, #5
 800835e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008362:	0150      	lsls	r0, r2, #5
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	4621      	mov	r1, r4
 800836a:	1a51      	subs	r1, r2, r1
 800836c:	61b9      	str	r1, [r7, #24]
 800836e:	4629      	mov	r1, r5
 8008370:	eb63 0301 	sbc.w	r3, r3, r1
 8008374:	61fb      	str	r3, [r7, #28]
 8008376:	f04f 0200 	mov.w	r2, #0
 800837a:	f04f 0300 	mov.w	r3, #0
 800837e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008382:	4659      	mov	r1, fp
 8008384:	018b      	lsls	r3, r1, #6
 8008386:	4651      	mov	r1, sl
 8008388:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800838c:	4651      	mov	r1, sl
 800838e:	018a      	lsls	r2, r1, #6
 8008390:	4651      	mov	r1, sl
 8008392:	ebb2 0801 	subs.w	r8, r2, r1
 8008396:	4659      	mov	r1, fp
 8008398:	eb63 0901 	sbc.w	r9, r3, r1
 800839c:	f04f 0200 	mov.w	r2, #0
 80083a0:	f04f 0300 	mov.w	r3, #0
 80083a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083b0:	4690      	mov	r8, r2
 80083b2:	4699      	mov	r9, r3
 80083b4:	4623      	mov	r3, r4
 80083b6:	eb18 0303 	adds.w	r3, r8, r3
 80083ba:	613b      	str	r3, [r7, #16]
 80083bc:	462b      	mov	r3, r5
 80083be:	eb49 0303 	adc.w	r3, r9, r3
 80083c2:	617b      	str	r3, [r7, #20]
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	f04f 0300 	mov.w	r3, #0
 80083cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80083d0:	4629      	mov	r1, r5
 80083d2:	024b      	lsls	r3, r1, #9
 80083d4:	4621      	mov	r1, r4
 80083d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80083da:	4621      	mov	r1, r4
 80083dc:	024a      	lsls	r2, r1, #9
 80083de:	4610      	mov	r0, r2
 80083e0:	4619      	mov	r1, r3
 80083e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083e6:	2200      	movs	r2, #0
 80083e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80083ea:	65fa      	str	r2, [r7, #92]	; 0x5c
 80083ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80083f0:	f7f8 fc4a 	bl	8000c88 <__aeabi_uldivmod>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4613      	mov	r3, r2
 80083fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083fe:	e065      	b.n	80084cc <HAL_RCC_GetSysClockFreq+0x420>
 8008400:	40023800 	.word	0x40023800
 8008404:	00f42400 	.word	0x00f42400
 8008408:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800840c:	4b3d      	ldr	r3, [pc, #244]	; (8008504 <HAL_RCC_GetSysClockFreq+0x458>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	099b      	lsrs	r3, r3, #6
 8008412:	2200      	movs	r2, #0
 8008414:	4618      	mov	r0, r3
 8008416:	4611      	mov	r1, r2
 8008418:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800841c:	653b      	str	r3, [r7, #80]	; 0x50
 800841e:	2300      	movs	r3, #0
 8008420:	657b      	str	r3, [r7, #84]	; 0x54
 8008422:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008426:	4642      	mov	r2, r8
 8008428:	464b      	mov	r3, r9
 800842a:	f04f 0000 	mov.w	r0, #0
 800842e:	f04f 0100 	mov.w	r1, #0
 8008432:	0159      	lsls	r1, r3, #5
 8008434:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008438:	0150      	lsls	r0, r2, #5
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4641      	mov	r1, r8
 8008440:	1a51      	subs	r1, r2, r1
 8008442:	60b9      	str	r1, [r7, #8]
 8008444:	4649      	mov	r1, r9
 8008446:	eb63 0301 	sbc.w	r3, r3, r1
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	f04f 0200 	mov.w	r2, #0
 8008450:	f04f 0300 	mov.w	r3, #0
 8008454:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008458:	4659      	mov	r1, fp
 800845a:	018b      	lsls	r3, r1, #6
 800845c:	4651      	mov	r1, sl
 800845e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008462:	4651      	mov	r1, sl
 8008464:	018a      	lsls	r2, r1, #6
 8008466:	4651      	mov	r1, sl
 8008468:	1a54      	subs	r4, r2, r1
 800846a:	4659      	mov	r1, fp
 800846c:	eb63 0501 	sbc.w	r5, r3, r1
 8008470:	f04f 0200 	mov.w	r2, #0
 8008474:	f04f 0300 	mov.w	r3, #0
 8008478:	00eb      	lsls	r3, r5, #3
 800847a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800847e:	00e2      	lsls	r2, r4, #3
 8008480:	4614      	mov	r4, r2
 8008482:	461d      	mov	r5, r3
 8008484:	4643      	mov	r3, r8
 8008486:	18e3      	adds	r3, r4, r3
 8008488:	603b      	str	r3, [r7, #0]
 800848a:	464b      	mov	r3, r9
 800848c:	eb45 0303 	adc.w	r3, r5, r3
 8008490:	607b      	str	r3, [r7, #4]
 8008492:	f04f 0200 	mov.w	r2, #0
 8008496:	f04f 0300 	mov.w	r3, #0
 800849a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800849e:	4629      	mov	r1, r5
 80084a0:	028b      	lsls	r3, r1, #10
 80084a2:	4621      	mov	r1, r4
 80084a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80084a8:	4621      	mov	r1, r4
 80084aa:	028a      	lsls	r2, r1, #10
 80084ac:	4610      	mov	r0, r2
 80084ae:	4619      	mov	r1, r3
 80084b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084b4:	2200      	movs	r2, #0
 80084b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80084b8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80084ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084be:	f7f8 fbe3 	bl	8000c88 <__aeabi_uldivmod>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	4613      	mov	r3, r2
 80084c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80084cc:	4b0d      	ldr	r3, [pc, #52]	; (8008504 <HAL_RCC_GetSysClockFreq+0x458>)
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	0f1b      	lsrs	r3, r3, #28
 80084d2:	f003 0307 	and.w	r3, r3, #7
 80084d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80084da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80084e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80084ea:	e003      	b.n	80084f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80084ec:	4b06      	ldr	r3, [pc, #24]	; (8008508 <HAL_RCC_GetSysClockFreq+0x45c>)
 80084ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80084f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80084f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	37b8      	adds	r7, #184	; 0xb8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008502:	bf00      	nop
 8008504:	40023800 	.word	0x40023800
 8008508:	00f42400 	.word	0x00f42400

0800850c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e28d      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 8083 	beq.w	8008632 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800852c:	4b94      	ldr	r3, [pc, #592]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	f003 030c 	and.w	r3, r3, #12
 8008534:	2b04      	cmp	r3, #4
 8008536:	d019      	beq.n	800856c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008538:	4b91      	ldr	r3, [pc, #580]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008540:	2b08      	cmp	r3, #8
 8008542:	d106      	bne.n	8008552 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008544:	4b8e      	ldr	r3, [pc, #568]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800854c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008550:	d00c      	beq.n	800856c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008552:	4b8b      	ldr	r3, [pc, #556]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800855a:	2b0c      	cmp	r3, #12
 800855c:	d112      	bne.n	8008584 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800855e:	4b88      	ldr	r3, [pc, #544]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800856a:	d10b      	bne.n	8008584 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800856c:	4b84      	ldr	r3, [pc, #528]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d05b      	beq.n	8008630 <HAL_RCC_OscConfig+0x124>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d157      	bne.n	8008630 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e25a      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800858c:	d106      	bne.n	800859c <HAL_RCC_OscConfig+0x90>
 800858e:	4b7c      	ldr	r3, [pc, #496]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a7b      	ldr	r2, [pc, #492]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 8008594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	e01d      	b.n	80085d8 <HAL_RCC_OscConfig+0xcc>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085a4:	d10c      	bne.n	80085c0 <HAL_RCC_OscConfig+0xb4>
 80085a6:	4b76      	ldr	r3, [pc, #472]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a75      	ldr	r2, [pc, #468]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 80085ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085b0:	6013      	str	r3, [r2, #0]
 80085b2:	4b73      	ldr	r3, [pc, #460]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a72      	ldr	r2, [pc, #456]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 80085b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085bc:	6013      	str	r3, [r2, #0]
 80085be:	e00b      	b.n	80085d8 <HAL_RCC_OscConfig+0xcc>
 80085c0:	4b6f      	ldr	r3, [pc, #444]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a6e      	ldr	r2, [pc, #440]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 80085c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ca:	6013      	str	r3, [r2, #0]
 80085cc:	4b6c      	ldr	r3, [pc, #432]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a6b      	ldr	r2, [pc, #428]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 80085d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d013      	beq.n	8008608 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e0:	f7fd fd08 	bl	8005ff4 <HAL_GetTick>
 80085e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085e6:	e008      	b.n	80085fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085e8:	f7fd fd04 	bl	8005ff4 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	2b64      	cmp	r3, #100	; 0x64
 80085f4:	d901      	bls.n	80085fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e21f      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085fa:	4b61      	ldr	r3, [pc, #388]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0f0      	beq.n	80085e8 <HAL_RCC_OscConfig+0xdc>
 8008606:	e014      	b.n	8008632 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008608:	f7fd fcf4 	bl	8005ff4 <HAL_GetTick>
 800860c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800860e:	e008      	b.n	8008622 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008610:	f7fd fcf0 	bl	8005ff4 <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	2b64      	cmp	r3, #100	; 0x64
 800861c:	d901      	bls.n	8008622 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e20b      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008622:	4b57      	ldr	r3, [pc, #348]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1f0      	bne.n	8008610 <HAL_RCC_OscConfig+0x104>
 800862e:	e000      	b.n	8008632 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	2b00      	cmp	r3, #0
 800863c:	d06f      	beq.n	800871e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800863e:	4b50      	ldr	r3, [pc, #320]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f003 030c 	and.w	r3, r3, #12
 8008646:	2b00      	cmp	r3, #0
 8008648:	d017      	beq.n	800867a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800864a:	4b4d      	ldr	r3, [pc, #308]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008652:	2b08      	cmp	r3, #8
 8008654:	d105      	bne.n	8008662 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008656:	4b4a      	ldr	r3, [pc, #296]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00b      	beq.n	800867a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008662:	4b47      	ldr	r3, [pc, #284]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800866a:	2b0c      	cmp	r3, #12
 800866c:	d11c      	bne.n	80086a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800866e:	4b44      	ldr	r3, [pc, #272]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d116      	bne.n	80086a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800867a:	4b41      	ldr	r3, [pc, #260]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0302 	and.w	r3, r3, #2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d005      	beq.n	8008692 <HAL_RCC_OscConfig+0x186>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d001      	beq.n	8008692 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e1d3      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008692:	4b3b      	ldr	r3, [pc, #236]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	00db      	lsls	r3, r3, #3
 80086a0:	4937      	ldr	r1, [pc, #220]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086a6:	e03a      	b.n	800871e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d020      	beq.n	80086f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086b0:	4b34      	ldr	r3, [pc, #208]	; (8008784 <HAL_RCC_OscConfig+0x278>)
 80086b2:	2201      	movs	r2, #1
 80086b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b6:	f7fd fc9d 	bl	8005ff4 <HAL_GetTick>
 80086ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086bc:	e008      	b.n	80086d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086be:	f7fd fc99 	bl	8005ff4 <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d901      	bls.n	80086d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e1b4      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086d0:	4b2b      	ldr	r3, [pc, #172]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0302 	and.w	r3, r3, #2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0f0      	beq.n	80086be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086dc:	4b28      	ldr	r3, [pc, #160]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	00db      	lsls	r3, r3, #3
 80086ea:	4925      	ldr	r1, [pc, #148]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	600b      	str	r3, [r1, #0]
 80086f0:	e015      	b.n	800871e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086f2:	4b24      	ldr	r3, [pc, #144]	; (8008784 <HAL_RCC_OscConfig+0x278>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f8:	f7fd fc7c 	bl	8005ff4 <HAL_GetTick>
 80086fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086fe:	e008      	b.n	8008712 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008700:	f7fd fc78 	bl	8005ff4 <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	2b02      	cmp	r3, #2
 800870c:	d901      	bls.n	8008712 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e193      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008712:	4b1b      	ldr	r3, [pc, #108]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1f0      	bne.n	8008700 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0308 	and.w	r3, r3, #8
 8008726:	2b00      	cmp	r3, #0
 8008728:	d036      	beq.n	8008798 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d016      	beq.n	8008760 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008732:	4b15      	ldr	r3, [pc, #84]	; (8008788 <HAL_RCC_OscConfig+0x27c>)
 8008734:	2201      	movs	r2, #1
 8008736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008738:	f7fd fc5c 	bl	8005ff4 <HAL_GetTick>
 800873c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800873e:	e008      	b.n	8008752 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008740:	f7fd fc58 	bl	8005ff4 <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	2b02      	cmp	r3, #2
 800874c:	d901      	bls.n	8008752 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e173      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008752:	4b0b      	ldr	r3, [pc, #44]	; (8008780 <HAL_RCC_OscConfig+0x274>)
 8008754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008756:	f003 0302 	and.w	r3, r3, #2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0f0      	beq.n	8008740 <HAL_RCC_OscConfig+0x234>
 800875e:	e01b      	b.n	8008798 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008760:	4b09      	ldr	r3, [pc, #36]	; (8008788 <HAL_RCC_OscConfig+0x27c>)
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008766:	f7fd fc45 	bl	8005ff4 <HAL_GetTick>
 800876a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800876c:	e00e      	b.n	800878c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800876e:	f7fd fc41 	bl	8005ff4 <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	2b02      	cmp	r3, #2
 800877a:	d907      	bls.n	800878c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e15c      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
 8008780:	40023800 	.word	0x40023800
 8008784:	42470000 	.word	0x42470000
 8008788:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800878c:	4b8a      	ldr	r3, [pc, #552]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 800878e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008790:	f003 0302 	and.w	r3, r3, #2
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1ea      	bne.n	800876e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0304 	and.w	r3, r3, #4
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 8097 	beq.w	80088d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087a6:	2300      	movs	r3, #0
 80087a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087aa:	4b83      	ldr	r3, [pc, #524]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10f      	bne.n	80087d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087b6:	2300      	movs	r3, #0
 80087b8:	60bb      	str	r3, [r7, #8]
 80087ba:	4b7f      	ldr	r3, [pc, #508]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 80087bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087be:	4a7e      	ldr	r2, [pc, #504]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 80087c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087c4:	6413      	str	r3, [r2, #64]	; 0x40
 80087c6:	4b7c      	ldr	r3, [pc, #496]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ce:	60bb      	str	r3, [r7, #8]
 80087d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087d2:	2301      	movs	r3, #1
 80087d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087d6:	4b79      	ldr	r3, [pc, #484]	; (80089bc <HAL_RCC_OscConfig+0x4b0>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d118      	bne.n	8008814 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087e2:	4b76      	ldr	r3, [pc, #472]	; (80089bc <HAL_RCC_OscConfig+0x4b0>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a75      	ldr	r2, [pc, #468]	; (80089bc <HAL_RCC_OscConfig+0x4b0>)
 80087e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087ee:	f7fd fc01 	bl	8005ff4 <HAL_GetTick>
 80087f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087f4:	e008      	b.n	8008808 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087f6:	f7fd fbfd 	bl	8005ff4 <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	2b02      	cmp	r3, #2
 8008802:	d901      	bls.n	8008808 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e118      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008808:	4b6c      	ldr	r3, [pc, #432]	; (80089bc <HAL_RCC_OscConfig+0x4b0>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0f0      	beq.n	80087f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d106      	bne.n	800882a <HAL_RCC_OscConfig+0x31e>
 800881c:	4b66      	ldr	r3, [pc, #408]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 800881e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008820:	4a65      	ldr	r2, [pc, #404]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 8008822:	f043 0301 	orr.w	r3, r3, #1
 8008826:	6713      	str	r3, [r2, #112]	; 0x70
 8008828:	e01c      	b.n	8008864 <HAL_RCC_OscConfig+0x358>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	2b05      	cmp	r3, #5
 8008830:	d10c      	bne.n	800884c <HAL_RCC_OscConfig+0x340>
 8008832:	4b61      	ldr	r3, [pc, #388]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 8008834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008836:	4a60      	ldr	r2, [pc, #384]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 8008838:	f043 0304 	orr.w	r3, r3, #4
 800883c:	6713      	str	r3, [r2, #112]	; 0x70
 800883e:	4b5e      	ldr	r3, [pc, #376]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 8008840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008842:	4a5d      	ldr	r2, [pc, #372]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 8008844:	f043 0301 	orr.w	r3, r3, #1
 8008848:	6713      	str	r3, [r2, #112]	; 0x70
 800884a:	e00b      	b.n	8008864 <HAL_RCC_OscConfig+0x358>
 800884c:	4b5a      	ldr	r3, [pc, #360]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 800884e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008850:	4a59      	ldr	r2, [pc, #356]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 8008852:	f023 0301 	bic.w	r3, r3, #1
 8008856:	6713      	str	r3, [r2, #112]	; 0x70
 8008858:	4b57      	ldr	r3, [pc, #348]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 800885a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885c:	4a56      	ldr	r2, [pc, #344]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 800885e:	f023 0304 	bic.w	r3, r3, #4
 8008862:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d015      	beq.n	8008898 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800886c:	f7fd fbc2 	bl	8005ff4 <HAL_GetTick>
 8008870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008872:	e00a      	b.n	800888a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008874:	f7fd fbbe 	bl	8005ff4 <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008882:	4293      	cmp	r3, r2
 8008884:	d901      	bls.n	800888a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e0d7      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800888a:	4b4b      	ldr	r3, [pc, #300]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 800888c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888e:	f003 0302 	and.w	r3, r3, #2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d0ee      	beq.n	8008874 <HAL_RCC_OscConfig+0x368>
 8008896:	e014      	b.n	80088c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008898:	f7fd fbac 	bl	8005ff4 <HAL_GetTick>
 800889c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800889e:	e00a      	b.n	80088b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088a0:	f7fd fba8 	bl	8005ff4 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d901      	bls.n	80088b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e0c1      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088b6:	4b40      	ldr	r3, [pc, #256]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 80088b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1ee      	bne.n	80088a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d105      	bne.n	80088d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088c8:	4b3b      	ldr	r3, [pc, #236]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 80088ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088cc:	4a3a      	ldr	r2, [pc, #232]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 80088ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 80ad 	beq.w	8008a38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80088de:	4b36      	ldr	r3, [pc, #216]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f003 030c 	and.w	r3, r3, #12
 80088e6:	2b08      	cmp	r3, #8
 80088e8:	d060      	beq.n	80089ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d145      	bne.n	800897e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088f2:	4b33      	ldr	r3, [pc, #204]	; (80089c0 <HAL_RCC_OscConfig+0x4b4>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f8:	f7fd fb7c 	bl	8005ff4 <HAL_GetTick>
 80088fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088fe:	e008      	b.n	8008912 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008900:	f7fd fb78 	bl	8005ff4 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b02      	cmp	r3, #2
 800890c:	d901      	bls.n	8008912 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e093      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008912:	4b29      	ldr	r3, [pc, #164]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1f0      	bne.n	8008900 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	69da      	ldr	r2, [r3, #28]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	431a      	orrs	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	019b      	lsls	r3, r3, #6
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	085b      	lsrs	r3, r3, #1
 8008936:	3b01      	subs	r3, #1
 8008938:	041b      	lsls	r3, r3, #16
 800893a:	431a      	orrs	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	061b      	lsls	r3, r3, #24
 8008942:	431a      	orrs	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008948:	071b      	lsls	r3, r3, #28
 800894a:	491b      	ldr	r1, [pc, #108]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 800894c:	4313      	orrs	r3, r2
 800894e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008950:	4b1b      	ldr	r3, [pc, #108]	; (80089c0 <HAL_RCC_OscConfig+0x4b4>)
 8008952:	2201      	movs	r2, #1
 8008954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008956:	f7fd fb4d 	bl	8005ff4 <HAL_GetTick>
 800895a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800895c:	e008      	b.n	8008970 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800895e:	f7fd fb49 	bl	8005ff4 <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	2b02      	cmp	r3, #2
 800896a:	d901      	bls.n	8008970 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e064      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008970:	4b11      	ldr	r3, [pc, #68]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0f0      	beq.n	800895e <HAL_RCC_OscConfig+0x452>
 800897c:	e05c      	b.n	8008a38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800897e:	4b10      	ldr	r3, [pc, #64]	; (80089c0 <HAL_RCC_OscConfig+0x4b4>)
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008984:	f7fd fb36 	bl	8005ff4 <HAL_GetTick>
 8008988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800898a:	e008      	b.n	800899e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800898c:	f7fd fb32 	bl	8005ff4 <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	2b02      	cmp	r3, #2
 8008998:	d901      	bls.n	800899e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e04d      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800899e:	4b06      	ldr	r3, [pc, #24]	; (80089b8 <HAL_RCC_OscConfig+0x4ac>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1f0      	bne.n	800898c <HAL_RCC_OscConfig+0x480>
 80089aa:	e045      	b.n	8008a38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d107      	bne.n	80089c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e040      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
 80089b8:	40023800 	.word	0x40023800
 80089bc:	40007000 	.word	0x40007000
 80089c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80089c4:	4b1f      	ldr	r3, [pc, #124]	; (8008a44 <HAL_RCC_OscConfig+0x538>)
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d030      	beq.n	8008a34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089dc:	429a      	cmp	r2, r3
 80089de:	d129      	bne.n	8008a34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d122      	bne.n	8008a34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80089f4:	4013      	ands	r3, r2
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d119      	bne.n	8008a34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0a:	085b      	lsrs	r3, r3, #1
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d10f      	bne.n	8008a34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d107      	bne.n	8008a34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d001      	beq.n	8008a38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e000      	b.n	8008a3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	40023800 	.word	0x40023800

08008a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d101      	bne.n	8008a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e041      	b.n	8008ade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d106      	bne.n	8008a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7fc fe08 	bl	8005684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2202      	movs	r2, #2
 8008a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	3304      	adds	r3, #4
 8008a84:	4619      	mov	r1, r3
 8008a86:	4610      	mov	r0, r2
 8008a88:	f001 f944 	bl	8009d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
	...

08008ae8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d001      	beq.n	8008b00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e046      	b.n	8008b8e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2202      	movs	r2, #2
 8008b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a23      	ldr	r2, [pc, #140]	; (8008b9c <HAL_TIM_Base_Start+0xb4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d022      	beq.n	8008b58 <HAL_TIM_Base_Start+0x70>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b1a:	d01d      	beq.n	8008b58 <HAL_TIM_Base_Start+0x70>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a1f      	ldr	r2, [pc, #124]	; (8008ba0 <HAL_TIM_Base_Start+0xb8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d018      	beq.n	8008b58 <HAL_TIM_Base_Start+0x70>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a1e      	ldr	r2, [pc, #120]	; (8008ba4 <HAL_TIM_Base_Start+0xbc>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d013      	beq.n	8008b58 <HAL_TIM_Base_Start+0x70>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a1c      	ldr	r2, [pc, #112]	; (8008ba8 <HAL_TIM_Base_Start+0xc0>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00e      	beq.n	8008b58 <HAL_TIM_Base_Start+0x70>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a1b      	ldr	r2, [pc, #108]	; (8008bac <HAL_TIM_Base_Start+0xc4>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d009      	beq.n	8008b58 <HAL_TIM_Base_Start+0x70>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a19      	ldr	r2, [pc, #100]	; (8008bb0 <HAL_TIM_Base_Start+0xc8>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d004      	beq.n	8008b58 <HAL_TIM_Base_Start+0x70>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a18      	ldr	r2, [pc, #96]	; (8008bb4 <HAL_TIM_Base_Start+0xcc>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d111      	bne.n	8008b7c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f003 0307 	and.w	r3, r3, #7
 8008b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2b06      	cmp	r3, #6
 8008b68:	d010      	beq.n	8008b8c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f042 0201 	orr.w	r2, r2, #1
 8008b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b7a:	e007      	b.n	8008b8c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f042 0201 	orr.w	r2, r2, #1
 8008b8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	40010000 	.word	0x40010000
 8008ba0:	40000400 	.word	0x40000400
 8008ba4:	40000800 	.word	0x40000800
 8008ba8:	40000c00 	.word	0x40000c00
 8008bac:	40010400 	.word	0x40010400
 8008bb0:	40014000 	.word	0x40014000
 8008bb4:	40001800 	.word	0x40001800

08008bb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e041      	b.n	8008c4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d106      	bne.n	8008be4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f839 	bl	8008c56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f001 f88c 	bl	8009d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b083      	sub	sp, #12
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
	...

08008c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d109      	bne.n	8008c90 <HAL_TIM_PWM_Start+0x24>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	bf14      	ite	ne
 8008c88:	2301      	movne	r3, #1
 8008c8a:	2300      	moveq	r3, #0
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	e022      	b.n	8008cd6 <HAL_TIM_PWM_Start+0x6a>
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	d109      	bne.n	8008caa <HAL_TIM_PWM_Start+0x3e>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	bf14      	ite	ne
 8008ca2:	2301      	movne	r3, #1
 8008ca4:	2300      	moveq	r3, #0
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	e015      	b.n	8008cd6 <HAL_TIM_PWM_Start+0x6a>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d109      	bne.n	8008cc4 <HAL_TIM_PWM_Start+0x58>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	bf14      	ite	ne
 8008cbc:	2301      	movne	r3, #1
 8008cbe:	2300      	moveq	r3, #0
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	e008      	b.n	8008cd6 <HAL_TIM_PWM_Start+0x6a>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	bf14      	ite	ne
 8008cd0:	2301      	movne	r3, #1
 8008cd2:	2300      	moveq	r3, #0
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e07c      	b.n	8008dd8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d104      	bne.n	8008cee <HAL_TIM_PWM_Start+0x82>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cec:	e013      	b.n	8008d16 <HAL_TIM_PWM_Start+0xaa>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b04      	cmp	r3, #4
 8008cf2:	d104      	bne.n	8008cfe <HAL_TIM_PWM_Start+0x92>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cfc:	e00b      	b.n	8008d16 <HAL_TIM_PWM_Start+0xaa>
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d104      	bne.n	8008d0e <HAL_TIM_PWM_Start+0xa2>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2202      	movs	r2, #2
 8008d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d0c:	e003      	b.n	8008d16 <HAL_TIM_PWM_Start+0xaa>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2202      	movs	r2, #2
 8008d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f001 fc0c 	bl	800a53c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a2d      	ldr	r2, [pc, #180]	; (8008de0 <HAL_TIM_PWM_Start+0x174>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d004      	beq.n	8008d38 <HAL_TIM_PWM_Start+0xcc>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a2c      	ldr	r2, [pc, #176]	; (8008de4 <HAL_TIM_PWM_Start+0x178>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d101      	bne.n	8008d3c <HAL_TIM_PWM_Start+0xd0>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e000      	b.n	8008d3e <HAL_TIM_PWM_Start+0xd2>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d007      	beq.n	8008d52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a22      	ldr	r2, [pc, #136]	; (8008de0 <HAL_TIM_PWM_Start+0x174>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d022      	beq.n	8008da2 <HAL_TIM_PWM_Start+0x136>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d64:	d01d      	beq.n	8008da2 <HAL_TIM_PWM_Start+0x136>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a1f      	ldr	r2, [pc, #124]	; (8008de8 <HAL_TIM_PWM_Start+0x17c>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d018      	beq.n	8008da2 <HAL_TIM_PWM_Start+0x136>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a1d      	ldr	r2, [pc, #116]	; (8008dec <HAL_TIM_PWM_Start+0x180>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d013      	beq.n	8008da2 <HAL_TIM_PWM_Start+0x136>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a1c      	ldr	r2, [pc, #112]	; (8008df0 <HAL_TIM_PWM_Start+0x184>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d00e      	beq.n	8008da2 <HAL_TIM_PWM_Start+0x136>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a16      	ldr	r2, [pc, #88]	; (8008de4 <HAL_TIM_PWM_Start+0x178>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d009      	beq.n	8008da2 <HAL_TIM_PWM_Start+0x136>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a18      	ldr	r2, [pc, #96]	; (8008df4 <HAL_TIM_PWM_Start+0x188>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d004      	beq.n	8008da2 <HAL_TIM_PWM_Start+0x136>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a16      	ldr	r2, [pc, #88]	; (8008df8 <HAL_TIM_PWM_Start+0x18c>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d111      	bne.n	8008dc6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	f003 0307 	and.w	r3, r3, #7
 8008dac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2b06      	cmp	r3, #6
 8008db2:	d010      	beq.n	8008dd6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f042 0201 	orr.w	r2, r2, #1
 8008dc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc4:	e007      	b.n	8008dd6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f042 0201 	orr.w	r2, r2, #1
 8008dd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	40010000 	.word	0x40010000
 8008de4:	40010400 	.word	0x40010400
 8008de8:	40000400 	.word	0x40000400
 8008dec:	40000800 	.word	0x40000800
 8008df0:	40000c00 	.word	0x40000c00
 8008df4:	40014000 	.word	0x40014000
 8008df8:	40001800 	.word	0x40001800

08008dfc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e041      	b.n	8008e92 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d106      	bne.n	8008e28 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f839 	bl	8008e9a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3304      	adds	r3, #4
 8008e38:	4619      	mov	r1, r3
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	f000 ff6a 	bl	8009d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b083      	sub	sp, #12
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
	...

08008eb0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
 8008ebc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d104      	bne.n	8008ed2 <HAL_TIM_IC_Start_DMA+0x22>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	e013      	b.n	8008efa <HAL_TIM_IC_Start_DMA+0x4a>
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b04      	cmp	r3, #4
 8008ed6:	d104      	bne.n	8008ee2 <HAL_TIM_IC_Start_DMA+0x32>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	e00b      	b.n	8008efa <HAL_TIM_IC_Start_DMA+0x4a>
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	2b08      	cmp	r3, #8
 8008ee6:	d104      	bne.n	8008ef2 <HAL_TIM_IC_Start_DMA+0x42>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	e003      	b.n	8008efa <HAL_TIM_IC_Start_DMA+0x4a>
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d104      	bne.n	8008f0c <HAL_TIM_IC_Start_DMA+0x5c>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	e013      	b.n	8008f34 <HAL_TIM_IC_Start_DMA+0x84>
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2b04      	cmp	r3, #4
 8008f10:	d104      	bne.n	8008f1c <HAL_TIM_IC_Start_DMA+0x6c>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	e00b      	b.n	8008f34 <HAL_TIM_IC_Start_DMA+0x84>
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2b08      	cmp	r3, #8
 8008f20:	d104      	bne.n	8008f2c <HAL_TIM_IC_Start_DMA+0x7c>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	e003      	b.n	8008f34 <HAL_TIM_IC_Start_DMA+0x84>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8008f36:	7dbb      	ldrb	r3, [r7, #22]
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d002      	beq.n	8008f42 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8008f3c:	7d7b      	ldrb	r3, [r7, #21]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d101      	bne.n	8008f46 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8008f42:	2302      	movs	r3, #2
 8008f44:	e146      	b.n	80091d4 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8008f46:	7dbb      	ldrb	r3, [r7, #22]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d143      	bne.n	8008fd4 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8008f4c:	7d7b      	ldrb	r3, [r7, #21]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d140      	bne.n	8008fd4 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d104      	bne.n	8008f62 <HAL_TIM_IC_Start_DMA+0xb2>
 8008f58:	887b      	ldrh	r3, [r7, #2]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e138      	b.n	80091d4 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d104      	bne.n	8008f72 <HAL_TIM_IC_Start_DMA+0xc2>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f70:	e013      	b.n	8008f9a <HAL_TIM_IC_Start_DMA+0xea>
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b04      	cmp	r3, #4
 8008f76:	d104      	bne.n	8008f82 <HAL_TIM_IC_Start_DMA+0xd2>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f80:	e00b      	b.n	8008f9a <HAL_TIM_IC_Start_DMA+0xea>
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b08      	cmp	r3, #8
 8008f86:	d104      	bne.n	8008f92 <HAL_TIM_IC_Start_DMA+0xe2>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f90:	e003      	b.n	8008f9a <HAL_TIM_IC_Start_DMA+0xea>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2202      	movs	r2, #2
 8008f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d104      	bne.n	8008faa <HAL_TIM_IC_Start_DMA+0xfa>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8008fa8:	e016      	b.n	8008fd8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b04      	cmp	r3, #4
 8008fae:	d104      	bne.n	8008fba <HAL_TIM_IC_Start_DMA+0x10a>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8008fb8:	e00e      	b.n	8008fd8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2b08      	cmp	r3, #8
 8008fbe:	d104      	bne.n	8008fca <HAL_TIM_IC_Start_DMA+0x11a>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8008fc8:	e006      	b.n	8008fd8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2202      	movs	r2, #2
 8008fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8008fd2:	e001      	b.n	8008fd8 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e0fd      	b.n	80091d4 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	68b9      	ldr	r1, [r7, #8]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f001 faab 	bl	800a53c <TIM_CCxChannelCmd>

  switch (Channel)
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	2b0c      	cmp	r3, #12
 8008fea:	f200 80ad 	bhi.w	8009148 <HAL_TIM_IC_Start_DMA+0x298>
 8008fee:	a201      	add	r2, pc, #4	; (adr r2, 8008ff4 <HAL_TIM_IC_Start_DMA+0x144>)
 8008ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff4:	08009029 	.word	0x08009029
 8008ff8:	08009149 	.word	0x08009149
 8008ffc:	08009149 	.word	0x08009149
 8009000:	08009149 	.word	0x08009149
 8009004:	08009071 	.word	0x08009071
 8009008:	08009149 	.word	0x08009149
 800900c:	08009149 	.word	0x08009149
 8009010:	08009149 	.word	0x08009149
 8009014:	080090b9 	.word	0x080090b9
 8009018:	08009149 	.word	0x08009149
 800901c:	08009149 	.word	0x08009149
 8009020:	08009149 	.word	0x08009149
 8009024:	08009101 	.word	0x08009101
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902c:	4a6b      	ldr	r2, [pc, #428]	; (80091dc <HAL_TIM_IC_Start_DMA+0x32c>)
 800902e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	4a6a      	ldr	r2, [pc, #424]	; (80091e0 <HAL_TIM_IC_Start_DMA+0x330>)
 8009036:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	4a69      	ldr	r2, [pc, #420]	; (80091e4 <HAL_TIM_IC_Start_DMA+0x334>)
 800903e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3334      	adds	r3, #52	; 0x34
 800904a:	4619      	mov	r1, r3
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	887b      	ldrh	r3, [r7, #2]
 8009050:	f7fd ff68 	bl	8006f24 <HAL_DMA_Start_IT>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e0ba      	b.n	80091d4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800906c:	60da      	str	r2, [r3, #12]
      break;
 800906e:	e06e      	b.n	800914e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009074:	4a59      	ldr	r2, [pc, #356]	; (80091dc <HAL_TIM_IC_Start_DMA+0x32c>)
 8009076:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907c:	4a58      	ldr	r2, [pc, #352]	; (80091e0 <HAL_TIM_IC_Start_DMA+0x330>)
 800907e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009084:	4a57      	ldr	r2, [pc, #348]	; (80091e4 <HAL_TIM_IC_Start_DMA+0x334>)
 8009086:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3338      	adds	r3, #56	; 0x38
 8009092:	4619      	mov	r1, r3
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	887b      	ldrh	r3, [r7, #2]
 8009098:	f7fd ff44 	bl	8006f24 <HAL_DMA_Start_IT>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e096      	b.n	80091d4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68da      	ldr	r2, [r3, #12]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090b4:	60da      	str	r2, [r3, #12]
      break;
 80090b6:	e04a      	b.n	800914e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090bc:	4a47      	ldr	r2, [pc, #284]	; (80091dc <HAL_TIM_IC_Start_DMA+0x32c>)
 80090be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	4a46      	ldr	r2, [pc, #280]	; (80091e0 <HAL_TIM_IC_Start_DMA+0x330>)
 80090c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	4a45      	ldr	r2, [pc, #276]	; (80091e4 <HAL_TIM_IC_Start_DMA+0x334>)
 80090ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	333c      	adds	r3, #60	; 0x3c
 80090da:	4619      	mov	r1, r3
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	887b      	ldrh	r3, [r7, #2]
 80090e0:	f7fd ff20 	bl	8006f24 <HAL_DMA_Start_IT>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e072      	b.n	80091d4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090fc:	60da      	str	r2, [r3, #12]
      break;
 80090fe:	e026      	b.n	800914e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009104:	4a35      	ldr	r2, [pc, #212]	; (80091dc <HAL_TIM_IC_Start_DMA+0x32c>)
 8009106:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910c:	4a34      	ldr	r2, [pc, #208]	; (80091e0 <HAL_TIM_IC_Start_DMA+0x330>)
 800910e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009114:	4a33      	ldr	r2, [pc, #204]	; (80091e4 <HAL_TIM_IC_Start_DMA+0x334>)
 8009116:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3340      	adds	r3, #64	; 0x40
 8009122:	4619      	mov	r1, r3
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	887b      	ldrh	r3, [r7, #2]
 8009128:	f7fd fefc 	bl	8006f24 <HAL_DMA_Start_IT>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e04e      	b.n	80091d4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68da      	ldr	r2, [r3, #12]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009144:	60da      	str	r2, [r3, #12]
      break;
 8009146:	e002      	b.n	800914e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	75fb      	strb	r3, [r7, #23]
      break;
 800914c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a25      	ldr	r2, [pc, #148]	; (80091e8 <HAL_TIM_IC_Start_DMA+0x338>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d022      	beq.n	800919e <HAL_TIM_IC_Start_DMA+0x2ee>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009160:	d01d      	beq.n	800919e <HAL_TIM_IC_Start_DMA+0x2ee>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a21      	ldr	r2, [pc, #132]	; (80091ec <HAL_TIM_IC_Start_DMA+0x33c>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d018      	beq.n	800919e <HAL_TIM_IC_Start_DMA+0x2ee>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a1f      	ldr	r2, [pc, #124]	; (80091f0 <HAL_TIM_IC_Start_DMA+0x340>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d013      	beq.n	800919e <HAL_TIM_IC_Start_DMA+0x2ee>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a1e      	ldr	r2, [pc, #120]	; (80091f4 <HAL_TIM_IC_Start_DMA+0x344>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d00e      	beq.n	800919e <HAL_TIM_IC_Start_DMA+0x2ee>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a1c      	ldr	r2, [pc, #112]	; (80091f8 <HAL_TIM_IC_Start_DMA+0x348>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d009      	beq.n	800919e <HAL_TIM_IC_Start_DMA+0x2ee>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a1b      	ldr	r2, [pc, #108]	; (80091fc <HAL_TIM_IC_Start_DMA+0x34c>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d004      	beq.n	800919e <HAL_TIM_IC_Start_DMA+0x2ee>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a19      	ldr	r2, [pc, #100]	; (8009200 <HAL_TIM_IC_Start_DMA+0x350>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d111      	bne.n	80091c2 <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f003 0307 	and.w	r3, r3, #7
 80091a8:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	2b06      	cmp	r3, #6
 80091ae:	d010      	beq.n	80091d2 <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f042 0201 	orr.w	r2, r2, #1
 80091be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091c0:	e007      	b.n	80091d2 <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f042 0201 	orr.w	r2, r2, #1
 80091d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3718      	adds	r7, #24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	08009be5 	.word	0x08009be5
 80091e0:	08009cad 	.word	0x08009cad
 80091e4:	08009b53 	.word	0x08009b53
 80091e8:	40010000 	.word	0x40010000
 80091ec:	40000400 	.word	0x40000400
 80091f0:	40000800 	.word	0x40000800
 80091f4:	40000c00 	.word	0x40000c00
 80091f8:	40010400 	.word	0x40010400
 80091fc:	40014000 	.word	0x40014000
 8009200:	40001800 	.word	0x40001800

08009204 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e097      	b.n	8009348 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d106      	bne.n	8009232 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7fc fb31 	bl	8005894 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2202      	movs	r2, #2
 8009236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6812      	ldr	r2, [r2, #0]
 8009244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009248:	f023 0307 	bic.w	r3, r3, #7
 800924c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3304      	adds	r3, #4
 8009256:	4619      	mov	r1, r3
 8009258:	4610      	mov	r0, r2
 800925a:	f000 fd5b 	bl	8009d14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	6a1b      	ldr	r3, [r3, #32]
 8009274:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	4313      	orrs	r3, r2
 800927e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009286:	f023 0303 	bic.w	r3, r3, #3
 800928a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	021b      	lsls	r3, r3, #8
 8009296:	4313      	orrs	r3, r2
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	4313      	orrs	r3, r2
 800929c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80092a4:	f023 030c 	bic.w	r3, r3, #12
 80092a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	021b      	lsls	r3, r3, #8
 80092c0:	4313      	orrs	r3, r2
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	011a      	lsls	r2, r3, #4
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	031b      	lsls	r3, r3, #12
 80092d4:	4313      	orrs	r3, r2
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	4313      	orrs	r3, r2
 80092da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80092e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80092ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	011b      	lsls	r3, r3, #4
 80092f6:	4313      	orrs	r3, r2
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3718      	adds	r7, #24
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009360:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009368:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009370:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009378:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d110      	bne.n	80093a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d102      	bne.n	800938c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009386:	7b7b      	ldrb	r3, [r7, #13]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d001      	beq.n	8009390 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e069      	b.n	8009464 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2202      	movs	r2, #2
 8009394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2202      	movs	r2, #2
 800939c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093a0:	e031      	b.n	8009406 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b04      	cmp	r3, #4
 80093a6:	d110      	bne.n	80093ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80093a8:	7bbb      	ldrb	r3, [r7, #14]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d102      	bne.n	80093b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80093ae:	7b3b      	ldrb	r3, [r7, #12]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d001      	beq.n	80093b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e055      	b.n	8009464 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2202      	movs	r2, #2
 80093bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2202      	movs	r2, #2
 80093c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093c8:	e01d      	b.n	8009406 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d108      	bne.n	80093e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d105      	bne.n	80093e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80093d6:	7b7b      	ldrb	r3, [r7, #13]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d102      	bne.n	80093e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80093dc:	7b3b      	ldrb	r3, [r7, #12]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d001      	beq.n	80093e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e03e      	b.n	8009464 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2202      	movs	r2, #2
 80093ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2202      	movs	r2, #2
 80093f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2202      	movs	r2, #2
 80093fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2202      	movs	r2, #2
 8009402:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <HAL_TIM_Encoder_Start+0xc4>
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2b04      	cmp	r3, #4
 8009410:	d008      	beq.n	8009424 <HAL_TIM_Encoder_Start+0xd4>
 8009412:	e00f      	b.n	8009434 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2201      	movs	r2, #1
 800941a:	2100      	movs	r1, #0
 800941c:	4618      	mov	r0, r3
 800941e:	f001 f88d 	bl	800a53c <TIM_CCxChannelCmd>
      break;
 8009422:	e016      	b.n	8009452 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2201      	movs	r2, #1
 800942a:	2104      	movs	r1, #4
 800942c:	4618      	mov	r0, r3
 800942e:	f001 f885 	bl	800a53c <TIM_CCxChannelCmd>
      break;
 8009432:	e00e      	b.n	8009452 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2201      	movs	r2, #1
 800943a:	2100      	movs	r1, #0
 800943c:	4618      	mov	r0, r3
 800943e:	f001 f87d 	bl	800a53c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2201      	movs	r2, #1
 8009448:	2104      	movs	r1, #4
 800944a:	4618      	mov	r0, r3
 800944c:	f001 f876 	bl	800a53c <TIM_CCxChannelCmd>
      break;
 8009450:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f042 0201 	orr.w	r2, r2, #1
 8009460:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	f003 0302 	and.w	r3, r3, #2
 800947e:	2b02      	cmp	r3, #2
 8009480:	d122      	bne.n	80094c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b02      	cmp	r3, #2
 800948e:	d11b      	bne.n	80094c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f06f 0202 	mvn.w	r2, #2
 8009498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	f003 0303 	and.w	r3, r3, #3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d003      	beq.n	80094b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 fb1d 	bl	8009aee <HAL_TIM_IC_CaptureCallback>
 80094b4:	e005      	b.n	80094c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fb0f 	bl	8009ada <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fb2a 	bl	8009b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f003 0304 	and.w	r3, r3, #4
 80094d2:	2b04      	cmp	r3, #4
 80094d4:	d122      	bne.n	800951c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b04      	cmp	r3, #4
 80094e2:	d11b      	bne.n	800951c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f06f 0204 	mvn.w	r2, #4
 80094ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2202      	movs	r2, #2
 80094f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 faf3 	bl	8009aee <HAL_TIM_IC_CaptureCallback>
 8009508:	e005      	b.n	8009516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fae5 	bl	8009ada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fb00 	bl	8009b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	f003 0308 	and.w	r3, r3, #8
 8009526:	2b08      	cmp	r3, #8
 8009528:	d122      	bne.n	8009570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	f003 0308 	and.w	r3, r3, #8
 8009534:	2b08      	cmp	r3, #8
 8009536:	d11b      	bne.n	8009570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f06f 0208 	mvn.w	r2, #8
 8009540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2204      	movs	r2, #4
 8009546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	f003 0303 	and.w	r3, r3, #3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d003      	beq.n	800955e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fac9 	bl	8009aee <HAL_TIM_IC_CaptureCallback>
 800955c:	e005      	b.n	800956a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fabb 	bl	8009ada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fad6 	bl	8009b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	f003 0310 	and.w	r3, r3, #16
 800957a:	2b10      	cmp	r3, #16
 800957c:	d122      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	f003 0310 	and.w	r3, r3, #16
 8009588:	2b10      	cmp	r3, #16
 800958a:	d11b      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f06f 0210 	mvn.w	r2, #16
 8009594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2208      	movs	r2, #8
 800959a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 fa9f 	bl	8009aee <HAL_TIM_IC_CaptureCallback>
 80095b0:	e005      	b.n	80095be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fa91 	bl	8009ada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 faac 	bl	8009b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d10e      	bne.n	80095f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	f003 0301 	and.w	r3, r3, #1
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d107      	bne.n	80095f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f06f 0201 	mvn.w	r2, #1
 80095e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fa6b 	bl	8009ac6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095fa:	2b80      	cmp	r3, #128	; 0x80
 80095fc:	d10e      	bne.n	800961c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009608:	2b80      	cmp	r3, #128	; 0x80
 800960a:	d107      	bne.n	800961c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f001 f88e 	bl	800a738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009626:	2b40      	cmp	r3, #64	; 0x40
 8009628:	d10e      	bne.n	8009648 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009634:	2b40      	cmp	r3, #64	; 0x40
 8009636:	d107      	bne.n	8009648 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fa71 	bl	8009b2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	f003 0320 	and.w	r3, r3, #32
 8009652:	2b20      	cmp	r3, #32
 8009654:	d10e      	bne.n	8009674 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f003 0320 	and.w	r3, r3, #32
 8009660:	2b20      	cmp	r3, #32
 8009662:	d107      	bne.n	8009674 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f06f 0220 	mvn.w	r2, #32
 800966c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f001 f858 	bl	800a724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009692:	2b01      	cmp	r3, #1
 8009694:	d101      	bne.n	800969a <HAL_TIM_IC_ConfigChannel+0x1e>
 8009696:	2302      	movs	r3, #2
 8009698:	e088      	b.n	80097ac <HAL_TIM_IC_ConfigChannel+0x130>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d11b      	bne.n	80096e0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	6819      	ldr	r1, [r3, #0]
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	685a      	ldr	r2, [r3, #4]
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	f000 fd7c 	bl	800a1b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	699a      	ldr	r2, [r3, #24]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f022 020c 	bic.w	r2, r2, #12
 80096ca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6999      	ldr	r1, [r3, #24]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	689a      	ldr	r2, [r3, #8]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	430a      	orrs	r2, r1
 80096dc:	619a      	str	r2, [r3, #24]
 80096de:	e060      	b.n	80097a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	d11c      	bne.n	8009720 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6818      	ldr	r0, [r3, #0]
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	6819      	ldr	r1, [r3, #0]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	f000 fe00 	bl	800a2fa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	699a      	ldr	r2, [r3, #24]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009708:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6999      	ldr	r1, [r3, #24]
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	021a      	lsls	r2, r3, #8
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	619a      	str	r2, [r3, #24]
 800971e:	e040      	b.n	80097a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b08      	cmp	r3, #8
 8009724:	d11b      	bne.n	800975e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6818      	ldr	r0, [r3, #0]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	6819      	ldr	r1, [r3, #0]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	f000 fe4d 	bl	800a3d4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	69da      	ldr	r2, [r3, #28]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f022 020c 	bic.w	r2, r2, #12
 8009748:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	69d9      	ldr	r1, [r3, #28]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	689a      	ldr	r2, [r3, #8]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	430a      	orrs	r2, r1
 800975a:	61da      	str	r2, [r3, #28]
 800975c:	e021      	b.n	80097a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b0c      	cmp	r3, #12
 8009762:	d11c      	bne.n	800979e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6818      	ldr	r0, [r3, #0]
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	6819      	ldr	r1, [r3, #0]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	f000 fe6a 	bl	800a44c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	69da      	ldr	r2, [r3, #28]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009786:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	69d9      	ldr	r1, [r3, #28]
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	021a      	lsls	r2, r3, #8
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	430a      	orrs	r2, r1
 800979a:	61da      	str	r2, [r3, #28]
 800979c:	e001      	b.n	80097a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d101      	bne.n	80097d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80097ce:	2302      	movs	r3, #2
 80097d0:	e0ae      	b.n	8009930 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b0c      	cmp	r3, #12
 80097de:	f200 809f 	bhi.w	8009920 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80097e2:	a201      	add	r2, pc, #4	; (adr r2, 80097e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80097e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e8:	0800981d 	.word	0x0800981d
 80097ec:	08009921 	.word	0x08009921
 80097f0:	08009921 	.word	0x08009921
 80097f4:	08009921 	.word	0x08009921
 80097f8:	0800985d 	.word	0x0800985d
 80097fc:	08009921 	.word	0x08009921
 8009800:	08009921 	.word	0x08009921
 8009804:	08009921 	.word	0x08009921
 8009808:	0800989f 	.word	0x0800989f
 800980c:	08009921 	.word	0x08009921
 8009810:	08009921 	.word	0x08009921
 8009814:	08009921 	.word	0x08009921
 8009818:	080098df 	.word	0x080098df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68b9      	ldr	r1, [r7, #8]
 8009822:	4618      	mov	r0, r3
 8009824:	f000 fb16 	bl	8009e54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	699a      	ldr	r2, [r3, #24]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f042 0208 	orr.w	r2, r2, #8
 8009836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	699a      	ldr	r2, [r3, #24]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f022 0204 	bic.w	r2, r2, #4
 8009846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6999      	ldr	r1, [r3, #24]
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	691a      	ldr	r2, [r3, #16]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	430a      	orrs	r2, r1
 8009858:	619a      	str	r2, [r3, #24]
      break;
 800985a:	e064      	b.n	8009926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	4618      	mov	r0, r3
 8009864:	f000 fb66 	bl	8009f34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	699a      	ldr	r2, [r3, #24]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	699a      	ldr	r2, [r3, #24]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6999      	ldr	r1, [r3, #24]
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	021a      	lsls	r2, r3, #8
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	430a      	orrs	r2, r1
 800989a:	619a      	str	r2, [r3, #24]
      break;
 800989c:	e043      	b.n	8009926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68b9      	ldr	r1, [r7, #8]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 fbbb 	bl	800a020 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	69da      	ldr	r2, [r3, #28]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f042 0208 	orr.w	r2, r2, #8
 80098b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	69da      	ldr	r2, [r3, #28]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 0204 	bic.w	r2, r2, #4
 80098c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	69d9      	ldr	r1, [r3, #28]
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	691a      	ldr	r2, [r3, #16]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	430a      	orrs	r2, r1
 80098da:	61da      	str	r2, [r3, #28]
      break;
 80098dc:	e023      	b.n	8009926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68b9      	ldr	r1, [r7, #8]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 fc0f 	bl	800a108 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	69da      	ldr	r2, [r3, #28]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69da      	ldr	r2, [r3, #28]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	69d9      	ldr	r1, [r3, #28]
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	021a      	lsls	r2, r3, #8
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	430a      	orrs	r2, r1
 800991c:	61da      	str	r2, [r3, #28]
      break;
 800991e:	e002      	b.n	8009926 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	75fb      	strb	r3, [r7, #23]
      break;
 8009924:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800992e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009942:	2300      	movs	r3, #0
 8009944:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800994c:	2b01      	cmp	r3, #1
 800994e:	d101      	bne.n	8009954 <HAL_TIM_ConfigClockSource+0x1c>
 8009950:	2302      	movs	r3, #2
 8009952:	e0b4      	b.n	8009abe <HAL_TIM_ConfigClockSource+0x186>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2202      	movs	r2, #2
 8009960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800997a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800998c:	d03e      	beq.n	8009a0c <HAL_TIM_ConfigClockSource+0xd4>
 800998e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009992:	f200 8087 	bhi.w	8009aa4 <HAL_TIM_ConfigClockSource+0x16c>
 8009996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800999a:	f000 8086 	beq.w	8009aaa <HAL_TIM_ConfigClockSource+0x172>
 800999e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099a2:	d87f      	bhi.n	8009aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80099a4:	2b70      	cmp	r3, #112	; 0x70
 80099a6:	d01a      	beq.n	80099de <HAL_TIM_ConfigClockSource+0xa6>
 80099a8:	2b70      	cmp	r3, #112	; 0x70
 80099aa:	d87b      	bhi.n	8009aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80099ac:	2b60      	cmp	r3, #96	; 0x60
 80099ae:	d050      	beq.n	8009a52 <HAL_TIM_ConfigClockSource+0x11a>
 80099b0:	2b60      	cmp	r3, #96	; 0x60
 80099b2:	d877      	bhi.n	8009aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80099b4:	2b50      	cmp	r3, #80	; 0x50
 80099b6:	d03c      	beq.n	8009a32 <HAL_TIM_ConfigClockSource+0xfa>
 80099b8:	2b50      	cmp	r3, #80	; 0x50
 80099ba:	d873      	bhi.n	8009aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80099bc:	2b40      	cmp	r3, #64	; 0x40
 80099be:	d058      	beq.n	8009a72 <HAL_TIM_ConfigClockSource+0x13a>
 80099c0:	2b40      	cmp	r3, #64	; 0x40
 80099c2:	d86f      	bhi.n	8009aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80099c4:	2b30      	cmp	r3, #48	; 0x30
 80099c6:	d064      	beq.n	8009a92 <HAL_TIM_ConfigClockSource+0x15a>
 80099c8:	2b30      	cmp	r3, #48	; 0x30
 80099ca:	d86b      	bhi.n	8009aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80099cc:	2b20      	cmp	r3, #32
 80099ce:	d060      	beq.n	8009a92 <HAL_TIM_ConfigClockSource+0x15a>
 80099d0:	2b20      	cmp	r3, #32
 80099d2:	d867      	bhi.n	8009aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d05c      	beq.n	8009a92 <HAL_TIM_ConfigClockSource+0x15a>
 80099d8:	2b10      	cmp	r3, #16
 80099da:	d05a      	beq.n	8009a92 <HAL_TIM_ConfigClockSource+0x15a>
 80099dc:	e062      	b.n	8009aa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6818      	ldr	r0, [r3, #0]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	6899      	ldr	r1, [r3, #8]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	685a      	ldr	r2, [r3, #4]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	f000 fd85 	bl	800a4fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	609a      	str	r2, [r3, #8]
      break;
 8009a0a:	e04f      	b.n	8009aac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6818      	ldr	r0, [r3, #0]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	6899      	ldr	r1, [r3, #8]
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	685a      	ldr	r2, [r3, #4]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	f000 fd6e 	bl	800a4fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	689a      	ldr	r2, [r3, #8]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a2e:	609a      	str	r2, [r3, #8]
      break;
 8009a30:	e03c      	b.n	8009aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6818      	ldr	r0, [r3, #0]
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	6859      	ldr	r1, [r3, #4]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	f000 fc2c 	bl	800a29c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2150      	movs	r1, #80	; 0x50
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 fd3b 	bl	800a4c6 <TIM_ITRx_SetConfig>
      break;
 8009a50:	e02c      	b.n	8009aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6818      	ldr	r0, [r3, #0]
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	6859      	ldr	r1, [r3, #4]
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f000 fc88 	bl	800a374 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2160      	movs	r1, #96	; 0x60
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 fd2b 	bl	800a4c6 <TIM_ITRx_SetConfig>
      break;
 8009a70:	e01c      	b.n	8009aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6818      	ldr	r0, [r3, #0]
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	6859      	ldr	r1, [r3, #4]
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f000 fc0c 	bl	800a29c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2140      	movs	r1, #64	; 0x40
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 fd1b 	bl	800a4c6 <TIM_ITRx_SetConfig>
      break;
 8009a90:	e00c      	b.n	8009aac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	f000 fd12 	bl	800a4c6 <TIM_ITRx_SetConfig>
      break;
 8009aa2:	e003      	b.n	8009aac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8009aa8:	e000      	b.n	8009aac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009aaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009ace:	bf00      	nop
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b083      	sub	sp, #12
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ae2:	bf00      	nop
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b083      	sub	sp, #12
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009af6:	bf00      	nop
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b02:	b480      	push	{r7}
 8009b04:	b083      	sub	sp, #12
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009b0a:	bf00      	nop
 8009b0c:	370c      	adds	r7, #12
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b083      	sub	sp, #12
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b1e:	bf00      	nop
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b083      	sub	sp, #12
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b32:	bf00      	nop
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b083      	sub	sp, #12
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009b46:	bf00      	nop
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b084      	sub	sp, #16
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d107      	bne.n	8009b7a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b78:	e02a      	b.n	8009bd0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d107      	bne.n	8009b94 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2202      	movs	r2, #2
 8009b88:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b92:	e01d      	b.n	8009bd0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d107      	bne.n	8009bae <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2204      	movs	r2, #4
 8009ba2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bac:	e010      	b.n	8009bd0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d107      	bne.n	8009bc8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2208      	movs	r2, #8
 8009bbc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bc6:	e003      	b.n	8009bd0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f7ff ffb4 	bl	8009b3e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	771a      	strb	r2, [r3, #28]
}
 8009bdc:	bf00      	nop
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d10f      	bne.n	8009c1c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	69db      	ldr	r3, [r3, #28]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d146      	bne.n	8009c98 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c1a:	e03d      	b.n	8009c98 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d10f      	bne.n	8009c46 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2202      	movs	r2, #2
 8009c2a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	69db      	ldr	r3, [r3, #28]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d131      	bne.n	8009c98 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c44:	e028      	b.n	8009c98 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d10f      	bne.n	8009c70 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2204      	movs	r2, #4
 8009c54:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d11c      	bne.n	8009c98 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c6e:	e013      	b.n	8009c98 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d10e      	bne.n	8009c98 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2208      	movs	r2, #8
 8009c7e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	69db      	ldr	r3, [r3, #28]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d107      	bne.n	8009c98 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f7ff ff28 	bl	8009aee <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	771a      	strb	r2, [r3, #28]
}
 8009ca4:	bf00      	nop
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d103      	bne.n	8009ccc <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	771a      	strb	r2, [r3, #28]
 8009cca:	e019      	b.n	8009d00 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d103      	bne.n	8009cde <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2202      	movs	r2, #2
 8009cda:	771a      	strb	r2, [r3, #28]
 8009cdc:	e010      	b.n	8009d00 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d103      	bne.n	8009cf0 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2204      	movs	r2, #4
 8009cec:	771a      	strb	r2, [r3, #28]
 8009cee:	e007      	b.n	8009d00 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d102      	bne.n	8009d00 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2208      	movs	r2, #8
 8009cfe:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f7ff fefe 	bl	8009b02 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	771a      	strb	r2, [r3, #28]
}
 8009d0c:	bf00      	nop
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a40      	ldr	r2, [pc, #256]	; (8009e28 <TIM_Base_SetConfig+0x114>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d013      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d32:	d00f      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a3d      	ldr	r2, [pc, #244]	; (8009e2c <TIM_Base_SetConfig+0x118>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d00b      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a3c      	ldr	r2, [pc, #240]	; (8009e30 <TIM_Base_SetConfig+0x11c>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d007      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a3b      	ldr	r2, [pc, #236]	; (8009e34 <TIM_Base_SetConfig+0x120>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d003      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a3a      	ldr	r2, [pc, #232]	; (8009e38 <TIM_Base_SetConfig+0x124>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d108      	bne.n	8009d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a2f      	ldr	r2, [pc, #188]	; (8009e28 <TIM_Base_SetConfig+0x114>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d02b      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d74:	d027      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a2c      	ldr	r2, [pc, #176]	; (8009e2c <TIM_Base_SetConfig+0x118>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d023      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a2b      	ldr	r2, [pc, #172]	; (8009e30 <TIM_Base_SetConfig+0x11c>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d01f      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a2a      	ldr	r2, [pc, #168]	; (8009e34 <TIM_Base_SetConfig+0x120>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d01b      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a29      	ldr	r2, [pc, #164]	; (8009e38 <TIM_Base_SetConfig+0x124>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d017      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a28      	ldr	r2, [pc, #160]	; (8009e3c <TIM_Base_SetConfig+0x128>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d013      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a27      	ldr	r2, [pc, #156]	; (8009e40 <TIM_Base_SetConfig+0x12c>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d00f      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a26      	ldr	r2, [pc, #152]	; (8009e44 <TIM_Base_SetConfig+0x130>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d00b      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a25      	ldr	r2, [pc, #148]	; (8009e48 <TIM_Base_SetConfig+0x134>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d007      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a24      	ldr	r2, [pc, #144]	; (8009e4c <TIM_Base_SetConfig+0x138>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d003      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a23      	ldr	r2, [pc, #140]	; (8009e50 <TIM_Base_SetConfig+0x13c>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d108      	bne.n	8009dd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	689a      	ldr	r2, [r3, #8]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a0a      	ldr	r2, [pc, #40]	; (8009e28 <TIM_Base_SetConfig+0x114>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d003      	beq.n	8009e0c <TIM_Base_SetConfig+0xf8>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a0c      	ldr	r2, [pc, #48]	; (8009e38 <TIM_Base_SetConfig+0x124>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d103      	bne.n	8009e14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	691a      	ldr	r2, [r3, #16]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	615a      	str	r2, [r3, #20]
}
 8009e1a:	bf00      	nop
 8009e1c:	3714      	adds	r7, #20
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	40010000 	.word	0x40010000
 8009e2c:	40000400 	.word	0x40000400
 8009e30:	40000800 	.word	0x40000800
 8009e34:	40000c00 	.word	0x40000c00
 8009e38:	40010400 	.word	0x40010400
 8009e3c:	40014000 	.word	0x40014000
 8009e40:	40014400 	.word	0x40014400
 8009e44:	40014800 	.word	0x40014800
 8009e48:	40001800 	.word	0x40001800
 8009e4c:	40001c00 	.word	0x40001c00
 8009e50:	40002000 	.word	0x40002000

08009e54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b087      	sub	sp, #28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	f023 0201 	bic.w	r2, r3, #1
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f023 0303 	bic.w	r3, r3, #3
 8009e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f023 0302 	bic.w	r3, r3, #2
 8009e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a20      	ldr	r2, [pc, #128]	; (8009f2c <TIM_OC1_SetConfig+0xd8>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d003      	beq.n	8009eb8 <TIM_OC1_SetConfig+0x64>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a1f      	ldr	r2, [pc, #124]	; (8009f30 <TIM_OC1_SetConfig+0xdc>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d10c      	bne.n	8009ed2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f023 0308 	bic.w	r3, r3, #8
 8009ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f023 0304 	bic.w	r3, r3, #4
 8009ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a15      	ldr	r2, [pc, #84]	; (8009f2c <TIM_OC1_SetConfig+0xd8>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d003      	beq.n	8009ee2 <TIM_OC1_SetConfig+0x8e>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a14      	ldr	r2, [pc, #80]	; (8009f30 <TIM_OC1_SetConfig+0xdc>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d111      	bne.n	8009f06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	697a      	ldr	r2, [r7, #20]
 8009f1e:	621a      	str	r2, [r3, #32]
}
 8009f20:	bf00      	nop
 8009f22:	371c      	adds	r7, #28
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	40010000 	.word	0x40010000
 8009f30:	40010400 	.word	0x40010400

08009f34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b087      	sub	sp, #28
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	f023 0210 	bic.w	r2, r3, #16
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	021b      	lsls	r3, r3, #8
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f023 0320 	bic.w	r3, r3, #32
 8009f7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	011b      	lsls	r3, r3, #4
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a22      	ldr	r2, [pc, #136]	; (800a018 <TIM_OC2_SetConfig+0xe4>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d003      	beq.n	8009f9c <TIM_OC2_SetConfig+0x68>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a21      	ldr	r2, [pc, #132]	; (800a01c <TIM_OC2_SetConfig+0xe8>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d10d      	bne.n	8009fb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	011b      	lsls	r3, r3, #4
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a17      	ldr	r2, [pc, #92]	; (800a018 <TIM_OC2_SetConfig+0xe4>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d003      	beq.n	8009fc8 <TIM_OC2_SetConfig+0x94>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a16      	ldr	r2, [pc, #88]	; (800a01c <TIM_OC2_SetConfig+0xe8>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d113      	bne.n	8009ff0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	693a      	ldr	r2, [r7, #16]
 8009ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	621a      	str	r2, [r3, #32]
}
 800a00a:	bf00      	nop
 800a00c:	371c      	adds	r7, #28
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	40010000 	.word	0x40010000
 800a01c:	40010400 	.word	0x40010400

0800a020 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a020:	b480      	push	{r7}
 800a022:	b087      	sub	sp, #28
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a04e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f023 0303 	bic.w	r3, r3, #3
 800a056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	4313      	orrs	r3, r2
 800a060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	021b      	lsls	r3, r3, #8
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	4313      	orrs	r3, r2
 800a074:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a21      	ldr	r2, [pc, #132]	; (800a100 <TIM_OC3_SetConfig+0xe0>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d003      	beq.n	800a086 <TIM_OC3_SetConfig+0x66>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a20      	ldr	r2, [pc, #128]	; (800a104 <TIM_OC3_SetConfig+0xe4>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d10d      	bne.n	800a0a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a08c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	021b      	lsls	r3, r3, #8
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	4313      	orrs	r3, r2
 800a098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a16      	ldr	r2, [pc, #88]	; (800a100 <TIM_OC3_SetConfig+0xe0>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d003      	beq.n	800a0b2 <TIM_OC3_SetConfig+0x92>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a15      	ldr	r2, [pc, #84]	; (800a104 <TIM_OC3_SetConfig+0xe4>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d113      	bne.n	800a0da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	695b      	ldr	r3, [r3, #20]
 800a0c6:	011b      	lsls	r3, r3, #4
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	011b      	lsls	r3, r3, #4
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	621a      	str	r2, [r3, #32]
}
 800a0f4:	bf00      	nop
 800a0f6:	371c      	adds	r7, #28
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	40010000 	.word	0x40010000
 800a104:	40010400 	.word	0x40010400

0800a108 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a108:	b480      	push	{r7}
 800a10a:	b087      	sub	sp, #28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a1b      	ldr	r3, [r3, #32]
 800a122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	69db      	ldr	r3, [r3, #28]
 800a12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a13e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	021b      	lsls	r3, r3, #8
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	4313      	orrs	r3, r2
 800a14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a152:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	031b      	lsls	r3, r3, #12
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a12      	ldr	r2, [pc, #72]	; (800a1ac <TIM_OC4_SetConfig+0xa4>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d003      	beq.n	800a170 <TIM_OC4_SetConfig+0x68>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a11      	ldr	r2, [pc, #68]	; (800a1b0 <TIM_OC4_SetConfig+0xa8>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d109      	bne.n	800a184 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a176:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	019b      	lsls	r3, r3, #6
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	4313      	orrs	r3, r2
 800a182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	685a      	ldr	r2, [r3, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	621a      	str	r2, [r3, #32]
}
 800a19e:	bf00      	nop
 800a1a0:	371c      	adds	r7, #28
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	40010000 	.word	0x40010000
 800a1b0:	40010400 	.word	0x40010400

0800a1b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b087      	sub	sp, #28
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
 800a1c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	f023 0201 	bic.w	r2, r3, #1
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6a1b      	ldr	r3, [r3, #32]
 800a1d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	4a28      	ldr	r2, [pc, #160]	; (800a280 <TIM_TI1_SetConfig+0xcc>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d01b      	beq.n	800a21a <TIM_TI1_SetConfig+0x66>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1e8:	d017      	beq.n	800a21a <TIM_TI1_SetConfig+0x66>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	4a25      	ldr	r2, [pc, #148]	; (800a284 <TIM_TI1_SetConfig+0xd0>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d013      	beq.n	800a21a <TIM_TI1_SetConfig+0x66>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	4a24      	ldr	r2, [pc, #144]	; (800a288 <TIM_TI1_SetConfig+0xd4>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d00f      	beq.n	800a21a <TIM_TI1_SetConfig+0x66>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	4a23      	ldr	r2, [pc, #140]	; (800a28c <TIM_TI1_SetConfig+0xd8>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d00b      	beq.n	800a21a <TIM_TI1_SetConfig+0x66>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	4a22      	ldr	r2, [pc, #136]	; (800a290 <TIM_TI1_SetConfig+0xdc>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d007      	beq.n	800a21a <TIM_TI1_SetConfig+0x66>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	4a21      	ldr	r2, [pc, #132]	; (800a294 <TIM_TI1_SetConfig+0xe0>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d003      	beq.n	800a21a <TIM_TI1_SetConfig+0x66>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	4a20      	ldr	r2, [pc, #128]	; (800a298 <TIM_TI1_SetConfig+0xe4>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d101      	bne.n	800a21e <TIM_TI1_SetConfig+0x6a>
 800a21a:	2301      	movs	r3, #1
 800a21c:	e000      	b.n	800a220 <TIM_TI1_SetConfig+0x6c>
 800a21e:	2300      	movs	r3, #0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d008      	beq.n	800a236 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	f023 0303 	bic.w	r3, r3, #3
 800a22a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a22c:	697a      	ldr	r2, [r7, #20]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4313      	orrs	r3, r2
 800a232:	617b      	str	r3, [r7, #20]
 800a234:	e003      	b.n	800a23e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f043 0301 	orr.w	r3, r3, #1
 800a23c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a244:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	011b      	lsls	r3, r3, #4
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	4313      	orrs	r3, r2
 800a250:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f023 030a 	bic.w	r3, r3, #10
 800a258:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	f003 030a 	and.w	r3, r3, #10
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	4313      	orrs	r3, r2
 800a264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	621a      	str	r2, [r3, #32]
}
 800a272:	bf00      	nop
 800a274:	371c      	adds	r7, #28
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	40010000 	.word	0x40010000
 800a284:	40000400 	.word	0x40000400
 800a288:	40000800 	.word	0x40000800
 800a28c:	40000c00 	.word	0x40000c00
 800a290:	40010400 	.word	0x40010400
 800a294:	40014000 	.word	0x40014000
 800a298:	40001800 	.word	0x40001800

0800a29c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b087      	sub	sp, #28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6a1b      	ldr	r3, [r3, #32]
 800a2ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6a1b      	ldr	r3, [r3, #32]
 800a2b2:	f023 0201 	bic.w	r2, r3, #1
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	011b      	lsls	r3, r3, #4
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f023 030a 	bic.w	r3, r3, #10
 800a2d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	693a      	ldr	r2, [r7, #16]
 800a2e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	697a      	ldr	r2, [r7, #20]
 800a2ec:	621a      	str	r2, [r3, #32]
}
 800a2ee:	bf00      	nop
 800a2f0:	371c      	adds	r7, #28
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b087      	sub	sp, #28
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	60f8      	str	r0, [r7, #12]
 800a302:	60b9      	str	r1, [r7, #8]
 800a304:	607a      	str	r2, [r7, #4]
 800a306:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	f023 0210 	bic.w	r2, r3, #16
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a326:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	021b      	lsls	r3, r3, #8
 800a32c:	697a      	ldr	r2, [r7, #20]
 800a32e:	4313      	orrs	r3, r2
 800a330:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a338:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	031b      	lsls	r3, r3, #12
 800a33e:	b29b      	uxth	r3, r3
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	4313      	orrs	r3, r2
 800a344:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a34c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	011b      	lsls	r3, r3, #4
 800a352:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	4313      	orrs	r3, r2
 800a35a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	621a      	str	r2, [r3, #32]
}
 800a368:	bf00      	nop
 800a36a:	371c      	adds	r7, #28
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a374:	b480      	push	{r7}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6a1b      	ldr	r3, [r3, #32]
 800a384:	f023 0210 	bic.w	r2, r3, #16
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a39e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	031b      	lsls	r3, r3, #12
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	011b      	lsls	r3, r3, #4
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	621a      	str	r2, [r3, #32]
}
 800a3c8:	bf00      	nop
 800a3ca:	371c      	adds	r7, #28
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
 800a3e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	69db      	ldr	r3, [r3, #28]
 800a3f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6a1b      	ldr	r3, [r3, #32]
 800a3f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	f023 0303 	bic.w	r3, r3, #3
 800a400:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4313      	orrs	r3, r2
 800a408:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a410:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	011b      	lsls	r3, r3, #4
 800a416:	b2db      	uxtb	r3, r3
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a424:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	021b      	lsls	r3, r3, #8
 800a42a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a42e:	693a      	ldr	r2, [r7, #16]
 800a430:	4313      	orrs	r3, r2
 800a432:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	693a      	ldr	r2, [r7, #16]
 800a43e:	621a      	str	r2, [r3, #32]
}
 800a440:	bf00      	nop
 800a442:	371c      	adds	r7, #28
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b087      	sub	sp, #28
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
 800a458:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	69db      	ldr	r3, [r3, #28]
 800a46a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6a1b      	ldr	r3, [r3, #32]
 800a470:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a478:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	021b      	lsls	r3, r3, #8
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	4313      	orrs	r3, r2
 800a482:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a48a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	031b      	lsls	r3, r3, #12
 800a490:	b29b      	uxth	r3, r3
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	4313      	orrs	r3, r2
 800a496:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a49e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	031b      	lsls	r3, r3, #12
 800a4a4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a4a8:	693a      	ldr	r2, [r7, #16]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	621a      	str	r2, [r3, #32]
}
 800a4ba:	bf00      	nop
 800a4bc:	371c      	adds	r7, #28
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b085      	sub	sp, #20
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	f043 0307 	orr.w	r3, r3, #7
 800a4e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	609a      	str	r2, [r3, #8]
}
 800a4f0:	bf00      	nop
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b087      	sub	sp, #28
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	021a      	lsls	r2, r3, #8
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	431a      	orrs	r2, r3
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	4313      	orrs	r3, r2
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	4313      	orrs	r3, r2
 800a528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	609a      	str	r2, [r3, #8]
}
 800a530:	bf00      	nop
 800a532:	371c      	adds	r7, #28
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b087      	sub	sp, #28
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	f003 031f 	and.w	r3, r3, #31
 800a54e:	2201      	movs	r2, #1
 800a550:	fa02 f303 	lsl.w	r3, r2, r3
 800a554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6a1a      	ldr	r2, [r3, #32]
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	43db      	mvns	r3, r3
 800a55e:	401a      	ands	r2, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6a1a      	ldr	r2, [r3, #32]
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	f003 031f 	and.w	r3, r3, #31
 800a56e:	6879      	ldr	r1, [r7, #4]
 800a570:	fa01 f303 	lsl.w	r3, r1, r3
 800a574:	431a      	orrs	r2, r3
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	621a      	str	r2, [r3, #32]
}
 800a57a:	bf00      	nop
 800a57c:	371c      	adds	r7, #28
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
	...

0800a588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d101      	bne.n	800a5a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a59c:	2302      	movs	r3, #2
 800a59e:	e05a      	b.n	800a656 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a21      	ldr	r2, [pc, #132]	; (800a664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d022      	beq.n	800a62a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5ec:	d01d      	beq.n	800a62a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a1d      	ldr	r2, [pc, #116]	; (800a668 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d018      	beq.n	800a62a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a1b      	ldr	r2, [pc, #108]	; (800a66c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d013      	beq.n	800a62a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a1a      	ldr	r2, [pc, #104]	; (800a670 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d00e      	beq.n	800a62a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a18      	ldr	r2, [pc, #96]	; (800a674 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d009      	beq.n	800a62a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a17      	ldr	r2, [pc, #92]	; (800a678 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d004      	beq.n	800a62a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a15      	ldr	r2, [pc, #84]	; (800a67c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d10c      	bne.n	800a644 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	4313      	orrs	r3, r2
 800a63a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3714      	adds	r7, #20
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	40010000 	.word	0x40010000
 800a668:	40000400 	.word	0x40000400
 800a66c:	40000800 	.word	0x40000800
 800a670:	40000c00 	.word	0x40000c00
 800a674:	40010400 	.word	0x40010400
 800a678:	40014000 	.word	0x40014000
 800a67c:	40001800 	.word	0x40001800

0800a680 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a68a:	2300      	movs	r3, #0
 800a68c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a694:	2b01      	cmp	r3, #1
 800a696:	d101      	bne.n	800a69c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a698:	2302      	movs	r3, #2
 800a69a:	e03d      	b.n	800a718 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	695b      	ldr	r3, [r3, #20]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	4313      	orrs	r3, r2
 800a704:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d101      	bne.n	800a75e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	e03f      	b.n	800a7de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	d106      	bne.n	800a778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7fb f95c 	bl	8005a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2224      	movs	r2, #36	; 0x24
 800a77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68da      	ldr	r2, [r3, #12]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a78e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fe81 	bl	800b498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	691a      	ldr	r2, [r3, #16]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	695a      	ldr	r2, [r3, #20]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68da      	ldr	r2, [r3, #12]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a7c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3708      	adds	r7, #8
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b08a      	sub	sp, #40	; 0x28
 800a7ea:	af02      	add	r7, sp, #8
 800a7ec:	60f8      	str	r0, [r7, #12]
 800a7ee:	60b9      	str	r1, [r7, #8]
 800a7f0:	603b      	str	r3, [r7, #0]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a800:	b2db      	uxtb	r3, r3
 800a802:	2b20      	cmp	r3, #32
 800a804:	d17c      	bne.n	800a900 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d002      	beq.n	800a812 <HAL_UART_Transmit+0x2c>
 800a80c:	88fb      	ldrh	r3, [r7, #6]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d101      	bne.n	800a816 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a812:	2301      	movs	r3, #1
 800a814:	e075      	b.n	800a902 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d101      	bne.n	800a824 <HAL_UART_Transmit+0x3e>
 800a820:	2302      	movs	r3, #2
 800a822:	e06e      	b.n	800a902 <HAL_UART_Transmit+0x11c>
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2221      	movs	r2, #33	; 0x21
 800a836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a83a:	f7fb fbdb 	bl	8005ff4 <HAL_GetTick>
 800a83e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	88fa      	ldrh	r2, [r7, #6]
 800a844:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	88fa      	ldrh	r2, [r7, #6]
 800a84a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a854:	d108      	bne.n	800a868 <HAL_UART_Transmit+0x82>
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d104      	bne.n	800a868 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a85e:	2300      	movs	r3, #0
 800a860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	61bb      	str	r3, [r7, #24]
 800a866:	e003      	b.n	800a870 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a86c:	2300      	movs	r3, #0
 800a86e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a878:	e02a      	b.n	800a8d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	2200      	movs	r2, #0
 800a882:	2180      	movs	r1, #128	; 0x80
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f000 fbc1 	bl	800b00c <UART_WaitOnFlagUntilTimeout>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a890:	2303      	movs	r3, #3
 800a892:	e036      	b.n	800a902 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10b      	bne.n	800a8b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	881b      	ldrh	r3, [r3, #0]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	3302      	adds	r3, #2
 800a8ae:	61bb      	str	r3, [r7, #24]
 800a8b0:	e007      	b.n	800a8c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	781a      	ldrb	r2, [r3, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1cf      	bne.n	800a87a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	2140      	movs	r1, #64	; 0x40
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f000 fb91 	bl	800b00c <UART_WaitOnFlagUntilTimeout>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d001      	beq.n	800a8f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	e006      	b.n	800a902 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2220      	movs	r2, #32
 800a8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	e000      	b.n	800a902 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a900:	2302      	movs	r3, #2
  }
}
 800a902:	4618      	mov	r0, r3
 800a904:	3720      	adds	r7, #32
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b08a      	sub	sp, #40	; 0x28
 800a90e:	af02      	add	r7, sp, #8
 800a910:	60f8      	str	r0, [r7, #12]
 800a912:	60b9      	str	r1, [r7, #8]
 800a914:	603b      	str	r3, [r7, #0]
 800a916:	4613      	mov	r3, r2
 800a918:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a91a:	2300      	movs	r3, #0
 800a91c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a924:	b2db      	uxtb	r3, r3
 800a926:	2b20      	cmp	r3, #32
 800a928:	f040 808c 	bne.w	800aa44 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d002      	beq.n	800a938 <HAL_UART_Receive+0x2e>
 800a932:	88fb      	ldrh	r3, [r7, #6]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d101      	bne.n	800a93c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	e084      	b.n	800aa46 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a942:	2b01      	cmp	r3, #1
 800a944:	d101      	bne.n	800a94a <HAL_UART_Receive+0x40>
 800a946:	2302      	movs	r3, #2
 800a948:	e07d      	b.n	800aa46 <HAL_UART_Receive+0x13c>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2222      	movs	r2, #34	; 0x22
 800a95c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a966:	f7fb fb45 	bl	8005ff4 <HAL_GetTick>
 800a96a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	88fa      	ldrh	r2, [r7, #6]
 800a970:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	88fa      	ldrh	r2, [r7, #6]
 800a976:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a980:	d108      	bne.n	800a994 <HAL_UART_Receive+0x8a>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d104      	bne.n	800a994 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a98a:	2300      	movs	r3, #0
 800a98c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	61bb      	str	r3, [r7, #24]
 800a992:	e003      	b.n	800a99c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a998:	2300      	movs	r3, #0
 800a99a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a9a4:	e043      	b.n	800aa2e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	2120      	movs	r1, #32
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f000 fb2b 	bl	800b00c <UART_WaitOnFlagUntilTimeout>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d001      	beq.n	800a9c0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a9bc:	2303      	movs	r3, #3
 800a9be:	e042      	b.n	800aa46 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10c      	bne.n	800a9e0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	3302      	adds	r3, #2
 800a9dc:	61bb      	str	r3, [r7, #24]
 800a9de:	e01f      	b.n	800aa20 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9e8:	d007      	beq.n	800a9fa <HAL_UART_Receive+0xf0>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d10a      	bne.n	800aa08 <HAL_UART_Receive+0xfe>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d106      	bne.n	800aa08 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	701a      	strb	r2, [r3, #0]
 800aa06:	e008      	b.n	800aa1a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa14:	b2da      	uxtb	r2, r3
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	3b01      	subs	r3, #1
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1b6      	bne.n	800a9a6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2220      	movs	r2, #32
 800aa3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	e000      	b.n	800aa46 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800aa44:	2302      	movs	r3, #2
  }
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3720      	adds	r7, #32
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b084      	sub	sp, #16
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	60f8      	str	r0, [r7, #12]
 800aa56:	60b9      	str	r1, [r7, #8]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b20      	cmp	r3, #32
 800aa66:	d11d      	bne.n	800aaa4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d002      	beq.n	800aa74 <HAL_UART_Receive_IT+0x26>
 800aa6e:	88fb      	ldrh	r3, [r7, #6]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e016      	b.n	800aaa6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d101      	bne.n	800aa86 <HAL_UART_Receive_IT+0x38>
 800aa82:	2302      	movs	r3, #2
 800aa84:	e00f      	b.n	800aaa6 <HAL_UART_Receive_IT+0x58>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2200      	movs	r2, #0
 800aa92:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800aa94:	88fb      	ldrh	r3, [r7, #6]
 800aa96:	461a      	mov	r2, r3
 800aa98:	68b9      	ldr	r1, [r7, #8]
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f000 fb24 	bl	800b0e8 <UART_Start_Receive_IT>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	e000      	b.n	800aaa6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800aaa4:	2302      	movs	r3, #2
  }
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
	...

0800aab0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b0ba      	sub	sp, #232	; 0xe8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	695b      	ldr	r3, [r3, #20]
 800aad2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800aad6:	2300      	movs	r3, #0
 800aad8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800aadc:	2300      	movs	r3, #0
 800aade:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800aae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aae6:	f003 030f 	and.w	r3, r3, #15
 800aaea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800aaee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10f      	bne.n	800ab16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aaf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aafa:	f003 0320 	and.w	r3, r3, #32
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d009      	beq.n	800ab16 <HAL_UART_IRQHandler+0x66>
 800ab02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab06:	f003 0320 	and.w	r3, r3, #32
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d003      	beq.n	800ab16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 fc07 	bl	800b322 <UART_Receive_IT>
      return;
 800ab14:	e256      	b.n	800afc4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ab16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f000 80de 	beq.w	800acdc <HAL_UART_IRQHandler+0x22c>
 800ab20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab24:	f003 0301 	and.w	r3, r3, #1
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d106      	bne.n	800ab3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ab2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f000 80d1 	beq.w	800acdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ab3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00b      	beq.n	800ab5e <HAL_UART_IRQHandler+0xae>
 800ab46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d005      	beq.n	800ab5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab56:	f043 0201 	orr.w	r2, r3, #1
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab62:	f003 0304 	and.w	r3, r3, #4
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00b      	beq.n	800ab82 <HAL_UART_IRQHandler+0xd2>
 800ab6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab6e:	f003 0301 	and.w	r3, r3, #1
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d005      	beq.n	800ab82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7a:	f043 0202 	orr.w	r2, r3, #2
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab86:	f003 0302 	and.w	r3, r3, #2
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00b      	beq.n	800aba6 <HAL_UART_IRQHandler+0xf6>
 800ab8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab92:	f003 0301 	and.w	r3, r3, #1
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d005      	beq.n	800aba6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9e:	f043 0204 	orr.w	r2, r3, #4
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abaa:	f003 0308 	and.w	r3, r3, #8
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d011      	beq.n	800abd6 <HAL_UART_IRQHandler+0x126>
 800abb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abb6:	f003 0320 	and.w	r3, r3, #32
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d105      	bne.n	800abca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800abbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d005      	beq.n	800abd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abce:	f043 0208 	orr.w	r2, r3, #8
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 81ed 	beq.w	800afba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800abe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abe4:	f003 0320 	and.w	r3, r3, #32
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d008      	beq.n	800abfe <HAL_UART_IRQHandler+0x14e>
 800abec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abf0:	f003 0320 	and.w	r3, r3, #32
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d002      	beq.n	800abfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fb92 	bl	800b322 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	695b      	ldr	r3, [r3, #20]
 800ac04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac08:	2b40      	cmp	r3, #64	; 0x40
 800ac0a:	bf0c      	ite	eq
 800ac0c:	2301      	moveq	r3, #1
 800ac0e:	2300      	movne	r3, #0
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1a:	f003 0308 	and.w	r3, r3, #8
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d103      	bne.n	800ac2a <HAL_UART_IRQHandler+0x17a>
 800ac22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d04f      	beq.n	800acca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fa9a 	bl	800b164 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac3a:	2b40      	cmp	r3, #64	; 0x40
 800ac3c:	d141      	bne.n	800acc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	3314      	adds	r3, #20
 800ac44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ac4c:	e853 3f00 	ldrex	r3, [r3]
 800ac50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ac54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3314      	adds	r3, #20
 800ac66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ac6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ac6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ac76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ac7a:	e841 2300 	strex	r3, r2, [r1]
 800ac7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ac82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1d9      	bne.n	800ac3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d013      	beq.n	800acba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac96:	4a7d      	ldr	r2, [pc, #500]	; (800ae8c <HAL_UART_IRQHandler+0x3dc>)
 800ac98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fc fa08 	bl	80070b4 <HAL_DMA_Abort_IT>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d016      	beq.n	800acd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800acb4:	4610      	mov	r0, r2
 800acb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acb8:	e00e      	b.n	800acd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 f990 	bl	800afe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acc0:	e00a      	b.n	800acd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f98c 	bl	800afe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acc8:	e006      	b.n	800acd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f988 	bl	800afe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800acd6:	e170      	b.n	800afba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acd8:	bf00      	nop
    return;
 800acda:	e16e      	b.n	800afba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	f040 814a 	bne.w	800af7a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ace6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acea:	f003 0310 	and.w	r3, r3, #16
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 8143 	beq.w	800af7a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800acf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acf8:	f003 0310 	and.w	r3, r3, #16
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f000 813c 	beq.w	800af7a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad02:	2300      	movs	r3, #0
 800ad04:	60bb      	str	r3, [r7, #8]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	60bb      	str	r3, [r7, #8]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	60bb      	str	r3, [r7, #8]
 800ad16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad22:	2b40      	cmp	r3, #64	; 0x40
 800ad24:	f040 80b4 	bne.w	800ae90 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ad34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f000 8140 	beq.w	800afbe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ad46:	429a      	cmp	r2, r3
 800ad48:	f080 8139 	bcs.w	800afbe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ad52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad58:	69db      	ldr	r3, [r3, #28]
 800ad5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad5e:	f000 8088 	beq.w	800ae72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	330c      	adds	r3, #12
 800ad68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad70:	e853 3f00 	ldrex	r3, [r3]
 800ad74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ad78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	330c      	adds	r3, #12
 800ad8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ad8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ad92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ad9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ad9e:	e841 2300 	strex	r3, r2, [r1]
 800ada2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ada6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1d9      	bne.n	800ad62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	3314      	adds	r3, #20
 800adb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adb8:	e853 3f00 	ldrex	r3, [r3]
 800adbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800adbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800adc0:	f023 0301 	bic.w	r3, r3, #1
 800adc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	3314      	adds	r3, #20
 800adce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800add2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800add6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800adda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800adde:	e841 2300 	strex	r3, r2, [r1]
 800ade2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ade4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1e1      	bne.n	800adae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	3314      	adds	r3, #20
 800adf0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adf4:	e853 3f00 	ldrex	r3, [r3]
 800adf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800adfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	3314      	adds	r3, #20
 800ae0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ae0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ae10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ae14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ae16:	e841 2300 	strex	r3, r2, [r1]
 800ae1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ae1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1e3      	bne.n	800adea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2220      	movs	r2, #32
 800ae26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	330c      	adds	r3, #12
 800ae36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae3a:	e853 3f00 	ldrex	r3, [r3]
 800ae3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ae40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae42:	f023 0310 	bic.w	r3, r3, #16
 800ae46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	330c      	adds	r3, #12
 800ae50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ae54:	65ba      	str	r2, [r7, #88]	; 0x58
 800ae56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae5c:	e841 2300 	strex	r3, r2, [r1]
 800ae60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ae62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1e3      	bne.n	800ae30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fc f8b1 	bl	8006fd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	4619      	mov	r1, r3
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f8b6 	bl	800aff4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ae88:	e099      	b.n	800afbe <HAL_UART_IRQHandler+0x50e>
 800ae8a:	bf00      	nop
 800ae8c:	0800b22b 	.word	0x0800b22b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	1ad3      	subs	r3, r2, r3
 800ae9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 808b 	beq.w	800afc2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800aeac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 8086 	beq.w	800afc2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	330c      	adds	r3, #12
 800aebc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec0:	e853 3f00 	ldrex	r3, [r3]
 800aec4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aecc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	330c      	adds	r3, #12
 800aed6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aeda:	647a      	str	r2, [r7, #68]	; 0x44
 800aedc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aede:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aee0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aee2:	e841 2300 	strex	r3, r2, [r1]
 800aee6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d1e3      	bne.n	800aeb6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	3314      	adds	r3, #20
 800aef4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef8:	e853 3f00 	ldrex	r3, [r3]
 800aefc:	623b      	str	r3, [r7, #32]
   return(result);
 800aefe:	6a3b      	ldr	r3, [r7, #32]
 800af00:	f023 0301 	bic.w	r3, r3, #1
 800af04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	3314      	adds	r3, #20
 800af0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800af12:	633a      	str	r2, [r7, #48]	; 0x30
 800af14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af1a:	e841 2300 	strex	r3, r2, [r1]
 800af1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1e3      	bne.n	800aeee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2220      	movs	r2, #32
 800af2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	330c      	adds	r3, #12
 800af3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	e853 3f00 	ldrex	r3, [r3]
 800af42:	60fb      	str	r3, [r7, #12]
   return(result);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f023 0310 	bic.w	r3, r3, #16
 800af4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	330c      	adds	r3, #12
 800af54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800af58:	61fa      	str	r2, [r7, #28]
 800af5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5c:	69b9      	ldr	r1, [r7, #24]
 800af5e:	69fa      	ldr	r2, [r7, #28]
 800af60:	e841 2300 	strex	r3, r2, [r1]
 800af64:	617b      	str	r3, [r7, #20]
   return(result);
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1e3      	bne.n	800af34 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af70:	4619      	mov	r1, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f83e 	bl	800aff4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800af78:	e023      	b.n	800afc2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800af7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af82:	2b00      	cmp	r3, #0
 800af84:	d009      	beq.n	800af9a <HAL_UART_IRQHandler+0x4ea>
 800af86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d003      	beq.n	800af9a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 f95d 	bl	800b252 <UART_Transmit_IT>
    return;
 800af98:	e014      	b.n	800afc4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800af9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00e      	beq.n	800afc4 <HAL_UART_IRQHandler+0x514>
 800afa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d008      	beq.n	800afc4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f99d 	bl	800b2f2 <UART_EndTransmit_IT>
    return;
 800afb8:	e004      	b.n	800afc4 <HAL_UART_IRQHandler+0x514>
    return;
 800afba:	bf00      	nop
 800afbc:	e002      	b.n	800afc4 <HAL_UART_IRQHandler+0x514>
      return;
 800afbe:	bf00      	nop
 800afc0:	e000      	b.n	800afc4 <HAL_UART_IRQHandler+0x514>
      return;
 800afc2:	bf00      	nop
  }
}
 800afc4:	37e8      	adds	r7, #232	; 0xe8
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop

0800afcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800afe8:	bf00      	nop
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	460b      	mov	r3, r1
 800affe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b090      	sub	sp, #64	; 0x40
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	603b      	str	r3, [r7, #0]
 800b018:	4613      	mov	r3, r2
 800b01a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b01c:	e050      	b.n	800b0c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b01e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b024:	d04c      	beq.n	800b0c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d007      	beq.n	800b03c <UART_WaitOnFlagUntilTimeout+0x30>
 800b02c:	f7fa ffe2 	bl	8005ff4 <HAL_GetTick>
 800b030:	4602      	mov	r2, r0
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	1ad3      	subs	r3, r2, r3
 800b036:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b038:	429a      	cmp	r2, r3
 800b03a:	d241      	bcs.n	800b0c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	330c      	adds	r3, #12
 800b042:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b046:	e853 3f00 	ldrex	r3, [r3]
 800b04a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b052:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	330c      	adds	r3, #12
 800b05a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b05c:	637a      	str	r2, [r7, #52]	; 0x34
 800b05e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b060:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b064:	e841 2300 	strex	r3, r2, [r1]
 800b068:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d1e5      	bne.n	800b03c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3314      	adds	r3, #20
 800b076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	e853 3f00 	ldrex	r3, [r3]
 800b07e:	613b      	str	r3, [r7, #16]
   return(result);
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	f023 0301 	bic.w	r3, r3, #1
 800b086:	63bb      	str	r3, [r7, #56]	; 0x38
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	3314      	adds	r3, #20
 800b08e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b090:	623a      	str	r2, [r7, #32]
 800b092:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b094:	69f9      	ldr	r1, [r7, #28]
 800b096:	6a3a      	ldr	r2, [r7, #32]
 800b098:	e841 2300 	strex	r3, r2, [r1]
 800b09c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1e5      	bne.n	800b070 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2220      	movs	r2, #32
 800b0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2220      	movs	r2, #32
 800b0b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	e00f      	b.n	800b0e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	bf0c      	ite	eq
 800b0d0:	2301      	moveq	r3, #1
 800b0d2:	2300      	movne	r3, #0
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	79fb      	ldrb	r3, [r7, #7]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d09f      	beq.n	800b01e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3740      	adds	r7, #64	; 0x40
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	88fa      	ldrh	r2, [r7, #6]
 800b100:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	88fa      	ldrh	r2, [r7, #6]
 800b106:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2200      	movs	r2, #0
 800b10c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2222      	movs	r2, #34	; 0x22
 800b112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d007      	beq.n	800b136 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68da      	ldr	r2, [r3, #12]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b134:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	695a      	ldr	r2, [r3, #20]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f042 0201 	orr.w	r2, r2, #1
 800b144:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68da      	ldr	r2, [r3, #12]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f042 0220 	orr.w	r2, r2, #32
 800b154:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b164:	b480      	push	{r7}
 800b166:	b095      	sub	sp, #84	; 0x54
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	330c      	adds	r3, #12
 800b172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b176:	e853 3f00 	ldrex	r3, [r3]
 800b17a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b182:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	330c      	adds	r3, #12
 800b18a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b18c:	643a      	str	r2, [r7, #64]	; 0x40
 800b18e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b194:	e841 2300 	strex	r3, r2, [r1]
 800b198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1e5      	bne.n	800b16c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3314      	adds	r3, #20
 800b1a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	e853 3f00 	ldrex	r3, [r3]
 800b1ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	f023 0301 	bic.w	r3, r3, #1
 800b1b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3314      	adds	r3, #20
 800b1be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1c8:	e841 2300 	strex	r3, r2, [r1]
 800b1cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1e5      	bne.n	800b1a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d119      	bne.n	800b210 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	330c      	adds	r3, #12
 800b1e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	e853 3f00 	ldrex	r3, [r3]
 800b1ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	f023 0310 	bic.w	r3, r3, #16
 800b1f2:	647b      	str	r3, [r7, #68]	; 0x44
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	330c      	adds	r3, #12
 800b1fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1fc:	61ba      	str	r2, [r7, #24]
 800b1fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b200:	6979      	ldr	r1, [r7, #20]
 800b202:	69ba      	ldr	r2, [r7, #24]
 800b204:	e841 2300 	strex	r3, r2, [r1]
 800b208:	613b      	str	r3, [r7, #16]
   return(result);
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1e5      	bne.n	800b1dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2220      	movs	r2, #32
 800b214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b21e:	bf00      	nop
 800b220:	3754      	adds	r7, #84	; 0x54
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b084      	sub	sp, #16
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b236:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f7ff fecb 	bl	800afe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b24a:	bf00      	nop
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b252:	b480      	push	{r7}
 800b254:	b085      	sub	sp, #20
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b21      	cmp	r3, #33	; 0x21
 800b264:	d13e      	bne.n	800b2e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b26e:	d114      	bne.n	800b29a <UART_Transmit_IT+0x48>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d110      	bne.n	800b29a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6a1b      	ldr	r3, [r3, #32]
 800b27c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	881b      	ldrh	r3, [r3, #0]
 800b282:	461a      	mov	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b28c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a1b      	ldr	r3, [r3, #32]
 800b292:	1c9a      	adds	r2, r3, #2
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	621a      	str	r2, [r3, #32]
 800b298:	e008      	b.n	800b2ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	1c59      	adds	r1, r3, #1
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	6211      	str	r1, [r2, #32]
 800b2a4:	781a      	ldrb	r2, [r3, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10f      	bne.n	800b2e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	68da      	ldr	r2, [r3, #12]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68da      	ldr	r2, [r3, #12]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	e000      	b.n	800b2e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b2e4:	2302      	movs	r3, #2
  }
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b082      	sub	sp, #8
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68da      	ldr	r2, [r3, #12]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b308:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2220      	movs	r2, #32
 800b30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f7ff fe5a 	bl	800afcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b08c      	sub	sp, #48	; 0x30
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b330:	b2db      	uxtb	r3, r3
 800b332:	2b22      	cmp	r3, #34	; 0x22
 800b334:	f040 80ab 	bne.w	800b48e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b340:	d117      	bne.n	800b372 <UART_Receive_IT+0x50>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	691b      	ldr	r3, [r3, #16]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d113      	bne.n	800b372 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b34a:	2300      	movs	r3, #0
 800b34c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b352:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b360:	b29a      	uxth	r2, r3
 800b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b364:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36a:	1c9a      	adds	r2, r3, #2
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	629a      	str	r2, [r3, #40]	; 0x28
 800b370:	e026      	b.n	800b3c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b376:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b378:	2300      	movs	r3, #0
 800b37a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b384:	d007      	beq.n	800b396 <UART_Receive_IT+0x74>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10a      	bne.n	800b3a4 <UART_Receive_IT+0x82>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d106      	bne.n	800b3a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	b2da      	uxtb	r2, r3
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	701a      	strb	r2, [r3, #0]
 800b3a2:	e008      	b.n	800b3b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ba:	1c5a      	adds	r2, r3, #1
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d15a      	bne.n	800b48a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68da      	ldr	r2, [r3, #12]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f022 0220 	bic.w	r2, r2, #32
 800b3e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68da      	ldr	r2, [r3, #12]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b3f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	695a      	ldr	r2, [r3, #20]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f022 0201 	bic.w	r2, r2, #1
 800b402:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2220      	movs	r2, #32
 800b408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b410:	2b01      	cmp	r3, #1
 800b412:	d135      	bne.n	800b480 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	330c      	adds	r3, #12
 800b420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	e853 3f00 	ldrex	r3, [r3]
 800b428:	613b      	str	r3, [r7, #16]
   return(result);
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	f023 0310 	bic.w	r3, r3, #16
 800b430:	627b      	str	r3, [r7, #36]	; 0x24
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	330c      	adds	r3, #12
 800b438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b43a:	623a      	str	r2, [r7, #32]
 800b43c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43e:	69f9      	ldr	r1, [r7, #28]
 800b440:	6a3a      	ldr	r2, [r7, #32]
 800b442:	e841 2300 	strex	r3, r2, [r1]
 800b446:	61bb      	str	r3, [r7, #24]
   return(result);
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1e5      	bne.n	800b41a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 0310 	and.w	r3, r3, #16
 800b458:	2b10      	cmp	r3, #16
 800b45a:	d10a      	bne.n	800b472 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b45c:	2300      	movs	r3, #0
 800b45e:	60fb      	str	r3, [r7, #12]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	60fb      	str	r3, [r7, #12]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	60fb      	str	r3, [r7, #12]
 800b470:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b476:	4619      	mov	r1, r3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7ff fdbb 	bl	800aff4 <HAL_UARTEx_RxEventCallback>
 800b47e:	e002      	b.n	800b486 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7f9 ff4f 	bl	8005324 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b486:	2300      	movs	r3, #0
 800b488:	e002      	b.n	800b490 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b48a:	2300      	movs	r3, #0
 800b48c:	e000      	b.n	800b490 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b48e:	2302      	movs	r3, #2
  }
}
 800b490:	4618      	mov	r0, r3
 800b492:	3730      	adds	r7, #48	; 0x30
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b49c:	b0c0      	sub	sp, #256	; 0x100
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b4b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4b4:	68d9      	ldr	r1, [r3, #12]
 800b4b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	ea40 0301 	orr.w	r3, r0, r1
 800b4c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b4c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4c6:	689a      	ldr	r2, [r3, #8]
 800b4c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4cc:	691b      	ldr	r3, [r3, #16]
 800b4ce:	431a      	orrs	r2, r3
 800b4d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4d4:	695b      	ldr	r3, [r3, #20]
 800b4d6:	431a      	orrs	r2, r3
 800b4d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4dc:	69db      	ldr	r3, [r3, #28]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b4e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b4f0:	f021 010c 	bic.w	r1, r1, #12
 800b4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b4fe:	430b      	orrs	r3, r1
 800b500:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	695b      	ldr	r3, [r3, #20]
 800b50a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b50e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b512:	6999      	ldr	r1, [r3, #24]
 800b514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	ea40 0301 	orr.w	r3, r0, r1
 800b51e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	4b8f      	ldr	r3, [pc, #572]	; (800b764 <UART_SetConfig+0x2cc>)
 800b528:	429a      	cmp	r2, r3
 800b52a:	d005      	beq.n	800b538 <UART_SetConfig+0xa0>
 800b52c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	4b8d      	ldr	r3, [pc, #564]	; (800b768 <UART_SetConfig+0x2d0>)
 800b534:	429a      	cmp	r2, r3
 800b536:	d104      	bne.n	800b542 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b538:	f7fc fda4 	bl	8008084 <HAL_RCC_GetPCLK2Freq>
 800b53c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b540:	e003      	b.n	800b54a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b542:	f7fc fd8b 	bl	800805c <HAL_RCC_GetPCLK1Freq>
 800b546:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b54a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b54e:	69db      	ldr	r3, [r3, #28]
 800b550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b554:	f040 810c 	bne.w	800b770 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b55c:	2200      	movs	r2, #0
 800b55e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b562:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b566:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b56a:	4622      	mov	r2, r4
 800b56c:	462b      	mov	r3, r5
 800b56e:	1891      	adds	r1, r2, r2
 800b570:	65b9      	str	r1, [r7, #88]	; 0x58
 800b572:	415b      	adcs	r3, r3
 800b574:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b576:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b57a:	4621      	mov	r1, r4
 800b57c:	eb12 0801 	adds.w	r8, r2, r1
 800b580:	4629      	mov	r1, r5
 800b582:	eb43 0901 	adc.w	r9, r3, r1
 800b586:	f04f 0200 	mov.w	r2, #0
 800b58a:	f04f 0300 	mov.w	r3, #0
 800b58e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b59a:	4690      	mov	r8, r2
 800b59c:	4699      	mov	r9, r3
 800b59e:	4623      	mov	r3, r4
 800b5a0:	eb18 0303 	adds.w	r3, r8, r3
 800b5a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b5a8:	462b      	mov	r3, r5
 800b5aa:	eb49 0303 	adc.w	r3, r9, r3
 800b5ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b5b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b5be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b5c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	18db      	adds	r3, r3, r3
 800b5ca:	653b      	str	r3, [r7, #80]	; 0x50
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	eb42 0303 	adc.w	r3, r2, r3
 800b5d2:	657b      	str	r3, [r7, #84]	; 0x54
 800b5d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b5d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b5dc:	f7f5 fb54 	bl	8000c88 <__aeabi_uldivmod>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4b61      	ldr	r3, [pc, #388]	; (800b76c <UART_SetConfig+0x2d4>)
 800b5e6:	fba3 2302 	umull	r2, r3, r3, r2
 800b5ea:	095b      	lsrs	r3, r3, #5
 800b5ec:	011c      	lsls	r4, r3, #4
 800b5ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b5fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b600:	4642      	mov	r2, r8
 800b602:	464b      	mov	r3, r9
 800b604:	1891      	adds	r1, r2, r2
 800b606:	64b9      	str	r1, [r7, #72]	; 0x48
 800b608:	415b      	adcs	r3, r3
 800b60a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b60c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b610:	4641      	mov	r1, r8
 800b612:	eb12 0a01 	adds.w	sl, r2, r1
 800b616:	4649      	mov	r1, r9
 800b618:	eb43 0b01 	adc.w	fp, r3, r1
 800b61c:	f04f 0200 	mov.w	r2, #0
 800b620:	f04f 0300 	mov.w	r3, #0
 800b624:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b628:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b62c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b630:	4692      	mov	sl, r2
 800b632:	469b      	mov	fp, r3
 800b634:	4643      	mov	r3, r8
 800b636:	eb1a 0303 	adds.w	r3, sl, r3
 800b63a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b63e:	464b      	mov	r3, r9
 800b640:	eb4b 0303 	adc.w	r3, fp, r3
 800b644:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b654:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b658:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b65c:	460b      	mov	r3, r1
 800b65e:	18db      	adds	r3, r3, r3
 800b660:	643b      	str	r3, [r7, #64]	; 0x40
 800b662:	4613      	mov	r3, r2
 800b664:	eb42 0303 	adc.w	r3, r2, r3
 800b668:	647b      	str	r3, [r7, #68]	; 0x44
 800b66a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b66e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b672:	f7f5 fb09 	bl	8000c88 <__aeabi_uldivmod>
 800b676:	4602      	mov	r2, r0
 800b678:	460b      	mov	r3, r1
 800b67a:	4611      	mov	r1, r2
 800b67c:	4b3b      	ldr	r3, [pc, #236]	; (800b76c <UART_SetConfig+0x2d4>)
 800b67e:	fba3 2301 	umull	r2, r3, r3, r1
 800b682:	095b      	lsrs	r3, r3, #5
 800b684:	2264      	movs	r2, #100	; 0x64
 800b686:	fb02 f303 	mul.w	r3, r2, r3
 800b68a:	1acb      	subs	r3, r1, r3
 800b68c:	00db      	lsls	r3, r3, #3
 800b68e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b692:	4b36      	ldr	r3, [pc, #216]	; (800b76c <UART_SetConfig+0x2d4>)
 800b694:	fba3 2302 	umull	r2, r3, r3, r2
 800b698:	095b      	lsrs	r3, r3, #5
 800b69a:	005b      	lsls	r3, r3, #1
 800b69c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b6a0:	441c      	add	r4, r3
 800b6a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b6ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b6b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b6b4:	4642      	mov	r2, r8
 800b6b6:	464b      	mov	r3, r9
 800b6b8:	1891      	adds	r1, r2, r2
 800b6ba:	63b9      	str	r1, [r7, #56]	; 0x38
 800b6bc:	415b      	adcs	r3, r3
 800b6be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b6c4:	4641      	mov	r1, r8
 800b6c6:	1851      	adds	r1, r2, r1
 800b6c8:	6339      	str	r1, [r7, #48]	; 0x30
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	414b      	adcs	r3, r1
 800b6ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b6d0:	f04f 0200 	mov.w	r2, #0
 800b6d4:	f04f 0300 	mov.w	r3, #0
 800b6d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b6dc:	4659      	mov	r1, fp
 800b6de:	00cb      	lsls	r3, r1, #3
 800b6e0:	4651      	mov	r1, sl
 800b6e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6e6:	4651      	mov	r1, sl
 800b6e8:	00ca      	lsls	r2, r1, #3
 800b6ea:	4610      	mov	r0, r2
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	4642      	mov	r2, r8
 800b6f2:	189b      	adds	r3, r3, r2
 800b6f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b6f8:	464b      	mov	r3, r9
 800b6fa:	460a      	mov	r2, r1
 800b6fc:	eb42 0303 	adc.w	r3, r2, r3
 800b700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b710:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b714:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b718:	460b      	mov	r3, r1
 800b71a:	18db      	adds	r3, r3, r3
 800b71c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b71e:	4613      	mov	r3, r2
 800b720:	eb42 0303 	adc.w	r3, r2, r3
 800b724:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b726:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b72a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b72e:	f7f5 faab 	bl	8000c88 <__aeabi_uldivmod>
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	4b0d      	ldr	r3, [pc, #52]	; (800b76c <UART_SetConfig+0x2d4>)
 800b738:	fba3 1302 	umull	r1, r3, r3, r2
 800b73c:	095b      	lsrs	r3, r3, #5
 800b73e:	2164      	movs	r1, #100	; 0x64
 800b740:	fb01 f303 	mul.w	r3, r1, r3
 800b744:	1ad3      	subs	r3, r2, r3
 800b746:	00db      	lsls	r3, r3, #3
 800b748:	3332      	adds	r3, #50	; 0x32
 800b74a:	4a08      	ldr	r2, [pc, #32]	; (800b76c <UART_SetConfig+0x2d4>)
 800b74c:	fba2 2303 	umull	r2, r3, r2, r3
 800b750:	095b      	lsrs	r3, r3, #5
 800b752:	f003 0207 	and.w	r2, r3, #7
 800b756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4422      	add	r2, r4
 800b75e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b760:	e105      	b.n	800b96e <UART_SetConfig+0x4d6>
 800b762:	bf00      	nop
 800b764:	40011000 	.word	0x40011000
 800b768:	40011400 	.word	0x40011400
 800b76c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b774:	2200      	movs	r2, #0
 800b776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b77a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b77e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b782:	4642      	mov	r2, r8
 800b784:	464b      	mov	r3, r9
 800b786:	1891      	adds	r1, r2, r2
 800b788:	6239      	str	r1, [r7, #32]
 800b78a:	415b      	adcs	r3, r3
 800b78c:	627b      	str	r3, [r7, #36]	; 0x24
 800b78e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b792:	4641      	mov	r1, r8
 800b794:	1854      	adds	r4, r2, r1
 800b796:	4649      	mov	r1, r9
 800b798:	eb43 0501 	adc.w	r5, r3, r1
 800b79c:	f04f 0200 	mov.w	r2, #0
 800b7a0:	f04f 0300 	mov.w	r3, #0
 800b7a4:	00eb      	lsls	r3, r5, #3
 800b7a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b7aa:	00e2      	lsls	r2, r4, #3
 800b7ac:	4614      	mov	r4, r2
 800b7ae:	461d      	mov	r5, r3
 800b7b0:	4643      	mov	r3, r8
 800b7b2:	18e3      	adds	r3, r4, r3
 800b7b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b7b8:	464b      	mov	r3, r9
 800b7ba:	eb45 0303 	adc.w	r3, r5, r3
 800b7be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b7c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b7ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b7d2:	f04f 0200 	mov.w	r2, #0
 800b7d6:	f04f 0300 	mov.w	r3, #0
 800b7da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b7de:	4629      	mov	r1, r5
 800b7e0:	008b      	lsls	r3, r1, #2
 800b7e2:	4621      	mov	r1, r4
 800b7e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b7e8:	4621      	mov	r1, r4
 800b7ea:	008a      	lsls	r2, r1, #2
 800b7ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b7f0:	f7f5 fa4a 	bl	8000c88 <__aeabi_uldivmod>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	4b60      	ldr	r3, [pc, #384]	; (800b97c <UART_SetConfig+0x4e4>)
 800b7fa:	fba3 2302 	umull	r2, r3, r3, r2
 800b7fe:	095b      	lsrs	r3, r3, #5
 800b800:	011c      	lsls	r4, r3, #4
 800b802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b806:	2200      	movs	r2, #0
 800b808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b80c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b810:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b814:	4642      	mov	r2, r8
 800b816:	464b      	mov	r3, r9
 800b818:	1891      	adds	r1, r2, r2
 800b81a:	61b9      	str	r1, [r7, #24]
 800b81c:	415b      	adcs	r3, r3
 800b81e:	61fb      	str	r3, [r7, #28]
 800b820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b824:	4641      	mov	r1, r8
 800b826:	1851      	adds	r1, r2, r1
 800b828:	6139      	str	r1, [r7, #16]
 800b82a:	4649      	mov	r1, r9
 800b82c:	414b      	adcs	r3, r1
 800b82e:	617b      	str	r3, [r7, #20]
 800b830:	f04f 0200 	mov.w	r2, #0
 800b834:	f04f 0300 	mov.w	r3, #0
 800b838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b83c:	4659      	mov	r1, fp
 800b83e:	00cb      	lsls	r3, r1, #3
 800b840:	4651      	mov	r1, sl
 800b842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b846:	4651      	mov	r1, sl
 800b848:	00ca      	lsls	r2, r1, #3
 800b84a:	4610      	mov	r0, r2
 800b84c:	4619      	mov	r1, r3
 800b84e:	4603      	mov	r3, r0
 800b850:	4642      	mov	r2, r8
 800b852:	189b      	adds	r3, r3, r2
 800b854:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b858:	464b      	mov	r3, r9
 800b85a:	460a      	mov	r2, r1
 800b85c:	eb42 0303 	adc.w	r3, r2, r3
 800b860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b86e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b870:	f04f 0200 	mov.w	r2, #0
 800b874:	f04f 0300 	mov.w	r3, #0
 800b878:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b87c:	4649      	mov	r1, r9
 800b87e:	008b      	lsls	r3, r1, #2
 800b880:	4641      	mov	r1, r8
 800b882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b886:	4641      	mov	r1, r8
 800b888:	008a      	lsls	r2, r1, #2
 800b88a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b88e:	f7f5 f9fb 	bl	8000c88 <__aeabi_uldivmod>
 800b892:	4602      	mov	r2, r0
 800b894:	460b      	mov	r3, r1
 800b896:	4b39      	ldr	r3, [pc, #228]	; (800b97c <UART_SetConfig+0x4e4>)
 800b898:	fba3 1302 	umull	r1, r3, r3, r2
 800b89c:	095b      	lsrs	r3, r3, #5
 800b89e:	2164      	movs	r1, #100	; 0x64
 800b8a0:	fb01 f303 	mul.w	r3, r1, r3
 800b8a4:	1ad3      	subs	r3, r2, r3
 800b8a6:	011b      	lsls	r3, r3, #4
 800b8a8:	3332      	adds	r3, #50	; 0x32
 800b8aa:	4a34      	ldr	r2, [pc, #208]	; (800b97c <UART_SetConfig+0x4e4>)
 800b8ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b8b0:	095b      	lsrs	r3, r3, #5
 800b8b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8b6:	441c      	add	r4, r3
 800b8b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8bc:	2200      	movs	r2, #0
 800b8be:	673b      	str	r3, [r7, #112]	; 0x70
 800b8c0:	677a      	str	r2, [r7, #116]	; 0x74
 800b8c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b8c6:	4642      	mov	r2, r8
 800b8c8:	464b      	mov	r3, r9
 800b8ca:	1891      	adds	r1, r2, r2
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	415b      	adcs	r3, r3
 800b8d0:	60fb      	str	r3, [r7, #12]
 800b8d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b8d6:	4641      	mov	r1, r8
 800b8d8:	1851      	adds	r1, r2, r1
 800b8da:	6039      	str	r1, [r7, #0]
 800b8dc:	4649      	mov	r1, r9
 800b8de:	414b      	adcs	r3, r1
 800b8e0:	607b      	str	r3, [r7, #4]
 800b8e2:	f04f 0200 	mov.w	r2, #0
 800b8e6:	f04f 0300 	mov.w	r3, #0
 800b8ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b8ee:	4659      	mov	r1, fp
 800b8f0:	00cb      	lsls	r3, r1, #3
 800b8f2:	4651      	mov	r1, sl
 800b8f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8f8:	4651      	mov	r1, sl
 800b8fa:	00ca      	lsls	r2, r1, #3
 800b8fc:	4610      	mov	r0, r2
 800b8fe:	4619      	mov	r1, r3
 800b900:	4603      	mov	r3, r0
 800b902:	4642      	mov	r2, r8
 800b904:	189b      	adds	r3, r3, r2
 800b906:	66bb      	str	r3, [r7, #104]	; 0x68
 800b908:	464b      	mov	r3, r9
 800b90a:	460a      	mov	r2, r1
 800b90c:	eb42 0303 	adc.w	r3, r2, r3
 800b910:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	663b      	str	r3, [r7, #96]	; 0x60
 800b91c:	667a      	str	r2, [r7, #100]	; 0x64
 800b91e:	f04f 0200 	mov.w	r2, #0
 800b922:	f04f 0300 	mov.w	r3, #0
 800b926:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b92a:	4649      	mov	r1, r9
 800b92c:	008b      	lsls	r3, r1, #2
 800b92e:	4641      	mov	r1, r8
 800b930:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b934:	4641      	mov	r1, r8
 800b936:	008a      	lsls	r2, r1, #2
 800b938:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b93c:	f7f5 f9a4 	bl	8000c88 <__aeabi_uldivmod>
 800b940:	4602      	mov	r2, r0
 800b942:	460b      	mov	r3, r1
 800b944:	4b0d      	ldr	r3, [pc, #52]	; (800b97c <UART_SetConfig+0x4e4>)
 800b946:	fba3 1302 	umull	r1, r3, r3, r2
 800b94a:	095b      	lsrs	r3, r3, #5
 800b94c:	2164      	movs	r1, #100	; 0x64
 800b94e:	fb01 f303 	mul.w	r3, r1, r3
 800b952:	1ad3      	subs	r3, r2, r3
 800b954:	011b      	lsls	r3, r3, #4
 800b956:	3332      	adds	r3, #50	; 0x32
 800b958:	4a08      	ldr	r2, [pc, #32]	; (800b97c <UART_SetConfig+0x4e4>)
 800b95a:	fba2 2303 	umull	r2, r3, r2, r3
 800b95e:	095b      	lsrs	r3, r3, #5
 800b960:	f003 020f 	and.w	r2, r3, #15
 800b964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4422      	add	r2, r4
 800b96c:	609a      	str	r2, [r3, #8]
}
 800b96e:	bf00      	nop
 800b970:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b974:	46bd      	mov	sp, r7
 800b976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b97a:	bf00      	nop
 800b97c:	51eb851f 	.word	0x51eb851f

0800b980 <__errno>:
 800b980:	4b01      	ldr	r3, [pc, #4]	; (800b988 <__errno+0x8>)
 800b982:	6818      	ldr	r0, [r3, #0]
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	200000a8 	.word	0x200000a8

0800b98c <__libc_init_array>:
 800b98c:	b570      	push	{r4, r5, r6, lr}
 800b98e:	4d0d      	ldr	r5, [pc, #52]	; (800b9c4 <__libc_init_array+0x38>)
 800b990:	4c0d      	ldr	r4, [pc, #52]	; (800b9c8 <__libc_init_array+0x3c>)
 800b992:	1b64      	subs	r4, r4, r5
 800b994:	10a4      	asrs	r4, r4, #2
 800b996:	2600      	movs	r6, #0
 800b998:	42a6      	cmp	r6, r4
 800b99a:	d109      	bne.n	800b9b0 <__libc_init_array+0x24>
 800b99c:	4d0b      	ldr	r5, [pc, #44]	; (800b9cc <__libc_init_array+0x40>)
 800b99e:	4c0c      	ldr	r4, [pc, #48]	; (800b9d0 <__libc_init_array+0x44>)
 800b9a0:	f004 f950 	bl	800fc44 <_init>
 800b9a4:	1b64      	subs	r4, r4, r5
 800b9a6:	10a4      	asrs	r4, r4, #2
 800b9a8:	2600      	movs	r6, #0
 800b9aa:	42a6      	cmp	r6, r4
 800b9ac:	d105      	bne.n	800b9ba <__libc_init_array+0x2e>
 800b9ae:	bd70      	pop	{r4, r5, r6, pc}
 800b9b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9b4:	4798      	blx	r3
 800b9b6:	3601      	adds	r6, #1
 800b9b8:	e7ee      	b.n	800b998 <__libc_init_array+0xc>
 800b9ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9be:	4798      	blx	r3
 800b9c0:	3601      	adds	r6, #1
 800b9c2:	e7f2      	b.n	800b9aa <__libc_init_array+0x1e>
 800b9c4:	080103a8 	.word	0x080103a8
 800b9c8:	080103a8 	.word	0x080103a8
 800b9cc:	080103a8 	.word	0x080103a8
 800b9d0:	080103ac 	.word	0x080103ac

0800b9d4 <memset>:
 800b9d4:	4402      	add	r2, r0
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d100      	bne.n	800b9de <memset+0xa>
 800b9dc:	4770      	bx	lr
 800b9de:	f803 1b01 	strb.w	r1, [r3], #1
 800b9e2:	e7f9      	b.n	800b9d8 <memset+0x4>

0800b9e4 <__cvt>:
 800b9e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e8:	ec55 4b10 	vmov	r4, r5, d0
 800b9ec:	2d00      	cmp	r5, #0
 800b9ee:	460e      	mov	r6, r1
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	462b      	mov	r3, r5
 800b9f4:	bfbb      	ittet	lt
 800b9f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b9fa:	461d      	movlt	r5, r3
 800b9fc:	2300      	movge	r3, #0
 800b9fe:	232d      	movlt	r3, #45	; 0x2d
 800ba00:	700b      	strb	r3, [r1, #0]
 800ba02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ba08:	4691      	mov	r9, r2
 800ba0a:	f023 0820 	bic.w	r8, r3, #32
 800ba0e:	bfbc      	itt	lt
 800ba10:	4622      	movlt	r2, r4
 800ba12:	4614      	movlt	r4, r2
 800ba14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba18:	d005      	beq.n	800ba26 <__cvt+0x42>
 800ba1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ba1e:	d100      	bne.n	800ba22 <__cvt+0x3e>
 800ba20:	3601      	adds	r6, #1
 800ba22:	2102      	movs	r1, #2
 800ba24:	e000      	b.n	800ba28 <__cvt+0x44>
 800ba26:	2103      	movs	r1, #3
 800ba28:	ab03      	add	r3, sp, #12
 800ba2a:	9301      	str	r3, [sp, #4]
 800ba2c:	ab02      	add	r3, sp, #8
 800ba2e:	9300      	str	r3, [sp, #0]
 800ba30:	ec45 4b10 	vmov	d0, r4, r5
 800ba34:	4653      	mov	r3, sl
 800ba36:	4632      	mov	r2, r6
 800ba38:	f000 fcea 	bl	800c410 <_dtoa_r>
 800ba3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ba40:	4607      	mov	r7, r0
 800ba42:	d102      	bne.n	800ba4a <__cvt+0x66>
 800ba44:	f019 0f01 	tst.w	r9, #1
 800ba48:	d022      	beq.n	800ba90 <__cvt+0xac>
 800ba4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba4e:	eb07 0906 	add.w	r9, r7, r6
 800ba52:	d110      	bne.n	800ba76 <__cvt+0x92>
 800ba54:	783b      	ldrb	r3, [r7, #0]
 800ba56:	2b30      	cmp	r3, #48	; 0x30
 800ba58:	d10a      	bne.n	800ba70 <__cvt+0x8c>
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4620      	mov	r0, r4
 800ba60:	4629      	mov	r1, r5
 800ba62:	f7f5 f851 	bl	8000b08 <__aeabi_dcmpeq>
 800ba66:	b918      	cbnz	r0, 800ba70 <__cvt+0x8c>
 800ba68:	f1c6 0601 	rsb	r6, r6, #1
 800ba6c:	f8ca 6000 	str.w	r6, [sl]
 800ba70:	f8da 3000 	ldr.w	r3, [sl]
 800ba74:	4499      	add	r9, r3
 800ba76:	2200      	movs	r2, #0
 800ba78:	2300      	movs	r3, #0
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	f7f5 f843 	bl	8000b08 <__aeabi_dcmpeq>
 800ba82:	b108      	cbz	r0, 800ba88 <__cvt+0xa4>
 800ba84:	f8cd 900c 	str.w	r9, [sp, #12]
 800ba88:	2230      	movs	r2, #48	; 0x30
 800ba8a:	9b03      	ldr	r3, [sp, #12]
 800ba8c:	454b      	cmp	r3, r9
 800ba8e:	d307      	bcc.n	800baa0 <__cvt+0xbc>
 800ba90:	9b03      	ldr	r3, [sp, #12]
 800ba92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba94:	1bdb      	subs	r3, r3, r7
 800ba96:	4638      	mov	r0, r7
 800ba98:	6013      	str	r3, [r2, #0]
 800ba9a:	b004      	add	sp, #16
 800ba9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baa0:	1c59      	adds	r1, r3, #1
 800baa2:	9103      	str	r1, [sp, #12]
 800baa4:	701a      	strb	r2, [r3, #0]
 800baa6:	e7f0      	b.n	800ba8a <__cvt+0xa6>

0800baa8 <__exponent>:
 800baa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baaa:	4603      	mov	r3, r0
 800baac:	2900      	cmp	r1, #0
 800baae:	bfb8      	it	lt
 800bab0:	4249      	neglt	r1, r1
 800bab2:	f803 2b02 	strb.w	r2, [r3], #2
 800bab6:	bfb4      	ite	lt
 800bab8:	222d      	movlt	r2, #45	; 0x2d
 800baba:	222b      	movge	r2, #43	; 0x2b
 800babc:	2909      	cmp	r1, #9
 800babe:	7042      	strb	r2, [r0, #1]
 800bac0:	dd2a      	ble.n	800bb18 <__exponent+0x70>
 800bac2:	f10d 0407 	add.w	r4, sp, #7
 800bac6:	46a4      	mov	ip, r4
 800bac8:	270a      	movs	r7, #10
 800baca:	46a6      	mov	lr, r4
 800bacc:	460a      	mov	r2, r1
 800bace:	fb91 f6f7 	sdiv	r6, r1, r7
 800bad2:	fb07 1516 	mls	r5, r7, r6, r1
 800bad6:	3530      	adds	r5, #48	; 0x30
 800bad8:	2a63      	cmp	r2, #99	; 0x63
 800bada:	f104 34ff 	add.w	r4, r4, #4294967295
 800bade:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bae2:	4631      	mov	r1, r6
 800bae4:	dcf1      	bgt.n	800baca <__exponent+0x22>
 800bae6:	3130      	adds	r1, #48	; 0x30
 800bae8:	f1ae 0502 	sub.w	r5, lr, #2
 800baec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800baf0:	1c44      	adds	r4, r0, #1
 800baf2:	4629      	mov	r1, r5
 800baf4:	4561      	cmp	r1, ip
 800baf6:	d30a      	bcc.n	800bb0e <__exponent+0x66>
 800baf8:	f10d 0209 	add.w	r2, sp, #9
 800bafc:	eba2 020e 	sub.w	r2, r2, lr
 800bb00:	4565      	cmp	r5, ip
 800bb02:	bf88      	it	hi
 800bb04:	2200      	movhi	r2, #0
 800bb06:	4413      	add	r3, r2
 800bb08:	1a18      	subs	r0, r3, r0
 800bb0a:	b003      	add	sp, #12
 800bb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb12:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bb16:	e7ed      	b.n	800baf4 <__exponent+0x4c>
 800bb18:	2330      	movs	r3, #48	; 0x30
 800bb1a:	3130      	adds	r1, #48	; 0x30
 800bb1c:	7083      	strb	r3, [r0, #2]
 800bb1e:	70c1      	strb	r1, [r0, #3]
 800bb20:	1d03      	adds	r3, r0, #4
 800bb22:	e7f1      	b.n	800bb08 <__exponent+0x60>

0800bb24 <_printf_float>:
 800bb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb28:	ed2d 8b02 	vpush	{d8}
 800bb2c:	b08d      	sub	sp, #52	; 0x34
 800bb2e:	460c      	mov	r4, r1
 800bb30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bb34:	4616      	mov	r6, r2
 800bb36:	461f      	mov	r7, r3
 800bb38:	4605      	mov	r5, r0
 800bb3a:	f001 fa57 	bl	800cfec <_localeconv_r>
 800bb3e:	f8d0 a000 	ldr.w	sl, [r0]
 800bb42:	4650      	mov	r0, sl
 800bb44:	f7f4 fb64 	bl	8000210 <strlen>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	930a      	str	r3, [sp, #40]	; 0x28
 800bb4c:	6823      	ldr	r3, [r4, #0]
 800bb4e:	9305      	str	r3, [sp, #20]
 800bb50:	f8d8 3000 	ldr.w	r3, [r8]
 800bb54:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bb58:	3307      	adds	r3, #7
 800bb5a:	f023 0307 	bic.w	r3, r3, #7
 800bb5e:	f103 0208 	add.w	r2, r3, #8
 800bb62:	f8c8 2000 	str.w	r2, [r8]
 800bb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bb6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bb72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb76:	9307      	str	r3, [sp, #28]
 800bb78:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb7c:	ee08 0a10 	vmov	s16, r0
 800bb80:	4b9f      	ldr	r3, [pc, #636]	; (800be00 <_printf_float+0x2dc>)
 800bb82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb86:	f04f 32ff 	mov.w	r2, #4294967295
 800bb8a:	f7f4 ffef 	bl	8000b6c <__aeabi_dcmpun>
 800bb8e:	bb88      	cbnz	r0, 800bbf4 <_printf_float+0xd0>
 800bb90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb94:	4b9a      	ldr	r3, [pc, #616]	; (800be00 <_printf_float+0x2dc>)
 800bb96:	f04f 32ff 	mov.w	r2, #4294967295
 800bb9a:	f7f4 ffc9 	bl	8000b30 <__aeabi_dcmple>
 800bb9e:	bb48      	cbnz	r0, 800bbf4 <_printf_float+0xd0>
 800bba0:	2200      	movs	r2, #0
 800bba2:	2300      	movs	r3, #0
 800bba4:	4640      	mov	r0, r8
 800bba6:	4649      	mov	r1, r9
 800bba8:	f7f4 ffb8 	bl	8000b1c <__aeabi_dcmplt>
 800bbac:	b110      	cbz	r0, 800bbb4 <_printf_float+0x90>
 800bbae:	232d      	movs	r3, #45	; 0x2d
 800bbb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbb4:	4b93      	ldr	r3, [pc, #588]	; (800be04 <_printf_float+0x2e0>)
 800bbb6:	4894      	ldr	r0, [pc, #592]	; (800be08 <_printf_float+0x2e4>)
 800bbb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bbbc:	bf94      	ite	ls
 800bbbe:	4698      	movls	r8, r3
 800bbc0:	4680      	movhi	r8, r0
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	6123      	str	r3, [r4, #16]
 800bbc6:	9b05      	ldr	r3, [sp, #20]
 800bbc8:	f023 0204 	bic.w	r2, r3, #4
 800bbcc:	6022      	str	r2, [r4, #0]
 800bbce:	f04f 0900 	mov.w	r9, #0
 800bbd2:	9700      	str	r7, [sp, #0]
 800bbd4:	4633      	mov	r3, r6
 800bbd6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bbd8:	4621      	mov	r1, r4
 800bbda:	4628      	mov	r0, r5
 800bbdc:	f000 f9d8 	bl	800bf90 <_printf_common>
 800bbe0:	3001      	adds	r0, #1
 800bbe2:	f040 8090 	bne.w	800bd06 <_printf_float+0x1e2>
 800bbe6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbea:	b00d      	add	sp, #52	; 0x34
 800bbec:	ecbd 8b02 	vpop	{d8}
 800bbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf4:	4642      	mov	r2, r8
 800bbf6:	464b      	mov	r3, r9
 800bbf8:	4640      	mov	r0, r8
 800bbfa:	4649      	mov	r1, r9
 800bbfc:	f7f4 ffb6 	bl	8000b6c <__aeabi_dcmpun>
 800bc00:	b140      	cbz	r0, 800bc14 <_printf_float+0xf0>
 800bc02:	464b      	mov	r3, r9
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	bfbc      	itt	lt
 800bc08:	232d      	movlt	r3, #45	; 0x2d
 800bc0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bc0e:	487f      	ldr	r0, [pc, #508]	; (800be0c <_printf_float+0x2e8>)
 800bc10:	4b7f      	ldr	r3, [pc, #508]	; (800be10 <_printf_float+0x2ec>)
 800bc12:	e7d1      	b.n	800bbb8 <_printf_float+0x94>
 800bc14:	6863      	ldr	r3, [r4, #4]
 800bc16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bc1a:	9206      	str	r2, [sp, #24]
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	d13f      	bne.n	800bca0 <_printf_float+0x17c>
 800bc20:	2306      	movs	r3, #6
 800bc22:	6063      	str	r3, [r4, #4]
 800bc24:	9b05      	ldr	r3, [sp, #20]
 800bc26:	6861      	ldr	r1, [r4, #4]
 800bc28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	9303      	str	r3, [sp, #12]
 800bc30:	ab0a      	add	r3, sp, #40	; 0x28
 800bc32:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bc36:	ab09      	add	r3, sp, #36	; 0x24
 800bc38:	ec49 8b10 	vmov	d0, r8, r9
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	6022      	str	r2, [r4, #0]
 800bc40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bc44:	4628      	mov	r0, r5
 800bc46:	f7ff fecd 	bl	800b9e4 <__cvt>
 800bc4a:	9b06      	ldr	r3, [sp, #24]
 800bc4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc4e:	2b47      	cmp	r3, #71	; 0x47
 800bc50:	4680      	mov	r8, r0
 800bc52:	d108      	bne.n	800bc66 <_printf_float+0x142>
 800bc54:	1cc8      	adds	r0, r1, #3
 800bc56:	db02      	blt.n	800bc5e <_printf_float+0x13a>
 800bc58:	6863      	ldr	r3, [r4, #4]
 800bc5a:	4299      	cmp	r1, r3
 800bc5c:	dd41      	ble.n	800bce2 <_printf_float+0x1be>
 800bc5e:	f1ab 0b02 	sub.w	fp, fp, #2
 800bc62:	fa5f fb8b 	uxtb.w	fp, fp
 800bc66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bc6a:	d820      	bhi.n	800bcae <_printf_float+0x18a>
 800bc6c:	3901      	subs	r1, #1
 800bc6e:	465a      	mov	r2, fp
 800bc70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bc74:	9109      	str	r1, [sp, #36]	; 0x24
 800bc76:	f7ff ff17 	bl	800baa8 <__exponent>
 800bc7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc7c:	1813      	adds	r3, r2, r0
 800bc7e:	2a01      	cmp	r2, #1
 800bc80:	4681      	mov	r9, r0
 800bc82:	6123      	str	r3, [r4, #16]
 800bc84:	dc02      	bgt.n	800bc8c <_printf_float+0x168>
 800bc86:	6822      	ldr	r2, [r4, #0]
 800bc88:	07d2      	lsls	r2, r2, #31
 800bc8a:	d501      	bpl.n	800bc90 <_printf_float+0x16c>
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	6123      	str	r3, [r4, #16]
 800bc90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d09c      	beq.n	800bbd2 <_printf_float+0xae>
 800bc98:	232d      	movs	r3, #45	; 0x2d
 800bc9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc9e:	e798      	b.n	800bbd2 <_printf_float+0xae>
 800bca0:	9a06      	ldr	r2, [sp, #24]
 800bca2:	2a47      	cmp	r2, #71	; 0x47
 800bca4:	d1be      	bne.n	800bc24 <_printf_float+0x100>
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1bc      	bne.n	800bc24 <_printf_float+0x100>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e7b9      	b.n	800bc22 <_printf_float+0xfe>
 800bcae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bcb2:	d118      	bne.n	800bce6 <_printf_float+0x1c2>
 800bcb4:	2900      	cmp	r1, #0
 800bcb6:	6863      	ldr	r3, [r4, #4]
 800bcb8:	dd0b      	ble.n	800bcd2 <_printf_float+0x1ae>
 800bcba:	6121      	str	r1, [r4, #16]
 800bcbc:	b913      	cbnz	r3, 800bcc4 <_printf_float+0x1a0>
 800bcbe:	6822      	ldr	r2, [r4, #0]
 800bcc0:	07d0      	lsls	r0, r2, #31
 800bcc2:	d502      	bpl.n	800bcca <_printf_float+0x1a6>
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	440b      	add	r3, r1
 800bcc8:	6123      	str	r3, [r4, #16]
 800bcca:	65a1      	str	r1, [r4, #88]	; 0x58
 800bccc:	f04f 0900 	mov.w	r9, #0
 800bcd0:	e7de      	b.n	800bc90 <_printf_float+0x16c>
 800bcd2:	b913      	cbnz	r3, 800bcda <_printf_float+0x1b6>
 800bcd4:	6822      	ldr	r2, [r4, #0]
 800bcd6:	07d2      	lsls	r2, r2, #31
 800bcd8:	d501      	bpl.n	800bcde <_printf_float+0x1ba>
 800bcda:	3302      	adds	r3, #2
 800bcdc:	e7f4      	b.n	800bcc8 <_printf_float+0x1a4>
 800bcde:	2301      	movs	r3, #1
 800bce0:	e7f2      	b.n	800bcc8 <_printf_float+0x1a4>
 800bce2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bce8:	4299      	cmp	r1, r3
 800bcea:	db05      	blt.n	800bcf8 <_printf_float+0x1d4>
 800bcec:	6823      	ldr	r3, [r4, #0]
 800bcee:	6121      	str	r1, [r4, #16]
 800bcf0:	07d8      	lsls	r0, r3, #31
 800bcf2:	d5ea      	bpl.n	800bcca <_printf_float+0x1a6>
 800bcf4:	1c4b      	adds	r3, r1, #1
 800bcf6:	e7e7      	b.n	800bcc8 <_printf_float+0x1a4>
 800bcf8:	2900      	cmp	r1, #0
 800bcfa:	bfd4      	ite	le
 800bcfc:	f1c1 0202 	rsble	r2, r1, #2
 800bd00:	2201      	movgt	r2, #1
 800bd02:	4413      	add	r3, r2
 800bd04:	e7e0      	b.n	800bcc8 <_printf_float+0x1a4>
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	055a      	lsls	r2, r3, #21
 800bd0a:	d407      	bmi.n	800bd1c <_printf_float+0x1f8>
 800bd0c:	6923      	ldr	r3, [r4, #16]
 800bd0e:	4642      	mov	r2, r8
 800bd10:	4631      	mov	r1, r6
 800bd12:	4628      	mov	r0, r5
 800bd14:	47b8      	blx	r7
 800bd16:	3001      	adds	r0, #1
 800bd18:	d12c      	bne.n	800bd74 <_printf_float+0x250>
 800bd1a:	e764      	b.n	800bbe6 <_printf_float+0xc2>
 800bd1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd20:	f240 80e0 	bls.w	800bee4 <_printf_float+0x3c0>
 800bd24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f7f4 feec 	bl	8000b08 <__aeabi_dcmpeq>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d034      	beq.n	800bd9e <_printf_float+0x27a>
 800bd34:	4a37      	ldr	r2, [pc, #220]	; (800be14 <_printf_float+0x2f0>)
 800bd36:	2301      	movs	r3, #1
 800bd38:	4631      	mov	r1, r6
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	47b8      	blx	r7
 800bd3e:	3001      	adds	r0, #1
 800bd40:	f43f af51 	beq.w	800bbe6 <_printf_float+0xc2>
 800bd44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	db02      	blt.n	800bd52 <_printf_float+0x22e>
 800bd4c:	6823      	ldr	r3, [r4, #0]
 800bd4e:	07d8      	lsls	r0, r3, #31
 800bd50:	d510      	bpl.n	800bd74 <_printf_float+0x250>
 800bd52:	ee18 3a10 	vmov	r3, s16
 800bd56:	4652      	mov	r2, sl
 800bd58:	4631      	mov	r1, r6
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	47b8      	blx	r7
 800bd5e:	3001      	adds	r0, #1
 800bd60:	f43f af41 	beq.w	800bbe6 <_printf_float+0xc2>
 800bd64:	f04f 0800 	mov.w	r8, #0
 800bd68:	f104 091a 	add.w	r9, r4, #26
 800bd6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	4543      	cmp	r3, r8
 800bd72:	dc09      	bgt.n	800bd88 <_printf_float+0x264>
 800bd74:	6823      	ldr	r3, [r4, #0]
 800bd76:	079b      	lsls	r3, r3, #30
 800bd78:	f100 8105 	bmi.w	800bf86 <_printf_float+0x462>
 800bd7c:	68e0      	ldr	r0, [r4, #12]
 800bd7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd80:	4298      	cmp	r0, r3
 800bd82:	bfb8      	it	lt
 800bd84:	4618      	movlt	r0, r3
 800bd86:	e730      	b.n	800bbea <_printf_float+0xc6>
 800bd88:	2301      	movs	r3, #1
 800bd8a:	464a      	mov	r2, r9
 800bd8c:	4631      	mov	r1, r6
 800bd8e:	4628      	mov	r0, r5
 800bd90:	47b8      	blx	r7
 800bd92:	3001      	adds	r0, #1
 800bd94:	f43f af27 	beq.w	800bbe6 <_printf_float+0xc2>
 800bd98:	f108 0801 	add.w	r8, r8, #1
 800bd9c:	e7e6      	b.n	800bd6c <_printf_float+0x248>
 800bd9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	dc39      	bgt.n	800be18 <_printf_float+0x2f4>
 800bda4:	4a1b      	ldr	r2, [pc, #108]	; (800be14 <_printf_float+0x2f0>)
 800bda6:	2301      	movs	r3, #1
 800bda8:	4631      	mov	r1, r6
 800bdaa:	4628      	mov	r0, r5
 800bdac:	47b8      	blx	r7
 800bdae:	3001      	adds	r0, #1
 800bdb0:	f43f af19 	beq.w	800bbe6 <_printf_float+0xc2>
 800bdb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	d102      	bne.n	800bdc2 <_printf_float+0x29e>
 800bdbc:	6823      	ldr	r3, [r4, #0]
 800bdbe:	07d9      	lsls	r1, r3, #31
 800bdc0:	d5d8      	bpl.n	800bd74 <_printf_float+0x250>
 800bdc2:	ee18 3a10 	vmov	r3, s16
 800bdc6:	4652      	mov	r2, sl
 800bdc8:	4631      	mov	r1, r6
 800bdca:	4628      	mov	r0, r5
 800bdcc:	47b8      	blx	r7
 800bdce:	3001      	adds	r0, #1
 800bdd0:	f43f af09 	beq.w	800bbe6 <_printf_float+0xc2>
 800bdd4:	f04f 0900 	mov.w	r9, #0
 800bdd8:	f104 0a1a 	add.w	sl, r4, #26
 800bddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdde:	425b      	negs	r3, r3
 800bde0:	454b      	cmp	r3, r9
 800bde2:	dc01      	bgt.n	800bde8 <_printf_float+0x2c4>
 800bde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bde6:	e792      	b.n	800bd0e <_printf_float+0x1ea>
 800bde8:	2301      	movs	r3, #1
 800bdea:	4652      	mov	r2, sl
 800bdec:	4631      	mov	r1, r6
 800bdee:	4628      	mov	r0, r5
 800bdf0:	47b8      	blx	r7
 800bdf2:	3001      	adds	r0, #1
 800bdf4:	f43f aef7 	beq.w	800bbe6 <_printf_float+0xc2>
 800bdf8:	f109 0901 	add.w	r9, r9, #1
 800bdfc:	e7ee      	b.n	800bddc <_printf_float+0x2b8>
 800bdfe:	bf00      	nop
 800be00:	7fefffff 	.word	0x7fefffff
 800be04:	0800fdb0 	.word	0x0800fdb0
 800be08:	0800fdb4 	.word	0x0800fdb4
 800be0c:	0800fdbc 	.word	0x0800fdbc
 800be10:	0800fdb8 	.word	0x0800fdb8
 800be14:	0800fdc0 	.word	0x0800fdc0
 800be18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be1c:	429a      	cmp	r2, r3
 800be1e:	bfa8      	it	ge
 800be20:	461a      	movge	r2, r3
 800be22:	2a00      	cmp	r2, #0
 800be24:	4691      	mov	r9, r2
 800be26:	dc37      	bgt.n	800be98 <_printf_float+0x374>
 800be28:	f04f 0b00 	mov.w	fp, #0
 800be2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be30:	f104 021a 	add.w	r2, r4, #26
 800be34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be36:	9305      	str	r3, [sp, #20]
 800be38:	eba3 0309 	sub.w	r3, r3, r9
 800be3c:	455b      	cmp	r3, fp
 800be3e:	dc33      	bgt.n	800bea8 <_printf_float+0x384>
 800be40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be44:	429a      	cmp	r2, r3
 800be46:	db3b      	blt.n	800bec0 <_printf_float+0x39c>
 800be48:	6823      	ldr	r3, [r4, #0]
 800be4a:	07da      	lsls	r2, r3, #31
 800be4c:	d438      	bmi.n	800bec0 <_printf_float+0x39c>
 800be4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be50:	9a05      	ldr	r2, [sp, #20]
 800be52:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be54:	1a9a      	subs	r2, r3, r2
 800be56:	eba3 0901 	sub.w	r9, r3, r1
 800be5a:	4591      	cmp	r9, r2
 800be5c:	bfa8      	it	ge
 800be5e:	4691      	movge	r9, r2
 800be60:	f1b9 0f00 	cmp.w	r9, #0
 800be64:	dc35      	bgt.n	800bed2 <_printf_float+0x3ae>
 800be66:	f04f 0800 	mov.w	r8, #0
 800be6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be6e:	f104 0a1a 	add.w	sl, r4, #26
 800be72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be76:	1a9b      	subs	r3, r3, r2
 800be78:	eba3 0309 	sub.w	r3, r3, r9
 800be7c:	4543      	cmp	r3, r8
 800be7e:	f77f af79 	ble.w	800bd74 <_printf_float+0x250>
 800be82:	2301      	movs	r3, #1
 800be84:	4652      	mov	r2, sl
 800be86:	4631      	mov	r1, r6
 800be88:	4628      	mov	r0, r5
 800be8a:	47b8      	blx	r7
 800be8c:	3001      	adds	r0, #1
 800be8e:	f43f aeaa 	beq.w	800bbe6 <_printf_float+0xc2>
 800be92:	f108 0801 	add.w	r8, r8, #1
 800be96:	e7ec      	b.n	800be72 <_printf_float+0x34e>
 800be98:	4613      	mov	r3, r2
 800be9a:	4631      	mov	r1, r6
 800be9c:	4642      	mov	r2, r8
 800be9e:	4628      	mov	r0, r5
 800bea0:	47b8      	blx	r7
 800bea2:	3001      	adds	r0, #1
 800bea4:	d1c0      	bne.n	800be28 <_printf_float+0x304>
 800bea6:	e69e      	b.n	800bbe6 <_printf_float+0xc2>
 800bea8:	2301      	movs	r3, #1
 800beaa:	4631      	mov	r1, r6
 800beac:	4628      	mov	r0, r5
 800beae:	9205      	str	r2, [sp, #20]
 800beb0:	47b8      	blx	r7
 800beb2:	3001      	adds	r0, #1
 800beb4:	f43f ae97 	beq.w	800bbe6 <_printf_float+0xc2>
 800beb8:	9a05      	ldr	r2, [sp, #20]
 800beba:	f10b 0b01 	add.w	fp, fp, #1
 800bebe:	e7b9      	b.n	800be34 <_printf_float+0x310>
 800bec0:	ee18 3a10 	vmov	r3, s16
 800bec4:	4652      	mov	r2, sl
 800bec6:	4631      	mov	r1, r6
 800bec8:	4628      	mov	r0, r5
 800beca:	47b8      	blx	r7
 800becc:	3001      	adds	r0, #1
 800bece:	d1be      	bne.n	800be4e <_printf_float+0x32a>
 800bed0:	e689      	b.n	800bbe6 <_printf_float+0xc2>
 800bed2:	9a05      	ldr	r2, [sp, #20]
 800bed4:	464b      	mov	r3, r9
 800bed6:	4442      	add	r2, r8
 800bed8:	4631      	mov	r1, r6
 800beda:	4628      	mov	r0, r5
 800bedc:	47b8      	blx	r7
 800bede:	3001      	adds	r0, #1
 800bee0:	d1c1      	bne.n	800be66 <_printf_float+0x342>
 800bee2:	e680      	b.n	800bbe6 <_printf_float+0xc2>
 800bee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bee6:	2a01      	cmp	r2, #1
 800bee8:	dc01      	bgt.n	800beee <_printf_float+0x3ca>
 800beea:	07db      	lsls	r3, r3, #31
 800beec:	d538      	bpl.n	800bf60 <_printf_float+0x43c>
 800beee:	2301      	movs	r3, #1
 800bef0:	4642      	mov	r2, r8
 800bef2:	4631      	mov	r1, r6
 800bef4:	4628      	mov	r0, r5
 800bef6:	47b8      	blx	r7
 800bef8:	3001      	adds	r0, #1
 800befa:	f43f ae74 	beq.w	800bbe6 <_printf_float+0xc2>
 800befe:	ee18 3a10 	vmov	r3, s16
 800bf02:	4652      	mov	r2, sl
 800bf04:	4631      	mov	r1, r6
 800bf06:	4628      	mov	r0, r5
 800bf08:	47b8      	blx	r7
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	f43f ae6b 	beq.w	800bbe6 <_printf_float+0xc2>
 800bf10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf14:	2200      	movs	r2, #0
 800bf16:	2300      	movs	r3, #0
 800bf18:	f7f4 fdf6 	bl	8000b08 <__aeabi_dcmpeq>
 800bf1c:	b9d8      	cbnz	r0, 800bf56 <_printf_float+0x432>
 800bf1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf20:	f108 0201 	add.w	r2, r8, #1
 800bf24:	3b01      	subs	r3, #1
 800bf26:	4631      	mov	r1, r6
 800bf28:	4628      	mov	r0, r5
 800bf2a:	47b8      	blx	r7
 800bf2c:	3001      	adds	r0, #1
 800bf2e:	d10e      	bne.n	800bf4e <_printf_float+0x42a>
 800bf30:	e659      	b.n	800bbe6 <_printf_float+0xc2>
 800bf32:	2301      	movs	r3, #1
 800bf34:	4652      	mov	r2, sl
 800bf36:	4631      	mov	r1, r6
 800bf38:	4628      	mov	r0, r5
 800bf3a:	47b8      	blx	r7
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	f43f ae52 	beq.w	800bbe6 <_printf_float+0xc2>
 800bf42:	f108 0801 	add.w	r8, r8, #1
 800bf46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	4543      	cmp	r3, r8
 800bf4c:	dcf1      	bgt.n	800bf32 <_printf_float+0x40e>
 800bf4e:	464b      	mov	r3, r9
 800bf50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bf54:	e6dc      	b.n	800bd10 <_printf_float+0x1ec>
 800bf56:	f04f 0800 	mov.w	r8, #0
 800bf5a:	f104 0a1a 	add.w	sl, r4, #26
 800bf5e:	e7f2      	b.n	800bf46 <_printf_float+0x422>
 800bf60:	2301      	movs	r3, #1
 800bf62:	4642      	mov	r2, r8
 800bf64:	e7df      	b.n	800bf26 <_printf_float+0x402>
 800bf66:	2301      	movs	r3, #1
 800bf68:	464a      	mov	r2, r9
 800bf6a:	4631      	mov	r1, r6
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	47b8      	blx	r7
 800bf70:	3001      	adds	r0, #1
 800bf72:	f43f ae38 	beq.w	800bbe6 <_printf_float+0xc2>
 800bf76:	f108 0801 	add.w	r8, r8, #1
 800bf7a:	68e3      	ldr	r3, [r4, #12]
 800bf7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf7e:	1a5b      	subs	r3, r3, r1
 800bf80:	4543      	cmp	r3, r8
 800bf82:	dcf0      	bgt.n	800bf66 <_printf_float+0x442>
 800bf84:	e6fa      	b.n	800bd7c <_printf_float+0x258>
 800bf86:	f04f 0800 	mov.w	r8, #0
 800bf8a:	f104 0919 	add.w	r9, r4, #25
 800bf8e:	e7f4      	b.n	800bf7a <_printf_float+0x456>

0800bf90 <_printf_common>:
 800bf90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf94:	4616      	mov	r6, r2
 800bf96:	4699      	mov	r9, r3
 800bf98:	688a      	ldr	r2, [r1, #8]
 800bf9a:	690b      	ldr	r3, [r1, #16]
 800bf9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	bfb8      	it	lt
 800bfa4:	4613      	movlt	r3, r2
 800bfa6:	6033      	str	r3, [r6, #0]
 800bfa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfac:	4607      	mov	r7, r0
 800bfae:	460c      	mov	r4, r1
 800bfb0:	b10a      	cbz	r2, 800bfb6 <_printf_common+0x26>
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	6033      	str	r3, [r6, #0]
 800bfb6:	6823      	ldr	r3, [r4, #0]
 800bfb8:	0699      	lsls	r1, r3, #26
 800bfba:	bf42      	ittt	mi
 800bfbc:	6833      	ldrmi	r3, [r6, #0]
 800bfbe:	3302      	addmi	r3, #2
 800bfc0:	6033      	strmi	r3, [r6, #0]
 800bfc2:	6825      	ldr	r5, [r4, #0]
 800bfc4:	f015 0506 	ands.w	r5, r5, #6
 800bfc8:	d106      	bne.n	800bfd8 <_printf_common+0x48>
 800bfca:	f104 0a19 	add.w	sl, r4, #25
 800bfce:	68e3      	ldr	r3, [r4, #12]
 800bfd0:	6832      	ldr	r2, [r6, #0]
 800bfd2:	1a9b      	subs	r3, r3, r2
 800bfd4:	42ab      	cmp	r3, r5
 800bfd6:	dc26      	bgt.n	800c026 <_printf_common+0x96>
 800bfd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bfdc:	1e13      	subs	r3, r2, #0
 800bfde:	6822      	ldr	r2, [r4, #0]
 800bfe0:	bf18      	it	ne
 800bfe2:	2301      	movne	r3, #1
 800bfe4:	0692      	lsls	r2, r2, #26
 800bfe6:	d42b      	bmi.n	800c040 <_printf_common+0xb0>
 800bfe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bfec:	4649      	mov	r1, r9
 800bfee:	4638      	mov	r0, r7
 800bff0:	47c0      	blx	r8
 800bff2:	3001      	adds	r0, #1
 800bff4:	d01e      	beq.n	800c034 <_printf_common+0xa4>
 800bff6:	6823      	ldr	r3, [r4, #0]
 800bff8:	68e5      	ldr	r5, [r4, #12]
 800bffa:	6832      	ldr	r2, [r6, #0]
 800bffc:	f003 0306 	and.w	r3, r3, #6
 800c000:	2b04      	cmp	r3, #4
 800c002:	bf08      	it	eq
 800c004:	1aad      	subeq	r5, r5, r2
 800c006:	68a3      	ldr	r3, [r4, #8]
 800c008:	6922      	ldr	r2, [r4, #16]
 800c00a:	bf0c      	ite	eq
 800c00c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c010:	2500      	movne	r5, #0
 800c012:	4293      	cmp	r3, r2
 800c014:	bfc4      	itt	gt
 800c016:	1a9b      	subgt	r3, r3, r2
 800c018:	18ed      	addgt	r5, r5, r3
 800c01a:	2600      	movs	r6, #0
 800c01c:	341a      	adds	r4, #26
 800c01e:	42b5      	cmp	r5, r6
 800c020:	d11a      	bne.n	800c058 <_printf_common+0xc8>
 800c022:	2000      	movs	r0, #0
 800c024:	e008      	b.n	800c038 <_printf_common+0xa8>
 800c026:	2301      	movs	r3, #1
 800c028:	4652      	mov	r2, sl
 800c02a:	4649      	mov	r1, r9
 800c02c:	4638      	mov	r0, r7
 800c02e:	47c0      	blx	r8
 800c030:	3001      	adds	r0, #1
 800c032:	d103      	bne.n	800c03c <_printf_common+0xac>
 800c034:	f04f 30ff 	mov.w	r0, #4294967295
 800c038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c03c:	3501      	adds	r5, #1
 800c03e:	e7c6      	b.n	800bfce <_printf_common+0x3e>
 800c040:	18e1      	adds	r1, r4, r3
 800c042:	1c5a      	adds	r2, r3, #1
 800c044:	2030      	movs	r0, #48	; 0x30
 800c046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c04a:	4422      	add	r2, r4
 800c04c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c054:	3302      	adds	r3, #2
 800c056:	e7c7      	b.n	800bfe8 <_printf_common+0x58>
 800c058:	2301      	movs	r3, #1
 800c05a:	4622      	mov	r2, r4
 800c05c:	4649      	mov	r1, r9
 800c05e:	4638      	mov	r0, r7
 800c060:	47c0      	blx	r8
 800c062:	3001      	adds	r0, #1
 800c064:	d0e6      	beq.n	800c034 <_printf_common+0xa4>
 800c066:	3601      	adds	r6, #1
 800c068:	e7d9      	b.n	800c01e <_printf_common+0x8e>
	...

0800c06c <_printf_i>:
 800c06c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c070:	7e0f      	ldrb	r7, [r1, #24]
 800c072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c074:	2f78      	cmp	r7, #120	; 0x78
 800c076:	4691      	mov	r9, r2
 800c078:	4680      	mov	r8, r0
 800c07a:	460c      	mov	r4, r1
 800c07c:	469a      	mov	sl, r3
 800c07e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c082:	d807      	bhi.n	800c094 <_printf_i+0x28>
 800c084:	2f62      	cmp	r7, #98	; 0x62
 800c086:	d80a      	bhi.n	800c09e <_printf_i+0x32>
 800c088:	2f00      	cmp	r7, #0
 800c08a:	f000 80d8 	beq.w	800c23e <_printf_i+0x1d2>
 800c08e:	2f58      	cmp	r7, #88	; 0x58
 800c090:	f000 80a3 	beq.w	800c1da <_printf_i+0x16e>
 800c094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c09c:	e03a      	b.n	800c114 <_printf_i+0xa8>
 800c09e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0a2:	2b15      	cmp	r3, #21
 800c0a4:	d8f6      	bhi.n	800c094 <_printf_i+0x28>
 800c0a6:	a101      	add	r1, pc, #4	; (adr r1, 800c0ac <_printf_i+0x40>)
 800c0a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0ac:	0800c105 	.word	0x0800c105
 800c0b0:	0800c119 	.word	0x0800c119
 800c0b4:	0800c095 	.word	0x0800c095
 800c0b8:	0800c095 	.word	0x0800c095
 800c0bc:	0800c095 	.word	0x0800c095
 800c0c0:	0800c095 	.word	0x0800c095
 800c0c4:	0800c119 	.word	0x0800c119
 800c0c8:	0800c095 	.word	0x0800c095
 800c0cc:	0800c095 	.word	0x0800c095
 800c0d0:	0800c095 	.word	0x0800c095
 800c0d4:	0800c095 	.word	0x0800c095
 800c0d8:	0800c225 	.word	0x0800c225
 800c0dc:	0800c149 	.word	0x0800c149
 800c0e0:	0800c207 	.word	0x0800c207
 800c0e4:	0800c095 	.word	0x0800c095
 800c0e8:	0800c095 	.word	0x0800c095
 800c0ec:	0800c247 	.word	0x0800c247
 800c0f0:	0800c095 	.word	0x0800c095
 800c0f4:	0800c149 	.word	0x0800c149
 800c0f8:	0800c095 	.word	0x0800c095
 800c0fc:	0800c095 	.word	0x0800c095
 800c100:	0800c20f 	.word	0x0800c20f
 800c104:	682b      	ldr	r3, [r5, #0]
 800c106:	1d1a      	adds	r2, r3, #4
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	602a      	str	r2, [r5, #0]
 800c10c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c114:	2301      	movs	r3, #1
 800c116:	e0a3      	b.n	800c260 <_printf_i+0x1f4>
 800c118:	6820      	ldr	r0, [r4, #0]
 800c11a:	6829      	ldr	r1, [r5, #0]
 800c11c:	0606      	lsls	r6, r0, #24
 800c11e:	f101 0304 	add.w	r3, r1, #4
 800c122:	d50a      	bpl.n	800c13a <_printf_i+0xce>
 800c124:	680e      	ldr	r6, [r1, #0]
 800c126:	602b      	str	r3, [r5, #0]
 800c128:	2e00      	cmp	r6, #0
 800c12a:	da03      	bge.n	800c134 <_printf_i+0xc8>
 800c12c:	232d      	movs	r3, #45	; 0x2d
 800c12e:	4276      	negs	r6, r6
 800c130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c134:	485e      	ldr	r0, [pc, #376]	; (800c2b0 <_printf_i+0x244>)
 800c136:	230a      	movs	r3, #10
 800c138:	e019      	b.n	800c16e <_printf_i+0x102>
 800c13a:	680e      	ldr	r6, [r1, #0]
 800c13c:	602b      	str	r3, [r5, #0]
 800c13e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c142:	bf18      	it	ne
 800c144:	b236      	sxthne	r6, r6
 800c146:	e7ef      	b.n	800c128 <_printf_i+0xbc>
 800c148:	682b      	ldr	r3, [r5, #0]
 800c14a:	6820      	ldr	r0, [r4, #0]
 800c14c:	1d19      	adds	r1, r3, #4
 800c14e:	6029      	str	r1, [r5, #0]
 800c150:	0601      	lsls	r1, r0, #24
 800c152:	d501      	bpl.n	800c158 <_printf_i+0xec>
 800c154:	681e      	ldr	r6, [r3, #0]
 800c156:	e002      	b.n	800c15e <_printf_i+0xf2>
 800c158:	0646      	lsls	r6, r0, #25
 800c15a:	d5fb      	bpl.n	800c154 <_printf_i+0xe8>
 800c15c:	881e      	ldrh	r6, [r3, #0]
 800c15e:	4854      	ldr	r0, [pc, #336]	; (800c2b0 <_printf_i+0x244>)
 800c160:	2f6f      	cmp	r7, #111	; 0x6f
 800c162:	bf0c      	ite	eq
 800c164:	2308      	moveq	r3, #8
 800c166:	230a      	movne	r3, #10
 800c168:	2100      	movs	r1, #0
 800c16a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c16e:	6865      	ldr	r5, [r4, #4]
 800c170:	60a5      	str	r5, [r4, #8]
 800c172:	2d00      	cmp	r5, #0
 800c174:	bfa2      	ittt	ge
 800c176:	6821      	ldrge	r1, [r4, #0]
 800c178:	f021 0104 	bicge.w	r1, r1, #4
 800c17c:	6021      	strge	r1, [r4, #0]
 800c17e:	b90e      	cbnz	r6, 800c184 <_printf_i+0x118>
 800c180:	2d00      	cmp	r5, #0
 800c182:	d04d      	beq.n	800c220 <_printf_i+0x1b4>
 800c184:	4615      	mov	r5, r2
 800c186:	fbb6 f1f3 	udiv	r1, r6, r3
 800c18a:	fb03 6711 	mls	r7, r3, r1, r6
 800c18e:	5dc7      	ldrb	r7, [r0, r7]
 800c190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c194:	4637      	mov	r7, r6
 800c196:	42bb      	cmp	r3, r7
 800c198:	460e      	mov	r6, r1
 800c19a:	d9f4      	bls.n	800c186 <_printf_i+0x11a>
 800c19c:	2b08      	cmp	r3, #8
 800c19e:	d10b      	bne.n	800c1b8 <_printf_i+0x14c>
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	07de      	lsls	r6, r3, #31
 800c1a4:	d508      	bpl.n	800c1b8 <_printf_i+0x14c>
 800c1a6:	6923      	ldr	r3, [r4, #16]
 800c1a8:	6861      	ldr	r1, [r4, #4]
 800c1aa:	4299      	cmp	r1, r3
 800c1ac:	bfde      	ittt	le
 800c1ae:	2330      	movle	r3, #48	; 0x30
 800c1b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c1b8:	1b52      	subs	r2, r2, r5
 800c1ba:	6122      	str	r2, [r4, #16]
 800c1bc:	f8cd a000 	str.w	sl, [sp]
 800c1c0:	464b      	mov	r3, r9
 800c1c2:	aa03      	add	r2, sp, #12
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	4640      	mov	r0, r8
 800c1c8:	f7ff fee2 	bl	800bf90 <_printf_common>
 800c1cc:	3001      	adds	r0, #1
 800c1ce:	d14c      	bne.n	800c26a <_printf_i+0x1fe>
 800c1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d4:	b004      	add	sp, #16
 800c1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1da:	4835      	ldr	r0, [pc, #212]	; (800c2b0 <_printf_i+0x244>)
 800c1dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c1e0:	6829      	ldr	r1, [r5, #0]
 800c1e2:	6823      	ldr	r3, [r4, #0]
 800c1e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c1e8:	6029      	str	r1, [r5, #0]
 800c1ea:	061d      	lsls	r5, r3, #24
 800c1ec:	d514      	bpl.n	800c218 <_printf_i+0x1ac>
 800c1ee:	07df      	lsls	r7, r3, #31
 800c1f0:	bf44      	itt	mi
 800c1f2:	f043 0320 	orrmi.w	r3, r3, #32
 800c1f6:	6023      	strmi	r3, [r4, #0]
 800c1f8:	b91e      	cbnz	r6, 800c202 <_printf_i+0x196>
 800c1fa:	6823      	ldr	r3, [r4, #0]
 800c1fc:	f023 0320 	bic.w	r3, r3, #32
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	2310      	movs	r3, #16
 800c204:	e7b0      	b.n	800c168 <_printf_i+0xfc>
 800c206:	6823      	ldr	r3, [r4, #0]
 800c208:	f043 0320 	orr.w	r3, r3, #32
 800c20c:	6023      	str	r3, [r4, #0]
 800c20e:	2378      	movs	r3, #120	; 0x78
 800c210:	4828      	ldr	r0, [pc, #160]	; (800c2b4 <_printf_i+0x248>)
 800c212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c216:	e7e3      	b.n	800c1e0 <_printf_i+0x174>
 800c218:	0659      	lsls	r1, r3, #25
 800c21a:	bf48      	it	mi
 800c21c:	b2b6      	uxthmi	r6, r6
 800c21e:	e7e6      	b.n	800c1ee <_printf_i+0x182>
 800c220:	4615      	mov	r5, r2
 800c222:	e7bb      	b.n	800c19c <_printf_i+0x130>
 800c224:	682b      	ldr	r3, [r5, #0]
 800c226:	6826      	ldr	r6, [r4, #0]
 800c228:	6961      	ldr	r1, [r4, #20]
 800c22a:	1d18      	adds	r0, r3, #4
 800c22c:	6028      	str	r0, [r5, #0]
 800c22e:	0635      	lsls	r5, r6, #24
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	d501      	bpl.n	800c238 <_printf_i+0x1cc>
 800c234:	6019      	str	r1, [r3, #0]
 800c236:	e002      	b.n	800c23e <_printf_i+0x1d2>
 800c238:	0670      	lsls	r0, r6, #25
 800c23a:	d5fb      	bpl.n	800c234 <_printf_i+0x1c8>
 800c23c:	8019      	strh	r1, [r3, #0]
 800c23e:	2300      	movs	r3, #0
 800c240:	6123      	str	r3, [r4, #16]
 800c242:	4615      	mov	r5, r2
 800c244:	e7ba      	b.n	800c1bc <_printf_i+0x150>
 800c246:	682b      	ldr	r3, [r5, #0]
 800c248:	1d1a      	adds	r2, r3, #4
 800c24a:	602a      	str	r2, [r5, #0]
 800c24c:	681d      	ldr	r5, [r3, #0]
 800c24e:	6862      	ldr	r2, [r4, #4]
 800c250:	2100      	movs	r1, #0
 800c252:	4628      	mov	r0, r5
 800c254:	f7f3 ffe4 	bl	8000220 <memchr>
 800c258:	b108      	cbz	r0, 800c25e <_printf_i+0x1f2>
 800c25a:	1b40      	subs	r0, r0, r5
 800c25c:	6060      	str	r0, [r4, #4]
 800c25e:	6863      	ldr	r3, [r4, #4]
 800c260:	6123      	str	r3, [r4, #16]
 800c262:	2300      	movs	r3, #0
 800c264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c268:	e7a8      	b.n	800c1bc <_printf_i+0x150>
 800c26a:	6923      	ldr	r3, [r4, #16]
 800c26c:	462a      	mov	r2, r5
 800c26e:	4649      	mov	r1, r9
 800c270:	4640      	mov	r0, r8
 800c272:	47d0      	blx	sl
 800c274:	3001      	adds	r0, #1
 800c276:	d0ab      	beq.n	800c1d0 <_printf_i+0x164>
 800c278:	6823      	ldr	r3, [r4, #0]
 800c27a:	079b      	lsls	r3, r3, #30
 800c27c:	d413      	bmi.n	800c2a6 <_printf_i+0x23a>
 800c27e:	68e0      	ldr	r0, [r4, #12]
 800c280:	9b03      	ldr	r3, [sp, #12]
 800c282:	4298      	cmp	r0, r3
 800c284:	bfb8      	it	lt
 800c286:	4618      	movlt	r0, r3
 800c288:	e7a4      	b.n	800c1d4 <_printf_i+0x168>
 800c28a:	2301      	movs	r3, #1
 800c28c:	4632      	mov	r2, r6
 800c28e:	4649      	mov	r1, r9
 800c290:	4640      	mov	r0, r8
 800c292:	47d0      	blx	sl
 800c294:	3001      	adds	r0, #1
 800c296:	d09b      	beq.n	800c1d0 <_printf_i+0x164>
 800c298:	3501      	adds	r5, #1
 800c29a:	68e3      	ldr	r3, [r4, #12]
 800c29c:	9903      	ldr	r1, [sp, #12]
 800c29e:	1a5b      	subs	r3, r3, r1
 800c2a0:	42ab      	cmp	r3, r5
 800c2a2:	dcf2      	bgt.n	800c28a <_printf_i+0x21e>
 800c2a4:	e7eb      	b.n	800c27e <_printf_i+0x212>
 800c2a6:	2500      	movs	r5, #0
 800c2a8:	f104 0619 	add.w	r6, r4, #25
 800c2ac:	e7f5      	b.n	800c29a <_printf_i+0x22e>
 800c2ae:	bf00      	nop
 800c2b0:	0800fdc2 	.word	0x0800fdc2
 800c2b4:	0800fdd3 	.word	0x0800fdd3

0800c2b8 <siprintf>:
 800c2b8:	b40e      	push	{r1, r2, r3}
 800c2ba:	b500      	push	{lr}
 800c2bc:	b09c      	sub	sp, #112	; 0x70
 800c2be:	ab1d      	add	r3, sp, #116	; 0x74
 800c2c0:	9002      	str	r0, [sp, #8]
 800c2c2:	9006      	str	r0, [sp, #24]
 800c2c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c2c8:	4809      	ldr	r0, [pc, #36]	; (800c2f0 <siprintf+0x38>)
 800c2ca:	9107      	str	r1, [sp, #28]
 800c2cc:	9104      	str	r1, [sp, #16]
 800c2ce:	4909      	ldr	r1, [pc, #36]	; (800c2f4 <siprintf+0x3c>)
 800c2d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2d4:	9105      	str	r1, [sp, #20]
 800c2d6:	6800      	ldr	r0, [r0, #0]
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	a902      	add	r1, sp, #8
 800c2dc:	f001 fb76 	bl	800d9cc <_svfiprintf_r>
 800c2e0:	9b02      	ldr	r3, [sp, #8]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	701a      	strb	r2, [r3, #0]
 800c2e6:	b01c      	add	sp, #112	; 0x70
 800c2e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2ec:	b003      	add	sp, #12
 800c2ee:	4770      	bx	lr
 800c2f0:	200000a8 	.word	0x200000a8
 800c2f4:	ffff0208 	.word	0xffff0208

0800c2f8 <quorem>:
 800c2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fc:	6903      	ldr	r3, [r0, #16]
 800c2fe:	690c      	ldr	r4, [r1, #16]
 800c300:	42a3      	cmp	r3, r4
 800c302:	4607      	mov	r7, r0
 800c304:	f2c0 8081 	blt.w	800c40a <quorem+0x112>
 800c308:	3c01      	subs	r4, #1
 800c30a:	f101 0814 	add.w	r8, r1, #20
 800c30e:	f100 0514 	add.w	r5, r0, #20
 800c312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c316:	9301      	str	r3, [sp, #4]
 800c318:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c31c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c320:	3301      	adds	r3, #1
 800c322:	429a      	cmp	r2, r3
 800c324:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c328:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c32c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c330:	d331      	bcc.n	800c396 <quorem+0x9e>
 800c332:	f04f 0e00 	mov.w	lr, #0
 800c336:	4640      	mov	r0, r8
 800c338:	46ac      	mov	ip, r5
 800c33a:	46f2      	mov	sl, lr
 800c33c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c340:	b293      	uxth	r3, r2
 800c342:	fb06 e303 	mla	r3, r6, r3, lr
 800c346:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	ebaa 0303 	sub.w	r3, sl, r3
 800c350:	f8dc a000 	ldr.w	sl, [ip]
 800c354:	0c12      	lsrs	r2, r2, #16
 800c356:	fa13 f38a 	uxtah	r3, r3, sl
 800c35a:	fb06 e202 	mla	r2, r6, r2, lr
 800c35e:	9300      	str	r3, [sp, #0]
 800c360:	9b00      	ldr	r3, [sp, #0]
 800c362:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c366:	b292      	uxth	r2, r2
 800c368:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c36c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c370:	f8bd 3000 	ldrh.w	r3, [sp]
 800c374:	4581      	cmp	r9, r0
 800c376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c37a:	f84c 3b04 	str.w	r3, [ip], #4
 800c37e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c382:	d2db      	bcs.n	800c33c <quorem+0x44>
 800c384:	f855 300b 	ldr.w	r3, [r5, fp]
 800c388:	b92b      	cbnz	r3, 800c396 <quorem+0x9e>
 800c38a:	9b01      	ldr	r3, [sp, #4]
 800c38c:	3b04      	subs	r3, #4
 800c38e:	429d      	cmp	r5, r3
 800c390:	461a      	mov	r2, r3
 800c392:	d32e      	bcc.n	800c3f2 <quorem+0xfa>
 800c394:	613c      	str	r4, [r7, #16]
 800c396:	4638      	mov	r0, r7
 800c398:	f001 f8c4 	bl	800d524 <__mcmp>
 800c39c:	2800      	cmp	r0, #0
 800c39e:	db24      	blt.n	800c3ea <quorem+0xf2>
 800c3a0:	3601      	adds	r6, #1
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f04f 0c00 	mov.w	ip, #0
 800c3a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c3ac:	f8d0 e000 	ldr.w	lr, [r0]
 800c3b0:	b293      	uxth	r3, r2
 800c3b2:	ebac 0303 	sub.w	r3, ip, r3
 800c3b6:	0c12      	lsrs	r2, r2, #16
 800c3b8:	fa13 f38e 	uxtah	r3, r3, lr
 800c3bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c3c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3ca:	45c1      	cmp	r9, r8
 800c3cc:	f840 3b04 	str.w	r3, [r0], #4
 800c3d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c3d4:	d2e8      	bcs.n	800c3a8 <quorem+0xb0>
 800c3d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3de:	b922      	cbnz	r2, 800c3ea <quorem+0xf2>
 800c3e0:	3b04      	subs	r3, #4
 800c3e2:	429d      	cmp	r5, r3
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	d30a      	bcc.n	800c3fe <quorem+0x106>
 800c3e8:	613c      	str	r4, [r7, #16]
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	b003      	add	sp, #12
 800c3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f2:	6812      	ldr	r2, [r2, #0]
 800c3f4:	3b04      	subs	r3, #4
 800c3f6:	2a00      	cmp	r2, #0
 800c3f8:	d1cc      	bne.n	800c394 <quorem+0x9c>
 800c3fa:	3c01      	subs	r4, #1
 800c3fc:	e7c7      	b.n	800c38e <quorem+0x96>
 800c3fe:	6812      	ldr	r2, [r2, #0]
 800c400:	3b04      	subs	r3, #4
 800c402:	2a00      	cmp	r2, #0
 800c404:	d1f0      	bne.n	800c3e8 <quorem+0xf0>
 800c406:	3c01      	subs	r4, #1
 800c408:	e7eb      	b.n	800c3e2 <quorem+0xea>
 800c40a:	2000      	movs	r0, #0
 800c40c:	e7ee      	b.n	800c3ec <quorem+0xf4>
	...

0800c410 <_dtoa_r>:
 800c410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	ed2d 8b04 	vpush	{d8-d9}
 800c418:	ec57 6b10 	vmov	r6, r7, d0
 800c41c:	b093      	sub	sp, #76	; 0x4c
 800c41e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c420:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c424:	9106      	str	r1, [sp, #24]
 800c426:	ee10 aa10 	vmov	sl, s0
 800c42a:	4604      	mov	r4, r0
 800c42c:	9209      	str	r2, [sp, #36]	; 0x24
 800c42e:	930c      	str	r3, [sp, #48]	; 0x30
 800c430:	46bb      	mov	fp, r7
 800c432:	b975      	cbnz	r5, 800c452 <_dtoa_r+0x42>
 800c434:	2010      	movs	r0, #16
 800c436:	f000 fddd 	bl	800cff4 <malloc>
 800c43a:	4602      	mov	r2, r0
 800c43c:	6260      	str	r0, [r4, #36]	; 0x24
 800c43e:	b920      	cbnz	r0, 800c44a <_dtoa_r+0x3a>
 800c440:	4ba7      	ldr	r3, [pc, #668]	; (800c6e0 <_dtoa_r+0x2d0>)
 800c442:	21ea      	movs	r1, #234	; 0xea
 800c444:	48a7      	ldr	r0, [pc, #668]	; (800c6e4 <_dtoa_r+0x2d4>)
 800c446:	f001 fbd1 	bl	800dbec <__assert_func>
 800c44a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c44e:	6005      	str	r5, [r0, #0]
 800c450:	60c5      	str	r5, [r0, #12]
 800c452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c454:	6819      	ldr	r1, [r3, #0]
 800c456:	b151      	cbz	r1, 800c46e <_dtoa_r+0x5e>
 800c458:	685a      	ldr	r2, [r3, #4]
 800c45a:	604a      	str	r2, [r1, #4]
 800c45c:	2301      	movs	r3, #1
 800c45e:	4093      	lsls	r3, r2
 800c460:	608b      	str	r3, [r1, #8]
 800c462:	4620      	mov	r0, r4
 800c464:	f000 fe1c 	bl	800d0a0 <_Bfree>
 800c468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c46a:	2200      	movs	r2, #0
 800c46c:	601a      	str	r2, [r3, #0]
 800c46e:	1e3b      	subs	r3, r7, #0
 800c470:	bfaa      	itet	ge
 800c472:	2300      	movge	r3, #0
 800c474:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c478:	f8c8 3000 	strge.w	r3, [r8]
 800c47c:	4b9a      	ldr	r3, [pc, #616]	; (800c6e8 <_dtoa_r+0x2d8>)
 800c47e:	bfbc      	itt	lt
 800c480:	2201      	movlt	r2, #1
 800c482:	f8c8 2000 	strlt.w	r2, [r8]
 800c486:	ea33 030b 	bics.w	r3, r3, fp
 800c48a:	d11b      	bne.n	800c4c4 <_dtoa_r+0xb4>
 800c48c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c48e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c492:	6013      	str	r3, [r2, #0]
 800c494:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c498:	4333      	orrs	r3, r6
 800c49a:	f000 8592 	beq.w	800cfc2 <_dtoa_r+0xbb2>
 800c49e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4a0:	b963      	cbnz	r3, 800c4bc <_dtoa_r+0xac>
 800c4a2:	4b92      	ldr	r3, [pc, #584]	; (800c6ec <_dtoa_r+0x2dc>)
 800c4a4:	e022      	b.n	800c4ec <_dtoa_r+0xdc>
 800c4a6:	4b92      	ldr	r3, [pc, #584]	; (800c6f0 <_dtoa_r+0x2e0>)
 800c4a8:	9301      	str	r3, [sp, #4]
 800c4aa:	3308      	adds	r3, #8
 800c4ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c4ae:	6013      	str	r3, [r2, #0]
 800c4b0:	9801      	ldr	r0, [sp, #4]
 800c4b2:	b013      	add	sp, #76	; 0x4c
 800c4b4:	ecbd 8b04 	vpop	{d8-d9}
 800c4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4bc:	4b8b      	ldr	r3, [pc, #556]	; (800c6ec <_dtoa_r+0x2dc>)
 800c4be:	9301      	str	r3, [sp, #4]
 800c4c0:	3303      	adds	r3, #3
 800c4c2:	e7f3      	b.n	800c4ac <_dtoa_r+0x9c>
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	4650      	mov	r0, sl
 800c4ca:	4659      	mov	r1, fp
 800c4cc:	f7f4 fb1c 	bl	8000b08 <__aeabi_dcmpeq>
 800c4d0:	ec4b ab19 	vmov	d9, sl, fp
 800c4d4:	4680      	mov	r8, r0
 800c4d6:	b158      	cbz	r0, 800c4f0 <_dtoa_r+0xe0>
 800c4d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4da:	2301      	movs	r3, #1
 800c4dc:	6013      	str	r3, [r2, #0]
 800c4de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f000 856b 	beq.w	800cfbc <_dtoa_r+0xbac>
 800c4e6:	4883      	ldr	r0, [pc, #524]	; (800c6f4 <_dtoa_r+0x2e4>)
 800c4e8:	6018      	str	r0, [r3, #0]
 800c4ea:	1e43      	subs	r3, r0, #1
 800c4ec:	9301      	str	r3, [sp, #4]
 800c4ee:	e7df      	b.n	800c4b0 <_dtoa_r+0xa0>
 800c4f0:	ec4b ab10 	vmov	d0, sl, fp
 800c4f4:	aa10      	add	r2, sp, #64	; 0x40
 800c4f6:	a911      	add	r1, sp, #68	; 0x44
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	f001 f8b9 	bl	800d670 <__d2b>
 800c4fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c502:	ee08 0a10 	vmov	s16, r0
 800c506:	2d00      	cmp	r5, #0
 800c508:	f000 8084 	beq.w	800c614 <_dtoa_r+0x204>
 800c50c:	ee19 3a90 	vmov	r3, s19
 800c510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c514:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c518:	4656      	mov	r6, sl
 800c51a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c51e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c522:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c526:	4b74      	ldr	r3, [pc, #464]	; (800c6f8 <_dtoa_r+0x2e8>)
 800c528:	2200      	movs	r2, #0
 800c52a:	4630      	mov	r0, r6
 800c52c:	4639      	mov	r1, r7
 800c52e:	f7f3 fecb 	bl	80002c8 <__aeabi_dsub>
 800c532:	a365      	add	r3, pc, #404	; (adr r3, 800c6c8 <_dtoa_r+0x2b8>)
 800c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c538:	f7f4 f87e 	bl	8000638 <__aeabi_dmul>
 800c53c:	a364      	add	r3, pc, #400	; (adr r3, 800c6d0 <_dtoa_r+0x2c0>)
 800c53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c542:	f7f3 fec3 	bl	80002cc <__adddf3>
 800c546:	4606      	mov	r6, r0
 800c548:	4628      	mov	r0, r5
 800c54a:	460f      	mov	r7, r1
 800c54c:	f7f4 f80a 	bl	8000564 <__aeabi_i2d>
 800c550:	a361      	add	r3, pc, #388	; (adr r3, 800c6d8 <_dtoa_r+0x2c8>)
 800c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c556:	f7f4 f86f 	bl	8000638 <__aeabi_dmul>
 800c55a:	4602      	mov	r2, r0
 800c55c:	460b      	mov	r3, r1
 800c55e:	4630      	mov	r0, r6
 800c560:	4639      	mov	r1, r7
 800c562:	f7f3 feb3 	bl	80002cc <__adddf3>
 800c566:	4606      	mov	r6, r0
 800c568:	460f      	mov	r7, r1
 800c56a:	f7f4 fb15 	bl	8000b98 <__aeabi_d2iz>
 800c56e:	2200      	movs	r2, #0
 800c570:	9000      	str	r0, [sp, #0]
 800c572:	2300      	movs	r3, #0
 800c574:	4630      	mov	r0, r6
 800c576:	4639      	mov	r1, r7
 800c578:	f7f4 fad0 	bl	8000b1c <__aeabi_dcmplt>
 800c57c:	b150      	cbz	r0, 800c594 <_dtoa_r+0x184>
 800c57e:	9800      	ldr	r0, [sp, #0]
 800c580:	f7f3 fff0 	bl	8000564 <__aeabi_i2d>
 800c584:	4632      	mov	r2, r6
 800c586:	463b      	mov	r3, r7
 800c588:	f7f4 fabe 	bl	8000b08 <__aeabi_dcmpeq>
 800c58c:	b910      	cbnz	r0, 800c594 <_dtoa_r+0x184>
 800c58e:	9b00      	ldr	r3, [sp, #0]
 800c590:	3b01      	subs	r3, #1
 800c592:	9300      	str	r3, [sp, #0]
 800c594:	9b00      	ldr	r3, [sp, #0]
 800c596:	2b16      	cmp	r3, #22
 800c598:	d85a      	bhi.n	800c650 <_dtoa_r+0x240>
 800c59a:	9a00      	ldr	r2, [sp, #0]
 800c59c:	4b57      	ldr	r3, [pc, #348]	; (800c6fc <_dtoa_r+0x2ec>)
 800c59e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a6:	ec51 0b19 	vmov	r0, r1, d9
 800c5aa:	f7f4 fab7 	bl	8000b1c <__aeabi_dcmplt>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d050      	beq.n	800c654 <_dtoa_r+0x244>
 800c5b2:	9b00      	ldr	r3, [sp, #0]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	9300      	str	r3, [sp, #0]
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5be:	1b5d      	subs	r5, r3, r5
 800c5c0:	1e6b      	subs	r3, r5, #1
 800c5c2:	9305      	str	r3, [sp, #20]
 800c5c4:	bf45      	ittet	mi
 800c5c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800c5ca:	9304      	strmi	r3, [sp, #16]
 800c5cc:	2300      	movpl	r3, #0
 800c5ce:	2300      	movmi	r3, #0
 800c5d0:	bf4c      	ite	mi
 800c5d2:	9305      	strmi	r3, [sp, #20]
 800c5d4:	9304      	strpl	r3, [sp, #16]
 800c5d6:	9b00      	ldr	r3, [sp, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	db3d      	blt.n	800c658 <_dtoa_r+0x248>
 800c5dc:	9b05      	ldr	r3, [sp, #20]
 800c5de:	9a00      	ldr	r2, [sp, #0]
 800c5e0:	920a      	str	r2, [sp, #40]	; 0x28
 800c5e2:	4413      	add	r3, r2
 800c5e4:	9305      	str	r3, [sp, #20]
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	9307      	str	r3, [sp, #28]
 800c5ea:	9b06      	ldr	r3, [sp, #24]
 800c5ec:	2b09      	cmp	r3, #9
 800c5ee:	f200 8089 	bhi.w	800c704 <_dtoa_r+0x2f4>
 800c5f2:	2b05      	cmp	r3, #5
 800c5f4:	bfc4      	itt	gt
 800c5f6:	3b04      	subgt	r3, #4
 800c5f8:	9306      	strgt	r3, [sp, #24]
 800c5fa:	9b06      	ldr	r3, [sp, #24]
 800c5fc:	f1a3 0302 	sub.w	r3, r3, #2
 800c600:	bfcc      	ite	gt
 800c602:	2500      	movgt	r5, #0
 800c604:	2501      	movle	r5, #1
 800c606:	2b03      	cmp	r3, #3
 800c608:	f200 8087 	bhi.w	800c71a <_dtoa_r+0x30a>
 800c60c:	e8df f003 	tbb	[pc, r3]
 800c610:	59383a2d 	.word	0x59383a2d
 800c614:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c618:	441d      	add	r5, r3
 800c61a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c61e:	2b20      	cmp	r3, #32
 800c620:	bfc1      	itttt	gt
 800c622:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c626:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c62a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c62e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c632:	bfda      	itte	le
 800c634:	f1c3 0320 	rsble	r3, r3, #32
 800c638:	fa06 f003 	lslle.w	r0, r6, r3
 800c63c:	4318      	orrgt	r0, r3
 800c63e:	f7f3 ff81 	bl	8000544 <__aeabi_ui2d>
 800c642:	2301      	movs	r3, #1
 800c644:	4606      	mov	r6, r0
 800c646:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c64a:	3d01      	subs	r5, #1
 800c64c:	930e      	str	r3, [sp, #56]	; 0x38
 800c64e:	e76a      	b.n	800c526 <_dtoa_r+0x116>
 800c650:	2301      	movs	r3, #1
 800c652:	e7b2      	b.n	800c5ba <_dtoa_r+0x1aa>
 800c654:	900b      	str	r0, [sp, #44]	; 0x2c
 800c656:	e7b1      	b.n	800c5bc <_dtoa_r+0x1ac>
 800c658:	9b04      	ldr	r3, [sp, #16]
 800c65a:	9a00      	ldr	r2, [sp, #0]
 800c65c:	1a9b      	subs	r3, r3, r2
 800c65e:	9304      	str	r3, [sp, #16]
 800c660:	4253      	negs	r3, r2
 800c662:	9307      	str	r3, [sp, #28]
 800c664:	2300      	movs	r3, #0
 800c666:	930a      	str	r3, [sp, #40]	; 0x28
 800c668:	e7bf      	b.n	800c5ea <_dtoa_r+0x1da>
 800c66a:	2300      	movs	r3, #0
 800c66c:	9308      	str	r3, [sp, #32]
 800c66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c670:	2b00      	cmp	r3, #0
 800c672:	dc55      	bgt.n	800c720 <_dtoa_r+0x310>
 800c674:	2301      	movs	r3, #1
 800c676:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c67a:	461a      	mov	r2, r3
 800c67c:	9209      	str	r2, [sp, #36]	; 0x24
 800c67e:	e00c      	b.n	800c69a <_dtoa_r+0x28a>
 800c680:	2301      	movs	r3, #1
 800c682:	e7f3      	b.n	800c66c <_dtoa_r+0x25c>
 800c684:	2300      	movs	r3, #0
 800c686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c688:	9308      	str	r3, [sp, #32]
 800c68a:	9b00      	ldr	r3, [sp, #0]
 800c68c:	4413      	add	r3, r2
 800c68e:	9302      	str	r3, [sp, #8]
 800c690:	3301      	adds	r3, #1
 800c692:	2b01      	cmp	r3, #1
 800c694:	9303      	str	r3, [sp, #12]
 800c696:	bfb8      	it	lt
 800c698:	2301      	movlt	r3, #1
 800c69a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c69c:	2200      	movs	r2, #0
 800c69e:	6042      	str	r2, [r0, #4]
 800c6a0:	2204      	movs	r2, #4
 800c6a2:	f102 0614 	add.w	r6, r2, #20
 800c6a6:	429e      	cmp	r6, r3
 800c6a8:	6841      	ldr	r1, [r0, #4]
 800c6aa:	d93d      	bls.n	800c728 <_dtoa_r+0x318>
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	f000 fcb7 	bl	800d020 <_Balloc>
 800c6b2:	9001      	str	r0, [sp, #4]
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	d13b      	bne.n	800c730 <_dtoa_r+0x320>
 800c6b8:	4b11      	ldr	r3, [pc, #68]	; (800c700 <_dtoa_r+0x2f0>)
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c6c0:	e6c0      	b.n	800c444 <_dtoa_r+0x34>
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	e7df      	b.n	800c686 <_dtoa_r+0x276>
 800c6c6:	bf00      	nop
 800c6c8:	636f4361 	.word	0x636f4361
 800c6cc:	3fd287a7 	.word	0x3fd287a7
 800c6d0:	8b60c8b3 	.word	0x8b60c8b3
 800c6d4:	3fc68a28 	.word	0x3fc68a28
 800c6d8:	509f79fb 	.word	0x509f79fb
 800c6dc:	3fd34413 	.word	0x3fd34413
 800c6e0:	0800fdf1 	.word	0x0800fdf1
 800c6e4:	0800fe08 	.word	0x0800fe08
 800c6e8:	7ff00000 	.word	0x7ff00000
 800c6ec:	0800fded 	.word	0x0800fded
 800c6f0:	0800fde4 	.word	0x0800fde4
 800c6f4:	0800fdc1 	.word	0x0800fdc1
 800c6f8:	3ff80000 	.word	0x3ff80000
 800c6fc:	0800fef8 	.word	0x0800fef8
 800c700:	0800fe63 	.word	0x0800fe63
 800c704:	2501      	movs	r5, #1
 800c706:	2300      	movs	r3, #0
 800c708:	9306      	str	r3, [sp, #24]
 800c70a:	9508      	str	r5, [sp, #32]
 800c70c:	f04f 33ff 	mov.w	r3, #4294967295
 800c710:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c714:	2200      	movs	r2, #0
 800c716:	2312      	movs	r3, #18
 800c718:	e7b0      	b.n	800c67c <_dtoa_r+0x26c>
 800c71a:	2301      	movs	r3, #1
 800c71c:	9308      	str	r3, [sp, #32]
 800c71e:	e7f5      	b.n	800c70c <_dtoa_r+0x2fc>
 800c720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c722:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c726:	e7b8      	b.n	800c69a <_dtoa_r+0x28a>
 800c728:	3101      	adds	r1, #1
 800c72a:	6041      	str	r1, [r0, #4]
 800c72c:	0052      	lsls	r2, r2, #1
 800c72e:	e7b8      	b.n	800c6a2 <_dtoa_r+0x292>
 800c730:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c732:	9a01      	ldr	r2, [sp, #4]
 800c734:	601a      	str	r2, [r3, #0]
 800c736:	9b03      	ldr	r3, [sp, #12]
 800c738:	2b0e      	cmp	r3, #14
 800c73a:	f200 809d 	bhi.w	800c878 <_dtoa_r+0x468>
 800c73e:	2d00      	cmp	r5, #0
 800c740:	f000 809a 	beq.w	800c878 <_dtoa_r+0x468>
 800c744:	9b00      	ldr	r3, [sp, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	dd32      	ble.n	800c7b0 <_dtoa_r+0x3a0>
 800c74a:	4ab7      	ldr	r2, [pc, #732]	; (800ca28 <_dtoa_r+0x618>)
 800c74c:	f003 030f 	and.w	r3, r3, #15
 800c750:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c754:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c758:	9b00      	ldr	r3, [sp, #0]
 800c75a:	05d8      	lsls	r0, r3, #23
 800c75c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c760:	d516      	bpl.n	800c790 <_dtoa_r+0x380>
 800c762:	4bb2      	ldr	r3, [pc, #712]	; (800ca2c <_dtoa_r+0x61c>)
 800c764:	ec51 0b19 	vmov	r0, r1, d9
 800c768:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c76c:	f7f4 f88e 	bl	800088c <__aeabi_ddiv>
 800c770:	f007 070f 	and.w	r7, r7, #15
 800c774:	4682      	mov	sl, r0
 800c776:	468b      	mov	fp, r1
 800c778:	2503      	movs	r5, #3
 800c77a:	4eac      	ldr	r6, [pc, #688]	; (800ca2c <_dtoa_r+0x61c>)
 800c77c:	b957      	cbnz	r7, 800c794 <_dtoa_r+0x384>
 800c77e:	4642      	mov	r2, r8
 800c780:	464b      	mov	r3, r9
 800c782:	4650      	mov	r0, sl
 800c784:	4659      	mov	r1, fp
 800c786:	f7f4 f881 	bl	800088c <__aeabi_ddiv>
 800c78a:	4682      	mov	sl, r0
 800c78c:	468b      	mov	fp, r1
 800c78e:	e028      	b.n	800c7e2 <_dtoa_r+0x3d2>
 800c790:	2502      	movs	r5, #2
 800c792:	e7f2      	b.n	800c77a <_dtoa_r+0x36a>
 800c794:	07f9      	lsls	r1, r7, #31
 800c796:	d508      	bpl.n	800c7aa <_dtoa_r+0x39a>
 800c798:	4640      	mov	r0, r8
 800c79a:	4649      	mov	r1, r9
 800c79c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c7a0:	f7f3 ff4a 	bl	8000638 <__aeabi_dmul>
 800c7a4:	3501      	adds	r5, #1
 800c7a6:	4680      	mov	r8, r0
 800c7a8:	4689      	mov	r9, r1
 800c7aa:	107f      	asrs	r7, r7, #1
 800c7ac:	3608      	adds	r6, #8
 800c7ae:	e7e5      	b.n	800c77c <_dtoa_r+0x36c>
 800c7b0:	f000 809b 	beq.w	800c8ea <_dtoa_r+0x4da>
 800c7b4:	9b00      	ldr	r3, [sp, #0]
 800c7b6:	4f9d      	ldr	r7, [pc, #628]	; (800ca2c <_dtoa_r+0x61c>)
 800c7b8:	425e      	negs	r6, r3
 800c7ba:	4b9b      	ldr	r3, [pc, #620]	; (800ca28 <_dtoa_r+0x618>)
 800c7bc:	f006 020f 	and.w	r2, r6, #15
 800c7c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c8:	ec51 0b19 	vmov	r0, r1, d9
 800c7cc:	f7f3 ff34 	bl	8000638 <__aeabi_dmul>
 800c7d0:	1136      	asrs	r6, r6, #4
 800c7d2:	4682      	mov	sl, r0
 800c7d4:	468b      	mov	fp, r1
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	2502      	movs	r5, #2
 800c7da:	2e00      	cmp	r6, #0
 800c7dc:	d17a      	bne.n	800c8d4 <_dtoa_r+0x4c4>
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d1d3      	bne.n	800c78a <_dtoa_r+0x37a>
 800c7e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f000 8082 	beq.w	800c8ee <_dtoa_r+0x4de>
 800c7ea:	4b91      	ldr	r3, [pc, #580]	; (800ca30 <_dtoa_r+0x620>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	4650      	mov	r0, sl
 800c7f0:	4659      	mov	r1, fp
 800c7f2:	f7f4 f993 	bl	8000b1c <__aeabi_dcmplt>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d079      	beq.n	800c8ee <_dtoa_r+0x4de>
 800c7fa:	9b03      	ldr	r3, [sp, #12]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d076      	beq.n	800c8ee <_dtoa_r+0x4de>
 800c800:	9b02      	ldr	r3, [sp, #8]
 800c802:	2b00      	cmp	r3, #0
 800c804:	dd36      	ble.n	800c874 <_dtoa_r+0x464>
 800c806:	9b00      	ldr	r3, [sp, #0]
 800c808:	4650      	mov	r0, sl
 800c80a:	4659      	mov	r1, fp
 800c80c:	1e5f      	subs	r7, r3, #1
 800c80e:	2200      	movs	r2, #0
 800c810:	4b88      	ldr	r3, [pc, #544]	; (800ca34 <_dtoa_r+0x624>)
 800c812:	f7f3 ff11 	bl	8000638 <__aeabi_dmul>
 800c816:	9e02      	ldr	r6, [sp, #8]
 800c818:	4682      	mov	sl, r0
 800c81a:	468b      	mov	fp, r1
 800c81c:	3501      	adds	r5, #1
 800c81e:	4628      	mov	r0, r5
 800c820:	f7f3 fea0 	bl	8000564 <__aeabi_i2d>
 800c824:	4652      	mov	r2, sl
 800c826:	465b      	mov	r3, fp
 800c828:	f7f3 ff06 	bl	8000638 <__aeabi_dmul>
 800c82c:	4b82      	ldr	r3, [pc, #520]	; (800ca38 <_dtoa_r+0x628>)
 800c82e:	2200      	movs	r2, #0
 800c830:	f7f3 fd4c 	bl	80002cc <__adddf3>
 800c834:	46d0      	mov	r8, sl
 800c836:	46d9      	mov	r9, fp
 800c838:	4682      	mov	sl, r0
 800c83a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c83e:	2e00      	cmp	r6, #0
 800c840:	d158      	bne.n	800c8f4 <_dtoa_r+0x4e4>
 800c842:	4b7e      	ldr	r3, [pc, #504]	; (800ca3c <_dtoa_r+0x62c>)
 800c844:	2200      	movs	r2, #0
 800c846:	4640      	mov	r0, r8
 800c848:	4649      	mov	r1, r9
 800c84a:	f7f3 fd3d 	bl	80002c8 <__aeabi_dsub>
 800c84e:	4652      	mov	r2, sl
 800c850:	465b      	mov	r3, fp
 800c852:	4680      	mov	r8, r0
 800c854:	4689      	mov	r9, r1
 800c856:	f7f4 f97f 	bl	8000b58 <__aeabi_dcmpgt>
 800c85a:	2800      	cmp	r0, #0
 800c85c:	f040 8295 	bne.w	800cd8a <_dtoa_r+0x97a>
 800c860:	4652      	mov	r2, sl
 800c862:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c866:	4640      	mov	r0, r8
 800c868:	4649      	mov	r1, r9
 800c86a:	f7f4 f957 	bl	8000b1c <__aeabi_dcmplt>
 800c86e:	2800      	cmp	r0, #0
 800c870:	f040 8289 	bne.w	800cd86 <_dtoa_r+0x976>
 800c874:	ec5b ab19 	vmov	sl, fp, d9
 800c878:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f2c0 8148 	blt.w	800cb10 <_dtoa_r+0x700>
 800c880:	9a00      	ldr	r2, [sp, #0]
 800c882:	2a0e      	cmp	r2, #14
 800c884:	f300 8144 	bgt.w	800cb10 <_dtoa_r+0x700>
 800c888:	4b67      	ldr	r3, [pc, #412]	; (800ca28 <_dtoa_r+0x618>)
 800c88a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c88e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c894:	2b00      	cmp	r3, #0
 800c896:	f280 80d5 	bge.w	800ca44 <_dtoa_r+0x634>
 800c89a:	9b03      	ldr	r3, [sp, #12]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	f300 80d1 	bgt.w	800ca44 <_dtoa_r+0x634>
 800c8a2:	f040 826f 	bne.w	800cd84 <_dtoa_r+0x974>
 800c8a6:	4b65      	ldr	r3, [pc, #404]	; (800ca3c <_dtoa_r+0x62c>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	4649      	mov	r1, r9
 800c8ae:	f7f3 fec3 	bl	8000638 <__aeabi_dmul>
 800c8b2:	4652      	mov	r2, sl
 800c8b4:	465b      	mov	r3, fp
 800c8b6:	f7f4 f945 	bl	8000b44 <__aeabi_dcmpge>
 800c8ba:	9e03      	ldr	r6, [sp, #12]
 800c8bc:	4637      	mov	r7, r6
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	f040 8245 	bne.w	800cd4e <_dtoa_r+0x93e>
 800c8c4:	9d01      	ldr	r5, [sp, #4]
 800c8c6:	2331      	movs	r3, #49	; 0x31
 800c8c8:	f805 3b01 	strb.w	r3, [r5], #1
 800c8cc:	9b00      	ldr	r3, [sp, #0]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	e240      	b.n	800cd56 <_dtoa_r+0x946>
 800c8d4:	07f2      	lsls	r2, r6, #31
 800c8d6:	d505      	bpl.n	800c8e4 <_dtoa_r+0x4d4>
 800c8d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8dc:	f7f3 feac 	bl	8000638 <__aeabi_dmul>
 800c8e0:	3501      	adds	r5, #1
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	1076      	asrs	r6, r6, #1
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	e777      	b.n	800c7da <_dtoa_r+0x3ca>
 800c8ea:	2502      	movs	r5, #2
 800c8ec:	e779      	b.n	800c7e2 <_dtoa_r+0x3d2>
 800c8ee:	9f00      	ldr	r7, [sp, #0]
 800c8f0:	9e03      	ldr	r6, [sp, #12]
 800c8f2:	e794      	b.n	800c81e <_dtoa_r+0x40e>
 800c8f4:	9901      	ldr	r1, [sp, #4]
 800c8f6:	4b4c      	ldr	r3, [pc, #304]	; (800ca28 <_dtoa_r+0x618>)
 800c8f8:	4431      	add	r1, r6
 800c8fa:	910d      	str	r1, [sp, #52]	; 0x34
 800c8fc:	9908      	ldr	r1, [sp, #32]
 800c8fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c902:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c906:	2900      	cmp	r1, #0
 800c908:	d043      	beq.n	800c992 <_dtoa_r+0x582>
 800c90a:	494d      	ldr	r1, [pc, #308]	; (800ca40 <_dtoa_r+0x630>)
 800c90c:	2000      	movs	r0, #0
 800c90e:	f7f3 ffbd 	bl	800088c <__aeabi_ddiv>
 800c912:	4652      	mov	r2, sl
 800c914:	465b      	mov	r3, fp
 800c916:	f7f3 fcd7 	bl	80002c8 <__aeabi_dsub>
 800c91a:	9d01      	ldr	r5, [sp, #4]
 800c91c:	4682      	mov	sl, r0
 800c91e:	468b      	mov	fp, r1
 800c920:	4649      	mov	r1, r9
 800c922:	4640      	mov	r0, r8
 800c924:	f7f4 f938 	bl	8000b98 <__aeabi_d2iz>
 800c928:	4606      	mov	r6, r0
 800c92a:	f7f3 fe1b 	bl	8000564 <__aeabi_i2d>
 800c92e:	4602      	mov	r2, r0
 800c930:	460b      	mov	r3, r1
 800c932:	4640      	mov	r0, r8
 800c934:	4649      	mov	r1, r9
 800c936:	f7f3 fcc7 	bl	80002c8 <__aeabi_dsub>
 800c93a:	3630      	adds	r6, #48	; 0x30
 800c93c:	f805 6b01 	strb.w	r6, [r5], #1
 800c940:	4652      	mov	r2, sl
 800c942:	465b      	mov	r3, fp
 800c944:	4680      	mov	r8, r0
 800c946:	4689      	mov	r9, r1
 800c948:	f7f4 f8e8 	bl	8000b1c <__aeabi_dcmplt>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	d163      	bne.n	800ca18 <_dtoa_r+0x608>
 800c950:	4642      	mov	r2, r8
 800c952:	464b      	mov	r3, r9
 800c954:	4936      	ldr	r1, [pc, #216]	; (800ca30 <_dtoa_r+0x620>)
 800c956:	2000      	movs	r0, #0
 800c958:	f7f3 fcb6 	bl	80002c8 <__aeabi_dsub>
 800c95c:	4652      	mov	r2, sl
 800c95e:	465b      	mov	r3, fp
 800c960:	f7f4 f8dc 	bl	8000b1c <__aeabi_dcmplt>
 800c964:	2800      	cmp	r0, #0
 800c966:	f040 80b5 	bne.w	800cad4 <_dtoa_r+0x6c4>
 800c96a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c96c:	429d      	cmp	r5, r3
 800c96e:	d081      	beq.n	800c874 <_dtoa_r+0x464>
 800c970:	4b30      	ldr	r3, [pc, #192]	; (800ca34 <_dtoa_r+0x624>)
 800c972:	2200      	movs	r2, #0
 800c974:	4650      	mov	r0, sl
 800c976:	4659      	mov	r1, fp
 800c978:	f7f3 fe5e 	bl	8000638 <__aeabi_dmul>
 800c97c:	4b2d      	ldr	r3, [pc, #180]	; (800ca34 <_dtoa_r+0x624>)
 800c97e:	4682      	mov	sl, r0
 800c980:	468b      	mov	fp, r1
 800c982:	4640      	mov	r0, r8
 800c984:	4649      	mov	r1, r9
 800c986:	2200      	movs	r2, #0
 800c988:	f7f3 fe56 	bl	8000638 <__aeabi_dmul>
 800c98c:	4680      	mov	r8, r0
 800c98e:	4689      	mov	r9, r1
 800c990:	e7c6      	b.n	800c920 <_dtoa_r+0x510>
 800c992:	4650      	mov	r0, sl
 800c994:	4659      	mov	r1, fp
 800c996:	f7f3 fe4f 	bl	8000638 <__aeabi_dmul>
 800c99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c99c:	9d01      	ldr	r5, [sp, #4]
 800c99e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9a0:	4682      	mov	sl, r0
 800c9a2:	468b      	mov	fp, r1
 800c9a4:	4649      	mov	r1, r9
 800c9a6:	4640      	mov	r0, r8
 800c9a8:	f7f4 f8f6 	bl	8000b98 <__aeabi_d2iz>
 800c9ac:	4606      	mov	r6, r0
 800c9ae:	f7f3 fdd9 	bl	8000564 <__aeabi_i2d>
 800c9b2:	3630      	adds	r6, #48	; 0x30
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	4640      	mov	r0, r8
 800c9ba:	4649      	mov	r1, r9
 800c9bc:	f7f3 fc84 	bl	80002c8 <__aeabi_dsub>
 800c9c0:	f805 6b01 	strb.w	r6, [r5], #1
 800c9c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9c6:	429d      	cmp	r5, r3
 800c9c8:	4680      	mov	r8, r0
 800c9ca:	4689      	mov	r9, r1
 800c9cc:	f04f 0200 	mov.w	r2, #0
 800c9d0:	d124      	bne.n	800ca1c <_dtoa_r+0x60c>
 800c9d2:	4b1b      	ldr	r3, [pc, #108]	; (800ca40 <_dtoa_r+0x630>)
 800c9d4:	4650      	mov	r0, sl
 800c9d6:	4659      	mov	r1, fp
 800c9d8:	f7f3 fc78 	bl	80002cc <__adddf3>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	460b      	mov	r3, r1
 800c9e0:	4640      	mov	r0, r8
 800c9e2:	4649      	mov	r1, r9
 800c9e4:	f7f4 f8b8 	bl	8000b58 <__aeabi_dcmpgt>
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	d173      	bne.n	800cad4 <_dtoa_r+0x6c4>
 800c9ec:	4652      	mov	r2, sl
 800c9ee:	465b      	mov	r3, fp
 800c9f0:	4913      	ldr	r1, [pc, #76]	; (800ca40 <_dtoa_r+0x630>)
 800c9f2:	2000      	movs	r0, #0
 800c9f4:	f7f3 fc68 	bl	80002c8 <__aeabi_dsub>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	4640      	mov	r0, r8
 800c9fe:	4649      	mov	r1, r9
 800ca00:	f7f4 f88c 	bl	8000b1c <__aeabi_dcmplt>
 800ca04:	2800      	cmp	r0, #0
 800ca06:	f43f af35 	beq.w	800c874 <_dtoa_r+0x464>
 800ca0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ca0c:	1e6b      	subs	r3, r5, #1
 800ca0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca14:	2b30      	cmp	r3, #48	; 0x30
 800ca16:	d0f8      	beq.n	800ca0a <_dtoa_r+0x5fa>
 800ca18:	9700      	str	r7, [sp, #0]
 800ca1a:	e049      	b.n	800cab0 <_dtoa_r+0x6a0>
 800ca1c:	4b05      	ldr	r3, [pc, #20]	; (800ca34 <_dtoa_r+0x624>)
 800ca1e:	f7f3 fe0b 	bl	8000638 <__aeabi_dmul>
 800ca22:	4680      	mov	r8, r0
 800ca24:	4689      	mov	r9, r1
 800ca26:	e7bd      	b.n	800c9a4 <_dtoa_r+0x594>
 800ca28:	0800fef8 	.word	0x0800fef8
 800ca2c:	0800fed0 	.word	0x0800fed0
 800ca30:	3ff00000 	.word	0x3ff00000
 800ca34:	40240000 	.word	0x40240000
 800ca38:	401c0000 	.word	0x401c0000
 800ca3c:	40140000 	.word	0x40140000
 800ca40:	3fe00000 	.word	0x3fe00000
 800ca44:	9d01      	ldr	r5, [sp, #4]
 800ca46:	4656      	mov	r6, sl
 800ca48:	465f      	mov	r7, fp
 800ca4a:	4642      	mov	r2, r8
 800ca4c:	464b      	mov	r3, r9
 800ca4e:	4630      	mov	r0, r6
 800ca50:	4639      	mov	r1, r7
 800ca52:	f7f3 ff1b 	bl	800088c <__aeabi_ddiv>
 800ca56:	f7f4 f89f 	bl	8000b98 <__aeabi_d2iz>
 800ca5a:	4682      	mov	sl, r0
 800ca5c:	f7f3 fd82 	bl	8000564 <__aeabi_i2d>
 800ca60:	4642      	mov	r2, r8
 800ca62:	464b      	mov	r3, r9
 800ca64:	f7f3 fde8 	bl	8000638 <__aeabi_dmul>
 800ca68:	4602      	mov	r2, r0
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	4639      	mov	r1, r7
 800ca70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ca74:	f7f3 fc28 	bl	80002c8 <__aeabi_dsub>
 800ca78:	f805 6b01 	strb.w	r6, [r5], #1
 800ca7c:	9e01      	ldr	r6, [sp, #4]
 800ca7e:	9f03      	ldr	r7, [sp, #12]
 800ca80:	1bae      	subs	r6, r5, r6
 800ca82:	42b7      	cmp	r7, r6
 800ca84:	4602      	mov	r2, r0
 800ca86:	460b      	mov	r3, r1
 800ca88:	d135      	bne.n	800caf6 <_dtoa_r+0x6e6>
 800ca8a:	f7f3 fc1f 	bl	80002cc <__adddf3>
 800ca8e:	4642      	mov	r2, r8
 800ca90:	464b      	mov	r3, r9
 800ca92:	4606      	mov	r6, r0
 800ca94:	460f      	mov	r7, r1
 800ca96:	f7f4 f85f 	bl	8000b58 <__aeabi_dcmpgt>
 800ca9a:	b9d0      	cbnz	r0, 800cad2 <_dtoa_r+0x6c2>
 800ca9c:	4642      	mov	r2, r8
 800ca9e:	464b      	mov	r3, r9
 800caa0:	4630      	mov	r0, r6
 800caa2:	4639      	mov	r1, r7
 800caa4:	f7f4 f830 	bl	8000b08 <__aeabi_dcmpeq>
 800caa8:	b110      	cbz	r0, 800cab0 <_dtoa_r+0x6a0>
 800caaa:	f01a 0f01 	tst.w	sl, #1
 800caae:	d110      	bne.n	800cad2 <_dtoa_r+0x6c2>
 800cab0:	4620      	mov	r0, r4
 800cab2:	ee18 1a10 	vmov	r1, s16
 800cab6:	f000 faf3 	bl	800d0a0 <_Bfree>
 800caba:	2300      	movs	r3, #0
 800cabc:	9800      	ldr	r0, [sp, #0]
 800cabe:	702b      	strb	r3, [r5, #0]
 800cac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cac2:	3001      	adds	r0, #1
 800cac4:	6018      	str	r0, [r3, #0]
 800cac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f43f acf1 	beq.w	800c4b0 <_dtoa_r+0xa0>
 800cace:	601d      	str	r5, [r3, #0]
 800cad0:	e4ee      	b.n	800c4b0 <_dtoa_r+0xa0>
 800cad2:	9f00      	ldr	r7, [sp, #0]
 800cad4:	462b      	mov	r3, r5
 800cad6:	461d      	mov	r5, r3
 800cad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cadc:	2a39      	cmp	r2, #57	; 0x39
 800cade:	d106      	bne.n	800caee <_dtoa_r+0x6de>
 800cae0:	9a01      	ldr	r2, [sp, #4]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d1f7      	bne.n	800cad6 <_dtoa_r+0x6c6>
 800cae6:	9901      	ldr	r1, [sp, #4]
 800cae8:	2230      	movs	r2, #48	; 0x30
 800caea:	3701      	adds	r7, #1
 800caec:	700a      	strb	r2, [r1, #0]
 800caee:	781a      	ldrb	r2, [r3, #0]
 800caf0:	3201      	adds	r2, #1
 800caf2:	701a      	strb	r2, [r3, #0]
 800caf4:	e790      	b.n	800ca18 <_dtoa_r+0x608>
 800caf6:	4ba6      	ldr	r3, [pc, #664]	; (800cd90 <_dtoa_r+0x980>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	f7f3 fd9d 	bl	8000638 <__aeabi_dmul>
 800cafe:	2200      	movs	r2, #0
 800cb00:	2300      	movs	r3, #0
 800cb02:	4606      	mov	r6, r0
 800cb04:	460f      	mov	r7, r1
 800cb06:	f7f3 ffff 	bl	8000b08 <__aeabi_dcmpeq>
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d09d      	beq.n	800ca4a <_dtoa_r+0x63a>
 800cb0e:	e7cf      	b.n	800cab0 <_dtoa_r+0x6a0>
 800cb10:	9a08      	ldr	r2, [sp, #32]
 800cb12:	2a00      	cmp	r2, #0
 800cb14:	f000 80d7 	beq.w	800ccc6 <_dtoa_r+0x8b6>
 800cb18:	9a06      	ldr	r2, [sp, #24]
 800cb1a:	2a01      	cmp	r2, #1
 800cb1c:	f300 80ba 	bgt.w	800cc94 <_dtoa_r+0x884>
 800cb20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb22:	2a00      	cmp	r2, #0
 800cb24:	f000 80b2 	beq.w	800cc8c <_dtoa_r+0x87c>
 800cb28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb2c:	9e07      	ldr	r6, [sp, #28]
 800cb2e:	9d04      	ldr	r5, [sp, #16]
 800cb30:	9a04      	ldr	r2, [sp, #16]
 800cb32:	441a      	add	r2, r3
 800cb34:	9204      	str	r2, [sp, #16]
 800cb36:	9a05      	ldr	r2, [sp, #20]
 800cb38:	2101      	movs	r1, #1
 800cb3a:	441a      	add	r2, r3
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	9205      	str	r2, [sp, #20]
 800cb40:	f000 fb66 	bl	800d210 <__i2b>
 800cb44:	4607      	mov	r7, r0
 800cb46:	2d00      	cmp	r5, #0
 800cb48:	dd0c      	ble.n	800cb64 <_dtoa_r+0x754>
 800cb4a:	9b05      	ldr	r3, [sp, #20]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	dd09      	ble.n	800cb64 <_dtoa_r+0x754>
 800cb50:	42ab      	cmp	r3, r5
 800cb52:	9a04      	ldr	r2, [sp, #16]
 800cb54:	bfa8      	it	ge
 800cb56:	462b      	movge	r3, r5
 800cb58:	1ad2      	subs	r2, r2, r3
 800cb5a:	9204      	str	r2, [sp, #16]
 800cb5c:	9a05      	ldr	r2, [sp, #20]
 800cb5e:	1aed      	subs	r5, r5, r3
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	9305      	str	r3, [sp, #20]
 800cb64:	9b07      	ldr	r3, [sp, #28]
 800cb66:	b31b      	cbz	r3, 800cbb0 <_dtoa_r+0x7a0>
 800cb68:	9b08      	ldr	r3, [sp, #32]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f000 80af 	beq.w	800ccce <_dtoa_r+0x8be>
 800cb70:	2e00      	cmp	r6, #0
 800cb72:	dd13      	ble.n	800cb9c <_dtoa_r+0x78c>
 800cb74:	4639      	mov	r1, r7
 800cb76:	4632      	mov	r2, r6
 800cb78:	4620      	mov	r0, r4
 800cb7a:	f000 fc09 	bl	800d390 <__pow5mult>
 800cb7e:	ee18 2a10 	vmov	r2, s16
 800cb82:	4601      	mov	r1, r0
 800cb84:	4607      	mov	r7, r0
 800cb86:	4620      	mov	r0, r4
 800cb88:	f000 fb58 	bl	800d23c <__multiply>
 800cb8c:	ee18 1a10 	vmov	r1, s16
 800cb90:	4680      	mov	r8, r0
 800cb92:	4620      	mov	r0, r4
 800cb94:	f000 fa84 	bl	800d0a0 <_Bfree>
 800cb98:	ee08 8a10 	vmov	s16, r8
 800cb9c:	9b07      	ldr	r3, [sp, #28]
 800cb9e:	1b9a      	subs	r2, r3, r6
 800cba0:	d006      	beq.n	800cbb0 <_dtoa_r+0x7a0>
 800cba2:	ee18 1a10 	vmov	r1, s16
 800cba6:	4620      	mov	r0, r4
 800cba8:	f000 fbf2 	bl	800d390 <__pow5mult>
 800cbac:	ee08 0a10 	vmov	s16, r0
 800cbb0:	2101      	movs	r1, #1
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f000 fb2c 	bl	800d210 <__i2b>
 800cbb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	f340 8088 	ble.w	800ccd2 <_dtoa_r+0x8c2>
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	4601      	mov	r1, r0
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f000 fbe2 	bl	800d390 <__pow5mult>
 800cbcc:	9b06      	ldr	r3, [sp, #24]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	4606      	mov	r6, r0
 800cbd2:	f340 8081 	ble.w	800ccd8 <_dtoa_r+0x8c8>
 800cbd6:	f04f 0800 	mov.w	r8, #0
 800cbda:	6933      	ldr	r3, [r6, #16]
 800cbdc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cbe0:	6918      	ldr	r0, [r3, #16]
 800cbe2:	f000 fac5 	bl	800d170 <__hi0bits>
 800cbe6:	f1c0 0020 	rsb	r0, r0, #32
 800cbea:	9b05      	ldr	r3, [sp, #20]
 800cbec:	4418      	add	r0, r3
 800cbee:	f010 001f 	ands.w	r0, r0, #31
 800cbf2:	f000 8092 	beq.w	800cd1a <_dtoa_r+0x90a>
 800cbf6:	f1c0 0320 	rsb	r3, r0, #32
 800cbfa:	2b04      	cmp	r3, #4
 800cbfc:	f340 808a 	ble.w	800cd14 <_dtoa_r+0x904>
 800cc00:	f1c0 001c 	rsb	r0, r0, #28
 800cc04:	9b04      	ldr	r3, [sp, #16]
 800cc06:	4403      	add	r3, r0
 800cc08:	9304      	str	r3, [sp, #16]
 800cc0a:	9b05      	ldr	r3, [sp, #20]
 800cc0c:	4403      	add	r3, r0
 800cc0e:	4405      	add	r5, r0
 800cc10:	9305      	str	r3, [sp, #20]
 800cc12:	9b04      	ldr	r3, [sp, #16]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	dd07      	ble.n	800cc28 <_dtoa_r+0x818>
 800cc18:	ee18 1a10 	vmov	r1, s16
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f000 fc10 	bl	800d444 <__lshift>
 800cc24:	ee08 0a10 	vmov	s16, r0
 800cc28:	9b05      	ldr	r3, [sp, #20]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	dd05      	ble.n	800cc3a <_dtoa_r+0x82a>
 800cc2e:	4631      	mov	r1, r6
 800cc30:	461a      	mov	r2, r3
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 fc06 	bl	800d444 <__lshift>
 800cc38:	4606      	mov	r6, r0
 800cc3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d06e      	beq.n	800cd1e <_dtoa_r+0x90e>
 800cc40:	ee18 0a10 	vmov	r0, s16
 800cc44:	4631      	mov	r1, r6
 800cc46:	f000 fc6d 	bl	800d524 <__mcmp>
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	da67      	bge.n	800cd1e <_dtoa_r+0x90e>
 800cc4e:	9b00      	ldr	r3, [sp, #0]
 800cc50:	3b01      	subs	r3, #1
 800cc52:	ee18 1a10 	vmov	r1, s16
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	220a      	movs	r2, #10
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f000 fa41 	bl	800d0e4 <__multadd>
 800cc62:	9b08      	ldr	r3, [sp, #32]
 800cc64:	ee08 0a10 	vmov	s16, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f000 81b1 	beq.w	800cfd0 <_dtoa_r+0xbc0>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	4639      	mov	r1, r7
 800cc72:	220a      	movs	r2, #10
 800cc74:	4620      	mov	r0, r4
 800cc76:	f000 fa35 	bl	800d0e4 <__multadd>
 800cc7a:	9b02      	ldr	r3, [sp, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	4607      	mov	r7, r0
 800cc80:	f300 808e 	bgt.w	800cda0 <_dtoa_r+0x990>
 800cc84:	9b06      	ldr	r3, [sp, #24]
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	dc51      	bgt.n	800cd2e <_dtoa_r+0x91e>
 800cc8a:	e089      	b.n	800cda0 <_dtoa_r+0x990>
 800cc8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc92:	e74b      	b.n	800cb2c <_dtoa_r+0x71c>
 800cc94:	9b03      	ldr	r3, [sp, #12]
 800cc96:	1e5e      	subs	r6, r3, #1
 800cc98:	9b07      	ldr	r3, [sp, #28]
 800cc9a:	42b3      	cmp	r3, r6
 800cc9c:	bfbf      	itttt	lt
 800cc9e:	9b07      	ldrlt	r3, [sp, #28]
 800cca0:	9607      	strlt	r6, [sp, #28]
 800cca2:	1af2      	sublt	r2, r6, r3
 800cca4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cca6:	bfb6      	itet	lt
 800cca8:	189b      	addlt	r3, r3, r2
 800ccaa:	1b9e      	subge	r6, r3, r6
 800ccac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ccae:	9b03      	ldr	r3, [sp, #12]
 800ccb0:	bfb8      	it	lt
 800ccb2:	2600      	movlt	r6, #0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	bfb7      	itett	lt
 800ccb8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ccbc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ccc0:	1a9d      	sublt	r5, r3, r2
 800ccc2:	2300      	movlt	r3, #0
 800ccc4:	e734      	b.n	800cb30 <_dtoa_r+0x720>
 800ccc6:	9e07      	ldr	r6, [sp, #28]
 800ccc8:	9d04      	ldr	r5, [sp, #16]
 800ccca:	9f08      	ldr	r7, [sp, #32]
 800cccc:	e73b      	b.n	800cb46 <_dtoa_r+0x736>
 800ccce:	9a07      	ldr	r2, [sp, #28]
 800ccd0:	e767      	b.n	800cba2 <_dtoa_r+0x792>
 800ccd2:	9b06      	ldr	r3, [sp, #24]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	dc18      	bgt.n	800cd0a <_dtoa_r+0x8fa>
 800ccd8:	f1ba 0f00 	cmp.w	sl, #0
 800ccdc:	d115      	bne.n	800cd0a <_dtoa_r+0x8fa>
 800ccde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cce2:	b993      	cbnz	r3, 800cd0a <_dtoa_r+0x8fa>
 800cce4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cce8:	0d1b      	lsrs	r3, r3, #20
 800ccea:	051b      	lsls	r3, r3, #20
 800ccec:	b183      	cbz	r3, 800cd10 <_dtoa_r+0x900>
 800ccee:	9b04      	ldr	r3, [sp, #16]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	9304      	str	r3, [sp, #16]
 800ccf4:	9b05      	ldr	r3, [sp, #20]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	9305      	str	r3, [sp, #20]
 800ccfa:	f04f 0801 	mov.w	r8, #1
 800ccfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f47f af6a 	bne.w	800cbda <_dtoa_r+0x7ca>
 800cd06:	2001      	movs	r0, #1
 800cd08:	e76f      	b.n	800cbea <_dtoa_r+0x7da>
 800cd0a:	f04f 0800 	mov.w	r8, #0
 800cd0e:	e7f6      	b.n	800ccfe <_dtoa_r+0x8ee>
 800cd10:	4698      	mov	r8, r3
 800cd12:	e7f4      	b.n	800ccfe <_dtoa_r+0x8ee>
 800cd14:	f43f af7d 	beq.w	800cc12 <_dtoa_r+0x802>
 800cd18:	4618      	mov	r0, r3
 800cd1a:	301c      	adds	r0, #28
 800cd1c:	e772      	b.n	800cc04 <_dtoa_r+0x7f4>
 800cd1e:	9b03      	ldr	r3, [sp, #12]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	dc37      	bgt.n	800cd94 <_dtoa_r+0x984>
 800cd24:	9b06      	ldr	r3, [sp, #24]
 800cd26:	2b02      	cmp	r3, #2
 800cd28:	dd34      	ble.n	800cd94 <_dtoa_r+0x984>
 800cd2a:	9b03      	ldr	r3, [sp, #12]
 800cd2c:	9302      	str	r3, [sp, #8]
 800cd2e:	9b02      	ldr	r3, [sp, #8]
 800cd30:	b96b      	cbnz	r3, 800cd4e <_dtoa_r+0x93e>
 800cd32:	4631      	mov	r1, r6
 800cd34:	2205      	movs	r2, #5
 800cd36:	4620      	mov	r0, r4
 800cd38:	f000 f9d4 	bl	800d0e4 <__multadd>
 800cd3c:	4601      	mov	r1, r0
 800cd3e:	4606      	mov	r6, r0
 800cd40:	ee18 0a10 	vmov	r0, s16
 800cd44:	f000 fbee 	bl	800d524 <__mcmp>
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	f73f adbb 	bgt.w	800c8c4 <_dtoa_r+0x4b4>
 800cd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd50:	9d01      	ldr	r5, [sp, #4]
 800cd52:	43db      	mvns	r3, r3
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	f04f 0800 	mov.w	r8, #0
 800cd5a:	4631      	mov	r1, r6
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	f000 f99f 	bl	800d0a0 <_Bfree>
 800cd62:	2f00      	cmp	r7, #0
 800cd64:	f43f aea4 	beq.w	800cab0 <_dtoa_r+0x6a0>
 800cd68:	f1b8 0f00 	cmp.w	r8, #0
 800cd6c:	d005      	beq.n	800cd7a <_dtoa_r+0x96a>
 800cd6e:	45b8      	cmp	r8, r7
 800cd70:	d003      	beq.n	800cd7a <_dtoa_r+0x96a>
 800cd72:	4641      	mov	r1, r8
 800cd74:	4620      	mov	r0, r4
 800cd76:	f000 f993 	bl	800d0a0 <_Bfree>
 800cd7a:	4639      	mov	r1, r7
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	f000 f98f 	bl	800d0a0 <_Bfree>
 800cd82:	e695      	b.n	800cab0 <_dtoa_r+0x6a0>
 800cd84:	2600      	movs	r6, #0
 800cd86:	4637      	mov	r7, r6
 800cd88:	e7e1      	b.n	800cd4e <_dtoa_r+0x93e>
 800cd8a:	9700      	str	r7, [sp, #0]
 800cd8c:	4637      	mov	r7, r6
 800cd8e:	e599      	b.n	800c8c4 <_dtoa_r+0x4b4>
 800cd90:	40240000 	.word	0x40240000
 800cd94:	9b08      	ldr	r3, [sp, #32]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	f000 80ca 	beq.w	800cf30 <_dtoa_r+0xb20>
 800cd9c:	9b03      	ldr	r3, [sp, #12]
 800cd9e:	9302      	str	r3, [sp, #8]
 800cda0:	2d00      	cmp	r5, #0
 800cda2:	dd05      	ble.n	800cdb0 <_dtoa_r+0x9a0>
 800cda4:	4639      	mov	r1, r7
 800cda6:	462a      	mov	r2, r5
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f000 fb4b 	bl	800d444 <__lshift>
 800cdae:	4607      	mov	r7, r0
 800cdb0:	f1b8 0f00 	cmp.w	r8, #0
 800cdb4:	d05b      	beq.n	800ce6e <_dtoa_r+0xa5e>
 800cdb6:	6879      	ldr	r1, [r7, #4]
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f000 f931 	bl	800d020 <_Balloc>
 800cdbe:	4605      	mov	r5, r0
 800cdc0:	b928      	cbnz	r0, 800cdce <_dtoa_r+0x9be>
 800cdc2:	4b87      	ldr	r3, [pc, #540]	; (800cfe0 <_dtoa_r+0xbd0>)
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cdca:	f7ff bb3b 	b.w	800c444 <_dtoa_r+0x34>
 800cdce:	693a      	ldr	r2, [r7, #16]
 800cdd0:	3202      	adds	r2, #2
 800cdd2:	0092      	lsls	r2, r2, #2
 800cdd4:	f107 010c 	add.w	r1, r7, #12
 800cdd8:	300c      	adds	r0, #12
 800cdda:	f000 f913 	bl	800d004 <memcpy>
 800cdde:	2201      	movs	r2, #1
 800cde0:	4629      	mov	r1, r5
 800cde2:	4620      	mov	r0, r4
 800cde4:	f000 fb2e 	bl	800d444 <__lshift>
 800cde8:	9b01      	ldr	r3, [sp, #4]
 800cdea:	f103 0901 	add.w	r9, r3, #1
 800cdee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cdf2:	4413      	add	r3, r2
 800cdf4:	9305      	str	r3, [sp, #20]
 800cdf6:	f00a 0301 	and.w	r3, sl, #1
 800cdfa:	46b8      	mov	r8, r7
 800cdfc:	9304      	str	r3, [sp, #16]
 800cdfe:	4607      	mov	r7, r0
 800ce00:	4631      	mov	r1, r6
 800ce02:	ee18 0a10 	vmov	r0, s16
 800ce06:	f7ff fa77 	bl	800c2f8 <quorem>
 800ce0a:	4641      	mov	r1, r8
 800ce0c:	9002      	str	r0, [sp, #8]
 800ce0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ce12:	ee18 0a10 	vmov	r0, s16
 800ce16:	f000 fb85 	bl	800d524 <__mcmp>
 800ce1a:	463a      	mov	r2, r7
 800ce1c:	9003      	str	r0, [sp, #12]
 800ce1e:	4631      	mov	r1, r6
 800ce20:	4620      	mov	r0, r4
 800ce22:	f000 fb9b 	bl	800d55c <__mdiff>
 800ce26:	68c2      	ldr	r2, [r0, #12]
 800ce28:	f109 3bff 	add.w	fp, r9, #4294967295
 800ce2c:	4605      	mov	r5, r0
 800ce2e:	bb02      	cbnz	r2, 800ce72 <_dtoa_r+0xa62>
 800ce30:	4601      	mov	r1, r0
 800ce32:	ee18 0a10 	vmov	r0, s16
 800ce36:	f000 fb75 	bl	800d524 <__mcmp>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	4620      	mov	r0, r4
 800ce40:	9207      	str	r2, [sp, #28]
 800ce42:	f000 f92d 	bl	800d0a0 <_Bfree>
 800ce46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ce4a:	ea43 0102 	orr.w	r1, r3, r2
 800ce4e:	9b04      	ldr	r3, [sp, #16]
 800ce50:	430b      	orrs	r3, r1
 800ce52:	464d      	mov	r5, r9
 800ce54:	d10f      	bne.n	800ce76 <_dtoa_r+0xa66>
 800ce56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce5a:	d02a      	beq.n	800ceb2 <_dtoa_r+0xaa2>
 800ce5c:	9b03      	ldr	r3, [sp, #12]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	dd02      	ble.n	800ce68 <_dtoa_r+0xa58>
 800ce62:	9b02      	ldr	r3, [sp, #8]
 800ce64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ce68:	f88b a000 	strb.w	sl, [fp]
 800ce6c:	e775      	b.n	800cd5a <_dtoa_r+0x94a>
 800ce6e:	4638      	mov	r0, r7
 800ce70:	e7ba      	b.n	800cde8 <_dtoa_r+0x9d8>
 800ce72:	2201      	movs	r2, #1
 800ce74:	e7e2      	b.n	800ce3c <_dtoa_r+0xa2c>
 800ce76:	9b03      	ldr	r3, [sp, #12]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	db04      	blt.n	800ce86 <_dtoa_r+0xa76>
 800ce7c:	9906      	ldr	r1, [sp, #24]
 800ce7e:	430b      	orrs	r3, r1
 800ce80:	9904      	ldr	r1, [sp, #16]
 800ce82:	430b      	orrs	r3, r1
 800ce84:	d122      	bne.n	800cecc <_dtoa_r+0xabc>
 800ce86:	2a00      	cmp	r2, #0
 800ce88:	ddee      	ble.n	800ce68 <_dtoa_r+0xa58>
 800ce8a:	ee18 1a10 	vmov	r1, s16
 800ce8e:	2201      	movs	r2, #1
 800ce90:	4620      	mov	r0, r4
 800ce92:	f000 fad7 	bl	800d444 <__lshift>
 800ce96:	4631      	mov	r1, r6
 800ce98:	ee08 0a10 	vmov	s16, r0
 800ce9c:	f000 fb42 	bl	800d524 <__mcmp>
 800cea0:	2800      	cmp	r0, #0
 800cea2:	dc03      	bgt.n	800ceac <_dtoa_r+0xa9c>
 800cea4:	d1e0      	bne.n	800ce68 <_dtoa_r+0xa58>
 800cea6:	f01a 0f01 	tst.w	sl, #1
 800ceaa:	d0dd      	beq.n	800ce68 <_dtoa_r+0xa58>
 800ceac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ceb0:	d1d7      	bne.n	800ce62 <_dtoa_r+0xa52>
 800ceb2:	2339      	movs	r3, #57	; 0x39
 800ceb4:	f88b 3000 	strb.w	r3, [fp]
 800ceb8:	462b      	mov	r3, r5
 800ceba:	461d      	mov	r5, r3
 800cebc:	3b01      	subs	r3, #1
 800cebe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cec2:	2a39      	cmp	r2, #57	; 0x39
 800cec4:	d071      	beq.n	800cfaa <_dtoa_r+0xb9a>
 800cec6:	3201      	adds	r2, #1
 800cec8:	701a      	strb	r2, [r3, #0]
 800ceca:	e746      	b.n	800cd5a <_dtoa_r+0x94a>
 800cecc:	2a00      	cmp	r2, #0
 800cece:	dd07      	ble.n	800cee0 <_dtoa_r+0xad0>
 800ced0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ced4:	d0ed      	beq.n	800ceb2 <_dtoa_r+0xaa2>
 800ced6:	f10a 0301 	add.w	r3, sl, #1
 800ceda:	f88b 3000 	strb.w	r3, [fp]
 800cede:	e73c      	b.n	800cd5a <_dtoa_r+0x94a>
 800cee0:	9b05      	ldr	r3, [sp, #20]
 800cee2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cee6:	4599      	cmp	r9, r3
 800cee8:	d047      	beq.n	800cf7a <_dtoa_r+0xb6a>
 800ceea:	ee18 1a10 	vmov	r1, s16
 800ceee:	2300      	movs	r3, #0
 800cef0:	220a      	movs	r2, #10
 800cef2:	4620      	mov	r0, r4
 800cef4:	f000 f8f6 	bl	800d0e4 <__multadd>
 800cef8:	45b8      	cmp	r8, r7
 800cefa:	ee08 0a10 	vmov	s16, r0
 800cefe:	f04f 0300 	mov.w	r3, #0
 800cf02:	f04f 020a 	mov.w	r2, #10
 800cf06:	4641      	mov	r1, r8
 800cf08:	4620      	mov	r0, r4
 800cf0a:	d106      	bne.n	800cf1a <_dtoa_r+0xb0a>
 800cf0c:	f000 f8ea 	bl	800d0e4 <__multadd>
 800cf10:	4680      	mov	r8, r0
 800cf12:	4607      	mov	r7, r0
 800cf14:	f109 0901 	add.w	r9, r9, #1
 800cf18:	e772      	b.n	800ce00 <_dtoa_r+0x9f0>
 800cf1a:	f000 f8e3 	bl	800d0e4 <__multadd>
 800cf1e:	4639      	mov	r1, r7
 800cf20:	4680      	mov	r8, r0
 800cf22:	2300      	movs	r3, #0
 800cf24:	220a      	movs	r2, #10
 800cf26:	4620      	mov	r0, r4
 800cf28:	f000 f8dc 	bl	800d0e4 <__multadd>
 800cf2c:	4607      	mov	r7, r0
 800cf2e:	e7f1      	b.n	800cf14 <_dtoa_r+0xb04>
 800cf30:	9b03      	ldr	r3, [sp, #12]
 800cf32:	9302      	str	r3, [sp, #8]
 800cf34:	9d01      	ldr	r5, [sp, #4]
 800cf36:	ee18 0a10 	vmov	r0, s16
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	f7ff f9dc 	bl	800c2f8 <quorem>
 800cf40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cf44:	9b01      	ldr	r3, [sp, #4]
 800cf46:	f805 ab01 	strb.w	sl, [r5], #1
 800cf4a:	1aea      	subs	r2, r5, r3
 800cf4c:	9b02      	ldr	r3, [sp, #8]
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	dd09      	ble.n	800cf66 <_dtoa_r+0xb56>
 800cf52:	ee18 1a10 	vmov	r1, s16
 800cf56:	2300      	movs	r3, #0
 800cf58:	220a      	movs	r2, #10
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f000 f8c2 	bl	800d0e4 <__multadd>
 800cf60:	ee08 0a10 	vmov	s16, r0
 800cf64:	e7e7      	b.n	800cf36 <_dtoa_r+0xb26>
 800cf66:	9b02      	ldr	r3, [sp, #8]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	bfc8      	it	gt
 800cf6c:	461d      	movgt	r5, r3
 800cf6e:	9b01      	ldr	r3, [sp, #4]
 800cf70:	bfd8      	it	le
 800cf72:	2501      	movle	r5, #1
 800cf74:	441d      	add	r5, r3
 800cf76:	f04f 0800 	mov.w	r8, #0
 800cf7a:	ee18 1a10 	vmov	r1, s16
 800cf7e:	2201      	movs	r2, #1
 800cf80:	4620      	mov	r0, r4
 800cf82:	f000 fa5f 	bl	800d444 <__lshift>
 800cf86:	4631      	mov	r1, r6
 800cf88:	ee08 0a10 	vmov	s16, r0
 800cf8c:	f000 faca 	bl	800d524 <__mcmp>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	dc91      	bgt.n	800ceb8 <_dtoa_r+0xaa8>
 800cf94:	d102      	bne.n	800cf9c <_dtoa_r+0xb8c>
 800cf96:	f01a 0f01 	tst.w	sl, #1
 800cf9a:	d18d      	bne.n	800ceb8 <_dtoa_r+0xaa8>
 800cf9c:	462b      	mov	r3, r5
 800cf9e:	461d      	mov	r5, r3
 800cfa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfa4:	2a30      	cmp	r2, #48	; 0x30
 800cfa6:	d0fa      	beq.n	800cf9e <_dtoa_r+0xb8e>
 800cfa8:	e6d7      	b.n	800cd5a <_dtoa_r+0x94a>
 800cfaa:	9a01      	ldr	r2, [sp, #4]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d184      	bne.n	800ceba <_dtoa_r+0xaaa>
 800cfb0:	9b00      	ldr	r3, [sp, #0]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	2331      	movs	r3, #49	; 0x31
 800cfb8:	7013      	strb	r3, [r2, #0]
 800cfba:	e6ce      	b.n	800cd5a <_dtoa_r+0x94a>
 800cfbc:	4b09      	ldr	r3, [pc, #36]	; (800cfe4 <_dtoa_r+0xbd4>)
 800cfbe:	f7ff ba95 	b.w	800c4ec <_dtoa_r+0xdc>
 800cfc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f47f aa6e 	bne.w	800c4a6 <_dtoa_r+0x96>
 800cfca:	4b07      	ldr	r3, [pc, #28]	; (800cfe8 <_dtoa_r+0xbd8>)
 800cfcc:	f7ff ba8e 	b.w	800c4ec <_dtoa_r+0xdc>
 800cfd0:	9b02      	ldr	r3, [sp, #8]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	dcae      	bgt.n	800cf34 <_dtoa_r+0xb24>
 800cfd6:	9b06      	ldr	r3, [sp, #24]
 800cfd8:	2b02      	cmp	r3, #2
 800cfda:	f73f aea8 	bgt.w	800cd2e <_dtoa_r+0x91e>
 800cfde:	e7a9      	b.n	800cf34 <_dtoa_r+0xb24>
 800cfe0:	0800fe63 	.word	0x0800fe63
 800cfe4:	0800fdc0 	.word	0x0800fdc0
 800cfe8:	0800fde4 	.word	0x0800fde4

0800cfec <_localeconv_r>:
 800cfec:	4800      	ldr	r0, [pc, #0]	; (800cff0 <_localeconv_r+0x4>)
 800cfee:	4770      	bx	lr
 800cff0:	200001fc 	.word	0x200001fc

0800cff4 <malloc>:
 800cff4:	4b02      	ldr	r3, [pc, #8]	; (800d000 <malloc+0xc>)
 800cff6:	4601      	mov	r1, r0
 800cff8:	6818      	ldr	r0, [r3, #0]
 800cffa:	f000 bc17 	b.w	800d82c <_malloc_r>
 800cffe:	bf00      	nop
 800d000:	200000a8 	.word	0x200000a8

0800d004 <memcpy>:
 800d004:	440a      	add	r2, r1
 800d006:	4291      	cmp	r1, r2
 800d008:	f100 33ff 	add.w	r3, r0, #4294967295
 800d00c:	d100      	bne.n	800d010 <memcpy+0xc>
 800d00e:	4770      	bx	lr
 800d010:	b510      	push	{r4, lr}
 800d012:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d01a:	4291      	cmp	r1, r2
 800d01c:	d1f9      	bne.n	800d012 <memcpy+0xe>
 800d01e:	bd10      	pop	{r4, pc}

0800d020 <_Balloc>:
 800d020:	b570      	push	{r4, r5, r6, lr}
 800d022:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d024:	4604      	mov	r4, r0
 800d026:	460d      	mov	r5, r1
 800d028:	b976      	cbnz	r6, 800d048 <_Balloc+0x28>
 800d02a:	2010      	movs	r0, #16
 800d02c:	f7ff ffe2 	bl	800cff4 <malloc>
 800d030:	4602      	mov	r2, r0
 800d032:	6260      	str	r0, [r4, #36]	; 0x24
 800d034:	b920      	cbnz	r0, 800d040 <_Balloc+0x20>
 800d036:	4b18      	ldr	r3, [pc, #96]	; (800d098 <_Balloc+0x78>)
 800d038:	4818      	ldr	r0, [pc, #96]	; (800d09c <_Balloc+0x7c>)
 800d03a:	2166      	movs	r1, #102	; 0x66
 800d03c:	f000 fdd6 	bl	800dbec <__assert_func>
 800d040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d044:	6006      	str	r6, [r0, #0]
 800d046:	60c6      	str	r6, [r0, #12]
 800d048:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d04a:	68f3      	ldr	r3, [r6, #12]
 800d04c:	b183      	cbz	r3, 800d070 <_Balloc+0x50>
 800d04e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d056:	b9b8      	cbnz	r0, 800d088 <_Balloc+0x68>
 800d058:	2101      	movs	r1, #1
 800d05a:	fa01 f605 	lsl.w	r6, r1, r5
 800d05e:	1d72      	adds	r2, r6, #5
 800d060:	0092      	lsls	r2, r2, #2
 800d062:	4620      	mov	r0, r4
 800d064:	f000 fb60 	bl	800d728 <_calloc_r>
 800d068:	b160      	cbz	r0, 800d084 <_Balloc+0x64>
 800d06a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d06e:	e00e      	b.n	800d08e <_Balloc+0x6e>
 800d070:	2221      	movs	r2, #33	; 0x21
 800d072:	2104      	movs	r1, #4
 800d074:	4620      	mov	r0, r4
 800d076:	f000 fb57 	bl	800d728 <_calloc_r>
 800d07a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d07c:	60f0      	str	r0, [r6, #12]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d1e4      	bne.n	800d04e <_Balloc+0x2e>
 800d084:	2000      	movs	r0, #0
 800d086:	bd70      	pop	{r4, r5, r6, pc}
 800d088:	6802      	ldr	r2, [r0, #0]
 800d08a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d08e:	2300      	movs	r3, #0
 800d090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d094:	e7f7      	b.n	800d086 <_Balloc+0x66>
 800d096:	bf00      	nop
 800d098:	0800fdf1 	.word	0x0800fdf1
 800d09c:	0800fe74 	.word	0x0800fe74

0800d0a0 <_Bfree>:
 800d0a0:	b570      	push	{r4, r5, r6, lr}
 800d0a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d0a4:	4605      	mov	r5, r0
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	b976      	cbnz	r6, 800d0c8 <_Bfree+0x28>
 800d0aa:	2010      	movs	r0, #16
 800d0ac:	f7ff ffa2 	bl	800cff4 <malloc>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	6268      	str	r0, [r5, #36]	; 0x24
 800d0b4:	b920      	cbnz	r0, 800d0c0 <_Bfree+0x20>
 800d0b6:	4b09      	ldr	r3, [pc, #36]	; (800d0dc <_Bfree+0x3c>)
 800d0b8:	4809      	ldr	r0, [pc, #36]	; (800d0e0 <_Bfree+0x40>)
 800d0ba:	218a      	movs	r1, #138	; 0x8a
 800d0bc:	f000 fd96 	bl	800dbec <__assert_func>
 800d0c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0c4:	6006      	str	r6, [r0, #0]
 800d0c6:	60c6      	str	r6, [r0, #12]
 800d0c8:	b13c      	cbz	r4, 800d0da <_Bfree+0x3a>
 800d0ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d0cc:	6862      	ldr	r2, [r4, #4]
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0d4:	6021      	str	r1, [r4, #0]
 800d0d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0da:	bd70      	pop	{r4, r5, r6, pc}
 800d0dc:	0800fdf1 	.word	0x0800fdf1
 800d0e0:	0800fe74 	.word	0x0800fe74

0800d0e4 <__multadd>:
 800d0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e8:	690d      	ldr	r5, [r1, #16]
 800d0ea:	4607      	mov	r7, r0
 800d0ec:	460c      	mov	r4, r1
 800d0ee:	461e      	mov	r6, r3
 800d0f0:	f101 0c14 	add.w	ip, r1, #20
 800d0f4:	2000      	movs	r0, #0
 800d0f6:	f8dc 3000 	ldr.w	r3, [ip]
 800d0fa:	b299      	uxth	r1, r3
 800d0fc:	fb02 6101 	mla	r1, r2, r1, r6
 800d100:	0c1e      	lsrs	r6, r3, #16
 800d102:	0c0b      	lsrs	r3, r1, #16
 800d104:	fb02 3306 	mla	r3, r2, r6, r3
 800d108:	b289      	uxth	r1, r1
 800d10a:	3001      	adds	r0, #1
 800d10c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d110:	4285      	cmp	r5, r0
 800d112:	f84c 1b04 	str.w	r1, [ip], #4
 800d116:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d11a:	dcec      	bgt.n	800d0f6 <__multadd+0x12>
 800d11c:	b30e      	cbz	r6, 800d162 <__multadd+0x7e>
 800d11e:	68a3      	ldr	r3, [r4, #8]
 800d120:	42ab      	cmp	r3, r5
 800d122:	dc19      	bgt.n	800d158 <__multadd+0x74>
 800d124:	6861      	ldr	r1, [r4, #4]
 800d126:	4638      	mov	r0, r7
 800d128:	3101      	adds	r1, #1
 800d12a:	f7ff ff79 	bl	800d020 <_Balloc>
 800d12e:	4680      	mov	r8, r0
 800d130:	b928      	cbnz	r0, 800d13e <__multadd+0x5a>
 800d132:	4602      	mov	r2, r0
 800d134:	4b0c      	ldr	r3, [pc, #48]	; (800d168 <__multadd+0x84>)
 800d136:	480d      	ldr	r0, [pc, #52]	; (800d16c <__multadd+0x88>)
 800d138:	21b5      	movs	r1, #181	; 0xb5
 800d13a:	f000 fd57 	bl	800dbec <__assert_func>
 800d13e:	6922      	ldr	r2, [r4, #16]
 800d140:	3202      	adds	r2, #2
 800d142:	f104 010c 	add.w	r1, r4, #12
 800d146:	0092      	lsls	r2, r2, #2
 800d148:	300c      	adds	r0, #12
 800d14a:	f7ff ff5b 	bl	800d004 <memcpy>
 800d14e:	4621      	mov	r1, r4
 800d150:	4638      	mov	r0, r7
 800d152:	f7ff ffa5 	bl	800d0a0 <_Bfree>
 800d156:	4644      	mov	r4, r8
 800d158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d15c:	3501      	adds	r5, #1
 800d15e:	615e      	str	r6, [r3, #20]
 800d160:	6125      	str	r5, [r4, #16]
 800d162:	4620      	mov	r0, r4
 800d164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d168:	0800fe63 	.word	0x0800fe63
 800d16c:	0800fe74 	.word	0x0800fe74

0800d170 <__hi0bits>:
 800d170:	0c03      	lsrs	r3, r0, #16
 800d172:	041b      	lsls	r3, r3, #16
 800d174:	b9d3      	cbnz	r3, 800d1ac <__hi0bits+0x3c>
 800d176:	0400      	lsls	r0, r0, #16
 800d178:	2310      	movs	r3, #16
 800d17a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d17e:	bf04      	itt	eq
 800d180:	0200      	lsleq	r0, r0, #8
 800d182:	3308      	addeq	r3, #8
 800d184:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d188:	bf04      	itt	eq
 800d18a:	0100      	lsleq	r0, r0, #4
 800d18c:	3304      	addeq	r3, #4
 800d18e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d192:	bf04      	itt	eq
 800d194:	0080      	lsleq	r0, r0, #2
 800d196:	3302      	addeq	r3, #2
 800d198:	2800      	cmp	r0, #0
 800d19a:	db05      	blt.n	800d1a8 <__hi0bits+0x38>
 800d19c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d1a0:	f103 0301 	add.w	r3, r3, #1
 800d1a4:	bf08      	it	eq
 800d1a6:	2320      	moveq	r3, #32
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	4770      	bx	lr
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	e7e4      	b.n	800d17a <__hi0bits+0xa>

0800d1b0 <__lo0bits>:
 800d1b0:	6803      	ldr	r3, [r0, #0]
 800d1b2:	f013 0207 	ands.w	r2, r3, #7
 800d1b6:	4601      	mov	r1, r0
 800d1b8:	d00b      	beq.n	800d1d2 <__lo0bits+0x22>
 800d1ba:	07da      	lsls	r2, r3, #31
 800d1bc:	d423      	bmi.n	800d206 <__lo0bits+0x56>
 800d1be:	0798      	lsls	r0, r3, #30
 800d1c0:	bf49      	itett	mi
 800d1c2:	085b      	lsrmi	r3, r3, #1
 800d1c4:	089b      	lsrpl	r3, r3, #2
 800d1c6:	2001      	movmi	r0, #1
 800d1c8:	600b      	strmi	r3, [r1, #0]
 800d1ca:	bf5c      	itt	pl
 800d1cc:	600b      	strpl	r3, [r1, #0]
 800d1ce:	2002      	movpl	r0, #2
 800d1d0:	4770      	bx	lr
 800d1d2:	b298      	uxth	r0, r3
 800d1d4:	b9a8      	cbnz	r0, 800d202 <__lo0bits+0x52>
 800d1d6:	0c1b      	lsrs	r3, r3, #16
 800d1d8:	2010      	movs	r0, #16
 800d1da:	b2da      	uxtb	r2, r3
 800d1dc:	b90a      	cbnz	r2, 800d1e2 <__lo0bits+0x32>
 800d1de:	3008      	adds	r0, #8
 800d1e0:	0a1b      	lsrs	r3, r3, #8
 800d1e2:	071a      	lsls	r2, r3, #28
 800d1e4:	bf04      	itt	eq
 800d1e6:	091b      	lsreq	r3, r3, #4
 800d1e8:	3004      	addeq	r0, #4
 800d1ea:	079a      	lsls	r2, r3, #30
 800d1ec:	bf04      	itt	eq
 800d1ee:	089b      	lsreq	r3, r3, #2
 800d1f0:	3002      	addeq	r0, #2
 800d1f2:	07da      	lsls	r2, r3, #31
 800d1f4:	d403      	bmi.n	800d1fe <__lo0bits+0x4e>
 800d1f6:	085b      	lsrs	r3, r3, #1
 800d1f8:	f100 0001 	add.w	r0, r0, #1
 800d1fc:	d005      	beq.n	800d20a <__lo0bits+0x5a>
 800d1fe:	600b      	str	r3, [r1, #0]
 800d200:	4770      	bx	lr
 800d202:	4610      	mov	r0, r2
 800d204:	e7e9      	b.n	800d1da <__lo0bits+0x2a>
 800d206:	2000      	movs	r0, #0
 800d208:	4770      	bx	lr
 800d20a:	2020      	movs	r0, #32
 800d20c:	4770      	bx	lr
	...

0800d210 <__i2b>:
 800d210:	b510      	push	{r4, lr}
 800d212:	460c      	mov	r4, r1
 800d214:	2101      	movs	r1, #1
 800d216:	f7ff ff03 	bl	800d020 <_Balloc>
 800d21a:	4602      	mov	r2, r0
 800d21c:	b928      	cbnz	r0, 800d22a <__i2b+0x1a>
 800d21e:	4b05      	ldr	r3, [pc, #20]	; (800d234 <__i2b+0x24>)
 800d220:	4805      	ldr	r0, [pc, #20]	; (800d238 <__i2b+0x28>)
 800d222:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d226:	f000 fce1 	bl	800dbec <__assert_func>
 800d22a:	2301      	movs	r3, #1
 800d22c:	6144      	str	r4, [r0, #20]
 800d22e:	6103      	str	r3, [r0, #16]
 800d230:	bd10      	pop	{r4, pc}
 800d232:	bf00      	nop
 800d234:	0800fe63 	.word	0x0800fe63
 800d238:	0800fe74 	.word	0x0800fe74

0800d23c <__multiply>:
 800d23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d240:	4691      	mov	r9, r2
 800d242:	690a      	ldr	r2, [r1, #16]
 800d244:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d248:	429a      	cmp	r2, r3
 800d24a:	bfb8      	it	lt
 800d24c:	460b      	movlt	r3, r1
 800d24e:	460c      	mov	r4, r1
 800d250:	bfbc      	itt	lt
 800d252:	464c      	movlt	r4, r9
 800d254:	4699      	movlt	r9, r3
 800d256:	6927      	ldr	r7, [r4, #16]
 800d258:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d25c:	68a3      	ldr	r3, [r4, #8]
 800d25e:	6861      	ldr	r1, [r4, #4]
 800d260:	eb07 060a 	add.w	r6, r7, sl
 800d264:	42b3      	cmp	r3, r6
 800d266:	b085      	sub	sp, #20
 800d268:	bfb8      	it	lt
 800d26a:	3101      	addlt	r1, #1
 800d26c:	f7ff fed8 	bl	800d020 <_Balloc>
 800d270:	b930      	cbnz	r0, 800d280 <__multiply+0x44>
 800d272:	4602      	mov	r2, r0
 800d274:	4b44      	ldr	r3, [pc, #272]	; (800d388 <__multiply+0x14c>)
 800d276:	4845      	ldr	r0, [pc, #276]	; (800d38c <__multiply+0x150>)
 800d278:	f240 115d 	movw	r1, #349	; 0x15d
 800d27c:	f000 fcb6 	bl	800dbec <__assert_func>
 800d280:	f100 0514 	add.w	r5, r0, #20
 800d284:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d288:	462b      	mov	r3, r5
 800d28a:	2200      	movs	r2, #0
 800d28c:	4543      	cmp	r3, r8
 800d28e:	d321      	bcc.n	800d2d4 <__multiply+0x98>
 800d290:	f104 0314 	add.w	r3, r4, #20
 800d294:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d298:	f109 0314 	add.w	r3, r9, #20
 800d29c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d2a0:	9202      	str	r2, [sp, #8]
 800d2a2:	1b3a      	subs	r2, r7, r4
 800d2a4:	3a15      	subs	r2, #21
 800d2a6:	f022 0203 	bic.w	r2, r2, #3
 800d2aa:	3204      	adds	r2, #4
 800d2ac:	f104 0115 	add.w	r1, r4, #21
 800d2b0:	428f      	cmp	r7, r1
 800d2b2:	bf38      	it	cc
 800d2b4:	2204      	movcc	r2, #4
 800d2b6:	9201      	str	r2, [sp, #4]
 800d2b8:	9a02      	ldr	r2, [sp, #8]
 800d2ba:	9303      	str	r3, [sp, #12]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d80c      	bhi.n	800d2da <__multiply+0x9e>
 800d2c0:	2e00      	cmp	r6, #0
 800d2c2:	dd03      	ble.n	800d2cc <__multiply+0x90>
 800d2c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d05a      	beq.n	800d382 <__multiply+0x146>
 800d2cc:	6106      	str	r6, [r0, #16]
 800d2ce:	b005      	add	sp, #20
 800d2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d4:	f843 2b04 	str.w	r2, [r3], #4
 800d2d8:	e7d8      	b.n	800d28c <__multiply+0x50>
 800d2da:	f8b3 a000 	ldrh.w	sl, [r3]
 800d2de:	f1ba 0f00 	cmp.w	sl, #0
 800d2e2:	d024      	beq.n	800d32e <__multiply+0xf2>
 800d2e4:	f104 0e14 	add.w	lr, r4, #20
 800d2e8:	46a9      	mov	r9, r5
 800d2ea:	f04f 0c00 	mov.w	ip, #0
 800d2ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d2f2:	f8d9 1000 	ldr.w	r1, [r9]
 800d2f6:	fa1f fb82 	uxth.w	fp, r2
 800d2fa:	b289      	uxth	r1, r1
 800d2fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800d300:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d304:	f8d9 2000 	ldr.w	r2, [r9]
 800d308:	4461      	add	r1, ip
 800d30a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d30e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d312:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d316:	b289      	uxth	r1, r1
 800d318:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d31c:	4577      	cmp	r7, lr
 800d31e:	f849 1b04 	str.w	r1, [r9], #4
 800d322:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d326:	d8e2      	bhi.n	800d2ee <__multiply+0xb2>
 800d328:	9a01      	ldr	r2, [sp, #4]
 800d32a:	f845 c002 	str.w	ip, [r5, r2]
 800d32e:	9a03      	ldr	r2, [sp, #12]
 800d330:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d334:	3304      	adds	r3, #4
 800d336:	f1b9 0f00 	cmp.w	r9, #0
 800d33a:	d020      	beq.n	800d37e <__multiply+0x142>
 800d33c:	6829      	ldr	r1, [r5, #0]
 800d33e:	f104 0c14 	add.w	ip, r4, #20
 800d342:	46ae      	mov	lr, r5
 800d344:	f04f 0a00 	mov.w	sl, #0
 800d348:	f8bc b000 	ldrh.w	fp, [ip]
 800d34c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d350:	fb09 220b 	mla	r2, r9, fp, r2
 800d354:	4492      	add	sl, r2
 800d356:	b289      	uxth	r1, r1
 800d358:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d35c:	f84e 1b04 	str.w	r1, [lr], #4
 800d360:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d364:	f8be 1000 	ldrh.w	r1, [lr]
 800d368:	0c12      	lsrs	r2, r2, #16
 800d36a:	fb09 1102 	mla	r1, r9, r2, r1
 800d36e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d372:	4567      	cmp	r7, ip
 800d374:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d378:	d8e6      	bhi.n	800d348 <__multiply+0x10c>
 800d37a:	9a01      	ldr	r2, [sp, #4]
 800d37c:	50a9      	str	r1, [r5, r2]
 800d37e:	3504      	adds	r5, #4
 800d380:	e79a      	b.n	800d2b8 <__multiply+0x7c>
 800d382:	3e01      	subs	r6, #1
 800d384:	e79c      	b.n	800d2c0 <__multiply+0x84>
 800d386:	bf00      	nop
 800d388:	0800fe63 	.word	0x0800fe63
 800d38c:	0800fe74 	.word	0x0800fe74

0800d390 <__pow5mult>:
 800d390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d394:	4615      	mov	r5, r2
 800d396:	f012 0203 	ands.w	r2, r2, #3
 800d39a:	4606      	mov	r6, r0
 800d39c:	460f      	mov	r7, r1
 800d39e:	d007      	beq.n	800d3b0 <__pow5mult+0x20>
 800d3a0:	4c25      	ldr	r4, [pc, #148]	; (800d438 <__pow5mult+0xa8>)
 800d3a2:	3a01      	subs	r2, #1
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3aa:	f7ff fe9b 	bl	800d0e4 <__multadd>
 800d3ae:	4607      	mov	r7, r0
 800d3b0:	10ad      	asrs	r5, r5, #2
 800d3b2:	d03d      	beq.n	800d430 <__pow5mult+0xa0>
 800d3b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d3b6:	b97c      	cbnz	r4, 800d3d8 <__pow5mult+0x48>
 800d3b8:	2010      	movs	r0, #16
 800d3ba:	f7ff fe1b 	bl	800cff4 <malloc>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	6270      	str	r0, [r6, #36]	; 0x24
 800d3c2:	b928      	cbnz	r0, 800d3d0 <__pow5mult+0x40>
 800d3c4:	4b1d      	ldr	r3, [pc, #116]	; (800d43c <__pow5mult+0xac>)
 800d3c6:	481e      	ldr	r0, [pc, #120]	; (800d440 <__pow5mult+0xb0>)
 800d3c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d3cc:	f000 fc0e 	bl	800dbec <__assert_func>
 800d3d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3d4:	6004      	str	r4, [r0, #0]
 800d3d6:	60c4      	str	r4, [r0, #12]
 800d3d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d3dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3e0:	b94c      	cbnz	r4, 800d3f6 <__pow5mult+0x66>
 800d3e2:	f240 2171 	movw	r1, #625	; 0x271
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	f7ff ff12 	bl	800d210 <__i2b>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3f2:	4604      	mov	r4, r0
 800d3f4:	6003      	str	r3, [r0, #0]
 800d3f6:	f04f 0900 	mov.w	r9, #0
 800d3fa:	07eb      	lsls	r3, r5, #31
 800d3fc:	d50a      	bpl.n	800d414 <__pow5mult+0x84>
 800d3fe:	4639      	mov	r1, r7
 800d400:	4622      	mov	r2, r4
 800d402:	4630      	mov	r0, r6
 800d404:	f7ff ff1a 	bl	800d23c <__multiply>
 800d408:	4639      	mov	r1, r7
 800d40a:	4680      	mov	r8, r0
 800d40c:	4630      	mov	r0, r6
 800d40e:	f7ff fe47 	bl	800d0a0 <_Bfree>
 800d412:	4647      	mov	r7, r8
 800d414:	106d      	asrs	r5, r5, #1
 800d416:	d00b      	beq.n	800d430 <__pow5mult+0xa0>
 800d418:	6820      	ldr	r0, [r4, #0]
 800d41a:	b938      	cbnz	r0, 800d42c <__pow5mult+0x9c>
 800d41c:	4622      	mov	r2, r4
 800d41e:	4621      	mov	r1, r4
 800d420:	4630      	mov	r0, r6
 800d422:	f7ff ff0b 	bl	800d23c <__multiply>
 800d426:	6020      	str	r0, [r4, #0]
 800d428:	f8c0 9000 	str.w	r9, [r0]
 800d42c:	4604      	mov	r4, r0
 800d42e:	e7e4      	b.n	800d3fa <__pow5mult+0x6a>
 800d430:	4638      	mov	r0, r7
 800d432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d436:	bf00      	nop
 800d438:	0800ffc0 	.word	0x0800ffc0
 800d43c:	0800fdf1 	.word	0x0800fdf1
 800d440:	0800fe74 	.word	0x0800fe74

0800d444 <__lshift>:
 800d444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d448:	460c      	mov	r4, r1
 800d44a:	6849      	ldr	r1, [r1, #4]
 800d44c:	6923      	ldr	r3, [r4, #16]
 800d44e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d452:	68a3      	ldr	r3, [r4, #8]
 800d454:	4607      	mov	r7, r0
 800d456:	4691      	mov	r9, r2
 800d458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d45c:	f108 0601 	add.w	r6, r8, #1
 800d460:	42b3      	cmp	r3, r6
 800d462:	db0b      	blt.n	800d47c <__lshift+0x38>
 800d464:	4638      	mov	r0, r7
 800d466:	f7ff fddb 	bl	800d020 <_Balloc>
 800d46a:	4605      	mov	r5, r0
 800d46c:	b948      	cbnz	r0, 800d482 <__lshift+0x3e>
 800d46e:	4602      	mov	r2, r0
 800d470:	4b2a      	ldr	r3, [pc, #168]	; (800d51c <__lshift+0xd8>)
 800d472:	482b      	ldr	r0, [pc, #172]	; (800d520 <__lshift+0xdc>)
 800d474:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d478:	f000 fbb8 	bl	800dbec <__assert_func>
 800d47c:	3101      	adds	r1, #1
 800d47e:	005b      	lsls	r3, r3, #1
 800d480:	e7ee      	b.n	800d460 <__lshift+0x1c>
 800d482:	2300      	movs	r3, #0
 800d484:	f100 0114 	add.w	r1, r0, #20
 800d488:	f100 0210 	add.w	r2, r0, #16
 800d48c:	4618      	mov	r0, r3
 800d48e:	4553      	cmp	r3, sl
 800d490:	db37      	blt.n	800d502 <__lshift+0xbe>
 800d492:	6920      	ldr	r0, [r4, #16]
 800d494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d498:	f104 0314 	add.w	r3, r4, #20
 800d49c:	f019 091f 	ands.w	r9, r9, #31
 800d4a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d4a8:	d02f      	beq.n	800d50a <__lshift+0xc6>
 800d4aa:	f1c9 0e20 	rsb	lr, r9, #32
 800d4ae:	468a      	mov	sl, r1
 800d4b0:	f04f 0c00 	mov.w	ip, #0
 800d4b4:	681a      	ldr	r2, [r3, #0]
 800d4b6:	fa02 f209 	lsl.w	r2, r2, r9
 800d4ba:	ea42 020c 	orr.w	r2, r2, ip
 800d4be:	f84a 2b04 	str.w	r2, [sl], #4
 800d4c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4c6:	4298      	cmp	r0, r3
 800d4c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d4cc:	d8f2      	bhi.n	800d4b4 <__lshift+0x70>
 800d4ce:	1b03      	subs	r3, r0, r4
 800d4d0:	3b15      	subs	r3, #21
 800d4d2:	f023 0303 	bic.w	r3, r3, #3
 800d4d6:	3304      	adds	r3, #4
 800d4d8:	f104 0215 	add.w	r2, r4, #21
 800d4dc:	4290      	cmp	r0, r2
 800d4de:	bf38      	it	cc
 800d4e0:	2304      	movcc	r3, #4
 800d4e2:	f841 c003 	str.w	ip, [r1, r3]
 800d4e6:	f1bc 0f00 	cmp.w	ip, #0
 800d4ea:	d001      	beq.n	800d4f0 <__lshift+0xac>
 800d4ec:	f108 0602 	add.w	r6, r8, #2
 800d4f0:	3e01      	subs	r6, #1
 800d4f2:	4638      	mov	r0, r7
 800d4f4:	612e      	str	r6, [r5, #16]
 800d4f6:	4621      	mov	r1, r4
 800d4f8:	f7ff fdd2 	bl	800d0a0 <_Bfree>
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d502:	f842 0f04 	str.w	r0, [r2, #4]!
 800d506:	3301      	adds	r3, #1
 800d508:	e7c1      	b.n	800d48e <__lshift+0x4a>
 800d50a:	3904      	subs	r1, #4
 800d50c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d510:	f841 2f04 	str.w	r2, [r1, #4]!
 800d514:	4298      	cmp	r0, r3
 800d516:	d8f9      	bhi.n	800d50c <__lshift+0xc8>
 800d518:	e7ea      	b.n	800d4f0 <__lshift+0xac>
 800d51a:	bf00      	nop
 800d51c:	0800fe63 	.word	0x0800fe63
 800d520:	0800fe74 	.word	0x0800fe74

0800d524 <__mcmp>:
 800d524:	b530      	push	{r4, r5, lr}
 800d526:	6902      	ldr	r2, [r0, #16]
 800d528:	690c      	ldr	r4, [r1, #16]
 800d52a:	1b12      	subs	r2, r2, r4
 800d52c:	d10e      	bne.n	800d54c <__mcmp+0x28>
 800d52e:	f100 0314 	add.w	r3, r0, #20
 800d532:	3114      	adds	r1, #20
 800d534:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d538:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d53c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d540:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d544:	42a5      	cmp	r5, r4
 800d546:	d003      	beq.n	800d550 <__mcmp+0x2c>
 800d548:	d305      	bcc.n	800d556 <__mcmp+0x32>
 800d54a:	2201      	movs	r2, #1
 800d54c:	4610      	mov	r0, r2
 800d54e:	bd30      	pop	{r4, r5, pc}
 800d550:	4283      	cmp	r3, r0
 800d552:	d3f3      	bcc.n	800d53c <__mcmp+0x18>
 800d554:	e7fa      	b.n	800d54c <__mcmp+0x28>
 800d556:	f04f 32ff 	mov.w	r2, #4294967295
 800d55a:	e7f7      	b.n	800d54c <__mcmp+0x28>

0800d55c <__mdiff>:
 800d55c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d560:	460c      	mov	r4, r1
 800d562:	4606      	mov	r6, r0
 800d564:	4611      	mov	r1, r2
 800d566:	4620      	mov	r0, r4
 800d568:	4690      	mov	r8, r2
 800d56a:	f7ff ffdb 	bl	800d524 <__mcmp>
 800d56e:	1e05      	subs	r5, r0, #0
 800d570:	d110      	bne.n	800d594 <__mdiff+0x38>
 800d572:	4629      	mov	r1, r5
 800d574:	4630      	mov	r0, r6
 800d576:	f7ff fd53 	bl	800d020 <_Balloc>
 800d57a:	b930      	cbnz	r0, 800d58a <__mdiff+0x2e>
 800d57c:	4b3a      	ldr	r3, [pc, #232]	; (800d668 <__mdiff+0x10c>)
 800d57e:	4602      	mov	r2, r0
 800d580:	f240 2132 	movw	r1, #562	; 0x232
 800d584:	4839      	ldr	r0, [pc, #228]	; (800d66c <__mdiff+0x110>)
 800d586:	f000 fb31 	bl	800dbec <__assert_func>
 800d58a:	2301      	movs	r3, #1
 800d58c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d594:	bfa4      	itt	ge
 800d596:	4643      	movge	r3, r8
 800d598:	46a0      	movge	r8, r4
 800d59a:	4630      	mov	r0, r6
 800d59c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d5a0:	bfa6      	itte	ge
 800d5a2:	461c      	movge	r4, r3
 800d5a4:	2500      	movge	r5, #0
 800d5a6:	2501      	movlt	r5, #1
 800d5a8:	f7ff fd3a 	bl	800d020 <_Balloc>
 800d5ac:	b920      	cbnz	r0, 800d5b8 <__mdiff+0x5c>
 800d5ae:	4b2e      	ldr	r3, [pc, #184]	; (800d668 <__mdiff+0x10c>)
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d5b6:	e7e5      	b.n	800d584 <__mdiff+0x28>
 800d5b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d5bc:	6926      	ldr	r6, [r4, #16]
 800d5be:	60c5      	str	r5, [r0, #12]
 800d5c0:	f104 0914 	add.w	r9, r4, #20
 800d5c4:	f108 0514 	add.w	r5, r8, #20
 800d5c8:	f100 0e14 	add.w	lr, r0, #20
 800d5cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d5d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d5d4:	f108 0210 	add.w	r2, r8, #16
 800d5d8:	46f2      	mov	sl, lr
 800d5da:	2100      	movs	r1, #0
 800d5dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d5e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d5e4:	fa1f f883 	uxth.w	r8, r3
 800d5e8:	fa11 f18b 	uxtah	r1, r1, fp
 800d5ec:	0c1b      	lsrs	r3, r3, #16
 800d5ee:	eba1 0808 	sub.w	r8, r1, r8
 800d5f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d5f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d5fa:	fa1f f888 	uxth.w	r8, r8
 800d5fe:	1419      	asrs	r1, r3, #16
 800d600:	454e      	cmp	r6, r9
 800d602:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d606:	f84a 3b04 	str.w	r3, [sl], #4
 800d60a:	d8e7      	bhi.n	800d5dc <__mdiff+0x80>
 800d60c:	1b33      	subs	r3, r6, r4
 800d60e:	3b15      	subs	r3, #21
 800d610:	f023 0303 	bic.w	r3, r3, #3
 800d614:	3304      	adds	r3, #4
 800d616:	3415      	adds	r4, #21
 800d618:	42a6      	cmp	r6, r4
 800d61a:	bf38      	it	cc
 800d61c:	2304      	movcc	r3, #4
 800d61e:	441d      	add	r5, r3
 800d620:	4473      	add	r3, lr
 800d622:	469e      	mov	lr, r3
 800d624:	462e      	mov	r6, r5
 800d626:	4566      	cmp	r6, ip
 800d628:	d30e      	bcc.n	800d648 <__mdiff+0xec>
 800d62a:	f10c 0203 	add.w	r2, ip, #3
 800d62e:	1b52      	subs	r2, r2, r5
 800d630:	f022 0203 	bic.w	r2, r2, #3
 800d634:	3d03      	subs	r5, #3
 800d636:	45ac      	cmp	ip, r5
 800d638:	bf38      	it	cc
 800d63a:	2200      	movcc	r2, #0
 800d63c:	441a      	add	r2, r3
 800d63e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d642:	b17b      	cbz	r3, 800d664 <__mdiff+0x108>
 800d644:	6107      	str	r7, [r0, #16]
 800d646:	e7a3      	b.n	800d590 <__mdiff+0x34>
 800d648:	f856 8b04 	ldr.w	r8, [r6], #4
 800d64c:	fa11 f288 	uxtah	r2, r1, r8
 800d650:	1414      	asrs	r4, r2, #16
 800d652:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d656:	b292      	uxth	r2, r2
 800d658:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d65c:	f84e 2b04 	str.w	r2, [lr], #4
 800d660:	1421      	asrs	r1, r4, #16
 800d662:	e7e0      	b.n	800d626 <__mdiff+0xca>
 800d664:	3f01      	subs	r7, #1
 800d666:	e7ea      	b.n	800d63e <__mdiff+0xe2>
 800d668:	0800fe63 	.word	0x0800fe63
 800d66c:	0800fe74 	.word	0x0800fe74

0800d670 <__d2b>:
 800d670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d674:	4689      	mov	r9, r1
 800d676:	2101      	movs	r1, #1
 800d678:	ec57 6b10 	vmov	r6, r7, d0
 800d67c:	4690      	mov	r8, r2
 800d67e:	f7ff fccf 	bl	800d020 <_Balloc>
 800d682:	4604      	mov	r4, r0
 800d684:	b930      	cbnz	r0, 800d694 <__d2b+0x24>
 800d686:	4602      	mov	r2, r0
 800d688:	4b25      	ldr	r3, [pc, #148]	; (800d720 <__d2b+0xb0>)
 800d68a:	4826      	ldr	r0, [pc, #152]	; (800d724 <__d2b+0xb4>)
 800d68c:	f240 310a 	movw	r1, #778	; 0x30a
 800d690:	f000 faac 	bl	800dbec <__assert_func>
 800d694:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d69c:	bb35      	cbnz	r5, 800d6ec <__d2b+0x7c>
 800d69e:	2e00      	cmp	r6, #0
 800d6a0:	9301      	str	r3, [sp, #4]
 800d6a2:	d028      	beq.n	800d6f6 <__d2b+0x86>
 800d6a4:	4668      	mov	r0, sp
 800d6a6:	9600      	str	r6, [sp, #0]
 800d6a8:	f7ff fd82 	bl	800d1b0 <__lo0bits>
 800d6ac:	9900      	ldr	r1, [sp, #0]
 800d6ae:	b300      	cbz	r0, 800d6f2 <__d2b+0x82>
 800d6b0:	9a01      	ldr	r2, [sp, #4]
 800d6b2:	f1c0 0320 	rsb	r3, r0, #32
 800d6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d6ba:	430b      	orrs	r3, r1
 800d6bc:	40c2      	lsrs	r2, r0
 800d6be:	6163      	str	r3, [r4, #20]
 800d6c0:	9201      	str	r2, [sp, #4]
 800d6c2:	9b01      	ldr	r3, [sp, #4]
 800d6c4:	61a3      	str	r3, [r4, #24]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	bf14      	ite	ne
 800d6ca:	2202      	movne	r2, #2
 800d6cc:	2201      	moveq	r2, #1
 800d6ce:	6122      	str	r2, [r4, #16]
 800d6d0:	b1d5      	cbz	r5, 800d708 <__d2b+0x98>
 800d6d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d6d6:	4405      	add	r5, r0
 800d6d8:	f8c9 5000 	str.w	r5, [r9]
 800d6dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d6e0:	f8c8 0000 	str.w	r0, [r8]
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	b003      	add	sp, #12
 800d6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6f0:	e7d5      	b.n	800d69e <__d2b+0x2e>
 800d6f2:	6161      	str	r1, [r4, #20]
 800d6f4:	e7e5      	b.n	800d6c2 <__d2b+0x52>
 800d6f6:	a801      	add	r0, sp, #4
 800d6f8:	f7ff fd5a 	bl	800d1b0 <__lo0bits>
 800d6fc:	9b01      	ldr	r3, [sp, #4]
 800d6fe:	6163      	str	r3, [r4, #20]
 800d700:	2201      	movs	r2, #1
 800d702:	6122      	str	r2, [r4, #16]
 800d704:	3020      	adds	r0, #32
 800d706:	e7e3      	b.n	800d6d0 <__d2b+0x60>
 800d708:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d70c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d710:	f8c9 0000 	str.w	r0, [r9]
 800d714:	6918      	ldr	r0, [r3, #16]
 800d716:	f7ff fd2b 	bl	800d170 <__hi0bits>
 800d71a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d71e:	e7df      	b.n	800d6e0 <__d2b+0x70>
 800d720:	0800fe63 	.word	0x0800fe63
 800d724:	0800fe74 	.word	0x0800fe74

0800d728 <_calloc_r>:
 800d728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d72a:	fba1 2402 	umull	r2, r4, r1, r2
 800d72e:	b94c      	cbnz	r4, 800d744 <_calloc_r+0x1c>
 800d730:	4611      	mov	r1, r2
 800d732:	9201      	str	r2, [sp, #4]
 800d734:	f000 f87a 	bl	800d82c <_malloc_r>
 800d738:	9a01      	ldr	r2, [sp, #4]
 800d73a:	4605      	mov	r5, r0
 800d73c:	b930      	cbnz	r0, 800d74c <_calloc_r+0x24>
 800d73e:	4628      	mov	r0, r5
 800d740:	b003      	add	sp, #12
 800d742:	bd30      	pop	{r4, r5, pc}
 800d744:	220c      	movs	r2, #12
 800d746:	6002      	str	r2, [r0, #0]
 800d748:	2500      	movs	r5, #0
 800d74a:	e7f8      	b.n	800d73e <_calloc_r+0x16>
 800d74c:	4621      	mov	r1, r4
 800d74e:	f7fe f941 	bl	800b9d4 <memset>
 800d752:	e7f4      	b.n	800d73e <_calloc_r+0x16>

0800d754 <_free_r>:
 800d754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d756:	2900      	cmp	r1, #0
 800d758:	d044      	beq.n	800d7e4 <_free_r+0x90>
 800d75a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d75e:	9001      	str	r0, [sp, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	f1a1 0404 	sub.w	r4, r1, #4
 800d766:	bfb8      	it	lt
 800d768:	18e4      	addlt	r4, r4, r3
 800d76a:	f000 fa9b 	bl	800dca4 <__malloc_lock>
 800d76e:	4a1e      	ldr	r2, [pc, #120]	; (800d7e8 <_free_r+0x94>)
 800d770:	9801      	ldr	r0, [sp, #4]
 800d772:	6813      	ldr	r3, [r2, #0]
 800d774:	b933      	cbnz	r3, 800d784 <_free_r+0x30>
 800d776:	6063      	str	r3, [r4, #4]
 800d778:	6014      	str	r4, [r2, #0]
 800d77a:	b003      	add	sp, #12
 800d77c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d780:	f000 ba96 	b.w	800dcb0 <__malloc_unlock>
 800d784:	42a3      	cmp	r3, r4
 800d786:	d908      	bls.n	800d79a <_free_r+0x46>
 800d788:	6825      	ldr	r5, [r4, #0]
 800d78a:	1961      	adds	r1, r4, r5
 800d78c:	428b      	cmp	r3, r1
 800d78e:	bf01      	itttt	eq
 800d790:	6819      	ldreq	r1, [r3, #0]
 800d792:	685b      	ldreq	r3, [r3, #4]
 800d794:	1949      	addeq	r1, r1, r5
 800d796:	6021      	streq	r1, [r4, #0]
 800d798:	e7ed      	b.n	800d776 <_free_r+0x22>
 800d79a:	461a      	mov	r2, r3
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	b10b      	cbz	r3, 800d7a4 <_free_r+0x50>
 800d7a0:	42a3      	cmp	r3, r4
 800d7a2:	d9fa      	bls.n	800d79a <_free_r+0x46>
 800d7a4:	6811      	ldr	r1, [r2, #0]
 800d7a6:	1855      	adds	r5, r2, r1
 800d7a8:	42a5      	cmp	r5, r4
 800d7aa:	d10b      	bne.n	800d7c4 <_free_r+0x70>
 800d7ac:	6824      	ldr	r4, [r4, #0]
 800d7ae:	4421      	add	r1, r4
 800d7b0:	1854      	adds	r4, r2, r1
 800d7b2:	42a3      	cmp	r3, r4
 800d7b4:	6011      	str	r1, [r2, #0]
 800d7b6:	d1e0      	bne.n	800d77a <_free_r+0x26>
 800d7b8:	681c      	ldr	r4, [r3, #0]
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	6053      	str	r3, [r2, #4]
 800d7be:	4421      	add	r1, r4
 800d7c0:	6011      	str	r1, [r2, #0]
 800d7c2:	e7da      	b.n	800d77a <_free_r+0x26>
 800d7c4:	d902      	bls.n	800d7cc <_free_r+0x78>
 800d7c6:	230c      	movs	r3, #12
 800d7c8:	6003      	str	r3, [r0, #0]
 800d7ca:	e7d6      	b.n	800d77a <_free_r+0x26>
 800d7cc:	6825      	ldr	r5, [r4, #0]
 800d7ce:	1961      	adds	r1, r4, r5
 800d7d0:	428b      	cmp	r3, r1
 800d7d2:	bf04      	itt	eq
 800d7d4:	6819      	ldreq	r1, [r3, #0]
 800d7d6:	685b      	ldreq	r3, [r3, #4]
 800d7d8:	6063      	str	r3, [r4, #4]
 800d7da:	bf04      	itt	eq
 800d7dc:	1949      	addeq	r1, r1, r5
 800d7de:	6021      	streq	r1, [r4, #0]
 800d7e0:	6054      	str	r4, [r2, #4]
 800d7e2:	e7ca      	b.n	800d77a <_free_r+0x26>
 800d7e4:	b003      	add	sp, #12
 800d7e6:	bd30      	pop	{r4, r5, pc}
 800d7e8:	20000b50 	.word	0x20000b50

0800d7ec <sbrk_aligned>:
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	4e0e      	ldr	r6, [pc, #56]	; (800d828 <sbrk_aligned+0x3c>)
 800d7f0:	460c      	mov	r4, r1
 800d7f2:	6831      	ldr	r1, [r6, #0]
 800d7f4:	4605      	mov	r5, r0
 800d7f6:	b911      	cbnz	r1, 800d7fe <sbrk_aligned+0x12>
 800d7f8:	f000 f9e8 	bl	800dbcc <_sbrk_r>
 800d7fc:	6030      	str	r0, [r6, #0]
 800d7fe:	4621      	mov	r1, r4
 800d800:	4628      	mov	r0, r5
 800d802:	f000 f9e3 	bl	800dbcc <_sbrk_r>
 800d806:	1c43      	adds	r3, r0, #1
 800d808:	d00a      	beq.n	800d820 <sbrk_aligned+0x34>
 800d80a:	1cc4      	adds	r4, r0, #3
 800d80c:	f024 0403 	bic.w	r4, r4, #3
 800d810:	42a0      	cmp	r0, r4
 800d812:	d007      	beq.n	800d824 <sbrk_aligned+0x38>
 800d814:	1a21      	subs	r1, r4, r0
 800d816:	4628      	mov	r0, r5
 800d818:	f000 f9d8 	bl	800dbcc <_sbrk_r>
 800d81c:	3001      	adds	r0, #1
 800d81e:	d101      	bne.n	800d824 <sbrk_aligned+0x38>
 800d820:	f04f 34ff 	mov.w	r4, #4294967295
 800d824:	4620      	mov	r0, r4
 800d826:	bd70      	pop	{r4, r5, r6, pc}
 800d828:	20000b54 	.word	0x20000b54

0800d82c <_malloc_r>:
 800d82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d830:	1ccd      	adds	r5, r1, #3
 800d832:	f025 0503 	bic.w	r5, r5, #3
 800d836:	3508      	adds	r5, #8
 800d838:	2d0c      	cmp	r5, #12
 800d83a:	bf38      	it	cc
 800d83c:	250c      	movcc	r5, #12
 800d83e:	2d00      	cmp	r5, #0
 800d840:	4607      	mov	r7, r0
 800d842:	db01      	blt.n	800d848 <_malloc_r+0x1c>
 800d844:	42a9      	cmp	r1, r5
 800d846:	d905      	bls.n	800d854 <_malloc_r+0x28>
 800d848:	230c      	movs	r3, #12
 800d84a:	603b      	str	r3, [r7, #0]
 800d84c:	2600      	movs	r6, #0
 800d84e:	4630      	mov	r0, r6
 800d850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d854:	4e2e      	ldr	r6, [pc, #184]	; (800d910 <_malloc_r+0xe4>)
 800d856:	f000 fa25 	bl	800dca4 <__malloc_lock>
 800d85a:	6833      	ldr	r3, [r6, #0]
 800d85c:	461c      	mov	r4, r3
 800d85e:	bb34      	cbnz	r4, 800d8ae <_malloc_r+0x82>
 800d860:	4629      	mov	r1, r5
 800d862:	4638      	mov	r0, r7
 800d864:	f7ff ffc2 	bl	800d7ec <sbrk_aligned>
 800d868:	1c43      	adds	r3, r0, #1
 800d86a:	4604      	mov	r4, r0
 800d86c:	d14d      	bne.n	800d90a <_malloc_r+0xde>
 800d86e:	6834      	ldr	r4, [r6, #0]
 800d870:	4626      	mov	r6, r4
 800d872:	2e00      	cmp	r6, #0
 800d874:	d140      	bne.n	800d8f8 <_malloc_r+0xcc>
 800d876:	6823      	ldr	r3, [r4, #0]
 800d878:	4631      	mov	r1, r6
 800d87a:	4638      	mov	r0, r7
 800d87c:	eb04 0803 	add.w	r8, r4, r3
 800d880:	f000 f9a4 	bl	800dbcc <_sbrk_r>
 800d884:	4580      	cmp	r8, r0
 800d886:	d13a      	bne.n	800d8fe <_malloc_r+0xd2>
 800d888:	6821      	ldr	r1, [r4, #0]
 800d88a:	3503      	adds	r5, #3
 800d88c:	1a6d      	subs	r5, r5, r1
 800d88e:	f025 0503 	bic.w	r5, r5, #3
 800d892:	3508      	adds	r5, #8
 800d894:	2d0c      	cmp	r5, #12
 800d896:	bf38      	it	cc
 800d898:	250c      	movcc	r5, #12
 800d89a:	4629      	mov	r1, r5
 800d89c:	4638      	mov	r0, r7
 800d89e:	f7ff ffa5 	bl	800d7ec <sbrk_aligned>
 800d8a2:	3001      	adds	r0, #1
 800d8a4:	d02b      	beq.n	800d8fe <_malloc_r+0xd2>
 800d8a6:	6823      	ldr	r3, [r4, #0]
 800d8a8:	442b      	add	r3, r5
 800d8aa:	6023      	str	r3, [r4, #0]
 800d8ac:	e00e      	b.n	800d8cc <_malloc_r+0xa0>
 800d8ae:	6822      	ldr	r2, [r4, #0]
 800d8b0:	1b52      	subs	r2, r2, r5
 800d8b2:	d41e      	bmi.n	800d8f2 <_malloc_r+0xc6>
 800d8b4:	2a0b      	cmp	r2, #11
 800d8b6:	d916      	bls.n	800d8e6 <_malloc_r+0xba>
 800d8b8:	1961      	adds	r1, r4, r5
 800d8ba:	42a3      	cmp	r3, r4
 800d8bc:	6025      	str	r5, [r4, #0]
 800d8be:	bf18      	it	ne
 800d8c0:	6059      	strne	r1, [r3, #4]
 800d8c2:	6863      	ldr	r3, [r4, #4]
 800d8c4:	bf08      	it	eq
 800d8c6:	6031      	streq	r1, [r6, #0]
 800d8c8:	5162      	str	r2, [r4, r5]
 800d8ca:	604b      	str	r3, [r1, #4]
 800d8cc:	4638      	mov	r0, r7
 800d8ce:	f104 060b 	add.w	r6, r4, #11
 800d8d2:	f000 f9ed 	bl	800dcb0 <__malloc_unlock>
 800d8d6:	f026 0607 	bic.w	r6, r6, #7
 800d8da:	1d23      	adds	r3, r4, #4
 800d8dc:	1af2      	subs	r2, r6, r3
 800d8de:	d0b6      	beq.n	800d84e <_malloc_r+0x22>
 800d8e0:	1b9b      	subs	r3, r3, r6
 800d8e2:	50a3      	str	r3, [r4, r2]
 800d8e4:	e7b3      	b.n	800d84e <_malloc_r+0x22>
 800d8e6:	6862      	ldr	r2, [r4, #4]
 800d8e8:	42a3      	cmp	r3, r4
 800d8ea:	bf0c      	ite	eq
 800d8ec:	6032      	streq	r2, [r6, #0]
 800d8ee:	605a      	strne	r2, [r3, #4]
 800d8f0:	e7ec      	b.n	800d8cc <_malloc_r+0xa0>
 800d8f2:	4623      	mov	r3, r4
 800d8f4:	6864      	ldr	r4, [r4, #4]
 800d8f6:	e7b2      	b.n	800d85e <_malloc_r+0x32>
 800d8f8:	4634      	mov	r4, r6
 800d8fa:	6876      	ldr	r6, [r6, #4]
 800d8fc:	e7b9      	b.n	800d872 <_malloc_r+0x46>
 800d8fe:	230c      	movs	r3, #12
 800d900:	603b      	str	r3, [r7, #0]
 800d902:	4638      	mov	r0, r7
 800d904:	f000 f9d4 	bl	800dcb0 <__malloc_unlock>
 800d908:	e7a1      	b.n	800d84e <_malloc_r+0x22>
 800d90a:	6025      	str	r5, [r4, #0]
 800d90c:	e7de      	b.n	800d8cc <_malloc_r+0xa0>
 800d90e:	bf00      	nop
 800d910:	20000b50 	.word	0x20000b50

0800d914 <__ssputs_r>:
 800d914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d918:	688e      	ldr	r6, [r1, #8]
 800d91a:	429e      	cmp	r6, r3
 800d91c:	4682      	mov	sl, r0
 800d91e:	460c      	mov	r4, r1
 800d920:	4690      	mov	r8, r2
 800d922:	461f      	mov	r7, r3
 800d924:	d838      	bhi.n	800d998 <__ssputs_r+0x84>
 800d926:	898a      	ldrh	r2, [r1, #12]
 800d928:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d92c:	d032      	beq.n	800d994 <__ssputs_r+0x80>
 800d92e:	6825      	ldr	r5, [r4, #0]
 800d930:	6909      	ldr	r1, [r1, #16]
 800d932:	eba5 0901 	sub.w	r9, r5, r1
 800d936:	6965      	ldr	r5, [r4, #20]
 800d938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d93c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d940:	3301      	adds	r3, #1
 800d942:	444b      	add	r3, r9
 800d944:	106d      	asrs	r5, r5, #1
 800d946:	429d      	cmp	r5, r3
 800d948:	bf38      	it	cc
 800d94a:	461d      	movcc	r5, r3
 800d94c:	0553      	lsls	r3, r2, #21
 800d94e:	d531      	bpl.n	800d9b4 <__ssputs_r+0xa0>
 800d950:	4629      	mov	r1, r5
 800d952:	f7ff ff6b 	bl	800d82c <_malloc_r>
 800d956:	4606      	mov	r6, r0
 800d958:	b950      	cbnz	r0, 800d970 <__ssputs_r+0x5c>
 800d95a:	230c      	movs	r3, #12
 800d95c:	f8ca 3000 	str.w	r3, [sl]
 800d960:	89a3      	ldrh	r3, [r4, #12]
 800d962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d966:	81a3      	strh	r3, [r4, #12]
 800d968:	f04f 30ff 	mov.w	r0, #4294967295
 800d96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d970:	6921      	ldr	r1, [r4, #16]
 800d972:	464a      	mov	r2, r9
 800d974:	f7ff fb46 	bl	800d004 <memcpy>
 800d978:	89a3      	ldrh	r3, [r4, #12]
 800d97a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d97e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d982:	81a3      	strh	r3, [r4, #12]
 800d984:	6126      	str	r6, [r4, #16]
 800d986:	6165      	str	r5, [r4, #20]
 800d988:	444e      	add	r6, r9
 800d98a:	eba5 0509 	sub.w	r5, r5, r9
 800d98e:	6026      	str	r6, [r4, #0]
 800d990:	60a5      	str	r5, [r4, #8]
 800d992:	463e      	mov	r6, r7
 800d994:	42be      	cmp	r6, r7
 800d996:	d900      	bls.n	800d99a <__ssputs_r+0x86>
 800d998:	463e      	mov	r6, r7
 800d99a:	6820      	ldr	r0, [r4, #0]
 800d99c:	4632      	mov	r2, r6
 800d99e:	4641      	mov	r1, r8
 800d9a0:	f000 f966 	bl	800dc70 <memmove>
 800d9a4:	68a3      	ldr	r3, [r4, #8]
 800d9a6:	1b9b      	subs	r3, r3, r6
 800d9a8:	60a3      	str	r3, [r4, #8]
 800d9aa:	6823      	ldr	r3, [r4, #0]
 800d9ac:	4433      	add	r3, r6
 800d9ae:	6023      	str	r3, [r4, #0]
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	e7db      	b.n	800d96c <__ssputs_r+0x58>
 800d9b4:	462a      	mov	r2, r5
 800d9b6:	f000 f981 	bl	800dcbc <_realloc_r>
 800d9ba:	4606      	mov	r6, r0
 800d9bc:	2800      	cmp	r0, #0
 800d9be:	d1e1      	bne.n	800d984 <__ssputs_r+0x70>
 800d9c0:	6921      	ldr	r1, [r4, #16]
 800d9c2:	4650      	mov	r0, sl
 800d9c4:	f7ff fec6 	bl	800d754 <_free_r>
 800d9c8:	e7c7      	b.n	800d95a <__ssputs_r+0x46>
	...

0800d9cc <_svfiprintf_r>:
 800d9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d0:	4698      	mov	r8, r3
 800d9d2:	898b      	ldrh	r3, [r1, #12]
 800d9d4:	061b      	lsls	r3, r3, #24
 800d9d6:	b09d      	sub	sp, #116	; 0x74
 800d9d8:	4607      	mov	r7, r0
 800d9da:	460d      	mov	r5, r1
 800d9dc:	4614      	mov	r4, r2
 800d9de:	d50e      	bpl.n	800d9fe <_svfiprintf_r+0x32>
 800d9e0:	690b      	ldr	r3, [r1, #16]
 800d9e2:	b963      	cbnz	r3, 800d9fe <_svfiprintf_r+0x32>
 800d9e4:	2140      	movs	r1, #64	; 0x40
 800d9e6:	f7ff ff21 	bl	800d82c <_malloc_r>
 800d9ea:	6028      	str	r0, [r5, #0]
 800d9ec:	6128      	str	r0, [r5, #16]
 800d9ee:	b920      	cbnz	r0, 800d9fa <_svfiprintf_r+0x2e>
 800d9f0:	230c      	movs	r3, #12
 800d9f2:	603b      	str	r3, [r7, #0]
 800d9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f8:	e0d1      	b.n	800db9e <_svfiprintf_r+0x1d2>
 800d9fa:	2340      	movs	r3, #64	; 0x40
 800d9fc:	616b      	str	r3, [r5, #20]
 800d9fe:	2300      	movs	r3, #0
 800da00:	9309      	str	r3, [sp, #36]	; 0x24
 800da02:	2320      	movs	r3, #32
 800da04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da08:	f8cd 800c 	str.w	r8, [sp, #12]
 800da0c:	2330      	movs	r3, #48	; 0x30
 800da0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dbb8 <_svfiprintf_r+0x1ec>
 800da12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da16:	f04f 0901 	mov.w	r9, #1
 800da1a:	4623      	mov	r3, r4
 800da1c:	469a      	mov	sl, r3
 800da1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da22:	b10a      	cbz	r2, 800da28 <_svfiprintf_r+0x5c>
 800da24:	2a25      	cmp	r2, #37	; 0x25
 800da26:	d1f9      	bne.n	800da1c <_svfiprintf_r+0x50>
 800da28:	ebba 0b04 	subs.w	fp, sl, r4
 800da2c:	d00b      	beq.n	800da46 <_svfiprintf_r+0x7a>
 800da2e:	465b      	mov	r3, fp
 800da30:	4622      	mov	r2, r4
 800da32:	4629      	mov	r1, r5
 800da34:	4638      	mov	r0, r7
 800da36:	f7ff ff6d 	bl	800d914 <__ssputs_r>
 800da3a:	3001      	adds	r0, #1
 800da3c:	f000 80aa 	beq.w	800db94 <_svfiprintf_r+0x1c8>
 800da40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da42:	445a      	add	r2, fp
 800da44:	9209      	str	r2, [sp, #36]	; 0x24
 800da46:	f89a 3000 	ldrb.w	r3, [sl]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f000 80a2 	beq.w	800db94 <_svfiprintf_r+0x1c8>
 800da50:	2300      	movs	r3, #0
 800da52:	f04f 32ff 	mov.w	r2, #4294967295
 800da56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da5a:	f10a 0a01 	add.w	sl, sl, #1
 800da5e:	9304      	str	r3, [sp, #16]
 800da60:	9307      	str	r3, [sp, #28]
 800da62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da66:	931a      	str	r3, [sp, #104]	; 0x68
 800da68:	4654      	mov	r4, sl
 800da6a:	2205      	movs	r2, #5
 800da6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da70:	4851      	ldr	r0, [pc, #324]	; (800dbb8 <_svfiprintf_r+0x1ec>)
 800da72:	f7f2 fbd5 	bl	8000220 <memchr>
 800da76:	9a04      	ldr	r2, [sp, #16]
 800da78:	b9d8      	cbnz	r0, 800dab2 <_svfiprintf_r+0xe6>
 800da7a:	06d0      	lsls	r0, r2, #27
 800da7c:	bf44      	itt	mi
 800da7e:	2320      	movmi	r3, #32
 800da80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da84:	0711      	lsls	r1, r2, #28
 800da86:	bf44      	itt	mi
 800da88:	232b      	movmi	r3, #43	; 0x2b
 800da8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da8e:	f89a 3000 	ldrb.w	r3, [sl]
 800da92:	2b2a      	cmp	r3, #42	; 0x2a
 800da94:	d015      	beq.n	800dac2 <_svfiprintf_r+0xf6>
 800da96:	9a07      	ldr	r2, [sp, #28]
 800da98:	4654      	mov	r4, sl
 800da9a:	2000      	movs	r0, #0
 800da9c:	f04f 0c0a 	mov.w	ip, #10
 800daa0:	4621      	mov	r1, r4
 800daa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daa6:	3b30      	subs	r3, #48	; 0x30
 800daa8:	2b09      	cmp	r3, #9
 800daaa:	d94e      	bls.n	800db4a <_svfiprintf_r+0x17e>
 800daac:	b1b0      	cbz	r0, 800dadc <_svfiprintf_r+0x110>
 800daae:	9207      	str	r2, [sp, #28]
 800dab0:	e014      	b.n	800dadc <_svfiprintf_r+0x110>
 800dab2:	eba0 0308 	sub.w	r3, r0, r8
 800dab6:	fa09 f303 	lsl.w	r3, r9, r3
 800daba:	4313      	orrs	r3, r2
 800dabc:	9304      	str	r3, [sp, #16]
 800dabe:	46a2      	mov	sl, r4
 800dac0:	e7d2      	b.n	800da68 <_svfiprintf_r+0x9c>
 800dac2:	9b03      	ldr	r3, [sp, #12]
 800dac4:	1d19      	adds	r1, r3, #4
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	9103      	str	r1, [sp, #12]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	bfbb      	ittet	lt
 800dace:	425b      	neglt	r3, r3
 800dad0:	f042 0202 	orrlt.w	r2, r2, #2
 800dad4:	9307      	strge	r3, [sp, #28]
 800dad6:	9307      	strlt	r3, [sp, #28]
 800dad8:	bfb8      	it	lt
 800dada:	9204      	strlt	r2, [sp, #16]
 800dadc:	7823      	ldrb	r3, [r4, #0]
 800dade:	2b2e      	cmp	r3, #46	; 0x2e
 800dae0:	d10c      	bne.n	800dafc <_svfiprintf_r+0x130>
 800dae2:	7863      	ldrb	r3, [r4, #1]
 800dae4:	2b2a      	cmp	r3, #42	; 0x2a
 800dae6:	d135      	bne.n	800db54 <_svfiprintf_r+0x188>
 800dae8:	9b03      	ldr	r3, [sp, #12]
 800daea:	1d1a      	adds	r2, r3, #4
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	9203      	str	r2, [sp, #12]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	bfb8      	it	lt
 800daf4:	f04f 33ff 	movlt.w	r3, #4294967295
 800daf8:	3402      	adds	r4, #2
 800dafa:	9305      	str	r3, [sp, #20]
 800dafc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dbc8 <_svfiprintf_r+0x1fc>
 800db00:	7821      	ldrb	r1, [r4, #0]
 800db02:	2203      	movs	r2, #3
 800db04:	4650      	mov	r0, sl
 800db06:	f7f2 fb8b 	bl	8000220 <memchr>
 800db0a:	b140      	cbz	r0, 800db1e <_svfiprintf_r+0x152>
 800db0c:	2340      	movs	r3, #64	; 0x40
 800db0e:	eba0 000a 	sub.w	r0, r0, sl
 800db12:	fa03 f000 	lsl.w	r0, r3, r0
 800db16:	9b04      	ldr	r3, [sp, #16]
 800db18:	4303      	orrs	r3, r0
 800db1a:	3401      	adds	r4, #1
 800db1c:	9304      	str	r3, [sp, #16]
 800db1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db22:	4826      	ldr	r0, [pc, #152]	; (800dbbc <_svfiprintf_r+0x1f0>)
 800db24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db28:	2206      	movs	r2, #6
 800db2a:	f7f2 fb79 	bl	8000220 <memchr>
 800db2e:	2800      	cmp	r0, #0
 800db30:	d038      	beq.n	800dba4 <_svfiprintf_r+0x1d8>
 800db32:	4b23      	ldr	r3, [pc, #140]	; (800dbc0 <_svfiprintf_r+0x1f4>)
 800db34:	bb1b      	cbnz	r3, 800db7e <_svfiprintf_r+0x1b2>
 800db36:	9b03      	ldr	r3, [sp, #12]
 800db38:	3307      	adds	r3, #7
 800db3a:	f023 0307 	bic.w	r3, r3, #7
 800db3e:	3308      	adds	r3, #8
 800db40:	9303      	str	r3, [sp, #12]
 800db42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db44:	4433      	add	r3, r6
 800db46:	9309      	str	r3, [sp, #36]	; 0x24
 800db48:	e767      	b.n	800da1a <_svfiprintf_r+0x4e>
 800db4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800db4e:	460c      	mov	r4, r1
 800db50:	2001      	movs	r0, #1
 800db52:	e7a5      	b.n	800daa0 <_svfiprintf_r+0xd4>
 800db54:	2300      	movs	r3, #0
 800db56:	3401      	adds	r4, #1
 800db58:	9305      	str	r3, [sp, #20]
 800db5a:	4619      	mov	r1, r3
 800db5c:	f04f 0c0a 	mov.w	ip, #10
 800db60:	4620      	mov	r0, r4
 800db62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db66:	3a30      	subs	r2, #48	; 0x30
 800db68:	2a09      	cmp	r2, #9
 800db6a:	d903      	bls.n	800db74 <_svfiprintf_r+0x1a8>
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d0c5      	beq.n	800dafc <_svfiprintf_r+0x130>
 800db70:	9105      	str	r1, [sp, #20]
 800db72:	e7c3      	b.n	800dafc <_svfiprintf_r+0x130>
 800db74:	fb0c 2101 	mla	r1, ip, r1, r2
 800db78:	4604      	mov	r4, r0
 800db7a:	2301      	movs	r3, #1
 800db7c:	e7f0      	b.n	800db60 <_svfiprintf_r+0x194>
 800db7e:	ab03      	add	r3, sp, #12
 800db80:	9300      	str	r3, [sp, #0]
 800db82:	462a      	mov	r2, r5
 800db84:	4b0f      	ldr	r3, [pc, #60]	; (800dbc4 <_svfiprintf_r+0x1f8>)
 800db86:	a904      	add	r1, sp, #16
 800db88:	4638      	mov	r0, r7
 800db8a:	f7fd ffcb 	bl	800bb24 <_printf_float>
 800db8e:	1c42      	adds	r2, r0, #1
 800db90:	4606      	mov	r6, r0
 800db92:	d1d6      	bne.n	800db42 <_svfiprintf_r+0x176>
 800db94:	89ab      	ldrh	r3, [r5, #12]
 800db96:	065b      	lsls	r3, r3, #25
 800db98:	f53f af2c 	bmi.w	800d9f4 <_svfiprintf_r+0x28>
 800db9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db9e:	b01d      	add	sp, #116	; 0x74
 800dba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dba4:	ab03      	add	r3, sp, #12
 800dba6:	9300      	str	r3, [sp, #0]
 800dba8:	462a      	mov	r2, r5
 800dbaa:	4b06      	ldr	r3, [pc, #24]	; (800dbc4 <_svfiprintf_r+0x1f8>)
 800dbac:	a904      	add	r1, sp, #16
 800dbae:	4638      	mov	r0, r7
 800dbb0:	f7fe fa5c 	bl	800c06c <_printf_i>
 800dbb4:	e7eb      	b.n	800db8e <_svfiprintf_r+0x1c2>
 800dbb6:	bf00      	nop
 800dbb8:	0800ffcc 	.word	0x0800ffcc
 800dbbc:	0800ffd6 	.word	0x0800ffd6
 800dbc0:	0800bb25 	.word	0x0800bb25
 800dbc4:	0800d915 	.word	0x0800d915
 800dbc8:	0800ffd2 	.word	0x0800ffd2

0800dbcc <_sbrk_r>:
 800dbcc:	b538      	push	{r3, r4, r5, lr}
 800dbce:	4d06      	ldr	r5, [pc, #24]	; (800dbe8 <_sbrk_r+0x1c>)
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	4604      	mov	r4, r0
 800dbd4:	4608      	mov	r0, r1
 800dbd6:	602b      	str	r3, [r5, #0]
 800dbd8:	f7f8 f934 	bl	8005e44 <_sbrk>
 800dbdc:	1c43      	adds	r3, r0, #1
 800dbde:	d102      	bne.n	800dbe6 <_sbrk_r+0x1a>
 800dbe0:	682b      	ldr	r3, [r5, #0]
 800dbe2:	b103      	cbz	r3, 800dbe6 <_sbrk_r+0x1a>
 800dbe4:	6023      	str	r3, [r4, #0]
 800dbe6:	bd38      	pop	{r3, r4, r5, pc}
 800dbe8:	20000b58 	.word	0x20000b58

0800dbec <__assert_func>:
 800dbec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbee:	4614      	mov	r4, r2
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	4b09      	ldr	r3, [pc, #36]	; (800dc18 <__assert_func+0x2c>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4605      	mov	r5, r0
 800dbf8:	68d8      	ldr	r0, [r3, #12]
 800dbfa:	b14c      	cbz	r4, 800dc10 <__assert_func+0x24>
 800dbfc:	4b07      	ldr	r3, [pc, #28]	; (800dc1c <__assert_func+0x30>)
 800dbfe:	9100      	str	r1, [sp, #0]
 800dc00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc04:	4906      	ldr	r1, [pc, #24]	; (800dc20 <__assert_func+0x34>)
 800dc06:	462b      	mov	r3, r5
 800dc08:	f000 f80e 	bl	800dc28 <fiprintf>
 800dc0c:	f000 faac 	bl	800e168 <abort>
 800dc10:	4b04      	ldr	r3, [pc, #16]	; (800dc24 <__assert_func+0x38>)
 800dc12:	461c      	mov	r4, r3
 800dc14:	e7f3      	b.n	800dbfe <__assert_func+0x12>
 800dc16:	bf00      	nop
 800dc18:	200000a8 	.word	0x200000a8
 800dc1c:	0800ffdd 	.word	0x0800ffdd
 800dc20:	0800ffea 	.word	0x0800ffea
 800dc24:	08010018 	.word	0x08010018

0800dc28 <fiprintf>:
 800dc28:	b40e      	push	{r1, r2, r3}
 800dc2a:	b503      	push	{r0, r1, lr}
 800dc2c:	4601      	mov	r1, r0
 800dc2e:	ab03      	add	r3, sp, #12
 800dc30:	4805      	ldr	r0, [pc, #20]	; (800dc48 <fiprintf+0x20>)
 800dc32:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc36:	6800      	ldr	r0, [r0, #0]
 800dc38:	9301      	str	r3, [sp, #4]
 800dc3a:	f000 f897 	bl	800dd6c <_vfiprintf_r>
 800dc3e:	b002      	add	sp, #8
 800dc40:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc44:	b003      	add	sp, #12
 800dc46:	4770      	bx	lr
 800dc48:	200000a8 	.word	0x200000a8

0800dc4c <__ascii_mbtowc>:
 800dc4c:	b082      	sub	sp, #8
 800dc4e:	b901      	cbnz	r1, 800dc52 <__ascii_mbtowc+0x6>
 800dc50:	a901      	add	r1, sp, #4
 800dc52:	b142      	cbz	r2, 800dc66 <__ascii_mbtowc+0x1a>
 800dc54:	b14b      	cbz	r3, 800dc6a <__ascii_mbtowc+0x1e>
 800dc56:	7813      	ldrb	r3, [r2, #0]
 800dc58:	600b      	str	r3, [r1, #0]
 800dc5a:	7812      	ldrb	r2, [r2, #0]
 800dc5c:	1e10      	subs	r0, r2, #0
 800dc5e:	bf18      	it	ne
 800dc60:	2001      	movne	r0, #1
 800dc62:	b002      	add	sp, #8
 800dc64:	4770      	bx	lr
 800dc66:	4610      	mov	r0, r2
 800dc68:	e7fb      	b.n	800dc62 <__ascii_mbtowc+0x16>
 800dc6a:	f06f 0001 	mvn.w	r0, #1
 800dc6e:	e7f8      	b.n	800dc62 <__ascii_mbtowc+0x16>

0800dc70 <memmove>:
 800dc70:	4288      	cmp	r0, r1
 800dc72:	b510      	push	{r4, lr}
 800dc74:	eb01 0402 	add.w	r4, r1, r2
 800dc78:	d902      	bls.n	800dc80 <memmove+0x10>
 800dc7a:	4284      	cmp	r4, r0
 800dc7c:	4623      	mov	r3, r4
 800dc7e:	d807      	bhi.n	800dc90 <memmove+0x20>
 800dc80:	1e43      	subs	r3, r0, #1
 800dc82:	42a1      	cmp	r1, r4
 800dc84:	d008      	beq.n	800dc98 <memmove+0x28>
 800dc86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc8e:	e7f8      	b.n	800dc82 <memmove+0x12>
 800dc90:	4402      	add	r2, r0
 800dc92:	4601      	mov	r1, r0
 800dc94:	428a      	cmp	r2, r1
 800dc96:	d100      	bne.n	800dc9a <memmove+0x2a>
 800dc98:	bd10      	pop	{r4, pc}
 800dc9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dca2:	e7f7      	b.n	800dc94 <memmove+0x24>

0800dca4 <__malloc_lock>:
 800dca4:	4801      	ldr	r0, [pc, #4]	; (800dcac <__malloc_lock+0x8>)
 800dca6:	f000 bc1f 	b.w	800e4e8 <__retarget_lock_acquire_recursive>
 800dcaa:	bf00      	nop
 800dcac:	20000b5c 	.word	0x20000b5c

0800dcb0 <__malloc_unlock>:
 800dcb0:	4801      	ldr	r0, [pc, #4]	; (800dcb8 <__malloc_unlock+0x8>)
 800dcb2:	f000 bc1a 	b.w	800e4ea <__retarget_lock_release_recursive>
 800dcb6:	bf00      	nop
 800dcb8:	20000b5c 	.word	0x20000b5c

0800dcbc <_realloc_r>:
 800dcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcc0:	4680      	mov	r8, r0
 800dcc2:	4614      	mov	r4, r2
 800dcc4:	460e      	mov	r6, r1
 800dcc6:	b921      	cbnz	r1, 800dcd2 <_realloc_r+0x16>
 800dcc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dccc:	4611      	mov	r1, r2
 800dcce:	f7ff bdad 	b.w	800d82c <_malloc_r>
 800dcd2:	b92a      	cbnz	r2, 800dce0 <_realloc_r+0x24>
 800dcd4:	f7ff fd3e 	bl	800d754 <_free_r>
 800dcd8:	4625      	mov	r5, r4
 800dcda:	4628      	mov	r0, r5
 800dcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dce0:	f000 fc6a 	bl	800e5b8 <_malloc_usable_size_r>
 800dce4:	4284      	cmp	r4, r0
 800dce6:	4607      	mov	r7, r0
 800dce8:	d802      	bhi.n	800dcf0 <_realloc_r+0x34>
 800dcea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dcee:	d812      	bhi.n	800dd16 <_realloc_r+0x5a>
 800dcf0:	4621      	mov	r1, r4
 800dcf2:	4640      	mov	r0, r8
 800dcf4:	f7ff fd9a 	bl	800d82c <_malloc_r>
 800dcf8:	4605      	mov	r5, r0
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d0ed      	beq.n	800dcda <_realloc_r+0x1e>
 800dcfe:	42bc      	cmp	r4, r7
 800dd00:	4622      	mov	r2, r4
 800dd02:	4631      	mov	r1, r6
 800dd04:	bf28      	it	cs
 800dd06:	463a      	movcs	r2, r7
 800dd08:	f7ff f97c 	bl	800d004 <memcpy>
 800dd0c:	4631      	mov	r1, r6
 800dd0e:	4640      	mov	r0, r8
 800dd10:	f7ff fd20 	bl	800d754 <_free_r>
 800dd14:	e7e1      	b.n	800dcda <_realloc_r+0x1e>
 800dd16:	4635      	mov	r5, r6
 800dd18:	e7df      	b.n	800dcda <_realloc_r+0x1e>

0800dd1a <__sfputc_r>:
 800dd1a:	6893      	ldr	r3, [r2, #8]
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	b410      	push	{r4}
 800dd22:	6093      	str	r3, [r2, #8]
 800dd24:	da08      	bge.n	800dd38 <__sfputc_r+0x1e>
 800dd26:	6994      	ldr	r4, [r2, #24]
 800dd28:	42a3      	cmp	r3, r4
 800dd2a:	db01      	blt.n	800dd30 <__sfputc_r+0x16>
 800dd2c:	290a      	cmp	r1, #10
 800dd2e:	d103      	bne.n	800dd38 <__sfputc_r+0x1e>
 800dd30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd34:	f000 b94a 	b.w	800dfcc <__swbuf_r>
 800dd38:	6813      	ldr	r3, [r2, #0]
 800dd3a:	1c58      	adds	r0, r3, #1
 800dd3c:	6010      	str	r0, [r2, #0]
 800dd3e:	7019      	strb	r1, [r3, #0]
 800dd40:	4608      	mov	r0, r1
 800dd42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd46:	4770      	bx	lr

0800dd48 <__sfputs_r>:
 800dd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd4a:	4606      	mov	r6, r0
 800dd4c:	460f      	mov	r7, r1
 800dd4e:	4614      	mov	r4, r2
 800dd50:	18d5      	adds	r5, r2, r3
 800dd52:	42ac      	cmp	r4, r5
 800dd54:	d101      	bne.n	800dd5a <__sfputs_r+0x12>
 800dd56:	2000      	movs	r0, #0
 800dd58:	e007      	b.n	800dd6a <__sfputs_r+0x22>
 800dd5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd5e:	463a      	mov	r2, r7
 800dd60:	4630      	mov	r0, r6
 800dd62:	f7ff ffda 	bl	800dd1a <__sfputc_r>
 800dd66:	1c43      	adds	r3, r0, #1
 800dd68:	d1f3      	bne.n	800dd52 <__sfputs_r+0xa>
 800dd6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dd6c <_vfiprintf_r>:
 800dd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd70:	460d      	mov	r5, r1
 800dd72:	b09d      	sub	sp, #116	; 0x74
 800dd74:	4614      	mov	r4, r2
 800dd76:	4698      	mov	r8, r3
 800dd78:	4606      	mov	r6, r0
 800dd7a:	b118      	cbz	r0, 800dd84 <_vfiprintf_r+0x18>
 800dd7c:	6983      	ldr	r3, [r0, #24]
 800dd7e:	b90b      	cbnz	r3, 800dd84 <_vfiprintf_r+0x18>
 800dd80:	f000 fb14 	bl	800e3ac <__sinit>
 800dd84:	4b89      	ldr	r3, [pc, #548]	; (800dfac <_vfiprintf_r+0x240>)
 800dd86:	429d      	cmp	r5, r3
 800dd88:	d11b      	bne.n	800ddc2 <_vfiprintf_r+0x56>
 800dd8a:	6875      	ldr	r5, [r6, #4]
 800dd8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd8e:	07d9      	lsls	r1, r3, #31
 800dd90:	d405      	bmi.n	800dd9e <_vfiprintf_r+0x32>
 800dd92:	89ab      	ldrh	r3, [r5, #12]
 800dd94:	059a      	lsls	r2, r3, #22
 800dd96:	d402      	bmi.n	800dd9e <_vfiprintf_r+0x32>
 800dd98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd9a:	f000 fba5 	bl	800e4e8 <__retarget_lock_acquire_recursive>
 800dd9e:	89ab      	ldrh	r3, [r5, #12]
 800dda0:	071b      	lsls	r3, r3, #28
 800dda2:	d501      	bpl.n	800dda8 <_vfiprintf_r+0x3c>
 800dda4:	692b      	ldr	r3, [r5, #16]
 800dda6:	b9eb      	cbnz	r3, 800dde4 <_vfiprintf_r+0x78>
 800dda8:	4629      	mov	r1, r5
 800ddaa:	4630      	mov	r0, r6
 800ddac:	f000 f96e 	bl	800e08c <__swsetup_r>
 800ddb0:	b1c0      	cbz	r0, 800dde4 <_vfiprintf_r+0x78>
 800ddb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddb4:	07dc      	lsls	r4, r3, #31
 800ddb6:	d50e      	bpl.n	800ddd6 <_vfiprintf_r+0x6a>
 800ddb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ddbc:	b01d      	add	sp, #116	; 0x74
 800ddbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc2:	4b7b      	ldr	r3, [pc, #492]	; (800dfb0 <_vfiprintf_r+0x244>)
 800ddc4:	429d      	cmp	r5, r3
 800ddc6:	d101      	bne.n	800ddcc <_vfiprintf_r+0x60>
 800ddc8:	68b5      	ldr	r5, [r6, #8]
 800ddca:	e7df      	b.n	800dd8c <_vfiprintf_r+0x20>
 800ddcc:	4b79      	ldr	r3, [pc, #484]	; (800dfb4 <_vfiprintf_r+0x248>)
 800ddce:	429d      	cmp	r5, r3
 800ddd0:	bf08      	it	eq
 800ddd2:	68f5      	ldreq	r5, [r6, #12]
 800ddd4:	e7da      	b.n	800dd8c <_vfiprintf_r+0x20>
 800ddd6:	89ab      	ldrh	r3, [r5, #12]
 800ddd8:	0598      	lsls	r0, r3, #22
 800ddda:	d4ed      	bmi.n	800ddb8 <_vfiprintf_r+0x4c>
 800dddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddde:	f000 fb84 	bl	800e4ea <__retarget_lock_release_recursive>
 800dde2:	e7e9      	b.n	800ddb8 <_vfiprintf_r+0x4c>
 800dde4:	2300      	movs	r3, #0
 800dde6:	9309      	str	r3, [sp, #36]	; 0x24
 800dde8:	2320      	movs	r3, #32
 800ddea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddee:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddf2:	2330      	movs	r3, #48	; 0x30
 800ddf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dfb8 <_vfiprintf_r+0x24c>
 800ddf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddfc:	f04f 0901 	mov.w	r9, #1
 800de00:	4623      	mov	r3, r4
 800de02:	469a      	mov	sl, r3
 800de04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de08:	b10a      	cbz	r2, 800de0e <_vfiprintf_r+0xa2>
 800de0a:	2a25      	cmp	r2, #37	; 0x25
 800de0c:	d1f9      	bne.n	800de02 <_vfiprintf_r+0x96>
 800de0e:	ebba 0b04 	subs.w	fp, sl, r4
 800de12:	d00b      	beq.n	800de2c <_vfiprintf_r+0xc0>
 800de14:	465b      	mov	r3, fp
 800de16:	4622      	mov	r2, r4
 800de18:	4629      	mov	r1, r5
 800de1a:	4630      	mov	r0, r6
 800de1c:	f7ff ff94 	bl	800dd48 <__sfputs_r>
 800de20:	3001      	adds	r0, #1
 800de22:	f000 80aa 	beq.w	800df7a <_vfiprintf_r+0x20e>
 800de26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de28:	445a      	add	r2, fp
 800de2a:	9209      	str	r2, [sp, #36]	; 0x24
 800de2c:	f89a 3000 	ldrb.w	r3, [sl]
 800de30:	2b00      	cmp	r3, #0
 800de32:	f000 80a2 	beq.w	800df7a <_vfiprintf_r+0x20e>
 800de36:	2300      	movs	r3, #0
 800de38:	f04f 32ff 	mov.w	r2, #4294967295
 800de3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de40:	f10a 0a01 	add.w	sl, sl, #1
 800de44:	9304      	str	r3, [sp, #16]
 800de46:	9307      	str	r3, [sp, #28]
 800de48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de4c:	931a      	str	r3, [sp, #104]	; 0x68
 800de4e:	4654      	mov	r4, sl
 800de50:	2205      	movs	r2, #5
 800de52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de56:	4858      	ldr	r0, [pc, #352]	; (800dfb8 <_vfiprintf_r+0x24c>)
 800de58:	f7f2 f9e2 	bl	8000220 <memchr>
 800de5c:	9a04      	ldr	r2, [sp, #16]
 800de5e:	b9d8      	cbnz	r0, 800de98 <_vfiprintf_r+0x12c>
 800de60:	06d1      	lsls	r1, r2, #27
 800de62:	bf44      	itt	mi
 800de64:	2320      	movmi	r3, #32
 800de66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de6a:	0713      	lsls	r3, r2, #28
 800de6c:	bf44      	itt	mi
 800de6e:	232b      	movmi	r3, #43	; 0x2b
 800de70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de74:	f89a 3000 	ldrb.w	r3, [sl]
 800de78:	2b2a      	cmp	r3, #42	; 0x2a
 800de7a:	d015      	beq.n	800dea8 <_vfiprintf_r+0x13c>
 800de7c:	9a07      	ldr	r2, [sp, #28]
 800de7e:	4654      	mov	r4, sl
 800de80:	2000      	movs	r0, #0
 800de82:	f04f 0c0a 	mov.w	ip, #10
 800de86:	4621      	mov	r1, r4
 800de88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de8c:	3b30      	subs	r3, #48	; 0x30
 800de8e:	2b09      	cmp	r3, #9
 800de90:	d94e      	bls.n	800df30 <_vfiprintf_r+0x1c4>
 800de92:	b1b0      	cbz	r0, 800dec2 <_vfiprintf_r+0x156>
 800de94:	9207      	str	r2, [sp, #28]
 800de96:	e014      	b.n	800dec2 <_vfiprintf_r+0x156>
 800de98:	eba0 0308 	sub.w	r3, r0, r8
 800de9c:	fa09 f303 	lsl.w	r3, r9, r3
 800dea0:	4313      	orrs	r3, r2
 800dea2:	9304      	str	r3, [sp, #16]
 800dea4:	46a2      	mov	sl, r4
 800dea6:	e7d2      	b.n	800de4e <_vfiprintf_r+0xe2>
 800dea8:	9b03      	ldr	r3, [sp, #12]
 800deaa:	1d19      	adds	r1, r3, #4
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	9103      	str	r1, [sp, #12]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	bfbb      	ittet	lt
 800deb4:	425b      	neglt	r3, r3
 800deb6:	f042 0202 	orrlt.w	r2, r2, #2
 800deba:	9307      	strge	r3, [sp, #28]
 800debc:	9307      	strlt	r3, [sp, #28]
 800debe:	bfb8      	it	lt
 800dec0:	9204      	strlt	r2, [sp, #16]
 800dec2:	7823      	ldrb	r3, [r4, #0]
 800dec4:	2b2e      	cmp	r3, #46	; 0x2e
 800dec6:	d10c      	bne.n	800dee2 <_vfiprintf_r+0x176>
 800dec8:	7863      	ldrb	r3, [r4, #1]
 800deca:	2b2a      	cmp	r3, #42	; 0x2a
 800decc:	d135      	bne.n	800df3a <_vfiprintf_r+0x1ce>
 800dece:	9b03      	ldr	r3, [sp, #12]
 800ded0:	1d1a      	adds	r2, r3, #4
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	9203      	str	r2, [sp, #12]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	bfb8      	it	lt
 800deda:	f04f 33ff 	movlt.w	r3, #4294967295
 800dede:	3402      	adds	r4, #2
 800dee0:	9305      	str	r3, [sp, #20]
 800dee2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dfc8 <_vfiprintf_r+0x25c>
 800dee6:	7821      	ldrb	r1, [r4, #0]
 800dee8:	2203      	movs	r2, #3
 800deea:	4650      	mov	r0, sl
 800deec:	f7f2 f998 	bl	8000220 <memchr>
 800def0:	b140      	cbz	r0, 800df04 <_vfiprintf_r+0x198>
 800def2:	2340      	movs	r3, #64	; 0x40
 800def4:	eba0 000a 	sub.w	r0, r0, sl
 800def8:	fa03 f000 	lsl.w	r0, r3, r0
 800defc:	9b04      	ldr	r3, [sp, #16]
 800defe:	4303      	orrs	r3, r0
 800df00:	3401      	adds	r4, #1
 800df02:	9304      	str	r3, [sp, #16]
 800df04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df08:	482c      	ldr	r0, [pc, #176]	; (800dfbc <_vfiprintf_r+0x250>)
 800df0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df0e:	2206      	movs	r2, #6
 800df10:	f7f2 f986 	bl	8000220 <memchr>
 800df14:	2800      	cmp	r0, #0
 800df16:	d03f      	beq.n	800df98 <_vfiprintf_r+0x22c>
 800df18:	4b29      	ldr	r3, [pc, #164]	; (800dfc0 <_vfiprintf_r+0x254>)
 800df1a:	bb1b      	cbnz	r3, 800df64 <_vfiprintf_r+0x1f8>
 800df1c:	9b03      	ldr	r3, [sp, #12]
 800df1e:	3307      	adds	r3, #7
 800df20:	f023 0307 	bic.w	r3, r3, #7
 800df24:	3308      	adds	r3, #8
 800df26:	9303      	str	r3, [sp, #12]
 800df28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df2a:	443b      	add	r3, r7
 800df2c:	9309      	str	r3, [sp, #36]	; 0x24
 800df2e:	e767      	b.n	800de00 <_vfiprintf_r+0x94>
 800df30:	fb0c 3202 	mla	r2, ip, r2, r3
 800df34:	460c      	mov	r4, r1
 800df36:	2001      	movs	r0, #1
 800df38:	e7a5      	b.n	800de86 <_vfiprintf_r+0x11a>
 800df3a:	2300      	movs	r3, #0
 800df3c:	3401      	adds	r4, #1
 800df3e:	9305      	str	r3, [sp, #20]
 800df40:	4619      	mov	r1, r3
 800df42:	f04f 0c0a 	mov.w	ip, #10
 800df46:	4620      	mov	r0, r4
 800df48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df4c:	3a30      	subs	r2, #48	; 0x30
 800df4e:	2a09      	cmp	r2, #9
 800df50:	d903      	bls.n	800df5a <_vfiprintf_r+0x1ee>
 800df52:	2b00      	cmp	r3, #0
 800df54:	d0c5      	beq.n	800dee2 <_vfiprintf_r+0x176>
 800df56:	9105      	str	r1, [sp, #20]
 800df58:	e7c3      	b.n	800dee2 <_vfiprintf_r+0x176>
 800df5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800df5e:	4604      	mov	r4, r0
 800df60:	2301      	movs	r3, #1
 800df62:	e7f0      	b.n	800df46 <_vfiprintf_r+0x1da>
 800df64:	ab03      	add	r3, sp, #12
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	462a      	mov	r2, r5
 800df6a:	4b16      	ldr	r3, [pc, #88]	; (800dfc4 <_vfiprintf_r+0x258>)
 800df6c:	a904      	add	r1, sp, #16
 800df6e:	4630      	mov	r0, r6
 800df70:	f7fd fdd8 	bl	800bb24 <_printf_float>
 800df74:	4607      	mov	r7, r0
 800df76:	1c78      	adds	r0, r7, #1
 800df78:	d1d6      	bne.n	800df28 <_vfiprintf_r+0x1bc>
 800df7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df7c:	07d9      	lsls	r1, r3, #31
 800df7e:	d405      	bmi.n	800df8c <_vfiprintf_r+0x220>
 800df80:	89ab      	ldrh	r3, [r5, #12]
 800df82:	059a      	lsls	r2, r3, #22
 800df84:	d402      	bmi.n	800df8c <_vfiprintf_r+0x220>
 800df86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df88:	f000 faaf 	bl	800e4ea <__retarget_lock_release_recursive>
 800df8c:	89ab      	ldrh	r3, [r5, #12]
 800df8e:	065b      	lsls	r3, r3, #25
 800df90:	f53f af12 	bmi.w	800ddb8 <_vfiprintf_r+0x4c>
 800df94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df96:	e711      	b.n	800ddbc <_vfiprintf_r+0x50>
 800df98:	ab03      	add	r3, sp, #12
 800df9a:	9300      	str	r3, [sp, #0]
 800df9c:	462a      	mov	r2, r5
 800df9e:	4b09      	ldr	r3, [pc, #36]	; (800dfc4 <_vfiprintf_r+0x258>)
 800dfa0:	a904      	add	r1, sp, #16
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	f7fe f862 	bl	800c06c <_printf_i>
 800dfa8:	e7e4      	b.n	800df74 <_vfiprintf_r+0x208>
 800dfaa:	bf00      	nop
 800dfac:	08010144 	.word	0x08010144
 800dfb0:	08010164 	.word	0x08010164
 800dfb4:	08010124 	.word	0x08010124
 800dfb8:	0800ffcc 	.word	0x0800ffcc
 800dfbc:	0800ffd6 	.word	0x0800ffd6
 800dfc0:	0800bb25 	.word	0x0800bb25
 800dfc4:	0800dd49 	.word	0x0800dd49
 800dfc8:	0800ffd2 	.word	0x0800ffd2

0800dfcc <__swbuf_r>:
 800dfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfce:	460e      	mov	r6, r1
 800dfd0:	4614      	mov	r4, r2
 800dfd2:	4605      	mov	r5, r0
 800dfd4:	b118      	cbz	r0, 800dfde <__swbuf_r+0x12>
 800dfd6:	6983      	ldr	r3, [r0, #24]
 800dfd8:	b90b      	cbnz	r3, 800dfde <__swbuf_r+0x12>
 800dfda:	f000 f9e7 	bl	800e3ac <__sinit>
 800dfde:	4b21      	ldr	r3, [pc, #132]	; (800e064 <__swbuf_r+0x98>)
 800dfe0:	429c      	cmp	r4, r3
 800dfe2:	d12b      	bne.n	800e03c <__swbuf_r+0x70>
 800dfe4:	686c      	ldr	r4, [r5, #4]
 800dfe6:	69a3      	ldr	r3, [r4, #24]
 800dfe8:	60a3      	str	r3, [r4, #8]
 800dfea:	89a3      	ldrh	r3, [r4, #12]
 800dfec:	071a      	lsls	r2, r3, #28
 800dfee:	d52f      	bpl.n	800e050 <__swbuf_r+0x84>
 800dff0:	6923      	ldr	r3, [r4, #16]
 800dff2:	b36b      	cbz	r3, 800e050 <__swbuf_r+0x84>
 800dff4:	6923      	ldr	r3, [r4, #16]
 800dff6:	6820      	ldr	r0, [r4, #0]
 800dff8:	1ac0      	subs	r0, r0, r3
 800dffa:	6963      	ldr	r3, [r4, #20]
 800dffc:	b2f6      	uxtb	r6, r6
 800dffe:	4283      	cmp	r3, r0
 800e000:	4637      	mov	r7, r6
 800e002:	dc04      	bgt.n	800e00e <__swbuf_r+0x42>
 800e004:	4621      	mov	r1, r4
 800e006:	4628      	mov	r0, r5
 800e008:	f000 f93c 	bl	800e284 <_fflush_r>
 800e00c:	bb30      	cbnz	r0, 800e05c <__swbuf_r+0x90>
 800e00e:	68a3      	ldr	r3, [r4, #8]
 800e010:	3b01      	subs	r3, #1
 800e012:	60a3      	str	r3, [r4, #8]
 800e014:	6823      	ldr	r3, [r4, #0]
 800e016:	1c5a      	adds	r2, r3, #1
 800e018:	6022      	str	r2, [r4, #0]
 800e01a:	701e      	strb	r6, [r3, #0]
 800e01c:	6963      	ldr	r3, [r4, #20]
 800e01e:	3001      	adds	r0, #1
 800e020:	4283      	cmp	r3, r0
 800e022:	d004      	beq.n	800e02e <__swbuf_r+0x62>
 800e024:	89a3      	ldrh	r3, [r4, #12]
 800e026:	07db      	lsls	r3, r3, #31
 800e028:	d506      	bpl.n	800e038 <__swbuf_r+0x6c>
 800e02a:	2e0a      	cmp	r6, #10
 800e02c:	d104      	bne.n	800e038 <__swbuf_r+0x6c>
 800e02e:	4621      	mov	r1, r4
 800e030:	4628      	mov	r0, r5
 800e032:	f000 f927 	bl	800e284 <_fflush_r>
 800e036:	b988      	cbnz	r0, 800e05c <__swbuf_r+0x90>
 800e038:	4638      	mov	r0, r7
 800e03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e03c:	4b0a      	ldr	r3, [pc, #40]	; (800e068 <__swbuf_r+0x9c>)
 800e03e:	429c      	cmp	r4, r3
 800e040:	d101      	bne.n	800e046 <__swbuf_r+0x7a>
 800e042:	68ac      	ldr	r4, [r5, #8]
 800e044:	e7cf      	b.n	800dfe6 <__swbuf_r+0x1a>
 800e046:	4b09      	ldr	r3, [pc, #36]	; (800e06c <__swbuf_r+0xa0>)
 800e048:	429c      	cmp	r4, r3
 800e04a:	bf08      	it	eq
 800e04c:	68ec      	ldreq	r4, [r5, #12]
 800e04e:	e7ca      	b.n	800dfe6 <__swbuf_r+0x1a>
 800e050:	4621      	mov	r1, r4
 800e052:	4628      	mov	r0, r5
 800e054:	f000 f81a 	bl	800e08c <__swsetup_r>
 800e058:	2800      	cmp	r0, #0
 800e05a:	d0cb      	beq.n	800dff4 <__swbuf_r+0x28>
 800e05c:	f04f 37ff 	mov.w	r7, #4294967295
 800e060:	e7ea      	b.n	800e038 <__swbuf_r+0x6c>
 800e062:	bf00      	nop
 800e064:	08010144 	.word	0x08010144
 800e068:	08010164 	.word	0x08010164
 800e06c:	08010124 	.word	0x08010124

0800e070 <__ascii_wctomb>:
 800e070:	b149      	cbz	r1, 800e086 <__ascii_wctomb+0x16>
 800e072:	2aff      	cmp	r2, #255	; 0xff
 800e074:	bf85      	ittet	hi
 800e076:	238a      	movhi	r3, #138	; 0x8a
 800e078:	6003      	strhi	r3, [r0, #0]
 800e07a:	700a      	strbls	r2, [r1, #0]
 800e07c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e080:	bf98      	it	ls
 800e082:	2001      	movls	r0, #1
 800e084:	4770      	bx	lr
 800e086:	4608      	mov	r0, r1
 800e088:	4770      	bx	lr
	...

0800e08c <__swsetup_r>:
 800e08c:	4b32      	ldr	r3, [pc, #200]	; (800e158 <__swsetup_r+0xcc>)
 800e08e:	b570      	push	{r4, r5, r6, lr}
 800e090:	681d      	ldr	r5, [r3, #0]
 800e092:	4606      	mov	r6, r0
 800e094:	460c      	mov	r4, r1
 800e096:	b125      	cbz	r5, 800e0a2 <__swsetup_r+0x16>
 800e098:	69ab      	ldr	r3, [r5, #24]
 800e09a:	b913      	cbnz	r3, 800e0a2 <__swsetup_r+0x16>
 800e09c:	4628      	mov	r0, r5
 800e09e:	f000 f985 	bl	800e3ac <__sinit>
 800e0a2:	4b2e      	ldr	r3, [pc, #184]	; (800e15c <__swsetup_r+0xd0>)
 800e0a4:	429c      	cmp	r4, r3
 800e0a6:	d10f      	bne.n	800e0c8 <__swsetup_r+0x3c>
 800e0a8:	686c      	ldr	r4, [r5, #4]
 800e0aa:	89a3      	ldrh	r3, [r4, #12]
 800e0ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0b0:	0719      	lsls	r1, r3, #28
 800e0b2:	d42c      	bmi.n	800e10e <__swsetup_r+0x82>
 800e0b4:	06dd      	lsls	r5, r3, #27
 800e0b6:	d411      	bmi.n	800e0dc <__swsetup_r+0x50>
 800e0b8:	2309      	movs	r3, #9
 800e0ba:	6033      	str	r3, [r6, #0]
 800e0bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e0c0:	81a3      	strh	r3, [r4, #12]
 800e0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c6:	e03e      	b.n	800e146 <__swsetup_r+0xba>
 800e0c8:	4b25      	ldr	r3, [pc, #148]	; (800e160 <__swsetup_r+0xd4>)
 800e0ca:	429c      	cmp	r4, r3
 800e0cc:	d101      	bne.n	800e0d2 <__swsetup_r+0x46>
 800e0ce:	68ac      	ldr	r4, [r5, #8]
 800e0d0:	e7eb      	b.n	800e0aa <__swsetup_r+0x1e>
 800e0d2:	4b24      	ldr	r3, [pc, #144]	; (800e164 <__swsetup_r+0xd8>)
 800e0d4:	429c      	cmp	r4, r3
 800e0d6:	bf08      	it	eq
 800e0d8:	68ec      	ldreq	r4, [r5, #12]
 800e0da:	e7e6      	b.n	800e0aa <__swsetup_r+0x1e>
 800e0dc:	0758      	lsls	r0, r3, #29
 800e0de:	d512      	bpl.n	800e106 <__swsetup_r+0x7a>
 800e0e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0e2:	b141      	cbz	r1, 800e0f6 <__swsetup_r+0x6a>
 800e0e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0e8:	4299      	cmp	r1, r3
 800e0ea:	d002      	beq.n	800e0f2 <__swsetup_r+0x66>
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	f7ff fb31 	bl	800d754 <_free_r>
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	6363      	str	r3, [r4, #52]	; 0x34
 800e0f6:	89a3      	ldrh	r3, [r4, #12]
 800e0f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e0fc:	81a3      	strh	r3, [r4, #12]
 800e0fe:	2300      	movs	r3, #0
 800e100:	6063      	str	r3, [r4, #4]
 800e102:	6923      	ldr	r3, [r4, #16]
 800e104:	6023      	str	r3, [r4, #0]
 800e106:	89a3      	ldrh	r3, [r4, #12]
 800e108:	f043 0308 	orr.w	r3, r3, #8
 800e10c:	81a3      	strh	r3, [r4, #12]
 800e10e:	6923      	ldr	r3, [r4, #16]
 800e110:	b94b      	cbnz	r3, 800e126 <__swsetup_r+0x9a>
 800e112:	89a3      	ldrh	r3, [r4, #12]
 800e114:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e11c:	d003      	beq.n	800e126 <__swsetup_r+0x9a>
 800e11e:	4621      	mov	r1, r4
 800e120:	4630      	mov	r0, r6
 800e122:	f000 fa09 	bl	800e538 <__smakebuf_r>
 800e126:	89a0      	ldrh	r0, [r4, #12]
 800e128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e12c:	f010 0301 	ands.w	r3, r0, #1
 800e130:	d00a      	beq.n	800e148 <__swsetup_r+0xbc>
 800e132:	2300      	movs	r3, #0
 800e134:	60a3      	str	r3, [r4, #8]
 800e136:	6963      	ldr	r3, [r4, #20]
 800e138:	425b      	negs	r3, r3
 800e13a:	61a3      	str	r3, [r4, #24]
 800e13c:	6923      	ldr	r3, [r4, #16]
 800e13e:	b943      	cbnz	r3, 800e152 <__swsetup_r+0xc6>
 800e140:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e144:	d1ba      	bne.n	800e0bc <__swsetup_r+0x30>
 800e146:	bd70      	pop	{r4, r5, r6, pc}
 800e148:	0781      	lsls	r1, r0, #30
 800e14a:	bf58      	it	pl
 800e14c:	6963      	ldrpl	r3, [r4, #20]
 800e14e:	60a3      	str	r3, [r4, #8]
 800e150:	e7f4      	b.n	800e13c <__swsetup_r+0xb0>
 800e152:	2000      	movs	r0, #0
 800e154:	e7f7      	b.n	800e146 <__swsetup_r+0xba>
 800e156:	bf00      	nop
 800e158:	200000a8 	.word	0x200000a8
 800e15c:	08010144 	.word	0x08010144
 800e160:	08010164 	.word	0x08010164
 800e164:	08010124 	.word	0x08010124

0800e168 <abort>:
 800e168:	b508      	push	{r3, lr}
 800e16a:	2006      	movs	r0, #6
 800e16c:	f000 fa54 	bl	800e618 <raise>
 800e170:	2001      	movs	r0, #1
 800e172:	f7f7 fdef 	bl	8005d54 <_exit>
	...

0800e178 <__sflush_r>:
 800e178:	898a      	ldrh	r2, [r1, #12]
 800e17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e17e:	4605      	mov	r5, r0
 800e180:	0710      	lsls	r0, r2, #28
 800e182:	460c      	mov	r4, r1
 800e184:	d458      	bmi.n	800e238 <__sflush_r+0xc0>
 800e186:	684b      	ldr	r3, [r1, #4]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	dc05      	bgt.n	800e198 <__sflush_r+0x20>
 800e18c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e18e:	2b00      	cmp	r3, #0
 800e190:	dc02      	bgt.n	800e198 <__sflush_r+0x20>
 800e192:	2000      	movs	r0, #0
 800e194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e19a:	2e00      	cmp	r6, #0
 800e19c:	d0f9      	beq.n	800e192 <__sflush_r+0x1a>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e1a4:	682f      	ldr	r7, [r5, #0]
 800e1a6:	602b      	str	r3, [r5, #0]
 800e1a8:	d032      	beq.n	800e210 <__sflush_r+0x98>
 800e1aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e1ac:	89a3      	ldrh	r3, [r4, #12]
 800e1ae:	075a      	lsls	r2, r3, #29
 800e1b0:	d505      	bpl.n	800e1be <__sflush_r+0x46>
 800e1b2:	6863      	ldr	r3, [r4, #4]
 800e1b4:	1ac0      	subs	r0, r0, r3
 800e1b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1b8:	b10b      	cbz	r3, 800e1be <__sflush_r+0x46>
 800e1ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e1bc:	1ac0      	subs	r0, r0, r3
 800e1be:	2300      	movs	r3, #0
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1c4:	6a21      	ldr	r1, [r4, #32]
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	47b0      	blx	r6
 800e1ca:	1c43      	adds	r3, r0, #1
 800e1cc:	89a3      	ldrh	r3, [r4, #12]
 800e1ce:	d106      	bne.n	800e1de <__sflush_r+0x66>
 800e1d0:	6829      	ldr	r1, [r5, #0]
 800e1d2:	291d      	cmp	r1, #29
 800e1d4:	d82c      	bhi.n	800e230 <__sflush_r+0xb8>
 800e1d6:	4a2a      	ldr	r2, [pc, #168]	; (800e280 <__sflush_r+0x108>)
 800e1d8:	40ca      	lsrs	r2, r1
 800e1da:	07d6      	lsls	r6, r2, #31
 800e1dc:	d528      	bpl.n	800e230 <__sflush_r+0xb8>
 800e1de:	2200      	movs	r2, #0
 800e1e0:	6062      	str	r2, [r4, #4]
 800e1e2:	04d9      	lsls	r1, r3, #19
 800e1e4:	6922      	ldr	r2, [r4, #16]
 800e1e6:	6022      	str	r2, [r4, #0]
 800e1e8:	d504      	bpl.n	800e1f4 <__sflush_r+0x7c>
 800e1ea:	1c42      	adds	r2, r0, #1
 800e1ec:	d101      	bne.n	800e1f2 <__sflush_r+0x7a>
 800e1ee:	682b      	ldr	r3, [r5, #0]
 800e1f0:	b903      	cbnz	r3, 800e1f4 <__sflush_r+0x7c>
 800e1f2:	6560      	str	r0, [r4, #84]	; 0x54
 800e1f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1f6:	602f      	str	r7, [r5, #0]
 800e1f8:	2900      	cmp	r1, #0
 800e1fa:	d0ca      	beq.n	800e192 <__sflush_r+0x1a>
 800e1fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e200:	4299      	cmp	r1, r3
 800e202:	d002      	beq.n	800e20a <__sflush_r+0x92>
 800e204:	4628      	mov	r0, r5
 800e206:	f7ff faa5 	bl	800d754 <_free_r>
 800e20a:	2000      	movs	r0, #0
 800e20c:	6360      	str	r0, [r4, #52]	; 0x34
 800e20e:	e7c1      	b.n	800e194 <__sflush_r+0x1c>
 800e210:	6a21      	ldr	r1, [r4, #32]
 800e212:	2301      	movs	r3, #1
 800e214:	4628      	mov	r0, r5
 800e216:	47b0      	blx	r6
 800e218:	1c41      	adds	r1, r0, #1
 800e21a:	d1c7      	bne.n	800e1ac <__sflush_r+0x34>
 800e21c:	682b      	ldr	r3, [r5, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d0c4      	beq.n	800e1ac <__sflush_r+0x34>
 800e222:	2b1d      	cmp	r3, #29
 800e224:	d001      	beq.n	800e22a <__sflush_r+0xb2>
 800e226:	2b16      	cmp	r3, #22
 800e228:	d101      	bne.n	800e22e <__sflush_r+0xb6>
 800e22a:	602f      	str	r7, [r5, #0]
 800e22c:	e7b1      	b.n	800e192 <__sflush_r+0x1a>
 800e22e:	89a3      	ldrh	r3, [r4, #12]
 800e230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e234:	81a3      	strh	r3, [r4, #12]
 800e236:	e7ad      	b.n	800e194 <__sflush_r+0x1c>
 800e238:	690f      	ldr	r7, [r1, #16]
 800e23a:	2f00      	cmp	r7, #0
 800e23c:	d0a9      	beq.n	800e192 <__sflush_r+0x1a>
 800e23e:	0793      	lsls	r3, r2, #30
 800e240:	680e      	ldr	r6, [r1, #0]
 800e242:	bf08      	it	eq
 800e244:	694b      	ldreq	r3, [r1, #20]
 800e246:	600f      	str	r7, [r1, #0]
 800e248:	bf18      	it	ne
 800e24a:	2300      	movne	r3, #0
 800e24c:	eba6 0807 	sub.w	r8, r6, r7
 800e250:	608b      	str	r3, [r1, #8]
 800e252:	f1b8 0f00 	cmp.w	r8, #0
 800e256:	dd9c      	ble.n	800e192 <__sflush_r+0x1a>
 800e258:	6a21      	ldr	r1, [r4, #32]
 800e25a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e25c:	4643      	mov	r3, r8
 800e25e:	463a      	mov	r2, r7
 800e260:	4628      	mov	r0, r5
 800e262:	47b0      	blx	r6
 800e264:	2800      	cmp	r0, #0
 800e266:	dc06      	bgt.n	800e276 <__sflush_r+0xfe>
 800e268:	89a3      	ldrh	r3, [r4, #12]
 800e26a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e26e:	81a3      	strh	r3, [r4, #12]
 800e270:	f04f 30ff 	mov.w	r0, #4294967295
 800e274:	e78e      	b.n	800e194 <__sflush_r+0x1c>
 800e276:	4407      	add	r7, r0
 800e278:	eba8 0800 	sub.w	r8, r8, r0
 800e27c:	e7e9      	b.n	800e252 <__sflush_r+0xda>
 800e27e:	bf00      	nop
 800e280:	20400001 	.word	0x20400001

0800e284 <_fflush_r>:
 800e284:	b538      	push	{r3, r4, r5, lr}
 800e286:	690b      	ldr	r3, [r1, #16]
 800e288:	4605      	mov	r5, r0
 800e28a:	460c      	mov	r4, r1
 800e28c:	b913      	cbnz	r3, 800e294 <_fflush_r+0x10>
 800e28e:	2500      	movs	r5, #0
 800e290:	4628      	mov	r0, r5
 800e292:	bd38      	pop	{r3, r4, r5, pc}
 800e294:	b118      	cbz	r0, 800e29e <_fflush_r+0x1a>
 800e296:	6983      	ldr	r3, [r0, #24]
 800e298:	b90b      	cbnz	r3, 800e29e <_fflush_r+0x1a>
 800e29a:	f000 f887 	bl	800e3ac <__sinit>
 800e29e:	4b14      	ldr	r3, [pc, #80]	; (800e2f0 <_fflush_r+0x6c>)
 800e2a0:	429c      	cmp	r4, r3
 800e2a2:	d11b      	bne.n	800e2dc <_fflush_r+0x58>
 800e2a4:	686c      	ldr	r4, [r5, #4]
 800e2a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d0ef      	beq.n	800e28e <_fflush_r+0xa>
 800e2ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2b0:	07d0      	lsls	r0, r2, #31
 800e2b2:	d404      	bmi.n	800e2be <_fflush_r+0x3a>
 800e2b4:	0599      	lsls	r1, r3, #22
 800e2b6:	d402      	bmi.n	800e2be <_fflush_r+0x3a>
 800e2b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2ba:	f000 f915 	bl	800e4e8 <__retarget_lock_acquire_recursive>
 800e2be:	4628      	mov	r0, r5
 800e2c0:	4621      	mov	r1, r4
 800e2c2:	f7ff ff59 	bl	800e178 <__sflush_r>
 800e2c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2c8:	07da      	lsls	r2, r3, #31
 800e2ca:	4605      	mov	r5, r0
 800e2cc:	d4e0      	bmi.n	800e290 <_fflush_r+0xc>
 800e2ce:	89a3      	ldrh	r3, [r4, #12]
 800e2d0:	059b      	lsls	r3, r3, #22
 800e2d2:	d4dd      	bmi.n	800e290 <_fflush_r+0xc>
 800e2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2d6:	f000 f908 	bl	800e4ea <__retarget_lock_release_recursive>
 800e2da:	e7d9      	b.n	800e290 <_fflush_r+0xc>
 800e2dc:	4b05      	ldr	r3, [pc, #20]	; (800e2f4 <_fflush_r+0x70>)
 800e2de:	429c      	cmp	r4, r3
 800e2e0:	d101      	bne.n	800e2e6 <_fflush_r+0x62>
 800e2e2:	68ac      	ldr	r4, [r5, #8]
 800e2e4:	e7df      	b.n	800e2a6 <_fflush_r+0x22>
 800e2e6:	4b04      	ldr	r3, [pc, #16]	; (800e2f8 <_fflush_r+0x74>)
 800e2e8:	429c      	cmp	r4, r3
 800e2ea:	bf08      	it	eq
 800e2ec:	68ec      	ldreq	r4, [r5, #12]
 800e2ee:	e7da      	b.n	800e2a6 <_fflush_r+0x22>
 800e2f0:	08010144 	.word	0x08010144
 800e2f4:	08010164 	.word	0x08010164
 800e2f8:	08010124 	.word	0x08010124

0800e2fc <std>:
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	b510      	push	{r4, lr}
 800e300:	4604      	mov	r4, r0
 800e302:	e9c0 3300 	strd	r3, r3, [r0]
 800e306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e30a:	6083      	str	r3, [r0, #8]
 800e30c:	8181      	strh	r1, [r0, #12]
 800e30e:	6643      	str	r3, [r0, #100]	; 0x64
 800e310:	81c2      	strh	r2, [r0, #14]
 800e312:	6183      	str	r3, [r0, #24]
 800e314:	4619      	mov	r1, r3
 800e316:	2208      	movs	r2, #8
 800e318:	305c      	adds	r0, #92	; 0x5c
 800e31a:	f7fd fb5b 	bl	800b9d4 <memset>
 800e31e:	4b05      	ldr	r3, [pc, #20]	; (800e334 <std+0x38>)
 800e320:	6263      	str	r3, [r4, #36]	; 0x24
 800e322:	4b05      	ldr	r3, [pc, #20]	; (800e338 <std+0x3c>)
 800e324:	62a3      	str	r3, [r4, #40]	; 0x28
 800e326:	4b05      	ldr	r3, [pc, #20]	; (800e33c <std+0x40>)
 800e328:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e32a:	4b05      	ldr	r3, [pc, #20]	; (800e340 <std+0x44>)
 800e32c:	6224      	str	r4, [r4, #32]
 800e32e:	6323      	str	r3, [r4, #48]	; 0x30
 800e330:	bd10      	pop	{r4, pc}
 800e332:	bf00      	nop
 800e334:	0800e651 	.word	0x0800e651
 800e338:	0800e673 	.word	0x0800e673
 800e33c:	0800e6ab 	.word	0x0800e6ab
 800e340:	0800e6cf 	.word	0x0800e6cf

0800e344 <_cleanup_r>:
 800e344:	4901      	ldr	r1, [pc, #4]	; (800e34c <_cleanup_r+0x8>)
 800e346:	f000 b8af 	b.w	800e4a8 <_fwalk_reent>
 800e34a:	bf00      	nop
 800e34c:	0800e285 	.word	0x0800e285

0800e350 <__sfmoreglue>:
 800e350:	b570      	push	{r4, r5, r6, lr}
 800e352:	2268      	movs	r2, #104	; 0x68
 800e354:	1e4d      	subs	r5, r1, #1
 800e356:	4355      	muls	r5, r2
 800e358:	460e      	mov	r6, r1
 800e35a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e35e:	f7ff fa65 	bl	800d82c <_malloc_r>
 800e362:	4604      	mov	r4, r0
 800e364:	b140      	cbz	r0, 800e378 <__sfmoreglue+0x28>
 800e366:	2100      	movs	r1, #0
 800e368:	e9c0 1600 	strd	r1, r6, [r0]
 800e36c:	300c      	adds	r0, #12
 800e36e:	60a0      	str	r0, [r4, #8]
 800e370:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e374:	f7fd fb2e 	bl	800b9d4 <memset>
 800e378:	4620      	mov	r0, r4
 800e37a:	bd70      	pop	{r4, r5, r6, pc}

0800e37c <__sfp_lock_acquire>:
 800e37c:	4801      	ldr	r0, [pc, #4]	; (800e384 <__sfp_lock_acquire+0x8>)
 800e37e:	f000 b8b3 	b.w	800e4e8 <__retarget_lock_acquire_recursive>
 800e382:	bf00      	nop
 800e384:	20000b5d 	.word	0x20000b5d

0800e388 <__sfp_lock_release>:
 800e388:	4801      	ldr	r0, [pc, #4]	; (800e390 <__sfp_lock_release+0x8>)
 800e38a:	f000 b8ae 	b.w	800e4ea <__retarget_lock_release_recursive>
 800e38e:	bf00      	nop
 800e390:	20000b5d 	.word	0x20000b5d

0800e394 <__sinit_lock_acquire>:
 800e394:	4801      	ldr	r0, [pc, #4]	; (800e39c <__sinit_lock_acquire+0x8>)
 800e396:	f000 b8a7 	b.w	800e4e8 <__retarget_lock_acquire_recursive>
 800e39a:	bf00      	nop
 800e39c:	20000b5e 	.word	0x20000b5e

0800e3a0 <__sinit_lock_release>:
 800e3a0:	4801      	ldr	r0, [pc, #4]	; (800e3a8 <__sinit_lock_release+0x8>)
 800e3a2:	f000 b8a2 	b.w	800e4ea <__retarget_lock_release_recursive>
 800e3a6:	bf00      	nop
 800e3a8:	20000b5e 	.word	0x20000b5e

0800e3ac <__sinit>:
 800e3ac:	b510      	push	{r4, lr}
 800e3ae:	4604      	mov	r4, r0
 800e3b0:	f7ff fff0 	bl	800e394 <__sinit_lock_acquire>
 800e3b4:	69a3      	ldr	r3, [r4, #24]
 800e3b6:	b11b      	cbz	r3, 800e3c0 <__sinit+0x14>
 800e3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3bc:	f7ff bff0 	b.w	800e3a0 <__sinit_lock_release>
 800e3c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e3c4:	6523      	str	r3, [r4, #80]	; 0x50
 800e3c6:	4b13      	ldr	r3, [pc, #76]	; (800e414 <__sinit+0x68>)
 800e3c8:	4a13      	ldr	r2, [pc, #76]	; (800e418 <__sinit+0x6c>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e3ce:	42a3      	cmp	r3, r4
 800e3d0:	bf04      	itt	eq
 800e3d2:	2301      	moveq	r3, #1
 800e3d4:	61a3      	streq	r3, [r4, #24]
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	f000 f820 	bl	800e41c <__sfp>
 800e3dc:	6060      	str	r0, [r4, #4]
 800e3de:	4620      	mov	r0, r4
 800e3e0:	f000 f81c 	bl	800e41c <__sfp>
 800e3e4:	60a0      	str	r0, [r4, #8]
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f000 f818 	bl	800e41c <__sfp>
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	60e0      	str	r0, [r4, #12]
 800e3f0:	2104      	movs	r1, #4
 800e3f2:	6860      	ldr	r0, [r4, #4]
 800e3f4:	f7ff ff82 	bl	800e2fc <std>
 800e3f8:	68a0      	ldr	r0, [r4, #8]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	2109      	movs	r1, #9
 800e3fe:	f7ff ff7d 	bl	800e2fc <std>
 800e402:	68e0      	ldr	r0, [r4, #12]
 800e404:	2202      	movs	r2, #2
 800e406:	2112      	movs	r1, #18
 800e408:	f7ff ff78 	bl	800e2fc <std>
 800e40c:	2301      	movs	r3, #1
 800e40e:	61a3      	str	r3, [r4, #24]
 800e410:	e7d2      	b.n	800e3b8 <__sinit+0xc>
 800e412:	bf00      	nop
 800e414:	0800fdac 	.word	0x0800fdac
 800e418:	0800e345 	.word	0x0800e345

0800e41c <__sfp>:
 800e41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e41e:	4607      	mov	r7, r0
 800e420:	f7ff ffac 	bl	800e37c <__sfp_lock_acquire>
 800e424:	4b1e      	ldr	r3, [pc, #120]	; (800e4a0 <__sfp+0x84>)
 800e426:	681e      	ldr	r6, [r3, #0]
 800e428:	69b3      	ldr	r3, [r6, #24]
 800e42a:	b913      	cbnz	r3, 800e432 <__sfp+0x16>
 800e42c:	4630      	mov	r0, r6
 800e42e:	f7ff ffbd 	bl	800e3ac <__sinit>
 800e432:	3648      	adds	r6, #72	; 0x48
 800e434:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e438:	3b01      	subs	r3, #1
 800e43a:	d503      	bpl.n	800e444 <__sfp+0x28>
 800e43c:	6833      	ldr	r3, [r6, #0]
 800e43e:	b30b      	cbz	r3, 800e484 <__sfp+0x68>
 800e440:	6836      	ldr	r6, [r6, #0]
 800e442:	e7f7      	b.n	800e434 <__sfp+0x18>
 800e444:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e448:	b9d5      	cbnz	r5, 800e480 <__sfp+0x64>
 800e44a:	4b16      	ldr	r3, [pc, #88]	; (800e4a4 <__sfp+0x88>)
 800e44c:	60e3      	str	r3, [r4, #12]
 800e44e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e452:	6665      	str	r5, [r4, #100]	; 0x64
 800e454:	f000 f847 	bl	800e4e6 <__retarget_lock_init_recursive>
 800e458:	f7ff ff96 	bl	800e388 <__sfp_lock_release>
 800e45c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e460:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e464:	6025      	str	r5, [r4, #0]
 800e466:	61a5      	str	r5, [r4, #24]
 800e468:	2208      	movs	r2, #8
 800e46a:	4629      	mov	r1, r5
 800e46c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e470:	f7fd fab0 	bl	800b9d4 <memset>
 800e474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e47c:	4620      	mov	r0, r4
 800e47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e480:	3468      	adds	r4, #104	; 0x68
 800e482:	e7d9      	b.n	800e438 <__sfp+0x1c>
 800e484:	2104      	movs	r1, #4
 800e486:	4638      	mov	r0, r7
 800e488:	f7ff ff62 	bl	800e350 <__sfmoreglue>
 800e48c:	4604      	mov	r4, r0
 800e48e:	6030      	str	r0, [r6, #0]
 800e490:	2800      	cmp	r0, #0
 800e492:	d1d5      	bne.n	800e440 <__sfp+0x24>
 800e494:	f7ff ff78 	bl	800e388 <__sfp_lock_release>
 800e498:	230c      	movs	r3, #12
 800e49a:	603b      	str	r3, [r7, #0]
 800e49c:	e7ee      	b.n	800e47c <__sfp+0x60>
 800e49e:	bf00      	nop
 800e4a0:	0800fdac 	.word	0x0800fdac
 800e4a4:	ffff0001 	.word	0xffff0001

0800e4a8 <_fwalk_reent>:
 800e4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4ac:	4606      	mov	r6, r0
 800e4ae:	4688      	mov	r8, r1
 800e4b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e4b4:	2700      	movs	r7, #0
 800e4b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e4ba:	f1b9 0901 	subs.w	r9, r9, #1
 800e4be:	d505      	bpl.n	800e4cc <_fwalk_reent+0x24>
 800e4c0:	6824      	ldr	r4, [r4, #0]
 800e4c2:	2c00      	cmp	r4, #0
 800e4c4:	d1f7      	bne.n	800e4b6 <_fwalk_reent+0xe>
 800e4c6:	4638      	mov	r0, r7
 800e4c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4cc:	89ab      	ldrh	r3, [r5, #12]
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d907      	bls.n	800e4e2 <_fwalk_reent+0x3a>
 800e4d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	d003      	beq.n	800e4e2 <_fwalk_reent+0x3a>
 800e4da:	4629      	mov	r1, r5
 800e4dc:	4630      	mov	r0, r6
 800e4de:	47c0      	blx	r8
 800e4e0:	4307      	orrs	r7, r0
 800e4e2:	3568      	adds	r5, #104	; 0x68
 800e4e4:	e7e9      	b.n	800e4ba <_fwalk_reent+0x12>

0800e4e6 <__retarget_lock_init_recursive>:
 800e4e6:	4770      	bx	lr

0800e4e8 <__retarget_lock_acquire_recursive>:
 800e4e8:	4770      	bx	lr

0800e4ea <__retarget_lock_release_recursive>:
 800e4ea:	4770      	bx	lr

0800e4ec <__swhatbuf_r>:
 800e4ec:	b570      	push	{r4, r5, r6, lr}
 800e4ee:	460e      	mov	r6, r1
 800e4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f4:	2900      	cmp	r1, #0
 800e4f6:	b096      	sub	sp, #88	; 0x58
 800e4f8:	4614      	mov	r4, r2
 800e4fa:	461d      	mov	r5, r3
 800e4fc:	da08      	bge.n	800e510 <__swhatbuf_r+0x24>
 800e4fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e502:	2200      	movs	r2, #0
 800e504:	602a      	str	r2, [r5, #0]
 800e506:	061a      	lsls	r2, r3, #24
 800e508:	d410      	bmi.n	800e52c <__swhatbuf_r+0x40>
 800e50a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e50e:	e00e      	b.n	800e52e <__swhatbuf_r+0x42>
 800e510:	466a      	mov	r2, sp
 800e512:	f000 f903 	bl	800e71c <_fstat_r>
 800e516:	2800      	cmp	r0, #0
 800e518:	dbf1      	blt.n	800e4fe <__swhatbuf_r+0x12>
 800e51a:	9a01      	ldr	r2, [sp, #4]
 800e51c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e520:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e524:	425a      	negs	r2, r3
 800e526:	415a      	adcs	r2, r3
 800e528:	602a      	str	r2, [r5, #0]
 800e52a:	e7ee      	b.n	800e50a <__swhatbuf_r+0x1e>
 800e52c:	2340      	movs	r3, #64	; 0x40
 800e52e:	2000      	movs	r0, #0
 800e530:	6023      	str	r3, [r4, #0]
 800e532:	b016      	add	sp, #88	; 0x58
 800e534:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e538 <__smakebuf_r>:
 800e538:	898b      	ldrh	r3, [r1, #12]
 800e53a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e53c:	079d      	lsls	r5, r3, #30
 800e53e:	4606      	mov	r6, r0
 800e540:	460c      	mov	r4, r1
 800e542:	d507      	bpl.n	800e554 <__smakebuf_r+0x1c>
 800e544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e548:	6023      	str	r3, [r4, #0]
 800e54a:	6123      	str	r3, [r4, #16]
 800e54c:	2301      	movs	r3, #1
 800e54e:	6163      	str	r3, [r4, #20]
 800e550:	b002      	add	sp, #8
 800e552:	bd70      	pop	{r4, r5, r6, pc}
 800e554:	ab01      	add	r3, sp, #4
 800e556:	466a      	mov	r2, sp
 800e558:	f7ff ffc8 	bl	800e4ec <__swhatbuf_r>
 800e55c:	9900      	ldr	r1, [sp, #0]
 800e55e:	4605      	mov	r5, r0
 800e560:	4630      	mov	r0, r6
 800e562:	f7ff f963 	bl	800d82c <_malloc_r>
 800e566:	b948      	cbnz	r0, 800e57c <__smakebuf_r+0x44>
 800e568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e56c:	059a      	lsls	r2, r3, #22
 800e56e:	d4ef      	bmi.n	800e550 <__smakebuf_r+0x18>
 800e570:	f023 0303 	bic.w	r3, r3, #3
 800e574:	f043 0302 	orr.w	r3, r3, #2
 800e578:	81a3      	strh	r3, [r4, #12]
 800e57a:	e7e3      	b.n	800e544 <__smakebuf_r+0xc>
 800e57c:	4b0d      	ldr	r3, [pc, #52]	; (800e5b4 <__smakebuf_r+0x7c>)
 800e57e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e580:	89a3      	ldrh	r3, [r4, #12]
 800e582:	6020      	str	r0, [r4, #0]
 800e584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e588:	81a3      	strh	r3, [r4, #12]
 800e58a:	9b00      	ldr	r3, [sp, #0]
 800e58c:	6163      	str	r3, [r4, #20]
 800e58e:	9b01      	ldr	r3, [sp, #4]
 800e590:	6120      	str	r0, [r4, #16]
 800e592:	b15b      	cbz	r3, 800e5ac <__smakebuf_r+0x74>
 800e594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e598:	4630      	mov	r0, r6
 800e59a:	f000 f8d1 	bl	800e740 <_isatty_r>
 800e59e:	b128      	cbz	r0, 800e5ac <__smakebuf_r+0x74>
 800e5a0:	89a3      	ldrh	r3, [r4, #12]
 800e5a2:	f023 0303 	bic.w	r3, r3, #3
 800e5a6:	f043 0301 	orr.w	r3, r3, #1
 800e5aa:	81a3      	strh	r3, [r4, #12]
 800e5ac:	89a0      	ldrh	r0, [r4, #12]
 800e5ae:	4305      	orrs	r5, r0
 800e5b0:	81a5      	strh	r5, [r4, #12]
 800e5b2:	e7cd      	b.n	800e550 <__smakebuf_r+0x18>
 800e5b4:	0800e345 	.word	0x0800e345

0800e5b8 <_malloc_usable_size_r>:
 800e5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5bc:	1f18      	subs	r0, r3, #4
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	bfbc      	itt	lt
 800e5c2:	580b      	ldrlt	r3, [r1, r0]
 800e5c4:	18c0      	addlt	r0, r0, r3
 800e5c6:	4770      	bx	lr

0800e5c8 <_raise_r>:
 800e5c8:	291f      	cmp	r1, #31
 800e5ca:	b538      	push	{r3, r4, r5, lr}
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	460d      	mov	r5, r1
 800e5d0:	d904      	bls.n	800e5dc <_raise_r+0x14>
 800e5d2:	2316      	movs	r3, #22
 800e5d4:	6003      	str	r3, [r0, #0]
 800e5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e5da:	bd38      	pop	{r3, r4, r5, pc}
 800e5dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e5de:	b112      	cbz	r2, 800e5e6 <_raise_r+0x1e>
 800e5e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5e4:	b94b      	cbnz	r3, 800e5fa <_raise_r+0x32>
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	f000 f830 	bl	800e64c <_getpid_r>
 800e5ec:	462a      	mov	r2, r5
 800e5ee:	4601      	mov	r1, r0
 800e5f0:	4620      	mov	r0, r4
 800e5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5f6:	f000 b817 	b.w	800e628 <_kill_r>
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d00a      	beq.n	800e614 <_raise_r+0x4c>
 800e5fe:	1c59      	adds	r1, r3, #1
 800e600:	d103      	bne.n	800e60a <_raise_r+0x42>
 800e602:	2316      	movs	r3, #22
 800e604:	6003      	str	r3, [r0, #0]
 800e606:	2001      	movs	r0, #1
 800e608:	e7e7      	b.n	800e5da <_raise_r+0x12>
 800e60a:	2400      	movs	r4, #0
 800e60c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e610:	4628      	mov	r0, r5
 800e612:	4798      	blx	r3
 800e614:	2000      	movs	r0, #0
 800e616:	e7e0      	b.n	800e5da <_raise_r+0x12>

0800e618 <raise>:
 800e618:	4b02      	ldr	r3, [pc, #8]	; (800e624 <raise+0xc>)
 800e61a:	4601      	mov	r1, r0
 800e61c:	6818      	ldr	r0, [r3, #0]
 800e61e:	f7ff bfd3 	b.w	800e5c8 <_raise_r>
 800e622:	bf00      	nop
 800e624:	200000a8 	.word	0x200000a8

0800e628 <_kill_r>:
 800e628:	b538      	push	{r3, r4, r5, lr}
 800e62a:	4d07      	ldr	r5, [pc, #28]	; (800e648 <_kill_r+0x20>)
 800e62c:	2300      	movs	r3, #0
 800e62e:	4604      	mov	r4, r0
 800e630:	4608      	mov	r0, r1
 800e632:	4611      	mov	r1, r2
 800e634:	602b      	str	r3, [r5, #0]
 800e636:	f7f7 fb7d 	bl	8005d34 <_kill>
 800e63a:	1c43      	adds	r3, r0, #1
 800e63c:	d102      	bne.n	800e644 <_kill_r+0x1c>
 800e63e:	682b      	ldr	r3, [r5, #0]
 800e640:	b103      	cbz	r3, 800e644 <_kill_r+0x1c>
 800e642:	6023      	str	r3, [r4, #0]
 800e644:	bd38      	pop	{r3, r4, r5, pc}
 800e646:	bf00      	nop
 800e648:	20000b58 	.word	0x20000b58

0800e64c <_getpid_r>:
 800e64c:	f7f7 bb6a 	b.w	8005d24 <_getpid>

0800e650 <__sread>:
 800e650:	b510      	push	{r4, lr}
 800e652:	460c      	mov	r4, r1
 800e654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e658:	f000 f894 	bl	800e784 <_read_r>
 800e65c:	2800      	cmp	r0, #0
 800e65e:	bfab      	itete	ge
 800e660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e662:	89a3      	ldrhlt	r3, [r4, #12]
 800e664:	181b      	addge	r3, r3, r0
 800e666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e66a:	bfac      	ite	ge
 800e66c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e66e:	81a3      	strhlt	r3, [r4, #12]
 800e670:	bd10      	pop	{r4, pc}

0800e672 <__swrite>:
 800e672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e676:	461f      	mov	r7, r3
 800e678:	898b      	ldrh	r3, [r1, #12]
 800e67a:	05db      	lsls	r3, r3, #23
 800e67c:	4605      	mov	r5, r0
 800e67e:	460c      	mov	r4, r1
 800e680:	4616      	mov	r6, r2
 800e682:	d505      	bpl.n	800e690 <__swrite+0x1e>
 800e684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e688:	2302      	movs	r3, #2
 800e68a:	2200      	movs	r2, #0
 800e68c:	f000 f868 	bl	800e760 <_lseek_r>
 800e690:	89a3      	ldrh	r3, [r4, #12]
 800e692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e69a:	81a3      	strh	r3, [r4, #12]
 800e69c:	4632      	mov	r2, r6
 800e69e:	463b      	mov	r3, r7
 800e6a0:	4628      	mov	r0, r5
 800e6a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6a6:	f000 b817 	b.w	800e6d8 <_write_r>

0800e6aa <__sseek>:
 800e6aa:	b510      	push	{r4, lr}
 800e6ac:	460c      	mov	r4, r1
 800e6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6b2:	f000 f855 	bl	800e760 <_lseek_r>
 800e6b6:	1c43      	adds	r3, r0, #1
 800e6b8:	89a3      	ldrh	r3, [r4, #12]
 800e6ba:	bf15      	itete	ne
 800e6bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e6be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e6c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e6c6:	81a3      	strheq	r3, [r4, #12]
 800e6c8:	bf18      	it	ne
 800e6ca:	81a3      	strhne	r3, [r4, #12]
 800e6cc:	bd10      	pop	{r4, pc}

0800e6ce <__sclose>:
 800e6ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6d2:	f000 b813 	b.w	800e6fc <_close_r>
	...

0800e6d8 <_write_r>:
 800e6d8:	b538      	push	{r3, r4, r5, lr}
 800e6da:	4d07      	ldr	r5, [pc, #28]	; (800e6f8 <_write_r+0x20>)
 800e6dc:	4604      	mov	r4, r0
 800e6de:	4608      	mov	r0, r1
 800e6e0:	4611      	mov	r1, r2
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	602a      	str	r2, [r5, #0]
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	f7f7 fb5b 	bl	8005da2 <_write>
 800e6ec:	1c43      	adds	r3, r0, #1
 800e6ee:	d102      	bne.n	800e6f6 <_write_r+0x1e>
 800e6f0:	682b      	ldr	r3, [r5, #0]
 800e6f2:	b103      	cbz	r3, 800e6f6 <_write_r+0x1e>
 800e6f4:	6023      	str	r3, [r4, #0]
 800e6f6:	bd38      	pop	{r3, r4, r5, pc}
 800e6f8:	20000b58 	.word	0x20000b58

0800e6fc <_close_r>:
 800e6fc:	b538      	push	{r3, r4, r5, lr}
 800e6fe:	4d06      	ldr	r5, [pc, #24]	; (800e718 <_close_r+0x1c>)
 800e700:	2300      	movs	r3, #0
 800e702:	4604      	mov	r4, r0
 800e704:	4608      	mov	r0, r1
 800e706:	602b      	str	r3, [r5, #0]
 800e708:	f7f7 fb67 	bl	8005dda <_close>
 800e70c:	1c43      	adds	r3, r0, #1
 800e70e:	d102      	bne.n	800e716 <_close_r+0x1a>
 800e710:	682b      	ldr	r3, [r5, #0]
 800e712:	b103      	cbz	r3, 800e716 <_close_r+0x1a>
 800e714:	6023      	str	r3, [r4, #0]
 800e716:	bd38      	pop	{r3, r4, r5, pc}
 800e718:	20000b58 	.word	0x20000b58

0800e71c <_fstat_r>:
 800e71c:	b538      	push	{r3, r4, r5, lr}
 800e71e:	4d07      	ldr	r5, [pc, #28]	; (800e73c <_fstat_r+0x20>)
 800e720:	2300      	movs	r3, #0
 800e722:	4604      	mov	r4, r0
 800e724:	4608      	mov	r0, r1
 800e726:	4611      	mov	r1, r2
 800e728:	602b      	str	r3, [r5, #0]
 800e72a:	f7f7 fb62 	bl	8005df2 <_fstat>
 800e72e:	1c43      	adds	r3, r0, #1
 800e730:	d102      	bne.n	800e738 <_fstat_r+0x1c>
 800e732:	682b      	ldr	r3, [r5, #0]
 800e734:	b103      	cbz	r3, 800e738 <_fstat_r+0x1c>
 800e736:	6023      	str	r3, [r4, #0]
 800e738:	bd38      	pop	{r3, r4, r5, pc}
 800e73a:	bf00      	nop
 800e73c:	20000b58 	.word	0x20000b58

0800e740 <_isatty_r>:
 800e740:	b538      	push	{r3, r4, r5, lr}
 800e742:	4d06      	ldr	r5, [pc, #24]	; (800e75c <_isatty_r+0x1c>)
 800e744:	2300      	movs	r3, #0
 800e746:	4604      	mov	r4, r0
 800e748:	4608      	mov	r0, r1
 800e74a:	602b      	str	r3, [r5, #0]
 800e74c:	f7f7 fb61 	bl	8005e12 <_isatty>
 800e750:	1c43      	adds	r3, r0, #1
 800e752:	d102      	bne.n	800e75a <_isatty_r+0x1a>
 800e754:	682b      	ldr	r3, [r5, #0]
 800e756:	b103      	cbz	r3, 800e75a <_isatty_r+0x1a>
 800e758:	6023      	str	r3, [r4, #0]
 800e75a:	bd38      	pop	{r3, r4, r5, pc}
 800e75c:	20000b58 	.word	0x20000b58

0800e760 <_lseek_r>:
 800e760:	b538      	push	{r3, r4, r5, lr}
 800e762:	4d07      	ldr	r5, [pc, #28]	; (800e780 <_lseek_r+0x20>)
 800e764:	4604      	mov	r4, r0
 800e766:	4608      	mov	r0, r1
 800e768:	4611      	mov	r1, r2
 800e76a:	2200      	movs	r2, #0
 800e76c:	602a      	str	r2, [r5, #0]
 800e76e:	461a      	mov	r2, r3
 800e770:	f7f7 fb5a 	bl	8005e28 <_lseek>
 800e774:	1c43      	adds	r3, r0, #1
 800e776:	d102      	bne.n	800e77e <_lseek_r+0x1e>
 800e778:	682b      	ldr	r3, [r5, #0]
 800e77a:	b103      	cbz	r3, 800e77e <_lseek_r+0x1e>
 800e77c:	6023      	str	r3, [r4, #0]
 800e77e:	bd38      	pop	{r3, r4, r5, pc}
 800e780:	20000b58 	.word	0x20000b58

0800e784 <_read_r>:
 800e784:	b538      	push	{r3, r4, r5, lr}
 800e786:	4d07      	ldr	r5, [pc, #28]	; (800e7a4 <_read_r+0x20>)
 800e788:	4604      	mov	r4, r0
 800e78a:	4608      	mov	r0, r1
 800e78c:	4611      	mov	r1, r2
 800e78e:	2200      	movs	r2, #0
 800e790:	602a      	str	r2, [r5, #0]
 800e792:	461a      	mov	r2, r3
 800e794:	f7f7 fae8 	bl	8005d68 <_read>
 800e798:	1c43      	adds	r3, r0, #1
 800e79a:	d102      	bne.n	800e7a2 <_read_r+0x1e>
 800e79c:	682b      	ldr	r3, [r5, #0]
 800e79e:	b103      	cbz	r3, 800e7a2 <_read_r+0x1e>
 800e7a0:	6023      	str	r3, [r4, #0]
 800e7a2:	bd38      	pop	{r3, r4, r5, pc}
 800e7a4:	20000b58 	.word	0x20000b58

0800e7a8 <atan>:
 800e7a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ac:	ec55 4b10 	vmov	r4, r5, d0
 800e7b0:	4bc3      	ldr	r3, [pc, #780]	; (800eac0 <atan+0x318>)
 800e7b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e7b6:	429e      	cmp	r6, r3
 800e7b8:	46ab      	mov	fp, r5
 800e7ba:	dd18      	ble.n	800e7ee <atan+0x46>
 800e7bc:	4bc1      	ldr	r3, [pc, #772]	; (800eac4 <atan+0x31c>)
 800e7be:	429e      	cmp	r6, r3
 800e7c0:	dc01      	bgt.n	800e7c6 <atan+0x1e>
 800e7c2:	d109      	bne.n	800e7d8 <atan+0x30>
 800e7c4:	b144      	cbz	r4, 800e7d8 <atan+0x30>
 800e7c6:	4622      	mov	r2, r4
 800e7c8:	462b      	mov	r3, r5
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	4629      	mov	r1, r5
 800e7ce:	f7f1 fd7d 	bl	80002cc <__adddf3>
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	460d      	mov	r5, r1
 800e7d6:	e006      	b.n	800e7e6 <atan+0x3e>
 800e7d8:	f1bb 0f00 	cmp.w	fp, #0
 800e7dc:	f300 8131 	bgt.w	800ea42 <atan+0x29a>
 800e7e0:	a59b      	add	r5, pc, #620	; (adr r5, 800ea50 <atan+0x2a8>)
 800e7e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e7e6:	ec45 4b10 	vmov	d0, r4, r5
 800e7ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ee:	4bb6      	ldr	r3, [pc, #728]	; (800eac8 <atan+0x320>)
 800e7f0:	429e      	cmp	r6, r3
 800e7f2:	dc14      	bgt.n	800e81e <atan+0x76>
 800e7f4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e7f8:	429e      	cmp	r6, r3
 800e7fa:	dc0d      	bgt.n	800e818 <atan+0x70>
 800e7fc:	a396      	add	r3, pc, #600	; (adr r3, 800ea58 <atan+0x2b0>)
 800e7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e802:	ee10 0a10 	vmov	r0, s0
 800e806:	4629      	mov	r1, r5
 800e808:	f7f1 fd60 	bl	80002cc <__adddf3>
 800e80c:	4baf      	ldr	r3, [pc, #700]	; (800eacc <atan+0x324>)
 800e80e:	2200      	movs	r2, #0
 800e810:	f7f2 f9a2 	bl	8000b58 <__aeabi_dcmpgt>
 800e814:	2800      	cmp	r0, #0
 800e816:	d1e6      	bne.n	800e7e6 <atan+0x3e>
 800e818:	f04f 3aff 	mov.w	sl, #4294967295
 800e81c:	e02b      	b.n	800e876 <atan+0xce>
 800e81e:	f000 f963 	bl	800eae8 <fabs>
 800e822:	4bab      	ldr	r3, [pc, #684]	; (800ead0 <atan+0x328>)
 800e824:	429e      	cmp	r6, r3
 800e826:	ec55 4b10 	vmov	r4, r5, d0
 800e82a:	f300 80bf 	bgt.w	800e9ac <atan+0x204>
 800e82e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e832:	429e      	cmp	r6, r3
 800e834:	f300 80a0 	bgt.w	800e978 <atan+0x1d0>
 800e838:	ee10 2a10 	vmov	r2, s0
 800e83c:	ee10 0a10 	vmov	r0, s0
 800e840:	462b      	mov	r3, r5
 800e842:	4629      	mov	r1, r5
 800e844:	f7f1 fd42 	bl	80002cc <__adddf3>
 800e848:	4ba0      	ldr	r3, [pc, #640]	; (800eacc <atan+0x324>)
 800e84a:	2200      	movs	r2, #0
 800e84c:	f7f1 fd3c 	bl	80002c8 <__aeabi_dsub>
 800e850:	2200      	movs	r2, #0
 800e852:	4606      	mov	r6, r0
 800e854:	460f      	mov	r7, r1
 800e856:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e85a:	4620      	mov	r0, r4
 800e85c:	4629      	mov	r1, r5
 800e85e:	f7f1 fd35 	bl	80002cc <__adddf3>
 800e862:	4602      	mov	r2, r0
 800e864:	460b      	mov	r3, r1
 800e866:	4630      	mov	r0, r6
 800e868:	4639      	mov	r1, r7
 800e86a:	f7f2 f80f 	bl	800088c <__aeabi_ddiv>
 800e86e:	f04f 0a00 	mov.w	sl, #0
 800e872:	4604      	mov	r4, r0
 800e874:	460d      	mov	r5, r1
 800e876:	4622      	mov	r2, r4
 800e878:	462b      	mov	r3, r5
 800e87a:	4620      	mov	r0, r4
 800e87c:	4629      	mov	r1, r5
 800e87e:	f7f1 fedb 	bl	8000638 <__aeabi_dmul>
 800e882:	4602      	mov	r2, r0
 800e884:	460b      	mov	r3, r1
 800e886:	4680      	mov	r8, r0
 800e888:	4689      	mov	r9, r1
 800e88a:	f7f1 fed5 	bl	8000638 <__aeabi_dmul>
 800e88e:	a374      	add	r3, pc, #464	; (adr r3, 800ea60 <atan+0x2b8>)
 800e890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e894:	4606      	mov	r6, r0
 800e896:	460f      	mov	r7, r1
 800e898:	f7f1 fece 	bl	8000638 <__aeabi_dmul>
 800e89c:	a372      	add	r3, pc, #456	; (adr r3, 800ea68 <atan+0x2c0>)
 800e89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a2:	f7f1 fd13 	bl	80002cc <__adddf3>
 800e8a6:	4632      	mov	r2, r6
 800e8a8:	463b      	mov	r3, r7
 800e8aa:	f7f1 fec5 	bl	8000638 <__aeabi_dmul>
 800e8ae:	a370      	add	r3, pc, #448	; (adr r3, 800ea70 <atan+0x2c8>)
 800e8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b4:	f7f1 fd0a 	bl	80002cc <__adddf3>
 800e8b8:	4632      	mov	r2, r6
 800e8ba:	463b      	mov	r3, r7
 800e8bc:	f7f1 febc 	bl	8000638 <__aeabi_dmul>
 800e8c0:	a36d      	add	r3, pc, #436	; (adr r3, 800ea78 <atan+0x2d0>)
 800e8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c6:	f7f1 fd01 	bl	80002cc <__adddf3>
 800e8ca:	4632      	mov	r2, r6
 800e8cc:	463b      	mov	r3, r7
 800e8ce:	f7f1 feb3 	bl	8000638 <__aeabi_dmul>
 800e8d2:	a36b      	add	r3, pc, #428	; (adr r3, 800ea80 <atan+0x2d8>)
 800e8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d8:	f7f1 fcf8 	bl	80002cc <__adddf3>
 800e8dc:	4632      	mov	r2, r6
 800e8de:	463b      	mov	r3, r7
 800e8e0:	f7f1 feaa 	bl	8000638 <__aeabi_dmul>
 800e8e4:	a368      	add	r3, pc, #416	; (adr r3, 800ea88 <atan+0x2e0>)
 800e8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ea:	f7f1 fcef 	bl	80002cc <__adddf3>
 800e8ee:	4642      	mov	r2, r8
 800e8f0:	464b      	mov	r3, r9
 800e8f2:	f7f1 fea1 	bl	8000638 <__aeabi_dmul>
 800e8f6:	a366      	add	r3, pc, #408	; (adr r3, 800ea90 <atan+0x2e8>)
 800e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fc:	4680      	mov	r8, r0
 800e8fe:	4689      	mov	r9, r1
 800e900:	4630      	mov	r0, r6
 800e902:	4639      	mov	r1, r7
 800e904:	f7f1 fe98 	bl	8000638 <__aeabi_dmul>
 800e908:	a363      	add	r3, pc, #396	; (adr r3, 800ea98 <atan+0x2f0>)
 800e90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90e:	f7f1 fcdb 	bl	80002c8 <__aeabi_dsub>
 800e912:	4632      	mov	r2, r6
 800e914:	463b      	mov	r3, r7
 800e916:	f7f1 fe8f 	bl	8000638 <__aeabi_dmul>
 800e91a:	a361      	add	r3, pc, #388	; (adr r3, 800eaa0 <atan+0x2f8>)
 800e91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e920:	f7f1 fcd2 	bl	80002c8 <__aeabi_dsub>
 800e924:	4632      	mov	r2, r6
 800e926:	463b      	mov	r3, r7
 800e928:	f7f1 fe86 	bl	8000638 <__aeabi_dmul>
 800e92c:	a35e      	add	r3, pc, #376	; (adr r3, 800eaa8 <atan+0x300>)
 800e92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e932:	f7f1 fcc9 	bl	80002c8 <__aeabi_dsub>
 800e936:	4632      	mov	r2, r6
 800e938:	463b      	mov	r3, r7
 800e93a:	f7f1 fe7d 	bl	8000638 <__aeabi_dmul>
 800e93e:	a35c      	add	r3, pc, #368	; (adr r3, 800eab0 <atan+0x308>)
 800e940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e944:	f7f1 fcc0 	bl	80002c8 <__aeabi_dsub>
 800e948:	4632      	mov	r2, r6
 800e94a:	463b      	mov	r3, r7
 800e94c:	f7f1 fe74 	bl	8000638 <__aeabi_dmul>
 800e950:	4602      	mov	r2, r0
 800e952:	460b      	mov	r3, r1
 800e954:	4640      	mov	r0, r8
 800e956:	4649      	mov	r1, r9
 800e958:	f7f1 fcb8 	bl	80002cc <__adddf3>
 800e95c:	4622      	mov	r2, r4
 800e95e:	462b      	mov	r3, r5
 800e960:	f7f1 fe6a 	bl	8000638 <__aeabi_dmul>
 800e964:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e968:	4602      	mov	r2, r0
 800e96a:	460b      	mov	r3, r1
 800e96c:	d14b      	bne.n	800ea06 <atan+0x25e>
 800e96e:	4620      	mov	r0, r4
 800e970:	4629      	mov	r1, r5
 800e972:	f7f1 fca9 	bl	80002c8 <__aeabi_dsub>
 800e976:	e72c      	b.n	800e7d2 <atan+0x2a>
 800e978:	ee10 0a10 	vmov	r0, s0
 800e97c:	4b53      	ldr	r3, [pc, #332]	; (800eacc <atan+0x324>)
 800e97e:	2200      	movs	r2, #0
 800e980:	4629      	mov	r1, r5
 800e982:	f7f1 fca1 	bl	80002c8 <__aeabi_dsub>
 800e986:	4b51      	ldr	r3, [pc, #324]	; (800eacc <atan+0x324>)
 800e988:	4606      	mov	r6, r0
 800e98a:	460f      	mov	r7, r1
 800e98c:	2200      	movs	r2, #0
 800e98e:	4620      	mov	r0, r4
 800e990:	4629      	mov	r1, r5
 800e992:	f7f1 fc9b 	bl	80002cc <__adddf3>
 800e996:	4602      	mov	r2, r0
 800e998:	460b      	mov	r3, r1
 800e99a:	4630      	mov	r0, r6
 800e99c:	4639      	mov	r1, r7
 800e99e:	f7f1 ff75 	bl	800088c <__aeabi_ddiv>
 800e9a2:	f04f 0a01 	mov.w	sl, #1
 800e9a6:	4604      	mov	r4, r0
 800e9a8:	460d      	mov	r5, r1
 800e9aa:	e764      	b.n	800e876 <atan+0xce>
 800e9ac:	4b49      	ldr	r3, [pc, #292]	; (800ead4 <atan+0x32c>)
 800e9ae:	429e      	cmp	r6, r3
 800e9b0:	da1d      	bge.n	800e9ee <atan+0x246>
 800e9b2:	ee10 0a10 	vmov	r0, s0
 800e9b6:	4b48      	ldr	r3, [pc, #288]	; (800ead8 <atan+0x330>)
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	4629      	mov	r1, r5
 800e9bc:	f7f1 fc84 	bl	80002c8 <__aeabi_dsub>
 800e9c0:	4b45      	ldr	r3, [pc, #276]	; (800ead8 <atan+0x330>)
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	460f      	mov	r7, r1
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	4629      	mov	r1, r5
 800e9cc:	f7f1 fe34 	bl	8000638 <__aeabi_dmul>
 800e9d0:	4b3e      	ldr	r3, [pc, #248]	; (800eacc <atan+0x324>)
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f7f1 fc7a 	bl	80002cc <__adddf3>
 800e9d8:	4602      	mov	r2, r0
 800e9da:	460b      	mov	r3, r1
 800e9dc:	4630      	mov	r0, r6
 800e9de:	4639      	mov	r1, r7
 800e9e0:	f7f1 ff54 	bl	800088c <__aeabi_ddiv>
 800e9e4:	f04f 0a02 	mov.w	sl, #2
 800e9e8:	4604      	mov	r4, r0
 800e9ea:	460d      	mov	r5, r1
 800e9ec:	e743      	b.n	800e876 <atan+0xce>
 800e9ee:	462b      	mov	r3, r5
 800e9f0:	ee10 2a10 	vmov	r2, s0
 800e9f4:	4939      	ldr	r1, [pc, #228]	; (800eadc <atan+0x334>)
 800e9f6:	2000      	movs	r0, #0
 800e9f8:	f7f1 ff48 	bl	800088c <__aeabi_ddiv>
 800e9fc:	f04f 0a03 	mov.w	sl, #3
 800ea00:	4604      	mov	r4, r0
 800ea02:	460d      	mov	r5, r1
 800ea04:	e737      	b.n	800e876 <atan+0xce>
 800ea06:	4b36      	ldr	r3, [pc, #216]	; (800eae0 <atan+0x338>)
 800ea08:	4e36      	ldr	r6, [pc, #216]	; (800eae4 <atan+0x33c>)
 800ea0a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ea0e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ea12:	e9da 2300 	ldrd	r2, r3, [sl]
 800ea16:	f7f1 fc57 	bl	80002c8 <__aeabi_dsub>
 800ea1a:	4622      	mov	r2, r4
 800ea1c:	462b      	mov	r3, r5
 800ea1e:	f7f1 fc53 	bl	80002c8 <__aeabi_dsub>
 800ea22:	4602      	mov	r2, r0
 800ea24:	460b      	mov	r3, r1
 800ea26:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ea2a:	f7f1 fc4d 	bl	80002c8 <__aeabi_dsub>
 800ea2e:	f1bb 0f00 	cmp.w	fp, #0
 800ea32:	4604      	mov	r4, r0
 800ea34:	460d      	mov	r5, r1
 800ea36:	f6bf aed6 	bge.w	800e7e6 <atan+0x3e>
 800ea3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea3e:	461d      	mov	r5, r3
 800ea40:	e6d1      	b.n	800e7e6 <atan+0x3e>
 800ea42:	a51d      	add	r5, pc, #116	; (adr r5, 800eab8 <atan+0x310>)
 800ea44:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ea48:	e6cd      	b.n	800e7e6 <atan+0x3e>
 800ea4a:	bf00      	nop
 800ea4c:	f3af 8000 	nop.w
 800ea50:	54442d18 	.word	0x54442d18
 800ea54:	bff921fb 	.word	0xbff921fb
 800ea58:	8800759c 	.word	0x8800759c
 800ea5c:	7e37e43c 	.word	0x7e37e43c
 800ea60:	e322da11 	.word	0xe322da11
 800ea64:	3f90ad3a 	.word	0x3f90ad3a
 800ea68:	24760deb 	.word	0x24760deb
 800ea6c:	3fa97b4b 	.word	0x3fa97b4b
 800ea70:	a0d03d51 	.word	0xa0d03d51
 800ea74:	3fb10d66 	.word	0x3fb10d66
 800ea78:	c54c206e 	.word	0xc54c206e
 800ea7c:	3fb745cd 	.word	0x3fb745cd
 800ea80:	920083ff 	.word	0x920083ff
 800ea84:	3fc24924 	.word	0x3fc24924
 800ea88:	5555550d 	.word	0x5555550d
 800ea8c:	3fd55555 	.word	0x3fd55555
 800ea90:	2c6a6c2f 	.word	0x2c6a6c2f
 800ea94:	bfa2b444 	.word	0xbfa2b444
 800ea98:	52defd9a 	.word	0x52defd9a
 800ea9c:	3fadde2d 	.word	0x3fadde2d
 800eaa0:	af749a6d 	.word	0xaf749a6d
 800eaa4:	3fb3b0f2 	.word	0x3fb3b0f2
 800eaa8:	fe231671 	.word	0xfe231671
 800eaac:	3fbc71c6 	.word	0x3fbc71c6
 800eab0:	9998ebc4 	.word	0x9998ebc4
 800eab4:	3fc99999 	.word	0x3fc99999
 800eab8:	54442d18 	.word	0x54442d18
 800eabc:	3ff921fb 	.word	0x3ff921fb
 800eac0:	440fffff 	.word	0x440fffff
 800eac4:	7ff00000 	.word	0x7ff00000
 800eac8:	3fdbffff 	.word	0x3fdbffff
 800eacc:	3ff00000 	.word	0x3ff00000
 800ead0:	3ff2ffff 	.word	0x3ff2ffff
 800ead4:	40038000 	.word	0x40038000
 800ead8:	3ff80000 	.word	0x3ff80000
 800eadc:	bff00000 	.word	0xbff00000
 800eae0:	080101a8 	.word	0x080101a8
 800eae4:	08010188 	.word	0x08010188

0800eae8 <fabs>:
 800eae8:	ec51 0b10 	vmov	r0, r1, d0
 800eaec:	ee10 2a10 	vmov	r2, s0
 800eaf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eaf4:	ec43 2b10 	vmov	d0, r2, r3
 800eaf8:	4770      	bx	lr
 800eafa:	0000      	movs	r0, r0
 800eafc:	0000      	movs	r0, r0
	...

0800eb00 <tan>:
 800eb00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb02:	ec53 2b10 	vmov	r2, r3, d0
 800eb06:	4816      	ldr	r0, [pc, #88]	; (800eb60 <tan+0x60>)
 800eb08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eb0c:	4281      	cmp	r1, r0
 800eb0e:	dc07      	bgt.n	800eb20 <tan+0x20>
 800eb10:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800eb58 <tan+0x58>
 800eb14:	2001      	movs	r0, #1
 800eb16:	b005      	add	sp, #20
 800eb18:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb1c:	f000 bd80 	b.w	800f620 <__kernel_tan>
 800eb20:	4810      	ldr	r0, [pc, #64]	; (800eb64 <tan+0x64>)
 800eb22:	4281      	cmp	r1, r0
 800eb24:	dd09      	ble.n	800eb3a <tan+0x3a>
 800eb26:	ee10 0a10 	vmov	r0, s0
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	f7f1 fbcc 	bl	80002c8 <__aeabi_dsub>
 800eb30:	ec41 0b10 	vmov	d0, r0, r1
 800eb34:	b005      	add	sp, #20
 800eb36:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb3a:	4668      	mov	r0, sp
 800eb3c:	f000 f814 	bl	800eb68 <__ieee754_rem_pio2>
 800eb40:	0040      	lsls	r0, r0, #1
 800eb42:	f000 0002 	and.w	r0, r0, #2
 800eb46:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb4a:	ed9d 0b00 	vldr	d0, [sp]
 800eb4e:	f1c0 0001 	rsb	r0, r0, #1
 800eb52:	f000 fd65 	bl	800f620 <__kernel_tan>
 800eb56:	e7ed      	b.n	800eb34 <tan+0x34>
	...
 800eb60:	3fe921fb 	.word	0x3fe921fb
 800eb64:	7fefffff 	.word	0x7fefffff

0800eb68 <__ieee754_rem_pio2>:
 800eb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb6c:	ed2d 8b02 	vpush	{d8}
 800eb70:	ec55 4b10 	vmov	r4, r5, d0
 800eb74:	4bca      	ldr	r3, [pc, #808]	; (800eea0 <__ieee754_rem_pio2+0x338>)
 800eb76:	b08b      	sub	sp, #44	; 0x2c
 800eb78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800eb7c:	4598      	cmp	r8, r3
 800eb7e:	4682      	mov	sl, r0
 800eb80:	9502      	str	r5, [sp, #8]
 800eb82:	dc08      	bgt.n	800eb96 <__ieee754_rem_pio2+0x2e>
 800eb84:	2200      	movs	r2, #0
 800eb86:	2300      	movs	r3, #0
 800eb88:	ed80 0b00 	vstr	d0, [r0]
 800eb8c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eb90:	f04f 0b00 	mov.w	fp, #0
 800eb94:	e028      	b.n	800ebe8 <__ieee754_rem_pio2+0x80>
 800eb96:	4bc3      	ldr	r3, [pc, #780]	; (800eea4 <__ieee754_rem_pio2+0x33c>)
 800eb98:	4598      	cmp	r8, r3
 800eb9a:	dc78      	bgt.n	800ec8e <__ieee754_rem_pio2+0x126>
 800eb9c:	9b02      	ldr	r3, [sp, #8]
 800eb9e:	4ec2      	ldr	r6, [pc, #776]	; (800eea8 <__ieee754_rem_pio2+0x340>)
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	ee10 0a10 	vmov	r0, s0
 800eba6:	a3b0      	add	r3, pc, #704	; (adr r3, 800ee68 <__ieee754_rem_pio2+0x300>)
 800eba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebac:	4629      	mov	r1, r5
 800ebae:	dd39      	ble.n	800ec24 <__ieee754_rem_pio2+0xbc>
 800ebb0:	f7f1 fb8a 	bl	80002c8 <__aeabi_dsub>
 800ebb4:	45b0      	cmp	r8, r6
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	460d      	mov	r5, r1
 800ebba:	d01b      	beq.n	800ebf4 <__ieee754_rem_pio2+0x8c>
 800ebbc:	a3ac      	add	r3, pc, #688	; (adr r3, 800ee70 <__ieee754_rem_pio2+0x308>)
 800ebbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc2:	f7f1 fb81 	bl	80002c8 <__aeabi_dsub>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	460b      	mov	r3, r1
 800ebca:	e9ca 2300 	strd	r2, r3, [sl]
 800ebce:	4620      	mov	r0, r4
 800ebd0:	4629      	mov	r1, r5
 800ebd2:	f7f1 fb79 	bl	80002c8 <__aeabi_dsub>
 800ebd6:	a3a6      	add	r3, pc, #664	; (adr r3, 800ee70 <__ieee754_rem_pio2+0x308>)
 800ebd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebdc:	f7f1 fb74 	bl	80002c8 <__aeabi_dsub>
 800ebe0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ebe4:	f04f 0b01 	mov.w	fp, #1
 800ebe8:	4658      	mov	r0, fp
 800ebea:	b00b      	add	sp, #44	; 0x2c
 800ebec:	ecbd 8b02 	vpop	{d8}
 800ebf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebf4:	a3a0      	add	r3, pc, #640	; (adr r3, 800ee78 <__ieee754_rem_pio2+0x310>)
 800ebf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfa:	f7f1 fb65 	bl	80002c8 <__aeabi_dsub>
 800ebfe:	a3a0      	add	r3, pc, #640	; (adr r3, 800ee80 <__ieee754_rem_pio2+0x318>)
 800ec00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec04:	4604      	mov	r4, r0
 800ec06:	460d      	mov	r5, r1
 800ec08:	f7f1 fb5e 	bl	80002c8 <__aeabi_dsub>
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	460b      	mov	r3, r1
 800ec10:	e9ca 2300 	strd	r2, r3, [sl]
 800ec14:	4620      	mov	r0, r4
 800ec16:	4629      	mov	r1, r5
 800ec18:	f7f1 fb56 	bl	80002c8 <__aeabi_dsub>
 800ec1c:	a398      	add	r3, pc, #608	; (adr r3, 800ee80 <__ieee754_rem_pio2+0x318>)
 800ec1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec22:	e7db      	b.n	800ebdc <__ieee754_rem_pio2+0x74>
 800ec24:	f7f1 fb52 	bl	80002cc <__adddf3>
 800ec28:	45b0      	cmp	r8, r6
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	460d      	mov	r5, r1
 800ec2e:	d016      	beq.n	800ec5e <__ieee754_rem_pio2+0xf6>
 800ec30:	a38f      	add	r3, pc, #572	; (adr r3, 800ee70 <__ieee754_rem_pio2+0x308>)
 800ec32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec36:	f7f1 fb49 	bl	80002cc <__adddf3>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	e9ca 2300 	strd	r2, r3, [sl]
 800ec42:	4620      	mov	r0, r4
 800ec44:	4629      	mov	r1, r5
 800ec46:	f7f1 fb3f 	bl	80002c8 <__aeabi_dsub>
 800ec4a:	a389      	add	r3, pc, #548	; (adr r3, 800ee70 <__ieee754_rem_pio2+0x308>)
 800ec4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec50:	f7f1 fb3c 	bl	80002cc <__adddf3>
 800ec54:	f04f 3bff 	mov.w	fp, #4294967295
 800ec58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec5c:	e7c4      	b.n	800ebe8 <__ieee754_rem_pio2+0x80>
 800ec5e:	a386      	add	r3, pc, #536	; (adr r3, 800ee78 <__ieee754_rem_pio2+0x310>)
 800ec60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec64:	f7f1 fb32 	bl	80002cc <__adddf3>
 800ec68:	a385      	add	r3, pc, #532	; (adr r3, 800ee80 <__ieee754_rem_pio2+0x318>)
 800ec6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6e:	4604      	mov	r4, r0
 800ec70:	460d      	mov	r5, r1
 800ec72:	f7f1 fb2b 	bl	80002cc <__adddf3>
 800ec76:	4602      	mov	r2, r0
 800ec78:	460b      	mov	r3, r1
 800ec7a:	e9ca 2300 	strd	r2, r3, [sl]
 800ec7e:	4620      	mov	r0, r4
 800ec80:	4629      	mov	r1, r5
 800ec82:	f7f1 fb21 	bl	80002c8 <__aeabi_dsub>
 800ec86:	a37e      	add	r3, pc, #504	; (adr r3, 800ee80 <__ieee754_rem_pio2+0x318>)
 800ec88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8c:	e7e0      	b.n	800ec50 <__ieee754_rem_pio2+0xe8>
 800ec8e:	4b87      	ldr	r3, [pc, #540]	; (800eeac <__ieee754_rem_pio2+0x344>)
 800ec90:	4598      	cmp	r8, r3
 800ec92:	f300 80d9 	bgt.w	800ee48 <__ieee754_rem_pio2+0x2e0>
 800ec96:	f7ff ff27 	bl	800eae8 <fabs>
 800ec9a:	ec55 4b10 	vmov	r4, r5, d0
 800ec9e:	ee10 0a10 	vmov	r0, s0
 800eca2:	a379      	add	r3, pc, #484	; (adr r3, 800ee88 <__ieee754_rem_pio2+0x320>)
 800eca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca8:	4629      	mov	r1, r5
 800ecaa:	f7f1 fcc5 	bl	8000638 <__aeabi_dmul>
 800ecae:	4b80      	ldr	r3, [pc, #512]	; (800eeb0 <__ieee754_rem_pio2+0x348>)
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f7f1 fb0b 	bl	80002cc <__adddf3>
 800ecb6:	f7f1 ff6f 	bl	8000b98 <__aeabi_d2iz>
 800ecba:	4683      	mov	fp, r0
 800ecbc:	f7f1 fc52 	bl	8000564 <__aeabi_i2d>
 800ecc0:	4602      	mov	r2, r0
 800ecc2:	460b      	mov	r3, r1
 800ecc4:	ec43 2b18 	vmov	d8, r2, r3
 800ecc8:	a367      	add	r3, pc, #412	; (adr r3, 800ee68 <__ieee754_rem_pio2+0x300>)
 800ecca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecce:	f7f1 fcb3 	bl	8000638 <__aeabi_dmul>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	4629      	mov	r1, r5
 800ecda:	f7f1 faf5 	bl	80002c8 <__aeabi_dsub>
 800ecde:	a364      	add	r3, pc, #400	; (adr r3, 800ee70 <__ieee754_rem_pio2+0x308>)
 800ece0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece4:	4606      	mov	r6, r0
 800ece6:	460f      	mov	r7, r1
 800ece8:	ec51 0b18 	vmov	r0, r1, d8
 800ecec:	f7f1 fca4 	bl	8000638 <__aeabi_dmul>
 800ecf0:	f1bb 0f1f 	cmp.w	fp, #31
 800ecf4:	4604      	mov	r4, r0
 800ecf6:	460d      	mov	r5, r1
 800ecf8:	dc0d      	bgt.n	800ed16 <__ieee754_rem_pio2+0x1ae>
 800ecfa:	4b6e      	ldr	r3, [pc, #440]	; (800eeb4 <__ieee754_rem_pio2+0x34c>)
 800ecfc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ed00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed04:	4543      	cmp	r3, r8
 800ed06:	d006      	beq.n	800ed16 <__ieee754_rem_pio2+0x1ae>
 800ed08:	4622      	mov	r2, r4
 800ed0a:	462b      	mov	r3, r5
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	4639      	mov	r1, r7
 800ed10:	f7f1 fada 	bl	80002c8 <__aeabi_dsub>
 800ed14:	e00f      	b.n	800ed36 <__ieee754_rem_pio2+0x1ce>
 800ed16:	462b      	mov	r3, r5
 800ed18:	4622      	mov	r2, r4
 800ed1a:	4630      	mov	r0, r6
 800ed1c:	4639      	mov	r1, r7
 800ed1e:	f7f1 fad3 	bl	80002c8 <__aeabi_dsub>
 800ed22:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ed26:	9303      	str	r3, [sp, #12]
 800ed28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ed2c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ed30:	f1b8 0f10 	cmp.w	r8, #16
 800ed34:	dc02      	bgt.n	800ed3c <__ieee754_rem_pio2+0x1d4>
 800ed36:	e9ca 0100 	strd	r0, r1, [sl]
 800ed3a:	e039      	b.n	800edb0 <__ieee754_rem_pio2+0x248>
 800ed3c:	a34e      	add	r3, pc, #312	; (adr r3, 800ee78 <__ieee754_rem_pio2+0x310>)
 800ed3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed42:	ec51 0b18 	vmov	r0, r1, d8
 800ed46:	f7f1 fc77 	bl	8000638 <__aeabi_dmul>
 800ed4a:	4604      	mov	r4, r0
 800ed4c:	460d      	mov	r5, r1
 800ed4e:	4602      	mov	r2, r0
 800ed50:	460b      	mov	r3, r1
 800ed52:	4630      	mov	r0, r6
 800ed54:	4639      	mov	r1, r7
 800ed56:	f7f1 fab7 	bl	80002c8 <__aeabi_dsub>
 800ed5a:	4602      	mov	r2, r0
 800ed5c:	460b      	mov	r3, r1
 800ed5e:	4680      	mov	r8, r0
 800ed60:	4689      	mov	r9, r1
 800ed62:	4630      	mov	r0, r6
 800ed64:	4639      	mov	r1, r7
 800ed66:	f7f1 faaf 	bl	80002c8 <__aeabi_dsub>
 800ed6a:	4622      	mov	r2, r4
 800ed6c:	462b      	mov	r3, r5
 800ed6e:	f7f1 faab 	bl	80002c8 <__aeabi_dsub>
 800ed72:	a343      	add	r3, pc, #268	; (adr r3, 800ee80 <__ieee754_rem_pio2+0x318>)
 800ed74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed78:	4604      	mov	r4, r0
 800ed7a:	460d      	mov	r5, r1
 800ed7c:	ec51 0b18 	vmov	r0, r1, d8
 800ed80:	f7f1 fc5a 	bl	8000638 <__aeabi_dmul>
 800ed84:	4622      	mov	r2, r4
 800ed86:	462b      	mov	r3, r5
 800ed88:	f7f1 fa9e 	bl	80002c8 <__aeabi_dsub>
 800ed8c:	4602      	mov	r2, r0
 800ed8e:	460b      	mov	r3, r1
 800ed90:	4604      	mov	r4, r0
 800ed92:	460d      	mov	r5, r1
 800ed94:	4640      	mov	r0, r8
 800ed96:	4649      	mov	r1, r9
 800ed98:	f7f1 fa96 	bl	80002c8 <__aeabi_dsub>
 800ed9c:	9a03      	ldr	r2, [sp, #12]
 800ed9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eda2:	1ad3      	subs	r3, r2, r3
 800eda4:	2b31      	cmp	r3, #49	; 0x31
 800eda6:	dc24      	bgt.n	800edf2 <__ieee754_rem_pio2+0x28a>
 800eda8:	e9ca 0100 	strd	r0, r1, [sl]
 800edac:	4646      	mov	r6, r8
 800edae:	464f      	mov	r7, r9
 800edb0:	e9da 8900 	ldrd	r8, r9, [sl]
 800edb4:	4630      	mov	r0, r6
 800edb6:	4642      	mov	r2, r8
 800edb8:	464b      	mov	r3, r9
 800edba:	4639      	mov	r1, r7
 800edbc:	f7f1 fa84 	bl	80002c8 <__aeabi_dsub>
 800edc0:	462b      	mov	r3, r5
 800edc2:	4622      	mov	r2, r4
 800edc4:	f7f1 fa80 	bl	80002c8 <__aeabi_dsub>
 800edc8:	9b02      	ldr	r3, [sp, #8]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800edd0:	f6bf af0a 	bge.w	800ebe8 <__ieee754_rem_pio2+0x80>
 800edd4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800edd8:	f8ca 3004 	str.w	r3, [sl, #4]
 800eddc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ede0:	f8ca 8000 	str.w	r8, [sl]
 800ede4:	f8ca 0008 	str.w	r0, [sl, #8]
 800ede8:	f8ca 300c 	str.w	r3, [sl, #12]
 800edec:	f1cb 0b00 	rsb	fp, fp, #0
 800edf0:	e6fa      	b.n	800ebe8 <__ieee754_rem_pio2+0x80>
 800edf2:	a327      	add	r3, pc, #156	; (adr r3, 800ee90 <__ieee754_rem_pio2+0x328>)
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	ec51 0b18 	vmov	r0, r1, d8
 800edfc:	f7f1 fc1c 	bl	8000638 <__aeabi_dmul>
 800ee00:	4604      	mov	r4, r0
 800ee02:	460d      	mov	r5, r1
 800ee04:	4602      	mov	r2, r0
 800ee06:	460b      	mov	r3, r1
 800ee08:	4640      	mov	r0, r8
 800ee0a:	4649      	mov	r1, r9
 800ee0c:	f7f1 fa5c 	bl	80002c8 <__aeabi_dsub>
 800ee10:	4602      	mov	r2, r0
 800ee12:	460b      	mov	r3, r1
 800ee14:	4606      	mov	r6, r0
 800ee16:	460f      	mov	r7, r1
 800ee18:	4640      	mov	r0, r8
 800ee1a:	4649      	mov	r1, r9
 800ee1c:	f7f1 fa54 	bl	80002c8 <__aeabi_dsub>
 800ee20:	4622      	mov	r2, r4
 800ee22:	462b      	mov	r3, r5
 800ee24:	f7f1 fa50 	bl	80002c8 <__aeabi_dsub>
 800ee28:	a31b      	add	r3, pc, #108	; (adr r3, 800ee98 <__ieee754_rem_pio2+0x330>)
 800ee2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee2e:	4604      	mov	r4, r0
 800ee30:	460d      	mov	r5, r1
 800ee32:	ec51 0b18 	vmov	r0, r1, d8
 800ee36:	f7f1 fbff 	bl	8000638 <__aeabi_dmul>
 800ee3a:	4622      	mov	r2, r4
 800ee3c:	462b      	mov	r3, r5
 800ee3e:	f7f1 fa43 	bl	80002c8 <__aeabi_dsub>
 800ee42:	4604      	mov	r4, r0
 800ee44:	460d      	mov	r5, r1
 800ee46:	e75f      	b.n	800ed08 <__ieee754_rem_pio2+0x1a0>
 800ee48:	4b1b      	ldr	r3, [pc, #108]	; (800eeb8 <__ieee754_rem_pio2+0x350>)
 800ee4a:	4598      	cmp	r8, r3
 800ee4c:	dd36      	ble.n	800eebc <__ieee754_rem_pio2+0x354>
 800ee4e:	ee10 2a10 	vmov	r2, s0
 800ee52:	462b      	mov	r3, r5
 800ee54:	4620      	mov	r0, r4
 800ee56:	4629      	mov	r1, r5
 800ee58:	f7f1 fa36 	bl	80002c8 <__aeabi_dsub>
 800ee5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ee60:	e9ca 0100 	strd	r0, r1, [sl]
 800ee64:	e694      	b.n	800eb90 <__ieee754_rem_pio2+0x28>
 800ee66:	bf00      	nop
 800ee68:	54400000 	.word	0x54400000
 800ee6c:	3ff921fb 	.word	0x3ff921fb
 800ee70:	1a626331 	.word	0x1a626331
 800ee74:	3dd0b461 	.word	0x3dd0b461
 800ee78:	1a600000 	.word	0x1a600000
 800ee7c:	3dd0b461 	.word	0x3dd0b461
 800ee80:	2e037073 	.word	0x2e037073
 800ee84:	3ba3198a 	.word	0x3ba3198a
 800ee88:	6dc9c883 	.word	0x6dc9c883
 800ee8c:	3fe45f30 	.word	0x3fe45f30
 800ee90:	2e000000 	.word	0x2e000000
 800ee94:	3ba3198a 	.word	0x3ba3198a
 800ee98:	252049c1 	.word	0x252049c1
 800ee9c:	397b839a 	.word	0x397b839a
 800eea0:	3fe921fb 	.word	0x3fe921fb
 800eea4:	4002d97b 	.word	0x4002d97b
 800eea8:	3ff921fb 	.word	0x3ff921fb
 800eeac:	413921fb 	.word	0x413921fb
 800eeb0:	3fe00000 	.word	0x3fe00000
 800eeb4:	080101c8 	.word	0x080101c8
 800eeb8:	7fefffff 	.word	0x7fefffff
 800eebc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800eec0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800eec4:	ee10 0a10 	vmov	r0, s0
 800eec8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800eecc:	ee10 6a10 	vmov	r6, s0
 800eed0:	460f      	mov	r7, r1
 800eed2:	f7f1 fe61 	bl	8000b98 <__aeabi_d2iz>
 800eed6:	f7f1 fb45 	bl	8000564 <__aeabi_i2d>
 800eeda:	4602      	mov	r2, r0
 800eedc:	460b      	mov	r3, r1
 800eede:	4630      	mov	r0, r6
 800eee0:	4639      	mov	r1, r7
 800eee2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eee6:	f7f1 f9ef 	bl	80002c8 <__aeabi_dsub>
 800eeea:	4b23      	ldr	r3, [pc, #140]	; (800ef78 <__ieee754_rem_pio2+0x410>)
 800eeec:	2200      	movs	r2, #0
 800eeee:	f7f1 fba3 	bl	8000638 <__aeabi_dmul>
 800eef2:	460f      	mov	r7, r1
 800eef4:	4606      	mov	r6, r0
 800eef6:	f7f1 fe4f 	bl	8000b98 <__aeabi_d2iz>
 800eefa:	f7f1 fb33 	bl	8000564 <__aeabi_i2d>
 800eefe:	4602      	mov	r2, r0
 800ef00:	460b      	mov	r3, r1
 800ef02:	4630      	mov	r0, r6
 800ef04:	4639      	mov	r1, r7
 800ef06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ef0a:	f7f1 f9dd 	bl	80002c8 <__aeabi_dsub>
 800ef0e:	4b1a      	ldr	r3, [pc, #104]	; (800ef78 <__ieee754_rem_pio2+0x410>)
 800ef10:	2200      	movs	r2, #0
 800ef12:	f7f1 fb91 	bl	8000638 <__aeabi_dmul>
 800ef16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ef1a:	ad04      	add	r5, sp, #16
 800ef1c:	f04f 0803 	mov.w	r8, #3
 800ef20:	46a9      	mov	r9, r5
 800ef22:	2600      	movs	r6, #0
 800ef24:	2700      	movs	r7, #0
 800ef26:	4632      	mov	r2, r6
 800ef28:	463b      	mov	r3, r7
 800ef2a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ef2e:	46c3      	mov	fp, r8
 800ef30:	3d08      	subs	r5, #8
 800ef32:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef36:	f7f1 fde7 	bl	8000b08 <__aeabi_dcmpeq>
 800ef3a:	2800      	cmp	r0, #0
 800ef3c:	d1f3      	bne.n	800ef26 <__ieee754_rem_pio2+0x3be>
 800ef3e:	4b0f      	ldr	r3, [pc, #60]	; (800ef7c <__ieee754_rem_pio2+0x414>)
 800ef40:	9301      	str	r3, [sp, #4]
 800ef42:	2302      	movs	r3, #2
 800ef44:	9300      	str	r3, [sp, #0]
 800ef46:	4622      	mov	r2, r4
 800ef48:	465b      	mov	r3, fp
 800ef4a:	4651      	mov	r1, sl
 800ef4c:	4648      	mov	r0, r9
 800ef4e:	f000 f817 	bl	800ef80 <__kernel_rem_pio2>
 800ef52:	9b02      	ldr	r3, [sp, #8]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	4683      	mov	fp, r0
 800ef58:	f6bf ae46 	bge.w	800ebe8 <__ieee754_rem_pio2+0x80>
 800ef5c:	e9da 2100 	ldrd	r2, r1, [sl]
 800ef60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef64:	e9ca 2300 	strd	r2, r3, [sl]
 800ef68:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ef6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef70:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ef74:	e73a      	b.n	800edec <__ieee754_rem_pio2+0x284>
 800ef76:	bf00      	nop
 800ef78:	41700000 	.word	0x41700000
 800ef7c:	08010248 	.word	0x08010248

0800ef80 <__kernel_rem_pio2>:
 800ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef84:	ed2d 8b02 	vpush	{d8}
 800ef88:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ef8c:	f112 0f14 	cmn.w	r2, #20
 800ef90:	9308      	str	r3, [sp, #32]
 800ef92:	9101      	str	r1, [sp, #4]
 800ef94:	4bc4      	ldr	r3, [pc, #784]	; (800f2a8 <__kernel_rem_pio2+0x328>)
 800ef96:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ef98:	900b      	str	r0, [sp, #44]	; 0x2c
 800ef9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef9e:	9302      	str	r3, [sp, #8]
 800efa0:	9b08      	ldr	r3, [sp, #32]
 800efa2:	f103 33ff 	add.w	r3, r3, #4294967295
 800efa6:	bfa8      	it	ge
 800efa8:	1ed4      	subge	r4, r2, #3
 800efaa:	9306      	str	r3, [sp, #24]
 800efac:	bfb2      	itee	lt
 800efae:	2400      	movlt	r4, #0
 800efb0:	2318      	movge	r3, #24
 800efb2:	fb94 f4f3 	sdivge	r4, r4, r3
 800efb6:	f06f 0317 	mvn.w	r3, #23
 800efba:	fb04 3303 	mla	r3, r4, r3, r3
 800efbe:	eb03 0a02 	add.w	sl, r3, r2
 800efc2:	9b02      	ldr	r3, [sp, #8]
 800efc4:	9a06      	ldr	r2, [sp, #24]
 800efc6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800f298 <__kernel_rem_pio2+0x318>
 800efca:	eb03 0802 	add.w	r8, r3, r2
 800efce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800efd0:	1aa7      	subs	r7, r4, r2
 800efd2:	ae22      	add	r6, sp, #136	; 0x88
 800efd4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800efd8:	2500      	movs	r5, #0
 800efda:	4545      	cmp	r5, r8
 800efdc:	dd13      	ble.n	800f006 <__kernel_rem_pio2+0x86>
 800efde:	9b08      	ldr	r3, [sp, #32]
 800efe0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800f298 <__kernel_rem_pio2+0x318>
 800efe4:	aa22      	add	r2, sp, #136	; 0x88
 800efe6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800efea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800efee:	f04f 0800 	mov.w	r8, #0
 800eff2:	9b02      	ldr	r3, [sp, #8]
 800eff4:	4598      	cmp	r8, r3
 800eff6:	dc2f      	bgt.n	800f058 <__kernel_rem_pio2+0xd8>
 800eff8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800effc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800f000:	462f      	mov	r7, r5
 800f002:	2600      	movs	r6, #0
 800f004:	e01b      	b.n	800f03e <__kernel_rem_pio2+0xbe>
 800f006:	42ef      	cmn	r7, r5
 800f008:	d407      	bmi.n	800f01a <__kernel_rem_pio2+0x9a>
 800f00a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f00e:	f7f1 faa9 	bl	8000564 <__aeabi_i2d>
 800f012:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f016:	3501      	adds	r5, #1
 800f018:	e7df      	b.n	800efda <__kernel_rem_pio2+0x5a>
 800f01a:	ec51 0b18 	vmov	r0, r1, d8
 800f01e:	e7f8      	b.n	800f012 <__kernel_rem_pio2+0x92>
 800f020:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f024:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f028:	f7f1 fb06 	bl	8000638 <__aeabi_dmul>
 800f02c:	4602      	mov	r2, r0
 800f02e:	460b      	mov	r3, r1
 800f030:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f034:	f7f1 f94a 	bl	80002cc <__adddf3>
 800f038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f03c:	3601      	adds	r6, #1
 800f03e:	9b06      	ldr	r3, [sp, #24]
 800f040:	429e      	cmp	r6, r3
 800f042:	f1a7 0708 	sub.w	r7, r7, #8
 800f046:	ddeb      	ble.n	800f020 <__kernel_rem_pio2+0xa0>
 800f048:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f04c:	f108 0801 	add.w	r8, r8, #1
 800f050:	ecab 7b02 	vstmia	fp!, {d7}
 800f054:	3508      	adds	r5, #8
 800f056:	e7cc      	b.n	800eff2 <__kernel_rem_pio2+0x72>
 800f058:	9b02      	ldr	r3, [sp, #8]
 800f05a:	aa0e      	add	r2, sp, #56	; 0x38
 800f05c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f060:	930d      	str	r3, [sp, #52]	; 0x34
 800f062:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f064:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f068:	9c02      	ldr	r4, [sp, #8]
 800f06a:	930c      	str	r3, [sp, #48]	; 0x30
 800f06c:	00e3      	lsls	r3, r4, #3
 800f06e:	930a      	str	r3, [sp, #40]	; 0x28
 800f070:	ab9a      	add	r3, sp, #616	; 0x268
 800f072:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f076:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f07a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f07e:	ab72      	add	r3, sp, #456	; 0x1c8
 800f080:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f084:	46c3      	mov	fp, r8
 800f086:	46a1      	mov	r9, r4
 800f088:	f1b9 0f00 	cmp.w	r9, #0
 800f08c:	f1a5 0508 	sub.w	r5, r5, #8
 800f090:	dc77      	bgt.n	800f182 <__kernel_rem_pio2+0x202>
 800f092:	ec47 6b10 	vmov	d0, r6, r7
 800f096:	4650      	mov	r0, sl
 800f098:	f000 fd4e 	bl	800fb38 <scalbn>
 800f09c:	ec57 6b10 	vmov	r6, r7, d0
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f0a6:	ee10 0a10 	vmov	r0, s0
 800f0aa:	4639      	mov	r1, r7
 800f0ac:	f7f1 fac4 	bl	8000638 <__aeabi_dmul>
 800f0b0:	ec41 0b10 	vmov	d0, r0, r1
 800f0b4:	f000 fcc0 	bl	800fa38 <floor>
 800f0b8:	4b7c      	ldr	r3, [pc, #496]	; (800f2ac <__kernel_rem_pio2+0x32c>)
 800f0ba:	ec51 0b10 	vmov	r0, r1, d0
 800f0be:	2200      	movs	r2, #0
 800f0c0:	f7f1 faba 	bl	8000638 <__aeabi_dmul>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	4639      	mov	r1, r7
 800f0cc:	f7f1 f8fc 	bl	80002c8 <__aeabi_dsub>
 800f0d0:	460f      	mov	r7, r1
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	f7f1 fd60 	bl	8000b98 <__aeabi_d2iz>
 800f0d8:	9004      	str	r0, [sp, #16]
 800f0da:	f7f1 fa43 	bl	8000564 <__aeabi_i2d>
 800f0de:	4602      	mov	r2, r0
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	4639      	mov	r1, r7
 800f0e6:	f7f1 f8ef 	bl	80002c8 <__aeabi_dsub>
 800f0ea:	f1ba 0f00 	cmp.w	sl, #0
 800f0ee:	4606      	mov	r6, r0
 800f0f0:	460f      	mov	r7, r1
 800f0f2:	dd6d      	ble.n	800f1d0 <__kernel_rem_pio2+0x250>
 800f0f4:	1e62      	subs	r2, r4, #1
 800f0f6:	ab0e      	add	r3, sp, #56	; 0x38
 800f0f8:	9d04      	ldr	r5, [sp, #16]
 800f0fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f0fe:	f1ca 0118 	rsb	r1, sl, #24
 800f102:	fa40 f301 	asr.w	r3, r0, r1
 800f106:	441d      	add	r5, r3
 800f108:	408b      	lsls	r3, r1
 800f10a:	1ac0      	subs	r0, r0, r3
 800f10c:	ab0e      	add	r3, sp, #56	; 0x38
 800f10e:	9504      	str	r5, [sp, #16]
 800f110:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f114:	f1ca 0317 	rsb	r3, sl, #23
 800f118:	fa40 fb03 	asr.w	fp, r0, r3
 800f11c:	f1bb 0f00 	cmp.w	fp, #0
 800f120:	dd65      	ble.n	800f1ee <__kernel_rem_pio2+0x26e>
 800f122:	9b04      	ldr	r3, [sp, #16]
 800f124:	2200      	movs	r2, #0
 800f126:	3301      	adds	r3, #1
 800f128:	9304      	str	r3, [sp, #16]
 800f12a:	4615      	mov	r5, r2
 800f12c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f130:	4294      	cmp	r4, r2
 800f132:	f300 809c 	bgt.w	800f26e <__kernel_rem_pio2+0x2ee>
 800f136:	f1ba 0f00 	cmp.w	sl, #0
 800f13a:	dd07      	ble.n	800f14c <__kernel_rem_pio2+0x1cc>
 800f13c:	f1ba 0f01 	cmp.w	sl, #1
 800f140:	f000 80c0 	beq.w	800f2c4 <__kernel_rem_pio2+0x344>
 800f144:	f1ba 0f02 	cmp.w	sl, #2
 800f148:	f000 80c6 	beq.w	800f2d8 <__kernel_rem_pio2+0x358>
 800f14c:	f1bb 0f02 	cmp.w	fp, #2
 800f150:	d14d      	bne.n	800f1ee <__kernel_rem_pio2+0x26e>
 800f152:	4632      	mov	r2, r6
 800f154:	463b      	mov	r3, r7
 800f156:	4956      	ldr	r1, [pc, #344]	; (800f2b0 <__kernel_rem_pio2+0x330>)
 800f158:	2000      	movs	r0, #0
 800f15a:	f7f1 f8b5 	bl	80002c8 <__aeabi_dsub>
 800f15e:	4606      	mov	r6, r0
 800f160:	460f      	mov	r7, r1
 800f162:	2d00      	cmp	r5, #0
 800f164:	d043      	beq.n	800f1ee <__kernel_rem_pio2+0x26e>
 800f166:	4650      	mov	r0, sl
 800f168:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800f2a0 <__kernel_rem_pio2+0x320>
 800f16c:	f000 fce4 	bl	800fb38 <scalbn>
 800f170:	4630      	mov	r0, r6
 800f172:	4639      	mov	r1, r7
 800f174:	ec53 2b10 	vmov	r2, r3, d0
 800f178:	f7f1 f8a6 	bl	80002c8 <__aeabi_dsub>
 800f17c:	4606      	mov	r6, r0
 800f17e:	460f      	mov	r7, r1
 800f180:	e035      	b.n	800f1ee <__kernel_rem_pio2+0x26e>
 800f182:	4b4c      	ldr	r3, [pc, #304]	; (800f2b4 <__kernel_rem_pio2+0x334>)
 800f184:	2200      	movs	r2, #0
 800f186:	4630      	mov	r0, r6
 800f188:	4639      	mov	r1, r7
 800f18a:	f7f1 fa55 	bl	8000638 <__aeabi_dmul>
 800f18e:	f7f1 fd03 	bl	8000b98 <__aeabi_d2iz>
 800f192:	f7f1 f9e7 	bl	8000564 <__aeabi_i2d>
 800f196:	4602      	mov	r2, r0
 800f198:	460b      	mov	r3, r1
 800f19a:	ec43 2b18 	vmov	d8, r2, r3
 800f19e:	4b46      	ldr	r3, [pc, #280]	; (800f2b8 <__kernel_rem_pio2+0x338>)
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	f7f1 fa49 	bl	8000638 <__aeabi_dmul>
 800f1a6:	4602      	mov	r2, r0
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	4639      	mov	r1, r7
 800f1ae:	f7f1 f88b 	bl	80002c8 <__aeabi_dsub>
 800f1b2:	f7f1 fcf1 	bl	8000b98 <__aeabi_d2iz>
 800f1b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f1ba:	f84b 0b04 	str.w	r0, [fp], #4
 800f1be:	ec51 0b18 	vmov	r0, r1, d8
 800f1c2:	f7f1 f883 	bl	80002cc <__adddf3>
 800f1c6:	f109 39ff 	add.w	r9, r9, #4294967295
 800f1ca:	4606      	mov	r6, r0
 800f1cc:	460f      	mov	r7, r1
 800f1ce:	e75b      	b.n	800f088 <__kernel_rem_pio2+0x108>
 800f1d0:	d106      	bne.n	800f1e0 <__kernel_rem_pio2+0x260>
 800f1d2:	1e63      	subs	r3, r4, #1
 800f1d4:	aa0e      	add	r2, sp, #56	; 0x38
 800f1d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f1da:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800f1de:	e79d      	b.n	800f11c <__kernel_rem_pio2+0x19c>
 800f1e0:	4b36      	ldr	r3, [pc, #216]	; (800f2bc <__kernel_rem_pio2+0x33c>)
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f7f1 fcae 	bl	8000b44 <__aeabi_dcmpge>
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	d13d      	bne.n	800f268 <__kernel_rem_pio2+0x2e8>
 800f1ec:	4683      	mov	fp, r0
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	4639      	mov	r1, r7
 800f1f6:	f7f1 fc87 	bl	8000b08 <__aeabi_dcmpeq>
 800f1fa:	2800      	cmp	r0, #0
 800f1fc:	f000 80c0 	beq.w	800f380 <__kernel_rem_pio2+0x400>
 800f200:	1e65      	subs	r5, r4, #1
 800f202:	462b      	mov	r3, r5
 800f204:	2200      	movs	r2, #0
 800f206:	9902      	ldr	r1, [sp, #8]
 800f208:	428b      	cmp	r3, r1
 800f20a:	da6c      	bge.n	800f2e6 <__kernel_rem_pio2+0x366>
 800f20c:	2a00      	cmp	r2, #0
 800f20e:	f000 8089 	beq.w	800f324 <__kernel_rem_pio2+0x3a4>
 800f212:	ab0e      	add	r3, sp, #56	; 0x38
 800f214:	f1aa 0a18 	sub.w	sl, sl, #24
 800f218:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	f000 80ad 	beq.w	800f37c <__kernel_rem_pio2+0x3fc>
 800f222:	4650      	mov	r0, sl
 800f224:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800f2a0 <__kernel_rem_pio2+0x320>
 800f228:	f000 fc86 	bl	800fb38 <scalbn>
 800f22c:	ab9a      	add	r3, sp, #616	; 0x268
 800f22e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f232:	ec57 6b10 	vmov	r6, r7, d0
 800f236:	00ec      	lsls	r4, r5, #3
 800f238:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800f23c:	46aa      	mov	sl, r5
 800f23e:	f1ba 0f00 	cmp.w	sl, #0
 800f242:	f280 80d6 	bge.w	800f3f2 <__kernel_rem_pio2+0x472>
 800f246:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800f298 <__kernel_rem_pio2+0x318>
 800f24a:	462e      	mov	r6, r5
 800f24c:	2e00      	cmp	r6, #0
 800f24e:	f2c0 8104 	blt.w	800f45a <__kernel_rem_pio2+0x4da>
 800f252:	ab72      	add	r3, sp, #456	; 0x1c8
 800f254:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f258:	f8df a064 	ldr.w	sl, [pc, #100]	; 800f2c0 <__kernel_rem_pio2+0x340>
 800f25c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f260:	f04f 0800 	mov.w	r8, #0
 800f264:	1baf      	subs	r7, r5, r6
 800f266:	e0ea      	b.n	800f43e <__kernel_rem_pio2+0x4be>
 800f268:	f04f 0b02 	mov.w	fp, #2
 800f26c:	e759      	b.n	800f122 <__kernel_rem_pio2+0x1a2>
 800f26e:	f8d8 3000 	ldr.w	r3, [r8]
 800f272:	b955      	cbnz	r5, 800f28a <__kernel_rem_pio2+0x30a>
 800f274:	b123      	cbz	r3, 800f280 <__kernel_rem_pio2+0x300>
 800f276:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f27a:	f8c8 3000 	str.w	r3, [r8]
 800f27e:	2301      	movs	r3, #1
 800f280:	3201      	adds	r2, #1
 800f282:	f108 0804 	add.w	r8, r8, #4
 800f286:	461d      	mov	r5, r3
 800f288:	e752      	b.n	800f130 <__kernel_rem_pio2+0x1b0>
 800f28a:	1acb      	subs	r3, r1, r3
 800f28c:	f8c8 3000 	str.w	r3, [r8]
 800f290:	462b      	mov	r3, r5
 800f292:	e7f5      	b.n	800f280 <__kernel_rem_pio2+0x300>
 800f294:	f3af 8000 	nop.w
	...
 800f2a4:	3ff00000 	.word	0x3ff00000
 800f2a8:	08010390 	.word	0x08010390
 800f2ac:	40200000 	.word	0x40200000
 800f2b0:	3ff00000 	.word	0x3ff00000
 800f2b4:	3e700000 	.word	0x3e700000
 800f2b8:	41700000 	.word	0x41700000
 800f2bc:	3fe00000 	.word	0x3fe00000
 800f2c0:	08010350 	.word	0x08010350
 800f2c4:	1e62      	subs	r2, r4, #1
 800f2c6:	ab0e      	add	r3, sp, #56	; 0x38
 800f2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f2d0:	a90e      	add	r1, sp, #56	; 0x38
 800f2d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f2d6:	e739      	b.n	800f14c <__kernel_rem_pio2+0x1cc>
 800f2d8:	1e62      	subs	r2, r4, #1
 800f2da:	ab0e      	add	r3, sp, #56	; 0x38
 800f2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f2e4:	e7f4      	b.n	800f2d0 <__kernel_rem_pio2+0x350>
 800f2e6:	a90e      	add	r1, sp, #56	; 0x38
 800f2e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f2ec:	3b01      	subs	r3, #1
 800f2ee:	430a      	orrs	r2, r1
 800f2f0:	e789      	b.n	800f206 <__kernel_rem_pio2+0x286>
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f2f8:	2900      	cmp	r1, #0
 800f2fa:	d0fa      	beq.n	800f2f2 <__kernel_rem_pio2+0x372>
 800f2fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2fe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800f302:	446a      	add	r2, sp
 800f304:	3a98      	subs	r2, #152	; 0x98
 800f306:	920a      	str	r2, [sp, #40]	; 0x28
 800f308:	9a08      	ldr	r2, [sp, #32]
 800f30a:	18e3      	adds	r3, r4, r3
 800f30c:	18a5      	adds	r5, r4, r2
 800f30e:	aa22      	add	r2, sp, #136	; 0x88
 800f310:	f104 0801 	add.w	r8, r4, #1
 800f314:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f318:	9304      	str	r3, [sp, #16]
 800f31a:	9b04      	ldr	r3, [sp, #16]
 800f31c:	4543      	cmp	r3, r8
 800f31e:	da04      	bge.n	800f32a <__kernel_rem_pio2+0x3aa>
 800f320:	461c      	mov	r4, r3
 800f322:	e6a3      	b.n	800f06c <__kernel_rem_pio2+0xec>
 800f324:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f326:	2301      	movs	r3, #1
 800f328:	e7e4      	b.n	800f2f4 <__kernel_rem_pio2+0x374>
 800f32a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f32c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f330:	f7f1 f918 	bl	8000564 <__aeabi_i2d>
 800f334:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f33a:	46ab      	mov	fp, r5
 800f33c:	461c      	mov	r4, r3
 800f33e:	f04f 0900 	mov.w	r9, #0
 800f342:	2600      	movs	r6, #0
 800f344:	2700      	movs	r7, #0
 800f346:	9b06      	ldr	r3, [sp, #24]
 800f348:	4599      	cmp	r9, r3
 800f34a:	dd06      	ble.n	800f35a <__kernel_rem_pio2+0x3da>
 800f34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f34e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f352:	f108 0801 	add.w	r8, r8, #1
 800f356:	930a      	str	r3, [sp, #40]	; 0x28
 800f358:	e7df      	b.n	800f31a <__kernel_rem_pio2+0x39a>
 800f35a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f35e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f362:	f7f1 f969 	bl	8000638 <__aeabi_dmul>
 800f366:	4602      	mov	r2, r0
 800f368:	460b      	mov	r3, r1
 800f36a:	4630      	mov	r0, r6
 800f36c:	4639      	mov	r1, r7
 800f36e:	f7f0 ffad 	bl	80002cc <__adddf3>
 800f372:	f109 0901 	add.w	r9, r9, #1
 800f376:	4606      	mov	r6, r0
 800f378:	460f      	mov	r7, r1
 800f37a:	e7e4      	b.n	800f346 <__kernel_rem_pio2+0x3c6>
 800f37c:	3d01      	subs	r5, #1
 800f37e:	e748      	b.n	800f212 <__kernel_rem_pio2+0x292>
 800f380:	ec47 6b10 	vmov	d0, r6, r7
 800f384:	f1ca 0000 	rsb	r0, sl, #0
 800f388:	f000 fbd6 	bl	800fb38 <scalbn>
 800f38c:	ec57 6b10 	vmov	r6, r7, d0
 800f390:	4ba0      	ldr	r3, [pc, #640]	; (800f614 <__kernel_rem_pio2+0x694>)
 800f392:	ee10 0a10 	vmov	r0, s0
 800f396:	2200      	movs	r2, #0
 800f398:	4639      	mov	r1, r7
 800f39a:	f7f1 fbd3 	bl	8000b44 <__aeabi_dcmpge>
 800f39e:	b1f8      	cbz	r0, 800f3e0 <__kernel_rem_pio2+0x460>
 800f3a0:	4b9d      	ldr	r3, [pc, #628]	; (800f618 <__kernel_rem_pio2+0x698>)
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	4630      	mov	r0, r6
 800f3a6:	4639      	mov	r1, r7
 800f3a8:	f7f1 f946 	bl	8000638 <__aeabi_dmul>
 800f3ac:	f7f1 fbf4 	bl	8000b98 <__aeabi_d2iz>
 800f3b0:	4680      	mov	r8, r0
 800f3b2:	f7f1 f8d7 	bl	8000564 <__aeabi_i2d>
 800f3b6:	4b97      	ldr	r3, [pc, #604]	; (800f614 <__kernel_rem_pio2+0x694>)
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	f7f1 f93d 	bl	8000638 <__aeabi_dmul>
 800f3be:	460b      	mov	r3, r1
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	4639      	mov	r1, r7
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	f7f0 ff7f 	bl	80002c8 <__aeabi_dsub>
 800f3ca:	f7f1 fbe5 	bl	8000b98 <__aeabi_d2iz>
 800f3ce:	1c65      	adds	r5, r4, #1
 800f3d0:	ab0e      	add	r3, sp, #56	; 0x38
 800f3d2:	f10a 0a18 	add.w	sl, sl, #24
 800f3d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f3da:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f3de:	e720      	b.n	800f222 <__kernel_rem_pio2+0x2a2>
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	4639      	mov	r1, r7
 800f3e4:	f7f1 fbd8 	bl	8000b98 <__aeabi_d2iz>
 800f3e8:	ab0e      	add	r3, sp, #56	; 0x38
 800f3ea:	4625      	mov	r5, r4
 800f3ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f3f0:	e717      	b.n	800f222 <__kernel_rem_pio2+0x2a2>
 800f3f2:	ab0e      	add	r3, sp, #56	; 0x38
 800f3f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f3f8:	f7f1 f8b4 	bl	8000564 <__aeabi_i2d>
 800f3fc:	4632      	mov	r2, r6
 800f3fe:	463b      	mov	r3, r7
 800f400:	f7f1 f91a 	bl	8000638 <__aeabi_dmul>
 800f404:	4b84      	ldr	r3, [pc, #528]	; (800f618 <__kernel_rem_pio2+0x698>)
 800f406:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800f40a:	2200      	movs	r2, #0
 800f40c:	4630      	mov	r0, r6
 800f40e:	4639      	mov	r1, r7
 800f410:	f7f1 f912 	bl	8000638 <__aeabi_dmul>
 800f414:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f418:	4606      	mov	r6, r0
 800f41a:	460f      	mov	r7, r1
 800f41c:	e70f      	b.n	800f23e <__kernel_rem_pio2+0x2be>
 800f41e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f422:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f426:	f7f1 f907 	bl	8000638 <__aeabi_dmul>
 800f42a:	4602      	mov	r2, r0
 800f42c:	460b      	mov	r3, r1
 800f42e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f432:	f7f0 ff4b 	bl	80002cc <__adddf3>
 800f436:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f43a:	f108 0801 	add.w	r8, r8, #1
 800f43e:	9b02      	ldr	r3, [sp, #8]
 800f440:	4598      	cmp	r8, r3
 800f442:	dc01      	bgt.n	800f448 <__kernel_rem_pio2+0x4c8>
 800f444:	45b8      	cmp	r8, r7
 800f446:	ddea      	ble.n	800f41e <__kernel_rem_pio2+0x49e>
 800f448:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f44c:	ab4a      	add	r3, sp, #296	; 0x128
 800f44e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f452:	ed87 7b00 	vstr	d7, [r7]
 800f456:	3e01      	subs	r6, #1
 800f458:	e6f8      	b.n	800f24c <__kernel_rem_pio2+0x2cc>
 800f45a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f45c:	2b02      	cmp	r3, #2
 800f45e:	dc0b      	bgt.n	800f478 <__kernel_rem_pio2+0x4f8>
 800f460:	2b00      	cmp	r3, #0
 800f462:	dc35      	bgt.n	800f4d0 <__kernel_rem_pio2+0x550>
 800f464:	d059      	beq.n	800f51a <__kernel_rem_pio2+0x59a>
 800f466:	9b04      	ldr	r3, [sp, #16]
 800f468:	f003 0007 	and.w	r0, r3, #7
 800f46c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f470:	ecbd 8b02 	vpop	{d8}
 800f474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f478:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f47a:	2b03      	cmp	r3, #3
 800f47c:	d1f3      	bne.n	800f466 <__kernel_rem_pio2+0x4e6>
 800f47e:	ab4a      	add	r3, sp, #296	; 0x128
 800f480:	4423      	add	r3, r4
 800f482:	9306      	str	r3, [sp, #24]
 800f484:	461c      	mov	r4, r3
 800f486:	469a      	mov	sl, r3
 800f488:	9502      	str	r5, [sp, #8]
 800f48a:	9b02      	ldr	r3, [sp, #8]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	f1aa 0a08 	sub.w	sl, sl, #8
 800f492:	dc6b      	bgt.n	800f56c <__kernel_rem_pio2+0x5ec>
 800f494:	46aa      	mov	sl, r5
 800f496:	f1ba 0f01 	cmp.w	sl, #1
 800f49a:	f1a4 0408 	sub.w	r4, r4, #8
 800f49e:	f300 8085 	bgt.w	800f5ac <__kernel_rem_pio2+0x62c>
 800f4a2:	9c06      	ldr	r4, [sp, #24]
 800f4a4:	2000      	movs	r0, #0
 800f4a6:	3408      	adds	r4, #8
 800f4a8:	2100      	movs	r1, #0
 800f4aa:	2d01      	cmp	r5, #1
 800f4ac:	f300 809d 	bgt.w	800f5ea <__kernel_rem_pio2+0x66a>
 800f4b0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f4b4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f4b8:	f1bb 0f00 	cmp.w	fp, #0
 800f4bc:	f040 809b 	bne.w	800f5f6 <__kernel_rem_pio2+0x676>
 800f4c0:	9b01      	ldr	r3, [sp, #4]
 800f4c2:	e9c3 5600 	strd	r5, r6, [r3]
 800f4c6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f4ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f4ce:	e7ca      	b.n	800f466 <__kernel_rem_pio2+0x4e6>
 800f4d0:	3408      	adds	r4, #8
 800f4d2:	ab4a      	add	r3, sp, #296	; 0x128
 800f4d4:	441c      	add	r4, r3
 800f4d6:	462e      	mov	r6, r5
 800f4d8:	2000      	movs	r0, #0
 800f4da:	2100      	movs	r1, #0
 800f4dc:	2e00      	cmp	r6, #0
 800f4de:	da36      	bge.n	800f54e <__kernel_rem_pio2+0x5ce>
 800f4e0:	f1bb 0f00 	cmp.w	fp, #0
 800f4e4:	d039      	beq.n	800f55a <__kernel_rem_pio2+0x5da>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4ec:	9c01      	ldr	r4, [sp, #4]
 800f4ee:	e9c4 2300 	strd	r2, r3, [r4]
 800f4f2:	4602      	mov	r2, r0
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f4fa:	f7f0 fee5 	bl	80002c8 <__aeabi_dsub>
 800f4fe:	ae4c      	add	r6, sp, #304	; 0x130
 800f500:	2401      	movs	r4, #1
 800f502:	42a5      	cmp	r5, r4
 800f504:	da2c      	bge.n	800f560 <__kernel_rem_pio2+0x5e0>
 800f506:	f1bb 0f00 	cmp.w	fp, #0
 800f50a:	d002      	beq.n	800f512 <__kernel_rem_pio2+0x592>
 800f50c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f510:	4619      	mov	r1, r3
 800f512:	9b01      	ldr	r3, [sp, #4]
 800f514:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f518:	e7a5      	b.n	800f466 <__kernel_rem_pio2+0x4e6>
 800f51a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f51e:	eb0d 0403 	add.w	r4, sp, r3
 800f522:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f526:	2000      	movs	r0, #0
 800f528:	2100      	movs	r1, #0
 800f52a:	2d00      	cmp	r5, #0
 800f52c:	da09      	bge.n	800f542 <__kernel_rem_pio2+0x5c2>
 800f52e:	f1bb 0f00 	cmp.w	fp, #0
 800f532:	d002      	beq.n	800f53a <__kernel_rem_pio2+0x5ba>
 800f534:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f538:	4619      	mov	r1, r3
 800f53a:	9b01      	ldr	r3, [sp, #4]
 800f53c:	e9c3 0100 	strd	r0, r1, [r3]
 800f540:	e791      	b.n	800f466 <__kernel_rem_pio2+0x4e6>
 800f542:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f546:	f7f0 fec1 	bl	80002cc <__adddf3>
 800f54a:	3d01      	subs	r5, #1
 800f54c:	e7ed      	b.n	800f52a <__kernel_rem_pio2+0x5aa>
 800f54e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f552:	f7f0 febb 	bl	80002cc <__adddf3>
 800f556:	3e01      	subs	r6, #1
 800f558:	e7c0      	b.n	800f4dc <__kernel_rem_pio2+0x55c>
 800f55a:	4602      	mov	r2, r0
 800f55c:	460b      	mov	r3, r1
 800f55e:	e7c5      	b.n	800f4ec <__kernel_rem_pio2+0x56c>
 800f560:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f564:	f7f0 feb2 	bl	80002cc <__adddf3>
 800f568:	3401      	adds	r4, #1
 800f56a:	e7ca      	b.n	800f502 <__kernel_rem_pio2+0x582>
 800f56c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f570:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f574:	9b02      	ldr	r3, [sp, #8]
 800f576:	3b01      	subs	r3, #1
 800f578:	9302      	str	r3, [sp, #8]
 800f57a:	4632      	mov	r2, r6
 800f57c:	463b      	mov	r3, r7
 800f57e:	4640      	mov	r0, r8
 800f580:	4649      	mov	r1, r9
 800f582:	f7f0 fea3 	bl	80002cc <__adddf3>
 800f586:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f58a:	4602      	mov	r2, r0
 800f58c:	460b      	mov	r3, r1
 800f58e:	4640      	mov	r0, r8
 800f590:	4649      	mov	r1, r9
 800f592:	f7f0 fe99 	bl	80002c8 <__aeabi_dsub>
 800f596:	4632      	mov	r2, r6
 800f598:	463b      	mov	r3, r7
 800f59a:	f7f0 fe97 	bl	80002cc <__adddf3>
 800f59e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800f5a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f5a6:	ed8a 7b00 	vstr	d7, [sl]
 800f5aa:	e76e      	b.n	800f48a <__kernel_rem_pio2+0x50a>
 800f5ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f5b0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f5b4:	4640      	mov	r0, r8
 800f5b6:	4632      	mov	r2, r6
 800f5b8:	463b      	mov	r3, r7
 800f5ba:	4649      	mov	r1, r9
 800f5bc:	f7f0 fe86 	bl	80002cc <__adddf3>
 800f5c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	460b      	mov	r3, r1
 800f5c8:	4640      	mov	r0, r8
 800f5ca:	4649      	mov	r1, r9
 800f5cc:	f7f0 fe7c 	bl	80002c8 <__aeabi_dsub>
 800f5d0:	4632      	mov	r2, r6
 800f5d2:	463b      	mov	r3, r7
 800f5d4:	f7f0 fe7a 	bl	80002cc <__adddf3>
 800f5d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f5e0:	ed84 7b00 	vstr	d7, [r4]
 800f5e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5e8:	e755      	b.n	800f496 <__kernel_rem_pio2+0x516>
 800f5ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f5ee:	f7f0 fe6d 	bl	80002cc <__adddf3>
 800f5f2:	3d01      	subs	r5, #1
 800f5f4:	e759      	b.n	800f4aa <__kernel_rem_pio2+0x52a>
 800f5f6:	9b01      	ldr	r3, [sp, #4]
 800f5f8:	9a01      	ldr	r2, [sp, #4]
 800f5fa:	601d      	str	r5, [r3, #0]
 800f5fc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f600:	605c      	str	r4, [r3, #4]
 800f602:	609f      	str	r7, [r3, #8]
 800f604:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f608:	60d3      	str	r3, [r2, #12]
 800f60a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f60e:	6110      	str	r0, [r2, #16]
 800f610:	6153      	str	r3, [r2, #20]
 800f612:	e728      	b.n	800f466 <__kernel_rem_pio2+0x4e6>
 800f614:	41700000 	.word	0x41700000
 800f618:	3e700000 	.word	0x3e700000
 800f61c:	00000000 	.word	0x00000000

0800f620 <__kernel_tan>:
 800f620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f624:	ed2d 8b06 	vpush	{d8-d10}
 800f628:	ec5b ab10 	vmov	sl, fp, d0
 800f62c:	4be0      	ldr	r3, [pc, #896]	; (800f9b0 <__kernel_tan+0x390>)
 800f62e:	b083      	sub	sp, #12
 800f630:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800f634:	429f      	cmp	r7, r3
 800f636:	ec59 8b11 	vmov	r8, r9, d1
 800f63a:	4606      	mov	r6, r0
 800f63c:	f8cd b000 	str.w	fp, [sp]
 800f640:	dc61      	bgt.n	800f706 <__kernel_tan+0xe6>
 800f642:	ee10 0a10 	vmov	r0, s0
 800f646:	4659      	mov	r1, fp
 800f648:	f7f1 faa6 	bl	8000b98 <__aeabi_d2iz>
 800f64c:	4605      	mov	r5, r0
 800f64e:	2800      	cmp	r0, #0
 800f650:	f040 8083 	bne.w	800f75a <__kernel_tan+0x13a>
 800f654:	1c73      	adds	r3, r6, #1
 800f656:	4652      	mov	r2, sl
 800f658:	4313      	orrs	r3, r2
 800f65a:	433b      	orrs	r3, r7
 800f65c:	d112      	bne.n	800f684 <__kernel_tan+0x64>
 800f65e:	ec4b ab10 	vmov	d0, sl, fp
 800f662:	f7ff fa41 	bl	800eae8 <fabs>
 800f666:	49d3      	ldr	r1, [pc, #844]	; (800f9b4 <__kernel_tan+0x394>)
 800f668:	ec53 2b10 	vmov	r2, r3, d0
 800f66c:	2000      	movs	r0, #0
 800f66e:	f7f1 f90d 	bl	800088c <__aeabi_ddiv>
 800f672:	4682      	mov	sl, r0
 800f674:	468b      	mov	fp, r1
 800f676:	ec4b ab10 	vmov	d0, sl, fp
 800f67a:	b003      	add	sp, #12
 800f67c:	ecbd 8b06 	vpop	{d8-d10}
 800f680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f684:	2e01      	cmp	r6, #1
 800f686:	d0f6      	beq.n	800f676 <__kernel_tan+0x56>
 800f688:	4642      	mov	r2, r8
 800f68a:	464b      	mov	r3, r9
 800f68c:	4650      	mov	r0, sl
 800f68e:	4659      	mov	r1, fp
 800f690:	f7f0 fe1c 	bl	80002cc <__adddf3>
 800f694:	4602      	mov	r2, r0
 800f696:	460b      	mov	r3, r1
 800f698:	460f      	mov	r7, r1
 800f69a:	2000      	movs	r0, #0
 800f69c:	49c6      	ldr	r1, [pc, #792]	; (800f9b8 <__kernel_tan+0x398>)
 800f69e:	f7f1 f8f5 	bl	800088c <__aeabi_ddiv>
 800f6a2:	e9cd 0100 	strd	r0, r1, [sp]
 800f6a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6aa:	462e      	mov	r6, r5
 800f6ac:	4652      	mov	r2, sl
 800f6ae:	462c      	mov	r4, r5
 800f6b0:	4630      	mov	r0, r6
 800f6b2:	461d      	mov	r5, r3
 800f6b4:	4639      	mov	r1, r7
 800f6b6:	465b      	mov	r3, fp
 800f6b8:	f7f0 fe06 	bl	80002c8 <__aeabi_dsub>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	460b      	mov	r3, r1
 800f6c0:	4640      	mov	r0, r8
 800f6c2:	4649      	mov	r1, r9
 800f6c4:	f7f0 fe00 	bl	80002c8 <__aeabi_dsub>
 800f6c8:	4632      	mov	r2, r6
 800f6ca:	462b      	mov	r3, r5
 800f6cc:	f7f0 ffb4 	bl	8000638 <__aeabi_dmul>
 800f6d0:	4632      	mov	r2, r6
 800f6d2:	4680      	mov	r8, r0
 800f6d4:	4689      	mov	r9, r1
 800f6d6:	462b      	mov	r3, r5
 800f6d8:	4630      	mov	r0, r6
 800f6da:	4639      	mov	r1, r7
 800f6dc:	f7f0 ffac 	bl	8000638 <__aeabi_dmul>
 800f6e0:	4bb4      	ldr	r3, [pc, #720]	; (800f9b4 <__kernel_tan+0x394>)
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f7f0 fdf2 	bl	80002cc <__adddf3>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	460b      	mov	r3, r1
 800f6ec:	4640      	mov	r0, r8
 800f6ee:	4649      	mov	r1, r9
 800f6f0:	f7f0 fdec 	bl	80002cc <__adddf3>
 800f6f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6f8:	f7f0 ff9e 	bl	8000638 <__aeabi_dmul>
 800f6fc:	4622      	mov	r2, r4
 800f6fe:	462b      	mov	r3, r5
 800f700:	f7f0 fde4 	bl	80002cc <__adddf3>
 800f704:	e7b5      	b.n	800f672 <__kernel_tan+0x52>
 800f706:	4bad      	ldr	r3, [pc, #692]	; (800f9bc <__kernel_tan+0x39c>)
 800f708:	429f      	cmp	r7, r3
 800f70a:	dd26      	ble.n	800f75a <__kernel_tan+0x13a>
 800f70c:	9b00      	ldr	r3, [sp, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	da09      	bge.n	800f726 <__kernel_tan+0x106>
 800f712:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f716:	469b      	mov	fp, r3
 800f718:	ee10 aa10 	vmov	sl, s0
 800f71c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f720:	ee11 8a10 	vmov	r8, s2
 800f724:	4699      	mov	r9, r3
 800f726:	4652      	mov	r2, sl
 800f728:	465b      	mov	r3, fp
 800f72a:	a183      	add	r1, pc, #524	; (adr r1, 800f938 <__kernel_tan+0x318>)
 800f72c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f730:	f7f0 fdca 	bl	80002c8 <__aeabi_dsub>
 800f734:	4642      	mov	r2, r8
 800f736:	464b      	mov	r3, r9
 800f738:	4604      	mov	r4, r0
 800f73a:	460d      	mov	r5, r1
 800f73c:	a180      	add	r1, pc, #512	; (adr r1, 800f940 <__kernel_tan+0x320>)
 800f73e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f742:	f7f0 fdc1 	bl	80002c8 <__aeabi_dsub>
 800f746:	4622      	mov	r2, r4
 800f748:	462b      	mov	r3, r5
 800f74a:	f7f0 fdbf 	bl	80002cc <__adddf3>
 800f74e:	f04f 0800 	mov.w	r8, #0
 800f752:	4682      	mov	sl, r0
 800f754:	468b      	mov	fp, r1
 800f756:	f04f 0900 	mov.w	r9, #0
 800f75a:	4652      	mov	r2, sl
 800f75c:	465b      	mov	r3, fp
 800f75e:	4650      	mov	r0, sl
 800f760:	4659      	mov	r1, fp
 800f762:	f7f0 ff69 	bl	8000638 <__aeabi_dmul>
 800f766:	4602      	mov	r2, r0
 800f768:	460b      	mov	r3, r1
 800f76a:	ec43 2b18 	vmov	d8, r2, r3
 800f76e:	f7f0 ff63 	bl	8000638 <__aeabi_dmul>
 800f772:	ec53 2b18 	vmov	r2, r3, d8
 800f776:	4604      	mov	r4, r0
 800f778:	460d      	mov	r5, r1
 800f77a:	4650      	mov	r0, sl
 800f77c:	4659      	mov	r1, fp
 800f77e:	f7f0 ff5b 	bl	8000638 <__aeabi_dmul>
 800f782:	a371      	add	r3, pc, #452	; (adr r3, 800f948 <__kernel_tan+0x328>)
 800f784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f788:	ec41 0b19 	vmov	d9, r0, r1
 800f78c:	4620      	mov	r0, r4
 800f78e:	4629      	mov	r1, r5
 800f790:	f7f0 ff52 	bl	8000638 <__aeabi_dmul>
 800f794:	a36e      	add	r3, pc, #440	; (adr r3, 800f950 <__kernel_tan+0x330>)
 800f796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79a:	f7f0 fd97 	bl	80002cc <__adddf3>
 800f79e:	4622      	mov	r2, r4
 800f7a0:	462b      	mov	r3, r5
 800f7a2:	f7f0 ff49 	bl	8000638 <__aeabi_dmul>
 800f7a6:	a36c      	add	r3, pc, #432	; (adr r3, 800f958 <__kernel_tan+0x338>)
 800f7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ac:	f7f0 fd8e 	bl	80002cc <__adddf3>
 800f7b0:	4622      	mov	r2, r4
 800f7b2:	462b      	mov	r3, r5
 800f7b4:	f7f0 ff40 	bl	8000638 <__aeabi_dmul>
 800f7b8:	a369      	add	r3, pc, #420	; (adr r3, 800f960 <__kernel_tan+0x340>)
 800f7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7be:	f7f0 fd85 	bl	80002cc <__adddf3>
 800f7c2:	4622      	mov	r2, r4
 800f7c4:	462b      	mov	r3, r5
 800f7c6:	f7f0 ff37 	bl	8000638 <__aeabi_dmul>
 800f7ca:	a367      	add	r3, pc, #412	; (adr r3, 800f968 <__kernel_tan+0x348>)
 800f7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d0:	f7f0 fd7c 	bl	80002cc <__adddf3>
 800f7d4:	4622      	mov	r2, r4
 800f7d6:	462b      	mov	r3, r5
 800f7d8:	f7f0 ff2e 	bl	8000638 <__aeabi_dmul>
 800f7dc:	a364      	add	r3, pc, #400	; (adr r3, 800f970 <__kernel_tan+0x350>)
 800f7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e2:	f7f0 fd73 	bl	80002cc <__adddf3>
 800f7e6:	ec53 2b18 	vmov	r2, r3, d8
 800f7ea:	f7f0 ff25 	bl	8000638 <__aeabi_dmul>
 800f7ee:	a362      	add	r3, pc, #392	; (adr r3, 800f978 <__kernel_tan+0x358>)
 800f7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f4:	ec41 0b1a 	vmov	d10, r0, r1
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	4629      	mov	r1, r5
 800f7fc:	f7f0 ff1c 	bl	8000638 <__aeabi_dmul>
 800f800:	a35f      	add	r3, pc, #380	; (adr r3, 800f980 <__kernel_tan+0x360>)
 800f802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f806:	f7f0 fd61 	bl	80002cc <__adddf3>
 800f80a:	4622      	mov	r2, r4
 800f80c:	462b      	mov	r3, r5
 800f80e:	f7f0 ff13 	bl	8000638 <__aeabi_dmul>
 800f812:	a35d      	add	r3, pc, #372	; (adr r3, 800f988 <__kernel_tan+0x368>)
 800f814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f818:	f7f0 fd58 	bl	80002cc <__adddf3>
 800f81c:	4622      	mov	r2, r4
 800f81e:	462b      	mov	r3, r5
 800f820:	f7f0 ff0a 	bl	8000638 <__aeabi_dmul>
 800f824:	a35a      	add	r3, pc, #360	; (adr r3, 800f990 <__kernel_tan+0x370>)
 800f826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82a:	f7f0 fd4f 	bl	80002cc <__adddf3>
 800f82e:	4622      	mov	r2, r4
 800f830:	462b      	mov	r3, r5
 800f832:	f7f0 ff01 	bl	8000638 <__aeabi_dmul>
 800f836:	a358      	add	r3, pc, #352	; (adr r3, 800f998 <__kernel_tan+0x378>)
 800f838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83c:	f7f0 fd46 	bl	80002cc <__adddf3>
 800f840:	4622      	mov	r2, r4
 800f842:	462b      	mov	r3, r5
 800f844:	f7f0 fef8 	bl	8000638 <__aeabi_dmul>
 800f848:	a355      	add	r3, pc, #340	; (adr r3, 800f9a0 <__kernel_tan+0x380>)
 800f84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84e:	f7f0 fd3d 	bl	80002cc <__adddf3>
 800f852:	4602      	mov	r2, r0
 800f854:	460b      	mov	r3, r1
 800f856:	ec51 0b1a 	vmov	r0, r1, d10
 800f85a:	f7f0 fd37 	bl	80002cc <__adddf3>
 800f85e:	ec53 2b19 	vmov	r2, r3, d9
 800f862:	f7f0 fee9 	bl	8000638 <__aeabi_dmul>
 800f866:	4642      	mov	r2, r8
 800f868:	464b      	mov	r3, r9
 800f86a:	f7f0 fd2f 	bl	80002cc <__adddf3>
 800f86e:	ec53 2b18 	vmov	r2, r3, d8
 800f872:	f7f0 fee1 	bl	8000638 <__aeabi_dmul>
 800f876:	4642      	mov	r2, r8
 800f878:	464b      	mov	r3, r9
 800f87a:	f7f0 fd27 	bl	80002cc <__adddf3>
 800f87e:	a34a      	add	r3, pc, #296	; (adr r3, 800f9a8 <__kernel_tan+0x388>)
 800f880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f884:	4604      	mov	r4, r0
 800f886:	460d      	mov	r5, r1
 800f888:	ec51 0b19 	vmov	r0, r1, d9
 800f88c:	f7f0 fed4 	bl	8000638 <__aeabi_dmul>
 800f890:	4622      	mov	r2, r4
 800f892:	462b      	mov	r3, r5
 800f894:	f7f0 fd1a 	bl	80002cc <__adddf3>
 800f898:	460b      	mov	r3, r1
 800f89a:	ec41 0b18 	vmov	d8, r0, r1
 800f89e:	4602      	mov	r2, r0
 800f8a0:	4659      	mov	r1, fp
 800f8a2:	4650      	mov	r0, sl
 800f8a4:	f7f0 fd12 	bl	80002cc <__adddf3>
 800f8a8:	4b44      	ldr	r3, [pc, #272]	; (800f9bc <__kernel_tan+0x39c>)
 800f8aa:	429f      	cmp	r7, r3
 800f8ac:	4604      	mov	r4, r0
 800f8ae:	460d      	mov	r5, r1
 800f8b0:	f340 8086 	ble.w	800f9c0 <__kernel_tan+0x3a0>
 800f8b4:	4630      	mov	r0, r6
 800f8b6:	f7f0 fe55 	bl	8000564 <__aeabi_i2d>
 800f8ba:	4622      	mov	r2, r4
 800f8bc:	4680      	mov	r8, r0
 800f8be:	4689      	mov	r9, r1
 800f8c0:	462b      	mov	r3, r5
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	4629      	mov	r1, r5
 800f8c6:	f7f0 feb7 	bl	8000638 <__aeabi_dmul>
 800f8ca:	4642      	mov	r2, r8
 800f8cc:	4606      	mov	r6, r0
 800f8ce:	460f      	mov	r7, r1
 800f8d0:	464b      	mov	r3, r9
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	4629      	mov	r1, r5
 800f8d6:	f7f0 fcf9 	bl	80002cc <__adddf3>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	460b      	mov	r3, r1
 800f8de:	4630      	mov	r0, r6
 800f8e0:	4639      	mov	r1, r7
 800f8e2:	f7f0 ffd3 	bl	800088c <__aeabi_ddiv>
 800f8e6:	ec53 2b18 	vmov	r2, r3, d8
 800f8ea:	f7f0 fced 	bl	80002c8 <__aeabi_dsub>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	4650      	mov	r0, sl
 800f8f4:	4659      	mov	r1, fp
 800f8f6:	f7f0 fce7 	bl	80002c8 <__aeabi_dsub>
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	f7f0 fce5 	bl	80002cc <__adddf3>
 800f902:	4602      	mov	r2, r0
 800f904:	460b      	mov	r3, r1
 800f906:	4640      	mov	r0, r8
 800f908:	4649      	mov	r1, r9
 800f90a:	f7f0 fcdd 	bl	80002c8 <__aeabi_dsub>
 800f90e:	9b00      	ldr	r3, [sp, #0]
 800f910:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800f914:	f00a 0a02 	and.w	sl, sl, #2
 800f918:	4604      	mov	r4, r0
 800f91a:	f1ca 0001 	rsb	r0, sl, #1
 800f91e:	460d      	mov	r5, r1
 800f920:	f7f0 fe20 	bl	8000564 <__aeabi_i2d>
 800f924:	4602      	mov	r2, r0
 800f926:	460b      	mov	r3, r1
 800f928:	4620      	mov	r0, r4
 800f92a:	4629      	mov	r1, r5
 800f92c:	f7f0 fe84 	bl	8000638 <__aeabi_dmul>
 800f930:	e69f      	b.n	800f672 <__kernel_tan+0x52>
 800f932:	bf00      	nop
 800f934:	f3af 8000 	nop.w
 800f938:	54442d18 	.word	0x54442d18
 800f93c:	3fe921fb 	.word	0x3fe921fb
 800f940:	33145c07 	.word	0x33145c07
 800f944:	3c81a626 	.word	0x3c81a626
 800f948:	74bf7ad4 	.word	0x74bf7ad4
 800f94c:	3efb2a70 	.word	0x3efb2a70
 800f950:	32f0a7e9 	.word	0x32f0a7e9
 800f954:	3f12b80f 	.word	0x3f12b80f
 800f958:	1a8d1068 	.word	0x1a8d1068
 800f95c:	3f3026f7 	.word	0x3f3026f7
 800f960:	fee08315 	.word	0xfee08315
 800f964:	3f57dbc8 	.word	0x3f57dbc8
 800f968:	e96e8493 	.word	0xe96e8493
 800f96c:	3f8226e3 	.word	0x3f8226e3
 800f970:	1bb341fe 	.word	0x1bb341fe
 800f974:	3faba1ba 	.word	0x3faba1ba
 800f978:	db605373 	.word	0xdb605373
 800f97c:	bef375cb 	.word	0xbef375cb
 800f980:	a03792a6 	.word	0xa03792a6
 800f984:	3f147e88 	.word	0x3f147e88
 800f988:	f2f26501 	.word	0xf2f26501
 800f98c:	3f4344d8 	.word	0x3f4344d8
 800f990:	c9560328 	.word	0xc9560328
 800f994:	3f6d6d22 	.word	0x3f6d6d22
 800f998:	8406d637 	.word	0x8406d637
 800f99c:	3f9664f4 	.word	0x3f9664f4
 800f9a0:	1110fe7a 	.word	0x1110fe7a
 800f9a4:	3fc11111 	.word	0x3fc11111
 800f9a8:	55555563 	.word	0x55555563
 800f9ac:	3fd55555 	.word	0x3fd55555
 800f9b0:	3e2fffff 	.word	0x3e2fffff
 800f9b4:	3ff00000 	.word	0x3ff00000
 800f9b8:	bff00000 	.word	0xbff00000
 800f9bc:	3fe59427 	.word	0x3fe59427
 800f9c0:	2e01      	cmp	r6, #1
 800f9c2:	d02f      	beq.n	800fa24 <__kernel_tan+0x404>
 800f9c4:	460f      	mov	r7, r1
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	460b      	mov	r3, r1
 800f9ca:	4689      	mov	r9, r1
 800f9cc:	2000      	movs	r0, #0
 800f9ce:	4917      	ldr	r1, [pc, #92]	; (800fa2c <__kernel_tan+0x40c>)
 800f9d0:	f7f0 ff5c 	bl	800088c <__aeabi_ddiv>
 800f9d4:	2600      	movs	r6, #0
 800f9d6:	e9cd 0100 	strd	r0, r1, [sp]
 800f9da:	4652      	mov	r2, sl
 800f9dc:	465b      	mov	r3, fp
 800f9de:	4630      	mov	r0, r6
 800f9e0:	4639      	mov	r1, r7
 800f9e2:	f7f0 fc71 	bl	80002c8 <__aeabi_dsub>
 800f9e6:	e9dd 4500 	ldrd	r4, r5, [sp]
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	ec51 0b18 	vmov	r0, r1, d8
 800f9f2:	f7f0 fc69 	bl	80002c8 <__aeabi_dsub>
 800f9f6:	4632      	mov	r2, r6
 800f9f8:	462b      	mov	r3, r5
 800f9fa:	f7f0 fe1d 	bl	8000638 <__aeabi_dmul>
 800f9fe:	46b0      	mov	r8, r6
 800fa00:	460f      	mov	r7, r1
 800fa02:	4642      	mov	r2, r8
 800fa04:	462b      	mov	r3, r5
 800fa06:	4634      	mov	r4, r6
 800fa08:	4649      	mov	r1, r9
 800fa0a:	4606      	mov	r6, r0
 800fa0c:	4640      	mov	r0, r8
 800fa0e:	f7f0 fe13 	bl	8000638 <__aeabi_dmul>
 800fa12:	4b07      	ldr	r3, [pc, #28]	; (800fa30 <__kernel_tan+0x410>)
 800fa14:	2200      	movs	r2, #0
 800fa16:	f7f0 fc59 	bl	80002cc <__adddf3>
 800fa1a:	4602      	mov	r2, r0
 800fa1c:	460b      	mov	r3, r1
 800fa1e:	4630      	mov	r0, r6
 800fa20:	4639      	mov	r1, r7
 800fa22:	e665      	b.n	800f6f0 <__kernel_tan+0xd0>
 800fa24:	4682      	mov	sl, r0
 800fa26:	468b      	mov	fp, r1
 800fa28:	e625      	b.n	800f676 <__kernel_tan+0x56>
 800fa2a:	bf00      	nop
 800fa2c:	bff00000 	.word	0xbff00000
 800fa30:	3ff00000 	.word	0x3ff00000
 800fa34:	00000000 	.word	0x00000000

0800fa38 <floor>:
 800fa38:	ec51 0b10 	vmov	r0, r1, d0
 800fa3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800fa44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800fa48:	2e13      	cmp	r6, #19
 800fa4a:	ee10 5a10 	vmov	r5, s0
 800fa4e:	ee10 8a10 	vmov	r8, s0
 800fa52:	460c      	mov	r4, r1
 800fa54:	dc32      	bgt.n	800fabc <floor+0x84>
 800fa56:	2e00      	cmp	r6, #0
 800fa58:	da14      	bge.n	800fa84 <floor+0x4c>
 800fa5a:	a333      	add	r3, pc, #204	; (adr r3, 800fb28 <floor+0xf0>)
 800fa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa60:	f7f0 fc34 	bl	80002cc <__adddf3>
 800fa64:	2200      	movs	r2, #0
 800fa66:	2300      	movs	r3, #0
 800fa68:	f7f1 f876 	bl	8000b58 <__aeabi_dcmpgt>
 800fa6c:	b138      	cbz	r0, 800fa7e <floor+0x46>
 800fa6e:	2c00      	cmp	r4, #0
 800fa70:	da57      	bge.n	800fb22 <floor+0xea>
 800fa72:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fa76:	431d      	orrs	r5, r3
 800fa78:	d001      	beq.n	800fa7e <floor+0x46>
 800fa7a:	4c2d      	ldr	r4, [pc, #180]	; (800fb30 <floor+0xf8>)
 800fa7c:	2500      	movs	r5, #0
 800fa7e:	4621      	mov	r1, r4
 800fa80:	4628      	mov	r0, r5
 800fa82:	e025      	b.n	800fad0 <floor+0x98>
 800fa84:	4f2b      	ldr	r7, [pc, #172]	; (800fb34 <floor+0xfc>)
 800fa86:	4137      	asrs	r7, r6
 800fa88:	ea01 0307 	and.w	r3, r1, r7
 800fa8c:	4303      	orrs	r3, r0
 800fa8e:	d01f      	beq.n	800fad0 <floor+0x98>
 800fa90:	a325      	add	r3, pc, #148	; (adr r3, 800fb28 <floor+0xf0>)
 800fa92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa96:	f7f0 fc19 	bl	80002cc <__adddf3>
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	f7f1 f85b 	bl	8000b58 <__aeabi_dcmpgt>
 800faa2:	2800      	cmp	r0, #0
 800faa4:	d0eb      	beq.n	800fa7e <floor+0x46>
 800faa6:	2c00      	cmp	r4, #0
 800faa8:	bfbe      	ittt	lt
 800faaa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800faae:	fa43 f606 	asrlt.w	r6, r3, r6
 800fab2:	19a4      	addlt	r4, r4, r6
 800fab4:	ea24 0407 	bic.w	r4, r4, r7
 800fab8:	2500      	movs	r5, #0
 800faba:	e7e0      	b.n	800fa7e <floor+0x46>
 800fabc:	2e33      	cmp	r6, #51	; 0x33
 800fabe:	dd0b      	ble.n	800fad8 <floor+0xa0>
 800fac0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fac4:	d104      	bne.n	800fad0 <floor+0x98>
 800fac6:	ee10 2a10 	vmov	r2, s0
 800faca:	460b      	mov	r3, r1
 800facc:	f7f0 fbfe 	bl	80002cc <__adddf3>
 800fad0:	ec41 0b10 	vmov	d0, r0, r1
 800fad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fad8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800fadc:	f04f 33ff 	mov.w	r3, #4294967295
 800fae0:	fa23 f707 	lsr.w	r7, r3, r7
 800fae4:	4207      	tst	r7, r0
 800fae6:	d0f3      	beq.n	800fad0 <floor+0x98>
 800fae8:	a30f      	add	r3, pc, #60	; (adr r3, 800fb28 <floor+0xf0>)
 800faea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faee:	f7f0 fbed 	bl	80002cc <__adddf3>
 800faf2:	2200      	movs	r2, #0
 800faf4:	2300      	movs	r3, #0
 800faf6:	f7f1 f82f 	bl	8000b58 <__aeabi_dcmpgt>
 800fafa:	2800      	cmp	r0, #0
 800fafc:	d0bf      	beq.n	800fa7e <floor+0x46>
 800fafe:	2c00      	cmp	r4, #0
 800fb00:	da02      	bge.n	800fb08 <floor+0xd0>
 800fb02:	2e14      	cmp	r6, #20
 800fb04:	d103      	bne.n	800fb0e <floor+0xd6>
 800fb06:	3401      	adds	r4, #1
 800fb08:	ea25 0507 	bic.w	r5, r5, r7
 800fb0c:	e7b7      	b.n	800fa7e <floor+0x46>
 800fb0e:	2301      	movs	r3, #1
 800fb10:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fb14:	fa03 f606 	lsl.w	r6, r3, r6
 800fb18:	4435      	add	r5, r6
 800fb1a:	4545      	cmp	r5, r8
 800fb1c:	bf38      	it	cc
 800fb1e:	18e4      	addcc	r4, r4, r3
 800fb20:	e7f2      	b.n	800fb08 <floor+0xd0>
 800fb22:	2500      	movs	r5, #0
 800fb24:	462c      	mov	r4, r5
 800fb26:	e7aa      	b.n	800fa7e <floor+0x46>
 800fb28:	8800759c 	.word	0x8800759c
 800fb2c:	7e37e43c 	.word	0x7e37e43c
 800fb30:	bff00000 	.word	0xbff00000
 800fb34:	000fffff 	.word	0x000fffff

0800fb38 <scalbn>:
 800fb38:	b570      	push	{r4, r5, r6, lr}
 800fb3a:	ec55 4b10 	vmov	r4, r5, d0
 800fb3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fb42:	4606      	mov	r6, r0
 800fb44:	462b      	mov	r3, r5
 800fb46:	b99a      	cbnz	r2, 800fb70 <scalbn+0x38>
 800fb48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fb4c:	4323      	orrs	r3, r4
 800fb4e:	d036      	beq.n	800fbbe <scalbn+0x86>
 800fb50:	4b39      	ldr	r3, [pc, #228]	; (800fc38 <scalbn+0x100>)
 800fb52:	4629      	mov	r1, r5
 800fb54:	ee10 0a10 	vmov	r0, s0
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f7f0 fd6d 	bl	8000638 <__aeabi_dmul>
 800fb5e:	4b37      	ldr	r3, [pc, #220]	; (800fc3c <scalbn+0x104>)
 800fb60:	429e      	cmp	r6, r3
 800fb62:	4604      	mov	r4, r0
 800fb64:	460d      	mov	r5, r1
 800fb66:	da10      	bge.n	800fb8a <scalbn+0x52>
 800fb68:	a32b      	add	r3, pc, #172	; (adr r3, 800fc18 <scalbn+0xe0>)
 800fb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6e:	e03a      	b.n	800fbe6 <scalbn+0xae>
 800fb70:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fb74:	428a      	cmp	r2, r1
 800fb76:	d10c      	bne.n	800fb92 <scalbn+0x5a>
 800fb78:	ee10 2a10 	vmov	r2, s0
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	4629      	mov	r1, r5
 800fb80:	f7f0 fba4 	bl	80002cc <__adddf3>
 800fb84:	4604      	mov	r4, r0
 800fb86:	460d      	mov	r5, r1
 800fb88:	e019      	b.n	800fbbe <scalbn+0x86>
 800fb8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fb8e:	460b      	mov	r3, r1
 800fb90:	3a36      	subs	r2, #54	; 0x36
 800fb92:	4432      	add	r2, r6
 800fb94:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fb98:	428a      	cmp	r2, r1
 800fb9a:	dd08      	ble.n	800fbae <scalbn+0x76>
 800fb9c:	2d00      	cmp	r5, #0
 800fb9e:	a120      	add	r1, pc, #128	; (adr r1, 800fc20 <scalbn+0xe8>)
 800fba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fba4:	da1c      	bge.n	800fbe0 <scalbn+0xa8>
 800fba6:	a120      	add	r1, pc, #128	; (adr r1, 800fc28 <scalbn+0xf0>)
 800fba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbac:	e018      	b.n	800fbe0 <scalbn+0xa8>
 800fbae:	2a00      	cmp	r2, #0
 800fbb0:	dd08      	ble.n	800fbc4 <scalbn+0x8c>
 800fbb2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fbb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fbba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fbbe:	ec45 4b10 	vmov	d0, r4, r5
 800fbc2:	bd70      	pop	{r4, r5, r6, pc}
 800fbc4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fbc8:	da19      	bge.n	800fbfe <scalbn+0xc6>
 800fbca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fbce:	429e      	cmp	r6, r3
 800fbd0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800fbd4:	dd0a      	ble.n	800fbec <scalbn+0xb4>
 800fbd6:	a112      	add	r1, pc, #72	; (adr r1, 800fc20 <scalbn+0xe8>)
 800fbd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d1e2      	bne.n	800fba6 <scalbn+0x6e>
 800fbe0:	a30f      	add	r3, pc, #60	; (adr r3, 800fc20 <scalbn+0xe8>)
 800fbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe6:	f7f0 fd27 	bl	8000638 <__aeabi_dmul>
 800fbea:	e7cb      	b.n	800fb84 <scalbn+0x4c>
 800fbec:	a10a      	add	r1, pc, #40	; (adr r1, 800fc18 <scalbn+0xe0>)
 800fbee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d0b8      	beq.n	800fb68 <scalbn+0x30>
 800fbf6:	a10e      	add	r1, pc, #56	; (adr r1, 800fc30 <scalbn+0xf8>)
 800fbf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbfc:	e7b4      	b.n	800fb68 <scalbn+0x30>
 800fbfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fc02:	3236      	adds	r2, #54	; 0x36
 800fc04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fc08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	4b0c      	ldr	r3, [pc, #48]	; (800fc40 <scalbn+0x108>)
 800fc10:	2200      	movs	r2, #0
 800fc12:	e7e8      	b.n	800fbe6 <scalbn+0xae>
 800fc14:	f3af 8000 	nop.w
 800fc18:	c2f8f359 	.word	0xc2f8f359
 800fc1c:	01a56e1f 	.word	0x01a56e1f
 800fc20:	8800759c 	.word	0x8800759c
 800fc24:	7e37e43c 	.word	0x7e37e43c
 800fc28:	8800759c 	.word	0x8800759c
 800fc2c:	fe37e43c 	.word	0xfe37e43c
 800fc30:	c2f8f359 	.word	0xc2f8f359
 800fc34:	81a56e1f 	.word	0x81a56e1f
 800fc38:	43500000 	.word	0x43500000
 800fc3c:	ffff3cb0 	.word	0xffff3cb0
 800fc40:	3c900000 	.word	0x3c900000

0800fc44 <_init>:
 800fc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc46:	bf00      	nop
 800fc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc4a:	bc08      	pop	{r3}
 800fc4c:	469e      	mov	lr, r3
 800fc4e:	4770      	bx	lr

0800fc50 <_fini>:
 800fc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc52:	bf00      	nop
 800fc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc56:	bc08      	pop	{r3}
 800fc58:	469e      	mov	lr, r3
 800fc5a:	4770      	bx	lr
