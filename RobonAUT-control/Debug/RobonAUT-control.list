
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eddc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800efb0  0800efb0  0001efb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f660  0800f660  00020230  2**0
                  CONTENTS
  4 .ARM          00000008  0800f660  0800f660  0001f660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f668  0800f668  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f668  0800f668  0001f668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f66c  0800f66c  0001f66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800f670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  20000230  0800f8a0  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009a8  0800f8a0  000209a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c4d  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037c1  00000000  00000000  00037ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0003b670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  0003c8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002625c  00000000  00000000  0003da08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018872  00000000  00000000  00063c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1204  00000000  00000000  0007c4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d6da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ff4  00000000  00000000  0015d72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000230 	.word	0x20000230
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ef94 	.word	0x0800ef94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000234 	.word	0x20000234
 800020c:	0800ef94 	.word	0x0800ef94

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <__NVIC_EnableIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db12      	blt.n	8001000 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	490a      	ldr	r1, [pc, #40]	; (800100c <__NVIC_DisableIRQ+0x44>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	3320      	adds	r3, #32
 8000ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff4:	f3bf 8f4f 	dsb	sy
}
 8000ff8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ffa:	f3bf 8f6f 	isb	sy
}
 8000ffe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0c      	blt.n	800103c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	; (8001048 <__NVIC_ClearPendingIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	3360      	adds	r3, #96	; 0x60
 8001038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001050:	f3bf 8f4f 	dsb	sy
}
 8001054:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <__NVIC_SystemReset+0x24>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800105e:	4904      	ldr	r1, [pc, #16]	; (8001070 <__NVIC_SystemReset+0x24>)
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <__NVIC_SystemReset+0x28>)
 8001062:	4313      	orrs	r3, r2
 8001064:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001066:	f3bf 8f4f 	dsb	sy
}
 800106a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <__NVIC_SystemReset+0x20>
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	05fa0004 	.word	0x05fa0004

08001078 <F4_Basic_Init>:
volatile uint8_t fromPC[1];
uint8_t mode;
float v_ref; //mm/s

void F4_Basic_Init(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_scheduler,TIM_HandleTypeDef *htim_motor,TIM_HandleTypeDef *htim_servo1,TIM_HandleTypeDef *htim_servo2, TIM_HandleTypeDef *htim_encoder)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	; 0x38
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
	char buf[40];
	LED_R(0);
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108c:	4842      	ldr	r0, [pc, #264]	; (8001198 <F4_Basic_Init+0x120>)
 800108e:	f005 ff8f 	bl	8006fb0 <HAL_GPIO_WritePin>
	LED_B(0);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001098:	483f      	ldr	r0, [pc, #252]	; (8001198 <F4_Basic_Init+0x120>)
 800109a:	f005 ff89 	bl	8006fb0 <HAL_GPIO_WritePin>
	LED_G(0);
 800109e:	2201      	movs	r2, #1
 80010a0:	2102      	movs	r1, #2
 80010a2:	483d      	ldr	r0, [pc, #244]	; (8001198 <F4_Basic_Init+0x120>)
 80010a4:	f005 ff84 	bl	8006fb0 <HAL_GPIO_WritePin>
	LED_Y(0);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ae:	483a      	ldr	r0, [pc, #232]	; (8001198 <F4_Basic_Init+0x120>)
 80010b0:	f005 ff7e 	bl	8006fb0 <HAL_GPIO_WritePin>
	LED_NUCLEO(0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2120      	movs	r1, #32
 80010b8:	4838      	ldr	r0, [pc, #224]	; (800119c <F4_Basic_Init+0x124>)
 80010ba:	f005 ff79 	bl	8006fb0 <HAL_GPIO_WritePin>
	sprintf(buf,"\r\nRobonAUT 2023 Bit Bangers F4\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4937      	ldr	r1, [pc, #220]	; (80011a0 <F4_Basic_Init+0x128>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f00a fa9f 	bl	800b608 <siprintf>
	HAL_UART_Transmit(huart_debugg,(uint8_t*) buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f89e 	bl	8000210 <strlen>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	f107 0110 	add.w	r1, r7, #16
 80010dc:	2364      	movs	r3, #100	; 0x64
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f008 fd29 	bl	8009b36 <HAL_UART_Transmit>

	//MotorEnable engedélyezése
	motorEnRemote=0;//csak akkor ha megnyomtuk a ravaszt
 80010e4:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <F4_Basic_Init+0x12c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
	motorEnLineOk=1;
 80010ea:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <F4_Basic_Init+0x130>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]

	NVIC_ClearPendingIRQ(On_Board_Button_EXTI_IRQn);
 80010f0:	2028      	movs	r0, #40	; 0x28
 80010f2:	f7ff ff8d 	bl	8001010 <__NVIC_ClearPendingIRQ>
	swState[0] = swState[1] = 0;
 80010f6:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <F4_Basic_Init+0x134>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	705a      	strb	r2, [r3, #1]
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <F4_Basic_Init+0x134>)
 80010fe:	785a      	ldrb	r2, [r3, #1]
 8001100:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <F4_Basic_Init+0x134>)
 8001102:	701a      	strb	r2, [r3, #0]
	bFlag[0] = bFlag[1] = bFlag[2] = 0;
 8001104:	2200      	movs	r2, #0
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <F4_Basic_Init+0x138>)
 8001108:	4611      	mov	r1, r2
 800110a:	7099      	strb	r1, [r3, #2]
 800110c:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <F4_Basic_Init+0x138>)
 800110e:	4611      	mov	r1, r2
 8001110:	7059      	strb	r1, [r3, #1]
 8001112:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <F4_Basic_Init+0x138>)
 8001114:	701a      	strb	r2, [r3, #0]
	fromPC[1]=150;
 8001116:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <F4_Basic_Init+0x13c>)
 8001118:	2296      	movs	r2, #150	; 0x96
 800111a:	705a      	strb	r2, [r3, #1]
	mode=SKILL;
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <F4_Basic_Init+0x140>)
 800111e:	2252      	movs	r2, #82	; 0x52
 8001120:	701a      	strb	r2, [r3, #0]
	v_ref = 500;
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <F4_Basic_Init+0x144>)
 8001124:	4a26      	ldr	r2, [pc, #152]	; (80011c0 <F4_Basic_Init+0x148>)
 8001126:	601a      	str	r2, [r3, #0]
	v=0;
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <F4_Basic_Init+0x14c>)
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	601a      	str	r2, [r3, #0]

	//timerek elindítása
	TIM1->CCR4=680;
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <F4_Basic_Init+0x150>)
 8001132:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8001136:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR1=684;
 8001138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113c:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
	//TIM2->CCR1=684; //servot középre
	TIM3->CCR1=499; //0 kitöltési tényező a motorra
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <F4_Basic_Init+0x154>)
 8001144:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001148:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=499;
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <F4_Basic_Init+0x154>)
 800114c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001150:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start(htim_scheduler);//heart beat timer tick start
 8001152:	68b8      	ldr	r0, [r7, #8]
 8001154:	f006 fe00 	bl	8007d58 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_1);//motor PWM-ek elindítása
 8001158:	2100      	movs	r1, #0
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f006 febe 	bl	8007edc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_2);
 8001160:	2104      	movs	r1, #4
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f006 feba 	bl	8007edc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo1, TIM_CHANNEL_1); //servo RC pwm elindítása
 8001168:	2100      	movs	r1, #0
 800116a:	6838      	ldr	r0, [r7, #0]
 800116c:	f006 feb6 	bl	8007edc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo2, TIM_CHANNEL_4); //servo RC pwm elindítása
 8001170:	210c      	movs	r1, #12
 8001172:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001174:	f006 feb2 	bl	8007edc <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(htim_encoder,TIM_CHANNEL_ALL);
 8001178:	213c      	movs	r1, #60	; 0x3c
 800117a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800117c:	f007 fa90 	bl	80086a0 <HAL_TIM_Encoder_Start>

	//Ha a PC-ről küldünk vmit azt fogadjuk
	HAL_UART_Receive_IT(huart_debugg, fromPC, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	490c      	ldr	r1, [pc, #48]	; (80011b4 <F4_Basic_Init+0x13c>)
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f008 fe0a 	bl	8009d9e <HAL_UART_Receive_IT>
	NVIC_DisableIRQ(B1_EXTI_IRQn);
 800118a:	200a      	movs	r0, #10
 800118c:	f7ff ff1c 	bl	8000fc8 <__NVIC_DisableIRQ>
}
 8001190:	bf00      	nop
 8001192:	3738      	adds	r7, #56	; 0x38
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40020400 	.word	0x40020400
 800119c:	40020000 	.word	0x40020000
 80011a0:	0800efb0 	.word	0x0800efb0
 80011a4:	2000095c 	.word	0x2000095c
 80011a8:	2000095d 	.word	0x2000095d
 80011ac:	2000024c 	.word	0x2000024c
 80011b0:	20000250 	.word	0x20000250
 80011b4:	20000254 	.word	0x20000254
 80011b8:	20000255 	.word	0x20000255
 80011bc:	20000258 	.word	0x20000258
 80011c0:	43fa0000 	.word	0x43fa0000
 80011c4:	20000550 	.word	0x20000550
 80011c8:	40010000 	.word	0x40010000
 80011cc:	40000400 	.word	0x40000400

080011d0 <HDI_Read_Task>:


void HDI_Read_Task(TIM_HandleTypeDef *htim_servo,uint32_t tick, uint32_t period)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
	static uint32_t hdi_read_task_tick=0;
	static uint8_t b1_state=0;

	if(hdi_read_task_tick>tick) return;
 80011dc:	4b50      	ldr	r3, [pc, #320]	; (8001320 <HDI_Read_Task+0x150>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	f0c0 8097 	bcc.w	8001316 <HDI_Read_Task+0x146>
	hdi_read_task_tick = tick + period;
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a4c      	ldr	r2, [pc, #304]	; (8001320 <HDI_Read_Task+0x150>)
 80011f0:	6013      	str	r3, [r2, #0]

	swState[0]=SW1;
 80011f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f6:	484b      	ldr	r0, [pc, #300]	; (8001324 <HDI_Read_Task+0x154>)
 80011f8:	f005 fec2 	bl	8006f80 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b49      	ldr	r3, [pc, #292]	; (8001328 <HDI_Read_Task+0x158>)
 8001202:	701a      	strb	r2, [r3, #0]
	swState[1]=SW2;
 8001204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001208:	4848      	ldr	r0, [pc, #288]	; (800132c <HDI_Read_Task+0x15c>)
 800120a:	f005 feb9 	bl	8006f80 <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b45      	ldr	r3, [pc, #276]	; (8001328 <HDI_Read_Task+0x158>)
 8001214:	705a      	strb	r2, [r3, #1]

	if(swState[0] && mode==FAST) LED_G(1);
 8001216:	4b44      	ldr	r3, [pc, #272]	; (8001328 <HDI_Read_Task+0x158>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d008      	beq.n	8001230 <HDI_Read_Task+0x60>
 800121e:	4b44      	ldr	r3, [pc, #272]	; (8001330 <HDI_Read_Task+0x160>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b3f      	cmp	r3, #63	; 0x3f
 8001224:	d104      	bne.n	8001230 <HDI_Read_Task+0x60>
 8001226:	2200      	movs	r2, #0
 8001228:	2102      	movs	r1, #2
 800122a:	4840      	ldr	r0, [pc, #256]	; (800132c <HDI_Read_Task+0x15c>)
 800122c:	f005 fec0 	bl	8006fb0 <HAL_GPIO_WritePin>
	if(!swState[0] && mode==FAST) LED_G(0);
 8001230:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <HDI_Read_Task+0x158>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d108      	bne.n	800124a <HDI_Read_Task+0x7a>
 8001238:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <HDI_Read_Task+0x160>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b3f      	cmp	r3, #63	; 0x3f
 800123e:	d104      	bne.n	800124a <HDI_Read_Task+0x7a>
 8001240:	2201      	movs	r2, #1
 8001242:	2102      	movs	r1, #2
 8001244:	4839      	ldr	r0, [pc, #228]	; (800132c <HDI_Read_Task+0x15c>)
 8001246:	f005 feb3 	bl	8006fb0 <HAL_GPIO_WritePin>
	/*if(swState[1]) LED_B(1);
	else LED_B(0);*/

	if(bFlag[0])
 800124a:	4b3a      	ldr	r3, [pc, #232]	; (8001334 <HDI_Read_Task+0x164>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d031      	beq.n	80012b8 <HDI_Read_Task+0xe8>
	{
		bFlag[0]=0;
 8001254:	4b37      	ldr	r3, [pc, #220]	; (8001334 <HDI_Read_Task+0x164>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
		//Milyen módban voltunk eddig?
		HAL_FLASH_Unlock();
 800125a:	f005 fb43 	bl	80068e4 <HAL_FLASH_Unlock>
		mode= *(__IO uint32_t *) FLASH_ADDRESS_SECTOR7;
 800125e:	4b36      	ldr	r3, [pc, #216]	; (8001338 <HDI_Read_Task+0x168>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b32      	ldr	r3, [pc, #200]	; (8001330 <HDI_Read_Task+0x160>)
 8001266:	701a      	strb	r2, [r3, #0]
		HAL_FLASH_Lock();
 8001268:	f005 fb5e 	bl	8006928 <HAL_FLASH_Lock>

		//section 7 törlése, hogy újraírhassuk a módot jelző bytot
		HAL_FLASH_Unlock();
 800126c:	f005 fb3a 	bl	80068e4 <HAL_FLASH_Unlock>
		FLASH_Erase_Sector(7, FLASH_VOLTAGE_RANGE_3);
 8001270:	2102      	movs	r1, #2
 8001272:	2007      	movs	r0, #7
 8001274:	f005 fca8 	bl	8006bc8 <FLASH_Erase_Sector>
		HAL_FLASH_Lock();
 8001278:	f005 fb56 	bl	8006928 <HAL_FLASH_Lock>
		HAL_Delay(200);
 800127c:	20c8      	movs	r0, #200	; 0xc8
 800127e:	f003 fffd 	bl	800527c <HAL_Delay>

		//Állítsuk át a módot
		HAL_FLASH_Unlock();
 8001282:	f005 fb2f 	bl	80068e4 <HAL_FLASH_Unlock>
		if(mode==SKILL) HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_SECTOR7, FAST);
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <HDI_Read_Task+0x160>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b52      	cmp	r3, #82	; 0x52
 800128c:	d108      	bne.n	80012a0 <HDI_Read_Task+0xd0>
 800128e:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	4928      	ldr	r1, [pc, #160]	; (8001338 <HDI_Read_Task+0x168>)
 8001298:	2000      	movs	r0, #0
 800129a:	f005 facf 	bl	800683c <HAL_FLASH_Program>
 800129e:	e007      	b.n	80012b0 <HDI_Read_Task+0xe0>
		else HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_SECTOR7, SKILL);
 80012a0:	f04f 0252 	mov.w	r2, #82	; 0x52
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	4923      	ldr	r1, [pc, #140]	; (8001338 <HDI_Read_Task+0x168>)
 80012aa:	2000      	movs	r0, #0
 80012ac:	f005 fac6 	bl	800683c <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80012b0:	f005 fb3a 	bl	8006928 <HAL_FLASH_Lock>

		NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 80012b4:	f7ff feca 	bl	800104c <__NVIC_SystemReset>
	}

	if(bFlag[1])
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <HDI_Read_Task+0x164>)
 80012ba:	785b      	ldrb	r3, [r3, #1]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d02a      	beq.n	8001318 <HDI_Read_Task+0x148>
	{
		if(b1_state)HAL_TIM_PWM_Start(htim_servo, TIM_CHANNEL_1);
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <HDI_Read_Task+0x16c>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <HDI_Read_Task+0x104>
 80012ca:	2100      	movs	r1, #0
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f006 fe05 	bl	8007edc <HAL_TIM_PWM_Start>
 80012d2:	e003      	b.n	80012dc <HDI_Read_Task+0x10c>
		else HAL_TIM_PWM_Stop(htim_servo, TIM_CHANNEL_1);
 80012d4:	2100      	movs	r1, #0
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f006 fec8 	bl	800806c <HAL_TIM_PWM_Stop>
		LED_Y_TOGGLE;
 80012dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e0:	4812      	ldr	r0, [pc, #72]	; (800132c <HDI_Read_Task+0x15c>)
 80012e2:	f005 fe7e 	bl	8006fe2 <HAL_GPIO_TogglePin>
		b1_state = !b1_state;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HDI_Read_Task+0x16c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf0c      	ite	eq
 80012ee:	2301      	moveq	r3, #1
 80012f0:	2300      	movne	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HDI_Read_Task+0x16c>)
 80012f8:	701a      	strb	r2, [r3, #0]
		bFlag[1]=0;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HDI_Read_Task+0x164>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	705a      	strb	r2, [r3, #1]
		HAL_Delay(800);
 8001300:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001304:	f003 ffba 	bl	800527c <HAL_Delay>
		NVIC_ClearPendingIRQ(B1_EXTI_IRQn);
 8001308:	200a      	movs	r0, #10
 800130a:	f7ff fe81 	bl	8001010 <__NVIC_ClearPendingIRQ>
		NVIC_EnableIRQ(B1_EXTI_IRQn);
 800130e:	200a      	movs	r0, #10
 8001310:	f7ff fe3c 	bl	8000f8c <__NVIC_EnableIRQ>
 8001314:	e000      	b.n	8001318 <HDI_Read_Task+0x148>
	if(hdi_read_task_tick>tick) return;
 8001316:	bf00      	nop
	}

}
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000025c 	.word	0x2000025c
 8001324:	40020000 	.word	0x40020000
 8001328:	2000024c 	.word	0x2000024c
 800132c:	40020400 	.word	0x40020400
 8001330:	20000255 	.word	0x20000255
 8001334:	20000250 	.word	0x20000250
 8001338:	08060000 	.word	0x08060000
 800133c:	20000260 	.word	0x20000260

08001340 <Uart_Receive_From_PC_ISR>:

void Uart_Receive_From_PC_ISR(UART_HandleTypeDef *huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	LED_Y_TOGGLE;
 8001348:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800134c:	4808      	ldr	r0, [pc, #32]	; (8001370 <Uart_Receive_From_PC_ISR+0x30>)
 800134e:	f005 fe48 	bl	8006fe2 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(huart, (uint8_t*)fromPC, 1);
 8001352:	2201      	movs	r2, #1
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <Uart_Receive_From_PC_ISR+0x34>)
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f008 fd21 	bl	8009d9e <HAL_UART_Receive_IT>
	TIM1->CCR4 = 4*fromPC[0];
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <Uart_Receive_From_PC_ISR+0x34>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	009a      	lsls	r2, r3, #2
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <Uart_Receive_From_PC_ISR+0x38>)
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40020400 	.word	0x40020400
 8001374:	20000254 	.word	0x20000254
 8001378:	40010000 	.word	0x40010000

0800137c <Create_Nodes>:
volatile uint8_t uartThunder[6];
volatile uint8_t thunderboardFlag=0;
node N[24];

void Create_Nodes(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
	int i;
	orientation=FORWARD;
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <Create_Nodes+0x18>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
	nodeDetected=1;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <Create_Nodes+0x1c>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]

	for(i=0;i<24;i++)
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	e09f      	b.n	80014d4 <Create_Nodes+0x158>
 8001394:	20000261 	.word	0x20000261
 8001398:	20000262 	.word	0x20000262
	{
		N[i].id=65+i;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	3341      	adds	r3, #65	; 0x41
 80013a2:	b2d8      	uxtb	r0, r3
 80013a4:	49c1      	ldr	r1, [pc, #772]	; (80016ac <Create_Nodes+0x330>)
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	4602      	mov	r2, r0
 80013b4:	701a      	strb	r2, [r3, #0]
		N[i].worth=0;
 80013b6:	49bd      	ldr	r1, [pc, #756]	; (80016ac <Create_Nodes+0x330>)
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	1a9b      	subs	r3, r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	3304      	adds	r3, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
		N[i].type=0;
 80013ca:	49b8      	ldr	r1, [pc, #736]	; (80016ac <Create_Nodes+0x330>)
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	1a9b      	subs	r3, r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	440b      	add	r3, r1
 80013d8:	3308      	adds	r3, #8
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
		VALUE(N[i].neighbours,0,0,0,0);
 80013de:	49b3      	ldr	r1, [pc, #716]	; (80016ac <Create_Nodes+0x330>)
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	1a9b      	subs	r3, r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	330c      	adds	r3, #12
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	49ae      	ldr	r1, [pc, #696]	; (80016ac <Create_Nodes+0x330>)
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	1a9b      	subs	r3, r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	330d      	adds	r3, #13
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	49a9      	ldr	r1, [pc, #676]	; (80016ac <Create_Nodes+0x330>)
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	440b      	add	r3, r1
 8001414:	330e      	adds	r3, #14
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
 800141a:	49a4      	ldr	r1, [pc, #656]	; (80016ac <Create_Nodes+0x330>)
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	330f      	adds	r3, #15
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
		VALUE(N[i].directions,0,0,0,0);
 800142e:	499f      	ldr	r1, [pc, #636]	; (80016ac <Create_Nodes+0x330>)
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	1a9b      	subs	r3, r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	3310      	adds	r3, #16
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	499a      	ldr	r1, [pc, #616]	; (80016ac <Create_Nodes+0x330>)
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	3311      	adds	r3, #17
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
 8001456:	4995      	ldr	r1, [pc, #596]	; (80016ac <Create_Nodes+0x330>)
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	1a9b      	subs	r3, r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3312      	adds	r3, #18
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	4990      	ldr	r1, [pc, #576]	; (80016ac <Create_Nodes+0x330>)
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	1a9b      	subs	r3, r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	3313      	adds	r3, #19
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
		VALUE(N[i].distance,0,0,0,0);
 800147e:	498b      	ldr	r1, [pc, #556]	; (80016ac <Create_Nodes+0x330>)
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	1a9b      	subs	r3, r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	3314      	adds	r3, #20
 800148e:	2200      	movs	r2, #0
 8001490:	801a      	strh	r2, [r3, #0]
 8001492:	4986      	ldr	r1, [pc, #536]	; (80016ac <Create_Nodes+0x330>)
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	3316      	adds	r3, #22
 80014a2:	2200      	movs	r2, #0
 80014a4:	801a      	strh	r2, [r3, #0]
 80014a6:	4981      	ldr	r1, [pc, #516]	; (80016ac <Create_Nodes+0x330>)
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	3318      	adds	r3, #24
 80014b6:	2200      	movs	r2, #0
 80014b8:	801a      	strh	r2, [r3, #0]
 80014ba:	497c      	ldr	r1, [pc, #496]	; (80016ac <Create_Nodes+0x330>)
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	1a9b      	subs	r3, r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	331a      	adds	r3, #26
 80014ca:	2200      	movs	r2, #0
 80014cc:	801a      	strh	r2, [r3, #0]
	for(i=0;i<24;i++)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3301      	adds	r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b17      	cmp	r3, #23
 80014d8:	f77f af60 	ble.w	800139c <Create_Nodes+0x20>
	}
	//A node
	N[ID('A')].worth=0;
 80014dc:	4b73      	ldr	r3, [pc, #460]	; (80016ac <Create_Nodes+0x330>)
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
	N[ID('A')].type=1;
 80014e2:	4b72      	ldr	r3, [pc, #456]	; (80016ac <Create_Nodes+0x330>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	609a      	str	r2, [r3, #8]
	VALUE(N[ID('A')].neighbours,0,0,0,'C');
 80014e8:	4b70      	ldr	r3, [pc, #448]	; (80016ac <Create_Nodes+0x330>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	731a      	strb	r2, [r3, #12]
 80014ee:	4b6f      	ldr	r3, [pc, #444]	; (80016ac <Create_Nodes+0x330>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	735a      	strb	r2, [r3, #13]
 80014f4:	4b6d      	ldr	r3, [pc, #436]	; (80016ac <Create_Nodes+0x330>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	739a      	strb	r2, [r3, #14]
 80014fa:	4b6c      	ldr	r3, [pc, #432]	; (80016ac <Create_Nodes+0x330>)
 80014fc:	2243      	movs	r2, #67	; 0x43
 80014fe:	73da      	strb	r2, [r3, #15]
	VALUE(N[ID('A')].directions,0,0,0,2);
 8001500:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <Create_Nodes+0x330>)
 8001502:	2200      	movs	r2, #0
 8001504:	741a      	strb	r2, [r3, #16]
 8001506:	4b69      	ldr	r3, [pc, #420]	; (80016ac <Create_Nodes+0x330>)
 8001508:	2200      	movs	r2, #0
 800150a:	745a      	strb	r2, [r3, #17]
 800150c:	4b67      	ldr	r3, [pc, #412]	; (80016ac <Create_Nodes+0x330>)
 800150e:	2200      	movs	r2, #0
 8001510:	749a      	strb	r2, [r3, #18]
 8001512:	4b66      	ldr	r3, [pc, #408]	; (80016ac <Create_Nodes+0x330>)
 8001514:	2202      	movs	r2, #2
 8001516:	74da      	strb	r2, [r3, #19]
	VALUE(N[ID('A')].distance,0,0,0,365);
 8001518:	4b64      	ldr	r3, [pc, #400]	; (80016ac <Create_Nodes+0x330>)
 800151a:	2200      	movs	r2, #0
 800151c:	829a      	strh	r2, [r3, #20]
 800151e:	4b63      	ldr	r3, [pc, #396]	; (80016ac <Create_Nodes+0x330>)
 8001520:	2200      	movs	r2, #0
 8001522:	82da      	strh	r2, [r3, #22]
 8001524:	4b61      	ldr	r3, [pc, #388]	; (80016ac <Create_Nodes+0x330>)
 8001526:	2200      	movs	r2, #0
 8001528:	831a      	strh	r2, [r3, #24]
 800152a:	4b60      	ldr	r3, [pc, #384]	; (80016ac <Create_Nodes+0x330>)
 800152c:	f240 126d 	movw	r2, #365	; 0x16d
 8001530:	835a      	strh	r2, [r3, #26]

	//B node
	N[ID('B')].worth=2;
 8001532:	4b5e      	ldr	r3, [pc, #376]	; (80016ac <Create_Nodes+0x330>)
 8001534:	2202      	movs	r2, #2
 8001536:	621a      	str	r2, [r3, #32]
	N[ID('B')].type=2;
 8001538:	4b5c      	ldr	r3, [pc, #368]	; (80016ac <Create_Nodes+0x330>)
 800153a:	2202      	movs	r2, #2
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
	VALUE(N[ID('B')].neighbours,'D',0,'C',0);
 800153e:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <Create_Nodes+0x330>)
 8001540:	2244      	movs	r2, #68	; 0x44
 8001542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001546:	4b59      	ldr	r3, [pc, #356]	; (80016ac <Create_Nodes+0x330>)
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800154e:	4b57      	ldr	r3, [pc, #348]	; (80016ac <Create_Nodes+0x330>)
 8001550:	2243      	movs	r2, #67	; 0x43
 8001552:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001556:	4b55      	ldr	r3, [pc, #340]	; (80016ac <Create_Nodes+0x330>)
 8001558:	2200      	movs	r2, #0
 800155a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	VALUE(N[ID('B')].directions,2,0,2,0);
 800155e:	4b53      	ldr	r3, [pc, #332]	; (80016ac <Create_Nodes+0x330>)
 8001560:	2202      	movs	r2, #2
 8001562:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001566:	4b51      	ldr	r3, [pc, #324]	; (80016ac <Create_Nodes+0x330>)
 8001568:	2200      	movs	r2, #0
 800156a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800156e:	4b4f      	ldr	r3, [pc, #316]	; (80016ac <Create_Nodes+0x330>)
 8001570:	2202      	movs	r2, #2
 8001572:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8001576:	4b4d      	ldr	r3, [pc, #308]	; (80016ac <Create_Nodes+0x330>)
 8001578:	2200      	movs	r2, #0
 800157a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	VALUE(N[ID('B')].distance,452,0,218,0);
 800157e:	4b4b      	ldr	r3, [pc, #300]	; (80016ac <Create_Nodes+0x330>)
 8001580:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8001584:	861a      	strh	r2, [r3, #48]	; 0x30
 8001586:	4b49      	ldr	r3, [pc, #292]	; (80016ac <Create_Nodes+0x330>)
 8001588:	2200      	movs	r2, #0
 800158a:	865a      	strh	r2, [r3, #50]	; 0x32
 800158c:	4b47      	ldr	r3, [pc, #284]	; (80016ac <Create_Nodes+0x330>)
 800158e:	22da      	movs	r2, #218	; 0xda
 8001590:	869a      	strh	r2, [r3, #52]	; 0x34
 8001592:	4b46      	ldr	r3, [pc, #280]	; (80016ac <Create_Nodes+0x330>)
 8001594:	2200      	movs	r2, #0
 8001596:	86da      	strh	r2, [r3, #54]	; 0x36

	//C node
	N[ID('C')].worth=1;
 8001598:	4b44      	ldr	r3, [pc, #272]	; (80016ac <Create_Nodes+0x330>)
 800159a:	2201      	movs	r2, #1
 800159c:	63da      	str	r2, [r3, #60]	; 0x3c
	N[ID('C')].type=3;
 800159e:	4b43      	ldr	r3, [pc, #268]	; (80016ac <Create_Nodes+0x330>)
 80015a0:	2203      	movs	r2, #3
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
	VALUE(N[ID('C')].neighbours,0,'B','E',0);
 80015a4:	4b41      	ldr	r3, [pc, #260]	; (80016ac <Create_Nodes+0x330>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015ac:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <Create_Nodes+0x330>)
 80015ae:	2242      	movs	r2, #66	; 0x42
 80015b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80015b4:	4b3d      	ldr	r3, [pc, #244]	; (80016ac <Create_Nodes+0x330>)
 80015b6:	2245      	movs	r2, #69	; 0x45
 80015b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80015bc:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <Create_Nodes+0x330>)
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	VALUE(N[ID('C')].directions,0,1,2,0);
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <Create_Nodes+0x330>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80015cc:	4b37      	ldr	r3, [pc, #220]	; (80016ac <Create_Nodes+0x330>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80015d4:	4b35      	ldr	r3, [pc, #212]	; (80016ac <Create_Nodes+0x330>)
 80015d6:	2202      	movs	r2, #2
 80015d8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80015dc:	4b33      	ldr	r3, [pc, #204]	; (80016ac <Create_Nodes+0x330>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	VALUE(N[ID('C')].distance,0,218,160,0);
 80015e4:	4b31      	ldr	r3, [pc, #196]	; (80016ac <Create_Nodes+0x330>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80015ec:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <Create_Nodes+0x330>)
 80015ee:	22da      	movs	r2, #218	; 0xda
 80015f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80015f4:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <Create_Nodes+0x330>)
 80015f6:	22a0      	movs	r2, #160	; 0xa0
 80015f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <Create_Nodes+0x330>)
 80015fe:	2200      	movs	r2, #0
 8001600:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	//D node
	N[ID('D')].worth=2;
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <Create_Nodes+0x330>)
 8001606:	2202      	movs	r2, #2
 8001608:	659a      	str	r2, [r3, #88]	; 0x58
	N[ID('D')].type=1;
 800160a:	4b28      	ldr	r3, [pc, #160]	; (80016ac <Create_Nodes+0x330>)
 800160c:	2201      	movs	r2, #1
 800160e:	65da      	str	r2, [r3, #92]	; 0x5c
	VALUE(N[ID('D')].neighbours,'B',0,'F',0);
 8001610:	4b26      	ldr	r3, [pc, #152]	; (80016ac <Create_Nodes+0x330>)
 8001612:	2242      	movs	r2, #66	; 0x42
 8001614:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001618:	4b24      	ldr	r3, [pc, #144]	; (80016ac <Create_Nodes+0x330>)
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <Create_Nodes+0x330>)
 8001622:	2246      	movs	r2, #70	; 0x46
 8001624:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8001628:	4b20      	ldr	r3, [pc, #128]	; (80016ac <Create_Nodes+0x330>)
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	VALUE(N[ID('D')].directions,2,0,2,0);
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <Create_Nodes+0x330>)
 8001632:	2202      	movs	r2, #2
 8001634:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <Create_Nodes+0x330>)
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <Create_Nodes+0x330>)
 8001642:	2202      	movs	r2, #2
 8001644:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <Create_Nodes+0x330>)
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	VALUE(N[ID('D')].distance,452,0,316,0);
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <Create_Nodes+0x330>)
 8001652:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8001656:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <Create_Nodes+0x330>)
 800165c:	2200      	movs	r2, #0
 800165e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <Create_Nodes+0x330>)
 8001664:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8001668:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <Create_Nodes+0x330>)
 800166e:	2200      	movs	r2, #0
 8001670:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	//E node
	N[ID('E')].worth=1;
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <Create_Nodes+0x330>)
 8001676:	2201      	movs	r2, #1
 8001678:	675a      	str	r2, [r3, #116]	; 0x74
	N[ID('E')].type=3;
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <Create_Nodes+0x330>)
 800167c:	2203      	movs	r2, #3
 800167e:	679a      	str	r2, [r3, #120]	; 0x78
	VALUE(N[ID('E')].neighbours,'C',0,'F','G');
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <Create_Nodes+0x330>)
 8001682:	2243      	movs	r2, #67	; 0x43
 8001684:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <Create_Nodes+0x330>)
 800168a:	2200      	movs	r2, #0
 800168c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <Create_Nodes+0x330>)
 8001692:	2246      	movs	r2, #70	; 0x46
 8001694:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <Create_Nodes+0x330>)
 800169a:	2247      	movs	r2, #71	; 0x47
 800169c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	VALUE(N[ID('E')].directions,1,0,2,2);
 80016a0:	4b02      	ldr	r3, [pc, #8]	; (80016ac <Create_Nodes+0x330>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80016a8:	e002      	b.n	80016b0 <Create_Nodes+0x334>
 80016aa:	bf00      	nop
 80016ac:	20000268 	.word	0x20000268
 80016b0:	4bcd      	ldr	r3, [pc, #820]	; (80019e8 <Create_Nodes+0x66c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 80016b8:	4bcb      	ldr	r3, [pc, #812]	; (80019e8 <Create_Nodes+0x66c>)
 80016ba:	2202      	movs	r2, #2
 80016bc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 80016c0:	4bc9      	ldr	r3, [pc, #804]	; (80019e8 <Create_Nodes+0x66c>)
 80016c2:	2202      	movs	r2, #2
 80016c4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	VALUE(N[ID('E')].distance,160,0,428,385);
 80016c8:	4bc7      	ldr	r3, [pc, #796]	; (80019e8 <Create_Nodes+0x66c>)
 80016ca:	22a0      	movs	r2, #160	; 0xa0
 80016cc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80016d0:	4bc5      	ldr	r3, [pc, #788]	; (80019e8 <Create_Nodes+0x66c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80016d8:	4bc3      	ldr	r3, [pc, #780]	; (80019e8 <Create_Nodes+0x66c>)
 80016da:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80016de:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 80016e2:	4bc1      	ldr	r3, [pc, #772]	; (80019e8 <Create_Nodes+0x66c>)
 80016e4:	f240 1281 	movw	r2, #385	; 0x181
 80016e8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	//F node
	N[ID('F')].worth=2;
 80016ec:	4bbe      	ldr	r3, [pc, #760]	; (80019e8 <Create_Nodes+0x66c>)
 80016ee:	2202      	movs	r2, #2
 80016f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	N[ID('F')].type=1;
 80016f4:	4bbc      	ldr	r3, [pc, #752]	; (80019e8 <Create_Nodes+0x66c>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	VALUE(N[ID('F')].neighbours,'E','D','H','I');
 80016fc:	4bba      	ldr	r3, [pc, #744]	; (80019e8 <Create_Nodes+0x66c>)
 80016fe:	2245      	movs	r2, #69	; 0x45
 8001700:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001704:	4bb8      	ldr	r3, [pc, #736]	; (80019e8 <Create_Nodes+0x66c>)
 8001706:	2244      	movs	r2, #68	; 0x44
 8001708:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800170c:	4bb6      	ldr	r3, [pc, #728]	; (80019e8 <Create_Nodes+0x66c>)
 800170e:	2248      	movs	r2, #72	; 0x48
 8001710:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8001714:	4bb4      	ldr	r3, [pc, #720]	; (80019e8 <Create_Nodes+0x66c>)
 8001716:	2249      	movs	r2, #73	; 0x49
 8001718:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	VALUE(N[ID('F')].directions,1,1,2,2);
 800171c:	4bb2      	ldr	r3, [pc, #712]	; (80019e8 <Create_Nodes+0x66c>)
 800171e:	2201      	movs	r2, #1
 8001720:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8001724:	4bb0      	ldr	r3, [pc, #704]	; (80019e8 <Create_Nodes+0x66c>)
 8001726:	2201      	movs	r2, #1
 8001728:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800172c:	4bae      	ldr	r3, [pc, #696]	; (80019e8 <Create_Nodes+0x66c>)
 800172e:	2202      	movs	r2, #2
 8001730:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8001734:	4bac      	ldr	r3, [pc, #688]	; (80019e8 <Create_Nodes+0x66c>)
 8001736:	2202      	movs	r2, #2
 8001738:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	VALUE(N[ID('F')].distance,428,316,284,335);
 800173c:	4baa      	ldr	r3, [pc, #680]	; (80019e8 <Create_Nodes+0x66c>)
 800173e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8001742:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8001746:	4ba8      	ldr	r3, [pc, #672]	; (80019e8 <Create_Nodes+0x66c>)
 8001748:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800174c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8001750:	4ba5      	ldr	r3, [pc, #660]	; (80019e8 <Create_Nodes+0x66c>)
 8001752:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001756:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800175a:	4ba3      	ldr	r3, [pc, #652]	; (80019e8 <Create_Nodes+0x66c>)
 800175c:	f240 124f 	movw	r2, #335	; 0x14f
 8001760:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6

	//G node
	N[ID('G')].worth=2;
 8001764:	4ba0      	ldr	r3, [pc, #640]	; (80019e8 <Create_Nodes+0x66c>)
 8001766:	2202      	movs	r2, #2
 8001768:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	N[ID('G')].type=1;
 800176c:	4b9e      	ldr	r3, [pc, #632]	; (80019e8 <Create_Nodes+0x66c>)
 800176e:	2201      	movs	r2, #1
 8001770:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	VALUE(N[ID('G')].neighbours,'E',0,'H','I');
 8001774:	4b9c      	ldr	r3, [pc, #624]	; (80019e8 <Create_Nodes+0x66c>)
 8001776:	2245      	movs	r2, #69	; 0x45
 8001778:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 800177c:	4b9a      	ldr	r3, [pc, #616]	; (80019e8 <Create_Nodes+0x66c>)
 800177e:	2200      	movs	r2, #0
 8001780:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8001784:	4b98      	ldr	r3, [pc, #608]	; (80019e8 <Create_Nodes+0x66c>)
 8001786:	2248      	movs	r2, #72	; 0x48
 8001788:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
 800178c:	4b96      	ldr	r3, [pc, #600]	; (80019e8 <Create_Nodes+0x66c>)
 800178e:	2249      	movs	r2, #73	; 0x49
 8001790:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	VALUE(N[ID('G')].directions,1,0,2,2);
 8001794:	4b94      	ldr	r3, [pc, #592]	; (80019e8 <Create_Nodes+0x66c>)
 8001796:	2201      	movs	r2, #1
 8001798:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800179c:	4b92      	ldr	r3, [pc, #584]	; (80019e8 <Create_Nodes+0x66c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
 80017a4:	4b90      	ldr	r3, [pc, #576]	; (80019e8 <Create_Nodes+0x66c>)
 80017a6:	2202      	movs	r2, #2
 80017a8:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
 80017ac:	4b8e      	ldr	r3, [pc, #568]	; (80019e8 <Create_Nodes+0x66c>)
 80017ae:	2202      	movs	r2, #2
 80017b0:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	VALUE(N[ID('G')].distance,385,0,336,284);
 80017b4:	4b8c      	ldr	r3, [pc, #560]	; (80019e8 <Create_Nodes+0x66c>)
 80017b6:	f240 1281 	movw	r2, #385	; 0x181
 80017ba:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80017be:	4b8a      	ldr	r3, [pc, #552]	; (80019e8 <Create_Nodes+0x66c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 80017c6:	4b88      	ldr	r3, [pc, #544]	; (80019e8 <Create_Nodes+0x66c>)
 80017c8:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80017cc:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 80017d0:	4b85      	ldr	r3, [pc, #532]	; (80019e8 <Create_Nodes+0x66c>)
 80017d2:	f44f 728e 	mov.w	r2, #284	; 0x11c
 80017d6:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2

	//H node
	N[ID('H')].worth=2;
 80017da:	4b83      	ldr	r3, [pc, #524]	; (80019e8 <Create_Nodes+0x66c>)
 80017dc:	2202      	movs	r2, #2
 80017de:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	N[ID('H')].type=1;
 80017e2:	4b81      	ldr	r3, [pc, #516]	; (80019e8 <Create_Nodes+0x66c>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	VALUE(N[ID('H')].neighbours,'G','F','K','J');
 80017ea:	4b7f      	ldr	r3, [pc, #508]	; (80019e8 <Create_Nodes+0x66c>)
 80017ec:	2247      	movs	r2, #71	; 0x47
 80017ee:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 80017f2:	4b7d      	ldr	r3, [pc, #500]	; (80019e8 <Create_Nodes+0x66c>)
 80017f4:	2246      	movs	r2, #70	; 0x46
 80017f6:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 80017fa:	4b7b      	ldr	r3, [pc, #492]	; (80019e8 <Create_Nodes+0x66c>)
 80017fc:	224b      	movs	r2, #75	; 0x4b
 80017fe:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 8001802:	4b79      	ldr	r3, [pc, #484]	; (80019e8 <Create_Nodes+0x66c>)
 8001804:	224a      	movs	r2, #74	; 0x4a
 8001806:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
	VALUE(N[ID('H')].directions,1,1,2,2);
 800180a:	4b77      	ldr	r3, [pc, #476]	; (80019e8 <Create_Nodes+0x66c>)
 800180c:	2201      	movs	r2, #1
 800180e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8001812:	4b75      	ldr	r3, [pc, #468]	; (80019e8 <Create_Nodes+0x66c>)
 8001814:	2201      	movs	r2, #1
 8001816:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
 800181a:	4b73      	ldr	r3, [pc, #460]	; (80019e8 <Create_Nodes+0x66c>)
 800181c:	2202      	movs	r2, #2
 800181e:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8001822:	4b71      	ldr	r3, [pc, #452]	; (80019e8 <Create_Nodes+0x66c>)
 8001824:	2202      	movs	r2, #2
 8001826:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	VALUE(N[ID('H')].distance,336,284,407,230);
 800182a:	4b6f      	ldr	r3, [pc, #444]	; (80019e8 <Create_Nodes+0x66c>)
 800182c:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001830:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
 8001834:	4b6c      	ldr	r3, [pc, #432]	; (80019e8 <Create_Nodes+0x66c>)
 8001836:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800183a:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
 800183e:	4b6a      	ldr	r3, [pc, #424]	; (80019e8 <Create_Nodes+0x66c>)
 8001840:	f240 1297 	movw	r2, #407	; 0x197
 8001844:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
 8001848:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <Create_Nodes+0x66c>)
 800184a:	22e6      	movs	r2, #230	; 0xe6
 800184c:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde

	//I node
	N[ID('I')].worth=1;
 8001850:	4b65      	ldr	r3, [pc, #404]	; (80019e8 <Create_Nodes+0x66c>)
 8001852:	2201      	movs	r2, #1
 8001854:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	N[ID('I')].type=3;
 8001858:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <Create_Nodes+0x66c>)
 800185a:	2203      	movs	r2, #3
 800185c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	VALUE(N[ID('I')].neighbours,'G','F',0,'L');
 8001860:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <Create_Nodes+0x66c>)
 8001862:	2247      	movs	r2, #71	; 0x47
 8001864:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8001868:	4b5f      	ldr	r3, [pc, #380]	; (80019e8 <Create_Nodes+0x66c>)
 800186a:	2246      	movs	r2, #70	; 0x46
 800186c:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8001870:	4b5d      	ldr	r3, [pc, #372]	; (80019e8 <Create_Nodes+0x66c>)
 8001872:	2200      	movs	r2, #0
 8001874:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8001878:	4b5b      	ldr	r3, [pc, #364]	; (80019e8 <Create_Nodes+0x66c>)
 800187a:	224c      	movs	r2, #76	; 0x4c
 800187c:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
	VALUE(N[ID('I')].directions,1,1,0,2);
 8001880:	4b59      	ldr	r3, [pc, #356]	; (80019e8 <Create_Nodes+0x66c>)
 8001882:	2201      	movs	r2, #1
 8001884:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8001888:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <Create_Nodes+0x66c>)
 800188a:	2201      	movs	r2, #1
 800188c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 8001890:	4b55      	ldr	r3, [pc, #340]	; (80019e8 <Create_Nodes+0x66c>)
 8001892:	2200      	movs	r2, #0
 8001894:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <Create_Nodes+0x66c>)
 800189a:	2202      	movs	r2, #2
 800189c:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
	VALUE(N[ID('I')].distance,284,335,0,418);
 80018a0:	4b51      	ldr	r3, [pc, #324]	; (80019e8 <Create_Nodes+0x66c>)
 80018a2:	f44f 728e 	mov.w	r2, #284	; 0x11c
 80018a6:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 80018aa:	4b4f      	ldr	r3, [pc, #316]	; (80019e8 <Create_Nodes+0x66c>)
 80018ac:	f240 124f 	movw	r2, #335	; 0x14f
 80018b0:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 80018b4:	4b4c      	ldr	r3, [pc, #304]	; (80019e8 <Create_Nodes+0x66c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 80018bc:	4b4a      	ldr	r3, [pc, #296]	; (80019e8 <Create_Nodes+0x66c>)
 80018be:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 80018c2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

	//J node
	N[ID('J')].worth=1;
 80018c6:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <Create_Nodes+0x66c>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	N[ID('J')].type=3;
 80018ce:	4b46      	ldr	r3, [pc, #280]	; (80019e8 <Create_Nodes+0x66c>)
 80018d0:	2203      	movs	r2, #3
 80018d2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	VALUE(N[ID('J')].neighbours,'H',0,'K','L');
 80018d6:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <Create_Nodes+0x66c>)
 80018d8:	2248      	movs	r2, #72	; 0x48
 80018da:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 80018de:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <Create_Nodes+0x66c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
 80018e6:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <Create_Nodes+0x66c>)
 80018e8:	224b      	movs	r2, #75	; 0x4b
 80018ea:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 80018ee:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <Create_Nodes+0x66c>)
 80018f0:	224c      	movs	r2, #76	; 0x4c
 80018f2:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
	VALUE(N[ID('J')].directions,1,0,2,2);
 80018f6:	4b3c      	ldr	r3, [pc, #240]	; (80019e8 <Create_Nodes+0x66c>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 80018fe:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <Create_Nodes+0x66c>)
 8001900:	2200      	movs	r2, #0
 8001902:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 8001906:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <Create_Nodes+0x66c>)
 8001908:	2202      	movs	r2, #2
 800190a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 800190e:	4b36      	ldr	r3, [pc, #216]	; (80019e8 <Create_Nodes+0x66c>)
 8001910:	2202      	movs	r2, #2
 8001912:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
	VALUE(N[ID('J')].distance,230,0,204,229);
 8001916:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <Create_Nodes+0x66c>)
 8001918:	22e6      	movs	r2, #230	; 0xe6
 800191a:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 800191e:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <Create_Nodes+0x66c>)
 8001920:	2200      	movs	r2, #0
 8001922:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
 8001926:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <Create_Nodes+0x66c>)
 8001928:	22cc      	movs	r2, #204	; 0xcc
 800192a:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <Create_Nodes+0x66c>)
 8001930:	22e5      	movs	r2, #229	; 0xe5
 8001932:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

	//K node
	N[ID('K')].worth=2;
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <Create_Nodes+0x66c>)
 8001938:	2202      	movs	r2, #2
 800193a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	N[ID('K')].type=1;
 800193e:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <Create_Nodes+0x66c>)
 8001940:	2201      	movs	r2, #1
 8001942:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	VALUE(N[ID('K')].neighbours,'J','H','M','N');
 8001946:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <Create_Nodes+0x66c>)
 8001948:	224a      	movs	r2, #74	; 0x4a
 800194a:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <Create_Nodes+0x66c>)
 8001950:	2248      	movs	r2, #72	; 0x48
 8001952:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <Create_Nodes+0x66c>)
 8001958:	224d      	movs	r2, #77	; 0x4d
 800195a:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <Create_Nodes+0x66c>)
 8001960:	224e      	movs	r2, #78	; 0x4e
 8001962:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
	VALUE(N[ID('K')].directions,1,1,2,2);
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <Create_Nodes+0x66c>)
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800196e:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <Create_Nodes+0x66c>)
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <Create_Nodes+0x66c>)
 8001978:	2202      	movs	r2, #2
 800197a:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <Create_Nodes+0x66c>)
 8001980:	2202      	movs	r2, #2
 8001982:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
	VALUE(N[ID('K')].distance,204,407,288,319);
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <Create_Nodes+0x66c>)
 8001988:	22cc      	movs	r2, #204	; 0xcc
 800198a:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <Create_Nodes+0x66c>)
 8001990:	f240 1297 	movw	r2, #407	; 0x197
 8001994:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <Create_Nodes+0x66c>)
 800199a:	f44f 7290 	mov.w	r2, #288	; 0x120
 800199e:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <Create_Nodes+0x66c>)
 80019a4:	f240 123f 	movw	r2, #319	; 0x13f
 80019a8:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132

	//L node
	N[ID('L')].worth=2;
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <Create_Nodes+0x66c>)
 80019ae:	2202      	movs	r2, #2
 80019b0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	N[ID('L')].type=1;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <Create_Nodes+0x66c>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	VALUE(N[ID('L')].neighbours,'I','J','M','N');
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <Create_Nodes+0x66c>)
 80019be:	2249      	movs	r2, #73	; 0x49
 80019c0:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <Create_Nodes+0x66c>)
 80019c6:	224a      	movs	r2, #74	; 0x4a
 80019c8:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <Create_Nodes+0x66c>)
 80019ce:	224d      	movs	r2, #77	; 0x4d
 80019d0:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <Create_Nodes+0x66c>)
 80019d6:	224e      	movs	r2, #78	; 0x4e
 80019d8:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
	VALUE(N[ID('L')].directions,1,1,2,2);
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <Create_Nodes+0x66c>)
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 80019e4:	e002      	b.n	80019ec <Create_Nodes+0x670>
 80019e6:	bf00      	nop
 80019e8:	20000268 	.word	0x20000268
 80019ec:	4bcd      	ldr	r3, [pc, #820]	; (8001d24 <Create_Nodes+0x9a8>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
 80019f4:	4bcb      	ldr	r3, [pc, #812]	; (8001d24 <Create_Nodes+0x9a8>)
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 80019fc:	4bc9      	ldr	r3, [pc, #804]	; (8001d24 <Create_Nodes+0x9a8>)
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	VALUE(N[ID('L')].distance,418,229,329,258);
 8001a04:	4bc7      	ldr	r3, [pc, #796]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a06:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8001a0a:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
 8001a0e:	4bc5      	ldr	r3, [pc, #788]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a10:	22e5      	movs	r2, #229	; 0xe5
 8001a12:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8001a16:	4bc3      	ldr	r3, [pc, #780]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a18:	f240 1249 	movw	r2, #329	; 0x149
 8001a1c:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8001a20:	4bc0      	ldr	r3, [pc, #768]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a22:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001a26:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	//M node
	N[ID('M')].worth=2;
 8001a2a:	4bbe      	ldr	r3, [pc, #760]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	N[ID('M')].type=1;
 8001a32:	4bbc      	ldr	r3, [pc, #752]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	VALUE(N[ID('M')].neighbours,'L','K','P','O');
 8001a3a:	4bba      	ldr	r3, [pc, #744]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a3c:	224c      	movs	r2, #76	; 0x4c
 8001a3e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
 8001a42:	4bb8      	ldr	r3, [pc, #736]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a44:	224b      	movs	r2, #75	; 0x4b
 8001a46:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
 8001a4a:	4bb6      	ldr	r3, [pc, #728]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a4c:	2250      	movs	r2, #80	; 0x50
 8001a4e:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
 8001a52:	4bb4      	ldr	r3, [pc, #720]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a54:	224f      	movs	r2, #79	; 0x4f
 8001a56:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
	VALUE(N[ID('M')].directions,1,1,2,2);
 8001a5a:	4bb2      	ldr	r3, [pc, #712]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8001a62:	4bb0      	ldr	r3, [pc, #704]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 8001a6a:	4bae      	ldr	r3, [pc, #696]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
 8001a72:	4bac      	ldr	r3, [pc, #688]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a74:	2202      	movs	r2, #2
 8001a76:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	VALUE(N[ID('M')].distance,329,288,416,198);
 8001a7a:	4baa      	ldr	r3, [pc, #680]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a7c:	f240 1249 	movw	r2, #329	; 0x149
 8001a80:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8001a84:	4ba7      	ldr	r3, [pc, #668]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a86:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001a8a:	f8a3 2166 	strh.w	r2, [r3, #358]	; 0x166
 8001a8e:	4ba5      	ldr	r3, [pc, #660]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a90:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001a94:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
 8001a98:	4ba2      	ldr	r3, [pc, #648]	; (8001d24 <Create_Nodes+0x9a8>)
 8001a9a:	22c6      	movs	r2, #198	; 0xc6
 8001a9c:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a

	//N node
	N[ID('N')].worth=2;
 8001aa0:	4ba0      	ldr	r3, [pc, #640]	; (8001d24 <Create_Nodes+0x9a8>)
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	N[ID('N')].type=1;
 8001aa8:	4b9e      	ldr	r3, [pc, #632]	; (8001d24 <Create_Nodes+0x9a8>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	VALUE(N[ID('N')].neighbours,'L','K','O','Q');
 8001ab0:	4b9c      	ldr	r3, [pc, #624]	; (8001d24 <Create_Nodes+0x9a8>)
 8001ab2:	224c      	movs	r2, #76	; 0x4c
 8001ab4:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 8001ab8:	4b9a      	ldr	r3, [pc, #616]	; (8001d24 <Create_Nodes+0x9a8>)
 8001aba:	224b      	movs	r2, #75	; 0x4b
 8001abc:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8001ac0:	4b98      	ldr	r3, [pc, #608]	; (8001d24 <Create_Nodes+0x9a8>)
 8001ac2:	224f      	movs	r2, #79	; 0x4f
 8001ac4:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
 8001ac8:	4b96      	ldr	r3, [pc, #600]	; (8001d24 <Create_Nodes+0x9a8>)
 8001aca:	2251      	movs	r2, #81	; 0x51
 8001acc:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
	VALUE(N[ID('N')].directions,1,1,2,2);
 8001ad0:	4b94      	ldr	r3, [pc, #592]	; (8001d24 <Create_Nodes+0x9a8>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
 8001ad8:	4b92      	ldr	r3, [pc, #584]	; (8001d24 <Create_Nodes+0x9a8>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
 8001ae0:	4b90      	ldr	r3, [pc, #576]	; (8001d24 <Create_Nodes+0x9a8>)
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
 8001ae8:	4b8e      	ldr	r3, [pc, #568]	; (8001d24 <Create_Nodes+0x9a8>)
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
	VALUE(N[ID('N')].distance,258,318,228,447);
 8001af0:	4b8c      	ldr	r3, [pc, #560]	; (8001d24 <Create_Nodes+0x9a8>)
 8001af2:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001af6:	f8a3 2180 	strh.w	r2, [r3, #384]	; 0x180
 8001afa:	4b8a      	ldr	r3, [pc, #552]	; (8001d24 <Create_Nodes+0x9a8>)
 8001afc:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8001b00:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
 8001b04:	4b87      	ldr	r3, [pc, #540]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b06:	22e4      	movs	r2, #228	; 0xe4
 8001b08:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
 8001b0c:	4b85      	ldr	r3, [pc, #532]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b0e:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001b12:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186

	//O node
	N[ID('O')].worth=2;
 8001b16:	4b83      	ldr	r3, [pc, #524]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b18:	2202      	movs	r2, #2
 8001b1a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	N[ID('O')].type=1;
 8001b1e:	4b81      	ldr	r3, [pc, #516]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	VALUE(N[ID('O')].neighbours,'N','M','P',0);
 8001b26:	4b7f      	ldr	r3, [pc, #508]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b28:	224e      	movs	r2, #78	; 0x4e
 8001b2a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8001b2e:	4b7d      	ldr	r3, [pc, #500]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b30:	224d      	movs	r2, #77	; 0x4d
 8001b32:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
 8001b36:	4b7b      	ldr	r3, [pc, #492]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b38:	2250      	movs	r2, #80	; 0x50
 8001b3a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8001b3e:	4b79      	ldr	r3, [pc, #484]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	VALUE(N[ID('O')].directions,1,1,2,0);
 8001b46:	4b77      	ldr	r3, [pc, #476]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 8001b4e:	4b75      	ldr	r3, [pc, #468]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
 8001b56:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b58:	2202      	movs	r2, #2
 8001b5a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
 8001b5e:	4b71      	ldr	r3, [pc, #452]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
	VALUE(N[ID('O')].distance,228,198,248,0);
 8001b66:	4b6f      	ldr	r3, [pc, #444]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b68:	22e4      	movs	r2, #228	; 0xe4
 8001b6a:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
 8001b6e:	4b6d      	ldr	r3, [pc, #436]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b70:	22c6      	movs	r2, #198	; 0xc6
 8001b72:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
 8001b76:	4b6b      	ldr	r3, [pc, #428]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b78:	22f8      	movs	r2, #248	; 0xf8
 8001b7a:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
 8001b7e:	4b69      	ldr	r3, [pc, #420]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2

	//P node
	N[ID('P')].worth=2;
 8001b86:	4b67      	ldr	r3, [pc, #412]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b88:	2202      	movs	r2, #2
 8001b8a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	N[ID('P')].type=1;
 8001b8e:	4b65      	ldr	r3, [pc, #404]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	VALUE(N[ID('P')].neighbours,'O','M','R','S');
 8001b96:	4b63      	ldr	r3, [pc, #396]	; (8001d24 <Create_Nodes+0x9a8>)
 8001b98:	224f      	movs	r2, #79	; 0x4f
 8001b9a:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 8001b9e:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <Create_Nodes+0x9a8>)
 8001ba0:	224d      	movs	r2, #77	; 0x4d
 8001ba2:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 8001ba6:	4b5f      	ldr	r3, [pc, #380]	; (8001d24 <Create_Nodes+0x9a8>)
 8001ba8:	2252      	movs	r2, #82	; 0x52
 8001baa:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
 8001bae:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <Create_Nodes+0x9a8>)
 8001bb0:	2253      	movs	r2, #83	; 0x53
 8001bb2:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
	VALUE(N[ID('P')].directions,1,1,2,2);
 8001bb6:	4b5b      	ldr	r3, [pc, #364]	; (8001d24 <Create_Nodes+0x9a8>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
 8001bbe:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <Create_Nodes+0x9a8>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
 8001bc6:	4b57      	ldr	r3, [pc, #348]	; (8001d24 <Create_Nodes+0x9a8>)
 8001bc8:	2202      	movs	r2, #2
 8001bca:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
 8001bce:	4b55      	ldr	r3, [pc, #340]	; (8001d24 <Create_Nodes+0x9a8>)
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
	VALUE(N[ID('P')].distance,248,416,305,346);
 8001bd6:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <Create_Nodes+0x9a8>)
 8001bd8:	22f8      	movs	r2, #248	; 0xf8
 8001bda:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
 8001bde:	4b51      	ldr	r3, [pc, #324]	; (8001d24 <Create_Nodes+0x9a8>)
 8001be0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001be4:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
 8001be8:	4b4e      	ldr	r3, [pc, #312]	; (8001d24 <Create_Nodes+0x9a8>)
 8001bea:	f240 1231 	movw	r2, #305	; 0x131
 8001bee:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
 8001bf2:	4b4c      	ldr	r3, [pc, #304]	; (8001d24 <Create_Nodes+0x9a8>)
 8001bf4:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001bf8:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be

	//Q node
	N[ID('Q')].worth=2;
 8001bfc:	4b49      	ldr	r3, [pc, #292]	; (8001d24 <Create_Nodes+0x9a8>)
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
	N[ID('Q')].type=1;
 8001c04:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	VALUE(N[ID('Q')].neighbours,'N',0,'R','S');
 8001c0c:	4b45      	ldr	r3, [pc, #276]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c0e:	224e      	movs	r2, #78	; 0x4e
 8001c10:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8001c14:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
 8001c1c:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c1e:	2252      	movs	r2, #82	; 0x52
 8001c20:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 8001c24:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c26:	2253      	movs	r2, #83	; 0x53
 8001c28:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
	VALUE(N[ID('Q')].directions,1,0,2,2);
 8001c2c:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 8001c34:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 8001c3c:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 8001c44:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
	VALUE(N[ID('Q')].distance,447,0,346,284);
 8001c4c:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c4e:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001c52:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
 8001c56:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6
 8001c5e:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c60:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001c64:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
 8001c68:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c6a:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001c6e:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da

	//R node
	N[ID('R')].worth=2;
 8001c72:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c74:	2202      	movs	r2, #2
 8001c76:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	N[ID('R')].type=1;
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	VALUE(N[ID('R')].neighbours,'Q','P','U','T');
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c84:	2251      	movs	r2, #81	; 0x51
 8001c86:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8001c8a:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c8c:	2250      	movs	r2, #80	; 0x50
 8001c8e:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c94:	2255      	movs	r2, #85	; 0x55
 8001c96:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8001c9a:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <Create_Nodes+0x9a8>)
 8001c9c:	2254      	movs	r2, #84	; 0x54
 8001c9e:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
	VALUE(N[ID('R')].directions,1,1,2,2);
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <Create_Nodes+0x9a8>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <Create_Nodes+0x9a8>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <Create_Nodes+0x9a8>)
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <Create_Nodes+0x9a8>)
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
	VALUE(N[ID('R')].distance,346,305,366,204);
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <Create_Nodes+0x9a8>)
 8001cc4:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001cc8:	f8a3 21f0 	strh.w	r2, [r3, #496]	; 0x1f0
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <Create_Nodes+0x9a8>)
 8001cce:	f240 1231 	movw	r2, #305	; 0x131
 8001cd2:	f8a3 21f2 	strh.w	r2, [r3, #498]	; 0x1f2
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <Create_Nodes+0x9a8>)
 8001cd8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8001cdc:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <Create_Nodes+0x9a8>)
 8001ce2:	22cc      	movs	r2, #204	; 0xcc
 8001ce4:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6

	//S node
	N[ID('S')].worth=2;
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <Create_Nodes+0x9a8>)
 8001cea:	2202      	movs	r2, #2
 8001cec:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	N[ID('S')].type=1;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <Create_Nodes+0x9a8>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	VALUE(N[ID('S')].neighbours,'Q','P','T','V');
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <Create_Nodes+0x9a8>)
 8001cfa:	2251      	movs	r2, #81	; 0x51
 8001cfc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <Create_Nodes+0x9a8>)
 8001d02:	2250      	movs	r2, #80	; 0x50
 8001d04:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <Create_Nodes+0x9a8>)
 8001d0a:	2254      	movs	r2, #84	; 0x54
 8001d0c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <Create_Nodes+0x9a8>)
 8001d12:	2256      	movs	r2, #86	; 0x56
 8001d14:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
	VALUE(N[ID('S')].directions,1,1,2,2);
 8001d18:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <Create_Nodes+0x9a8>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 8001d20:	e002      	b.n	8001d28 <Create_Nodes+0x9ac>
 8001d22:	bf00      	nop
 8001d24:	20000268 	.word	0x20000268
 8001d28:	4bbc      	ldr	r3, [pc, #752]	; (800201c <Create_Nodes+0xca0>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
 8001d30:	4bba      	ldr	r3, [pc, #744]	; (800201c <Create_Nodes+0xca0>)
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
 8001d38:	4bb8      	ldr	r3, [pc, #736]	; (800201c <Create_Nodes+0xca0>)
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
	VALUE(N[ID('S')].distance,284,346,223,406);
 8001d40:	4bb6      	ldr	r3, [pc, #728]	; (800201c <Create_Nodes+0xca0>)
 8001d42:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001d46:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
 8001d4a:	4bb4      	ldr	r3, [pc, #720]	; (800201c <Create_Nodes+0xca0>)
 8001d4c:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001d50:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
 8001d54:	4bb1      	ldr	r3, [pc, #708]	; (800201c <Create_Nodes+0xca0>)
 8001d56:	22df      	movs	r2, #223	; 0xdf
 8001d58:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
 8001d5c:	4baf      	ldr	r3, [pc, #700]	; (800201c <Create_Nodes+0xca0>)
 8001d5e:	f44f 72cb 	mov.w	r2, #406	; 0x196
 8001d62:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212

	//T node
	N[ID('T')].worth=2;
 8001d66:	4bad      	ldr	r3, [pc, #692]	; (800201c <Create_Nodes+0xca0>)
 8001d68:	2202      	movs	r2, #2
 8001d6a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	N[ID('T')].type=1;
 8001d6e:	4bab      	ldr	r3, [pc, #684]	; (800201c <Create_Nodes+0xca0>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	VALUE(N[ID('T')].neighbours,'S','R','U','V');
 8001d76:	4ba9      	ldr	r3, [pc, #676]	; (800201c <Create_Nodes+0xca0>)
 8001d78:	2253      	movs	r2, #83	; 0x53
 8001d7a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8001d7e:	4ba7      	ldr	r3, [pc, #668]	; (800201c <Create_Nodes+0xca0>)
 8001d80:	2252      	movs	r2, #82	; 0x52
 8001d82:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 8001d86:	4ba5      	ldr	r3, [pc, #660]	; (800201c <Create_Nodes+0xca0>)
 8001d88:	2255      	movs	r2, #85	; 0x55
 8001d8a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8001d8e:	4ba3      	ldr	r3, [pc, #652]	; (800201c <Create_Nodes+0xca0>)
 8001d90:	2256      	movs	r2, #86	; 0x56
 8001d92:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	VALUE(N[ID('T')].directions,1,1,2,2);
 8001d96:	4ba1      	ldr	r3, [pc, #644]	; (800201c <Create_Nodes+0xca0>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
 8001d9e:	4b9f      	ldr	r3, [pc, #636]	; (800201c <Create_Nodes+0xca0>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
 8001da6:	4b9d      	ldr	r3, [pc, #628]	; (800201c <Create_Nodes+0xca0>)
 8001da8:	2202      	movs	r2, #2
 8001daa:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
 8001dae:	4b9b      	ldr	r3, [pc, #620]	; (800201c <Create_Nodes+0xca0>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
	VALUE(N[ID('T')].distance,223,204,192,233);
 8001db6:	4b99      	ldr	r3, [pc, #612]	; (800201c <Create_Nodes+0xca0>)
 8001db8:	22df      	movs	r2, #223	; 0xdf
 8001dba:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
 8001dbe:	4b97      	ldr	r3, [pc, #604]	; (800201c <Create_Nodes+0xca0>)
 8001dc0:	22cc      	movs	r2, #204	; 0xcc
 8001dc2:	f8a3 222a 	strh.w	r2, [r3, #554]	; 0x22a
 8001dc6:	4b95      	ldr	r3, [pc, #596]	; (800201c <Create_Nodes+0xca0>)
 8001dc8:	22c0      	movs	r2, #192	; 0xc0
 8001dca:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
 8001dce:	4b93      	ldr	r3, [pc, #588]	; (800201c <Create_Nodes+0xca0>)
 8001dd0:	22e9      	movs	r2, #233	; 0xe9
 8001dd2:	f8a3 222e 	strh.w	r2, [r3, #558]	; 0x22e

	//U node
	N[ID('U')].worth=2;
 8001dd6:	4b91      	ldr	r3, [pc, #580]	; (800201c <Create_Nodes+0xca0>)
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	N[ID('U')].type=1;
 8001dde:	4b8f      	ldr	r3, [pc, #572]	; (800201c <Create_Nodes+0xca0>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	VALUE(N[ID('U')].neighbours,'T','R','X',0);
 8001de6:	4b8d      	ldr	r3, [pc, #564]	; (800201c <Create_Nodes+0xca0>)
 8001de8:	2254      	movs	r2, #84	; 0x54
 8001dea:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
 8001dee:	4b8b      	ldr	r3, [pc, #556]	; (800201c <Create_Nodes+0xca0>)
 8001df0:	2252      	movs	r2, #82	; 0x52
 8001df2:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
 8001df6:	4b89      	ldr	r3, [pc, #548]	; (800201c <Create_Nodes+0xca0>)
 8001df8:	2258      	movs	r2, #88	; 0x58
 8001dfa:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
 8001dfe:	4b87      	ldr	r3, [pc, #540]	; (800201c <Create_Nodes+0xca0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 223f 	strb.w	r2, [r3, #575]	; 0x23f
	VALUE(N[ID('U')].directions,1,1,2,0);
 8001e06:	4b85      	ldr	r3, [pc, #532]	; (800201c <Create_Nodes+0xca0>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 8001e0e:	4b83      	ldr	r3, [pc, #524]	; (800201c <Create_Nodes+0xca0>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 8001e16:	4b81      	ldr	r3, [pc, #516]	; (800201c <Create_Nodes+0xca0>)
 8001e18:	2202      	movs	r2, #2
 8001e1a:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
 8001e1e:	4b7f      	ldr	r3, [pc, #508]	; (800201c <Create_Nodes+0xca0>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2243 	strb.w	r2, [r3, #579]	; 0x243
	VALUE(N[ID('U')].distance,192,366,371,0);
 8001e26:	4b7d      	ldr	r3, [pc, #500]	; (800201c <Create_Nodes+0xca0>)
 8001e28:	22c0      	movs	r2, #192	; 0xc0
 8001e2a:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
 8001e2e:	4b7b      	ldr	r3, [pc, #492]	; (800201c <Create_Nodes+0xca0>)
 8001e30:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8001e34:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
 8001e38:	4b78      	ldr	r3, [pc, #480]	; (800201c <Create_Nodes+0xca0>)
 8001e3a:	f240 1273 	movw	r2, #371	; 0x173
 8001e3e:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
 8001e42:	4b76      	ldr	r3, [pc, #472]	; (800201c <Create_Nodes+0xca0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a

	//V node
	N[ID('V')].worth=2;
 8001e4a:	4b74      	ldr	r3, [pc, #464]	; (800201c <Create_Nodes+0xca0>)
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	N[ID('V')].type=1;
 8001e52:	4b72      	ldr	r3, [pc, #456]	; (800201c <Create_Nodes+0xca0>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	VALUE(N[ID('V')].neighbours,'S','T','W',0);
 8001e5a:	4b70      	ldr	r3, [pc, #448]	; (800201c <Create_Nodes+0xca0>)
 8001e5c:	2253      	movs	r2, #83	; 0x53
 8001e5e:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
 8001e62:	4b6e      	ldr	r3, [pc, #440]	; (800201c <Create_Nodes+0xca0>)
 8001e64:	2254      	movs	r2, #84	; 0x54
 8001e66:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8001e6a:	4b6c      	ldr	r3, [pc, #432]	; (800201c <Create_Nodes+0xca0>)
 8001e6c:	2257      	movs	r2, #87	; 0x57
 8001e6e:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 8001e72:	4b6a      	ldr	r3, [pc, #424]	; (800201c <Create_Nodes+0xca0>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 225b 	strb.w	r2, [r3, #603]	; 0x25b
	VALUE(N[ID('V')].directions,1,1,2,0);
 8001e7a:	4b68      	ldr	r3, [pc, #416]	; (800201c <Create_Nodes+0xca0>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
 8001e82:	4b66      	ldr	r3, [pc, #408]	; (800201c <Create_Nodes+0xca0>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
 8001e8a:	4b64      	ldr	r3, [pc, #400]	; (800201c <Create_Nodes+0xca0>)
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
 8001e92:	4b62      	ldr	r3, [pc, #392]	; (800201c <Create_Nodes+0xca0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
	VALUE(N[ID('V')].distance,406,233,149,0);
 8001e9a:	4b60      	ldr	r3, [pc, #384]	; (800201c <Create_Nodes+0xca0>)
 8001e9c:	f44f 72cb 	mov.w	r2, #406	; 0x196
 8001ea0:	f8a3 2260 	strh.w	r2, [r3, #608]	; 0x260
 8001ea4:	4b5d      	ldr	r3, [pc, #372]	; (800201c <Create_Nodes+0xca0>)
 8001ea6:	22e9      	movs	r2, #233	; 0xe9
 8001ea8:	f8a3 2262 	strh.w	r2, [r3, #610]	; 0x262
 8001eac:	4b5b      	ldr	r3, [pc, #364]	; (800201c <Create_Nodes+0xca0>)
 8001eae:	2295      	movs	r2, #149	; 0x95
 8001eb0:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
 8001eb4:	4b59      	ldr	r3, [pc, #356]	; (800201c <Create_Nodes+0xca0>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f8a3 2266 	strh.w	r2, [r3, #614]	; 0x266

	//W node
	N[ID('W')].worth=1;
 8001ebc:	4b57      	ldr	r3, [pc, #348]	; (800201c <Create_Nodes+0xca0>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	N[ID('W')].type=3;
 8001ec4:	4b55      	ldr	r3, [pc, #340]	; (800201c <Create_Nodes+0xca0>)
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	VALUE(N[ID('W')].neighbours,'V',0,'X',0);
 8001ecc:	4b53      	ldr	r3, [pc, #332]	; (800201c <Create_Nodes+0xca0>)
 8001ece:	2256      	movs	r2, #86	; 0x56
 8001ed0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 8001ed4:	4b51      	ldr	r3, [pc, #324]	; (800201c <Create_Nodes+0xca0>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
 8001edc:	4b4f      	ldr	r3, [pc, #316]	; (800201c <Create_Nodes+0xca0>)
 8001ede:	2258      	movs	r2, #88	; 0x58
 8001ee0:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	; (800201c <Create_Nodes+0xca0>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
	VALUE(N[ID('W')].directions,1,0,1,0);
 8001eec:	4b4b      	ldr	r3, [pc, #300]	; (800201c <Create_Nodes+0xca0>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8001ef4:	4b49      	ldr	r3, [pc, #292]	; (800201c <Create_Nodes+0xca0>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 8001efc:	4b47      	ldr	r3, [pc, #284]	; (800201c <Create_Nodes+0xca0>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
 8001f04:	4b45      	ldr	r3, [pc, #276]	; (800201c <Create_Nodes+0xca0>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 227b 	strb.w	r2, [r3, #635]	; 0x27b
	VALUE(N[ID('W')].distance,149,0,189,0);
 8001f0c:	4b43      	ldr	r3, [pc, #268]	; (800201c <Create_Nodes+0xca0>)
 8001f0e:	2295      	movs	r2, #149	; 0x95
 8001f10:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
 8001f14:	4b41      	ldr	r3, [pc, #260]	; (800201c <Create_Nodes+0xca0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	f8a3 227e 	strh.w	r2, [r3, #638]	; 0x27e
 8001f1c:	4b3f      	ldr	r3, [pc, #252]	; (800201c <Create_Nodes+0xca0>)
 8001f1e:	22bd      	movs	r2, #189	; 0xbd
 8001f20:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
 8001f24:	4b3d      	ldr	r3, [pc, #244]	; (800201c <Create_Nodes+0xca0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	f8a3 2282 	strh.w	r2, [r3, #642]	; 0x282

	//X node
	N[ID('X')].worth=2;
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	; (800201c <Create_Nodes+0xca0>)
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	N[ID('X')].type=2;
 8001f34:	4b39      	ldr	r3, [pc, #228]	; (800201c <Create_Nodes+0xca0>)
 8001f36:	2202      	movs	r2, #2
 8001f38:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	VALUE(N[ID('X')].neighbours,'U',0,0,'W');
 8001f3c:	4b37      	ldr	r3, [pc, #220]	; (800201c <Create_Nodes+0xca0>)
 8001f3e:	2255      	movs	r2, #85	; 0x55
 8001f40:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 8001f44:	4b35      	ldr	r3, [pc, #212]	; (800201c <Create_Nodes+0xca0>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 8001f4c:	4b33      	ldr	r3, [pc, #204]	; (800201c <Create_Nodes+0xca0>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 8001f54:	4b31      	ldr	r3, [pc, #196]	; (800201c <Create_Nodes+0xca0>)
 8001f56:	2257      	movs	r2, #87	; 0x57
 8001f58:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
	VALUE(N[ID('X')].directions,1,0,0,1);
 8001f5c:	4b2f      	ldr	r3, [pc, #188]	; (800201c <Create_Nodes+0xca0>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
 8001f64:	4b2d      	ldr	r3, [pc, #180]	; (800201c <Create_Nodes+0xca0>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	; (800201c <Create_Nodes+0xca0>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
 8001f74:	4b29      	ldr	r3, [pc, #164]	; (800201c <Create_Nodes+0xca0>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
	VALUE(N[ID('X')].distance,371,0,0,189);
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <Create_Nodes+0xca0>)
 8001f7e:	f240 1273 	movw	r2, #371	; 0x173
 8001f82:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
 8001f86:	4b25      	ldr	r3, [pc, #148]	; (800201c <Create_Nodes+0xca0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
 8001f8e:	4b23      	ldr	r3, [pc, #140]	; (800201c <Create_Nodes+0xca0>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
 8001f96:	4b21      	ldr	r3, [pc, #132]	; (800201c <Create_Nodes+0xca0>)
 8001f98:	22bd      	movs	r2, #189	; 0xbd
 8001f9a:	f8a3 229e 	strh.w	r2, [r3, #670]	; 0x29e

	//X node
	N[ID('X')].worth=2;
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	; (800201c <Create_Nodes+0xca0>)
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	N[ID('X')].type=2;
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <Create_Nodes+0xca0>)
 8001fa8:	2202      	movs	r2, #2
 8001faa:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	VALUE(N[ID('X')].neighbours,'U',0,0,'W');
 8001fae:	4b1b      	ldr	r3, [pc, #108]	; (800201c <Create_Nodes+0xca0>)
 8001fb0:	2255      	movs	r2, #85	; 0x55
 8001fb2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <Create_Nodes+0xca0>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <Create_Nodes+0xca0>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <Create_Nodes+0xca0>)
 8001fc8:	2257      	movs	r2, #87	; 0x57
 8001fca:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
	VALUE(N[ID('X')].directions,1,0,0,1);
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <Create_Nodes+0xca0>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <Create_Nodes+0xca0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <Create_Nodes+0xca0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <Create_Nodes+0xca0>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
	VALUE(N[ID('X')].distance,371,0,0,189);
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <Create_Nodes+0xca0>)
 8001ff0:	f240 1273 	movw	r2, #371	; 0x173
 8001ff4:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <Create_Nodes+0xca0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <Create_Nodes+0xca0>)
 8002002:	2200      	movs	r2, #0
 8002004:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <Create_Nodes+0xca0>)
 800200a:	22bd      	movs	r2, #189	; 0xbd
 800200c:	f8a3 229e 	strh.w	r2, [r3, #670]	; 0x29e
	/*N[ID('Z')].worth=0;
	N[ID('Z')].type=2;
	VALUE(N[ID('Z')].neighbours,0,0,0,'A');
	VALUE(N[ID('Z')].directions,0,0,0,2);
	VALUE(N[ID('Z')].distance,0,0,0,1);*/
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	20000268 	.word	0x20000268

08002020 <Control_Task>:


void Control_Task(UART_HandleTypeDef *huart_debugg,uint32_t tick, uint32_t period)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
	static uint8_t nextDirection=2;
	static uint8_t nextPath=RIGHT;
	static uint32_t t_prev=0;
	static uint32_t node_detection_time=0;
	static float fitness[4]={0,0,0,0};
	uint8_t i=0;
 800202c:	2300      	movs	r3, #0
 800202e:	77fb      	strb	r3, [r7, #31]

	float bestFitness=0;
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
	static uint8_t bestPath=3;
	uint8_t nID=0;
 8002036:	2300      	movs	r3, #0
 8002038:	75fb      	strb	r3, [r7, #23]

	static uint32_t control_task_tick = 0;

	if(mode!=SKILL)return;
 800203a:	4bac      	ldr	r3, [pc, #688]	; (80022ec <Control_Task+0x2cc>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b52      	cmp	r3, #82	; 0x52
 8002040:	f040 81bd 	bne.w	80023be <Control_Task+0x39e>
	if(control_task_tick>tick)return;
 8002044:	4baa      	ldr	r3, [pc, #680]	; (80022f0 <Control_Task+0x2d0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	429a      	cmp	r2, r3
 800204c:	f0c0 81b9 	bcc.w	80023c2 <Control_Task+0x3a2>
	control_task_tick=tick+period;
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	4aa6      	ldr	r2, [pc, #664]	; (80022f0 <Control_Task+0x2d0>)
 8002058:	6013      	str	r3, [r2, #0]

	if(!readytorace)return;
 800205a:	4ba6      	ldr	r3, [pc, #664]	; (80022f4 <Control_Task+0x2d4>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 81b1 	beq.w	80023c6 <Control_Task+0x3a6>
	//a pathirány megahtárzása az orientation ismeretében már egyszerű


	char str[5];
	//ha odaértünk a myPositionbe, akkor indulhat a mozgás a nextPosition felé
	if(nodeDetected)
 8002064:	4ba4      	ldr	r3, [pc, #656]	; (80022f8 <Control_Task+0x2d8>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d06d      	beq.n	8002148 <Control_Task+0x128>
	{
		str[0]=myPosition;
 800206c:	4ba3      	ldr	r3, [pc, #652]	; (80022fc <Control_Task+0x2dc>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	743b      	strb	r3, [r7, #16]
		str[1]=',';
 8002072:	232c      	movs	r3, #44	; 0x2c
 8002074:	747b      	strb	r3, [r7, #17]
		str[2]=nextPosition;
 8002076:	4ba2      	ldr	r3, [pc, #648]	; (8002300 <Control_Task+0x2e0>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	74bb      	strb	r3, [r7, #18]
		str[3]='\n';
 800207c:	230a      	movs	r3, #10
 800207e:	74fb      	strb	r3, [r7, #19]
		str[4]='\r';
 8002080:	230d      	movs	r3, #13
 8002082:	753b      	strb	r3, [r7, #20]
		HAL_UART_Transmit(huart_debugg, (uint8_t*)str, 5, 5);
 8002084:	f107 0110 	add.w	r1, r7, #16
 8002088:	2305      	movs	r3, #5
 800208a:	2205      	movs	r2, #5
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f007 fd52 	bl	8009b36 <HAL_UART_Transmit>
		LED_B_TOGGLE;
 8002092:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002096:	489b      	ldr	r0, [pc, #620]	; (8002304 <Control_Task+0x2e4>)
 8002098:	f004 ffa3 	bl	8006fe2 <HAL_GPIO_TogglePin>
		nodeDetected=0;
 800209c:	4b96      	ldr	r3, [pc, #600]	; (80022f8 <Control_Task+0x2d8>)
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
		N[ID(myPosition)].worth=0;//ez a kapu már nem ér pontot
 80020a2:	4b96      	ldr	r3, [pc, #600]	; (80022fc <Control_Task+0x2dc>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80020aa:	4997      	ldr	r1, [pc, #604]	; (8002308 <Control_Task+0x2e8>)
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	3304      	adds	r3, #4
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
		if(N[ID(nextPosition)].type>2)//ha a kövi node-on nincs kapu
 80020bc:	4b90      	ldr	r3, [pc, #576]	; (8002300 <Control_Task+0x2e0>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80020c4:	4990      	ldr	r1, [pc, #576]	; (8002308 <Control_Task+0x2e8>)
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3308      	adds	r3, #8
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d927      	bls.n	8002128 <Control_Task+0x108>
		{
			t_prev=tick;//mostantól mérjük az időt
 80020d8:	4a8c      	ldr	r2, [pc, #560]	; (800230c <Control_Task+0x2ec>)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	6013      	str	r3, [r2, #0]
			node_detection_time=11000*N[ID(myPosition)].distance[bestPath]/abs(v_ref);//ennyi ms-nek kell eltelnie, amíg odaérünk
 80020de:	4b87      	ldr	r3, [pc, #540]	; (80022fc <Control_Task+0x2dc>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80020e6:	4b8a      	ldr	r3, [pc, #552]	; (8002310 <Control_Task+0x2f0>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	4986      	ldr	r1, [pc, #536]	; (8002308 <Control_Task+0x2e8>)
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4403      	add	r3, r0
 80020f8:	3308      	adds	r3, #8
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	440b      	add	r3, r1
 80020fe:	889b      	ldrh	r3, [r3, #4]
 8002100:	461a      	mov	r2, r3
 8002102:	f642 23f8 	movw	r3, #11000	; 0x2af8
 8002106:	fb03 f202 	mul.w	r2, r3, r2
 800210a:	4b82      	ldr	r3, [pc, #520]	; (8002314 <Control_Task+0x2f4>)
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002114:	ee17 3a90 	vmov	r3, s15
 8002118:	2b00      	cmp	r3, #0
 800211a:	bfb8      	it	lt
 800211c:	425b      	neglt	r3, r3
 800211e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002122:	461a      	mov	r2, r3
 8002124:	4b7c      	ldr	r3, [pc, #496]	; (8002318 <Control_Task+0x2f8>)
 8002126:	601a      	str	r2, [r3, #0]
		}
		myPosition=nextPosition; //'C'
 8002128:	4b75      	ldr	r3, [pc, #468]	; (8002300 <Control_Task+0x2e0>)
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	4b73      	ldr	r3, [pc, #460]	; (80022fc <Control_Task+0x2dc>)
 800212e:	701a      	strb	r2, [r3, #0]
		path=nextPath;//RIGHT
 8002130:	4b7a      	ldr	r3, [pc, #488]	; (800231c <Control_Task+0x2fc>)
 8002132:	781a      	ldrb	r2, [r3, #0]
 8002134:	4b7a      	ldr	r3, [pc, #488]	; (8002320 <Control_Task+0x300>)
 8002136:	701a      	strb	r2, [r3, #0]
		myDirection=nextDirection;//2
 8002138:	4b7a      	ldr	r3, [pc, #488]	; (8002324 <Control_Task+0x304>)
 800213a:	781a      	ldrb	r2, [r3, #0]
 800213c:	4b7a      	ldr	r3, [pc, #488]	; (8002328 <Control_Task+0x308>)
 800213e:	701a      	strb	r2, [r3, #0]
		orientation=nextOrientation;//FORWARD
 8002140:	4b7a      	ldr	r3, [pc, #488]	; (800232c <Control_Task+0x30c>)
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	4b7a      	ldr	r3, [pc, #488]	; (8002330 <Control_Task+0x310>)
 8002146:	701a      	strb	r2, [r3, #0]

	}

	//legjobb szomszéd kiválasztása
	bestFitness=0;
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
	for(i=0;i<4;i++)
 800214e:	2300      	movs	r3, #0
 8002150:	77fb      	strb	r3, [r7, #31]
 8002152:	e068      	b.n	8002226 <Control_Task+0x206>
	{
		if(N[ID(myPosition)].neighbours[i]>0) //ha létezik a szomszéd
 8002154:	4b69      	ldr	r3, [pc, #420]	; (80022fc <Control_Task+0x2dc>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800215c:	7ff9      	ldrb	r1, [r7, #31]
 800215e:	486a      	ldr	r0, [pc, #424]	; (8002308 <Control_Task+0x2e8>)
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4403      	add	r3, r0
 800216a:	440b      	add	r3, r1
 800216c:	330c      	adds	r3, #12
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d039      	beq.n	80021e8 <Control_Task+0x1c8>
		{
			nID=N[ID(myPosition)].neighbours[i]; //a vizsgált szomszéd azonosítója
 8002174:	4b61      	ldr	r3, [pc, #388]	; (80022fc <Control_Task+0x2dc>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800217c:	7ff9      	ldrb	r1, [r7, #31]
 800217e:	4862      	ldr	r0, [pc, #392]	; (8002308 <Control_Task+0x2e8>)
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4403      	add	r3, r0
 800218a:	440b      	add	r3, r1
 800218c:	330c      	adds	r3, #12
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	75fb      	strb	r3, [r7, #23]
			fitness[i]=(float)N[ID(nID)].worth/(N[ID(myPosition)].distance[i]); //a fitneszértéke
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002198:	495b      	ldr	r1, [pc, #364]	; (8002308 <Control_Task+0x2e8>)
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	3304      	adds	r3, #4
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021b0:	4b52      	ldr	r3, [pc, #328]	; (80022fc <Control_Task+0x2dc>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80021b8:	7ff9      	ldrb	r1, [r7, #31]
 80021ba:	4853      	ldr	r0, [pc, #332]	; (8002308 <Control_Task+0x2e8>)
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	440b      	add	r3, r1
 80021c6:	3308      	adds	r3, #8
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4403      	add	r3, r0
 80021cc:	889b      	ldrh	r3, [r3, #4]
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d6:	7ffb      	ldrb	r3, [r7, #31]
 80021d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021dc:	4a55      	ldr	r2, [pc, #340]	; (8002334 <Control_Task+0x314>)
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	edc3 7a00 	vstr	s15, [r3]
 80021e6:	e005      	b.n	80021f4 <Control_Task+0x1d4>
		}
		else fitness[i]=-100.0;//ha nem létezik a szomszéd erre tuti ne menjünk
 80021e8:	7ffb      	ldrb	r3, [r7, #31]
 80021ea:	4a52      	ldr	r2, [pc, #328]	; (8002334 <Control_Task+0x314>)
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	4a51      	ldr	r2, [pc, #324]	; (8002338 <Control_Task+0x318>)
 80021f2:	601a      	str	r2, [r3, #0]
		if(fitness[i]>=bestFitness)
 80021f4:	7ffb      	ldrb	r3, [r7, #31]
 80021f6:	4a4f      	ldr	r2, [pc, #316]	; (8002334 <Control_Task+0x314>)
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	edd3 7a00 	vldr	s15, [r3]
 8002200:	ed97 7a06 	vldr	s14, [r7, #24]
 8002204:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220c:	d808      	bhi.n	8002220 <Control_Task+0x200>
		{
			bestFitness=fitness[i];
 800220e:	7ffb      	ldrb	r3, [r7, #31]
 8002210:	4a48      	ldr	r2, [pc, #288]	; (8002334 <Control_Task+0x314>)
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	61bb      	str	r3, [r7, #24]
			bestPath = i;//2
 800221a:	4a3d      	ldr	r2, [pc, #244]	; (8002310 <Control_Task+0x2f0>)
 800221c:	7ffb      	ldrb	r3, [r7, #31]
 800221e:	7013      	strb	r3, [r2, #0]
	for(i=0;i<4;i++)
 8002220:	7ffb      	ldrb	r3, [r7, #31]
 8002222:	3301      	adds	r3, #1
 8002224:	77fb      	strb	r3, [r7, #31]
 8002226:	7ffb      	ldrb	r3, [r7, #31]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d993      	bls.n	8002154 <Control_Task+0x134>
			//str[0]=0x30+bestPath;
		}
	}
	//a következő poziciónk a legjobb szomszéd lesz
	nextPosition=N[ID(myPosition)].neighbours[bestPath];//'B'
 800222c:	4b33      	ldr	r3, [pc, #204]	; (80022fc <Control_Task+0x2dc>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <Control_Task+0x2f0>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	4933      	ldr	r1, [pc, #204]	; (8002308 <Control_Task+0x2e8>)
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	4403      	add	r3, r0
 8002248:	330c      	adds	r3, #12
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <Control_Task+0x2e0>)
 800224e:	701a      	strb	r2, [r3, #0]
	nextDirection=N[ID(myPosition)].directions[bestPath];//már most tudjuk, mi lesz az irányunk, ha odaértünk
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <Control_Task+0x2dc>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <Control_Task+0x2f0>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	492a      	ldr	r1, [pc, #168]	; (8002308 <Control_Task+0x2e8>)
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	4403      	add	r3, r0
 800226c:	3310      	adds	r3, #16
 800226e:	781a      	ldrb	r2, [r3, #0]
 8002270:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <Control_Task+0x304>)
 8002272:	701a      	strb	r2, [r3, #0]
	//1

	//a kocsi az egyik node-ból átmegy egy másikba-> az irányok segítségével meghatározzu az új orientationt
	if(bestPath<2) //ha balra/le kell majd mennünk a nextPosition -höz
 8002274:	4b26      	ldr	r3, [pc, #152]	; (8002310 <Control_Task+0x2f0>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d813      	bhi.n	80022a4 <Control_Task+0x284>
	{
		if(myDirection==2)//és eddig jobbra/fel mentünk,
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <Control_Task+0x308>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d10a      	bne.n	800229a <Control_Task+0x27a>
			nextOrientation = !orientation;//akkor most orientációt kell váltanunk
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <Control_Task+0x310>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <Control_Task+0x30c>)
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e017      	b.n	80022ca <Control_Task+0x2aa>
		else nextOrientation=orientation; //különben nem kell
 800229a:	4b25      	ldr	r3, [pc, #148]	; (8002330 <Control_Task+0x310>)
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	4b23      	ldr	r3, [pc, #140]	; (800232c <Control_Task+0x30c>)
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	e012      	b.n	80022ca <Control_Task+0x2aa>
	}
	else //ha jobbra kell majd mennünk
	{
		if(myDirection==1)//és eddig jobbra/fel mentünk,
 80022a4:	4b20      	ldr	r3, [pc, #128]	; (8002328 <Control_Task+0x308>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d10a      	bne.n	80022c2 <Control_Task+0x2a2>
			nextOrientation = !orientation;//akkor most irányt kell váltanunk
 80022ac:	4b20      	ldr	r3, [pc, #128]	; (8002330 <Control_Task+0x310>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	4b1b      	ldr	r3, [pc, #108]	; (800232c <Control_Task+0x30c>)
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	e003      	b.n	80022ca <Control_Task+0x2aa>
		else nextOrientation=orientation; //különben nem kell
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <Control_Task+0x310>)
 80022c4:	781a      	ldrb	r2, [r3, #0]
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <Control_Task+0x30c>)
 80022c8:	701a      	strb	r2, [r3, #0]
	}

	//path kiválasztás -> az orientációt mostmár tudjuk (tolatás/előre), már csak az ösvény kell kivákasztani, hogy a megfelelő szomszédhoz jussunk
	if(nextOrientation==FORWARD)
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <Control_Task+0x30c>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d140      	bne.n	8002354 <Control_Task+0x334>
	{
		if(bestPath==0 || bestPath==2)nextPath=LEFT;
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <Control_Task+0x2f0>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <Control_Task+0x2c2>
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <Control_Task+0x2f0>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d12c      	bne.n	800233c <Control_Task+0x31c>
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <Control_Task+0x2fc>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
 80022e8:	e04f      	b.n	800238a <Control_Task+0x36a>
 80022ea:	bf00      	nop
 80022ec:	20000255 	.word	0x20000255
 80022f0:	20000508 	.word	0x20000508
 80022f4:	20000265 	.word	0x20000265
 80022f8:	20000262 	.word	0x20000262
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000001 	.word	0x20000001
 8002304:	40020400 	.word	0x40020400
 8002308:	20000268 	.word	0x20000268
 800230c:	2000050c 	.word	0x2000050c
 8002310:	20000002 	.word	0x20000002
 8002314:	20000258 	.word	0x20000258
 8002318:	20000510 	.word	0x20000510
 800231c:	20000003 	.word	0x20000003
 8002320:	20000263 	.word	0x20000263
 8002324:	20000004 	.word	0x20000004
 8002328:	20000005 	.word	0x20000005
 800232c:	20000514 	.word	0x20000514
 8002330:	20000261 	.word	0x20000261
 8002334:	20000518 	.word	0x20000518
 8002338:	c2c80000 	.word	0xc2c80000
		else if(bestPath==1 || bestPath==3)nextPath=RIGHT;
 800233c:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <Control_Task+0x3b0>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d003      	beq.n	800234c <Control_Task+0x32c>
 8002344:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <Control_Task+0x3b0>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d11e      	bne.n	800238a <Control_Task+0x36a>
 800234c:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <Control_Task+0x3b4>)
 800234e:	2202      	movs	r2, #2
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e01a      	b.n	800238a <Control_Task+0x36a>
	}
	else if(nextOrientation==REVERSE) //tolatásnál pont forditva vannak a pathirányok
 8002354:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <Control_Task+0x3b8>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d116      	bne.n	800238a <Control_Task+0x36a>
	{
		if(bestPath==0 || bestPath==2)nextPath=RIGHT;
 800235c:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <Control_Task+0x3b0>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <Control_Task+0x34c>
 8002364:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <Control_Task+0x3b0>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d103      	bne.n	8002374 <Control_Task+0x354>
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <Control_Task+0x3b4>)
 800236e:	2202      	movs	r2, #2
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e00a      	b.n	800238a <Control_Task+0x36a>
		else if(bestPath==1 || bestPath==3)nextPath=LEFT;
 8002374:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <Control_Task+0x3b0>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d003      	beq.n	8002384 <Control_Task+0x364>
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <Control_Task+0x3b0>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d102      	bne.n	800238a <Control_Task+0x36a>
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <Control_Task+0x3b4>)
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
	}

	//ha kapu nélküli nodeba tartunk éppen, akkor időzítéssel "detektáljuk" a nodot
	if(N[ID(myPosition)].type>2 && (tick-t_prev)>node_detection_time)
 800238a:	4b14      	ldr	r3, [pc, #80]	; (80023dc <Control_Task+0x3bc>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002392:	4913      	ldr	r1, [pc, #76]	; (80023e0 <Control_Task+0x3c0>)
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	3308      	adds	r3, #8
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d910      	bls.n	80023c8 <Control_Task+0x3a8>
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <Control_Task+0x3c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	1ad2      	subs	r2, r2, r3
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <Control_Task+0x3c8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d908      	bls.n	80023c8 <Control_Task+0x3a8>
	{
		nodeDetected=1;
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <Control_Task+0x3cc>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
 80023bc:	e004      	b.n	80023c8 <Control_Task+0x3a8>
	if(mode!=SKILL)return;
 80023be:	bf00      	nop
 80023c0:	e002      	b.n	80023c8 <Control_Task+0x3a8>
	if(control_task_tick>tick)return;
 80023c2:	bf00      	nop
 80023c4:	e000      	b.n	80023c8 <Control_Task+0x3a8>
	if(!readytorace)return;
 80023c6:	bf00      	nop
	}

}
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000002 	.word	0x20000002
 80023d4:	20000003 	.word	0x20000003
 80023d8:	20000514 	.word	0x20000514
 80023dc:	20000000 	.word	0x20000000
 80023e0:	20000268 	.word	0x20000268
 80023e4:	2000050c 	.word	0x2000050c
 80023e8:	20000510 	.word	0x20000510
 80023ec:	20000262 	.word	0x20000262

080023f0 <Mode_Selector>:


void Mode_Selector(UART_HandleTypeDef *huart_debugg, UART_HandleTypeDef *huart_stm)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08e      	sub	sp, #56	; 0x38
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
	//Milyen módban kell működni?
	uint8_t buffer[40];
	uint32_t tmp=0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34

	//HAL_FLASH_Unlock();
	tmp= *(__IO uint32_t *) FLASH_ADDRESS_SECTOR7; //FLASH-ből kiolvassuk, hogy milyen módban vagyunk
 80023fe:	4b49      	ldr	r3, [pc, #292]	; (8002524 <Mode_Selector+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	637b      	str	r3, [r7, #52]	; 0x34
	//HAL_FLASH_Lock();
	mode = (uint8_t)tmp;
 8002404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002406:	b2da      	uxtb	r2, r3
 8002408:	4b47      	ldr	r3, [pc, #284]	; (8002528 <Mode_Selector+0x138>)
 800240a:	701a      	strb	r2, [r3, #0]

	if(mode==SKILL)
 800240c:	4b46      	ldr	r3, [pc, #280]	; (8002528 <Mode_Selector+0x138>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b52      	cmp	r3, #82	; 0x52
 8002412:	d135      	bne.n	8002480 <Mode_Selector+0x90>
	{
		buffer[0] = CMD_MODE_SKILL; //szólunk a g0-nak, hogy ügyességi módban vagyunk
 8002414:	2352      	movs	r3, #82	; 0x52
 8002416:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8002418:	f107 010c 	add.w	r1, r7, #12
 800241c:	230a      	movs	r3, #10
 800241e:	2201      	movs	r2, #1
 8002420:	6838      	ldr	r0, [r7, #0]
 8002422:	f007 fb88 	bl	8009b36 <HAL_UART_Transmit>
		HAL_Delay(10);
 8002426:	200a      	movs	r0, #10
 8002428:	f002 ff28 	bl	800527c <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);//3 szór is szólunk neki, hogy tuti megkapja a módváltásról az üzenetet
 800242c:	f107 010c 	add.w	r1, r7, #12
 8002430:	230a      	movs	r3, #10
 8002432:	2201      	movs	r2, #1
 8002434:	6838      	ldr	r0, [r7, #0]
 8002436:	f007 fb7e 	bl	8009b36 <HAL_UART_Transmit>
		HAL_Delay(10);
 800243a:	200a      	movs	r0, #10
 800243c:	f002 ff1e 	bl	800527c <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8002440:	f107 010c 	add.w	r1, r7, #12
 8002444:	230a      	movs	r3, #10
 8002446:	2201      	movs	r2, #1
 8002448:	6838      	ldr	r0, [r7, #0]
 800244a:	f007 fb74 	bl	8009b36 <HAL_UART_Transmit>

		sprintf((char*)buffer,"Skill mode!\n\r"); //Debugg uart-ra is kiküldjük, hogy milyen módban vagyunk
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	4936      	ldr	r1, [pc, #216]	; (800252c <Mode_Selector+0x13c>)
 8002454:	4618      	mov	r0, r3
 8002456:	f009 f8d7 	bl	800b608 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	4618      	mov	r0, r3
 8002460:	f7fd fed6 	bl	8000210 <strlen>
 8002464:	4603      	mov	r3, r0
 8002466:	b29a      	uxth	r2, r3
 8002468:	f107 010c 	add.w	r1, r7, #12
 800246c:	2364      	movs	r3, #100	; 0x64
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f007 fb61 	bl	8009b36 <HAL_UART_Transmit>
		LED_NUCLEO(1); //A NUCLEO zöld LED-je világít, ha ügyeségi üzemmódban vagyunk
 8002474:	2201      	movs	r2, #1
 8002476:	2120      	movs	r1, #32
 8002478:	482d      	ldr	r0, [pc, #180]	; (8002530 <Mode_Selector+0x140>)
 800247a:	f004 fd99 	bl	8006fb0 <HAL_GPIO_WritePin>
	else
	{
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
	}
}
 800247e:	e04c      	b.n	800251a <Mode_Selector+0x12a>
	else if(mode==FAST)
 8002480:	4b29      	ldr	r3, [pc, #164]	; (8002528 <Mode_Selector+0x138>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b3f      	cmp	r3, #63	; 0x3f
 8002486:	d135      	bne.n	80024f4 <Mode_Selector+0x104>
		buffer[0] = CMD_MODE_FAST;
 8002488:	233f      	movs	r3, #63	; 0x3f
 800248a:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 800248c:	f107 010c 	add.w	r1, r7, #12
 8002490:	230a      	movs	r3, #10
 8002492:	2201      	movs	r2, #1
 8002494:	6838      	ldr	r0, [r7, #0]
 8002496:	f007 fb4e 	bl	8009b36 <HAL_UART_Transmit>
		HAL_Delay(10);
 800249a:	200a      	movs	r0, #10
 800249c:	f002 feee 	bl	800527c <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80024a0:	f107 010c 	add.w	r1, r7, #12
 80024a4:	230a      	movs	r3, #10
 80024a6:	2201      	movs	r2, #1
 80024a8:	6838      	ldr	r0, [r7, #0]
 80024aa:	f007 fb44 	bl	8009b36 <HAL_UART_Transmit>
		HAL_Delay(10);
 80024ae:	200a      	movs	r0, #10
 80024b0:	f002 fee4 	bl	800527c <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80024b4:	f107 010c 	add.w	r1, r7, #12
 80024b8:	230a      	movs	r3, #10
 80024ba:	2201      	movs	r2, #1
 80024bc:	6838      	ldr	r0, [r7, #0]
 80024be:	f007 fb3a 	bl	8009b36 <HAL_UART_Transmit>
		sprintf((char*)buffer,"Fast mode!\n\r");
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	491b      	ldr	r1, [pc, #108]	; (8002534 <Mode_Selector+0x144>)
 80024c8:	4618      	mov	r0, r3
 80024ca:	f009 f89d 	bl	800b608 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 80024ce:	f107 030c 	add.w	r3, r7, #12
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fd fe9c 	bl	8000210 <strlen>
 80024d8:	4603      	mov	r3, r0
 80024da:	b29a      	uxth	r2, r3
 80024dc:	f107 010c 	add.w	r1, r7, #12
 80024e0:	2364      	movs	r3, #100	; 0x64
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f007 fb27 	bl	8009b36 <HAL_UART_Transmit>
		LED_NUCLEO(0);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2120      	movs	r1, #32
 80024ec:	4810      	ldr	r0, [pc, #64]	; (8002530 <Mode_Selector+0x140>)
 80024ee:	f004 fd5f 	bl	8006fb0 <HAL_GPIO_WritePin>
}
 80024f2:	e012      	b.n	800251a <Mode_Selector+0x12a>
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	490f      	ldr	r1, [pc, #60]	; (8002538 <Mode_Selector+0x148>)
 80024fa:	4618      	mov	r0, r3
 80024fc:	f009 f884 	bl	800b608 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8002500:	f107 030c 	add.w	r3, r7, #12
 8002504:	4618      	mov	r0, r3
 8002506:	f7fd fe83 	bl	8000210 <strlen>
 800250a:	4603      	mov	r3, r0
 800250c:	b29a      	uxth	r2, r3
 800250e:	f107 010c 	add.w	r1, r7, #12
 8002512:	2364      	movs	r3, #100	; 0x64
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f007 fb0e 	bl	8009b36 <HAL_UART_Transmit>
}
 800251a:	bf00      	nop
 800251c:	3738      	adds	r7, #56	; 0x38
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	08060000 	.word	0x08060000
 8002528:	20000255 	.word	0x20000255
 800252c:	0800efd4 	.word	0x0800efd4
 8002530:	40020000 	.word	0x40020000
 8002534:	0800efe4 	.word	0x0800efe4
 8002538:	0800eff4 	.word	0x0800eff4
 800253c:	00000000 	.word	0x00000000

08002540 <Skill_Mode>:

//bemenet detect, kalozrobpoz; kimenet direction
float Skill_Mode(UART_HandleTypeDef *huart_debugg, float kP, float kD, uint32_t t)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	ed87 0a02 	vstr	s0, [r7, #8]
 800254c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
	static uint32_t t_prev=0;
	int byte=0;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
	static int byte_prev=0;
	uint8_t delta_byte;
	float p=0;
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
/*	uint8_t str[40];
	sprintf(str,"%d,  %d,  %d,  %d,  %d\n\r",rxBuf[1],rxBuf[2],rxBuf[3],rxBuf[4],rxBuf[5]);
	HAL_UART_Transmit(huart_debugg, str, strlen(str), 10);
*/

	if(LINE_CNT>3 || ignore)//ha éppen node-on vagyunk, akkor az átlagot követjük
 800255c:	4b8c      	ldr	r3, [pc, #560]	; (8002790 <Skill_Mode+0x250>)
 800255e:	785b      	ldrb	r3, [r3, #1]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d803      	bhi.n	800256c <Skill_Mode+0x2c>
 8002564:	4b8b      	ldr	r3, [pc, #556]	; (8002794 <Skill_Mode+0x254>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d022      	beq.n	80025b2 <Skill_Mode+0x72>
	{
		byte=0;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	e00a      	b.n	800258c <Skill_Mode+0x4c>
		{
			byte += rxBuf[i+2];
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	3302      	adds	r3, #2
 800257a:	4a85      	ldr	r2, [pc, #532]	; (8002790 <Skill_Mode+0x250>)
 800257c:	5cd3      	ldrb	r3, [r2, r3]
 800257e:	461a      	mov	r2, r3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	4413      	add	r3, r2
 8002584:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	3301      	adds	r3, #1
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	4b80      	ldr	r3, [pc, #512]	; (8002790 <Skill_Mode+0x250>)
 800258e:	785b      	ldrb	r3, [r3, #1]
 8002590:	461a      	mov	r2, r3
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	4293      	cmp	r3, r2
 8002596:	dbee      	blt.n	8002576 <Skill_Mode+0x36>
		}

		if(LINE_CNT) byte /= LINE_CNT;
 8002598:	4b7d      	ldr	r3, [pc, #500]	; (8002790 <Skill_Mode+0x250>)
 800259a:	785b      	ldrb	r3, [r3, #1]
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 810c 	beq.w	80027ba <Skill_Mode+0x27a>
 80025a2:	4b7b      	ldr	r3, [pc, #492]	; (8002790 <Skill_Mode+0x250>)
 80025a4:	785b      	ldrb	r3, [r3, #1]
 80025a6:	461a      	mov	r2, r3
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	e103      	b.n	80027ba <Skill_Mode+0x27a>
	}
	else if(path==LEFT)
 80025b2:	4b79      	ldr	r3, [pc, #484]	; (8002798 <Skill_Mode+0x258>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d15a      	bne.n	8002670 <Skill_Mode+0x130>
	{
		byte = LINE1; //az első vonalt kell követni
 80025ba:	4b75      	ldr	r3, [pc, #468]	; (8002790 <Skill_Mode+0x250>)
 80025bc:	789b      	ldrb	r3, [r3, #2]
 80025be:	61fb      	str	r3, [r7, #28]
		delta_byte=abs((int)byte-byte_prev);
 80025c0:	4b76      	ldr	r3, [pc, #472]	; (800279c <Skill_Mode+0x25c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bfb8      	it	lt
 80025cc:	425b      	neglt	r3, r3
 80025ce:	74fb      	strb	r3, [r7, #19]
		/**/
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	2b4b      	cmp	r3, #75	; 0x4b
 80025d4:	d903      	bls.n	80025de <Skill_Mode+0x9e>
 80025d6:	4b72      	ldr	r3, [pc, #456]	; (80027a0 <Skill_Mode+0x260>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d103      	bne.n	80025e6 <Skill_Mode+0xa6>
 80025de:	4b70      	ldr	r3, [pc, #448]	; (80027a0 <Skill_Mode+0x260>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d132      	bne.n	800264c <Skill_Mode+0x10c>
		{
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 80025e6:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <Skill_Mode+0x250>)
 80025e8:	785b      	ldrb	r3, [r3, #1]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d925      	bls.n	800263a <Skill_Mode+0xfa>
			{
				if(estuary==ESTUARY_MODE_OFF)t_prev=t;//ha most kapcsoltuk be a torkolatkompenzálást, akkor mostantól mérjük az eltelt időt
 80025ee:	4b6c      	ldr	r3, [pc, #432]	; (80027a0 <Skill_Mode+0x260>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d102      	bne.n	80025fc <Skill_Mode+0xbc>
 80025f6:	4a6b      	ldr	r2, [pc, #428]	; (80027a4 <Skill_Mode+0x264>)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6013      	str	r3, [r2, #0]
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 80025fc:	4b69      	ldr	r3, [pc, #420]	; (80027a4 <Skill_Mode+0x264>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002608:	d908      	bls.n	800261c <Skill_Mode+0xdc>
				{
					estuary=ESTUARY_MODE_OFF; //ha letelt a timeout kilépünk a kompenzálásból
 800260a:	4b65      	ldr	r3, [pc, #404]	; (80027a0 <Skill_Mode+0x260>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
					LED_G(0);
 8002610:	2201      	movs	r2, #1
 8002612:	2102      	movs	r1, #2
 8002614:	4864      	ldr	r0, [pc, #400]	; (80027a8 <Skill_Mode+0x268>)
 8002616:	f004 fccb 	bl	8006fb0 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 800261a:	e0ce      	b.n	80027ba <Skill_Mode+0x27a>
				}
				else //ha még nem telt le az timout idő
				{
					byte = rxBuf[1+LINE_CNT]; //ilyenkor az utolsó vonalat nézzük az első helyett
 800261c:	4b5c      	ldr	r3, [pc, #368]	; (8002790 <Skill_Mode+0x250>)
 800261e:	785b      	ldrb	r3, [r3, #1]
 8002620:	3301      	adds	r3, #1
 8002622:	4a5b      	ldr	r2, [pc, #364]	; (8002790 <Skill_Mode+0x250>)
 8002624:	5cd3      	ldrb	r3, [r2, r3]
 8002626:	61fb      	str	r3, [r7, #28]
					estuary=ESTUARY_MODE_ON; //öntartás
 8002628:	4b5d      	ldr	r3, [pc, #372]	; (80027a0 <Skill_Mode+0x260>)
 800262a:	2202      	movs	r2, #2
 800262c:	701a      	strb	r2, [r3, #0]
					LED_G(1);
 800262e:	2200      	movs	r2, #0
 8002630:	2102      	movs	r1, #2
 8002632:	485d      	ldr	r0, [pc, #372]	; (80027a8 <Skill_Mode+0x268>)
 8002634:	f004 fcbc 	bl	8006fb0 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 8002638:	e0bf      	b.n	80027ba <Skill_Mode+0x27a>
				}

			}
			else
			{
				estuary=ESTUARY_MODE_OFF; //ha nincs elég vonal kikapcsoljuk az öntartást (legalább2 vonal esetén beszélhetünk torkolatról)
 800263a:	4b59      	ldr	r3, [pc, #356]	; (80027a0 <Skill_Mode+0x260>)
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
				LED_G(0);
 8002640:	2201      	movs	r2, #1
 8002642:	2102      	movs	r1, #2
 8002644:	4858      	ldr	r0, [pc, #352]	; (80027a8 <Skill_Mode+0x268>)
 8002646:	f004 fcb3 	bl	8006fb0 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 800264a:	e0b6      	b.n	80027ba <Skill_Mode+0x27a>
			}
		}
		else if(delta_byte<ESTUARY_EXIT && estuary==ESTUARY_MODE_ON) //ha már eléggé összeszűkült a torkolat, akkor nem kell kompenzálni
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	2b2c      	cmp	r3, #44	; 0x2c
 8002650:	f200 80b3 	bhi.w	80027ba <Skill_Mode+0x27a>
 8002654:	4b52      	ldr	r3, [pc, #328]	; (80027a0 <Skill_Mode+0x260>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	f040 80ae 	bne.w	80027ba <Skill_Mode+0x27a>
		{
			estuary=ESTUARY_MODE_OFF;
 800265e:	4b50      	ldr	r3, [pc, #320]	; (80027a0 <Skill_Mode+0x260>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
			LED_G(0);
 8002664:	2201      	movs	r2, #1
 8002666:	2102      	movs	r1, #2
 8002668:	484f      	ldr	r0, [pc, #316]	; (80027a8 <Skill_Mode+0x268>)
 800266a:	f004 fca1 	bl	8006fb0 <HAL_GPIO_WritePin>
 800266e:	e0a4      	b.n	80027ba <Skill_Mode+0x27a>
		}

	}
	else if(path==RIGHT)
 8002670:	4b49      	ldr	r3, [pc, #292]	; (8002798 <Skill_Mode+0x258>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d158      	bne.n	800272a <Skill_Mode+0x1ea>
	{
		byte = rxBuf[1+LINE_CNT];//az utolsó vonalat kell követni
 8002678:	4b45      	ldr	r3, [pc, #276]	; (8002790 <Skill_Mode+0x250>)
 800267a:	785b      	ldrb	r3, [r3, #1]
 800267c:	3301      	adds	r3, #1
 800267e:	4a44      	ldr	r2, [pc, #272]	; (8002790 <Skill_Mode+0x250>)
 8002680:	5cd3      	ldrb	r3, [r2, r3]
 8002682:	61fb      	str	r3, [r7, #28]
		delta_byte=abs((int)byte-byte_prev);
 8002684:	4b45      	ldr	r3, [pc, #276]	; (800279c <Skill_Mode+0x25c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	bfb8      	it	lt
 8002690:	425b      	neglt	r3, r3
 8002692:	74fb      	strb	r3, [r7, #19]
		/**/
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	2b4b      	cmp	r3, #75	; 0x4b
 8002698:	d903      	bls.n	80026a2 <Skill_Mode+0x162>
 800269a:	4b41      	ldr	r3, [pc, #260]	; (80027a0 <Skill_Mode+0x260>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d103      	bne.n	80026aa <Skill_Mode+0x16a>
 80026a2:	4b3f      	ldr	r3, [pc, #252]	; (80027a0 <Skill_Mode+0x260>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d12f      	bne.n	800270a <Skill_Mode+0x1ca>
		{
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <Skill_Mode+0x250>)
 80026ac:	785b      	ldrb	r3, [r3, #1]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d922      	bls.n	80026f8 <Skill_Mode+0x1b8>
			{
				if(estuary==ESTUARY_MODE_OFF)t_prev=t;//ha most kapcsoltuk be a torkolatkompenzálást, akkor mostantól mérjük az eltelt időt
 80026b2:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <Skill_Mode+0x260>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d102      	bne.n	80026c0 <Skill_Mode+0x180>
 80026ba:	4a3a      	ldr	r2, [pc, #232]	; (80027a4 <Skill_Mode+0x264>)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6013      	str	r3, [r2, #0]
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 80026c0:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <Skill_Mode+0x264>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80026cc:	d908      	bls.n	80026e0 <Skill_Mode+0x1a0>
				{
					estuary=ESTUARY_MODE_OFF; //ha letelt a timeout kilépünk a kompenzálásból
 80026ce:	4b34      	ldr	r3, [pc, #208]	; (80027a0 <Skill_Mode+0x260>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
					LED_G(0);
 80026d4:	2201      	movs	r2, #1
 80026d6:	2102      	movs	r1, #2
 80026d8:	4833      	ldr	r0, [pc, #204]	; (80027a8 <Skill_Mode+0x268>)
 80026da:	f004 fc69 	bl	8006fb0 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 80026de:	e06c      	b.n	80027ba <Skill_Mode+0x27a>
				}
				else //ha még nem telt le az idő
				{
					byte = rxBuf[2]; //ilyenkor az első vonalat nézzük az utolsó helyett
 80026e0:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <Skill_Mode+0x250>)
 80026e2:	789b      	ldrb	r3, [r3, #2]
 80026e4:	61fb      	str	r3, [r7, #28]
					estuary=ESTUARY_MODE_ON; //öntartás
 80026e6:	4b2e      	ldr	r3, [pc, #184]	; (80027a0 <Skill_Mode+0x260>)
 80026e8:	2202      	movs	r2, #2
 80026ea:	701a      	strb	r2, [r3, #0]
					LED_G(1);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2102      	movs	r1, #2
 80026f0:	482d      	ldr	r0, [pc, #180]	; (80027a8 <Skill_Mode+0x268>)
 80026f2:	f004 fc5d 	bl	8006fb0 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 80026f6:	e060      	b.n	80027ba <Skill_Mode+0x27a>
				}

			}
			else
			{
				estuary=ESTUARY_MODE_OFF; //ha nincs elég vonal kikapcsoljuk az öntartást
 80026f8:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <Skill_Mode+0x260>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
				LED_G(0);
 80026fe:	2201      	movs	r2, #1
 8002700:	2102      	movs	r1, #2
 8002702:	4829      	ldr	r0, [pc, #164]	; (80027a8 <Skill_Mode+0x268>)
 8002704:	f004 fc54 	bl	8006fb0 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 8002708:	e057      	b.n	80027ba <Skill_Mode+0x27a>
			}
		}
		else if(delta_byte<ESTUARY_EXIT && estuary==ESTUARY_MODE_ON) //ha már eléggé összeszűkült a torkolat, akkor nem kell kompenzálni
 800270a:	7cfb      	ldrb	r3, [r7, #19]
 800270c:	2b2c      	cmp	r3, #44	; 0x2c
 800270e:	d854      	bhi.n	80027ba <Skill_Mode+0x27a>
 8002710:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <Skill_Mode+0x260>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d150      	bne.n	80027ba <Skill_Mode+0x27a>
		{
			estuary=ESTUARY_MODE_OFF;
 8002718:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <Skill_Mode+0x260>)
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
			LED_G(0);
 800271e:	2201      	movs	r2, #1
 8002720:	2102      	movs	r1, #2
 8002722:	4821      	ldr	r0, [pc, #132]	; (80027a8 <Skill_Mode+0x268>)
 8002724:	f004 fc44 	bl	8006fb0 <HAL_GPIO_WritePin>
 8002728:	e047      	b.n	80027ba <Skill_Mode+0x27a>
		}

	}

	else if(path==MIDDLE)
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <Skill_Mode+0x258>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d143      	bne.n	80027ba <Skill_Mode+0x27a>
	{
		if(LINE_CNT==1)byte = LINE1;//ha csak 1 vonal van, akkor azt követjük
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <Skill_Mode+0x250>)
 8002734:	785b      	ldrb	r3, [r3, #1]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d103      	bne.n	8002742 <Skill_Mode+0x202>
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <Skill_Mode+0x250>)
 800273c:	789b      	ldrb	r3, [r3, #2]
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	e03b      	b.n	80027ba <Skill_Mode+0x27a>
		else if(LINE_CNT==3)//ha 3 vonal van
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <Skill_Mode+0x250>)
 8002744:	785b      	ldrb	r3, [r3, #1]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d113      	bne.n	8002772 <Skill_Mode+0x232>
		{
			byte = rxBuf[3];//a középsőt követjük
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <Skill_Mode+0x250>)
 800274c:	78db      	ldrb	r3, [r3, #3]
 800274e:	61fb      	str	r3, [r7, #28]
			//folyamatosan nézzük, hogy az 1. és 3.vonal milyen messze van a vonalszenor középontjától
			tmp1=abs((int)LINE1-123);
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <Skill_Mode+0x250>)
 8002752:	789b      	ldrb	r3, [r3, #2]
 8002754:	3b7b      	subs	r3, #123	; 0x7b
 8002756:	2b00      	cmp	r3, #0
 8002758:	bfb8      	it	lt
 800275a:	425b      	neglt	r3, r3
 800275c:	4a13      	ldr	r2, [pc, #76]	; (80027ac <Skill_Mode+0x26c>)
 800275e:	6013      	str	r3, [r2, #0]
			tmp2=abs((int)LINE3-123);
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <Skill_Mode+0x250>)
 8002762:	791b      	ldrb	r3, [r3, #4]
 8002764:	3b7b      	subs	r3, #123	; 0x7b
 8002766:	2b00      	cmp	r3, #0
 8002768:	bfb8      	it	lt
 800276a:	425b      	neglt	r3, r3
 800276c:	4a10      	ldr	r2, [pc, #64]	; (80027b0 <Skill_Mode+0x270>)
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	e023      	b.n	80027ba <Skill_Mode+0x27a>
		}
		else if(LINE_CNT==2)//ha 2 vonal van, az azt jelenti, hogy az elágazás már annyira szétgáazott, hogy csak 2-t látunk a 3 vonalból
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <Skill_Mode+0x250>)
 8002774:	785b      	ldrb	r3, [r3, #1]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d11f      	bne.n	80027ba <Skill_Mode+0x27a>
		{
			if(tmp1<tmp2) byte = LINE1; //ha a jobboldali vonalat veszítettük el
 800277a:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <Skill_Mode+0x26c>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <Skill_Mode+0x270>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	da16      	bge.n	80027b4 <Skill_Mode+0x274>
 8002786:	4b02      	ldr	r3, [pc, #8]	; (8002790 <Skill_Mode+0x250>)
 8002788:	789b      	ldrb	r3, [r3, #2]
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	e015      	b.n	80027ba <Skill_Mode+0x27a>
 800278e:	bf00      	nop
 8002790:	20000568 	.word	0x20000568
 8002794:	20000264 	.word	0x20000264
 8002798:	20000263 	.word	0x20000263
 800279c:	20000528 	.word	0x20000528
 80027a0:	2000052c 	.word	0x2000052c
 80027a4:	20000530 	.word	0x20000530
 80027a8:	40020400 	.word	0x40020400
 80027ac:	20000534 	.word	0x20000534
 80027b0:	20000538 	.word	0x20000538
			else byte = LINE2; //ha a baloldali vonalat veszítettük el
 80027b4:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <Skill_Mode+0x328>)
 80027b6:	78db      	ldrb	r3, [r3, #3]
 80027b8:	61fb      	str	r3, [r7, #28]
		}
	}
	if(estuary==ESTUARY_MODE_INIT)estuary=ESTUARY_MODE_OFF;
 80027ba:	4b2c      	ldr	r3, [pc, #176]	; (800286c <Skill_Mode+0x32c>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <Skill_Mode+0x288>
 80027c2:	4b2a      	ldr	r3, [pc, #168]	; (800286c <Skill_Mode+0x32c>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]
	//p = (float)byte * 204/248.0-102;
	p = (float)byte * 204/255.0-102;
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	ee07 3a90 	vmov	s15, r3
 80027ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002870 <Skill_Mode+0x330>
 80027d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027da:	ee17 0a90 	vmov	r0, s15
 80027de:	f7fd fed3 	bl	8000588 <__aeabi_f2d>
 80027e2:	a31f      	add	r3, pc, #124	; (adr r3, 8002860 <Skill_Mode+0x320>)
 80027e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e8:	f7fe f850 	bl	800088c <__aeabi_ddiv>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <Skill_Mode+0x334>)
 80027fa:	f7fd fd65 	bl	80002c8 <__aeabi_dsub>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	f7fe f9ef 	bl	8000be8 <__aeabi_d2f>
 800280a:	4603      	mov	r3, r0
 800280c:	617b      	str	r3, [r7, #20]
	gamma = -kP * p  - kD*(p-p_prev);
 800280e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002812:	eeb1 7a67 	vneg.f32	s14, s15
 8002816:	edd7 7a05 	vldr	s15, [r7, #20]
 800281a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800281e:	4b16      	ldr	r3, [pc, #88]	; (8002878 <Skill_Mode+0x338>)
 8002820:	edd3 7a00 	vldr	s15, [r3]
 8002824:	edd7 6a05 	vldr	s13, [r7, #20]
 8002828:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800282c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <Skill_Mode+0x33c>)
 800283a:	edc3 7a00 	vstr	s15, [r3]
	p_prev = p;
 800283e:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <Skill_Mode+0x338>)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	6013      	str	r3, [r2, #0]
	byte_prev=byte;
 8002844:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <Skill_Mode+0x340>)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	6013      	str	r3, [r2, #0]

	return gamma;
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <Skill_Mode+0x33c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	ee07 3a90 	vmov	s15, r3
}
 8002852:	eeb0 0a67 	vmov.f32	s0, s15
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	f3af 8000 	nop.w
 8002860:	00000000 	.word	0x00000000
 8002864:	406fe000 	.word	0x406fe000
 8002868:	20000568 	.word	0x20000568
 800286c:	2000052c 	.word	0x2000052c
 8002870:	434c0000 	.word	0x434c0000
 8002874:	40598000 	.word	0x40598000
 8002878:	2000053c 	.word	0x2000053c
 800287c:	20000540 	.word	0x20000540
 8002880:	20000528 	.word	0x20000528

08002884 <Detect_Node3>:
	}

}

void Detect_Node3(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
	static uint32_t dt=0;
	static uint32_t t_prev=0;
	static uint8_t flag=0;

	dt=t-t_prev;
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <Detect_Node3+0x80>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <Detect_Node3+0x84>)
 8002898:	6013      	str	r3, [r2, #0]
	if(LINE_CNT==4 && dt> 1500)
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <Detect_Node3+0x88>)
 800289c:	785b      	ldrb	r3, [r3, #1]
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d10f      	bne.n	80028c2 <Detect_Node3+0x3e>
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <Detect_Node3+0x84>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d909      	bls.n	80028c2 <Detect_Node3+0x3e>
	{
		flag=1;
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <Detect_Node3+0x8c>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
		//nodeDetected=1;
		/*
		if(path==0)path=2;
		else if(path==2)path=0;*/
		ignore=1;
 80028b4:	4b17      	ldr	r3, [pc, #92]	; (8002914 <Detect_Node3+0x90>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]

		t_prev=t;
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <Detect_Node3+0x80>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	e00e      	b.n	80028e0 <Detect_Node3+0x5c>
	}
	else if(flag==1 && dt>300)
 80028c2:	4b13      	ldr	r3, [pc, #76]	; (8002910 <Detect_Node3+0x8c>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d10a      	bne.n	80028e0 <Detect_Node3+0x5c>
 80028ca:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <Detect_Node3+0x84>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80028d2:	d905      	bls.n	80028e0 <Detect_Node3+0x5c>
	{
		flag=0;
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <Detect_Node3+0x8c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
		nodeDetected=1;
 80028da:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <Detect_Node3+0x94>)
 80028dc:	2201      	movs	r2, #1
 80028de:	701a      	strb	r2, [r3, #0]
	}

	if(ignore && dt>200)
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <Detect_Node3+0x90>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <Detect_Node3+0x72>
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <Detect_Node3+0x84>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2bc8      	cmp	r3, #200	; 0xc8
 80028ee:	d902      	bls.n	80028f6 <Detect_Node3+0x72>
	{
		ignore=0;
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <Detect_Node3+0x90>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
	}
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000544 	.word	0x20000544
 8002908:	20000548 	.word	0x20000548
 800290c:	20000568 	.word	0x20000568
 8002910:	2000054c 	.word	0x2000054c
 8002914:	20000264 	.word	0x20000264
 8002918:	20000262 	.word	0x20000262
 800291c:	00000000 	.word	0x00000000

08002920 <Battery_Voltage_Compensate>:
float v=0;
//ha 1000 akkor a motor full csutkán megy előre
//ha -1000 akkor a motor full csutkán megy hátra

void Battery_Voltage_Compensate(ADC_HandleTypeDef *hadc_UNiMh,ADC_HandleTypeDef *hadc_ULiPo,UART_HandleTypeDef *huart_debugg)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b090      	sub	sp, #64	; 0x40
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
	char msg[30];
	uint32_t raw=0;
 800292c:	2300      	movs	r3, #0
 800292e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float bat;
	int i;

	//NiMh akku mérése
	for(i=0;i<20;i++)
 8002930:	2300      	movs	r3, #0
 8002932:	63bb      	str	r3, [r7, #56]	; 0x38
 8002934:	e016      	b.n	8002964 <Battery_Voltage_Compensate+0x44>
	{
		HAL_ADC_Start(hadc_UNiMh);
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f002 fd08 	bl	800534c <HAL_ADC_Start>
		HAL_Delay(10);
 800293c:	200a      	movs	r0, #10
 800293e:	f002 fc9d 	bl	800527c <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_UNiMh,20);
 8002942:	2114      	movs	r1, #20
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f002 fdd3 	bl	80054f0 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 800294a:	200a      	movs	r0, #10
 800294c:	f002 fc96 	bl	800527c <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_UNiMh);
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f002 fe58 	bl	8005606 <HAL_ADC_GetValue>
 8002956:	4602      	mov	r2, r0
 8002958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295a:	4413      	add	r3, r2
 800295c:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 800295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002960:	3301      	adds	r3, #1
 8002962:	63bb      	str	r3, [r7, #56]	; 0x38
 8002964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002966:	2b13      	cmp	r3, #19
 8002968:	dde5      	ble.n	8002936 <Battery_Voltage_Compensate+0x16>
	}
	bat=(float)raw * 0.00460575 / 20.0;//ez a mi feszültségünk V-ban
 800296a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002974:	ee17 0a90 	vmov	r0, s15
 8002978:	f7fd fe06 	bl	8000588 <__aeabi_f2d>
 800297c:	a37b      	add	r3, pc, #492	; (adr r3, 8002b6c <Battery_Voltage_Compensate+0x24c>)
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	f7fd fe59 	bl	8000638 <__aeabi_dmul>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	4b71      	ldr	r3, [pc, #452]	; (8002b58 <Battery_Voltage_Compensate+0x238>)
 8002994:	f7fd ff7a 	bl	800088c <__aeabi_ddiv>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	f7fe f922 	bl	8000be8 <__aeabi_d2f>
 80029a4:	4603      	mov	r3, r0
 80029a6:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"NiMh charge: %2.2f V \r\n", bat);
 80029a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029aa:	f7fd fded 	bl	8000588 <__aeabi_f2d>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	f107 0014 	add.w	r0, r7, #20
 80029b6:	4969      	ldr	r1, [pc, #420]	; (8002b5c <Battery_Voltage_Compensate+0x23c>)
 80029b8:	f008 fe26 	bl	800b608 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*) msg, strlen(msg),10);
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fc25 	bl	8000210 <strlen>
 80029c6:	4603      	mov	r3, r0
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	f107 0114 	add.w	r1, r7, #20
 80029ce:	230a      	movs	r3, #10
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f007 f8b0 	bl	8009b36 <HAL_UART_Transmit>

	if(bat)compensation=7.75/bat;
 80029d6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e2:	d009      	beq.n	80029f8 <Battery_Voltage_Compensate+0xd8>
 80029e4:	eef1 6a0f 	vmov.f32	s13, #31	; 0x40f80000  7.750
 80029e8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80029ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f0:	4b5b      	ldr	r3, [pc, #364]	; (8002b60 <Battery_Voltage_Compensate+0x240>)
 80029f2:	edc3 7a00 	vstr	s15, [r3]
 80029f6:	e003      	b.n	8002a00 <Battery_Voltage_Compensate+0xe0>
	else compensation=1;
 80029f8:	4b59      	ldr	r3, [pc, #356]	; (8002b60 <Battery_Voltage_Compensate+0x240>)
 80029fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029fe:	601a      	str	r2, [r3, #0]

	if(bat < 7.2)
 8002a00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a02:	f7fd fdc1 	bl	8000588 <__aeabi_f2d>
 8002a06:	a34e      	add	r3, pc, #312	; (adr r3, 8002b40 <Battery_Voltage_Compensate+0x220>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fe f886 	bl	8000b1c <__aeabi_dcmplt>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d010      	beq.n	8002a38 <Battery_Voltage_Compensate+0x118>
	{
		for(i=0;i<10;i++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a1a:	e00a      	b.n	8002a32 <Battery_Voltage_Compensate+0x112>
		{
			LED_Y_TOGGLE;
 8002a1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a20:	4850      	ldr	r0, [pc, #320]	; (8002b64 <Battery_Voltage_Compensate+0x244>)
 8002a22:	f004 fade 	bl	8006fe2 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8002a26:	20c8      	movs	r0, #200	; 0xc8
 8002a28:	f002 fc28 	bl	800527c <HAL_Delay>
		for(i=0;i<10;i++)
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2e:	3301      	adds	r3, #1
 8002a30:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a34:	2b09      	cmp	r3, #9
 8002a36:	ddf1      	ble.n	8002a1c <Battery_Voltage_Compensate+0xfc>
		}
	}

	//LiPo akku mérése
	raw=0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a40:	e016      	b.n	8002a70 <Battery_Voltage_Compensate+0x150>
	{
		HAL_ADC_Start(hadc_ULiPo);
 8002a42:	68b8      	ldr	r0, [r7, #8]
 8002a44:	f002 fc82 	bl	800534c <HAL_ADC_Start>
		HAL_Delay(10);
 8002a48:	200a      	movs	r0, #10
 8002a4a:	f002 fc17 	bl	800527c <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_ULiPo,20);
 8002a4e:	2114      	movs	r1, #20
 8002a50:	68b8      	ldr	r0, [r7, #8]
 8002a52:	f002 fd4d 	bl	80054f0 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 8002a56:	200a      	movs	r0, #10
 8002a58:	f002 fc10 	bl	800527c <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_ULiPo);
 8002a5c:	68b8      	ldr	r0, [r7, #8]
 8002a5e:	f002 fdd2 	bl	8005606 <HAL_ADC_GetValue>
 8002a62:	4602      	mov	r2, r0
 8002a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a66:	4413      	add	r3, r2
 8002a68:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a72:	2b13      	cmp	r3, #19
 8002a74:	dde5      	ble.n	8002a42 <Battery_Voltage_Compensate+0x122>

	}
	bat = (float)raw * 0.003241242 / 20.0 + 0.02;//ez a mi feszültségünk V-ban
 8002a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a78:	ee07 3a90 	vmov	s15, r3
 8002a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a80:	ee17 0a90 	vmov	r0, s15
 8002a84:	f7fd fd80 	bl	8000588 <__aeabi_f2d>
 8002a88:	a32f      	add	r3, pc, #188	; (adr r3, 8002b48 <Battery_Voltage_Compensate+0x228>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fdd3 	bl	8000638 <__aeabi_dmul>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	; (8002b58 <Battery_Voltage_Compensate+0x238>)
 8002aa0:	f7fd fef4 	bl	800088c <__aeabi_ddiv>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	a328      	add	r3, pc, #160	; (adr r3, 8002b50 <Battery_Voltage_Compensate+0x230>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	f7fd fc0b 	bl	80002cc <__adddf3>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	f7fe f893 	bl	8000be8 <__aeabi_d2f>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"LiPo charge: %2.2f V \r\n", bat);
 8002ac6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ac8:	f7fd fd5e 	bl	8000588 <__aeabi_f2d>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	f107 0014 	add.w	r0, r7, #20
 8002ad4:	4924      	ldr	r1, [pc, #144]	; (8002b68 <Battery_Voltage_Compensate+0x248>)
 8002ad6:	f008 fd97 	bl	800b608 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)msg, strlen(msg),10);
 8002ada:	f107 0314 	add.w	r3, r7, #20
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fb96 	bl	8000210 <strlen>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	f107 0114 	add.w	r1, r7, #20
 8002aec:	230a      	movs	r3, #10
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f007 f821 	bl	8009b36 <HAL_UART_Transmit>

	/**/
	if(bat < 10)
 8002af4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002af8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b04:	d510      	bpl.n	8002b28 <Battery_Voltage_Compensate+0x208>
	{
		for(i=0;i<20;i++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b0a:	e00a      	b.n	8002b22 <Battery_Voltage_Compensate+0x202>
		{
			LED_Y_TOGGLE;
 8002b0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b10:	4814      	ldr	r0, [pc, #80]	; (8002b64 <Battery_Voltage_Compensate+0x244>)
 8002b12:	f004 fa66 	bl	8006fe2 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8002b16:	20c8      	movs	r0, #200	; 0xc8
 8002b18:	f002 fbb0 	bl	800527c <HAL_Delay>
		for(i=0;i<20;i++)
 8002b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1e:	3301      	adds	r3, #1
 8002b20:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	2b13      	cmp	r3, #19
 8002b26:	ddf1      	ble.n	8002b0c <Battery_Voltage_Compensate+0x1ec>
		}
	}

	LED_Y(0);
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b2e:	480d      	ldr	r0, [pc, #52]	; (8002b64 <Battery_Voltage_Compensate+0x244>)
 8002b30:	f004 fa3e 	bl	8006fb0 <HAL_GPIO_WritePin>

}
 8002b34:	bf00      	nop
 8002b36:	3740      	adds	r7, #64	; 0x40
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	f3af 8000 	nop.w
 8002b40:	cccccccd 	.word	0xcccccccd
 8002b44:	401ccccc 	.word	0x401ccccc
 8002b48:	8c6df334 	.word	0x8c6df334
 8002b4c:	3f6a8d60 	.word	0x3f6a8d60
 8002b50:	47ae147b 	.word	0x47ae147b
 8002b54:	3f947ae1 	.word	0x3f947ae1
 8002b58:	40340000 	.word	0x40340000
 8002b5c:	0800f018 	.word	0x0800f018
 8002b60:	20000008 	.word	0x20000008
 8002b64:	40020400 	.word	0x40020400
 8002b68:	0800f030 	.word	0x0800f030
 8002b6c:	99fa11a9 	.word	0x99fa11a9
 8002b70:	3f72dd7a 	.word	0x3f72dd7a
 8002b74:	00000000 	.word	0x00000000

08002b78 <Measure_Velocity_Task>:

void Measure_Velocity_Task(TIM_HandleTypeDef *htim_encoder,uint32_t tick, uint32_t period)
{
 8002b78:	b5b0      	push	{r4, r5, r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
	static uint32_t tick_prev=0;
	static uint32_t measure_v_task_tick=4;
	static float alpha=0.3;
	static float invalpha=0.7;
	float v_uj=0;
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]

	if(measure_v_task_tick>tick) return;
 8002b8a:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <Measure_Velocity_Task+0xd8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d354      	bcc.n	8002c3e <Measure_Velocity_Task+0xc6>
	measure_v_task_tick= tick + period;
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	4a2d      	ldr	r2, [pc, #180]	; (8002c50 <Measure_Velocity_Task+0xd8>)
 8002b9c:	6013      	str	r3, [r2, #0]
	if(!tick_prev)
 8002b9e:	4b2d      	ldr	r3, [pc, #180]	; (8002c54 <Measure_Velocity_Task+0xdc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d103      	bne.n	8002bae <Measure_Velocity_Task+0x36>
	{
		tick_prev=tick;
 8002ba6:	4a2b      	ldr	r2, [pc, #172]	; (8002c54 <Measure_Velocity_Task+0xdc>)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	6013      	str	r3, [r2, #0]
		return;
 8002bac:	e048      	b.n	8002c40 <Measure_Velocity_Task+0xc8>
	}
	v_uj =((float) 0x8000 - (float) __HAL_TIM_GET_COUNTER(htim_encoder))*7.49/(float)period; //mm/s dimenzió
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	ee07 3a90 	vmov	s15, r3
 8002bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bbc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002c58 <Measure_Velocity_Task+0xe0>
 8002bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc4:	ee17 0a90 	vmov	r0, s15
 8002bc8:	f7fd fcde 	bl	8000588 <__aeabi_f2d>
 8002bcc:	a31e      	add	r3, pc, #120	; (adr r3, 8002c48 <Measure_Velocity_Task+0xd0>)
 8002bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd2:	f7fd fd31 	bl	8000638 <__aeabi_dmul>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4614      	mov	r4, r2
 8002bdc:	461d      	mov	r5, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be8:	ee17 0a90 	vmov	r0, s15
 8002bec:	f7fd fccc 	bl	8000588 <__aeabi_f2d>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	f7fd fe48 	bl	800088c <__aeabi_ddiv>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	f7fd fff0 	bl	8000be8 <__aeabi_d2f>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	617b      	str	r3, [r7, #20]
	TIM8->CNT=0x8000;
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <Measure_Velocity_Task+0xe4>)
 8002c0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24
	//tick_prev=tick;
	//exponenciális szűrés
	v = alpha*(float)v_uj + invalpha*v;
 8002c14:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <Measure_Velocity_Task+0xe8>)
 8002c16:	ed93 7a00 	vldr	s14, [r3]
 8002c1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <Measure_Velocity_Task+0xec>)
 8002c24:	edd3 6a00 	vldr	s13, [r3]
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <Measure_Velocity_Task+0xf0>)
 8002c2a:	edd3 7a00 	vldr	s15, [r3]
 8002c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c36:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <Measure_Velocity_Task+0xf0>)
 8002c38:	edc3 7a00 	vstr	s15, [r3]
 8002c3c:	e000      	b.n	8002c40 <Measure_Velocity_Task+0xc8>
	if(measure_v_task_tick>tick) return;
 8002c3e:	bf00      	nop
}
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bdb0      	pop	{r4, r5, r7, pc}
 8002c46:	bf00      	nop
 8002c48:	8f5c28f6 	.word	0x8f5c28f6
 8002c4c:	401df5c2 	.word	0x401df5c2
 8002c50:	2000000c 	.word	0x2000000c
 8002c54:	20000554 	.word	0x20000554
 8002c58:	47000000 	.word	0x47000000
 8002c5c:	40010400 	.word	0x40010400
 8002c60:	20000010 	.word	0x20000010
 8002c64:	20000014 	.word	0x20000014
 8002c68:	20000550 	.word	0x20000550
 8002c6c:	00000000 	.word	0x00000000

08002c70 <Motor_Drive_Task>:

void Motor_Drive_Task(TIM_HandleTypeDef *htim_motor, UART_HandleTypeDef *huart, uint32_t tick, uint32_t period) //DUTY paramtert kiszedtem -> változtassuk a globális változót
{
 8002c70:	b5b0      	push	{r4, r5, r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
	static uint32_t motor_drive_task_tick=5;
	static float f,u=0;

	int32_t ccr1;
	int32_t ccr2;
	if(motor_drive_task_tick>tick) return;
 8002c7e:	4b88      	ldr	r3, [pc, #544]	; (8002ea0 <Motor_Drive_Task+0x230>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	f0c0 80f8 	bcc.w	8002e7a <Motor_Drive_Task+0x20a>
	motor_drive_task_tick= tick + period;
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	4a83      	ldr	r2, [pc, #524]	; (8002ea0 <Motor_Drive_Task+0x230>)
 8002c92:	6013      	str	r3, [r2, #0]

	if(motorEnRemote && motorEnLineOk) //ha nem nyomtunk vészstopot és az akkuk is rendben vannak akkor pöröghet a motor
 8002c94:	4b83      	ldr	r3, [pc, #524]	; (8002ea4 <Motor_Drive_Task+0x234>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80b4 	beq.w	8002e06 <Motor_Drive_Task+0x196>
 8002c9e:	4b82      	ldr	r3, [pc, #520]	; (8002ea8 <Motor_Drive_Task+0x238>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 80af 	beq.w	8002e06 <Motor_Drive_Task+0x196>
	{
		//az u paraméter a bevatkozó jel minusz holtásávot adja meg
		u= KC * (v_ref - v) * compensation + f;
 8002ca8:	4b80      	ldr	r3, [pc, #512]	; (8002eac <Motor_Drive_Task+0x23c>)
 8002caa:	ed93 7a00 	vldr	s14, [r3]
 8002cae:	4b80      	ldr	r3, [pc, #512]	; (8002eb0 <Motor_Drive_Task+0x240>)
 8002cb0:	edd3 7a00 	vldr	s15, [r3]
 8002cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb8:	ee17 0a90 	vmov	r0, s15
 8002cbc:	f7fd fc64 	bl	8000588 <__aeabi_f2d>
 8002cc0:	a371      	add	r3, pc, #452	; (adr r3, 8002e88 <Motor_Drive_Task+0x218>)
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	f7fd fcb7 	bl	8000638 <__aeabi_dmul>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4614      	mov	r4, r2
 8002cd0:	461d      	mov	r5, r3
 8002cd2:	4b78      	ldr	r3, [pc, #480]	; (8002eb4 <Motor_Drive_Task+0x244>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd fc56 	bl	8000588 <__aeabi_f2d>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	f7fd fca8 	bl	8000638 <__aeabi_dmul>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4614      	mov	r4, r2
 8002cee:	461d      	mov	r5, r3
 8002cf0:	4b71      	ldr	r3, [pc, #452]	; (8002eb8 <Motor_Drive_Task+0x248>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd fc47 	bl	8000588 <__aeabi_f2d>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4620      	mov	r0, r4
 8002d00:	4629      	mov	r1, r5
 8002d02:	f7fd fae3 	bl	80002cc <__adddf3>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f7fd ff6b 	bl	8000be8 <__aeabi_d2f>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4a69      	ldr	r2, [pc, #420]	; (8002ebc <Motor_Drive_Task+0x24c>)
 8002d16:	6013      	str	r3, [r2, #0]
		if(u>880) u=880;
 8002d18:	4b68      	ldr	r3, [pc, #416]	; (8002ebc <Motor_Drive_Task+0x24c>)
 8002d1a:	edd3 7a00 	vldr	s15, [r3]
 8002d1e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8002ec0 <Motor_Drive_Task+0x250>
 8002d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2a:	dd03      	ble.n	8002d34 <Motor_Drive_Task+0xc4>
 8002d2c:	4b63      	ldr	r3, [pc, #396]	; (8002ebc <Motor_Drive_Task+0x24c>)
 8002d2e:	4a65      	ldr	r2, [pc, #404]	; (8002ec4 <Motor_Drive_Task+0x254>)
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e00c      	b.n	8002d4e <Motor_Drive_Task+0xde>
		else if(u<-200)u=-200;
 8002d34:	4b61      	ldr	r3, [pc, #388]	; (8002ebc <Motor_Drive_Task+0x24c>)
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002ec8 <Motor_Drive_Task+0x258>
 8002d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d46:	d502      	bpl.n	8002d4e <Motor_Drive_Task+0xde>
 8002d48:	4b5c      	ldr	r3, [pc, #368]	; (8002ebc <Motor_Drive_Task+0x24c>)
 8002d4a:	4a60      	ldr	r2, [pc, #384]	; (8002ecc <Motor_Drive_Task+0x25c>)
 8002d4c:	601a      	str	r2, [r3, #0]
		f = ZD*f + (1-ZD)*u;
 8002d4e:	4b5a      	ldr	r3, [pc, #360]	; (8002eb8 <Motor_Drive_Task+0x248>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd fc18 	bl	8000588 <__aeabi_f2d>
 8002d58:	a34d      	add	r3, pc, #308	; (adr r3, 8002e90 <Motor_Drive_Task+0x220>)
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	f7fd fc6b 	bl	8000638 <__aeabi_dmul>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4614      	mov	r4, r2
 8002d68:	461d      	mov	r5, r3
 8002d6a:	4b54      	ldr	r3, [pc, #336]	; (8002ebc <Motor_Drive_Task+0x24c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fc0a 	bl	8000588 <__aeabi_f2d>
 8002d74:	a348      	add	r3, pc, #288	; (adr r3, 8002e98 <Motor_Drive_Task+0x228>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f7fd fc5d 	bl	8000638 <__aeabi_dmul>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4620      	mov	r0, r4
 8002d84:	4629      	mov	r1, r5
 8002d86:	f7fd faa1 	bl	80002cc <__adddf3>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	f7fd ff29 	bl	8000be8 <__aeabi_d2f>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4a47      	ldr	r2, [pc, #284]	; (8002eb8 <Motor_Drive_Task+0x248>)
 8002d9a:	6013      	str	r3, [r2, #0]
		//ez alapján a kiadandó kitöltési tényező
		if(u>0) motorDuty=(int)u+70;
 8002d9c:	4b47      	ldr	r3, [pc, #284]	; (8002ebc <Motor_Drive_Task+0x24c>)
 8002d9e:	edd3 7a00 	vldr	s15, [r3]
 8002da2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002daa:	dd0a      	ble.n	8002dc2 <Motor_Drive_Task+0x152>
 8002dac:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <Motor_Drive_Task+0x24c>)
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002db6:	ee17 3a90 	vmov	r3, s15
 8002dba:	3346      	adds	r3, #70	; 0x46
 8002dbc:	4a44      	ldr	r2, [pc, #272]	; (8002ed0 <Motor_Drive_Task+0x260>)
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	e01b      	b.n	8002dfa <Motor_Drive_Task+0x18a>
		else if(u<0) motorDuty=(int)u-70;
 8002dc2:	4b3e      	ldr	r3, [pc, #248]	; (8002ebc <Motor_Drive_Task+0x24c>)
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
 8002dc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd0:	d50a      	bpl.n	8002de8 <Motor_Drive_Task+0x178>
 8002dd2:	4b3a      	ldr	r3, [pc, #232]	; (8002ebc <Motor_Drive_Task+0x24c>)
 8002dd4:	edd3 7a00 	vldr	s15, [r3]
 8002dd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ddc:	ee17 3a90 	vmov	r3, s15
 8002de0:	3b46      	subs	r3, #70	; 0x46
 8002de2:	4a3b      	ldr	r2, [pc, #236]	; (8002ed0 <Motor_Drive_Task+0x260>)
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e008      	b.n	8002dfa <Motor_Drive_Task+0x18a>
		else motorDuty=(int)u;
 8002de8:	4b34      	ldr	r3, [pc, #208]	; (8002ebc <Motor_Drive_Task+0x24c>)
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002df2:	ee17 2a90 	vmov	r2, s15
 8002df6:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <Motor_Drive_Task+0x260>)
 8002df8:	601a      	str	r2, [r3, #0]


		MOTOR_EN(1);
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	2140      	movs	r1, #64	; 0x40
 8002dfe:	4835      	ldr	r0, [pc, #212]	; (8002ed4 <Motor_Drive_Task+0x264>)
 8002e00:	f004 f8d6 	bl	8006fb0 <HAL_GPIO_WritePin>
 8002e04:	e00c      	b.n	8002e20 <Motor_Drive_Task+0x1b0>
	}
	else
	{	f=u=0;
 8002e06:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <Motor_Drive_Task+0x24c>)
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <Motor_Drive_Task+0x24c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a29      	ldr	r2, [pc, #164]	; (8002eb8 <Motor_Drive_Task+0x248>)
 8002e14:	6013      	str	r3, [r2, #0]
		MOTOR_EN(0); //amugy stop
 8002e16:	2200      	movs	r2, #0
 8002e18:	2140      	movs	r1, #64	; 0x40
 8002e1a:	482e      	ldr	r0, [pc, #184]	; (8002ed4 <Motor_Drive_Task+0x264>)
 8002e1c:	f004 f8c8 	bl	8006fb0 <HAL_GPIO_WritePin>
	}
	//A két érték amit irogatsz (TIM3->CCR1,CCR2) konkrét timer periféria regiszterek, nem feltétlen jó őket folyamatosan újraírni 10ms enként
	if(motorDuty!=motorDutyPrev)//csak akkor írjuk át őket ha tényleg muszáj (ha változtak az előző taskhívás óta)
 8002e20:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <Motor_Drive_Task+0x260>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b2c      	ldr	r3, [pc, #176]	; (8002ed8 <Motor_Drive_Task+0x268>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d021      	beq.n	8002e70 <Motor_Drive_Task+0x200>
	{
		ccr2 = (motorDuty + 1000)/2-1;
 8002e2c:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <Motor_Drive_Task+0x260>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002e34:	0fda      	lsrs	r2, r3, #31
 8002e36:	4413      	add	r3, r2
 8002e38:	105b      	asrs	r3, r3, #1
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
		if(ccr2>950)ccr2=950;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002e44:	4293      	cmp	r3, r2
 8002e46:	dd02      	ble.n	8002e4e <Motor_Drive_Task+0x1de>
 8002e48:	f240 33b6 	movw	r3, #950	; 0x3b6
 8002e4c:	617b      	str	r3, [r7, #20]
		if(ccr2<-950)ccr2=-950;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	4a22      	ldr	r2, [pc, #136]	; (8002edc <Motor_Drive_Task+0x26c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	da01      	bge.n	8002e5a <Motor_Drive_Task+0x1ea>
 8002e56:	4b21      	ldr	r3, [pc, #132]	; (8002edc <Motor_Drive_Task+0x26c>)
 8002e58:	617b      	str	r3, [r7, #20]
		ccr1= 998-ccr2;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8002e60:	3302      	adds	r3, #2
 8002e62:	613b      	str	r3, [r7, #16]

		//2 Referencia megadása
		//Ezeket a loopba kéne változtatni folyamatosan, pwm-elinditas mashova kell majd
		TIM3->CCR1=ccr1;
 8002e64:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <Motor_Drive_Task+0x270>)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2=ccr2;
 8002e6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <Motor_Drive_Task+0x270>)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	6393      	str	r3, [r2, #56]	; 0x38
	}
	motorDutyPrev=motorDuty;
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <Motor_Drive_Task+0x260>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <Motor_Drive_Task+0x268>)
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	e000      	b.n	8002e7c <Motor_Drive_Task+0x20c>
	if(motor_drive_task_tick>tick) return;
 8002e7a:	bf00      	nop
}
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bdb0      	pop	{r4, r5, r7, pc}
 8002e82:	bf00      	nop
 8002e84:	f3af 8000 	nop.w
 8002e88:	30be0ded 	.word	0x30be0ded
 8002e8c:	3fd02a99 	.word	0x3fd02a99
 8002e90:	9b3d07c8 	.word	0x9b3d07c8
 8002e94:	3fef9f55 	.word	0x3fef9f55
 8002e98:	30be0e00 	.word	0x30be0e00
 8002e9c:	3f882a99 	.word	0x3f882a99
 8002ea0:	20000018 	.word	0x20000018
 8002ea4:	2000095c 	.word	0x2000095c
 8002ea8:	2000095d 	.word	0x2000095d
 8002eac:	20000258 	.word	0x20000258
 8002eb0:	20000550 	.word	0x20000550
 8002eb4:	20000008 	.word	0x20000008
 8002eb8:	20000558 	.word	0x20000558
 8002ebc:	2000055c 	.word	0x2000055c
 8002ec0:	445c0000 	.word	0x445c0000
 8002ec4:	445c0000 	.word	0x445c0000
 8002ec8:	c3480000 	.word	0xc3480000
 8002ecc:	c3480000 	.word	0xc3480000
 8002ed0:	20000560 	.word	0x20000560
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	20000564 	.word	0x20000564
 8002edc:	fffffc4a 	.word	0xfffffc4a
 8002ee0:	40000400 	.word	0x40000400

08002ee4 <G0_Read_Fast>:
uint8_t txBuf[]={CMD_READ_SKILL_FORWARD};
uint8_t rxBuf[10];


uint8_t G0_Read_Fast(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]

	uint8_t state=0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	73fb      	strb	r3, [r7, #15]
	txBuf[0]=CMD_READ_FAST;
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <G0_Read_Fast+0x5c>)
 8002ef4:	222a      	movs	r2, #42	; 0x2a
 8002ef6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 1);
 8002ef8:	2301      	movs	r3, #1
 8002efa:	2201      	movs	r2, #1
 8002efc:	4910      	ldr	r1, [pc, #64]	; (8002f40 <G0_Read_Fast+0x5c>)
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f006 fe19 	bl	8009b36 <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 8, 2);
 8002f04:	2302      	movs	r3, #2
 8002f06:	2208      	movs	r2, #8
 8002f08:	490e      	ldr	r1, [pc, #56]	; (8002f44 <G0_Read_Fast+0x60>)
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f006 fea5 	bl	8009c5a <HAL_UART_Receive>
 8002f10:	4603      	mov	r3, r0
 8002f12:	73fb      	strb	r3, [r7, #15]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <G0_Read_Fast+0x64>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE) && (rxBuf[7]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <G0_Read_Fast+0x50>
 8002f20:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <G0_Read_Fast+0x60>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b17      	cmp	r3, #23
 8002f26:	d105      	bne.n	8002f34 <G0_Read_Fast+0x50>
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <G0_Read_Fast+0x60>)
 8002f2a:	79db      	ldrb	r3, [r3, #7]
 8002f2c:	2b12      	cmp	r3, #18
 8002f2e:	d101      	bne.n	8002f34 <G0_Read_Fast+0x50>
	{
		return 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e000      	b.n	8002f36 <G0_Read_Fast+0x52>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8002f34:	2301      	movs	r3, #1
	}
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	2000001c 	.word	0x2000001c
 8002f44:	20000568 	.word	0x20000568
 8002f48:	2000095d 	.word	0x2000095d

08002f4c <G0_Read_Skill>:

uint8_t G0_Read_Skill(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint8_t command)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	4613      	mov	r3, r2
 8002f58:	71fb      	strb	r3, [r7, #7]
	uint8_t state=1;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	75fb      	strb	r3, [r7, #23]
	txBuf[0]=command;
 8002f5e:	4a13      	ldr	r2, [pc, #76]	; (8002fac <G0_Read_Skill+0x60>)
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 1);
 8002f64:	2301      	movs	r3, #1
 8002f66:	2201      	movs	r2, #1
 8002f68:	4910      	ldr	r1, [pc, #64]	; (8002fac <G0_Read_Skill+0x60>)
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f006 fde3 	bl	8009b36 <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 10, 2);
 8002f70:	2302      	movs	r3, #2
 8002f72:	220a      	movs	r2, #10
 8002f74:	490e      	ldr	r1, [pc, #56]	; (8002fb0 <G0_Read_Skill+0x64>)
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f006 fe6f 	bl	8009c5a <HAL_UART_Receive>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	75fb      	strb	r3, [r7, #23]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <G0_Read_Skill+0x68>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE) && (rxBuf[9]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <G0_Read_Skill+0x54>
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <G0_Read_Skill+0x64>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b17      	cmp	r3, #23
 8002f92:	d105      	bne.n	8002fa0 <G0_Read_Skill+0x54>
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <G0_Read_Skill+0x64>)
 8002f96:	7a5b      	ldrb	r3, [r3, #9]
 8002f98:	2b12      	cmp	r3, #18
 8002f9a:	d101      	bne.n	8002fa0 <G0_Read_Skill+0x54>
	{
		return 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <G0_Read_Skill+0x56>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8002fa0:	2301      	movs	r3, #1
	}
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	2000001c 	.word	0x2000001c
 8002fb0:	20000568 	.word	0x20000568
 8002fb4:	2000095d 	.word	0x2000095d

08002fb8 <Line_Track_Task>:

void Line_Track_Task(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint32_t tick, uint32_t period)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
	static float PHI;
	static float gamma=0;
	static uint32_t ccr_rear_prev=0;
	static uint32_t ccr_front_prev=0;

	if(line_track_task_tick>tick) return;
 8002fc6:	4baa      	ldr	r3, [pc, #680]	; (8003270 <Line_Track_Task+0x2b8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	f0c0 81fb 	bcc.w	80033c8 <Line_Track_Task+0x410>
	line_track_task_tick = tick + period;
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	4aa5      	ldr	r2, [pc, #660]	; (8003270 <Line_Track_Task+0x2b8>)
 8002fda:	6013      	str	r3, [r2, #0]

	if(mode == SKILL)
 8002fdc:	4ba5      	ldr	r3, [pc, #660]	; (8003274 <Line_Track_Task+0x2bc>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b52      	cmp	r3, #82	; 0x52
 8002fe2:	f040 8171 	bne.w	80032c8 <Line_Track_Task+0x310>
	{
		//if(orientation==FORWARD) //ELŐREMENET
		if(orientation==FORWARD)
 8002fe6:	4ba4      	ldr	r3, [pc, #656]	; (8003278 <Line_Track_Task+0x2c0>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f040 808a 	bne.w	8003104 <Line_Track_Task+0x14c>
		{
			if(G0_Read_Skill(huart_stm, huart_debugg,CMD_READ_SKILL_FORWARD)) return;
 8002ff0:	2239      	movs	r2, #57	; 0x39
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f7ff ffa9 	bl	8002f4c <G0_Read_Skill>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f040 81e5 	bne.w	80033cc <Line_Track_Task+0x414>
			v_ref=1100;
 8003002:	4b9e      	ldr	r3, [pc, #632]	; (800327c <Line_Track_Task+0x2c4>)
 8003004:	4a9e      	ldr	r2, [pc, #632]	; (8003280 <Line_Track_Task+0x2c8>)
 8003006:	601a      	str	r2, [r3, #0]
			Detect_Node3(huart_debugg, tick);
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	68b8      	ldr	r0, [r7, #8]
 800300c:	f7ff fc3a 	bl	8002884 <Detect_Node3>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8003010:	4b9c      	ldr	r3, [pc, #624]	; (8003284 <Line_Track_Task+0x2cc>)
 8003012:	785b      	ldrb	r3, [r3, #1]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 81db 	beq.w	80033d0 <Line_Track_Task+0x418>
 800301a:	4b9a      	ldr	r3, [pc, #616]	; (8003284 <Line_Track_Task+0x2cc>)
 800301c:	785b      	ldrb	r3, [r3, #1]
 800301e:	2b04      	cmp	r3, #4
 8003020:	f200 81d6 	bhi.w	80033d0 <Line_Track_Task+0x418>

			gamma = Skill_Mode(huart_debugg, -0.004, -0.05, tick);
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	eddf 0a98 	vldr	s1, [pc, #608]	; 8003288 <Line_Track_Task+0x2d0>
 800302a:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800328c <Line_Track_Task+0x2d4>
 800302e:	68b8      	ldr	r0, [r7, #8]
 8003030:	f7ff fa86 	bl	8002540 <Skill_Mode>
 8003034:	eef0 7a40 	vmov.f32	s15, s0
 8003038:	4b95      	ldr	r3, [pc, #596]	; (8003290 <Line_Track_Task+0x2d8>)
 800303a:	edc3 7a00 	vstr	s15, [r3]
			PHI = atan((L/(L+D_FRONT))*tan(gamma));
 800303e:	4b94      	ldr	r3, [pc, #592]	; (8003290 <Line_Track_Task+0x2d8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd faa0 	bl	8000588 <__aeabi_f2d>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	ec43 2b10 	vmov	d0, r2, r3
 8003050:	f00a fefe 	bl	800de50 <tan>
 8003054:	ec51 0b10 	vmov	r0, r1, d0
 8003058:	a381      	add	r3, pc, #516	; (adr r3, 8003260 <Line_Track_Task+0x2a8>)
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	f7fd faeb 	bl	8000638 <__aeabi_dmul>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	ec43 2b17 	vmov	d7, r2, r3
 800306a:	eeb0 0a47 	vmov.f32	s0, s14
 800306e:	eef0 0a67 	vmov.f32	s1, s15
 8003072:	f00a fd41 	bl	800daf8 <atan>
 8003076:	ec53 2b10 	vmov	r2, r3, d0
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fdb3 	bl	8000be8 <__aeabi_d2f>
 8003082:	4603      	mov	r3, r0
 8003084:	4a83      	ldr	r2, [pc, #524]	; (8003294 <Line_Track_Task+0x2dc>)
 8003086:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(-1470 * PHI + SERVO_FRONT_CCR_MIDDLE);//balra kanyarodás
 8003088:	4b82      	ldr	r3, [pc, #520]	; (8003294 <Line_Track_Task+0x2dc>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8003298 <Line_Track_Task+0x2e0>
 8003092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003096:	ed9f 7a81 	vldr	s14, [pc, #516]	; 800329c <Line_Track_Task+0x2e4>
 800309a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800309e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030a2:	ee17 3a90 	vmov	r3, s15
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b7d      	ldr	r3, [pc, #500]	; (80032a0 <Line_Track_Task+0x2e8>)
 80030ac:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 80030ae:	4b7c      	ldr	r3, [pc, #496]	; (80032a0 <Line_Track_Task+0x2e8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80030b6:	dd04      	ble.n	80030c2 <Line_Track_Task+0x10a>
			{
				ccr = CCR_FRONT_MAX;
 80030b8:	4b79      	ldr	r3, [pc, #484]	; (80032a0 <Line_Track_Task+0x2e8>)
 80030ba:	f44f 7261 	mov.w	r2, #900	; 0x384
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e008      	b.n	80030d4 <Line_Track_Task+0x11c>
			}
			else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 80030c2:	4b77      	ldr	r3, [pc, #476]	; (80032a0 <Line_Track_Task+0x2e8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80030ca:	da03      	bge.n	80030d4 <Line_Track_Task+0x11c>
			{
				ccr = CCR_FRONT_MIN;
 80030cc:	4b74      	ldr	r3, [pc, #464]	; (80032a0 <Line_Track_Task+0x2e8>)
 80030ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80030d2:	601a      	str	r2, [r3, #0]
			}
			TIM2->CCR1 = ccr;
 80030d4:	4b72      	ldr	r3, [pc, #456]	; (80032a0 <Line_Track_Task+0x2e8>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030dc:	635a      	str	r2, [r3, #52]	; 0x34
			ccr_front_prev= ccr;
 80030de:	4b70      	ldr	r3, [pc, #448]	; (80032a0 <Line_Track_Task+0x2e8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	4b6f      	ldr	r3, [pc, #444]	; (80032a4 <Line_Track_Task+0x2ec>)
 80030e6:	601a      	str	r2, [r3, #0]
			if(ccr_rear_prev!=SERVO_REAR_CCR_MIDDLE) TIM1->CCR4 = SERVO_REAR_CCR_MIDDLE;
 80030e8:	4b6f      	ldr	r3, [pc, #444]	; (80032a8 <Line_Track_Task+0x2f0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f5b3 7f2c 	cmp.w	r3, #688	; 0x2b0
 80030f0:	d003      	beq.n	80030fa <Line_Track_Task+0x142>
 80030f2:	4b6e      	ldr	r3, [pc, #440]	; (80032ac <Line_Track_Task+0x2f4>)
 80030f4:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
			ccr_rear_prev=SERVO_REAR_CCR_MIDDLE;
 80030fa:	4b6b      	ldr	r3, [pc, #428]	; (80032a8 <Line_Track_Task+0x2f0>)
 80030fc:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	e16e      	b.n	80033e2 <Line_Track_Task+0x42a>
		}
		else if(orientation==REVERSE)//TOLATÁS
 8003104:	4b5c      	ldr	r3, [pc, #368]	; (8003278 <Line_Track_Task+0x2c0>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b01      	cmp	r3, #1
 800310a:	f040 816a 	bne.w	80033e2 <Line_Track_Task+0x42a>
		{
			if(G0_Read_Skill(huart_stm, huart_debugg,CMD_READ_SKILL_REVERSE)) return;
 800310e:	2291      	movs	r2, #145	; 0x91
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7ff ff1a 	bl	8002f4c <G0_Read_Skill>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	f040 815a 	bne.w	80033d4 <Line_Track_Task+0x41c>
			v_ref=-1100;
 8003120:	4b56      	ldr	r3, [pc, #344]	; (800327c <Line_Track_Task+0x2c4>)
 8003122:	4a63      	ldr	r2, [pc, #396]	; (80032b0 <Line_Track_Task+0x2f8>)
 8003124:	601a      	str	r2, [r3, #0]
			Detect_Node3(huart_debugg, tick);
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	68b8      	ldr	r0, [r7, #8]
 800312a:	f7ff fbab 	bl	8002884 <Detect_Node3>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 800312e:	4b55      	ldr	r3, [pc, #340]	; (8003284 <Line_Track_Task+0x2cc>)
 8003130:	785b      	ldrb	r3, [r3, #1]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8150 	beq.w	80033d8 <Line_Track_Task+0x420>
 8003138:	4b52      	ldr	r3, [pc, #328]	; (8003284 <Line_Track_Task+0x2cc>)
 800313a:	785b      	ldrb	r3, [r3, #1]
 800313c:	2b04      	cmp	r3, #4
 800313e:	f200 814b 	bhi.w	80033d8 <Line_Track_Task+0x420>

			gamma = Skill_Mode(huart_debugg, 0.005, 0.12, tick);
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	eddf 0a5b 	vldr	s1, [pc, #364]	; 80032b4 <Line_Track_Task+0x2fc>
 8003148:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 80032b8 <Line_Track_Task+0x300>
 800314c:	68b8      	ldr	r0, [r7, #8]
 800314e:	f7ff f9f7 	bl	8002540 <Skill_Mode>
 8003152:	eef0 7a40 	vmov.f32	s15, s0
 8003156:	4b4e      	ldr	r3, [pc, #312]	; (8003290 <Line_Track_Task+0x2d8>)
 8003158:	edc3 7a00 	vstr	s15, [r3]
			PHI = atan((L/(L+D_REAR))*tan(gamma));////////////////////kiszámolni kézzel
 800315c:	4b4c      	ldr	r3, [pc, #304]	; (8003290 <Line_Track_Task+0x2d8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd fa11 	bl	8000588 <__aeabi_f2d>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	ec43 2b10 	vmov	d0, r2, r3
 800316e:	f00a fe6f 	bl	800de50 <tan>
 8003172:	ec51 0b10 	vmov	r0, r1, d0
 8003176:	a33c      	add	r3, pc, #240	; (adr r3, 8003268 <Line_Track_Task+0x2b0>)
 8003178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317c:	f7fd fa5c 	bl	8000638 <__aeabi_dmul>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	ec43 2b17 	vmov	d7, r2, r3
 8003188:	eeb0 0a47 	vmov.f32	s0, s14
 800318c:	eef0 0a67 	vmov.f32	s1, s15
 8003190:	f00a fcb2 	bl	800daf8 <atan>
 8003194:	ec53 2b10 	vmov	r2, r3, d0
 8003198:	4610      	mov	r0, r2
 800319a:	4619      	mov	r1, r3
 800319c:	f7fd fd24 	bl	8000be8 <__aeabi_d2f>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4a3c      	ldr	r2, [pc, #240]	; (8003294 <Line_Track_Task+0x2dc>)
 80031a4:	6013      	str	r3, [r2, #0]
			if(PHI>0)ccr = (uint16_t)(1100 * PHI + SERVO_REAR_CCR_MIDDLE);
 80031a6:	4b3b      	ldr	r3, [pc, #236]	; (8003294 <Line_Track_Task+0x2dc>)
 80031a8:	edd3 7a00 	vldr	s15, [r3]
 80031ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b4:	dd13      	ble.n	80031de <Line_Track_Task+0x226>
 80031b6:	4b37      	ldr	r3, [pc, #220]	; (8003294 <Line_Track_Task+0x2dc>)
 80031b8:	edd3 7a00 	vldr	s15, [r3]
 80031bc:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80032bc <Line_Track_Task+0x304>
 80031c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031c4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80032c0 <Line_Track_Task+0x308>
 80031c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031d0:	ee17 3a90 	vmov	r3, s15
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <Line_Track_Task+0x2e8>)
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e012      	b.n	8003204 <Line_Track_Task+0x24c>
			else ccr = (uint16_t)(1250 * PHI + SERVO_REAR_CCR_MIDDLE);
 80031de:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <Line_Track_Task+0x2dc>)
 80031e0:	edd3 7a00 	vldr	s15, [r3]
 80031e4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80032c4 <Line_Track_Task+0x30c>
 80031e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ec:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80032c0 <Line_Track_Task+0x308>
 80031f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031f8:	ee17 3a90 	vmov	r3, s15
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <Line_Track_Task+0x2e8>)
 8003202:	601a      	str	r2, [r3, #0]
			//HÁTSÓ SZERVÓ
			if(ccr > CCR_REAR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8003204:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <Line_Track_Task+0x2e8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 800320c:	dd04      	ble.n	8003218 <Line_Track_Task+0x260>
			{
				ccr = CCR_REAR_MAX;
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <Line_Track_Task+0x2e8>)
 8003210:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	e008      	b.n	800322a <Line_Track_Task+0x272>
			}
			else if(ccr < CCR_REAR_MIN)//egyik irányba se
 8003218:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <Line_Track_Task+0x2e8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8003220:	da03      	bge.n	800322a <Line_Track_Task+0x272>
			{
				ccr = CCR_REAR_MIN;
 8003222:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <Line_Track_Task+0x2e8>)
 8003224:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8003228:	601a      	str	r2, [r3, #0]
			}
			TIM1->CCR4 = ccr;
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <Line_Track_Task+0x2e8>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <Line_Track_Task+0x2f4>)
 8003230:	641a      	str	r2, [r3, #64]	; 0x40
			ccr_rear_prev=ccr;
 8003232:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <Line_Track_Task+0x2e8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <Line_Track_Task+0x2f0>)
 800323a:	601a      	str	r2, [r3, #0]
			if(ccr_front_prev!=SERVO_FRONT_CCR_MIDDLE) TIM2->CCR1 = SERVO_FRONT_CCR_MIDDLE;
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <Line_Track_Task+0x2ec>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003244:	d004      	beq.n	8003250 <Line_Track_Task+0x298>
 8003246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800324a:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800324e:	635a      	str	r2, [r3, #52]	; 0x34
			ccr_front_prev=SERVO_FRONT_CCR_MIDDLE;
 8003250:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <Line_Track_Task+0x2ec>)
 8003252:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e0c3      	b.n	80033e2 <Line_Track_Task+0x42a>
 800325a:	bf00      	nop
 800325c:	f3af 8000 	nop.w
 8003260:	c4830201 	.word	0xc4830201
 8003264:	3fe73a26 	.word	0x3fe73a26
 8003268:	a3f47e90 	.word	0xa3f47e90
 800326c:	3fe8fd1f 	.word	0x3fe8fd1f
 8003270:	20000574 	.word	0x20000574
 8003274:	20000255 	.word	0x20000255
 8003278:	20000261 	.word	0x20000261
 800327c:	20000258 	.word	0x20000258
 8003280:	44898000 	.word	0x44898000
 8003284:	20000568 	.word	0x20000568
 8003288:	bd4ccccd 	.word	0xbd4ccccd
 800328c:	bb83126f 	.word	0xbb83126f
 8003290:	20000578 	.word	0x20000578
 8003294:	2000057c 	.word	0x2000057c
 8003298:	c4b7c000 	.word	0xc4b7c000
 800329c:	44300000 	.word	0x44300000
 80032a0:	20000020 	.word	0x20000020
 80032a4:	20000580 	.word	0x20000580
 80032a8:	20000584 	.word	0x20000584
 80032ac:	40010000 	.word	0x40010000
 80032b0:	c4898000 	.word	0xc4898000
 80032b4:	3df5c28f 	.word	0x3df5c28f
 80032b8:	3ba3d70a 	.word	0x3ba3d70a
 80032bc:	44898000 	.word	0x44898000
 80032c0:	442c0000 	.word	0x442c0000
 80032c4:	449c4000 	.word	0x449c4000
		}

	}
	/*****Gyorsasági pálya üzemmód******/
	else if(mode == FAST)
 80032c8:	4b49      	ldr	r3, [pc, #292]	; (80033f0 <Line_Track_Task+0x438>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b3f      	cmp	r3, #63	; 0x3f
 80032ce:	f040 8088 	bne.w	80033e2 <Line_Track_Task+0x42a>
	{
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f7ff fe05 	bl	8002ee4 <G0_Read_Fast>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d17d      	bne.n	80033dc <Line_Track_Task+0x424>
		if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80032e0:	4b44      	ldr	r3, [pc, #272]	; (80033f4 <Line_Track_Task+0x43c>)
 80032e2:	785b      	ldrb	r3, [r3, #1]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d07b      	beq.n	80033e0 <Line_Track_Task+0x428>
 80032e8:	4b42      	ldr	r3, [pc, #264]	; (80033f4 <Line_Track_Task+0x43c>)
 80032ea:	785b      	ldrb	r3, [r3, #1]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d877      	bhi.n	80033e0 <Line_Track_Task+0x428>
		gamma = Fast_Mode(huart_debugg,tick);
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	68b8      	ldr	r0, [r7, #8]
 80032f4:	f000 f890 	bl	8003418 <Fast_Mode>
 80032f8:	eef0 7a40 	vmov.f32	s15, s0
 80032fc:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <Line_Track_Task+0x440>)
 80032fe:	edc3 7a00 	vstr	s15, [r3]
		PHI = atan((L/(L+D_FRONT))*tan(gamma));
 8003302:	4b3d      	ldr	r3, [pc, #244]	; (80033f8 <Line_Track_Task+0x440>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd f93e 	bl	8000588 <__aeabi_f2d>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	ec43 2b10 	vmov	d0, r2, r3
 8003314:	f00a fd9c 	bl	800de50 <tan>
 8003318:	ec51 0b10 	vmov	r0, r1, d0
 800331c:	a332      	add	r3, pc, #200	; (adr r3, 80033e8 <Line_Track_Task+0x430>)
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	f7fd f989 	bl	8000638 <__aeabi_dmul>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	ec43 2b17 	vmov	d7, r2, r3
 800332e:	eeb0 0a47 	vmov.f32	s0, s14
 8003332:	eef0 0a67 	vmov.f32	s1, s15
 8003336:	f00a fbdf 	bl	800daf8 <atan>
 800333a:	ec53 2b10 	vmov	r2, r3, d0
 800333e:	4610      	mov	r0, r2
 8003340:	4619      	mov	r1, r3
 8003342:	f7fd fc51 	bl	8000be8 <__aeabi_d2f>
 8003346:	4603      	mov	r3, r0
 8003348:	4a2c      	ldr	r2, [pc, #176]	; (80033fc <Line_Track_Task+0x444>)
 800334a:	6013      	str	r3, [r2, #0]
		ccr = (uint16_t)(-SERVO_M * PHI + SERVO_FRONT_CCR_MIDDLE);
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <Line_Track_Task+0x444>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003400 <Line_Track_Task+0x448>
 8003356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800335a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003404 <Line_Track_Task+0x44c>
 800335e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003366:	ee17 3a90 	vmov	r3, s15
 800336a:	b29b      	uxth	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	4b26      	ldr	r3, [pc, #152]	; (8003408 <Line_Track_Task+0x450>)
 8003370:	601a      	str	r2, [r3, #0]

		if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8003372:	4b25      	ldr	r3, [pc, #148]	; (8003408 <Line_Track_Task+0x450>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800337a:	dd04      	ble.n	8003386 <Line_Track_Task+0x3ce>
		{
			ccr = CCR_FRONT_MAX;
 800337c:	4b22      	ldr	r3, [pc, #136]	; (8003408 <Line_Track_Task+0x450>)
 800337e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e008      	b.n	8003398 <Line_Track_Task+0x3e0>
		}
		else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <Line_Track_Task+0x450>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800338e:	da03      	bge.n	8003398 <Line_Track_Task+0x3e0>
		{
			ccr = CCR_FRONT_MIN;
 8003390:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <Line_Track_Task+0x450>)
 8003392:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003396:	601a      	str	r2, [r3, #0]
		}
		TIM2->CCR1 = ccr;
 8003398:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <Line_Track_Task+0x450>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033a0:	635a      	str	r2, [r3, #52]	; 0x34
		ccr_front_prev= ccr;
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <Line_Track_Task+0x450>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b18      	ldr	r3, [pc, #96]	; (800340c <Line_Track_Task+0x454>)
 80033aa:	601a      	str	r2, [r3, #0]
		if(ccr_rear_prev!=SERVO_REAR_CCR_MIDDLE) TIM1->CCR4 = SERVO_REAR_CCR_MIDDLE;
 80033ac:	4b18      	ldr	r3, [pc, #96]	; (8003410 <Line_Track_Task+0x458>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f5b3 7f2c 	cmp.w	r3, #688	; 0x2b0
 80033b4:	d003      	beq.n	80033be <Line_Track_Task+0x406>
 80033b6:	4b17      	ldr	r3, [pc, #92]	; (8003414 <Line_Track_Task+0x45c>)
 80033b8:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40
		ccr_rear_prev=SERVO_REAR_CCR_MIDDLE;
 80033be:	4b14      	ldr	r3, [pc, #80]	; (8003410 <Line_Track_Task+0x458>)
 80033c0:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e00c      	b.n	80033e2 <Line_Track_Task+0x42a>
	if(line_track_task_tick>tick) return;
 80033c8:	bf00      	nop
 80033ca:	e00a      	b.n	80033e2 <Line_Track_Task+0x42a>
			if(G0_Read_Skill(huart_stm, huart_debugg,CMD_READ_SKILL_FORWARD)) return;
 80033cc:	bf00      	nop
 80033ce:	e008      	b.n	80033e2 <Line_Track_Task+0x42a>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80033d0:	bf00      	nop
 80033d2:	e006      	b.n	80033e2 <Line_Track_Task+0x42a>
			if(G0_Read_Skill(huart_stm, huart_debugg,CMD_READ_SKILL_REVERSE)) return;
 80033d4:	bf00      	nop
 80033d6:	e004      	b.n	80033e2 <Line_Track_Task+0x42a>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80033d8:	bf00      	nop
 80033da:	e002      	b.n	80033e2 <Line_Track_Task+0x42a>
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 80033dc:	bf00      	nop
 80033de:	e000      	b.n	80033e2 <Line_Track_Task+0x42a>
		if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80033e0:	bf00      	nop
	}
}
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	c4830201 	.word	0xc4830201
 80033ec:	3fe73a26 	.word	0x3fe73a26
 80033f0:	20000255 	.word	0x20000255
 80033f4:	20000568 	.word	0x20000568
 80033f8:	20000578 	.word	0x20000578
 80033fc:	2000057c 	.word	0x2000057c
 8003400:	c4af0000 	.word	0xc4af0000
 8003404:	44300000 	.word	0x44300000
 8003408:	20000020 	.word	0x20000020
 800340c:	20000580 	.word	0x20000580
 8003410:	20000584 	.word	0x20000584
 8003414:	40010000 	.word	0x40010000

08003418 <Fast_Mode>:

float Fast_Mode(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 8003418:	b5b0      	push	{r4, r5, r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
	static float x_elso_prev=0;
	static float x_hatso;
	static float delta;
	static float gamma;

	uint32_t sum=0;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
	uint32_t dist=0;
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]


	if(swState[0] == FREERUN_MODE)
 800342a:	4b46      	ldr	r3, [pc, #280]	; (8003544 <Fast_Mode+0x12c>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d171      	bne.n	8003516 <Fast_Mode+0xfe>
	{
		/*****Gyorsító jelölés figyelése (szaggatott 3 vonal)*****/
		if(LINE_CNT != lineCnt_prev && (!Free_Run_State || Free_Run_State==2)) //ha változik az alattunk lévő vonalak száma
 8003432:	4b45      	ldr	r3, [pc, #276]	; (8003548 <Fast_Mode+0x130>)
 8003434:	785a      	ldrb	r2, [r3, #1]
 8003436:	4b45      	ldr	r3, [pc, #276]	; (800354c <Fast_Mode+0x134>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d044      	beq.n	80034c8 <Fast_Mode+0xb0>
 800343e:	4b44      	ldr	r3, [pc, #272]	; (8003550 <Fast_Mode+0x138>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <Fast_Mode+0x36>
 8003446:	4b42      	ldr	r3, [pc, #264]	; (8003550 <Fast_Mode+0x138>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d13c      	bne.n	80034c8 <Fast_Mode+0xb0>
		{
			dt[index] = t - t_prev;
 800344e:	4b41      	ldr	r3, [pc, #260]	; (8003554 <Fast_Mode+0x13c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a41      	ldr	r2, [pc, #260]	; (8003558 <Fast_Mode+0x140>)
 8003454:	7812      	ldrb	r2, [r2, #0]
 8003456:	4611      	mov	r1, r2
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	4a3f      	ldr	r2, [pc, #252]	; (800355c <Fast_Mode+0x144>)
 800345e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			sum=dt[0] + dt[1] + dt[2] + dt[3]+ dt[4];
 8003462:	4b3e      	ldr	r3, [pc, #248]	; (800355c <Fast_Mode+0x144>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4b3d      	ldr	r3, [pc, #244]	; (800355c <Fast_Mode+0x144>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	441a      	add	r2, r3
 800346c:	4b3b      	ldr	r3, [pc, #236]	; (800355c <Fast_Mode+0x144>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	441a      	add	r2, r3
 8003472:	4b3a      	ldr	r3, [pc, #232]	; (800355c <Fast_Mode+0x144>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	441a      	add	r2, r3
 8003478:	4b38      	ldr	r3, [pc, #224]	; (800355c <Fast_Mode+0x144>)
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	4413      	add	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
			if((sum > 300) && (sum < 700))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003486:	d90f      	bls.n	80034a8 <Fast_Mode+0x90>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800348e:	d20b      	bcs.n	80034a8 <Fast_Mode+0x90>
			{
				v_ref=4200;
 8003490:	4b33      	ldr	r3, [pc, #204]	; (8003560 <Fast_Mode+0x148>)
 8003492:	4a34      	ldr	r2, [pc, #208]	; (8003564 <Fast_Mode+0x14c>)
 8003494:	601a      	str	r2, [r3, #0]
				LED_B(1);
 8003496:	2200      	movs	r2, #0
 8003498:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800349c:	4832      	ldr	r0, [pc, #200]	; (8003568 <Fast_Mode+0x150>)
 800349e:	f003 fd87 	bl	8006fb0 <HAL_GPIO_WritePin>
				Free_Run_State=1;
 80034a2:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <Fast_Mode+0x138>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
			}
			index++;
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <Fast_Mode+0x140>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	3301      	adds	r3, #1
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	4b29      	ldr	r3, [pc, #164]	; (8003558 <Fast_Mode+0x140>)
 80034b2:	701a      	strb	r2, [r3, #0]
			if(index>4) index=0;
 80034b4:	4b28      	ldr	r3, [pc, #160]	; (8003558 <Fast_Mode+0x140>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d902      	bls.n	80034c2 <Fast_Mode+0xaa>
 80034bc:	4b26      	ldr	r3, [pc, #152]	; (8003558 <Fast_Mode+0x140>)
 80034be:	2200      	movs	r2, #0
 80034c0:	701a      	strb	r2, [r3, #0]
			t_prev = t;
 80034c2:	4a24      	ldr	r2, [pc, #144]	; (8003554 <Fast_Mode+0x13c>)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6013      	str	r3, [r2, #0]
		}
		/* A memóriajellegű statikus változók segítségével vizsgáljuk a szaggatott vonalat*/
		lineCnt_prev = LINE_CNT; //az előző értéket a jelenlegihez hangoljuk
 80034c8:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <Fast_Mode+0x130>)
 80034ca:	785a      	ldrb	r2, [r3, #1]
 80034cc:	4b1f      	ldr	r3, [pc, #124]	; (800354c <Fast_Mode+0x134>)
 80034ce:	701a      	strb	r2, [r3, #0]

		/*****Lassító jelölés figyelése (folytonos 3 vonal)*****/
		if(LINE_CNT > 1 && (!Free_Run_State || Free_Run_State==1)) //ha 3 vonalat érzékelünk
 80034d0:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <Fast_Mode+0x130>)
 80034d2:	785b      	ldrb	r3, [r3, #1]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d91a      	bls.n	800350e <Fast_Mode+0xf6>
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <Fast_Mode+0x138>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <Fast_Mode+0xd0>
 80034e0:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <Fast_Mode+0x138>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d112      	bne.n	800350e <Fast_Mode+0xf6>
		{
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 80034e8:	4b20      	ldr	r3, [pc, #128]	; (800356c <Fast_Mode+0x154>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	338c      	adds	r3, #140	; 0x8c
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d951      	bls.n	8003598 <Fast_Mode+0x180>
			{
				v_ref = 1100;
 80034f4:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <Fast_Mode+0x148>)
 80034f6:	4a1e      	ldr	r2, [pc, #120]	; (8003570 <Fast_Mode+0x158>)
 80034f8:	601a      	str	r2, [r3, #0]
				Free_Run_State=2;
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <Fast_Mode+0x138>)
 80034fc:	2202      	movs	r2, #2
 80034fe:	701a      	strb	r2, [r3, #0]
				LED_B(0);
 8003500:	2201      	movs	r2, #1
 8003502:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003506:	4818      	ldr	r0, [pc, #96]	; (8003568 <Fast_Mode+0x150>)
 8003508:	f003 fd52 	bl	8006fb0 <HAL_GPIO_WritePin>
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 800350c:	e044      	b.n	8003598 <Fast_Mode+0x180>
			}
		}
		else //ha 1 vonalat érzékelünk
		{
			start3time = t;
 800350e:	4a17      	ldr	r2, [pc, #92]	; (800356c <Fast_Mode+0x154>)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	e040      	b.n	8003598 <Fast_Mode+0x180>
		}
		/*****FÉKEZÉS NEGATÍV PWM-EL*******/
	}

	/*****SC üzemmód******/
	else if(swState[0]==SC_MODE)
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <Fast_Mode+0x12c>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d13c      	bne.n	8003598 <Fast_Mode+0x180>
	{
		dist=(((uint16_t)rxBuf[5])<<8) | ((uint16_t)rxBuf[6]);
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <Fast_Mode+0x130>)
 8003520:	795b      	ldrb	r3, [r3, #5]
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	4a08      	ldr	r2, [pc, #32]	; (8003548 <Fast_Mode+0x130>)
 8003526:	7992      	ldrb	r2, [r2, #6]
 8003528:	4313      	orrs	r3, r2
 800352a:	60bb      	str	r3, [r7, #8]
		if(dist>1000 || rxBuf[4]) v_ref=1500; //ha tul messze vana  SC vagy érvénytelen az olvasás
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003532:	d803      	bhi.n	800353c <Fast_Mode+0x124>
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <Fast_Mode+0x130>)
 8003536:	791b      	ldrb	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01f      	beq.n	800357c <Fast_Mode+0x164>
 800353c:	4b08      	ldr	r3, [pc, #32]	; (8003560 <Fast_Mode+0x148>)
 800353e:	4a0d      	ldr	r2, [pc, #52]	; (8003574 <Fast_Mode+0x15c>)
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	e029      	b.n	8003598 <Fast_Mode+0x180>
 8003544:	2000024c 	.word	0x2000024c
 8003548:	20000568 	.word	0x20000568
 800354c:	20000024 	.word	0x20000024
 8003550:	20000588 	.word	0x20000588
 8003554:	2000058c 	.word	0x2000058c
 8003558:	20000590 	.word	0x20000590
 800355c:	20000028 	.word	0x20000028
 8003560:	20000258 	.word	0x20000258
 8003564:	45834000 	.word	0x45834000
 8003568:	40020400 	.word	0x40020400
 800356c:	20000594 	.word	0x20000594
 8003570:	44898000 	.word	0x44898000
 8003574:	44bb8000 	.word	0x44bb8000
 8003578:	43fa0000 	.word	0x43fa0000
		else v_ref = 2*(float)dist-500;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	ee07 3a90 	vmov	s15, r3
 8003582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003586:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800358a:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8003578 <Fast_Mode+0x160>
 800358e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003592:	4bc9      	ldr	r3, [pc, #804]	; (80038b8 <Fast_Mode+0x4a0>)
 8003594:	edc3 7a00 	vstr	s15, [r3]
	}

	x_elso=(float)rxBuf[2]*204/248.0-102;;
 8003598:	4bc8      	ldr	r3, [pc, #800]	; (80038bc <Fast_Mode+0x4a4>)
 800359a:	789b      	ldrb	r3, [r3, #2]
 800359c:	ee07 3a90 	vmov	s15, r3
 80035a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a4:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 80038c0 <Fast_Mode+0x4a8>
 80035a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035ac:	ee17 0a90 	vmov	r0, s15
 80035b0:	f7fc ffea 	bl	8000588 <__aeabi_f2d>
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	4bc2      	ldr	r3, [pc, #776]	; (80038c4 <Fast_Mode+0x4ac>)
 80035ba:	f7fd f967 	bl	800088c <__aeabi_ddiv>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	4bbf      	ldr	r3, [pc, #764]	; (80038c8 <Fast_Mode+0x4b0>)
 80035cc:	f7fc fe7c 	bl	80002c8 <__aeabi_dsub>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4610      	mov	r0, r2
 80035d6:	4619      	mov	r1, r3
 80035d8:	f7fd fb06 	bl	8000be8 <__aeabi_d2f>
 80035dc:	4603      	mov	r3, r0
 80035de:	4abb      	ldr	r2, [pc, #748]	; (80038cc <Fast_Mode+0x4b4>)
 80035e0:	6013      	str	r3, [r2, #0]
	x_hatso=(float)rxBuf[3]*204/244.0-102;
 80035e2:	4bb6      	ldr	r3, [pc, #728]	; (80038bc <Fast_Mode+0x4a4>)
 80035e4:	78db      	ldrb	r3, [r3, #3]
 80035e6:	ee07 3a90 	vmov	s15, r3
 80035ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ee:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 80038c0 <Fast_Mode+0x4a8>
 80035f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035f6:	ee17 0a90 	vmov	r0, s15
 80035fa:	f7fc ffc5 	bl	8000588 <__aeabi_f2d>
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	4bb3      	ldr	r3, [pc, #716]	; (80038d0 <Fast_Mode+0x4b8>)
 8003604:	f7fd f942 	bl	800088c <__aeabi_ddiv>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4610      	mov	r0, r2
 800360e:	4619      	mov	r1, r3
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	4bac      	ldr	r3, [pc, #688]	; (80038c8 <Fast_Mode+0x4b0>)
 8003616:	f7fc fe57 	bl	80002c8 <__aeabi_dsub>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	f7fd fae1 	bl	8000be8 <__aeabi_d2f>
 8003626:	4603      	mov	r3, r0
 8003628:	4aaa      	ldr	r2, [pc, #680]	; (80038d4 <Fast_Mode+0x4bc>)
 800362a:	6013      	str	r3, [r2, #0]
	delta=atan((float)(x_elso-x_hatso)/L_SENSOR);
 800362c:	4ba7      	ldr	r3, [pc, #668]	; (80038cc <Fast_Mode+0x4b4>)
 800362e:	ed93 7a00 	vldr	s14, [r3]
 8003632:	4ba8      	ldr	r3, [pc, #672]	; (80038d4 <Fast_Mode+0x4bc>)
 8003634:	edd3 7a00 	vldr	s15, [r3]
 8003638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800363c:	ee17 0a90 	vmov	r0, s15
 8003640:	f7fc ffa2 	bl	8000588 <__aeabi_f2d>
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	4ba3      	ldr	r3, [pc, #652]	; (80038d8 <Fast_Mode+0x4c0>)
 800364a:	f7fd f91f 	bl	800088c <__aeabi_ddiv>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	ec43 2b17 	vmov	d7, r2, r3
 8003656:	eeb0 0a47 	vmov.f32	s0, s14
 800365a:	eef0 0a67 	vmov.f32	s1, s15
 800365e:	f00a fa4b 	bl	800daf8 <atan>
 8003662:	ec53 2b10 	vmov	r2, r3, d0
 8003666:	4610      	mov	r0, r2
 8003668:	4619      	mov	r1, r3
 800366a:	f7fd fabd 	bl	8000be8 <__aeabi_d2f>
 800366e:	4603      	mov	r3, r0
 8003670:	4a9a      	ldr	r2, [pc, #616]	; (80038dc <Fast_Mode+0x4c4>)
 8003672:	6013      	str	r3, [r2, #0]
	/**/
	//szabályozóparaméterek ujraszámolása az aktuális sebesség alapján
	if(v>100)
 8003674:	4b9a      	ldr	r3, [pc, #616]	; (80038e0 <Fast_Mode+0x4c8>)
 8003676:	edd3 7a00 	vldr	s15, [r3]
 800367a:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80038e4 <Fast_Mode+0x4cc>
 800367e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003686:	f340 80b6 	ble.w	80037f6 <Fast_Mode+0x3de>
	{
		if(v<2000)
 800368a:	4b95      	ldr	r3, [pc, #596]	; (80038e0 <Fast_Mode+0x4c8>)
 800368c:	edd3 7a00 	vldr	s15, [r3]
 8003690:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80038e8 <Fast_Mode+0x4d0>
 8003694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369c:	d554      	bpl.n	8003748 <Fast_Mode+0x330>
		{
			k_p = -L/(v*v)*S1MULTS2_SLOW;
 800369e:	4b90      	ldr	r3, [pc, #576]	; (80038e0 <Fast_Mode+0x4c8>)
 80036a0:	ed93 7a00 	vldr	s14, [r3]
 80036a4:	4b8e      	ldr	r3, [pc, #568]	; (80038e0 <Fast_Mode+0x4c8>)
 80036a6:	edd3 7a00 	vldr	s15, [r3]
 80036aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ae:	ee17 0a90 	vmov	r0, s15
 80036b2:	f7fc ff69 	bl	8000588 <__aeabi_f2d>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	a173      	add	r1, pc, #460	; (adr r1, 8003888 <Fast_Mode+0x470>)
 80036bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036c0:	f7fd f8e4 	bl	800088c <__aeabi_ddiv>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4610      	mov	r0, r2
 80036ca:	4619      	mov	r1, r3
 80036cc:	a370      	add	r3, pc, #448	; (adr r3, 8003890 <Fast_Mode+0x478>)
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	f7fc ffb1 	bl	8000638 <__aeabi_dmul>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	f7fd fa83 	bl	8000be8 <__aeabi_d2f>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4a81      	ldr	r2, [pc, #516]	; (80038ec <Fast_Mode+0x4d4>)
 80036e6:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 80036e8:	4b7d      	ldr	r3, [pc, #500]	; (80038e0 <Fast_Mode+0x4c8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fc ff4b 	bl	8000588 <__aeabi_f2d>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	a168      	add	r1, pc, #416	; (adr r1, 8003898 <Fast_Mode+0x480>)
 80036f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036fc:	f7fd f8c6 	bl	800088c <__aeabi_ddiv>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4614      	mov	r4, r2
 8003706:	461d      	mov	r5, r3
 8003708:	4b75      	ldr	r3, [pc, #468]	; (80038e0 <Fast_Mode+0x4c8>)
 800370a:	ed93 7a00 	vldr	s14, [r3]
 800370e:	4b77      	ldr	r3, [pc, #476]	; (80038ec <Fast_Mode+0x4d4>)
 8003710:	edd3 7a00 	vldr	s15, [r3]
 8003714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003718:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 800371c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003720:	ee17 0a90 	vmov	r0, s15
 8003724:	f7fc ff30 	bl	8000588 <__aeabi_f2d>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4620      	mov	r0, r4
 800372e:	4629      	mov	r1, r5
 8003730:	f7fc ff82 	bl	8000638 <__aeabi_dmul>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4610      	mov	r0, r2
 800373a:	4619      	mov	r1, r3
 800373c:	f7fd fa54 	bl	8000be8 <__aeabi_d2f>
 8003740:	4603      	mov	r3, r0
 8003742:	4a6b      	ldr	r2, [pc, #428]	; (80038f0 <Fast_Mode+0x4d8>)
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e056      	b.n	80037f6 <Fast_Mode+0x3de>
		}
		else
		{
			k_p = -L/(v*v)*S1MULTS2_FAST;
 8003748:	4b65      	ldr	r3, [pc, #404]	; (80038e0 <Fast_Mode+0x4c8>)
 800374a:	ed93 7a00 	vldr	s14, [r3]
 800374e:	4b64      	ldr	r3, [pc, #400]	; (80038e0 <Fast_Mode+0x4c8>)
 8003750:	edd3 7a00 	vldr	s15, [r3]
 8003754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003758:	ee17 0a90 	vmov	r0, s15
 800375c:	f7fc ff14 	bl	8000588 <__aeabi_f2d>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	a148      	add	r1, pc, #288	; (adr r1, 8003888 <Fast_Mode+0x470>)
 8003766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800376a:	f7fd f88f 	bl	800088c <__aeabi_ddiv>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4610      	mov	r0, r2
 8003774:	4619      	mov	r1, r3
 8003776:	a34a      	add	r3, pc, #296	; (adr r3, 80038a0 <Fast_Mode+0x488>)
 8003778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377c:	f7fc ff5c 	bl	8000638 <__aeabi_dmul>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4610      	mov	r0, r2
 8003786:	4619      	mov	r1, r3
 8003788:	f7fd fa2e 	bl	8000be8 <__aeabi_d2f>
 800378c:	4603      	mov	r3, r0
 800378e:	4a57      	ldr	r2, [pc, #348]	; (80038ec <Fast_Mode+0x4d4>)
 8003790:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_FAST-v*k_p);
 8003792:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <Fast_Mode+0x4c8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fc fef6 	bl	8000588 <__aeabi_f2d>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	a13d      	add	r1, pc, #244	; (adr r1, 8003898 <Fast_Mode+0x480>)
 80037a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037a6:	f7fd f871 	bl	800088c <__aeabi_ddiv>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4614      	mov	r4, r2
 80037b0:	461d      	mov	r5, r3
 80037b2:	4b4b      	ldr	r3, [pc, #300]	; (80038e0 <Fast_Mode+0x4c8>)
 80037b4:	ed93 7a00 	vldr	s14, [r3]
 80037b8:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <Fast_Mode+0x4d4>)
 80037ba:	edd3 7a00 	vldr	s15, [r3]
 80037be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c2:	ee17 0a90 	vmov	r0, s15
 80037c6:	f7fc fedf 	bl	8000588 <__aeabi_f2d>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	a136      	add	r1, pc, #216	; (adr r1, 80038a8 <Fast_Mode+0x490>)
 80037d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037d4:	f7fc fd78 	bl	80002c8 <__aeabi_dsub>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4620      	mov	r0, r4
 80037de:	4629      	mov	r1, r5
 80037e0:	f7fc ff2a 	bl	8000638 <__aeabi_dmul>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	f7fd f9fc 	bl	8000be8 <__aeabi_d2f>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4a3f      	ldr	r2, [pc, #252]	; (80038f0 <Fast_Mode+0x4d8>)
 80037f4:	6013      	str	r3, [r2, #0]
		}
	}

	gamma = -k_p * x_elso -k_delta * delta - K_D * (x_elso-x_elso_prev);
 80037f6:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <Fast_Mode+0x4d4>)
 80037f8:	edd3 7a00 	vldr	s15, [r3]
 80037fc:	eeb1 7a67 	vneg.f32	s14, s15
 8003800:	4b32      	ldr	r3, [pc, #200]	; (80038cc <Fast_Mode+0x4b4>)
 8003802:	edd3 7a00 	vldr	s15, [r3]
 8003806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800380a:	4b39      	ldr	r3, [pc, #228]	; (80038f0 <Fast_Mode+0x4d8>)
 800380c:	edd3 6a00 	vldr	s13, [r3]
 8003810:	4b32      	ldr	r3, [pc, #200]	; (80038dc <Fast_Mode+0x4c4>)
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800381a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800381e:	ee17 0a90 	vmov	r0, s15
 8003822:	f7fc feb1 	bl	8000588 <__aeabi_f2d>
 8003826:	4604      	mov	r4, r0
 8003828:	460d      	mov	r5, r1
 800382a:	4b28      	ldr	r3, [pc, #160]	; (80038cc <Fast_Mode+0x4b4>)
 800382c:	ed93 7a00 	vldr	s14, [r3]
 8003830:	4b30      	ldr	r3, [pc, #192]	; (80038f4 <Fast_Mode+0x4dc>)
 8003832:	edd3 7a00 	vldr	s15, [r3]
 8003836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800383a:	ee17 0a90 	vmov	r0, s15
 800383e:	f7fc fea3 	bl	8000588 <__aeabi_f2d>
 8003842:	a31b      	add	r3, pc, #108	; (adr r3, 80038b0 <Fast_Mode+0x498>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	f7fc fef6 	bl	8000638 <__aeabi_dmul>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4620      	mov	r0, r4
 8003852:	4629      	mov	r1, r5
 8003854:	f7fc fd3a 	bl	80002cc <__adddf3>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4610      	mov	r0, r2
 800385e:	4619      	mov	r1, r3
 8003860:	f7fd f9c2 	bl	8000be8 <__aeabi_d2f>
 8003864:	4603      	mov	r3, r0
 8003866:	4a24      	ldr	r2, [pc, #144]	; (80038f8 <Fast_Mode+0x4e0>)
 8003868:	6013      	str	r3, [r2, #0]
	x_elso_prev = x_elso;
 800386a:	4b18      	ldr	r3, [pc, #96]	; (80038cc <Fast_Mode+0x4b4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a21      	ldr	r2, [pc, #132]	; (80038f4 <Fast_Mode+0x4dc>)
 8003870:	6013      	str	r3, [r2, #0]

	return gamma;
 8003872:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <Fast_Mode+0x4e0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	ee07 3a90 	vmov	s15, r3
}
 800387a:	eeb0 0a67 	vmov.f32	s0, s15
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bdb0      	pop	{r4, r5, r7, pc}
 8003884:	f3af 8000 	nop.w
 8003888:	00000000 	.word	0x00000000
 800388c:	c0716000 	.word	0xc0716000
 8003890:	fd21ff2e 	.word	0xfd21ff2e
 8003894:	402275f6 	.word	0x402275f6
 8003898:	00000000 	.word	0x00000000
 800389c:	40716000 	.word	0x40716000
 80038a0:	ab367a10 	.word	0xab367a10
 80038a4:	402d573e 	.word	0x402d573e
 80038a8:	66666666 	.word	0x66666666
 80038ac:	c01e6666 	.word	0xc01e6666
 80038b0:	9999999a 	.word	0x9999999a
 80038b4:	3f999999 	.word	0x3f999999
 80038b8:	20000258 	.word	0x20000258
 80038bc:	20000568 	.word	0x20000568
 80038c0:	434c0000 	.word	0x434c0000
 80038c4:	406f0000 	.word	0x406f0000
 80038c8:	40598000 	.word	0x40598000
 80038cc:	20000598 	.word	0x20000598
 80038d0:	406e8000 	.word	0x406e8000
 80038d4:	2000059c 	.word	0x2000059c
 80038d8:	407c4000 	.word	0x407c4000
 80038dc:	200005a0 	.word	0x200005a0
 80038e0:	20000550 	.word	0x20000550
 80038e4:	42c80000 	.word	0x42c80000
 80038e8:	44fa0000 	.word	0x44fa0000
 80038ec:	2000003c 	.word	0x2000003c
 80038f0:	20000040 	.word	0x20000040
 80038f4:	200005a4 	.word	0x200005a4
 80038f8:	200005a8 	.word	0x200005a8

080038fc <__NVIC_DisableIRQ>:
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	2b00      	cmp	r3, #0
 800390c:	db12      	blt.n	8003934 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	f003 021f 	and.w	r2, r3, #31
 8003914:	490a      	ldr	r1, [pc, #40]	; (8003940 <__NVIC_DisableIRQ+0x44>)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2001      	movs	r0, #1
 800391e:	fa00 f202 	lsl.w	r2, r0, r2
 8003922:	3320      	adds	r3, #32
 8003924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003928:	f3bf 8f4f 	dsb	sy
}
 800392c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800392e:	f3bf 8f6f 	isb	sy
}
 8003932:	bf00      	nop
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000e100 	.word	0xe000e100

08003944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800394a:	f001 fc25 	bl	8005198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800394e:	f000 f88f 	bl	8003a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003952:	f000 fd65 	bl	8004420 <MX_GPIO_Init>
  MX_DMA_Init();
 8003956:	f000 fd43 	bl	80043e0 <MX_DMA_Init>
  MX_TIM2_Init();
 800395a:	f000 fa7f 	bl	8003e5c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800395e:	f000 fcc1 	bl	80042e4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8003962:	f000 fb73 	bl	800404c <MX_TIM4_Init>
  MX_ADC2_Init();
 8003966:	f000 f987 	bl	8003c78 <MX_ADC2_Init>
  MX_TIM3_Init();
 800396a:	f000 faed 	bl	8003f48 <MX_TIM3_Init>
  MX_UART5_Init();
 800396e:	f000 fc8f 	bl	8004290 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8003972:	f000 fce1 	bl	8004338 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8003976:	f000 fc33 	bl	80041e0 <MX_TIM8_Init>
  MX_ADC1_Init();
 800397a:	f000 f8eb 	bl	8003b54 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800397e:	f000 fd05 	bl	800438c <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8003982:	f000 fbdf 	bl	8004144 <MX_TIM5_Init>
  MX_TIM1_Init();
 8003986:	f000 f9c9 	bl	8003d1c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  F4_Basic_Init(&huart1, &htim5, &htim3, &htim2, &htim1, &htim8);
 800398a:	4b2c      	ldr	r3, [pc, #176]	; (8003a3c <main+0xf8>)
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	4b2c      	ldr	r3, [pc, #176]	; (8003a40 <main+0xfc>)
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	4b2c      	ldr	r3, [pc, #176]	; (8003a44 <main+0x100>)
 8003994:	4a2c      	ldr	r2, [pc, #176]	; (8003a48 <main+0x104>)
 8003996:	492d      	ldr	r1, [pc, #180]	; (8003a4c <main+0x108>)
 8003998:	482d      	ldr	r0, [pc, #180]	; (8003a50 <main+0x10c>)
 800399a:	f7fd fb6d 	bl	8001078 <F4_Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3);
 800399e:	2108      	movs	r1, #8
 80039a0:	482c      	ldr	r0, [pc, #176]	; (8003a54 <main+0x110>)
 80039a2:	f000 fe51 	bl	8004648 <Remote_Control_Init>
  Battery_Voltage_Compensate(&hadc2, &hadc1, &huart1);
 80039a6:	4a2a      	ldr	r2, [pc, #168]	; (8003a50 <main+0x10c>)
 80039a8:	492b      	ldr	r1, [pc, #172]	; (8003a58 <main+0x114>)
 80039aa:	482c      	ldr	r0, [pc, #176]	; (8003a5c <main+0x118>)
 80039ac:	f7fe ffb8 	bl	8002920 <Battery_Voltage_Compensate>
  Mode_Selector(&huart1, &huart5);
 80039b0:	492b      	ldr	r1, [pc, #172]	; (8003a60 <main+0x11c>)
 80039b2:	4827      	ldr	r0, [pc, #156]	; (8003a50 <main+0x10c>)
 80039b4:	f7fe fd1c 	bl	80023f0 <Mode_Selector>
  v_ref=500;
 80039b8:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <main+0x120>)
 80039ba:	4a2b      	ldr	r2, [pc, #172]	; (8003a68 <main+0x124>)
 80039bc:	601a      	str	r2, [r3, #0]
  TIM1->CCR4=SERVO_REAR_CCR_MIDDLE;
 80039be:	4b2b      	ldr	r3, [pc, #172]	; (8003a6c <main+0x128>)
 80039c0:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
  TIM2->CCR1=SERVO_FRONT_CCR_MIDDLE;
 80039c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039ca:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80039ce:	635a      	str	r2, [r3, #52]	; 0x34
  Create_Nodes();
 80039d0:	f7fd fcd4 	bl	800137c <Create_Nodes>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Measure_Velocity_Task(&htim8,TICK, 4);
 80039d4:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <main+0x108>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	2204      	movs	r2, #4
 80039dc:	4619      	mov	r1, r3
 80039de:	4817      	ldr	r0, [pc, #92]	; (8003a3c <main+0xf8>)
 80039e0:	f7ff f8ca 	bl	8002b78 <Measure_Velocity_Task>
	  Motor_Drive_Task(&htim3, &huart1, TICK, 10);
 80039e4:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <main+0x108>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ea:	230a      	movs	r3, #10
 80039ec:	4918      	ldr	r1, [pc, #96]	; (8003a50 <main+0x10c>)
 80039ee:	4816      	ldr	r0, [pc, #88]	; (8003a48 <main+0x104>)
 80039f0:	f7ff f93e 	bl	8002c70 <Motor_Drive_Task>
	  Line_Track_Task(&huart5, &huart1, TICK, 8);
 80039f4:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <main+0x108>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039fa:	2308      	movs	r3, #8
 80039fc:	4914      	ldr	r1, [pc, #80]	; (8003a50 <main+0x10c>)
 80039fe:	4818      	ldr	r0, [pc, #96]	; (8003a60 <main+0x11c>)
 8003a00:	f7ff fada 	bl	8002fb8 <Line_Track_Task>
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart1, TICK, 29);
 8003a04:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <main+0x108>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	221d      	movs	r2, #29
 8003a0c:	9200      	str	r2, [sp, #0]
 8003a0e:	4a10      	ldr	r2, [pc, #64]	; (8003a50 <main+0x10c>)
 8003a10:	2108      	movs	r1, #8
 8003a12:	4810      	ldr	r0, [pc, #64]	; (8003a54 <main+0x110>)
 8003a14:	f000 fe34 	bl	8004680 <Remote_Control_Task>
	  HDI_Read_Task(&htim2,TICK, 200);
 8003a18:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <main+0x108>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	22c8      	movs	r2, #200	; 0xc8
 8003a20:	4619      	mov	r1, r3
 8003a22:	4808      	ldr	r0, [pc, #32]	; (8003a44 <main+0x100>)
 8003a24:	f7fd fbd4 	bl	80011d0 <HDI_Read_Task>
	  //Monitoring_Task(&huart1, (int16_t)v , rxBuf[1], TIM2->CCR1, 1000, TICK, 201);
	  Control_Task(&huart1,TICK, 53);
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <main+0x108>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	2235      	movs	r2, #53	; 0x35
 8003a30:	4619      	mov	r1, r3
 8003a32:	4807      	ldr	r0, [pc, #28]	; (8003a50 <main+0x10c>)
 8003a34:	f7fe faf4 	bl	8002020 <Control_Task>
	  Measure_Velocity_Task(&htim8,TICK, 4);
 8003a38:	e7cc      	b.n	80039d4 <main+0x90>
 8003a3a:	bf00      	nop
 8003a3c:	200007a4 	.word	0x200007a4
 8003a40:	2000063c 	.word	0x2000063c
 8003a44:	20000684 	.word	0x20000684
 8003a48:	200006cc 	.word	0x200006cc
 8003a4c:	2000075c 	.word	0x2000075c
 8003a50:	20000890 	.word	0x20000890
 8003a54:	20000714 	.word	0x20000714
 8003a58:	200005ac 	.word	0x200005ac
 8003a5c:	200005f4 	.word	0x200005f4
 8003a60:	2000084c 	.word	0x2000084c
 8003a64:	20000258 	.word	0x20000258
 8003a68:	43fa0000 	.word	0x43fa0000
 8003a6c:	40010000 	.word	0x40010000

08003a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b094      	sub	sp, #80	; 0x50
 8003a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a76:	f107 031c 	add.w	r3, r7, #28
 8003a7a:	2234      	movs	r2, #52	; 0x34
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f007 f950 	bl	800ad24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a84:	f107 0308 	add.w	r3, r7, #8
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a94:	2300      	movs	r3, #0
 8003a96:	607b      	str	r3, [r7, #4]
 8003a98:	4b2c      	ldr	r3, [pc, #176]	; (8003b4c <SystemClock_Config+0xdc>)
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	4a2b      	ldr	r2, [pc, #172]	; (8003b4c <SystemClock_Config+0xdc>)
 8003a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa4:	4b29      	ldr	r3, [pc, #164]	; (8003b4c <SystemClock_Config+0xdc>)
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <SystemClock_Config+0xe0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a25      	ldr	r2, [pc, #148]	; (8003b50 <SystemClock_Config+0xe0>)
 8003aba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <SystemClock_Config+0xe0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003acc:	2301      	movs	r3, #1
 8003ace:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ad4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ada:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ade:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003ae4:	23b4      	movs	r3, #180	; 0xb4
 8003ae6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003aec:	2302      	movs	r3, #2
 8003aee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003af0:	2302      	movs	r3, #2
 8003af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003af4:	f107 031c 	add.w	r3, r7, #28
 8003af8:	4618      	mov	r0, r3
 8003afa:	f003 fe3f 	bl	800777c <HAL_RCC_OscConfig>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003b04:	f000 fd9a 	bl	800463c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003b08:	f003 fa9e 	bl	8007048 <HAL_PWREx_EnableOverDrive>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003b12:	f000 fd93 	bl	800463c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b16:	230f      	movs	r3, #15
 8003b18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8003b22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b2c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b2e:	f107 0308 	add.w	r3, r7, #8
 8003b32:	2105      	movs	r1, #5
 8003b34:	4618      	mov	r0, r3
 8003b36:	f003 fad7 	bl	80070e8 <HAL_RCC_ClockConfig>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003b40:	f000 fd7c 	bl	800463c <Error_Handler>
  }
}
 8003b44:	bf00      	nop
 8003b46:	3750      	adds	r7, #80	; 0x50
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40007000 	.word	0x40007000

08003b54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08c      	sub	sp, #48	; 0x30
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b5a:	f107 0320 	add.w	r3, r7, #32
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003b68:	463b      	mov	r3, r7
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f007 f8d8 	bl	800ad24 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003b74:	4b3c      	ldr	r3, [pc, #240]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003b76:	4a3d      	ldr	r2, [pc, #244]	; (8003c6c <MX_ADC1_Init+0x118>)
 8003b78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8003b7a:	4b3b      	ldr	r3, [pc, #236]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003b7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b82:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003b88:	4b37      	ldr	r3, [pc, #220]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003b8e:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b94:	4b34      	ldr	r3, [pc, #208]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b9c:	4b32      	ldr	r3, [pc, #200]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ba2:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003ba4:	4a32      	ldr	r2, [pc, #200]	; (8003c70 <MX_ADC1_Init+0x11c>)
 8003ba6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ba8:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8003bae:	4b2e      	ldr	r3, [pc, #184]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003bb4:	4b2c      	ldr	r3, [pc, #176]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bbc:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003bc2:	4829      	ldr	r0, [pc, #164]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003bc4:	f001 fb7e 	bl	80052c4 <HAL_ADC_Init>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8003bce:	f000 fd35 	bl	800463c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003bda:	2307      	movs	r3, #7
 8003bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bde:	f107 0320 	add.w	r3, r7, #32
 8003be2:	4619      	mov	r1, r3
 8003be4:	4820      	ldr	r0, [pc, #128]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003be6:	f001 fd1b 	bl	8005620 <HAL_ADC_ConfigChannel>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003bf0:	f000 fd24 	bl	800463c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bf8:	f107 0320 	add.w	r3, r7, #32
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	481a      	ldr	r0, [pc, #104]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003c00:	f001 fd0e 	bl	8005620 <HAL_ADC_ConfigChannel>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8003c0a:	f000 fd17 	bl	800463c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c12:	f107 0320 	add.w	r3, r7, #32
 8003c16:	4619      	mov	r1, r3
 8003c18:	4813      	ldr	r0, [pc, #76]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003c1a:	f001 fd01 	bl	8005620 <HAL_ADC_ConfigChannel>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8003c24:	f000 fd0a 	bl	800463c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8003c28:	2308      	movs	r3, #8
 8003c2a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8003c30:	2301      	movs	r3, #1
 8003c32:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8003c3c:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <MX_ADC1_Init+0x120>)
 8003c3e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003c4c:	463b      	mov	r3, r7
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4805      	ldr	r0, [pc, #20]	; (8003c68 <MX_ADC1_Init+0x114>)
 8003c52:	f001 ff13 	bl	8005a7c <HAL_ADCEx_InjectedConfigChannel>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8003c5c:	f000 fcee 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003c60:	bf00      	nop
 8003c62:	3730      	adds	r7, #48	; 0x30
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	200005ac 	.word	0x200005ac
 8003c6c:	40012000 	.word	0x40012000
 8003c70:	0f000001 	.word	0x0f000001
 8003c74:	000f0001 	.word	0x000f0001

08003c78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c7e:	463b      	mov	r3, r7
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	605a      	str	r2, [r3, #4]
 8003c86:	609a      	str	r2, [r3, #8]
 8003c88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003c8a:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <MX_ADC2_Init+0x98>)
 8003c8c:	4a21      	ldr	r2, [pc, #132]	; (8003d14 <MX_ADC2_Init+0x9c>)
 8003c8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8003c90:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <MX_ADC2_Init+0x98>)
 8003c92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c96:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003c98:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <MX_ADC2_Init+0x98>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <MX_ADC2_Init+0x98>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <MX_ADC2_Init+0x98>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003caa:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <MX_ADC2_Init+0x98>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003cb2:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <MX_ADC2_Init+0x98>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003cb8:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <MX_ADC2_Init+0x98>)
 8003cba:	4a17      	ldr	r2, [pc, #92]	; (8003d18 <MX_ADC2_Init+0xa0>)
 8003cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cbe:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <MX_ADC2_Init+0x98>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8003cc4:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <MX_ADC2_Init+0x98>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003cca:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <MX_ADC2_Init+0x98>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <MX_ADC2_Init+0x98>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003cd8:	480d      	ldr	r0, [pc, #52]	; (8003d10 <MX_ADC2_Init+0x98>)
 8003cda:	f001 faf3 	bl	80052c4 <HAL_ADC_Init>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003ce4:	f000 fcaa 	bl	800463c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003ce8:	230d      	movs	r3, #13
 8003cea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003cec:	2301      	movs	r3, #1
 8003cee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003cf0:	2307      	movs	r3, #7
 8003cf2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003cf4:	463b      	mov	r3, r7
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4805      	ldr	r0, [pc, #20]	; (8003d10 <MX_ADC2_Init+0x98>)
 8003cfa:	f001 fc91 	bl	8005620 <HAL_ADC_ConfigChannel>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003d04:	f000 fc9a 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	200005f4 	.word	0x200005f4
 8003d14:	40012100 	.word	0x40012100
 8003d18:	0f000001 	.word	0x0f000001

08003d1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b096      	sub	sp, #88	; 0x58
 8003d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	605a      	str	r2, [r3, #4]
 8003d2c:	609a      	str	r2, [r3, #8]
 8003d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	609a      	str	r2, [r3, #8]
 8003d46:	60da      	str	r2, [r3, #12]
 8003d48:	611a      	str	r2, [r3, #16]
 8003d4a:	615a      	str	r2, [r3, #20]
 8003d4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	2220      	movs	r2, #32
 8003d52:	2100      	movs	r1, #0
 8003d54:	4618      	mov	r0, r3
 8003d56:	f006 ffe5 	bl	800ad24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d5a:	4b3e      	ldr	r3, [pc, #248]	; (8003e54 <MX_TIM1_Init+0x138>)
 8003d5c:	4a3e      	ldr	r2, [pc, #248]	; (8003e58 <MX_TIM1_Init+0x13c>)
 8003d5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 360-1;
 8003d60:	4b3c      	ldr	r3, [pc, #240]	; (8003e54 <MX_TIM1_Init+0x138>)
 8003d62:	f240 1267 	movw	r2, #359	; 0x167
 8003d66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d68:	4b3a      	ldr	r3, [pc, #232]	; (8003e54 <MX_TIM1_Init+0x138>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8003d6e:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <MX_TIM1_Init+0x138>)
 8003d70:	f242 720f 	movw	r2, #9999	; 0x270f
 8003d74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d76:	4b37      	ldr	r3, [pc, #220]	; (8003e54 <MX_TIM1_Init+0x138>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d7c:	4b35      	ldr	r3, [pc, #212]	; (8003e54 <MX_TIM1_Init+0x138>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d82:	4b34      	ldr	r3, [pc, #208]	; (8003e54 <MX_TIM1_Init+0x138>)
 8003d84:	2280      	movs	r2, #128	; 0x80
 8003d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003d88:	4832      	ldr	r0, [pc, #200]	; (8003e54 <MX_TIM1_Init+0x138>)
 8003d8a:	f003 ff95 	bl	8007cb8 <HAL_TIM_Base_Init>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003d94:	f000 fc52 	bl	800463c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003d9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003da2:	4619      	mov	r1, r3
 8003da4:	482b      	ldr	r0, [pc, #172]	; (8003e54 <MX_TIM1_Init+0x138>)
 8003da6:	f004 ff6f 	bl	8008c88 <HAL_TIM_ConfigClockSource>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003db0:	f000 fc44 	bl	800463c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003db4:	4827      	ldr	r0, [pc, #156]	; (8003e54 <MX_TIM1_Init+0x138>)
 8003db6:	f004 f837 	bl	8007e28 <HAL_TIM_PWM_Init>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003dc0:	f000 fc3c 	bl	800463c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003dcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4820      	ldr	r0, [pc, #128]	; (8003e54 <MX_TIM1_Init+0x138>)
 8003dd4:	f005 fd80 	bl	80098d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003dde:	f000 fc2d 	bl	800463c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003de2:	2360      	movs	r3, #96	; 0x60
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 750-1;
 8003de6:	f240 23ed 	movw	r3, #749	; 0x2ed
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dec:	2300      	movs	r3, #0
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003df0:	2300      	movs	r3, #0
 8003df2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003df4:	2300      	movs	r3, #0
 8003df6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e00:	220c      	movs	r2, #12
 8003e02:	4619      	mov	r1, r3
 8003e04:	4813      	ldr	r0, [pc, #76]	; (8003e54 <MX_TIM1_Init+0x138>)
 8003e06:	f004 fe7d 	bl	8008b04 <HAL_TIM_PWM_ConfigChannel>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003e10:	f000 fc14 	bl	800463c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	4807      	ldr	r0, [pc, #28]	; (8003e54 <MX_TIM1_Init+0x138>)
 8003e38:	f005 fdca 	bl	80099d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003e42:	f000 fbfb 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003e46:	4803      	ldr	r0, [pc, #12]	; (8003e54 <MX_TIM1_Init+0x138>)
 8003e48:	f000 fea4 	bl	8004b94 <HAL_TIM_MspPostInit>

}
 8003e4c:	bf00      	nop
 8003e4e:	3758      	adds	r7, #88	; 0x58
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	2000063c 	.word	0x2000063c
 8003e58:	40010000 	.word	0x40010000

08003e5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08e      	sub	sp, #56	; 0x38
 8003e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e70:	f107 0320 	add.w	r3, r7, #32
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e7a:	1d3b      	adds	r3, r7, #4
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	611a      	str	r2, [r3, #16]
 8003e88:	615a      	str	r2, [r3, #20]
 8003e8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e8c:	4b2d      	ldr	r3, [pc, #180]	; (8003f44 <MX_TIM2_Init+0xe8>)
 8003e8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003e94:	4b2b      	ldr	r3, [pc, #172]	; (8003f44 <MX_TIM2_Init+0xe8>)
 8003e96:	2259      	movs	r2, #89	; 0x59
 8003e98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e9a:	4b2a      	ldr	r3, [pc, #168]	; (8003f44 <MX_TIM2_Init+0xe8>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8003ea0:	4b28      	ldr	r3, [pc, #160]	; (8003f44 <MX_TIM2_Init+0xe8>)
 8003ea2:	f242 720f 	movw	r2, #9999	; 0x270f
 8003ea6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ea8:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <MX_TIM2_Init+0xe8>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003eae:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <MX_TIM2_Init+0xe8>)
 8003eb0:	2280      	movs	r2, #128	; 0x80
 8003eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003eb4:	4823      	ldr	r0, [pc, #140]	; (8003f44 <MX_TIM2_Init+0xe8>)
 8003eb6:	f003 feff 	bl	8007cb8 <HAL_TIM_Base_Init>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003ec0:	f000 fbbc 	bl	800463c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ece:	4619      	mov	r1, r3
 8003ed0:	481c      	ldr	r0, [pc, #112]	; (8003f44 <MX_TIM2_Init+0xe8>)
 8003ed2:	f004 fed9 	bl	8008c88 <HAL_TIM_ConfigClockSource>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003edc:	f000 fbae 	bl	800463c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003ee0:	4818      	ldr	r0, [pc, #96]	; (8003f44 <MX_TIM2_Init+0xe8>)
 8003ee2:	f003 ffa1 	bl	8007e28 <HAL_TIM_PWM_Init>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003eec:	f000 fba6 	bl	800463c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ef8:	f107 0320 	add.w	r3, r7, #32
 8003efc:	4619      	mov	r1, r3
 8003efe:	4811      	ldr	r0, [pc, #68]	; (8003f44 <MX_TIM2_Init+0xe8>)
 8003f00:	f005 fcea 	bl	80098d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003f0a:	f000 fb97 	bl	800463c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f0e:	2360      	movs	r3, #96	; 0x60
 8003f10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 8003f12:	f240 23ed 	movw	r3, #749	; 0x2ed
 8003f16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f20:	1d3b      	adds	r3, r7, #4
 8003f22:	2200      	movs	r2, #0
 8003f24:	4619      	mov	r1, r3
 8003f26:	4807      	ldr	r0, [pc, #28]	; (8003f44 <MX_TIM2_Init+0xe8>)
 8003f28:	f004 fdec 	bl	8008b04 <HAL_TIM_PWM_ConfigChannel>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003f32:	f000 fb83 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003f36:	4803      	ldr	r0, [pc, #12]	; (8003f44 <MX_TIM2_Init+0xe8>)
 8003f38:	f000 fe2c 	bl	8004b94 <HAL_TIM_MspPostInit>

}
 8003f3c:	bf00      	nop
 8003f3e:	3738      	adds	r7, #56	; 0x38
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000684 	.word	0x20000684

08003f48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08e      	sub	sp, #56	; 0x38
 8003f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	609a      	str	r2, [r3, #8]
 8003f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f5c:	f107 0320 	add.w	r3, r7, #32
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
 8003f74:	615a      	str	r2, [r3, #20]
 8003f76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f78:	4b32      	ldr	r3, [pc, #200]	; (8004044 <MX_TIM3_Init+0xfc>)
 8003f7a:	4a33      	ldr	r2, [pc, #204]	; (8004048 <MX_TIM3_Init+0x100>)
 8003f7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 8003f7e:	4b31      	ldr	r3, [pc, #196]	; (8004044 <MX_TIM3_Init+0xfc>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8003f84:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <MX_TIM3_Init+0xfc>)
 8003f86:	2260      	movs	r2, #96	; 0x60
 8003f88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <MX_TIM3_Init+0xfc>)
 8003f8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f92:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <MX_TIM3_Init+0xfc>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f98:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <MX_TIM3_Init+0xfc>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f9e:	4829      	ldr	r0, [pc, #164]	; (8004044 <MX_TIM3_Init+0xfc>)
 8003fa0:	f003 fe8a 	bl	8007cb8 <HAL_TIM_Base_Init>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003faa:	f000 fb47 	bl	800463c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003fb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4822      	ldr	r0, [pc, #136]	; (8004044 <MX_TIM3_Init+0xfc>)
 8003fbc:	f004 fe64 	bl	8008c88 <HAL_TIM_ConfigClockSource>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003fc6:	f000 fb39 	bl	800463c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003fca:	481e      	ldr	r0, [pc, #120]	; (8004044 <MX_TIM3_Init+0xfc>)
 8003fcc:	f003 ff2c 	bl	8007e28 <HAL_TIM_PWM_Init>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003fd6:	f000 fb31 	bl	800463c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fe2:	f107 0320 	add.w	r3, r7, #32
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4816      	ldr	r0, [pc, #88]	; (8004044 <MX_TIM3_Init+0xfc>)
 8003fea:	f005 fc75 	bl	80098d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003ff4:	f000 fb22 	bl	800463c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ff8:	2360      	movs	r3, #96	; 0x60
 8003ffa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004008:	1d3b      	adds	r3, r7, #4
 800400a:	2200      	movs	r2, #0
 800400c:	4619      	mov	r1, r3
 800400e:	480d      	ldr	r0, [pc, #52]	; (8004044 <MX_TIM3_Init+0xfc>)
 8004010:	f004 fd78 	bl	8008b04 <HAL_TIM_PWM_ConfigChannel>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800401a:	f000 fb0f 	bl	800463c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800401e:	1d3b      	adds	r3, r7, #4
 8004020:	2204      	movs	r2, #4
 8004022:	4619      	mov	r1, r3
 8004024:	4807      	ldr	r0, [pc, #28]	; (8004044 <MX_TIM3_Init+0xfc>)
 8004026:	f004 fd6d 	bl	8008b04 <HAL_TIM_PWM_ConfigChannel>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004030:	f000 fb04 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004034:	4803      	ldr	r0, [pc, #12]	; (8004044 <MX_TIM3_Init+0xfc>)
 8004036:	f000 fdad 	bl	8004b94 <HAL_TIM_MspPostInit>

}
 800403a:	bf00      	nop
 800403c:	3738      	adds	r7, #56	; 0x38
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	200006cc 	.word	0x200006cc
 8004048:	40000400 	.word	0x40000400

0800404c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	; 0x28
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004052:	f107 0318 	add.w	r3, r7, #24
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	609a      	str	r2, [r3, #8]
 800405e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004060:	f107 0310 	add.w	r3, r7, #16
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800406a:	463b      	mov	r3, r7
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004076:	4b31      	ldr	r3, [pc, #196]	; (800413c <MX_TIM4_Init+0xf0>)
 8004078:	4a31      	ldr	r2, [pc, #196]	; (8004140 <MX_TIM4_Init+0xf4>)
 800407a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 800407c:	4b2f      	ldr	r3, [pc, #188]	; (800413c <MX_TIM4_Init+0xf0>)
 800407e:	f240 321f 	movw	r2, #799	; 0x31f
 8004082:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004084:	4b2d      	ldr	r3, [pc, #180]	; (800413c <MX_TIM4_Init+0xf0>)
 8004086:	2200      	movs	r2, #0
 8004088:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 800408a:	4b2c      	ldr	r3, [pc, #176]	; (800413c <MX_TIM4_Init+0xf0>)
 800408c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004090:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004092:	4b2a      	ldr	r3, [pc, #168]	; (800413c <MX_TIM4_Init+0xf0>)
 8004094:	2200      	movs	r2, #0
 8004096:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004098:	4b28      	ldr	r3, [pc, #160]	; (800413c <MX_TIM4_Init+0xf0>)
 800409a:	2280      	movs	r2, #128	; 0x80
 800409c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800409e:	4827      	ldr	r0, [pc, #156]	; (800413c <MX_TIM4_Init+0xf0>)
 80040a0:	f003 fe0a 	bl	8007cb8 <HAL_TIM_Base_Init>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80040aa:	f000 fac7 	bl	800463c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040b2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80040b4:	f107 0318 	add.w	r3, r7, #24
 80040b8:	4619      	mov	r1, r3
 80040ba:	4820      	ldr	r0, [pc, #128]	; (800413c <MX_TIM4_Init+0xf0>)
 80040bc:	f004 fde4 	bl	8008c88 <HAL_TIM_ConfigClockSource>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80040c6:	f000 fab9 	bl	800463c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80040ca:	481c      	ldr	r0, [pc, #112]	; (800413c <MX_TIM4_Init+0xf0>)
 80040cc:	f004 f83e 	bl	800814c <HAL_TIM_IC_Init>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80040d6:	f000 fab1 	bl	800463c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80040e2:	f107 0310 	add.w	r3, r7, #16
 80040e6:	4619      	mov	r1, r3
 80040e8:	4814      	ldr	r0, [pc, #80]	; (800413c <MX_TIM4_Init+0xf0>)
 80040ea:	f005 fbf5 	bl	80098d8 <HAL_TIMEx_MasterConfigSynchronization>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80040f4:	f000 faa2 	bl	800463c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80040f8:	230a      	movs	r3, #10
 80040fa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80040fc:	2301      	movs	r3, #1
 80040fe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004100:	2300      	movs	r3, #0
 8004102:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004108:	463b      	mov	r3, r7
 800410a:	2208      	movs	r2, #8
 800410c:	4619      	mov	r1, r3
 800410e:	480b      	ldr	r0, [pc, #44]	; (800413c <MX_TIM4_Init+0xf0>)
 8004110:	f004 fc5c 	bl	80089cc <HAL_TIM_IC_ConfigChannel>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 800411a:	f000 fa8f 	bl	800463c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800411e:	463b      	mov	r3, r7
 8004120:	220c      	movs	r2, #12
 8004122:	4619      	mov	r1, r3
 8004124:	4805      	ldr	r0, [pc, #20]	; (800413c <MX_TIM4_Init+0xf0>)
 8004126:	f004 fc51 	bl	80089cc <HAL_TIM_IC_ConfigChannel>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8004130:	f000 fa84 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004134:	bf00      	nop
 8004136:	3728      	adds	r7, #40	; 0x28
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20000714 	.word	0x20000714
 8004140:	40000800 	.word	0x40000800

08004144 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800414a:	f107 0308 	add.w	r3, r7, #8
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	605a      	str	r2, [r3, #4]
 8004154:	609a      	str	r2, [r3, #8]
 8004156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004158:	463b      	mov	r3, r7
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004160:	4b1d      	ldr	r3, [pc, #116]	; (80041d8 <MX_TIM5_Init+0x94>)
 8004162:	4a1e      	ldr	r2, [pc, #120]	; (80041dc <MX_TIM5_Init+0x98>)
 8004164:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 8004166:	4b1c      	ldr	r3, [pc, #112]	; (80041d8 <MX_TIM5_Init+0x94>)
 8004168:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800416c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800416e:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <MX_TIM5_Init+0x94>)
 8004170:	2200      	movs	r2, #0
 8004172:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004174:	4b18      	ldr	r3, [pc, #96]	; (80041d8 <MX_TIM5_Init+0x94>)
 8004176:	f04f 32ff 	mov.w	r2, #4294967295
 800417a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800417c:	4b16      	ldr	r3, [pc, #88]	; (80041d8 <MX_TIM5_Init+0x94>)
 800417e:	2200      	movs	r2, #0
 8004180:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004182:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <MX_TIM5_Init+0x94>)
 8004184:	2280      	movs	r2, #128	; 0x80
 8004186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004188:	4813      	ldr	r0, [pc, #76]	; (80041d8 <MX_TIM5_Init+0x94>)
 800418a:	f003 fd95 	bl	8007cb8 <HAL_TIM_Base_Init>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004194:	f000 fa52 	bl	800463c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800419c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800419e:	f107 0308 	add.w	r3, r7, #8
 80041a2:	4619      	mov	r1, r3
 80041a4:	480c      	ldr	r0, [pc, #48]	; (80041d8 <MX_TIM5_Init+0x94>)
 80041a6:	f004 fd6f 	bl	8008c88 <HAL_TIM_ConfigClockSource>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80041b0:	f000 fa44 	bl	800463c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041b4:	2300      	movs	r3, #0
 80041b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80041bc:	463b      	mov	r3, r7
 80041be:	4619      	mov	r1, r3
 80041c0:	4805      	ldr	r0, [pc, #20]	; (80041d8 <MX_TIM5_Init+0x94>)
 80041c2:	f005 fb89 	bl	80098d8 <HAL_TIMEx_MasterConfigSynchronization>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80041cc:	f000 fa36 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80041d0:	bf00      	nop
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	2000075c 	.word	0x2000075c
 80041dc:	40000c00 	.word	0x40000c00

080041e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08c      	sub	sp, #48	; 0x30
 80041e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80041e6:	f107 030c 	add.w	r3, r7, #12
 80041ea:	2224      	movs	r2, #36	; 0x24
 80041ec:	2100      	movs	r1, #0
 80041ee:	4618      	mov	r0, r3
 80041f0:	f006 fd98 	bl	800ad24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041f4:	1d3b      	adds	r3, r7, #4
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80041fc:	4b22      	ldr	r3, [pc, #136]	; (8004288 <MX_TIM8_Init+0xa8>)
 80041fe:	4a23      	ldr	r2, [pc, #140]	; (800428c <MX_TIM8_Init+0xac>)
 8004200:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004202:	4b21      	ldr	r3, [pc, #132]	; (8004288 <MX_TIM8_Init+0xa8>)
 8004204:	2200      	movs	r2, #0
 8004206:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004208:	4b1f      	ldr	r3, [pc, #124]	; (8004288 <MX_TIM8_Init+0xa8>)
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800420e:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <MX_TIM8_Init+0xa8>)
 8004210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004214:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004216:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <MX_TIM8_Init+0xa8>)
 8004218:	2200      	movs	r2, #0
 800421a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800421c:	4b1a      	ldr	r3, [pc, #104]	; (8004288 <MX_TIM8_Init+0xa8>)
 800421e:	2200      	movs	r2, #0
 8004220:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004222:	4b19      	ldr	r3, [pc, #100]	; (8004288 <MX_TIM8_Init+0xa8>)
 8004224:	2280      	movs	r2, #128	; 0x80
 8004226:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004228:	2303      	movs	r3, #3
 800422a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800422c:	2300      	movs	r3, #0
 800422e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004230:	2301      	movs	r3, #1
 8004232:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004234:	2300      	movs	r3, #0
 8004236:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 12;
 8004238:	230c      	movs	r3, #12
 800423a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800423c:	2300      	movs	r3, #0
 800423e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004240:	2301      	movs	r3, #1
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004244:	2300      	movs	r3, #0
 8004246:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 12;
 8004248:	230c      	movs	r3, #12
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800424c:	f107 030c 	add.w	r3, r7, #12
 8004250:	4619      	mov	r1, r3
 8004252:	480d      	ldr	r0, [pc, #52]	; (8004288 <MX_TIM8_Init+0xa8>)
 8004254:	f004 f97e 	bl	8008554 <HAL_TIM_Encoder_Init>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800425e:	f000 f9ed 	bl	800463c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004266:	2300      	movs	r3, #0
 8004268:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800426a:	1d3b      	adds	r3, r7, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4806      	ldr	r0, [pc, #24]	; (8004288 <MX_TIM8_Init+0xa8>)
 8004270:	f005 fb32 	bl	80098d8 <HAL_TIMEx_MasterConfigSynchronization>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800427a:	f000 f9df 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800427e:	bf00      	nop
 8004280:	3730      	adds	r7, #48	; 0x30
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	200007a4 	.word	0x200007a4
 800428c:	40010400 	.word	0x40010400

08004290 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004294:	4b11      	ldr	r3, [pc, #68]	; (80042dc <MX_UART5_Init+0x4c>)
 8004296:	4a12      	ldr	r2, [pc, #72]	; (80042e0 <MX_UART5_Init+0x50>)
 8004298:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 800429a:	4b10      	ldr	r3, [pc, #64]	; (80042dc <MX_UART5_Init+0x4c>)
 800429c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80042a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80042a2:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <MX_UART5_Init+0x4c>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <MX_UART5_Init+0x4c>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <MX_UART5_Init+0x4c>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80042b4:	4b09      	ldr	r3, [pc, #36]	; (80042dc <MX_UART5_Init+0x4c>)
 80042b6:	220c      	movs	r2, #12
 80042b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ba:	4b08      	ldr	r3, [pc, #32]	; (80042dc <MX_UART5_Init+0x4c>)
 80042bc:	2200      	movs	r2, #0
 80042be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <MX_UART5_Init+0x4c>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80042c6:	4805      	ldr	r0, [pc, #20]	; (80042dc <MX_UART5_Init+0x4c>)
 80042c8:	f005 fbe8 	bl	8009a9c <HAL_UART_Init>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80042d2:	f000 f9b3 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80042d6:	bf00      	nop
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	2000084c 	.word	0x2000084c
 80042e0:	40005000 	.word	0x40005000

080042e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80042e8:	4b11      	ldr	r3, [pc, #68]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 80042ea:	4a12      	ldr	r2, [pc, #72]	; (8004334 <MX_USART1_UART_Init+0x50>)
 80042ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80042ee:	4b10      	ldr	r3, [pc, #64]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 80042f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042f6:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 80042fe:	2200      	movs	r2, #0
 8004300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 8004304:	2200      	movs	r2, #0
 8004306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 800430a:	220c      	movs	r2, #12
 800430c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800430e:	4b08      	ldr	r3, [pc, #32]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 8004310:	2200      	movs	r2, #0
 8004312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 8004316:	2200      	movs	r2, #0
 8004318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800431a:	4805      	ldr	r0, [pc, #20]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 800431c:	f005 fbbe 	bl	8009a9c <HAL_UART_Init>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004326:	f000 f989 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000890 	.word	0x20000890
 8004334:	40011000 	.word	0x40011000

08004338 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800433c:	4b11      	ldr	r3, [pc, #68]	; (8004384 <MX_USART2_UART_Init+0x4c>)
 800433e:	4a12      	ldr	r2, [pc, #72]	; (8004388 <MX_USART2_UART_Init+0x50>)
 8004340:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <MX_USART2_UART_Init+0x4c>)
 8004344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004348:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800434a:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <MX_USART2_UART_Init+0x4c>)
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <MX_USART2_UART_Init+0x4c>)
 8004352:	2200      	movs	r2, #0
 8004354:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004356:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <MX_USART2_UART_Init+0x4c>)
 8004358:	2200      	movs	r2, #0
 800435a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800435c:	4b09      	ldr	r3, [pc, #36]	; (8004384 <MX_USART2_UART_Init+0x4c>)
 800435e:	220c      	movs	r2, #12
 8004360:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004362:	4b08      	ldr	r3, [pc, #32]	; (8004384 <MX_USART2_UART_Init+0x4c>)
 8004364:	2200      	movs	r2, #0
 8004366:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <MX_USART2_UART_Init+0x4c>)
 800436a:	2200      	movs	r2, #0
 800436c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800436e:	4805      	ldr	r0, [pc, #20]	; (8004384 <MX_USART2_UART_Init+0x4c>)
 8004370:	f005 fb94 	bl	8009a9c <HAL_UART_Init>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800437a:	f000 f95f 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800437e:	bf00      	nop
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	200008d4 	.word	0x200008d4
 8004388:	40004400 	.word	0x40004400

0800438c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004390:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <MX_USART3_UART_Init+0x4c>)
 8004392:	4a12      	ldr	r2, [pc, #72]	; (80043dc <MX_USART3_UART_Init+0x50>)
 8004394:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004396:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <MX_USART3_UART_Init+0x4c>)
 8004398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800439c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800439e:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <MX_USART3_UART_Init+0x4c>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <MX_USART3_UART_Init+0x4c>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <MX_USART3_UART_Init+0x4c>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <MX_USART3_UART_Init+0x4c>)
 80043b2:	220c      	movs	r2, #12
 80043b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043b6:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <MX_USART3_UART_Init+0x4c>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <MX_USART3_UART_Init+0x4c>)
 80043be:	2200      	movs	r2, #0
 80043c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80043c2:	4805      	ldr	r0, [pc, #20]	; (80043d8 <MX_USART3_UART_Init+0x4c>)
 80043c4:	f005 fb6a 	bl	8009a9c <HAL_UART_Init>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80043ce:	f000 f935 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80043d2:	bf00      	nop
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000918 	.word	0x20000918
 80043dc:	40004800 	.word	0x40004800

080043e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	607b      	str	r3, [r7, #4]
 80043ea:	4b0c      	ldr	r3, [pc, #48]	; (800441c <MX_DMA_Init+0x3c>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	4a0b      	ldr	r2, [pc, #44]	; (800441c <MX_DMA_Init+0x3c>)
 80043f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043f4:	6313      	str	r3, [r2, #48]	; 0x30
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <MX_DMA_Init+0x3c>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8004402:	2200      	movs	r2, #0
 8004404:	2100      	movs	r1, #0
 8004406:	202f      	movs	r0, #47	; 0x2f
 8004408:	f001 fdd1 	bl	8005fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800440c:	202f      	movs	r0, #47	; 0x2f
 800440e:	f001 fdea 	bl	8005fe6 <HAL_NVIC_EnableIRQ>

}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40023800 	.word	0x40023800

08004420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08a      	sub	sp, #40	; 0x28
 8004424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004426:	f107 0314 	add.w	r3, r7, #20
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	605a      	str	r2, [r3, #4]
 8004430:	609a      	str	r2, [r3, #8]
 8004432:	60da      	str	r2, [r3, #12]
 8004434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	4b64      	ldr	r3, [pc, #400]	; (80045cc <MX_GPIO_Init+0x1ac>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	4a63      	ldr	r2, [pc, #396]	; (80045cc <MX_GPIO_Init+0x1ac>)
 8004440:	f043 0304 	orr.w	r3, r3, #4
 8004444:	6313      	str	r3, [r2, #48]	; 0x30
 8004446:	4b61      	ldr	r3, [pc, #388]	; (80045cc <MX_GPIO_Init+0x1ac>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	4b5d      	ldr	r3, [pc, #372]	; (80045cc <MX_GPIO_Init+0x1ac>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	4a5c      	ldr	r2, [pc, #368]	; (80045cc <MX_GPIO_Init+0x1ac>)
 800445c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004460:	6313      	str	r3, [r2, #48]	; 0x30
 8004462:	4b5a      	ldr	r3, [pc, #360]	; (80045cc <MX_GPIO_Init+0x1ac>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	4b56      	ldr	r3, [pc, #344]	; (80045cc <MX_GPIO_Init+0x1ac>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	4a55      	ldr	r2, [pc, #340]	; (80045cc <MX_GPIO_Init+0x1ac>)
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	6313      	str	r3, [r2, #48]	; 0x30
 800447e:	4b53      	ldr	r3, [pc, #332]	; (80045cc <MX_GPIO_Init+0x1ac>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	4b4f      	ldr	r3, [pc, #316]	; (80045cc <MX_GPIO_Init+0x1ac>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	4a4e      	ldr	r2, [pc, #312]	; (80045cc <MX_GPIO_Init+0x1ac>)
 8004494:	f043 0302 	orr.w	r3, r3, #2
 8004498:	6313      	str	r3, [r2, #48]	; 0x30
 800449a:	4b4c      	ldr	r3, [pc, #304]	; (80045cc <MX_GPIO_Init+0x1ac>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	607b      	str	r3, [r7, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	603b      	str	r3, [r7, #0]
 80044aa:	4b48      	ldr	r3, [pc, #288]	; (80045cc <MX_GPIO_Init+0x1ac>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	4a47      	ldr	r2, [pc, #284]	; (80045cc <MX_GPIO_Init+0x1ac>)
 80044b0:	f043 0308 	orr.w	r3, r3, #8
 80044b4:	6313      	str	r3, [r2, #48]	; 0x30
 80044b6:	4b45      	ldr	r3, [pc, #276]	; (80045cc <MX_GPIO_Init+0x1ac>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 80044c2:	2200      	movs	r2, #0
 80044c4:	2102      	movs	r1, #2
 80044c6:	4842      	ldr	r0, [pc, #264]	; (80045d0 <MX_GPIO_Init+0x1b0>)
 80044c8:	f002 fd72 	bl	8006fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 80044cc:	2200      	movs	r2, #0
 80044ce:	2122      	movs	r1, #34	; 0x22
 80044d0:	4840      	ldr	r0, [pc, #256]	; (80045d4 <MX_GPIO_Init+0x1b4>)
 80044d2:	f002 fd6d 	bl	8006fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 80044d6:	2200      	movs	r2, #0
 80044d8:	f24e 0142 	movw	r1, #57410	; 0xe042
 80044dc:	483e      	ldr	r0, [pc, #248]	; (80045d8 <MX_GPIO_Init+0x1b8>)
 80044de:	f002 fd67 	bl	8006fb0 <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : On_Board_Button_Pin */
  GPIO_InitStruct.Pin = On_Board_Button_Pin;
 80044e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80044e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80044ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(On_Board_Button_GPIO_Port, &GPIO_InitStruct);
 80044f2:	f107 0314 	add.w	r3, r7, #20
 80044f6:	4619      	mov	r1, r3
 80044f8:	4835      	ldr	r0, [pc, #212]	; (80045d0 <MX_GPIO_Init+0x1b0>)
 80044fa:	f002 fbad 	bl	8006c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 80044fe:	2302      	movs	r3, #2
 8004500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004502:	2301      	movs	r3, #1
 8004504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450a:	2300      	movs	r3, #0
 800450c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 800450e:	f107 0314 	add.w	r3, r7, #20
 8004512:	4619      	mov	r1, r3
 8004514:	482e      	ldr	r0, [pc, #184]	; (80045d0 <MX_GPIO_Init+0x1b0>)
 8004516:	f002 fb9f 	bl	8006c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 800451a:	2322      	movs	r3, #34	; 0x22
 800451c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800451e:	2301      	movs	r3, #1
 8004520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004526:	2300      	movs	r3, #0
 8004528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800452a:	f107 0314 	add.w	r3, r7, #20
 800452e:	4619      	mov	r1, r3
 8004530:	4828      	ldr	r0, [pc, #160]	; (80045d4 <MX_GPIO_Init+0x1b4>)
 8004532:	f002 fb91 	bl	8006c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8004536:	f24e 0342 	movw	r3, #57410	; 0xe042
 800453a:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800453c:	2301      	movs	r3, #1
 800453e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004544:	2300      	movs	r3, #0
 8004546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	4619      	mov	r1, r3
 800454e:	4822      	ldr	r0, [pc, #136]	; (80045d8 <MX_GPIO_Init+0x1b8>)
 8004550:	f002 fb82 	bl	8006c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B2_Pin|Motor_Feedback_Pin;
 8004554:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
 8004558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004562:	f107 0314 	add.w	r3, r7, #20
 8004566:	4619      	mov	r1, r3
 8004568:	481b      	ldr	r0, [pc, #108]	; (80045d8 <MX_GPIO_Init+0x1b8>)
 800456a:	f002 fb75 	bl	8006c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 800456e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004578:	2300      	movs	r3, #0
 800457a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 800457c:	f107 0314 	add.w	r3, r7, #20
 8004580:	4619      	mov	r1, r3
 8004582:	4814      	ldr	r0, [pc, #80]	; (80045d4 <MX_GPIO_Init+0x1b4>)
 8004584:	f002 fb68 	bl	8006c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004588:	2310      	movs	r3, #16
 800458a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800458c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004596:	f107 0314 	add.w	r3, r7, #20
 800459a:	4619      	mov	r1, r3
 800459c:	480e      	ldr	r0, [pc, #56]	; (80045d8 <MX_GPIO_Init+0x1b8>)
 800459e:	f002 fb5b 	bl	8006c58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2100      	movs	r1, #0
 80045a6:	200a      	movs	r0, #10
 80045a8:	f001 fd01 	bl	8005fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80045ac:	200a      	movs	r0, #10
 80045ae:	f001 fd1a 	bl	8005fe6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80045b2:	2200      	movs	r2, #0
 80045b4:	2100      	movs	r1, #0
 80045b6:	2028      	movs	r0, #40	; 0x28
 80045b8:	f001 fcf9 	bl	8005fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80045bc:	2028      	movs	r0, #40	; 0x28
 80045be:	f001 fd12 	bl	8005fe6 <HAL_NVIC_EnableIRQ>

}
 80045c2:	bf00      	nop
 80045c4:	3728      	adds	r7, #40	; 0x28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40020800 	.word	0x40020800
 80045d4:	40020000 	.word	0x40020000
 80045d8:	40020400 	.word	0x40020400

080045dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	80fb      	strh	r3, [r7, #6]
	//ha meg lett nyomva a nucleon a kék gomb
	if(GPIO_Pin == On_Board_Button_Pin)
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ec:	d105      	bne.n	80045fa <HAL_GPIO_EXTI_Callback+0x1e>
	{
		bFlag[0]=1;
 80045ee:	4b09      	ldr	r3, [pc, #36]	; (8004614 <HAL_GPIO_EXTI_Callback+0x38>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	701a      	strb	r2, [r3, #0]
		NVIC_DisableIRQ(On_Board_Button_EXTI_IRQn);
 80045f4:	2028      	movs	r0, #40	; 0x28
 80045f6:	f7ff f981 	bl	80038fc <__NVIC_DisableIRQ>
	}
	if(GPIO_Pin == B1_Pin)
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d105      	bne.n	800460c <HAL_GPIO_EXTI_Callback+0x30>
	{
		bFlag[1]=1;
 8004600:	4b04      	ldr	r3, [pc, #16]	; (8004614 <HAL_GPIO_EXTI_Callback+0x38>)
 8004602:	2201      	movs	r2, #1
 8004604:	705a      	strb	r2, [r3, #1]
		NVIC_DisableIRQ(B1_EXTI_IRQn);
 8004606:	200a      	movs	r0, #10
 8004608:	f7ff f978 	bl	80038fc <__NVIC_DisableIRQ>
	}
}
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20000250 	.word	0x20000250

08004618 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)Uart_Receive_From_PC_ISR(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a05      	ldr	r2, [pc, #20]	; (8004638 <HAL_UART_RxCpltCallback+0x20>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d102      	bne.n	800462e <HAL_UART_RxCpltCallback+0x16>
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7fc fe89 	bl	8001340 <Uart_Receive_From_PC_ISR>
	//else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(huart);
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20000890 	.word	0x20000890

0800463c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004640:	b672      	cpsid	i
}
 8004642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004644:	e7fe      	b.n	8004644 <Error_Handler+0x8>
	...

08004648 <Remote_Control_Init>:
#include <math.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
	tEdge[0] = 1000;
 8004652:	4b0a      	ldr	r3, [pc, #40]	; (800467c <Remote_Control_Init+0x34>)
 8004654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004658:	601a      	str	r2, [r3, #0]
	tEdge[1] = 500;
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <Remote_Control_Init+0x34>)
 800465c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004660:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 8004662:	4b06      	ldr	r3, [pc, #24]	; (800467c <Remote_Control_Init+0x34>)
 8004664:	2200      	movs	r2, #0
 8004666:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 8004668:	2303      	movs	r3, #3
 800466a:	4a04      	ldr	r2, [pc, #16]	; (800467c <Remote_Control_Init+0x34>)
 800466c:	6839      	ldr	r1, [r7, #0]
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f003 fdc6 	bl	8008200 <HAL_TIM_IC_Start_DMA>
}
 8004674:	bf00      	nop
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000960 	.word	0x20000960

08004680 <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
	static int32_t dt1=85;
	static int32_t dt2=85;
	static uint32_t tLow=85;
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 800468e:	4b57      	ldr	r3, [pc, #348]	; (80047ec <Remote_Control_Task+0x16c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	f0c0 80a5 	bcc.w	80047e4 <Remote_Control_Task+0x164>
	remote_control_tick = tick + period;
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	4413      	add	r3, r2
 80046a0:	4a52      	ldr	r2, [pc, #328]	; (80047ec <Remote_Control_Task+0x16c>)
 80046a2:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 80046a4:	201e      	movs	r0, #30
 80046a6:	f001 fcac 	bl	8006002 <HAL_NVIC_DisableIRQ>
	dt0=abs(tEdge[1]-tEdge[0]);
 80046aa:	4b51      	ldr	r3, [pc, #324]	; (80047f0 <Remote_Control_Task+0x170>)
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	4b50      	ldr	r3, [pc, #320]	; (80047f0 <Remote_Control_Task+0x170>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bfb8      	it	lt
 80046b8:	425b      	neglt	r3, r3
 80046ba:	4a4e      	ldr	r2, [pc, #312]	; (80047f4 <Remote_Control_Task+0x174>)
 80046bc:	6013      	str	r3, [r2, #0]
	dt1=abs(tEdge[2]-tEdge[1]);
 80046be:	4b4c      	ldr	r3, [pc, #304]	; (80047f0 <Remote_Control_Task+0x170>)
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	4b4b      	ldr	r3, [pc, #300]	; (80047f0 <Remote_Control_Task+0x170>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bfb8      	it	lt
 80046cc:	425b      	neglt	r3, r3
 80046ce:	4a4a      	ldr	r2, [pc, #296]	; (80047f8 <Remote_Control_Task+0x178>)
 80046d0:	6013      	str	r3, [r2, #0]
	dt2=abs(tEdge[0]-tEdge[2]);
 80046d2:	4b47      	ldr	r3, [pc, #284]	; (80047f0 <Remote_Control_Task+0x170>)
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4b46      	ldr	r3, [pc, #280]	; (80047f0 <Remote_Control_Task+0x170>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bfb8      	it	lt
 80046e0:	425b      	neglt	r3, r3
 80046e2:	4a46      	ldr	r2, [pc, #280]	; (80047fc <Remote_Control_Task+0x17c>)
 80046e4:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 80046e6:	201e      	movs	r0, #30
 80046e8:	f001 fc7d 	bl	8005fe6 <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 80046ec:	4b41      	ldr	r3, [pc, #260]	; (80047f4 <Remote_Control_Task+0x174>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f4:	4293      	cmp	r3, r2
 80046f6:	dd06      	ble.n	8004706 <Remote_Control_Task+0x86>
 80046f8:	4b3e      	ldr	r3, [pc, #248]	; (80047f4 <Remote_Control_Task+0x174>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004700:	33ff      	adds	r3, #255	; 0xff
 8004702:	4a3c      	ldr	r2, [pc, #240]	; (80047f4 <Remote_Control_Task+0x174>)
 8004704:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 8004706:	4b3c      	ldr	r3, [pc, #240]	; (80047f8 <Remote_Control_Task+0x178>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f241 3288 	movw	r2, #5000	; 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	dd06      	ble.n	8004720 <Remote_Control_Task+0xa0>
 8004712:	4b39      	ldr	r3, [pc, #228]	; (80047f8 <Remote_Control_Task+0x178>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800471a:	33ff      	adds	r3, #255	; 0xff
 800471c:	4a36      	ldr	r2, [pc, #216]	; (80047f8 <Remote_Control_Task+0x178>)
 800471e:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 8004720:	4b36      	ldr	r3, [pc, #216]	; (80047fc <Remote_Control_Task+0x17c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f241 3288 	movw	r2, #5000	; 0x1388
 8004728:	4293      	cmp	r3, r2
 800472a:	dd06      	ble.n	800473a <Remote_Control_Task+0xba>
 800472c:	4b33      	ldr	r3, [pc, #204]	; (80047fc <Remote_Control_Task+0x17c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004734:	33ff      	adds	r3, #255	; 0xff
 8004736:	4a31      	ldr	r2, [pc, #196]	; (80047fc <Remote_Control_Task+0x17c>)
 8004738:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 800473a:	4b2e      	ldr	r3, [pc, #184]	; (80047f4 <Remote_Control_Task+0x174>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b2e      	ldr	r3, [pc, #184]	; (80047f8 <Remote_Control_Task+0x178>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	da0b      	bge.n	800475e <Remote_Control_Task+0xde>
 8004746:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <Remote_Control_Task+0x174>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <Remote_Control_Task+0x17c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	da05      	bge.n	800475e <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 8004752:	4b28      	ldr	r3, [pc, #160]	; (80047f4 <Remote_Control_Task+0x174>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	461a      	mov	r2, r3
 8004758:	4b29      	ldr	r3, [pc, #164]	; (8004800 <Remote_Control_Task+0x180>)
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	e016      	b.n	800478c <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 800475e:	4b26      	ldr	r3, [pc, #152]	; (80047f8 <Remote_Control_Task+0x178>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b24      	ldr	r3, [pc, #144]	; (80047f4 <Remote_Control_Task+0x174>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	da0b      	bge.n	8004782 <Remote_Control_Task+0x102>
 800476a:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <Remote_Control_Task+0x178>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b23      	ldr	r3, [pc, #140]	; (80047fc <Remote_Control_Task+0x17c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	da05      	bge.n	8004782 <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 8004776:	4b20      	ldr	r3, [pc, #128]	; (80047f8 <Remote_Control_Task+0x178>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	4b20      	ldr	r3, [pc, #128]	; (8004800 <Remote_Control_Task+0x180>)
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	e004      	b.n	800478c <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 8004782:	4b1e      	ldr	r3, [pc, #120]	; (80047fc <Remote_Control_Task+0x17c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	4b1d      	ldr	r3, [pc, #116]	; (8004800 <Remote_Control_Task+0x180>)
 800478a:	601a      	str	r2, [r3, #0]
	sprintf(string,"%d\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 10);
	remote_control_tick = tick + 1000;
#endif

	if((tLow>70 && tLow<100) || tLow==1000)
 800478c:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <Remote_Control_Task+0x180>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b46      	cmp	r3, #70	; 0x46
 8004792:	d903      	bls.n	800479c <Remote_Control_Task+0x11c>
 8004794:	4b1a      	ldr	r3, [pc, #104]	; (8004800 <Remote_Control_Task+0x180>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b63      	cmp	r3, #99	; 0x63
 800479a:	d904      	bls.n	80047a6 <Remote_Control_Task+0x126>
 800479c:	4b18      	ldr	r3, [pc, #96]	; (8004800 <Remote_Control_Task+0x180>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047a4:	d109      	bne.n	80047ba <Remote_Control_Task+0x13a>
	{
		LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
 80047a6:	2200      	movs	r2, #0
 80047a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047ac:	4815      	ldr	r0, [pc, #84]	; (8004804 <Remote_Control_Task+0x184>)
 80047ae:	f002 fbff 	bl	8006fb0 <HAL_GPIO_WritePin>
		motorEnRemote=0;//állítsuk le a motort ha meghuzzuk a ravaszt
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <Remote_Control_Task+0x188>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	701a      	strb	r2, [r3, #0]
 80047b8:	e015      	b.n	80047e6 <Remote_Control_Task+0x166>
	}
	else
	{
		LED_R(0);
 80047ba:	2201      	movs	r2, #1
 80047bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047c0:	4810      	ldr	r0, [pc, #64]	; (8004804 <Remote_Control_Task+0x184>)
 80047c2:	f002 fbf5 	bl	8006fb0 <HAL_GPIO_WritePin>
		if(tLow <= 70) motorEnRemote=1;
 80047c6:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <Remote_Control_Task+0x180>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b46      	cmp	r3, #70	; 0x46
 80047cc:	d803      	bhi.n	80047d6 <Remote_Control_Task+0x156>
 80047ce:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <Remote_Control_Task+0x188>)
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]
 80047d4:	e002      	b.n	80047dc <Remote_Control_Task+0x15c>
		else motorEnRemote=2;
 80047d6:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <Remote_Control_Task+0x188>)
 80047d8:	2202      	movs	r2, #2
 80047da:	701a      	strb	r2, [r3, #0]
		readytorace=1;
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <Remote_Control_Task+0x18c>)
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	e000      	b.n	80047e6 <Remote_Control_Task+0x166>
	if(remote_control_tick>tick) return;
 80047e4:	bf00      	nop

	}
}
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	2000096c 	.word	0x2000096c
 80047f0:	20000960 	.word	0x20000960
 80047f4:	20000044 	.word	0x20000044
 80047f8:	20000048 	.word	0x20000048
 80047fc:	2000004c 	.word	0x2000004c
 8004800:	20000050 	.word	0x20000050
 8004804:	40020400 	.word	0x40020400
 8004808:	2000095c 	.word	0x2000095c
 800480c:	20000265 	.word	0x20000265

08004810 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	607b      	str	r3, [r7, #4]
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_MspInit+0x4c>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	4a0f      	ldr	r2, [pc, #60]	; (800485c <HAL_MspInit+0x4c>)
 8004820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004824:	6453      	str	r3, [r2, #68]	; 0x44
 8004826:	4b0d      	ldr	r3, [pc, #52]	; (800485c <HAL_MspInit+0x4c>)
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800482e:	607b      	str	r3, [r7, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004832:	2300      	movs	r3, #0
 8004834:	603b      	str	r3, [r7, #0]
 8004836:	4b09      	ldr	r3, [pc, #36]	; (800485c <HAL_MspInit+0x4c>)
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	4a08      	ldr	r2, [pc, #32]	; (800485c <HAL_MspInit+0x4c>)
 800483c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004840:	6413      	str	r3, [r2, #64]	; 0x40
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <HAL_MspInit+0x4c>)
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800484e:	2007      	movs	r0, #7
 8004850:	f001 fba2 	bl	8005f98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40023800 	.word	0x40023800

08004860 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08c      	sub	sp, #48	; 0x30
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004868:	f107 031c 	add.w	r3, r7, #28
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	605a      	str	r2, [r3, #4]
 8004872:	609a      	str	r2, [r3, #8]
 8004874:	60da      	str	r2, [r3, #12]
 8004876:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a2e      	ldr	r2, [pc, #184]	; (8004938 <HAL_ADC_MspInit+0xd8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d128      	bne.n	80048d4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004882:	2300      	movs	r3, #0
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	4b2d      	ldr	r3, [pc, #180]	; (800493c <HAL_ADC_MspInit+0xdc>)
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	4a2c      	ldr	r2, [pc, #176]	; (800493c <HAL_ADC_MspInit+0xdc>)
 800488c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004890:	6453      	str	r3, [r2, #68]	; 0x44
 8004892:	4b2a      	ldr	r3, [pc, #168]	; (800493c <HAL_ADC_MspInit+0xdc>)
 8004894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	61bb      	str	r3, [r7, #24]
 800489c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <HAL_ADC_MspInit+0xdc>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	4a25      	ldr	r2, [pc, #148]	; (800493c <HAL_ADC_MspInit+0xdc>)
 80048a8:	f043 0302 	orr.w	r3, r3, #2
 80048ac:	6313      	str	r3, [r2, #48]	; 0x30
 80048ae:	4b23      	ldr	r3, [pc, #140]	; (800493c <HAL_ADC_MspInit+0xdc>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 80048ba:	2301      	movs	r3, #1
 80048bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048be:	2303      	movs	r3, #3
 80048c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c2:	2300      	movs	r3, #0
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 80048c6:	f107 031c 	add.w	r3, r7, #28
 80048ca:	4619      	mov	r1, r3
 80048cc:	481c      	ldr	r0, [pc, #112]	; (8004940 <HAL_ADC_MspInit+0xe0>)
 80048ce:	f002 f9c3 	bl	8006c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80048d2:	e02c      	b.n	800492e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1a      	ldr	r2, [pc, #104]	; (8004944 <HAL_ADC_MspInit+0xe4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d127      	bne.n	800492e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	4b16      	ldr	r3, [pc, #88]	; (800493c <HAL_ADC_MspInit+0xdc>)
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	4a15      	ldr	r2, [pc, #84]	; (800493c <HAL_ADC_MspInit+0xdc>)
 80048e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048ec:	6453      	str	r3, [r2, #68]	; 0x44
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <HAL_ADC_MspInit+0xdc>)
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	4b0f      	ldr	r3, [pc, #60]	; (800493c <HAL_ADC_MspInit+0xdc>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	4a0e      	ldr	r2, [pc, #56]	; (800493c <HAL_ADC_MspInit+0xdc>)
 8004904:	f043 0304 	orr.w	r3, r3, #4
 8004908:	6313      	str	r3, [r2, #48]	; 0x30
 800490a:	4b0c      	ldr	r3, [pc, #48]	; (800493c <HAL_ADC_MspInit+0xdc>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Bat_Pin;
 8004916:	2308      	movs	r3, #8
 8004918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800491a:	2303      	movs	r3, #3
 800491c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_Bat_GPIO_Port, &GPIO_InitStruct);
 8004922:	f107 031c 	add.w	r3, r7, #28
 8004926:	4619      	mov	r1, r3
 8004928:	4807      	ldr	r0, [pc, #28]	; (8004948 <HAL_ADC_MspInit+0xe8>)
 800492a:	f002 f995 	bl	8006c58 <HAL_GPIO_Init>
}
 800492e:	bf00      	nop
 8004930:	3730      	adds	r7, #48	; 0x30
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40012000 	.word	0x40012000
 800493c:	40023800 	.word	0x40023800
 8004940:	40020400 	.word	0x40020400
 8004944:	40012100 	.word	0x40012100
 8004948:	40020800 	.word	0x40020800

0800494c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08e      	sub	sp, #56	; 0x38
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a5e      	ldr	r2, [pc, #376]	; (8004ae4 <HAL_TIM_Base_MspInit+0x198>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d10e      	bne.n	800498c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800496e:	2300      	movs	r3, #0
 8004970:	623b      	str	r3, [r7, #32]
 8004972:	4b5d      	ldr	r3, [pc, #372]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	4a5c      	ldr	r2, [pc, #368]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	6453      	str	r3, [r2, #68]	; 0x44
 800497e:	4b5a      	ldr	r3, [pc, #360]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	623b      	str	r3, [r7, #32]
 8004988:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800498a:	e0a7      	b.n	8004adc <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM2)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004994:	d116      	bne.n	80049c4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
 800499a:	4b53      	ldr	r3, [pc, #332]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	4a52      	ldr	r2, [pc, #328]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	6413      	str	r3, [r2, #64]	; 0x40
 80049a6:	4b50      	ldr	r3, [pc, #320]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	61fb      	str	r3, [r7, #28]
 80049b0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80049b2:	2200      	movs	r2, #0
 80049b4:	2100      	movs	r1, #0
 80049b6:	201c      	movs	r0, #28
 80049b8:	f001 faf9 	bl	8005fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80049bc:	201c      	movs	r0, #28
 80049be:	f001 fb12 	bl	8005fe6 <HAL_NVIC_EnableIRQ>
}
 80049c2:	e08b      	b.n	8004adc <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM3)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a48      	ldr	r2, [pc, #288]	; (8004aec <HAL_TIM_Base_MspInit+0x1a0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d10e      	bne.n	80049ec <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80049ce:	2300      	movs	r3, #0
 80049d0:	61bb      	str	r3, [r7, #24]
 80049d2:	4b45      	ldr	r3, [pc, #276]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	4a44      	ldr	r2, [pc, #272]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 80049d8:	f043 0302 	orr.w	r3, r3, #2
 80049dc:	6413      	str	r3, [r2, #64]	; 0x40
 80049de:	4b42      	ldr	r3, [pc, #264]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	61bb      	str	r3, [r7, #24]
 80049e8:	69bb      	ldr	r3, [r7, #24]
}
 80049ea:	e077      	b.n	8004adc <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM4)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a3f      	ldr	r2, [pc, #252]	; (8004af0 <HAL_TIM_Base_MspInit+0x1a4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d15f      	bne.n	8004ab6 <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	4b3b      	ldr	r3, [pc, #236]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	4a3a      	ldr	r2, [pc, #232]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 8004a00:	f043 0304 	orr.w	r3, r3, #4
 8004a04:	6413      	str	r3, [r2, #64]	; 0x40
 8004a06:	4b38      	ldr	r3, [pc, #224]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	4b34      	ldr	r3, [pc, #208]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	4a33      	ldr	r2, [pc, #204]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 8004a1c:	f043 0302 	orr.w	r3, r3, #2
 8004a20:	6313      	str	r3, [r2, #48]	; 0x30
 8004a22:	4b31      	ldr	r3, [pc, #196]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 8004a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a34:	2302      	movs	r3, #2
 8004a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004a40:	2302      	movs	r3, #2
 8004a42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a48:	4619      	mov	r1, r3
 8004a4a:	482a      	ldr	r0, [pc, #168]	; (8004af4 <HAL_TIM_Base_MspInit+0x1a8>)
 8004a4c:	f002 f904 	bl	8006c58 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8004a50:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <HAL_TIM_Base_MspInit+0x1ac>)
 8004a52:	4a2a      	ldr	r2, [pc, #168]	; (8004afc <HAL_TIM_Base_MspInit+0x1b0>)
 8004a54:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8004a56:	4b28      	ldr	r3, [pc, #160]	; (8004af8 <HAL_TIM_Base_MspInit+0x1ac>)
 8004a58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a5c:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a5e:	4b26      	ldr	r3, [pc, #152]	; (8004af8 <HAL_TIM_Base_MspInit+0x1ac>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a64:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <HAL_TIM_Base_MspInit+0x1ac>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8004a6a:	4b23      	ldr	r3, [pc, #140]	; (8004af8 <HAL_TIM_Base_MspInit+0x1ac>)
 8004a6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a70:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004a72:	4b21      	ldr	r3, [pc, #132]	; (8004af8 <HAL_TIM_Base_MspInit+0x1ac>)
 8004a74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a78:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004a7a:	4b1f      	ldr	r3, [pc, #124]	; (8004af8 <HAL_TIM_Base_MspInit+0x1ac>)
 8004a7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a80:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8004a82:	4b1d      	ldr	r3, [pc, #116]	; (8004af8 <HAL_TIM_Base_MspInit+0x1ac>)
 8004a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a88:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004a8a:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <HAL_TIM_Base_MspInit+0x1ac>)
 8004a8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a90:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a92:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <HAL_TIM_Base_MspInit+0x1ac>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8004a98:	4817      	ldr	r0, [pc, #92]	; (8004af8 <HAL_TIM_Base_MspInit+0x1ac>)
 8004a9a:	f001 facd 	bl	8006038 <HAL_DMA_Init>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_TIM_Base_MspInit+0x15c>
      Error_Handler();
 8004aa4:	f7ff fdca 	bl	800463c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a13      	ldr	r2, [pc, #76]	; (8004af8 <HAL_TIM_Base_MspInit+0x1ac>)
 8004aac:	62da      	str	r2, [r3, #44]	; 0x2c
 8004aae:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <HAL_TIM_Base_MspInit+0x1ac>)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004ab4:	e012      	b.n	8004adc <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM5)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a11      	ldr	r2, [pc, #68]	; (8004b00 <HAL_TIM_Base_MspInit+0x1b4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d10d      	bne.n	8004adc <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	4a07      	ldr	r2, [pc, #28]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 8004aca:	f043 0308 	orr.w	r3, r3, #8
 8004ace:	6413      	str	r3, [r2, #64]	; 0x40
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_TIM_Base_MspInit+0x19c>)
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	68fb      	ldr	r3, [r7, #12]
}
 8004adc:	bf00      	nop
 8004ade:	3738      	adds	r7, #56	; 0x38
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40010000 	.word	0x40010000
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40000800 	.word	0x40000800
 8004af4:	40020400 	.word	0x40020400
 8004af8:	200007ec 	.word	0x200007ec
 8004afc:	400260b8 	.word	0x400260b8
 8004b00:	40000c00 	.word	0x40000c00

08004b04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08a      	sub	sp, #40	; 0x28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b0c:	f107 0314 	add.w	r3, r7, #20
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	605a      	str	r2, [r3, #4]
 8004b16:	609a      	str	r2, [r3, #8]
 8004b18:	60da      	str	r2, [r3, #12]
 8004b1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a19      	ldr	r2, [pc, #100]	; (8004b88 <HAL_TIM_Encoder_MspInit+0x84>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d12b      	bne.n	8004b7e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004b26:	2300      	movs	r3, #0
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <HAL_TIM_Encoder_MspInit+0x88>)
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2e:	4a17      	ldr	r2, [pc, #92]	; (8004b8c <HAL_TIM_Encoder_MspInit+0x88>)
 8004b30:	f043 0302 	orr.w	r3, r3, #2
 8004b34:	6453      	str	r3, [r2, #68]	; 0x44
 8004b36:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <HAL_TIM_Encoder_MspInit+0x88>)
 8004b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <HAL_TIM_Encoder_MspInit+0x88>)
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	4a10      	ldr	r2, [pc, #64]	; (8004b8c <HAL_TIM_Encoder_MspInit+0x88>)
 8004b4c:	f043 0304 	orr.w	r3, r3, #4
 8004b50:	6313      	str	r3, [r2, #48]	; 0x30
 8004b52:	4b0e      	ldr	r3, [pc, #56]	; (8004b8c <HAL_TIM_Encoder_MspInit+0x88>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b5e:	23c0      	movs	r3, #192	; 0xc0
 8004b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b62:	2302      	movs	r3, #2
 8004b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b72:	f107 0314 	add.w	r3, r7, #20
 8004b76:	4619      	mov	r1, r3
 8004b78:	4805      	ldr	r0, [pc, #20]	; (8004b90 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004b7a:	f002 f86d 	bl	8006c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004b7e:	bf00      	nop
 8004b80:	3728      	adds	r7, #40	; 0x28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40010400 	.word	0x40010400
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	40020800 	.word	0x40020800

08004b94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	; 0x28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b9c:	f107 0314 	add.w	r3, r7, #20
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	609a      	str	r2, [r3, #8]
 8004ba8:	60da      	str	r2, [r3, #12]
 8004baa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a37      	ldr	r2, [pc, #220]	; (8004c90 <HAL_TIM_MspPostInit+0xfc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d11f      	bne.n	8004bf6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	4b36      	ldr	r3, [pc, #216]	; (8004c94 <HAL_TIM_MspPostInit+0x100>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	4a35      	ldr	r2, [pc, #212]	; (8004c94 <HAL_TIM_MspPostInit+0x100>)
 8004bc0:	f043 0301 	orr.w	r3, r3, #1
 8004bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bc6:	4b33      	ldr	r3, [pc, #204]	; (8004c94 <HAL_TIM_MspPostInit+0x100>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	613b      	str	r3, [r7, #16]
 8004bd0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 8004bd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd8:	2302      	movs	r3, #2
 8004bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be0:	2300      	movs	r3, #0
 8004be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004be4:	2301      	movs	r3, #1
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 8004be8:	f107 0314 	add.w	r3, r7, #20
 8004bec:	4619      	mov	r1, r3
 8004bee:	482a      	ldr	r0, [pc, #168]	; (8004c98 <HAL_TIM_MspPostInit+0x104>)
 8004bf0:	f002 f832 	bl	8006c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004bf4:	e047      	b.n	8004c86 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfe:	d11f      	bne.n	8004c40 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	4b23      	ldr	r3, [pc, #140]	; (8004c94 <HAL_TIM_MspPostInit+0x100>)
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	4a22      	ldr	r2, [pc, #136]	; (8004c94 <HAL_TIM_MspPostInit+0x100>)
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c10:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <HAL_TIM_MspPostInit+0x100>)
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 8004c1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c22:	2302      	movs	r3, #2
 8004c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 8004c32:	f107 0314 	add.w	r3, r7, #20
 8004c36:	4619      	mov	r1, r3
 8004c38:	4817      	ldr	r0, [pc, #92]	; (8004c98 <HAL_TIM_MspPostInit+0x104>)
 8004c3a:	f002 f80d 	bl	8006c58 <HAL_GPIO_Init>
}
 8004c3e:	e022      	b.n	8004c86 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a15      	ldr	r2, [pc, #84]	; (8004c9c <HAL_TIM_MspPostInit+0x108>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d11d      	bne.n	8004c86 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <HAL_TIM_MspPostInit+0x100>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	4a10      	ldr	r2, [pc, #64]	; (8004c94 <HAL_TIM_MspPostInit+0x100>)
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5a:	4b0e      	ldr	r3, [pc, #56]	; (8004c94 <HAL_TIM_MspPostInit+0x100>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 8004c66:	23c0      	movs	r3, #192	; 0xc0
 8004c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c72:	2300      	movs	r3, #0
 8004c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c76:	2302      	movs	r3, #2
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c7a:	f107 0314 	add.w	r3, r7, #20
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4805      	ldr	r0, [pc, #20]	; (8004c98 <HAL_TIM_MspPostInit+0x104>)
 8004c82:	f001 ffe9 	bl	8006c58 <HAL_GPIO_Init>
}
 8004c86:	bf00      	nop
 8004c88:	3728      	adds	r7, #40	; 0x28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40023800 	.word	0x40023800
 8004c98:	40020000 	.word	0x40020000
 8004c9c:	40000400 	.word	0x40000400

08004ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b090      	sub	sp, #64	; 0x40
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	605a      	str	r2, [r3, #4]
 8004cb2:	609a      	str	r2, [r3, #8]
 8004cb4:	60da      	str	r2, [r3, #12]
 8004cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a7c      	ldr	r2, [pc, #496]	; (8004eb0 <HAL_UART_MspInit+0x210>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d153      	bne.n	8004d6a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc6:	4b7b      	ldr	r3, [pc, #492]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	4a7a      	ldr	r2, [pc, #488]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd2:	4b78      	ldr	r3, [pc, #480]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cde:	2300      	movs	r3, #0
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce2:	4b74      	ldr	r3, [pc, #464]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	4a73      	ldr	r2, [pc, #460]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004ce8:	f043 0304 	orr.w	r3, r3, #4
 8004cec:	6313      	str	r3, [r2, #48]	; 0x30
 8004cee:	4b71      	ldr	r3, [pc, #452]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	623b      	str	r3, [r7, #32]
 8004cfe:	4b6d      	ldr	r3, [pc, #436]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	4a6c      	ldr	r2, [pc, #432]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004d04:	f043 0308 	orr.w	r3, r3, #8
 8004d08:	6313      	str	r3, [r2, #48]	; 0x30
 8004d0a:	4b6a      	ldr	r3, [pc, #424]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	623b      	str	r3, [r7, #32]
 8004d14:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 8004d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d24:	2303      	movs	r3, #3
 8004d26:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004d28:	2308      	movs	r3, #8
 8004d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 8004d2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d30:	4619      	mov	r1, r3
 8004d32:	4861      	ldr	r0, [pc, #388]	; (8004eb8 <HAL_UART_MspInit+0x218>)
 8004d34:	f001 ff90 	bl	8006c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 8004d38:	2304      	movs	r3, #4
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d44:	2303      	movs	r3, #3
 8004d46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004d48:	2308      	movs	r3, #8
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 8004d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d50:	4619      	mov	r1, r3
 8004d52:	485a      	ldr	r0, [pc, #360]	; (8004ebc <HAL_UART_MspInit+0x21c>)
 8004d54:	f001 ff80 	bl	8006c58 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	2035      	movs	r0, #53	; 0x35
 8004d5e:	f001 f926 	bl	8005fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004d62:	2035      	movs	r0, #53	; 0x35
 8004d64:	f001 f93f 	bl	8005fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004d68:	e09e      	b.n	8004ea8 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a54      	ldr	r2, [pc, #336]	; (8004ec0 <HAL_UART_MspInit+0x220>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d135      	bne.n	8004de0 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d74:	2300      	movs	r3, #0
 8004d76:	61fb      	str	r3, [r7, #28]
 8004d78:	4b4e      	ldr	r3, [pc, #312]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7c:	4a4d      	ldr	r2, [pc, #308]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004d7e:	f043 0310 	orr.w	r3, r3, #16
 8004d82:	6453      	str	r3, [r2, #68]	; 0x44
 8004d84:	4b4b      	ldr	r3, [pc, #300]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d90:	2300      	movs	r3, #0
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	4b47      	ldr	r3, [pc, #284]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	4a46      	ldr	r2, [pc, #280]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8004da0:	4b44      	ldr	r3, [pc, #272]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 8004dac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db2:	2302      	movs	r3, #2
 8004db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004dbe:	2307      	movs	r3, #7
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	483e      	ldr	r0, [pc, #248]	; (8004ec4 <HAL_UART_MspInit+0x224>)
 8004dca:	f001 ff45 	bl	8006c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	2025      	movs	r0, #37	; 0x25
 8004dd4:	f001 f8eb 	bl	8005fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004dd8:	2025      	movs	r0, #37	; 0x25
 8004dda:	f001 f904 	bl	8005fe6 <HAL_NVIC_EnableIRQ>
}
 8004dde:	e063      	b.n	8004ea8 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a38      	ldr	r2, [pc, #224]	; (8004ec8 <HAL_UART_MspInit+0x228>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d12c      	bne.n	8004e44 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	4a30      	ldr	r2, [pc, #192]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dfa:	4b2e      	ldr	r3, [pc, #184]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	4b2a      	ldr	r3, [pc, #168]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	4a29      	ldr	r2, [pc, #164]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	6313      	str	r3, [r2, #48]	; 0x30
 8004e16:	4b27      	ldr	r3, [pc, #156]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8004e22:	230c      	movs	r3, #12
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e26:	2302      	movs	r3, #2
 8004e28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e32:	2307      	movs	r3, #7
 8004e34:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4821      	ldr	r0, [pc, #132]	; (8004ec4 <HAL_UART_MspInit+0x224>)
 8004e3e:	f001 ff0b 	bl	8006c58 <HAL_GPIO_Init>
}
 8004e42:	e031      	b.n	8004ea8 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a20      	ldr	r2, [pc, #128]	; (8004ecc <HAL_UART_MspInit+0x22c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d12c      	bne.n	8004ea8 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	4b18      	ldr	r3, [pc, #96]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	4a17      	ldr	r2, [pc, #92]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e5e:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60bb      	str	r3, [r7, #8]
 8004e6e:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	4a10      	ldr	r2, [pc, #64]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004e74:	f043 0304 	orr.w	r3, r3, #4
 8004e78:	6313      	str	r3, [r2, #48]	; 0x30
 8004e7a:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <HAL_UART_MspInit+0x214>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	60bb      	str	r3, [r7, #8]
 8004e84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 8004e86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e94:	2303      	movs	r3, #3
 8004e96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004e98:	2307      	movs	r3, #7
 8004e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4805      	ldr	r0, [pc, #20]	; (8004eb8 <HAL_UART_MspInit+0x218>)
 8004ea4:	f001 fed8 	bl	8006c58 <HAL_GPIO_Init>
}
 8004ea8:	bf00      	nop
 8004eaa:	3740      	adds	r7, #64	; 0x40
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40005000 	.word	0x40005000
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	40020800 	.word	0x40020800
 8004ebc:	40020c00 	.word	0x40020c00
 8004ec0:	40011000 	.word	0x40011000
 8004ec4:	40020000 	.word	0x40020000
 8004ec8:	40004400 	.word	0x40004400
 8004ecc:	40004800 	.word	0x40004800

08004ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ed4:	e7fe      	b.n	8004ed4 <NMI_Handler+0x4>

08004ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eda:	e7fe      	b.n	8004eda <HardFault_Handler+0x4>

08004edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ee0:	e7fe      	b.n	8004ee0 <MemManage_Handler+0x4>

08004ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ee6:	e7fe      	b.n	8004ee6 <BusFault_Handler+0x4>

08004ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004eec:	e7fe      	b.n	8004eec <UsageFault_Handler+0x4>

08004eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ef2:	bf00      	nop
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f0e:	bf00      	nop
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f1c:	f000 f98e 	bl	800523c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f20:	bf00      	nop
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004f28:	2010      	movs	r0, #16
 8004f2a:	f002 f875 	bl	8007018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004f2e:	bf00      	nop
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f38:	4802      	ldr	r0, [pc, #8]	; (8004f44 <TIM2_IRQHandler+0x10>)
 8004f3a:	f003 fc3f 	bl	80087bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f3e:	bf00      	nop
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000684 	.word	0x20000684

08004f48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f4c:	4802      	ldr	r0, [pc, #8]	; (8004f58 <USART1_IRQHandler+0x10>)
 8004f4e:	f004 ff57 	bl	8009e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004f52:	bf00      	nop
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000890 	.word	0x20000890

08004f5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(On_Board_Button_Pin);
 8004f60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004f64:	f002 f858 	bl	8007018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004f68:	bf00      	nop
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8004f70:	4802      	ldr	r0, [pc, #8]	; (8004f7c <DMA1_Stream7_IRQHandler+0x10>)
 8004f72:	f001 f9f9 	bl	8006368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004f76:	bf00      	nop
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	200007ec 	.word	0x200007ec

08004f80 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004f84:	4802      	ldr	r0, [pc, #8]	; (8004f90 <UART5_IRQHandler+0x10>)
 8004f86:	f004 ff3b 	bl	8009e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004f8a:	bf00      	nop
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	2000084c 	.word	0x2000084c

08004f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
	return 1;
 8004f98:	2301      	movs	r3, #1
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <_kill>:

int _kill(int pid, int sig)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004fae:	f005 fe8f 	bl	800acd0 <__errno>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2216      	movs	r2, #22
 8004fb6:	601a      	str	r2, [r3, #0]
	return -1;
 8004fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <_exit>:

void _exit (int status)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff ffe7 	bl	8004fa4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004fd6:	e7fe      	b.n	8004fd6 <_exit+0x12>

08004fd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	e00a      	b.n	8005000 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004fea:	f3af 8000 	nop.w
 8004fee:	4601      	mov	r1, r0
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	60ba      	str	r2, [r7, #8]
 8004ff6:	b2ca      	uxtb	r2, r1
 8004ff8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	429a      	cmp	r2, r3
 8005006:	dbf0      	blt.n	8004fea <_read+0x12>
	}

return len;
 8005008:	687b      	ldr	r3, [r7, #4]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b086      	sub	sp, #24
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	e009      	b.n	8005038 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	60ba      	str	r2, [r7, #8]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	3301      	adds	r3, #1
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	429a      	cmp	r2, r3
 800503e:	dbf1      	blt.n	8005024 <_write+0x12>
	}
	return len;
 8005040:	687b      	ldr	r3, [r7, #4]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <_close>:

int _close(int file)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
	return -1;
 8005052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005056:	4618      	mov	r0, r3
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005072:	605a      	str	r2, [r3, #4]
	return 0;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <_isatty>:

int _isatty(int file)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
	return 1;
 800508a:	2301      	movs	r3, #1
}
 800508c:	4618      	mov	r0, r3
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
	return 0;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
	...

080050b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050bc:	4a14      	ldr	r2, [pc, #80]	; (8005110 <_sbrk+0x5c>)
 80050be:	4b15      	ldr	r3, [pc, #84]	; (8005114 <_sbrk+0x60>)
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050c8:	4b13      	ldr	r3, [pc, #76]	; (8005118 <_sbrk+0x64>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d102      	bne.n	80050d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050d0:	4b11      	ldr	r3, [pc, #68]	; (8005118 <_sbrk+0x64>)
 80050d2:	4a12      	ldr	r2, [pc, #72]	; (800511c <_sbrk+0x68>)
 80050d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050d6:	4b10      	ldr	r3, [pc, #64]	; (8005118 <_sbrk+0x64>)
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4413      	add	r3, r2
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d207      	bcs.n	80050f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050e4:	f005 fdf4 	bl	800acd0 <__errno>
 80050e8:	4603      	mov	r3, r0
 80050ea:	220c      	movs	r2, #12
 80050ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050ee:	f04f 33ff 	mov.w	r3, #4294967295
 80050f2:	e009      	b.n	8005108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050f4:	4b08      	ldr	r3, [pc, #32]	; (8005118 <_sbrk+0x64>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050fa:	4b07      	ldr	r3, [pc, #28]	; (8005118 <_sbrk+0x64>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4413      	add	r3, r2
 8005102:	4a05      	ldr	r2, [pc, #20]	; (8005118 <_sbrk+0x64>)
 8005104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005106:	68fb      	ldr	r3, [r7, #12]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20020000 	.word	0x20020000
 8005114:	00000400 	.word	0x00000400
 8005118:	20000970 	.word	0x20000970
 800511c:	200009a8 	.word	0x200009a8

08005120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <SystemInit+0x20>)
 8005126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512a:	4a05      	ldr	r2, [pc, #20]	; (8005140 <SystemInit+0x20>)
 800512c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	e000ed00 	.word	0xe000ed00

08005144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 8005144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800517c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005148:	480d      	ldr	r0, [pc, #52]	; (8005180 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800514a:	490e      	ldr	r1, [pc, #56]	; (8005184 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800514c:	4a0e      	ldr	r2, [pc, #56]	; (8005188 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800514e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005150:	e002      	b.n	8005158 <LoopCopyDataInit>

08005152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005156:	3304      	adds	r3, #4

08005158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800515a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800515c:	d3f9      	bcc.n	8005152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800515e:	4a0b      	ldr	r2, [pc, #44]	; (800518c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005160:	4c0b      	ldr	r4, [pc, #44]	; (8005190 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005164:	e001      	b.n	800516a <LoopFillZerobss>

08005166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005168:	3204      	adds	r2, #4

0800516a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800516a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800516c:	d3fb      	bcc.n	8005166 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800516e:	f7ff ffd7 	bl	8005120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005172:	f005 fdb3 	bl	800acdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005176:	f7fe fbe5 	bl	8003944 <main>
  bx  lr    
 800517a:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 800517c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005184:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8005188:	0800f670 	.word	0x0800f670
  ldr r2, =_sbss
 800518c:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8005190:	200009a8 	.word	0x200009a8

08005194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005194:	e7fe      	b.n	8005194 <ADC_IRQHandler>
	...

08005198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800519c:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <HAL_Init+0x40>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a0d      	ldr	r2, [pc, #52]	; (80051d8 <HAL_Init+0x40>)
 80051a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <HAL_Init+0x40>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a0a      	ldr	r2, [pc, #40]	; (80051d8 <HAL_Init+0x40>)
 80051ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051b4:	4b08      	ldr	r3, [pc, #32]	; (80051d8 <HAL_Init+0x40>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a07      	ldr	r2, [pc, #28]	; (80051d8 <HAL_Init+0x40>)
 80051ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051c0:	2003      	movs	r0, #3
 80051c2:	f000 fee9 	bl	8005f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051c6:	2000      	movs	r0, #0
 80051c8:	f000 f808 	bl	80051dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051cc:	f7ff fb20 	bl	8004810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40023c00 	.word	0x40023c00

080051dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80051e4:	4b12      	ldr	r3, [pc, #72]	; (8005230 <HAL_InitTick+0x54>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	4b12      	ldr	r3, [pc, #72]	; (8005234 <HAL_InitTick+0x58>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	4619      	mov	r1, r3
 80051ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80051f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 ff0f 	bl	800601e <HAL_SYSTICK_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e00e      	b.n	8005228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b0f      	cmp	r3, #15
 800520e:	d80a      	bhi.n	8005226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005210:	2200      	movs	r2, #0
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	f04f 30ff 	mov.w	r0, #4294967295
 8005218:	f000 fec9 	bl	8005fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800521c:	4a06      	ldr	r2, [pc, #24]	; (8005238 <HAL_InitTick+0x5c>)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	e000      	b.n	8005228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
}
 8005228:	4618      	mov	r0, r3
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20000054 	.word	0x20000054
 8005234:	2000005c 	.word	0x2000005c
 8005238:	20000058 	.word	0x20000058

0800523c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005240:	4b06      	ldr	r3, [pc, #24]	; (800525c <HAL_IncTick+0x20>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	4b06      	ldr	r3, [pc, #24]	; (8005260 <HAL_IncTick+0x24>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4413      	add	r3, r2
 800524c:	4a04      	ldr	r2, [pc, #16]	; (8005260 <HAL_IncTick+0x24>)
 800524e:	6013      	str	r3, [r2, #0]
}
 8005250:	bf00      	nop
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	2000005c 	.word	0x2000005c
 8005260:	20000974 	.word	0x20000974

08005264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
  return uwTick;
 8005268:	4b03      	ldr	r3, [pc, #12]	; (8005278 <HAL_GetTick+0x14>)
 800526a:	681b      	ldr	r3, [r3, #0]
}
 800526c:	4618      	mov	r0, r3
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	20000974 	.word	0x20000974

0800527c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005284:	f7ff ffee 	bl	8005264 <HAL_GetTick>
 8005288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d005      	beq.n	80052a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <HAL_Delay+0x44>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80052a2:	bf00      	nop
 80052a4:	f7ff ffde 	bl	8005264 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d8f7      	bhi.n	80052a4 <HAL_Delay+0x28>
  {
  }
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	2000005c 	.word	0x2000005c

080052c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e033      	b.n	8005342 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff fabc 	bl	8004860 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d118      	bne.n	8005334 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800530a:	f023 0302 	bic.w	r3, r3, #2
 800530e:	f043 0202 	orr.w	r2, r3, #2
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fab4 	bl	8005884 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f023 0303 	bic.w	r3, r3, #3
 800532a:	f043 0201 	orr.w	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	641a      	str	r2, [r3, #64]	; 0x40
 8005332:	e001      	b.n	8005338 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_ADC_Start+0x1a>
 8005362:	2302      	movs	r3, #2
 8005364:	e0b2      	b.n	80054cc <HAL_ADC_Start+0x180>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b01      	cmp	r3, #1
 800537a:	d018      	beq.n	80053ae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800538c:	4b52      	ldr	r3, [pc, #328]	; (80054d8 <HAL_ADC_Start+0x18c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a52      	ldr	r2, [pc, #328]	; (80054dc <HAL_ADC_Start+0x190>)
 8005392:	fba2 2303 	umull	r2, r3, r2, r3
 8005396:	0c9a      	lsrs	r2, r3, #18
 8005398:	4613      	mov	r3, r2
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	4413      	add	r3, r2
 800539e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80053a0:	e002      	b.n	80053a8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1f9      	bne.n	80053a2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d17a      	bne.n	80054b2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80053e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fa:	d106      	bne.n	800540a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005400:	f023 0206 	bic.w	r2, r3, #6
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	645a      	str	r2, [r3, #68]	; 0x44
 8005408:	e002      	b.n	8005410 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005418:	4b31      	ldr	r3, [pc, #196]	; (80054e0 <HAL_ADC_Start+0x194>)
 800541a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005424:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 031f 	and.w	r3, r3, #31
 800542e:	2b00      	cmp	r3, #0
 8005430:	d12a      	bne.n	8005488 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a2b      	ldr	r2, [pc, #172]	; (80054e4 <HAL_ADC_Start+0x198>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d015      	beq.n	8005468 <HAL_ADC_Start+0x11c>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a29      	ldr	r2, [pc, #164]	; (80054e8 <HAL_ADC_Start+0x19c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d105      	bne.n	8005452 <HAL_ADC_Start+0x106>
 8005446:	4b26      	ldr	r3, [pc, #152]	; (80054e0 <HAL_ADC_Start+0x194>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a25      	ldr	r2, [pc, #148]	; (80054ec <HAL_ADC_Start+0x1a0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d136      	bne.n	80054ca <HAL_ADC_Start+0x17e>
 800545c:	4b20      	ldr	r3, [pc, #128]	; (80054e0 <HAL_ADC_Start+0x194>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b00      	cmp	r3, #0
 8005466:	d130      	bne.n	80054ca <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d129      	bne.n	80054ca <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005484:	609a      	str	r2, [r3, #8]
 8005486:	e020      	b.n	80054ca <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a15      	ldr	r2, [pc, #84]	; (80054e4 <HAL_ADC_Start+0x198>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d11b      	bne.n	80054ca <HAL_ADC_Start+0x17e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d114      	bne.n	80054ca <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054ae:	609a      	str	r2, [r3, #8]
 80054b0:	e00b      	b.n	80054ca <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f043 0210 	orr.w	r2, r3, #16
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c2:	f043 0201 	orr.w	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	20000054 	.word	0x20000054
 80054dc:	431bde83 	.word	0x431bde83
 80054e0:	40012300 	.word	0x40012300
 80054e4:	40012000 	.word	0x40012000
 80054e8:	40012100 	.word	0x40012100
 80054ec:	40012200 	.word	0x40012200

080054f0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550c:	d113      	bne.n	8005536 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551c:	d10b      	bne.n	8005536 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f043 0220 	orr.w	r2, r3, #32
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e063      	b.n	80055fe <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005536:	f7ff fe95 	bl	8005264 <HAL_GetTick>
 800553a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800553c:	e021      	b.n	8005582 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005544:	d01d      	beq.n	8005582 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <HAL_ADC_PollForConversion+0x6c>
 800554c:	f7ff fe8a 	bl	8005264 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d212      	bcs.n	8005582 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b02      	cmp	r3, #2
 8005568:	d00b      	beq.n	8005582 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f043 0204 	orr.w	r2, r3, #4
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e03d      	b.n	80055fe <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b02      	cmp	r3, #2
 800558e:	d1d6      	bne.n	800553e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0212 	mvn.w	r2, #18
 8005598:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d123      	bne.n	80055fc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d11f      	bne.n	80055fc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d006      	beq.n	80055d8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d111      	bne.n	80055fc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d105      	bne.n	80055fc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	f043 0201 	orr.w	r2, r3, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005614:	4618      	mov	r0, r3
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_ADC_ConfigChannel+0x1c>
 8005638:	2302      	movs	r3, #2
 800563a:	e113      	b.n	8005864 <HAL_ADC_ConfigChannel+0x244>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b09      	cmp	r3, #9
 800564a:	d925      	bls.n	8005698 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68d9      	ldr	r1, [r3, #12]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	4613      	mov	r3, r2
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	4413      	add	r3, r2
 8005660:	3b1e      	subs	r3, #30
 8005662:	2207      	movs	r2, #7
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	43da      	mvns	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	400a      	ands	r2, r1
 8005670:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68d9      	ldr	r1, [r3, #12]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	4618      	mov	r0, r3
 8005684:	4603      	mov	r3, r0
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	4403      	add	r3, r0
 800568a:	3b1e      	subs	r3, #30
 800568c:	409a      	lsls	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	60da      	str	r2, [r3, #12]
 8005696:	e022      	b.n	80056de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6919      	ldr	r1, [r3, #16]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	4613      	mov	r3, r2
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	4413      	add	r3, r2
 80056ac:	2207      	movs	r2, #7
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	43da      	mvns	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	400a      	ands	r2, r1
 80056ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6919      	ldr	r1, [r3, #16]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	4618      	mov	r0, r3
 80056ce:	4603      	mov	r3, r0
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	4403      	add	r3, r0
 80056d4:	409a      	lsls	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b06      	cmp	r3, #6
 80056e4:	d824      	bhi.n	8005730 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	3b05      	subs	r3, #5
 80056f8:	221f      	movs	r2, #31
 80056fa:	fa02 f303 	lsl.w	r3, r2, r3
 80056fe:	43da      	mvns	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	400a      	ands	r2, r1
 8005706:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	4618      	mov	r0, r3
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	3b05      	subs	r3, #5
 8005722:	fa00 f203 	lsl.w	r2, r0, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	635a      	str	r2, [r3, #52]	; 0x34
 800572e:	e04c      	b.n	80057ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b0c      	cmp	r3, #12
 8005736:	d824      	bhi.n	8005782 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	3b23      	subs	r3, #35	; 0x23
 800574a:	221f      	movs	r2, #31
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	43da      	mvns	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	400a      	ands	r2, r1
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	4618      	mov	r0, r3
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	3b23      	subs	r3, #35	; 0x23
 8005774:	fa00 f203 	lsl.w	r2, r0, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
 8005780:	e023      	b.n	80057ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	3b41      	subs	r3, #65	; 0x41
 8005794:	221f      	movs	r2, #31
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	43da      	mvns	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	400a      	ands	r2, r1
 80057a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	4618      	mov	r0, r3
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	3b41      	subs	r3, #65	; 0x41
 80057be:	fa00 f203 	lsl.w	r2, r0, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057ca:	4b29      	ldr	r3, [pc, #164]	; (8005870 <HAL_ADC_ConfigChannel+0x250>)
 80057cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a28      	ldr	r2, [pc, #160]	; (8005874 <HAL_ADC_ConfigChannel+0x254>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d10f      	bne.n	80057f8 <HAL_ADC_ConfigChannel+0x1d8>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b12      	cmp	r3, #18
 80057de:	d10b      	bne.n	80057f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <HAL_ADC_ConfigChannel+0x254>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d12b      	bne.n	800585a <HAL_ADC_ConfigChannel+0x23a>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1c      	ldr	r2, [pc, #112]	; (8005878 <HAL_ADC_ConfigChannel+0x258>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <HAL_ADC_ConfigChannel+0x1f4>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b11      	cmp	r3, #17
 8005812:	d122      	bne.n	800585a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a11      	ldr	r2, [pc, #68]	; (8005878 <HAL_ADC_ConfigChannel+0x258>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d111      	bne.n	800585a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005836:	4b11      	ldr	r3, [pc, #68]	; (800587c <HAL_ADC_ConfigChannel+0x25c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a11      	ldr	r2, [pc, #68]	; (8005880 <HAL_ADC_ConfigChannel+0x260>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	0c9a      	lsrs	r2, r3, #18
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800584c:	e002      	b.n	8005854 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	3b01      	subs	r3, #1
 8005852:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f9      	bne.n	800584e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	40012300 	.word	0x40012300
 8005874:	40012000 	.word	0x40012000
 8005878:	10000012 	.word	0x10000012
 800587c:	20000054 	.word	0x20000054
 8005880:	431bde83 	.word	0x431bde83

08005884 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800588c:	4b79      	ldr	r3, [pc, #484]	; (8005a74 <ADC_Init+0x1f0>)
 800588e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6859      	ldr	r1, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	021a      	lsls	r2, r3, #8
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80058dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6859      	ldr	r1, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6899      	ldr	r1, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005916:	4a58      	ldr	r2, [pc, #352]	; (8005a78 <ADC_Init+0x1f4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d022      	beq.n	8005962 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800592a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6899      	ldr	r1, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800594c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6899      	ldr	r1, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	609a      	str	r2, [r3, #8]
 8005960:	e00f      	b.n	8005982 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005970:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005980:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0202 	bic.w	r2, r2, #2
 8005990:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6899      	ldr	r1, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	7e1b      	ldrb	r3, [r3, #24]
 800599c:	005a      	lsls	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01b      	beq.n	80059e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80059ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6859      	ldr	r1, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	3b01      	subs	r3, #1
 80059dc:	035a      	lsls	r2, r3, #13
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	605a      	str	r2, [r3, #4]
 80059e6:	e007      	b.n	80059f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	051a      	lsls	r2, r3, #20
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6899      	ldr	r1, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a3a:	025a      	lsls	r2, r3, #9
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6899      	ldr	r1, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	029a      	lsls	r2, r3, #10
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	609a      	str	r2, [r3, #8]
}
 8005a68:	bf00      	nop
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	40012300 	.word	0x40012300
 8005a78:	0f000001 	.word	0x0f000001

08005a7c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e17e      	b.n	8005d92 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b09      	cmp	r3, #9
 8005aa2:	d925      	bls.n	8005af0 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68d9      	ldr	r1, [r3, #12]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	4413      	add	r3, r2
 8005ab8:	3b1e      	subs	r3, #30
 8005aba:	2207      	movs	r2, #7
 8005abc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac0:	43da      	mvns	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	400a      	ands	r2, r1
 8005ac8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68d9      	ldr	r1, [r3, #12]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	4618      	mov	r0, r3
 8005adc:	4603      	mov	r3, r0
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	4403      	add	r3, r0
 8005ae2:	3b1e      	subs	r3, #30
 8005ae4:	409a      	lsls	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	60da      	str	r2, [r3, #12]
 8005aee:	e022      	b.n	8005b36 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6919      	ldr	r1, [r3, #16]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	4613      	mov	r3, r2
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	4413      	add	r3, r2
 8005b04:	2207      	movs	r2, #7
 8005b06:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0a:	43da      	mvns	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	400a      	ands	r2, r1
 8005b12:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6919      	ldr	r1, [r3, #16]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	4618      	mov	r0, r3
 8005b26:	4603      	mov	r3, r0
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	4403      	add	r3, r0
 8005b2c:	409a      	lsls	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	3b01      	subs	r3, #1
 8005b52:	051a      	lsls	r2, r3, #20
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	3303      	adds	r3, #3
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	221f      	movs	r2, #31
 8005b80:	fa02 f303 	lsl.w	r3, r2, r3
 8005b84:	43da      	mvns	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	400a      	ands	r2, r1
 8005b8c:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	3303      	adds	r3, #3
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	4a75      	ldr	r2, [pc, #468]	; (8005da0 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d022      	beq.n	8005c14 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6899      	ldr	r1, [r3, #8]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	699a      	ldr	r2, [r3, #24]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005bfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6899      	ldr	r1, [r3, #8]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	69da      	ldr	r2, [r3, #28]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	609a      	str	r2, [r3, #8]
 8005c12:	e00f      	b.n	8005c34 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005c22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005c32:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	7d5b      	ldrb	r3, [r3, #21]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c4a:	605a      	str	r2, [r3, #4]
 8005c4c:	e007      	b.n	8005c5e <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5c:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	7d1b      	ldrb	r3, [r3, #20]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d008      	beq.n	8005c78 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c74:	605a      	str	r2, [r3, #4]
 8005c76:	e007      	b.n	8005c88 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c86:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d02e      	beq.n	8005cee <HAL_ADCEx_InjectedConfigChannel+0x272>
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d840      	bhi.n	8005d16 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d002      	beq.n	8005c9e <HAL_ADCEx_InjectedConfigChannel+0x222>
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d014      	beq.n	8005cc6 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8005c9c:	e03b      	b.n	8005d16 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005cac:	f023 030f 	bic.w	r3, r3, #15
 8005cb0:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6959      	ldr	r1, [r3, #20]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	615a      	str	r2, [r3, #20]
      break;
 8005cc4:	e03b      	b.n	8005d3e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005cd4:	f023 030f 	bic.w	r3, r3, #15
 8005cd8:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6999      	ldr	r1, [r3, #24]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	619a      	str	r2, [r3, #24]
      break;
 8005cec:	e027      	b.n	8005d3e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005cfc:	f023 030f 	bic.w	r3, r3, #15
 8005d00:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69d9      	ldr	r1, [r3, #28]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	61da      	str	r2, [r3, #28]
      break;
 8005d14:	e013      	b.n	8005d3e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6812      	ldr	r2, [r2, #0]
 8005d20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005d24:	f023 030f 	bic.w	r3, r3, #15
 8005d28:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6a19      	ldr	r1, [r3, #32]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	621a      	str	r2, [r3, #32]
      break;
 8005d3c:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d3e:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8005d40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a18      	ldr	r2, [pc, #96]	; (8005da8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d109      	bne.n	8005d60 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b12      	cmp	r3, #18
 8005d52:	d105      	bne.n	8005d60 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a10      	ldr	r2, [pc, #64]	; (8005da8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d10e      	bne.n	8005d88 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a0f      	ldr	r2, [pc, #60]	; (8005dac <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <HAL_ADCEx_InjectedConfigChannel+0x300>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b11      	cmp	r3, #17
 8005d7a:	d105      	bne.n	8005d88 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	000f0001 	.word	0x000f0001
 8005da4:	40012300 	.word	0x40012300
 8005da8:	40012000 	.word	0x40012000
 8005dac:	10000012 	.word	0x10000012

08005db0 <__NVIC_SetPriorityGrouping>:
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <__NVIC_SetPriorityGrouping+0x44>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005dcc:	4013      	ands	r3, r2
 8005dce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005de2:	4a04      	ldr	r2, [pc, #16]	; (8005df4 <__NVIC_SetPriorityGrouping+0x44>)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	60d3      	str	r3, [r2, #12]
}
 8005de8:	bf00      	nop
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	e000ed00 	.word	0xe000ed00

08005df8 <__NVIC_GetPriorityGrouping>:
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dfc:	4b04      	ldr	r3, [pc, #16]	; (8005e10 <__NVIC_GetPriorityGrouping+0x18>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	0a1b      	lsrs	r3, r3, #8
 8005e02:	f003 0307 	and.w	r3, r3, #7
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	e000ed00 	.word	0xe000ed00

08005e14 <__NVIC_EnableIRQ>:
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	db0b      	blt.n	8005e3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	f003 021f 	and.w	r2, r3, #31
 8005e2c:	4907      	ldr	r1, [pc, #28]	; (8005e4c <__NVIC_EnableIRQ+0x38>)
 8005e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	2001      	movs	r0, #1
 8005e36:	fa00 f202 	lsl.w	r2, r0, r2
 8005e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	e000e100 	.word	0xe000e100

08005e50 <__NVIC_DisableIRQ>:
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	db12      	blt.n	8005e88 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e62:	79fb      	ldrb	r3, [r7, #7]
 8005e64:	f003 021f 	and.w	r2, r3, #31
 8005e68:	490a      	ldr	r1, [pc, #40]	; (8005e94 <__NVIC_DisableIRQ+0x44>)
 8005e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	2001      	movs	r0, #1
 8005e72:	fa00 f202 	lsl.w	r2, r0, r2
 8005e76:	3320      	adds	r3, #32
 8005e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e7c:	f3bf 8f4f 	dsb	sy
}
 8005e80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e82:	f3bf 8f6f 	isb	sy
}
 8005e86:	bf00      	nop
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	e000e100 	.word	0xe000e100

08005e98 <__NVIC_SetPriority>:
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	6039      	str	r1, [r7, #0]
 8005ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	db0a      	blt.n	8005ec2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	490c      	ldr	r1, [pc, #48]	; (8005ee4 <__NVIC_SetPriority+0x4c>)
 8005eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb6:	0112      	lsls	r2, r2, #4
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	440b      	add	r3, r1
 8005ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005ec0:	e00a      	b.n	8005ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	4908      	ldr	r1, [pc, #32]	; (8005ee8 <__NVIC_SetPriority+0x50>)
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	3b04      	subs	r3, #4
 8005ed0:	0112      	lsls	r2, r2, #4
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	761a      	strb	r2, [r3, #24]
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	e000e100 	.word	0xe000e100
 8005ee8:	e000ed00 	.word	0xe000ed00

08005eec <NVIC_EncodePriority>:
{
 8005eec:	b480      	push	{r7}
 8005eee:	b089      	sub	sp, #36	; 0x24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f1c3 0307 	rsb	r3, r3, #7
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	bf28      	it	cs
 8005f0a:	2304      	movcs	r3, #4
 8005f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	3304      	adds	r3, #4
 8005f12:	2b06      	cmp	r3, #6
 8005f14:	d902      	bls.n	8005f1c <NVIC_EncodePriority+0x30>
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	3b03      	subs	r3, #3
 8005f1a:	e000      	b.n	8005f1e <NVIC_EncodePriority+0x32>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f20:	f04f 32ff 	mov.w	r2, #4294967295
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2a:	43da      	mvns	r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	401a      	ands	r2, r3
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f34:	f04f 31ff 	mov.w	r1, #4294967295
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f3e:	43d9      	mvns	r1, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f44:	4313      	orrs	r3, r2
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3724      	adds	r7, #36	; 0x24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
	...

08005f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f64:	d301      	bcc.n	8005f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f66:	2301      	movs	r3, #1
 8005f68:	e00f      	b.n	8005f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f6a:	4a0a      	ldr	r2, [pc, #40]	; (8005f94 <SysTick_Config+0x40>)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f72:	210f      	movs	r1, #15
 8005f74:	f04f 30ff 	mov.w	r0, #4294967295
 8005f78:	f7ff ff8e 	bl	8005e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f7c:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <SysTick_Config+0x40>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f82:	4b04      	ldr	r3, [pc, #16]	; (8005f94 <SysTick_Config+0x40>)
 8005f84:	2207      	movs	r2, #7
 8005f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	e000e010 	.word	0xe000e010

08005f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff ff05 	bl	8005db0 <__NVIC_SetPriorityGrouping>
}
 8005fa6:	bf00      	nop
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b086      	sub	sp, #24
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	607a      	str	r2, [r7, #4]
 8005fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005fc0:	f7ff ff1a 	bl	8005df8 <__NVIC_GetPriorityGrouping>
 8005fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	6978      	ldr	r0, [r7, #20]
 8005fcc:	f7ff ff8e 	bl	8005eec <NVIC_EncodePriority>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff ff5d 	bl	8005e98 <__NVIC_SetPriority>
}
 8005fde:	bf00      	nop
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	4603      	mov	r3, r0
 8005fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff ff0d 	bl	8005e14 <__NVIC_EnableIRQ>
}
 8005ffa:	bf00      	nop
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b082      	sub	sp, #8
 8006006:	af00      	add	r7, sp, #0
 8006008:	4603      	mov	r3, r0
 800600a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800600c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff ff1d 	bl	8005e50 <__NVIC_DisableIRQ>
}
 8006016:	bf00      	nop
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff ff94 	bl	8005f54 <SysTick_Config>
 800602c:	4603      	mov	r3, r0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006044:	f7ff f90e 	bl	8005264 <HAL_GetTick>
 8006048:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e099      	b.n	8006188 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006074:	e00f      	b.n	8006096 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006076:	f7ff f8f5 	bl	8005264 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b05      	cmp	r3, #5
 8006082:	d908      	bls.n	8006096 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2220      	movs	r2, #32
 8006088:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2203      	movs	r2, #3
 800608e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e078      	b.n	8006188 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e8      	bne.n	8006076 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4b38      	ldr	r3, [pc, #224]	; (8006190 <HAL_DMA_Init+0x158>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d107      	bne.n	8006100 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	4313      	orrs	r3, r2
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f023 0307 	bic.w	r3, r3, #7
 8006116:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	2b04      	cmp	r3, #4
 8006128:	d117      	bne.n	800615a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00e      	beq.n	800615a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fb01 	bl	8006744 <DMA_CheckFifoParam>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d008      	beq.n	800615a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2240      	movs	r2, #64	; 0x40
 800614c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006156:	2301      	movs	r3, #1
 8006158:	e016      	b.n	8006188 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fab8 	bl	80066d8 <DMA_CalcBaseAndBitshift>
 8006168:	4603      	mov	r3, r0
 800616a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006170:	223f      	movs	r2, #63	; 0x3f
 8006172:	409a      	lsls	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	f010803f 	.word	0xf010803f

08006194 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_DMA_Start_IT+0x26>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e040      	b.n	800623c <HAL_DMA_Start_IT+0xa8>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d12f      	bne.n	800622e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	68b9      	ldr	r1, [r7, #8]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 fa4a 	bl	800667c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ec:	223f      	movs	r2, #63	; 0x3f
 80061ee:	409a      	lsls	r2, r3
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0216 	orr.w	r2, r2, #22
 8006202:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0208 	orr.w	r2, r2, #8
 800621a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0201 	orr.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	e005      	b.n	800623a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006236:	2302      	movs	r3, #2
 8006238:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800623a:	7dfb      	ldrb	r3, [r7, #23]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006250:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006252:	f7ff f807 	bl	8005264 <HAL_GetTick>
 8006256:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d008      	beq.n	8006276 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2280      	movs	r2, #128	; 0x80
 8006268:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e052      	b.n	800631c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0216 	bic.w	r2, r2, #22
 8006284:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695a      	ldr	r2, [r3, #20]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006294:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	d103      	bne.n	80062a6 <HAL_DMA_Abort+0x62>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0208 	bic.w	r2, r2, #8
 80062b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0201 	bic.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062c6:	e013      	b.n	80062f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062c8:	f7fe ffcc 	bl	8005264 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b05      	cmp	r3, #5
 80062d4:	d90c      	bls.n	80062f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2203      	movs	r2, #3
 80062e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e015      	b.n	800631c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e4      	bne.n	80062c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006302:	223f      	movs	r2, #63	; 0x3f
 8006304:	409a      	lsls	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d004      	beq.n	8006342 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2280      	movs	r2, #128	; 0x80
 800633c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e00c      	b.n	800635c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2205      	movs	r2, #5
 8006346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0201 	bic.w	r2, r2, #1
 8006358:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006374:	4b8e      	ldr	r3, [pc, #568]	; (80065b0 <HAL_DMA_IRQHandler+0x248>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a8e      	ldr	r2, [pc, #568]	; (80065b4 <HAL_DMA_IRQHandler+0x24c>)
 800637a:	fba2 2303 	umull	r2, r3, r2, r3
 800637e:	0a9b      	lsrs	r3, r3, #10
 8006380:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006386:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006392:	2208      	movs	r2, #8
 8006394:	409a      	lsls	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4013      	ands	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d01a      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d013      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0204 	bic.w	r2, r2, #4
 80063ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c0:	2208      	movs	r2, #8
 80063c2:	409a      	lsls	r2, r3
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063cc:	f043 0201 	orr.w	r2, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d8:	2201      	movs	r2, #1
 80063da:	409a      	lsls	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4013      	ands	r3, r2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d012      	beq.n	800640a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00b      	beq.n	800640a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f6:	2201      	movs	r2, #1
 80063f8:	409a      	lsls	r2, r3
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006402:	f043 0202 	orr.w	r2, r3, #2
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640e:	2204      	movs	r2, #4
 8006410:	409a      	lsls	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4013      	ands	r3, r2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d012      	beq.n	8006440 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00b      	beq.n	8006440 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642c:	2204      	movs	r2, #4
 800642e:	409a      	lsls	r2, r3
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006438:	f043 0204 	orr.w	r2, r3, #4
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006444:	2210      	movs	r2, #16
 8006446:	409a      	lsls	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4013      	ands	r3, r2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d043      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d03c      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006462:	2210      	movs	r2, #16
 8006464:	409a      	lsls	r2, r3
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d018      	beq.n	80064aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d108      	bne.n	8006498 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	d024      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	4798      	blx	r3
 8006496:	e01f      	b.n	80064d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01b      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	4798      	blx	r3
 80064a8:	e016      	b.n	80064d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d107      	bne.n	80064c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0208 	bic.w	r2, r2, #8
 80064c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064dc:	2220      	movs	r2, #32
 80064de:	409a      	lsls	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4013      	ands	r3, r2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 808f 	beq.w	8006608 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8087 	beq.w	8006608 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fe:	2220      	movs	r2, #32
 8006500:	409a      	lsls	r2, r3
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b05      	cmp	r3, #5
 8006510:	d136      	bne.n	8006580 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0216 	bic.w	r2, r2, #22
 8006520:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695a      	ldr	r2, [r3, #20]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006530:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	2b00      	cmp	r3, #0
 8006538:	d103      	bne.n	8006542 <HAL_DMA_IRQHandler+0x1da>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 0208 	bic.w	r2, r2, #8
 8006550:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006556:	223f      	movs	r2, #63	; 0x3f
 8006558:	409a      	lsls	r2, r3
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006572:	2b00      	cmp	r3, #0
 8006574:	d07e      	beq.n	8006674 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	4798      	blx	r3
        }
        return;
 800657e:	e079      	b.n	8006674 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d01d      	beq.n	80065ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10d      	bne.n	80065b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d031      	beq.n	8006608 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	4798      	blx	r3
 80065ac:	e02c      	b.n	8006608 <HAL_DMA_IRQHandler+0x2a0>
 80065ae:	bf00      	nop
 80065b0:	20000054 	.word	0x20000054
 80065b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d023      	beq.n	8006608 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	4798      	blx	r3
 80065c8:	e01e      	b.n	8006608 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10f      	bne.n	80065f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0210 	bic.w	r2, r2, #16
 80065e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660c:	2b00      	cmp	r3, #0
 800660e:	d032      	beq.n	8006676 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d022      	beq.n	8006662 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2205      	movs	r2, #5
 8006620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0201 	bic.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	3301      	adds	r3, #1
 8006638:	60bb      	str	r3, [r7, #8]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	429a      	cmp	r2, r3
 800663e:	d307      	bcc.n	8006650 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f2      	bne.n	8006634 <HAL_DMA_IRQHandler+0x2cc>
 800664e:	e000      	b.n	8006652 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006650:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d005      	beq.n	8006676 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4798      	blx	r3
 8006672:	e000      	b.n	8006676 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006674:	bf00      	nop
    }
  }
}
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006698:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	2b40      	cmp	r3, #64	; 0x40
 80066a8:	d108      	bne.n	80066bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80066ba:	e007      	b.n	80066cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	60da      	str	r2, [r3, #12]
}
 80066cc:	bf00      	nop
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	3b10      	subs	r3, #16
 80066e8:	4a14      	ldr	r2, [pc, #80]	; (800673c <DMA_CalcBaseAndBitshift+0x64>)
 80066ea:	fba2 2303 	umull	r2, r3, r2, r3
 80066ee:	091b      	lsrs	r3, r3, #4
 80066f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80066f2:	4a13      	ldr	r2, [pc, #76]	; (8006740 <DMA_CalcBaseAndBitshift+0x68>)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2b03      	cmp	r3, #3
 8006704:	d909      	bls.n	800671a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800670e:	f023 0303 	bic.w	r3, r3, #3
 8006712:	1d1a      	adds	r2, r3, #4
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	659a      	str	r2, [r3, #88]	; 0x58
 8006718:	e007      	b.n	800672a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006722:	f023 0303 	bic.w	r3, r3, #3
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800672e:	4618      	mov	r0, r3
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	aaaaaaab 	.word	0xaaaaaaab
 8006740:	0800f060 	.word	0x0800f060

08006744 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d11f      	bne.n	800679e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2b03      	cmp	r3, #3
 8006762:	d856      	bhi.n	8006812 <DMA_CheckFifoParam+0xce>
 8006764:	a201      	add	r2, pc, #4	; (adr r2, 800676c <DMA_CheckFifoParam+0x28>)
 8006766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676a:	bf00      	nop
 800676c:	0800677d 	.word	0x0800677d
 8006770:	0800678f 	.word	0x0800678f
 8006774:	0800677d 	.word	0x0800677d
 8006778:	08006813 	.word	0x08006813
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d046      	beq.n	8006816 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800678c:	e043      	b.n	8006816 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006796:	d140      	bne.n	800681a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800679c:	e03d      	b.n	800681a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a6:	d121      	bne.n	80067ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d837      	bhi.n	800681e <DMA_CheckFifoParam+0xda>
 80067ae:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <DMA_CheckFifoParam+0x70>)
 80067b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b4:	080067c5 	.word	0x080067c5
 80067b8:	080067cb 	.word	0x080067cb
 80067bc:	080067c5 	.word	0x080067c5
 80067c0:	080067dd 	.word	0x080067dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	73fb      	strb	r3, [r7, #15]
      break;
 80067c8:	e030      	b.n	800682c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d025      	beq.n	8006822 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067da:	e022      	b.n	8006822 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067e4:	d11f      	bne.n	8006826 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80067ea:	e01c      	b.n	8006826 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d903      	bls.n	80067fa <DMA_CheckFifoParam+0xb6>
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d003      	beq.n	8006800 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80067f8:	e018      	b.n	800682c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	73fb      	strb	r3, [r7, #15]
      break;
 80067fe:	e015      	b.n	800682c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00e      	beq.n	800682a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	73fb      	strb	r3, [r7, #15]
      break;
 8006810:	e00b      	b.n	800682a <DMA_CheckFifoParam+0xe6>
      break;
 8006812:	bf00      	nop
 8006814:	e00a      	b.n	800682c <DMA_CheckFifoParam+0xe8>
      break;
 8006816:	bf00      	nop
 8006818:	e008      	b.n	800682c <DMA_CheckFifoParam+0xe8>
      break;
 800681a:	bf00      	nop
 800681c:	e006      	b.n	800682c <DMA_CheckFifoParam+0xe8>
      break;
 800681e:	bf00      	nop
 8006820:	e004      	b.n	800682c <DMA_CheckFifoParam+0xe8>
      break;
 8006822:	bf00      	nop
 8006824:	e002      	b.n	800682c <DMA_CheckFifoParam+0xe8>
      break;   
 8006826:	bf00      	nop
 8006828:	e000      	b.n	800682c <DMA_CheckFifoParam+0xe8>
      break;
 800682a:	bf00      	nop
    }
  } 
  
  return status; 
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop

0800683c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800684e:	4b23      	ldr	r3, [pc, #140]	; (80068dc <HAL_FLASH_Program+0xa0>)
 8006850:	7e1b      	ldrb	r3, [r3, #24]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_FLASH_Program+0x1e>
 8006856:	2302      	movs	r3, #2
 8006858:	e03b      	b.n	80068d2 <HAL_FLASH_Program+0x96>
 800685a:	4b20      	ldr	r3, [pc, #128]	; (80068dc <HAL_FLASH_Program+0xa0>)
 800685c:	2201      	movs	r2, #1
 800685e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006860:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006864:	f000 f870 	bl	8006948 <FLASH_WaitForLastOperation>
 8006868:	4603      	mov	r3, r0
 800686a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800686c:	7dfb      	ldrb	r3, [r7, #23]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d12b      	bne.n	80068ca <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d105      	bne.n	8006884 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006878:	783b      	ldrb	r3, [r7, #0]
 800687a:	4619      	mov	r1, r3
 800687c:	68b8      	ldr	r0, [r7, #8]
 800687e:	f000 f91b 	bl	8006ab8 <FLASH_Program_Byte>
 8006882:	e016      	b.n	80068b2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d105      	bne.n	8006896 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800688a:	883b      	ldrh	r3, [r7, #0]
 800688c:	4619      	mov	r1, r3
 800688e:	68b8      	ldr	r0, [r7, #8]
 8006890:	f000 f8ee 	bl	8006a70 <FLASH_Program_HalfWord>
 8006894:	e00d      	b.n	80068b2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b02      	cmp	r3, #2
 800689a:	d105      	bne.n	80068a8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	4619      	mov	r1, r3
 80068a0:	68b8      	ldr	r0, [r7, #8]
 80068a2:	f000 f8c3 	bl	8006a2c <FLASH_Program_Word>
 80068a6:	e004      	b.n	80068b2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80068a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ac:	68b8      	ldr	r0, [r7, #8]
 80068ae:	f000 f88b 	bl	80069c8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80068b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80068b6:	f000 f847 	bl	8006948 <FLASH_WaitForLastOperation>
 80068ba:	4603      	mov	r3, r0
 80068bc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80068be:	4b08      	ldr	r3, [pc, #32]	; (80068e0 <HAL_FLASH_Program+0xa4>)
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	4a07      	ldr	r2, [pc, #28]	; (80068e0 <HAL_FLASH_Program+0xa4>)
 80068c4:	f023 0301 	bic.w	r3, r3, #1
 80068c8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80068ca:	4b04      	ldr	r3, [pc, #16]	; (80068dc <HAL_FLASH_Program+0xa0>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	761a      	strb	r2, [r3, #24]
  
  return status;
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20000978 	.word	0x20000978
 80068e0:	40023c00 	.word	0x40023c00

080068e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80068ee:	4b0b      	ldr	r3, [pc, #44]	; (800691c <HAL_FLASH_Unlock+0x38>)
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	da0b      	bge.n	800690e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80068f6:	4b09      	ldr	r3, [pc, #36]	; (800691c <HAL_FLASH_Unlock+0x38>)
 80068f8:	4a09      	ldr	r2, [pc, #36]	; (8006920 <HAL_FLASH_Unlock+0x3c>)
 80068fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80068fc:	4b07      	ldr	r3, [pc, #28]	; (800691c <HAL_FLASH_Unlock+0x38>)
 80068fe:	4a09      	ldr	r2, [pc, #36]	; (8006924 <HAL_FLASH_Unlock+0x40>)
 8006900:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006902:	4b06      	ldr	r3, [pc, #24]	; (800691c <HAL_FLASH_Unlock+0x38>)
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	da01      	bge.n	800690e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800690e:	79fb      	ldrb	r3, [r7, #7]
}
 8006910:	4618      	mov	r0, r3
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	40023c00 	.word	0x40023c00
 8006920:	45670123 	.word	0x45670123
 8006924:	cdef89ab 	.word	0xcdef89ab

08006928 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800692c:	4b05      	ldr	r3, [pc, #20]	; (8006944 <HAL_FLASH_Lock+0x1c>)
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	4a04      	ldr	r2, [pc, #16]	; (8006944 <HAL_FLASH_Lock+0x1c>)
 8006932:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006936:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	40023c00 	.word	0x40023c00

08006948 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006954:	4b1a      	ldr	r3, [pc, #104]	; (80069c0 <FLASH_WaitForLastOperation+0x78>)
 8006956:	2200      	movs	r2, #0
 8006958:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800695a:	f7fe fc83 	bl	8005264 <HAL_GetTick>
 800695e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006960:	e010      	b.n	8006984 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d00c      	beq.n	8006984 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d007      	beq.n	8006980 <FLASH_WaitForLastOperation+0x38>
 8006970:	f7fe fc78 	bl	8005264 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	429a      	cmp	r2, r3
 800697e:	d201      	bcs.n	8006984 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e019      	b.n	80069b8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006984:	4b0f      	ldr	r3, [pc, #60]	; (80069c4 <FLASH_WaitForLastOperation+0x7c>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e8      	bne.n	8006962 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006990:	4b0c      	ldr	r3, [pc, #48]	; (80069c4 <FLASH_WaitForLastOperation+0x7c>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800699c:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <FLASH_WaitForLastOperation+0x7c>)
 800699e:	2201      	movs	r2, #1
 80069a0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80069a2:	4b08      	ldr	r3, [pc, #32]	; (80069c4 <FLASH_WaitForLastOperation+0x7c>)
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80069ae:	f000 f8a5 	bl	8006afc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e000      	b.n	80069b8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
  
}  
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20000978 	.word	0x20000978
 80069c4:	40023c00 	.word	0x40023c00

080069c8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80069d4:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <FLASH_Program_DoubleWord+0x60>)
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	4a13      	ldr	r2, [pc, #76]	; (8006a28 <FLASH_Program_DoubleWord+0x60>)
 80069da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80069e0:	4b11      	ldr	r3, [pc, #68]	; (8006a28 <FLASH_Program_DoubleWord+0x60>)
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	4a10      	ldr	r2, [pc, #64]	; (8006a28 <FLASH_Program_DoubleWord+0x60>)
 80069e6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80069ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80069ec:	4b0e      	ldr	r3, [pc, #56]	; (8006a28 <FLASH_Program_DoubleWord+0x60>)
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	4a0d      	ldr	r2, [pc, #52]	; (8006a28 <FLASH_Program_DoubleWord+0x60>)
 80069f2:	f043 0301 	orr.w	r3, r3, #1
 80069f6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80069fe:	f3bf 8f6f 	isb	sy
}
 8006a02:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006a04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	000a      	movs	r2, r1
 8006a12:	2300      	movs	r3, #0
 8006a14:	68f9      	ldr	r1, [r7, #12]
 8006a16:	3104      	adds	r1, #4
 8006a18:	4613      	mov	r3, r2
 8006a1a:	600b      	str	r3, [r1, #0]
}
 8006a1c:	bf00      	nop
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	40023c00 	.word	0x40023c00

08006a2c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006a36:	4b0d      	ldr	r3, [pc, #52]	; (8006a6c <FLASH_Program_Word+0x40>)
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	4a0c      	ldr	r2, [pc, #48]	; (8006a6c <FLASH_Program_Word+0x40>)
 8006a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006a42:	4b0a      	ldr	r3, [pc, #40]	; (8006a6c <FLASH_Program_Word+0x40>)
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	4a09      	ldr	r2, [pc, #36]	; (8006a6c <FLASH_Program_Word+0x40>)
 8006a48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006a4e:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <FLASH_Program_Word+0x40>)
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	4a06      	ldr	r2, [pc, #24]	; (8006a6c <FLASH_Program_Word+0x40>)
 8006a54:	f043 0301 	orr.w	r3, r3, #1
 8006a58:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	601a      	str	r2, [r3, #0]
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	40023c00 	.word	0x40023c00

08006a70 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006a7c:	4b0d      	ldr	r3, [pc, #52]	; (8006ab4 <FLASH_Program_HalfWord+0x44>)
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	4a0c      	ldr	r2, [pc, #48]	; (8006ab4 <FLASH_Program_HalfWord+0x44>)
 8006a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006a88:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <FLASH_Program_HalfWord+0x44>)
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	4a09      	ldr	r2, [pc, #36]	; (8006ab4 <FLASH_Program_HalfWord+0x44>)
 8006a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006a94:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <FLASH_Program_HalfWord+0x44>)
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	4a06      	ldr	r2, [pc, #24]	; (8006ab4 <FLASH_Program_HalfWord+0x44>)
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	887a      	ldrh	r2, [r7, #2]
 8006aa4:	801a      	strh	r2, [r3, #0]
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	40023c00 	.word	0x40023c00

08006ab8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006ac4:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <FLASH_Program_Byte+0x40>)
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	4a0b      	ldr	r2, [pc, #44]	; (8006af8 <FLASH_Program_Byte+0x40>)
 8006aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ace:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006ad0:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <FLASH_Program_Byte+0x40>)
 8006ad2:	4a09      	ldr	r2, [pc, #36]	; (8006af8 <FLASH_Program_Byte+0x40>)
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006ad8:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <FLASH_Program_Byte+0x40>)
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	4a06      	ldr	r2, [pc, #24]	; (8006af8 <FLASH_Program_Byte+0x40>)
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	78fa      	ldrb	r2, [r7, #3]
 8006ae8:	701a      	strb	r2, [r3, #0]
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40023c00 	.word	0x40023c00

08006afc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006b00:	4b2f      	ldr	r3, [pc, #188]	; (8006bc0 <FLASH_SetErrorCode+0xc4>)
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d008      	beq.n	8006b1e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006b0c:	4b2d      	ldr	r3, [pc, #180]	; (8006bc4 <FLASH_SetErrorCode+0xc8>)
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	f043 0310 	orr.w	r3, r3, #16
 8006b14:	4a2b      	ldr	r2, [pc, #172]	; (8006bc4 <FLASH_SetErrorCode+0xc8>)
 8006b16:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006b18:	4b29      	ldr	r3, [pc, #164]	; (8006bc0 <FLASH_SetErrorCode+0xc4>)
 8006b1a:	2210      	movs	r2, #16
 8006b1c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006b1e:	4b28      	ldr	r3, [pc, #160]	; (8006bc0 <FLASH_SetErrorCode+0xc4>)
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f003 0320 	and.w	r3, r3, #32
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d008      	beq.n	8006b3c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006b2a:	4b26      	ldr	r3, [pc, #152]	; (8006bc4 <FLASH_SetErrorCode+0xc8>)
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	f043 0308 	orr.w	r3, r3, #8
 8006b32:	4a24      	ldr	r2, [pc, #144]	; (8006bc4 <FLASH_SetErrorCode+0xc8>)
 8006b34:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006b36:	4b22      	ldr	r3, [pc, #136]	; (8006bc0 <FLASH_SetErrorCode+0xc4>)
 8006b38:	2220      	movs	r2, #32
 8006b3a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006b3c:	4b20      	ldr	r3, [pc, #128]	; (8006bc0 <FLASH_SetErrorCode+0xc4>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006b48:	4b1e      	ldr	r3, [pc, #120]	; (8006bc4 <FLASH_SetErrorCode+0xc8>)
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	f043 0304 	orr.w	r3, r3, #4
 8006b50:	4a1c      	ldr	r2, [pc, #112]	; (8006bc4 <FLASH_SetErrorCode+0xc8>)
 8006b52:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006b54:	4b1a      	ldr	r3, [pc, #104]	; (8006bc0 <FLASH_SetErrorCode+0xc4>)
 8006b56:	2240      	movs	r2, #64	; 0x40
 8006b58:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006b5a:	4b19      	ldr	r3, [pc, #100]	; (8006bc0 <FLASH_SetErrorCode+0xc4>)
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d008      	beq.n	8006b78 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006b66:	4b17      	ldr	r3, [pc, #92]	; (8006bc4 <FLASH_SetErrorCode+0xc8>)
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	f043 0302 	orr.w	r3, r3, #2
 8006b6e:	4a15      	ldr	r2, [pc, #84]	; (8006bc4 <FLASH_SetErrorCode+0xc8>)
 8006b70:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006b72:	4b13      	ldr	r3, [pc, #76]	; (8006bc0 <FLASH_SetErrorCode+0xc4>)
 8006b74:	2280      	movs	r2, #128	; 0x80
 8006b76:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006b78:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <FLASH_SetErrorCode+0xc4>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d009      	beq.n	8006b98 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006b84:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <FLASH_SetErrorCode+0xc8>)
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	f043 0301 	orr.w	r3, r3, #1
 8006b8c:	4a0d      	ldr	r2, [pc, #52]	; (8006bc4 <FLASH_SetErrorCode+0xc8>)
 8006b8e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006b90:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <FLASH_SetErrorCode+0xc4>)
 8006b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b96:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006b98:	4b09      	ldr	r3, [pc, #36]	; (8006bc0 <FLASH_SetErrorCode+0xc4>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d008      	beq.n	8006bb6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006ba4:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <FLASH_SetErrorCode+0xc8>)
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	f043 0320 	orr.w	r3, r3, #32
 8006bac:	4a05      	ldr	r2, [pc, #20]	; (8006bc4 <FLASH_SetErrorCode+0xc8>)
 8006bae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006bb0:	4b03      	ldr	r3, [pc, #12]	; (8006bc0 <FLASH_SetErrorCode+0xc4>)
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	60da      	str	r2, [r3, #12]
  }
}
 8006bb6:	bf00      	nop
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40023c00 	.word	0x40023c00
 8006bc4:	20000978 	.word	0x20000978

08006bc8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d102      	bne.n	8006be4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
 8006be2:	e010      	b.n	8006c06 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d103      	bne.n	8006bf2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	e009      	b.n	8006c06 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006bf2:	78fb      	ldrb	r3, [r7, #3]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d103      	bne.n	8006c00 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	e002      	b.n	8006c06 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006c00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006c04:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006c06:	4b13      	ldr	r3, [pc, #76]	; (8006c54 <FLASH_Erase_Sector+0x8c>)
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	4a12      	ldr	r2, [pc, #72]	; (8006c54 <FLASH_Erase_Sector+0x8c>)
 8006c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006c12:	4b10      	ldr	r3, [pc, #64]	; (8006c54 <FLASH_Erase_Sector+0x8c>)
 8006c14:	691a      	ldr	r2, [r3, #16]
 8006c16:	490f      	ldr	r1, [pc, #60]	; (8006c54 <FLASH_Erase_Sector+0x8c>)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006c1e:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <FLASH_Erase_Sector+0x8c>)
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	4a0c      	ldr	r2, [pc, #48]	; (8006c54 <FLASH_Erase_Sector+0x8c>)
 8006c24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006c28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006c2a:	4b0a      	ldr	r3, [pc, #40]	; (8006c54 <FLASH_Erase_Sector+0x8c>)
 8006c2c:	691a      	ldr	r2, [r3, #16]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	4313      	orrs	r3, r2
 8006c34:	4a07      	ldr	r2, [pc, #28]	; (8006c54 <FLASH_Erase_Sector+0x8c>)
 8006c36:	f043 0302 	orr.w	r3, r3, #2
 8006c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006c3c:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <FLASH_Erase_Sector+0x8c>)
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	4a04      	ldr	r2, [pc, #16]	; (8006c54 <FLASH_Erase_Sector+0x8c>)
 8006c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c46:	6113      	str	r3, [r2, #16]
}
 8006c48:	bf00      	nop
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	40023c00 	.word	0x40023c00

08006c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b089      	sub	sp, #36	; 0x24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c62:	2300      	movs	r3, #0
 8006c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61fb      	str	r3, [r7, #28]
 8006c72:	e165      	b.n	8006f40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c74:	2201      	movs	r2, #1
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	4013      	ands	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	f040 8154 	bne.w	8006f3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d005      	beq.n	8006caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d130      	bne.n	8006d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cba:	43db      	mvns	r3, r3
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	fa02 f303 	lsl.w	r3, r2, r3
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce8:	43db      	mvns	r3, r3
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	4013      	ands	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	091b      	lsrs	r3, r3, #4
 8006cf6:	f003 0201 	and.w	r2, r3, #1
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d017      	beq.n	8006d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	2203      	movs	r2, #3
 8006d24:	fa02 f303 	lsl.w	r3, r2, r3
 8006d28:	43db      	mvns	r3, r3
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f003 0303 	and.w	r3, r3, #3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d123      	bne.n	8006d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	08da      	lsrs	r2, r3, #3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3208      	adds	r2, #8
 8006d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	f003 0307 	and.w	r3, r3, #7
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	220f      	movs	r2, #15
 8006d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d70:	43db      	mvns	r3, r3
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	4013      	ands	r3, r2
 8006d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	fa02 f303 	lsl.w	r3, r2, r3
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	08da      	lsrs	r2, r3, #3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3208      	adds	r2, #8
 8006d96:	69b9      	ldr	r1, [r7, #24]
 8006d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	2203      	movs	r2, #3
 8006da8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dac:	43db      	mvns	r3, r3
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	4013      	ands	r3, r2
 8006db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f003 0203 	and.w	r2, r3, #3
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 80ae 	beq.w	8006f3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	4b5d      	ldr	r3, [pc, #372]	; (8006f58 <HAL_GPIO_Init+0x300>)
 8006de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de6:	4a5c      	ldr	r2, [pc, #368]	; (8006f58 <HAL_GPIO_Init+0x300>)
 8006de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dec:	6453      	str	r3, [r2, #68]	; 0x44
 8006dee:	4b5a      	ldr	r3, [pc, #360]	; (8006f58 <HAL_GPIO_Init+0x300>)
 8006df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006dfa:	4a58      	ldr	r2, [pc, #352]	; (8006f5c <HAL_GPIO_Init+0x304>)
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	089b      	lsrs	r3, r3, #2
 8006e00:	3302      	adds	r3, #2
 8006e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	f003 0303 	and.w	r3, r3, #3
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	220f      	movs	r2, #15
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	43db      	mvns	r3, r3
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a4f      	ldr	r2, [pc, #316]	; (8006f60 <HAL_GPIO_Init+0x308>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d025      	beq.n	8006e72 <HAL_GPIO_Init+0x21a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a4e      	ldr	r2, [pc, #312]	; (8006f64 <HAL_GPIO_Init+0x30c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d01f      	beq.n	8006e6e <HAL_GPIO_Init+0x216>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a4d      	ldr	r2, [pc, #308]	; (8006f68 <HAL_GPIO_Init+0x310>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d019      	beq.n	8006e6a <HAL_GPIO_Init+0x212>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a4c      	ldr	r2, [pc, #304]	; (8006f6c <HAL_GPIO_Init+0x314>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d013      	beq.n	8006e66 <HAL_GPIO_Init+0x20e>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a4b      	ldr	r2, [pc, #300]	; (8006f70 <HAL_GPIO_Init+0x318>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d00d      	beq.n	8006e62 <HAL_GPIO_Init+0x20a>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a4a      	ldr	r2, [pc, #296]	; (8006f74 <HAL_GPIO_Init+0x31c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d007      	beq.n	8006e5e <HAL_GPIO_Init+0x206>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a49      	ldr	r2, [pc, #292]	; (8006f78 <HAL_GPIO_Init+0x320>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d101      	bne.n	8006e5a <HAL_GPIO_Init+0x202>
 8006e56:	2306      	movs	r3, #6
 8006e58:	e00c      	b.n	8006e74 <HAL_GPIO_Init+0x21c>
 8006e5a:	2307      	movs	r3, #7
 8006e5c:	e00a      	b.n	8006e74 <HAL_GPIO_Init+0x21c>
 8006e5e:	2305      	movs	r3, #5
 8006e60:	e008      	b.n	8006e74 <HAL_GPIO_Init+0x21c>
 8006e62:	2304      	movs	r3, #4
 8006e64:	e006      	b.n	8006e74 <HAL_GPIO_Init+0x21c>
 8006e66:	2303      	movs	r3, #3
 8006e68:	e004      	b.n	8006e74 <HAL_GPIO_Init+0x21c>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e002      	b.n	8006e74 <HAL_GPIO_Init+0x21c>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e000      	b.n	8006e74 <HAL_GPIO_Init+0x21c>
 8006e72:	2300      	movs	r3, #0
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	f002 0203 	and.w	r2, r2, #3
 8006e7a:	0092      	lsls	r2, r2, #2
 8006e7c:	4093      	lsls	r3, r2
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e84:	4935      	ldr	r1, [pc, #212]	; (8006f5c <HAL_GPIO_Init+0x304>)
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	089b      	lsrs	r3, r3, #2
 8006e8a:	3302      	adds	r3, #2
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e92:	4b3a      	ldr	r3, [pc, #232]	; (8006f7c <HAL_GPIO_Init+0x324>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	43db      	mvns	r3, r3
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006eb6:	4a31      	ldr	r2, [pc, #196]	; (8006f7c <HAL_GPIO_Init+0x324>)
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ebc:	4b2f      	ldr	r3, [pc, #188]	; (8006f7c <HAL_GPIO_Init+0x324>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	43db      	mvns	r3, r3
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d003      	beq.n	8006ee0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ee0:	4a26      	ldr	r2, [pc, #152]	; (8006f7c <HAL_GPIO_Init+0x324>)
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006ee6:	4b25      	ldr	r3, [pc, #148]	; (8006f7c <HAL_GPIO_Init+0x324>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	43db      	mvns	r3, r3
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f0a:	4a1c      	ldr	r2, [pc, #112]	; (8006f7c <HAL_GPIO_Init+0x324>)
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f10:	4b1a      	ldr	r3, [pc, #104]	; (8006f7c <HAL_GPIO_Init+0x324>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	43db      	mvns	r3, r3
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f34:	4a11      	ldr	r2, [pc, #68]	; (8006f7c <HAL_GPIO_Init+0x324>)
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	2b0f      	cmp	r3, #15
 8006f44:	f67f ae96 	bls.w	8006c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f48:	bf00      	nop
 8006f4a:	bf00      	nop
 8006f4c:	3724      	adds	r7, #36	; 0x24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	40013800 	.word	0x40013800
 8006f60:	40020000 	.word	0x40020000
 8006f64:	40020400 	.word	0x40020400
 8006f68:	40020800 	.word	0x40020800
 8006f6c:	40020c00 	.word	0x40020c00
 8006f70:	40021000 	.word	0x40021000
 8006f74:	40021400 	.word	0x40021400
 8006f78:	40021800 	.word	0x40021800
 8006f7c:	40013c00 	.word	0x40013c00

08006f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	887b      	ldrh	r3, [r7, #2]
 8006f92:	4013      	ands	r3, r2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	73fb      	strb	r3, [r7, #15]
 8006f9c:	e001      	b.n	8006fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	807b      	strh	r3, [r7, #2]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fc0:	787b      	ldrb	r3, [r7, #1]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fc6:	887a      	ldrh	r2, [r7, #2]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006fcc:	e003      	b.n	8006fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006fce:	887b      	ldrh	r3, [r7, #2]
 8006fd0:	041a      	lsls	r2, r3, #16
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	619a      	str	r2, [r3, #24]
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b085      	sub	sp, #20
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	460b      	mov	r3, r1
 8006fec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ff4:	887a      	ldrh	r2, [r7, #2]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	041a      	lsls	r2, r3, #16
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	43d9      	mvns	r1, r3
 8007000:	887b      	ldrh	r3, [r7, #2]
 8007002:	400b      	ands	r3, r1
 8007004:	431a      	orrs	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	619a      	str	r2, [r3, #24]
}
 800700a:	bf00      	nop
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
	...

08007018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007022:	4b08      	ldr	r3, [pc, #32]	; (8007044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007024:	695a      	ldr	r2, [r3, #20]
 8007026:	88fb      	ldrh	r3, [r7, #6]
 8007028:	4013      	ands	r3, r2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d006      	beq.n	800703c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800702e:	4a05      	ldr	r2, [pc, #20]	; (8007044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007030:	88fb      	ldrh	r3, [r7, #6]
 8007032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007034:	88fb      	ldrh	r3, [r7, #6]
 8007036:	4618      	mov	r0, r3
 8007038:	f7fd fad0 	bl	80045dc <HAL_GPIO_EXTI_Callback>
  }
}
 800703c:	bf00      	nop
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	40013c00 	.word	0x40013c00

08007048 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007052:	2300      	movs	r3, #0
 8007054:	603b      	str	r3, [r7, #0]
 8007056:	4b20      	ldr	r3, [pc, #128]	; (80070d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	4a1f      	ldr	r2, [pc, #124]	; (80070d8 <HAL_PWREx_EnableOverDrive+0x90>)
 800705c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007060:	6413      	str	r3, [r2, #64]	; 0x40
 8007062:	4b1d      	ldr	r3, [pc, #116]	; (80070d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800706e:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <HAL_PWREx_EnableOverDrive+0x94>)
 8007070:	2201      	movs	r2, #1
 8007072:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007074:	f7fe f8f6 	bl	8005264 <HAL_GetTick>
 8007078:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800707a:	e009      	b.n	8007090 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800707c:	f7fe f8f2 	bl	8005264 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800708a:	d901      	bls.n	8007090 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e01f      	b.n	80070d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007090:	4b13      	ldr	r3, [pc, #76]	; (80070e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800709c:	d1ee      	bne.n	800707c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800709e:	4b11      	ldr	r3, [pc, #68]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070a0:	2201      	movs	r2, #1
 80070a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070a4:	f7fe f8de 	bl	8005264 <HAL_GetTick>
 80070a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80070aa:	e009      	b.n	80070c0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80070ac:	f7fe f8da 	bl	8005264 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070ba:	d901      	bls.n	80070c0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e007      	b.n	80070d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80070c0:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <HAL_PWREx_EnableOverDrive+0x98>)
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070cc:	d1ee      	bne.n	80070ac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	40023800 	.word	0x40023800
 80070dc:	420e0040 	.word	0x420e0040
 80070e0:	40007000 	.word	0x40007000
 80070e4:	420e0044 	.word	0x420e0044

080070e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e0cc      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070fc:	4b68      	ldr	r3, [pc, #416]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d90c      	bls.n	8007124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800710a:	4b65      	ldr	r3, [pc, #404]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007112:	4b63      	ldr	r3, [pc, #396]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d001      	beq.n	8007124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e0b8      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d020      	beq.n	8007172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800713c:	4b59      	ldr	r3, [pc, #356]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	4a58      	ldr	r2, [pc, #352]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007154:	4b53      	ldr	r3, [pc, #332]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	4a52      	ldr	r2, [pc, #328]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800715a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800715e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007160:	4b50      	ldr	r3, [pc, #320]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	494d      	ldr	r1, [pc, #308]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800716e:	4313      	orrs	r3, r2
 8007170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d044      	beq.n	8007208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d107      	bne.n	8007196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007186:	4b47      	ldr	r3, [pc, #284]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d119      	bne.n	80071c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e07f      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b02      	cmp	r3, #2
 800719c:	d003      	beq.n	80071a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d107      	bne.n	80071b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071a6:	4b3f      	ldr	r3, [pc, #252]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e06f      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071b6:	4b3b      	ldr	r3, [pc, #236]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e067      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071c6:	4b37      	ldr	r3, [pc, #220]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f023 0203 	bic.w	r2, r3, #3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	4934      	ldr	r1, [pc, #208]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071d8:	f7fe f844 	bl	8005264 <HAL_GetTick>
 80071dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071de:	e00a      	b.n	80071f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071e0:	f7fe f840 	bl	8005264 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d901      	bls.n	80071f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e04f      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071f6:	4b2b      	ldr	r3, [pc, #172]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 020c 	and.w	r2, r3, #12
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	429a      	cmp	r2, r3
 8007206:	d1eb      	bne.n	80071e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007208:	4b25      	ldr	r3, [pc, #148]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 030f 	and.w	r3, r3, #15
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d20c      	bcs.n	8007230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007216:	4b22      	ldr	r3, [pc, #136]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800721e:	4b20      	ldr	r3, [pc, #128]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d001      	beq.n	8007230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e032      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	d008      	beq.n	800724e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800723c:	4b19      	ldr	r3, [pc, #100]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	4916      	ldr	r1, [pc, #88]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	4313      	orrs	r3, r2
 800724c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d009      	beq.n	800726e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800725a:	4b12      	ldr	r3, [pc, #72]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	490e      	ldr	r1, [pc, #56]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800726a:	4313      	orrs	r3, r2
 800726c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800726e:	f000 f855 	bl	800731c <HAL_RCC_GetSysClockFreq>
 8007272:	4602      	mov	r2, r0
 8007274:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	091b      	lsrs	r3, r3, #4
 800727a:	f003 030f 	and.w	r3, r3, #15
 800727e:	490a      	ldr	r1, [pc, #40]	; (80072a8 <HAL_RCC_ClockConfig+0x1c0>)
 8007280:	5ccb      	ldrb	r3, [r1, r3]
 8007282:	fa22 f303 	lsr.w	r3, r2, r3
 8007286:	4a09      	ldr	r2, [pc, #36]	; (80072ac <HAL_RCC_ClockConfig+0x1c4>)
 8007288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800728a:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <HAL_RCC_ClockConfig+0x1c8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f7fd ffa4 	bl	80051dc <HAL_InitTick>

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	40023c00 	.word	0x40023c00
 80072a4:	40023800 	.word	0x40023800
 80072a8:	0800f048 	.word	0x0800f048
 80072ac:	20000054 	.word	0x20000054
 80072b0:	20000058 	.word	0x20000058

080072b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072b8:	4b03      	ldr	r3, [pc, #12]	; (80072c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80072ba:	681b      	ldr	r3, [r3, #0]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	20000054 	.word	0x20000054

080072cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072d0:	f7ff fff0 	bl	80072b4 <HAL_RCC_GetHCLKFreq>
 80072d4:	4602      	mov	r2, r0
 80072d6:	4b05      	ldr	r3, [pc, #20]	; (80072ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	0a9b      	lsrs	r3, r3, #10
 80072dc:	f003 0307 	and.w	r3, r3, #7
 80072e0:	4903      	ldr	r1, [pc, #12]	; (80072f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072e2:	5ccb      	ldrb	r3, [r1, r3]
 80072e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	40023800 	.word	0x40023800
 80072f0:	0800f058 	.word	0x0800f058

080072f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80072f8:	f7ff ffdc 	bl	80072b4 <HAL_RCC_GetHCLKFreq>
 80072fc:	4602      	mov	r2, r0
 80072fe:	4b05      	ldr	r3, [pc, #20]	; (8007314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	0b5b      	lsrs	r3, r3, #13
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	4903      	ldr	r1, [pc, #12]	; (8007318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800730a:	5ccb      	ldrb	r3, [r1, r3]
 800730c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007310:	4618      	mov	r0, r3
 8007312:	bd80      	pop	{r7, pc}
 8007314:	40023800 	.word	0x40023800
 8007318:	0800f058 	.word	0x0800f058

0800731c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800731c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007320:	b0ae      	sub	sp, #184	; 0xb8
 8007322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007342:	4bcb      	ldr	r3, [pc, #812]	; (8007670 <HAL_RCC_GetSysClockFreq+0x354>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f003 030c 	and.w	r3, r3, #12
 800734a:	2b0c      	cmp	r3, #12
 800734c:	f200 8206 	bhi.w	800775c <HAL_RCC_GetSysClockFreq+0x440>
 8007350:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007356:	bf00      	nop
 8007358:	0800738d 	.word	0x0800738d
 800735c:	0800775d 	.word	0x0800775d
 8007360:	0800775d 	.word	0x0800775d
 8007364:	0800775d 	.word	0x0800775d
 8007368:	08007395 	.word	0x08007395
 800736c:	0800775d 	.word	0x0800775d
 8007370:	0800775d 	.word	0x0800775d
 8007374:	0800775d 	.word	0x0800775d
 8007378:	0800739d 	.word	0x0800739d
 800737c:	0800775d 	.word	0x0800775d
 8007380:	0800775d 	.word	0x0800775d
 8007384:	0800775d 	.word	0x0800775d
 8007388:	0800758d 	.word	0x0800758d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800738c:	4bb9      	ldr	r3, [pc, #740]	; (8007674 <HAL_RCC_GetSysClockFreq+0x358>)
 800738e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007392:	e1e7      	b.n	8007764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007394:	4bb8      	ldr	r3, [pc, #736]	; (8007678 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007396:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800739a:	e1e3      	b.n	8007764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800739c:	4bb4      	ldr	r3, [pc, #720]	; (8007670 <HAL_RCC_GetSysClockFreq+0x354>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073a8:	4bb1      	ldr	r3, [pc, #708]	; (8007670 <HAL_RCC_GetSysClockFreq+0x354>)
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d071      	beq.n	8007498 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073b4:	4bae      	ldr	r3, [pc, #696]	; (8007670 <HAL_RCC_GetSysClockFreq+0x354>)
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	099b      	lsrs	r3, r3, #6
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80073c0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80073c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073d0:	2300      	movs	r3, #0
 80073d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80073da:	4622      	mov	r2, r4
 80073dc:	462b      	mov	r3, r5
 80073de:	f04f 0000 	mov.w	r0, #0
 80073e2:	f04f 0100 	mov.w	r1, #0
 80073e6:	0159      	lsls	r1, r3, #5
 80073e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073ec:	0150      	lsls	r0, r2, #5
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	4621      	mov	r1, r4
 80073f4:	1a51      	subs	r1, r2, r1
 80073f6:	6439      	str	r1, [r7, #64]	; 0x40
 80073f8:	4629      	mov	r1, r5
 80073fa:	eb63 0301 	sbc.w	r3, r3, r1
 80073fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800740c:	4649      	mov	r1, r9
 800740e:	018b      	lsls	r3, r1, #6
 8007410:	4641      	mov	r1, r8
 8007412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007416:	4641      	mov	r1, r8
 8007418:	018a      	lsls	r2, r1, #6
 800741a:	4641      	mov	r1, r8
 800741c:	1a51      	subs	r1, r2, r1
 800741e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007420:	4649      	mov	r1, r9
 8007422:	eb63 0301 	sbc.w	r3, r3, r1
 8007426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007428:	f04f 0200 	mov.w	r2, #0
 800742c:	f04f 0300 	mov.w	r3, #0
 8007430:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007434:	4649      	mov	r1, r9
 8007436:	00cb      	lsls	r3, r1, #3
 8007438:	4641      	mov	r1, r8
 800743a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800743e:	4641      	mov	r1, r8
 8007440:	00ca      	lsls	r2, r1, #3
 8007442:	4610      	mov	r0, r2
 8007444:	4619      	mov	r1, r3
 8007446:	4603      	mov	r3, r0
 8007448:	4622      	mov	r2, r4
 800744a:	189b      	adds	r3, r3, r2
 800744c:	633b      	str	r3, [r7, #48]	; 0x30
 800744e:	462b      	mov	r3, r5
 8007450:	460a      	mov	r2, r1
 8007452:	eb42 0303 	adc.w	r3, r2, r3
 8007456:	637b      	str	r3, [r7, #52]	; 0x34
 8007458:	f04f 0200 	mov.w	r2, #0
 800745c:	f04f 0300 	mov.w	r3, #0
 8007460:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007464:	4629      	mov	r1, r5
 8007466:	024b      	lsls	r3, r1, #9
 8007468:	4621      	mov	r1, r4
 800746a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800746e:	4621      	mov	r1, r4
 8007470:	024a      	lsls	r2, r1, #9
 8007472:	4610      	mov	r0, r2
 8007474:	4619      	mov	r1, r3
 8007476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800747a:	2200      	movs	r2, #0
 800747c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007480:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007484:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007488:	f7f9 fbfe 	bl	8000c88 <__aeabi_uldivmod>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	4613      	mov	r3, r2
 8007492:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007496:	e067      	b.n	8007568 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007498:	4b75      	ldr	r3, [pc, #468]	; (8007670 <HAL_RCC_GetSysClockFreq+0x354>)
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	099b      	lsrs	r3, r3, #6
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074a4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80074a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80074b2:	2300      	movs	r3, #0
 80074b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80074b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80074ba:	4622      	mov	r2, r4
 80074bc:	462b      	mov	r3, r5
 80074be:	f04f 0000 	mov.w	r0, #0
 80074c2:	f04f 0100 	mov.w	r1, #0
 80074c6:	0159      	lsls	r1, r3, #5
 80074c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074cc:	0150      	lsls	r0, r2, #5
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4621      	mov	r1, r4
 80074d4:	1a51      	subs	r1, r2, r1
 80074d6:	62b9      	str	r1, [r7, #40]	; 0x28
 80074d8:	4629      	mov	r1, r5
 80074da:	eb63 0301 	sbc.w	r3, r3, r1
 80074de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80074ec:	4649      	mov	r1, r9
 80074ee:	018b      	lsls	r3, r1, #6
 80074f0:	4641      	mov	r1, r8
 80074f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074f6:	4641      	mov	r1, r8
 80074f8:	018a      	lsls	r2, r1, #6
 80074fa:	4641      	mov	r1, r8
 80074fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8007500:	4649      	mov	r1, r9
 8007502:	eb63 0b01 	sbc.w	fp, r3, r1
 8007506:	f04f 0200 	mov.w	r2, #0
 800750a:	f04f 0300 	mov.w	r3, #0
 800750e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007512:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007516:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800751a:	4692      	mov	sl, r2
 800751c:	469b      	mov	fp, r3
 800751e:	4623      	mov	r3, r4
 8007520:	eb1a 0303 	adds.w	r3, sl, r3
 8007524:	623b      	str	r3, [r7, #32]
 8007526:	462b      	mov	r3, r5
 8007528:	eb4b 0303 	adc.w	r3, fp, r3
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
 800752e:	f04f 0200 	mov.w	r2, #0
 8007532:	f04f 0300 	mov.w	r3, #0
 8007536:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800753a:	4629      	mov	r1, r5
 800753c:	028b      	lsls	r3, r1, #10
 800753e:	4621      	mov	r1, r4
 8007540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007544:	4621      	mov	r1, r4
 8007546:	028a      	lsls	r2, r1, #10
 8007548:	4610      	mov	r0, r2
 800754a:	4619      	mov	r1, r3
 800754c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007550:	2200      	movs	r2, #0
 8007552:	673b      	str	r3, [r7, #112]	; 0x70
 8007554:	677a      	str	r2, [r7, #116]	; 0x74
 8007556:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800755a:	f7f9 fb95 	bl	8000c88 <__aeabi_uldivmod>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	4613      	mov	r3, r2
 8007564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007568:	4b41      	ldr	r3, [pc, #260]	; (8007670 <HAL_RCC_GetSysClockFreq+0x354>)
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	0c1b      	lsrs	r3, r3, #16
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	3301      	adds	r3, #1
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800757a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800757e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007582:	fbb2 f3f3 	udiv	r3, r2, r3
 8007586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800758a:	e0eb      	b.n	8007764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800758c:	4b38      	ldr	r3, [pc, #224]	; (8007670 <HAL_RCC_GetSysClockFreq+0x354>)
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007594:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007598:	4b35      	ldr	r3, [pc, #212]	; (8007670 <HAL_RCC_GetSysClockFreq+0x354>)
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d06b      	beq.n	800767c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075a4:	4b32      	ldr	r3, [pc, #200]	; (8007670 <HAL_RCC_GetSysClockFreq+0x354>)
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	099b      	lsrs	r3, r3, #6
 80075aa:	2200      	movs	r2, #0
 80075ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80075ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b6:	663b      	str	r3, [r7, #96]	; 0x60
 80075b8:	2300      	movs	r3, #0
 80075ba:	667b      	str	r3, [r7, #100]	; 0x64
 80075bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80075c0:	4622      	mov	r2, r4
 80075c2:	462b      	mov	r3, r5
 80075c4:	f04f 0000 	mov.w	r0, #0
 80075c8:	f04f 0100 	mov.w	r1, #0
 80075cc:	0159      	lsls	r1, r3, #5
 80075ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075d2:	0150      	lsls	r0, r2, #5
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4621      	mov	r1, r4
 80075da:	1a51      	subs	r1, r2, r1
 80075dc:	61b9      	str	r1, [r7, #24]
 80075de:	4629      	mov	r1, r5
 80075e0:	eb63 0301 	sbc.w	r3, r3, r1
 80075e4:	61fb      	str	r3, [r7, #28]
 80075e6:	f04f 0200 	mov.w	r2, #0
 80075ea:	f04f 0300 	mov.w	r3, #0
 80075ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80075f2:	4659      	mov	r1, fp
 80075f4:	018b      	lsls	r3, r1, #6
 80075f6:	4651      	mov	r1, sl
 80075f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80075fc:	4651      	mov	r1, sl
 80075fe:	018a      	lsls	r2, r1, #6
 8007600:	4651      	mov	r1, sl
 8007602:	ebb2 0801 	subs.w	r8, r2, r1
 8007606:	4659      	mov	r1, fp
 8007608:	eb63 0901 	sbc.w	r9, r3, r1
 800760c:	f04f 0200 	mov.w	r2, #0
 8007610:	f04f 0300 	mov.w	r3, #0
 8007614:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007618:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800761c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007620:	4690      	mov	r8, r2
 8007622:	4699      	mov	r9, r3
 8007624:	4623      	mov	r3, r4
 8007626:	eb18 0303 	adds.w	r3, r8, r3
 800762a:	613b      	str	r3, [r7, #16]
 800762c:	462b      	mov	r3, r5
 800762e:	eb49 0303 	adc.w	r3, r9, r3
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	f04f 0300 	mov.w	r3, #0
 800763c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007640:	4629      	mov	r1, r5
 8007642:	024b      	lsls	r3, r1, #9
 8007644:	4621      	mov	r1, r4
 8007646:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800764a:	4621      	mov	r1, r4
 800764c:	024a      	lsls	r2, r1, #9
 800764e:	4610      	mov	r0, r2
 8007650:	4619      	mov	r1, r3
 8007652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007656:	2200      	movs	r2, #0
 8007658:	65bb      	str	r3, [r7, #88]	; 0x58
 800765a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800765c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007660:	f7f9 fb12 	bl	8000c88 <__aeabi_uldivmod>
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	4613      	mov	r3, r2
 800766a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800766e:	e065      	b.n	800773c <HAL_RCC_GetSysClockFreq+0x420>
 8007670:	40023800 	.word	0x40023800
 8007674:	00f42400 	.word	0x00f42400
 8007678:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800767c:	4b3d      	ldr	r3, [pc, #244]	; (8007774 <HAL_RCC_GetSysClockFreq+0x458>)
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	099b      	lsrs	r3, r3, #6
 8007682:	2200      	movs	r2, #0
 8007684:	4618      	mov	r0, r3
 8007686:	4611      	mov	r1, r2
 8007688:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800768c:	653b      	str	r3, [r7, #80]	; 0x50
 800768e:	2300      	movs	r3, #0
 8007690:	657b      	str	r3, [r7, #84]	; 0x54
 8007692:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007696:	4642      	mov	r2, r8
 8007698:	464b      	mov	r3, r9
 800769a:	f04f 0000 	mov.w	r0, #0
 800769e:	f04f 0100 	mov.w	r1, #0
 80076a2:	0159      	lsls	r1, r3, #5
 80076a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076a8:	0150      	lsls	r0, r2, #5
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4641      	mov	r1, r8
 80076b0:	1a51      	subs	r1, r2, r1
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	4649      	mov	r1, r9
 80076b6:	eb63 0301 	sbc.w	r3, r3, r1
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80076c8:	4659      	mov	r1, fp
 80076ca:	018b      	lsls	r3, r1, #6
 80076cc:	4651      	mov	r1, sl
 80076ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80076d2:	4651      	mov	r1, sl
 80076d4:	018a      	lsls	r2, r1, #6
 80076d6:	4651      	mov	r1, sl
 80076d8:	1a54      	subs	r4, r2, r1
 80076da:	4659      	mov	r1, fp
 80076dc:	eb63 0501 	sbc.w	r5, r3, r1
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	00eb      	lsls	r3, r5, #3
 80076ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076ee:	00e2      	lsls	r2, r4, #3
 80076f0:	4614      	mov	r4, r2
 80076f2:	461d      	mov	r5, r3
 80076f4:	4643      	mov	r3, r8
 80076f6:	18e3      	adds	r3, r4, r3
 80076f8:	603b      	str	r3, [r7, #0]
 80076fa:	464b      	mov	r3, r9
 80076fc:	eb45 0303 	adc.w	r3, r5, r3
 8007700:	607b      	str	r3, [r7, #4]
 8007702:	f04f 0200 	mov.w	r2, #0
 8007706:	f04f 0300 	mov.w	r3, #0
 800770a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800770e:	4629      	mov	r1, r5
 8007710:	028b      	lsls	r3, r1, #10
 8007712:	4621      	mov	r1, r4
 8007714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007718:	4621      	mov	r1, r4
 800771a:	028a      	lsls	r2, r1, #10
 800771c:	4610      	mov	r0, r2
 800771e:	4619      	mov	r1, r3
 8007720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007724:	2200      	movs	r2, #0
 8007726:	64bb      	str	r3, [r7, #72]	; 0x48
 8007728:	64fa      	str	r2, [r7, #76]	; 0x4c
 800772a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800772e:	f7f9 faab 	bl	8000c88 <__aeabi_uldivmod>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4613      	mov	r3, r2
 8007738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800773c:	4b0d      	ldr	r3, [pc, #52]	; (8007774 <HAL_RCC_GetSysClockFreq+0x458>)
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	0f1b      	lsrs	r3, r3, #28
 8007742:	f003 0307 	and.w	r3, r3, #7
 8007746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800774a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800774e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007752:	fbb2 f3f3 	udiv	r3, r2, r3
 8007756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800775a:	e003      	b.n	8007764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800775c:	4b06      	ldr	r3, [pc, #24]	; (8007778 <HAL_RCC_GetSysClockFreq+0x45c>)
 800775e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007762:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007764:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007768:	4618      	mov	r0, r3
 800776a:	37b8      	adds	r7, #184	; 0xb8
 800776c:	46bd      	mov	sp, r7
 800776e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007772:	bf00      	nop
 8007774:	40023800 	.word	0x40023800
 8007778:	00f42400 	.word	0x00f42400

0800777c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e28d      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 8083 	beq.w	80078a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800779c:	4b94      	ldr	r3, [pc, #592]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f003 030c 	and.w	r3, r3, #12
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	d019      	beq.n	80077dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80077a8:	4b91      	ldr	r3, [pc, #580]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d106      	bne.n	80077c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80077b4:	4b8e      	ldr	r3, [pc, #568]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077c0:	d00c      	beq.n	80077dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077c2:	4b8b      	ldr	r3, [pc, #556]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80077ca:	2b0c      	cmp	r3, #12
 80077cc:	d112      	bne.n	80077f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077ce:	4b88      	ldr	r3, [pc, #544]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077da:	d10b      	bne.n	80077f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077dc:	4b84      	ldr	r3, [pc, #528]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d05b      	beq.n	80078a0 <HAL_RCC_OscConfig+0x124>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d157      	bne.n	80078a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e25a      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077fc:	d106      	bne.n	800780c <HAL_RCC_OscConfig+0x90>
 80077fe:	4b7c      	ldr	r3, [pc, #496]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a7b      	ldr	r2, [pc, #492]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 8007804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	e01d      	b.n	8007848 <HAL_RCC_OscConfig+0xcc>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007814:	d10c      	bne.n	8007830 <HAL_RCC_OscConfig+0xb4>
 8007816:	4b76      	ldr	r3, [pc, #472]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a75      	ldr	r2, [pc, #468]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 800781c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	4b73      	ldr	r3, [pc, #460]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a72      	ldr	r2, [pc, #456]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 8007828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800782c:	6013      	str	r3, [r2, #0]
 800782e:	e00b      	b.n	8007848 <HAL_RCC_OscConfig+0xcc>
 8007830:	4b6f      	ldr	r3, [pc, #444]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a6e      	ldr	r2, [pc, #440]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 8007836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	4b6c      	ldr	r3, [pc, #432]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a6b      	ldr	r2, [pc, #428]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 8007842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d013      	beq.n	8007878 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007850:	f7fd fd08 	bl	8005264 <HAL_GetTick>
 8007854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007856:	e008      	b.n	800786a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007858:	f7fd fd04 	bl	8005264 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b64      	cmp	r3, #100	; 0x64
 8007864:	d901      	bls.n	800786a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e21f      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800786a:	4b61      	ldr	r3, [pc, #388]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0f0      	beq.n	8007858 <HAL_RCC_OscConfig+0xdc>
 8007876:	e014      	b.n	80078a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007878:	f7fd fcf4 	bl	8005264 <HAL_GetTick>
 800787c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800787e:	e008      	b.n	8007892 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007880:	f7fd fcf0 	bl	8005264 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	2b64      	cmp	r3, #100	; 0x64
 800788c:	d901      	bls.n	8007892 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e20b      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007892:	4b57      	ldr	r3, [pc, #348]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1f0      	bne.n	8007880 <HAL_RCC_OscConfig+0x104>
 800789e:	e000      	b.n	80078a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d06f      	beq.n	800798e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80078ae:	4b50      	ldr	r3, [pc, #320]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f003 030c 	and.w	r3, r3, #12
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d017      	beq.n	80078ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80078ba:	4b4d      	ldr	r3, [pc, #308]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80078c2:	2b08      	cmp	r3, #8
 80078c4:	d105      	bne.n	80078d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80078c6:	4b4a      	ldr	r3, [pc, #296]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00b      	beq.n	80078ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078d2:	4b47      	ldr	r3, [pc, #284]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80078da:	2b0c      	cmp	r3, #12
 80078dc:	d11c      	bne.n	8007918 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078de:	4b44      	ldr	r3, [pc, #272]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d116      	bne.n	8007918 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ea:	4b41      	ldr	r3, [pc, #260]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <HAL_RCC_OscConfig+0x186>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d001      	beq.n	8007902 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e1d3      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007902:	4b3b      	ldr	r3, [pc, #236]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	00db      	lsls	r3, r3, #3
 8007910:	4937      	ldr	r1, [pc, #220]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 8007912:	4313      	orrs	r3, r2
 8007914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007916:	e03a      	b.n	800798e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d020      	beq.n	8007962 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007920:	4b34      	ldr	r3, [pc, #208]	; (80079f4 <HAL_RCC_OscConfig+0x278>)
 8007922:	2201      	movs	r2, #1
 8007924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007926:	f7fd fc9d 	bl	8005264 <HAL_GetTick>
 800792a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800792c:	e008      	b.n	8007940 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800792e:	f7fd fc99 	bl	8005264 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	2b02      	cmp	r3, #2
 800793a:	d901      	bls.n	8007940 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e1b4      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007940:	4b2b      	ldr	r3, [pc, #172]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0f0      	beq.n	800792e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800794c:	4b28      	ldr	r3, [pc, #160]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	00db      	lsls	r3, r3, #3
 800795a:	4925      	ldr	r1, [pc, #148]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 800795c:	4313      	orrs	r3, r2
 800795e:	600b      	str	r3, [r1, #0]
 8007960:	e015      	b.n	800798e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007962:	4b24      	ldr	r3, [pc, #144]	; (80079f4 <HAL_RCC_OscConfig+0x278>)
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007968:	f7fd fc7c 	bl	8005264 <HAL_GetTick>
 800796c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800796e:	e008      	b.n	8007982 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007970:	f7fd fc78 	bl	8005264 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	2b02      	cmp	r3, #2
 800797c:	d901      	bls.n	8007982 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e193      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007982:	4b1b      	ldr	r3, [pc, #108]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1f0      	bne.n	8007970 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0308 	and.w	r3, r3, #8
 8007996:	2b00      	cmp	r3, #0
 8007998:	d036      	beq.n	8007a08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d016      	beq.n	80079d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079a2:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <HAL_RCC_OscConfig+0x27c>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a8:	f7fd fc5c 	bl	8005264 <HAL_GetTick>
 80079ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079ae:	e008      	b.n	80079c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079b0:	f7fd fc58 	bl	8005264 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e173      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079c2:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <HAL_RCC_OscConfig+0x274>)
 80079c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0f0      	beq.n	80079b0 <HAL_RCC_OscConfig+0x234>
 80079ce:	e01b      	b.n	8007a08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079d0:	4b09      	ldr	r3, [pc, #36]	; (80079f8 <HAL_RCC_OscConfig+0x27c>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079d6:	f7fd fc45 	bl	8005264 <HAL_GetTick>
 80079da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079dc:	e00e      	b.n	80079fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079de:	f7fd fc41 	bl	8005264 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d907      	bls.n	80079fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e15c      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
 80079f0:	40023800 	.word	0x40023800
 80079f4:	42470000 	.word	0x42470000
 80079f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079fc:	4b8a      	ldr	r3, [pc, #552]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 80079fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1ea      	bne.n	80079de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 8097 	beq.w	8007b44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a16:	2300      	movs	r3, #0
 8007a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a1a:	4b83      	ldr	r3, [pc, #524]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10f      	bne.n	8007a46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a26:	2300      	movs	r3, #0
 8007a28:	60bb      	str	r3, [r7, #8]
 8007a2a:	4b7f      	ldr	r3, [pc, #508]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2e:	4a7e      	ldr	r2, [pc, #504]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a34:	6413      	str	r3, [r2, #64]	; 0x40
 8007a36:	4b7c      	ldr	r3, [pc, #496]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a3e:	60bb      	str	r3, [r7, #8]
 8007a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a42:	2301      	movs	r3, #1
 8007a44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a46:	4b79      	ldr	r3, [pc, #484]	; (8007c2c <HAL_RCC_OscConfig+0x4b0>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d118      	bne.n	8007a84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a52:	4b76      	ldr	r3, [pc, #472]	; (8007c2c <HAL_RCC_OscConfig+0x4b0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a75      	ldr	r2, [pc, #468]	; (8007c2c <HAL_RCC_OscConfig+0x4b0>)
 8007a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a5e:	f7fd fc01 	bl	8005264 <HAL_GetTick>
 8007a62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a64:	e008      	b.n	8007a78 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a66:	f7fd fbfd 	bl	8005264 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e118      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a78:	4b6c      	ldr	r3, [pc, #432]	; (8007c2c <HAL_RCC_OscConfig+0x4b0>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0f0      	beq.n	8007a66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d106      	bne.n	8007a9a <HAL_RCC_OscConfig+0x31e>
 8007a8c:	4b66      	ldr	r3, [pc, #408]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a90:	4a65      	ldr	r2, [pc, #404]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007a92:	f043 0301 	orr.w	r3, r3, #1
 8007a96:	6713      	str	r3, [r2, #112]	; 0x70
 8007a98:	e01c      	b.n	8007ad4 <HAL_RCC_OscConfig+0x358>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	2b05      	cmp	r3, #5
 8007aa0:	d10c      	bne.n	8007abc <HAL_RCC_OscConfig+0x340>
 8007aa2:	4b61      	ldr	r3, [pc, #388]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa6:	4a60      	ldr	r2, [pc, #384]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007aa8:	f043 0304 	orr.w	r3, r3, #4
 8007aac:	6713      	str	r3, [r2, #112]	; 0x70
 8007aae:	4b5e      	ldr	r3, [pc, #376]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab2:	4a5d      	ldr	r2, [pc, #372]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007ab4:	f043 0301 	orr.w	r3, r3, #1
 8007ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8007aba:	e00b      	b.n	8007ad4 <HAL_RCC_OscConfig+0x358>
 8007abc:	4b5a      	ldr	r3, [pc, #360]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac0:	4a59      	ldr	r2, [pc, #356]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007ac2:	f023 0301 	bic.w	r3, r3, #1
 8007ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ac8:	4b57      	ldr	r3, [pc, #348]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007acc:	4a56      	ldr	r2, [pc, #344]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007ace:	f023 0304 	bic.w	r3, r3, #4
 8007ad2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d015      	beq.n	8007b08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007adc:	f7fd fbc2 	bl	8005264 <HAL_GetTick>
 8007ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ae2:	e00a      	b.n	8007afa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ae4:	f7fd fbbe 	bl	8005264 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d901      	bls.n	8007afa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e0d7      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007afa:	4b4b      	ldr	r3, [pc, #300]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0ee      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x368>
 8007b06:	e014      	b.n	8007b32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b08:	f7fd fbac 	bl	8005264 <HAL_GetTick>
 8007b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b0e:	e00a      	b.n	8007b26 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b10:	f7fd fba8 	bl	8005264 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e0c1      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b26:	4b40      	ldr	r3, [pc, #256]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1ee      	bne.n	8007b10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d105      	bne.n	8007b44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b38:	4b3b      	ldr	r3, [pc, #236]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3c:	4a3a      	ldr	r2, [pc, #232]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 80ad 	beq.w	8007ca8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b4e:	4b36      	ldr	r3, [pc, #216]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f003 030c 	and.w	r3, r3, #12
 8007b56:	2b08      	cmp	r3, #8
 8007b58:	d060      	beq.n	8007c1c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d145      	bne.n	8007bee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b62:	4b33      	ldr	r3, [pc, #204]	; (8007c30 <HAL_RCC_OscConfig+0x4b4>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b68:	f7fd fb7c 	bl	8005264 <HAL_GetTick>
 8007b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b6e:	e008      	b.n	8007b82 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b70:	f7fd fb78 	bl	8005264 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e093      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b82:	4b29      	ldr	r3, [pc, #164]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1f0      	bne.n	8007b70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69da      	ldr	r2, [r3, #28]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	019b      	lsls	r3, r3, #6
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba4:	085b      	lsrs	r3, r3, #1
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	041b      	lsls	r3, r3, #16
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	061b      	lsls	r3, r3, #24
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb8:	071b      	lsls	r3, r3, #28
 8007bba:	491b      	ldr	r1, [pc, #108]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bc0:	4b1b      	ldr	r3, [pc, #108]	; (8007c30 <HAL_RCC_OscConfig+0x4b4>)
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc6:	f7fd fb4d 	bl	8005264 <HAL_GetTick>
 8007bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bcc:	e008      	b.n	8007be0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bce:	f7fd fb49 	bl	8005264 <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d901      	bls.n	8007be0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e064      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007be0:	4b11      	ldr	r3, [pc, #68]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d0f0      	beq.n	8007bce <HAL_RCC_OscConfig+0x452>
 8007bec:	e05c      	b.n	8007ca8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bee:	4b10      	ldr	r3, [pc, #64]	; (8007c30 <HAL_RCC_OscConfig+0x4b4>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf4:	f7fd fb36 	bl	8005264 <HAL_GetTick>
 8007bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bfa:	e008      	b.n	8007c0e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bfc:	f7fd fb32 	bl	8005264 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e04d      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c0e:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <HAL_RCC_OscConfig+0x4ac>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1f0      	bne.n	8007bfc <HAL_RCC_OscConfig+0x480>
 8007c1a:	e045      	b.n	8007ca8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d107      	bne.n	8007c34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e040      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
 8007c28:	40023800 	.word	0x40023800
 8007c2c:	40007000 	.word	0x40007000
 8007c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c34:	4b1f      	ldr	r3, [pc, #124]	; (8007cb4 <HAL_RCC_OscConfig+0x538>)
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d030      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d129      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d122      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c64:	4013      	ands	r3, r2
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d119      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7a:	085b      	lsrs	r3, r3, #1
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d10f      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d107      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d001      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e000      	b.n	8007caa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	40023800 	.word	0x40023800

08007cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e041      	b.n	8007d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d106      	bne.n	8007ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7fc fe34 	bl	800494c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f001 f9b4 	bl	8009064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
	...

08007d58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d001      	beq.n	8007d70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e046      	b.n	8007dfe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2202      	movs	r2, #2
 8007d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a23      	ldr	r2, [pc, #140]	; (8007e0c <HAL_TIM_Base_Start+0xb4>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d022      	beq.n	8007dc8 <HAL_TIM_Base_Start+0x70>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8a:	d01d      	beq.n	8007dc8 <HAL_TIM_Base_Start+0x70>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a1f      	ldr	r2, [pc, #124]	; (8007e10 <HAL_TIM_Base_Start+0xb8>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d018      	beq.n	8007dc8 <HAL_TIM_Base_Start+0x70>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a1e      	ldr	r2, [pc, #120]	; (8007e14 <HAL_TIM_Base_Start+0xbc>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d013      	beq.n	8007dc8 <HAL_TIM_Base_Start+0x70>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a1c      	ldr	r2, [pc, #112]	; (8007e18 <HAL_TIM_Base_Start+0xc0>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00e      	beq.n	8007dc8 <HAL_TIM_Base_Start+0x70>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a1b      	ldr	r2, [pc, #108]	; (8007e1c <HAL_TIM_Base_Start+0xc4>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d009      	beq.n	8007dc8 <HAL_TIM_Base_Start+0x70>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a19      	ldr	r2, [pc, #100]	; (8007e20 <HAL_TIM_Base_Start+0xc8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d004      	beq.n	8007dc8 <HAL_TIM_Base_Start+0x70>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a18      	ldr	r2, [pc, #96]	; (8007e24 <HAL_TIM_Base_Start+0xcc>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d111      	bne.n	8007dec <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b06      	cmp	r3, #6
 8007dd8:	d010      	beq.n	8007dfc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f042 0201 	orr.w	r2, r2, #1
 8007de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dea:	e007      	b.n	8007dfc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0201 	orr.w	r2, r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	40010000 	.word	0x40010000
 8007e10:	40000400 	.word	0x40000400
 8007e14:	40000800 	.word	0x40000800
 8007e18:	40000c00 	.word	0x40000c00
 8007e1c:	40010400 	.word	0x40010400
 8007e20:	40014000 	.word	0x40014000
 8007e24:	40001800 	.word	0x40001800

08007e28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e041      	b.n	8007ebe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d106      	bne.n	8007e54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f839 	bl	8007ec6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	f001 f8fc 	bl	8009064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b083      	sub	sp, #12
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ece:	bf00      	nop
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
	...

08007edc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d109      	bne.n	8007f00 <HAL_TIM_PWM_Start+0x24>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	bf14      	ite	ne
 8007ef8:	2301      	movne	r3, #1
 8007efa:	2300      	moveq	r3, #0
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	e022      	b.n	8007f46 <HAL_TIM_PWM_Start+0x6a>
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2b04      	cmp	r3, #4
 8007f04:	d109      	bne.n	8007f1a <HAL_TIM_PWM_Start+0x3e>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	bf14      	ite	ne
 8007f12:	2301      	movne	r3, #1
 8007f14:	2300      	moveq	r3, #0
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	e015      	b.n	8007f46 <HAL_TIM_PWM_Start+0x6a>
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b08      	cmp	r3, #8
 8007f1e:	d109      	bne.n	8007f34 <HAL_TIM_PWM_Start+0x58>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	bf14      	ite	ne
 8007f2c:	2301      	movne	r3, #1
 8007f2e:	2300      	moveq	r3, #0
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	e008      	b.n	8007f46 <HAL_TIM_PWM_Start+0x6a>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	bf14      	ite	ne
 8007f40:	2301      	movne	r3, #1
 8007f42:	2300      	moveq	r3, #0
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e07c      	b.n	8008048 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d104      	bne.n	8007f5e <HAL_TIM_PWM_Start+0x82>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f5c:	e013      	b.n	8007f86 <HAL_TIM_PWM_Start+0xaa>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b04      	cmp	r3, #4
 8007f62:	d104      	bne.n	8007f6e <HAL_TIM_PWM_Start+0x92>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f6c:	e00b      	b.n	8007f86 <HAL_TIM_PWM_Start+0xaa>
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d104      	bne.n	8007f7e <HAL_TIM_PWM_Start+0xa2>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f7c:	e003      	b.n	8007f86 <HAL_TIM_PWM_Start+0xaa>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2202      	movs	r2, #2
 8007f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f001 fc7c 	bl	800988c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a2d      	ldr	r2, [pc, #180]	; (8008050 <HAL_TIM_PWM_Start+0x174>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d004      	beq.n	8007fa8 <HAL_TIM_PWM_Start+0xcc>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a2c      	ldr	r2, [pc, #176]	; (8008054 <HAL_TIM_PWM_Start+0x178>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d101      	bne.n	8007fac <HAL_TIM_PWM_Start+0xd0>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e000      	b.n	8007fae <HAL_TIM_PWM_Start+0xd2>
 8007fac:	2300      	movs	r3, #0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d007      	beq.n	8007fc2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a22      	ldr	r2, [pc, #136]	; (8008050 <HAL_TIM_PWM_Start+0x174>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d022      	beq.n	8008012 <HAL_TIM_PWM_Start+0x136>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fd4:	d01d      	beq.n	8008012 <HAL_TIM_PWM_Start+0x136>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a1f      	ldr	r2, [pc, #124]	; (8008058 <HAL_TIM_PWM_Start+0x17c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d018      	beq.n	8008012 <HAL_TIM_PWM_Start+0x136>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a1d      	ldr	r2, [pc, #116]	; (800805c <HAL_TIM_PWM_Start+0x180>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d013      	beq.n	8008012 <HAL_TIM_PWM_Start+0x136>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a1c      	ldr	r2, [pc, #112]	; (8008060 <HAL_TIM_PWM_Start+0x184>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d00e      	beq.n	8008012 <HAL_TIM_PWM_Start+0x136>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a16      	ldr	r2, [pc, #88]	; (8008054 <HAL_TIM_PWM_Start+0x178>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d009      	beq.n	8008012 <HAL_TIM_PWM_Start+0x136>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a18      	ldr	r2, [pc, #96]	; (8008064 <HAL_TIM_PWM_Start+0x188>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d004      	beq.n	8008012 <HAL_TIM_PWM_Start+0x136>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a16      	ldr	r2, [pc, #88]	; (8008068 <HAL_TIM_PWM_Start+0x18c>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d111      	bne.n	8008036 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f003 0307 	and.w	r3, r3, #7
 800801c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b06      	cmp	r3, #6
 8008022:	d010      	beq.n	8008046 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0201 	orr.w	r2, r2, #1
 8008032:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008034:	e007      	b.n	8008046 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 0201 	orr.w	r2, r2, #1
 8008044:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	40010000 	.word	0x40010000
 8008054:	40010400 	.word	0x40010400
 8008058:	40000400 	.word	0x40000400
 800805c:	40000800 	.word	0x40000800
 8008060:	40000c00 	.word	0x40000c00
 8008064:	40014000 	.word	0x40014000
 8008068:	40001800 	.word	0x40001800

0800806c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2200      	movs	r2, #0
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	4618      	mov	r0, r3
 8008080:	f001 fc04 	bl	800988c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a2e      	ldr	r2, [pc, #184]	; (8008144 <HAL_TIM_PWM_Stop+0xd8>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d004      	beq.n	8008098 <HAL_TIM_PWM_Stop+0x2c>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a2d      	ldr	r2, [pc, #180]	; (8008148 <HAL_TIM_PWM_Stop+0xdc>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d101      	bne.n	800809c <HAL_TIM_PWM_Stop+0x30>
 8008098:	2301      	movs	r3, #1
 800809a:	e000      	b.n	800809e <HAL_TIM_PWM_Stop+0x32>
 800809c:	2300      	movs	r3, #0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d017      	beq.n	80080d2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6a1a      	ldr	r2, [r3, #32]
 80080a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80080ac:	4013      	ands	r3, r2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10f      	bne.n	80080d2 <HAL_TIM_PWM_Stop+0x66>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6a1a      	ldr	r2, [r3, #32]
 80080b8:	f240 4344 	movw	r3, #1092	; 0x444
 80080bc:	4013      	ands	r3, r2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d107      	bne.n	80080d2 <HAL_TIM_PWM_Stop+0x66>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6a1a      	ldr	r2, [r3, #32]
 80080d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80080dc:	4013      	ands	r3, r2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10f      	bne.n	8008102 <HAL_TIM_PWM_Stop+0x96>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6a1a      	ldr	r2, [r3, #32]
 80080e8:	f240 4344 	movw	r3, #1092	; 0x444
 80080ec:	4013      	ands	r3, r2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d107      	bne.n	8008102 <HAL_TIM_PWM_Stop+0x96>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 0201 	bic.w	r2, r2, #1
 8008100:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d104      	bne.n	8008112 <HAL_TIM_PWM_Stop+0xa6>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008110:	e013      	b.n	800813a <HAL_TIM_PWM_Stop+0xce>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b04      	cmp	r3, #4
 8008116:	d104      	bne.n	8008122 <HAL_TIM_PWM_Stop+0xb6>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008120:	e00b      	b.n	800813a <HAL_TIM_PWM_Stop+0xce>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b08      	cmp	r3, #8
 8008126:	d104      	bne.n	8008132 <HAL_TIM_PWM_Stop+0xc6>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008130:	e003      	b.n	800813a <HAL_TIM_PWM_Stop+0xce>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	40010000 	.word	0x40010000
 8008148:	40010400 	.word	0x40010400

0800814c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e041      	b.n	80081e2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d106      	bne.n	8008178 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f839 	bl	80081ea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2202      	movs	r2, #2
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3304      	adds	r3, #4
 8008188:	4619      	mov	r1, r3
 800818a:	4610      	mov	r0, r2
 800818c:	f000 ff6a 	bl	8009064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
	...

08008200 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d104      	bne.n	8008222 <HAL_TIM_IC_Start_DMA+0x22>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800821e:	b2db      	uxtb	r3, r3
 8008220:	e013      	b.n	800824a <HAL_TIM_IC_Start_DMA+0x4a>
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b04      	cmp	r3, #4
 8008226:	d104      	bne.n	8008232 <HAL_TIM_IC_Start_DMA+0x32>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800822e:	b2db      	uxtb	r3, r3
 8008230:	e00b      	b.n	800824a <HAL_TIM_IC_Start_DMA+0x4a>
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b08      	cmp	r3, #8
 8008236:	d104      	bne.n	8008242 <HAL_TIM_IC_Start_DMA+0x42>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800823e:	b2db      	uxtb	r3, r3
 8008240:	e003      	b.n	800824a <HAL_TIM_IC_Start_DMA+0x4a>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008248:	b2db      	uxtb	r3, r3
 800824a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d104      	bne.n	800825c <HAL_TIM_IC_Start_DMA+0x5c>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008258:	b2db      	uxtb	r3, r3
 800825a:	e013      	b.n	8008284 <HAL_TIM_IC_Start_DMA+0x84>
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2b04      	cmp	r3, #4
 8008260:	d104      	bne.n	800826c <HAL_TIM_IC_Start_DMA+0x6c>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008268:	b2db      	uxtb	r3, r3
 800826a:	e00b      	b.n	8008284 <HAL_TIM_IC_Start_DMA+0x84>
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2b08      	cmp	r3, #8
 8008270:	d104      	bne.n	800827c <HAL_TIM_IC_Start_DMA+0x7c>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008278:	b2db      	uxtb	r3, r3
 800827a:	e003      	b.n	8008284 <HAL_TIM_IC_Start_DMA+0x84>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008282:	b2db      	uxtb	r3, r3
 8008284:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8008286:	7dbb      	ldrb	r3, [r7, #22]
 8008288:	2b02      	cmp	r3, #2
 800828a:	d002      	beq.n	8008292 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800828c:	7d7b      	ldrb	r3, [r7, #21]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d101      	bne.n	8008296 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8008292:	2302      	movs	r3, #2
 8008294:	e146      	b.n	8008524 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8008296:	7dbb      	ldrb	r3, [r7, #22]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d143      	bne.n	8008324 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800829c:	7d7b      	ldrb	r3, [r7, #21]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d140      	bne.n	8008324 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d104      	bne.n	80082b2 <HAL_TIM_IC_Start_DMA+0xb2>
 80082a8:	887b      	ldrh	r3, [r7, #2]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e138      	b.n	8008524 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d104      	bne.n	80082c2 <HAL_TIM_IC_Start_DMA+0xc2>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2202      	movs	r2, #2
 80082bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082c0:	e013      	b.n	80082ea <HAL_TIM_IC_Start_DMA+0xea>
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	d104      	bne.n	80082d2 <HAL_TIM_IC_Start_DMA+0xd2>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082d0:	e00b      	b.n	80082ea <HAL_TIM_IC_Start_DMA+0xea>
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	d104      	bne.n	80082e2 <HAL_TIM_IC_Start_DMA+0xe2>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082e0:	e003      	b.n	80082ea <HAL_TIM_IC_Start_DMA+0xea>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2202      	movs	r2, #2
 80082e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d104      	bne.n	80082fa <HAL_TIM_IC_Start_DMA+0xfa>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80082f8:	e016      	b.n	8008328 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	d104      	bne.n	800830a <HAL_TIM_IC_Start_DMA+0x10a>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8008308:	e00e      	b.n	8008328 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	2b08      	cmp	r3, #8
 800830e:	d104      	bne.n	800831a <HAL_TIM_IC_Start_DMA+0x11a>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8008318:	e006      	b.n	8008328 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2202      	movs	r2, #2
 800831e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8008322:	e001      	b.n	8008328 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e0fd      	b.n	8008524 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2201      	movs	r2, #1
 800832e:	68b9      	ldr	r1, [r7, #8]
 8008330:	4618      	mov	r0, r3
 8008332:	f001 faab 	bl	800988c <TIM_CCxChannelCmd>

  switch (Channel)
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2b0c      	cmp	r3, #12
 800833a:	f200 80ad 	bhi.w	8008498 <HAL_TIM_IC_Start_DMA+0x298>
 800833e:	a201      	add	r2, pc, #4	; (adr r2, 8008344 <HAL_TIM_IC_Start_DMA+0x144>)
 8008340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008344:	08008379 	.word	0x08008379
 8008348:	08008499 	.word	0x08008499
 800834c:	08008499 	.word	0x08008499
 8008350:	08008499 	.word	0x08008499
 8008354:	080083c1 	.word	0x080083c1
 8008358:	08008499 	.word	0x08008499
 800835c:	08008499 	.word	0x08008499
 8008360:	08008499 	.word	0x08008499
 8008364:	08008409 	.word	0x08008409
 8008368:	08008499 	.word	0x08008499
 800836c:	08008499 	.word	0x08008499
 8008370:	08008499 	.word	0x08008499
 8008374:	08008451 	.word	0x08008451
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	4a6b      	ldr	r2, [pc, #428]	; (800852c <HAL_TIM_IC_Start_DMA+0x32c>)
 800837e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	4a6a      	ldr	r2, [pc, #424]	; (8008530 <HAL_TIM_IC_Start_DMA+0x330>)
 8008386:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	4a69      	ldr	r2, [pc, #420]	; (8008534 <HAL_TIM_IC_Start_DMA+0x334>)
 800838e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3334      	adds	r3, #52	; 0x34
 800839a:	4619      	mov	r1, r3
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	887b      	ldrh	r3, [r7, #2]
 80083a0:	f7fd fef8 	bl	8006194 <HAL_DMA_Start_IT>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e0ba      	b.n	8008524 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083bc:	60da      	str	r2, [r3, #12]
      break;
 80083be:	e06e      	b.n	800849e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c4:	4a59      	ldr	r2, [pc, #356]	; (800852c <HAL_TIM_IC_Start_DMA+0x32c>)
 80083c6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083cc:	4a58      	ldr	r2, [pc, #352]	; (8008530 <HAL_TIM_IC_Start_DMA+0x330>)
 80083ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d4:	4a57      	ldr	r2, [pc, #348]	; (8008534 <HAL_TIM_IC_Start_DMA+0x334>)
 80083d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3338      	adds	r3, #56	; 0x38
 80083e2:	4619      	mov	r1, r3
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	887b      	ldrh	r3, [r7, #2]
 80083e8:	f7fd fed4 	bl	8006194 <HAL_DMA_Start_IT>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e096      	b.n	8008524 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68da      	ldr	r2, [r3, #12]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008404:	60da      	str	r2, [r3, #12]
      break;
 8008406:	e04a      	b.n	800849e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	4a47      	ldr	r2, [pc, #284]	; (800852c <HAL_TIM_IC_Start_DMA+0x32c>)
 800840e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008414:	4a46      	ldr	r2, [pc, #280]	; (8008530 <HAL_TIM_IC_Start_DMA+0x330>)
 8008416:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	4a45      	ldr	r2, [pc, #276]	; (8008534 <HAL_TIM_IC_Start_DMA+0x334>)
 800841e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	333c      	adds	r3, #60	; 0x3c
 800842a:	4619      	mov	r1, r3
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	887b      	ldrh	r3, [r7, #2]
 8008430:	f7fd feb0 	bl	8006194 <HAL_DMA_Start_IT>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e072      	b.n	8008524 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68da      	ldr	r2, [r3, #12]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800844c:	60da      	str	r2, [r3, #12]
      break;
 800844e:	e026      	b.n	800849e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008454:	4a35      	ldr	r2, [pc, #212]	; (800852c <HAL_TIM_IC_Start_DMA+0x32c>)
 8008456:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845c:	4a34      	ldr	r2, [pc, #208]	; (8008530 <HAL_TIM_IC_Start_DMA+0x330>)
 800845e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008464:	4a33      	ldr	r2, [pc, #204]	; (8008534 <HAL_TIM_IC_Start_DMA+0x334>)
 8008466:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3340      	adds	r3, #64	; 0x40
 8008472:	4619      	mov	r1, r3
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	887b      	ldrh	r3, [r7, #2]
 8008478:	f7fd fe8c 	bl	8006194 <HAL_DMA_Start_IT>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e04e      	b.n	8008524 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008494:	60da      	str	r2, [r3, #12]
      break;
 8008496:	e002      	b.n	800849e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	75fb      	strb	r3, [r7, #23]
      break;
 800849c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a25      	ldr	r2, [pc, #148]	; (8008538 <HAL_TIM_IC_Start_DMA+0x338>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d022      	beq.n	80084ee <HAL_TIM_IC_Start_DMA+0x2ee>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084b0:	d01d      	beq.n	80084ee <HAL_TIM_IC_Start_DMA+0x2ee>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a21      	ldr	r2, [pc, #132]	; (800853c <HAL_TIM_IC_Start_DMA+0x33c>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d018      	beq.n	80084ee <HAL_TIM_IC_Start_DMA+0x2ee>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a1f      	ldr	r2, [pc, #124]	; (8008540 <HAL_TIM_IC_Start_DMA+0x340>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d013      	beq.n	80084ee <HAL_TIM_IC_Start_DMA+0x2ee>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a1e      	ldr	r2, [pc, #120]	; (8008544 <HAL_TIM_IC_Start_DMA+0x344>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d00e      	beq.n	80084ee <HAL_TIM_IC_Start_DMA+0x2ee>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a1c      	ldr	r2, [pc, #112]	; (8008548 <HAL_TIM_IC_Start_DMA+0x348>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d009      	beq.n	80084ee <HAL_TIM_IC_Start_DMA+0x2ee>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a1b      	ldr	r2, [pc, #108]	; (800854c <HAL_TIM_IC_Start_DMA+0x34c>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d004      	beq.n	80084ee <HAL_TIM_IC_Start_DMA+0x2ee>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a19      	ldr	r2, [pc, #100]	; (8008550 <HAL_TIM_IC_Start_DMA+0x350>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d111      	bne.n	8008512 <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f003 0307 	and.w	r3, r3, #7
 80084f8:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b06      	cmp	r3, #6
 80084fe:	d010      	beq.n	8008522 <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f042 0201 	orr.w	r2, r2, #1
 800850e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008510:	e007      	b.n	8008522 <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f042 0201 	orr.w	r2, r2, #1
 8008520:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008522:	7dfb      	ldrb	r3, [r7, #23]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	08008f35 	.word	0x08008f35
 8008530:	08008ffd 	.word	0x08008ffd
 8008534:	08008ea3 	.word	0x08008ea3
 8008538:	40010000 	.word	0x40010000
 800853c:	40000400 	.word	0x40000400
 8008540:	40000800 	.word	0x40000800
 8008544:	40000c00 	.word	0x40000c00
 8008548:	40010400 	.word	0x40010400
 800854c:	40014000 	.word	0x40014000
 8008550:	40001800 	.word	0x40001800

08008554 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e097      	b.n	8008698 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b00      	cmp	r3, #0
 8008572:	d106      	bne.n	8008582 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7fc fac1 	bl	8004b04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6812      	ldr	r2, [r2, #0]
 8008594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008598:	f023 0307 	bic.w	r3, r3, #7
 800859c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3304      	adds	r3, #4
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f000 fd5b 	bl	8009064 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085d6:	f023 0303 	bic.w	r3, r3, #3
 80085da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	021b      	lsls	r3, r3, #8
 80085e6:	4313      	orrs	r3, r2
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80085f4:	f023 030c 	bic.w	r3, r3, #12
 80085f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008600:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008604:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	68da      	ldr	r2, [r3, #12]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	021b      	lsls	r3, r3, #8
 8008610:	4313      	orrs	r3, r2
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	4313      	orrs	r3, r2
 8008616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	011a      	lsls	r2, r3, #4
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	031b      	lsls	r3, r3, #12
 8008624:	4313      	orrs	r3, r2
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	4313      	orrs	r3, r2
 800862a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008632:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800863a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	011b      	lsls	r3, r3, #4
 8008646:	4313      	orrs	r3, r2
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	4313      	orrs	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80086b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80086c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d110      	bne.n	80086f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d102      	bne.n	80086dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80086d6:	7b7b      	ldrb	r3, [r7, #13]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d001      	beq.n	80086e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e069      	b.n	80087b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2202      	movs	r2, #2
 80086e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2202      	movs	r2, #2
 80086ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086f0:	e031      	b.n	8008756 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b04      	cmp	r3, #4
 80086f6:	d110      	bne.n	800871a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d102      	bne.n	8008704 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80086fe:	7b3b      	ldrb	r3, [r7, #12]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d001      	beq.n	8008708 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e055      	b.n	80087b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008718:	e01d      	b.n	8008756 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800871a:	7bfb      	ldrb	r3, [r7, #15]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d108      	bne.n	8008732 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008720:	7bbb      	ldrb	r3, [r7, #14]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d105      	bne.n	8008732 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008726:	7b7b      	ldrb	r3, [r7, #13]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d102      	bne.n	8008732 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800872c:	7b3b      	ldrb	r3, [r7, #12]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d001      	beq.n	8008736 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e03e      	b.n	80087b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2202      	movs	r2, #2
 800873a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2202      	movs	r2, #2
 8008742:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2202      	movs	r2, #2
 800874a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2202      	movs	r2, #2
 8008752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <HAL_TIM_Encoder_Start+0xc4>
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	2b04      	cmp	r3, #4
 8008760:	d008      	beq.n	8008774 <HAL_TIM_Encoder_Start+0xd4>
 8008762:	e00f      	b.n	8008784 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2201      	movs	r2, #1
 800876a:	2100      	movs	r1, #0
 800876c:	4618      	mov	r0, r3
 800876e:	f001 f88d 	bl	800988c <TIM_CCxChannelCmd>
      break;
 8008772:	e016      	b.n	80087a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2201      	movs	r2, #1
 800877a:	2104      	movs	r1, #4
 800877c:	4618      	mov	r0, r3
 800877e:	f001 f885 	bl	800988c <TIM_CCxChannelCmd>
      break;
 8008782:	e00e      	b.n	80087a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2201      	movs	r2, #1
 800878a:	2100      	movs	r1, #0
 800878c:	4618      	mov	r0, r3
 800878e:	f001 f87d 	bl	800988c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2201      	movs	r2, #1
 8008798:	2104      	movs	r1, #4
 800879a:	4618      	mov	r0, r3
 800879c:	f001 f876 	bl	800988c <TIM_CCxChannelCmd>
      break;
 80087a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f042 0201 	orr.w	r2, r2, #1
 80087b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d122      	bne.n	8008818 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	f003 0302 	and.w	r3, r3, #2
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d11b      	bne.n	8008818 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f06f 0202 	mvn.w	r2, #2
 80087e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	f003 0303 	and.w	r3, r3, #3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fb1d 	bl	8008e3e <HAL_TIM_IC_CaptureCallback>
 8008804:	e005      	b.n	8008812 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fb0f 	bl	8008e2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fb2a 	bl	8008e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	f003 0304 	and.w	r3, r3, #4
 8008822:	2b04      	cmp	r3, #4
 8008824:	d122      	bne.n	800886c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b04      	cmp	r3, #4
 8008832:	d11b      	bne.n	800886c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f06f 0204 	mvn.w	r2, #4
 800883c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2202      	movs	r2, #2
 8008842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 faf3 	bl	8008e3e <HAL_TIM_IC_CaptureCallback>
 8008858:	e005      	b.n	8008866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fae5 	bl	8008e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fb00 	bl	8008e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	f003 0308 	and.w	r3, r3, #8
 8008876:	2b08      	cmp	r3, #8
 8008878:	d122      	bne.n	80088c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f003 0308 	and.w	r3, r3, #8
 8008884:	2b08      	cmp	r3, #8
 8008886:	d11b      	bne.n	80088c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f06f 0208 	mvn.w	r2, #8
 8008890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2204      	movs	r2, #4
 8008896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d003      	beq.n	80088ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fac9 	bl	8008e3e <HAL_TIM_IC_CaptureCallback>
 80088ac:	e005      	b.n	80088ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fabb 	bl	8008e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fad6 	bl	8008e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	f003 0310 	and.w	r3, r3, #16
 80088ca:	2b10      	cmp	r3, #16
 80088cc:	d122      	bne.n	8008914 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f003 0310 	and.w	r3, r3, #16
 80088d8:	2b10      	cmp	r3, #16
 80088da:	d11b      	bne.n	8008914 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f06f 0210 	mvn.w	r2, #16
 80088e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2208      	movs	r2, #8
 80088ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fa9f 	bl	8008e3e <HAL_TIM_IC_CaptureCallback>
 8008900:	e005      	b.n	800890e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fa91 	bl	8008e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 faac 	bl	8008e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	2b01      	cmp	r3, #1
 8008920:	d10e      	bne.n	8008940 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b01      	cmp	r3, #1
 800892e:	d107      	bne.n	8008940 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f06f 0201 	mvn.w	r2, #1
 8008938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fa6b 	bl	8008e16 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800894a:	2b80      	cmp	r3, #128	; 0x80
 800894c:	d10e      	bne.n	800896c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008958:	2b80      	cmp	r3, #128	; 0x80
 800895a:	d107      	bne.n	800896c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f001 f88e 	bl	8009a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008976:	2b40      	cmp	r3, #64	; 0x40
 8008978:	d10e      	bne.n	8008998 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008984:	2b40      	cmp	r3, #64	; 0x40
 8008986:	d107      	bne.n	8008998 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fa71 	bl	8008e7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	f003 0320 	and.w	r3, r3, #32
 80089a2:	2b20      	cmp	r3, #32
 80089a4:	d10e      	bne.n	80089c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	f003 0320 	and.w	r3, r3, #32
 80089b0:	2b20      	cmp	r3, #32
 80089b2:	d107      	bne.n	80089c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f06f 0220 	mvn.w	r2, #32
 80089bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 f858 	bl	8009a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d101      	bne.n	80089ea <HAL_TIM_IC_ConfigChannel+0x1e>
 80089e6:	2302      	movs	r3, #2
 80089e8:	e088      	b.n	8008afc <HAL_TIM_IC_ConfigChannel+0x130>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d11b      	bne.n	8008a30 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6818      	ldr	r0, [r3, #0]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	6819      	ldr	r1, [r3, #0]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	685a      	ldr	r2, [r3, #4]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f000 fd7c 	bl	8009504 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	699a      	ldr	r2, [r3, #24]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 020c 	bic.w	r2, r2, #12
 8008a1a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6999      	ldr	r1, [r3, #24]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	689a      	ldr	r2, [r3, #8]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	619a      	str	r2, [r3, #24]
 8008a2e:	e060      	b.n	8008af2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d11c      	bne.n	8008a70 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6818      	ldr	r0, [r3, #0]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	6819      	ldr	r1, [r3, #0]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f000 fe00 	bl	800964a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	699a      	ldr	r2, [r3, #24]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008a58:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6999      	ldr	r1, [r3, #24]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	021a      	lsls	r2, r3, #8
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	619a      	str	r2, [r3, #24]
 8008a6e:	e040      	b.n	8008af2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b08      	cmp	r3, #8
 8008a74:	d11b      	bne.n	8008aae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	6819      	ldr	r1, [r3, #0]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	f000 fe4d 	bl	8009724 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69da      	ldr	r2, [r3, #28]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f022 020c 	bic.w	r2, r2, #12
 8008a98:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	69d9      	ldr	r1, [r3, #28]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	61da      	str	r2, [r3, #28]
 8008aac:	e021      	b.n	8008af2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b0c      	cmp	r3, #12
 8008ab2:	d11c      	bne.n	8008aee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	6819      	ldr	r1, [r3, #0]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f000 fe6a 	bl	800979c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	69da      	ldr	r2, [r3, #28]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008ad6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	69d9      	ldr	r1, [r3, #28]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	021a      	lsls	r2, r3, #8
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	61da      	str	r2, [r3, #28]
 8008aec:	e001      	b.n	8008af2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d101      	bne.n	8008b22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b1e:	2302      	movs	r3, #2
 8008b20:	e0ae      	b.n	8008c80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b0c      	cmp	r3, #12
 8008b2e:	f200 809f 	bhi.w	8008c70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008b32:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b38:	08008b6d 	.word	0x08008b6d
 8008b3c:	08008c71 	.word	0x08008c71
 8008b40:	08008c71 	.word	0x08008c71
 8008b44:	08008c71 	.word	0x08008c71
 8008b48:	08008bad 	.word	0x08008bad
 8008b4c:	08008c71 	.word	0x08008c71
 8008b50:	08008c71 	.word	0x08008c71
 8008b54:	08008c71 	.word	0x08008c71
 8008b58:	08008bef 	.word	0x08008bef
 8008b5c:	08008c71 	.word	0x08008c71
 8008b60:	08008c71 	.word	0x08008c71
 8008b64:	08008c71 	.word	0x08008c71
 8008b68:	08008c2f 	.word	0x08008c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68b9      	ldr	r1, [r7, #8]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 fb16 	bl	80091a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	699a      	ldr	r2, [r3, #24]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0208 	orr.w	r2, r2, #8
 8008b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f022 0204 	bic.w	r2, r2, #4
 8008b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6999      	ldr	r1, [r3, #24]
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	691a      	ldr	r2, [r3, #16]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	619a      	str	r2, [r3, #24]
      break;
 8008baa:	e064      	b.n	8008c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68b9      	ldr	r1, [r7, #8]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fb66 	bl	8009284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	699a      	ldr	r2, [r3, #24]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	699a      	ldr	r2, [r3, #24]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6999      	ldr	r1, [r3, #24]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	021a      	lsls	r2, r3, #8
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	619a      	str	r2, [r3, #24]
      break;
 8008bec:	e043      	b.n	8008c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68b9      	ldr	r1, [r7, #8]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 fbbb 	bl	8009370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69da      	ldr	r2, [r3, #28]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f042 0208 	orr.w	r2, r2, #8
 8008c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	69da      	ldr	r2, [r3, #28]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f022 0204 	bic.w	r2, r2, #4
 8008c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	69d9      	ldr	r1, [r3, #28]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	691a      	ldr	r2, [r3, #16]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	61da      	str	r2, [r3, #28]
      break;
 8008c2c:	e023      	b.n	8008c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68b9      	ldr	r1, [r7, #8]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 fc0f 	bl	8009458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	69da      	ldr	r2, [r3, #28]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	69da      	ldr	r2, [r3, #28]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	69d9      	ldr	r1, [r3, #28]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	021a      	lsls	r2, r3, #8
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	61da      	str	r2, [r3, #28]
      break;
 8008c6e:	e002      	b.n	8008c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	75fb      	strb	r3, [r7, #23]
      break;
 8008c74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3718      	adds	r7, #24
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d101      	bne.n	8008ca4 <HAL_TIM_ConfigClockSource+0x1c>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	e0b4      	b.n	8008e0e <HAL_TIM_ConfigClockSource+0x186>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2202      	movs	r2, #2
 8008cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cdc:	d03e      	beq.n	8008d5c <HAL_TIM_ConfigClockSource+0xd4>
 8008cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ce2:	f200 8087 	bhi.w	8008df4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cea:	f000 8086 	beq.w	8008dfa <HAL_TIM_ConfigClockSource+0x172>
 8008cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cf2:	d87f      	bhi.n	8008df4 <HAL_TIM_ConfigClockSource+0x16c>
 8008cf4:	2b70      	cmp	r3, #112	; 0x70
 8008cf6:	d01a      	beq.n	8008d2e <HAL_TIM_ConfigClockSource+0xa6>
 8008cf8:	2b70      	cmp	r3, #112	; 0x70
 8008cfa:	d87b      	bhi.n	8008df4 <HAL_TIM_ConfigClockSource+0x16c>
 8008cfc:	2b60      	cmp	r3, #96	; 0x60
 8008cfe:	d050      	beq.n	8008da2 <HAL_TIM_ConfigClockSource+0x11a>
 8008d00:	2b60      	cmp	r3, #96	; 0x60
 8008d02:	d877      	bhi.n	8008df4 <HAL_TIM_ConfigClockSource+0x16c>
 8008d04:	2b50      	cmp	r3, #80	; 0x50
 8008d06:	d03c      	beq.n	8008d82 <HAL_TIM_ConfigClockSource+0xfa>
 8008d08:	2b50      	cmp	r3, #80	; 0x50
 8008d0a:	d873      	bhi.n	8008df4 <HAL_TIM_ConfigClockSource+0x16c>
 8008d0c:	2b40      	cmp	r3, #64	; 0x40
 8008d0e:	d058      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x13a>
 8008d10:	2b40      	cmp	r3, #64	; 0x40
 8008d12:	d86f      	bhi.n	8008df4 <HAL_TIM_ConfigClockSource+0x16c>
 8008d14:	2b30      	cmp	r3, #48	; 0x30
 8008d16:	d064      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x15a>
 8008d18:	2b30      	cmp	r3, #48	; 0x30
 8008d1a:	d86b      	bhi.n	8008df4 <HAL_TIM_ConfigClockSource+0x16c>
 8008d1c:	2b20      	cmp	r3, #32
 8008d1e:	d060      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x15a>
 8008d20:	2b20      	cmp	r3, #32
 8008d22:	d867      	bhi.n	8008df4 <HAL_TIM_ConfigClockSource+0x16c>
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d05c      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x15a>
 8008d28:	2b10      	cmp	r3, #16
 8008d2a:	d05a      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x15a>
 8008d2c:	e062      	b.n	8008df4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	6899      	ldr	r1, [r3, #8]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f000 fd85 	bl	800984c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	609a      	str	r2, [r3, #8]
      break;
 8008d5a:	e04f      	b.n	8008dfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6818      	ldr	r0, [r3, #0]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	6899      	ldr	r1, [r3, #8]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	685a      	ldr	r2, [r3, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f000 fd6e 	bl	800984c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689a      	ldr	r2, [r3, #8]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d7e:	609a      	str	r2, [r3, #8]
      break;
 8008d80:	e03c      	b.n	8008dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6818      	ldr	r0, [r3, #0]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	6859      	ldr	r1, [r3, #4]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	f000 fc2c 	bl	80095ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2150      	movs	r1, #80	; 0x50
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fd3b 	bl	8009816 <TIM_ITRx_SetConfig>
      break;
 8008da0:	e02c      	b.n	8008dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6818      	ldr	r0, [r3, #0]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	6859      	ldr	r1, [r3, #4]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	461a      	mov	r2, r3
 8008db0:	f000 fc88 	bl	80096c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2160      	movs	r1, #96	; 0x60
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 fd2b 	bl	8009816 <TIM_ITRx_SetConfig>
      break;
 8008dc0:	e01c      	b.n	8008dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	6859      	ldr	r1, [r3, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f000 fc0c 	bl	80095ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2140      	movs	r1, #64	; 0x40
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 fd1b 	bl	8009816 <TIM_ITRx_SetConfig>
      break;
 8008de0:	e00c      	b.n	8008dfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4619      	mov	r1, r3
 8008dec:	4610      	mov	r0, r2
 8008dee:	f000 fd12 	bl	8009816 <TIM_ITRx_SetConfig>
      break;
 8008df2:	e003      	b.n	8008dfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	73fb      	strb	r3, [r7, #15]
      break;
 8008df8:	e000      	b.n	8008dfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b083      	sub	sp, #12
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b083      	sub	sp, #12
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e32:	bf00      	nop
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e46:	bf00      	nop
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008e52:	b480      	push	{r7}
 8008e54:	b083      	sub	sp, #12
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008e5a:	bf00      	nop
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b083      	sub	sp, #12
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e6e:	bf00      	nop
 8008e70:	370c      	adds	r7, #12
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b083      	sub	sp, #12
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e82:	bf00      	nop
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b083      	sub	sp, #12
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008e96:	bf00      	nop
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d107      	bne.n	8008eca <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ec8:	e02a      	b.n	8008f20 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d107      	bne.n	8008ee4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ee2:	e01d      	b.n	8008f20 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d107      	bne.n	8008efe <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2204      	movs	r2, #4
 8008ef2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008efc:	e010      	b.n	8008f20 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d107      	bne.n	8008f18 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2208      	movs	r2, #8
 8008f0c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f16:	e003      	b.n	8008f20 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f7ff ffb4 	bl	8008e8e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	771a      	strb	r2, [r3, #28]
}
 8008f2c:	bf00      	nop
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f40:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d10f      	bne.n	8008f6c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	69db      	ldr	r3, [r3, #28]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d146      	bne.n	8008fe8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f6a:	e03d      	b.n	8008fe8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d10f      	bne.n	8008f96 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2202      	movs	r2, #2
 8008f7a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d131      	bne.n	8008fe8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f94:	e028      	b.n	8008fe8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d10f      	bne.n	8008fc0 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2204      	movs	r2, #4
 8008fa4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d11c      	bne.n	8008fe8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fbe:	e013      	b.n	8008fe8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d10e      	bne.n	8008fe8 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2208      	movs	r2, #8
 8008fce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d107      	bne.n	8008fe8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f7ff ff28 	bl	8008e3e <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	771a      	strb	r2, [r3, #28]
}
 8008ff4:	bf00      	nop
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009008:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	429a      	cmp	r2, r3
 8009012:	d103      	bne.n	800901c <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2201      	movs	r2, #1
 8009018:	771a      	strb	r2, [r3, #28]
 800901a:	e019      	b.n	8009050 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	429a      	cmp	r2, r3
 8009024:	d103      	bne.n	800902e <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2202      	movs	r2, #2
 800902a:	771a      	strb	r2, [r3, #28]
 800902c:	e010      	b.n	8009050 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	429a      	cmp	r2, r3
 8009036:	d103      	bne.n	8009040 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2204      	movs	r2, #4
 800903c:	771a      	strb	r2, [r3, #28]
 800903e:	e007      	b.n	8009050 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	429a      	cmp	r2, r3
 8009048:	d102      	bne.n	8009050 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2208      	movs	r2, #8
 800904e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f7ff fefe 	bl	8008e52 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	771a      	strb	r2, [r3, #28]
}
 800905c:	bf00      	nop
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a40      	ldr	r2, [pc, #256]	; (8009178 <TIM_Base_SetConfig+0x114>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d013      	beq.n	80090a4 <TIM_Base_SetConfig+0x40>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009082:	d00f      	beq.n	80090a4 <TIM_Base_SetConfig+0x40>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a3d      	ldr	r2, [pc, #244]	; (800917c <TIM_Base_SetConfig+0x118>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d00b      	beq.n	80090a4 <TIM_Base_SetConfig+0x40>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a3c      	ldr	r2, [pc, #240]	; (8009180 <TIM_Base_SetConfig+0x11c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d007      	beq.n	80090a4 <TIM_Base_SetConfig+0x40>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a3b      	ldr	r2, [pc, #236]	; (8009184 <TIM_Base_SetConfig+0x120>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d003      	beq.n	80090a4 <TIM_Base_SetConfig+0x40>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a3a      	ldr	r2, [pc, #232]	; (8009188 <TIM_Base_SetConfig+0x124>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d108      	bne.n	80090b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a2f      	ldr	r2, [pc, #188]	; (8009178 <TIM_Base_SetConfig+0x114>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d02b      	beq.n	8009116 <TIM_Base_SetConfig+0xb2>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c4:	d027      	beq.n	8009116 <TIM_Base_SetConfig+0xb2>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a2c      	ldr	r2, [pc, #176]	; (800917c <TIM_Base_SetConfig+0x118>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d023      	beq.n	8009116 <TIM_Base_SetConfig+0xb2>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a2b      	ldr	r2, [pc, #172]	; (8009180 <TIM_Base_SetConfig+0x11c>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d01f      	beq.n	8009116 <TIM_Base_SetConfig+0xb2>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a2a      	ldr	r2, [pc, #168]	; (8009184 <TIM_Base_SetConfig+0x120>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d01b      	beq.n	8009116 <TIM_Base_SetConfig+0xb2>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a29      	ldr	r2, [pc, #164]	; (8009188 <TIM_Base_SetConfig+0x124>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d017      	beq.n	8009116 <TIM_Base_SetConfig+0xb2>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a28      	ldr	r2, [pc, #160]	; (800918c <TIM_Base_SetConfig+0x128>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d013      	beq.n	8009116 <TIM_Base_SetConfig+0xb2>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a27      	ldr	r2, [pc, #156]	; (8009190 <TIM_Base_SetConfig+0x12c>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d00f      	beq.n	8009116 <TIM_Base_SetConfig+0xb2>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a26      	ldr	r2, [pc, #152]	; (8009194 <TIM_Base_SetConfig+0x130>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d00b      	beq.n	8009116 <TIM_Base_SetConfig+0xb2>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a25      	ldr	r2, [pc, #148]	; (8009198 <TIM_Base_SetConfig+0x134>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d007      	beq.n	8009116 <TIM_Base_SetConfig+0xb2>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a24      	ldr	r2, [pc, #144]	; (800919c <TIM_Base_SetConfig+0x138>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d003      	beq.n	8009116 <TIM_Base_SetConfig+0xb2>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a23      	ldr	r2, [pc, #140]	; (80091a0 <TIM_Base_SetConfig+0x13c>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d108      	bne.n	8009128 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800911c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4313      	orrs	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	4313      	orrs	r3, r2
 8009134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a0a      	ldr	r2, [pc, #40]	; (8009178 <TIM_Base_SetConfig+0x114>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d003      	beq.n	800915c <TIM_Base_SetConfig+0xf8>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a0c      	ldr	r2, [pc, #48]	; (8009188 <TIM_Base_SetConfig+0x124>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d103      	bne.n	8009164 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	691a      	ldr	r2, [r3, #16]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	615a      	str	r2, [r3, #20]
}
 800916a:	bf00      	nop
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	40010000 	.word	0x40010000
 800917c:	40000400 	.word	0x40000400
 8009180:	40000800 	.word	0x40000800
 8009184:	40000c00 	.word	0x40000c00
 8009188:	40010400 	.word	0x40010400
 800918c:	40014000 	.word	0x40014000
 8009190:	40014400 	.word	0x40014400
 8009194:	40014800 	.word	0x40014800
 8009198:	40001800 	.word	0x40001800
 800919c:	40001c00 	.word	0x40001c00
 80091a0:	40002000 	.word	0x40002000

080091a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	f023 0201 	bic.w	r2, r3, #1
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f023 0303 	bic.w	r3, r3, #3
 80091da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f023 0302 	bic.w	r3, r3, #2
 80091ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a20      	ldr	r2, [pc, #128]	; (800927c <TIM_OC1_SetConfig+0xd8>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d003      	beq.n	8009208 <TIM_OC1_SetConfig+0x64>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a1f      	ldr	r2, [pc, #124]	; (8009280 <TIM_OC1_SetConfig+0xdc>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d10c      	bne.n	8009222 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	f023 0308 	bic.w	r3, r3, #8
 800920e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	697a      	ldr	r2, [r7, #20]
 8009216:	4313      	orrs	r3, r2
 8009218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f023 0304 	bic.w	r3, r3, #4
 8009220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a15      	ldr	r2, [pc, #84]	; (800927c <TIM_OC1_SetConfig+0xd8>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d003      	beq.n	8009232 <TIM_OC1_SetConfig+0x8e>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a14      	ldr	r2, [pc, #80]	; (8009280 <TIM_OC1_SetConfig+0xdc>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d111      	bne.n	8009256 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	695b      	ldr	r3, [r3, #20]
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	4313      	orrs	r3, r2
 800924a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	4313      	orrs	r3, r2
 8009254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	621a      	str	r2, [r3, #32]
}
 8009270:	bf00      	nop
 8009272:	371c      	adds	r7, #28
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	40010000 	.word	0x40010000
 8009280:	40010400 	.word	0x40010400

08009284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009284:	b480      	push	{r7}
 8009286:	b087      	sub	sp, #28
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	f023 0210 	bic.w	r2, r3, #16
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	021b      	lsls	r3, r3, #8
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f023 0320 	bic.w	r3, r3, #32
 80092ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	011b      	lsls	r3, r3, #4
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	4313      	orrs	r3, r2
 80092da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a22      	ldr	r2, [pc, #136]	; (8009368 <TIM_OC2_SetConfig+0xe4>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d003      	beq.n	80092ec <TIM_OC2_SetConfig+0x68>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a21      	ldr	r2, [pc, #132]	; (800936c <TIM_OC2_SetConfig+0xe8>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d10d      	bne.n	8009308 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	011b      	lsls	r3, r3, #4
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009306:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a17      	ldr	r2, [pc, #92]	; (8009368 <TIM_OC2_SetConfig+0xe4>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d003      	beq.n	8009318 <TIM_OC2_SetConfig+0x94>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a16      	ldr	r2, [pc, #88]	; (800936c <TIM_OC2_SetConfig+0xe8>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d113      	bne.n	8009340 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800931e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	695b      	ldr	r3, [r3, #20]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	4313      	orrs	r3, r2
 8009332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	4313      	orrs	r3, r2
 800933e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	621a      	str	r2, [r3, #32]
}
 800935a:	bf00      	nop
 800935c:	371c      	adds	r7, #28
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	40010000 	.word	0x40010000
 800936c:	40010400 	.word	0x40010400

08009370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009370:	b480      	push	{r7}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	69db      	ldr	r3, [r3, #28]
 8009396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800939e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f023 0303 	bic.w	r3, r3, #3
 80093a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	021b      	lsls	r3, r3, #8
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a21      	ldr	r2, [pc, #132]	; (8009450 <TIM_OC3_SetConfig+0xe0>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d003      	beq.n	80093d6 <TIM_OC3_SetConfig+0x66>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a20      	ldr	r2, [pc, #128]	; (8009454 <TIM_OC3_SetConfig+0xe4>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d10d      	bne.n	80093f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	021b      	lsls	r3, r3, #8
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a16      	ldr	r2, [pc, #88]	; (8009450 <TIM_OC3_SetConfig+0xe0>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d003      	beq.n	8009402 <TIM_OC3_SetConfig+0x92>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a15      	ldr	r2, [pc, #84]	; (8009454 <TIM_OC3_SetConfig+0xe4>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d113      	bne.n	800942a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	011b      	lsls	r3, r3, #4
 8009418:	693a      	ldr	r2, [r7, #16]
 800941a:	4313      	orrs	r3, r2
 800941c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	011b      	lsls	r3, r3, #4
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	4313      	orrs	r3, r2
 8009428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	685a      	ldr	r2, [r3, #4]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	621a      	str	r2, [r3, #32]
}
 8009444:	bf00      	nop
 8009446:	371c      	adds	r7, #28
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	40010000 	.word	0x40010000
 8009454:	40010400 	.word	0x40010400

08009458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a1b      	ldr	r3, [r3, #32]
 8009466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a1b      	ldr	r3, [r3, #32]
 8009472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	69db      	ldr	r3, [r3, #28]
 800947e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800948e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	021b      	lsls	r3, r3, #8
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	4313      	orrs	r3, r2
 800949a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	031b      	lsls	r3, r3, #12
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a12      	ldr	r2, [pc, #72]	; (80094fc <TIM_OC4_SetConfig+0xa4>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d003      	beq.n	80094c0 <TIM_OC4_SetConfig+0x68>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a11      	ldr	r2, [pc, #68]	; (8009500 <TIM_OC4_SetConfig+0xa8>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d109      	bne.n	80094d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	019b      	lsls	r3, r3, #6
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	621a      	str	r2, [r3, #32]
}
 80094ee:	bf00      	nop
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	40010000 	.word	0x40010000
 8009500:	40010400 	.word	0x40010400

08009504 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009504:	b480      	push	{r7}
 8009506:	b087      	sub	sp, #28
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	f023 0201 	bic.w	r2, r3, #1
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6a1b      	ldr	r3, [r3, #32]
 8009528:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	4a28      	ldr	r2, [pc, #160]	; (80095d0 <TIM_TI1_SetConfig+0xcc>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d01b      	beq.n	800956a <TIM_TI1_SetConfig+0x66>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009538:	d017      	beq.n	800956a <TIM_TI1_SetConfig+0x66>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	4a25      	ldr	r2, [pc, #148]	; (80095d4 <TIM_TI1_SetConfig+0xd0>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d013      	beq.n	800956a <TIM_TI1_SetConfig+0x66>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	4a24      	ldr	r2, [pc, #144]	; (80095d8 <TIM_TI1_SetConfig+0xd4>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d00f      	beq.n	800956a <TIM_TI1_SetConfig+0x66>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4a23      	ldr	r2, [pc, #140]	; (80095dc <TIM_TI1_SetConfig+0xd8>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d00b      	beq.n	800956a <TIM_TI1_SetConfig+0x66>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	4a22      	ldr	r2, [pc, #136]	; (80095e0 <TIM_TI1_SetConfig+0xdc>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d007      	beq.n	800956a <TIM_TI1_SetConfig+0x66>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	4a21      	ldr	r2, [pc, #132]	; (80095e4 <TIM_TI1_SetConfig+0xe0>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d003      	beq.n	800956a <TIM_TI1_SetConfig+0x66>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	4a20      	ldr	r2, [pc, #128]	; (80095e8 <TIM_TI1_SetConfig+0xe4>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d101      	bne.n	800956e <TIM_TI1_SetConfig+0x6a>
 800956a:	2301      	movs	r3, #1
 800956c:	e000      	b.n	8009570 <TIM_TI1_SetConfig+0x6c>
 800956e:	2300      	movs	r3, #0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d008      	beq.n	8009586 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f023 0303 	bic.w	r3, r3, #3
 800957a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4313      	orrs	r3, r2
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	e003      	b.n	800958e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f043 0301 	orr.w	r3, r3, #1
 800958c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	011b      	lsls	r3, r3, #4
 800959a:	b2db      	uxtb	r3, r3
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	4313      	orrs	r3, r2
 80095a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f023 030a 	bic.w	r3, r3, #10
 80095a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	f003 030a 	and.w	r3, r3, #10
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	621a      	str	r2, [r3, #32]
}
 80095c2:	bf00      	nop
 80095c4:	371c      	adds	r7, #28
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	40010000 	.word	0x40010000
 80095d4:	40000400 	.word	0x40000400
 80095d8:	40000800 	.word	0x40000800
 80095dc:	40000c00 	.word	0x40000c00
 80095e0:	40010400 	.word	0x40010400
 80095e4:	40014000 	.word	0x40014000
 80095e8:	40001800 	.word	0x40001800

080095ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b087      	sub	sp, #28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	f023 0201 	bic.w	r2, r3, #1
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	699b      	ldr	r3, [r3, #24]
 800960e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	011b      	lsls	r3, r3, #4
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	4313      	orrs	r3, r2
 8009620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f023 030a 	bic.w	r3, r3, #10
 8009628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	4313      	orrs	r3, r2
 8009630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	621a      	str	r2, [r3, #32]
}
 800963e:	bf00      	nop
 8009640:	371c      	adds	r7, #28
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800964a:	b480      	push	{r7}
 800964c:	b087      	sub	sp, #28
 800964e:	af00      	add	r7, sp, #0
 8009650:	60f8      	str	r0, [r7, #12]
 8009652:	60b9      	str	r1, [r7, #8]
 8009654:	607a      	str	r2, [r7, #4]
 8009656:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6a1b      	ldr	r3, [r3, #32]
 800965c:	f023 0210 	bic.w	r2, r3, #16
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009676:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	021b      	lsls	r3, r3, #8
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	4313      	orrs	r3, r2
 8009680:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009688:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	031b      	lsls	r3, r3, #12
 800968e:	b29b      	uxth	r3, r3
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	4313      	orrs	r3, r2
 8009694:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800969c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	011b      	lsls	r3, r3, #4
 80096a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	621a      	str	r2, [r3, #32]
}
 80096b8:	bf00      	nop
 80096ba:	371c      	adds	r7, #28
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	f023 0210 	bic.w	r2, r3, #16
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	031b      	lsls	r3, r3, #12
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009700:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	011b      	lsls	r3, r3, #4
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	4313      	orrs	r3, r2
 800970a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	621a      	str	r2, [r3, #32]
}
 8009718:	bf00      	nop
 800971a:	371c      	adds	r7, #28
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009724:	b480      	push	{r7}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
 8009730:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f023 0303 	bic.w	r3, r3, #3
 8009750:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4313      	orrs	r3, r2
 8009758:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009760:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	011b      	lsls	r3, r3, #4
 8009766:	b2db      	uxtb	r3, r3
 8009768:	697a      	ldr	r2, [r7, #20]
 800976a:	4313      	orrs	r3, r2
 800976c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009774:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	021b      	lsls	r3, r3, #8
 800977a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	4313      	orrs	r3, r2
 8009782:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	621a      	str	r2, [r3, #32]
}
 8009790:	bf00      	nop
 8009792:	371c      	adds	r7, #28
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800979c:	b480      	push	{r7}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
 80097a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6a1b      	ldr	r3, [r3, #32]
 80097c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	021b      	lsls	r3, r3, #8
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	031b      	lsls	r3, r3, #12
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80097ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	031b      	lsls	r3, r3, #12
 80097f4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	697a      	ldr	r2, [r7, #20]
 8009802:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	621a      	str	r2, [r3, #32]
}
 800980a:	bf00      	nop
 800980c:	371c      	adds	r7, #28
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009816:	b480      	push	{r7}
 8009818:	b085      	sub	sp, #20
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4313      	orrs	r3, r2
 8009834:	f043 0307 	orr.w	r3, r3, #7
 8009838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	609a      	str	r2, [r3, #8]
}
 8009840:	bf00      	nop
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009866:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	021a      	lsls	r2, r3, #8
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	431a      	orrs	r2, r3
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	4313      	orrs	r3, r2
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	4313      	orrs	r3, r2
 8009878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	609a      	str	r2, [r3, #8]
}
 8009880:	bf00      	nop
 8009882:	371c      	adds	r7, #28
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800988c:	b480      	push	{r7}
 800988e:	b087      	sub	sp, #28
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	f003 031f 	and.w	r3, r3, #31
 800989e:	2201      	movs	r2, #1
 80098a0:	fa02 f303 	lsl.w	r3, r2, r3
 80098a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6a1a      	ldr	r2, [r3, #32]
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	43db      	mvns	r3, r3
 80098ae:	401a      	ands	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6a1a      	ldr	r2, [r3, #32]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f003 031f 	and.w	r3, r3, #31
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	fa01 f303 	lsl.w	r3, r1, r3
 80098c4:	431a      	orrs	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	621a      	str	r2, [r3, #32]
}
 80098ca:	bf00      	nop
 80098cc:	371c      	adds	r7, #28
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
	...

080098d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d101      	bne.n	80098f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098ec:	2302      	movs	r3, #2
 80098ee:	e05a      	b.n	80099a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	4313      	orrs	r3, r2
 8009920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a21      	ldr	r2, [pc, #132]	; (80099b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d022      	beq.n	800997a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800993c:	d01d      	beq.n	800997a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a1d      	ldr	r2, [pc, #116]	; (80099b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d018      	beq.n	800997a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a1b      	ldr	r2, [pc, #108]	; (80099bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d013      	beq.n	800997a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a1a      	ldr	r2, [pc, #104]	; (80099c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d00e      	beq.n	800997a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a18      	ldr	r2, [pc, #96]	; (80099c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d009      	beq.n	800997a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a17      	ldr	r2, [pc, #92]	; (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d004      	beq.n	800997a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a15      	ldr	r2, [pc, #84]	; (80099cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d10c      	bne.n	8009994 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	4313      	orrs	r3, r2
 800998a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	40010000 	.word	0x40010000
 80099b8:	40000400 	.word	0x40000400
 80099bc:	40000800 	.word	0x40000800
 80099c0:	40000c00 	.word	0x40000c00
 80099c4:	40010400 	.word	0x40010400
 80099c8:	40014000 	.word	0x40014000
 80099cc:	40001800 	.word	0x40001800

080099d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80099da:	2300      	movs	r3, #0
 80099dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d101      	bne.n	80099ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80099e8:	2302      	movs	r3, #2
 80099ea:	e03d      	b.n	8009a68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	695b      	ldr	r3, [r3, #20]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	69db      	ldr	r3, [r3, #28]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e03f      	b.n	8009b2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d106      	bne.n	8009ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7fb f8ec 	bl	8004ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2224      	movs	r2, #36	; 0x24
 8009acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68da      	ldr	r2, [r3, #12]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fe81 	bl	800a7e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	691a      	ldr	r2, [r3, #16]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	695a      	ldr	r2, [r3, #20]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68da      	ldr	r2, [r3, #12]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2220      	movs	r2, #32
 8009b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b08a      	sub	sp, #40	; 0x28
 8009b3a:	af02      	add	r7, sp, #8
 8009b3c:	60f8      	str	r0, [r7, #12]
 8009b3e:	60b9      	str	r1, [r7, #8]
 8009b40:	603b      	str	r3, [r7, #0]
 8009b42:	4613      	mov	r3, r2
 8009b44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b20      	cmp	r3, #32
 8009b54:	d17c      	bne.n	8009c50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d002      	beq.n	8009b62 <HAL_UART_Transmit+0x2c>
 8009b5c:	88fb      	ldrh	r3, [r7, #6]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d101      	bne.n	8009b66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e075      	b.n	8009c52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d101      	bne.n	8009b74 <HAL_UART_Transmit+0x3e>
 8009b70:	2302      	movs	r3, #2
 8009b72:	e06e      	b.n	8009c52 <HAL_UART_Transmit+0x11c>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2221      	movs	r2, #33	; 0x21
 8009b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b8a:	f7fb fb6b 	bl	8005264 <HAL_GetTick>
 8009b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	88fa      	ldrh	r2, [r7, #6]
 8009b94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	88fa      	ldrh	r2, [r7, #6]
 8009b9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ba4:	d108      	bne.n	8009bb8 <HAL_UART_Transmit+0x82>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d104      	bne.n	8009bb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	61bb      	str	r3, [r7, #24]
 8009bb6:	e003      	b.n	8009bc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009bc8:	e02a      	b.n	8009c20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	2180      	movs	r1, #128	; 0x80
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f000 fbc1 	bl	800a35c <UART_WaitOnFlagUntilTimeout>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e036      	b.n	8009c52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10b      	bne.n	8009c02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	881b      	ldrh	r3, [r3, #0]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	3302      	adds	r3, #2
 8009bfe:	61bb      	str	r3, [r7, #24]
 8009c00:	e007      	b.n	8009c12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	781a      	ldrb	r2, [r3, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1cf      	bne.n	8009bca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	2200      	movs	r2, #0
 8009c32:	2140      	movs	r1, #64	; 0x40
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f000 fb91 	bl	800a35c <UART_WaitOnFlagUntilTimeout>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e006      	b.n	8009c52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2220      	movs	r2, #32
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	e000      	b.n	8009c52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009c50:	2302      	movs	r3, #2
  }
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3720      	adds	r7, #32
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b08a      	sub	sp, #40	; 0x28
 8009c5e:	af02      	add	r7, sp, #8
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	603b      	str	r3, [r7, #0]
 8009c66:	4613      	mov	r3, r2
 8009c68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b20      	cmp	r3, #32
 8009c78:	f040 808c 	bne.w	8009d94 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d002      	beq.n	8009c88 <HAL_UART_Receive+0x2e>
 8009c82:	88fb      	ldrh	r3, [r7, #6]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d101      	bne.n	8009c8c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e084      	b.n	8009d96 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d101      	bne.n	8009c9a <HAL_UART_Receive+0x40>
 8009c96:	2302      	movs	r3, #2
 8009c98:	e07d      	b.n	8009d96 <HAL_UART_Receive+0x13c>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2222      	movs	r2, #34	; 0x22
 8009cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cb6:	f7fb fad5 	bl	8005264 <HAL_GetTick>
 8009cba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	88fa      	ldrh	r2, [r7, #6]
 8009cc0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	88fa      	ldrh	r2, [r7, #6]
 8009cc6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cd0:	d108      	bne.n	8009ce4 <HAL_UART_Receive+0x8a>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d104      	bne.n	8009ce4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	61bb      	str	r3, [r7, #24]
 8009ce2:	e003      	b.n	8009cec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009cf4:	e043      	b.n	8009d7e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2120      	movs	r1, #32
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f000 fb2b 	bl	800a35c <UART_WaitOnFlagUntilTimeout>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d001      	beq.n	8009d10 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e042      	b.n	8009d96 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10c      	bne.n	8009d30 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	3302      	adds	r3, #2
 8009d2c:	61bb      	str	r3, [r7, #24]
 8009d2e:	e01f      	b.n	8009d70 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d38:	d007      	beq.n	8009d4a <HAL_UART_Receive+0xf0>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10a      	bne.n	8009d58 <HAL_UART_Receive+0xfe>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d106      	bne.n	8009d58 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	701a      	strb	r2, [r3, #0]
 8009d56:	e008      	b.n	8009d6a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	3b01      	subs	r3, #1
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1b6      	bne.n	8009cf6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2220      	movs	r2, #32
 8009d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	e000      	b.n	8009d96 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009d94:	2302      	movs	r3, #2
  }
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3720      	adds	r7, #32
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	60f8      	str	r0, [r7, #12]
 8009da6:	60b9      	str	r1, [r7, #8]
 8009da8:	4613      	mov	r3, r2
 8009daa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2b20      	cmp	r3, #32
 8009db6:	d11d      	bne.n	8009df4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d002      	beq.n	8009dc4 <HAL_UART_Receive_IT+0x26>
 8009dbe:	88fb      	ldrh	r3, [r7, #6]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d101      	bne.n	8009dc8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e016      	b.n	8009df6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d101      	bne.n	8009dd6 <HAL_UART_Receive_IT+0x38>
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	e00f      	b.n	8009df6 <HAL_UART_Receive_IT+0x58>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009de4:	88fb      	ldrh	r3, [r7, #6]
 8009de6:	461a      	mov	r2, r3
 8009de8:	68b9      	ldr	r1, [r7, #8]
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f000 fb24 	bl	800a438 <UART_Start_Receive_IT>
 8009df0:	4603      	mov	r3, r0
 8009df2:	e000      	b.n	8009df6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009df4:	2302      	movs	r3, #2
  }
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
	...

08009e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b0ba      	sub	sp, #232	; 0xe8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	695b      	ldr	r3, [r3, #20]
 8009e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009e26:	2300      	movs	r3, #0
 8009e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e36:	f003 030f 	and.w	r3, r3, #15
 8009e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10f      	bne.n	8009e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e4a:	f003 0320 	and.w	r3, r3, #32
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d009      	beq.n	8009e66 <HAL_UART_IRQHandler+0x66>
 8009e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e56:	f003 0320 	and.w	r3, r3, #32
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fc07 	bl	800a672 <UART_Receive_IT>
      return;
 8009e64:	e256      	b.n	800a314 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f000 80de 	beq.w	800a02c <HAL_UART_IRQHandler+0x22c>
 8009e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e74:	f003 0301 	and.w	r3, r3, #1
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d106      	bne.n	8009e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 80d1 	beq.w	800a02c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00b      	beq.n	8009eae <HAL_UART_IRQHandler+0xae>
 8009e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d005      	beq.n	8009eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea6:	f043 0201 	orr.w	r2, r3, #1
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eb2:	f003 0304 	and.w	r3, r3, #4
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00b      	beq.n	8009ed2 <HAL_UART_IRQHandler+0xd2>
 8009eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d005      	beq.n	8009ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eca:	f043 0202 	orr.w	r2, r3, #2
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ed6:	f003 0302 	and.w	r3, r3, #2
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00b      	beq.n	8009ef6 <HAL_UART_IRQHandler+0xf6>
 8009ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d005      	beq.n	8009ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eee:	f043 0204 	orr.w	r2, r3, #4
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009efa:	f003 0308 	and.w	r3, r3, #8
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d011      	beq.n	8009f26 <HAL_UART_IRQHandler+0x126>
 8009f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f06:	f003 0320 	and.w	r3, r3, #32
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d105      	bne.n	8009f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f12:	f003 0301 	and.w	r3, r3, #1
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d005      	beq.n	8009f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f1e:	f043 0208 	orr.w	r2, r3, #8
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f000 81ed 	beq.w	800a30a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f34:	f003 0320 	and.w	r3, r3, #32
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d008      	beq.n	8009f4e <HAL_UART_IRQHandler+0x14e>
 8009f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f40:	f003 0320 	and.w	r3, r3, #32
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d002      	beq.n	8009f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fb92 	bl	800a672 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	695b      	ldr	r3, [r3, #20]
 8009f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f58:	2b40      	cmp	r3, #64	; 0x40
 8009f5a:	bf0c      	ite	eq
 8009f5c:	2301      	moveq	r3, #1
 8009f5e:	2300      	movne	r3, #0
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6a:	f003 0308 	and.w	r3, r3, #8
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d103      	bne.n	8009f7a <HAL_UART_IRQHandler+0x17a>
 8009f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d04f      	beq.n	800a01a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 fa9a 	bl	800a4b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	695b      	ldr	r3, [r3, #20]
 8009f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f8a:	2b40      	cmp	r3, #64	; 0x40
 8009f8c:	d141      	bne.n	800a012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3314      	adds	r3, #20
 8009f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f9c:	e853 3f00 	ldrex	r3, [r3]
 8009fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3314      	adds	r3, #20
 8009fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009fba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009fca:	e841 2300 	strex	r3, r2, [r1]
 8009fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1d9      	bne.n	8009f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d013      	beq.n	800a00a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe6:	4a7d      	ldr	r2, [pc, #500]	; (800a1dc <HAL_UART_IRQHandler+0x3dc>)
 8009fe8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fc f998 	bl	8006324 <HAL_DMA_Abort_IT>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d016      	beq.n	800a028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a004:	4610      	mov	r0, r2
 800a006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a008:	e00e      	b.n	800a028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f990 	bl	800a330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a010:	e00a      	b.n	800a028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f98c 	bl	800a330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a018:	e006      	b.n	800a028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f988 	bl	800a330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a026:	e170      	b.n	800a30a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a028:	bf00      	nop
    return;
 800a02a:	e16e      	b.n	800a30a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a030:	2b01      	cmp	r3, #1
 800a032:	f040 814a 	bne.w	800a2ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a03a:	f003 0310 	and.w	r3, r3, #16
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f000 8143 	beq.w	800a2ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a048:	f003 0310 	and.w	r3, r3, #16
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 813c 	beq.w	800a2ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a052:	2300      	movs	r3, #0
 800a054:	60bb      	str	r3, [r7, #8]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	60bb      	str	r3, [r7, #8]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	60bb      	str	r3, [r7, #8]
 800a066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	695b      	ldr	r3, [r3, #20]
 800a06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a072:	2b40      	cmp	r3, #64	; 0x40
 800a074:	f040 80b4 	bne.w	800a1e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 8140 	beq.w	800a30e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a096:	429a      	cmp	r2, r3
 800a098:	f080 8139 	bcs.w	800a30e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a0a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a8:	69db      	ldr	r3, [r3, #28]
 800a0aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ae:	f000 8088 	beq.w	800a1c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	330c      	adds	r3, #12
 800a0b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a0c0:	e853 3f00 	ldrex	r3, [r3]
 800a0c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a0c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	330c      	adds	r3, #12
 800a0da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a0de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a0e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a0ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a0ee:	e841 2300 	strex	r3, r2, [r1]
 800a0f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a0f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1d9      	bne.n	800a0b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3314      	adds	r3, #20
 800a104:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a108:	e853 3f00 	ldrex	r3, [r3]
 800a10c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a10e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a110:	f023 0301 	bic.w	r3, r3, #1
 800a114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3314      	adds	r3, #20
 800a11e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a122:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a126:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a128:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a12a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a12e:	e841 2300 	strex	r3, r2, [r1]
 800a132:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1e1      	bne.n	800a0fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3314      	adds	r3, #20
 800a140:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a144:	e853 3f00 	ldrex	r3, [r3]
 800a148:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a14a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a14c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	3314      	adds	r3, #20
 800a15a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a15e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a160:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a162:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a164:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a166:	e841 2300 	strex	r3, r2, [r1]
 800a16a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a16c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1e3      	bne.n	800a13a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2220      	movs	r2, #32
 800a176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	330c      	adds	r3, #12
 800a186:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a18a:	e853 3f00 	ldrex	r3, [r3]
 800a18e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a192:	f023 0310 	bic.w	r3, r3, #16
 800a196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	330c      	adds	r3, #12
 800a1a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a1a4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a1a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1ac:	e841 2300 	strex	r3, r2, [r1]
 800a1b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a1b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1e3      	bne.n	800a180 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7fc f841 	bl	8006244 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f8b6 	bl	800a344 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1d8:	e099      	b.n	800a30e <HAL_UART_IRQHandler+0x50e>
 800a1da:	bf00      	nop
 800a1dc:	0800a57b 	.word	0x0800a57b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	f000 808b 	beq.w	800a312 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a1fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a200:	2b00      	cmp	r3, #0
 800a202:	f000 8086 	beq.w	800a312 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	330c      	adds	r3, #12
 800a20c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a210:	e853 3f00 	ldrex	r3, [r3]
 800a214:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a21c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	330c      	adds	r3, #12
 800a226:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a22a:	647a      	str	r2, [r7, #68]	; 0x44
 800a22c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a232:	e841 2300 	strex	r3, r2, [r1]
 800a236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1e3      	bne.n	800a206 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3314      	adds	r3, #20
 800a244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a248:	e853 3f00 	ldrex	r3, [r3]
 800a24c:	623b      	str	r3, [r7, #32]
   return(result);
 800a24e:	6a3b      	ldr	r3, [r7, #32]
 800a250:	f023 0301 	bic.w	r3, r3, #1
 800a254:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3314      	adds	r3, #20
 800a25e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a262:	633a      	str	r2, [r7, #48]	; 0x30
 800a264:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a26a:	e841 2300 	strex	r3, r2, [r1]
 800a26e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1e3      	bne.n	800a23e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2220      	movs	r2, #32
 800a27a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	330c      	adds	r3, #12
 800a28a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	e853 3f00 	ldrex	r3, [r3]
 800a292:	60fb      	str	r3, [r7, #12]
   return(result);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f023 0310 	bic.w	r3, r3, #16
 800a29a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	330c      	adds	r3, #12
 800a2a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a2a8:	61fa      	str	r2, [r7, #28]
 800a2aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ac:	69b9      	ldr	r1, [r7, #24]
 800a2ae:	69fa      	ldr	r2, [r7, #28]
 800a2b0:	e841 2300 	strex	r3, r2, [r1]
 800a2b4:	617b      	str	r3, [r7, #20]
   return(result);
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1e3      	bne.n	800a284 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 f83e 	bl	800a344 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a2c8:	e023      	b.n	800a312 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a2ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d009      	beq.n	800a2ea <HAL_UART_IRQHandler+0x4ea>
 800a2d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d003      	beq.n	800a2ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f95d 	bl	800a5a2 <UART_Transmit_IT>
    return;
 800a2e8:	e014      	b.n	800a314 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a2ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00e      	beq.n	800a314 <HAL_UART_IRQHandler+0x514>
 800a2f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d008      	beq.n	800a314 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 f99d 	bl	800a642 <UART_EndTransmit_IT>
    return;
 800a308:	e004      	b.n	800a314 <HAL_UART_IRQHandler+0x514>
    return;
 800a30a:	bf00      	nop
 800a30c:	e002      	b.n	800a314 <HAL_UART_IRQHandler+0x514>
      return;
 800a30e:	bf00      	nop
 800a310:	e000      	b.n	800a314 <HAL_UART_IRQHandler+0x514>
      return;
 800a312:	bf00      	nop
  }
}
 800a314:	37e8      	adds	r7, #232	; 0xe8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop

0800a31c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a324:	bf00      	nop
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a338:	bf00      	nop
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b090      	sub	sp, #64	; 0x40
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	603b      	str	r3, [r7, #0]
 800a368:	4613      	mov	r3, r2
 800a36a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a36c:	e050      	b.n	800a410 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a36e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a374:	d04c      	beq.n	800a410 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d007      	beq.n	800a38c <UART_WaitOnFlagUntilTimeout+0x30>
 800a37c:	f7fa ff72 	bl	8005264 <HAL_GetTick>
 800a380:	4602      	mov	r2, r0
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a388:	429a      	cmp	r2, r3
 800a38a:	d241      	bcs.n	800a410 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	330c      	adds	r3, #12
 800a392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	e853 3f00 	ldrex	r3, [r3]
 800a39a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	330c      	adds	r3, #12
 800a3aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3ac:	637a      	str	r2, [r7, #52]	; 0x34
 800a3ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3b4:	e841 2300 	strex	r3, r2, [r1]
 800a3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e5      	bne.n	800a38c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3314      	adds	r3, #20
 800a3c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	e853 3f00 	ldrex	r3, [r3]
 800a3ce:	613b      	str	r3, [r7, #16]
   return(result);
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f023 0301 	bic.w	r3, r3, #1
 800a3d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	3314      	adds	r3, #20
 800a3de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3e0:	623a      	str	r2, [r7, #32]
 800a3e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e4:	69f9      	ldr	r1, [r7, #28]
 800a3e6:	6a3a      	ldr	r2, [r7, #32]
 800a3e8:	e841 2300 	strex	r3, r2, [r1]
 800a3ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1e5      	bne.n	800a3c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2220      	movs	r2, #32
 800a400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e00f      	b.n	800a430 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	4013      	ands	r3, r2
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	bf0c      	ite	eq
 800a420:	2301      	moveq	r3, #1
 800a422:	2300      	movne	r3, #0
 800a424:	b2db      	uxtb	r3, r3
 800a426:	461a      	mov	r2, r3
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d09f      	beq.n	800a36e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3740      	adds	r7, #64	; 0x40
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	4613      	mov	r3, r2
 800a444:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	68ba      	ldr	r2, [r7, #8]
 800a44a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	88fa      	ldrh	r2, [r7, #6]
 800a450:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	88fa      	ldrh	r2, [r7, #6]
 800a456:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2222      	movs	r2, #34	; 0x22
 800a462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d007      	beq.n	800a486 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68da      	ldr	r2, [r3, #12]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a484:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	695a      	ldr	r2, [r3, #20]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f042 0201 	orr.w	r2, r2, #1
 800a494:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68da      	ldr	r2, [r3, #12]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f042 0220 	orr.w	r2, r2, #32
 800a4a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b095      	sub	sp, #84	; 0x54
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	330c      	adds	r3, #12
 800a4c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	330c      	adds	r3, #12
 800a4da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4dc:	643a      	str	r2, [r7, #64]	; 0x40
 800a4de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a4e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4e4:	e841 2300 	strex	r3, r2, [r1]
 800a4e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e5      	bne.n	800a4bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3314      	adds	r3, #20
 800a4f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f8:	6a3b      	ldr	r3, [r7, #32]
 800a4fa:	e853 3f00 	ldrex	r3, [r3]
 800a4fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	f023 0301 	bic.w	r3, r3, #1
 800a506:	64bb      	str	r3, [r7, #72]	; 0x48
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3314      	adds	r3, #20
 800a50e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a510:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a518:	e841 2300 	strex	r3, r2, [r1]
 800a51c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1e5      	bne.n	800a4f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d119      	bne.n	800a560 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	330c      	adds	r3, #12
 800a532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	e853 3f00 	ldrex	r3, [r3]
 800a53a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	f023 0310 	bic.w	r3, r3, #16
 800a542:	647b      	str	r3, [r7, #68]	; 0x44
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	330c      	adds	r3, #12
 800a54a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a54c:	61ba      	str	r2, [r7, #24]
 800a54e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a550:	6979      	ldr	r1, [r7, #20]
 800a552:	69ba      	ldr	r2, [r7, #24]
 800a554:	e841 2300 	strex	r3, r2, [r1]
 800a558:	613b      	str	r3, [r7, #16]
   return(result);
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1e5      	bne.n	800a52c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2220      	movs	r2, #32
 800a564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a56e:	bf00      	nop
 800a570:	3754      	adds	r7, #84	; 0x54
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b084      	sub	sp, #16
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a586:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f7ff fecb 	bl	800a330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a59a:	bf00      	nop
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b085      	sub	sp, #20
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	2b21      	cmp	r3, #33	; 0x21
 800a5b4:	d13e      	bne.n	800a634 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5be:	d114      	bne.n	800a5ea <UART_Transmit_IT+0x48>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d110      	bne.n	800a5ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a1b      	ldr	r3, [r3, #32]
 800a5cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	881b      	ldrh	r3, [r3, #0]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a1b      	ldr	r3, [r3, #32]
 800a5e2:	1c9a      	adds	r2, r3, #2
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	621a      	str	r2, [r3, #32]
 800a5e8:	e008      	b.n	800a5fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	1c59      	adds	r1, r3, #1
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	6211      	str	r1, [r2, #32]
 800a5f4:	781a      	ldrb	r2, [r3, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a600:	b29b      	uxth	r3, r3
 800a602:	3b01      	subs	r3, #1
 800a604:	b29b      	uxth	r3, r3
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	4619      	mov	r1, r3
 800a60a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10f      	bne.n	800a630 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68da      	ldr	r2, [r3, #12]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a61e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68da      	ldr	r2, [r3, #12]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a62e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	e000      	b.n	800a636 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a634:	2302      	movs	r3, #2
  }
}
 800a636:	4618      	mov	r0, r3
 800a638:	3714      	adds	r7, #20
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b082      	sub	sp, #8
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a658:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2220      	movs	r2, #32
 800a65e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f7ff fe5a 	bl	800a31c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b08c      	sub	sp, #48	; 0x30
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a680:	b2db      	uxtb	r3, r3
 800a682:	2b22      	cmp	r3, #34	; 0x22
 800a684:	f040 80ab 	bne.w	800a7de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a690:	d117      	bne.n	800a6c2 <UART_Receive_IT+0x50>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d113      	bne.n	800a6c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a69a:	2300      	movs	r3, #0
 800a69c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ba:	1c9a      	adds	r2, r3, #2
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	629a      	str	r2, [r3, #40]	; 0x28
 800a6c0:	e026      	b.n	800a710 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6d4:	d007      	beq.n	800a6e6 <UART_Receive_IT+0x74>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10a      	bne.n	800a6f4 <UART_Receive_IT+0x82>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d106      	bne.n	800a6f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	b2da      	uxtb	r2, r3
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	701a      	strb	r2, [r3, #0]
 800a6f2:	e008      	b.n	800a706 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a700:	b2da      	uxtb	r2, r3
 800a702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a704:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a70a:	1c5a      	adds	r2, r3, #1
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a714:	b29b      	uxth	r3, r3
 800a716:	3b01      	subs	r3, #1
 800a718:	b29b      	uxth	r3, r3
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	4619      	mov	r1, r3
 800a71e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a720:	2b00      	cmp	r3, #0
 800a722:	d15a      	bne.n	800a7da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68da      	ldr	r2, [r3, #12]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f022 0220 	bic.w	r2, r2, #32
 800a732:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68da      	ldr	r2, [r3, #12]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a742:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	695a      	ldr	r2, [r3, #20]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f022 0201 	bic.w	r2, r2, #1
 800a752:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2220      	movs	r2, #32
 800a758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a760:	2b01      	cmp	r3, #1
 800a762:	d135      	bne.n	800a7d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	330c      	adds	r3, #12
 800a770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	e853 3f00 	ldrex	r3, [r3]
 800a778:	613b      	str	r3, [r7, #16]
   return(result);
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	f023 0310 	bic.w	r3, r3, #16
 800a780:	627b      	str	r3, [r7, #36]	; 0x24
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	330c      	adds	r3, #12
 800a788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a78a:	623a      	str	r2, [r7, #32]
 800a78c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78e:	69f9      	ldr	r1, [r7, #28]
 800a790:	6a3a      	ldr	r2, [r7, #32]
 800a792:	e841 2300 	strex	r3, r2, [r1]
 800a796:	61bb      	str	r3, [r7, #24]
   return(result);
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1e5      	bne.n	800a76a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0310 	and.w	r3, r3, #16
 800a7a8:	2b10      	cmp	r3, #16
 800a7aa:	d10a      	bne.n	800a7c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	60fb      	str	r3, [r7, #12]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	60fb      	str	r3, [r7, #12]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	60fb      	str	r3, [r7, #12]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f7ff fdbb 	bl	800a344 <HAL_UARTEx_RxEventCallback>
 800a7ce:	e002      	b.n	800a7d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f7f9 ff21 	bl	8004618 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	e002      	b.n	800a7e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	e000      	b.n	800a7e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a7de:	2302      	movs	r3, #2
  }
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3730      	adds	r7, #48	; 0x30
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7ec:	b0c0      	sub	sp, #256	; 0x100
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a804:	68d9      	ldr	r1, [r3, #12]
 800a806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	ea40 0301 	orr.w	r3, r0, r1
 800a810:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a816:	689a      	ldr	r2, [r3, #8]
 800a818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	431a      	orrs	r2, r3
 800a820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	431a      	orrs	r2, r3
 800a828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	4313      	orrs	r3, r2
 800a830:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a840:	f021 010c 	bic.w	r1, r1, #12
 800a844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a84e:	430b      	orrs	r3, r1
 800a850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a85e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a862:	6999      	ldr	r1, [r3, #24]
 800a864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	ea40 0301 	orr.w	r3, r0, r1
 800a86e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	4b8f      	ldr	r3, [pc, #572]	; (800aab4 <UART_SetConfig+0x2cc>)
 800a878:	429a      	cmp	r2, r3
 800a87a:	d005      	beq.n	800a888 <UART_SetConfig+0xa0>
 800a87c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	4b8d      	ldr	r3, [pc, #564]	; (800aab8 <UART_SetConfig+0x2d0>)
 800a884:	429a      	cmp	r2, r3
 800a886:	d104      	bne.n	800a892 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a888:	f7fc fd34 	bl	80072f4 <HAL_RCC_GetPCLK2Freq>
 800a88c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a890:	e003      	b.n	800a89a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a892:	f7fc fd1b 	bl	80072cc <HAL_RCC_GetPCLK1Freq>
 800a896:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a89e:	69db      	ldr	r3, [r3, #28]
 800a8a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8a4:	f040 810c 	bne.w	800aac0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a8a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a8b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a8b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a8ba:	4622      	mov	r2, r4
 800a8bc:	462b      	mov	r3, r5
 800a8be:	1891      	adds	r1, r2, r2
 800a8c0:	65b9      	str	r1, [r7, #88]	; 0x58
 800a8c2:	415b      	adcs	r3, r3
 800a8c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	eb12 0801 	adds.w	r8, r2, r1
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	eb43 0901 	adc.w	r9, r3, r1
 800a8d6:	f04f 0200 	mov.w	r2, #0
 800a8da:	f04f 0300 	mov.w	r3, #0
 800a8de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a8e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a8e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a8ea:	4690      	mov	r8, r2
 800a8ec:	4699      	mov	r9, r3
 800a8ee:	4623      	mov	r3, r4
 800a8f0:	eb18 0303 	adds.w	r3, r8, r3
 800a8f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a8f8:	462b      	mov	r3, r5
 800a8fa:	eb49 0303 	adc.w	r3, r9, r3
 800a8fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a90e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a912:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a916:	460b      	mov	r3, r1
 800a918:	18db      	adds	r3, r3, r3
 800a91a:	653b      	str	r3, [r7, #80]	; 0x50
 800a91c:	4613      	mov	r3, r2
 800a91e:	eb42 0303 	adc.w	r3, r2, r3
 800a922:	657b      	str	r3, [r7, #84]	; 0x54
 800a924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a928:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a92c:	f7f6 f9ac 	bl	8000c88 <__aeabi_uldivmod>
 800a930:	4602      	mov	r2, r0
 800a932:	460b      	mov	r3, r1
 800a934:	4b61      	ldr	r3, [pc, #388]	; (800aabc <UART_SetConfig+0x2d4>)
 800a936:	fba3 2302 	umull	r2, r3, r3, r2
 800a93a:	095b      	lsrs	r3, r3, #5
 800a93c:	011c      	lsls	r4, r3, #4
 800a93e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a942:	2200      	movs	r2, #0
 800a944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a948:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a94c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a950:	4642      	mov	r2, r8
 800a952:	464b      	mov	r3, r9
 800a954:	1891      	adds	r1, r2, r2
 800a956:	64b9      	str	r1, [r7, #72]	; 0x48
 800a958:	415b      	adcs	r3, r3
 800a95a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a95c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a960:	4641      	mov	r1, r8
 800a962:	eb12 0a01 	adds.w	sl, r2, r1
 800a966:	4649      	mov	r1, r9
 800a968:	eb43 0b01 	adc.w	fp, r3, r1
 800a96c:	f04f 0200 	mov.w	r2, #0
 800a970:	f04f 0300 	mov.w	r3, #0
 800a974:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a978:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a97c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a980:	4692      	mov	sl, r2
 800a982:	469b      	mov	fp, r3
 800a984:	4643      	mov	r3, r8
 800a986:	eb1a 0303 	adds.w	r3, sl, r3
 800a98a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a98e:	464b      	mov	r3, r9
 800a990:	eb4b 0303 	adc.w	r3, fp, r3
 800a994:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a9a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a9a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	18db      	adds	r3, r3, r3
 800a9b0:	643b      	str	r3, [r7, #64]	; 0x40
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	eb42 0303 	adc.w	r3, r2, r3
 800a9b8:	647b      	str	r3, [r7, #68]	; 0x44
 800a9ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a9be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a9c2:	f7f6 f961 	bl	8000c88 <__aeabi_uldivmod>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	4b3b      	ldr	r3, [pc, #236]	; (800aabc <UART_SetConfig+0x2d4>)
 800a9ce:	fba3 2301 	umull	r2, r3, r3, r1
 800a9d2:	095b      	lsrs	r3, r3, #5
 800a9d4:	2264      	movs	r2, #100	; 0x64
 800a9d6:	fb02 f303 	mul.w	r3, r2, r3
 800a9da:	1acb      	subs	r3, r1, r3
 800a9dc:	00db      	lsls	r3, r3, #3
 800a9de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a9e2:	4b36      	ldr	r3, [pc, #216]	; (800aabc <UART_SetConfig+0x2d4>)
 800a9e4:	fba3 2302 	umull	r2, r3, r3, r2
 800a9e8:	095b      	lsrs	r3, r3, #5
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a9f0:	441c      	add	r4, r3
 800a9f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a9fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800aa00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aa04:	4642      	mov	r2, r8
 800aa06:	464b      	mov	r3, r9
 800aa08:	1891      	adds	r1, r2, r2
 800aa0a:	63b9      	str	r1, [r7, #56]	; 0x38
 800aa0c:	415b      	adcs	r3, r3
 800aa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aa14:	4641      	mov	r1, r8
 800aa16:	1851      	adds	r1, r2, r1
 800aa18:	6339      	str	r1, [r7, #48]	; 0x30
 800aa1a:	4649      	mov	r1, r9
 800aa1c:	414b      	adcs	r3, r1
 800aa1e:	637b      	str	r3, [r7, #52]	; 0x34
 800aa20:	f04f 0200 	mov.w	r2, #0
 800aa24:	f04f 0300 	mov.w	r3, #0
 800aa28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800aa2c:	4659      	mov	r1, fp
 800aa2e:	00cb      	lsls	r3, r1, #3
 800aa30:	4651      	mov	r1, sl
 800aa32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa36:	4651      	mov	r1, sl
 800aa38:	00ca      	lsls	r2, r1, #3
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4603      	mov	r3, r0
 800aa40:	4642      	mov	r2, r8
 800aa42:	189b      	adds	r3, r3, r2
 800aa44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa48:	464b      	mov	r3, r9
 800aa4a:	460a      	mov	r2, r1
 800aa4c:	eb42 0303 	adc.w	r3, r2, r3
 800aa50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aa60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aa64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aa68:	460b      	mov	r3, r1
 800aa6a:	18db      	adds	r3, r3, r3
 800aa6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa6e:	4613      	mov	r3, r2
 800aa70:	eb42 0303 	adc.w	r3, r2, r3
 800aa74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aa7e:	f7f6 f903 	bl	8000c88 <__aeabi_uldivmod>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4b0d      	ldr	r3, [pc, #52]	; (800aabc <UART_SetConfig+0x2d4>)
 800aa88:	fba3 1302 	umull	r1, r3, r3, r2
 800aa8c:	095b      	lsrs	r3, r3, #5
 800aa8e:	2164      	movs	r1, #100	; 0x64
 800aa90:	fb01 f303 	mul.w	r3, r1, r3
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	3332      	adds	r3, #50	; 0x32
 800aa9a:	4a08      	ldr	r2, [pc, #32]	; (800aabc <UART_SetConfig+0x2d4>)
 800aa9c:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa0:	095b      	lsrs	r3, r3, #5
 800aaa2:	f003 0207 	and.w	r2, r3, #7
 800aaa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4422      	add	r2, r4
 800aaae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aab0:	e105      	b.n	800acbe <UART_SetConfig+0x4d6>
 800aab2:	bf00      	nop
 800aab4:	40011000 	.word	0x40011000
 800aab8:	40011400 	.word	0x40011400
 800aabc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aac4:	2200      	movs	r2, #0
 800aac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aaca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aace:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aad2:	4642      	mov	r2, r8
 800aad4:	464b      	mov	r3, r9
 800aad6:	1891      	adds	r1, r2, r2
 800aad8:	6239      	str	r1, [r7, #32]
 800aada:	415b      	adcs	r3, r3
 800aadc:	627b      	str	r3, [r7, #36]	; 0x24
 800aade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aae2:	4641      	mov	r1, r8
 800aae4:	1854      	adds	r4, r2, r1
 800aae6:	4649      	mov	r1, r9
 800aae8:	eb43 0501 	adc.w	r5, r3, r1
 800aaec:	f04f 0200 	mov.w	r2, #0
 800aaf0:	f04f 0300 	mov.w	r3, #0
 800aaf4:	00eb      	lsls	r3, r5, #3
 800aaf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aafa:	00e2      	lsls	r2, r4, #3
 800aafc:	4614      	mov	r4, r2
 800aafe:	461d      	mov	r5, r3
 800ab00:	4643      	mov	r3, r8
 800ab02:	18e3      	adds	r3, r4, r3
 800ab04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ab08:	464b      	mov	r3, r9
 800ab0a:	eb45 0303 	adc.w	r3, r5, r3
 800ab0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ab12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ab22:	f04f 0200 	mov.w	r2, #0
 800ab26:	f04f 0300 	mov.w	r3, #0
 800ab2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ab2e:	4629      	mov	r1, r5
 800ab30:	008b      	lsls	r3, r1, #2
 800ab32:	4621      	mov	r1, r4
 800ab34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab38:	4621      	mov	r1, r4
 800ab3a:	008a      	lsls	r2, r1, #2
 800ab3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ab40:	f7f6 f8a2 	bl	8000c88 <__aeabi_uldivmod>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4b60      	ldr	r3, [pc, #384]	; (800accc <UART_SetConfig+0x4e4>)
 800ab4a:	fba3 2302 	umull	r2, r3, r3, r2
 800ab4e:	095b      	lsrs	r3, r3, #5
 800ab50:	011c      	lsls	r4, r3, #4
 800ab52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab56:	2200      	movs	r2, #0
 800ab58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ab60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ab64:	4642      	mov	r2, r8
 800ab66:	464b      	mov	r3, r9
 800ab68:	1891      	adds	r1, r2, r2
 800ab6a:	61b9      	str	r1, [r7, #24]
 800ab6c:	415b      	adcs	r3, r3
 800ab6e:	61fb      	str	r3, [r7, #28]
 800ab70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab74:	4641      	mov	r1, r8
 800ab76:	1851      	adds	r1, r2, r1
 800ab78:	6139      	str	r1, [r7, #16]
 800ab7a:	4649      	mov	r1, r9
 800ab7c:	414b      	adcs	r3, r1
 800ab7e:	617b      	str	r3, [r7, #20]
 800ab80:	f04f 0200 	mov.w	r2, #0
 800ab84:	f04f 0300 	mov.w	r3, #0
 800ab88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ab8c:	4659      	mov	r1, fp
 800ab8e:	00cb      	lsls	r3, r1, #3
 800ab90:	4651      	mov	r1, sl
 800ab92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab96:	4651      	mov	r1, sl
 800ab98:	00ca      	lsls	r2, r1, #3
 800ab9a:	4610      	mov	r0, r2
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	4603      	mov	r3, r0
 800aba0:	4642      	mov	r2, r8
 800aba2:	189b      	adds	r3, r3, r2
 800aba4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aba8:	464b      	mov	r3, r9
 800abaa:	460a      	mov	r2, r1
 800abac:	eb42 0303 	adc.w	r3, r2, r3
 800abb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800abb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	67bb      	str	r3, [r7, #120]	; 0x78
 800abbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 800abc0:	f04f 0200 	mov.w	r2, #0
 800abc4:	f04f 0300 	mov.w	r3, #0
 800abc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800abcc:	4649      	mov	r1, r9
 800abce:	008b      	lsls	r3, r1, #2
 800abd0:	4641      	mov	r1, r8
 800abd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abd6:	4641      	mov	r1, r8
 800abd8:	008a      	lsls	r2, r1, #2
 800abda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800abde:	f7f6 f853 	bl	8000c88 <__aeabi_uldivmod>
 800abe2:	4602      	mov	r2, r0
 800abe4:	460b      	mov	r3, r1
 800abe6:	4b39      	ldr	r3, [pc, #228]	; (800accc <UART_SetConfig+0x4e4>)
 800abe8:	fba3 1302 	umull	r1, r3, r3, r2
 800abec:	095b      	lsrs	r3, r3, #5
 800abee:	2164      	movs	r1, #100	; 0x64
 800abf0:	fb01 f303 	mul.w	r3, r1, r3
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	011b      	lsls	r3, r3, #4
 800abf8:	3332      	adds	r3, #50	; 0x32
 800abfa:	4a34      	ldr	r2, [pc, #208]	; (800accc <UART_SetConfig+0x4e4>)
 800abfc:	fba2 2303 	umull	r2, r3, r2, r3
 800ac00:	095b      	lsrs	r3, r3, #5
 800ac02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac06:	441c      	add	r4, r3
 800ac08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	673b      	str	r3, [r7, #112]	; 0x70
 800ac10:	677a      	str	r2, [r7, #116]	; 0x74
 800ac12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ac16:	4642      	mov	r2, r8
 800ac18:	464b      	mov	r3, r9
 800ac1a:	1891      	adds	r1, r2, r2
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	415b      	adcs	r3, r3
 800ac20:	60fb      	str	r3, [r7, #12]
 800ac22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac26:	4641      	mov	r1, r8
 800ac28:	1851      	adds	r1, r2, r1
 800ac2a:	6039      	str	r1, [r7, #0]
 800ac2c:	4649      	mov	r1, r9
 800ac2e:	414b      	adcs	r3, r1
 800ac30:	607b      	str	r3, [r7, #4]
 800ac32:	f04f 0200 	mov.w	r2, #0
 800ac36:	f04f 0300 	mov.w	r3, #0
 800ac3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ac3e:	4659      	mov	r1, fp
 800ac40:	00cb      	lsls	r3, r1, #3
 800ac42:	4651      	mov	r1, sl
 800ac44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac48:	4651      	mov	r1, sl
 800ac4a:	00ca      	lsls	r2, r1, #3
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	4619      	mov	r1, r3
 800ac50:	4603      	mov	r3, r0
 800ac52:	4642      	mov	r2, r8
 800ac54:	189b      	adds	r3, r3, r2
 800ac56:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac58:	464b      	mov	r3, r9
 800ac5a:	460a      	mov	r2, r1
 800ac5c:	eb42 0303 	adc.w	r3, r2, r3
 800ac60:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	663b      	str	r3, [r7, #96]	; 0x60
 800ac6c:	667a      	str	r2, [r7, #100]	; 0x64
 800ac6e:	f04f 0200 	mov.w	r2, #0
 800ac72:	f04f 0300 	mov.w	r3, #0
 800ac76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	008b      	lsls	r3, r1, #2
 800ac7e:	4641      	mov	r1, r8
 800ac80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac84:	4641      	mov	r1, r8
 800ac86:	008a      	lsls	r2, r1, #2
 800ac88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ac8c:	f7f5 fffc 	bl	8000c88 <__aeabi_uldivmod>
 800ac90:	4602      	mov	r2, r0
 800ac92:	460b      	mov	r3, r1
 800ac94:	4b0d      	ldr	r3, [pc, #52]	; (800accc <UART_SetConfig+0x4e4>)
 800ac96:	fba3 1302 	umull	r1, r3, r3, r2
 800ac9a:	095b      	lsrs	r3, r3, #5
 800ac9c:	2164      	movs	r1, #100	; 0x64
 800ac9e:	fb01 f303 	mul.w	r3, r1, r3
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	011b      	lsls	r3, r3, #4
 800aca6:	3332      	adds	r3, #50	; 0x32
 800aca8:	4a08      	ldr	r2, [pc, #32]	; (800accc <UART_SetConfig+0x4e4>)
 800acaa:	fba2 2303 	umull	r2, r3, r2, r3
 800acae:	095b      	lsrs	r3, r3, #5
 800acb0:	f003 020f 	and.w	r2, r3, #15
 800acb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4422      	add	r2, r4
 800acbc:	609a      	str	r2, [r3, #8]
}
 800acbe:	bf00      	nop
 800acc0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800acc4:	46bd      	mov	sp, r7
 800acc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acca:	bf00      	nop
 800accc:	51eb851f 	.word	0x51eb851f

0800acd0 <__errno>:
 800acd0:	4b01      	ldr	r3, [pc, #4]	; (800acd8 <__errno+0x8>)
 800acd2:	6818      	ldr	r0, [r3, #0]
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	20000060 	.word	0x20000060

0800acdc <__libc_init_array>:
 800acdc:	b570      	push	{r4, r5, r6, lr}
 800acde:	4d0d      	ldr	r5, [pc, #52]	; (800ad14 <__libc_init_array+0x38>)
 800ace0:	4c0d      	ldr	r4, [pc, #52]	; (800ad18 <__libc_init_array+0x3c>)
 800ace2:	1b64      	subs	r4, r4, r5
 800ace4:	10a4      	asrs	r4, r4, #2
 800ace6:	2600      	movs	r6, #0
 800ace8:	42a6      	cmp	r6, r4
 800acea:	d109      	bne.n	800ad00 <__libc_init_array+0x24>
 800acec:	4d0b      	ldr	r5, [pc, #44]	; (800ad1c <__libc_init_array+0x40>)
 800acee:	4c0c      	ldr	r4, [pc, #48]	; (800ad20 <__libc_init_array+0x44>)
 800acf0:	f004 f950 	bl	800ef94 <_init>
 800acf4:	1b64      	subs	r4, r4, r5
 800acf6:	10a4      	asrs	r4, r4, #2
 800acf8:	2600      	movs	r6, #0
 800acfa:	42a6      	cmp	r6, r4
 800acfc:	d105      	bne.n	800ad0a <__libc_init_array+0x2e>
 800acfe:	bd70      	pop	{r4, r5, r6, pc}
 800ad00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad04:	4798      	blx	r3
 800ad06:	3601      	adds	r6, #1
 800ad08:	e7ee      	b.n	800ace8 <__libc_init_array+0xc>
 800ad0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad0e:	4798      	blx	r3
 800ad10:	3601      	adds	r6, #1
 800ad12:	e7f2      	b.n	800acfa <__libc_init_array+0x1e>
 800ad14:	0800f668 	.word	0x0800f668
 800ad18:	0800f668 	.word	0x0800f668
 800ad1c:	0800f668 	.word	0x0800f668
 800ad20:	0800f66c 	.word	0x0800f66c

0800ad24 <memset>:
 800ad24:	4402      	add	r2, r0
 800ad26:	4603      	mov	r3, r0
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d100      	bne.n	800ad2e <memset+0xa>
 800ad2c:	4770      	bx	lr
 800ad2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ad32:	e7f9      	b.n	800ad28 <memset+0x4>

0800ad34 <__cvt>:
 800ad34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad38:	ec55 4b10 	vmov	r4, r5, d0
 800ad3c:	2d00      	cmp	r5, #0
 800ad3e:	460e      	mov	r6, r1
 800ad40:	4619      	mov	r1, r3
 800ad42:	462b      	mov	r3, r5
 800ad44:	bfbb      	ittet	lt
 800ad46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ad4a:	461d      	movlt	r5, r3
 800ad4c:	2300      	movge	r3, #0
 800ad4e:	232d      	movlt	r3, #45	; 0x2d
 800ad50:	700b      	strb	r3, [r1, #0]
 800ad52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ad58:	4691      	mov	r9, r2
 800ad5a:	f023 0820 	bic.w	r8, r3, #32
 800ad5e:	bfbc      	itt	lt
 800ad60:	4622      	movlt	r2, r4
 800ad62:	4614      	movlt	r4, r2
 800ad64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad68:	d005      	beq.n	800ad76 <__cvt+0x42>
 800ad6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ad6e:	d100      	bne.n	800ad72 <__cvt+0x3e>
 800ad70:	3601      	adds	r6, #1
 800ad72:	2102      	movs	r1, #2
 800ad74:	e000      	b.n	800ad78 <__cvt+0x44>
 800ad76:	2103      	movs	r1, #3
 800ad78:	ab03      	add	r3, sp, #12
 800ad7a:	9301      	str	r3, [sp, #4]
 800ad7c:	ab02      	add	r3, sp, #8
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	ec45 4b10 	vmov	d0, r4, r5
 800ad84:	4653      	mov	r3, sl
 800ad86:	4632      	mov	r2, r6
 800ad88:	f000 fcea 	bl	800b760 <_dtoa_r>
 800ad8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ad90:	4607      	mov	r7, r0
 800ad92:	d102      	bne.n	800ad9a <__cvt+0x66>
 800ad94:	f019 0f01 	tst.w	r9, #1
 800ad98:	d022      	beq.n	800ade0 <__cvt+0xac>
 800ad9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad9e:	eb07 0906 	add.w	r9, r7, r6
 800ada2:	d110      	bne.n	800adc6 <__cvt+0x92>
 800ada4:	783b      	ldrb	r3, [r7, #0]
 800ada6:	2b30      	cmp	r3, #48	; 0x30
 800ada8:	d10a      	bne.n	800adc0 <__cvt+0x8c>
 800adaa:	2200      	movs	r2, #0
 800adac:	2300      	movs	r3, #0
 800adae:	4620      	mov	r0, r4
 800adb0:	4629      	mov	r1, r5
 800adb2:	f7f5 fea9 	bl	8000b08 <__aeabi_dcmpeq>
 800adb6:	b918      	cbnz	r0, 800adc0 <__cvt+0x8c>
 800adb8:	f1c6 0601 	rsb	r6, r6, #1
 800adbc:	f8ca 6000 	str.w	r6, [sl]
 800adc0:	f8da 3000 	ldr.w	r3, [sl]
 800adc4:	4499      	add	r9, r3
 800adc6:	2200      	movs	r2, #0
 800adc8:	2300      	movs	r3, #0
 800adca:	4620      	mov	r0, r4
 800adcc:	4629      	mov	r1, r5
 800adce:	f7f5 fe9b 	bl	8000b08 <__aeabi_dcmpeq>
 800add2:	b108      	cbz	r0, 800add8 <__cvt+0xa4>
 800add4:	f8cd 900c 	str.w	r9, [sp, #12]
 800add8:	2230      	movs	r2, #48	; 0x30
 800adda:	9b03      	ldr	r3, [sp, #12]
 800addc:	454b      	cmp	r3, r9
 800adde:	d307      	bcc.n	800adf0 <__cvt+0xbc>
 800ade0:	9b03      	ldr	r3, [sp, #12]
 800ade2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ade4:	1bdb      	subs	r3, r3, r7
 800ade6:	4638      	mov	r0, r7
 800ade8:	6013      	str	r3, [r2, #0]
 800adea:	b004      	add	sp, #16
 800adec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf0:	1c59      	adds	r1, r3, #1
 800adf2:	9103      	str	r1, [sp, #12]
 800adf4:	701a      	strb	r2, [r3, #0]
 800adf6:	e7f0      	b.n	800adda <__cvt+0xa6>

0800adf8 <__exponent>:
 800adf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adfa:	4603      	mov	r3, r0
 800adfc:	2900      	cmp	r1, #0
 800adfe:	bfb8      	it	lt
 800ae00:	4249      	neglt	r1, r1
 800ae02:	f803 2b02 	strb.w	r2, [r3], #2
 800ae06:	bfb4      	ite	lt
 800ae08:	222d      	movlt	r2, #45	; 0x2d
 800ae0a:	222b      	movge	r2, #43	; 0x2b
 800ae0c:	2909      	cmp	r1, #9
 800ae0e:	7042      	strb	r2, [r0, #1]
 800ae10:	dd2a      	ble.n	800ae68 <__exponent+0x70>
 800ae12:	f10d 0407 	add.w	r4, sp, #7
 800ae16:	46a4      	mov	ip, r4
 800ae18:	270a      	movs	r7, #10
 800ae1a:	46a6      	mov	lr, r4
 800ae1c:	460a      	mov	r2, r1
 800ae1e:	fb91 f6f7 	sdiv	r6, r1, r7
 800ae22:	fb07 1516 	mls	r5, r7, r6, r1
 800ae26:	3530      	adds	r5, #48	; 0x30
 800ae28:	2a63      	cmp	r2, #99	; 0x63
 800ae2a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ae2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ae32:	4631      	mov	r1, r6
 800ae34:	dcf1      	bgt.n	800ae1a <__exponent+0x22>
 800ae36:	3130      	adds	r1, #48	; 0x30
 800ae38:	f1ae 0502 	sub.w	r5, lr, #2
 800ae3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ae40:	1c44      	adds	r4, r0, #1
 800ae42:	4629      	mov	r1, r5
 800ae44:	4561      	cmp	r1, ip
 800ae46:	d30a      	bcc.n	800ae5e <__exponent+0x66>
 800ae48:	f10d 0209 	add.w	r2, sp, #9
 800ae4c:	eba2 020e 	sub.w	r2, r2, lr
 800ae50:	4565      	cmp	r5, ip
 800ae52:	bf88      	it	hi
 800ae54:	2200      	movhi	r2, #0
 800ae56:	4413      	add	r3, r2
 800ae58:	1a18      	subs	r0, r3, r0
 800ae5a:	b003      	add	sp, #12
 800ae5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae62:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ae66:	e7ed      	b.n	800ae44 <__exponent+0x4c>
 800ae68:	2330      	movs	r3, #48	; 0x30
 800ae6a:	3130      	adds	r1, #48	; 0x30
 800ae6c:	7083      	strb	r3, [r0, #2]
 800ae6e:	70c1      	strb	r1, [r0, #3]
 800ae70:	1d03      	adds	r3, r0, #4
 800ae72:	e7f1      	b.n	800ae58 <__exponent+0x60>

0800ae74 <_printf_float>:
 800ae74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae78:	ed2d 8b02 	vpush	{d8}
 800ae7c:	b08d      	sub	sp, #52	; 0x34
 800ae7e:	460c      	mov	r4, r1
 800ae80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ae84:	4616      	mov	r6, r2
 800ae86:	461f      	mov	r7, r3
 800ae88:	4605      	mov	r5, r0
 800ae8a:	f001 fa57 	bl	800c33c <_localeconv_r>
 800ae8e:	f8d0 a000 	ldr.w	sl, [r0]
 800ae92:	4650      	mov	r0, sl
 800ae94:	f7f5 f9bc 	bl	8000210 <strlen>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	930a      	str	r3, [sp, #40]	; 0x28
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	9305      	str	r3, [sp, #20]
 800aea0:	f8d8 3000 	ldr.w	r3, [r8]
 800aea4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aea8:	3307      	adds	r3, #7
 800aeaa:	f023 0307 	bic.w	r3, r3, #7
 800aeae:	f103 0208 	add.w	r2, r3, #8
 800aeb2:	f8c8 2000 	str.w	r2, [r8]
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aebe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aec2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aec6:	9307      	str	r3, [sp, #28]
 800aec8:	f8cd 8018 	str.w	r8, [sp, #24]
 800aecc:	ee08 0a10 	vmov	s16, r0
 800aed0:	4b9f      	ldr	r3, [pc, #636]	; (800b150 <_printf_float+0x2dc>)
 800aed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aed6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeda:	f7f5 fe47 	bl	8000b6c <__aeabi_dcmpun>
 800aede:	bb88      	cbnz	r0, 800af44 <_printf_float+0xd0>
 800aee0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aee4:	4b9a      	ldr	r3, [pc, #616]	; (800b150 <_printf_float+0x2dc>)
 800aee6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeea:	f7f5 fe21 	bl	8000b30 <__aeabi_dcmple>
 800aeee:	bb48      	cbnz	r0, 800af44 <_printf_float+0xd0>
 800aef0:	2200      	movs	r2, #0
 800aef2:	2300      	movs	r3, #0
 800aef4:	4640      	mov	r0, r8
 800aef6:	4649      	mov	r1, r9
 800aef8:	f7f5 fe10 	bl	8000b1c <__aeabi_dcmplt>
 800aefc:	b110      	cbz	r0, 800af04 <_printf_float+0x90>
 800aefe:	232d      	movs	r3, #45	; 0x2d
 800af00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af04:	4b93      	ldr	r3, [pc, #588]	; (800b154 <_printf_float+0x2e0>)
 800af06:	4894      	ldr	r0, [pc, #592]	; (800b158 <_printf_float+0x2e4>)
 800af08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800af0c:	bf94      	ite	ls
 800af0e:	4698      	movls	r8, r3
 800af10:	4680      	movhi	r8, r0
 800af12:	2303      	movs	r3, #3
 800af14:	6123      	str	r3, [r4, #16]
 800af16:	9b05      	ldr	r3, [sp, #20]
 800af18:	f023 0204 	bic.w	r2, r3, #4
 800af1c:	6022      	str	r2, [r4, #0]
 800af1e:	f04f 0900 	mov.w	r9, #0
 800af22:	9700      	str	r7, [sp, #0]
 800af24:	4633      	mov	r3, r6
 800af26:	aa0b      	add	r2, sp, #44	; 0x2c
 800af28:	4621      	mov	r1, r4
 800af2a:	4628      	mov	r0, r5
 800af2c:	f000 f9d8 	bl	800b2e0 <_printf_common>
 800af30:	3001      	adds	r0, #1
 800af32:	f040 8090 	bne.w	800b056 <_printf_float+0x1e2>
 800af36:	f04f 30ff 	mov.w	r0, #4294967295
 800af3a:	b00d      	add	sp, #52	; 0x34
 800af3c:	ecbd 8b02 	vpop	{d8}
 800af40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af44:	4642      	mov	r2, r8
 800af46:	464b      	mov	r3, r9
 800af48:	4640      	mov	r0, r8
 800af4a:	4649      	mov	r1, r9
 800af4c:	f7f5 fe0e 	bl	8000b6c <__aeabi_dcmpun>
 800af50:	b140      	cbz	r0, 800af64 <_printf_float+0xf0>
 800af52:	464b      	mov	r3, r9
 800af54:	2b00      	cmp	r3, #0
 800af56:	bfbc      	itt	lt
 800af58:	232d      	movlt	r3, #45	; 0x2d
 800af5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800af5e:	487f      	ldr	r0, [pc, #508]	; (800b15c <_printf_float+0x2e8>)
 800af60:	4b7f      	ldr	r3, [pc, #508]	; (800b160 <_printf_float+0x2ec>)
 800af62:	e7d1      	b.n	800af08 <_printf_float+0x94>
 800af64:	6863      	ldr	r3, [r4, #4]
 800af66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800af6a:	9206      	str	r2, [sp, #24]
 800af6c:	1c5a      	adds	r2, r3, #1
 800af6e:	d13f      	bne.n	800aff0 <_printf_float+0x17c>
 800af70:	2306      	movs	r3, #6
 800af72:	6063      	str	r3, [r4, #4]
 800af74:	9b05      	ldr	r3, [sp, #20]
 800af76:	6861      	ldr	r1, [r4, #4]
 800af78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800af7c:	2300      	movs	r3, #0
 800af7e:	9303      	str	r3, [sp, #12]
 800af80:	ab0a      	add	r3, sp, #40	; 0x28
 800af82:	e9cd b301 	strd	fp, r3, [sp, #4]
 800af86:	ab09      	add	r3, sp, #36	; 0x24
 800af88:	ec49 8b10 	vmov	d0, r8, r9
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	6022      	str	r2, [r4, #0]
 800af90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af94:	4628      	mov	r0, r5
 800af96:	f7ff fecd 	bl	800ad34 <__cvt>
 800af9a:	9b06      	ldr	r3, [sp, #24]
 800af9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af9e:	2b47      	cmp	r3, #71	; 0x47
 800afa0:	4680      	mov	r8, r0
 800afa2:	d108      	bne.n	800afb6 <_printf_float+0x142>
 800afa4:	1cc8      	adds	r0, r1, #3
 800afa6:	db02      	blt.n	800afae <_printf_float+0x13a>
 800afa8:	6863      	ldr	r3, [r4, #4]
 800afaa:	4299      	cmp	r1, r3
 800afac:	dd41      	ble.n	800b032 <_printf_float+0x1be>
 800afae:	f1ab 0b02 	sub.w	fp, fp, #2
 800afb2:	fa5f fb8b 	uxtb.w	fp, fp
 800afb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800afba:	d820      	bhi.n	800affe <_printf_float+0x18a>
 800afbc:	3901      	subs	r1, #1
 800afbe:	465a      	mov	r2, fp
 800afc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800afc4:	9109      	str	r1, [sp, #36]	; 0x24
 800afc6:	f7ff ff17 	bl	800adf8 <__exponent>
 800afca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afcc:	1813      	adds	r3, r2, r0
 800afce:	2a01      	cmp	r2, #1
 800afd0:	4681      	mov	r9, r0
 800afd2:	6123      	str	r3, [r4, #16]
 800afd4:	dc02      	bgt.n	800afdc <_printf_float+0x168>
 800afd6:	6822      	ldr	r2, [r4, #0]
 800afd8:	07d2      	lsls	r2, r2, #31
 800afda:	d501      	bpl.n	800afe0 <_printf_float+0x16c>
 800afdc:	3301      	adds	r3, #1
 800afde:	6123      	str	r3, [r4, #16]
 800afe0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d09c      	beq.n	800af22 <_printf_float+0xae>
 800afe8:	232d      	movs	r3, #45	; 0x2d
 800afea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afee:	e798      	b.n	800af22 <_printf_float+0xae>
 800aff0:	9a06      	ldr	r2, [sp, #24]
 800aff2:	2a47      	cmp	r2, #71	; 0x47
 800aff4:	d1be      	bne.n	800af74 <_printf_float+0x100>
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d1bc      	bne.n	800af74 <_printf_float+0x100>
 800affa:	2301      	movs	r3, #1
 800affc:	e7b9      	b.n	800af72 <_printf_float+0xfe>
 800affe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b002:	d118      	bne.n	800b036 <_printf_float+0x1c2>
 800b004:	2900      	cmp	r1, #0
 800b006:	6863      	ldr	r3, [r4, #4]
 800b008:	dd0b      	ble.n	800b022 <_printf_float+0x1ae>
 800b00a:	6121      	str	r1, [r4, #16]
 800b00c:	b913      	cbnz	r3, 800b014 <_printf_float+0x1a0>
 800b00e:	6822      	ldr	r2, [r4, #0]
 800b010:	07d0      	lsls	r0, r2, #31
 800b012:	d502      	bpl.n	800b01a <_printf_float+0x1a6>
 800b014:	3301      	adds	r3, #1
 800b016:	440b      	add	r3, r1
 800b018:	6123      	str	r3, [r4, #16]
 800b01a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b01c:	f04f 0900 	mov.w	r9, #0
 800b020:	e7de      	b.n	800afe0 <_printf_float+0x16c>
 800b022:	b913      	cbnz	r3, 800b02a <_printf_float+0x1b6>
 800b024:	6822      	ldr	r2, [r4, #0]
 800b026:	07d2      	lsls	r2, r2, #31
 800b028:	d501      	bpl.n	800b02e <_printf_float+0x1ba>
 800b02a:	3302      	adds	r3, #2
 800b02c:	e7f4      	b.n	800b018 <_printf_float+0x1a4>
 800b02e:	2301      	movs	r3, #1
 800b030:	e7f2      	b.n	800b018 <_printf_float+0x1a4>
 800b032:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b038:	4299      	cmp	r1, r3
 800b03a:	db05      	blt.n	800b048 <_printf_float+0x1d4>
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	6121      	str	r1, [r4, #16]
 800b040:	07d8      	lsls	r0, r3, #31
 800b042:	d5ea      	bpl.n	800b01a <_printf_float+0x1a6>
 800b044:	1c4b      	adds	r3, r1, #1
 800b046:	e7e7      	b.n	800b018 <_printf_float+0x1a4>
 800b048:	2900      	cmp	r1, #0
 800b04a:	bfd4      	ite	le
 800b04c:	f1c1 0202 	rsble	r2, r1, #2
 800b050:	2201      	movgt	r2, #1
 800b052:	4413      	add	r3, r2
 800b054:	e7e0      	b.n	800b018 <_printf_float+0x1a4>
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	055a      	lsls	r2, r3, #21
 800b05a:	d407      	bmi.n	800b06c <_printf_float+0x1f8>
 800b05c:	6923      	ldr	r3, [r4, #16]
 800b05e:	4642      	mov	r2, r8
 800b060:	4631      	mov	r1, r6
 800b062:	4628      	mov	r0, r5
 800b064:	47b8      	blx	r7
 800b066:	3001      	adds	r0, #1
 800b068:	d12c      	bne.n	800b0c4 <_printf_float+0x250>
 800b06a:	e764      	b.n	800af36 <_printf_float+0xc2>
 800b06c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b070:	f240 80e0 	bls.w	800b234 <_printf_float+0x3c0>
 800b074:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b078:	2200      	movs	r2, #0
 800b07a:	2300      	movs	r3, #0
 800b07c:	f7f5 fd44 	bl	8000b08 <__aeabi_dcmpeq>
 800b080:	2800      	cmp	r0, #0
 800b082:	d034      	beq.n	800b0ee <_printf_float+0x27a>
 800b084:	4a37      	ldr	r2, [pc, #220]	; (800b164 <_printf_float+0x2f0>)
 800b086:	2301      	movs	r3, #1
 800b088:	4631      	mov	r1, r6
 800b08a:	4628      	mov	r0, r5
 800b08c:	47b8      	blx	r7
 800b08e:	3001      	adds	r0, #1
 800b090:	f43f af51 	beq.w	800af36 <_printf_float+0xc2>
 800b094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b098:	429a      	cmp	r2, r3
 800b09a:	db02      	blt.n	800b0a2 <_printf_float+0x22e>
 800b09c:	6823      	ldr	r3, [r4, #0]
 800b09e:	07d8      	lsls	r0, r3, #31
 800b0a0:	d510      	bpl.n	800b0c4 <_printf_float+0x250>
 800b0a2:	ee18 3a10 	vmov	r3, s16
 800b0a6:	4652      	mov	r2, sl
 800b0a8:	4631      	mov	r1, r6
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	47b8      	blx	r7
 800b0ae:	3001      	adds	r0, #1
 800b0b0:	f43f af41 	beq.w	800af36 <_printf_float+0xc2>
 800b0b4:	f04f 0800 	mov.w	r8, #0
 800b0b8:	f104 091a 	add.w	r9, r4, #26
 800b0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	4543      	cmp	r3, r8
 800b0c2:	dc09      	bgt.n	800b0d8 <_printf_float+0x264>
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	079b      	lsls	r3, r3, #30
 800b0c8:	f100 8105 	bmi.w	800b2d6 <_printf_float+0x462>
 800b0cc:	68e0      	ldr	r0, [r4, #12]
 800b0ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0d0:	4298      	cmp	r0, r3
 800b0d2:	bfb8      	it	lt
 800b0d4:	4618      	movlt	r0, r3
 800b0d6:	e730      	b.n	800af3a <_printf_float+0xc6>
 800b0d8:	2301      	movs	r3, #1
 800b0da:	464a      	mov	r2, r9
 800b0dc:	4631      	mov	r1, r6
 800b0de:	4628      	mov	r0, r5
 800b0e0:	47b8      	blx	r7
 800b0e2:	3001      	adds	r0, #1
 800b0e4:	f43f af27 	beq.w	800af36 <_printf_float+0xc2>
 800b0e8:	f108 0801 	add.w	r8, r8, #1
 800b0ec:	e7e6      	b.n	800b0bc <_printf_float+0x248>
 800b0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	dc39      	bgt.n	800b168 <_printf_float+0x2f4>
 800b0f4:	4a1b      	ldr	r2, [pc, #108]	; (800b164 <_printf_float+0x2f0>)
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	4631      	mov	r1, r6
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	47b8      	blx	r7
 800b0fe:	3001      	adds	r0, #1
 800b100:	f43f af19 	beq.w	800af36 <_printf_float+0xc2>
 800b104:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b108:	4313      	orrs	r3, r2
 800b10a:	d102      	bne.n	800b112 <_printf_float+0x29e>
 800b10c:	6823      	ldr	r3, [r4, #0]
 800b10e:	07d9      	lsls	r1, r3, #31
 800b110:	d5d8      	bpl.n	800b0c4 <_printf_float+0x250>
 800b112:	ee18 3a10 	vmov	r3, s16
 800b116:	4652      	mov	r2, sl
 800b118:	4631      	mov	r1, r6
 800b11a:	4628      	mov	r0, r5
 800b11c:	47b8      	blx	r7
 800b11e:	3001      	adds	r0, #1
 800b120:	f43f af09 	beq.w	800af36 <_printf_float+0xc2>
 800b124:	f04f 0900 	mov.w	r9, #0
 800b128:	f104 0a1a 	add.w	sl, r4, #26
 800b12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b12e:	425b      	negs	r3, r3
 800b130:	454b      	cmp	r3, r9
 800b132:	dc01      	bgt.n	800b138 <_printf_float+0x2c4>
 800b134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b136:	e792      	b.n	800b05e <_printf_float+0x1ea>
 800b138:	2301      	movs	r3, #1
 800b13a:	4652      	mov	r2, sl
 800b13c:	4631      	mov	r1, r6
 800b13e:	4628      	mov	r0, r5
 800b140:	47b8      	blx	r7
 800b142:	3001      	adds	r0, #1
 800b144:	f43f aef7 	beq.w	800af36 <_printf_float+0xc2>
 800b148:	f109 0901 	add.w	r9, r9, #1
 800b14c:	e7ee      	b.n	800b12c <_printf_float+0x2b8>
 800b14e:	bf00      	nop
 800b150:	7fefffff 	.word	0x7fefffff
 800b154:	0800f06c 	.word	0x0800f06c
 800b158:	0800f070 	.word	0x0800f070
 800b15c:	0800f078 	.word	0x0800f078
 800b160:	0800f074 	.word	0x0800f074
 800b164:	0800f07c 	.word	0x0800f07c
 800b168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b16a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b16c:	429a      	cmp	r2, r3
 800b16e:	bfa8      	it	ge
 800b170:	461a      	movge	r2, r3
 800b172:	2a00      	cmp	r2, #0
 800b174:	4691      	mov	r9, r2
 800b176:	dc37      	bgt.n	800b1e8 <_printf_float+0x374>
 800b178:	f04f 0b00 	mov.w	fp, #0
 800b17c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b180:	f104 021a 	add.w	r2, r4, #26
 800b184:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b186:	9305      	str	r3, [sp, #20]
 800b188:	eba3 0309 	sub.w	r3, r3, r9
 800b18c:	455b      	cmp	r3, fp
 800b18e:	dc33      	bgt.n	800b1f8 <_printf_float+0x384>
 800b190:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b194:	429a      	cmp	r2, r3
 800b196:	db3b      	blt.n	800b210 <_printf_float+0x39c>
 800b198:	6823      	ldr	r3, [r4, #0]
 800b19a:	07da      	lsls	r2, r3, #31
 800b19c:	d438      	bmi.n	800b210 <_printf_float+0x39c>
 800b19e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1a0:	9a05      	ldr	r2, [sp, #20]
 800b1a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1a4:	1a9a      	subs	r2, r3, r2
 800b1a6:	eba3 0901 	sub.w	r9, r3, r1
 800b1aa:	4591      	cmp	r9, r2
 800b1ac:	bfa8      	it	ge
 800b1ae:	4691      	movge	r9, r2
 800b1b0:	f1b9 0f00 	cmp.w	r9, #0
 800b1b4:	dc35      	bgt.n	800b222 <_printf_float+0x3ae>
 800b1b6:	f04f 0800 	mov.w	r8, #0
 800b1ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1be:	f104 0a1a 	add.w	sl, r4, #26
 800b1c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1c6:	1a9b      	subs	r3, r3, r2
 800b1c8:	eba3 0309 	sub.w	r3, r3, r9
 800b1cc:	4543      	cmp	r3, r8
 800b1ce:	f77f af79 	ble.w	800b0c4 <_printf_float+0x250>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	4652      	mov	r2, sl
 800b1d6:	4631      	mov	r1, r6
 800b1d8:	4628      	mov	r0, r5
 800b1da:	47b8      	blx	r7
 800b1dc:	3001      	adds	r0, #1
 800b1de:	f43f aeaa 	beq.w	800af36 <_printf_float+0xc2>
 800b1e2:	f108 0801 	add.w	r8, r8, #1
 800b1e6:	e7ec      	b.n	800b1c2 <_printf_float+0x34e>
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	4631      	mov	r1, r6
 800b1ec:	4642      	mov	r2, r8
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	47b8      	blx	r7
 800b1f2:	3001      	adds	r0, #1
 800b1f4:	d1c0      	bne.n	800b178 <_printf_float+0x304>
 800b1f6:	e69e      	b.n	800af36 <_printf_float+0xc2>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	4631      	mov	r1, r6
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	9205      	str	r2, [sp, #20]
 800b200:	47b8      	blx	r7
 800b202:	3001      	adds	r0, #1
 800b204:	f43f ae97 	beq.w	800af36 <_printf_float+0xc2>
 800b208:	9a05      	ldr	r2, [sp, #20]
 800b20a:	f10b 0b01 	add.w	fp, fp, #1
 800b20e:	e7b9      	b.n	800b184 <_printf_float+0x310>
 800b210:	ee18 3a10 	vmov	r3, s16
 800b214:	4652      	mov	r2, sl
 800b216:	4631      	mov	r1, r6
 800b218:	4628      	mov	r0, r5
 800b21a:	47b8      	blx	r7
 800b21c:	3001      	adds	r0, #1
 800b21e:	d1be      	bne.n	800b19e <_printf_float+0x32a>
 800b220:	e689      	b.n	800af36 <_printf_float+0xc2>
 800b222:	9a05      	ldr	r2, [sp, #20]
 800b224:	464b      	mov	r3, r9
 800b226:	4442      	add	r2, r8
 800b228:	4631      	mov	r1, r6
 800b22a:	4628      	mov	r0, r5
 800b22c:	47b8      	blx	r7
 800b22e:	3001      	adds	r0, #1
 800b230:	d1c1      	bne.n	800b1b6 <_printf_float+0x342>
 800b232:	e680      	b.n	800af36 <_printf_float+0xc2>
 800b234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b236:	2a01      	cmp	r2, #1
 800b238:	dc01      	bgt.n	800b23e <_printf_float+0x3ca>
 800b23a:	07db      	lsls	r3, r3, #31
 800b23c:	d538      	bpl.n	800b2b0 <_printf_float+0x43c>
 800b23e:	2301      	movs	r3, #1
 800b240:	4642      	mov	r2, r8
 800b242:	4631      	mov	r1, r6
 800b244:	4628      	mov	r0, r5
 800b246:	47b8      	blx	r7
 800b248:	3001      	adds	r0, #1
 800b24a:	f43f ae74 	beq.w	800af36 <_printf_float+0xc2>
 800b24e:	ee18 3a10 	vmov	r3, s16
 800b252:	4652      	mov	r2, sl
 800b254:	4631      	mov	r1, r6
 800b256:	4628      	mov	r0, r5
 800b258:	47b8      	blx	r7
 800b25a:	3001      	adds	r0, #1
 800b25c:	f43f ae6b 	beq.w	800af36 <_printf_float+0xc2>
 800b260:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b264:	2200      	movs	r2, #0
 800b266:	2300      	movs	r3, #0
 800b268:	f7f5 fc4e 	bl	8000b08 <__aeabi_dcmpeq>
 800b26c:	b9d8      	cbnz	r0, 800b2a6 <_printf_float+0x432>
 800b26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b270:	f108 0201 	add.w	r2, r8, #1
 800b274:	3b01      	subs	r3, #1
 800b276:	4631      	mov	r1, r6
 800b278:	4628      	mov	r0, r5
 800b27a:	47b8      	blx	r7
 800b27c:	3001      	adds	r0, #1
 800b27e:	d10e      	bne.n	800b29e <_printf_float+0x42a>
 800b280:	e659      	b.n	800af36 <_printf_float+0xc2>
 800b282:	2301      	movs	r3, #1
 800b284:	4652      	mov	r2, sl
 800b286:	4631      	mov	r1, r6
 800b288:	4628      	mov	r0, r5
 800b28a:	47b8      	blx	r7
 800b28c:	3001      	adds	r0, #1
 800b28e:	f43f ae52 	beq.w	800af36 <_printf_float+0xc2>
 800b292:	f108 0801 	add.w	r8, r8, #1
 800b296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b298:	3b01      	subs	r3, #1
 800b29a:	4543      	cmp	r3, r8
 800b29c:	dcf1      	bgt.n	800b282 <_printf_float+0x40e>
 800b29e:	464b      	mov	r3, r9
 800b2a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b2a4:	e6dc      	b.n	800b060 <_printf_float+0x1ec>
 800b2a6:	f04f 0800 	mov.w	r8, #0
 800b2aa:	f104 0a1a 	add.w	sl, r4, #26
 800b2ae:	e7f2      	b.n	800b296 <_printf_float+0x422>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	4642      	mov	r2, r8
 800b2b4:	e7df      	b.n	800b276 <_printf_float+0x402>
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	464a      	mov	r2, r9
 800b2ba:	4631      	mov	r1, r6
 800b2bc:	4628      	mov	r0, r5
 800b2be:	47b8      	blx	r7
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	f43f ae38 	beq.w	800af36 <_printf_float+0xc2>
 800b2c6:	f108 0801 	add.w	r8, r8, #1
 800b2ca:	68e3      	ldr	r3, [r4, #12]
 800b2cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2ce:	1a5b      	subs	r3, r3, r1
 800b2d0:	4543      	cmp	r3, r8
 800b2d2:	dcf0      	bgt.n	800b2b6 <_printf_float+0x442>
 800b2d4:	e6fa      	b.n	800b0cc <_printf_float+0x258>
 800b2d6:	f04f 0800 	mov.w	r8, #0
 800b2da:	f104 0919 	add.w	r9, r4, #25
 800b2de:	e7f4      	b.n	800b2ca <_printf_float+0x456>

0800b2e0 <_printf_common>:
 800b2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2e4:	4616      	mov	r6, r2
 800b2e6:	4699      	mov	r9, r3
 800b2e8:	688a      	ldr	r2, [r1, #8]
 800b2ea:	690b      	ldr	r3, [r1, #16]
 800b2ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	bfb8      	it	lt
 800b2f4:	4613      	movlt	r3, r2
 800b2f6:	6033      	str	r3, [r6, #0]
 800b2f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2fc:	4607      	mov	r7, r0
 800b2fe:	460c      	mov	r4, r1
 800b300:	b10a      	cbz	r2, 800b306 <_printf_common+0x26>
 800b302:	3301      	adds	r3, #1
 800b304:	6033      	str	r3, [r6, #0]
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	0699      	lsls	r1, r3, #26
 800b30a:	bf42      	ittt	mi
 800b30c:	6833      	ldrmi	r3, [r6, #0]
 800b30e:	3302      	addmi	r3, #2
 800b310:	6033      	strmi	r3, [r6, #0]
 800b312:	6825      	ldr	r5, [r4, #0]
 800b314:	f015 0506 	ands.w	r5, r5, #6
 800b318:	d106      	bne.n	800b328 <_printf_common+0x48>
 800b31a:	f104 0a19 	add.w	sl, r4, #25
 800b31e:	68e3      	ldr	r3, [r4, #12]
 800b320:	6832      	ldr	r2, [r6, #0]
 800b322:	1a9b      	subs	r3, r3, r2
 800b324:	42ab      	cmp	r3, r5
 800b326:	dc26      	bgt.n	800b376 <_printf_common+0x96>
 800b328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b32c:	1e13      	subs	r3, r2, #0
 800b32e:	6822      	ldr	r2, [r4, #0]
 800b330:	bf18      	it	ne
 800b332:	2301      	movne	r3, #1
 800b334:	0692      	lsls	r2, r2, #26
 800b336:	d42b      	bmi.n	800b390 <_printf_common+0xb0>
 800b338:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b33c:	4649      	mov	r1, r9
 800b33e:	4638      	mov	r0, r7
 800b340:	47c0      	blx	r8
 800b342:	3001      	adds	r0, #1
 800b344:	d01e      	beq.n	800b384 <_printf_common+0xa4>
 800b346:	6823      	ldr	r3, [r4, #0]
 800b348:	68e5      	ldr	r5, [r4, #12]
 800b34a:	6832      	ldr	r2, [r6, #0]
 800b34c:	f003 0306 	and.w	r3, r3, #6
 800b350:	2b04      	cmp	r3, #4
 800b352:	bf08      	it	eq
 800b354:	1aad      	subeq	r5, r5, r2
 800b356:	68a3      	ldr	r3, [r4, #8]
 800b358:	6922      	ldr	r2, [r4, #16]
 800b35a:	bf0c      	ite	eq
 800b35c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b360:	2500      	movne	r5, #0
 800b362:	4293      	cmp	r3, r2
 800b364:	bfc4      	itt	gt
 800b366:	1a9b      	subgt	r3, r3, r2
 800b368:	18ed      	addgt	r5, r5, r3
 800b36a:	2600      	movs	r6, #0
 800b36c:	341a      	adds	r4, #26
 800b36e:	42b5      	cmp	r5, r6
 800b370:	d11a      	bne.n	800b3a8 <_printf_common+0xc8>
 800b372:	2000      	movs	r0, #0
 800b374:	e008      	b.n	800b388 <_printf_common+0xa8>
 800b376:	2301      	movs	r3, #1
 800b378:	4652      	mov	r2, sl
 800b37a:	4649      	mov	r1, r9
 800b37c:	4638      	mov	r0, r7
 800b37e:	47c0      	blx	r8
 800b380:	3001      	adds	r0, #1
 800b382:	d103      	bne.n	800b38c <_printf_common+0xac>
 800b384:	f04f 30ff 	mov.w	r0, #4294967295
 800b388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b38c:	3501      	adds	r5, #1
 800b38e:	e7c6      	b.n	800b31e <_printf_common+0x3e>
 800b390:	18e1      	adds	r1, r4, r3
 800b392:	1c5a      	adds	r2, r3, #1
 800b394:	2030      	movs	r0, #48	; 0x30
 800b396:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b39a:	4422      	add	r2, r4
 800b39c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3a4:	3302      	adds	r3, #2
 800b3a6:	e7c7      	b.n	800b338 <_printf_common+0x58>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	4622      	mov	r2, r4
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	4638      	mov	r0, r7
 800b3b0:	47c0      	blx	r8
 800b3b2:	3001      	adds	r0, #1
 800b3b4:	d0e6      	beq.n	800b384 <_printf_common+0xa4>
 800b3b6:	3601      	adds	r6, #1
 800b3b8:	e7d9      	b.n	800b36e <_printf_common+0x8e>
	...

0800b3bc <_printf_i>:
 800b3bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3c0:	7e0f      	ldrb	r7, [r1, #24]
 800b3c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b3c4:	2f78      	cmp	r7, #120	; 0x78
 800b3c6:	4691      	mov	r9, r2
 800b3c8:	4680      	mov	r8, r0
 800b3ca:	460c      	mov	r4, r1
 800b3cc:	469a      	mov	sl, r3
 800b3ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b3d2:	d807      	bhi.n	800b3e4 <_printf_i+0x28>
 800b3d4:	2f62      	cmp	r7, #98	; 0x62
 800b3d6:	d80a      	bhi.n	800b3ee <_printf_i+0x32>
 800b3d8:	2f00      	cmp	r7, #0
 800b3da:	f000 80d8 	beq.w	800b58e <_printf_i+0x1d2>
 800b3de:	2f58      	cmp	r7, #88	; 0x58
 800b3e0:	f000 80a3 	beq.w	800b52a <_printf_i+0x16e>
 800b3e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b3ec:	e03a      	b.n	800b464 <_printf_i+0xa8>
 800b3ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b3f2:	2b15      	cmp	r3, #21
 800b3f4:	d8f6      	bhi.n	800b3e4 <_printf_i+0x28>
 800b3f6:	a101      	add	r1, pc, #4	; (adr r1, 800b3fc <_printf_i+0x40>)
 800b3f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3fc:	0800b455 	.word	0x0800b455
 800b400:	0800b469 	.word	0x0800b469
 800b404:	0800b3e5 	.word	0x0800b3e5
 800b408:	0800b3e5 	.word	0x0800b3e5
 800b40c:	0800b3e5 	.word	0x0800b3e5
 800b410:	0800b3e5 	.word	0x0800b3e5
 800b414:	0800b469 	.word	0x0800b469
 800b418:	0800b3e5 	.word	0x0800b3e5
 800b41c:	0800b3e5 	.word	0x0800b3e5
 800b420:	0800b3e5 	.word	0x0800b3e5
 800b424:	0800b3e5 	.word	0x0800b3e5
 800b428:	0800b575 	.word	0x0800b575
 800b42c:	0800b499 	.word	0x0800b499
 800b430:	0800b557 	.word	0x0800b557
 800b434:	0800b3e5 	.word	0x0800b3e5
 800b438:	0800b3e5 	.word	0x0800b3e5
 800b43c:	0800b597 	.word	0x0800b597
 800b440:	0800b3e5 	.word	0x0800b3e5
 800b444:	0800b499 	.word	0x0800b499
 800b448:	0800b3e5 	.word	0x0800b3e5
 800b44c:	0800b3e5 	.word	0x0800b3e5
 800b450:	0800b55f 	.word	0x0800b55f
 800b454:	682b      	ldr	r3, [r5, #0]
 800b456:	1d1a      	adds	r2, r3, #4
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	602a      	str	r2, [r5, #0]
 800b45c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b464:	2301      	movs	r3, #1
 800b466:	e0a3      	b.n	800b5b0 <_printf_i+0x1f4>
 800b468:	6820      	ldr	r0, [r4, #0]
 800b46a:	6829      	ldr	r1, [r5, #0]
 800b46c:	0606      	lsls	r6, r0, #24
 800b46e:	f101 0304 	add.w	r3, r1, #4
 800b472:	d50a      	bpl.n	800b48a <_printf_i+0xce>
 800b474:	680e      	ldr	r6, [r1, #0]
 800b476:	602b      	str	r3, [r5, #0]
 800b478:	2e00      	cmp	r6, #0
 800b47a:	da03      	bge.n	800b484 <_printf_i+0xc8>
 800b47c:	232d      	movs	r3, #45	; 0x2d
 800b47e:	4276      	negs	r6, r6
 800b480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b484:	485e      	ldr	r0, [pc, #376]	; (800b600 <_printf_i+0x244>)
 800b486:	230a      	movs	r3, #10
 800b488:	e019      	b.n	800b4be <_printf_i+0x102>
 800b48a:	680e      	ldr	r6, [r1, #0]
 800b48c:	602b      	str	r3, [r5, #0]
 800b48e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b492:	bf18      	it	ne
 800b494:	b236      	sxthne	r6, r6
 800b496:	e7ef      	b.n	800b478 <_printf_i+0xbc>
 800b498:	682b      	ldr	r3, [r5, #0]
 800b49a:	6820      	ldr	r0, [r4, #0]
 800b49c:	1d19      	adds	r1, r3, #4
 800b49e:	6029      	str	r1, [r5, #0]
 800b4a0:	0601      	lsls	r1, r0, #24
 800b4a2:	d501      	bpl.n	800b4a8 <_printf_i+0xec>
 800b4a4:	681e      	ldr	r6, [r3, #0]
 800b4a6:	e002      	b.n	800b4ae <_printf_i+0xf2>
 800b4a8:	0646      	lsls	r6, r0, #25
 800b4aa:	d5fb      	bpl.n	800b4a4 <_printf_i+0xe8>
 800b4ac:	881e      	ldrh	r6, [r3, #0]
 800b4ae:	4854      	ldr	r0, [pc, #336]	; (800b600 <_printf_i+0x244>)
 800b4b0:	2f6f      	cmp	r7, #111	; 0x6f
 800b4b2:	bf0c      	ite	eq
 800b4b4:	2308      	moveq	r3, #8
 800b4b6:	230a      	movne	r3, #10
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4be:	6865      	ldr	r5, [r4, #4]
 800b4c0:	60a5      	str	r5, [r4, #8]
 800b4c2:	2d00      	cmp	r5, #0
 800b4c4:	bfa2      	ittt	ge
 800b4c6:	6821      	ldrge	r1, [r4, #0]
 800b4c8:	f021 0104 	bicge.w	r1, r1, #4
 800b4cc:	6021      	strge	r1, [r4, #0]
 800b4ce:	b90e      	cbnz	r6, 800b4d4 <_printf_i+0x118>
 800b4d0:	2d00      	cmp	r5, #0
 800b4d2:	d04d      	beq.n	800b570 <_printf_i+0x1b4>
 800b4d4:	4615      	mov	r5, r2
 800b4d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b4da:	fb03 6711 	mls	r7, r3, r1, r6
 800b4de:	5dc7      	ldrb	r7, [r0, r7]
 800b4e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b4e4:	4637      	mov	r7, r6
 800b4e6:	42bb      	cmp	r3, r7
 800b4e8:	460e      	mov	r6, r1
 800b4ea:	d9f4      	bls.n	800b4d6 <_printf_i+0x11a>
 800b4ec:	2b08      	cmp	r3, #8
 800b4ee:	d10b      	bne.n	800b508 <_printf_i+0x14c>
 800b4f0:	6823      	ldr	r3, [r4, #0]
 800b4f2:	07de      	lsls	r6, r3, #31
 800b4f4:	d508      	bpl.n	800b508 <_printf_i+0x14c>
 800b4f6:	6923      	ldr	r3, [r4, #16]
 800b4f8:	6861      	ldr	r1, [r4, #4]
 800b4fa:	4299      	cmp	r1, r3
 800b4fc:	bfde      	ittt	le
 800b4fe:	2330      	movle	r3, #48	; 0x30
 800b500:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b504:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b508:	1b52      	subs	r2, r2, r5
 800b50a:	6122      	str	r2, [r4, #16]
 800b50c:	f8cd a000 	str.w	sl, [sp]
 800b510:	464b      	mov	r3, r9
 800b512:	aa03      	add	r2, sp, #12
 800b514:	4621      	mov	r1, r4
 800b516:	4640      	mov	r0, r8
 800b518:	f7ff fee2 	bl	800b2e0 <_printf_common>
 800b51c:	3001      	adds	r0, #1
 800b51e:	d14c      	bne.n	800b5ba <_printf_i+0x1fe>
 800b520:	f04f 30ff 	mov.w	r0, #4294967295
 800b524:	b004      	add	sp, #16
 800b526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b52a:	4835      	ldr	r0, [pc, #212]	; (800b600 <_printf_i+0x244>)
 800b52c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b530:	6829      	ldr	r1, [r5, #0]
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	f851 6b04 	ldr.w	r6, [r1], #4
 800b538:	6029      	str	r1, [r5, #0]
 800b53a:	061d      	lsls	r5, r3, #24
 800b53c:	d514      	bpl.n	800b568 <_printf_i+0x1ac>
 800b53e:	07df      	lsls	r7, r3, #31
 800b540:	bf44      	itt	mi
 800b542:	f043 0320 	orrmi.w	r3, r3, #32
 800b546:	6023      	strmi	r3, [r4, #0]
 800b548:	b91e      	cbnz	r6, 800b552 <_printf_i+0x196>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	f023 0320 	bic.w	r3, r3, #32
 800b550:	6023      	str	r3, [r4, #0]
 800b552:	2310      	movs	r3, #16
 800b554:	e7b0      	b.n	800b4b8 <_printf_i+0xfc>
 800b556:	6823      	ldr	r3, [r4, #0]
 800b558:	f043 0320 	orr.w	r3, r3, #32
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	2378      	movs	r3, #120	; 0x78
 800b560:	4828      	ldr	r0, [pc, #160]	; (800b604 <_printf_i+0x248>)
 800b562:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b566:	e7e3      	b.n	800b530 <_printf_i+0x174>
 800b568:	0659      	lsls	r1, r3, #25
 800b56a:	bf48      	it	mi
 800b56c:	b2b6      	uxthmi	r6, r6
 800b56e:	e7e6      	b.n	800b53e <_printf_i+0x182>
 800b570:	4615      	mov	r5, r2
 800b572:	e7bb      	b.n	800b4ec <_printf_i+0x130>
 800b574:	682b      	ldr	r3, [r5, #0]
 800b576:	6826      	ldr	r6, [r4, #0]
 800b578:	6961      	ldr	r1, [r4, #20]
 800b57a:	1d18      	adds	r0, r3, #4
 800b57c:	6028      	str	r0, [r5, #0]
 800b57e:	0635      	lsls	r5, r6, #24
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	d501      	bpl.n	800b588 <_printf_i+0x1cc>
 800b584:	6019      	str	r1, [r3, #0]
 800b586:	e002      	b.n	800b58e <_printf_i+0x1d2>
 800b588:	0670      	lsls	r0, r6, #25
 800b58a:	d5fb      	bpl.n	800b584 <_printf_i+0x1c8>
 800b58c:	8019      	strh	r1, [r3, #0]
 800b58e:	2300      	movs	r3, #0
 800b590:	6123      	str	r3, [r4, #16]
 800b592:	4615      	mov	r5, r2
 800b594:	e7ba      	b.n	800b50c <_printf_i+0x150>
 800b596:	682b      	ldr	r3, [r5, #0]
 800b598:	1d1a      	adds	r2, r3, #4
 800b59a:	602a      	str	r2, [r5, #0]
 800b59c:	681d      	ldr	r5, [r3, #0]
 800b59e:	6862      	ldr	r2, [r4, #4]
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	f7f4 fe3c 	bl	8000220 <memchr>
 800b5a8:	b108      	cbz	r0, 800b5ae <_printf_i+0x1f2>
 800b5aa:	1b40      	subs	r0, r0, r5
 800b5ac:	6060      	str	r0, [r4, #4]
 800b5ae:	6863      	ldr	r3, [r4, #4]
 800b5b0:	6123      	str	r3, [r4, #16]
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5b8:	e7a8      	b.n	800b50c <_printf_i+0x150>
 800b5ba:	6923      	ldr	r3, [r4, #16]
 800b5bc:	462a      	mov	r2, r5
 800b5be:	4649      	mov	r1, r9
 800b5c0:	4640      	mov	r0, r8
 800b5c2:	47d0      	blx	sl
 800b5c4:	3001      	adds	r0, #1
 800b5c6:	d0ab      	beq.n	800b520 <_printf_i+0x164>
 800b5c8:	6823      	ldr	r3, [r4, #0]
 800b5ca:	079b      	lsls	r3, r3, #30
 800b5cc:	d413      	bmi.n	800b5f6 <_printf_i+0x23a>
 800b5ce:	68e0      	ldr	r0, [r4, #12]
 800b5d0:	9b03      	ldr	r3, [sp, #12]
 800b5d2:	4298      	cmp	r0, r3
 800b5d4:	bfb8      	it	lt
 800b5d6:	4618      	movlt	r0, r3
 800b5d8:	e7a4      	b.n	800b524 <_printf_i+0x168>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	4632      	mov	r2, r6
 800b5de:	4649      	mov	r1, r9
 800b5e0:	4640      	mov	r0, r8
 800b5e2:	47d0      	blx	sl
 800b5e4:	3001      	adds	r0, #1
 800b5e6:	d09b      	beq.n	800b520 <_printf_i+0x164>
 800b5e8:	3501      	adds	r5, #1
 800b5ea:	68e3      	ldr	r3, [r4, #12]
 800b5ec:	9903      	ldr	r1, [sp, #12]
 800b5ee:	1a5b      	subs	r3, r3, r1
 800b5f0:	42ab      	cmp	r3, r5
 800b5f2:	dcf2      	bgt.n	800b5da <_printf_i+0x21e>
 800b5f4:	e7eb      	b.n	800b5ce <_printf_i+0x212>
 800b5f6:	2500      	movs	r5, #0
 800b5f8:	f104 0619 	add.w	r6, r4, #25
 800b5fc:	e7f5      	b.n	800b5ea <_printf_i+0x22e>
 800b5fe:	bf00      	nop
 800b600:	0800f07e 	.word	0x0800f07e
 800b604:	0800f08f 	.word	0x0800f08f

0800b608 <siprintf>:
 800b608:	b40e      	push	{r1, r2, r3}
 800b60a:	b500      	push	{lr}
 800b60c:	b09c      	sub	sp, #112	; 0x70
 800b60e:	ab1d      	add	r3, sp, #116	; 0x74
 800b610:	9002      	str	r0, [sp, #8]
 800b612:	9006      	str	r0, [sp, #24]
 800b614:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b618:	4809      	ldr	r0, [pc, #36]	; (800b640 <siprintf+0x38>)
 800b61a:	9107      	str	r1, [sp, #28]
 800b61c:	9104      	str	r1, [sp, #16]
 800b61e:	4909      	ldr	r1, [pc, #36]	; (800b644 <siprintf+0x3c>)
 800b620:	f853 2b04 	ldr.w	r2, [r3], #4
 800b624:	9105      	str	r1, [sp, #20]
 800b626:	6800      	ldr	r0, [r0, #0]
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	a902      	add	r1, sp, #8
 800b62c:	f001 fb76 	bl	800cd1c <_svfiprintf_r>
 800b630:	9b02      	ldr	r3, [sp, #8]
 800b632:	2200      	movs	r2, #0
 800b634:	701a      	strb	r2, [r3, #0]
 800b636:	b01c      	add	sp, #112	; 0x70
 800b638:	f85d eb04 	ldr.w	lr, [sp], #4
 800b63c:	b003      	add	sp, #12
 800b63e:	4770      	bx	lr
 800b640:	20000060 	.word	0x20000060
 800b644:	ffff0208 	.word	0xffff0208

0800b648 <quorem>:
 800b648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64c:	6903      	ldr	r3, [r0, #16]
 800b64e:	690c      	ldr	r4, [r1, #16]
 800b650:	42a3      	cmp	r3, r4
 800b652:	4607      	mov	r7, r0
 800b654:	f2c0 8081 	blt.w	800b75a <quorem+0x112>
 800b658:	3c01      	subs	r4, #1
 800b65a:	f101 0814 	add.w	r8, r1, #20
 800b65e:	f100 0514 	add.w	r5, r0, #20
 800b662:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b666:	9301      	str	r3, [sp, #4]
 800b668:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b66c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b670:	3301      	adds	r3, #1
 800b672:	429a      	cmp	r2, r3
 800b674:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b678:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b67c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b680:	d331      	bcc.n	800b6e6 <quorem+0x9e>
 800b682:	f04f 0e00 	mov.w	lr, #0
 800b686:	4640      	mov	r0, r8
 800b688:	46ac      	mov	ip, r5
 800b68a:	46f2      	mov	sl, lr
 800b68c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b690:	b293      	uxth	r3, r2
 800b692:	fb06 e303 	mla	r3, r6, r3, lr
 800b696:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	ebaa 0303 	sub.w	r3, sl, r3
 800b6a0:	f8dc a000 	ldr.w	sl, [ip]
 800b6a4:	0c12      	lsrs	r2, r2, #16
 800b6a6:	fa13 f38a 	uxtah	r3, r3, sl
 800b6aa:	fb06 e202 	mla	r2, r6, r2, lr
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	9b00      	ldr	r3, [sp, #0]
 800b6b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b6b6:	b292      	uxth	r2, r2
 800b6b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b6bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6c0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b6c4:	4581      	cmp	r9, r0
 800b6c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6ca:	f84c 3b04 	str.w	r3, [ip], #4
 800b6ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b6d2:	d2db      	bcs.n	800b68c <quorem+0x44>
 800b6d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b6d8:	b92b      	cbnz	r3, 800b6e6 <quorem+0x9e>
 800b6da:	9b01      	ldr	r3, [sp, #4]
 800b6dc:	3b04      	subs	r3, #4
 800b6de:	429d      	cmp	r5, r3
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	d32e      	bcc.n	800b742 <quorem+0xfa>
 800b6e4:	613c      	str	r4, [r7, #16]
 800b6e6:	4638      	mov	r0, r7
 800b6e8:	f001 f8c4 	bl	800c874 <__mcmp>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	db24      	blt.n	800b73a <quorem+0xf2>
 800b6f0:	3601      	adds	r6, #1
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	f04f 0c00 	mov.w	ip, #0
 800b6f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b6fc:	f8d0 e000 	ldr.w	lr, [r0]
 800b700:	b293      	uxth	r3, r2
 800b702:	ebac 0303 	sub.w	r3, ip, r3
 800b706:	0c12      	lsrs	r2, r2, #16
 800b708:	fa13 f38e 	uxtah	r3, r3, lr
 800b70c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b710:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b714:	b29b      	uxth	r3, r3
 800b716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b71a:	45c1      	cmp	r9, r8
 800b71c:	f840 3b04 	str.w	r3, [r0], #4
 800b720:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b724:	d2e8      	bcs.n	800b6f8 <quorem+0xb0>
 800b726:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b72a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b72e:	b922      	cbnz	r2, 800b73a <quorem+0xf2>
 800b730:	3b04      	subs	r3, #4
 800b732:	429d      	cmp	r5, r3
 800b734:	461a      	mov	r2, r3
 800b736:	d30a      	bcc.n	800b74e <quorem+0x106>
 800b738:	613c      	str	r4, [r7, #16]
 800b73a:	4630      	mov	r0, r6
 800b73c:	b003      	add	sp, #12
 800b73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b742:	6812      	ldr	r2, [r2, #0]
 800b744:	3b04      	subs	r3, #4
 800b746:	2a00      	cmp	r2, #0
 800b748:	d1cc      	bne.n	800b6e4 <quorem+0x9c>
 800b74a:	3c01      	subs	r4, #1
 800b74c:	e7c7      	b.n	800b6de <quorem+0x96>
 800b74e:	6812      	ldr	r2, [r2, #0]
 800b750:	3b04      	subs	r3, #4
 800b752:	2a00      	cmp	r2, #0
 800b754:	d1f0      	bne.n	800b738 <quorem+0xf0>
 800b756:	3c01      	subs	r4, #1
 800b758:	e7eb      	b.n	800b732 <quorem+0xea>
 800b75a:	2000      	movs	r0, #0
 800b75c:	e7ee      	b.n	800b73c <quorem+0xf4>
	...

0800b760 <_dtoa_r>:
 800b760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b764:	ed2d 8b04 	vpush	{d8-d9}
 800b768:	ec57 6b10 	vmov	r6, r7, d0
 800b76c:	b093      	sub	sp, #76	; 0x4c
 800b76e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b770:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b774:	9106      	str	r1, [sp, #24]
 800b776:	ee10 aa10 	vmov	sl, s0
 800b77a:	4604      	mov	r4, r0
 800b77c:	9209      	str	r2, [sp, #36]	; 0x24
 800b77e:	930c      	str	r3, [sp, #48]	; 0x30
 800b780:	46bb      	mov	fp, r7
 800b782:	b975      	cbnz	r5, 800b7a2 <_dtoa_r+0x42>
 800b784:	2010      	movs	r0, #16
 800b786:	f000 fddd 	bl	800c344 <malloc>
 800b78a:	4602      	mov	r2, r0
 800b78c:	6260      	str	r0, [r4, #36]	; 0x24
 800b78e:	b920      	cbnz	r0, 800b79a <_dtoa_r+0x3a>
 800b790:	4ba7      	ldr	r3, [pc, #668]	; (800ba30 <_dtoa_r+0x2d0>)
 800b792:	21ea      	movs	r1, #234	; 0xea
 800b794:	48a7      	ldr	r0, [pc, #668]	; (800ba34 <_dtoa_r+0x2d4>)
 800b796:	f001 fbd1 	bl	800cf3c <__assert_func>
 800b79a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b79e:	6005      	str	r5, [r0, #0]
 800b7a0:	60c5      	str	r5, [r0, #12]
 800b7a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7a4:	6819      	ldr	r1, [r3, #0]
 800b7a6:	b151      	cbz	r1, 800b7be <_dtoa_r+0x5e>
 800b7a8:	685a      	ldr	r2, [r3, #4]
 800b7aa:	604a      	str	r2, [r1, #4]
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	4093      	lsls	r3, r2
 800b7b0:	608b      	str	r3, [r1, #8]
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f000 fe1c 	bl	800c3f0 <_Bfree>
 800b7b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	601a      	str	r2, [r3, #0]
 800b7be:	1e3b      	subs	r3, r7, #0
 800b7c0:	bfaa      	itet	ge
 800b7c2:	2300      	movge	r3, #0
 800b7c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b7c8:	f8c8 3000 	strge.w	r3, [r8]
 800b7cc:	4b9a      	ldr	r3, [pc, #616]	; (800ba38 <_dtoa_r+0x2d8>)
 800b7ce:	bfbc      	itt	lt
 800b7d0:	2201      	movlt	r2, #1
 800b7d2:	f8c8 2000 	strlt.w	r2, [r8]
 800b7d6:	ea33 030b 	bics.w	r3, r3, fp
 800b7da:	d11b      	bne.n	800b814 <_dtoa_r+0xb4>
 800b7dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7de:	f242 730f 	movw	r3, #9999	; 0x270f
 800b7e2:	6013      	str	r3, [r2, #0]
 800b7e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7e8:	4333      	orrs	r3, r6
 800b7ea:	f000 8592 	beq.w	800c312 <_dtoa_r+0xbb2>
 800b7ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7f0:	b963      	cbnz	r3, 800b80c <_dtoa_r+0xac>
 800b7f2:	4b92      	ldr	r3, [pc, #584]	; (800ba3c <_dtoa_r+0x2dc>)
 800b7f4:	e022      	b.n	800b83c <_dtoa_r+0xdc>
 800b7f6:	4b92      	ldr	r3, [pc, #584]	; (800ba40 <_dtoa_r+0x2e0>)
 800b7f8:	9301      	str	r3, [sp, #4]
 800b7fa:	3308      	adds	r3, #8
 800b7fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b7fe:	6013      	str	r3, [r2, #0]
 800b800:	9801      	ldr	r0, [sp, #4]
 800b802:	b013      	add	sp, #76	; 0x4c
 800b804:	ecbd 8b04 	vpop	{d8-d9}
 800b808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80c:	4b8b      	ldr	r3, [pc, #556]	; (800ba3c <_dtoa_r+0x2dc>)
 800b80e:	9301      	str	r3, [sp, #4]
 800b810:	3303      	adds	r3, #3
 800b812:	e7f3      	b.n	800b7fc <_dtoa_r+0x9c>
 800b814:	2200      	movs	r2, #0
 800b816:	2300      	movs	r3, #0
 800b818:	4650      	mov	r0, sl
 800b81a:	4659      	mov	r1, fp
 800b81c:	f7f5 f974 	bl	8000b08 <__aeabi_dcmpeq>
 800b820:	ec4b ab19 	vmov	d9, sl, fp
 800b824:	4680      	mov	r8, r0
 800b826:	b158      	cbz	r0, 800b840 <_dtoa_r+0xe0>
 800b828:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b82a:	2301      	movs	r3, #1
 800b82c:	6013      	str	r3, [r2, #0]
 800b82e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b830:	2b00      	cmp	r3, #0
 800b832:	f000 856b 	beq.w	800c30c <_dtoa_r+0xbac>
 800b836:	4883      	ldr	r0, [pc, #524]	; (800ba44 <_dtoa_r+0x2e4>)
 800b838:	6018      	str	r0, [r3, #0]
 800b83a:	1e43      	subs	r3, r0, #1
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	e7df      	b.n	800b800 <_dtoa_r+0xa0>
 800b840:	ec4b ab10 	vmov	d0, sl, fp
 800b844:	aa10      	add	r2, sp, #64	; 0x40
 800b846:	a911      	add	r1, sp, #68	; 0x44
 800b848:	4620      	mov	r0, r4
 800b84a:	f001 f8b9 	bl	800c9c0 <__d2b>
 800b84e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b852:	ee08 0a10 	vmov	s16, r0
 800b856:	2d00      	cmp	r5, #0
 800b858:	f000 8084 	beq.w	800b964 <_dtoa_r+0x204>
 800b85c:	ee19 3a90 	vmov	r3, s19
 800b860:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b864:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b868:	4656      	mov	r6, sl
 800b86a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b86e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b872:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b876:	4b74      	ldr	r3, [pc, #464]	; (800ba48 <_dtoa_r+0x2e8>)
 800b878:	2200      	movs	r2, #0
 800b87a:	4630      	mov	r0, r6
 800b87c:	4639      	mov	r1, r7
 800b87e:	f7f4 fd23 	bl	80002c8 <__aeabi_dsub>
 800b882:	a365      	add	r3, pc, #404	; (adr r3, 800ba18 <_dtoa_r+0x2b8>)
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	f7f4 fed6 	bl	8000638 <__aeabi_dmul>
 800b88c:	a364      	add	r3, pc, #400	; (adr r3, 800ba20 <_dtoa_r+0x2c0>)
 800b88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b892:	f7f4 fd1b 	bl	80002cc <__adddf3>
 800b896:	4606      	mov	r6, r0
 800b898:	4628      	mov	r0, r5
 800b89a:	460f      	mov	r7, r1
 800b89c:	f7f4 fe62 	bl	8000564 <__aeabi_i2d>
 800b8a0:	a361      	add	r3, pc, #388	; (adr r3, 800ba28 <_dtoa_r+0x2c8>)
 800b8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a6:	f7f4 fec7 	bl	8000638 <__aeabi_dmul>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	4639      	mov	r1, r7
 800b8b2:	f7f4 fd0b 	bl	80002cc <__adddf3>
 800b8b6:	4606      	mov	r6, r0
 800b8b8:	460f      	mov	r7, r1
 800b8ba:	f7f5 f96d 	bl	8000b98 <__aeabi_d2iz>
 800b8be:	2200      	movs	r2, #0
 800b8c0:	9000      	str	r0, [sp, #0]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	4639      	mov	r1, r7
 800b8c8:	f7f5 f928 	bl	8000b1c <__aeabi_dcmplt>
 800b8cc:	b150      	cbz	r0, 800b8e4 <_dtoa_r+0x184>
 800b8ce:	9800      	ldr	r0, [sp, #0]
 800b8d0:	f7f4 fe48 	bl	8000564 <__aeabi_i2d>
 800b8d4:	4632      	mov	r2, r6
 800b8d6:	463b      	mov	r3, r7
 800b8d8:	f7f5 f916 	bl	8000b08 <__aeabi_dcmpeq>
 800b8dc:	b910      	cbnz	r0, 800b8e4 <_dtoa_r+0x184>
 800b8de:	9b00      	ldr	r3, [sp, #0]
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	9b00      	ldr	r3, [sp, #0]
 800b8e6:	2b16      	cmp	r3, #22
 800b8e8:	d85a      	bhi.n	800b9a0 <_dtoa_r+0x240>
 800b8ea:	9a00      	ldr	r2, [sp, #0]
 800b8ec:	4b57      	ldr	r3, [pc, #348]	; (800ba4c <_dtoa_r+0x2ec>)
 800b8ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f6:	ec51 0b19 	vmov	r0, r1, d9
 800b8fa:	f7f5 f90f 	bl	8000b1c <__aeabi_dcmplt>
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d050      	beq.n	800b9a4 <_dtoa_r+0x244>
 800b902:	9b00      	ldr	r3, [sp, #0]
 800b904:	3b01      	subs	r3, #1
 800b906:	9300      	str	r3, [sp, #0]
 800b908:	2300      	movs	r3, #0
 800b90a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b90c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b90e:	1b5d      	subs	r5, r3, r5
 800b910:	1e6b      	subs	r3, r5, #1
 800b912:	9305      	str	r3, [sp, #20]
 800b914:	bf45      	ittet	mi
 800b916:	f1c5 0301 	rsbmi	r3, r5, #1
 800b91a:	9304      	strmi	r3, [sp, #16]
 800b91c:	2300      	movpl	r3, #0
 800b91e:	2300      	movmi	r3, #0
 800b920:	bf4c      	ite	mi
 800b922:	9305      	strmi	r3, [sp, #20]
 800b924:	9304      	strpl	r3, [sp, #16]
 800b926:	9b00      	ldr	r3, [sp, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	db3d      	blt.n	800b9a8 <_dtoa_r+0x248>
 800b92c:	9b05      	ldr	r3, [sp, #20]
 800b92e:	9a00      	ldr	r2, [sp, #0]
 800b930:	920a      	str	r2, [sp, #40]	; 0x28
 800b932:	4413      	add	r3, r2
 800b934:	9305      	str	r3, [sp, #20]
 800b936:	2300      	movs	r3, #0
 800b938:	9307      	str	r3, [sp, #28]
 800b93a:	9b06      	ldr	r3, [sp, #24]
 800b93c:	2b09      	cmp	r3, #9
 800b93e:	f200 8089 	bhi.w	800ba54 <_dtoa_r+0x2f4>
 800b942:	2b05      	cmp	r3, #5
 800b944:	bfc4      	itt	gt
 800b946:	3b04      	subgt	r3, #4
 800b948:	9306      	strgt	r3, [sp, #24]
 800b94a:	9b06      	ldr	r3, [sp, #24]
 800b94c:	f1a3 0302 	sub.w	r3, r3, #2
 800b950:	bfcc      	ite	gt
 800b952:	2500      	movgt	r5, #0
 800b954:	2501      	movle	r5, #1
 800b956:	2b03      	cmp	r3, #3
 800b958:	f200 8087 	bhi.w	800ba6a <_dtoa_r+0x30a>
 800b95c:	e8df f003 	tbb	[pc, r3]
 800b960:	59383a2d 	.word	0x59383a2d
 800b964:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b968:	441d      	add	r5, r3
 800b96a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b96e:	2b20      	cmp	r3, #32
 800b970:	bfc1      	itttt	gt
 800b972:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b976:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b97a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b97e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b982:	bfda      	itte	le
 800b984:	f1c3 0320 	rsble	r3, r3, #32
 800b988:	fa06 f003 	lslle.w	r0, r6, r3
 800b98c:	4318      	orrgt	r0, r3
 800b98e:	f7f4 fdd9 	bl	8000544 <__aeabi_ui2d>
 800b992:	2301      	movs	r3, #1
 800b994:	4606      	mov	r6, r0
 800b996:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b99a:	3d01      	subs	r5, #1
 800b99c:	930e      	str	r3, [sp, #56]	; 0x38
 800b99e:	e76a      	b.n	800b876 <_dtoa_r+0x116>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e7b2      	b.n	800b90a <_dtoa_r+0x1aa>
 800b9a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b9a6:	e7b1      	b.n	800b90c <_dtoa_r+0x1ac>
 800b9a8:	9b04      	ldr	r3, [sp, #16]
 800b9aa:	9a00      	ldr	r2, [sp, #0]
 800b9ac:	1a9b      	subs	r3, r3, r2
 800b9ae:	9304      	str	r3, [sp, #16]
 800b9b0:	4253      	negs	r3, r2
 800b9b2:	9307      	str	r3, [sp, #28]
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b9b8:	e7bf      	b.n	800b93a <_dtoa_r+0x1da>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	9308      	str	r3, [sp, #32]
 800b9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	dc55      	bgt.n	800ba70 <_dtoa_r+0x310>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ce:	e00c      	b.n	800b9ea <_dtoa_r+0x28a>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e7f3      	b.n	800b9bc <_dtoa_r+0x25c>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9d8:	9308      	str	r3, [sp, #32]
 800b9da:	9b00      	ldr	r3, [sp, #0]
 800b9dc:	4413      	add	r3, r2
 800b9de:	9302      	str	r3, [sp, #8]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	9303      	str	r3, [sp, #12]
 800b9e6:	bfb8      	it	lt
 800b9e8:	2301      	movlt	r3, #1
 800b9ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	6042      	str	r2, [r0, #4]
 800b9f0:	2204      	movs	r2, #4
 800b9f2:	f102 0614 	add.w	r6, r2, #20
 800b9f6:	429e      	cmp	r6, r3
 800b9f8:	6841      	ldr	r1, [r0, #4]
 800b9fa:	d93d      	bls.n	800ba78 <_dtoa_r+0x318>
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f000 fcb7 	bl	800c370 <_Balloc>
 800ba02:	9001      	str	r0, [sp, #4]
 800ba04:	2800      	cmp	r0, #0
 800ba06:	d13b      	bne.n	800ba80 <_dtoa_r+0x320>
 800ba08:	4b11      	ldr	r3, [pc, #68]	; (800ba50 <_dtoa_r+0x2f0>)
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba10:	e6c0      	b.n	800b794 <_dtoa_r+0x34>
 800ba12:	2301      	movs	r3, #1
 800ba14:	e7df      	b.n	800b9d6 <_dtoa_r+0x276>
 800ba16:	bf00      	nop
 800ba18:	636f4361 	.word	0x636f4361
 800ba1c:	3fd287a7 	.word	0x3fd287a7
 800ba20:	8b60c8b3 	.word	0x8b60c8b3
 800ba24:	3fc68a28 	.word	0x3fc68a28
 800ba28:	509f79fb 	.word	0x509f79fb
 800ba2c:	3fd34413 	.word	0x3fd34413
 800ba30:	0800f0ad 	.word	0x0800f0ad
 800ba34:	0800f0c4 	.word	0x0800f0c4
 800ba38:	7ff00000 	.word	0x7ff00000
 800ba3c:	0800f0a9 	.word	0x0800f0a9
 800ba40:	0800f0a0 	.word	0x0800f0a0
 800ba44:	0800f07d 	.word	0x0800f07d
 800ba48:	3ff80000 	.word	0x3ff80000
 800ba4c:	0800f1b8 	.word	0x0800f1b8
 800ba50:	0800f11f 	.word	0x0800f11f
 800ba54:	2501      	movs	r5, #1
 800ba56:	2300      	movs	r3, #0
 800ba58:	9306      	str	r3, [sp, #24]
 800ba5a:	9508      	str	r5, [sp, #32]
 800ba5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba64:	2200      	movs	r2, #0
 800ba66:	2312      	movs	r3, #18
 800ba68:	e7b0      	b.n	800b9cc <_dtoa_r+0x26c>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	9308      	str	r3, [sp, #32]
 800ba6e:	e7f5      	b.n	800ba5c <_dtoa_r+0x2fc>
 800ba70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba76:	e7b8      	b.n	800b9ea <_dtoa_r+0x28a>
 800ba78:	3101      	adds	r1, #1
 800ba7a:	6041      	str	r1, [r0, #4]
 800ba7c:	0052      	lsls	r2, r2, #1
 800ba7e:	e7b8      	b.n	800b9f2 <_dtoa_r+0x292>
 800ba80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba82:	9a01      	ldr	r2, [sp, #4]
 800ba84:	601a      	str	r2, [r3, #0]
 800ba86:	9b03      	ldr	r3, [sp, #12]
 800ba88:	2b0e      	cmp	r3, #14
 800ba8a:	f200 809d 	bhi.w	800bbc8 <_dtoa_r+0x468>
 800ba8e:	2d00      	cmp	r5, #0
 800ba90:	f000 809a 	beq.w	800bbc8 <_dtoa_r+0x468>
 800ba94:	9b00      	ldr	r3, [sp, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	dd32      	ble.n	800bb00 <_dtoa_r+0x3a0>
 800ba9a:	4ab7      	ldr	r2, [pc, #732]	; (800bd78 <_dtoa_r+0x618>)
 800ba9c:	f003 030f 	and.w	r3, r3, #15
 800baa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800baa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800baa8:	9b00      	ldr	r3, [sp, #0]
 800baaa:	05d8      	lsls	r0, r3, #23
 800baac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bab0:	d516      	bpl.n	800bae0 <_dtoa_r+0x380>
 800bab2:	4bb2      	ldr	r3, [pc, #712]	; (800bd7c <_dtoa_r+0x61c>)
 800bab4:	ec51 0b19 	vmov	r0, r1, d9
 800bab8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800babc:	f7f4 fee6 	bl	800088c <__aeabi_ddiv>
 800bac0:	f007 070f 	and.w	r7, r7, #15
 800bac4:	4682      	mov	sl, r0
 800bac6:	468b      	mov	fp, r1
 800bac8:	2503      	movs	r5, #3
 800baca:	4eac      	ldr	r6, [pc, #688]	; (800bd7c <_dtoa_r+0x61c>)
 800bacc:	b957      	cbnz	r7, 800bae4 <_dtoa_r+0x384>
 800bace:	4642      	mov	r2, r8
 800bad0:	464b      	mov	r3, r9
 800bad2:	4650      	mov	r0, sl
 800bad4:	4659      	mov	r1, fp
 800bad6:	f7f4 fed9 	bl	800088c <__aeabi_ddiv>
 800bada:	4682      	mov	sl, r0
 800badc:	468b      	mov	fp, r1
 800bade:	e028      	b.n	800bb32 <_dtoa_r+0x3d2>
 800bae0:	2502      	movs	r5, #2
 800bae2:	e7f2      	b.n	800baca <_dtoa_r+0x36a>
 800bae4:	07f9      	lsls	r1, r7, #31
 800bae6:	d508      	bpl.n	800bafa <_dtoa_r+0x39a>
 800bae8:	4640      	mov	r0, r8
 800baea:	4649      	mov	r1, r9
 800baec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800baf0:	f7f4 fda2 	bl	8000638 <__aeabi_dmul>
 800baf4:	3501      	adds	r5, #1
 800baf6:	4680      	mov	r8, r0
 800baf8:	4689      	mov	r9, r1
 800bafa:	107f      	asrs	r7, r7, #1
 800bafc:	3608      	adds	r6, #8
 800bafe:	e7e5      	b.n	800bacc <_dtoa_r+0x36c>
 800bb00:	f000 809b 	beq.w	800bc3a <_dtoa_r+0x4da>
 800bb04:	9b00      	ldr	r3, [sp, #0]
 800bb06:	4f9d      	ldr	r7, [pc, #628]	; (800bd7c <_dtoa_r+0x61c>)
 800bb08:	425e      	negs	r6, r3
 800bb0a:	4b9b      	ldr	r3, [pc, #620]	; (800bd78 <_dtoa_r+0x618>)
 800bb0c:	f006 020f 	and.w	r2, r6, #15
 800bb10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	ec51 0b19 	vmov	r0, r1, d9
 800bb1c:	f7f4 fd8c 	bl	8000638 <__aeabi_dmul>
 800bb20:	1136      	asrs	r6, r6, #4
 800bb22:	4682      	mov	sl, r0
 800bb24:	468b      	mov	fp, r1
 800bb26:	2300      	movs	r3, #0
 800bb28:	2502      	movs	r5, #2
 800bb2a:	2e00      	cmp	r6, #0
 800bb2c:	d17a      	bne.n	800bc24 <_dtoa_r+0x4c4>
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1d3      	bne.n	800bada <_dtoa_r+0x37a>
 800bb32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f000 8082 	beq.w	800bc3e <_dtoa_r+0x4de>
 800bb3a:	4b91      	ldr	r3, [pc, #580]	; (800bd80 <_dtoa_r+0x620>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	4650      	mov	r0, sl
 800bb40:	4659      	mov	r1, fp
 800bb42:	f7f4 ffeb 	bl	8000b1c <__aeabi_dcmplt>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d079      	beq.n	800bc3e <_dtoa_r+0x4de>
 800bb4a:	9b03      	ldr	r3, [sp, #12]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d076      	beq.n	800bc3e <_dtoa_r+0x4de>
 800bb50:	9b02      	ldr	r3, [sp, #8]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	dd36      	ble.n	800bbc4 <_dtoa_r+0x464>
 800bb56:	9b00      	ldr	r3, [sp, #0]
 800bb58:	4650      	mov	r0, sl
 800bb5a:	4659      	mov	r1, fp
 800bb5c:	1e5f      	subs	r7, r3, #1
 800bb5e:	2200      	movs	r2, #0
 800bb60:	4b88      	ldr	r3, [pc, #544]	; (800bd84 <_dtoa_r+0x624>)
 800bb62:	f7f4 fd69 	bl	8000638 <__aeabi_dmul>
 800bb66:	9e02      	ldr	r6, [sp, #8]
 800bb68:	4682      	mov	sl, r0
 800bb6a:	468b      	mov	fp, r1
 800bb6c:	3501      	adds	r5, #1
 800bb6e:	4628      	mov	r0, r5
 800bb70:	f7f4 fcf8 	bl	8000564 <__aeabi_i2d>
 800bb74:	4652      	mov	r2, sl
 800bb76:	465b      	mov	r3, fp
 800bb78:	f7f4 fd5e 	bl	8000638 <__aeabi_dmul>
 800bb7c:	4b82      	ldr	r3, [pc, #520]	; (800bd88 <_dtoa_r+0x628>)
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f7f4 fba4 	bl	80002cc <__adddf3>
 800bb84:	46d0      	mov	r8, sl
 800bb86:	46d9      	mov	r9, fp
 800bb88:	4682      	mov	sl, r0
 800bb8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bb8e:	2e00      	cmp	r6, #0
 800bb90:	d158      	bne.n	800bc44 <_dtoa_r+0x4e4>
 800bb92:	4b7e      	ldr	r3, [pc, #504]	; (800bd8c <_dtoa_r+0x62c>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	4640      	mov	r0, r8
 800bb98:	4649      	mov	r1, r9
 800bb9a:	f7f4 fb95 	bl	80002c8 <__aeabi_dsub>
 800bb9e:	4652      	mov	r2, sl
 800bba0:	465b      	mov	r3, fp
 800bba2:	4680      	mov	r8, r0
 800bba4:	4689      	mov	r9, r1
 800bba6:	f7f4 ffd7 	bl	8000b58 <__aeabi_dcmpgt>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	f040 8295 	bne.w	800c0da <_dtoa_r+0x97a>
 800bbb0:	4652      	mov	r2, sl
 800bbb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bbb6:	4640      	mov	r0, r8
 800bbb8:	4649      	mov	r1, r9
 800bbba:	f7f4 ffaf 	bl	8000b1c <__aeabi_dcmplt>
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	f040 8289 	bne.w	800c0d6 <_dtoa_r+0x976>
 800bbc4:	ec5b ab19 	vmov	sl, fp, d9
 800bbc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f2c0 8148 	blt.w	800be60 <_dtoa_r+0x700>
 800bbd0:	9a00      	ldr	r2, [sp, #0]
 800bbd2:	2a0e      	cmp	r2, #14
 800bbd4:	f300 8144 	bgt.w	800be60 <_dtoa_r+0x700>
 800bbd8:	4b67      	ldr	r3, [pc, #412]	; (800bd78 <_dtoa_r+0x618>)
 800bbda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbde:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bbe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f280 80d5 	bge.w	800bd94 <_dtoa_r+0x634>
 800bbea:	9b03      	ldr	r3, [sp, #12]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f300 80d1 	bgt.w	800bd94 <_dtoa_r+0x634>
 800bbf2:	f040 826f 	bne.w	800c0d4 <_dtoa_r+0x974>
 800bbf6:	4b65      	ldr	r3, [pc, #404]	; (800bd8c <_dtoa_r+0x62c>)
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	4649      	mov	r1, r9
 800bbfe:	f7f4 fd1b 	bl	8000638 <__aeabi_dmul>
 800bc02:	4652      	mov	r2, sl
 800bc04:	465b      	mov	r3, fp
 800bc06:	f7f4 ff9d 	bl	8000b44 <__aeabi_dcmpge>
 800bc0a:	9e03      	ldr	r6, [sp, #12]
 800bc0c:	4637      	mov	r7, r6
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	f040 8245 	bne.w	800c09e <_dtoa_r+0x93e>
 800bc14:	9d01      	ldr	r5, [sp, #4]
 800bc16:	2331      	movs	r3, #49	; 0x31
 800bc18:	f805 3b01 	strb.w	r3, [r5], #1
 800bc1c:	9b00      	ldr	r3, [sp, #0]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	e240      	b.n	800c0a6 <_dtoa_r+0x946>
 800bc24:	07f2      	lsls	r2, r6, #31
 800bc26:	d505      	bpl.n	800bc34 <_dtoa_r+0x4d4>
 800bc28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc2c:	f7f4 fd04 	bl	8000638 <__aeabi_dmul>
 800bc30:	3501      	adds	r5, #1
 800bc32:	2301      	movs	r3, #1
 800bc34:	1076      	asrs	r6, r6, #1
 800bc36:	3708      	adds	r7, #8
 800bc38:	e777      	b.n	800bb2a <_dtoa_r+0x3ca>
 800bc3a:	2502      	movs	r5, #2
 800bc3c:	e779      	b.n	800bb32 <_dtoa_r+0x3d2>
 800bc3e:	9f00      	ldr	r7, [sp, #0]
 800bc40:	9e03      	ldr	r6, [sp, #12]
 800bc42:	e794      	b.n	800bb6e <_dtoa_r+0x40e>
 800bc44:	9901      	ldr	r1, [sp, #4]
 800bc46:	4b4c      	ldr	r3, [pc, #304]	; (800bd78 <_dtoa_r+0x618>)
 800bc48:	4431      	add	r1, r6
 800bc4a:	910d      	str	r1, [sp, #52]	; 0x34
 800bc4c:	9908      	ldr	r1, [sp, #32]
 800bc4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bc52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc56:	2900      	cmp	r1, #0
 800bc58:	d043      	beq.n	800bce2 <_dtoa_r+0x582>
 800bc5a:	494d      	ldr	r1, [pc, #308]	; (800bd90 <_dtoa_r+0x630>)
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	f7f4 fe15 	bl	800088c <__aeabi_ddiv>
 800bc62:	4652      	mov	r2, sl
 800bc64:	465b      	mov	r3, fp
 800bc66:	f7f4 fb2f 	bl	80002c8 <__aeabi_dsub>
 800bc6a:	9d01      	ldr	r5, [sp, #4]
 800bc6c:	4682      	mov	sl, r0
 800bc6e:	468b      	mov	fp, r1
 800bc70:	4649      	mov	r1, r9
 800bc72:	4640      	mov	r0, r8
 800bc74:	f7f4 ff90 	bl	8000b98 <__aeabi_d2iz>
 800bc78:	4606      	mov	r6, r0
 800bc7a:	f7f4 fc73 	bl	8000564 <__aeabi_i2d>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	460b      	mov	r3, r1
 800bc82:	4640      	mov	r0, r8
 800bc84:	4649      	mov	r1, r9
 800bc86:	f7f4 fb1f 	bl	80002c8 <__aeabi_dsub>
 800bc8a:	3630      	adds	r6, #48	; 0x30
 800bc8c:	f805 6b01 	strb.w	r6, [r5], #1
 800bc90:	4652      	mov	r2, sl
 800bc92:	465b      	mov	r3, fp
 800bc94:	4680      	mov	r8, r0
 800bc96:	4689      	mov	r9, r1
 800bc98:	f7f4 ff40 	bl	8000b1c <__aeabi_dcmplt>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d163      	bne.n	800bd68 <_dtoa_r+0x608>
 800bca0:	4642      	mov	r2, r8
 800bca2:	464b      	mov	r3, r9
 800bca4:	4936      	ldr	r1, [pc, #216]	; (800bd80 <_dtoa_r+0x620>)
 800bca6:	2000      	movs	r0, #0
 800bca8:	f7f4 fb0e 	bl	80002c8 <__aeabi_dsub>
 800bcac:	4652      	mov	r2, sl
 800bcae:	465b      	mov	r3, fp
 800bcb0:	f7f4 ff34 	bl	8000b1c <__aeabi_dcmplt>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	f040 80b5 	bne.w	800be24 <_dtoa_r+0x6c4>
 800bcba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcbc:	429d      	cmp	r5, r3
 800bcbe:	d081      	beq.n	800bbc4 <_dtoa_r+0x464>
 800bcc0:	4b30      	ldr	r3, [pc, #192]	; (800bd84 <_dtoa_r+0x624>)
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	4650      	mov	r0, sl
 800bcc6:	4659      	mov	r1, fp
 800bcc8:	f7f4 fcb6 	bl	8000638 <__aeabi_dmul>
 800bccc:	4b2d      	ldr	r3, [pc, #180]	; (800bd84 <_dtoa_r+0x624>)
 800bcce:	4682      	mov	sl, r0
 800bcd0:	468b      	mov	fp, r1
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	4649      	mov	r1, r9
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f7f4 fcae 	bl	8000638 <__aeabi_dmul>
 800bcdc:	4680      	mov	r8, r0
 800bcde:	4689      	mov	r9, r1
 800bce0:	e7c6      	b.n	800bc70 <_dtoa_r+0x510>
 800bce2:	4650      	mov	r0, sl
 800bce4:	4659      	mov	r1, fp
 800bce6:	f7f4 fca7 	bl	8000638 <__aeabi_dmul>
 800bcea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcec:	9d01      	ldr	r5, [sp, #4]
 800bcee:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcf0:	4682      	mov	sl, r0
 800bcf2:	468b      	mov	fp, r1
 800bcf4:	4649      	mov	r1, r9
 800bcf6:	4640      	mov	r0, r8
 800bcf8:	f7f4 ff4e 	bl	8000b98 <__aeabi_d2iz>
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	f7f4 fc31 	bl	8000564 <__aeabi_i2d>
 800bd02:	3630      	adds	r6, #48	; 0x30
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	4640      	mov	r0, r8
 800bd0a:	4649      	mov	r1, r9
 800bd0c:	f7f4 fadc 	bl	80002c8 <__aeabi_dsub>
 800bd10:	f805 6b01 	strb.w	r6, [r5], #1
 800bd14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd16:	429d      	cmp	r5, r3
 800bd18:	4680      	mov	r8, r0
 800bd1a:	4689      	mov	r9, r1
 800bd1c:	f04f 0200 	mov.w	r2, #0
 800bd20:	d124      	bne.n	800bd6c <_dtoa_r+0x60c>
 800bd22:	4b1b      	ldr	r3, [pc, #108]	; (800bd90 <_dtoa_r+0x630>)
 800bd24:	4650      	mov	r0, sl
 800bd26:	4659      	mov	r1, fp
 800bd28:	f7f4 fad0 	bl	80002cc <__adddf3>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	4640      	mov	r0, r8
 800bd32:	4649      	mov	r1, r9
 800bd34:	f7f4 ff10 	bl	8000b58 <__aeabi_dcmpgt>
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	d173      	bne.n	800be24 <_dtoa_r+0x6c4>
 800bd3c:	4652      	mov	r2, sl
 800bd3e:	465b      	mov	r3, fp
 800bd40:	4913      	ldr	r1, [pc, #76]	; (800bd90 <_dtoa_r+0x630>)
 800bd42:	2000      	movs	r0, #0
 800bd44:	f7f4 fac0 	bl	80002c8 <__aeabi_dsub>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4640      	mov	r0, r8
 800bd4e:	4649      	mov	r1, r9
 800bd50:	f7f4 fee4 	bl	8000b1c <__aeabi_dcmplt>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	f43f af35 	beq.w	800bbc4 <_dtoa_r+0x464>
 800bd5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bd5c:	1e6b      	subs	r3, r5, #1
 800bd5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd64:	2b30      	cmp	r3, #48	; 0x30
 800bd66:	d0f8      	beq.n	800bd5a <_dtoa_r+0x5fa>
 800bd68:	9700      	str	r7, [sp, #0]
 800bd6a:	e049      	b.n	800be00 <_dtoa_r+0x6a0>
 800bd6c:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <_dtoa_r+0x624>)
 800bd6e:	f7f4 fc63 	bl	8000638 <__aeabi_dmul>
 800bd72:	4680      	mov	r8, r0
 800bd74:	4689      	mov	r9, r1
 800bd76:	e7bd      	b.n	800bcf4 <_dtoa_r+0x594>
 800bd78:	0800f1b8 	.word	0x0800f1b8
 800bd7c:	0800f190 	.word	0x0800f190
 800bd80:	3ff00000 	.word	0x3ff00000
 800bd84:	40240000 	.word	0x40240000
 800bd88:	401c0000 	.word	0x401c0000
 800bd8c:	40140000 	.word	0x40140000
 800bd90:	3fe00000 	.word	0x3fe00000
 800bd94:	9d01      	ldr	r5, [sp, #4]
 800bd96:	4656      	mov	r6, sl
 800bd98:	465f      	mov	r7, fp
 800bd9a:	4642      	mov	r2, r8
 800bd9c:	464b      	mov	r3, r9
 800bd9e:	4630      	mov	r0, r6
 800bda0:	4639      	mov	r1, r7
 800bda2:	f7f4 fd73 	bl	800088c <__aeabi_ddiv>
 800bda6:	f7f4 fef7 	bl	8000b98 <__aeabi_d2iz>
 800bdaa:	4682      	mov	sl, r0
 800bdac:	f7f4 fbda 	bl	8000564 <__aeabi_i2d>
 800bdb0:	4642      	mov	r2, r8
 800bdb2:	464b      	mov	r3, r9
 800bdb4:	f7f4 fc40 	bl	8000638 <__aeabi_dmul>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	4639      	mov	r1, r7
 800bdc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bdc4:	f7f4 fa80 	bl	80002c8 <__aeabi_dsub>
 800bdc8:	f805 6b01 	strb.w	r6, [r5], #1
 800bdcc:	9e01      	ldr	r6, [sp, #4]
 800bdce:	9f03      	ldr	r7, [sp, #12]
 800bdd0:	1bae      	subs	r6, r5, r6
 800bdd2:	42b7      	cmp	r7, r6
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	d135      	bne.n	800be46 <_dtoa_r+0x6e6>
 800bdda:	f7f4 fa77 	bl	80002cc <__adddf3>
 800bdde:	4642      	mov	r2, r8
 800bde0:	464b      	mov	r3, r9
 800bde2:	4606      	mov	r6, r0
 800bde4:	460f      	mov	r7, r1
 800bde6:	f7f4 feb7 	bl	8000b58 <__aeabi_dcmpgt>
 800bdea:	b9d0      	cbnz	r0, 800be22 <_dtoa_r+0x6c2>
 800bdec:	4642      	mov	r2, r8
 800bdee:	464b      	mov	r3, r9
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	f7f4 fe88 	bl	8000b08 <__aeabi_dcmpeq>
 800bdf8:	b110      	cbz	r0, 800be00 <_dtoa_r+0x6a0>
 800bdfa:	f01a 0f01 	tst.w	sl, #1
 800bdfe:	d110      	bne.n	800be22 <_dtoa_r+0x6c2>
 800be00:	4620      	mov	r0, r4
 800be02:	ee18 1a10 	vmov	r1, s16
 800be06:	f000 faf3 	bl	800c3f0 <_Bfree>
 800be0a:	2300      	movs	r3, #0
 800be0c:	9800      	ldr	r0, [sp, #0]
 800be0e:	702b      	strb	r3, [r5, #0]
 800be10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be12:	3001      	adds	r0, #1
 800be14:	6018      	str	r0, [r3, #0]
 800be16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f43f acf1 	beq.w	800b800 <_dtoa_r+0xa0>
 800be1e:	601d      	str	r5, [r3, #0]
 800be20:	e4ee      	b.n	800b800 <_dtoa_r+0xa0>
 800be22:	9f00      	ldr	r7, [sp, #0]
 800be24:	462b      	mov	r3, r5
 800be26:	461d      	mov	r5, r3
 800be28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be2c:	2a39      	cmp	r2, #57	; 0x39
 800be2e:	d106      	bne.n	800be3e <_dtoa_r+0x6de>
 800be30:	9a01      	ldr	r2, [sp, #4]
 800be32:	429a      	cmp	r2, r3
 800be34:	d1f7      	bne.n	800be26 <_dtoa_r+0x6c6>
 800be36:	9901      	ldr	r1, [sp, #4]
 800be38:	2230      	movs	r2, #48	; 0x30
 800be3a:	3701      	adds	r7, #1
 800be3c:	700a      	strb	r2, [r1, #0]
 800be3e:	781a      	ldrb	r2, [r3, #0]
 800be40:	3201      	adds	r2, #1
 800be42:	701a      	strb	r2, [r3, #0]
 800be44:	e790      	b.n	800bd68 <_dtoa_r+0x608>
 800be46:	4ba6      	ldr	r3, [pc, #664]	; (800c0e0 <_dtoa_r+0x980>)
 800be48:	2200      	movs	r2, #0
 800be4a:	f7f4 fbf5 	bl	8000638 <__aeabi_dmul>
 800be4e:	2200      	movs	r2, #0
 800be50:	2300      	movs	r3, #0
 800be52:	4606      	mov	r6, r0
 800be54:	460f      	mov	r7, r1
 800be56:	f7f4 fe57 	bl	8000b08 <__aeabi_dcmpeq>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d09d      	beq.n	800bd9a <_dtoa_r+0x63a>
 800be5e:	e7cf      	b.n	800be00 <_dtoa_r+0x6a0>
 800be60:	9a08      	ldr	r2, [sp, #32]
 800be62:	2a00      	cmp	r2, #0
 800be64:	f000 80d7 	beq.w	800c016 <_dtoa_r+0x8b6>
 800be68:	9a06      	ldr	r2, [sp, #24]
 800be6a:	2a01      	cmp	r2, #1
 800be6c:	f300 80ba 	bgt.w	800bfe4 <_dtoa_r+0x884>
 800be70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be72:	2a00      	cmp	r2, #0
 800be74:	f000 80b2 	beq.w	800bfdc <_dtoa_r+0x87c>
 800be78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be7c:	9e07      	ldr	r6, [sp, #28]
 800be7e:	9d04      	ldr	r5, [sp, #16]
 800be80:	9a04      	ldr	r2, [sp, #16]
 800be82:	441a      	add	r2, r3
 800be84:	9204      	str	r2, [sp, #16]
 800be86:	9a05      	ldr	r2, [sp, #20]
 800be88:	2101      	movs	r1, #1
 800be8a:	441a      	add	r2, r3
 800be8c:	4620      	mov	r0, r4
 800be8e:	9205      	str	r2, [sp, #20]
 800be90:	f000 fb66 	bl	800c560 <__i2b>
 800be94:	4607      	mov	r7, r0
 800be96:	2d00      	cmp	r5, #0
 800be98:	dd0c      	ble.n	800beb4 <_dtoa_r+0x754>
 800be9a:	9b05      	ldr	r3, [sp, #20]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	dd09      	ble.n	800beb4 <_dtoa_r+0x754>
 800bea0:	42ab      	cmp	r3, r5
 800bea2:	9a04      	ldr	r2, [sp, #16]
 800bea4:	bfa8      	it	ge
 800bea6:	462b      	movge	r3, r5
 800bea8:	1ad2      	subs	r2, r2, r3
 800beaa:	9204      	str	r2, [sp, #16]
 800beac:	9a05      	ldr	r2, [sp, #20]
 800beae:	1aed      	subs	r5, r5, r3
 800beb0:	1ad3      	subs	r3, r2, r3
 800beb2:	9305      	str	r3, [sp, #20]
 800beb4:	9b07      	ldr	r3, [sp, #28]
 800beb6:	b31b      	cbz	r3, 800bf00 <_dtoa_r+0x7a0>
 800beb8:	9b08      	ldr	r3, [sp, #32]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f000 80af 	beq.w	800c01e <_dtoa_r+0x8be>
 800bec0:	2e00      	cmp	r6, #0
 800bec2:	dd13      	ble.n	800beec <_dtoa_r+0x78c>
 800bec4:	4639      	mov	r1, r7
 800bec6:	4632      	mov	r2, r6
 800bec8:	4620      	mov	r0, r4
 800beca:	f000 fc09 	bl	800c6e0 <__pow5mult>
 800bece:	ee18 2a10 	vmov	r2, s16
 800bed2:	4601      	mov	r1, r0
 800bed4:	4607      	mov	r7, r0
 800bed6:	4620      	mov	r0, r4
 800bed8:	f000 fb58 	bl	800c58c <__multiply>
 800bedc:	ee18 1a10 	vmov	r1, s16
 800bee0:	4680      	mov	r8, r0
 800bee2:	4620      	mov	r0, r4
 800bee4:	f000 fa84 	bl	800c3f0 <_Bfree>
 800bee8:	ee08 8a10 	vmov	s16, r8
 800beec:	9b07      	ldr	r3, [sp, #28]
 800beee:	1b9a      	subs	r2, r3, r6
 800bef0:	d006      	beq.n	800bf00 <_dtoa_r+0x7a0>
 800bef2:	ee18 1a10 	vmov	r1, s16
 800bef6:	4620      	mov	r0, r4
 800bef8:	f000 fbf2 	bl	800c6e0 <__pow5mult>
 800befc:	ee08 0a10 	vmov	s16, r0
 800bf00:	2101      	movs	r1, #1
 800bf02:	4620      	mov	r0, r4
 800bf04:	f000 fb2c 	bl	800c560 <__i2b>
 800bf08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	4606      	mov	r6, r0
 800bf0e:	f340 8088 	ble.w	800c022 <_dtoa_r+0x8c2>
 800bf12:	461a      	mov	r2, r3
 800bf14:	4601      	mov	r1, r0
 800bf16:	4620      	mov	r0, r4
 800bf18:	f000 fbe2 	bl	800c6e0 <__pow5mult>
 800bf1c:	9b06      	ldr	r3, [sp, #24]
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	4606      	mov	r6, r0
 800bf22:	f340 8081 	ble.w	800c028 <_dtoa_r+0x8c8>
 800bf26:	f04f 0800 	mov.w	r8, #0
 800bf2a:	6933      	ldr	r3, [r6, #16]
 800bf2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bf30:	6918      	ldr	r0, [r3, #16]
 800bf32:	f000 fac5 	bl	800c4c0 <__hi0bits>
 800bf36:	f1c0 0020 	rsb	r0, r0, #32
 800bf3a:	9b05      	ldr	r3, [sp, #20]
 800bf3c:	4418      	add	r0, r3
 800bf3e:	f010 001f 	ands.w	r0, r0, #31
 800bf42:	f000 8092 	beq.w	800c06a <_dtoa_r+0x90a>
 800bf46:	f1c0 0320 	rsb	r3, r0, #32
 800bf4a:	2b04      	cmp	r3, #4
 800bf4c:	f340 808a 	ble.w	800c064 <_dtoa_r+0x904>
 800bf50:	f1c0 001c 	rsb	r0, r0, #28
 800bf54:	9b04      	ldr	r3, [sp, #16]
 800bf56:	4403      	add	r3, r0
 800bf58:	9304      	str	r3, [sp, #16]
 800bf5a:	9b05      	ldr	r3, [sp, #20]
 800bf5c:	4403      	add	r3, r0
 800bf5e:	4405      	add	r5, r0
 800bf60:	9305      	str	r3, [sp, #20]
 800bf62:	9b04      	ldr	r3, [sp, #16]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	dd07      	ble.n	800bf78 <_dtoa_r+0x818>
 800bf68:	ee18 1a10 	vmov	r1, s16
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	4620      	mov	r0, r4
 800bf70:	f000 fc10 	bl	800c794 <__lshift>
 800bf74:	ee08 0a10 	vmov	s16, r0
 800bf78:	9b05      	ldr	r3, [sp, #20]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	dd05      	ble.n	800bf8a <_dtoa_r+0x82a>
 800bf7e:	4631      	mov	r1, r6
 800bf80:	461a      	mov	r2, r3
 800bf82:	4620      	mov	r0, r4
 800bf84:	f000 fc06 	bl	800c794 <__lshift>
 800bf88:	4606      	mov	r6, r0
 800bf8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d06e      	beq.n	800c06e <_dtoa_r+0x90e>
 800bf90:	ee18 0a10 	vmov	r0, s16
 800bf94:	4631      	mov	r1, r6
 800bf96:	f000 fc6d 	bl	800c874 <__mcmp>
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	da67      	bge.n	800c06e <_dtoa_r+0x90e>
 800bf9e:	9b00      	ldr	r3, [sp, #0]
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	ee18 1a10 	vmov	r1, s16
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	220a      	movs	r2, #10
 800bfaa:	2300      	movs	r3, #0
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 fa41 	bl	800c434 <__multadd>
 800bfb2:	9b08      	ldr	r3, [sp, #32]
 800bfb4:	ee08 0a10 	vmov	s16, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 81b1 	beq.w	800c320 <_dtoa_r+0xbc0>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	4639      	mov	r1, r7
 800bfc2:	220a      	movs	r2, #10
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f000 fa35 	bl	800c434 <__multadd>
 800bfca:	9b02      	ldr	r3, [sp, #8]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	4607      	mov	r7, r0
 800bfd0:	f300 808e 	bgt.w	800c0f0 <_dtoa_r+0x990>
 800bfd4:	9b06      	ldr	r3, [sp, #24]
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	dc51      	bgt.n	800c07e <_dtoa_r+0x91e>
 800bfda:	e089      	b.n	800c0f0 <_dtoa_r+0x990>
 800bfdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bfe2:	e74b      	b.n	800be7c <_dtoa_r+0x71c>
 800bfe4:	9b03      	ldr	r3, [sp, #12]
 800bfe6:	1e5e      	subs	r6, r3, #1
 800bfe8:	9b07      	ldr	r3, [sp, #28]
 800bfea:	42b3      	cmp	r3, r6
 800bfec:	bfbf      	itttt	lt
 800bfee:	9b07      	ldrlt	r3, [sp, #28]
 800bff0:	9607      	strlt	r6, [sp, #28]
 800bff2:	1af2      	sublt	r2, r6, r3
 800bff4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bff6:	bfb6      	itet	lt
 800bff8:	189b      	addlt	r3, r3, r2
 800bffa:	1b9e      	subge	r6, r3, r6
 800bffc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bffe:	9b03      	ldr	r3, [sp, #12]
 800c000:	bfb8      	it	lt
 800c002:	2600      	movlt	r6, #0
 800c004:	2b00      	cmp	r3, #0
 800c006:	bfb7      	itett	lt
 800c008:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c00c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c010:	1a9d      	sublt	r5, r3, r2
 800c012:	2300      	movlt	r3, #0
 800c014:	e734      	b.n	800be80 <_dtoa_r+0x720>
 800c016:	9e07      	ldr	r6, [sp, #28]
 800c018:	9d04      	ldr	r5, [sp, #16]
 800c01a:	9f08      	ldr	r7, [sp, #32]
 800c01c:	e73b      	b.n	800be96 <_dtoa_r+0x736>
 800c01e:	9a07      	ldr	r2, [sp, #28]
 800c020:	e767      	b.n	800bef2 <_dtoa_r+0x792>
 800c022:	9b06      	ldr	r3, [sp, #24]
 800c024:	2b01      	cmp	r3, #1
 800c026:	dc18      	bgt.n	800c05a <_dtoa_r+0x8fa>
 800c028:	f1ba 0f00 	cmp.w	sl, #0
 800c02c:	d115      	bne.n	800c05a <_dtoa_r+0x8fa>
 800c02e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c032:	b993      	cbnz	r3, 800c05a <_dtoa_r+0x8fa>
 800c034:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c038:	0d1b      	lsrs	r3, r3, #20
 800c03a:	051b      	lsls	r3, r3, #20
 800c03c:	b183      	cbz	r3, 800c060 <_dtoa_r+0x900>
 800c03e:	9b04      	ldr	r3, [sp, #16]
 800c040:	3301      	adds	r3, #1
 800c042:	9304      	str	r3, [sp, #16]
 800c044:	9b05      	ldr	r3, [sp, #20]
 800c046:	3301      	adds	r3, #1
 800c048:	9305      	str	r3, [sp, #20]
 800c04a:	f04f 0801 	mov.w	r8, #1
 800c04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c050:	2b00      	cmp	r3, #0
 800c052:	f47f af6a 	bne.w	800bf2a <_dtoa_r+0x7ca>
 800c056:	2001      	movs	r0, #1
 800c058:	e76f      	b.n	800bf3a <_dtoa_r+0x7da>
 800c05a:	f04f 0800 	mov.w	r8, #0
 800c05e:	e7f6      	b.n	800c04e <_dtoa_r+0x8ee>
 800c060:	4698      	mov	r8, r3
 800c062:	e7f4      	b.n	800c04e <_dtoa_r+0x8ee>
 800c064:	f43f af7d 	beq.w	800bf62 <_dtoa_r+0x802>
 800c068:	4618      	mov	r0, r3
 800c06a:	301c      	adds	r0, #28
 800c06c:	e772      	b.n	800bf54 <_dtoa_r+0x7f4>
 800c06e:	9b03      	ldr	r3, [sp, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	dc37      	bgt.n	800c0e4 <_dtoa_r+0x984>
 800c074:	9b06      	ldr	r3, [sp, #24]
 800c076:	2b02      	cmp	r3, #2
 800c078:	dd34      	ble.n	800c0e4 <_dtoa_r+0x984>
 800c07a:	9b03      	ldr	r3, [sp, #12]
 800c07c:	9302      	str	r3, [sp, #8]
 800c07e:	9b02      	ldr	r3, [sp, #8]
 800c080:	b96b      	cbnz	r3, 800c09e <_dtoa_r+0x93e>
 800c082:	4631      	mov	r1, r6
 800c084:	2205      	movs	r2, #5
 800c086:	4620      	mov	r0, r4
 800c088:	f000 f9d4 	bl	800c434 <__multadd>
 800c08c:	4601      	mov	r1, r0
 800c08e:	4606      	mov	r6, r0
 800c090:	ee18 0a10 	vmov	r0, s16
 800c094:	f000 fbee 	bl	800c874 <__mcmp>
 800c098:	2800      	cmp	r0, #0
 800c09a:	f73f adbb 	bgt.w	800bc14 <_dtoa_r+0x4b4>
 800c09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a0:	9d01      	ldr	r5, [sp, #4]
 800c0a2:	43db      	mvns	r3, r3
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	f04f 0800 	mov.w	r8, #0
 800c0aa:	4631      	mov	r1, r6
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	f000 f99f 	bl	800c3f0 <_Bfree>
 800c0b2:	2f00      	cmp	r7, #0
 800c0b4:	f43f aea4 	beq.w	800be00 <_dtoa_r+0x6a0>
 800c0b8:	f1b8 0f00 	cmp.w	r8, #0
 800c0bc:	d005      	beq.n	800c0ca <_dtoa_r+0x96a>
 800c0be:	45b8      	cmp	r8, r7
 800c0c0:	d003      	beq.n	800c0ca <_dtoa_r+0x96a>
 800c0c2:	4641      	mov	r1, r8
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f000 f993 	bl	800c3f0 <_Bfree>
 800c0ca:	4639      	mov	r1, r7
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 f98f 	bl	800c3f0 <_Bfree>
 800c0d2:	e695      	b.n	800be00 <_dtoa_r+0x6a0>
 800c0d4:	2600      	movs	r6, #0
 800c0d6:	4637      	mov	r7, r6
 800c0d8:	e7e1      	b.n	800c09e <_dtoa_r+0x93e>
 800c0da:	9700      	str	r7, [sp, #0]
 800c0dc:	4637      	mov	r7, r6
 800c0de:	e599      	b.n	800bc14 <_dtoa_r+0x4b4>
 800c0e0:	40240000 	.word	0x40240000
 800c0e4:	9b08      	ldr	r3, [sp, #32]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f000 80ca 	beq.w	800c280 <_dtoa_r+0xb20>
 800c0ec:	9b03      	ldr	r3, [sp, #12]
 800c0ee:	9302      	str	r3, [sp, #8]
 800c0f0:	2d00      	cmp	r5, #0
 800c0f2:	dd05      	ble.n	800c100 <_dtoa_r+0x9a0>
 800c0f4:	4639      	mov	r1, r7
 800c0f6:	462a      	mov	r2, r5
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f000 fb4b 	bl	800c794 <__lshift>
 800c0fe:	4607      	mov	r7, r0
 800c100:	f1b8 0f00 	cmp.w	r8, #0
 800c104:	d05b      	beq.n	800c1be <_dtoa_r+0xa5e>
 800c106:	6879      	ldr	r1, [r7, #4]
 800c108:	4620      	mov	r0, r4
 800c10a:	f000 f931 	bl	800c370 <_Balloc>
 800c10e:	4605      	mov	r5, r0
 800c110:	b928      	cbnz	r0, 800c11e <_dtoa_r+0x9be>
 800c112:	4b87      	ldr	r3, [pc, #540]	; (800c330 <_dtoa_r+0xbd0>)
 800c114:	4602      	mov	r2, r0
 800c116:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c11a:	f7ff bb3b 	b.w	800b794 <_dtoa_r+0x34>
 800c11e:	693a      	ldr	r2, [r7, #16]
 800c120:	3202      	adds	r2, #2
 800c122:	0092      	lsls	r2, r2, #2
 800c124:	f107 010c 	add.w	r1, r7, #12
 800c128:	300c      	adds	r0, #12
 800c12a:	f000 f913 	bl	800c354 <memcpy>
 800c12e:	2201      	movs	r2, #1
 800c130:	4629      	mov	r1, r5
 800c132:	4620      	mov	r0, r4
 800c134:	f000 fb2e 	bl	800c794 <__lshift>
 800c138:	9b01      	ldr	r3, [sp, #4]
 800c13a:	f103 0901 	add.w	r9, r3, #1
 800c13e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c142:	4413      	add	r3, r2
 800c144:	9305      	str	r3, [sp, #20]
 800c146:	f00a 0301 	and.w	r3, sl, #1
 800c14a:	46b8      	mov	r8, r7
 800c14c:	9304      	str	r3, [sp, #16]
 800c14e:	4607      	mov	r7, r0
 800c150:	4631      	mov	r1, r6
 800c152:	ee18 0a10 	vmov	r0, s16
 800c156:	f7ff fa77 	bl	800b648 <quorem>
 800c15a:	4641      	mov	r1, r8
 800c15c:	9002      	str	r0, [sp, #8]
 800c15e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c162:	ee18 0a10 	vmov	r0, s16
 800c166:	f000 fb85 	bl	800c874 <__mcmp>
 800c16a:	463a      	mov	r2, r7
 800c16c:	9003      	str	r0, [sp, #12]
 800c16e:	4631      	mov	r1, r6
 800c170:	4620      	mov	r0, r4
 800c172:	f000 fb9b 	bl	800c8ac <__mdiff>
 800c176:	68c2      	ldr	r2, [r0, #12]
 800c178:	f109 3bff 	add.w	fp, r9, #4294967295
 800c17c:	4605      	mov	r5, r0
 800c17e:	bb02      	cbnz	r2, 800c1c2 <_dtoa_r+0xa62>
 800c180:	4601      	mov	r1, r0
 800c182:	ee18 0a10 	vmov	r0, s16
 800c186:	f000 fb75 	bl	800c874 <__mcmp>
 800c18a:	4602      	mov	r2, r0
 800c18c:	4629      	mov	r1, r5
 800c18e:	4620      	mov	r0, r4
 800c190:	9207      	str	r2, [sp, #28]
 800c192:	f000 f92d 	bl	800c3f0 <_Bfree>
 800c196:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c19a:	ea43 0102 	orr.w	r1, r3, r2
 800c19e:	9b04      	ldr	r3, [sp, #16]
 800c1a0:	430b      	orrs	r3, r1
 800c1a2:	464d      	mov	r5, r9
 800c1a4:	d10f      	bne.n	800c1c6 <_dtoa_r+0xa66>
 800c1a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c1aa:	d02a      	beq.n	800c202 <_dtoa_r+0xaa2>
 800c1ac:	9b03      	ldr	r3, [sp, #12]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	dd02      	ble.n	800c1b8 <_dtoa_r+0xa58>
 800c1b2:	9b02      	ldr	r3, [sp, #8]
 800c1b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c1b8:	f88b a000 	strb.w	sl, [fp]
 800c1bc:	e775      	b.n	800c0aa <_dtoa_r+0x94a>
 800c1be:	4638      	mov	r0, r7
 800c1c0:	e7ba      	b.n	800c138 <_dtoa_r+0x9d8>
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	e7e2      	b.n	800c18c <_dtoa_r+0xa2c>
 800c1c6:	9b03      	ldr	r3, [sp, #12]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	db04      	blt.n	800c1d6 <_dtoa_r+0xa76>
 800c1cc:	9906      	ldr	r1, [sp, #24]
 800c1ce:	430b      	orrs	r3, r1
 800c1d0:	9904      	ldr	r1, [sp, #16]
 800c1d2:	430b      	orrs	r3, r1
 800c1d4:	d122      	bne.n	800c21c <_dtoa_r+0xabc>
 800c1d6:	2a00      	cmp	r2, #0
 800c1d8:	ddee      	ble.n	800c1b8 <_dtoa_r+0xa58>
 800c1da:	ee18 1a10 	vmov	r1, s16
 800c1de:	2201      	movs	r2, #1
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	f000 fad7 	bl	800c794 <__lshift>
 800c1e6:	4631      	mov	r1, r6
 800c1e8:	ee08 0a10 	vmov	s16, r0
 800c1ec:	f000 fb42 	bl	800c874 <__mcmp>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	dc03      	bgt.n	800c1fc <_dtoa_r+0xa9c>
 800c1f4:	d1e0      	bne.n	800c1b8 <_dtoa_r+0xa58>
 800c1f6:	f01a 0f01 	tst.w	sl, #1
 800c1fa:	d0dd      	beq.n	800c1b8 <_dtoa_r+0xa58>
 800c1fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c200:	d1d7      	bne.n	800c1b2 <_dtoa_r+0xa52>
 800c202:	2339      	movs	r3, #57	; 0x39
 800c204:	f88b 3000 	strb.w	r3, [fp]
 800c208:	462b      	mov	r3, r5
 800c20a:	461d      	mov	r5, r3
 800c20c:	3b01      	subs	r3, #1
 800c20e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c212:	2a39      	cmp	r2, #57	; 0x39
 800c214:	d071      	beq.n	800c2fa <_dtoa_r+0xb9a>
 800c216:	3201      	adds	r2, #1
 800c218:	701a      	strb	r2, [r3, #0]
 800c21a:	e746      	b.n	800c0aa <_dtoa_r+0x94a>
 800c21c:	2a00      	cmp	r2, #0
 800c21e:	dd07      	ble.n	800c230 <_dtoa_r+0xad0>
 800c220:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c224:	d0ed      	beq.n	800c202 <_dtoa_r+0xaa2>
 800c226:	f10a 0301 	add.w	r3, sl, #1
 800c22a:	f88b 3000 	strb.w	r3, [fp]
 800c22e:	e73c      	b.n	800c0aa <_dtoa_r+0x94a>
 800c230:	9b05      	ldr	r3, [sp, #20]
 800c232:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c236:	4599      	cmp	r9, r3
 800c238:	d047      	beq.n	800c2ca <_dtoa_r+0xb6a>
 800c23a:	ee18 1a10 	vmov	r1, s16
 800c23e:	2300      	movs	r3, #0
 800c240:	220a      	movs	r2, #10
 800c242:	4620      	mov	r0, r4
 800c244:	f000 f8f6 	bl	800c434 <__multadd>
 800c248:	45b8      	cmp	r8, r7
 800c24a:	ee08 0a10 	vmov	s16, r0
 800c24e:	f04f 0300 	mov.w	r3, #0
 800c252:	f04f 020a 	mov.w	r2, #10
 800c256:	4641      	mov	r1, r8
 800c258:	4620      	mov	r0, r4
 800c25a:	d106      	bne.n	800c26a <_dtoa_r+0xb0a>
 800c25c:	f000 f8ea 	bl	800c434 <__multadd>
 800c260:	4680      	mov	r8, r0
 800c262:	4607      	mov	r7, r0
 800c264:	f109 0901 	add.w	r9, r9, #1
 800c268:	e772      	b.n	800c150 <_dtoa_r+0x9f0>
 800c26a:	f000 f8e3 	bl	800c434 <__multadd>
 800c26e:	4639      	mov	r1, r7
 800c270:	4680      	mov	r8, r0
 800c272:	2300      	movs	r3, #0
 800c274:	220a      	movs	r2, #10
 800c276:	4620      	mov	r0, r4
 800c278:	f000 f8dc 	bl	800c434 <__multadd>
 800c27c:	4607      	mov	r7, r0
 800c27e:	e7f1      	b.n	800c264 <_dtoa_r+0xb04>
 800c280:	9b03      	ldr	r3, [sp, #12]
 800c282:	9302      	str	r3, [sp, #8]
 800c284:	9d01      	ldr	r5, [sp, #4]
 800c286:	ee18 0a10 	vmov	r0, s16
 800c28a:	4631      	mov	r1, r6
 800c28c:	f7ff f9dc 	bl	800b648 <quorem>
 800c290:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c294:	9b01      	ldr	r3, [sp, #4]
 800c296:	f805 ab01 	strb.w	sl, [r5], #1
 800c29a:	1aea      	subs	r2, r5, r3
 800c29c:	9b02      	ldr	r3, [sp, #8]
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	dd09      	ble.n	800c2b6 <_dtoa_r+0xb56>
 800c2a2:	ee18 1a10 	vmov	r1, s16
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	220a      	movs	r2, #10
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f000 f8c2 	bl	800c434 <__multadd>
 800c2b0:	ee08 0a10 	vmov	s16, r0
 800c2b4:	e7e7      	b.n	800c286 <_dtoa_r+0xb26>
 800c2b6:	9b02      	ldr	r3, [sp, #8]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	bfc8      	it	gt
 800c2bc:	461d      	movgt	r5, r3
 800c2be:	9b01      	ldr	r3, [sp, #4]
 800c2c0:	bfd8      	it	le
 800c2c2:	2501      	movle	r5, #1
 800c2c4:	441d      	add	r5, r3
 800c2c6:	f04f 0800 	mov.w	r8, #0
 800c2ca:	ee18 1a10 	vmov	r1, s16
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 fa5f 	bl	800c794 <__lshift>
 800c2d6:	4631      	mov	r1, r6
 800c2d8:	ee08 0a10 	vmov	s16, r0
 800c2dc:	f000 faca 	bl	800c874 <__mcmp>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	dc91      	bgt.n	800c208 <_dtoa_r+0xaa8>
 800c2e4:	d102      	bne.n	800c2ec <_dtoa_r+0xb8c>
 800c2e6:	f01a 0f01 	tst.w	sl, #1
 800c2ea:	d18d      	bne.n	800c208 <_dtoa_r+0xaa8>
 800c2ec:	462b      	mov	r3, r5
 800c2ee:	461d      	mov	r5, r3
 800c2f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2f4:	2a30      	cmp	r2, #48	; 0x30
 800c2f6:	d0fa      	beq.n	800c2ee <_dtoa_r+0xb8e>
 800c2f8:	e6d7      	b.n	800c0aa <_dtoa_r+0x94a>
 800c2fa:	9a01      	ldr	r2, [sp, #4]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d184      	bne.n	800c20a <_dtoa_r+0xaaa>
 800c300:	9b00      	ldr	r3, [sp, #0]
 800c302:	3301      	adds	r3, #1
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	2331      	movs	r3, #49	; 0x31
 800c308:	7013      	strb	r3, [r2, #0]
 800c30a:	e6ce      	b.n	800c0aa <_dtoa_r+0x94a>
 800c30c:	4b09      	ldr	r3, [pc, #36]	; (800c334 <_dtoa_r+0xbd4>)
 800c30e:	f7ff ba95 	b.w	800b83c <_dtoa_r+0xdc>
 800c312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c314:	2b00      	cmp	r3, #0
 800c316:	f47f aa6e 	bne.w	800b7f6 <_dtoa_r+0x96>
 800c31a:	4b07      	ldr	r3, [pc, #28]	; (800c338 <_dtoa_r+0xbd8>)
 800c31c:	f7ff ba8e 	b.w	800b83c <_dtoa_r+0xdc>
 800c320:	9b02      	ldr	r3, [sp, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	dcae      	bgt.n	800c284 <_dtoa_r+0xb24>
 800c326:	9b06      	ldr	r3, [sp, #24]
 800c328:	2b02      	cmp	r3, #2
 800c32a:	f73f aea8 	bgt.w	800c07e <_dtoa_r+0x91e>
 800c32e:	e7a9      	b.n	800c284 <_dtoa_r+0xb24>
 800c330:	0800f11f 	.word	0x0800f11f
 800c334:	0800f07c 	.word	0x0800f07c
 800c338:	0800f0a0 	.word	0x0800f0a0

0800c33c <_localeconv_r>:
 800c33c:	4800      	ldr	r0, [pc, #0]	; (800c340 <_localeconv_r+0x4>)
 800c33e:	4770      	bx	lr
 800c340:	200001b4 	.word	0x200001b4

0800c344 <malloc>:
 800c344:	4b02      	ldr	r3, [pc, #8]	; (800c350 <malloc+0xc>)
 800c346:	4601      	mov	r1, r0
 800c348:	6818      	ldr	r0, [r3, #0]
 800c34a:	f000 bc17 	b.w	800cb7c <_malloc_r>
 800c34e:	bf00      	nop
 800c350:	20000060 	.word	0x20000060

0800c354 <memcpy>:
 800c354:	440a      	add	r2, r1
 800c356:	4291      	cmp	r1, r2
 800c358:	f100 33ff 	add.w	r3, r0, #4294967295
 800c35c:	d100      	bne.n	800c360 <memcpy+0xc>
 800c35e:	4770      	bx	lr
 800c360:	b510      	push	{r4, lr}
 800c362:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c36a:	4291      	cmp	r1, r2
 800c36c:	d1f9      	bne.n	800c362 <memcpy+0xe>
 800c36e:	bd10      	pop	{r4, pc}

0800c370 <_Balloc>:
 800c370:	b570      	push	{r4, r5, r6, lr}
 800c372:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c374:	4604      	mov	r4, r0
 800c376:	460d      	mov	r5, r1
 800c378:	b976      	cbnz	r6, 800c398 <_Balloc+0x28>
 800c37a:	2010      	movs	r0, #16
 800c37c:	f7ff ffe2 	bl	800c344 <malloc>
 800c380:	4602      	mov	r2, r0
 800c382:	6260      	str	r0, [r4, #36]	; 0x24
 800c384:	b920      	cbnz	r0, 800c390 <_Balloc+0x20>
 800c386:	4b18      	ldr	r3, [pc, #96]	; (800c3e8 <_Balloc+0x78>)
 800c388:	4818      	ldr	r0, [pc, #96]	; (800c3ec <_Balloc+0x7c>)
 800c38a:	2166      	movs	r1, #102	; 0x66
 800c38c:	f000 fdd6 	bl	800cf3c <__assert_func>
 800c390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c394:	6006      	str	r6, [r0, #0]
 800c396:	60c6      	str	r6, [r0, #12]
 800c398:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c39a:	68f3      	ldr	r3, [r6, #12]
 800c39c:	b183      	cbz	r3, 800c3c0 <_Balloc+0x50>
 800c39e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3a6:	b9b8      	cbnz	r0, 800c3d8 <_Balloc+0x68>
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	fa01 f605 	lsl.w	r6, r1, r5
 800c3ae:	1d72      	adds	r2, r6, #5
 800c3b0:	0092      	lsls	r2, r2, #2
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f000 fb60 	bl	800ca78 <_calloc_r>
 800c3b8:	b160      	cbz	r0, 800c3d4 <_Balloc+0x64>
 800c3ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c3be:	e00e      	b.n	800c3de <_Balloc+0x6e>
 800c3c0:	2221      	movs	r2, #33	; 0x21
 800c3c2:	2104      	movs	r1, #4
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f000 fb57 	bl	800ca78 <_calloc_r>
 800c3ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3cc:	60f0      	str	r0, [r6, #12]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1e4      	bne.n	800c39e <_Balloc+0x2e>
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	bd70      	pop	{r4, r5, r6, pc}
 800c3d8:	6802      	ldr	r2, [r0, #0]
 800c3da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3de:	2300      	movs	r3, #0
 800c3e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3e4:	e7f7      	b.n	800c3d6 <_Balloc+0x66>
 800c3e6:	bf00      	nop
 800c3e8:	0800f0ad 	.word	0x0800f0ad
 800c3ec:	0800f130 	.word	0x0800f130

0800c3f0 <_Bfree>:
 800c3f0:	b570      	push	{r4, r5, r6, lr}
 800c3f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c3f4:	4605      	mov	r5, r0
 800c3f6:	460c      	mov	r4, r1
 800c3f8:	b976      	cbnz	r6, 800c418 <_Bfree+0x28>
 800c3fa:	2010      	movs	r0, #16
 800c3fc:	f7ff ffa2 	bl	800c344 <malloc>
 800c400:	4602      	mov	r2, r0
 800c402:	6268      	str	r0, [r5, #36]	; 0x24
 800c404:	b920      	cbnz	r0, 800c410 <_Bfree+0x20>
 800c406:	4b09      	ldr	r3, [pc, #36]	; (800c42c <_Bfree+0x3c>)
 800c408:	4809      	ldr	r0, [pc, #36]	; (800c430 <_Bfree+0x40>)
 800c40a:	218a      	movs	r1, #138	; 0x8a
 800c40c:	f000 fd96 	bl	800cf3c <__assert_func>
 800c410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c414:	6006      	str	r6, [r0, #0]
 800c416:	60c6      	str	r6, [r0, #12]
 800c418:	b13c      	cbz	r4, 800c42a <_Bfree+0x3a>
 800c41a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c41c:	6862      	ldr	r2, [r4, #4]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c424:	6021      	str	r1, [r4, #0]
 800c426:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c42a:	bd70      	pop	{r4, r5, r6, pc}
 800c42c:	0800f0ad 	.word	0x0800f0ad
 800c430:	0800f130 	.word	0x0800f130

0800c434 <__multadd>:
 800c434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c438:	690d      	ldr	r5, [r1, #16]
 800c43a:	4607      	mov	r7, r0
 800c43c:	460c      	mov	r4, r1
 800c43e:	461e      	mov	r6, r3
 800c440:	f101 0c14 	add.w	ip, r1, #20
 800c444:	2000      	movs	r0, #0
 800c446:	f8dc 3000 	ldr.w	r3, [ip]
 800c44a:	b299      	uxth	r1, r3
 800c44c:	fb02 6101 	mla	r1, r2, r1, r6
 800c450:	0c1e      	lsrs	r6, r3, #16
 800c452:	0c0b      	lsrs	r3, r1, #16
 800c454:	fb02 3306 	mla	r3, r2, r6, r3
 800c458:	b289      	uxth	r1, r1
 800c45a:	3001      	adds	r0, #1
 800c45c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c460:	4285      	cmp	r5, r0
 800c462:	f84c 1b04 	str.w	r1, [ip], #4
 800c466:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c46a:	dcec      	bgt.n	800c446 <__multadd+0x12>
 800c46c:	b30e      	cbz	r6, 800c4b2 <__multadd+0x7e>
 800c46e:	68a3      	ldr	r3, [r4, #8]
 800c470:	42ab      	cmp	r3, r5
 800c472:	dc19      	bgt.n	800c4a8 <__multadd+0x74>
 800c474:	6861      	ldr	r1, [r4, #4]
 800c476:	4638      	mov	r0, r7
 800c478:	3101      	adds	r1, #1
 800c47a:	f7ff ff79 	bl	800c370 <_Balloc>
 800c47e:	4680      	mov	r8, r0
 800c480:	b928      	cbnz	r0, 800c48e <__multadd+0x5a>
 800c482:	4602      	mov	r2, r0
 800c484:	4b0c      	ldr	r3, [pc, #48]	; (800c4b8 <__multadd+0x84>)
 800c486:	480d      	ldr	r0, [pc, #52]	; (800c4bc <__multadd+0x88>)
 800c488:	21b5      	movs	r1, #181	; 0xb5
 800c48a:	f000 fd57 	bl	800cf3c <__assert_func>
 800c48e:	6922      	ldr	r2, [r4, #16]
 800c490:	3202      	adds	r2, #2
 800c492:	f104 010c 	add.w	r1, r4, #12
 800c496:	0092      	lsls	r2, r2, #2
 800c498:	300c      	adds	r0, #12
 800c49a:	f7ff ff5b 	bl	800c354 <memcpy>
 800c49e:	4621      	mov	r1, r4
 800c4a0:	4638      	mov	r0, r7
 800c4a2:	f7ff ffa5 	bl	800c3f0 <_Bfree>
 800c4a6:	4644      	mov	r4, r8
 800c4a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4ac:	3501      	adds	r5, #1
 800c4ae:	615e      	str	r6, [r3, #20]
 800c4b0:	6125      	str	r5, [r4, #16]
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b8:	0800f11f 	.word	0x0800f11f
 800c4bc:	0800f130 	.word	0x0800f130

0800c4c0 <__hi0bits>:
 800c4c0:	0c03      	lsrs	r3, r0, #16
 800c4c2:	041b      	lsls	r3, r3, #16
 800c4c4:	b9d3      	cbnz	r3, 800c4fc <__hi0bits+0x3c>
 800c4c6:	0400      	lsls	r0, r0, #16
 800c4c8:	2310      	movs	r3, #16
 800c4ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c4ce:	bf04      	itt	eq
 800c4d0:	0200      	lsleq	r0, r0, #8
 800c4d2:	3308      	addeq	r3, #8
 800c4d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c4d8:	bf04      	itt	eq
 800c4da:	0100      	lsleq	r0, r0, #4
 800c4dc:	3304      	addeq	r3, #4
 800c4de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c4e2:	bf04      	itt	eq
 800c4e4:	0080      	lsleq	r0, r0, #2
 800c4e6:	3302      	addeq	r3, #2
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	db05      	blt.n	800c4f8 <__hi0bits+0x38>
 800c4ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c4f0:	f103 0301 	add.w	r3, r3, #1
 800c4f4:	bf08      	it	eq
 800c4f6:	2320      	moveq	r3, #32
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	4770      	bx	lr
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	e7e4      	b.n	800c4ca <__hi0bits+0xa>

0800c500 <__lo0bits>:
 800c500:	6803      	ldr	r3, [r0, #0]
 800c502:	f013 0207 	ands.w	r2, r3, #7
 800c506:	4601      	mov	r1, r0
 800c508:	d00b      	beq.n	800c522 <__lo0bits+0x22>
 800c50a:	07da      	lsls	r2, r3, #31
 800c50c:	d423      	bmi.n	800c556 <__lo0bits+0x56>
 800c50e:	0798      	lsls	r0, r3, #30
 800c510:	bf49      	itett	mi
 800c512:	085b      	lsrmi	r3, r3, #1
 800c514:	089b      	lsrpl	r3, r3, #2
 800c516:	2001      	movmi	r0, #1
 800c518:	600b      	strmi	r3, [r1, #0]
 800c51a:	bf5c      	itt	pl
 800c51c:	600b      	strpl	r3, [r1, #0]
 800c51e:	2002      	movpl	r0, #2
 800c520:	4770      	bx	lr
 800c522:	b298      	uxth	r0, r3
 800c524:	b9a8      	cbnz	r0, 800c552 <__lo0bits+0x52>
 800c526:	0c1b      	lsrs	r3, r3, #16
 800c528:	2010      	movs	r0, #16
 800c52a:	b2da      	uxtb	r2, r3
 800c52c:	b90a      	cbnz	r2, 800c532 <__lo0bits+0x32>
 800c52e:	3008      	adds	r0, #8
 800c530:	0a1b      	lsrs	r3, r3, #8
 800c532:	071a      	lsls	r2, r3, #28
 800c534:	bf04      	itt	eq
 800c536:	091b      	lsreq	r3, r3, #4
 800c538:	3004      	addeq	r0, #4
 800c53a:	079a      	lsls	r2, r3, #30
 800c53c:	bf04      	itt	eq
 800c53e:	089b      	lsreq	r3, r3, #2
 800c540:	3002      	addeq	r0, #2
 800c542:	07da      	lsls	r2, r3, #31
 800c544:	d403      	bmi.n	800c54e <__lo0bits+0x4e>
 800c546:	085b      	lsrs	r3, r3, #1
 800c548:	f100 0001 	add.w	r0, r0, #1
 800c54c:	d005      	beq.n	800c55a <__lo0bits+0x5a>
 800c54e:	600b      	str	r3, [r1, #0]
 800c550:	4770      	bx	lr
 800c552:	4610      	mov	r0, r2
 800c554:	e7e9      	b.n	800c52a <__lo0bits+0x2a>
 800c556:	2000      	movs	r0, #0
 800c558:	4770      	bx	lr
 800c55a:	2020      	movs	r0, #32
 800c55c:	4770      	bx	lr
	...

0800c560 <__i2b>:
 800c560:	b510      	push	{r4, lr}
 800c562:	460c      	mov	r4, r1
 800c564:	2101      	movs	r1, #1
 800c566:	f7ff ff03 	bl	800c370 <_Balloc>
 800c56a:	4602      	mov	r2, r0
 800c56c:	b928      	cbnz	r0, 800c57a <__i2b+0x1a>
 800c56e:	4b05      	ldr	r3, [pc, #20]	; (800c584 <__i2b+0x24>)
 800c570:	4805      	ldr	r0, [pc, #20]	; (800c588 <__i2b+0x28>)
 800c572:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c576:	f000 fce1 	bl	800cf3c <__assert_func>
 800c57a:	2301      	movs	r3, #1
 800c57c:	6144      	str	r4, [r0, #20]
 800c57e:	6103      	str	r3, [r0, #16]
 800c580:	bd10      	pop	{r4, pc}
 800c582:	bf00      	nop
 800c584:	0800f11f 	.word	0x0800f11f
 800c588:	0800f130 	.word	0x0800f130

0800c58c <__multiply>:
 800c58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c590:	4691      	mov	r9, r2
 800c592:	690a      	ldr	r2, [r1, #16]
 800c594:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c598:	429a      	cmp	r2, r3
 800c59a:	bfb8      	it	lt
 800c59c:	460b      	movlt	r3, r1
 800c59e:	460c      	mov	r4, r1
 800c5a0:	bfbc      	itt	lt
 800c5a2:	464c      	movlt	r4, r9
 800c5a4:	4699      	movlt	r9, r3
 800c5a6:	6927      	ldr	r7, [r4, #16]
 800c5a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c5ac:	68a3      	ldr	r3, [r4, #8]
 800c5ae:	6861      	ldr	r1, [r4, #4]
 800c5b0:	eb07 060a 	add.w	r6, r7, sl
 800c5b4:	42b3      	cmp	r3, r6
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	bfb8      	it	lt
 800c5ba:	3101      	addlt	r1, #1
 800c5bc:	f7ff fed8 	bl	800c370 <_Balloc>
 800c5c0:	b930      	cbnz	r0, 800c5d0 <__multiply+0x44>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	4b44      	ldr	r3, [pc, #272]	; (800c6d8 <__multiply+0x14c>)
 800c5c6:	4845      	ldr	r0, [pc, #276]	; (800c6dc <__multiply+0x150>)
 800c5c8:	f240 115d 	movw	r1, #349	; 0x15d
 800c5cc:	f000 fcb6 	bl	800cf3c <__assert_func>
 800c5d0:	f100 0514 	add.w	r5, r0, #20
 800c5d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c5d8:	462b      	mov	r3, r5
 800c5da:	2200      	movs	r2, #0
 800c5dc:	4543      	cmp	r3, r8
 800c5de:	d321      	bcc.n	800c624 <__multiply+0x98>
 800c5e0:	f104 0314 	add.w	r3, r4, #20
 800c5e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c5e8:	f109 0314 	add.w	r3, r9, #20
 800c5ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c5f0:	9202      	str	r2, [sp, #8]
 800c5f2:	1b3a      	subs	r2, r7, r4
 800c5f4:	3a15      	subs	r2, #21
 800c5f6:	f022 0203 	bic.w	r2, r2, #3
 800c5fa:	3204      	adds	r2, #4
 800c5fc:	f104 0115 	add.w	r1, r4, #21
 800c600:	428f      	cmp	r7, r1
 800c602:	bf38      	it	cc
 800c604:	2204      	movcc	r2, #4
 800c606:	9201      	str	r2, [sp, #4]
 800c608:	9a02      	ldr	r2, [sp, #8]
 800c60a:	9303      	str	r3, [sp, #12]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d80c      	bhi.n	800c62a <__multiply+0x9e>
 800c610:	2e00      	cmp	r6, #0
 800c612:	dd03      	ble.n	800c61c <__multiply+0x90>
 800c614:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d05a      	beq.n	800c6d2 <__multiply+0x146>
 800c61c:	6106      	str	r6, [r0, #16]
 800c61e:	b005      	add	sp, #20
 800c620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c624:	f843 2b04 	str.w	r2, [r3], #4
 800c628:	e7d8      	b.n	800c5dc <__multiply+0x50>
 800c62a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c62e:	f1ba 0f00 	cmp.w	sl, #0
 800c632:	d024      	beq.n	800c67e <__multiply+0xf2>
 800c634:	f104 0e14 	add.w	lr, r4, #20
 800c638:	46a9      	mov	r9, r5
 800c63a:	f04f 0c00 	mov.w	ip, #0
 800c63e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c642:	f8d9 1000 	ldr.w	r1, [r9]
 800c646:	fa1f fb82 	uxth.w	fp, r2
 800c64a:	b289      	uxth	r1, r1
 800c64c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c650:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c654:	f8d9 2000 	ldr.w	r2, [r9]
 800c658:	4461      	add	r1, ip
 800c65a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c65e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c662:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c666:	b289      	uxth	r1, r1
 800c668:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c66c:	4577      	cmp	r7, lr
 800c66e:	f849 1b04 	str.w	r1, [r9], #4
 800c672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c676:	d8e2      	bhi.n	800c63e <__multiply+0xb2>
 800c678:	9a01      	ldr	r2, [sp, #4]
 800c67a:	f845 c002 	str.w	ip, [r5, r2]
 800c67e:	9a03      	ldr	r2, [sp, #12]
 800c680:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c684:	3304      	adds	r3, #4
 800c686:	f1b9 0f00 	cmp.w	r9, #0
 800c68a:	d020      	beq.n	800c6ce <__multiply+0x142>
 800c68c:	6829      	ldr	r1, [r5, #0]
 800c68e:	f104 0c14 	add.w	ip, r4, #20
 800c692:	46ae      	mov	lr, r5
 800c694:	f04f 0a00 	mov.w	sl, #0
 800c698:	f8bc b000 	ldrh.w	fp, [ip]
 800c69c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c6a0:	fb09 220b 	mla	r2, r9, fp, r2
 800c6a4:	4492      	add	sl, r2
 800c6a6:	b289      	uxth	r1, r1
 800c6a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c6ac:	f84e 1b04 	str.w	r1, [lr], #4
 800c6b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c6b4:	f8be 1000 	ldrh.w	r1, [lr]
 800c6b8:	0c12      	lsrs	r2, r2, #16
 800c6ba:	fb09 1102 	mla	r1, r9, r2, r1
 800c6be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c6c2:	4567      	cmp	r7, ip
 800c6c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c6c8:	d8e6      	bhi.n	800c698 <__multiply+0x10c>
 800c6ca:	9a01      	ldr	r2, [sp, #4]
 800c6cc:	50a9      	str	r1, [r5, r2]
 800c6ce:	3504      	adds	r5, #4
 800c6d0:	e79a      	b.n	800c608 <__multiply+0x7c>
 800c6d2:	3e01      	subs	r6, #1
 800c6d4:	e79c      	b.n	800c610 <__multiply+0x84>
 800c6d6:	bf00      	nop
 800c6d8:	0800f11f 	.word	0x0800f11f
 800c6dc:	0800f130 	.word	0x0800f130

0800c6e0 <__pow5mult>:
 800c6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6e4:	4615      	mov	r5, r2
 800c6e6:	f012 0203 	ands.w	r2, r2, #3
 800c6ea:	4606      	mov	r6, r0
 800c6ec:	460f      	mov	r7, r1
 800c6ee:	d007      	beq.n	800c700 <__pow5mult+0x20>
 800c6f0:	4c25      	ldr	r4, [pc, #148]	; (800c788 <__pow5mult+0xa8>)
 800c6f2:	3a01      	subs	r2, #1
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6fa:	f7ff fe9b 	bl	800c434 <__multadd>
 800c6fe:	4607      	mov	r7, r0
 800c700:	10ad      	asrs	r5, r5, #2
 800c702:	d03d      	beq.n	800c780 <__pow5mult+0xa0>
 800c704:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c706:	b97c      	cbnz	r4, 800c728 <__pow5mult+0x48>
 800c708:	2010      	movs	r0, #16
 800c70a:	f7ff fe1b 	bl	800c344 <malloc>
 800c70e:	4602      	mov	r2, r0
 800c710:	6270      	str	r0, [r6, #36]	; 0x24
 800c712:	b928      	cbnz	r0, 800c720 <__pow5mult+0x40>
 800c714:	4b1d      	ldr	r3, [pc, #116]	; (800c78c <__pow5mult+0xac>)
 800c716:	481e      	ldr	r0, [pc, #120]	; (800c790 <__pow5mult+0xb0>)
 800c718:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c71c:	f000 fc0e 	bl	800cf3c <__assert_func>
 800c720:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c724:	6004      	str	r4, [r0, #0]
 800c726:	60c4      	str	r4, [r0, #12]
 800c728:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c72c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c730:	b94c      	cbnz	r4, 800c746 <__pow5mult+0x66>
 800c732:	f240 2171 	movw	r1, #625	; 0x271
 800c736:	4630      	mov	r0, r6
 800c738:	f7ff ff12 	bl	800c560 <__i2b>
 800c73c:	2300      	movs	r3, #0
 800c73e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c742:	4604      	mov	r4, r0
 800c744:	6003      	str	r3, [r0, #0]
 800c746:	f04f 0900 	mov.w	r9, #0
 800c74a:	07eb      	lsls	r3, r5, #31
 800c74c:	d50a      	bpl.n	800c764 <__pow5mult+0x84>
 800c74e:	4639      	mov	r1, r7
 800c750:	4622      	mov	r2, r4
 800c752:	4630      	mov	r0, r6
 800c754:	f7ff ff1a 	bl	800c58c <__multiply>
 800c758:	4639      	mov	r1, r7
 800c75a:	4680      	mov	r8, r0
 800c75c:	4630      	mov	r0, r6
 800c75e:	f7ff fe47 	bl	800c3f0 <_Bfree>
 800c762:	4647      	mov	r7, r8
 800c764:	106d      	asrs	r5, r5, #1
 800c766:	d00b      	beq.n	800c780 <__pow5mult+0xa0>
 800c768:	6820      	ldr	r0, [r4, #0]
 800c76a:	b938      	cbnz	r0, 800c77c <__pow5mult+0x9c>
 800c76c:	4622      	mov	r2, r4
 800c76e:	4621      	mov	r1, r4
 800c770:	4630      	mov	r0, r6
 800c772:	f7ff ff0b 	bl	800c58c <__multiply>
 800c776:	6020      	str	r0, [r4, #0]
 800c778:	f8c0 9000 	str.w	r9, [r0]
 800c77c:	4604      	mov	r4, r0
 800c77e:	e7e4      	b.n	800c74a <__pow5mult+0x6a>
 800c780:	4638      	mov	r0, r7
 800c782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c786:	bf00      	nop
 800c788:	0800f280 	.word	0x0800f280
 800c78c:	0800f0ad 	.word	0x0800f0ad
 800c790:	0800f130 	.word	0x0800f130

0800c794 <__lshift>:
 800c794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c798:	460c      	mov	r4, r1
 800c79a:	6849      	ldr	r1, [r1, #4]
 800c79c:	6923      	ldr	r3, [r4, #16]
 800c79e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7a2:	68a3      	ldr	r3, [r4, #8]
 800c7a4:	4607      	mov	r7, r0
 800c7a6:	4691      	mov	r9, r2
 800c7a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7ac:	f108 0601 	add.w	r6, r8, #1
 800c7b0:	42b3      	cmp	r3, r6
 800c7b2:	db0b      	blt.n	800c7cc <__lshift+0x38>
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	f7ff fddb 	bl	800c370 <_Balloc>
 800c7ba:	4605      	mov	r5, r0
 800c7bc:	b948      	cbnz	r0, 800c7d2 <__lshift+0x3e>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	4b2a      	ldr	r3, [pc, #168]	; (800c86c <__lshift+0xd8>)
 800c7c2:	482b      	ldr	r0, [pc, #172]	; (800c870 <__lshift+0xdc>)
 800c7c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c7c8:	f000 fbb8 	bl	800cf3c <__assert_func>
 800c7cc:	3101      	adds	r1, #1
 800c7ce:	005b      	lsls	r3, r3, #1
 800c7d0:	e7ee      	b.n	800c7b0 <__lshift+0x1c>
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f100 0114 	add.w	r1, r0, #20
 800c7d8:	f100 0210 	add.w	r2, r0, #16
 800c7dc:	4618      	mov	r0, r3
 800c7de:	4553      	cmp	r3, sl
 800c7e0:	db37      	blt.n	800c852 <__lshift+0xbe>
 800c7e2:	6920      	ldr	r0, [r4, #16]
 800c7e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7e8:	f104 0314 	add.w	r3, r4, #20
 800c7ec:	f019 091f 	ands.w	r9, r9, #31
 800c7f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c7f8:	d02f      	beq.n	800c85a <__lshift+0xc6>
 800c7fa:	f1c9 0e20 	rsb	lr, r9, #32
 800c7fe:	468a      	mov	sl, r1
 800c800:	f04f 0c00 	mov.w	ip, #0
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	fa02 f209 	lsl.w	r2, r2, r9
 800c80a:	ea42 020c 	orr.w	r2, r2, ip
 800c80e:	f84a 2b04 	str.w	r2, [sl], #4
 800c812:	f853 2b04 	ldr.w	r2, [r3], #4
 800c816:	4298      	cmp	r0, r3
 800c818:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c81c:	d8f2      	bhi.n	800c804 <__lshift+0x70>
 800c81e:	1b03      	subs	r3, r0, r4
 800c820:	3b15      	subs	r3, #21
 800c822:	f023 0303 	bic.w	r3, r3, #3
 800c826:	3304      	adds	r3, #4
 800c828:	f104 0215 	add.w	r2, r4, #21
 800c82c:	4290      	cmp	r0, r2
 800c82e:	bf38      	it	cc
 800c830:	2304      	movcc	r3, #4
 800c832:	f841 c003 	str.w	ip, [r1, r3]
 800c836:	f1bc 0f00 	cmp.w	ip, #0
 800c83a:	d001      	beq.n	800c840 <__lshift+0xac>
 800c83c:	f108 0602 	add.w	r6, r8, #2
 800c840:	3e01      	subs	r6, #1
 800c842:	4638      	mov	r0, r7
 800c844:	612e      	str	r6, [r5, #16]
 800c846:	4621      	mov	r1, r4
 800c848:	f7ff fdd2 	bl	800c3f0 <_Bfree>
 800c84c:	4628      	mov	r0, r5
 800c84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c852:	f842 0f04 	str.w	r0, [r2, #4]!
 800c856:	3301      	adds	r3, #1
 800c858:	e7c1      	b.n	800c7de <__lshift+0x4a>
 800c85a:	3904      	subs	r1, #4
 800c85c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c860:	f841 2f04 	str.w	r2, [r1, #4]!
 800c864:	4298      	cmp	r0, r3
 800c866:	d8f9      	bhi.n	800c85c <__lshift+0xc8>
 800c868:	e7ea      	b.n	800c840 <__lshift+0xac>
 800c86a:	bf00      	nop
 800c86c:	0800f11f 	.word	0x0800f11f
 800c870:	0800f130 	.word	0x0800f130

0800c874 <__mcmp>:
 800c874:	b530      	push	{r4, r5, lr}
 800c876:	6902      	ldr	r2, [r0, #16]
 800c878:	690c      	ldr	r4, [r1, #16]
 800c87a:	1b12      	subs	r2, r2, r4
 800c87c:	d10e      	bne.n	800c89c <__mcmp+0x28>
 800c87e:	f100 0314 	add.w	r3, r0, #20
 800c882:	3114      	adds	r1, #20
 800c884:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c888:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c88c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c890:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c894:	42a5      	cmp	r5, r4
 800c896:	d003      	beq.n	800c8a0 <__mcmp+0x2c>
 800c898:	d305      	bcc.n	800c8a6 <__mcmp+0x32>
 800c89a:	2201      	movs	r2, #1
 800c89c:	4610      	mov	r0, r2
 800c89e:	bd30      	pop	{r4, r5, pc}
 800c8a0:	4283      	cmp	r3, r0
 800c8a2:	d3f3      	bcc.n	800c88c <__mcmp+0x18>
 800c8a4:	e7fa      	b.n	800c89c <__mcmp+0x28>
 800c8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8aa:	e7f7      	b.n	800c89c <__mcmp+0x28>

0800c8ac <__mdiff>:
 800c8ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b0:	460c      	mov	r4, r1
 800c8b2:	4606      	mov	r6, r0
 800c8b4:	4611      	mov	r1, r2
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	4690      	mov	r8, r2
 800c8ba:	f7ff ffdb 	bl	800c874 <__mcmp>
 800c8be:	1e05      	subs	r5, r0, #0
 800c8c0:	d110      	bne.n	800c8e4 <__mdiff+0x38>
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f7ff fd53 	bl	800c370 <_Balloc>
 800c8ca:	b930      	cbnz	r0, 800c8da <__mdiff+0x2e>
 800c8cc:	4b3a      	ldr	r3, [pc, #232]	; (800c9b8 <__mdiff+0x10c>)
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	f240 2132 	movw	r1, #562	; 0x232
 800c8d4:	4839      	ldr	r0, [pc, #228]	; (800c9bc <__mdiff+0x110>)
 800c8d6:	f000 fb31 	bl	800cf3c <__assert_func>
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e4:	bfa4      	itt	ge
 800c8e6:	4643      	movge	r3, r8
 800c8e8:	46a0      	movge	r8, r4
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c8f0:	bfa6      	itte	ge
 800c8f2:	461c      	movge	r4, r3
 800c8f4:	2500      	movge	r5, #0
 800c8f6:	2501      	movlt	r5, #1
 800c8f8:	f7ff fd3a 	bl	800c370 <_Balloc>
 800c8fc:	b920      	cbnz	r0, 800c908 <__mdiff+0x5c>
 800c8fe:	4b2e      	ldr	r3, [pc, #184]	; (800c9b8 <__mdiff+0x10c>)
 800c900:	4602      	mov	r2, r0
 800c902:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c906:	e7e5      	b.n	800c8d4 <__mdiff+0x28>
 800c908:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c90c:	6926      	ldr	r6, [r4, #16]
 800c90e:	60c5      	str	r5, [r0, #12]
 800c910:	f104 0914 	add.w	r9, r4, #20
 800c914:	f108 0514 	add.w	r5, r8, #20
 800c918:	f100 0e14 	add.w	lr, r0, #20
 800c91c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c920:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c924:	f108 0210 	add.w	r2, r8, #16
 800c928:	46f2      	mov	sl, lr
 800c92a:	2100      	movs	r1, #0
 800c92c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c930:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c934:	fa1f f883 	uxth.w	r8, r3
 800c938:	fa11 f18b 	uxtah	r1, r1, fp
 800c93c:	0c1b      	lsrs	r3, r3, #16
 800c93e:	eba1 0808 	sub.w	r8, r1, r8
 800c942:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c946:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c94a:	fa1f f888 	uxth.w	r8, r8
 800c94e:	1419      	asrs	r1, r3, #16
 800c950:	454e      	cmp	r6, r9
 800c952:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c956:	f84a 3b04 	str.w	r3, [sl], #4
 800c95a:	d8e7      	bhi.n	800c92c <__mdiff+0x80>
 800c95c:	1b33      	subs	r3, r6, r4
 800c95e:	3b15      	subs	r3, #21
 800c960:	f023 0303 	bic.w	r3, r3, #3
 800c964:	3304      	adds	r3, #4
 800c966:	3415      	adds	r4, #21
 800c968:	42a6      	cmp	r6, r4
 800c96a:	bf38      	it	cc
 800c96c:	2304      	movcc	r3, #4
 800c96e:	441d      	add	r5, r3
 800c970:	4473      	add	r3, lr
 800c972:	469e      	mov	lr, r3
 800c974:	462e      	mov	r6, r5
 800c976:	4566      	cmp	r6, ip
 800c978:	d30e      	bcc.n	800c998 <__mdiff+0xec>
 800c97a:	f10c 0203 	add.w	r2, ip, #3
 800c97e:	1b52      	subs	r2, r2, r5
 800c980:	f022 0203 	bic.w	r2, r2, #3
 800c984:	3d03      	subs	r5, #3
 800c986:	45ac      	cmp	ip, r5
 800c988:	bf38      	it	cc
 800c98a:	2200      	movcc	r2, #0
 800c98c:	441a      	add	r2, r3
 800c98e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c992:	b17b      	cbz	r3, 800c9b4 <__mdiff+0x108>
 800c994:	6107      	str	r7, [r0, #16]
 800c996:	e7a3      	b.n	800c8e0 <__mdiff+0x34>
 800c998:	f856 8b04 	ldr.w	r8, [r6], #4
 800c99c:	fa11 f288 	uxtah	r2, r1, r8
 800c9a0:	1414      	asrs	r4, r2, #16
 800c9a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c9a6:	b292      	uxth	r2, r2
 800c9a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c9ac:	f84e 2b04 	str.w	r2, [lr], #4
 800c9b0:	1421      	asrs	r1, r4, #16
 800c9b2:	e7e0      	b.n	800c976 <__mdiff+0xca>
 800c9b4:	3f01      	subs	r7, #1
 800c9b6:	e7ea      	b.n	800c98e <__mdiff+0xe2>
 800c9b8:	0800f11f 	.word	0x0800f11f
 800c9bc:	0800f130 	.word	0x0800f130

0800c9c0 <__d2b>:
 800c9c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9c4:	4689      	mov	r9, r1
 800c9c6:	2101      	movs	r1, #1
 800c9c8:	ec57 6b10 	vmov	r6, r7, d0
 800c9cc:	4690      	mov	r8, r2
 800c9ce:	f7ff fccf 	bl	800c370 <_Balloc>
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	b930      	cbnz	r0, 800c9e4 <__d2b+0x24>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	4b25      	ldr	r3, [pc, #148]	; (800ca70 <__d2b+0xb0>)
 800c9da:	4826      	ldr	r0, [pc, #152]	; (800ca74 <__d2b+0xb4>)
 800c9dc:	f240 310a 	movw	r1, #778	; 0x30a
 800c9e0:	f000 faac 	bl	800cf3c <__assert_func>
 800c9e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c9e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9ec:	bb35      	cbnz	r5, 800ca3c <__d2b+0x7c>
 800c9ee:	2e00      	cmp	r6, #0
 800c9f0:	9301      	str	r3, [sp, #4]
 800c9f2:	d028      	beq.n	800ca46 <__d2b+0x86>
 800c9f4:	4668      	mov	r0, sp
 800c9f6:	9600      	str	r6, [sp, #0]
 800c9f8:	f7ff fd82 	bl	800c500 <__lo0bits>
 800c9fc:	9900      	ldr	r1, [sp, #0]
 800c9fe:	b300      	cbz	r0, 800ca42 <__d2b+0x82>
 800ca00:	9a01      	ldr	r2, [sp, #4]
 800ca02:	f1c0 0320 	rsb	r3, r0, #32
 800ca06:	fa02 f303 	lsl.w	r3, r2, r3
 800ca0a:	430b      	orrs	r3, r1
 800ca0c:	40c2      	lsrs	r2, r0
 800ca0e:	6163      	str	r3, [r4, #20]
 800ca10:	9201      	str	r2, [sp, #4]
 800ca12:	9b01      	ldr	r3, [sp, #4]
 800ca14:	61a3      	str	r3, [r4, #24]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	bf14      	ite	ne
 800ca1a:	2202      	movne	r2, #2
 800ca1c:	2201      	moveq	r2, #1
 800ca1e:	6122      	str	r2, [r4, #16]
 800ca20:	b1d5      	cbz	r5, 800ca58 <__d2b+0x98>
 800ca22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca26:	4405      	add	r5, r0
 800ca28:	f8c9 5000 	str.w	r5, [r9]
 800ca2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca30:	f8c8 0000 	str.w	r0, [r8]
 800ca34:	4620      	mov	r0, r4
 800ca36:	b003      	add	sp, #12
 800ca38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca40:	e7d5      	b.n	800c9ee <__d2b+0x2e>
 800ca42:	6161      	str	r1, [r4, #20]
 800ca44:	e7e5      	b.n	800ca12 <__d2b+0x52>
 800ca46:	a801      	add	r0, sp, #4
 800ca48:	f7ff fd5a 	bl	800c500 <__lo0bits>
 800ca4c:	9b01      	ldr	r3, [sp, #4]
 800ca4e:	6163      	str	r3, [r4, #20]
 800ca50:	2201      	movs	r2, #1
 800ca52:	6122      	str	r2, [r4, #16]
 800ca54:	3020      	adds	r0, #32
 800ca56:	e7e3      	b.n	800ca20 <__d2b+0x60>
 800ca58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca60:	f8c9 0000 	str.w	r0, [r9]
 800ca64:	6918      	ldr	r0, [r3, #16]
 800ca66:	f7ff fd2b 	bl	800c4c0 <__hi0bits>
 800ca6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca6e:	e7df      	b.n	800ca30 <__d2b+0x70>
 800ca70:	0800f11f 	.word	0x0800f11f
 800ca74:	0800f130 	.word	0x0800f130

0800ca78 <_calloc_r>:
 800ca78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca7a:	fba1 2402 	umull	r2, r4, r1, r2
 800ca7e:	b94c      	cbnz	r4, 800ca94 <_calloc_r+0x1c>
 800ca80:	4611      	mov	r1, r2
 800ca82:	9201      	str	r2, [sp, #4]
 800ca84:	f000 f87a 	bl	800cb7c <_malloc_r>
 800ca88:	9a01      	ldr	r2, [sp, #4]
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	b930      	cbnz	r0, 800ca9c <_calloc_r+0x24>
 800ca8e:	4628      	mov	r0, r5
 800ca90:	b003      	add	sp, #12
 800ca92:	bd30      	pop	{r4, r5, pc}
 800ca94:	220c      	movs	r2, #12
 800ca96:	6002      	str	r2, [r0, #0]
 800ca98:	2500      	movs	r5, #0
 800ca9a:	e7f8      	b.n	800ca8e <_calloc_r+0x16>
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	f7fe f941 	bl	800ad24 <memset>
 800caa2:	e7f4      	b.n	800ca8e <_calloc_r+0x16>

0800caa4 <_free_r>:
 800caa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800caa6:	2900      	cmp	r1, #0
 800caa8:	d044      	beq.n	800cb34 <_free_r+0x90>
 800caaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800caae:	9001      	str	r0, [sp, #4]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f1a1 0404 	sub.w	r4, r1, #4
 800cab6:	bfb8      	it	lt
 800cab8:	18e4      	addlt	r4, r4, r3
 800caba:	f000 fa9b 	bl	800cff4 <__malloc_lock>
 800cabe:	4a1e      	ldr	r2, [pc, #120]	; (800cb38 <_free_r+0x94>)
 800cac0:	9801      	ldr	r0, [sp, #4]
 800cac2:	6813      	ldr	r3, [r2, #0]
 800cac4:	b933      	cbnz	r3, 800cad4 <_free_r+0x30>
 800cac6:	6063      	str	r3, [r4, #4]
 800cac8:	6014      	str	r4, [r2, #0]
 800caca:	b003      	add	sp, #12
 800cacc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cad0:	f000 ba96 	b.w	800d000 <__malloc_unlock>
 800cad4:	42a3      	cmp	r3, r4
 800cad6:	d908      	bls.n	800caea <_free_r+0x46>
 800cad8:	6825      	ldr	r5, [r4, #0]
 800cada:	1961      	adds	r1, r4, r5
 800cadc:	428b      	cmp	r3, r1
 800cade:	bf01      	itttt	eq
 800cae0:	6819      	ldreq	r1, [r3, #0]
 800cae2:	685b      	ldreq	r3, [r3, #4]
 800cae4:	1949      	addeq	r1, r1, r5
 800cae6:	6021      	streq	r1, [r4, #0]
 800cae8:	e7ed      	b.n	800cac6 <_free_r+0x22>
 800caea:	461a      	mov	r2, r3
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	b10b      	cbz	r3, 800caf4 <_free_r+0x50>
 800caf0:	42a3      	cmp	r3, r4
 800caf2:	d9fa      	bls.n	800caea <_free_r+0x46>
 800caf4:	6811      	ldr	r1, [r2, #0]
 800caf6:	1855      	adds	r5, r2, r1
 800caf8:	42a5      	cmp	r5, r4
 800cafa:	d10b      	bne.n	800cb14 <_free_r+0x70>
 800cafc:	6824      	ldr	r4, [r4, #0]
 800cafe:	4421      	add	r1, r4
 800cb00:	1854      	adds	r4, r2, r1
 800cb02:	42a3      	cmp	r3, r4
 800cb04:	6011      	str	r1, [r2, #0]
 800cb06:	d1e0      	bne.n	800caca <_free_r+0x26>
 800cb08:	681c      	ldr	r4, [r3, #0]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	6053      	str	r3, [r2, #4]
 800cb0e:	4421      	add	r1, r4
 800cb10:	6011      	str	r1, [r2, #0]
 800cb12:	e7da      	b.n	800caca <_free_r+0x26>
 800cb14:	d902      	bls.n	800cb1c <_free_r+0x78>
 800cb16:	230c      	movs	r3, #12
 800cb18:	6003      	str	r3, [r0, #0]
 800cb1a:	e7d6      	b.n	800caca <_free_r+0x26>
 800cb1c:	6825      	ldr	r5, [r4, #0]
 800cb1e:	1961      	adds	r1, r4, r5
 800cb20:	428b      	cmp	r3, r1
 800cb22:	bf04      	itt	eq
 800cb24:	6819      	ldreq	r1, [r3, #0]
 800cb26:	685b      	ldreq	r3, [r3, #4]
 800cb28:	6063      	str	r3, [r4, #4]
 800cb2a:	bf04      	itt	eq
 800cb2c:	1949      	addeq	r1, r1, r5
 800cb2e:	6021      	streq	r1, [r4, #0]
 800cb30:	6054      	str	r4, [r2, #4]
 800cb32:	e7ca      	b.n	800caca <_free_r+0x26>
 800cb34:	b003      	add	sp, #12
 800cb36:	bd30      	pop	{r4, r5, pc}
 800cb38:	20000998 	.word	0x20000998

0800cb3c <sbrk_aligned>:
 800cb3c:	b570      	push	{r4, r5, r6, lr}
 800cb3e:	4e0e      	ldr	r6, [pc, #56]	; (800cb78 <sbrk_aligned+0x3c>)
 800cb40:	460c      	mov	r4, r1
 800cb42:	6831      	ldr	r1, [r6, #0]
 800cb44:	4605      	mov	r5, r0
 800cb46:	b911      	cbnz	r1, 800cb4e <sbrk_aligned+0x12>
 800cb48:	f000 f9e8 	bl	800cf1c <_sbrk_r>
 800cb4c:	6030      	str	r0, [r6, #0]
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4628      	mov	r0, r5
 800cb52:	f000 f9e3 	bl	800cf1c <_sbrk_r>
 800cb56:	1c43      	adds	r3, r0, #1
 800cb58:	d00a      	beq.n	800cb70 <sbrk_aligned+0x34>
 800cb5a:	1cc4      	adds	r4, r0, #3
 800cb5c:	f024 0403 	bic.w	r4, r4, #3
 800cb60:	42a0      	cmp	r0, r4
 800cb62:	d007      	beq.n	800cb74 <sbrk_aligned+0x38>
 800cb64:	1a21      	subs	r1, r4, r0
 800cb66:	4628      	mov	r0, r5
 800cb68:	f000 f9d8 	bl	800cf1c <_sbrk_r>
 800cb6c:	3001      	adds	r0, #1
 800cb6e:	d101      	bne.n	800cb74 <sbrk_aligned+0x38>
 800cb70:	f04f 34ff 	mov.w	r4, #4294967295
 800cb74:	4620      	mov	r0, r4
 800cb76:	bd70      	pop	{r4, r5, r6, pc}
 800cb78:	2000099c 	.word	0x2000099c

0800cb7c <_malloc_r>:
 800cb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb80:	1ccd      	adds	r5, r1, #3
 800cb82:	f025 0503 	bic.w	r5, r5, #3
 800cb86:	3508      	adds	r5, #8
 800cb88:	2d0c      	cmp	r5, #12
 800cb8a:	bf38      	it	cc
 800cb8c:	250c      	movcc	r5, #12
 800cb8e:	2d00      	cmp	r5, #0
 800cb90:	4607      	mov	r7, r0
 800cb92:	db01      	blt.n	800cb98 <_malloc_r+0x1c>
 800cb94:	42a9      	cmp	r1, r5
 800cb96:	d905      	bls.n	800cba4 <_malloc_r+0x28>
 800cb98:	230c      	movs	r3, #12
 800cb9a:	603b      	str	r3, [r7, #0]
 800cb9c:	2600      	movs	r6, #0
 800cb9e:	4630      	mov	r0, r6
 800cba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cba4:	4e2e      	ldr	r6, [pc, #184]	; (800cc60 <_malloc_r+0xe4>)
 800cba6:	f000 fa25 	bl	800cff4 <__malloc_lock>
 800cbaa:	6833      	ldr	r3, [r6, #0]
 800cbac:	461c      	mov	r4, r3
 800cbae:	bb34      	cbnz	r4, 800cbfe <_malloc_r+0x82>
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	4638      	mov	r0, r7
 800cbb4:	f7ff ffc2 	bl	800cb3c <sbrk_aligned>
 800cbb8:	1c43      	adds	r3, r0, #1
 800cbba:	4604      	mov	r4, r0
 800cbbc:	d14d      	bne.n	800cc5a <_malloc_r+0xde>
 800cbbe:	6834      	ldr	r4, [r6, #0]
 800cbc0:	4626      	mov	r6, r4
 800cbc2:	2e00      	cmp	r6, #0
 800cbc4:	d140      	bne.n	800cc48 <_malloc_r+0xcc>
 800cbc6:	6823      	ldr	r3, [r4, #0]
 800cbc8:	4631      	mov	r1, r6
 800cbca:	4638      	mov	r0, r7
 800cbcc:	eb04 0803 	add.w	r8, r4, r3
 800cbd0:	f000 f9a4 	bl	800cf1c <_sbrk_r>
 800cbd4:	4580      	cmp	r8, r0
 800cbd6:	d13a      	bne.n	800cc4e <_malloc_r+0xd2>
 800cbd8:	6821      	ldr	r1, [r4, #0]
 800cbda:	3503      	adds	r5, #3
 800cbdc:	1a6d      	subs	r5, r5, r1
 800cbde:	f025 0503 	bic.w	r5, r5, #3
 800cbe2:	3508      	adds	r5, #8
 800cbe4:	2d0c      	cmp	r5, #12
 800cbe6:	bf38      	it	cc
 800cbe8:	250c      	movcc	r5, #12
 800cbea:	4629      	mov	r1, r5
 800cbec:	4638      	mov	r0, r7
 800cbee:	f7ff ffa5 	bl	800cb3c <sbrk_aligned>
 800cbf2:	3001      	adds	r0, #1
 800cbf4:	d02b      	beq.n	800cc4e <_malloc_r+0xd2>
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	442b      	add	r3, r5
 800cbfa:	6023      	str	r3, [r4, #0]
 800cbfc:	e00e      	b.n	800cc1c <_malloc_r+0xa0>
 800cbfe:	6822      	ldr	r2, [r4, #0]
 800cc00:	1b52      	subs	r2, r2, r5
 800cc02:	d41e      	bmi.n	800cc42 <_malloc_r+0xc6>
 800cc04:	2a0b      	cmp	r2, #11
 800cc06:	d916      	bls.n	800cc36 <_malloc_r+0xba>
 800cc08:	1961      	adds	r1, r4, r5
 800cc0a:	42a3      	cmp	r3, r4
 800cc0c:	6025      	str	r5, [r4, #0]
 800cc0e:	bf18      	it	ne
 800cc10:	6059      	strne	r1, [r3, #4]
 800cc12:	6863      	ldr	r3, [r4, #4]
 800cc14:	bf08      	it	eq
 800cc16:	6031      	streq	r1, [r6, #0]
 800cc18:	5162      	str	r2, [r4, r5]
 800cc1a:	604b      	str	r3, [r1, #4]
 800cc1c:	4638      	mov	r0, r7
 800cc1e:	f104 060b 	add.w	r6, r4, #11
 800cc22:	f000 f9ed 	bl	800d000 <__malloc_unlock>
 800cc26:	f026 0607 	bic.w	r6, r6, #7
 800cc2a:	1d23      	adds	r3, r4, #4
 800cc2c:	1af2      	subs	r2, r6, r3
 800cc2e:	d0b6      	beq.n	800cb9e <_malloc_r+0x22>
 800cc30:	1b9b      	subs	r3, r3, r6
 800cc32:	50a3      	str	r3, [r4, r2]
 800cc34:	e7b3      	b.n	800cb9e <_malloc_r+0x22>
 800cc36:	6862      	ldr	r2, [r4, #4]
 800cc38:	42a3      	cmp	r3, r4
 800cc3a:	bf0c      	ite	eq
 800cc3c:	6032      	streq	r2, [r6, #0]
 800cc3e:	605a      	strne	r2, [r3, #4]
 800cc40:	e7ec      	b.n	800cc1c <_malloc_r+0xa0>
 800cc42:	4623      	mov	r3, r4
 800cc44:	6864      	ldr	r4, [r4, #4]
 800cc46:	e7b2      	b.n	800cbae <_malloc_r+0x32>
 800cc48:	4634      	mov	r4, r6
 800cc4a:	6876      	ldr	r6, [r6, #4]
 800cc4c:	e7b9      	b.n	800cbc2 <_malloc_r+0x46>
 800cc4e:	230c      	movs	r3, #12
 800cc50:	603b      	str	r3, [r7, #0]
 800cc52:	4638      	mov	r0, r7
 800cc54:	f000 f9d4 	bl	800d000 <__malloc_unlock>
 800cc58:	e7a1      	b.n	800cb9e <_malloc_r+0x22>
 800cc5a:	6025      	str	r5, [r4, #0]
 800cc5c:	e7de      	b.n	800cc1c <_malloc_r+0xa0>
 800cc5e:	bf00      	nop
 800cc60:	20000998 	.word	0x20000998

0800cc64 <__ssputs_r>:
 800cc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc68:	688e      	ldr	r6, [r1, #8]
 800cc6a:	429e      	cmp	r6, r3
 800cc6c:	4682      	mov	sl, r0
 800cc6e:	460c      	mov	r4, r1
 800cc70:	4690      	mov	r8, r2
 800cc72:	461f      	mov	r7, r3
 800cc74:	d838      	bhi.n	800cce8 <__ssputs_r+0x84>
 800cc76:	898a      	ldrh	r2, [r1, #12]
 800cc78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc7c:	d032      	beq.n	800cce4 <__ssputs_r+0x80>
 800cc7e:	6825      	ldr	r5, [r4, #0]
 800cc80:	6909      	ldr	r1, [r1, #16]
 800cc82:	eba5 0901 	sub.w	r9, r5, r1
 800cc86:	6965      	ldr	r5, [r4, #20]
 800cc88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc90:	3301      	adds	r3, #1
 800cc92:	444b      	add	r3, r9
 800cc94:	106d      	asrs	r5, r5, #1
 800cc96:	429d      	cmp	r5, r3
 800cc98:	bf38      	it	cc
 800cc9a:	461d      	movcc	r5, r3
 800cc9c:	0553      	lsls	r3, r2, #21
 800cc9e:	d531      	bpl.n	800cd04 <__ssputs_r+0xa0>
 800cca0:	4629      	mov	r1, r5
 800cca2:	f7ff ff6b 	bl	800cb7c <_malloc_r>
 800cca6:	4606      	mov	r6, r0
 800cca8:	b950      	cbnz	r0, 800ccc0 <__ssputs_r+0x5c>
 800ccaa:	230c      	movs	r3, #12
 800ccac:	f8ca 3000 	str.w	r3, [sl]
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccb6:	81a3      	strh	r3, [r4, #12]
 800ccb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccc0:	6921      	ldr	r1, [r4, #16]
 800ccc2:	464a      	mov	r2, r9
 800ccc4:	f7ff fb46 	bl	800c354 <memcpy>
 800ccc8:	89a3      	ldrh	r3, [r4, #12]
 800ccca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ccce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccd2:	81a3      	strh	r3, [r4, #12]
 800ccd4:	6126      	str	r6, [r4, #16]
 800ccd6:	6165      	str	r5, [r4, #20]
 800ccd8:	444e      	add	r6, r9
 800ccda:	eba5 0509 	sub.w	r5, r5, r9
 800ccde:	6026      	str	r6, [r4, #0]
 800cce0:	60a5      	str	r5, [r4, #8]
 800cce2:	463e      	mov	r6, r7
 800cce4:	42be      	cmp	r6, r7
 800cce6:	d900      	bls.n	800ccea <__ssputs_r+0x86>
 800cce8:	463e      	mov	r6, r7
 800ccea:	6820      	ldr	r0, [r4, #0]
 800ccec:	4632      	mov	r2, r6
 800ccee:	4641      	mov	r1, r8
 800ccf0:	f000 f966 	bl	800cfc0 <memmove>
 800ccf4:	68a3      	ldr	r3, [r4, #8]
 800ccf6:	1b9b      	subs	r3, r3, r6
 800ccf8:	60a3      	str	r3, [r4, #8]
 800ccfa:	6823      	ldr	r3, [r4, #0]
 800ccfc:	4433      	add	r3, r6
 800ccfe:	6023      	str	r3, [r4, #0]
 800cd00:	2000      	movs	r0, #0
 800cd02:	e7db      	b.n	800ccbc <__ssputs_r+0x58>
 800cd04:	462a      	mov	r2, r5
 800cd06:	f000 f981 	bl	800d00c <_realloc_r>
 800cd0a:	4606      	mov	r6, r0
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d1e1      	bne.n	800ccd4 <__ssputs_r+0x70>
 800cd10:	6921      	ldr	r1, [r4, #16]
 800cd12:	4650      	mov	r0, sl
 800cd14:	f7ff fec6 	bl	800caa4 <_free_r>
 800cd18:	e7c7      	b.n	800ccaa <__ssputs_r+0x46>
	...

0800cd1c <_svfiprintf_r>:
 800cd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd20:	4698      	mov	r8, r3
 800cd22:	898b      	ldrh	r3, [r1, #12]
 800cd24:	061b      	lsls	r3, r3, #24
 800cd26:	b09d      	sub	sp, #116	; 0x74
 800cd28:	4607      	mov	r7, r0
 800cd2a:	460d      	mov	r5, r1
 800cd2c:	4614      	mov	r4, r2
 800cd2e:	d50e      	bpl.n	800cd4e <_svfiprintf_r+0x32>
 800cd30:	690b      	ldr	r3, [r1, #16]
 800cd32:	b963      	cbnz	r3, 800cd4e <_svfiprintf_r+0x32>
 800cd34:	2140      	movs	r1, #64	; 0x40
 800cd36:	f7ff ff21 	bl	800cb7c <_malloc_r>
 800cd3a:	6028      	str	r0, [r5, #0]
 800cd3c:	6128      	str	r0, [r5, #16]
 800cd3e:	b920      	cbnz	r0, 800cd4a <_svfiprintf_r+0x2e>
 800cd40:	230c      	movs	r3, #12
 800cd42:	603b      	str	r3, [r7, #0]
 800cd44:	f04f 30ff 	mov.w	r0, #4294967295
 800cd48:	e0d1      	b.n	800ceee <_svfiprintf_r+0x1d2>
 800cd4a:	2340      	movs	r3, #64	; 0x40
 800cd4c:	616b      	str	r3, [r5, #20]
 800cd4e:	2300      	movs	r3, #0
 800cd50:	9309      	str	r3, [sp, #36]	; 0x24
 800cd52:	2320      	movs	r3, #32
 800cd54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd58:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd5c:	2330      	movs	r3, #48	; 0x30
 800cd5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cf08 <_svfiprintf_r+0x1ec>
 800cd62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd66:	f04f 0901 	mov.w	r9, #1
 800cd6a:	4623      	mov	r3, r4
 800cd6c:	469a      	mov	sl, r3
 800cd6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd72:	b10a      	cbz	r2, 800cd78 <_svfiprintf_r+0x5c>
 800cd74:	2a25      	cmp	r2, #37	; 0x25
 800cd76:	d1f9      	bne.n	800cd6c <_svfiprintf_r+0x50>
 800cd78:	ebba 0b04 	subs.w	fp, sl, r4
 800cd7c:	d00b      	beq.n	800cd96 <_svfiprintf_r+0x7a>
 800cd7e:	465b      	mov	r3, fp
 800cd80:	4622      	mov	r2, r4
 800cd82:	4629      	mov	r1, r5
 800cd84:	4638      	mov	r0, r7
 800cd86:	f7ff ff6d 	bl	800cc64 <__ssputs_r>
 800cd8a:	3001      	adds	r0, #1
 800cd8c:	f000 80aa 	beq.w	800cee4 <_svfiprintf_r+0x1c8>
 800cd90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd92:	445a      	add	r2, fp
 800cd94:	9209      	str	r2, [sp, #36]	; 0x24
 800cd96:	f89a 3000 	ldrb.w	r3, [sl]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f000 80a2 	beq.w	800cee4 <_svfiprintf_r+0x1c8>
 800cda0:	2300      	movs	r3, #0
 800cda2:	f04f 32ff 	mov.w	r2, #4294967295
 800cda6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdaa:	f10a 0a01 	add.w	sl, sl, #1
 800cdae:	9304      	str	r3, [sp, #16]
 800cdb0:	9307      	str	r3, [sp, #28]
 800cdb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdb6:	931a      	str	r3, [sp, #104]	; 0x68
 800cdb8:	4654      	mov	r4, sl
 800cdba:	2205      	movs	r2, #5
 800cdbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc0:	4851      	ldr	r0, [pc, #324]	; (800cf08 <_svfiprintf_r+0x1ec>)
 800cdc2:	f7f3 fa2d 	bl	8000220 <memchr>
 800cdc6:	9a04      	ldr	r2, [sp, #16]
 800cdc8:	b9d8      	cbnz	r0, 800ce02 <_svfiprintf_r+0xe6>
 800cdca:	06d0      	lsls	r0, r2, #27
 800cdcc:	bf44      	itt	mi
 800cdce:	2320      	movmi	r3, #32
 800cdd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdd4:	0711      	lsls	r1, r2, #28
 800cdd6:	bf44      	itt	mi
 800cdd8:	232b      	movmi	r3, #43	; 0x2b
 800cdda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdde:	f89a 3000 	ldrb.w	r3, [sl]
 800cde2:	2b2a      	cmp	r3, #42	; 0x2a
 800cde4:	d015      	beq.n	800ce12 <_svfiprintf_r+0xf6>
 800cde6:	9a07      	ldr	r2, [sp, #28]
 800cde8:	4654      	mov	r4, sl
 800cdea:	2000      	movs	r0, #0
 800cdec:	f04f 0c0a 	mov.w	ip, #10
 800cdf0:	4621      	mov	r1, r4
 800cdf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdf6:	3b30      	subs	r3, #48	; 0x30
 800cdf8:	2b09      	cmp	r3, #9
 800cdfa:	d94e      	bls.n	800ce9a <_svfiprintf_r+0x17e>
 800cdfc:	b1b0      	cbz	r0, 800ce2c <_svfiprintf_r+0x110>
 800cdfe:	9207      	str	r2, [sp, #28]
 800ce00:	e014      	b.n	800ce2c <_svfiprintf_r+0x110>
 800ce02:	eba0 0308 	sub.w	r3, r0, r8
 800ce06:	fa09 f303 	lsl.w	r3, r9, r3
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	9304      	str	r3, [sp, #16]
 800ce0e:	46a2      	mov	sl, r4
 800ce10:	e7d2      	b.n	800cdb8 <_svfiprintf_r+0x9c>
 800ce12:	9b03      	ldr	r3, [sp, #12]
 800ce14:	1d19      	adds	r1, r3, #4
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	9103      	str	r1, [sp, #12]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	bfbb      	ittet	lt
 800ce1e:	425b      	neglt	r3, r3
 800ce20:	f042 0202 	orrlt.w	r2, r2, #2
 800ce24:	9307      	strge	r3, [sp, #28]
 800ce26:	9307      	strlt	r3, [sp, #28]
 800ce28:	bfb8      	it	lt
 800ce2a:	9204      	strlt	r2, [sp, #16]
 800ce2c:	7823      	ldrb	r3, [r4, #0]
 800ce2e:	2b2e      	cmp	r3, #46	; 0x2e
 800ce30:	d10c      	bne.n	800ce4c <_svfiprintf_r+0x130>
 800ce32:	7863      	ldrb	r3, [r4, #1]
 800ce34:	2b2a      	cmp	r3, #42	; 0x2a
 800ce36:	d135      	bne.n	800cea4 <_svfiprintf_r+0x188>
 800ce38:	9b03      	ldr	r3, [sp, #12]
 800ce3a:	1d1a      	adds	r2, r3, #4
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	9203      	str	r2, [sp, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	bfb8      	it	lt
 800ce44:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce48:	3402      	adds	r4, #2
 800ce4a:	9305      	str	r3, [sp, #20]
 800ce4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cf18 <_svfiprintf_r+0x1fc>
 800ce50:	7821      	ldrb	r1, [r4, #0]
 800ce52:	2203      	movs	r2, #3
 800ce54:	4650      	mov	r0, sl
 800ce56:	f7f3 f9e3 	bl	8000220 <memchr>
 800ce5a:	b140      	cbz	r0, 800ce6e <_svfiprintf_r+0x152>
 800ce5c:	2340      	movs	r3, #64	; 0x40
 800ce5e:	eba0 000a 	sub.w	r0, r0, sl
 800ce62:	fa03 f000 	lsl.w	r0, r3, r0
 800ce66:	9b04      	ldr	r3, [sp, #16]
 800ce68:	4303      	orrs	r3, r0
 800ce6a:	3401      	adds	r4, #1
 800ce6c:	9304      	str	r3, [sp, #16]
 800ce6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce72:	4826      	ldr	r0, [pc, #152]	; (800cf0c <_svfiprintf_r+0x1f0>)
 800ce74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce78:	2206      	movs	r2, #6
 800ce7a:	f7f3 f9d1 	bl	8000220 <memchr>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d038      	beq.n	800cef4 <_svfiprintf_r+0x1d8>
 800ce82:	4b23      	ldr	r3, [pc, #140]	; (800cf10 <_svfiprintf_r+0x1f4>)
 800ce84:	bb1b      	cbnz	r3, 800cece <_svfiprintf_r+0x1b2>
 800ce86:	9b03      	ldr	r3, [sp, #12]
 800ce88:	3307      	adds	r3, #7
 800ce8a:	f023 0307 	bic.w	r3, r3, #7
 800ce8e:	3308      	adds	r3, #8
 800ce90:	9303      	str	r3, [sp, #12]
 800ce92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce94:	4433      	add	r3, r6
 800ce96:	9309      	str	r3, [sp, #36]	; 0x24
 800ce98:	e767      	b.n	800cd6a <_svfiprintf_r+0x4e>
 800ce9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce9e:	460c      	mov	r4, r1
 800cea0:	2001      	movs	r0, #1
 800cea2:	e7a5      	b.n	800cdf0 <_svfiprintf_r+0xd4>
 800cea4:	2300      	movs	r3, #0
 800cea6:	3401      	adds	r4, #1
 800cea8:	9305      	str	r3, [sp, #20]
 800ceaa:	4619      	mov	r1, r3
 800ceac:	f04f 0c0a 	mov.w	ip, #10
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceb6:	3a30      	subs	r2, #48	; 0x30
 800ceb8:	2a09      	cmp	r2, #9
 800ceba:	d903      	bls.n	800cec4 <_svfiprintf_r+0x1a8>
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d0c5      	beq.n	800ce4c <_svfiprintf_r+0x130>
 800cec0:	9105      	str	r1, [sp, #20]
 800cec2:	e7c3      	b.n	800ce4c <_svfiprintf_r+0x130>
 800cec4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cec8:	4604      	mov	r4, r0
 800ceca:	2301      	movs	r3, #1
 800cecc:	e7f0      	b.n	800ceb0 <_svfiprintf_r+0x194>
 800cece:	ab03      	add	r3, sp, #12
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	462a      	mov	r2, r5
 800ced4:	4b0f      	ldr	r3, [pc, #60]	; (800cf14 <_svfiprintf_r+0x1f8>)
 800ced6:	a904      	add	r1, sp, #16
 800ced8:	4638      	mov	r0, r7
 800ceda:	f7fd ffcb 	bl	800ae74 <_printf_float>
 800cede:	1c42      	adds	r2, r0, #1
 800cee0:	4606      	mov	r6, r0
 800cee2:	d1d6      	bne.n	800ce92 <_svfiprintf_r+0x176>
 800cee4:	89ab      	ldrh	r3, [r5, #12]
 800cee6:	065b      	lsls	r3, r3, #25
 800cee8:	f53f af2c 	bmi.w	800cd44 <_svfiprintf_r+0x28>
 800ceec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ceee:	b01d      	add	sp, #116	; 0x74
 800cef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef4:	ab03      	add	r3, sp, #12
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	462a      	mov	r2, r5
 800cefa:	4b06      	ldr	r3, [pc, #24]	; (800cf14 <_svfiprintf_r+0x1f8>)
 800cefc:	a904      	add	r1, sp, #16
 800cefe:	4638      	mov	r0, r7
 800cf00:	f7fe fa5c 	bl	800b3bc <_printf_i>
 800cf04:	e7eb      	b.n	800cede <_svfiprintf_r+0x1c2>
 800cf06:	bf00      	nop
 800cf08:	0800f28c 	.word	0x0800f28c
 800cf0c:	0800f296 	.word	0x0800f296
 800cf10:	0800ae75 	.word	0x0800ae75
 800cf14:	0800cc65 	.word	0x0800cc65
 800cf18:	0800f292 	.word	0x0800f292

0800cf1c <_sbrk_r>:
 800cf1c:	b538      	push	{r3, r4, r5, lr}
 800cf1e:	4d06      	ldr	r5, [pc, #24]	; (800cf38 <_sbrk_r+0x1c>)
 800cf20:	2300      	movs	r3, #0
 800cf22:	4604      	mov	r4, r0
 800cf24:	4608      	mov	r0, r1
 800cf26:	602b      	str	r3, [r5, #0]
 800cf28:	f7f8 f8c4 	bl	80050b4 <_sbrk>
 800cf2c:	1c43      	adds	r3, r0, #1
 800cf2e:	d102      	bne.n	800cf36 <_sbrk_r+0x1a>
 800cf30:	682b      	ldr	r3, [r5, #0]
 800cf32:	b103      	cbz	r3, 800cf36 <_sbrk_r+0x1a>
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	bd38      	pop	{r3, r4, r5, pc}
 800cf38:	200009a0 	.word	0x200009a0

0800cf3c <__assert_func>:
 800cf3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf3e:	4614      	mov	r4, r2
 800cf40:	461a      	mov	r2, r3
 800cf42:	4b09      	ldr	r3, [pc, #36]	; (800cf68 <__assert_func+0x2c>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4605      	mov	r5, r0
 800cf48:	68d8      	ldr	r0, [r3, #12]
 800cf4a:	b14c      	cbz	r4, 800cf60 <__assert_func+0x24>
 800cf4c:	4b07      	ldr	r3, [pc, #28]	; (800cf6c <__assert_func+0x30>)
 800cf4e:	9100      	str	r1, [sp, #0]
 800cf50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf54:	4906      	ldr	r1, [pc, #24]	; (800cf70 <__assert_func+0x34>)
 800cf56:	462b      	mov	r3, r5
 800cf58:	f000 f80e 	bl	800cf78 <fiprintf>
 800cf5c:	f000 faac 	bl	800d4b8 <abort>
 800cf60:	4b04      	ldr	r3, [pc, #16]	; (800cf74 <__assert_func+0x38>)
 800cf62:	461c      	mov	r4, r3
 800cf64:	e7f3      	b.n	800cf4e <__assert_func+0x12>
 800cf66:	bf00      	nop
 800cf68:	20000060 	.word	0x20000060
 800cf6c:	0800f29d 	.word	0x0800f29d
 800cf70:	0800f2aa 	.word	0x0800f2aa
 800cf74:	0800f2d8 	.word	0x0800f2d8

0800cf78 <fiprintf>:
 800cf78:	b40e      	push	{r1, r2, r3}
 800cf7a:	b503      	push	{r0, r1, lr}
 800cf7c:	4601      	mov	r1, r0
 800cf7e:	ab03      	add	r3, sp, #12
 800cf80:	4805      	ldr	r0, [pc, #20]	; (800cf98 <fiprintf+0x20>)
 800cf82:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf86:	6800      	ldr	r0, [r0, #0]
 800cf88:	9301      	str	r3, [sp, #4]
 800cf8a:	f000 f897 	bl	800d0bc <_vfiprintf_r>
 800cf8e:	b002      	add	sp, #8
 800cf90:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf94:	b003      	add	sp, #12
 800cf96:	4770      	bx	lr
 800cf98:	20000060 	.word	0x20000060

0800cf9c <__ascii_mbtowc>:
 800cf9c:	b082      	sub	sp, #8
 800cf9e:	b901      	cbnz	r1, 800cfa2 <__ascii_mbtowc+0x6>
 800cfa0:	a901      	add	r1, sp, #4
 800cfa2:	b142      	cbz	r2, 800cfb6 <__ascii_mbtowc+0x1a>
 800cfa4:	b14b      	cbz	r3, 800cfba <__ascii_mbtowc+0x1e>
 800cfa6:	7813      	ldrb	r3, [r2, #0]
 800cfa8:	600b      	str	r3, [r1, #0]
 800cfaa:	7812      	ldrb	r2, [r2, #0]
 800cfac:	1e10      	subs	r0, r2, #0
 800cfae:	bf18      	it	ne
 800cfb0:	2001      	movne	r0, #1
 800cfb2:	b002      	add	sp, #8
 800cfb4:	4770      	bx	lr
 800cfb6:	4610      	mov	r0, r2
 800cfb8:	e7fb      	b.n	800cfb2 <__ascii_mbtowc+0x16>
 800cfba:	f06f 0001 	mvn.w	r0, #1
 800cfbe:	e7f8      	b.n	800cfb2 <__ascii_mbtowc+0x16>

0800cfc0 <memmove>:
 800cfc0:	4288      	cmp	r0, r1
 800cfc2:	b510      	push	{r4, lr}
 800cfc4:	eb01 0402 	add.w	r4, r1, r2
 800cfc8:	d902      	bls.n	800cfd0 <memmove+0x10>
 800cfca:	4284      	cmp	r4, r0
 800cfcc:	4623      	mov	r3, r4
 800cfce:	d807      	bhi.n	800cfe0 <memmove+0x20>
 800cfd0:	1e43      	subs	r3, r0, #1
 800cfd2:	42a1      	cmp	r1, r4
 800cfd4:	d008      	beq.n	800cfe8 <memmove+0x28>
 800cfd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfde:	e7f8      	b.n	800cfd2 <memmove+0x12>
 800cfe0:	4402      	add	r2, r0
 800cfe2:	4601      	mov	r1, r0
 800cfe4:	428a      	cmp	r2, r1
 800cfe6:	d100      	bne.n	800cfea <memmove+0x2a>
 800cfe8:	bd10      	pop	{r4, pc}
 800cfea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cff2:	e7f7      	b.n	800cfe4 <memmove+0x24>

0800cff4 <__malloc_lock>:
 800cff4:	4801      	ldr	r0, [pc, #4]	; (800cffc <__malloc_lock+0x8>)
 800cff6:	f000 bc1f 	b.w	800d838 <__retarget_lock_acquire_recursive>
 800cffa:	bf00      	nop
 800cffc:	200009a4 	.word	0x200009a4

0800d000 <__malloc_unlock>:
 800d000:	4801      	ldr	r0, [pc, #4]	; (800d008 <__malloc_unlock+0x8>)
 800d002:	f000 bc1a 	b.w	800d83a <__retarget_lock_release_recursive>
 800d006:	bf00      	nop
 800d008:	200009a4 	.word	0x200009a4

0800d00c <_realloc_r>:
 800d00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d010:	4680      	mov	r8, r0
 800d012:	4614      	mov	r4, r2
 800d014:	460e      	mov	r6, r1
 800d016:	b921      	cbnz	r1, 800d022 <_realloc_r+0x16>
 800d018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d01c:	4611      	mov	r1, r2
 800d01e:	f7ff bdad 	b.w	800cb7c <_malloc_r>
 800d022:	b92a      	cbnz	r2, 800d030 <_realloc_r+0x24>
 800d024:	f7ff fd3e 	bl	800caa4 <_free_r>
 800d028:	4625      	mov	r5, r4
 800d02a:	4628      	mov	r0, r5
 800d02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d030:	f000 fc6a 	bl	800d908 <_malloc_usable_size_r>
 800d034:	4284      	cmp	r4, r0
 800d036:	4607      	mov	r7, r0
 800d038:	d802      	bhi.n	800d040 <_realloc_r+0x34>
 800d03a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d03e:	d812      	bhi.n	800d066 <_realloc_r+0x5a>
 800d040:	4621      	mov	r1, r4
 800d042:	4640      	mov	r0, r8
 800d044:	f7ff fd9a 	bl	800cb7c <_malloc_r>
 800d048:	4605      	mov	r5, r0
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d0ed      	beq.n	800d02a <_realloc_r+0x1e>
 800d04e:	42bc      	cmp	r4, r7
 800d050:	4622      	mov	r2, r4
 800d052:	4631      	mov	r1, r6
 800d054:	bf28      	it	cs
 800d056:	463a      	movcs	r2, r7
 800d058:	f7ff f97c 	bl	800c354 <memcpy>
 800d05c:	4631      	mov	r1, r6
 800d05e:	4640      	mov	r0, r8
 800d060:	f7ff fd20 	bl	800caa4 <_free_r>
 800d064:	e7e1      	b.n	800d02a <_realloc_r+0x1e>
 800d066:	4635      	mov	r5, r6
 800d068:	e7df      	b.n	800d02a <_realloc_r+0x1e>

0800d06a <__sfputc_r>:
 800d06a:	6893      	ldr	r3, [r2, #8]
 800d06c:	3b01      	subs	r3, #1
 800d06e:	2b00      	cmp	r3, #0
 800d070:	b410      	push	{r4}
 800d072:	6093      	str	r3, [r2, #8]
 800d074:	da08      	bge.n	800d088 <__sfputc_r+0x1e>
 800d076:	6994      	ldr	r4, [r2, #24]
 800d078:	42a3      	cmp	r3, r4
 800d07a:	db01      	blt.n	800d080 <__sfputc_r+0x16>
 800d07c:	290a      	cmp	r1, #10
 800d07e:	d103      	bne.n	800d088 <__sfputc_r+0x1e>
 800d080:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d084:	f000 b94a 	b.w	800d31c <__swbuf_r>
 800d088:	6813      	ldr	r3, [r2, #0]
 800d08a:	1c58      	adds	r0, r3, #1
 800d08c:	6010      	str	r0, [r2, #0]
 800d08e:	7019      	strb	r1, [r3, #0]
 800d090:	4608      	mov	r0, r1
 800d092:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <__sfputs_r>:
 800d098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d09a:	4606      	mov	r6, r0
 800d09c:	460f      	mov	r7, r1
 800d09e:	4614      	mov	r4, r2
 800d0a0:	18d5      	adds	r5, r2, r3
 800d0a2:	42ac      	cmp	r4, r5
 800d0a4:	d101      	bne.n	800d0aa <__sfputs_r+0x12>
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	e007      	b.n	800d0ba <__sfputs_r+0x22>
 800d0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ae:	463a      	mov	r2, r7
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	f7ff ffda 	bl	800d06a <__sfputc_r>
 800d0b6:	1c43      	adds	r3, r0, #1
 800d0b8:	d1f3      	bne.n	800d0a2 <__sfputs_r+0xa>
 800d0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0bc <_vfiprintf_r>:
 800d0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c0:	460d      	mov	r5, r1
 800d0c2:	b09d      	sub	sp, #116	; 0x74
 800d0c4:	4614      	mov	r4, r2
 800d0c6:	4698      	mov	r8, r3
 800d0c8:	4606      	mov	r6, r0
 800d0ca:	b118      	cbz	r0, 800d0d4 <_vfiprintf_r+0x18>
 800d0cc:	6983      	ldr	r3, [r0, #24]
 800d0ce:	b90b      	cbnz	r3, 800d0d4 <_vfiprintf_r+0x18>
 800d0d0:	f000 fb14 	bl	800d6fc <__sinit>
 800d0d4:	4b89      	ldr	r3, [pc, #548]	; (800d2fc <_vfiprintf_r+0x240>)
 800d0d6:	429d      	cmp	r5, r3
 800d0d8:	d11b      	bne.n	800d112 <_vfiprintf_r+0x56>
 800d0da:	6875      	ldr	r5, [r6, #4]
 800d0dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0de:	07d9      	lsls	r1, r3, #31
 800d0e0:	d405      	bmi.n	800d0ee <_vfiprintf_r+0x32>
 800d0e2:	89ab      	ldrh	r3, [r5, #12]
 800d0e4:	059a      	lsls	r2, r3, #22
 800d0e6:	d402      	bmi.n	800d0ee <_vfiprintf_r+0x32>
 800d0e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0ea:	f000 fba5 	bl	800d838 <__retarget_lock_acquire_recursive>
 800d0ee:	89ab      	ldrh	r3, [r5, #12]
 800d0f0:	071b      	lsls	r3, r3, #28
 800d0f2:	d501      	bpl.n	800d0f8 <_vfiprintf_r+0x3c>
 800d0f4:	692b      	ldr	r3, [r5, #16]
 800d0f6:	b9eb      	cbnz	r3, 800d134 <_vfiprintf_r+0x78>
 800d0f8:	4629      	mov	r1, r5
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	f000 f96e 	bl	800d3dc <__swsetup_r>
 800d100:	b1c0      	cbz	r0, 800d134 <_vfiprintf_r+0x78>
 800d102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d104:	07dc      	lsls	r4, r3, #31
 800d106:	d50e      	bpl.n	800d126 <_vfiprintf_r+0x6a>
 800d108:	f04f 30ff 	mov.w	r0, #4294967295
 800d10c:	b01d      	add	sp, #116	; 0x74
 800d10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d112:	4b7b      	ldr	r3, [pc, #492]	; (800d300 <_vfiprintf_r+0x244>)
 800d114:	429d      	cmp	r5, r3
 800d116:	d101      	bne.n	800d11c <_vfiprintf_r+0x60>
 800d118:	68b5      	ldr	r5, [r6, #8]
 800d11a:	e7df      	b.n	800d0dc <_vfiprintf_r+0x20>
 800d11c:	4b79      	ldr	r3, [pc, #484]	; (800d304 <_vfiprintf_r+0x248>)
 800d11e:	429d      	cmp	r5, r3
 800d120:	bf08      	it	eq
 800d122:	68f5      	ldreq	r5, [r6, #12]
 800d124:	e7da      	b.n	800d0dc <_vfiprintf_r+0x20>
 800d126:	89ab      	ldrh	r3, [r5, #12]
 800d128:	0598      	lsls	r0, r3, #22
 800d12a:	d4ed      	bmi.n	800d108 <_vfiprintf_r+0x4c>
 800d12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d12e:	f000 fb84 	bl	800d83a <__retarget_lock_release_recursive>
 800d132:	e7e9      	b.n	800d108 <_vfiprintf_r+0x4c>
 800d134:	2300      	movs	r3, #0
 800d136:	9309      	str	r3, [sp, #36]	; 0x24
 800d138:	2320      	movs	r3, #32
 800d13a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d13e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d142:	2330      	movs	r3, #48	; 0x30
 800d144:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d308 <_vfiprintf_r+0x24c>
 800d148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d14c:	f04f 0901 	mov.w	r9, #1
 800d150:	4623      	mov	r3, r4
 800d152:	469a      	mov	sl, r3
 800d154:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d158:	b10a      	cbz	r2, 800d15e <_vfiprintf_r+0xa2>
 800d15a:	2a25      	cmp	r2, #37	; 0x25
 800d15c:	d1f9      	bne.n	800d152 <_vfiprintf_r+0x96>
 800d15e:	ebba 0b04 	subs.w	fp, sl, r4
 800d162:	d00b      	beq.n	800d17c <_vfiprintf_r+0xc0>
 800d164:	465b      	mov	r3, fp
 800d166:	4622      	mov	r2, r4
 800d168:	4629      	mov	r1, r5
 800d16a:	4630      	mov	r0, r6
 800d16c:	f7ff ff94 	bl	800d098 <__sfputs_r>
 800d170:	3001      	adds	r0, #1
 800d172:	f000 80aa 	beq.w	800d2ca <_vfiprintf_r+0x20e>
 800d176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d178:	445a      	add	r2, fp
 800d17a:	9209      	str	r2, [sp, #36]	; 0x24
 800d17c:	f89a 3000 	ldrb.w	r3, [sl]
 800d180:	2b00      	cmp	r3, #0
 800d182:	f000 80a2 	beq.w	800d2ca <_vfiprintf_r+0x20e>
 800d186:	2300      	movs	r3, #0
 800d188:	f04f 32ff 	mov.w	r2, #4294967295
 800d18c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d190:	f10a 0a01 	add.w	sl, sl, #1
 800d194:	9304      	str	r3, [sp, #16]
 800d196:	9307      	str	r3, [sp, #28]
 800d198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d19c:	931a      	str	r3, [sp, #104]	; 0x68
 800d19e:	4654      	mov	r4, sl
 800d1a0:	2205      	movs	r2, #5
 800d1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1a6:	4858      	ldr	r0, [pc, #352]	; (800d308 <_vfiprintf_r+0x24c>)
 800d1a8:	f7f3 f83a 	bl	8000220 <memchr>
 800d1ac:	9a04      	ldr	r2, [sp, #16]
 800d1ae:	b9d8      	cbnz	r0, 800d1e8 <_vfiprintf_r+0x12c>
 800d1b0:	06d1      	lsls	r1, r2, #27
 800d1b2:	bf44      	itt	mi
 800d1b4:	2320      	movmi	r3, #32
 800d1b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ba:	0713      	lsls	r3, r2, #28
 800d1bc:	bf44      	itt	mi
 800d1be:	232b      	movmi	r3, #43	; 0x2b
 800d1c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d1ca:	d015      	beq.n	800d1f8 <_vfiprintf_r+0x13c>
 800d1cc:	9a07      	ldr	r2, [sp, #28]
 800d1ce:	4654      	mov	r4, sl
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	f04f 0c0a 	mov.w	ip, #10
 800d1d6:	4621      	mov	r1, r4
 800d1d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1dc:	3b30      	subs	r3, #48	; 0x30
 800d1de:	2b09      	cmp	r3, #9
 800d1e0:	d94e      	bls.n	800d280 <_vfiprintf_r+0x1c4>
 800d1e2:	b1b0      	cbz	r0, 800d212 <_vfiprintf_r+0x156>
 800d1e4:	9207      	str	r2, [sp, #28]
 800d1e6:	e014      	b.n	800d212 <_vfiprintf_r+0x156>
 800d1e8:	eba0 0308 	sub.w	r3, r0, r8
 800d1ec:	fa09 f303 	lsl.w	r3, r9, r3
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	9304      	str	r3, [sp, #16]
 800d1f4:	46a2      	mov	sl, r4
 800d1f6:	e7d2      	b.n	800d19e <_vfiprintf_r+0xe2>
 800d1f8:	9b03      	ldr	r3, [sp, #12]
 800d1fa:	1d19      	adds	r1, r3, #4
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	9103      	str	r1, [sp, #12]
 800d200:	2b00      	cmp	r3, #0
 800d202:	bfbb      	ittet	lt
 800d204:	425b      	neglt	r3, r3
 800d206:	f042 0202 	orrlt.w	r2, r2, #2
 800d20a:	9307      	strge	r3, [sp, #28]
 800d20c:	9307      	strlt	r3, [sp, #28]
 800d20e:	bfb8      	it	lt
 800d210:	9204      	strlt	r2, [sp, #16]
 800d212:	7823      	ldrb	r3, [r4, #0]
 800d214:	2b2e      	cmp	r3, #46	; 0x2e
 800d216:	d10c      	bne.n	800d232 <_vfiprintf_r+0x176>
 800d218:	7863      	ldrb	r3, [r4, #1]
 800d21a:	2b2a      	cmp	r3, #42	; 0x2a
 800d21c:	d135      	bne.n	800d28a <_vfiprintf_r+0x1ce>
 800d21e:	9b03      	ldr	r3, [sp, #12]
 800d220:	1d1a      	adds	r2, r3, #4
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	9203      	str	r2, [sp, #12]
 800d226:	2b00      	cmp	r3, #0
 800d228:	bfb8      	it	lt
 800d22a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d22e:	3402      	adds	r4, #2
 800d230:	9305      	str	r3, [sp, #20]
 800d232:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d318 <_vfiprintf_r+0x25c>
 800d236:	7821      	ldrb	r1, [r4, #0]
 800d238:	2203      	movs	r2, #3
 800d23a:	4650      	mov	r0, sl
 800d23c:	f7f2 fff0 	bl	8000220 <memchr>
 800d240:	b140      	cbz	r0, 800d254 <_vfiprintf_r+0x198>
 800d242:	2340      	movs	r3, #64	; 0x40
 800d244:	eba0 000a 	sub.w	r0, r0, sl
 800d248:	fa03 f000 	lsl.w	r0, r3, r0
 800d24c:	9b04      	ldr	r3, [sp, #16]
 800d24e:	4303      	orrs	r3, r0
 800d250:	3401      	adds	r4, #1
 800d252:	9304      	str	r3, [sp, #16]
 800d254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d258:	482c      	ldr	r0, [pc, #176]	; (800d30c <_vfiprintf_r+0x250>)
 800d25a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d25e:	2206      	movs	r2, #6
 800d260:	f7f2 ffde 	bl	8000220 <memchr>
 800d264:	2800      	cmp	r0, #0
 800d266:	d03f      	beq.n	800d2e8 <_vfiprintf_r+0x22c>
 800d268:	4b29      	ldr	r3, [pc, #164]	; (800d310 <_vfiprintf_r+0x254>)
 800d26a:	bb1b      	cbnz	r3, 800d2b4 <_vfiprintf_r+0x1f8>
 800d26c:	9b03      	ldr	r3, [sp, #12]
 800d26e:	3307      	adds	r3, #7
 800d270:	f023 0307 	bic.w	r3, r3, #7
 800d274:	3308      	adds	r3, #8
 800d276:	9303      	str	r3, [sp, #12]
 800d278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d27a:	443b      	add	r3, r7
 800d27c:	9309      	str	r3, [sp, #36]	; 0x24
 800d27e:	e767      	b.n	800d150 <_vfiprintf_r+0x94>
 800d280:	fb0c 3202 	mla	r2, ip, r2, r3
 800d284:	460c      	mov	r4, r1
 800d286:	2001      	movs	r0, #1
 800d288:	e7a5      	b.n	800d1d6 <_vfiprintf_r+0x11a>
 800d28a:	2300      	movs	r3, #0
 800d28c:	3401      	adds	r4, #1
 800d28e:	9305      	str	r3, [sp, #20]
 800d290:	4619      	mov	r1, r3
 800d292:	f04f 0c0a 	mov.w	ip, #10
 800d296:	4620      	mov	r0, r4
 800d298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d29c:	3a30      	subs	r2, #48	; 0x30
 800d29e:	2a09      	cmp	r2, #9
 800d2a0:	d903      	bls.n	800d2aa <_vfiprintf_r+0x1ee>
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d0c5      	beq.n	800d232 <_vfiprintf_r+0x176>
 800d2a6:	9105      	str	r1, [sp, #20]
 800d2a8:	e7c3      	b.n	800d232 <_vfiprintf_r+0x176>
 800d2aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2ae:	4604      	mov	r4, r0
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e7f0      	b.n	800d296 <_vfiprintf_r+0x1da>
 800d2b4:	ab03      	add	r3, sp, #12
 800d2b6:	9300      	str	r3, [sp, #0]
 800d2b8:	462a      	mov	r2, r5
 800d2ba:	4b16      	ldr	r3, [pc, #88]	; (800d314 <_vfiprintf_r+0x258>)
 800d2bc:	a904      	add	r1, sp, #16
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f7fd fdd8 	bl	800ae74 <_printf_float>
 800d2c4:	4607      	mov	r7, r0
 800d2c6:	1c78      	adds	r0, r7, #1
 800d2c8:	d1d6      	bne.n	800d278 <_vfiprintf_r+0x1bc>
 800d2ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2cc:	07d9      	lsls	r1, r3, #31
 800d2ce:	d405      	bmi.n	800d2dc <_vfiprintf_r+0x220>
 800d2d0:	89ab      	ldrh	r3, [r5, #12]
 800d2d2:	059a      	lsls	r2, r3, #22
 800d2d4:	d402      	bmi.n	800d2dc <_vfiprintf_r+0x220>
 800d2d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2d8:	f000 faaf 	bl	800d83a <__retarget_lock_release_recursive>
 800d2dc:	89ab      	ldrh	r3, [r5, #12]
 800d2de:	065b      	lsls	r3, r3, #25
 800d2e0:	f53f af12 	bmi.w	800d108 <_vfiprintf_r+0x4c>
 800d2e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2e6:	e711      	b.n	800d10c <_vfiprintf_r+0x50>
 800d2e8:	ab03      	add	r3, sp, #12
 800d2ea:	9300      	str	r3, [sp, #0]
 800d2ec:	462a      	mov	r2, r5
 800d2ee:	4b09      	ldr	r3, [pc, #36]	; (800d314 <_vfiprintf_r+0x258>)
 800d2f0:	a904      	add	r1, sp, #16
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	f7fe f862 	bl	800b3bc <_printf_i>
 800d2f8:	e7e4      	b.n	800d2c4 <_vfiprintf_r+0x208>
 800d2fa:	bf00      	nop
 800d2fc:	0800f404 	.word	0x0800f404
 800d300:	0800f424 	.word	0x0800f424
 800d304:	0800f3e4 	.word	0x0800f3e4
 800d308:	0800f28c 	.word	0x0800f28c
 800d30c:	0800f296 	.word	0x0800f296
 800d310:	0800ae75 	.word	0x0800ae75
 800d314:	0800d099 	.word	0x0800d099
 800d318:	0800f292 	.word	0x0800f292

0800d31c <__swbuf_r>:
 800d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31e:	460e      	mov	r6, r1
 800d320:	4614      	mov	r4, r2
 800d322:	4605      	mov	r5, r0
 800d324:	b118      	cbz	r0, 800d32e <__swbuf_r+0x12>
 800d326:	6983      	ldr	r3, [r0, #24]
 800d328:	b90b      	cbnz	r3, 800d32e <__swbuf_r+0x12>
 800d32a:	f000 f9e7 	bl	800d6fc <__sinit>
 800d32e:	4b21      	ldr	r3, [pc, #132]	; (800d3b4 <__swbuf_r+0x98>)
 800d330:	429c      	cmp	r4, r3
 800d332:	d12b      	bne.n	800d38c <__swbuf_r+0x70>
 800d334:	686c      	ldr	r4, [r5, #4]
 800d336:	69a3      	ldr	r3, [r4, #24]
 800d338:	60a3      	str	r3, [r4, #8]
 800d33a:	89a3      	ldrh	r3, [r4, #12]
 800d33c:	071a      	lsls	r2, r3, #28
 800d33e:	d52f      	bpl.n	800d3a0 <__swbuf_r+0x84>
 800d340:	6923      	ldr	r3, [r4, #16]
 800d342:	b36b      	cbz	r3, 800d3a0 <__swbuf_r+0x84>
 800d344:	6923      	ldr	r3, [r4, #16]
 800d346:	6820      	ldr	r0, [r4, #0]
 800d348:	1ac0      	subs	r0, r0, r3
 800d34a:	6963      	ldr	r3, [r4, #20]
 800d34c:	b2f6      	uxtb	r6, r6
 800d34e:	4283      	cmp	r3, r0
 800d350:	4637      	mov	r7, r6
 800d352:	dc04      	bgt.n	800d35e <__swbuf_r+0x42>
 800d354:	4621      	mov	r1, r4
 800d356:	4628      	mov	r0, r5
 800d358:	f000 f93c 	bl	800d5d4 <_fflush_r>
 800d35c:	bb30      	cbnz	r0, 800d3ac <__swbuf_r+0x90>
 800d35e:	68a3      	ldr	r3, [r4, #8]
 800d360:	3b01      	subs	r3, #1
 800d362:	60a3      	str	r3, [r4, #8]
 800d364:	6823      	ldr	r3, [r4, #0]
 800d366:	1c5a      	adds	r2, r3, #1
 800d368:	6022      	str	r2, [r4, #0]
 800d36a:	701e      	strb	r6, [r3, #0]
 800d36c:	6963      	ldr	r3, [r4, #20]
 800d36e:	3001      	adds	r0, #1
 800d370:	4283      	cmp	r3, r0
 800d372:	d004      	beq.n	800d37e <__swbuf_r+0x62>
 800d374:	89a3      	ldrh	r3, [r4, #12]
 800d376:	07db      	lsls	r3, r3, #31
 800d378:	d506      	bpl.n	800d388 <__swbuf_r+0x6c>
 800d37a:	2e0a      	cmp	r6, #10
 800d37c:	d104      	bne.n	800d388 <__swbuf_r+0x6c>
 800d37e:	4621      	mov	r1, r4
 800d380:	4628      	mov	r0, r5
 800d382:	f000 f927 	bl	800d5d4 <_fflush_r>
 800d386:	b988      	cbnz	r0, 800d3ac <__swbuf_r+0x90>
 800d388:	4638      	mov	r0, r7
 800d38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d38c:	4b0a      	ldr	r3, [pc, #40]	; (800d3b8 <__swbuf_r+0x9c>)
 800d38e:	429c      	cmp	r4, r3
 800d390:	d101      	bne.n	800d396 <__swbuf_r+0x7a>
 800d392:	68ac      	ldr	r4, [r5, #8]
 800d394:	e7cf      	b.n	800d336 <__swbuf_r+0x1a>
 800d396:	4b09      	ldr	r3, [pc, #36]	; (800d3bc <__swbuf_r+0xa0>)
 800d398:	429c      	cmp	r4, r3
 800d39a:	bf08      	it	eq
 800d39c:	68ec      	ldreq	r4, [r5, #12]
 800d39e:	e7ca      	b.n	800d336 <__swbuf_r+0x1a>
 800d3a0:	4621      	mov	r1, r4
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	f000 f81a 	bl	800d3dc <__swsetup_r>
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	d0cb      	beq.n	800d344 <__swbuf_r+0x28>
 800d3ac:	f04f 37ff 	mov.w	r7, #4294967295
 800d3b0:	e7ea      	b.n	800d388 <__swbuf_r+0x6c>
 800d3b2:	bf00      	nop
 800d3b4:	0800f404 	.word	0x0800f404
 800d3b8:	0800f424 	.word	0x0800f424
 800d3bc:	0800f3e4 	.word	0x0800f3e4

0800d3c0 <__ascii_wctomb>:
 800d3c0:	b149      	cbz	r1, 800d3d6 <__ascii_wctomb+0x16>
 800d3c2:	2aff      	cmp	r2, #255	; 0xff
 800d3c4:	bf85      	ittet	hi
 800d3c6:	238a      	movhi	r3, #138	; 0x8a
 800d3c8:	6003      	strhi	r3, [r0, #0]
 800d3ca:	700a      	strbls	r2, [r1, #0]
 800d3cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800d3d0:	bf98      	it	ls
 800d3d2:	2001      	movls	r0, #1
 800d3d4:	4770      	bx	lr
 800d3d6:	4608      	mov	r0, r1
 800d3d8:	4770      	bx	lr
	...

0800d3dc <__swsetup_r>:
 800d3dc:	4b32      	ldr	r3, [pc, #200]	; (800d4a8 <__swsetup_r+0xcc>)
 800d3de:	b570      	push	{r4, r5, r6, lr}
 800d3e0:	681d      	ldr	r5, [r3, #0]
 800d3e2:	4606      	mov	r6, r0
 800d3e4:	460c      	mov	r4, r1
 800d3e6:	b125      	cbz	r5, 800d3f2 <__swsetup_r+0x16>
 800d3e8:	69ab      	ldr	r3, [r5, #24]
 800d3ea:	b913      	cbnz	r3, 800d3f2 <__swsetup_r+0x16>
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	f000 f985 	bl	800d6fc <__sinit>
 800d3f2:	4b2e      	ldr	r3, [pc, #184]	; (800d4ac <__swsetup_r+0xd0>)
 800d3f4:	429c      	cmp	r4, r3
 800d3f6:	d10f      	bne.n	800d418 <__swsetup_r+0x3c>
 800d3f8:	686c      	ldr	r4, [r5, #4]
 800d3fa:	89a3      	ldrh	r3, [r4, #12]
 800d3fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d400:	0719      	lsls	r1, r3, #28
 800d402:	d42c      	bmi.n	800d45e <__swsetup_r+0x82>
 800d404:	06dd      	lsls	r5, r3, #27
 800d406:	d411      	bmi.n	800d42c <__swsetup_r+0x50>
 800d408:	2309      	movs	r3, #9
 800d40a:	6033      	str	r3, [r6, #0]
 800d40c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d410:	81a3      	strh	r3, [r4, #12]
 800d412:	f04f 30ff 	mov.w	r0, #4294967295
 800d416:	e03e      	b.n	800d496 <__swsetup_r+0xba>
 800d418:	4b25      	ldr	r3, [pc, #148]	; (800d4b0 <__swsetup_r+0xd4>)
 800d41a:	429c      	cmp	r4, r3
 800d41c:	d101      	bne.n	800d422 <__swsetup_r+0x46>
 800d41e:	68ac      	ldr	r4, [r5, #8]
 800d420:	e7eb      	b.n	800d3fa <__swsetup_r+0x1e>
 800d422:	4b24      	ldr	r3, [pc, #144]	; (800d4b4 <__swsetup_r+0xd8>)
 800d424:	429c      	cmp	r4, r3
 800d426:	bf08      	it	eq
 800d428:	68ec      	ldreq	r4, [r5, #12]
 800d42a:	e7e6      	b.n	800d3fa <__swsetup_r+0x1e>
 800d42c:	0758      	lsls	r0, r3, #29
 800d42e:	d512      	bpl.n	800d456 <__swsetup_r+0x7a>
 800d430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d432:	b141      	cbz	r1, 800d446 <__swsetup_r+0x6a>
 800d434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d438:	4299      	cmp	r1, r3
 800d43a:	d002      	beq.n	800d442 <__swsetup_r+0x66>
 800d43c:	4630      	mov	r0, r6
 800d43e:	f7ff fb31 	bl	800caa4 <_free_r>
 800d442:	2300      	movs	r3, #0
 800d444:	6363      	str	r3, [r4, #52]	; 0x34
 800d446:	89a3      	ldrh	r3, [r4, #12]
 800d448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d44c:	81a3      	strh	r3, [r4, #12]
 800d44e:	2300      	movs	r3, #0
 800d450:	6063      	str	r3, [r4, #4]
 800d452:	6923      	ldr	r3, [r4, #16]
 800d454:	6023      	str	r3, [r4, #0]
 800d456:	89a3      	ldrh	r3, [r4, #12]
 800d458:	f043 0308 	orr.w	r3, r3, #8
 800d45c:	81a3      	strh	r3, [r4, #12]
 800d45e:	6923      	ldr	r3, [r4, #16]
 800d460:	b94b      	cbnz	r3, 800d476 <__swsetup_r+0x9a>
 800d462:	89a3      	ldrh	r3, [r4, #12]
 800d464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d46c:	d003      	beq.n	800d476 <__swsetup_r+0x9a>
 800d46e:	4621      	mov	r1, r4
 800d470:	4630      	mov	r0, r6
 800d472:	f000 fa09 	bl	800d888 <__smakebuf_r>
 800d476:	89a0      	ldrh	r0, [r4, #12]
 800d478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d47c:	f010 0301 	ands.w	r3, r0, #1
 800d480:	d00a      	beq.n	800d498 <__swsetup_r+0xbc>
 800d482:	2300      	movs	r3, #0
 800d484:	60a3      	str	r3, [r4, #8]
 800d486:	6963      	ldr	r3, [r4, #20]
 800d488:	425b      	negs	r3, r3
 800d48a:	61a3      	str	r3, [r4, #24]
 800d48c:	6923      	ldr	r3, [r4, #16]
 800d48e:	b943      	cbnz	r3, 800d4a2 <__swsetup_r+0xc6>
 800d490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d494:	d1ba      	bne.n	800d40c <__swsetup_r+0x30>
 800d496:	bd70      	pop	{r4, r5, r6, pc}
 800d498:	0781      	lsls	r1, r0, #30
 800d49a:	bf58      	it	pl
 800d49c:	6963      	ldrpl	r3, [r4, #20]
 800d49e:	60a3      	str	r3, [r4, #8]
 800d4a0:	e7f4      	b.n	800d48c <__swsetup_r+0xb0>
 800d4a2:	2000      	movs	r0, #0
 800d4a4:	e7f7      	b.n	800d496 <__swsetup_r+0xba>
 800d4a6:	bf00      	nop
 800d4a8:	20000060 	.word	0x20000060
 800d4ac:	0800f404 	.word	0x0800f404
 800d4b0:	0800f424 	.word	0x0800f424
 800d4b4:	0800f3e4 	.word	0x0800f3e4

0800d4b8 <abort>:
 800d4b8:	b508      	push	{r3, lr}
 800d4ba:	2006      	movs	r0, #6
 800d4bc:	f000 fa54 	bl	800d968 <raise>
 800d4c0:	2001      	movs	r0, #1
 800d4c2:	f7f7 fd7f 	bl	8004fc4 <_exit>
	...

0800d4c8 <__sflush_r>:
 800d4c8:	898a      	ldrh	r2, [r1, #12]
 800d4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	0710      	lsls	r0, r2, #28
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	d458      	bmi.n	800d588 <__sflush_r+0xc0>
 800d4d6:	684b      	ldr	r3, [r1, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	dc05      	bgt.n	800d4e8 <__sflush_r+0x20>
 800d4dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	dc02      	bgt.n	800d4e8 <__sflush_r+0x20>
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4ea:	2e00      	cmp	r6, #0
 800d4ec:	d0f9      	beq.n	800d4e2 <__sflush_r+0x1a>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d4f4:	682f      	ldr	r7, [r5, #0]
 800d4f6:	602b      	str	r3, [r5, #0]
 800d4f8:	d032      	beq.n	800d560 <__sflush_r+0x98>
 800d4fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d4fc:	89a3      	ldrh	r3, [r4, #12]
 800d4fe:	075a      	lsls	r2, r3, #29
 800d500:	d505      	bpl.n	800d50e <__sflush_r+0x46>
 800d502:	6863      	ldr	r3, [r4, #4]
 800d504:	1ac0      	subs	r0, r0, r3
 800d506:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d508:	b10b      	cbz	r3, 800d50e <__sflush_r+0x46>
 800d50a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d50c:	1ac0      	subs	r0, r0, r3
 800d50e:	2300      	movs	r3, #0
 800d510:	4602      	mov	r2, r0
 800d512:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d514:	6a21      	ldr	r1, [r4, #32]
 800d516:	4628      	mov	r0, r5
 800d518:	47b0      	blx	r6
 800d51a:	1c43      	adds	r3, r0, #1
 800d51c:	89a3      	ldrh	r3, [r4, #12]
 800d51e:	d106      	bne.n	800d52e <__sflush_r+0x66>
 800d520:	6829      	ldr	r1, [r5, #0]
 800d522:	291d      	cmp	r1, #29
 800d524:	d82c      	bhi.n	800d580 <__sflush_r+0xb8>
 800d526:	4a2a      	ldr	r2, [pc, #168]	; (800d5d0 <__sflush_r+0x108>)
 800d528:	40ca      	lsrs	r2, r1
 800d52a:	07d6      	lsls	r6, r2, #31
 800d52c:	d528      	bpl.n	800d580 <__sflush_r+0xb8>
 800d52e:	2200      	movs	r2, #0
 800d530:	6062      	str	r2, [r4, #4]
 800d532:	04d9      	lsls	r1, r3, #19
 800d534:	6922      	ldr	r2, [r4, #16]
 800d536:	6022      	str	r2, [r4, #0]
 800d538:	d504      	bpl.n	800d544 <__sflush_r+0x7c>
 800d53a:	1c42      	adds	r2, r0, #1
 800d53c:	d101      	bne.n	800d542 <__sflush_r+0x7a>
 800d53e:	682b      	ldr	r3, [r5, #0]
 800d540:	b903      	cbnz	r3, 800d544 <__sflush_r+0x7c>
 800d542:	6560      	str	r0, [r4, #84]	; 0x54
 800d544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d546:	602f      	str	r7, [r5, #0]
 800d548:	2900      	cmp	r1, #0
 800d54a:	d0ca      	beq.n	800d4e2 <__sflush_r+0x1a>
 800d54c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d550:	4299      	cmp	r1, r3
 800d552:	d002      	beq.n	800d55a <__sflush_r+0x92>
 800d554:	4628      	mov	r0, r5
 800d556:	f7ff faa5 	bl	800caa4 <_free_r>
 800d55a:	2000      	movs	r0, #0
 800d55c:	6360      	str	r0, [r4, #52]	; 0x34
 800d55e:	e7c1      	b.n	800d4e4 <__sflush_r+0x1c>
 800d560:	6a21      	ldr	r1, [r4, #32]
 800d562:	2301      	movs	r3, #1
 800d564:	4628      	mov	r0, r5
 800d566:	47b0      	blx	r6
 800d568:	1c41      	adds	r1, r0, #1
 800d56a:	d1c7      	bne.n	800d4fc <__sflush_r+0x34>
 800d56c:	682b      	ldr	r3, [r5, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d0c4      	beq.n	800d4fc <__sflush_r+0x34>
 800d572:	2b1d      	cmp	r3, #29
 800d574:	d001      	beq.n	800d57a <__sflush_r+0xb2>
 800d576:	2b16      	cmp	r3, #22
 800d578:	d101      	bne.n	800d57e <__sflush_r+0xb6>
 800d57a:	602f      	str	r7, [r5, #0]
 800d57c:	e7b1      	b.n	800d4e2 <__sflush_r+0x1a>
 800d57e:	89a3      	ldrh	r3, [r4, #12]
 800d580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d584:	81a3      	strh	r3, [r4, #12]
 800d586:	e7ad      	b.n	800d4e4 <__sflush_r+0x1c>
 800d588:	690f      	ldr	r7, [r1, #16]
 800d58a:	2f00      	cmp	r7, #0
 800d58c:	d0a9      	beq.n	800d4e2 <__sflush_r+0x1a>
 800d58e:	0793      	lsls	r3, r2, #30
 800d590:	680e      	ldr	r6, [r1, #0]
 800d592:	bf08      	it	eq
 800d594:	694b      	ldreq	r3, [r1, #20]
 800d596:	600f      	str	r7, [r1, #0]
 800d598:	bf18      	it	ne
 800d59a:	2300      	movne	r3, #0
 800d59c:	eba6 0807 	sub.w	r8, r6, r7
 800d5a0:	608b      	str	r3, [r1, #8]
 800d5a2:	f1b8 0f00 	cmp.w	r8, #0
 800d5a6:	dd9c      	ble.n	800d4e2 <__sflush_r+0x1a>
 800d5a8:	6a21      	ldr	r1, [r4, #32]
 800d5aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d5ac:	4643      	mov	r3, r8
 800d5ae:	463a      	mov	r2, r7
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	47b0      	blx	r6
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	dc06      	bgt.n	800d5c6 <__sflush_r+0xfe>
 800d5b8:	89a3      	ldrh	r3, [r4, #12]
 800d5ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5be:	81a3      	strh	r3, [r4, #12]
 800d5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c4:	e78e      	b.n	800d4e4 <__sflush_r+0x1c>
 800d5c6:	4407      	add	r7, r0
 800d5c8:	eba8 0800 	sub.w	r8, r8, r0
 800d5cc:	e7e9      	b.n	800d5a2 <__sflush_r+0xda>
 800d5ce:	bf00      	nop
 800d5d0:	20400001 	.word	0x20400001

0800d5d4 <_fflush_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	690b      	ldr	r3, [r1, #16]
 800d5d8:	4605      	mov	r5, r0
 800d5da:	460c      	mov	r4, r1
 800d5dc:	b913      	cbnz	r3, 800d5e4 <_fflush_r+0x10>
 800d5de:	2500      	movs	r5, #0
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	bd38      	pop	{r3, r4, r5, pc}
 800d5e4:	b118      	cbz	r0, 800d5ee <_fflush_r+0x1a>
 800d5e6:	6983      	ldr	r3, [r0, #24]
 800d5e8:	b90b      	cbnz	r3, 800d5ee <_fflush_r+0x1a>
 800d5ea:	f000 f887 	bl	800d6fc <__sinit>
 800d5ee:	4b14      	ldr	r3, [pc, #80]	; (800d640 <_fflush_r+0x6c>)
 800d5f0:	429c      	cmp	r4, r3
 800d5f2:	d11b      	bne.n	800d62c <_fflush_r+0x58>
 800d5f4:	686c      	ldr	r4, [r5, #4]
 800d5f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d0ef      	beq.n	800d5de <_fflush_r+0xa>
 800d5fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d600:	07d0      	lsls	r0, r2, #31
 800d602:	d404      	bmi.n	800d60e <_fflush_r+0x3a>
 800d604:	0599      	lsls	r1, r3, #22
 800d606:	d402      	bmi.n	800d60e <_fflush_r+0x3a>
 800d608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d60a:	f000 f915 	bl	800d838 <__retarget_lock_acquire_recursive>
 800d60e:	4628      	mov	r0, r5
 800d610:	4621      	mov	r1, r4
 800d612:	f7ff ff59 	bl	800d4c8 <__sflush_r>
 800d616:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d618:	07da      	lsls	r2, r3, #31
 800d61a:	4605      	mov	r5, r0
 800d61c:	d4e0      	bmi.n	800d5e0 <_fflush_r+0xc>
 800d61e:	89a3      	ldrh	r3, [r4, #12]
 800d620:	059b      	lsls	r3, r3, #22
 800d622:	d4dd      	bmi.n	800d5e0 <_fflush_r+0xc>
 800d624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d626:	f000 f908 	bl	800d83a <__retarget_lock_release_recursive>
 800d62a:	e7d9      	b.n	800d5e0 <_fflush_r+0xc>
 800d62c:	4b05      	ldr	r3, [pc, #20]	; (800d644 <_fflush_r+0x70>)
 800d62e:	429c      	cmp	r4, r3
 800d630:	d101      	bne.n	800d636 <_fflush_r+0x62>
 800d632:	68ac      	ldr	r4, [r5, #8]
 800d634:	e7df      	b.n	800d5f6 <_fflush_r+0x22>
 800d636:	4b04      	ldr	r3, [pc, #16]	; (800d648 <_fflush_r+0x74>)
 800d638:	429c      	cmp	r4, r3
 800d63a:	bf08      	it	eq
 800d63c:	68ec      	ldreq	r4, [r5, #12]
 800d63e:	e7da      	b.n	800d5f6 <_fflush_r+0x22>
 800d640:	0800f404 	.word	0x0800f404
 800d644:	0800f424 	.word	0x0800f424
 800d648:	0800f3e4 	.word	0x0800f3e4

0800d64c <std>:
 800d64c:	2300      	movs	r3, #0
 800d64e:	b510      	push	{r4, lr}
 800d650:	4604      	mov	r4, r0
 800d652:	e9c0 3300 	strd	r3, r3, [r0]
 800d656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d65a:	6083      	str	r3, [r0, #8]
 800d65c:	8181      	strh	r1, [r0, #12]
 800d65e:	6643      	str	r3, [r0, #100]	; 0x64
 800d660:	81c2      	strh	r2, [r0, #14]
 800d662:	6183      	str	r3, [r0, #24]
 800d664:	4619      	mov	r1, r3
 800d666:	2208      	movs	r2, #8
 800d668:	305c      	adds	r0, #92	; 0x5c
 800d66a:	f7fd fb5b 	bl	800ad24 <memset>
 800d66e:	4b05      	ldr	r3, [pc, #20]	; (800d684 <std+0x38>)
 800d670:	6263      	str	r3, [r4, #36]	; 0x24
 800d672:	4b05      	ldr	r3, [pc, #20]	; (800d688 <std+0x3c>)
 800d674:	62a3      	str	r3, [r4, #40]	; 0x28
 800d676:	4b05      	ldr	r3, [pc, #20]	; (800d68c <std+0x40>)
 800d678:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d67a:	4b05      	ldr	r3, [pc, #20]	; (800d690 <std+0x44>)
 800d67c:	6224      	str	r4, [r4, #32]
 800d67e:	6323      	str	r3, [r4, #48]	; 0x30
 800d680:	bd10      	pop	{r4, pc}
 800d682:	bf00      	nop
 800d684:	0800d9a1 	.word	0x0800d9a1
 800d688:	0800d9c3 	.word	0x0800d9c3
 800d68c:	0800d9fb 	.word	0x0800d9fb
 800d690:	0800da1f 	.word	0x0800da1f

0800d694 <_cleanup_r>:
 800d694:	4901      	ldr	r1, [pc, #4]	; (800d69c <_cleanup_r+0x8>)
 800d696:	f000 b8af 	b.w	800d7f8 <_fwalk_reent>
 800d69a:	bf00      	nop
 800d69c:	0800d5d5 	.word	0x0800d5d5

0800d6a0 <__sfmoreglue>:
 800d6a0:	b570      	push	{r4, r5, r6, lr}
 800d6a2:	2268      	movs	r2, #104	; 0x68
 800d6a4:	1e4d      	subs	r5, r1, #1
 800d6a6:	4355      	muls	r5, r2
 800d6a8:	460e      	mov	r6, r1
 800d6aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d6ae:	f7ff fa65 	bl	800cb7c <_malloc_r>
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	b140      	cbz	r0, 800d6c8 <__sfmoreglue+0x28>
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	e9c0 1600 	strd	r1, r6, [r0]
 800d6bc:	300c      	adds	r0, #12
 800d6be:	60a0      	str	r0, [r4, #8]
 800d6c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d6c4:	f7fd fb2e 	bl	800ad24 <memset>
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	bd70      	pop	{r4, r5, r6, pc}

0800d6cc <__sfp_lock_acquire>:
 800d6cc:	4801      	ldr	r0, [pc, #4]	; (800d6d4 <__sfp_lock_acquire+0x8>)
 800d6ce:	f000 b8b3 	b.w	800d838 <__retarget_lock_acquire_recursive>
 800d6d2:	bf00      	nop
 800d6d4:	200009a5 	.word	0x200009a5

0800d6d8 <__sfp_lock_release>:
 800d6d8:	4801      	ldr	r0, [pc, #4]	; (800d6e0 <__sfp_lock_release+0x8>)
 800d6da:	f000 b8ae 	b.w	800d83a <__retarget_lock_release_recursive>
 800d6de:	bf00      	nop
 800d6e0:	200009a5 	.word	0x200009a5

0800d6e4 <__sinit_lock_acquire>:
 800d6e4:	4801      	ldr	r0, [pc, #4]	; (800d6ec <__sinit_lock_acquire+0x8>)
 800d6e6:	f000 b8a7 	b.w	800d838 <__retarget_lock_acquire_recursive>
 800d6ea:	bf00      	nop
 800d6ec:	200009a6 	.word	0x200009a6

0800d6f0 <__sinit_lock_release>:
 800d6f0:	4801      	ldr	r0, [pc, #4]	; (800d6f8 <__sinit_lock_release+0x8>)
 800d6f2:	f000 b8a2 	b.w	800d83a <__retarget_lock_release_recursive>
 800d6f6:	bf00      	nop
 800d6f8:	200009a6 	.word	0x200009a6

0800d6fc <__sinit>:
 800d6fc:	b510      	push	{r4, lr}
 800d6fe:	4604      	mov	r4, r0
 800d700:	f7ff fff0 	bl	800d6e4 <__sinit_lock_acquire>
 800d704:	69a3      	ldr	r3, [r4, #24]
 800d706:	b11b      	cbz	r3, 800d710 <__sinit+0x14>
 800d708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d70c:	f7ff bff0 	b.w	800d6f0 <__sinit_lock_release>
 800d710:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d714:	6523      	str	r3, [r4, #80]	; 0x50
 800d716:	4b13      	ldr	r3, [pc, #76]	; (800d764 <__sinit+0x68>)
 800d718:	4a13      	ldr	r2, [pc, #76]	; (800d768 <__sinit+0x6c>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d71e:	42a3      	cmp	r3, r4
 800d720:	bf04      	itt	eq
 800d722:	2301      	moveq	r3, #1
 800d724:	61a3      	streq	r3, [r4, #24]
 800d726:	4620      	mov	r0, r4
 800d728:	f000 f820 	bl	800d76c <__sfp>
 800d72c:	6060      	str	r0, [r4, #4]
 800d72e:	4620      	mov	r0, r4
 800d730:	f000 f81c 	bl	800d76c <__sfp>
 800d734:	60a0      	str	r0, [r4, #8]
 800d736:	4620      	mov	r0, r4
 800d738:	f000 f818 	bl	800d76c <__sfp>
 800d73c:	2200      	movs	r2, #0
 800d73e:	60e0      	str	r0, [r4, #12]
 800d740:	2104      	movs	r1, #4
 800d742:	6860      	ldr	r0, [r4, #4]
 800d744:	f7ff ff82 	bl	800d64c <std>
 800d748:	68a0      	ldr	r0, [r4, #8]
 800d74a:	2201      	movs	r2, #1
 800d74c:	2109      	movs	r1, #9
 800d74e:	f7ff ff7d 	bl	800d64c <std>
 800d752:	68e0      	ldr	r0, [r4, #12]
 800d754:	2202      	movs	r2, #2
 800d756:	2112      	movs	r1, #18
 800d758:	f7ff ff78 	bl	800d64c <std>
 800d75c:	2301      	movs	r3, #1
 800d75e:	61a3      	str	r3, [r4, #24]
 800d760:	e7d2      	b.n	800d708 <__sinit+0xc>
 800d762:	bf00      	nop
 800d764:	0800f068 	.word	0x0800f068
 800d768:	0800d695 	.word	0x0800d695

0800d76c <__sfp>:
 800d76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d76e:	4607      	mov	r7, r0
 800d770:	f7ff ffac 	bl	800d6cc <__sfp_lock_acquire>
 800d774:	4b1e      	ldr	r3, [pc, #120]	; (800d7f0 <__sfp+0x84>)
 800d776:	681e      	ldr	r6, [r3, #0]
 800d778:	69b3      	ldr	r3, [r6, #24]
 800d77a:	b913      	cbnz	r3, 800d782 <__sfp+0x16>
 800d77c:	4630      	mov	r0, r6
 800d77e:	f7ff ffbd 	bl	800d6fc <__sinit>
 800d782:	3648      	adds	r6, #72	; 0x48
 800d784:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d788:	3b01      	subs	r3, #1
 800d78a:	d503      	bpl.n	800d794 <__sfp+0x28>
 800d78c:	6833      	ldr	r3, [r6, #0]
 800d78e:	b30b      	cbz	r3, 800d7d4 <__sfp+0x68>
 800d790:	6836      	ldr	r6, [r6, #0]
 800d792:	e7f7      	b.n	800d784 <__sfp+0x18>
 800d794:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d798:	b9d5      	cbnz	r5, 800d7d0 <__sfp+0x64>
 800d79a:	4b16      	ldr	r3, [pc, #88]	; (800d7f4 <__sfp+0x88>)
 800d79c:	60e3      	str	r3, [r4, #12]
 800d79e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d7a2:	6665      	str	r5, [r4, #100]	; 0x64
 800d7a4:	f000 f847 	bl	800d836 <__retarget_lock_init_recursive>
 800d7a8:	f7ff ff96 	bl	800d6d8 <__sfp_lock_release>
 800d7ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d7b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d7b4:	6025      	str	r5, [r4, #0]
 800d7b6:	61a5      	str	r5, [r4, #24]
 800d7b8:	2208      	movs	r2, #8
 800d7ba:	4629      	mov	r1, r5
 800d7bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d7c0:	f7fd fab0 	bl	800ad24 <memset>
 800d7c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d7c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7d0:	3468      	adds	r4, #104	; 0x68
 800d7d2:	e7d9      	b.n	800d788 <__sfp+0x1c>
 800d7d4:	2104      	movs	r1, #4
 800d7d6:	4638      	mov	r0, r7
 800d7d8:	f7ff ff62 	bl	800d6a0 <__sfmoreglue>
 800d7dc:	4604      	mov	r4, r0
 800d7de:	6030      	str	r0, [r6, #0]
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d1d5      	bne.n	800d790 <__sfp+0x24>
 800d7e4:	f7ff ff78 	bl	800d6d8 <__sfp_lock_release>
 800d7e8:	230c      	movs	r3, #12
 800d7ea:	603b      	str	r3, [r7, #0]
 800d7ec:	e7ee      	b.n	800d7cc <__sfp+0x60>
 800d7ee:	bf00      	nop
 800d7f0:	0800f068 	.word	0x0800f068
 800d7f4:	ffff0001 	.word	0xffff0001

0800d7f8 <_fwalk_reent>:
 800d7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7fc:	4606      	mov	r6, r0
 800d7fe:	4688      	mov	r8, r1
 800d800:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d804:	2700      	movs	r7, #0
 800d806:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d80a:	f1b9 0901 	subs.w	r9, r9, #1
 800d80e:	d505      	bpl.n	800d81c <_fwalk_reent+0x24>
 800d810:	6824      	ldr	r4, [r4, #0]
 800d812:	2c00      	cmp	r4, #0
 800d814:	d1f7      	bne.n	800d806 <_fwalk_reent+0xe>
 800d816:	4638      	mov	r0, r7
 800d818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d81c:	89ab      	ldrh	r3, [r5, #12]
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d907      	bls.n	800d832 <_fwalk_reent+0x3a>
 800d822:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d826:	3301      	adds	r3, #1
 800d828:	d003      	beq.n	800d832 <_fwalk_reent+0x3a>
 800d82a:	4629      	mov	r1, r5
 800d82c:	4630      	mov	r0, r6
 800d82e:	47c0      	blx	r8
 800d830:	4307      	orrs	r7, r0
 800d832:	3568      	adds	r5, #104	; 0x68
 800d834:	e7e9      	b.n	800d80a <_fwalk_reent+0x12>

0800d836 <__retarget_lock_init_recursive>:
 800d836:	4770      	bx	lr

0800d838 <__retarget_lock_acquire_recursive>:
 800d838:	4770      	bx	lr

0800d83a <__retarget_lock_release_recursive>:
 800d83a:	4770      	bx	lr

0800d83c <__swhatbuf_r>:
 800d83c:	b570      	push	{r4, r5, r6, lr}
 800d83e:	460e      	mov	r6, r1
 800d840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d844:	2900      	cmp	r1, #0
 800d846:	b096      	sub	sp, #88	; 0x58
 800d848:	4614      	mov	r4, r2
 800d84a:	461d      	mov	r5, r3
 800d84c:	da08      	bge.n	800d860 <__swhatbuf_r+0x24>
 800d84e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d852:	2200      	movs	r2, #0
 800d854:	602a      	str	r2, [r5, #0]
 800d856:	061a      	lsls	r2, r3, #24
 800d858:	d410      	bmi.n	800d87c <__swhatbuf_r+0x40>
 800d85a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d85e:	e00e      	b.n	800d87e <__swhatbuf_r+0x42>
 800d860:	466a      	mov	r2, sp
 800d862:	f000 f903 	bl	800da6c <_fstat_r>
 800d866:	2800      	cmp	r0, #0
 800d868:	dbf1      	blt.n	800d84e <__swhatbuf_r+0x12>
 800d86a:	9a01      	ldr	r2, [sp, #4]
 800d86c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d870:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d874:	425a      	negs	r2, r3
 800d876:	415a      	adcs	r2, r3
 800d878:	602a      	str	r2, [r5, #0]
 800d87a:	e7ee      	b.n	800d85a <__swhatbuf_r+0x1e>
 800d87c:	2340      	movs	r3, #64	; 0x40
 800d87e:	2000      	movs	r0, #0
 800d880:	6023      	str	r3, [r4, #0]
 800d882:	b016      	add	sp, #88	; 0x58
 800d884:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d888 <__smakebuf_r>:
 800d888:	898b      	ldrh	r3, [r1, #12]
 800d88a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d88c:	079d      	lsls	r5, r3, #30
 800d88e:	4606      	mov	r6, r0
 800d890:	460c      	mov	r4, r1
 800d892:	d507      	bpl.n	800d8a4 <__smakebuf_r+0x1c>
 800d894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d898:	6023      	str	r3, [r4, #0]
 800d89a:	6123      	str	r3, [r4, #16]
 800d89c:	2301      	movs	r3, #1
 800d89e:	6163      	str	r3, [r4, #20]
 800d8a0:	b002      	add	sp, #8
 800d8a2:	bd70      	pop	{r4, r5, r6, pc}
 800d8a4:	ab01      	add	r3, sp, #4
 800d8a6:	466a      	mov	r2, sp
 800d8a8:	f7ff ffc8 	bl	800d83c <__swhatbuf_r>
 800d8ac:	9900      	ldr	r1, [sp, #0]
 800d8ae:	4605      	mov	r5, r0
 800d8b0:	4630      	mov	r0, r6
 800d8b2:	f7ff f963 	bl	800cb7c <_malloc_r>
 800d8b6:	b948      	cbnz	r0, 800d8cc <__smakebuf_r+0x44>
 800d8b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8bc:	059a      	lsls	r2, r3, #22
 800d8be:	d4ef      	bmi.n	800d8a0 <__smakebuf_r+0x18>
 800d8c0:	f023 0303 	bic.w	r3, r3, #3
 800d8c4:	f043 0302 	orr.w	r3, r3, #2
 800d8c8:	81a3      	strh	r3, [r4, #12]
 800d8ca:	e7e3      	b.n	800d894 <__smakebuf_r+0xc>
 800d8cc:	4b0d      	ldr	r3, [pc, #52]	; (800d904 <__smakebuf_r+0x7c>)
 800d8ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800d8d0:	89a3      	ldrh	r3, [r4, #12]
 800d8d2:	6020      	str	r0, [r4, #0]
 800d8d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8d8:	81a3      	strh	r3, [r4, #12]
 800d8da:	9b00      	ldr	r3, [sp, #0]
 800d8dc:	6163      	str	r3, [r4, #20]
 800d8de:	9b01      	ldr	r3, [sp, #4]
 800d8e0:	6120      	str	r0, [r4, #16]
 800d8e2:	b15b      	cbz	r3, 800d8fc <__smakebuf_r+0x74>
 800d8e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	f000 f8d1 	bl	800da90 <_isatty_r>
 800d8ee:	b128      	cbz	r0, 800d8fc <__smakebuf_r+0x74>
 800d8f0:	89a3      	ldrh	r3, [r4, #12]
 800d8f2:	f023 0303 	bic.w	r3, r3, #3
 800d8f6:	f043 0301 	orr.w	r3, r3, #1
 800d8fa:	81a3      	strh	r3, [r4, #12]
 800d8fc:	89a0      	ldrh	r0, [r4, #12]
 800d8fe:	4305      	orrs	r5, r0
 800d900:	81a5      	strh	r5, [r4, #12]
 800d902:	e7cd      	b.n	800d8a0 <__smakebuf_r+0x18>
 800d904:	0800d695 	.word	0x0800d695

0800d908 <_malloc_usable_size_r>:
 800d908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d90c:	1f18      	subs	r0, r3, #4
 800d90e:	2b00      	cmp	r3, #0
 800d910:	bfbc      	itt	lt
 800d912:	580b      	ldrlt	r3, [r1, r0]
 800d914:	18c0      	addlt	r0, r0, r3
 800d916:	4770      	bx	lr

0800d918 <_raise_r>:
 800d918:	291f      	cmp	r1, #31
 800d91a:	b538      	push	{r3, r4, r5, lr}
 800d91c:	4604      	mov	r4, r0
 800d91e:	460d      	mov	r5, r1
 800d920:	d904      	bls.n	800d92c <_raise_r+0x14>
 800d922:	2316      	movs	r3, #22
 800d924:	6003      	str	r3, [r0, #0]
 800d926:	f04f 30ff 	mov.w	r0, #4294967295
 800d92a:	bd38      	pop	{r3, r4, r5, pc}
 800d92c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d92e:	b112      	cbz	r2, 800d936 <_raise_r+0x1e>
 800d930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d934:	b94b      	cbnz	r3, 800d94a <_raise_r+0x32>
 800d936:	4620      	mov	r0, r4
 800d938:	f000 f830 	bl	800d99c <_getpid_r>
 800d93c:	462a      	mov	r2, r5
 800d93e:	4601      	mov	r1, r0
 800d940:	4620      	mov	r0, r4
 800d942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d946:	f000 b817 	b.w	800d978 <_kill_r>
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d00a      	beq.n	800d964 <_raise_r+0x4c>
 800d94e:	1c59      	adds	r1, r3, #1
 800d950:	d103      	bne.n	800d95a <_raise_r+0x42>
 800d952:	2316      	movs	r3, #22
 800d954:	6003      	str	r3, [r0, #0]
 800d956:	2001      	movs	r0, #1
 800d958:	e7e7      	b.n	800d92a <_raise_r+0x12>
 800d95a:	2400      	movs	r4, #0
 800d95c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d960:	4628      	mov	r0, r5
 800d962:	4798      	blx	r3
 800d964:	2000      	movs	r0, #0
 800d966:	e7e0      	b.n	800d92a <_raise_r+0x12>

0800d968 <raise>:
 800d968:	4b02      	ldr	r3, [pc, #8]	; (800d974 <raise+0xc>)
 800d96a:	4601      	mov	r1, r0
 800d96c:	6818      	ldr	r0, [r3, #0]
 800d96e:	f7ff bfd3 	b.w	800d918 <_raise_r>
 800d972:	bf00      	nop
 800d974:	20000060 	.word	0x20000060

0800d978 <_kill_r>:
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	4d07      	ldr	r5, [pc, #28]	; (800d998 <_kill_r+0x20>)
 800d97c:	2300      	movs	r3, #0
 800d97e:	4604      	mov	r4, r0
 800d980:	4608      	mov	r0, r1
 800d982:	4611      	mov	r1, r2
 800d984:	602b      	str	r3, [r5, #0]
 800d986:	f7f7 fb0d 	bl	8004fa4 <_kill>
 800d98a:	1c43      	adds	r3, r0, #1
 800d98c:	d102      	bne.n	800d994 <_kill_r+0x1c>
 800d98e:	682b      	ldr	r3, [r5, #0]
 800d990:	b103      	cbz	r3, 800d994 <_kill_r+0x1c>
 800d992:	6023      	str	r3, [r4, #0]
 800d994:	bd38      	pop	{r3, r4, r5, pc}
 800d996:	bf00      	nop
 800d998:	200009a0 	.word	0x200009a0

0800d99c <_getpid_r>:
 800d99c:	f7f7 bafa 	b.w	8004f94 <_getpid>

0800d9a0 <__sread>:
 800d9a0:	b510      	push	{r4, lr}
 800d9a2:	460c      	mov	r4, r1
 800d9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9a8:	f000 f894 	bl	800dad4 <_read_r>
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	bfab      	itete	ge
 800d9b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9b2:	89a3      	ldrhlt	r3, [r4, #12]
 800d9b4:	181b      	addge	r3, r3, r0
 800d9b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9ba:	bfac      	ite	ge
 800d9bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9be:	81a3      	strhlt	r3, [r4, #12]
 800d9c0:	bd10      	pop	{r4, pc}

0800d9c2 <__swrite>:
 800d9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c6:	461f      	mov	r7, r3
 800d9c8:	898b      	ldrh	r3, [r1, #12]
 800d9ca:	05db      	lsls	r3, r3, #23
 800d9cc:	4605      	mov	r5, r0
 800d9ce:	460c      	mov	r4, r1
 800d9d0:	4616      	mov	r6, r2
 800d9d2:	d505      	bpl.n	800d9e0 <__swrite+0x1e>
 800d9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9d8:	2302      	movs	r3, #2
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f000 f868 	bl	800dab0 <_lseek_r>
 800d9e0:	89a3      	ldrh	r3, [r4, #12]
 800d9e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9ea:	81a3      	strh	r3, [r4, #12]
 800d9ec:	4632      	mov	r2, r6
 800d9ee:	463b      	mov	r3, r7
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9f6:	f000 b817 	b.w	800da28 <_write_r>

0800d9fa <__sseek>:
 800d9fa:	b510      	push	{r4, lr}
 800d9fc:	460c      	mov	r4, r1
 800d9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da02:	f000 f855 	bl	800dab0 <_lseek_r>
 800da06:	1c43      	adds	r3, r0, #1
 800da08:	89a3      	ldrh	r3, [r4, #12]
 800da0a:	bf15      	itete	ne
 800da0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800da0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da16:	81a3      	strheq	r3, [r4, #12]
 800da18:	bf18      	it	ne
 800da1a:	81a3      	strhne	r3, [r4, #12]
 800da1c:	bd10      	pop	{r4, pc}

0800da1e <__sclose>:
 800da1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da22:	f000 b813 	b.w	800da4c <_close_r>
	...

0800da28 <_write_r>:
 800da28:	b538      	push	{r3, r4, r5, lr}
 800da2a:	4d07      	ldr	r5, [pc, #28]	; (800da48 <_write_r+0x20>)
 800da2c:	4604      	mov	r4, r0
 800da2e:	4608      	mov	r0, r1
 800da30:	4611      	mov	r1, r2
 800da32:	2200      	movs	r2, #0
 800da34:	602a      	str	r2, [r5, #0]
 800da36:	461a      	mov	r2, r3
 800da38:	f7f7 faeb 	bl	8005012 <_write>
 800da3c:	1c43      	adds	r3, r0, #1
 800da3e:	d102      	bne.n	800da46 <_write_r+0x1e>
 800da40:	682b      	ldr	r3, [r5, #0]
 800da42:	b103      	cbz	r3, 800da46 <_write_r+0x1e>
 800da44:	6023      	str	r3, [r4, #0]
 800da46:	bd38      	pop	{r3, r4, r5, pc}
 800da48:	200009a0 	.word	0x200009a0

0800da4c <_close_r>:
 800da4c:	b538      	push	{r3, r4, r5, lr}
 800da4e:	4d06      	ldr	r5, [pc, #24]	; (800da68 <_close_r+0x1c>)
 800da50:	2300      	movs	r3, #0
 800da52:	4604      	mov	r4, r0
 800da54:	4608      	mov	r0, r1
 800da56:	602b      	str	r3, [r5, #0]
 800da58:	f7f7 faf7 	bl	800504a <_close>
 800da5c:	1c43      	adds	r3, r0, #1
 800da5e:	d102      	bne.n	800da66 <_close_r+0x1a>
 800da60:	682b      	ldr	r3, [r5, #0]
 800da62:	b103      	cbz	r3, 800da66 <_close_r+0x1a>
 800da64:	6023      	str	r3, [r4, #0]
 800da66:	bd38      	pop	{r3, r4, r5, pc}
 800da68:	200009a0 	.word	0x200009a0

0800da6c <_fstat_r>:
 800da6c:	b538      	push	{r3, r4, r5, lr}
 800da6e:	4d07      	ldr	r5, [pc, #28]	; (800da8c <_fstat_r+0x20>)
 800da70:	2300      	movs	r3, #0
 800da72:	4604      	mov	r4, r0
 800da74:	4608      	mov	r0, r1
 800da76:	4611      	mov	r1, r2
 800da78:	602b      	str	r3, [r5, #0]
 800da7a:	f7f7 faf2 	bl	8005062 <_fstat>
 800da7e:	1c43      	adds	r3, r0, #1
 800da80:	d102      	bne.n	800da88 <_fstat_r+0x1c>
 800da82:	682b      	ldr	r3, [r5, #0]
 800da84:	b103      	cbz	r3, 800da88 <_fstat_r+0x1c>
 800da86:	6023      	str	r3, [r4, #0]
 800da88:	bd38      	pop	{r3, r4, r5, pc}
 800da8a:	bf00      	nop
 800da8c:	200009a0 	.word	0x200009a0

0800da90 <_isatty_r>:
 800da90:	b538      	push	{r3, r4, r5, lr}
 800da92:	4d06      	ldr	r5, [pc, #24]	; (800daac <_isatty_r+0x1c>)
 800da94:	2300      	movs	r3, #0
 800da96:	4604      	mov	r4, r0
 800da98:	4608      	mov	r0, r1
 800da9a:	602b      	str	r3, [r5, #0]
 800da9c:	f7f7 faf1 	bl	8005082 <_isatty>
 800daa0:	1c43      	adds	r3, r0, #1
 800daa2:	d102      	bne.n	800daaa <_isatty_r+0x1a>
 800daa4:	682b      	ldr	r3, [r5, #0]
 800daa6:	b103      	cbz	r3, 800daaa <_isatty_r+0x1a>
 800daa8:	6023      	str	r3, [r4, #0]
 800daaa:	bd38      	pop	{r3, r4, r5, pc}
 800daac:	200009a0 	.word	0x200009a0

0800dab0 <_lseek_r>:
 800dab0:	b538      	push	{r3, r4, r5, lr}
 800dab2:	4d07      	ldr	r5, [pc, #28]	; (800dad0 <_lseek_r+0x20>)
 800dab4:	4604      	mov	r4, r0
 800dab6:	4608      	mov	r0, r1
 800dab8:	4611      	mov	r1, r2
 800daba:	2200      	movs	r2, #0
 800dabc:	602a      	str	r2, [r5, #0]
 800dabe:	461a      	mov	r2, r3
 800dac0:	f7f7 faea 	bl	8005098 <_lseek>
 800dac4:	1c43      	adds	r3, r0, #1
 800dac6:	d102      	bne.n	800dace <_lseek_r+0x1e>
 800dac8:	682b      	ldr	r3, [r5, #0]
 800daca:	b103      	cbz	r3, 800dace <_lseek_r+0x1e>
 800dacc:	6023      	str	r3, [r4, #0]
 800dace:	bd38      	pop	{r3, r4, r5, pc}
 800dad0:	200009a0 	.word	0x200009a0

0800dad4 <_read_r>:
 800dad4:	b538      	push	{r3, r4, r5, lr}
 800dad6:	4d07      	ldr	r5, [pc, #28]	; (800daf4 <_read_r+0x20>)
 800dad8:	4604      	mov	r4, r0
 800dada:	4608      	mov	r0, r1
 800dadc:	4611      	mov	r1, r2
 800dade:	2200      	movs	r2, #0
 800dae0:	602a      	str	r2, [r5, #0]
 800dae2:	461a      	mov	r2, r3
 800dae4:	f7f7 fa78 	bl	8004fd8 <_read>
 800dae8:	1c43      	adds	r3, r0, #1
 800daea:	d102      	bne.n	800daf2 <_read_r+0x1e>
 800daec:	682b      	ldr	r3, [r5, #0]
 800daee:	b103      	cbz	r3, 800daf2 <_read_r+0x1e>
 800daf0:	6023      	str	r3, [r4, #0]
 800daf2:	bd38      	pop	{r3, r4, r5, pc}
 800daf4:	200009a0 	.word	0x200009a0

0800daf8 <atan>:
 800daf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dafc:	ec55 4b10 	vmov	r4, r5, d0
 800db00:	4bc3      	ldr	r3, [pc, #780]	; (800de10 <atan+0x318>)
 800db02:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800db06:	429e      	cmp	r6, r3
 800db08:	46ab      	mov	fp, r5
 800db0a:	dd18      	ble.n	800db3e <atan+0x46>
 800db0c:	4bc1      	ldr	r3, [pc, #772]	; (800de14 <atan+0x31c>)
 800db0e:	429e      	cmp	r6, r3
 800db10:	dc01      	bgt.n	800db16 <atan+0x1e>
 800db12:	d109      	bne.n	800db28 <atan+0x30>
 800db14:	b144      	cbz	r4, 800db28 <atan+0x30>
 800db16:	4622      	mov	r2, r4
 800db18:	462b      	mov	r3, r5
 800db1a:	4620      	mov	r0, r4
 800db1c:	4629      	mov	r1, r5
 800db1e:	f7f2 fbd5 	bl	80002cc <__adddf3>
 800db22:	4604      	mov	r4, r0
 800db24:	460d      	mov	r5, r1
 800db26:	e006      	b.n	800db36 <atan+0x3e>
 800db28:	f1bb 0f00 	cmp.w	fp, #0
 800db2c:	f300 8131 	bgt.w	800dd92 <atan+0x29a>
 800db30:	a59b      	add	r5, pc, #620	; (adr r5, 800dda0 <atan+0x2a8>)
 800db32:	e9d5 4500 	ldrd	r4, r5, [r5]
 800db36:	ec45 4b10 	vmov	d0, r4, r5
 800db3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db3e:	4bb6      	ldr	r3, [pc, #728]	; (800de18 <atan+0x320>)
 800db40:	429e      	cmp	r6, r3
 800db42:	dc14      	bgt.n	800db6e <atan+0x76>
 800db44:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800db48:	429e      	cmp	r6, r3
 800db4a:	dc0d      	bgt.n	800db68 <atan+0x70>
 800db4c:	a396      	add	r3, pc, #600	; (adr r3, 800dda8 <atan+0x2b0>)
 800db4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db52:	ee10 0a10 	vmov	r0, s0
 800db56:	4629      	mov	r1, r5
 800db58:	f7f2 fbb8 	bl	80002cc <__adddf3>
 800db5c:	4baf      	ldr	r3, [pc, #700]	; (800de1c <atan+0x324>)
 800db5e:	2200      	movs	r2, #0
 800db60:	f7f2 fffa 	bl	8000b58 <__aeabi_dcmpgt>
 800db64:	2800      	cmp	r0, #0
 800db66:	d1e6      	bne.n	800db36 <atan+0x3e>
 800db68:	f04f 3aff 	mov.w	sl, #4294967295
 800db6c:	e02b      	b.n	800dbc6 <atan+0xce>
 800db6e:	f000 f963 	bl	800de38 <fabs>
 800db72:	4bab      	ldr	r3, [pc, #684]	; (800de20 <atan+0x328>)
 800db74:	429e      	cmp	r6, r3
 800db76:	ec55 4b10 	vmov	r4, r5, d0
 800db7a:	f300 80bf 	bgt.w	800dcfc <atan+0x204>
 800db7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800db82:	429e      	cmp	r6, r3
 800db84:	f300 80a0 	bgt.w	800dcc8 <atan+0x1d0>
 800db88:	ee10 2a10 	vmov	r2, s0
 800db8c:	ee10 0a10 	vmov	r0, s0
 800db90:	462b      	mov	r3, r5
 800db92:	4629      	mov	r1, r5
 800db94:	f7f2 fb9a 	bl	80002cc <__adddf3>
 800db98:	4ba0      	ldr	r3, [pc, #640]	; (800de1c <atan+0x324>)
 800db9a:	2200      	movs	r2, #0
 800db9c:	f7f2 fb94 	bl	80002c8 <__aeabi_dsub>
 800dba0:	2200      	movs	r2, #0
 800dba2:	4606      	mov	r6, r0
 800dba4:	460f      	mov	r7, r1
 800dba6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dbaa:	4620      	mov	r0, r4
 800dbac:	4629      	mov	r1, r5
 800dbae:	f7f2 fb8d 	bl	80002cc <__adddf3>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	4630      	mov	r0, r6
 800dbb8:	4639      	mov	r1, r7
 800dbba:	f7f2 fe67 	bl	800088c <__aeabi_ddiv>
 800dbbe:	f04f 0a00 	mov.w	sl, #0
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	460d      	mov	r5, r1
 800dbc6:	4622      	mov	r2, r4
 800dbc8:	462b      	mov	r3, r5
 800dbca:	4620      	mov	r0, r4
 800dbcc:	4629      	mov	r1, r5
 800dbce:	f7f2 fd33 	bl	8000638 <__aeabi_dmul>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	4680      	mov	r8, r0
 800dbd8:	4689      	mov	r9, r1
 800dbda:	f7f2 fd2d 	bl	8000638 <__aeabi_dmul>
 800dbde:	a374      	add	r3, pc, #464	; (adr r3, 800ddb0 <atan+0x2b8>)
 800dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe4:	4606      	mov	r6, r0
 800dbe6:	460f      	mov	r7, r1
 800dbe8:	f7f2 fd26 	bl	8000638 <__aeabi_dmul>
 800dbec:	a372      	add	r3, pc, #456	; (adr r3, 800ddb8 <atan+0x2c0>)
 800dbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf2:	f7f2 fb6b 	bl	80002cc <__adddf3>
 800dbf6:	4632      	mov	r2, r6
 800dbf8:	463b      	mov	r3, r7
 800dbfa:	f7f2 fd1d 	bl	8000638 <__aeabi_dmul>
 800dbfe:	a370      	add	r3, pc, #448	; (adr r3, 800ddc0 <atan+0x2c8>)
 800dc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc04:	f7f2 fb62 	bl	80002cc <__adddf3>
 800dc08:	4632      	mov	r2, r6
 800dc0a:	463b      	mov	r3, r7
 800dc0c:	f7f2 fd14 	bl	8000638 <__aeabi_dmul>
 800dc10:	a36d      	add	r3, pc, #436	; (adr r3, 800ddc8 <atan+0x2d0>)
 800dc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc16:	f7f2 fb59 	bl	80002cc <__adddf3>
 800dc1a:	4632      	mov	r2, r6
 800dc1c:	463b      	mov	r3, r7
 800dc1e:	f7f2 fd0b 	bl	8000638 <__aeabi_dmul>
 800dc22:	a36b      	add	r3, pc, #428	; (adr r3, 800ddd0 <atan+0x2d8>)
 800dc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc28:	f7f2 fb50 	bl	80002cc <__adddf3>
 800dc2c:	4632      	mov	r2, r6
 800dc2e:	463b      	mov	r3, r7
 800dc30:	f7f2 fd02 	bl	8000638 <__aeabi_dmul>
 800dc34:	a368      	add	r3, pc, #416	; (adr r3, 800ddd8 <atan+0x2e0>)
 800dc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3a:	f7f2 fb47 	bl	80002cc <__adddf3>
 800dc3e:	4642      	mov	r2, r8
 800dc40:	464b      	mov	r3, r9
 800dc42:	f7f2 fcf9 	bl	8000638 <__aeabi_dmul>
 800dc46:	a366      	add	r3, pc, #408	; (adr r3, 800dde0 <atan+0x2e8>)
 800dc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4c:	4680      	mov	r8, r0
 800dc4e:	4689      	mov	r9, r1
 800dc50:	4630      	mov	r0, r6
 800dc52:	4639      	mov	r1, r7
 800dc54:	f7f2 fcf0 	bl	8000638 <__aeabi_dmul>
 800dc58:	a363      	add	r3, pc, #396	; (adr r3, 800dde8 <atan+0x2f0>)
 800dc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5e:	f7f2 fb33 	bl	80002c8 <__aeabi_dsub>
 800dc62:	4632      	mov	r2, r6
 800dc64:	463b      	mov	r3, r7
 800dc66:	f7f2 fce7 	bl	8000638 <__aeabi_dmul>
 800dc6a:	a361      	add	r3, pc, #388	; (adr r3, 800ddf0 <atan+0x2f8>)
 800dc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc70:	f7f2 fb2a 	bl	80002c8 <__aeabi_dsub>
 800dc74:	4632      	mov	r2, r6
 800dc76:	463b      	mov	r3, r7
 800dc78:	f7f2 fcde 	bl	8000638 <__aeabi_dmul>
 800dc7c:	a35e      	add	r3, pc, #376	; (adr r3, 800ddf8 <atan+0x300>)
 800dc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc82:	f7f2 fb21 	bl	80002c8 <__aeabi_dsub>
 800dc86:	4632      	mov	r2, r6
 800dc88:	463b      	mov	r3, r7
 800dc8a:	f7f2 fcd5 	bl	8000638 <__aeabi_dmul>
 800dc8e:	a35c      	add	r3, pc, #368	; (adr r3, 800de00 <atan+0x308>)
 800dc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc94:	f7f2 fb18 	bl	80002c8 <__aeabi_dsub>
 800dc98:	4632      	mov	r2, r6
 800dc9a:	463b      	mov	r3, r7
 800dc9c:	f7f2 fccc 	bl	8000638 <__aeabi_dmul>
 800dca0:	4602      	mov	r2, r0
 800dca2:	460b      	mov	r3, r1
 800dca4:	4640      	mov	r0, r8
 800dca6:	4649      	mov	r1, r9
 800dca8:	f7f2 fb10 	bl	80002cc <__adddf3>
 800dcac:	4622      	mov	r2, r4
 800dcae:	462b      	mov	r3, r5
 800dcb0:	f7f2 fcc2 	bl	8000638 <__aeabi_dmul>
 800dcb4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800dcb8:	4602      	mov	r2, r0
 800dcba:	460b      	mov	r3, r1
 800dcbc:	d14b      	bne.n	800dd56 <atan+0x25e>
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	4629      	mov	r1, r5
 800dcc2:	f7f2 fb01 	bl	80002c8 <__aeabi_dsub>
 800dcc6:	e72c      	b.n	800db22 <atan+0x2a>
 800dcc8:	ee10 0a10 	vmov	r0, s0
 800dccc:	4b53      	ldr	r3, [pc, #332]	; (800de1c <atan+0x324>)
 800dcce:	2200      	movs	r2, #0
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	f7f2 faf9 	bl	80002c8 <__aeabi_dsub>
 800dcd6:	4b51      	ldr	r3, [pc, #324]	; (800de1c <atan+0x324>)
 800dcd8:	4606      	mov	r6, r0
 800dcda:	460f      	mov	r7, r1
 800dcdc:	2200      	movs	r2, #0
 800dcde:	4620      	mov	r0, r4
 800dce0:	4629      	mov	r1, r5
 800dce2:	f7f2 faf3 	bl	80002cc <__adddf3>
 800dce6:	4602      	mov	r2, r0
 800dce8:	460b      	mov	r3, r1
 800dcea:	4630      	mov	r0, r6
 800dcec:	4639      	mov	r1, r7
 800dcee:	f7f2 fdcd 	bl	800088c <__aeabi_ddiv>
 800dcf2:	f04f 0a01 	mov.w	sl, #1
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	460d      	mov	r5, r1
 800dcfa:	e764      	b.n	800dbc6 <atan+0xce>
 800dcfc:	4b49      	ldr	r3, [pc, #292]	; (800de24 <atan+0x32c>)
 800dcfe:	429e      	cmp	r6, r3
 800dd00:	da1d      	bge.n	800dd3e <atan+0x246>
 800dd02:	ee10 0a10 	vmov	r0, s0
 800dd06:	4b48      	ldr	r3, [pc, #288]	; (800de28 <atan+0x330>)
 800dd08:	2200      	movs	r2, #0
 800dd0a:	4629      	mov	r1, r5
 800dd0c:	f7f2 fadc 	bl	80002c8 <__aeabi_dsub>
 800dd10:	4b45      	ldr	r3, [pc, #276]	; (800de28 <atan+0x330>)
 800dd12:	4606      	mov	r6, r0
 800dd14:	460f      	mov	r7, r1
 800dd16:	2200      	movs	r2, #0
 800dd18:	4620      	mov	r0, r4
 800dd1a:	4629      	mov	r1, r5
 800dd1c:	f7f2 fc8c 	bl	8000638 <__aeabi_dmul>
 800dd20:	4b3e      	ldr	r3, [pc, #248]	; (800de1c <atan+0x324>)
 800dd22:	2200      	movs	r2, #0
 800dd24:	f7f2 fad2 	bl	80002cc <__adddf3>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	4630      	mov	r0, r6
 800dd2e:	4639      	mov	r1, r7
 800dd30:	f7f2 fdac 	bl	800088c <__aeabi_ddiv>
 800dd34:	f04f 0a02 	mov.w	sl, #2
 800dd38:	4604      	mov	r4, r0
 800dd3a:	460d      	mov	r5, r1
 800dd3c:	e743      	b.n	800dbc6 <atan+0xce>
 800dd3e:	462b      	mov	r3, r5
 800dd40:	ee10 2a10 	vmov	r2, s0
 800dd44:	4939      	ldr	r1, [pc, #228]	; (800de2c <atan+0x334>)
 800dd46:	2000      	movs	r0, #0
 800dd48:	f7f2 fda0 	bl	800088c <__aeabi_ddiv>
 800dd4c:	f04f 0a03 	mov.w	sl, #3
 800dd50:	4604      	mov	r4, r0
 800dd52:	460d      	mov	r5, r1
 800dd54:	e737      	b.n	800dbc6 <atan+0xce>
 800dd56:	4b36      	ldr	r3, [pc, #216]	; (800de30 <atan+0x338>)
 800dd58:	4e36      	ldr	r6, [pc, #216]	; (800de34 <atan+0x33c>)
 800dd5a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800dd5e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800dd62:	e9da 2300 	ldrd	r2, r3, [sl]
 800dd66:	f7f2 faaf 	bl	80002c8 <__aeabi_dsub>
 800dd6a:	4622      	mov	r2, r4
 800dd6c:	462b      	mov	r3, r5
 800dd6e:	f7f2 faab 	bl	80002c8 <__aeabi_dsub>
 800dd72:	4602      	mov	r2, r0
 800dd74:	460b      	mov	r3, r1
 800dd76:	e9d6 0100 	ldrd	r0, r1, [r6]
 800dd7a:	f7f2 faa5 	bl	80002c8 <__aeabi_dsub>
 800dd7e:	f1bb 0f00 	cmp.w	fp, #0
 800dd82:	4604      	mov	r4, r0
 800dd84:	460d      	mov	r5, r1
 800dd86:	f6bf aed6 	bge.w	800db36 <atan+0x3e>
 800dd8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd8e:	461d      	mov	r5, r3
 800dd90:	e6d1      	b.n	800db36 <atan+0x3e>
 800dd92:	a51d      	add	r5, pc, #116	; (adr r5, 800de08 <atan+0x310>)
 800dd94:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dd98:	e6cd      	b.n	800db36 <atan+0x3e>
 800dd9a:	bf00      	nop
 800dd9c:	f3af 8000 	nop.w
 800dda0:	54442d18 	.word	0x54442d18
 800dda4:	bff921fb 	.word	0xbff921fb
 800dda8:	8800759c 	.word	0x8800759c
 800ddac:	7e37e43c 	.word	0x7e37e43c
 800ddb0:	e322da11 	.word	0xe322da11
 800ddb4:	3f90ad3a 	.word	0x3f90ad3a
 800ddb8:	24760deb 	.word	0x24760deb
 800ddbc:	3fa97b4b 	.word	0x3fa97b4b
 800ddc0:	a0d03d51 	.word	0xa0d03d51
 800ddc4:	3fb10d66 	.word	0x3fb10d66
 800ddc8:	c54c206e 	.word	0xc54c206e
 800ddcc:	3fb745cd 	.word	0x3fb745cd
 800ddd0:	920083ff 	.word	0x920083ff
 800ddd4:	3fc24924 	.word	0x3fc24924
 800ddd8:	5555550d 	.word	0x5555550d
 800dddc:	3fd55555 	.word	0x3fd55555
 800dde0:	2c6a6c2f 	.word	0x2c6a6c2f
 800dde4:	bfa2b444 	.word	0xbfa2b444
 800dde8:	52defd9a 	.word	0x52defd9a
 800ddec:	3fadde2d 	.word	0x3fadde2d
 800ddf0:	af749a6d 	.word	0xaf749a6d
 800ddf4:	3fb3b0f2 	.word	0x3fb3b0f2
 800ddf8:	fe231671 	.word	0xfe231671
 800ddfc:	3fbc71c6 	.word	0x3fbc71c6
 800de00:	9998ebc4 	.word	0x9998ebc4
 800de04:	3fc99999 	.word	0x3fc99999
 800de08:	54442d18 	.word	0x54442d18
 800de0c:	3ff921fb 	.word	0x3ff921fb
 800de10:	440fffff 	.word	0x440fffff
 800de14:	7ff00000 	.word	0x7ff00000
 800de18:	3fdbffff 	.word	0x3fdbffff
 800de1c:	3ff00000 	.word	0x3ff00000
 800de20:	3ff2ffff 	.word	0x3ff2ffff
 800de24:	40038000 	.word	0x40038000
 800de28:	3ff80000 	.word	0x3ff80000
 800de2c:	bff00000 	.word	0xbff00000
 800de30:	0800f468 	.word	0x0800f468
 800de34:	0800f448 	.word	0x0800f448

0800de38 <fabs>:
 800de38:	ec51 0b10 	vmov	r0, r1, d0
 800de3c:	ee10 2a10 	vmov	r2, s0
 800de40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800de44:	ec43 2b10 	vmov	d0, r2, r3
 800de48:	4770      	bx	lr
 800de4a:	0000      	movs	r0, r0
 800de4c:	0000      	movs	r0, r0
	...

0800de50 <tan>:
 800de50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de52:	ec53 2b10 	vmov	r2, r3, d0
 800de56:	4816      	ldr	r0, [pc, #88]	; (800deb0 <tan+0x60>)
 800de58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800de5c:	4281      	cmp	r1, r0
 800de5e:	dc07      	bgt.n	800de70 <tan+0x20>
 800de60:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800dea8 <tan+0x58>
 800de64:	2001      	movs	r0, #1
 800de66:	b005      	add	sp, #20
 800de68:	f85d eb04 	ldr.w	lr, [sp], #4
 800de6c:	f000 bd80 	b.w	800e970 <__kernel_tan>
 800de70:	4810      	ldr	r0, [pc, #64]	; (800deb4 <tan+0x64>)
 800de72:	4281      	cmp	r1, r0
 800de74:	dd09      	ble.n	800de8a <tan+0x3a>
 800de76:	ee10 0a10 	vmov	r0, s0
 800de7a:	4619      	mov	r1, r3
 800de7c:	f7f2 fa24 	bl	80002c8 <__aeabi_dsub>
 800de80:	ec41 0b10 	vmov	d0, r0, r1
 800de84:	b005      	add	sp, #20
 800de86:	f85d fb04 	ldr.w	pc, [sp], #4
 800de8a:	4668      	mov	r0, sp
 800de8c:	f000 f814 	bl	800deb8 <__ieee754_rem_pio2>
 800de90:	0040      	lsls	r0, r0, #1
 800de92:	f000 0002 	and.w	r0, r0, #2
 800de96:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de9a:	ed9d 0b00 	vldr	d0, [sp]
 800de9e:	f1c0 0001 	rsb	r0, r0, #1
 800dea2:	f000 fd65 	bl	800e970 <__kernel_tan>
 800dea6:	e7ed      	b.n	800de84 <tan+0x34>
	...
 800deb0:	3fe921fb 	.word	0x3fe921fb
 800deb4:	7fefffff 	.word	0x7fefffff

0800deb8 <__ieee754_rem_pio2>:
 800deb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800debc:	ed2d 8b02 	vpush	{d8}
 800dec0:	ec55 4b10 	vmov	r4, r5, d0
 800dec4:	4bca      	ldr	r3, [pc, #808]	; (800e1f0 <__ieee754_rem_pio2+0x338>)
 800dec6:	b08b      	sub	sp, #44	; 0x2c
 800dec8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800decc:	4598      	cmp	r8, r3
 800dece:	4682      	mov	sl, r0
 800ded0:	9502      	str	r5, [sp, #8]
 800ded2:	dc08      	bgt.n	800dee6 <__ieee754_rem_pio2+0x2e>
 800ded4:	2200      	movs	r2, #0
 800ded6:	2300      	movs	r3, #0
 800ded8:	ed80 0b00 	vstr	d0, [r0]
 800dedc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dee0:	f04f 0b00 	mov.w	fp, #0
 800dee4:	e028      	b.n	800df38 <__ieee754_rem_pio2+0x80>
 800dee6:	4bc3      	ldr	r3, [pc, #780]	; (800e1f4 <__ieee754_rem_pio2+0x33c>)
 800dee8:	4598      	cmp	r8, r3
 800deea:	dc78      	bgt.n	800dfde <__ieee754_rem_pio2+0x126>
 800deec:	9b02      	ldr	r3, [sp, #8]
 800deee:	4ec2      	ldr	r6, [pc, #776]	; (800e1f8 <__ieee754_rem_pio2+0x340>)
 800def0:	2b00      	cmp	r3, #0
 800def2:	ee10 0a10 	vmov	r0, s0
 800def6:	a3b0      	add	r3, pc, #704	; (adr r3, 800e1b8 <__ieee754_rem_pio2+0x300>)
 800def8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defc:	4629      	mov	r1, r5
 800defe:	dd39      	ble.n	800df74 <__ieee754_rem_pio2+0xbc>
 800df00:	f7f2 f9e2 	bl	80002c8 <__aeabi_dsub>
 800df04:	45b0      	cmp	r8, r6
 800df06:	4604      	mov	r4, r0
 800df08:	460d      	mov	r5, r1
 800df0a:	d01b      	beq.n	800df44 <__ieee754_rem_pio2+0x8c>
 800df0c:	a3ac      	add	r3, pc, #688	; (adr r3, 800e1c0 <__ieee754_rem_pio2+0x308>)
 800df0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df12:	f7f2 f9d9 	bl	80002c8 <__aeabi_dsub>
 800df16:	4602      	mov	r2, r0
 800df18:	460b      	mov	r3, r1
 800df1a:	e9ca 2300 	strd	r2, r3, [sl]
 800df1e:	4620      	mov	r0, r4
 800df20:	4629      	mov	r1, r5
 800df22:	f7f2 f9d1 	bl	80002c8 <__aeabi_dsub>
 800df26:	a3a6      	add	r3, pc, #664	; (adr r3, 800e1c0 <__ieee754_rem_pio2+0x308>)
 800df28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2c:	f7f2 f9cc 	bl	80002c8 <__aeabi_dsub>
 800df30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df34:	f04f 0b01 	mov.w	fp, #1
 800df38:	4658      	mov	r0, fp
 800df3a:	b00b      	add	sp, #44	; 0x2c
 800df3c:	ecbd 8b02 	vpop	{d8}
 800df40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df44:	a3a0      	add	r3, pc, #640	; (adr r3, 800e1c8 <__ieee754_rem_pio2+0x310>)
 800df46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4a:	f7f2 f9bd 	bl	80002c8 <__aeabi_dsub>
 800df4e:	a3a0      	add	r3, pc, #640	; (adr r3, 800e1d0 <__ieee754_rem_pio2+0x318>)
 800df50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df54:	4604      	mov	r4, r0
 800df56:	460d      	mov	r5, r1
 800df58:	f7f2 f9b6 	bl	80002c8 <__aeabi_dsub>
 800df5c:	4602      	mov	r2, r0
 800df5e:	460b      	mov	r3, r1
 800df60:	e9ca 2300 	strd	r2, r3, [sl]
 800df64:	4620      	mov	r0, r4
 800df66:	4629      	mov	r1, r5
 800df68:	f7f2 f9ae 	bl	80002c8 <__aeabi_dsub>
 800df6c:	a398      	add	r3, pc, #608	; (adr r3, 800e1d0 <__ieee754_rem_pio2+0x318>)
 800df6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df72:	e7db      	b.n	800df2c <__ieee754_rem_pio2+0x74>
 800df74:	f7f2 f9aa 	bl	80002cc <__adddf3>
 800df78:	45b0      	cmp	r8, r6
 800df7a:	4604      	mov	r4, r0
 800df7c:	460d      	mov	r5, r1
 800df7e:	d016      	beq.n	800dfae <__ieee754_rem_pio2+0xf6>
 800df80:	a38f      	add	r3, pc, #572	; (adr r3, 800e1c0 <__ieee754_rem_pio2+0x308>)
 800df82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df86:	f7f2 f9a1 	bl	80002cc <__adddf3>
 800df8a:	4602      	mov	r2, r0
 800df8c:	460b      	mov	r3, r1
 800df8e:	e9ca 2300 	strd	r2, r3, [sl]
 800df92:	4620      	mov	r0, r4
 800df94:	4629      	mov	r1, r5
 800df96:	f7f2 f997 	bl	80002c8 <__aeabi_dsub>
 800df9a:	a389      	add	r3, pc, #548	; (adr r3, 800e1c0 <__ieee754_rem_pio2+0x308>)
 800df9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa0:	f7f2 f994 	bl	80002cc <__adddf3>
 800dfa4:	f04f 3bff 	mov.w	fp, #4294967295
 800dfa8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dfac:	e7c4      	b.n	800df38 <__ieee754_rem_pio2+0x80>
 800dfae:	a386      	add	r3, pc, #536	; (adr r3, 800e1c8 <__ieee754_rem_pio2+0x310>)
 800dfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb4:	f7f2 f98a 	bl	80002cc <__adddf3>
 800dfb8:	a385      	add	r3, pc, #532	; (adr r3, 800e1d0 <__ieee754_rem_pio2+0x318>)
 800dfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	460d      	mov	r5, r1
 800dfc2:	f7f2 f983 	bl	80002cc <__adddf3>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	460b      	mov	r3, r1
 800dfca:	e9ca 2300 	strd	r2, r3, [sl]
 800dfce:	4620      	mov	r0, r4
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	f7f2 f979 	bl	80002c8 <__aeabi_dsub>
 800dfd6:	a37e      	add	r3, pc, #504	; (adr r3, 800e1d0 <__ieee754_rem_pio2+0x318>)
 800dfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfdc:	e7e0      	b.n	800dfa0 <__ieee754_rem_pio2+0xe8>
 800dfde:	4b87      	ldr	r3, [pc, #540]	; (800e1fc <__ieee754_rem_pio2+0x344>)
 800dfe0:	4598      	cmp	r8, r3
 800dfe2:	f300 80d9 	bgt.w	800e198 <__ieee754_rem_pio2+0x2e0>
 800dfe6:	f7ff ff27 	bl	800de38 <fabs>
 800dfea:	ec55 4b10 	vmov	r4, r5, d0
 800dfee:	ee10 0a10 	vmov	r0, s0
 800dff2:	a379      	add	r3, pc, #484	; (adr r3, 800e1d8 <__ieee754_rem_pio2+0x320>)
 800dff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff8:	4629      	mov	r1, r5
 800dffa:	f7f2 fb1d 	bl	8000638 <__aeabi_dmul>
 800dffe:	4b80      	ldr	r3, [pc, #512]	; (800e200 <__ieee754_rem_pio2+0x348>)
 800e000:	2200      	movs	r2, #0
 800e002:	f7f2 f963 	bl	80002cc <__adddf3>
 800e006:	f7f2 fdc7 	bl	8000b98 <__aeabi_d2iz>
 800e00a:	4683      	mov	fp, r0
 800e00c:	f7f2 faaa 	bl	8000564 <__aeabi_i2d>
 800e010:	4602      	mov	r2, r0
 800e012:	460b      	mov	r3, r1
 800e014:	ec43 2b18 	vmov	d8, r2, r3
 800e018:	a367      	add	r3, pc, #412	; (adr r3, 800e1b8 <__ieee754_rem_pio2+0x300>)
 800e01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01e:	f7f2 fb0b 	bl	8000638 <__aeabi_dmul>
 800e022:	4602      	mov	r2, r0
 800e024:	460b      	mov	r3, r1
 800e026:	4620      	mov	r0, r4
 800e028:	4629      	mov	r1, r5
 800e02a:	f7f2 f94d 	bl	80002c8 <__aeabi_dsub>
 800e02e:	a364      	add	r3, pc, #400	; (adr r3, 800e1c0 <__ieee754_rem_pio2+0x308>)
 800e030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e034:	4606      	mov	r6, r0
 800e036:	460f      	mov	r7, r1
 800e038:	ec51 0b18 	vmov	r0, r1, d8
 800e03c:	f7f2 fafc 	bl	8000638 <__aeabi_dmul>
 800e040:	f1bb 0f1f 	cmp.w	fp, #31
 800e044:	4604      	mov	r4, r0
 800e046:	460d      	mov	r5, r1
 800e048:	dc0d      	bgt.n	800e066 <__ieee754_rem_pio2+0x1ae>
 800e04a:	4b6e      	ldr	r3, [pc, #440]	; (800e204 <__ieee754_rem_pio2+0x34c>)
 800e04c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e054:	4543      	cmp	r3, r8
 800e056:	d006      	beq.n	800e066 <__ieee754_rem_pio2+0x1ae>
 800e058:	4622      	mov	r2, r4
 800e05a:	462b      	mov	r3, r5
 800e05c:	4630      	mov	r0, r6
 800e05e:	4639      	mov	r1, r7
 800e060:	f7f2 f932 	bl	80002c8 <__aeabi_dsub>
 800e064:	e00f      	b.n	800e086 <__ieee754_rem_pio2+0x1ce>
 800e066:	462b      	mov	r3, r5
 800e068:	4622      	mov	r2, r4
 800e06a:	4630      	mov	r0, r6
 800e06c:	4639      	mov	r1, r7
 800e06e:	f7f2 f92b 	bl	80002c8 <__aeabi_dsub>
 800e072:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e076:	9303      	str	r3, [sp, #12]
 800e078:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e07c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e080:	f1b8 0f10 	cmp.w	r8, #16
 800e084:	dc02      	bgt.n	800e08c <__ieee754_rem_pio2+0x1d4>
 800e086:	e9ca 0100 	strd	r0, r1, [sl]
 800e08a:	e039      	b.n	800e100 <__ieee754_rem_pio2+0x248>
 800e08c:	a34e      	add	r3, pc, #312	; (adr r3, 800e1c8 <__ieee754_rem_pio2+0x310>)
 800e08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e092:	ec51 0b18 	vmov	r0, r1, d8
 800e096:	f7f2 facf 	bl	8000638 <__aeabi_dmul>
 800e09a:	4604      	mov	r4, r0
 800e09c:	460d      	mov	r5, r1
 800e09e:	4602      	mov	r2, r0
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	4639      	mov	r1, r7
 800e0a6:	f7f2 f90f 	bl	80002c8 <__aeabi_dsub>
 800e0aa:	4602      	mov	r2, r0
 800e0ac:	460b      	mov	r3, r1
 800e0ae:	4680      	mov	r8, r0
 800e0b0:	4689      	mov	r9, r1
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	4639      	mov	r1, r7
 800e0b6:	f7f2 f907 	bl	80002c8 <__aeabi_dsub>
 800e0ba:	4622      	mov	r2, r4
 800e0bc:	462b      	mov	r3, r5
 800e0be:	f7f2 f903 	bl	80002c8 <__aeabi_dsub>
 800e0c2:	a343      	add	r3, pc, #268	; (adr r3, 800e1d0 <__ieee754_rem_pio2+0x318>)
 800e0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c8:	4604      	mov	r4, r0
 800e0ca:	460d      	mov	r5, r1
 800e0cc:	ec51 0b18 	vmov	r0, r1, d8
 800e0d0:	f7f2 fab2 	bl	8000638 <__aeabi_dmul>
 800e0d4:	4622      	mov	r2, r4
 800e0d6:	462b      	mov	r3, r5
 800e0d8:	f7f2 f8f6 	bl	80002c8 <__aeabi_dsub>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	460b      	mov	r3, r1
 800e0e0:	4604      	mov	r4, r0
 800e0e2:	460d      	mov	r5, r1
 800e0e4:	4640      	mov	r0, r8
 800e0e6:	4649      	mov	r1, r9
 800e0e8:	f7f2 f8ee 	bl	80002c8 <__aeabi_dsub>
 800e0ec:	9a03      	ldr	r2, [sp, #12]
 800e0ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e0f2:	1ad3      	subs	r3, r2, r3
 800e0f4:	2b31      	cmp	r3, #49	; 0x31
 800e0f6:	dc24      	bgt.n	800e142 <__ieee754_rem_pio2+0x28a>
 800e0f8:	e9ca 0100 	strd	r0, r1, [sl]
 800e0fc:	4646      	mov	r6, r8
 800e0fe:	464f      	mov	r7, r9
 800e100:	e9da 8900 	ldrd	r8, r9, [sl]
 800e104:	4630      	mov	r0, r6
 800e106:	4642      	mov	r2, r8
 800e108:	464b      	mov	r3, r9
 800e10a:	4639      	mov	r1, r7
 800e10c:	f7f2 f8dc 	bl	80002c8 <__aeabi_dsub>
 800e110:	462b      	mov	r3, r5
 800e112:	4622      	mov	r2, r4
 800e114:	f7f2 f8d8 	bl	80002c8 <__aeabi_dsub>
 800e118:	9b02      	ldr	r3, [sp, #8]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e120:	f6bf af0a 	bge.w	800df38 <__ieee754_rem_pio2+0x80>
 800e124:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e128:	f8ca 3004 	str.w	r3, [sl, #4]
 800e12c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e130:	f8ca 8000 	str.w	r8, [sl]
 800e134:	f8ca 0008 	str.w	r0, [sl, #8]
 800e138:	f8ca 300c 	str.w	r3, [sl, #12]
 800e13c:	f1cb 0b00 	rsb	fp, fp, #0
 800e140:	e6fa      	b.n	800df38 <__ieee754_rem_pio2+0x80>
 800e142:	a327      	add	r3, pc, #156	; (adr r3, 800e1e0 <__ieee754_rem_pio2+0x328>)
 800e144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e148:	ec51 0b18 	vmov	r0, r1, d8
 800e14c:	f7f2 fa74 	bl	8000638 <__aeabi_dmul>
 800e150:	4604      	mov	r4, r0
 800e152:	460d      	mov	r5, r1
 800e154:	4602      	mov	r2, r0
 800e156:	460b      	mov	r3, r1
 800e158:	4640      	mov	r0, r8
 800e15a:	4649      	mov	r1, r9
 800e15c:	f7f2 f8b4 	bl	80002c8 <__aeabi_dsub>
 800e160:	4602      	mov	r2, r0
 800e162:	460b      	mov	r3, r1
 800e164:	4606      	mov	r6, r0
 800e166:	460f      	mov	r7, r1
 800e168:	4640      	mov	r0, r8
 800e16a:	4649      	mov	r1, r9
 800e16c:	f7f2 f8ac 	bl	80002c8 <__aeabi_dsub>
 800e170:	4622      	mov	r2, r4
 800e172:	462b      	mov	r3, r5
 800e174:	f7f2 f8a8 	bl	80002c8 <__aeabi_dsub>
 800e178:	a31b      	add	r3, pc, #108	; (adr r3, 800e1e8 <__ieee754_rem_pio2+0x330>)
 800e17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17e:	4604      	mov	r4, r0
 800e180:	460d      	mov	r5, r1
 800e182:	ec51 0b18 	vmov	r0, r1, d8
 800e186:	f7f2 fa57 	bl	8000638 <__aeabi_dmul>
 800e18a:	4622      	mov	r2, r4
 800e18c:	462b      	mov	r3, r5
 800e18e:	f7f2 f89b 	bl	80002c8 <__aeabi_dsub>
 800e192:	4604      	mov	r4, r0
 800e194:	460d      	mov	r5, r1
 800e196:	e75f      	b.n	800e058 <__ieee754_rem_pio2+0x1a0>
 800e198:	4b1b      	ldr	r3, [pc, #108]	; (800e208 <__ieee754_rem_pio2+0x350>)
 800e19a:	4598      	cmp	r8, r3
 800e19c:	dd36      	ble.n	800e20c <__ieee754_rem_pio2+0x354>
 800e19e:	ee10 2a10 	vmov	r2, s0
 800e1a2:	462b      	mov	r3, r5
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	4629      	mov	r1, r5
 800e1a8:	f7f2 f88e 	bl	80002c8 <__aeabi_dsub>
 800e1ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e1b0:	e9ca 0100 	strd	r0, r1, [sl]
 800e1b4:	e694      	b.n	800dee0 <__ieee754_rem_pio2+0x28>
 800e1b6:	bf00      	nop
 800e1b8:	54400000 	.word	0x54400000
 800e1bc:	3ff921fb 	.word	0x3ff921fb
 800e1c0:	1a626331 	.word	0x1a626331
 800e1c4:	3dd0b461 	.word	0x3dd0b461
 800e1c8:	1a600000 	.word	0x1a600000
 800e1cc:	3dd0b461 	.word	0x3dd0b461
 800e1d0:	2e037073 	.word	0x2e037073
 800e1d4:	3ba3198a 	.word	0x3ba3198a
 800e1d8:	6dc9c883 	.word	0x6dc9c883
 800e1dc:	3fe45f30 	.word	0x3fe45f30
 800e1e0:	2e000000 	.word	0x2e000000
 800e1e4:	3ba3198a 	.word	0x3ba3198a
 800e1e8:	252049c1 	.word	0x252049c1
 800e1ec:	397b839a 	.word	0x397b839a
 800e1f0:	3fe921fb 	.word	0x3fe921fb
 800e1f4:	4002d97b 	.word	0x4002d97b
 800e1f8:	3ff921fb 	.word	0x3ff921fb
 800e1fc:	413921fb 	.word	0x413921fb
 800e200:	3fe00000 	.word	0x3fe00000
 800e204:	0800f488 	.word	0x0800f488
 800e208:	7fefffff 	.word	0x7fefffff
 800e20c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e210:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e214:	ee10 0a10 	vmov	r0, s0
 800e218:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e21c:	ee10 6a10 	vmov	r6, s0
 800e220:	460f      	mov	r7, r1
 800e222:	f7f2 fcb9 	bl	8000b98 <__aeabi_d2iz>
 800e226:	f7f2 f99d 	bl	8000564 <__aeabi_i2d>
 800e22a:	4602      	mov	r2, r0
 800e22c:	460b      	mov	r3, r1
 800e22e:	4630      	mov	r0, r6
 800e230:	4639      	mov	r1, r7
 800e232:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e236:	f7f2 f847 	bl	80002c8 <__aeabi_dsub>
 800e23a:	4b23      	ldr	r3, [pc, #140]	; (800e2c8 <__ieee754_rem_pio2+0x410>)
 800e23c:	2200      	movs	r2, #0
 800e23e:	f7f2 f9fb 	bl	8000638 <__aeabi_dmul>
 800e242:	460f      	mov	r7, r1
 800e244:	4606      	mov	r6, r0
 800e246:	f7f2 fca7 	bl	8000b98 <__aeabi_d2iz>
 800e24a:	f7f2 f98b 	bl	8000564 <__aeabi_i2d>
 800e24e:	4602      	mov	r2, r0
 800e250:	460b      	mov	r3, r1
 800e252:	4630      	mov	r0, r6
 800e254:	4639      	mov	r1, r7
 800e256:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e25a:	f7f2 f835 	bl	80002c8 <__aeabi_dsub>
 800e25e:	4b1a      	ldr	r3, [pc, #104]	; (800e2c8 <__ieee754_rem_pio2+0x410>)
 800e260:	2200      	movs	r2, #0
 800e262:	f7f2 f9e9 	bl	8000638 <__aeabi_dmul>
 800e266:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e26a:	ad04      	add	r5, sp, #16
 800e26c:	f04f 0803 	mov.w	r8, #3
 800e270:	46a9      	mov	r9, r5
 800e272:	2600      	movs	r6, #0
 800e274:	2700      	movs	r7, #0
 800e276:	4632      	mov	r2, r6
 800e278:	463b      	mov	r3, r7
 800e27a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e27e:	46c3      	mov	fp, r8
 800e280:	3d08      	subs	r5, #8
 800e282:	f108 38ff 	add.w	r8, r8, #4294967295
 800e286:	f7f2 fc3f 	bl	8000b08 <__aeabi_dcmpeq>
 800e28a:	2800      	cmp	r0, #0
 800e28c:	d1f3      	bne.n	800e276 <__ieee754_rem_pio2+0x3be>
 800e28e:	4b0f      	ldr	r3, [pc, #60]	; (800e2cc <__ieee754_rem_pio2+0x414>)
 800e290:	9301      	str	r3, [sp, #4]
 800e292:	2302      	movs	r3, #2
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	4622      	mov	r2, r4
 800e298:	465b      	mov	r3, fp
 800e29a:	4651      	mov	r1, sl
 800e29c:	4648      	mov	r0, r9
 800e29e:	f000 f817 	bl	800e2d0 <__kernel_rem_pio2>
 800e2a2:	9b02      	ldr	r3, [sp, #8]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	4683      	mov	fp, r0
 800e2a8:	f6bf ae46 	bge.w	800df38 <__ieee754_rem_pio2+0x80>
 800e2ac:	e9da 2100 	ldrd	r2, r1, [sl]
 800e2b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2b4:	e9ca 2300 	strd	r2, r3, [sl]
 800e2b8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e2bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2c0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e2c4:	e73a      	b.n	800e13c <__ieee754_rem_pio2+0x284>
 800e2c6:	bf00      	nop
 800e2c8:	41700000 	.word	0x41700000
 800e2cc:	0800f508 	.word	0x0800f508

0800e2d0 <__kernel_rem_pio2>:
 800e2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d4:	ed2d 8b02 	vpush	{d8}
 800e2d8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e2dc:	f112 0f14 	cmn.w	r2, #20
 800e2e0:	9308      	str	r3, [sp, #32]
 800e2e2:	9101      	str	r1, [sp, #4]
 800e2e4:	4bc4      	ldr	r3, [pc, #784]	; (800e5f8 <__kernel_rem_pio2+0x328>)
 800e2e6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e2e8:	900b      	str	r0, [sp, #44]	; 0x2c
 800e2ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e2ee:	9302      	str	r3, [sp, #8]
 800e2f0:	9b08      	ldr	r3, [sp, #32]
 800e2f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e2f6:	bfa8      	it	ge
 800e2f8:	1ed4      	subge	r4, r2, #3
 800e2fa:	9306      	str	r3, [sp, #24]
 800e2fc:	bfb2      	itee	lt
 800e2fe:	2400      	movlt	r4, #0
 800e300:	2318      	movge	r3, #24
 800e302:	fb94 f4f3 	sdivge	r4, r4, r3
 800e306:	f06f 0317 	mvn.w	r3, #23
 800e30a:	fb04 3303 	mla	r3, r4, r3, r3
 800e30e:	eb03 0a02 	add.w	sl, r3, r2
 800e312:	9b02      	ldr	r3, [sp, #8]
 800e314:	9a06      	ldr	r2, [sp, #24]
 800e316:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800e5e8 <__kernel_rem_pio2+0x318>
 800e31a:	eb03 0802 	add.w	r8, r3, r2
 800e31e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e320:	1aa7      	subs	r7, r4, r2
 800e322:	ae22      	add	r6, sp, #136	; 0x88
 800e324:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e328:	2500      	movs	r5, #0
 800e32a:	4545      	cmp	r5, r8
 800e32c:	dd13      	ble.n	800e356 <__kernel_rem_pio2+0x86>
 800e32e:	9b08      	ldr	r3, [sp, #32]
 800e330:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800e5e8 <__kernel_rem_pio2+0x318>
 800e334:	aa22      	add	r2, sp, #136	; 0x88
 800e336:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e33a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e33e:	f04f 0800 	mov.w	r8, #0
 800e342:	9b02      	ldr	r3, [sp, #8]
 800e344:	4598      	cmp	r8, r3
 800e346:	dc2f      	bgt.n	800e3a8 <__kernel_rem_pio2+0xd8>
 800e348:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e34c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e350:	462f      	mov	r7, r5
 800e352:	2600      	movs	r6, #0
 800e354:	e01b      	b.n	800e38e <__kernel_rem_pio2+0xbe>
 800e356:	42ef      	cmn	r7, r5
 800e358:	d407      	bmi.n	800e36a <__kernel_rem_pio2+0x9a>
 800e35a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e35e:	f7f2 f901 	bl	8000564 <__aeabi_i2d>
 800e362:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e366:	3501      	adds	r5, #1
 800e368:	e7df      	b.n	800e32a <__kernel_rem_pio2+0x5a>
 800e36a:	ec51 0b18 	vmov	r0, r1, d8
 800e36e:	e7f8      	b.n	800e362 <__kernel_rem_pio2+0x92>
 800e370:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e374:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e378:	f7f2 f95e 	bl	8000638 <__aeabi_dmul>
 800e37c:	4602      	mov	r2, r0
 800e37e:	460b      	mov	r3, r1
 800e380:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e384:	f7f1 ffa2 	bl	80002cc <__adddf3>
 800e388:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e38c:	3601      	adds	r6, #1
 800e38e:	9b06      	ldr	r3, [sp, #24]
 800e390:	429e      	cmp	r6, r3
 800e392:	f1a7 0708 	sub.w	r7, r7, #8
 800e396:	ddeb      	ble.n	800e370 <__kernel_rem_pio2+0xa0>
 800e398:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e39c:	f108 0801 	add.w	r8, r8, #1
 800e3a0:	ecab 7b02 	vstmia	fp!, {d7}
 800e3a4:	3508      	adds	r5, #8
 800e3a6:	e7cc      	b.n	800e342 <__kernel_rem_pio2+0x72>
 800e3a8:	9b02      	ldr	r3, [sp, #8]
 800e3aa:	aa0e      	add	r2, sp, #56	; 0x38
 800e3ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e3b0:	930d      	str	r3, [sp, #52]	; 0x34
 800e3b2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e3b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e3b8:	9c02      	ldr	r4, [sp, #8]
 800e3ba:	930c      	str	r3, [sp, #48]	; 0x30
 800e3bc:	00e3      	lsls	r3, r4, #3
 800e3be:	930a      	str	r3, [sp, #40]	; 0x28
 800e3c0:	ab9a      	add	r3, sp, #616	; 0x268
 800e3c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e3c6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e3ca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e3ce:	ab72      	add	r3, sp, #456	; 0x1c8
 800e3d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e3d4:	46c3      	mov	fp, r8
 800e3d6:	46a1      	mov	r9, r4
 800e3d8:	f1b9 0f00 	cmp.w	r9, #0
 800e3dc:	f1a5 0508 	sub.w	r5, r5, #8
 800e3e0:	dc77      	bgt.n	800e4d2 <__kernel_rem_pio2+0x202>
 800e3e2:	ec47 6b10 	vmov	d0, r6, r7
 800e3e6:	4650      	mov	r0, sl
 800e3e8:	f000 fd4e 	bl	800ee88 <scalbn>
 800e3ec:	ec57 6b10 	vmov	r6, r7, d0
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e3f6:	ee10 0a10 	vmov	r0, s0
 800e3fa:	4639      	mov	r1, r7
 800e3fc:	f7f2 f91c 	bl	8000638 <__aeabi_dmul>
 800e400:	ec41 0b10 	vmov	d0, r0, r1
 800e404:	f000 fcc0 	bl	800ed88 <floor>
 800e408:	4b7c      	ldr	r3, [pc, #496]	; (800e5fc <__kernel_rem_pio2+0x32c>)
 800e40a:	ec51 0b10 	vmov	r0, r1, d0
 800e40e:	2200      	movs	r2, #0
 800e410:	f7f2 f912 	bl	8000638 <__aeabi_dmul>
 800e414:	4602      	mov	r2, r0
 800e416:	460b      	mov	r3, r1
 800e418:	4630      	mov	r0, r6
 800e41a:	4639      	mov	r1, r7
 800e41c:	f7f1 ff54 	bl	80002c8 <__aeabi_dsub>
 800e420:	460f      	mov	r7, r1
 800e422:	4606      	mov	r6, r0
 800e424:	f7f2 fbb8 	bl	8000b98 <__aeabi_d2iz>
 800e428:	9004      	str	r0, [sp, #16]
 800e42a:	f7f2 f89b 	bl	8000564 <__aeabi_i2d>
 800e42e:	4602      	mov	r2, r0
 800e430:	460b      	mov	r3, r1
 800e432:	4630      	mov	r0, r6
 800e434:	4639      	mov	r1, r7
 800e436:	f7f1 ff47 	bl	80002c8 <__aeabi_dsub>
 800e43a:	f1ba 0f00 	cmp.w	sl, #0
 800e43e:	4606      	mov	r6, r0
 800e440:	460f      	mov	r7, r1
 800e442:	dd6d      	ble.n	800e520 <__kernel_rem_pio2+0x250>
 800e444:	1e62      	subs	r2, r4, #1
 800e446:	ab0e      	add	r3, sp, #56	; 0x38
 800e448:	9d04      	ldr	r5, [sp, #16]
 800e44a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e44e:	f1ca 0118 	rsb	r1, sl, #24
 800e452:	fa40 f301 	asr.w	r3, r0, r1
 800e456:	441d      	add	r5, r3
 800e458:	408b      	lsls	r3, r1
 800e45a:	1ac0      	subs	r0, r0, r3
 800e45c:	ab0e      	add	r3, sp, #56	; 0x38
 800e45e:	9504      	str	r5, [sp, #16]
 800e460:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e464:	f1ca 0317 	rsb	r3, sl, #23
 800e468:	fa40 fb03 	asr.w	fp, r0, r3
 800e46c:	f1bb 0f00 	cmp.w	fp, #0
 800e470:	dd65      	ble.n	800e53e <__kernel_rem_pio2+0x26e>
 800e472:	9b04      	ldr	r3, [sp, #16]
 800e474:	2200      	movs	r2, #0
 800e476:	3301      	adds	r3, #1
 800e478:	9304      	str	r3, [sp, #16]
 800e47a:	4615      	mov	r5, r2
 800e47c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e480:	4294      	cmp	r4, r2
 800e482:	f300 809c 	bgt.w	800e5be <__kernel_rem_pio2+0x2ee>
 800e486:	f1ba 0f00 	cmp.w	sl, #0
 800e48a:	dd07      	ble.n	800e49c <__kernel_rem_pio2+0x1cc>
 800e48c:	f1ba 0f01 	cmp.w	sl, #1
 800e490:	f000 80c0 	beq.w	800e614 <__kernel_rem_pio2+0x344>
 800e494:	f1ba 0f02 	cmp.w	sl, #2
 800e498:	f000 80c6 	beq.w	800e628 <__kernel_rem_pio2+0x358>
 800e49c:	f1bb 0f02 	cmp.w	fp, #2
 800e4a0:	d14d      	bne.n	800e53e <__kernel_rem_pio2+0x26e>
 800e4a2:	4632      	mov	r2, r6
 800e4a4:	463b      	mov	r3, r7
 800e4a6:	4956      	ldr	r1, [pc, #344]	; (800e600 <__kernel_rem_pio2+0x330>)
 800e4a8:	2000      	movs	r0, #0
 800e4aa:	f7f1 ff0d 	bl	80002c8 <__aeabi_dsub>
 800e4ae:	4606      	mov	r6, r0
 800e4b0:	460f      	mov	r7, r1
 800e4b2:	2d00      	cmp	r5, #0
 800e4b4:	d043      	beq.n	800e53e <__kernel_rem_pio2+0x26e>
 800e4b6:	4650      	mov	r0, sl
 800e4b8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800e5f0 <__kernel_rem_pio2+0x320>
 800e4bc:	f000 fce4 	bl	800ee88 <scalbn>
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	4639      	mov	r1, r7
 800e4c4:	ec53 2b10 	vmov	r2, r3, d0
 800e4c8:	f7f1 fefe 	bl	80002c8 <__aeabi_dsub>
 800e4cc:	4606      	mov	r6, r0
 800e4ce:	460f      	mov	r7, r1
 800e4d0:	e035      	b.n	800e53e <__kernel_rem_pio2+0x26e>
 800e4d2:	4b4c      	ldr	r3, [pc, #304]	; (800e604 <__kernel_rem_pio2+0x334>)
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	4639      	mov	r1, r7
 800e4da:	f7f2 f8ad 	bl	8000638 <__aeabi_dmul>
 800e4de:	f7f2 fb5b 	bl	8000b98 <__aeabi_d2iz>
 800e4e2:	f7f2 f83f 	bl	8000564 <__aeabi_i2d>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	460b      	mov	r3, r1
 800e4ea:	ec43 2b18 	vmov	d8, r2, r3
 800e4ee:	4b46      	ldr	r3, [pc, #280]	; (800e608 <__kernel_rem_pio2+0x338>)
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	f7f2 f8a1 	bl	8000638 <__aeabi_dmul>
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	4639      	mov	r1, r7
 800e4fe:	f7f1 fee3 	bl	80002c8 <__aeabi_dsub>
 800e502:	f7f2 fb49 	bl	8000b98 <__aeabi_d2iz>
 800e506:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e50a:	f84b 0b04 	str.w	r0, [fp], #4
 800e50e:	ec51 0b18 	vmov	r0, r1, d8
 800e512:	f7f1 fedb 	bl	80002cc <__adddf3>
 800e516:	f109 39ff 	add.w	r9, r9, #4294967295
 800e51a:	4606      	mov	r6, r0
 800e51c:	460f      	mov	r7, r1
 800e51e:	e75b      	b.n	800e3d8 <__kernel_rem_pio2+0x108>
 800e520:	d106      	bne.n	800e530 <__kernel_rem_pio2+0x260>
 800e522:	1e63      	subs	r3, r4, #1
 800e524:	aa0e      	add	r2, sp, #56	; 0x38
 800e526:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e52a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e52e:	e79d      	b.n	800e46c <__kernel_rem_pio2+0x19c>
 800e530:	4b36      	ldr	r3, [pc, #216]	; (800e60c <__kernel_rem_pio2+0x33c>)
 800e532:	2200      	movs	r2, #0
 800e534:	f7f2 fb06 	bl	8000b44 <__aeabi_dcmpge>
 800e538:	2800      	cmp	r0, #0
 800e53a:	d13d      	bne.n	800e5b8 <__kernel_rem_pio2+0x2e8>
 800e53c:	4683      	mov	fp, r0
 800e53e:	2200      	movs	r2, #0
 800e540:	2300      	movs	r3, #0
 800e542:	4630      	mov	r0, r6
 800e544:	4639      	mov	r1, r7
 800e546:	f7f2 fadf 	bl	8000b08 <__aeabi_dcmpeq>
 800e54a:	2800      	cmp	r0, #0
 800e54c:	f000 80c0 	beq.w	800e6d0 <__kernel_rem_pio2+0x400>
 800e550:	1e65      	subs	r5, r4, #1
 800e552:	462b      	mov	r3, r5
 800e554:	2200      	movs	r2, #0
 800e556:	9902      	ldr	r1, [sp, #8]
 800e558:	428b      	cmp	r3, r1
 800e55a:	da6c      	bge.n	800e636 <__kernel_rem_pio2+0x366>
 800e55c:	2a00      	cmp	r2, #0
 800e55e:	f000 8089 	beq.w	800e674 <__kernel_rem_pio2+0x3a4>
 800e562:	ab0e      	add	r3, sp, #56	; 0x38
 800e564:	f1aa 0a18 	sub.w	sl, sl, #24
 800e568:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	f000 80ad 	beq.w	800e6cc <__kernel_rem_pio2+0x3fc>
 800e572:	4650      	mov	r0, sl
 800e574:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800e5f0 <__kernel_rem_pio2+0x320>
 800e578:	f000 fc86 	bl	800ee88 <scalbn>
 800e57c:	ab9a      	add	r3, sp, #616	; 0x268
 800e57e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e582:	ec57 6b10 	vmov	r6, r7, d0
 800e586:	00ec      	lsls	r4, r5, #3
 800e588:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e58c:	46aa      	mov	sl, r5
 800e58e:	f1ba 0f00 	cmp.w	sl, #0
 800e592:	f280 80d6 	bge.w	800e742 <__kernel_rem_pio2+0x472>
 800e596:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800e5e8 <__kernel_rem_pio2+0x318>
 800e59a:	462e      	mov	r6, r5
 800e59c:	2e00      	cmp	r6, #0
 800e59e:	f2c0 8104 	blt.w	800e7aa <__kernel_rem_pio2+0x4da>
 800e5a2:	ab72      	add	r3, sp, #456	; 0x1c8
 800e5a4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e5a8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800e610 <__kernel_rem_pio2+0x340>
 800e5ac:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e5b0:	f04f 0800 	mov.w	r8, #0
 800e5b4:	1baf      	subs	r7, r5, r6
 800e5b6:	e0ea      	b.n	800e78e <__kernel_rem_pio2+0x4be>
 800e5b8:	f04f 0b02 	mov.w	fp, #2
 800e5bc:	e759      	b.n	800e472 <__kernel_rem_pio2+0x1a2>
 800e5be:	f8d8 3000 	ldr.w	r3, [r8]
 800e5c2:	b955      	cbnz	r5, 800e5da <__kernel_rem_pio2+0x30a>
 800e5c4:	b123      	cbz	r3, 800e5d0 <__kernel_rem_pio2+0x300>
 800e5c6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e5ca:	f8c8 3000 	str.w	r3, [r8]
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	3201      	adds	r2, #1
 800e5d2:	f108 0804 	add.w	r8, r8, #4
 800e5d6:	461d      	mov	r5, r3
 800e5d8:	e752      	b.n	800e480 <__kernel_rem_pio2+0x1b0>
 800e5da:	1acb      	subs	r3, r1, r3
 800e5dc:	f8c8 3000 	str.w	r3, [r8]
 800e5e0:	462b      	mov	r3, r5
 800e5e2:	e7f5      	b.n	800e5d0 <__kernel_rem_pio2+0x300>
 800e5e4:	f3af 8000 	nop.w
	...
 800e5f4:	3ff00000 	.word	0x3ff00000
 800e5f8:	0800f650 	.word	0x0800f650
 800e5fc:	40200000 	.word	0x40200000
 800e600:	3ff00000 	.word	0x3ff00000
 800e604:	3e700000 	.word	0x3e700000
 800e608:	41700000 	.word	0x41700000
 800e60c:	3fe00000 	.word	0x3fe00000
 800e610:	0800f610 	.word	0x0800f610
 800e614:	1e62      	subs	r2, r4, #1
 800e616:	ab0e      	add	r3, sp, #56	; 0x38
 800e618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e61c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e620:	a90e      	add	r1, sp, #56	; 0x38
 800e622:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e626:	e739      	b.n	800e49c <__kernel_rem_pio2+0x1cc>
 800e628:	1e62      	subs	r2, r4, #1
 800e62a:	ab0e      	add	r3, sp, #56	; 0x38
 800e62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e630:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e634:	e7f4      	b.n	800e620 <__kernel_rem_pio2+0x350>
 800e636:	a90e      	add	r1, sp, #56	; 0x38
 800e638:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e63c:	3b01      	subs	r3, #1
 800e63e:	430a      	orrs	r2, r1
 800e640:	e789      	b.n	800e556 <__kernel_rem_pio2+0x286>
 800e642:	3301      	adds	r3, #1
 800e644:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e648:	2900      	cmp	r1, #0
 800e64a:	d0fa      	beq.n	800e642 <__kernel_rem_pio2+0x372>
 800e64c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e64e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800e652:	446a      	add	r2, sp
 800e654:	3a98      	subs	r2, #152	; 0x98
 800e656:	920a      	str	r2, [sp, #40]	; 0x28
 800e658:	9a08      	ldr	r2, [sp, #32]
 800e65a:	18e3      	adds	r3, r4, r3
 800e65c:	18a5      	adds	r5, r4, r2
 800e65e:	aa22      	add	r2, sp, #136	; 0x88
 800e660:	f104 0801 	add.w	r8, r4, #1
 800e664:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e668:	9304      	str	r3, [sp, #16]
 800e66a:	9b04      	ldr	r3, [sp, #16]
 800e66c:	4543      	cmp	r3, r8
 800e66e:	da04      	bge.n	800e67a <__kernel_rem_pio2+0x3aa>
 800e670:	461c      	mov	r4, r3
 800e672:	e6a3      	b.n	800e3bc <__kernel_rem_pio2+0xec>
 800e674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e676:	2301      	movs	r3, #1
 800e678:	e7e4      	b.n	800e644 <__kernel_rem_pio2+0x374>
 800e67a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e67c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e680:	f7f1 ff70 	bl	8000564 <__aeabi_i2d>
 800e684:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e68a:	46ab      	mov	fp, r5
 800e68c:	461c      	mov	r4, r3
 800e68e:	f04f 0900 	mov.w	r9, #0
 800e692:	2600      	movs	r6, #0
 800e694:	2700      	movs	r7, #0
 800e696:	9b06      	ldr	r3, [sp, #24]
 800e698:	4599      	cmp	r9, r3
 800e69a:	dd06      	ble.n	800e6aa <__kernel_rem_pio2+0x3da>
 800e69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e69e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e6a2:	f108 0801 	add.w	r8, r8, #1
 800e6a6:	930a      	str	r3, [sp, #40]	; 0x28
 800e6a8:	e7df      	b.n	800e66a <__kernel_rem_pio2+0x39a>
 800e6aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e6ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e6b2:	f7f1 ffc1 	bl	8000638 <__aeabi_dmul>
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	4639      	mov	r1, r7
 800e6be:	f7f1 fe05 	bl	80002cc <__adddf3>
 800e6c2:	f109 0901 	add.w	r9, r9, #1
 800e6c6:	4606      	mov	r6, r0
 800e6c8:	460f      	mov	r7, r1
 800e6ca:	e7e4      	b.n	800e696 <__kernel_rem_pio2+0x3c6>
 800e6cc:	3d01      	subs	r5, #1
 800e6ce:	e748      	b.n	800e562 <__kernel_rem_pio2+0x292>
 800e6d0:	ec47 6b10 	vmov	d0, r6, r7
 800e6d4:	f1ca 0000 	rsb	r0, sl, #0
 800e6d8:	f000 fbd6 	bl	800ee88 <scalbn>
 800e6dc:	ec57 6b10 	vmov	r6, r7, d0
 800e6e0:	4ba0      	ldr	r3, [pc, #640]	; (800e964 <__kernel_rem_pio2+0x694>)
 800e6e2:	ee10 0a10 	vmov	r0, s0
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	4639      	mov	r1, r7
 800e6ea:	f7f2 fa2b 	bl	8000b44 <__aeabi_dcmpge>
 800e6ee:	b1f8      	cbz	r0, 800e730 <__kernel_rem_pio2+0x460>
 800e6f0:	4b9d      	ldr	r3, [pc, #628]	; (800e968 <__kernel_rem_pio2+0x698>)
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	4639      	mov	r1, r7
 800e6f8:	f7f1 ff9e 	bl	8000638 <__aeabi_dmul>
 800e6fc:	f7f2 fa4c 	bl	8000b98 <__aeabi_d2iz>
 800e700:	4680      	mov	r8, r0
 800e702:	f7f1 ff2f 	bl	8000564 <__aeabi_i2d>
 800e706:	4b97      	ldr	r3, [pc, #604]	; (800e964 <__kernel_rem_pio2+0x694>)
 800e708:	2200      	movs	r2, #0
 800e70a:	f7f1 ff95 	bl	8000638 <__aeabi_dmul>
 800e70e:	460b      	mov	r3, r1
 800e710:	4602      	mov	r2, r0
 800e712:	4639      	mov	r1, r7
 800e714:	4630      	mov	r0, r6
 800e716:	f7f1 fdd7 	bl	80002c8 <__aeabi_dsub>
 800e71a:	f7f2 fa3d 	bl	8000b98 <__aeabi_d2iz>
 800e71e:	1c65      	adds	r5, r4, #1
 800e720:	ab0e      	add	r3, sp, #56	; 0x38
 800e722:	f10a 0a18 	add.w	sl, sl, #24
 800e726:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e72a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e72e:	e720      	b.n	800e572 <__kernel_rem_pio2+0x2a2>
 800e730:	4630      	mov	r0, r6
 800e732:	4639      	mov	r1, r7
 800e734:	f7f2 fa30 	bl	8000b98 <__aeabi_d2iz>
 800e738:	ab0e      	add	r3, sp, #56	; 0x38
 800e73a:	4625      	mov	r5, r4
 800e73c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e740:	e717      	b.n	800e572 <__kernel_rem_pio2+0x2a2>
 800e742:	ab0e      	add	r3, sp, #56	; 0x38
 800e744:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e748:	f7f1 ff0c 	bl	8000564 <__aeabi_i2d>
 800e74c:	4632      	mov	r2, r6
 800e74e:	463b      	mov	r3, r7
 800e750:	f7f1 ff72 	bl	8000638 <__aeabi_dmul>
 800e754:	4b84      	ldr	r3, [pc, #528]	; (800e968 <__kernel_rem_pio2+0x698>)
 800e756:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e75a:	2200      	movs	r2, #0
 800e75c:	4630      	mov	r0, r6
 800e75e:	4639      	mov	r1, r7
 800e760:	f7f1 ff6a 	bl	8000638 <__aeabi_dmul>
 800e764:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e768:	4606      	mov	r6, r0
 800e76a:	460f      	mov	r7, r1
 800e76c:	e70f      	b.n	800e58e <__kernel_rem_pio2+0x2be>
 800e76e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e772:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e776:	f7f1 ff5f 	bl	8000638 <__aeabi_dmul>
 800e77a:	4602      	mov	r2, r0
 800e77c:	460b      	mov	r3, r1
 800e77e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e782:	f7f1 fda3 	bl	80002cc <__adddf3>
 800e786:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e78a:	f108 0801 	add.w	r8, r8, #1
 800e78e:	9b02      	ldr	r3, [sp, #8]
 800e790:	4598      	cmp	r8, r3
 800e792:	dc01      	bgt.n	800e798 <__kernel_rem_pio2+0x4c8>
 800e794:	45b8      	cmp	r8, r7
 800e796:	ddea      	ble.n	800e76e <__kernel_rem_pio2+0x49e>
 800e798:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e79c:	ab4a      	add	r3, sp, #296	; 0x128
 800e79e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e7a2:	ed87 7b00 	vstr	d7, [r7]
 800e7a6:	3e01      	subs	r6, #1
 800e7a8:	e6f8      	b.n	800e59c <__kernel_rem_pio2+0x2cc>
 800e7aa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e7ac:	2b02      	cmp	r3, #2
 800e7ae:	dc0b      	bgt.n	800e7c8 <__kernel_rem_pio2+0x4f8>
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	dc35      	bgt.n	800e820 <__kernel_rem_pio2+0x550>
 800e7b4:	d059      	beq.n	800e86a <__kernel_rem_pio2+0x59a>
 800e7b6:	9b04      	ldr	r3, [sp, #16]
 800e7b8:	f003 0007 	and.w	r0, r3, #7
 800e7bc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e7c0:	ecbd 8b02 	vpop	{d8}
 800e7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e7ca:	2b03      	cmp	r3, #3
 800e7cc:	d1f3      	bne.n	800e7b6 <__kernel_rem_pio2+0x4e6>
 800e7ce:	ab4a      	add	r3, sp, #296	; 0x128
 800e7d0:	4423      	add	r3, r4
 800e7d2:	9306      	str	r3, [sp, #24]
 800e7d4:	461c      	mov	r4, r3
 800e7d6:	469a      	mov	sl, r3
 800e7d8:	9502      	str	r5, [sp, #8]
 800e7da:	9b02      	ldr	r3, [sp, #8]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	f1aa 0a08 	sub.w	sl, sl, #8
 800e7e2:	dc6b      	bgt.n	800e8bc <__kernel_rem_pio2+0x5ec>
 800e7e4:	46aa      	mov	sl, r5
 800e7e6:	f1ba 0f01 	cmp.w	sl, #1
 800e7ea:	f1a4 0408 	sub.w	r4, r4, #8
 800e7ee:	f300 8085 	bgt.w	800e8fc <__kernel_rem_pio2+0x62c>
 800e7f2:	9c06      	ldr	r4, [sp, #24]
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	3408      	adds	r4, #8
 800e7f8:	2100      	movs	r1, #0
 800e7fa:	2d01      	cmp	r5, #1
 800e7fc:	f300 809d 	bgt.w	800e93a <__kernel_rem_pio2+0x66a>
 800e800:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e804:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800e808:	f1bb 0f00 	cmp.w	fp, #0
 800e80c:	f040 809b 	bne.w	800e946 <__kernel_rem_pio2+0x676>
 800e810:	9b01      	ldr	r3, [sp, #4]
 800e812:	e9c3 5600 	strd	r5, r6, [r3]
 800e816:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e81a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e81e:	e7ca      	b.n	800e7b6 <__kernel_rem_pio2+0x4e6>
 800e820:	3408      	adds	r4, #8
 800e822:	ab4a      	add	r3, sp, #296	; 0x128
 800e824:	441c      	add	r4, r3
 800e826:	462e      	mov	r6, r5
 800e828:	2000      	movs	r0, #0
 800e82a:	2100      	movs	r1, #0
 800e82c:	2e00      	cmp	r6, #0
 800e82e:	da36      	bge.n	800e89e <__kernel_rem_pio2+0x5ce>
 800e830:	f1bb 0f00 	cmp.w	fp, #0
 800e834:	d039      	beq.n	800e8aa <__kernel_rem_pio2+0x5da>
 800e836:	4602      	mov	r2, r0
 800e838:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e83c:	9c01      	ldr	r4, [sp, #4]
 800e83e:	e9c4 2300 	strd	r2, r3, [r4]
 800e842:	4602      	mov	r2, r0
 800e844:	460b      	mov	r3, r1
 800e846:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e84a:	f7f1 fd3d 	bl	80002c8 <__aeabi_dsub>
 800e84e:	ae4c      	add	r6, sp, #304	; 0x130
 800e850:	2401      	movs	r4, #1
 800e852:	42a5      	cmp	r5, r4
 800e854:	da2c      	bge.n	800e8b0 <__kernel_rem_pio2+0x5e0>
 800e856:	f1bb 0f00 	cmp.w	fp, #0
 800e85a:	d002      	beq.n	800e862 <__kernel_rem_pio2+0x592>
 800e85c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e860:	4619      	mov	r1, r3
 800e862:	9b01      	ldr	r3, [sp, #4]
 800e864:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e868:	e7a5      	b.n	800e7b6 <__kernel_rem_pio2+0x4e6>
 800e86a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800e86e:	eb0d 0403 	add.w	r4, sp, r3
 800e872:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e876:	2000      	movs	r0, #0
 800e878:	2100      	movs	r1, #0
 800e87a:	2d00      	cmp	r5, #0
 800e87c:	da09      	bge.n	800e892 <__kernel_rem_pio2+0x5c2>
 800e87e:	f1bb 0f00 	cmp.w	fp, #0
 800e882:	d002      	beq.n	800e88a <__kernel_rem_pio2+0x5ba>
 800e884:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e888:	4619      	mov	r1, r3
 800e88a:	9b01      	ldr	r3, [sp, #4]
 800e88c:	e9c3 0100 	strd	r0, r1, [r3]
 800e890:	e791      	b.n	800e7b6 <__kernel_rem_pio2+0x4e6>
 800e892:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e896:	f7f1 fd19 	bl	80002cc <__adddf3>
 800e89a:	3d01      	subs	r5, #1
 800e89c:	e7ed      	b.n	800e87a <__kernel_rem_pio2+0x5aa>
 800e89e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e8a2:	f7f1 fd13 	bl	80002cc <__adddf3>
 800e8a6:	3e01      	subs	r6, #1
 800e8a8:	e7c0      	b.n	800e82c <__kernel_rem_pio2+0x55c>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	e7c5      	b.n	800e83c <__kernel_rem_pio2+0x56c>
 800e8b0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e8b4:	f7f1 fd0a 	bl	80002cc <__adddf3>
 800e8b8:	3401      	adds	r4, #1
 800e8ba:	e7ca      	b.n	800e852 <__kernel_rem_pio2+0x582>
 800e8bc:	e9da 8900 	ldrd	r8, r9, [sl]
 800e8c0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e8c4:	9b02      	ldr	r3, [sp, #8]
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	9302      	str	r3, [sp, #8]
 800e8ca:	4632      	mov	r2, r6
 800e8cc:	463b      	mov	r3, r7
 800e8ce:	4640      	mov	r0, r8
 800e8d0:	4649      	mov	r1, r9
 800e8d2:	f7f1 fcfb 	bl	80002cc <__adddf3>
 800e8d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e8da:	4602      	mov	r2, r0
 800e8dc:	460b      	mov	r3, r1
 800e8de:	4640      	mov	r0, r8
 800e8e0:	4649      	mov	r1, r9
 800e8e2:	f7f1 fcf1 	bl	80002c8 <__aeabi_dsub>
 800e8e6:	4632      	mov	r2, r6
 800e8e8:	463b      	mov	r3, r7
 800e8ea:	f7f1 fcef 	bl	80002cc <__adddf3>
 800e8ee:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e8f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e8f6:	ed8a 7b00 	vstr	d7, [sl]
 800e8fa:	e76e      	b.n	800e7da <__kernel_rem_pio2+0x50a>
 800e8fc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e900:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e904:	4640      	mov	r0, r8
 800e906:	4632      	mov	r2, r6
 800e908:	463b      	mov	r3, r7
 800e90a:	4649      	mov	r1, r9
 800e90c:	f7f1 fcde 	bl	80002cc <__adddf3>
 800e910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e914:	4602      	mov	r2, r0
 800e916:	460b      	mov	r3, r1
 800e918:	4640      	mov	r0, r8
 800e91a:	4649      	mov	r1, r9
 800e91c:	f7f1 fcd4 	bl	80002c8 <__aeabi_dsub>
 800e920:	4632      	mov	r2, r6
 800e922:	463b      	mov	r3, r7
 800e924:	f7f1 fcd2 	bl	80002cc <__adddf3>
 800e928:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e92c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e930:	ed84 7b00 	vstr	d7, [r4]
 800e934:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e938:	e755      	b.n	800e7e6 <__kernel_rem_pio2+0x516>
 800e93a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e93e:	f7f1 fcc5 	bl	80002cc <__adddf3>
 800e942:	3d01      	subs	r5, #1
 800e944:	e759      	b.n	800e7fa <__kernel_rem_pio2+0x52a>
 800e946:	9b01      	ldr	r3, [sp, #4]
 800e948:	9a01      	ldr	r2, [sp, #4]
 800e94a:	601d      	str	r5, [r3, #0]
 800e94c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e950:	605c      	str	r4, [r3, #4]
 800e952:	609f      	str	r7, [r3, #8]
 800e954:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e958:	60d3      	str	r3, [r2, #12]
 800e95a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e95e:	6110      	str	r0, [r2, #16]
 800e960:	6153      	str	r3, [r2, #20]
 800e962:	e728      	b.n	800e7b6 <__kernel_rem_pio2+0x4e6>
 800e964:	41700000 	.word	0x41700000
 800e968:	3e700000 	.word	0x3e700000
 800e96c:	00000000 	.word	0x00000000

0800e970 <__kernel_tan>:
 800e970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e974:	ed2d 8b06 	vpush	{d8-d10}
 800e978:	ec5b ab10 	vmov	sl, fp, d0
 800e97c:	4be0      	ldr	r3, [pc, #896]	; (800ed00 <__kernel_tan+0x390>)
 800e97e:	b083      	sub	sp, #12
 800e980:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800e984:	429f      	cmp	r7, r3
 800e986:	ec59 8b11 	vmov	r8, r9, d1
 800e98a:	4606      	mov	r6, r0
 800e98c:	f8cd b000 	str.w	fp, [sp]
 800e990:	dc61      	bgt.n	800ea56 <__kernel_tan+0xe6>
 800e992:	ee10 0a10 	vmov	r0, s0
 800e996:	4659      	mov	r1, fp
 800e998:	f7f2 f8fe 	bl	8000b98 <__aeabi_d2iz>
 800e99c:	4605      	mov	r5, r0
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	f040 8083 	bne.w	800eaaa <__kernel_tan+0x13a>
 800e9a4:	1c73      	adds	r3, r6, #1
 800e9a6:	4652      	mov	r2, sl
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	433b      	orrs	r3, r7
 800e9ac:	d112      	bne.n	800e9d4 <__kernel_tan+0x64>
 800e9ae:	ec4b ab10 	vmov	d0, sl, fp
 800e9b2:	f7ff fa41 	bl	800de38 <fabs>
 800e9b6:	49d3      	ldr	r1, [pc, #844]	; (800ed04 <__kernel_tan+0x394>)
 800e9b8:	ec53 2b10 	vmov	r2, r3, d0
 800e9bc:	2000      	movs	r0, #0
 800e9be:	f7f1 ff65 	bl	800088c <__aeabi_ddiv>
 800e9c2:	4682      	mov	sl, r0
 800e9c4:	468b      	mov	fp, r1
 800e9c6:	ec4b ab10 	vmov	d0, sl, fp
 800e9ca:	b003      	add	sp, #12
 800e9cc:	ecbd 8b06 	vpop	{d8-d10}
 800e9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d4:	2e01      	cmp	r6, #1
 800e9d6:	d0f6      	beq.n	800e9c6 <__kernel_tan+0x56>
 800e9d8:	4642      	mov	r2, r8
 800e9da:	464b      	mov	r3, r9
 800e9dc:	4650      	mov	r0, sl
 800e9de:	4659      	mov	r1, fp
 800e9e0:	f7f1 fc74 	bl	80002cc <__adddf3>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	460f      	mov	r7, r1
 800e9ea:	2000      	movs	r0, #0
 800e9ec:	49c6      	ldr	r1, [pc, #792]	; (800ed08 <__kernel_tan+0x398>)
 800e9ee:	f7f1 ff4d 	bl	800088c <__aeabi_ddiv>
 800e9f2:	e9cd 0100 	strd	r0, r1, [sp]
 800e9f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9fa:	462e      	mov	r6, r5
 800e9fc:	4652      	mov	r2, sl
 800e9fe:	462c      	mov	r4, r5
 800ea00:	4630      	mov	r0, r6
 800ea02:	461d      	mov	r5, r3
 800ea04:	4639      	mov	r1, r7
 800ea06:	465b      	mov	r3, fp
 800ea08:	f7f1 fc5e 	bl	80002c8 <__aeabi_dsub>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	460b      	mov	r3, r1
 800ea10:	4640      	mov	r0, r8
 800ea12:	4649      	mov	r1, r9
 800ea14:	f7f1 fc58 	bl	80002c8 <__aeabi_dsub>
 800ea18:	4632      	mov	r2, r6
 800ea1a:	462b      	mov	r3, r5
 800ea1c:	f7f1 fe0c 	bl	8000638 <__aeabi_dmul>
 800ea20:	4632      	mov	r2, r6
 800ea22:	4680      	mov	r8, r0
 800ea24:	4689      	mov	r9, r1
 800ea26:	462b      	mov	r3, r5
 800ea28:	4630      	mov	r0, r6
 800ea2a:	4639      	mov	r1, r7
 800ea2c:	f7f1 fe04 	bl	8000638 <__aeabi_dmul>
 800ea30:	4bb4      	ldr	r3, [pc, #720]	; (800ed04 <__kernel_tan+0x394>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	f7f1 fc4a 	bl	80002cc <__adddf3>
 800ea38:	4602      	mov	r2, r0
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	4640      	mov	r0, r8
 800ea3e:	4649      	mov	r1, r9
 800ea40:	f7f1 fc44 	bl	80002cc <__adddf3>
 800ea44:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea48:	f7f1 fdf6 	bl	8000638 <__aeabi_dmul>
 800ea4c:	4622      	mov	r2, r4
 800ea4e:	462b      	mov	r3, r5
 800ea50:	f7f1 fc3c 	bl	80002cc <__adddf3>
 800ea54:	e7b5      	b.n	800e9c2 <__kernel_tan+0x52>
 800ea56:	4bad      	ldr	r3, [pc, #692]	; (800ed0c <__kernel_tan+0x39c>)
 800ea58:	429f      	cmp	r7, r3
 800ea5a:	dd26      	ble.n	800eaaa <__kernel_tan+0x13a>
 800ea5c:	9b00      	ldr	r3, [sp, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	da09      	bge.n	800ea76 <__kernel_tan+0x106>
 800ea62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ea66:	469b      	mov	fp, r3
 800ea68:	ee10 aa10 	vmov	sl, s0
 800ea6c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ea70:	ee11 8a10 	vmov	r8, s2
 800ea74:	4699      	mov	r9, r3
 800ea76:	4652      	mov	r2, sl
 800ea78:	465b      	mov	r3, fp
 800ea7a:	a183      	add	r1, pc, #524	; (adr r1, 800ec88 <__kernel_tan+0x318>)
 800ea7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea80:	f7f1 fc22 	bl	80002c8 <__aeabi_dsub>
 800ea84:	4642      	mov	r2, r8
 800ea86:	464b      	mov	r3, r9
 800ea88:	4604      	mov	r4, r0
 800ea8a:	460d      	mov	r5, r1
 800ea8c:	a180      	add	r1, pc, #512	; (adr r1, 800ec90 <__kernel_tan+0x320>)
 800ea8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea92:	f7f1 fc19 	bl	80002c8 <__aeabi_dsub>
 800ea96:	4622      	mov	r2, r4
 800ea98:	462b      	mov	r3, r5
 800ea9a:	f7f1 fc17 	bl	80002cc <__adddf3>
 800ea9e:	f04f 0800 	mov.w	r8, #0
 800eaa2:	4682      	mov	sl, r0
 800eaa4:	468b      	mov	fp, r1
 800eaa6:	f04f 0900 	mov.w	r9, #0
 800eaaa:	4652      	mov	r2, sl
 800eaac:	465b      	mov	r3, fp
 800eaae:	4650      	mov	r0, sl
 800eab0:	4659      	mov	r1, fp
 800eab2:	f7f1 fdc1 	bl	8000638 <__aeabi_dmul>
 800eab6:	4602      	mov	r2, r0
 800eab8:	460b      	mov	r3, r1
 800eaba:	ec43 2b18 	vmov	d8, r2, r3
 800eabe:	f7f1 fdbb 	bl	8000638 <__aeabi_dmul>
 800eac2:	ec53 2b18 	vmov	r2, r3, d8
 800eac6:	4604      	mov	r4, r0
 800eac8:	460d      	mov	r5, r1
 800eaca:	4650      	mov	r0, sl
 800eacc:	4659      	mov	r1, fp
 800eace:	f7f1 fdb3 	bl	8000638 <__aeabi_dmul>
 800ead2:	a371      	add	r3, pc, #452	; (adr r3, 800ec98 <__kernel_tan+0x328>)
 800ead4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead8:	ec41 0b19 	vmov	d9, r0, r1
 800eadc:	4620      	mov	r0, r4
 800eade:	4629      	mov	r1, r5
 800eae0:	f7f1 fdaa 	bl	8000638 <__aeabi_dmul>
 800eae4:	a36e      	add	r3, pc, #440	; (adr r3, 800eca0 <__kernel_tan+0x330>)
 800eae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaea:	f7f1 fbef 	bl	80002cc <__adddf3>
 800eaee:	4622      	mov	r2, r4
 800eaf0:	462b      	mov	r3, r5
 800eaf2:	f7f1 fda1 	bl	8000638 <__aeabi_dmul>
 800eaf6:	a36c      	add	r3, pc, #432	; (adr r3, 800eca8 <__kernel_tan+0x338>)
 800eaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafc:	f7f1 fbe6 	bl	80002cc <__adddf3>
 800eb00:	4622      	mov	r2, r4
 800eb02:	462b      	mov	r3, r5
 800eb04:	f7f1 fd98 	bl	8000638 <__aeabi_dmul>
 800eb08:	a369      	add	r3, pc, #420	; (adr r3, 800ecb0 <__kernel_tan+0x340>)
 800eb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0e:	f7f1 fbdd 	bl	80002cc <__adddf3>
 800eb12:	4622      	mov	r2, r4
 800eb14:	462b      	mov	r3, r5
 800eb16:	f7f1 fd8f 	bl	8000638 <__aeabi_dmul>
 800eb1a:	a367      	add	r3, pc, #412	; (adr r3, 800ecb8 <__kernel_tan+0x348>)
 800eb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb20:	f7f1 fbd4 	bl	80002cc <__adddf3>
 800eb24:	4622      	mov	r2, r4
 800eb26:	462b      	mov	r3, r5
 800eb28:	f7f1 fd86 	bl	8000638 <__aeabi_dmul>
 800eb2c:	a364      	add	r3, pc, #400	; (adr r3, 800ecc0 <__kernel_tan+0x350>)
 800eb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb32:	f7f1 fbcb 	bl	80002cc <__adddf3>
 800eb36:	ec53 2b18 	vmov	r2, r3, d8
 800eb3a:	f7f1 fd7d 	bl	8000638 <__aeabi_dmul>
 800eb3e:	a362      	add	r3, pc, #392	; (adr r3, 800ecc8 <__kernel_tan+0x358>)
 800eb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb44:	ec41 0b1a 	vmov	d10, r0, r1
 800eb48:	4620      	mov	r0, r4
 800eb4a:	4629      	mov	r1, r5
 800eb4c:	f7f1 fd74 	bl	8000638 <__aeabi_dmul>
 800eb50:	a35f      	add	r3, pc, #380	; (adr r3, 800ecd0 <__kernel_tan+0x360>)
 800eb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb56:	f7f1 fbb9 	bl	80002cc <__adddf3>
 800eb5a:	4622      	mov	r2, r4
 800eb5c:	462b      	mov	r3, r5
 800eb5e:	f7f1 fd6b 	bl	8000638 <__aeabi_dmul>
 800eb62:	a35d      	add	r3, pc, #372	; (adr r3, 800ecd8 <__kernel_tan+0x368>)
 800eb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb68:	f7f1 fbb0 	bl	80002cc <__adddf3>
 800eb6c:	4622      	mov	r2, r4
 800eb6e:	462b      	mov	r3, r5
 800eb70:	f7f1 fd62 	bl	8000638 <__aeabi_dmul>
 800eb74:	a35a      	add	r3, pc, #360	; (adr r3, 800ece0 <__kernel_tan+0x370>)
 800eb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7a:	f7f1 fba7 	bl	80002cc <__adddf3>
 800eb7e:	4622      	mov	r2, r4
 800eb80:	462b      	mov	r3, r5
 800eb82:	f7f1 fd59 	bl	8000638 <__aeabi_dmul>
 800eb86:	a358      	add	r3, pc, #352	; (adr r3, 800ece8 <__kernel_tan+0x378>)
 800eb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8c:	f7f1 fb9e 	bl	80002cc <__adddf3>
 800eb90:	4622      	mov	r2, r4
 800eb92:	462b      	mov	r3, r5
 800eb94:	f7f1 fd50 	bl	8000638 <__aeabi_dmul>
 800eb98:	a355      	add	r3, pc, #340	; (adr r3, 800ecf0 <__kernel_tan+0x380>)
 800eb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9e:	f7f1 fb95 	bl	80002cc <__adddf3>
 800eba2:	4602      	mov	r2, r0
 800eba4:	460b      	mov	r3, r1
 800eba6:	ec51 0b1a 	vmov	r0, r1, d10
 800ebaa:	f7f1 fb8f 	bl	80002cc <__adddf3>
 800ebae:	ec53 2b19 	vmov	r2, r3, d9
 800ebb2:	f7f1 fd41 	bl	8000638 <__aeabi_dmul>
 800ebb6:	4642      	mov	r2, r8
 800ebb8:	464b      	mov	r3, r9
 800ebba:	f7f1 fb87 	bl	80002cc <__adddf3>
 800ebbe:	ec53 2b18 	vmov	r2, r3, d8
 800ebc2:	f7f1 fd39 	bl	8000638 <__aeabi_dmul>
 800ebc6:	4642      	mov	r2, r8
 800ebc8:	464b      	mov	r3, r9
 800ebca:	f7f1 fb7f 	bl	80002cc <__adddf3>
 800ebce:	a34a      	add	r3, pc, #296	; (adr r3, 800ecf8 <__kernel_tan+0x388>)
 800ebd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd4:	4604      	mov	r4, r0
 800ebd6:	460d      	mov	r5, r1
 800ebd8:	ec51 0b19 	vmov	r0, r1, d9
 800ebdc:	f7f1 fd2c 	bl	8000638 <__aeabi_dmul>
 800ebe0:	4622      	mov	r2, r4
 800ebe2:	462b      	mov	r3, r5
 800ebe4:	f7f1 fb72 	bl	80002cc <__adddf3>
 800ebe8:	460b      	mov	r3, r1
 800ebea:	ec41 0b18 	vmov	d8, r0, r1
 800ebee:	4602      	mov	r2, r0
 800ebf0:	4659      	mov	r1, fp
 800ebf2:	4650      	mov	r0, sl
 800ebf4:	f7f1 fb6a 	bl	80002cc <__adddf3>
 800ebf8:	4b44      	ldr	r3, [pc, #272]	; (800ed0c <__kernel_tan+0x39c>)
 800ebfa:	429f      	cmp	r7, r3
 800ebfc:	4604      	mov	r4, r0
 800ebfe:	460d      	mov	r5, r1
 800ec00:	f340 8086 	ble.w	800ed10 <__kernel_tan+0x3a0>
 800ec04:	4630      	mov	r0, r6
 800ec06:	f7f1 fcad 	bl	8000564 <__aeabi_i2d>
 800ec0a:	4622      	mov	r2, r4
 800ec0c:	4680      	mov	r8, r0
 800ec0e:	4689      	mov	r9, r1
 800ec10:	462b      	mov	r3, r5
 800ec12:	4620      	mov	r0, r4
 800ec14:	4629      	mov	r1, r5
 800ec16:	f7f1 fd0f 	bl	8000638 <__aeabi_dmul>
 800ec1a:	4642      	mov	r2, r8
 800ec1c:	4606      	mov	r6, r0
 800ec1e:	460f      	mov	r7, r1
 800ec20:	464b      	mov	r3, r9
 800ec22:	4620      	mov	r0, r4
 800ec24:	4629      	mov	r1, r5
 800ec26:	f7f1 fb51 	bl	80002cc <__adddf3>
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	4630      	mov	r0, r6
 800ec30:	4639      	mov	r1, r7
 800ec32:	f7f1 fe2b 	bl	800088c <__aeabi_ddiv>
 800ec36:	ec53 2b18 	vmov	r2, r3, d8
 800ec3a:	f7f1 fb45 	bl	80002c8 <__aeabi_dsub>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	460b      	mov	r3, r1
 800ec42:	4650      	mov	r0, sl
 800ec44:	4659      	mov	r1, fp
 800ec46:	f7f1 fb3f 	bl	80002c8 <__aeabi_dsub>
 800ec4a:	4602      	mov	r2, r0
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	f7f1 fb3d 	bl	80002cc <__adddf3>
 800ec52:	4602      	mov	r2, r0
 800ec54:	460b      	mov	r3, r1
 800ec56:	4640      	mov	r0, r8
 800ec58:	4649      	mov	r1, r9
 800ec5a:	f7f1 fb35 	bl	80002c8 <__aeabi_dsub>
 800ec5e:	9b00      	ldr	r3, [sp, #0]
 800ec60:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800ec64:	f00a 0a02 	and.w	sl, sl, #2
 800ec68:	4604      	mov	r4, r0
 800ec6a:	f1ca 0001 	rsb	r0, sl, #1
 800ec6e:	460d      	mov	r5, r1
 800ec70:	f7f1 fc78 	bl	8000564 <__aeabi_i2d>
 800ec74:	4602      	mov	r2, r0
 800ec76:	460b      	mov	r3, r1
 800ec78:	4620      	mov	r0, r4
 800ec7a:	4629      	mov	r1, r5
 800ec7c:	f7f1 fcdc 	bl	8000638 <__aeabi_dmul>
 800ec80:	e69f      	b.n	800e9c2 <__kernel_tan+0x52>
 800ec82:	bf00      	nop
 800ec84:	f3af 8000 	nop.w
 800ec88:	54442d18 	.word	0x54442d18
 800ec8c:	3fe921fb 	.word	0x3fe921fb
 800ec90:	33145c07 	.word	0x33145c07
 800ec94:	3c81a626 	.word	0x3c81a626
 800ec98:	74bf7ad4 	.word	0x74bf7ad4
 800ec9c:	3efb2a70 	.word	0x3efb2a70
 800eca0:	32f0a7e9 	.word	0x32f0a7e9
 800eca4:	3f12b80f 	.word	0x3f12b80f
 800eca8:	1a8d1068 	.word	0x1a8d1068
 800ecac:	3f3026f7 	.word	0x3f3026f7
 800ecb0:	fee08315 	.word	0xfee08315
 800ecb4:	3f57dbc8 	.word	0x3f57dbc8
 800ecb8:	e96e8493 	.word	0xe96e8493
 800ecbc:	3f8226e3 	.word	0x3f8226e3
 800ecc0:	1bb341fe 	.word	0x1bb341fe
 800ecc4:	3faba1ba 	.word	0x3faba1ba
 800ecc8:	db605373 	.word	0xdb605373
 800eccc:	bef375cb 	.word	0xbef375cb
 800ecd0:	a03792a6 	.word	0xa03792a6
 800ecd4:	3f147e88 	.word	0x3f147e88
 800ecd8:	f2f26501 	.word	0xf2f26501
 800ecdc:	3f4344d8 	.word	0x3f4344d8
 800ece0:	c9560328 	.word	0xc9560328
 800ece4:	3f6d6d22 	.word	0x3f6d6d22
 800ece8:	8406d637 	.word	0x8406d637
 800ecec:	3f9664f4 	.word	0x3f9664f4
 800ecf0:	1110fe7a 	.word	0x1110fe7a
 800ecf4:	3fc11111 	.word	0x3fc11111
 800ecf8:	55555563 	.word	0x55555563
 800ecfc:	3fd55555 	.word	0x3fd55555
 800ed00:	3e2fffff 	.word	0x3e2fffff
 800ed04:	3ff00000 	.word	0x3ff00000
 800ed08:	bff00000 	.word	0xbff00000
 800ed0c:	3fe59427 	.word	0x3fe59427
 800ed10:	2e01      	cmp	r6, #1
 800ed12:	d02f      	beq.n	800ed74 <__kernel_tan+0x404>
 800ed14:	460f      	mov	r7, r1
 800ed16:	4602      	mov	r2, r0
 800ed18:	460b      	mov	r3, r1
 800ed1a:	4689      	mov	r9, r1
 800ed1c:	2000      	movs	r0, #0
 800ed1e:	4917      	ldr	r1, [pc, #92]	; (800ed7c <__kernel_tan+0x40c>)
 800ed20:	f7f1 fdb4 	bl	800088c <__aeabi_ddiv>
 800ed24:	2600      	movs	r6, #0
 800ed26:	e9cd 0100 	strd	r0, r1, [sp]
 800ed2a:	4652      	mov	r2, sl
 800ed2c:	465b      	mov	r3, fp
 800ed2e:	4630      	mov	r0, r6
 800ed30:	4639      	mov	r1, r7
 800ed32:	f7f1 fac9 	bl	80002c8 <__aeabi_dsub>
 800ed36:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ed3a:	4602      	mov	r2, r0
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	ec51 0b18 	vmov	r0, r1, d8
 800ed42:	f7f1 fac1 	bl	80002c8 <__aeabi_dsub>
 800ed46:	4632      	mov	r2, r6
 800ed48:	462b      	mov	r3, r5
 800ed4a:	f7f1 fc75 	bl	8000638 <__aeabi_dmul>
 800ed4e:	46b0      	mov	r8, r6
 800ed50:	460f      	mov	r7, r1
 800ed52:	4642      	mov	r2, r8
 800ed54:	462b      	mov	r3, r5
 800ed56:	4634      	mov	r4, r6
 800ed58:	4649      	mov	r1, r9
 800ed5a:	4606      	mov	r6, r0
 800ed5c:	4640      	mov	r0, r8
 800ed5e:	f7f1 fc6b 	bl	8000638 <__aeabi_dmul>
 800ed62:	4b07      	ldr	r3, [pc, #28]	; (800ed80 <__kernel_tan+0x410>)
 800ed64:	2200      	movs	r2, #0
 800ed66:	f7f1 fab1 	bl	80002cc <__adddf3>
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	4630      	mov	r0, r6
 800ed70:	4639      	mov	r1, r7
 800ed72:	e665      	b.n	800ea40 <__kernel_tan+0xd0>
 800ed74:	4682      	mov	sl, r0
 800ed76:	468b      	mov	fp, r1
 800ed78:	e625      	b.n	800e9c6 <__kernel_tan+0x56>
 800ed7a:	bf00      	nop
 800ed7c:	bff00000 	.word	0xbff00000
 800ed80:	3ff00000 	.word	0x3ff00000
 800ed84:	00000000 	.word	0x00000000

0800ed88 <floor>:
 800ed88:	ec51 0b10 	vmov	r0, r1, d0
 800ed8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed90:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ed94:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ed98:	2e13      	cmp	r6, #19
 800ed9a:	ee10 5a10 	vmov	r5, s0
 800ed9e:	ee10 8a10 	vmov	r8, s0
 800eda2:	460c      	mov	r4, r1
 800eda4:	dc32      	bgt.n	800ee0c <floor+0x84>
 800eda6:	2e00      	cmp	r6, #0
 800eda8:	da14      	bge.n	800edd4 <floor+0x4c>
 800edaa:	a333      	add	r3, pc, #204	; (adr r3, 800ee78 <floor+0xf0>)
 800edac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb0:	f7f1 fa8c 	bl	80002cc <__adddf3>
 800edb4:	2200      	movs	r2, #0
 800edb6:	2300      	movs	r3, #0
 800edb8:	f7f1 fece 	bl	8000b58 <__aeabi_dcmpgt>
 800edbc:	b138      	cbz	r0, 800edce <floor+0x46>
 800edbe:	2c00      	cmp	r4, #0
 800edc0:	da57      	bge.n	800ee72 <floor+0xea>
 800edc2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800edc6:	431d      	orrs	r5, r3
 800edc8:	d001      	beq.n	800edce <floor+0x46>
 800edca:	4c2d      	ldr	r4, [pc, #180]	; (800ee80 <floor+0xf8>)
 800edcc:	2500      	movs	r5, #0
 800edce:	4621      	mov	r1, r4
 800edd0:	4628      	mov	r0, r5
 800edd2:	e025      	b.n	800ee20 <floor+0x98>
 800edd4:	4f2b      	ldr	r7, [pc, #172]	; (800ee84 <floor+0xfc>)
 800edd6:	4137      	asrs	r7, r6
 800edd8:	ea01 0307 	and.w	r3, r1, r7
 800eddc:	4303      	orrs	r3, r0
 800edde:	d01f      	beq.n	800ee20 <floor+0x98>
 800ede0:	a325      	add	r3, pc, #148	; (adr r3, 800ee78 <floor+0xf0>)
 800ede2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede6:	f7f1 fa71 	bl	80002cc <__adddf3>
 800edea:	2200      	movs	r2, #0
 800edec:	2300      	movs	r3, #0
 800edee:	f7f1 feb3 	bl	8000b58 <__aeabi_dcmpgt>
 800edf2:	2800      	cmp	r0, #0
 800edf4:	d0eb      	beq.n	800edce <floor+0x46>
 800edf6:	2c00      	cmp	r4, #0
 800edf8:	bfbe      	ittt	lt
 800edfa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800edfe:	fa43 f606 	asrlt.w	r6, r3, r6
 800ee02:	19a4      	addlt	r4, r4, r6
 800ee04:	ea24 0407 	bic.w	r4, r4, r7
 800ee08:	2500      	movs	r5, #0
 800ee0a:	e7e0      	b.n	800edce <floor+0x46>
 800ee0c:	2e33      	cmp	r6, #51	; 0x33
 800ee0e:	dd0b      	ble.n	800ee28 <floor+0xa0>
 800ee10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ee14:	d104      	bne.n	800ee20 <floor+0x98>
 800ee16:	ee10 2a10 	vmov	r2, s0
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	f7f1 fa56 	bl	80002cc <__adddf3>
 800ee20:	ec41 0b10 	vmov	d0, r0, r1
 800ee24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee28:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ee2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee30:	fa23 f707 	lsr.w	r7, r3, r7
 800ee34:	4207      	tst	r7, r0
 800ee36:	d0f3      	beq.n	800ee20 <floor+0x98>
 800ee38:	a30f      	add	r3, pc, #60	; (adr r3, 800ee78 <floor+0xf0>)
 800ee3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3e:	f7f1 fa45 	bl	80002cc <__adddf3>
 800ee42:	2200      	movs	r2, #0
 800ee44:	2300      	movs	r3, #0
 800ee46:	f7f1 fe87 	bl	8000b58 <__aeabi_dcmpgt>
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	d0bf      	beq.n	800edce <floor+0x46>
 800ee4e:	2c00      	cmp	r4, #0
 800ee50:	da02      	bge.n	800ee58 <floor+0xd0>
 800ee52:	2e14      	cmp	r6, #20
 800ee54:	d103      	bne.n	800ee5e <floor+0xd6>
 800ee56:	3401      	adds	r4, #1
 800ee58:	ea25 0507 	bic.w	r5, r5, r7
 800ee5c:	e7b7      	b.n	800edce <floor+0x46>
 800ee5e:	2301      	movs	r3, #1
 800ee60:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ee64:	fa03 f606 	lsl.w	r6, r3, r6
 800ee68:	4435      	add	r5, r6
 800ee6a:	4545      	cmp	r5, r8
 800ee6c:	bf38      	it	cc
 800ee6e:	18e4      	addcc	r4, r4, r3
 800ee70:	e7f2      	b.n	800ee58 <floor+0xd0>
 800ee72:	2500      	movs	r5, #0
 800ee74:	462c      	mov	r4, r5
 800ee76:	e7aa      	b.n	800edce <floor+0x46>
 800ee78:	8800759c 	.word	0x8800759c
 800ee7c:	7e37e43c 	.word	0x7e37e43c
 800ee80:	bff00000 	.word	0xbff00000
 800ee84:	000fffff 	.word	0x000fffff

0800ee88 <scalbn>:
 800ee88:	b570      	push	{r4, r5, r6, lr}
 800ee8a:	ec55 4b10 	vmov	r4, r5, d0
 800ee8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ee92:	4606      	mov	r6, r0
 800ee94:	462b      	mov	r3, r5
 800ee96:	b99a      	cbnz	r2, 800eec0 <scalbn+0x38>
 800ee98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ee9c:	4323      	orrs	r3, r4
 800ee9e:	d036      	beq.n	800ef0e <scalbn+0x86>
 800eea0:	4b39      	ldr	r3, [pc, #228]	; (800ef88 <scalbn+0x100>)
 800eea2:	4629      	mov	r1, r5
 800eea4:	ee10 0a10 	vmov	r0, s0
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f7f1 fbc5 	bl	8000638 <__aeabi_dmul>
 800eeae:	4b37      	ldr	r3, [pc, #220]	; (800ef8c <scalbn+0x104>)
 800eeb0:	429e      	cmp	r6, r3
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	460d      	mov	r5, r1
 800eeb6:	da10      	bge.n	800eeda <scalbn+0x52>
 800eeb8:	a32b      	add	r3, pc, #172	; (adr r3, 800ef68 <scalbn+0xe0>)
 800eeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eebe:	e03a      	b.n	800ef36 <scalbn+0xae>
 800eec0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800eec4:	428a      	cmp	r2, r1
 800eec6:	d10c      	bne.n	800eee2 <scalbn+0x5a>
 800eec8:	ee10 2a10 	vmov	r2, s0
 800eecc:	4620      	mov	r0, r4
 800eece:	4629      	mov	r1, r5
 800eed0:	f7f1 f9fc 	bl	80002cc <__adddf3>
 800eed4:	4604      	mov	r4, r0
 800eed6:	460d      	mov	r5, r1
 800eed8:	e019      	b.n	800ef0e <scalbn+0x86>
 800eeda:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800eede:	460b      	mov	r3, r1
 800eee0:	3a36      	subs	r2, #54	; 0x36
 800eee2:	4432      	add	r2, r6
 800eee4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800eee8:	428a      	cmp	r2, r1
 800eeea:	dd08      	ble.n	800eefe <scalbn+0x76>
 800eeec:	2d00      	cmp	r5, #0
 800eeee:	a120      	add	r1, pc, #128	; (adr r1, 800ef70 <scalbn+0xe8>)
 800eef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eef4:	da1c      	bge.n	800ef30 <scalbn+0xa8>
 800eef6:	a120      	add	r1, pc, #128	; (adr r1, 800ef78 <scalbn+0xf0>)
 800eef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eefc:	e018      	b.n	800ef30 <scalbn+0xa8>
 800eefe:	2a00      	cmp	r2, #0
 800ef00:	dd08      	ble.n	800ef14 <scalbn+0x8c>
 800ef02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ef0e:	ec45 4b10 	vmov	d0, r4, r5
 800ef12:	bd70      	pop	{r4, r5, r6, pc}
 800ef14:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ef18:	da19      	bge.n	800ef4e <scalbn+0xc6>
 800ef1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ef1e:	429e      	cmp	r6, r3
 800ef20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ef24:	dd0a      	ble.n	800ef3c <scalbn+0xb4>
 800ef26:	a112      	add	r1, pc, #72	; (adr r1, 800ef70 <scalbn+0xe8>)
 800ef28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d1e2      	bne.n	800eef6 <scalbn+0x6e>
 800ef30:	a30f      	add	r3, pc, #60	; (adr r3, 800ef70 <scalbn+0xe8>)
 800ef32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef36:	f7f1 fb7f 	bl	8000638 <__aeabi_dmul>
 800ef3a:	e7cb      	b.n	800eed4 <scalbn+0x4c>
 800ef3c:	a10a      	add	r1, pc, #40	; (adr r1, 800ef68 <scalbn+0xe0>)
 800ef3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d0b8      	beq.n	800eeb8 <scalbn+0x30>
 800ef46:	a10e      	add	r1, pc, #56	; (adr r1, 800ef80 <scalbn+0xf8>)
 800ef48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef4c:	e7b4      	b.n	800eeb8 <scalbn+0x30>
 800ef4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef52:	3236      	adds	r2, #54	; 0x36
 800ef54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	4b0c      	ldr	r3, [pc, #48]	; (800ef90 <scalbn+0x108>)
 800ef60:	2200      	movs	r2, #0
 800ef62:	e7e8      	b.n	800ef36 <scalbn+0xae>
 800ef64:	f3af 8000 	nop.w
 800ef68:	c2f8f359 	.word	0xc2f8f359
 800ef6c:	01a56e1f 	.word	0x01a56e1f
 800ef70:	8800759c 	.word	0x8800759c
 800ef74:	7e37e43c 	.word	0x7e37e43c
 800ef78:	8800759c 	.word	0x8800759c
 800ef7c:	fe37e43c 	.word	0xfe37e43c
 800ef80:	c2f8f359 	.word	0xc2f8f359
 800ef84:	81a56e1f 	.word	0x81a56e1f
 800ef88:	43500000 	.word	0x43500000
 800ef8c:	ffff3cb0 	.word	0xffff3cb0
 800ef90:	3c900000 	.word	0x3c900000

0800ef94 <_init>:
 800ef94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef96:	bf00      	nop
 800ef98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef9a:	bc08      	pop	{r3}
 800ef9c:	469e      	mov	lr, r3
 800ef9e:	4770      	bx	lr

0800efa0 <_fini>:
 800efa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa2:	bf00      	nop
 800efa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efa6:	bc08      	pop	{r3}
 800efa8:	469e      	mov	lr, r3
 800efaa:	4770      	bx	lr
