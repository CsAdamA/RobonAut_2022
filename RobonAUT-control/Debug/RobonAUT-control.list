
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f724  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  0800f8f8  0800f8f8  0001f8f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010048  08010048  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  08010048  08010048  00020048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010050  08010050  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010050  08010050  00020050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010054  08010054  00020054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08010058  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ac  20000254  080102ac  00030254  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a00  080102ac  00030a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e36  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003860  00000000  00000000  000480ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  0004b920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  0004cbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026323  00000000  00000000  0004dcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b9a  00000000  00000000  00073ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1394  00000000  00000000  0008cb95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016df29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006038  00000000  00000000  0016df7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000254 	.word	0x20000254
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f8dc 	.word	0x0800f8dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000258 	.word	0x20000258
 800020c:	0800f8dc 	.word	0x0800f8dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0c      	blt.n	8000fb8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <__NVIC_ClearPendingIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	3360      	adds	r3, #96	; 0x60
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fcc:	f3bf 8f4f 	dsb	sy
}
 8000fd0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <__NVIC_SystemReset+0x24>)
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fda:	4904      	ldr	r1, [pc, #16]	; (8000fec <__NVIC_SystemReset+0x24>)
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_SystemReset+0x28>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <__NVIC_SystemReset+0x20>
 8000fec:	e000ed00 	.word	0xe000ed00
 8000ff0:	05fa0004 	.word	0x05fa0004

08000ff4 <F4_Basic_Init>:
volatile uint8_t fromPC[2];
uint8_t mode;
float v_ref; //mm/s

void F4_Basic_Init(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_scheduler,TIM_HandleTypeDef *htim_motor,TIM_HandleTypeDef *htim_servo1,TIM_HandleTypeDef *htim_servo2, TIM_HandleTypeDef *htim_encoder)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	; 0x38
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
	char buf[40];
	LED_R(0);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001008:	4851      	ldr	r0, [pc, #324]	; (8001150 <F4_Basic_Init+0x15c>)
 800100a:	f006 fce5 	bl	80079d8 <HAL_GPIO_WritePin>
	LED_B(0);
 800100e:	2201      	movs	r2, #1
 8001010:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001014:	484e      	ldr	r0, [pc, #312]	; (8001150 <F4_Basic_Init+0x15c>)
 8001016:	f006 fcdf 	bl	80079d8 <HAL_GPIO_WritePin>
	LED_G(0);
 800101a:	2201      	movs	r2, #1
 800101c:	2102      	movs	r1, #2
 800101e:	484c      	ldr	r0, [pc, #304]	; (8001150 <F4_Basic_Init+0x15c>)
 8001020:	f006 fcda 	bl	80079d8 <HAL_GPIO_WritePin>
	LED_Y(0);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102a:	4849      	ldr	r0, [pc, #292]	; (8001150 <F4_Basic_Init+0x15c>)
 800102c:	f006 fcd4 	bl	80079d8 <HAL_GPIO_WritePin>
	LED_NUCLEO(0);
 8001030:	2200      	movs	r2, #0
 8001032:	2120      	movs	r1, #32
 8001034:	4847      	ldr	r0, [pc, #284]	; (8001154 <F4_Basic_Init+0x160>)
 8001036:	f006 fccf 	bl	80079d8 <HAL_GPIO_WritePin>
	sprintf(buf,"\r\nRobonAUT 2023 Bit Bangers F4\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4946      	ldr	r1, [pc, #280]	; (8001158 <F4_Basic_Init+0x164>)
 8001040:	4618      	mov	r0, r3
 8001042:	f00a ff85 	bl	800bf50 <siprintf>
	HAL_UART_Transmit(huart_debugg,(uint8_t*) buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f8e0 	bl	8000210 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	f107 0110 	add.w	r1, r7, #16
 8001058:	2364      	movs	r3, #100	; 0x64
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f009 fa0f 	bl	800a47e <HAL_UART_Transmit>

	//MotorEnable engedélyezése
	motorEnRemote=0;//csak akkor ha megnyomtuk a ravaszt
 8001060:	4b3e      	ldr	r3, [pc, #248]	; (800115c <F4_Basic_Init+0x168>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
	motorEnLineOk=1;
 8001066:	4b3e      	ldr	r3, [pc, #248]	; (8001160 <F4_Basic_Init+0x16c>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]

	NVIC_ClearPendingIRQ(On_Board_Button_EXTI_IRQn);
 800106c:	2028      	movs	r0, #40	; 0x28
 800106e:	f7ff ff8d 	bl	8000f8c <__NVIC_ClearPendingIRQ>
	NVIC_ClearPendingIRQ(B1_EXTI_IRQn);
 8001072:	200a      	movs	r0, #10
 8001074:	f7ff ff8a 	bl	8000f8c <__NVIC_ClearPendingIRQ>

	swState[0] = SW1;
 8001078:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107c:	4835      	ldr	r0, [pc, #212]	; (8001154 <F4_Basic_Init+0x160>)
 800107e:	f006 fc93 	bl	80079a8 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <F4_Basic_Init+0x170>)
 8001088:	701a      	strb	r2, [r3, #0]
	swState[1] = SW2;
 800108a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108e:	4830      	ldr	r0, [pc, #192]	; (8001150 <F4_Basic_Init+0x15c>)
 8001090:	f006 fc8a 	bl	80079a8 <HAL_GPIO_ReadPin>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	4b32      	ldr	r3, [pc, #200]	; (8001164 <F4_Basic_Init+0x170>)
 800109a:	705a      	strb	r2, [r3, #1]
	if(SW2)LED_R(1);
 800109c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a0:	482b      	ldr	r0, [pc, #172]	; (8001150 <F4_Basic_Init+0x15c>)
 80010a2:	f006 fc81 	bl	80079a8 <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d006      	beq.n	80010ba <F4_Basic_Init+0xc6>
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b2:	4827      	ldr	r0, [pc, #156]	; (8001150 <F4_Basic_Init+0x15c>)
 80010b4:	f006 fc90 	bl	80079d8 <HAL_GPIO_WritePin>
 80010b8:	e005      	b.n	80010c6 <F4_Basic_Init+0xd2>
	else LED_R(0);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c0:	4823      	ldr	r0, [pc, #140]	; (8001150 <F4_Basic_Init+0x15c>)
 80010c2:	f006 fc89 	bl	80079d8 <HAL_GPIO_WritePin>

	bFlag[0] = bFlag[1] = bFlag[2] = 0;
 80010c6:	2200      	movs	r2, #0
 80010c8:	4b27      	ldr	r3, [pc, #156]	; (8001168 <F4_Basic_Init+0x174>)
 80010ca:	4611      	mov	r1, r2
 80010cc:	7099      	strb	r1, [r3, #2]
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <F4_Basic_Init+0x174>)
 80010d0:	4611      	mov	r1, r2
 80010d2:	7059      	strb	r1, [r3, #1]
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <F4_Basic_Init+0x174>)
 80010d6:	701a      	strb	r2, [r3, #0]
	fromPC[0]=150;
 80010d8:	4b24      	ldr	r3, [pc, #144]	; (800116c <F4_Basic_Init+0x178>)
 80010da:	2296      	movs	r2, #150	; 0x96
 80010dc:	701a      	strb	r2, [r3, #0]
	fromPC[1]=150;
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <F4_Basic_Init+0x178>)
 80010e0:	2296      	movs	r2, #150	; 0x96
 80010e2:	705a      	strb	r2, [r3, #1]
	mode=SKILL;
 80010e4:	4b22      	ldr	r3, [pc, #136]	; (8001170 <F4_Basic_Init+0x17c>)
 80010e6:	2252      	movs	r2, #82	; 0x52
 80010e8:	701a      	strb	r2, [r3, #0]
	v_ref = 1000;
 80010ea:	4b22      	ldr	r3, [pc, #136]	; (8001174 <F4_Basic_Init+0x180>)
 80010ec:	4a22      	ldr	r2, [pc, #136]	; (8001178 <F4_Basic_Init+0x184>)
 80010ee:	601a      	str	r2, [r3, #0]
	v=0;
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <F4_Basic_Init+0x188>)
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]

	//timerek elindítása
	TIM1->CCR4=680;
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <F4_Basic_Init+0x18c>)
 80010fa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR1=684;
 8001100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001104:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8001108:	635a      	str	r2, [r3, #52]	; 0x34
	//TIM2->CCR1=684; //servot középre
	TIM3->CCR1=499; //0 kitöltési tényező a motorra
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <F4_Basic_Init+0x190>)
 800110c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001110:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=499;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <F4_Basic_Init+0x190>)
 8001114:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001118:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start(htim_scheduler);//heart beat timer tick start
 800111a:	68b8      	ldr	r0, [r7, #8]
 800111c:	f007 fb30 	bl	8008780 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_1);//motor PWM-ek elindítása
 8001120:	2100      	movs	r1, #0
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f007 fbee 	bl	8008904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_2);
 8001128:	2104      	movs	r1, #4
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f007 fbea 	bl	8008904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo1, TIM_CHANNEL_1); //servo RC pwm elindítása
 8001130:	2100      	movs	r1, #0
 8001132:	6838      	ldr	r0, [r7, #0]
 8001134:	f007 fbe6 	bl	8008904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo2, TIM_CHANNEL_4); //servo RC pwm elindítása
 8001138:	210c      	movs	r1, #12
 800113a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800113c:	f007 fbe2 	bl	8008904 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(htim_encoder,TIM_CHANNEL_ALL);
 8001140:	213c      	movs	r1, #60	; 0x3c
 8001142:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001144:	f007 ff50 	bl	8008fe8 <HAL_TIM_Encoder_Start>

	//Ha a PC-ről küldünk vmit azt fogadjuk
	//HAL_UART_Receive_IT(huart_debugg, fromPC, 2);
}
 8001148:	bf00      	nop
 800114a:	3738      	adds	r7, #56	; 0x38
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40020400 	.word	0x40020400
 8001154:	40020000 	.word	0x40020000
 8001158:	0800f8f8 	.word	0x0800f8f8
 800115c:	200009b4 	.word	0x200009b4
 8001160:	200009b5 	.word	0x200009b5
 8001164:	20000270 	.word	0x20000270
 8001168:	20000274 	.word	0x20000274
 800116c:	20000278 	.word	0x20000278
 8001170:	2000027a 	.word	0x2000027a
 8001174:	2000027c 	.word	0x2000027c
 8001178:	447a0000 	.word	0x447a0000
 800117c:	20000580 	.word	0x20000580
 8001180:	40010000 	.word	0x40010000
 8001184:	40000400 	.word	0x40000400

08001188 <HDI_Read_Task>:


void HDI_Read_Task(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_servo,uint32_t tick, uint32_t period)
{
 8001188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	603b      	str	r3, [r7, #0]
	static uint32_t hdi_read_task_tick=0;

	if(hdi_read_task_tick>tick) return;
 8001198:	4b92      	ldr	r3, [pc, #584]	; (80013e4 <HDI_Read_Task+0x25c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	f0c0 811a 	bcc.w	80013d8 <HDI_Read_Task+0x250>
	hdi_read_task_tick = tick + period;
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a8e      	ldr	r2, [pc, #568]	; (80013e4 <HDI_Read_Task+0x25c>)
 80011ac:	6013      	str	r3, [r2, #0]

	swState[0]=SW1;
 80011ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b2:	488d      	ldr	r0, [pc, #564]	; (80013e8 <HDI_Read_Task+0x260>)
 80011b4:	f006 fbf8 	bl	80079a8 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b8b      	ldr	r3, [pc, #556]	; (80013ec <HDI_Read_Task+0x264>)
 80011be:	701a      	strb	r2, [r3, #0]
	swState[1]=SW2;
 80011c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c4:	488a      	ldr	r0, [pc, #552]	; (80013f0 <HDI_Read_Task+0x268>)
 80011c6:	f006 fbef 	bl	80079a8 <HAL_GPIO_ReadPin>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b87      	ldr	r3, [pc, #540]	; (80013ec <HDI_Read_Task+0x264>)
 80011d0:	705a      	strb	r2, [r3, #1]

	if(swState[0] && mode==FAST) LED_G(1);
 80011d2:	4b86      	ldr	r3, [pc, #536]	; (80013ec <HDI_Read_Task+0x264>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d008      	beq.n	80011ec <HDI_Read_Task+0x64>
 80011da:	4b86      	ldr	r3, [pc, #536]	; (80013f4 <HDI_Read_Task+0x26c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b3f      	cmp	r3, #63	; 0x3f
 80011e0:	d104      	bne.n	80011ec <HDI_Read_Task+0x64>
 80011e2:	2200      	movs	r2, #0
 80011e4:	2102      	movs	r1, #2
 80011e6:	4882      	ldr	r0, [pc, #520]	; (80013f0 <HDI_Read_Task+0x268>)
 80011e8:	f006 fbf6 	bl	80079d8 <HAL_GPIO_WritePin>
	if(!swState[0] && mode==FAST) LED_G(0);
 80011ec:	4b7f      	ldr	r3, [pc, #508]	; (80013ec <HDI_Read_Task+0x264>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d108      	bne.n	8001206 <HDI_Read_Task+0x7e>
 80011f4:	4b7f      	ldr	r3, [pc, #508]	; (80013f4 <HDI_Read_Task+0x26c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b3f      	cmp	r3, #63	; 0x3f
 80011fa:	d104      	bne.n	8001206 <HDI_Read_Task+0x7e>
 80011fc:	2201      	movs	r2, #1
 80011fe:	2102      	movs	r1, #2
 8001200:	487b      	ldr	r0, [pc, #492]	; (80013f0 <HDI_Read_Task+0x268>)
 8001202:	f006 fbe9 	bl	80079d8 <HAL_GPIO_WritePin>
	if(swState[1]) LED_R(1);
 8001206:	4b79      	ldr	r3, [pc, #484]	; (80013ec <HDI_Read_Task+0x264>)
 8001208:	785b      	ldrb	r3, [r3, #1]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HDI_Read_Task+0x92>
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001214:	4876      	ldr	r0, [pc, #472]	; (80013f0 <HDI_Read_Task+0x268>)
 8001216:	f006 fbdf 	bl	80079d8 <HAL_GPIO_WritePin>
	if(!swState[1]) LED_R(0);
 800121a:	4b74      	ldr	r3, [pc, #464]	; (80013ec <HDI_Read_Task+0x264>)
 800121c:	785b      	ldrb	r3, [r3, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d105      	bne.n	800122e <HDI_Read_Task+0xa6>
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001228:	4871      	ldr	r0, [pc, #452]	; (80013f0 <HDI_Read_Task+0x268>)
 800122a:	f006 fbd5 	bl	80079d8 <HAL_GPIO_WritePin>

	if(bFlag[0])
 800122e:	4b72      	ldr	r3, [pc, #456]	; (80013f8 <HDI_Read_Task+0x270>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d06f      	beq.n	8001318 <HDI_Read_Task+0x190>
	{
		bFlag[0]=0;
 8001238:	4b6f      	ldr	r3, [pc, #444]	; (80013f8 <HDI_Read_Task+0x270>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
		//Milyen módban voltunk eddig?
		mode= *(__IO uint8_t *) FLASH_ADDRESS_MODESELECTOR;
 800123e:	4b6f      	ldr	r3, [pc, #444]	; (80013fc <HDI_Read_Task+0x274>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b6b      	ldr	r3, [pc, #428]	; (80013f4 <HDI_Read_Task+0x26c>)
 8001246:	701a      	strb	r2, [r3, #0]

		//section 7 törlése, hogy újraírhassuk a módot jelző bytot
		HAL_FLASH_Unlock();
 8001248:	f006 f860 	bl	800730c <HAL_FLASH_Unlock>
		FLASH_Erase_Sector(7, FLASH_VOLTAGE_RANGE_3);
 800124c:	2102      	movs	r1, #2
 800124e:	2007      	movs	r0, #7
 8001250:	f006 f9ce 	bl	80075f0 <FLASH_Erase_Sector>
		HAL_FLASH_Lock();
 8001254:	f006 f87c 	bl	8007350 <HAL_FLASH_Lock>

		LED_NUCLEO(0);
 8001258:	2200      	movs	r2, #0
 800125a:	2120      	movs	r1, #32
 800125c:	4862      	ldr	r0, [pc, #392]	; (80013e8 <HDI_Read_Task+0x260>)
 800125e:	f006 fbbb 	bl	80079d8 <HAL_GPIO_WritePin>
		LED_Y(0);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001268:	4861      	ldr	r0, [pc, #388]	; (80013f0 <HDI_Read_Task+0x268>)
 800126a:	f006 fbb5 	bl	80079d8 <HAL_GPIO_WritePin>
		LED_G(0);
 800126e:	2201      	movs	r2, #1
 8001270:	2102      	movs	r1, #2
 8001272:	485f      	ldr	r0, [pc, #380]	; (80013f0 <HDI_Read_Task+0x268>)
 8001274:	f006 fbb0 	bl	80079d8 <HAL_GPIO_WritePin>
		LED_B(0);
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127e:	485c      	ldr	r0, [pc, #368]	; (80013f0 <HDI_Read_Task+0x268>)
 8001280:	f006 fbaa 	bl	80079d8 <HAL_GPIO_WritePin>
		LED_R(0);
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128a:	4859      	ldr	r0, [pc, #356]	; (80013f0 <HDI_Read_Task+0x268>)
 800128c:	f006 fba4 	bl	80079d8 <HAL_GPIO_WritePin>
		int i;
		for(i=0;i<10;i++)
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	e01c      	b.n	80012d0 <HDI_Read_Task+0x148>
		{
			LED_NUCLEO_TOGGLE;
 8001296:	2120      	movs	r1, #32
 8001298:	4853      	ldr	r0, [pc, #332]	; (80013e8 <HDI_Read_Task+0x260>)
 800129a:	f006 fbb6 	bl	8007a0a <HAL_GPIO_TogglePin>
			LED_Y_TOGGLE;
 800129e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a2:	4853      	ldr	r0, [pc, #332]	; (80013f0 <HDI_Read_Task+0x268>)
 80012a4:	f006 fbb1 	bl	8007a0a <HAL_GPIO_TogglePin>
			LED_G_TOGGLE;
 80012a8:	2102      	movs	r1, #2
 80012aa:	4851      	ldr	r0, [pc, #324]	; (80013f0 <HDI_Read_Task+0x268>)
 80012ac:	f006 fbad 	bl	8007a0a <HAL_GPIO_TogglePin>
			LED_B_TOGGLE;
 80012b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b4:	484e      	ldr	r0, [pc, #312]	; (80013f0 <HDI_Read_Task+0x268>)
 80012b6:	f006 fba8 	bl	8007a0a <HAL_GPIO_TogglePin>
			LED_R_TOGGLE;
 80012ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012be:	484c      	ldr	r0, [pc, #304]	; (80013f0 <HDI_Read_Task+0x268>)
 80012c0:	f006 fba3 	bl	8007a0a <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 80012c4:	20c8      	movs	r0, #200	; 0xc8
 80012c6:	f004 fced 	bl	8005ca4 <HAL_Delay>
		for(i=0;i<10;i++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b09      	cmp	r3, #9
 80012d4:	dddf      	ble.n	8001296 <HDI_Read_Task+0x10e>
		}

		//Állítsuk át a módot
		HAL_FLASH_Unlock();
 80012d6:	f006 f819 	bl	800730c <HAL_FLASH_Unlock>
		if(mode==SKILL) HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, FAST); //ha eddig skill mód volt akor msot gyors lesz
 80012da:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <HDI_Read_Task+0x26c>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b52      	cmp	r3, #82	; 0x52
 80012e0:	d108      	bne.n	80012f4 <HDI_Read_Task+0x16c>
 80012e2:	f04f 023f 	mov.w	r2, #63	; 0x3f
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	4944      	ldr	r1, [pc, #272]	; (80013fc <HDI_Read_Task+0x274>)
 80012ec:	2000      	movs	r0, #0
 80012ee:	f005 ffb9 	bl	8007264 <HAL_FLASH_Program>
 80012f2:	e007      	b.n	8001304 <HDI_Read_Task+0x17c>
		else HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, SKILL); //ha eddig gyors mód vagy memóriaszemét volt akkor msot skil lesz
 80012f4:	f04f 0252 	mov.w	r2, #82	; 0x52
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	493f      	ldr	r1, [pc, #252]	; (80013fc <HDI_Read_Task+0x274>)
 80012fe:	2000      	movs	r0, #0
 8001300:	f005 ffb0 	bl	8007264 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8001304:	f006 f824 	bl	8007350 <HAL_FLASH_Lock>

		HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\rMode change!\n\r", 16, 10);
 8001308:	230a      	movs	r3, #10
 800130a:	2210      	movs	r2, #16
 800130c:	493c      	ldr	r1, [pc, #240]	; (8001400 <HDI_Read_Task+0x278>)
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f009 f8b5 	bl	800a47e <HAL_UART_Transmit>

		NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 8001314:	f7ff fe58 	bl	8000fc8 <__NVIC_SystemReset>
	}

	if(bFlag[1])
 8001318:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <HDI_Read_Task+0x270>)
 800131a:	785b      	ldrb	r3, [r3, #1]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d05b      	beq.n	80013da <HDI_Read_Task+0x252>
	{
		bFlag[1]=0;
 8001322:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <HDI_Read_Task+0x270>)
 8001324:	2200      	movs	r2, #0
 8001326:	705a      	strb	r2, [r3, #1]
		HAL_FLASH_Unlock();
 8001328:	f005 fff0 	bl	800730c <HAL_FLASH_Unlock>
		FLASH_Erase_Sector(6, FLASH_VOLTAGE_RANGE_3);//
 800132c:	2102      	movs	r1, #2
 800132e:	2006      	movs	r0, #6
 8001330:	f006 f95e 	bl	80075f0 <FLASH_Erase_Sector>
		HAL_FLASH_Lock();
 8001334:	f006 f80c 	bl	8007350 <HAL_FLASH_Lock>

		int i;
		for(i=0;i<10;i++)
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	e00a      	b.n	8001354 <HDI_Read_Task+0x1cc>
		{
			LED_R_TOGGLE;
 800133e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001342:	482b      	ldr	r0, [pc, #172]	; (80013f0 <HDI_Read_Task+0x268>)
 8001344:	f006 fb61 	bl	8007a0a <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8001348:	20c8      	movs	r0, #200	; 0xc8
 800134a:	f004 fcab 	bl	8005ca4 <HAL_Delay>
		for(i=0;i<10;i++)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	3301      	adds	r3, #1
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	2b09      	cmp	r3, #9
 8001358:	ddf1      	ble.n	800133e <HDI_Read_Task+0x1b6>
		}
		LED_R(0);
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001360:	4823      	ldr	r0, [pc, #140]	; (80013f0 <HDI_Read_Task+0x268>)
 8001362:	f006 fb39 	bl	80079d8 <HAL_GPIO_WritePin>

		HAL_FLASH_Unlock();
 8001366:	f005 ffd1 	bl	800730c <HAL_FLASH_Unlock>
		for(i=0;i<25;i++)
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	e01a      	b.n	80013a6 <HDI_Read_Task+0x21e>
		{
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+i, Nodes[i].worth);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001376:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800137a:	4618      	mov	r0, r3
 800137c:	4921      	ldr	r1, [pc, #132]	; (8001404 <HDI_Read_Task+0x27c>)
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4613      	mov	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	1a9b      	subs	r3, r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	3304      	adds	r3, #4
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	17da      	asrs	r2, r3, #31
 8001390:	4698      	mov	r8, r3
 8001392:	4691      	mov	r9, r2
 8001394:	4642      	mov	r2, r8
 8001396:	464b      	mov	r3, r9
 8001398:	4601      	mov	r1, r0
 800139a:	2000      	movs	r0, #0
 800139c:	f005 ff62 	bl	8007264 <HAL_FLASH_Program>
		for(i=0;i<25;i++)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	3301      	adds	r3, #1
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	2b18      	cmp	r3, #24
 80013aa:	dde1      	ble.n	8001370 <HDI_Read_Task+0x1e8>
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+25, collectedPoints);
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HDI_Read_Task+0x280>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2200      	movs	r2, #0
 80013b4:	461c      	mov	r4, r3
 80013b6:	4615      	mov	r5, r2
 80013b8:	4622      	mov	r2, r4
 80013ba:	462b      	mov	r3, r5
 80013bc:	4913      	ldr	r1, [pc, #76]	; (800140c <HDI_Read_Task+0x284>)
 80013be:	2000      	movs	r0, #0
 80013c0:	f005 ff50 	bl	8007264 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80013c4:	f005 ffc4 	bl	8007350 <HAL_FLASH_Lock>
		HAL_UART_Transmit(huart_debugg,(uint8_t*) "\n\rBackup save!\n\r", 16, 10);
 80013c8:	230a      	movs	r3, #10
 80013ca:	2210      	movs	r2, #16
 80013cc:	4910      	ldr	r1, [pc, #64]	; (8001410 <HDI_Read_Task+0x288>)
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f009 f855 	bl	800a47e <HAL_UART_Transmit>
		NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 80013d4:	f7ff fdf8 	bl	8000fc8 <__NVIC_SystemReset>
	if(hdi_read_task_tick>tick) return;
 80013d8:	bf00      	nop
	}

}
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013e2:	bf00      	nop
 80013e4:	20000280 	.word	0x20000280
 80013e8:	40020000 	.word	0x40020000
 80013ec:	20000270 	.word	0x20000270
 80013f0:	40020400 	.word	0x40020400
 80013f4:	2000027a 	.word	0x2000027a
 80013f8:	20000274 	.word	0x20000274
 80013fc:	08060000 	.word	0x08060000
 8001400:	0800f91c 	.word	0x0800f91c
 8001404:	2000029c 	.word	0x2000029c
 8001408:	20000287 	.word	0x20000287
 800140c:	08040019 	.word	0x08040019
 8001410:	0800f930 	.word	0x0800f930

08001414 <Uart_Receive_From_PC_ISR>:

void Uart_Receive_From_PC_ISR(UART_HandleTypeDef *huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	LED_Y_TOGGLE;
 800141c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <Uart_Receive_From_PC_ISR+0x40>)
 8001422:	f006 faf2 	bl	8007a0a <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(huart, (uint8_t*)fromPC, 2);
 8001426:	2202      	movs	r2, #2
 8001428:	490b      	ldr	r1, [pc, #44]	; (8001458 <Uart_Receive_From_PC_ISR+0x44>)
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f009 f95b 	bl	800a6e6 <HAL_UART_Receive_IT>
	TIM2->CCR1 = 4*fromPC[0];
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <Uart_Receive_From_PC_ISR+0x44>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	009a      	lsls	r2, r3, #2
 8001438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR4 = 4*fromPC[1];
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <Uart_Receive_From_PC_ISR+0x44>)
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	009a      	lsls	r2, r3, #2
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <Uart_Receive_From_PC_ISR+0x48>)
 8001448:	641a      	str	r2, [r3, #64]	; 0x40
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40020400 	.word	0x40020400
 8001458:	20000278 	.word	0x20000278
 800145c:	40010000 	.word	0x40010000

08001460 <Create_Nodes>:
volatile uint8_t uartThunder[6];

node Nodes[25];

void Create_Nodes(UART_HandleTypeDef *huart_debugg)
{
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	b09c      	sub	sp, #112	; 0x70
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	int i;
	orientation=FORWARD;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <Create_Nodes+0x20>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
	nodeDetected=1;
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <Create_Nodes+0x24>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
	collectedPoints=0;
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <Create_Nodes+0x28>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]

	for(i=0;i<25;i++)
 800147a:	2300      	movs	r3, #0
 800147c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800147e:	e0a1      	b.n	80015c4 <Create_Nodes+0x164>
 8001480:	20000284 	.word	0x20000284
 8001484:	20000285 	.word	0x20000285
 8001488:	20000287 	.word	0x20000287
	{
		Nodes[i].id=65+i;
 800148c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800148e:	b2db      	uxtb	r3, r3
 8001490:	3341      	adds	r3, #65	; 0x41
 8001492:	b2d8      	uxtb	r0, r3
 8001494:	49c1      	ldr	r1, [pc, #772]	; (800179c <Create_Nodes+0x33c>)
 8001496:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	1a9b      	subs	r3, r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	4602      	mov	r2, r0
 80014a4:	701a      	strb	r2, [r3, #0]
		Nodes[i].worth=0;
 80014a6:	49bd      	ldr	r1, [pc, #756]	; (800179c <Create_Nodes+0x33c>)
 80014a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	3304      	adds	r3, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
		Nodes[i].type=0;
 80014ba:	49b8      	ldr	r1, [pc, #736]	; (800179c <Create_Nodes+0x33c>)
 80014bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	1a9b      	subs	r3, r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3308      	adds	r3, #8
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
		VALUE(Nodes[i].neighbours,0,0,0,0);
 80014ce:	49b3      	ldr	r1, [pc, #716]	; (800179c <Create_Nodes+0x33c>)
 80014d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	1a9b      	subs	r3, r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	330c      	adds	r3, #12
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	49ae      	ldr	r1, [pc, #696]	; (800179c <Create_Nodes+0x33c>)
 80014e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	1a9b      	subs	r3, r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	330d      	adds	r3, #13
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	49a9      	ldr	r1, [pc, #676]	; (800179c <Create_Nodes+0x33c>)
 80014f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80014fa:	4613      	mov	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	330e      	adds	r3, #14
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	49a4      	ldr	r1, [pc, #656]	; (800179c <Create_Nodes+0x33c>)
 800150c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	330f      	adds	r3, #15
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
		VALUE(Nodes[i].directions,0,0,0,0);
 800151e:	499f      	ldr	r1, [pc, #636]	; (800179c <Create_Nodes+0x33c>)
 8001520:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	1a9b      	subs	r3, r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	3310      	adds	r3, #16
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	499a      	ldr	r1, [pc, #616]	; (800179c <Create_Nodes+0x33c>)
 8001534:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	1a9b      	subs	r3, r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	3311      	adds	r3, #17
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
 8001546:	4995      	ldr	r1, [pc, #596]	; (800179c <Create_Nodes+0x33c>)
 8001548:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3312      	adds	r3, #18
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	4990      	ldr	r1, [pc, #576]	; (800179c <Create_Nodes+0x33c>)
 800155c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	3313      	adds	r3, #19
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
		VALUE(Nodes[i].distance,0,0,0,0);
 800156e:	498b      	ldr	r1, [pc, #556]	; (800179c <Create_Nodes+0x33c>)
 8001570:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	1a9b      	subs	r3, r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	3314      	adds	r3, #20
 800157e:	2200      	movs	r2, #0
 8001580:	801a      	strh	r2, [r3, #0]
 8001582:	4986      	ldr	r1, [pc, #536]	; (800179c <Create_Nodes+0x33c>)
 8001584:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	3316      	adds	r3, #22
 8001592:	2200      	movs	r2, #0
 8001594:	801a      	strh	r2, [r3, #0]
 8001596:	4981      	ldr	r1, [pc, #516]	; (800179c <Create_Nodes+0x33c>)
 8001598:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800159a:	4613      	mov	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	1a9b      	subs	r3, r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	3318      	adds	r3, #24
 80015a6:	2200      	movs	r2, #0
 80015a8:	801a      	strh	r2, [r3, #0]
 80015aa:	497c      	ldr	r1, [pc, #496]	; (800179c <Create_Nodes+0x33c>)
 80015ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	331a      	adds	r3, #26
 80015ba:	2200      	movs	r2, #0
 80015bc:	801a      	strh	r2, [r3, #0]
	for(i=0;i<25;i++)
 80015be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015c0:	3301      	adds	r3, #1
 80015c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80015c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015c6:	2b18      	cmp	r3, #24
 80015c8:	f77f af60 	ble.w	800148c <Create_Nodes+0x2c>
	}
	//A node
	N('A').worth=0;
 80015cc:	4b73      	ldr	r3, [pc, #460]	; (800179c <Create_Nodes+0x33c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
	N('A').type=1;
 80015d2:	4b72      	ldr	r3, [pc, #456]	; (800179c <Create_Nodes+0x33c>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	609a      	str	r2, [r3, #8]
	VALUE(N('A').neighbours,0,0,0,'C');
 80015d8:	4b70      	ldr	r3, [pc, #448]	; (800179c <Create_Nodes+0x33c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	731a      	strb	r2, [r3, #12]
 80015de:	4b6f      	ldr	r3, [pc, #444]	; (800179c <Create_Nodes+0x33c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	735a      	strb	r2, [r3, #13]
 80015e4:	4b6d      	ldr	r3, [pc, #436]	; (800179c <Create_Nodes+0x33c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	739a      	strb	r2, [r3, #14]
 80015ea:	4b6c      	ldr	r3, [pc, #432]	; (800179c <Create_Nodes+0x33c>)
 80015ec:	2243      	movs	r2, #67	; 0x43
 80015ee:	73da      	strb	r2, [r3, #15]
	VALUE(N('A').directions,0,0,0,2);
 80015f0:	4b6a      	ldr	r3, [pc, #424]	; (800179c <Create_Nodes+0x33c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	741a      	strb	r2, [r3, #16]
 80015f6:	4b69      	ldr	r3, [pc, #420]	; (800179c <Create_Nodes+0x33c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	745a      	strb	r2, [r3, #17]
 80015fc:	4b67      	ldr	r3, [pc, #412]	; (800179c <Create_Nodes+0x33c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	749a      	strb	r2, [r3, #18]
 8001602:	4b66      	ldr	r3, [pc, #408]	; (800179c <Create_Nodes+0x33c>)
 8001604:	2202      	movs	r2, #2
 8001606:	74da      	strb	r2, [r3, #19]
	VALUE(N('A').distance,0,0,0,365);
 8001608:	4b64      	ldr	r3, [pc, #400]	; (800179c <Create_Nodes+0x33c>)
 800160a:	2200      	movs	r2, #0
 800160c:	829a      	strh	r2, [r3, #20]
 800160e:	4b63      	ldr	r3, [pc, #396]	; (800179c <Create_Nodes+0x33c>)
 8001610:	2200      	movs	r2, #0
 8001612:	82da      	strh	r2, [r3, #22]
 8001614:	4b61      	ldr	r3, [pc, #388]	; (800179c <Create_Nodes+0x33c>)
 8001616:	2200      	movs	r2, #0
 8001618:	831a      	strh	r2, [r3, #24]
 800161a:	4b60      	ldr	r3, [pc, #384]	; (800179c <Create_Nodes+0x33c>)
 800161c:	f240 126d 	movw	r2, #365	; 0x16d
 8001620:	835a      	strh	r2, [r3, #26]

	//B node
	N('B').worth=2;
 8001622:	4b5e      	ldr	r3, [pc, #376]	; (800179c <Create_Nodes+0x33c>)
 8001624:	2202      	movs	r2, #2
 8001626:	621a      	str	r2, [r3, #32]
	N('B').type=2;
 8001628:	4b5c      	ldr	r3, [pc, #368]	; (800179c <Create_Nodes+0x33c>)
 800162a:	2202      	movs	r2, #2
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
	VALUE(N('B').neighbours,'D',0,'C',0);
 800162e:	4b5b      	ldr	r3, [pc, #364]	; (800179c <Create_Nodes+0x33c>)
 8001630:	2244      	movs	r2, #68	; 0x44
 8001632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001636:	4b59      	ldr	r3, [pc, #356]	; (800179c <Create_Nodes+0x33c>)
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800163e:	4b57      	ldr	r3, [pc, #348]	; (800179c <Create_Nodes+0x33c>)
 8001640:	2243      	movs	r2, #67	; 0x43
 8001642:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001646:	4b55      	ldr	r3, [pc, #340]	; (800179c <Create_Nodes+0x33c>)
 8001648:	2200      	movs	r2, #0
 800164a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	VALUE(N('B').directions,2,0,2,0);
 800164e:	4b53      	ldr	r3, [pc, #332]	; (800179c <Create_Nodes+0x33c>)
 8001650:	2202      	movs	r2, #2
 8001652:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001656:	4b51      	ldr	r3, [pc, #324]	; (800179c <Create_Nodes+0x33c>)
 8001658:	2200      	movs	r2, #0
 800165a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800165e:	4b4f      	ldr	r3, [pc, #316]	; (800179c <Create_Nodes+0x33c>)
 8001660:	2202      	movs	r2, #2
 8001662:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8001666:	4b4d      	ldr	r3, [pc, #308]	; (800179c <Create_Nodes+0x33c>)
 8001668:	2200      	movs	r2, #0
 800166a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	VALUE(N('B').distance,452,0,168,0);
 800166e:	4b4b      	ldr	r3, [pc, #300]	; (800179c <Create_Nodes+0x33c>)
 8001670:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8001674:	861a      	strh	r2, [r3, #48]	; 0x30
 8001676:	4b49      	ldr	r3, [pc, #292]	; (800179c <Create_Nodes+0x33c>)
 8001678:	2200      	movs	r2, #0
 800167a:	865a      	strh	r2, [r3, #50]	; 0x32
 800167c:	4b47      	ldr	r3, [pc, #284]	; (800179c <Create_Nodes+0x33c>)
 800167e:	22a8      	movs	r2, #168	; 0xa8
 8001680:	869a      	strh	r2, [r3, #52]	; 0x34
 8001682:	4b46      	ldr	r3, [pc, #280]	; (800179c <Create_Nodes+0x33c>)
 8001684:	2200      	movs	r2, #0
 8001686:	86da      	strh	r2, [r3, #54]	; 0x36

	//C node
	N('C').worth=0;
 8001688:	4b44      	ldr	r3, [pc, #272]	; (800179c <Create_Nodes+0x33c>)
 800168a:	2200      	movs	r2, #0
 800168c:	63da      	str	r2, [r3, #60]	; 0x3c
	N('C').type=3;
 800168e:	4b43      	ldr	r3, [pc, #268]	; (800179c <Create_Nodes+0x33c>)
 8001690:	2203      	movs	r2, #3
 8001692:	641a      	str	r2, [r3, #64]	; 0x40
	VALUE(N('C').neighbours,0,'B','E',0);
 8001694:	4b41      	ldr	r3, [pc, #260]	; (800179c <Create_Nodes+0x33c>)
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800169c:	4b3f      	ldr	r3, [pc, #252]	; (800179c <Create_Nodes+0x33c>)
 800169e:	2242      	movs	r2, #66	; 0x42
 80016a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016a4:	4b3d      	ldr	r3, [pc, #244]	; (800179c <Create_Nodes+0x33c>)
 80016a6:	2245      	movs	r2, #69	; 0x45
 80016a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80016ac:	4b3b      	ldr	r3, [pc, #236]	; (800179c <Create_Nodes+0x33c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	VALUE(N('C').directions,0,1,2,0);
 80016b4:	4b39      	ldr	r3, [pc, #228]	; (800179c <Create_Nodes+0x33c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80016bc:	4b37      	ldr	r3, [pc, #220]	; (800179c <Create_Nodes+0x33c>)
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80016c4:	4b35      	ldr	r3, [pc, #212]	; (800179c <Create_Nodes+0x33c>)
 80016c6:	2202      	movs	r2, #2
 80016c8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80016cc:	4b33      	ldr	r3, [pc, #204]	; (800179c <Create_Nodes+0x33c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	VALUE(N('C').distance,0,218,130,0);
 80016d4:	4b31      	ldr	r3, [pc, #196]	; (800179c <Create_Nodes+0x33c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80016dc:	4b2f      	ldr	r3, [pc, #188]	; (800179c <Create_Nodes+0x33c>)
 80016de:	22da      	movs	r2, #218	; 0xda
 80016e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <Create_Nodes+0x33c>)
 80016e6:	2282      	movs	r2, #130	; 0x82
 80016e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <Create_Nodes+0x33c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	//D node
	N('D').worth=2;
 80016f4:	4b29      	ldr	r3, [pc, #164]	; (800179c <Create_Nodes+0x33c>)
 80016f6:	2202      	movs	r2, #2
 80016f8:	659a      	str	r2, [r3, #88]	; 0x58
	N('D').type=1;
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <Create_Nodes+0x33c>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	65da      	str	r2, [r3, #92]	; 0x5c
	VALUE(N('D').neighbours,'B',0,'F',0);
 8001700:	4b26      	ldr	r3, [pc, #152]	; (800179c <Create_Nodes+0x33c>)
 8001702:	2242      	movs	r2, #66	; 0x42
 8001704:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001708:	4b24      	ldr	r3, [pc, #144]	; (800179c <Create_Nodes+0x33c>)
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8001710:	4b22      	ldr	r3, [pc, #136]	; (800179c <Create_Nodes+0x33c>)
 8001712:	2246      	movs	r2, #70	; 0x46
 8001714:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8001718:	4b20      	ldr	r3, [pc, #128]	; (800179c <Create_Nodes+0x33c>)
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	VALUE(N('D').directions,2,0,2,0);
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <Create_Nodes+0x33c>)
 8001722:	2202      	movs	r2, #2
 8001724:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <Create_Nodes+0x33c>)
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <Create_Nodes+0x33c>)
 8001732:	2202      	movs	r2, #2
 8001734:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <Create_Nodes+0x33c>)
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	VALUE(N('D').distance,452,0,316,0);
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <Create_Nodes+0x33c>)
 8001742:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8001746:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <Create_Nodes+0x33c>)
 800174c:	2200      	movs	r2, #0
 800174e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <Create_Nodes+0x33c>)
 8001754:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8001758:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <Create_Nodes+0x33c>)
 800175e:	2200      	movs	r2, #0
 8001760:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	//E node
	N('E').worth=0;
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <Create_Nodes+0x33c>)
 8001766:	2200      	movs	r2, #0
 8001768:	675a      	str	r2, [r3, #116]	; 0x74
	N('E').type=3;
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <Create_Nodes+0x33c>)
 800176c:	2203      	movs	r2, #3
 800176e:	679a      	str	r2, [r3, #120]	; 0x78
	VALUE(N('E').neighbours,'C',0,'F','G');
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <Create_Nodes+0x33c>)
 8001772:	2243      	movs	r2, #67	; 0x43
 8001774:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <Create_Nodes+0x33c>)
 800177a:	2200      	movs	r2, #0
 800177c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <Create_Nodes+0x33c>)
 8001782:	2246      	movs	r2, #70	; 0x46
 8001784:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <Create_Nodes+0x33c>)
 800178a:	2247      	movs	r2, #71	; 0x47
 800178c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	VALUE(N('E').directions,1,0,2,2);
 8001790:	4b02      	ldr	r3, [pc, #8]	; (800179c <Create_Nodes+0x33c>)
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001798:	e002      	b.n	80017a0 <Create_Nodes+0x340>
 800179a:	bf00      	nop
 800179c:	2000029c 	.word	0x2000029c
 80017a0:	4bcd      	ldr	r3, [pc, #820]	; (8001ad8 <Create_Nodes+0x678>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 80017a8:	4bcb      	ldr	r3, [pc, #812]	; (8001ad8 <Create_Nodes+0x678>)
 80017aa:	2202      	movs	r2, #2
 80017ac:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 80017b0:	4bc9      	ldr	r3, [pc, #804]	; (8001ad8 <Create_Nodes+0x678>)
 80017b2:	2202      	movs	r2, #2
 80017b4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	VALUE(N('E').distance,130,0,428,385);
 80017b8:	4bc7      	ldr	r3, [pc, #796]	; (8001ad8 <Create_Nodes+0x678>)
 80017ba:	2282      	movs	r2, #130	; 0x82
 80017bc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80017c0:	4bc5      	ldr	r3, [pc, #788]	; (8001ad8 <Create_Nodes+0x678>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80017c8:	4bc3      	ldr	r3, [pc, #780]	; (8001ad8 <Create_Nodes+0x678>)
 80017ca:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80017ce:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 80017d2:	4bc1      	ldr	r3, [pc, #772]	; (8001ad8 <Create_Nodes+0x678>)
 80017d4:	f240 1281 	movw	r2, #385	; 0x181
 80017d8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	//F node
	N('F').worth=2;
 80017dc:	4bbe      	ldr	r3, [pc, #760]	; (8001ad8 <Create_Nodes+0x678>)
 80017de:	2202      	movs	r2, #2
 80017e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	N('F').type=1;
 80017e4:	4bbc      	ldr	r3, [pc, #752]	; (8001ad8 <Create_Nodes+0x678>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	VALUE(N('F').neighbours,'E','D','H','I');
 80017ec:	4bba      	ldr	r3, [pc, #744]	; (8001ad8 <Create_Nodes+0x678>)
 80017ee:	2245      	movs	r2, #69	; 0x45
 80017f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 80017f4:	4bb8      	ldr	r3, [pc, #736]	; (8001ad8 <Create_Nodes+0x678>)
 80017f6:	2244      	movs	r2, #68	; 0x44
 80017f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80017fc:	4bb6      	ldr	r3, [pc, #728]	; (8001ad8 <Create_Nodes+0x678>)
 80017fe:	2248      	movs	r2, #72	; 0x48
 8001800:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8001804:	4bb4      	ldr	r3, [pc, #720]	; (8001ad8 <Create_Nodes+0x678>)
 8001806:	2249      	movs	r2, #73	; 0x49
 8001808:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	VALUE(N('F').directions,1,1,2,2);
 800180c:	4bb2      	ldr	r3, [pc, #712]	; (8001ad8 <Create_Nodes+0x678>)
 800180e:	2201      	movs	r2, #1
 8001810:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8001814:	4bb0      	ldr	r3, [pc, #704]	; (8001ad8 <Create_Nodes+0x678>)
 8001816:	2201      	movs	r2, #1
 8001818:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800181c:	4bae      	ldr	r3, [pc, #696]	; (8001ad8 <Create_Nodes+0x678>)
 800181e:	2202      	movs	r2, #2
 8001820:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8001824:	4bac      	ldr	r3, [pc, #688]	; (8001ad8 <Create_Nodes+0x678>)
 8001826:	2202      	movs	r2, #2
 8001828:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	VALUE(N('F').distance,428,316,284,335);
 800182c:	4baa      	ldr	r3, [pc, #680]	; (8001ad8 <Create_Nodes+0x678>)
 800182e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8001832:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8001836:	4ba8      	ldr	r3, [pc, #672]	; (8001ad8 <Create_Nodes+0x678>)
 8001838:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800183c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8001840:	4ba5      	ldr	r3, [pc, #660]	; (8001ad8 <Create_Nodes+0x678>)
 8001842:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001846:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800184a:	4ba3      	ldr	r3, [pc, #652]	; (8001ad8 <Create_Nodes+0x678>)
 800184c:	f240 124f 	movw	r2, #335	; 0x14f
 8001850:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6

	//G node
	N('G').worth=2;
 8001854:	4ba0      	ldr	r3, [pc, #640]	; (8001ad8 <Create_Nodes+0x678>)
 8001856:	2202      	movs	r2, #2
 8001858:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	N('G').type=1;
 800185c:	4b9e      	ldr	r3, [pc, #632]	; (8001ad8 <Create_Nodes+0x678>)
 800185e:	2201      	movs	r2, #1
 8001860:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	VALUE(N('G').neighbours,'E',0,'H','I');
 8001864:	4b9c      	ldr	r3, [pc, #624]	; (8001ad8 <Create_Nodes+0x678>)
 8001866:	2245      	movs	r2, #69	; 0x45
 8001868:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 800186c:	4b9a      	ldr	r3, [pc, #616]	; (8001ad8 <Create_Nodes+0x678>)
 800186e:	2200      	movs	r2, #0
 8001870:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8001874:	4b98      	ldr	r3, [pc, #608]	; (8001ad8 <Create_Nodes+0x678>)
 8001876:	2248      	movs	r2, #72	; 0x48
 8001878:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
 800187c:	4b96      	ldr	r3, [pc, #600]	; (8001ad8 <Create_Nodes+0x678>)
 800187e:	2249      	movs	r2, #73	; 0x49
 8001880:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	VALUE(N('G').directions,1,0,2,2);
 8001884:	4b94      	ldr	r3, [pc, #592]	; (8001ad8 <Create_Nodes+0x678>)
 8001886:	2201      	movs	r2, #1
 8001888:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800188c:	4b92      	ldr	r3, [pc, #584]	; (8001ad8 <Create_Nodes+0x678>)
 800188e:	2200      	movs	r2, #0
 8001890:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
 8001894:	4b90      	ldr	r3, [pc, #576]	; (8001ad8 <Create_Nodes+0x678>)
 8001896:	2202      	movs	r2, #2
 8001898:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
 800189c:	4b8e      	ldr	r3, [pc, #568]	; (8001ad8 <Create_Nodes+0x678>)
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	VALUE(N('G').distance,385,0,336,284);
 80018a4:	4b8c      	ldr	r3, [pc, #560]	; (8001ad8 <Create_Nodes+0x678>)
 80018a6:	f240 1281 	movw	r2, #385	; 0x181
 80018aa:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80018ae:	4b8a      	ldr	r3, [pc, #552]	; (8001ad8 <Create_Nodes+0x678>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 80018b6:	4b88      	ldr	r3, [pc, #544]	; (8001ad8 <Create_Nodes+0x678>)
 80018b8:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80018bc:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 80018c0:	4b85      	ldr	r3, [pc, #532]	; (8001ad8 <Create_Nodes+0x678>)
 80018c2:	f44f 728e 	mov.w	r2, #284	; 0x11c
 80018c6:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2

	//H node
	N('H').worth=2;
 80018ca:	4b83      	ldr	r3, [pc, #524]	; (8001ad8 <Create_Nodes+0x678>)
 80018cc:	2202      	movs	r2, #2
 80018ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	N('H').type=1;
 80018d2:	4b81      	ldr	r3, [pc, #516]	; (8001ad8 <Create_Nodes+0x678>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	VALUE(N('H').neighbours,'G','F','K','J');
 80018da:	4b7f      	ldr	r3, [pc, #508]	; (8001ad8 <Create_Nodes+0x678>)
 80018dc:	2247      	movs	r2, #71	; 0x47
 80018de:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 80018e2:	4b7d      	ldr	r3, [pc, #500]	; (8001ad8 <Create_Nodes+0x678>)
 80018e4:	2246      	movs	r2, #70	; 0x46
 80018e6:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 80018ea:	4b7b      	ldr	r3, [pc, #492]	; (8001ad8 <Create_Nodes+0x678>)
 80018ec:	224b      	movs	r2, #75	; 0x4b
 80018ee:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 80018f2:	4b79      	ldr	r3, [pc, #484]	; (8001ad8 <Create_Nodes+0x678>)
 80018f4:	224a      	movs	r2, #74	; 0x4a
 80018f6:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
	VALUE(N('H').directions,1,1,2,2);
 80018fa:	4b77      	ldr	r3, [pc, #476]	; (8001ad8 <Create_Nodes+0x678>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8001902:	4b75      	ldr	r3, [pc, #468]	; (8001ad8 <Create_Nodes+0x678>)
 8001904:	2201      	movs	r2, #1
 8001906:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
 800190a:	4b73      	ldr	r3, [pc, #460]	; (8001ad8 <Create_Nodes+0x678>)
 800190c:	2202      	movs	r2, #2
 800190e:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8001912:	4b71      	ldr	r3, [pc, #452]	; (8001ad8 <Create_Nodes+0x678>)
 8001914:	2202      	movs	r2, #2
 8001916:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	VALUE(N('H').distance,336,284,407,230);
 800191a:	4b6f      	ldr	r3, [pc, #444]	; (8001ad8 <Create_Nodes+0x678>)
 800191c:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001920:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
 8001924:	4b6c      	ldr	r3, [pc, #432]	; (8001ad8 <Create_Nodes+0x678>)
 8001926:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800192a:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
 800192e:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <Create_Nodes+0x678>)
 8001930:	f240 1297 	movw	r2, #407	; 0x197
 8001934:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
 8001938:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <Create_Nodes+0x678>)
 800193a:	22e6      	movs	r2, #230	; 0xe6
 800193c:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde

	//I node
	N('I').worth=0;
 8001940:	4b65      	ldr	r3, [pc, #404]	; (8001ad8 <Create_Nodes+0x678>)
 8001942:	2200      	movs	r2, #0
 8001944:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	N('I').type=3;
 8001948:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <Create_Nodes+0x678>)
 800194a:	2203      	movs	r2, #3
 800194c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	VALUE(N('I').neighbours,'G','F',0,'L');
 8001950:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <Create_Nodes+0x678>)
 8001952:	2247      	movs	r2, #71	; 0x47
 8001954:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8001958:	4b5f      	ldr	r3, [pc, #380]	; (8001ad8 <Create_Nodes+0x678>)
 800195a:	2246      	movs	r2, #70	; 0x46
 800195c:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8001960:	4b5d      	ldr	r3, [pc, #372]	; (8001ad8 <Create_Nodes+0x678>)
 8001962:	2200      	movs	r2, #0
 8001964:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8001968:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <Create_Nodes+0x678>)
 800196a:	224c      	movs	r2, #76	; 0x4c
 800196c:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
	VALUE(N('I').directions,1,1,0,2);
 8001970:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <Create_Nodes+0x678>)
 8001972:	2201      	movs	r2, #1
 8001974:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8001978:	4b57      	ldr	r3, [pc, #348]	; (8001ad8 <Create_Nodes+0x678>)
 800197a:	2201      	movs	r2, #1
 800197c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 8001980:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <Create_Nodes+0x678>)
 8001982:	2200      	movs	r2, #0
 8001984:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8001988:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <Create_Nodes+0x678>)
 800198a:	2202      	movs	r2, #2
 800198c:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
	VALUE(N('I').distance,284,335,0,418);
 8001990:	4b51      	ldr	r3, [pc, #324]	; (8001ad8 <Create_Nodes+0x678>)
 8001992:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001996:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 800199a:	4b4f      	ldr	r3, [pc, #316]	; (8001ad8 <Create_Nodes+0x678>)
 800199c:	f240 124f 	movw	r2, #335	; 0x14f
 80019a0:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 80019a4:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <Create_Nodes+0x678>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 80019ac:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <Create_Nodes+0x678>)
 80019ae:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 80019b2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

	//J node
	N('J').worth=0;
 80019b6:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <Create_Nodes+0x678>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	N('J').type=3;
 80019be:	4b46      	ldr	r3, [pc, #280]	; (8001ad8 <Create_Nodes+0x678>)
 80019c0:	2203      	movs	r2, #3
 80019c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	VALUE(N('J').neighbours,'H',0,'K','L');
 80019c6:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <Create_Nodes+0x678>)
 80019c8:	2248      	movs	r2, #72	; 0x48
 80019ca:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 80019ce:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <Create_Nodes+0x678>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
 80019d6:	4b40      	ldr	r3, [pc, #256]	; (8001ad8 <Create_Nodes+0x678>)
 80019d8:	224b      	movs	r2, #75	; 0x4b
 80019da:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 80019de:	4b3e      	ldr	r3, [pc, #248]	; (8001ad8 <Create_Nodes+0x678>)
 80019e0:	224c      	movs	r2, #76	; 0x4c
 80019e2:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
	VALUE(N('J').directions,1,0,2,2);
 80019e6:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <Create_Nodes+0x678>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 80019ee:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <Create_Nodes+0x678>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <Create_Nodes+0x678>)
 80019f8:	2202      	movs	r2, #2
 80019fa:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 80019fe:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <Create_Nodes+0x678>)
 8001a00:	2202      	movs	r2, #2
 8001a02:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
	VALUE(N('J').distance,230,0,204,229);
 8001a06:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <Create_Nodes+0x678>)
 8001a08:	22e6      	movs	r2, #230	; 0xe6
 8001a0a:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8001a0e:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <Create_Nodes+0x678>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <Create_Nodes+0x678>)
 8001a18:	22cc      	movs	r2, #204	; 0xcc
 8001a1a:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <Create_Nodes+0x678>)
 8001a20:	22e5      	movs	r2, #229	; 0xe5
 8001a22:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

	//K node
	N('K').worth=2;
 8001a26:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <Create_Nodes+0x678>)
 8001a28:	2202      	movs	r2, #2
 8001a2a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	N('K').type=1;
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <Create_Nodes+0x678>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	VALUE(N('K').neighbours,'J','H','M','N');
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <Create_Nodes+0x678>)
 8001a38:	224a      	movs	r2, #74	; 0x4a
 8001a3a:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <Create_Nodes+0x678>)
 8001a40:	2248      	movs	r2, #72	; 0x48
 8001a42:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <Create_Nodes+0x678>)
 8001a48:	224d      	movs	r2, #77	; 0x4d
 8001a4a:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <Create_Nodes+0x678>)
 8001a50:	224e      	movs	r2, #78	; 0x4e
 8001a52:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
	VALUE(N('K').directions,1,1,2,2);
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <Create_Nodes+0x678>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <Create_Nodes+0x678>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <Create_Nodes+0x678>)
 8001a68:	2202      	movs	r2, #2
 8001a6a:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <Create_Nodes+0x678>)
 8001a70:	2202      	movs	r2, #2
 8001a72:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
	VALUE(N('K').distance,204,407,288,319);
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <Create_Nodes+0x678>)
 8001a78:	22cc      	movs	r2, #204	; 0xcc
 8001a7a:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <Create_Nodes+0x678>)
 8001a80:	f240 1297 	movw	r2, #407	; 0x197
 8001a84:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <Create_Nodes+0x678>)
 8001a8a:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001a8e:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <Create_Nodes+0x678>)
 8001a94:	f240 123f 	movw	r2, #319	; 0x13f
 8001a98:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132

	//L node
	N('L').worth=2;
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <Create_Nodes+0x678>)
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	N('L').type=1;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <Create_Nodes+0x678>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	VALUE(N('L').neighbours,'I','J','M','N');
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <Create_Nodes+0x678>)
 8001aae:	2249      	movs	r2, #73	; 0x49
 8001ab0:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <Create_Nodes+0x678>)
 8001ab6:	224a      	movs	r2, #74	; 0x4a
 8001ab8:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <Create_Nodes+0x678>)
 8001abe:	224d      	movs	r2, #77	; 0x4d
 8001ac0:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <Create_Nodes+0x678>)
 8001ac6:	224e      	movs	r2, #78	; 0x4e
 8001ac8:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
	VALUE(N('L').directions,1,1,2,2);
 8001acc:	4b02      	ldr	r3, [pc, #8]	; (8001ad8 <Create_Nodes+0x678>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 8001ad4:	e002      	b.n	8001adc <Create_Nodes+0x67c>
 8001ad6:	bf00      	nop
 8001ad8:	2000029c 	.word	0x2000029c
 8001adc:	4bcd      	ldr	r3, [pc, #820]	; (8001e14 <Create_Nodes+0x9b4>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
 8001ae4:	4bcb      	ldr	r3, [pc, #812]	; (8001e14 <Create_Nodes+0x9b4>)
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 8001aec:	4bc9      	ldr	r3, [pc, #804]	; (8001e14 <Create_Nodes+0x9b4>)
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	VALUE(N('L').distance,418,229,329,258);
 8001af4:	4bc7      	ldr	r3, [pc, #796]	; (8001e14 <Create_Nodes+0x9b4>)
 8001af6:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8001afa:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
 8001afe:	4bc5      	ldr	r3, [pc, #788]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b00:	22e5      	movs	r2, #229	; 0xe5
 8001b02:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8001b06:	4bc3      	ldr	r3, [pc, #780]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b08:	f240 1249 	movw	r2, #329	; 0x149
 8001b0c:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8001b10:	4bc0      	ldr	r3, [pc, #768]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b12:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001b16:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	//M node
	N('M').worth=2;
 8001b1a:	4bbe      	ldr	r3, [pc, #760]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	N('M').type=1;
 8001b22:	4bbc      	ldr	r3, [pc, #752]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	VALUE(N('M').neighbours,'L','K','P','O');
 8001b2a:	4bba      	ldr	r3, [pc, #744]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b2c:	224c      	movs	r2, #76	; 0x4c
 8001b2e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
 8001b32:	4bb8      	ldr	r3, [pc, #736]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b34:	224b      	movs	r2, #75	; 0x4b
 8001b36:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
 8001b3a:	4bb6      	ldr	r3, [pc, #728]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b3c:	2250      	movs	r2, #80	; 0x50
 8001b3e:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
 8001b42:	4bb4      	ldr	r3, [pc, #720]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b44:	224f      	movs	r2, #79	; 0x4f
 8001b46:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
	VALUE(N('M').directions,1,1,2,2);
 8001b4a:	4bb2      	ldr	r3, [pc, #712]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8001b52:	4bb0      	ldr	r3, [pc, #704]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 8001b5a:	4bae      	ldr	r3, [pc, #696]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
 8001b62:	4bac      	ldr	r3, [pc, #688]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b64:	2202      	movs	r2, #2
 8001b66:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	VALUE(N('M').distance,329,288,416,198);
 8001b6a:	4baa      	ldr	r3, [pc, #680]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b6c:	f240 1249 	movw	r2, #329	; 0x149
 8001b70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8001b74:	4ba7      	ldr	r3, [pc, #668]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b76:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001b7a:	f8a3 2166 	strh.w	r2, [r3, #358]	; 0x166
 8001b7e:	4ba5      	ldr	r3, [pc, #660]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b80:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001b84:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
 8001b88:	4ba2      	ldr	r3, [pc, #648]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b8a:	22c6      	movs	r2, #198	; 0xc6
 8001b8c:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a

	//N node
	N('N').worth=0;
 8001b90:	4ba0      	ldr	r3, [pc, #640]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	N('N').type=3;
 8001b98:	4b9e      	ldr	r3, [pc, #632]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	VALUE(N('N').neighbours,'L','K','O','Q');
 8001ba0:	4b9c      	ldr	r3, [pc, #624]	; (8001e14 <Create_Nodes+0x9b4>)
 8001ba2:	224c      	movs	r2, #76	; 0x4c
 8001ba4:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 8001ba8:	4b9a      	ldr	r3, [pc, #616]	; (8001e14 <Create_Nodes+0x9b4>)
 8001baa:	224b      	movs	r2, #75	; 0x4b
 8001bac:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8001bb0:	4b98      	ldr	r3, [pc, #608]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bb2:	224f      	movs	r2, #79	; 0x4f
 8001bb4:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
 8001bb8:	4b96      	ldr	r3, [pc, #600]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bba:	2251      	movs	r2, #81	; 0x51
 8001bbc:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
	VALUE(N('N').directions,1,1,2,2);
 8001bc0:	4b94      	ldr	r3, [pc, #592]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
 8001bc8:	4b92      	ldr	r3, [pc, #584]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
 8001bd0:	4b90      	ldr	r3, [pc, #576]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
 8001bd8:	4b8e      	ldr	r3, [pc, #568]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
	VALUE(N('N').distance,258,318,228,447);
 8001be0:	4b8c      	ldr	r3, [pc, #560]	; (8001e14 <Create_Nodes+0x9b4>)
 8001be2:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001be6:	f8a3 2180 	strh.w	r2, [r3, #384]	; 0x180
 8001bea:	4b8a      	ldr	r3, [pc, #552]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bec:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8001bf0:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
 8001bf4:	4b87      	ldr	r3, [pc, #540]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bf6:	22e4      	movs	r2, #228	; 0xe4
 8001bf8:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
 8001bfc:	4b85      	ldr	r3, [pc, #532]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bfe:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001c02:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186

	//O node
	N('O').worth=2;
 8001c06:	4b83      	ldr	r3, [pc, #524]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c08:	2202      	movs	r2, #2
 8001c0a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	N('O').type=1;
 8001c0e:	4b81      	ldr	r3, [pc, #516]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	VALUE(N('O').neighbours,'N','M','P',0);
 8001c16:	4b7f      	ldr	r3, [pc, #508]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c18:	224e      	movs	r2, #78	; 0x4e
 8001c1a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8001c1e:	4b7d      	ldr	r3, [pc, #500]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c20:	224d      	movs	r2, #77	; 0x4d
 8001c22:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
 8001c26:	4b7b      	ldr	r3, [pc, #492]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c28:	2250      	movs	r2, #80	; 0x50
 8001c2a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8001c2e:	4b79      	ldr	r3, [pc, #484]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	VALUE(N('O').directions,1,1,2,0);
 8001c36:	4b77      	ldr	r3, [pc, #476]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 8001c3e:	4b75      	ldr	r3, [pc, #468]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
 8001c46:	4b73      	ldr	r3, [pc, #460]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
 8001c4e:	4b71      	ldr	r3, [pc, #452]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
	VALUE(N('O').distance,228,198,248,0);
 8001c56:	4b6f      	ldr	r3, [pc, #444]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c58:	22e4      	movs	r2, #228	; 0xe4
 8001c5a:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
 8001c5e:	4b6d      	ldr	r3, [pc, #436]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c60:	22c6      	movs	r2, #198	; 0xc6
 8001c62:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
 8001c66:	4b6b      	ldr	r3, [pc, #428]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c68:	22f8      	movs	r2, #248	; 0xf8
 8001c6a:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
 8001c6e:	4b69      	ldr	r3, [pc, #420]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2

	//P node
	N('P').worth=2;
 8001c76:	4b67      	ldr	r3, [pc, #412]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c78:	2202      	movs	r2, #2
 8001c7a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	N('P').type=1;
 8001c7e:	4b65      	ldr	r3, [pc, #404]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	VALUE(N('P').neighbours,'O','M','R','S');
 8001c86:	4b63      	ldr	r3, [pc, #396]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c88:	224f      	movs	r2, #79	; 0x4f
 8001c8a:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 8001c8e:	4b61      	ldr	r3, [pc, #388]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c90:	224d      	movs	r2, #77	; 0x4d
 8001c92:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 8001c96:	4b5f      	ldr	r3, [pc, #380]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c98:	2252      	movs	r2, #82	; 0x52
 8001c9a:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
 8001c9e:	4b5d      	ldr	r3, [pc, #372]	; (8001e14 <Create_Nodes+0x9b4>)
 8001ca0:	2253      	movs	r2, #83	; 0x53
 8001ca2:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
	VALUE(N('P').directions,1,1,2,2);
 8001ca6:	4b5b      	ldr	r3, [pc, #364]	; (8001e14 <Create_Nodes+0x9b4>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
 8001cae:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
 8001cb6:	4b57      	ldr	r3, [pc, #348]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cb8:	2202      	movs	r2, #2
 8001cba:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
 8001cbe:	4b55      	ldr	r3, [pc, #340]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
	VALUE(N('P').distance,248,416,305,346);
 8001cc6:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cc8:	22f8      	movs	r2, #248	; 0xf8
 8001cca:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
 8001cce:	4b51      	ldr	r3, [pc, #324]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cd0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001cd4:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
 8001cd8:	4b4e      	ldr	r3, [pc, #312]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cda:	f240 1231 	movw	r2, #305	; 0x131
 8001cde:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
 8001ce2:	4b4c      	ldr	r3, [pc, #304]	; (8001e14 <Create_Nodes+0x9b4>)
 8001ce4:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001ce8:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be

	//Q node
	N('Q').worth=2;
 8001cec:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
	N('Q').type=1;
 8001cf4:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	VALUE(N('Q').neighbours,'N',0,'R','S');
 8001cfc:	4b45      	ldr	r3, [pc, #276]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cfe:	224e      	movs	r2, #78	; 0x4e
 8001d00:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8001d04:	4b43      	ldr	r3, [pc, #268]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
 8001d0c:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d0e:	2252      	movs	r2, #82	; 0x52
 8001d10:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 8001d14:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d16:	2253      	movs	r2, #83	; 0x53
 8001d18:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
	VALUE(N('Q').directions,1,0,2,2);
 8001d1c:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 8001d24:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 8001d2c:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 8001d34:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
	VALUE(N('Q').distance,447,0,346,284);
 8001d3c:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d3e:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001d42:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
 8001d46:	4b33      	ldr	r3, [pc, #204]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d50:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001d54:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d5a:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001d5e:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da

	//R node
	N('R').worth=2;
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d64:	2202      	movs	r2, #2
 8001d66:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	N('R').type=1;
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	VALUE(N('R').neighbours,'Q','P','U','T');
 8001d72:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d74:	2251      	movs	r2, #81	; 0x51
 8001d76:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d7c:	2250      	movs	r2, #80	; 0x50
 8001d7e:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d84:	2255      	movs	r2, #85	; 0x55
 8001d86:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d8c:	2254      	movs	r2, #84	; 0x54
 8001d8e:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
	VALUE(N('R').directions,1,1,2,2);
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <Create_Nodes+0x9b4>)
 8001da4:	2202      	movs	r2, #2
 8001da6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <Create_Nodes+0x9b4>)
 8001dac:	2202      	movs	r2, #2
 8001dae:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
	VALUE(N('R').distance,346,305,366,204);
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <Create_Nodes+0x9b4>)
 8001db4:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001db8:	f8a3 21f0 	strh.w	r2, [r3, #496]	; 0x1f0
 8001dbc:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <Create_Nodes+0x9b4>)
 8001dbe:	f240 1231 	movw	r2, #305	; 0x131
 8001dc2:	f8a3 21f2 	strh.w	r2, [r3, #498]	; 0x1f2
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <Create_Nodes+0x9b4>)
 8001dc8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8001dcc:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <Create_Nodes+0x9b4>)
 8001dd2:	22cc      	movs	r2, #204	; 0xcc
 8001dd4:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6

	//S node
	N('S').worth=2;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <Create_Nodes+0x9b4>)
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	N('S').type=1;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <Create_Nodes+0x9b4>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	VALUE(N('S').neighbours,'Q','P','T','V');
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <Create_Nodes+0x9b4>)
 8001dea:	2251      	movs	r2, #81	; 0x51
 8001dec:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <Create_Nodes+0x9b4>)
 8001df2:	2250      	movs	r2, #80	; 0x50
 8001df4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <Create_Nodes+0x9b4>)
 8001dfa:	2254      	movs	r2, #84	; 0x54
 8001dfc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <Create_Nodes+0x9b4>)
 8001e02:	2256      	movs	r2, #86	; 0x56
 8001e04:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
	VALUE(N('S').directions,1,1,2,2);
 8001e08:	4b02      	ldr	r3, [pc, #8]	; (8001e14 <Create_Nodes+0x9b4>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 8001e10:	e002      	b.n	8001e18 <Create_Nodes+0x9b8>
 8001e12:	bf00      	nop
 8001e14:	2000029c 	.word	0x2000029c
 8001e18:	4bca      	ldr	r3, [pc, #808]	; (8002144 <Create_Nodes+0xce4>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
 8001e20:	4bc8      	ldr	r3, [pc, #800]	; (8002144 <Create_Nodes+0xce4>)
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
 8001e28:	4bc6      	ldr	r3, [pc, #792]	; (8002144 <Create_Nodes+0xce4>)
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
	VALUE(N('S').distance,284,346,223,406);
 8001e30:	4bc4      	ldr	r3, [pc, #784]	; (8002144 <Create_Nodes+0xce4>)
 8001e32:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001e36:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
 8001e3a:	4bc2      	ldr	r3, [pc, #776]	; (8002144 <Create_Nodes+0xce4>)
 8001e3c:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001e40:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
 8001e44:	4bbf      	ldr	r3, [pc, #764]	; (8002144 <Create_Nodes+0xce4>)
 8001e46:	22df      	movs	r2, #223	; 0xdf
 8001e48:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
 8001e4c:	4bbd      	ldr	r3, [pc, #756]	; (8002144 <Create_Nodes+0xce4>)
 8001e4e:	f44f 72cb 	mov.w	r2, #406	; 0x196
 8001e52:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212

	//T node
	N('T').worth=2;
 8001e56:	4bbb      	ldr	r3, [pc, #748]	; (8002144 <Create_Nodes+0xce4>)
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	N('T').type=1;
 8001e5e:	4bb9      	ldr	r3, [pc, #740]	; (8002144 <Create_Nodes+0xce4>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	VALUE(N('T').neighbours,'S','R','U','V');
 8001e66:	4bb7      	ldr	r3, [pc, #732]	; (8002144 <Create_Nodes+0xce4>)
 8001e68:	2253      	movs	r2, #83	; 0x53
 8001e6a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8001e6e:	4bb5      	ldr	r3, [pc, #724]	; (8002144 <Create_Nodes+0xce4>)
 8001e70:	2252      	movs	r2, #82	; 0x52
 8001e72:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 8001e76:	4bb3      	ldr	r3, [pc, #716]	; (8002144 <Create_Nodes+0xce4>)
 8001e78:	2255      	movs	r2, #85	; 0x55
 8001e7a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8001e7e:	4bb1      	ldr	r3, [pc, #708]	; (8002144 <Create_Nodes+0xce4>)
 8001e80:	2256      	movs	r2, #86	; 0x56
 8001e82:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	VALUE(N('T').directions,1,1,2,2);
 8001e86:	4baf      	ldr	r3, [pc, #700]	; (8002144 <Create_Nodes+0xce4>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
 8001e8e:	4bad      	ldr	r3, [pc, #692]	; (8002144 <Create_Nodes+0xce4>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
 8001e96:	4bab      	ldr	r3, [pc, #684]	; (8002144 <Create_Nodes+0xce4>)
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
 8001e9e:	4ba9      	ldr	r3, [pc, #676]	; (8002144 <Create_Nodes+0xce4>)
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
	VALUE(N('T').distance,223,204,192,233);
 8001ea6:	4ba7      	ldr	r3, [pc, #668]	; (8002144 <Create_Nodes+0xce4>)
 8001ea8:	22df      	movs	r2, #223	; 0xdf
 8001eaa:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
 8001eae:	4ba5      	ldr	r3, [pc, #660]	; (8002144 <Create_Nodes+0xce4>)
 8001eb0:	22cc      	movs	r2, #204	; 0xcc
 8001eb2:	f8a3 222a 	strh.w	r2, [r3, #554]	; 0x22a
 8001eb6:	4ba3      	ldr	r3, [pc, #652]	; (8002144 <Create_Nodes+0xce4>)
 8001eb8:	22c0      	movs	r2, #192	; 0xc0
 8001eba:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
 8001ebe:	4ba1      	ldr	r3, [pc, #644]	; (8002144 <Create_Nodes+0xce4>)
 8001ec0:	22e9      	movs	r2, #233	; 0xe9
 8001ec2:	f8a3 222e 	strh.w	r2, [r3, #558]	; 0x22e

	//U node
	N('U').worth=2;
 8001ec6:	4b9f      	ldr	r3, [pc, #636]	; (8002144 <Create_Nodes+0xce4>)
 8001ec8:	2202      	movs	r2, #2
 8001eca:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	N('U').type=1;
 8001ece:	4b9d      	ldr	r3, [pc, #628]	; (8002144 <Create_Nodes+0xce4>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	VALUE(N('U').neighbours,'T','R','X',0);
 8001ed6:	4b9b      	ldr	r3, [pc, #620]	; (8002144 <Create_Nodes+0xce4>)
 8001ed8:	2254      	movs	r2, #84	; 0x54
 8001eda:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
 8001ede:	4b99      	ldr	r3, [pc, #612]	; (8002144 <Create_Nodes+0xce4>)
 8001ee0:	2252      	movs	r2, #82	; 0x52
 8001ee2:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
 8001ee6:	4b97      	ldr	r3, [pc, #604]	; (8002144 <Create_Nodes+0xce4>)
 8001ee8:	2258      	movs	r2, #88	; 0x58
 8001eea:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
 8001eee:	4b95      	ldr	r3, [pc, #596]	; (8002144 <Create_Nodes+0xce4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 223f 	strb.w	r2, [r3, #575]	; 0x23f
	VALUE(N('U').directions,1,1,2,0);
 8001ef6:	4b93      	ldr	r3, [pc, #588]	; (8002144 <Create_Nodes+0xce4>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 8001efe:	4b91      	ldr	r3, [pc, #580]	; (8002144 <Create_Nodes+0xce4>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 8001f06:	4b8f      	ldr	r3, [pc, #572]	; (8002144 <Create_Nodes+0xce4>)
 8001f08:	2202      	movs	r2, #2
 8001f0a:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
 8001f0e:	4b8d      	ldr	r3, [pc, #564]	; (8002144 <Create_Nodes+0xce4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2243 	strb.w	r2, [r3, #579]	; 0x243
	VALUE(N('U').distance,192,366,371,0);
 8001f16:	4b8b      	ldr	r3, [pc, #556]	; (8002144 <Create_Nodes+0xce4>)
 8001f18:	22c0      	movs	r2, #192	; 0xc0
 8001f1a:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
 8001f1e:	4b89      	ldr	r3, [pc, #548]	; (8002144 <Create_Nodes+0xce4>)
 8001f20:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8001f24:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
 8001f28:	4b86      	ldr	r3, [pc, #536]	; (8002144 <Create_Nodes+0xce4>)
 8001f2a:	f240 1273 	movw	r2, #371	; 0x173
 8001f2e:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
 8001f32:	4b84      	ldr	r3, [pc, #528]	; (8002144 <Create_Nodes+0xce4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a

	//V node
	N('V').worth=2;
 8001f3a:	4b82      	ldr	r3, [pc, #520]	; (8002144 <Create_Nodes+0xce4>)
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	N('V').type=1;
 8001f42:	4b80      	ldr	r3, [pc, #512]	; (8002144 <Create_Nodes+0xce4>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	VALUE(N('V').neighbours,'S','T','W',0);
 8001f4a:	4b7e      	ldr	r3, [pc, #504]	; (8002144 <Create_Nodes+0xce4>)
 8001f4c:	2253      	movs	r2, #83	; 0x53
 8001f4e:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
 8001f52:	4b7c      	ldr	r3, [pc, #496]	; (8002144 <Create_Nodes+0xce4>)
 8001f54:	2254      	movs	r2, #84	; 0x54
 8001f56:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8001f5a:	4b7a      	ldr	r3, [pc, #488]	; (8002144 <Create_Nodes+0xce4>)
 8001f5c:	2257      	movs	r2, #87	; 0x57
 8001f5e:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 8001f62:	4b78      	ldr	r3, [pc, #480]	; (8002144 <Create_Nodes+0xce4>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 225b 	strb.w	r2, [r3, #603]	; 0x25b
	VALUE(N('V').directions,1,1,2,0);
 8001f6a:	4b76      	ldr	r3, [pc, #472]	; (8002144 <Create_Nodes+0xce4>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
 8001f72:	4b74      	ldr	r3, [pc, #464]	; (8002144 <Create_Nodes+0xce4>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
 8001f7a:	4b72      	ldr	r3, [pc, #456]	; (8002144 <Create_Nodes+0xce4>)
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
 8001f82:	4b70      	ldr	r3, [pc, #448]	; (8002144 <Create_Nodes+0xce4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
	VALUE(N('V').distance,406,233,149,0);
 8001f8a:	4b6e      	ldr	r3, [pc, #440]	; (8002144 <Create_Nodes+0xce4>)
 8001f8c:	f44f 72cb 	mov.w	r2, #406	; 0x196
 8001f90:	f8a3 2260 	strh.w	r2, [r3, #608]	; 0x260
 8001f94:	4b6b      	ldr	r3, [pc, #428]	; (8002144 <Create_Nodes+0xce4>)
 8001f96:	22e9      	movs	r2, #233	; 0xe9
 8001f98:	f8a3 2262 	strh.w	r2, [r3, #610]	; 0x262
 8001f9c:	4b69      	ldr	r3, [pc, #420]	; (8002144 <Create_Nodes+0xce4>)
 8001f9e:	2295      	movs	r2, #149	; 0x95
 8001fa0:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
 8001fa4:	4b67      	ldr	r3, [pc, #412]	; (8002144 <Create_Nodes+0xce4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f8a3 2266 	strh.w	r2, [r3, #614]	; 0x266

	//W node
	N('W').worth=0;
 8001fac:	4b65      	ldr	r3, [pc, #404]	; (8002144 <Create_Nodes+0xce4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	N('W').type=3;
 8001fb4:	4b63      	ldr	r3, [pc, #396]	; (8002144 <Create_Nodes+0xce4>)
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	VALUE(N('W').neighbours,'V',0,'X',0);
 8001fbc:	4b61      	ldr	r3, [pc, #388]	; (8002144 <Create_Nodes+0xce4>)
 8001fbe:	2256      	movs	r2, #86	; 0x56
 8001fc0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 8001fc4:	4b5f      	ldr	r3, [pc, #380]	; (8002144 <Create_Nodes+0xce4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
 8001fcc:	4b5d      	ldr	r3, [pc, #372]	; (8002144 <Create_Nodes+0xce4>)
 8001fce:	2258      	movs	r2, #88	; 0x58
 8001fd0:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
 8001fd4:	4b5b      	ldr	r3, [pc, #364]	; (8002144 <Create_Nodes+0xce4>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
	VALUE(N('W').directions,1,0,1,0);
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <Create_Nodes+0xce4>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8001fe4:	4b57      	ldr	r3, [pc, #348]	; (8002144 <Create_Nodes+0xce4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 8001fec:	4b55      	ldr	r3, [pc, #340]	; (8002144 <Create_Nodes+0xce4>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
 8001ff4:	4b53      	ldr	r3, [pc, #332]	; (8002144 <Create_Nodes+0xce4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 227b 	strb.w	r2, [r3, #635]	; 0x27b
	VALUE(N('W').distance,149,0,189,0);
 8001ffc:	4b51      	ldr	r3, [pc, #324]	; (8002144 <Create_Nodes+0xce4>)
 8001ffe:	2295      	movs	r2, #149	; 0x95
 8002000:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
 8002004:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <Create_Nodes+0xce4>)
 8002006:	2200      	movs	r2, #0
 8002008:	f8a3 227e 	strh.w	r2, [r3, #638]	; 0x27e
 800200c:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <Create_Nodes+0xce4>)
 800200e:	22bd      	movs	r2, #189	; 0xbd
 8002010:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
 8002014:	4b4b      	ldr	r3, [pc, #300]	; (8002144 <Create_Nodes+0xce4>)
 8002016:	2200      	movs	r2, #0
 8002018:	f8a3 2282 	strh.w	r2, [r3, #642]	; 0x282

	//X node
	N('X').worth=2;
 800201c:	4b49      	ldr	r3, [pc, #292]	; (8002144 <Create_Nodes+0xce4>)
 800201e:	2202      	movs	r2, #2
 8002020:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	N('X').type=2;
 8002024:	4b47      	ldr	r3, [pc, #284]	; (8002144 <Create_Nodes+0xce4>)
 8002026:	2202      	movs	r2, #2
 8002028:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	VALUE(N('X').neighbours,'U',0,0,'W');
 800202c:	4b45      	ldr	r3, [pc, #276]	; (8002144 <Create_Nodes+0xce4>)
 800202e:	2255      	movs	r2, #85	; 0x55
 8002030:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 8002034:	4b43      	ldr	r3, [pc, #268]	; (8002144 <Create_Nodes+0xce4>)
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 800203c:	4b41      	ldr	r3, [pc, #260]	; (8002144 <Create_Nodes+0xce4>)
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 8002044:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <Create_Nodes+0xce4>)
 8002046:	2257      	movs	r2, #87	; 0x57
 8002048:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
	VALUE(N('X').directions,1,0,0,1);
 800204c:	4b3d      	ldr	r3, [pc, #244]	; (8002144 <Create_Nodes+0xce4>)
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
 8002054:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <Create_Nodes+0xce4>)
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
 800205c:	4b39      	ldr	r3, [pc, #228]	; (8002144 <Create_Nodes+0xce4>)
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
 8002064:	4b37      	ldr	r3, [pc, #220]	; (8002144 <Create_Nodes+0xce4>)
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
	VALUE(N('X').distance,371,0,0,189);
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <Create_Nodes+0xce4>)
 800206e:	f240 1273 	movw	r2, #371	; 0x173
 8002072:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
 8002076:	4b33      	ldr	r3, [pc, #204]	; (8002144 <Create_Nodes+0xce4>)
 8002078:	2200      	movs	r2, #0
 800207a:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
 800207e:	4b31      	ldr	r3, [pc, #196]	; (8002144 <Create_Nodes+0xce4>)
 8002080:	2200      	movs	r2, #0
 8002082:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
 8002086:	4b2f      	ldr	r3, [pc, #188]	; (8002144 <Create_Nodes+0xce4>)
 8002088:	22bd      	movs	r2, #189	; 0xbd
 800208a:	f8a3 229e 	strh.w	r2, [r3, #670]	; 0x29e

	//Y node
	/**/N('Y').worth=0;
 800208e:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <Create_Nodes+0xce4>)
 8002090:	2200      	movs	r2, #0
 8002092:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	N('Y').type=1;
 8002096:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <Create_Nodes+0xce4>)
 8002098:	2201      	movs	r2, #1
 800209a:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	VALUE(N('Y').neighbours,'W',0,0,0);
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <Create_Nodes+0xce4>)
 80020a0:	2257      	movs	r2, #87	; 0x57
 80020a2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
 80020a6:	4b27      	ldr	r3, [pc, #156]	; (8002144 <Create_Nodes+0xce4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
 80020ae:	4b25      	ldr	r3, [pc, #148]	; (8002144 <Create_Nodes+0xce4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <Create_Nodes+0xce4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 22af 	strb.w	r2, [r3, #687]	; 0x2af
	VALUE(N('Y').directions,1,0,0,0);
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <Create_Nodes+0xce4>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <Create_Nodes+0xce4>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <Create_Nodes+0xce4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
 80020d6:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <Create_Nodes+0xce4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
	VALUE(N('Y').distance,351,0,0,0);
 80020de:	4b19      	ldr	r3, [pc, #100]	; (8002144 <Create_Nodes+0xce4>)
 80020e0:	f240 125f 	movw	r2, #351	; 0x15f
 80020e4:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <Create_Nodes+0xce4>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8a3 22b6 	strh.w	r2, [r3, #694]	; 0x2b6
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <Create_Nodes+0xce4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	f8a3 22b8 	strh.w	r2, [r3, #696]	; 0x2b8
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <Create_Nodes+0xce4>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	f8a3 22ba 	strh.w	r2, [r3, #698]	; 0x2ba

	//Nodeértékek backup mentésből való visszatöltése
	if(SW2)//ha a kacsapoló2 a megfelelő állapotban van (világít a sárga LED)
 8002100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002104:	4810      	ldr	r0, [pc, #64]	; (8002148 <Create_Nodes+0xce8>)
 8002106:	f005 fc4f 	bl	80079a8 <HAL_GPIO_ReadPin>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d061      	beq.n	80021d4 <Create_Nodes+0xd74>
	{
		uint8_t check_flash = *(__IO uint8_t *) FLASH_ADDRESS_NODEWORTH; //tényleg ottvanak  flashbena megfelelő helyen a worth értékek?
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <Create_Nodes+0xcec>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		if(check_flash==0xff)
 8002118:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800211c:	2bff      	cmp	r3, #255	; 0xff
 800211e:	d122      	bne.n	8002166 <Create_Nodes+0xd06>
		{
			char str[]="Default worths because of FLASH ERROR!\n\r";
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <Create_Nodes+0xcf0>)
 8002122:	f107 040c 	add.w	r4, r7, #12
 8002126:	461d      	mov	r5, r3
 8002128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800212a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800212c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800212e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002130:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002134:	c403      	stmia	r4!, {r0, r1}
 8002136:	7022      	strb	r2, [r4, #0]
			HAL_UART_Transmit(huart_debugg,(uint8_t*) str, strlen(str), 10);
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe f867 	bl	8000210 <strlen>
 8002142:	e007      	b.n	8002154 <Create_Nodes+0xcf4>
 8002144:	2000029c 	.word	0x2000029c
 8002148:	40020400 	.word	0x40020400
 800214c:	08040000 	.word	0x08040000
 8002150:	0800f944 	.word	0x0800f944
 8002154:	4603      	mov	r3, r0
 8002156:	b29a      	uxth	r2, r3
 8002158:	f107 010c 	add.w	r1, r7, #12
 800215c:	230a      	movs	r3, #10
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f008 f98d 	bl	800a47e <HAL_UART_Transmit>
 8002164:	e04b      	b.n	80021fe <Create_Nodes+0xd9e>
			return; //ha nem akkor használjuk a default értékeket
		}
		for(i=0;i<25;i++)
 8002166:	2300      	movs	r3, #0
 8002168:	66fb      	str	r3, [r7, #108]	; 0x6c
 800216a:	e013      	b.n	8002194 <Create_Nodes+0xd34>
		{
			Nodes[i].worth=*(__IO uint8_t *) (FLASH_ADDRESS_NODEWORTH+i); //ha igen akkor töltsük be a backup mentést
 800216c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002172:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	4618      	mov	r0, r3
 800217c:	4921      	ldr	r1, [pc, #132]	; (8002204 <Create_Nodes+0xda4>)
 800217e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	3304      	adds	r3, #4
 800218c:	6018      	str	r0, [r3, #0]
		for(i=0;i<25;i++)
 800218e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002190:	3301      	adds	r3, #1
 8002192:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002196:	2b18      	cmp	r3, #24
 8002198:	dde8      	ble.n	800216c <Create_Nodes+0xd0c>
		}
		collectedPoints=*(__IO uint8_t *) (FLASH_ADDRESS_NODEWORTH+25);
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <Create_Nodes+0xda8>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <Create_Nodes+0xdac>)
 80021a2:	701a      	strb	r2, [r3, #0]
		char str[]="Worths from FLASH backup!\n\r";
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <Create_Nodes+0xdb0>)
 80021a6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80021aa:	461d      	mov	r5, r3
 80021ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit(huart_debugg,(uint8_t*) str, strlen(str), 10);
 80021b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f827 	bl	8000210 <strlen>
 80021c2:	4603      	mov	r3, r0
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80021ca:	230a      	movs	r3, #10
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f008 f956 	bl	800a47e <HAL_UART_Transmit>
 80021d2:	e014      	b.n	80021fe <Create_Nodes+0xd9e>
	}
	else
	{
		char str[]="Default worths!\n\r";
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <Create_Nodes+0xdb4>)
 80021d6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80021da:	461d      	mov	r5, r3
 80021dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e0:	682b      	ldr	r3, [r5, #0]
 80021e2:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(huart_debugg,(uint8_t*) str, strlen(str), 10);
 80021e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f811 	bl	8000210 <strlen>
 80021ee:	4603      	mov	r3, r0
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80021f6:	230a      	movs	r3, #10
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f008 f940 	bl	800a47e <HAL_UART_Transmit>
	}

}
 80021fe:	3770      	adds	r7, #112	; 0x70
 8002200:	46bd      	mov	sp, r7
 8002202:	bdb0      	pop	{r4, r5, r7, pc}
 8002204:	2000029c 	.word	0x2000029c
 8002208:	08040019 	.word	0x08040019
 800220c:	20000287 	.word	0x20000287
 8002210:	0800f970 	.word	0x0800f970
 8002214:	0800f98c 	.word	0x0800f98c

08002218 <Control_Task>:


void Control_Task(UART_HandleTypeDef *huart_debugg,uint32_t tick, uint32_t period)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	; 0x28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
	static uint32_t control_task_tick = 0;
	static uint8_t control_task_state=NEIGHBOUR1;//5 db állapot ->5.után megint 1.jön
	//szomszéd1,szomszéd2,szomszéd3,szomszéd4,kiértékelés

	static uint8_t lane_change=0;
	uint8_t nID=0;
 8002224:	2300      	movs	r3, #0
 8002226:	77fb      	strb	r3, [r7, #31]

	if(control_task_tick>tick)return;
 8002228:	4b8b      	ldr	r3, [pc, #556]	; (8002458 <Control_Task+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	f0c0 8364 	bcc.w	80028fc <Control_Task+0x6e4>
	control_task_tick=tick+period;
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a87      	ldr	r2, [pc, #540]	; (8002458 <Control_Task+0x240>)
 800223c:	6013      	str	r3, [r2, #0]
	if(mode!=SKILL)return;
 800223e:	4b87      	ldr	r3, [pc, #540]	; (800245c <Control_Task+0x244>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b52      	cmp	r3, #82	; 0x52
 8002244:	f040 835c 	bne.w	8002900 <Control_Task+0x6e8>
	//if(!readytorace)return;

	//ha kapu nélküli nodeba tartunk éppen, akkor időzítéssel "detektáljuk" a nodot
	if(N(pos[MY]).type>2)
 8002248:	4b85      	ldr	r3, [pc, #532]	; (8002460 <Control_Task+0x248>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002250:	4984      	ldr	r1, [pc, #528]	; (8002464 <Control_Task+0x24c>)
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	3308      	adds	r3, #8
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d934      	bls.n	80022ce <Control_Task+0xb6>
	{
		s += (float)(tick-tick_prev)*abs((int)v)/10000;
 8002264:	4b80      	ldr	r3, [pc, #512]	; (8002468 <Control_Task+0x250>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002274:	4b7d      	ldr	r3, [pc, #500]	; (800246c <Control_Task+0x254>)
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800227e:	ee17 3a90 	vmov	r3, s15
 8002282:	2b00      	cmp	r3, #0
 8002284:	bfb8      	it	lt
 8002286:	425b      	neglt	r3, r3
 8002288:	ee07 3a90 	vmov	s15, r3
 800228c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002294:	eddf 6a76 	vldr	s13, [pc, #472]	; 8002470 <Control_Task+0x258>
 8002298:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800229c:	4b75      	ldr	r3, [pc, #468]	; (8002474 <Control_Task+0x25c>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a6:	4b73      	ldr	r3, [pc, #460]	; (8002474 <Control_Task+0x25c>)
 80022a8:	edc3 7a00 	vstr	s15, [r3]
		if(s>sMAX)nodeDetected=1;
 80022ac:	4b72      	ldr	r3, [pc, #456]	; (8002478 <Control_Task+0x260>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	ee07 3a90 	vmov	s15, r3
 80022b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022b8:	4b6e      	ldr	r3, [pc, #440]	; (8002474 <Control_Task+0x25c>)
 80022ba:	edd3 7a00 	vldr	s15, [r3]
 80022be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c6:	d502      	bpl.n	80022ce <Control_Task+0xb6>
 80022c8:	4b6c      	ldr	r3, [pc, #432]	; (800247c <Control_Task+0x264>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]

	}
	tick_prev=tick;//mostantól mérjük az időt
 80022ce:	4a66      	ldr	r2, [pc, #408]	; (8002468 <Control_Task+0x250>)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	6013      	str	r3, [r2, #0]

	//ha odaértünk a myPositionbe, akkor indulhat a mozgás a nextPosition felé
	if(nodeDetected)
 80022d4:	4b69      	ldr	r3, [pc, #420]	; (800247c <Control_Task+0x264>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8095 	beq.w	8002408 <Control_Task+0x1f0>
	{
		LED_B_TOGGLE;
 80022de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022e2:	4867      	ldr	r0, [pc, #412]	; (8002480 <Control_Task+0x268>)
 80022e4:	f005 fb91 	bl	8007a0a <HAL_GPIO_TogglePin>
		if(N(pos[NEXT]).type>2)//ha a kövi node-on nincs kapu
 80022e8:	4b5d      	ldr	r3, [pc, #372]	; (8002460 <Control_Task+0x248>)
 80022ea:	785b      	ldrb	r3, [r3, #1]
 80022ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80022f0:	495c      	ldr	r1, [pc, #368]	; (8002464 <Control_Task+0x24c>)
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	3308      	adds	r3, #8
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d918      	bls.n	8002336 <Control_Task+0x11e>
		{
			s=0;
 8002304:	4b5b      	ldr	r3, [pc, #364]	; (8002474 <Control_Task+0x25c>)
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
			sMAX=N(pos[MY]).distance[bestNb[NEXT]]+25;
 800230c:	4b54      	ldr	r3, [pc, #336]	; (8002460 <Control_Task+0x248>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002314:	4b5b      	ldr	r3, [pc, #364]	; (8002484 <Control_Task+0x26c>)
 8002316:	785b      	ldrb	r3, [r3, #1]
 8002318:	4618      	mov	r0, r3
 800231a:	4952      	ldr	r1, [pc, #328]	; (8002464 <Control_Task+0x24c>)
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4403      	add	r3, r0
 8002326:	3308      	adds	r3, #8
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	440b      	add	r3, r1
 800232c:	889b      	ldrh	r3, [r3, #4]
 800232e:	3319      	adds	r3, #25
 8002330:	461a      	mov	r2, r3
 8002332:	4b51      	ldr	r3, [pc, #324]	; (8002478 <Control_Task+0x260>)
 8002334:	601a      	str	r2, [r3, #0]
		}

		//pontok nyugtázása
		if(!lane_change)//ha nem sávváltó üzemmódban vagyunk pontotszámolunk és felszedett kapukat nullázzuk
 8002336:	4b54      	ldr	r3, [pc, #336]	; (8002488 <Control_Task+0x270>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11f      	bne.n	800237e <Control_Task+0x166>
		{
			collectedPoints +=N(pos[MY]).worth;//sávváltás módik vizsgáljuk az össezgyűjtött kapuk számát
 800233e:	4b48      	ldr	r3, [pc, #288]	; (8002460 <Control_Task+0x248>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002346:	4947      	ldr	r1, [pc, #284]	; (8002464 <Control_Task+0x24c>)
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	3304      	adds	r3, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	4b4c      	ldr	r3, [pc, #304]	; (800248c <Control_Task+0x274>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4413      	add	r3, r2
 800235e:	b2da      	uxtb	r2, r3
 8002360:	4b4a      	ldr	r3, [pc, #296]	; (800248c <Control_Task+0x274>)
 8002362:	701a      	strb	r2, [r3, #0]
			N(pos[MY]).worth=0;//ez a kapu már nem ér pontot
 8002364:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <Control_Task+0x248>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800236c:	493d      	ldr	r1, [pc, #244]	; (8002464 <Control_Task+0x24c>)
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	3304      	adds	r3, #4
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
		}

		if(collectedPoints >= 20 && !lane_change) //átváltás lane change módba
 800237e:	4b43      	ldr	r3, [pc, #268]	; (800248c <Control_Task+0x274>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b13      	cmp	r3, #19
 8002384:	d90e      	bls.n	80023a4 <Control_Task+0x18c>
 8002386:	4b40      	ldr	r3, [pc, #256]	; (8002488 <Control_Task+0x270>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10a      	bne.n	80023a4 <Control_Task+0x18c>
		{
			lane_change=1; //flag állítás
 800238e:	4b3e      	ldr	r3, [pc, #248]	; (8002488 <Control_Task+0x270>)
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
			Lane_Change_Init(); //a sávváltóhely felé nőnek a rewardok
 8002394:	f000 fc80 	bl	8002c98 <Lane_Change_Init>
			LED_Y(1); //sárga led világít
 8002398:	2200      	movs	r2, #0
 800239a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800239e:	4838      	ldr	r0, [pc, #224]	; (8002480 <Control_Task+0x268>)
 80023a0:	f005 fb1a 	bl	80079d8 <HAL_GPIO_WritePin>
		}

		char str[12]; //kiiratás
		sprintf(str,"d,d,%d\n\r",(int)collectedPoints);
 80023a4:	4b39      	ldr	r3, [pc, #228]	; (800248c <Control_Task+0x274>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	f107 0310 	add.w	r3, r7, #16
 80023ae:	4938      	ldr	r1, [pc, #224]	; (8002490 <Control_Task+0x278>)
 80023b0:	4618      	mov	r0, r3
 80023b2:	f009 fdcd 	bl	800bf50 <siprintf>
		str[0]=pos[MY];
 80023b6:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <Control_Task+0x248>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	743b      	strb	r3, [r7, #16]
		str[2]=pos[NEXT];
 80023bc:	4b28      	ldr	r3, [pc, #160]	; (8002460 <Control_Task+0x248>)
 80023be:	785b      	ldrb	r3, [r3, #1]
 80023c0:	74bb      	strb	r3, [r7, #18]
		HAL_UART_Transmit(huart_debugg, (uint8_t*)str, strlen(str), 3);
 80023c2:	f107 0310 	add.w	r3, r7, #16
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fd ff22 	bl	8000210 <strlen>
 80023cc:	4603      	mov	r3, r0
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	f107 0110 	add.w	r1, r7, #16
 80023d4:	2303      	movs	r3, #3
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f008 f851 	bl	800a47e <HAL_UART_Transmit>

		pos[MY]=pos[NEXT];
 80023dc:	4b20      	ldr	r3, [pc, #128]	; (8002460 <Control_Task+0x248>)
 80023de:	785a      	ldrb	r2, [r3, #1]
 80023e0:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <Control_Task+0x248>)
 80023e2:	701a      	strb	r2, [r3, #0]
		path=nextPath;
 80023e4:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <Control_Task+0x27c>)
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <Control_Task+0x280>)
 80023ea:	701a      	strb	r2, [r3, #0]
		dir[MY]=dir[NEXT];
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <Control_Task+0x284>)
 80023ee:	785a      	ldrb	r2, [r3, #1]
 80023f0:	4b2a      	ldr	r3, [pc, #168]	; (800249c <Control_Task+0x284>)
 80023f2:	701a      	strb	r2, [r3, #0]
		orientation=nextOri;//FORWARD
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <Control_Task+0x288>)
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <Control_Task+0x28c>)
 80023fa:	701a      	strb	r2, [r3, #0]


		control_task_state=NEIGHBOUR1;
 80023fc:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <Control_Task+0x290>)
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
		nodeDetected=0;
 8002402:	4b1e      	ldr	r3, [pc, #120]	; (800247c <Control_Task+0x264>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
	}

	if(thunderboardFlag)//ha új kalózpozíció jött a TB-től ujrakezdjük a számolást (első szomszéd vizsgálata jön)
 8002408:	4b28      	ldr	r3, [pc, #160]	; (80024ac <Control_Task+0x294>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d075      	beq.n	80024fe <Control_Task+0x2e6>
	{
		if(piratePos_prev[1]!=piratePos[1])//a kalóz átment egy Node-on
 8002412:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <Control_Task+0x298>)
 8002414:	785a      	ldrb	r2, [r3, #1]
 8002416:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <Control_Task+0x29c>)
 8002418:	785b      	ldrb	r3, [r3, #1]
 800241a:	429a      	cmp	r2, r3
 800241c:	d059      	beq.n	80024d2 <Control_Task+0x2ba>
		{
			if(N(piratePos[0]).worth==2)N(piratePos[0]).worth=1; //az a node már kevesebbet ér
 800241e:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <Control_Task+0x29c>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002426:	490f      	ldr	r1, [pc, #60]	; (8002464 <Control_Task+0x24c>)
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3304      	adds	r3, #4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d13e      	bne.n	80024b8 <Control_Task+0x2a0>
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <Control_Task+0x29c>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002442:	4908      	ldr	r1, [pc, #32]	; (8002464 <Control_Task+0x24c>)
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	3304      	adds	r3, #4
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e03d      	b.n	80024d2 <Control_Task+0x2ba>
 8002456:	bf00      	nop
 8002458:	20000558 	.word	0x20000558
 800245c:	2000027a 	.word	0x2000027a
 8002460:	20000000 	.word	0x20000000
 8002464:	2000029c 	.word	0x2000029c
 8002468:	2000055c 	.word	0x2000055c
 800246c:	20000580 	.word	0x20000580
 8002470:	461c4000 	.word	0x461c4000
 8002474:	20000560 	.word	0x20000560
 8002478:	20000004 	.word	0x20000004
 800247c:	20000285 	.word	0x20000285
 8002480:	40020400 	.word	0x40020400
 8002484:	20000564 	.word	0x20000564
 8002488:	20000566 	.word	0x20000566
 800248c:	20000287 	.word	0x20000287
 8002490:	0800f9a0 	.word	0x0800f9a0
 8002494:	20000567 	.word	0x20000567
 8002498:	20000286 	.word	0x20000286
 800249c:	20000008 	.word	0x20000008
 80024a0:	20000568 	.word	0x20000568
 80024a4:	20000284 	.word	0x20000284
 80024a8:	20000569 	.word	0x20000569
 80024ac:	20000288 	.word	0x20000288
 80024b0:	2000000c 	.word	0x2000000c
 80024b4:	20000294 	.word	0x20000294
			else N(piratePos[0]).worth=0;
 80024b8:	4ba7      	ldr	r3, [pc, #668]	; (8002758 <Control_Task+0x540>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80024c0:	49a6      	ldr	r1, [pc, #664]	; (800275c <Control_Task+0x544>)
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	3304      	adds	r3, #4
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
		}
		control_task_state=NEIGHBOUR1;//kezdjük előrröl a fitneszérték számítást az 1. szomszédtól
 80024d2:	4ba3      	ldr	r3, [pc, #652]	; (8002760 <Control_Task+0x548>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]

		piratePos_prev[0]=piratePos[0];//előző kalozpozíció frissítése
 80024d8:	4b9f      	ldr	r3, [pc, #636]	; (8002758 <Control_Task+0x540>)
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	4ba1      	ldr	r3, [pc, #644]	; (8002764 <Control_Task+0x54c>)
 80024de:	701a      	strb	r2, [r3, #0]
		piratePos_prev[1]=piratePos[1];
 80024e0:	4b9d      	ldr	r3, [pc, #628]	; (8002758 <Control_Task+0x540>)
 80024e2:	785a      	ldrb	r2, [r3, #1]
 80024e4:	4b9f      	ldr	r3, [pc, #636]	; (8002764 <Control_Task+0x54c>)
 80024e6:	705a      	strb	r2, [r3, #1]
		piratePos_prev[2]=piratePos[2];
 80024e8:	4b9b      	ldr	r3, [pc, #620]	; (8002758 <Control_Task+0x540>)
 80024ea:	789a      	ldrb	r2, [r3, #2]
 80024ec:	4b9d      	ldr	r3, [pc, #628]	; (8002764 <Control_Task+0x54c>)
 80024ee:	709a      	strb	r2, [r3, #2]
		piratePos_prev[3]=piratePos[3];
 80024f0:	4b99      	ldr	r3, [pc, #612]	; (8002758 <Control_Task+0x540>)
 80024f2:	78da      	ldrb	r2, [r3, #3]
 80024f4:	4b9b      	ldr	r3, [pc, #620]	; (8002764 <Control_Task+0x54c>)
 80024f6:	70da      	strb	r2, [r3, #3]

		thunderboardFlag=0; //várjuk az újabb kalózrobot pozíciókat a thunderboardtól
 80024f8:	4b9b      	ldr	r3, [pc, #620]	; (8002768 <Control_Task+0x550>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]

	}
	if(control_task_state>EVALUATE)return;//ha már kiértékelés is megvolt akkor nincs mit számolni
 80024fe:	4b98      	ldr	r3, [pc, #608]	; (8002760 <Control_Task+0x548>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b04      	cmp	r3, #4
 8002504:	f200 81fe 	bhi.w	8002904 <Control_Task+0x6ec>
	str[15]=control_task_state+0x30;
	HAL_UART_Transmit(huart_debugg, (uint8_t*)str, strlen(str), 2);
#endif

	/******************LEGJOBB SZOMSZÉD KIVÁLASZTÁSA (első 4 állapot)******************/
	if(control_task_state <= NEIGHBOUR4)//1.szomszéd/2.szomszéd/3.szomszéd/4.szomszéd
 8002508:	4b95      	ldr	r3, [pc, #596]	; (8002760 <Control_Task+0x548>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b03      	cmp	r3, #3
 800250e:	f200 8164 	bhi.w	80027da <Control_Task+0x5c2>
	{
		if(control_task_state==NEIGHBOUR1)
 8002512:	4b93      	ldr	r3, [pc, #588]	; (8002760 <Control_Task+0x548>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <Control_Task+0x308>
		{
			bestFitness=-100;//az előző számolás legjob fitneszértéke volt még benne
 800251a:	4b94      	ldr	r3, [pc, #592]	; (800276c <Control_Task+0x554>)
 800251c:	4a94      	ldr	r2, [pc, #592]	; (8002770 <Control_Task+0x558>)
 800251e:	601a      	str	r2, [r3, #0]
		}
		nID=N(pos[MY]).neighbours[control_task_state]; //a vizsgált 1.rendű szomszéd azonosítója
 8002520:	4b94      	ldr	r3, [pc, #592]	; (8002774 <Control_Task+0x55c>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002528:	4b8d      	ldr	r3, [pc, #564]	; (8002760 <Control_Task+0x548>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	498b      	ldr	r1, [pc, #556]	; (800275c <Control_Task+0x544>)
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	4403      	add	r3, r0
 800253c:	330c      	adds	r3, #12
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	77fb      	strb	r3, [r7, #31]
		if(nID) //ha létezik a szomszéd
 8002542:	7ffb      	ldrb	r3, [r7, #31]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 811f 	beq.w	8002788 <Control_Task+0x570>
		{
			fitness[control_task_state]=(float)N(nID).worth; //fitneszérték 1.rendű szomszéd alapján
 800254a:	7ffb      	ldrb	r3, [r7, #31]
 800254c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002550:	4982      	ldr	r1, [pc, #520]	; (800275c <Control_Task+0x544>)
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3304      	adds	r3, #4
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b7f      	ldr	r3, [pc, #508]	; (8002760 <Control_Task+0x548>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	ee07 2a90 	vmov	s15, r2
 8002568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800256c:	4a82      	ldr	r2, [pc, #520]	; (8002778 <Control_Task+0x560>)
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	edc3 7a00 	vstr	s15, [r3]
			//kalozrobot hatása az 1.rendű szomszéd esetén
			if(piratePos[1]==nID) fitness[control_task_state] -= 100/*P*/;//ha a kalóz is ebbe az 1.rendű tart éppen akkor kerüljük el az ütközést
 8002576:	4b78      	ldr	r3, [pc, #480]	; (8002758 <Control_Task+0x540>)
 8002578:	785b      	ldrb	r3, [r3, #1]
 800257a:	7ffa      	ldrb	r2, [r7, #31]
 800257c:	429a      	cmp	r2, r3
 800257e:	d112      	bne.n	80025a6 <Control_Task+0x38e>
 8002580:	4b77      	ldr	r3, [pc, #476]	; (8002760 <Control_Task+0x548>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4a7c      	ldr	r2, [pc, #496]	; (8002778 <Control_Task+0x560>)
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	edd3 7a00 	vldr	s15, [r3]
 800258e:	4b74      	ldr	r3, [pc, #464]	; (8002760 <Control_Task+0x548>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800277c <Control_Task+0x564>
 8002596:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800259a:	4a77      	ldr	r2, [pc, #476]	; (8002778 <Control_Task+0x560>)
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	edc3 7a00 	vstr	s15, [r3]
 80025a4:	e016      	b.n	80025d4 <Control_Task+0x3bc>
			else if(piratePos[2]==nID) fitness[control_task_state] += 2/*P*/;//ha még csak tervezi, hogy odamegy, akkor halásszuk el előle a pontot
 80025a6:	4b6c      	ldr	r3, [pc, #432]	; (8002758 <Control_Task+0x540>)
 80025a8:	789b      	ldrb	r3, [r3, #2]
 80025aa:	7ffa      	ldrb	r2, [r7, #31]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d111      	bne.n	80025d4 <Control_Task+0x3bc>
 80025b0:	4b6b      	ldr	r3, [pc, #428]	; (8002760 <Control_Task+0x548>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	4a70      	ldr	r2, [pc, #448]	; (8002778 <Control_Task+0x560>)
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	4b68      	ldr	r3, [pc, #416]	; (8002760 <Control_Task+0x548>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80025c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025ca:	4a6b      	ldr	r2, [pc, #428]	; (8002778 <Control_Task+0x560>)
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	edc3 7a00 	vstr	s15, [r3]
			int i;
			uint8_t nnID;
			float nnFit=0;
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	623b      	str	r3, [r7, #32]
			for(i=0;i<4;i++)//2.rednű szomszédok
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
 80025de:	e088      	b.n	80026f2 <Control_Task+0x4da>
			{
				nnID=N(nID).neighbours[i]; //2.rednű szomszéd ID-ja
 80025e0:	7ffb      	ldrb	r3, [r7, #31]
 80025e2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80025e6:	495d      	ldr	r1, [pc, #372]	; (800275c <Control_Task+0x544>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	18ca      	adds	r2, r1, r3
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	4413      	add	r3, r2
 80025f6:	330c      	adds	r3, #12
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	77bb      	strb	r3, [r7, #30]
				if(nnID && nnID!=pos[MY])//ha létezik a 2.rendű szomszéd
 80025fc:	7fbb      	ldrb	r3, [r7, #30]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d05e      	beq.n	80026c0 <Control_Task+0x4a8>
 8002602:	4b5c      	ldr	r3, [pc, #368]	; (8002774 <Control_Task+0x55c>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	7fba      	ldrb	r2, [r7, #30]
 8002608:	429a      	cmp	r2, r3
 800260a:	d059      	beq.n	80026c0 <Control_Task+0x4a8>
				{
					nnFit+=(float)N(nnID).worth;
 800260c:	7fbb      	ldrb	r3, [r7, #30]
 800260e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002612:	4952      	ldr	r1, [pc, #328]	; (800275c <Control_Task+0x544>)
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	3304      	adds	r3, #4
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800262a:	ed97 7a08 	vldr	s14, [r7, #32]
 800262e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002632:	edc7 7a08 	vstr	s15, [r7, #32]
					if(piratePos[1]==nnID) nnFit -= 3/*P*/;//ha a kalóz is ebbe a pontba tart éppen akkor kerüljük el az ütközést
 8002636:	4b48      	ldr	r3, [pc, #288]	; (8002758 <Control_Task+0x540>)
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	7fba      	ldrb	r2, [r7, #30]
 800263c:	429a      	cmp	r2, r3
 800263e:	d108      	bne.n	8002652 <Control_Task+0x43a>
 8002640:	edd7 7a08 	vldr	s15, [r7, #32]
 8002644:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002648:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800264c:	edc7 7a08 	vstr	s15, [r7, #32]
 8002650:	e016      	b.n	8002680 <Control_Task+0x468>
					else if(piratePos[2]==nnID) fitness[control_task_state] -= 1/*P*/;//ha még csak tervezi, hogy odamegy, akkor se fogjuk tudni megelőnzi, mert mi 3 nodnyira vagyunk ő pedig csak 2
 8002652:	4b41      	ldr	r3, [pc, #260]	; (8002758 <Control_Task+0x540>)
 8002654:	789b      	ldrb	r3, [r3, #2]
 8002656:	7fba      	ldrb	r2, [r7, #30]
 8002658:	429a      	cmp	r2, r3
 800265a:	d111      	bne.n	8002680 <Control_Task+0x468>
 800265c:	4b40      	ldr	r3, [pc, #256]	; (8002760 <Control_Task+0x548>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	4a45      	ldr	r2, [pc, #276]	; (8002778 <Control_Task+0x560>)
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	edd3 7a00 	vldr	s15, [r3]
 800266a:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <Control_Task+0x548>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002672:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002676:	4a40      	ldr	r2, [pc, #256]	; (8002778 <Control_Task+0x560>)
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	edc3 7a00 	vstr	s15, [r3]
					if(!lane_change)nnFit *= (float) DIST_AVG/N(nID).distance[i];//a 2.rendű szomszédhoz tartozó fitneszérték jobb ha az közelebb van az 1.rendű szomszédjához
 8002680:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <Control_Task+0x568>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11b      	bne.n	80026c0 <Control_Task+0x4a8>
 8002688:	7ffb      	ldrb	r3, [r7, #31]
 800268a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800268e:	4933      	ldr	r1, [pc, #204]	; (800275c <Control_Task+0x544>)
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269a:	4413      	add	r3, r2
 800269c:	3308      	adds	r3, #8
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	440b      	add	r3, r1
 80026a2:	889b      	ldrh	r3, [r3, #4]
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ac:	eddf 6a35 	vldr	s13, [pc, #212]	; 8002784 <Control_Task+0x56c>
 80026b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80026b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026bc:	edc7 7a08 	vstr	s15, [r7, #32]
					//ha a sávváltó szakaszt keressük akkor viszont nem díjazzuk a közelséget
				}
				fitness[control_task_state] += nnFit/5/*P*/;
 80026c0:	4b27      	ldr	r3, [pc, #156]	; (8002760 <Control_Task+0x548>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4a2c      	ldr	r2, [pc, #176]	; (8002778 <Control_Task+0x560>)
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	ed93 7a00 	vldr	s14, [r3]
 80026ce:	edd7 6a08 	vldr	s13, [r7, #32]
 80026d2:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80026d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80026da:	4b21      	ldr	r3, [pc, #132]	; (8002760 <Control_Task+0x548>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026e2:	4a25      	ldr	r2, [pc, #148]	; (8002778 <Control_Task+0x560>)
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	edc3 7a00 	vstr	s15, [r3]
			for(i=0;i<4;i++)//2.rednű szomszédok
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	3301      	adds	r3, #1
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	f77f af73 	ble.w	80025e0 <Control_Task+0x3c8>
			}
			if(!lane_change) fitness[control_task_state] *= DIST_AVG/N(pos[MY]).distance[control_task_state]; //minél közelebb van a szomszéd annál jobb
 80026fa:	4b21      	ldr	r3, [pc, #132]	; (8002780 <Control_Task+0x568>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d149      	bne.n	8002796 <Control_Task+0x57e>
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <Control_Task+0x548>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <Control_Task+0x560>)
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	ed93 7a00 	vldr	s14, [r3]
 8002710:	4b18      	ldr	r3, [pc, #96]	; (8002774 <Control_Task+0x55c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <Control_Task+0x548>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	490f      	ldr	r1, [pc, #60]	; (800275c <Control_Task+0x544>)
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4403      	add	r3, r0
 800272a:	3308      	adds	r3, #8
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	440b      	add	r3, r1
 8002730:	889b      	ldrh	r3, [r3, #4]
 8002732:	461a      	mov	r2, r3
 8002734:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002738:	fb93 f3f2 	sdiv	r3, r3, r2
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <Control_Task+0x548>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <Control_Task+0x560>)
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	edc3 7a00 	vstr	s15, [r3]
 8002756:	e01e      	b.n	8002796 <Control_Task+0x57e>
 8002758:	20000294 	.word	0x20000294
 800275c:	2000029c 	.word	0x2000029c
 8002760:	20000569 	.word	0x20000569
 8002764:	2000000c 	.word	0x2000000c
 8002768:	20000288 	.word	0x20000288
 800276c:	20000010 	.word	0x20000010
 8002770:	c2c80000 	.word	0xc2c80000
 8002774:	20000000 	.word	0x20000000
 8002778:	2000056c 	.word	0x2000056c
 800277c:	42c80000 	.word	0x42c80000
 8002780:	20000566 	.word	0x20000566
 8002784:	43960000 	.word	0x43960000
			//ha a sávváltó szakaszt keressük akkor viszont nem díjazzuk a közelséget

		}
		else fitness[control_task_state]=-100.0;//ha nem létezik a szomszéd erre tuti ne menjünk
 8002788:	4b60      	ldr	r3, [pc, #384]	; (800290c <Control_Task+0x6f4>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	4a60      	ldr	r2, [pc, #384]	; (8002910 <Control_Task+0x6f8>)
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	4a60      	ldr	r2, [pc, #384]	; (8002914 <Control_Task+0x6fc>)
 8002794:	601a      	str	r2, [r3, #0]


		if(fitness[control_task_state]>=bestFitness)//ha ez a fitness jobb mint az eddigi legjobb, akkor mostantól ez a legjobb
 8002796:	4b5d      	ldr	r3, [pc, #372]	; (800290c <Control_Task+0x6f4>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	4a5d      	ldr	r2, [pc, #372]	; (8002910 <Control_Task+0x6f8>)
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	ed93 7a00 	vldr	s14, [r3]
 80027a4:	4b5c      	ldr	r3, [pc, #368]	; (8002918 <Control_Task+0x700>)
 80027a6:	edd3 7a00 	vldr	s15, [r3]
 80027aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b2:	db0b      	blt.n	80027cc <Control_Task+0x5b4>
		{
			bestFitness=fitness[control_task_state];
 80027b4:	4b55      	ldr	r3, [pc, #340]	; (800290c <Control_Task+0x6f4>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4a55      	ldr	r2, [pc, #340]	; (8002910 <Control_Task+0x6f8>)
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a55      	ldr	r2, [pc, #340]	; (8002918 <Control_Task+0x700>)
 80027c2:	6013      	str	r3, [r2, #0]
			bestNb[TMP] = control_task_state;//ez az egy érték amivel a task első 4 (fitnesszámoló) álapota kommunikál a kiértékelő álapottal
 80027c4:	4b51      	ldr	r3, [pc, #324]	; (800290c <Control_Task+0x6f4>)
 80027c6:	781a      	ldrb	r2, [r3, #0]
 80027c8:	4b54      	ldr	r3, [pc, #336]	; (800291c <Control_Task+0x704>)
 80027ca:	701a      	strb	r2, [r3, #0]
		}
		control_task_state++;
 80027cc:	4b4f      	ldr	r3, [pc, #316]	; (800290c <Control_Task+0x6f4>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b4d      	ldr	r3, [pc, #308]	; (800290c <Control_Task+0x6f4>)
 80027d6:	701a      	strb	r2, [r3, #0]
		return; //ha csak valamelyik szomszédot vizsgáltuk még akkor eddig tartott ez a task fuitás, itt kilépünk
 80027d8:	e095      	b.n	8002906 <Control_Task+0x6ee>
	}
	/**************************************************************************************/
	//ide csak akkor jutunk el ha control_task_state>NEIGHBOUR4

	/**********************KIÉRTÉKELÉS (control_task_state=EVALUATE ->5.állapot)**********************/
	bestNb[NEXT]=bestNb[TMP];
 80027da:	4b50      	ldr	r3, [pc, #320]	; (800291c <Control_Task+0x704>)
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	4b4f      	ldr	r3, [pc, #316]	; (800291c <Control_Task+0x704>)
 80027e0:	705a      	strb	r2, [r3, #1]
	pos[NEXT]=N(pos[MY]).neighbours[bestNb[NEXT]];//a következő poziciónk a legjobb szomszéd lesz
 80027e2:	4b4f      	ldr	r3, [pc, #316]	; (8002920 <Control_Task+0x708>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80027ea:	4b4c      	ldr	r3, [pc, #304]	; (800291c <Control_Task+0x704>)
 80027ec:	785b      	ldrb	r3, [r3, #1]
 80027ee:	4618      	mov	r0, r3
 80027f0:	494c      	ldr	r1, [pc, #304]	; (8002924 <Control_Task+0x70c>)
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	4403      	add	r3, r0
 80027fe:	330c      	adds	r3, #12
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	4b47      	ldr	r3, [pc, #284]	; (8002920 <Control_Task+0x708>)
 8002804:	705a      	strb	r2, [r3, #1]
	dir[NEXT]=N(pos[MY]).directions[bestNb[NEXT]];//már most tudjuk, mi lesz az irányunk, ha odaértünk
 8002806:	4b46      	ldr	r3, [pc, #280]	; (8002920 <Control_Task+0x708>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800280e:	4b43      	ldr	r3, [pc, #268]	; (800291c <Control_Task+0x704>)
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	4618      	mov	r0, r3
 8002814:	4943      	ldr	r1, [pc, #268]	; (8002924 <Control_Task+0x70c>)
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	4403      	add	r3, r0
 8002822:	3310      	adds	r3, #16
 8002824:	781a      	ldrb	r2, [r3, #0]
 8002826:	4b40      	ldr	r3, [pc, #256]	; (8002928 <Control_Task+0x710>)
 8002828:	705a      	strb	r2, [r3, #1]

	//a kocsi az egyik node-ból átmegy egy másikba-> az irányok segítségével meghatározzu az új orientationt
	if(bestNb[NEXT] <= NEIGHBOUR2) //ha balra/le kell majd mennünk a nextPosition -höz
 800282a:	4b3c      	ldr	r3, [pc, #240]	; (800291c <Control_Task+0x704>)
 800282c:	785b      	ldrb	r3, [r3, #1]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d813      	bhi.n	800285a <Control_Task+0x642>
	{
		if(dir[MY]==2)//és eddig jobbra/fel mentünk,
 8002832:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <Control_Task+0x710>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d10a      	bne.n	8002850 <Control_Task+0x638>
			nextOri = !orientation;//akkor most orientációt kell váltanunk
 800283a:	4b3c      	ldr	r3, [pc, #240]	; (800292c <Control_Task+0x714>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	bf0c      	ite	eq
 8002842:	2301      	moveq	r3, #1
 8002844:	2300      	movne	r3, #0
 8002846:	b2db      	uxtb	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	4b39      	ldr	r3, [pc, #228]	; (8002930 <Control_Task+0x718>)
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e017      	b.n	8002880 <Control_Task+0x668>
		else nextOri = orientation; //különben nem kell
 8002850:	4b36      	ldr	r3, [pc, #216]	; (800292c <Control_Task+0x714>)
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	4b36      	ldr	r3, [pc, #216]	; (8002930 <Control_Task+0x718>)
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e012      	b.n	8002880 <Control_Task+0x668>
	}
	else //ha jobbra kell majd mennünk
	{
		if(dir[MY]==1)//és eddig jobbra/fel mentünk,
 800285a:	4b33      	ldr	r3, [pc, #204]	; (8002928 <Control_Task+0x710>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d10a      	bne.n	8002878 <Control_Task+0x660>
			nextOri =! orientation;//akkor most irányt kell váltanunk
 8002862:	4b32      	ldr	r3, [pc, #200]	; (800292c <Control_Task+0x714>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	bf0c      	ite	eq
 800286a:	2301      	moveq	r3, #1
 800286c:	2300      	movne	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	4b2f      	ldr	r3, [pc, #188]	; (8002930 <Control_Task+0x718>)
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e003      	b.n	8002880 <Control_Task+0x668>
		else nextOri = orientation; //különben nem kell
 8002878:	4b2c      	ldr	r3, [pc, #176]	; (800292c <Control_Task+0x714>)
 800287a:	781a      	ldrb	r2, [r3, #0]
 800287c:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <Control_Task+0x718>)
 800287e:	701a      	strb	r2, [r3, #0]
	}

	//path kiválasztás -> az orientációt mostmár tudjuk (tolatás/előre), már csak az ösvény kell kivákasztani, hogy a megfelelő szomszédhoz jussunk
	if(nextOri==FORWARD)
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <Control_Task+0x718>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d117      	bne.n	80028b8 <Control_Task+0x6a0>
	{
		if(bestNb[NEXT]==0 || bestNb[NEXT]==2)nextPath=LEFT;
 8002888:	4b24      	ldr	r3, [pc, #144]	; (800291c <Control_Task+0x704>)
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <Control_Task+0x680>
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <Control_Task+0x704>)
 8002892:	785b      	ldrb	r3, [r3, #1]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d103      	bne.n	80028a0 <Control_Task+0x688>
 8002898:	4b26      	ldr	r3, [pc, #152]	; (8002934 <Control_Task+0x71c>)
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e026      	b.n	80028ee <Control_Task+0x6d6>
		else if(bestNb[NEXT]==1 || bestNb[NEXT]==3)nextPath=RIGHT;
 80028a0:	4b1e      	ldr	r3, [pc, #120]	; (800291c <Control_Task+0x704>)
 80028a2:	785b      	ldrb	r3, [r3, #1]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d003      	beq.n	80028b0 <Control_Task+0x698>
 80028a8:	4b1c      	ldr	r3, [pc, #112]	; (800291c <Control_Task+0x704>)
 80028aa:	785b      	ldrb	r3, [r3, #1]
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d11e      	bne.n	80028ee <Control_Task+0x6d6>
 80028b0:	4b20      	ldr	r3, [pc, #128]	; (8002934 <Control_Task+0x71c>)
 80028b2:	2202      	movs	r2, #2
 80028b4:	701a      	strb	r2, [r3, #0]
 80028b6:	e01a      	b.n	80028ee <Control_Task+0x6d6>
	}
	else if(nextOri==REVERSE) //tolatásnál pont forditva vannak a pathirányok
 80028b8:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <Control_Task+0x718>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d116      	bne.n	80028ee <Control_Task+0x6d6>
	{
		if(bestNb[NEXT]==0 || bestNb[NEXT]==2)nextPath=RIGHT;
 80028c0:	4b16      	ldr	r3, [pc, #88]	; (800291c <Control_Task+0x704>)
 80028c2:	785b      	ldrb	r3, [r3, #1]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <Control_Task+0x6b8>
 80028c8:	4b14      	ldr	r3, [pc, #80]	; (800291c <Control_Task+0x704>)
 80028ca:	785b      	ldrb	r3, [r3, #1]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d103      	bne.n	80028d8 <Control_Task+0x6c0>
 80028d0:	4b18      	ldr	r3, [pc, #96]	; (8002934 <Control_Task+0x71c>)
 80028d2:	2202      	movs	r2, #2
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e00a      	b.n	80028ee <Control_Task+0x6d6>
		else if(bestNb[NEXT]==1 || bestNb[NEXT]==3)nextPath=LEFT;
 80028d8:	4b10      	ldr	r3, [pc, #64]	; (800291c <Control_Task+0x704>)
 80028da:	785b      	ldrb	r3, [r3, #1]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d003      	beq.n	80028e8 <Control_Task+0x6d0>
 80028e0:	4b0e      	ldr	r3, [pc, #56]	; (800291c <Control_Task+0x704>)
 80028e2:	785b      	ldrb	r3, [r3, #1]
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d102      	bne.n	80028ee <Control_Task+0x6d6>
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <Control_Task+0x71c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
	}
	control_task_state++;
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <Control_Task+0x6f4>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	3301      	adds	r3, #1
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <Control_Task+0x6f4>)
 80028f8:	701a      	strb	r2, [r3, #0]
 80028fa:	e004      	b.n	8002906 <Control_Task+0x6ee>
	if(control_task_tick>tick)return;
 80028fc:	bf00      	nop
 80028fe:	e002      	b.n	8002906 <Control_Task+0x6ee>
	if(mode!=SKILL)return;
 8002900:	bf00      	nop
 8002902:	e000      	b.n	8002906 <Control_Task+0x6ee>
	if(control_task_state>EVALUATE)return;//ha már kiértékelés is megvolt akkor nincs mit számolni
 8002904:	bf00      	nop

	/**************************************************************************************/
}
 8002906:	3728      	adds	r7, #40	; 0x28
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000569 	.word	0x20000569
 8002910:	2000056c 	.word	0x2000056c
 8002914:	c2c80000 	.word	0xc2c80000
 8002918:	20000010 	.word	0x20000010
 800291c:	20000564 	.word	0x20000564
 8002920:	20000000 	.word	0x20000000
 8002924:	2000029c 	.word	0x2000029c
 8002928:	20000008 	.word	0x20000008
 800292c:	20000284 	.word	0x20000284
 8002930:	20000568 	.word	0x20000568
 8002934:	20000567 	.word	0x20000567

08002938 <Mode_Selector>:


void Mode_Selector(UART_HandleTypeDef *huart_debugg, UART_HandleTypeDef *huart_stm)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08e      	sub	sp, #56	; 0x38
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
	//Milyen módban kell működni?
	uint8_t buffer[40];
	uint32_t tmp=0;
 8002942:	2300      	movs	r3, #0
 8002944:	637b      	str	r3, [r7, #52]	; 0x34

	//HAL_FLASH_Unlock();
	tmp= *(__IO uint8_t *) FLASH_ADDRESS_MODESELECTOR; //FLASH-ből kiolvassuk, hogy milyen módban vagyunk
 8002946:	4b4e      	ldr	r3, [pc, #312]	; (8002a80 <Mode_Selector+0x148>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	637b      	str	r3, [r7, #52]	; 0x34
	//HAL_FLASH_Lock();
	if(tmp==SKILL || tmp==FAST) mode = (uint8_t)tmp;
 800294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002950:	2b52      	cmp	r3, #82	; 0x52
 8002952:	d002      	beq.n	800295a <Mode_Selector+0x22>
 8002954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002956:	2b3f      	cmp	r3, #63	; 0x3f
 8002958:	d104      	bne.n	8002964 <Mode_Selector+0x2c>
 800295a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <Mode_Selector+0x14c>)
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e002      	b.n	800296a <Mode_Selector+0x32>
	else mode=SKILL;
 8002964:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <Mode_Selector+0x14c>)
 8002966:	2252      	movs	r2, #82	; 0x52
 8002968:	701a      	strb	r2, [r3, #0]

	if(mode==SKILL)
 800296a:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <Mode_Selector+0x14c>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b52      	cmp	r3, #82	; 0x52
 8002970:	d135      	bne.n	80029de <Mode_Selector+0xa6>
	{
		buffer[0] = CMD_MODE_SKILL; //szólunk a g0-nak, hogy ügyességi módban vagyunk
 8002972:	2352      	movs	r3, #82	; 0x52
 8002974:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8002976:	f107 010c 	add.w	r1, r7, #12
 800297a:	230a      	movs	r3, #10
 800297c:	2201      	movs	r2, #1
 800297e:	6838      	ldr	r0, [r7, #0]
 8002980:	f007 fd7d 	bl	800a47e <HAL_UART_Transmit>
		HAL_Delay(10);
 8002984:	200a      	movs	r0, #10
 8002986:	f003 f98d 	bl	8005ca4 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);//3 szór is szólunk neki, hogy tuti megkapja a módváltásról az üzenetet
 800298a:	f107 010c 	add.w	r1, r7, #12
 800298e:	230a      	movs	r3, #10
 8002990:	2201      	movs	r2, #1
 8002992:	6838      	ldr	r0, [r7, #0]
 8002994:	f007 fd73 	bl	800a47e <HAL_UART_Transmit>
		HAL_Delay(10);
 8002998:	200a      	movs	r0, #10
 800299a:	f003 f983 	bl	8005ca4 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 800299e:	f107 010c 	add.w	r1, r7, #12
 80029a2:	230a      	movs	r3, #10
 80029a4:	2201      	movs	r2, #1
 80029a6:	6838      	ldr	r0, [r7, #0]
 80029a8:	f007 fd69 	bl	800a47e <HAL_UART_Transmit>

		sprintf((char*)buffer,"Skill mode!\n\r"); //Debugg uart-ra is kiküldjük, hogy milyen módban vagyunk
 80029ac:	f107 030c 	add.w	r3, r7, #12
 80029b0:	4935      	ldr	r1, [pc, #212]	; (8002a88 <Mode_Selector+0x150>)
 80029b2:	4618      	mov	r0, r3
 80029b4:	f009 facc 	bl	800bf50 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fc27 	bl	8000210 <strlen>
 80029c2:	4603      	mov	r3, r0
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	f107 010c 	add.w	r1, r7, #12
 80029ca:	2364      	movs	r3, #100	; 0x64
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f007 fd56 	bl	800a47e <HAL_UART_Transmit>
		LED_NUCLEO(1); //A NUCLEO zöld LED-je világít, ha ügyeségi üzemmódban vagyunk
 80029d2:	2201      	movs	r2, #1
 80029d4:	2120      	movs	r1, #32
 80029d6:	482d      	ldr	r0, [pc, #180]	; (8002a8c <Mode_Selector+0x154>)
 80029d8:	f004 fffe 	bl	80079d8 <HAL_GPIO_WritePin>
	else
	{
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
	}
}
 80029dc:	e04c      	b.n	8002a78 <Mode_Selector+0x140>
	else if(mode==FAST)
 80029de:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <Mode_Selector+0x14c>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b3f      	cmp	r3, #63	; 0x3f
 80029e4:	d135      	bne.n	8002a52 <Mode_Selector+0x11a>
		buffer[0] = CMD_MODE_FAST;
 80029e6:	233f      	movs	r3, #63	; 0x3f
 80029e8:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80029ea:	f107 010c 	add.w	r1, r7, #12
 80029ee:	230a      	movs	r3, #10
 80029f0:	2201      	movs	r2, #1
 80029f2:	6838      	ldr	r0, [r7, #0]
 80029f4:	f007 fd43 	bl	800a47e <HAL_UART_Transmit>
		HAL_Delay(10);
 80029f8:	200a      	movs	r0, #10
 80029fa:	f003 f953 	bl	8005ca4 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80029fe:	f107 010c 	add.w	r1, r7, #12
 8002a02:	230a      	movs	r3, #10
 8002a04:	2201      	movs	r2, #1
 8002a06:	6838      	ldr	r0, [r7, #0]
 8002a08:	f007 fd39 	bl	800a47e <HAL_UART_Transmit>
		HAL_Delay(10);
 8002a0c:	200a      	movs	r0, #10
 8002a0e:	f003 f949 	bl	8005ca4 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8002a12:	f107 010c 	add.w	r1, r7, #12
 8002a16:	230a      	movs	r3, #10
 8002a18:	2201      	movs	r2, #1
 8002a1a:	6838      	ldr	r0, [r7, #0]
 8002a1c:	f007 fd2f 	bl	800a47e <HAL_UART_Transmit>
		sprintf((char*)buffer,"Fast mode!\n\r");
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	491a      	ldr	r1, [pc, #104]	; (8002a90 <Mode_Selector+0x158>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	f009 fa92 	bl	800bf50 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8002a2c:	f107 030c 	add.w	r3, r7, #12
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fbed 	bl	8000210 <strlen>
 8002a36:	4603      	mov	r3, r0
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	f107 010c 	add.w	r1, r7, #12
 8002a3e:	2364      	movs	r3, #100	; 0x64
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f007 fd1c 	bl	800a47e <HAL_UART_Transmit>
		LED_NUCLEO(0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2120      	movs	r1, #32
 8002a4a:	4810      	ldr	r0, [pc, #64]	; (8002a8c <Mode_Selector+0x154>)
 8002a4c:	f004 ffc4 	bl	80079d8 <HAL_GPIO_WritePin>
}
 8002a50:	e012      	b.n	8002a78 <Mode_Selector+0x140>
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
 8002a52:	f107 030c 	add.w	r3, r7, #12
 8002a56:	490f      	ldr	r1, [pc, #60]	; (8002a94 <Mode_Selector+0x15c>)
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f009 fa79 	bl	800bf50 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8002a5e:	f107 030c 	add.w	r3, r7, #12
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fbd4 	bl	8000210 <strlen>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	f107 010c 	add.w	r1, r7, #12
 8002a70:	2364      	movs	r3, #100	; 0x64
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f007 fd03 	bl	800a47e <HAL_UART_Transmit>
}
 8002a78:	bf00      	nop
 8002a7a:	3738      	adds	r7, #56	; 0x38
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	08060000 	.word	0x08060000
 8002a84:	2000027a 	.word	0x2000027a
 8002a88:	0800f9ac 	.word	0x0800f9ac
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	0800f9bc 	.word	0x0800f9bc
 8002a94:	0800f9cc 	.word	0x0800f9cc

08002a98 <Wait_For_Start_Sigal>:
	HAL_UART_Transmit(huart_monitoring, data, 11, 4);
}


void Wait_For_Start_Sigal(UART_HandleTypeDef *huart_TB, UART_HandleTypeDef *huart_debugg)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
	uint8_t rcv[]={0};
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	733b      	strb	r3, [r7, #12]
	static uint8_t cnt=5;
	if(mode==FAST)return;
 8002aa6:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <Wait_For_Start_Sigal+0xec>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b3f      	cmp	r3, #63	; 0x3f
 8002aac:	d066      	beq.n	8002b7c <Wait_For_Start_Sigal+0xe4>
	while(1)
	{
		if(SW2) //Gombal töerténő indítás
 8002aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ab2:	4835      	ldr	r0, [pc, #212]	; (8002b88 <Wait_For_Start_Sigal+0xf0>)
 8002ab4:	f004 ff78 	bl	80079a8 <HAL_GPIO_ReadPin>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00d      	beq.n	8002ada <Wait_For_Start_Sigal+0x42>
		{
			if(B2)
 8002abe:	2120      	movs	r1, #32
 8002ac0:	4831      	ldr	r0, [pc, #196]	; (8002b88 <Wait_For_Start_Sigal+0xf0>)
 8002ac2:	f004 ff71 	bl	80079a8 <HAL_GPIO_ReadPin>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d033      	beq.n	8002b34 <Wait_For_Start_Sigal+0x9c>
			{
				LED_R(0);//kilaszik a sárga fény pár másodpercre amiíg el nem indul a robot
 8002acc:	2201      	movs	r2, #1
 8002ace:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ad2:	482d      	ldr	r0, [pc, #180]	; (8002b88 <Wait_For_Start_Sigal+0xf0>)
 8002ad4:	f004 ff80 	bl	80079d8 <HAL_GPIO_WritePin>
				break;//ha megnyomtuka 2-es gombot kiugrunk a while ciklusból
 8002ad8:	e038      	b.n	8002b4c <Wait_For_Start_Sigal+0xb4>
			}
		}
		else //Bluetooth-on érkezika  start jel
		{
			HAL_UART_Receive(huart_TB, rcv, 1, HAL_MAX_DELAY);
 8002ada:	f107 010c 	add.w	r1, r7, #12
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f007 fd5c 	bl	800a5a2 <HAL_UART_Receive>
			if(rcv[0]==cnt+0x30)
 8002aea:	7b3b      	ldrb	r3, [r7, #12]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <Wait_For_Start_Sigal+0xf4>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	3330      	adds	r3, #48	; 0x30
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d11a      	bne.n	8002b2e <Wait_For_Start_Sigal+0x96>
			{
				if(cnt<4)
 8002af8:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <Wait_For_Start_Sigal+0xf4>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d80c      	bhi.n	8002b1a <Wait_For_Start_Sigal+0x82>
				{
					HAL_UART_Transmit(huart_debugg, rcv, 1, 2);
 8002b00:	f107 010c 	add.w	r1, r7, #12
 8002b04:	2302      	movs	r3, #2
 8002b06:	2201      	movs	r2, #1
 8002b08:	6838      	ldr	r0, [r7, #0]
 8002b0a:	f007 fcb8 	bl	800a47e <HAL_UART_Transmit>
					HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\r", 2, 2);
 8002b0e:	2302      	movs	r3, #2
 8002b10:	2202      	movs	r2, #2
 8002b12:	491f      	ldr	r1, [pc, #124]	; (8002b90 <Wait_For_Start_Sigal+0xf8>)
 8002b14:	6838      	ldr	r0, [r7, #0]
 8002b16:	f007 fcb2 	bl	800a47e <HAL_UART_Transmit>
				}
				if(rcv[0]=='0')break;
 8002b1a:	7b3b      	ldrb	r3, [r7, #12]
 8002b1c:	2b30      	cmp	r3, #48	; 0x30
 8002b1e:	d012      	beq.n	8002b46 <Wait_For_Start_Sigal+0xae>
				cnt--;
 8002b20:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <Wait_For_Start_Sigal+0xf4>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <Wait_For_Start_Sigal+0xf4>)
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e002      	b.n	8002b34 <Wait_For_Start_Sigal+0x9c>
			}
			else cnt=5;
 8002b2e:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <Wait_For_Start_Sigal+0xf4>)
 8002b30:	2205      	movs	r2, #5
 8002b32:	701a      	strb	r2, [r3, #0]
		}
		if(!B_NUCLEO)break;
 8002b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b38:	4816      	ldr	r0, [pc, #88]	; (8002b94 <Wait_For_Start_Sigal+0xfc>)
 8002b3a:	f004 ff35 	bl	80079a8 <HAL_GPIO_ReadPin>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <Wait_For_Start_Sigal+0xb2>
		if(SW2) //Gombal töerténő indítás
 8002b44:	e7b3      	b.n	8002aae <Wait_For_Start_Sigal+0x16>
				if(rcv[0]=='0')break;
 8002b46:	bf00      	nop
 8002b48:	e000      	b.n	8002b4c <Wait_For_Start_Sigal+0xb4>
		if(!B_NUCLEO)break;
 8002b4a:	bf00      	nop

	}
	if(SW2)	HAL_Delay(2000);
 8002b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b50:	480d      	ldr	r0, [pc, #52]	; (8002b88 <Wait_For_Start_Sigal+0xf0>)
 8002b52:	f004 ff29 	bl	80079a8 <HAL_GPIO_ReadPin>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <Wait_For_Start_Sigal+0xcc>
 8002b5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b60:	f003 f8a0 	bl	8005ca4 <HAL_Delay>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)"START!\n\r",8, 3);
 8002b64:	2303      	movs	r3, #3
 8002b66:	2208      	movs	r2, #8
 8002b68:	490b      	ldr	r1, [pc, #44]	; (8002b98 <Wait_For_Start_Sigal+0x100>)
 8002b6a:	6838      	ldr	r0, [r7, #0]
 8002b6c:	f007 fc87 	bl	800a47e <HAL_UART_Transmit>
	HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 8002b70:	2206      	movs	r2, #6
 8002b72:	490a      	ldr	r1, [pc, #40]	; (8002b9c <Wait_For_Start_Sigal+0x104>)
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f007 fdb6 	bl	800a6e6 <HAL_UART_Receive_IT>
 8002b7a:	e000      	b.n	8002b7e <Wait_For_Start_Sigal+0xe6>
	if(mode==FAST)return;
 8002b7c:	bf00      	nop
}
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	2000027a 	.word	0x2000027a
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	20000014 	.word	0x20000014
 8002b90:	0800f9f0 	.word	0x0800f9f0
 8002b94:	40020800 	.word	0x40020800
 8002b98:	0800f9f4 	.word	0x0800f9f4
 8002b9c:	2000028c 	.word	0x2000028c

08002ba0 <Uart_Receive_Thunderboard_ISR>:
void Uart_Receive_Thunderboard_ISR(UART_HandleTypeDef *huart_TB, UART_HandleTypeDef *huart_debugg)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
	static uint8_t sp[]={0};//slip protection
	static uint8_t cnt=0;
	if(tb_msg[0]>='A' && tb_msg[0]<='Z' && tb_msg[5]>='0' && tb_msg[5]<='9')
 8002baa:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d93d      	bls.n	8002c2e <Uart_Receive_Thunderboard_ISR+0x8e>
 8002bb2:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b5a      	cmp	r3, #90	; 0x5a
 8002bb8:	d839      	bhi.n	8002c2e <Uart_Receive_Thunderboard_ISR+0x8e>
 8002bba:	4b32      	ldr	r3, [pc, #200]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bbc:	795b      	ldrb	r3, [r3, #5]
 8002bbe:	2b2f      	cmp	r3, #47	; 0x2f
 8002bc0:	d935      	bls.n	8002c2e <Uart_Receive_Thunderboard_ISR+0x8e>
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bc4:	795b      	ldrb	r3, [r3, #5]
 8002bc6:	2b39      	cmp	r3, #57	; 0x39
 8002bc8:	d831      	bhi.n	8002c2e <Uart_Receive_Thunderboard_ISR+0x8e>
	{
		piratePos[0]=tb_msg[0];	piratePos[1]=tb_msg[1];	piratePos[2]=tb_msg[2];
 8002bca:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bcc:	781a      	ldrb	r2, [r3, #0]
 8002bce:	4b2e      	ldr	r3, [pc, #184]	; (8002c88 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bd4:	785a      	ldrb	r2, [r3, #1]
 8002bd6:	4b2c      	ldr	r3, [pc, #176]	; (8002c88 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002bd8:	705a      	strb	r2, [r3, #1]
 8002bda:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bdc:	789a      	ldrb	r2, [r3, #2]
 8002bde:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002be0:	709a      	strb	r2, [r3, #2]
		piratePos[3]=100*(tb_msg[3]-0x30) + 10*(tb_msg[4]-0x30) + (tb_msg[5]-0x30);
 8002be2:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002be4:	78db      	ldrb	r3, [r3, #3]
 8002be6:	461a      	mov	r2, r3
 8002be8:	0092      	lsls	r2, r2, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	461a      	mov	r2, r3
 8002bee:	0091      	lsls	r1, r2, #2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bfc:	791b      	ldrb	r3, [r3, #4]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	0089      	lsls	r1, r1, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002c0e:	795b      	ldrb	r3, [r3, #5]
 8002c10:	4413      	add	r3, r2
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3330      	adds	r3, #48	; 0x30
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002c1a:	70da      	strb	r2, [r3, #3]
		thunderboardFlag=1;
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <Uart_Receive_Thunderboard_ISR+0xec>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 8002c22:	2206      	movs	r2, #6
 8002c24:	4917      	ldr	r1, [pc, #92]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f007 fd5d 	bl	800a6e6 <HAL_UART_Receive_IT>
#ifdef TB_DEBUGG
		HAL_UART_Transmit(huart_debugg, tb_msg, 6, 2);
		HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\r", 2, 2);
#endif
		return;
 8002c2c:	e026      	b.n	8002c7c <Uart_Receive_Thunderboard_ISR+0xdc>
	}
	//SLIP PROTECTION
	if(sp[0]>='0' && sp[0]<='9')cnt++;
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <Uart_Receive_Thunderboard_ISR+0xf0>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b2f      	cmp	r3, #47	; 0x2f
 8002c34:	d90a      	bls.n	8002c4c <Uart_Receive_Thunderboard_ISR+0xac>
 8002c36:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <Uart_Receive_Thunderboard_ISR+0xf0>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b39      	cmp	r3, #57	; 0x39
 8002c3c:	d806      	bhi.n	8002c4c <Uart_Receive_Thunderboard_ISR+0xac>
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	3301      	adds	r3, #1
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e002      	b.n	8002c52 <Uart_Receive_Thunderboard_ISR+0xb2>
	else cnt=0;
 8002c4c:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]

	if(cnt<3) //3 darab ASCI számnak össze kell gyűlnie egymás után
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d805      	bhi.n	8002c66 <Uart_Receive_Thunderboard_ISR+0xc6>
	{
		HAL_UART_Receive_IT(huart_TB, sp, 1);//amig ez nincs meg addig cask egyesével olvasunk
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	490c      	ldr	r1, [pc, #48]	; (8002c90 <Uart_Receive_Thunderboard_ISR+0xf0>)
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f007 fd41 	bl	800a6e6 <HAL_UART_Receive_IT>
 8002c64:	e00a      	b.n	8002c7c <Uart_Receive_Thunderboard_ISR+0xdc>
	}
	else//ha megvan megint 6-ossával olvasunk
	{
		sp[0]=0;
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <Uart_Receive_Thunderboard_ISR+0xf0>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
		cnt=0;
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 8002c72:	2206      	movs	r2, #6
 8002c74:	4903      	ldr	r1, [pc, #12]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f007 fd35 	bl	800a6e6 <HAL_UART_Receive_IT>
	}

}
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	2000028c 	.word	0x2000028c
 8002c88:	20000294 	.word	0x20000294
 8002c8c:	20000288 	.word	0x20000288
 8002c90:	2000057c 	.word	0x2000057c
 8002c94:	2000057d 	.word	0x2000057d

08002c98 <Lane_Change_Init>:


void Lane_Change_Init(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
	N('A').worth = N('B').worth = N('C').worth = N('Y').worth = 0;
 8002c9c:	4b43      	ldr	r3, [pc, #268]	; (8002dac <Lane_Change_Init+0x114>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8002ca4:	4b41      	ldr	r3, [pc, #260]	; (8002dac <Lane_Change_Init+0x114>)
 8002ca6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8002caa:	4a40      	ldr	r2, [pc, #256]	; (8002dac <Lane_Change_Init+0x114>)
 8002cac:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002cae:	4b3f      	ldr	r3, [pc, #252]	; (8002dac <Lane_Change_Init+0x114>)
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	4a3e      	ldr	r2, [pc, #248]	; (8002dac <Lane_Change_Init+0x114>)
 8002cb4:	6213      	str	r3, [r2, #32]
 8002cb6:	4b3d      	ldr	r3, [pc, #244]	; (8002dac <Lane_Change_Init+0x114>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4a3c      	ldr	r2, [pc, #240]	; (8002dac <Lane_Change_Init+0x114>)
 8002cbc:	6053      	str	r3, [r2, #4]
	N('D').worth = N('E').worth=1;
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <Lane_Change_Init+0x114>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	675a      	str	r2, [r3, #116]	; 0x74
 8002cc4:	4b39      	ldr	r3, [pc, #228]	; (8002dac <Lane_Change_Init+0x114>)
 8002cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc8:	4a38      	ldr	r2, [pc, #224]	; (8002dac <Lane_Change_Init+0x114>)
 8002cca:	6593      	str	r3, [r2, #88]	; 0x58
	N('F').worth = N('G').worth = N('W').worth = N('X').worth = 2;
 8002ccc:	4b37      	ldr	r3, [pc, #220]	; (8002dac <Lane_Change_Init+0x114>)
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 8002cd4:	4b35      	ldr	r3, [pc, #212]	; (8002dac <Lane_Change_Init+0x114>)
 8002cd6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8002cda:	4a34      	ldr	r2, [pc, #208]	; (8002dac <Lane_Change_Init+0x114>)
 8002cdc:	f8c2 326c 	str.w	r3, [r2, #620]	; 0x26c
 8002ce0:	4b32      	ldr	r3, [pc, #200]	; (8002dac <Lane_Change_Init+0x114>)
 8002ce2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8002ce6:	4a31      	ldr	r2, [pc, #196]	; (8002dac <Lane_Change_Init+0x114>)
 8002ce8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 8002cec:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <Lane_Change_Init+0x114>)
 8002cee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002cf2:	4a2e      	ldr	r2, [pc, #184]	; (8002dac <Lane_Change_Init+0x114>)
 8002cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	N('H').worth = N('I').worth = N('J').worth = N('M').worth = N('P').worth = N('T').worth = N('V').worth = N('U').worth = 4;
 8002cf8:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <Lane_Change_Init+0x114>)
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 8002d00:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <Lane_Change_Init+0x114>)
 8002d02:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8002d06:	4a29      	ldr	r2, [pc, #164]	; (8002dac <Lane_Change_Init+0x114>)
 8002d08:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
 8002d0c:	4b27      	ldr	r3, [pc, #156]	; (8002dac <Lane_Change_Init+0x114>)
 8002d0e:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002d12:	4a26      	ldr	r2, [pc, #152]	; (8002dac <Lane_Change_Init+0x114>)
 8002d14:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
 8002d18:	4b24      	ldr	r3, [pc, #144]	; (8002dac <Lane_Change_Init+0x114>)
 8002d1a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002d1e:	4a23      	ldr	r2, [pc, #140]	; (8002dac <Lane_Change_Init+0x114>)
 8002d20:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 8002d24:	4b21      	ldr	r3, [pc, #132]	; (8002dac <Lane_Change_Init+0x114>)
 8002d26:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8002d2a:	4a20      	ldr	r2, [pc, #128]	; (8002dac <Lane_Change_Init+0x114>)
 8002d2c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002d30:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <Lane_Change_Init+0x114>)
 8002d32:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002d36:	4a1d      	ldr	r2, [pc, #116]	; (8002dac <Lane_Change_Init+0x114>)
 8002d38:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <Lane_Change_Init+0x114>)
 8002d3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002d42:	4a1a      	ldr	r2, [pc, #104]	; (8002dac <Lane_Change_Init+0x114>)
 8002d44:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002d48:	4b18      	ldr	r3, [pc, #96]	; (8002dac <Lane_Change_Init+0x114>)
 8002d4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d4e:	4a17      	ldr	r2, [pc, #92]	; (8002dac <Lane_Change_Init+0x114>)
 8002d50:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
	N('L').worth = N('K').worth = N('O').worth = N('R').worth = N('S').worth = 8;
 8002d54:	4b15      	ldr	r3, [pc, #84]	; (8002dac <Lane_Change_Init+0x114>)
 8002d56:	2208      	movs	r2, #8
 8002d58:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <Lane_Change_Init+0x114>)
 8002d5e:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <Lane_Change_Init+0x114>)
 8002d64:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
 8002d68:	4b10      	ldr	r3, [pc, #64]	; (8002dac <Lane_Change_Init+0x114>)
 8002d6a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8002d6e:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <Lane_Change_Init+0x114>)
 8002d70:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
 8002d74:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <Lane_Change_Init+0x114>)
 8002d76:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8002d7a:	4a0c      	ldr	r2, [pc, #48]	; (8002dac <Lane_Change_Init+0x114>)
 8002d7c:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <Lane_Change_Init+0x114>)
 8002d82:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002d86:	4a09      	ldr	r2, [pc, #36]	; (8002dac <Lane_Change_Init+0x114>)
 8002d88:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	N('N').worth = N('Q').worth = 16;
 8002d8c:	4b07      	ldr	r3, [pc, #28]	; (8002dac <Lane_Change_Init+0x114>)
 8002d8e:	2210      	movs	r2, #16
 8002d90:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <Lane_Change_Init+0x114>)
 8002d96:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8002d9a:	4a04      	ldr	r2, [pc, #16]	; (8002dac <Lane_Change_Init+0x114>)
 8002d9c:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	2000029c 	.word	0x2000029c

08002db0 <Battery_Voltage_Compensate>:
float v=0;
//ha 1000 akkor a motor full csutkán megy előre
//ha -1000 akkor a motor full csutkán megy hátra

void Battery_Voltage_Compensate(ADC_HandleTypeDef *hadc_UNiMh,ADC_HandleTypeDef *hadc_ULiPo,UART_HandleTypeDef *huart_debugg)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b090      	sub	sp, #64	; 0x40
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
	char msg[30];
	uint32_t raw=0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
	float bat;
	int i;

	//NiMh akku mérése
	for(i=0;i<20;i++)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc4:	e016      	b.n	8002df4 <Battery_Voltage_Compensate+0x44>
	{
		HAL_ADC_Start(hadc_UNiMh);
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f002 ffd4 	bl	8005d74 <HAL_ADC_Start>
		HAL_Delay(10);
 8002dcc:	200a      	movs	r0, #10
 8002dce:	f002 ff69 	bl	8005ca4 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_UNiMh,20);
 8002dd2:	2114      	movs	r1, #20
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f003 f89f 	bl	8005f18 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 8002dda:	200a      	movs	r0, #10
 8002ddc:	f002 ff62 	bl	8005ca4 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_UNiMh);
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f003 f924 	bl	800602e <HAL_ADC_GetValue>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dea:	4413      	add	r3, r2
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8002dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df0:	3301      	adds	r3, #1
 8002df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df6:	2b13      	cmp	r3, #19
 8002df8:	dde5      	ble.n	8002dc6 <Battery_Voltage_Compensate+0x16>
	}
	bat=(float)raw * 0.00460575 / 20.0;//ez a mi feszültségünk V-ban
 8002dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfc:	ee07 3a90 	vmov	s15, r3
 8002e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e04:	ee17 0a90 	vmov	r0, s15
 8002e08:	f7fd fbbe 	bl	8000588 <__aeabi_f2d>
 8002e0c:	a37b      	add	r3, pc, #492	; (adr r3, 8002ffc <Battery_Voltage_Compensate+0x24c>)
 8002e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e12:	f7fd fc11 	bl	8000638 <__aeabi_dmul>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	4b71      	ldr	r3, [pc, #452]	; (8002fe8 <Battery_Voltage_Compensate+0x238>)
 8002e24:	f7fd fd32 	bl	800088c <__aeabi_ddiv>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f7fd feda 	bl	8000be8 <__aeabi_d2f>
 8002e34:	4603      	mov	r3, r0
 8002e36:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"NiMh charge: %2.2f V \r\n", bat);
 8002e38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e3a:	f7fd fba5 	bl	8000588 <__aeabi_f2d>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	f107 0014 	add.w	r0, r7, #20
 8002e46:	4969      	ldr	r1, [pc, #420]	; (8002fec <Battery_Voltage_Compensate+0x23c>)
 8002e48:	f009 f882 	bl	800bf50 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*) msg, strlen(msg),10);
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd f9dd 	bl	8000210 <strlen>
 8002e56:	4603      	mov	r3, r0
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	f107 0114 	add.w	r1, r7, #20
 8002e5e:	230a      	movs	r3, #10
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f007 fb0c 	bl	800a47e <HAL_UART_Transmit>

	if(bat)compensation=7.75/bat;
 8002e66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	d009      	beq.n	8002e88 <Battery_Voltage_Compensate+0xd8>
 8002e74:	eef1 6a0f 	vmov.f32	s13, #31	; 0x40f80000  7.750
 8002e78:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e80:	4b5b      	ldr	r3, [pc, #364]	; (8002ff0 <Battery_Voltage_Compensate+0x240>)
 8002e82:	edc3 7a00 	vstr	s15, [r3]
 8002e86:	e003      	b.n	8002e90 <Battery_Voltage_Compensate+0xe0>
	else compensation=1;
 8002e88:	4b59      	ldr	r3, [pc, #356]	; (8002ff0 <Battery_Voltage_Compensate+0x240>)
 8002e8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e8e:	601a      	str	r2, [r3, #0]

	if(bat < 7.2)
 8002e90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e92:	f7fd fb79 	bl	8000588 <__aeabi_f2d>
 8002e96:	a34e      	add	r3, pc, #312	; (adr r3, 8002fd0 <Battery_Voltage_Compensate+0x220>)
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	f7fd fe3e 	bl	8000b1c <__aeabi_dcmplt>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d010      	beq.n	8002ec8 <Battery_Voltage_Compensate+0x118>
	{
		for(i=0;i<10;i++)
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eaa:	e00a      	b.n	8002ec2 <Battery_Voltage_Compensate+0x112>
		{
			LED_Y_TOGGLE;
 8002eac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eb0:	4850      	ldr	r0, [pc, #320]	; (8002ff4 <Battery_Voltage_Compensate+0x244>)
 8002eb2:	f004 fdaa 	bl	8007a0a <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8002eb6:	20c8      	movs	r0, #200	; 0xc8
 8002eb8:	f002 fef4 	bl	8005ca4 <HAL_Delay>
		for(i=0;i<10;i++)
 8002ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	2b09      	cmp	r3, #9
 8002ec6:	ddf1      	ble.n	8002eac <Battery_Voltage_Compensate+0xfc>
		}
	}

	//LiPo akku mérése
	raw=0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ed0:	e016      	b.n	8002f00 <Battery_Voltage_Compensate+0x150>
	{
		HAL_ADC_Start(hadc_ULiPo);
 8002ed2:	68b8      	ldr	r0, [r7, #8]
 8002ed4:	f002 ff4e 	bl	8005d74 <HAL_ADC_Start>
		HAL_Delay(10);
 8002ed8:	200a      	movs	r0, #10
 8002eda:	f002 fee3 	bl	8005ca4 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_ULiPo,20);
 8002ede:	2114      	movs	r1, #20
 8002ee0:	68b8      	ldr	r0, [r7, #8]
 8002ee2:	f003 f819 	bl	8005f18 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 8002ee6:	200a      	movs	r0, #10
 8002ee8:	f002 fedc 	bl	8005ca4 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_ULiPo);
 8002eec:	68b8      	ldr	r0, [r7, #8]
 8002eee:	f003 f89e 	bl	800602e <HAL_ADC_GetValue>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef6:	4413      	add	r3, r2
 8002ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	3301      	adds	r3, #1
 8002efe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	2b13      	cmp	r3, #19
 8002f04:	dde5      	ble.n	8002ed2 <Battery_Voltage_Compensate+0x122>

	}
	bat = (float)raw * 0.003241242 / 20.0 + 0.02;//ez a mi feszültségünk V-ban
 8002f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f08:	ee07 3a90 	vmov	s15, r3
 8002f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f10:	ee17 0a90 	vmov	r0, s15
 8002f14:	f7fd fb38 	bl	8000588 <__aeabi_f2d>
 8002f18:	a32f      	add	r3, pc, #188	; (adr r3, 8002fd8 <Battery_Voltage_Compensate+0x228>)
 8002f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1e:	f7fd fb8b 	bl	8000638 <__aeabi_dmul>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <Battery_Voltage_Compensate+0x238>)
 8002f30:	f7fd fcac 	bl	800088c <__aeabi_ddiv>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	a328      	add	r3, pc, #160	; (adr r3, 8002fe0 <Battery_Voltage_Compensate+0x230>)
 8002f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f42:	f7fd f9c3 	bl	80002cc <__adddf3>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f7fd fe4b 	bl	8000be8 <__aeabi_d2f>
 8002f52:	4603      	mov	r3, r0
 8002f54:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"LiPo charge: %2.2f V \r\n", bat);
 8002f56:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f58:	f7fd fb16 	bl	8000588 <__aeabi_f2d>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	f107 0014 	add.w	r0, r7, #20
 8002f64:	4924      	ldr	r1, [pc, #144]	; (8002ff8 <Battery_Voltage_Compensate+0x248>)
 8002f66:	f008 fff3 	bl	800bf50 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)msg, strlen(msg),10);
 8002f6a:	f107 0314 	add.w	r3, r7, #20
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd f94e 	bl	8000210 <strlen>
 8002f74:	4603      	mov	r3, r0
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	f107 0114 	add.w	r1, r7, #20
 8002f7c:	230a      	movs	r3, #10
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f007 fa7d 	bl	800a47e <HAL_UART_Transmit>

	/**/
	if(bat < 10)
 8002f84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f94:	d510      	bpl.n	8002fb8 <Battery_Voltage_Compensate+0x208>
	{
		for(i=0;i<20;i++)
 8002f96:	2300      	movs	r3, #0
 8002f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f9a:	e00a      	b.n	8002fb2 <Battery_Voltage_Compensate+0x202>
		{
			LED_Y_TOGGLE;
 8002f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fa0:	4814      	ldr	r0, [pc, #80]	; (8002ff4 <Battery_Voltage_Compensate+0x244>)
 8002fa2:	f004 fd32 	bl	8007a0a <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8002fa6:	20c8      	movs	r0, #200	; 0xc8
 8002fa8:	f002 fe7c 	bl	8005ca4 <HAL_Delay>
		for(i=0;i<20;i++)
 8002fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fae:	3301      	adds	r3, #1
 8002fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	2b13      	cmp	r3, #19
 8002fb6:	ddf1      	ble.n	8002f9c <Battery_Voltage_Compensate+0x1ec>
		}
	}

	LED_Y(0);
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fbe:	480d      	ldr	r0, [pc, #52]	; (8002ff4 <Battery_Voltage_Compensate+0x244>)
 8002fc0:	f004 fd0a 	bl	80079d8 <HAL_GPIO_WritePin>

}
 8002fc4:	bf00      	nop
 8002fc6:	3740      	adds	r7, #64	; 0x40
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	f3af 8000 	nop.w
 8002fd0:	cccccccd 	.word	0xcccccccd
 8002fd4:	401ccccc 	.word	0x401ccccc
 8002fd8:	8c6df334 	.word	0x8c6df334
 8002fdc:	3f6a8d60 	.word	0x3f6a8d60
 8002fe0:	47ae147b 	.word	0x47ae147b
 8002fe4:	3f947ae1 	.word	0x3f947ae1
 8002fe8:	40340000 	.word	0x40340000
 8002fec:	0800fa00 	.word	0x0800fa00
 8002ff0:	20000018 	.word	0x20000018
 8002ff4:	40020400 	.word	0x40020400
 8002ff8:	0800fa18 	.word	0x0800fa18
 8002ffc:	99fa11a9 	.word	0x99fa11a9
 8003000:	3f72dd7a 	.word	0x3f72dd7a
 8003004:	00000000 	.word	0x00000000

08003008 <Measure_Velocity_Task>:

void Measure_Velocity_Task(TIM_HandleTypeDef *htim_encoder,uint32_t tick, uint32_t period)
{
 8003008:	b5b0      	push	{r4, r5, r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
	static uint32_t tick_prev=0;
	static uint32_t measure_v_task_tick=4;
	static float alpha=0.3;
	static float invalpha=0.7;
	float v_uj=0;
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	617b      	str	r3, [r7, #20]

	if(measure_v_task_tick>tick) return;
 800301a:	4b31      	ldr	r3, [pc, #196]	; (80030e0 <Measure_Velocity_Task+0xd8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	429a      	cmp	r2, r3
 8003022:	d354      	bcc.n	80030ce <Measure_Velocity_Task+0xc6>
	measure_v_task_tick= tick + period;
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	4a2d      	ldr	r2, [pc, #180]	; (80030e0 <Measure_Velocity_Task+0xd8>)
 800302c:	6013      	str	r3, [r2, #0]
	if(!tick_prev)
 800302e:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <Measure_Velocity_Task+0xdc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d103      	bne.n	800303e <Measure_Velocity_Task+0x36>
	{
		tick_prev=tick;
 8003036:	4a2b      	ldr	r2, [pc, #172]	; (80030e4 <Measure_Velocity_Task+0xdc>)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	6013      	str	r3, [r2, #0]
		return;
 800303c:	e048      	b.n	80030d0 <Measure_Velocity_Task+0xc8>
	}
	v_uj =((float) 0x8000 - (float) __HAL_TIM_GET_COUNTER(htim_encoder))*7.49/(float)period; //mm/s dimenzió
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	ee07 3a90 	vmov	s15, r3
 8003048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80030e8 <Measure_Velocity_Task+0xe0>
 8003050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003054:	ee17 0a90 	vmov	r0, s15
 8003058:	f7fd fa96 	bl	8000588 <__aeabi_f2d>
 800305c:	a31e      	add	r3, pc, #120	; (adr r3, 80030d8 <Measure_Velocity_Task+0xd0>)
 800305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003062:	f7fd fae9 	bl	8000638 <__aeabi_dmul>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4614      	mov	r4, r2
 800306c:	461d      	mov	r5, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003078:	ee17 0a90 	vmov	r0, s15
 800307c:	f7fd fa84 	bl	8000588 <__aeabi_f2d>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4620      	mov	r0, r4
 8003086:	4629      	mov	r1, r5
 8003088:	f7fd fc00 	bl	800088c <__aeabi_ddiv>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	f7fd fda8 	bl	8000be8 <__aeabi_d2f>
 8003098:	4603      	mov	r3, r0
 800309a:	617b      	str	r3, [r7, #20]
	TIM8->CNT=0x8000;
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <Measure_Velocity_Task+0xe4>)
 800309e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24
	//tick_prev=tick;
	//exponenciális szűrés
	v = alpha*(float)v_uj + invalpha*v;
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <Measure_Velocity_Task+0xe8>)
 80030a6:	ed93 7a00 	vldr	s14, [r3]
 80030aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80030ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b2:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <Measure_Velocity_Task+0xec>)
 80030b4:	edd3 6a00 	vldr	s13, [r3]
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <Measure_Velocity_Task+0xf0>)
 80030ba:	edd3 7a00 	vldr	s15, [r3]
 80030be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <Measure_Velocity_Task+0xf0>)
 80030c8:	edc3 7a00 	vstr	s15, [r3]
 80030cc:	e000      	b.n	80030d0 <Measure_Velocity_Task+0xc8>
	if(measure_v_task_tick>tick) return;
 80030ce:	bf00      	nop
}
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bdb0      	pop	{r4, r5, r7, pc}
 80030d6:	bf00      	nop
 80030d8:	8f5c28f6 	.word	0x8f5c28f6
 80030dc:	401df5c2 	.word	0x401df5c2
 80030e0:	2000001c 	.word	0x2000001c
 80030e4:	20000584 	.word	0x20000584
 80030e8:	47000000 	.word	0x47000000
 80030ec:	40010400 	.word	0x40010400
 80030f0:	20000020 	.word	0x20000020
 80030f4:	20000024 	.word	0x20000024
 80030f8:	20000580 	.word	0x20000580
 80030fc:	00000000 	.word	0x00000000

08003100 <Motor_Drive_Task>:

void Motor_Drive_Task(TIM_HandleTypeDef *htim_motor, UART_HandleTypeDef *huart, uint32_t tick, uint32_t period) //DUTY paramtert kiszedtem -> változtassuk a globális változót
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
	static uint32_t motor_drive_task_tick=5;
	static float f,u=0;

	int32_t ccr1;
	int32_t ccr2;
	if(motor_drive_task_tick>tick) return;
 800310e:	4b90      	ldr	r3, [pc, #576]	; (8003350 <Motor_Drive_Task+0x250>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	f0c0 8109 	bcc.w	800332c <Motor_Drive_Task+0x22c>
	motor_drive_task_tick= tick + period;
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4413      	add	r3, r2
 8003120:	4a8b      	ldr	r2, [pc, #556]	; (8003350 <Motor_Drive_Task+0x250>)
 8003122:	6013      	str	r3, [r2, #0]

	if(motorEnRemote && motorEnLineOk) //ha nem nyomtunk vészstopot és az akkuk is rendben vannak akkor pöröghet a motor
 8003124:	4b8b      	ldr	r3, [pc, #556]	; (8003354 <Motor_Drive_Task+0x254>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80b4 	beq.w	8003296 <Motor_Drive_Task+0x196>
 800312e:	4b8a      	ldr	r3, [pc, #552]	; (8003358 <Motor_Drive_Task+0x258>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80af 	beq.w	8003296 <Motor_Drive_Task+0x196>
	{
		//az u paraméter a bevatkozó jel minusz holtásávot adja meg
		u= KC * (v_ref - v) * compensation + f;
 8003138:	4b88      	ldr	r3, [pc, #544]	; (800335c <Motor_Drive_Task+0x25c>)
 800313a:	ed93 7a00 	vldr	s14, [r3]
 800313e:	4b88      	ldr	r3, [pc, #544]	; (8003360 <Motor_Drive_Task+0x260>)
 8003140:	edd3 7a00 	vldr	s15, [r3]
 8003144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003148:	ee17 0a90 	vmov	r0, s15
 800314c:	f7fd fa1c 	bl	8000588 <__aeabi_f2d>
 8003150:	a379      	add	r3, pc, #484	; (adr r3, 8003338 <Motor_Drive_Task+0x238>)
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	f7fd fa6f 	bl	8000638 <__aeabi_dmul>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4614      	mov	r4, r2
 8003160:	461d      	mov	r5, r3
 8003162:	4b80      	ldr	r3, [pc, #512]	; (8003364 <Motor_Drive_Task+0x264>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd fa0e 	bl	8000588 <__aeabi_f2d>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4620      	mov	r0, r4
 8003172:	4629      	mov	r1, r5
 8003174:	f7fd fa60 	bl	8000638 <__aeabi_dmul>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4614      	mov	r4, r2
 800317e:	461d      	mov	r5, r3
 8003180:	4b79      	ldr	r3, [pc, #484]	; (8003368 <Motor_Drive_Task+0x268>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd f9ff 	bl	8000588 <__aeabi_f2d>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4620      	mov	r0, r4
 8003190:	4629      	mov	r1, r5
 8003192:	f7fd f89b 	bl	80002cc <__adddf3>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f7fd fd23 	bl	8000be8 <__aeabi_d2f>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4a71      	ldr	r2, [pc, #452]	; (800336c <Motor_Drive_Task+0x26c>)
 80031a6:	6013      	str	r3, [r2, #0]
		if(u>880) u=880;
 80031a8:	4b70      	ldr	r3, [pc, #448]	; (800336c <Motor_Drive_Task+0x26c>)
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003370 <Motor_Drive_Task+0x270>
 80031b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	dd03      	ble.n	80031c4 <Motor_Drive_Task+0xc4>
 80031bc:	4b6b      	ldr	r3, [pc, #428]	; (800336c <Motor_Drive_Task+0x26c>)
 80031be:	4a6d      	ldr	r2, [pc, #436]	; (8003374 <Motor_Drive_Task+0x274>)
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e00c      	b.n	80031de <Motor_Drive_Task+0xde>
		else if(u<-500)u=-500;
 80031c4:	4b69      	ldr	r3, [pc, #420]	; (800336c <Motor_Drive_Task+0x26c>)
 80031c6:	edd3 7a00 	vldr	s15, [r3]
 80031ca:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003378 <Motor_Drive_Task+0x278>
 80031ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d6:	d502      	bpl.n	80031de <Motor_Drive_Task+0xde>
 80031d8:	4b64      	ldr	r3, [pc, #400]	; (800336c <Motor_Drive_Task+0x26c>)
 80031da:	4a68      	ldr	r2, [pc, #416]	; (800337c <Motor_Drive_Task+0x27c>)
 80031dc:	601a      	str	r2, [r3, #0]
		f = ZD*f + (1-ZD)*u;
 80031de:	4b62      	ldr	r3, [pc, #392]	; (8003368 <Motor_Drive_Task+0x268>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd f9d0 	bl	8000588 <__aeabi_f2d>
 80031e8:	a355      	add	r3, pc, #340	; (adr r3, 8003340 <Motor_Drive_Task+0x240>)
 80031ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ee:	f7fd fa23 	bl	8000638 <__aeabi_dmul>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4614      	mov	r4, r2
 80031f8:	461d      	mov	r5, r3
 80031fa:	4b5c      	ldr	r3, [pc, #368]	; (800336c <Motor_Drive_Task+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd f9c2 	bl	8000588 <__aeabi_f2d>
 8003204:	a350      	add	r3, pc, #320	; (adr r3, 8003348 <Motor_Drive_Task+0x248>)
 8003206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320a:	f7fd fa15 	bl	8000638 <__aeabi_dmul>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4620      	mov	r0, r4
 8003214:	4629      	mov	r1, r5
 8003216:	f7fd f859 	bl	80002cc <__adddf3>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	f7fd fce1 	bl	8000be8 <__aeabi_d2f>
 8003226:	4603      	mov	r3, r0
 8003228:	4a4f      	ldr	r2, [pc, #316]	; (8003368 <Motor_Drive_Task+0x268>)
 800322a:	6013      	str	r3, [r2, #0]
		//ez alapján a kiadandó kitöltési tényező
		if(u>0) motorDuty=(int)u+70;
 800322c:	4b4f      	ldr	r3, [pc, #316]	; (800336c <Motor_Drive_Task+0x26c>)
 800322e:	edd3 7a00 	vldr	s15, [r3]
 8003232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323a:	dd0a      	ble.n	8003252 <Motor_Drive_Task+0x152>
 800323c:	4b4b      	ldr	r3, [pc, #300]	; (800336c <Motor_Drive_Task+0x26c>)
 800323e:	edd3 7a00 	vldr	s15, [r3]
 8003242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003246:	ee17 3a90 	vmov	r3, s15
 800324a:	3346      	adds	r3, #70	; 0x46
 800324c:	4a4c      	ldr	r2, [pc, #304]	; (8003380 <Motor_Drive_Task+0x280>)
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	e01b      	b.n	800328a <Motor_Drive_Task+0x18a>
		else if(u<0) motorDuty=(int)u-70;
 8003252:	4b46      	ldr	r3, [pc, #280]	; (800336c <Motor_Drive_Task+0x26c>)
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800325c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003260:	d50a      	bpl.n	8003278 <Motor_Drive_Task+0x178>
 8003262:	4b42      	ldr	r3, [pc, #264]	; (800336c <Motor_Drive_Task+0x26c>)
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800326c:	ee17 3a90 	vmov	r3, s15
 8003270:	3b46      	subs	r3, #70	; 0x46
 8003272:	4a43      	ldr	r2, [pc, #268]	; (8003380 <Motor_Drive_Task+0x280>)
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e008      	b.n	800328a <Motor_Drive_Task+0x18a>
		else motorDuty=(int)u;
 8003278:	4b3c      	ldr	r3, [pc, #240]	; (800336c <Motor_Drive_Task+0x26c>)
 800327a:	edd3 7a00 	vldr	s15, [r3]
 800327e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003282:	ee17 2a90 	vmov	r2, s15
 8003286:	4b3e      	ldr	r3, [pc, #248]	; (8003380 <Motor_Drive_Task+0x280>)
 8003288:	601a      	str	r2, [r3, #0]


		MOTOR_EN(1);
 800328a:	2201      	movs	r2, #1
 800328c:	2140      	movs	r1, #64	; 0x40
 800328e:	483d      	ldr	r0, [pc, #244]	; (8003384 <Motor_Drive_Task+0x284>)
 8003290:	f004 fba2 	bl	80079d8 <HAL_GPIO_WritePin>
 8003294:	e00c      	b.n	80032b0 <Motor_Drive_Task+0x1b0>
	}
	else
	{	f=u=0;
 8003296:	4b35      	ldr	r3, [pc, #212]	; (800336c <Motor_Drive_Task+0x26c>)
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	4b33      	ldr	r3, [pc, #204]	; (800336c <Motor_Drive_Task+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a31      	ldr	r2, [pc, #196]	; (8003368 <Motor_Drive_Task+0x268>)
 80032a4:	6013      	str	r3, [r2, #0]
		MOTOR_EN(0); //amugy stop
 80032a6:	2200      	movs	r2, #0
 80032a8:	2140      	movs	r1, #64	; 0x40
 80032aa:	4836      	ldr	r0, [pc, #216]	; (8003384 <Motor_Drive_Task+0x284>)
 80032ac:	f004 fb94 	bl	80079d8 <HAL_GPIO_WritePin>
	}
	//A két érték amit irogatsz (TIM3->CCR1,CCR2) konkrét timer periféria regiszterek, nem feltétlen jó őket folyamatosan újraírni 10ms enként
	/**/
	if(mode==FAST && rxBuf[1]<1)
 80032b0:	4b35      	ldr	r3, [pc, #212]	; (8003388 <Motor_Drive_Task+0x288>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b3f      	cmp	r3, #63	; 0x3f
 80032b6:	d10c      	bne.n	80032d2 <Motor_Drive_Task+0x1d2>
 80032b8:	4b34      	ldr	r3, [pc, #208]	; (800338c <Motor_Drive_Task+0x28c>)
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d108      	bne.n	80032d2 <Motor_Drive_Task+0x1d2>
	{
		TIM3->CCR1=499;
 80032c0:	4b33      	ldr	r3, [pc, #204]	; (8003390 <Motor_Drive_Task+0x290>)
 80032c2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80032c6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2=499;
 80032c8:	4b31      	ldr	r3, [pc, #196]	; (8003390 <Motor_Drive_Task+0x290>)
 80032ca:	f240 12f3 	movw	r2, #499	; 0x1f3
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
 80032d0:	e027      	b.n	8003322 <Motor_Drive_Task+0x222>
		//LED_Y_TOGGLE;
	}
	else if(motorDuty!=motorDutyPrev)//csak akkor írjuk át őket ha tényleg muszáj (ha változtak az előző taskhívás óta)
 80032d2:	4b2b      	ldr	r3, [pc, #172]	; (8003380 <Motor_Drive_Task+0x280>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4b2f      	ldr	r3, [pc, #188]	; (8003394 <Motor_Drive_Task+0x294>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d021      	beq.n	8003322 <Motor_Drive_Task+0x222>
	{
		ccr2 = (motorDuty + 1000)/2-1;
 80032de:	4b28      	ldr	r3, [pc, #160]	; (8003380 <Motor_Drive_Task+0x280>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80032e6:	0fda      	lsrs	r2, r3, #31
 80032e8:	4413      	add	r3, r2
 80032ea:	105b      	asrs	r3, r3, #1
 80032ec:	3b01      	subs	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
		if(ccr2>950)ccr2=950;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f240 32b6 	movw	r2, #950	; 0x3b6
 80032f6:	4293      	cmp	r3, r2
 80032f8:	dd02      	ble.n	8003300 <Motor_Drive_Task+0x200>
 80032fa:	f240 33b6 	movw	r3, #950	; 0x3b6
 80032fe:	617b      	str	r3, [r7, #20]
		if(ccr2<-950)ccr2=-950;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	4a25      	ldr	r2, [pc, #148]	; (8003398 <Motor_Drive_Task+0x298>)
 8003304:	4293      	cmp	r3, r2
 8003306:	da01      	bge.n	800330c <Motor_Drive_Task+0x20c>
 8003308:	4b23      	ldr	r3, [pc, #140]	; (8003398 <Motor_Drive_Task+0x298>)
 800330a:	617b      	str	r3, [r7, #20]
		ccr1= 998-ccr2;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8003312:	3302      	adds	r3, #2
 8003314:	613b      	str	r3, [r7, #16]

		//2 Referencia megadása
		//Ezeket a loopba kéne változtatni folyamatosan, pwm-elinditas mashova kell majd

		TIM3->CCR1=ccr1;
 8003316:	4a1e      	ldr	r2, [pc, #120]	; (8003390 <Motor_Drive_Task+0x290>)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2=ccr2;
 800331c:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <Motor_Drive_Task+0x290>)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	6393      	str	r3, [r2, #56]	; 0x38
	}
	motorDutyPrev=motorDuty;
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <Motor_Drive_Task+0x280>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <Motor_Drive_Task+0x294>)
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e000      	b.n	800332e <Motor_Drive_Task+0x22e>
	if(motor_drive_task_tick>tick) return;
 800332c:	bf00      	nop
}
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bdb0      	pop	{r4, r5, r7, pc}
 8003334:	f3af 8000 	nop.w
 8003338:	30be0ded 	.word	0x30be0ded
 800333c:	3fd02a99 	.word	0x3fd02a99
 8003340:	9b3d07c8 	.word	0x9b3d07c8
 8003344:	3fef9f55 	.word	0x3fef9f55
 8003348:	30be0e00 	.word	0x30be0e00
 800334c:	3f882a99 	.word	0x3f882a99
 8003350:	20000028 	.word	0x20000028
 8003354:	200009b4 	.word	0x200009b4
 8003358:	200009b5 	.word	0x200009b5
 800335c:	2000027c 	.word	0x2000027c
 8003360:	20000580 	.word	0x20000580
 8003364:	20000018 	.word	0x20000018
 8003368:	20000588 	.word	0x20000588
 800336c:	2000058c 	.word	0x2000058c
 8003370:	445c0000 	.word	0x445c0000
 8003374:	445c0000 	.word	0x445c0000
 8003378:	c3fa0000 	.word	0xc3fa0000
 800337c:	c3fa0000 	.word	0xc3fa0000
 8003380:	20000590 	.word	0x20000590
 8003384:	40020400 	.word	0x40020400
 8003388:	2000027a 	.word	0x2000027a
 800338c:	20000598 	.word	0x20000598
 8003390:	40000400 	.word	0x40000400
 8003394:	20000594 	.word	0x20000594
 8003398:	fffffc4a 	.word	0xfffffc4a

0800339c <G0_Read_Fast>:

volatile uint8_t flagG0=0;


uint8_t G0_Read_Fast(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]

	uint8_t state=0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
	txBuf[0]=CMD_READ_FAST;
 80033aa:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <G0_Read_Fast+0x5c>)
 80033ac:	222a      	movs	r2, #42	; 0x2a
 80033ae:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 2);
 80033b0:	2302      	movs	r3, #2
 80033b2:	2201      	movs	r2, #1
 80033b4:	4910      	ldr	r1, [pc, #64]	; (80033f8 <G0_Read_Fast+0x5c>)
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f007 f861 	bl	800a47e <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 8, 4);
 80033bc:	2304      	movs	r3, #4
 80033be:	2208      	movs	r2, #8
 80033c0:	490e      	ldr	r1, [pc, #56]	; (80033fc <G0_Read_Fast+0x60>)
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f007 f8ed 	bl	800a5a2 <HAL_UART_Receive>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <G0_Read_Fast+0x64>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE_FAST) && (rxBuf[7]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <G0_Read_Fast+0x50>
 80033d8:	4b08      	ldr	r3, [pc, #32]	; (80033fc <G0_Read_Fast+0x60>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b41      	cmp	r3, #65	; 0x41
 80033de:	d105      	bne.n	80033ec <G0_Read_Fast+0x50>
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <G0_Read_Fast+0x60>)
 80033e2:	79db      	ldrb	r3, [r3, #7]
 80033e4:	2b12      	cmp	r3, #18
 80033e6:	d101      	bne.n	80033ec <G0_Read_Fast+0x50>
	{
		return 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e000      	b.n	80033ee <G0_Read_Fast+0x52>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 80033ec:	2301      	movs	r3, #1
	}
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	2000002c 	.word	0x2000002c
 80033fc:	20000598 	.word	0x20000598
 8003400:	200009b5 	.word	0x200009b5

08003404 <G0_Read_Skill>:

uint8_t G0_Read_Skill(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint8_t command)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	4613      	mov	r3, r2
 8003410:	71fb      	strb	r3, [r7, #7]
	uint8_t state=1;
 8003412:	2301      	movs	r3, #1
 8003414:	75fb      	strb	r3, [r7, #23]
	txBuf[0]=command;
 8003416:	4a15      	ldr	r2, [pc, #84]	; (800346c <G0_Read_Skill+0x68>)
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 2);
 800341c:	2302      	movs	r3, #2
 800341e:	2201      	movs	r2, #1
 8003420:	4912      	ldr	r1, [pc, #72]	; (800346c <G0_Read_Skill+0x68>)
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f007 f82b 	bl	800a47e <HAL_UART_Transmit>
	state = HAL_UART_Receive(huart_stm, rxBuf, 10, 4);
 8003428:	2304      	movs	r3, #4
 800342a:	220a      	movs	r2, #10
 800342c:	4910      	ldr	r1, [pc, #64]	; (8003470 <G0_Read_Skill+0x6c>)
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f007 f8b7 	bl	800a5a2 <HAL_UART_Receive>
 8003434:	4603      	mov	r3, r0
 8003436:	75fb      	strb	r3, [r7, #23]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8003438:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <G0_Read_Skill+0x70>)
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE_SKILL_FORWARD || rxBuf[0]==START_BYTE_SKILL_REVERSE) && (rxBuf[9]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 800343e:	7dfb      	ldrb	r3, [r7, #23]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10d      	bne.n	8003460 <G0_Read_Skill+0x5c>
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <G0_Read_Skill+0x6c>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b50      	cmp	r3, #80	; 0x50
 800344a:	d003      	beq.n	8003454 <G0_Read_Skill+0x50>
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <G0_Read_Skill+0x6c>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2ba8      	cmp	r3, #168	; 0xa8
 8003452:	d105      	bne.n	8003460 <G0_Read_Skill+0x5c>
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <G0_Read_Skill+0x6c>)
 8003456:	7a5b      	ldrb	r3, [r3, #9]
 8003458:	2b12      	cmp	r3, #18
 800345a:	d101      	bne.n	8003460 <G0_Read_Skill+0x5c>
	{
		return 0;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <G0_Read_Skill+0x5e>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8003460:	2301      	movs	r3, #1
	}
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	2000002c 	.word	0x2000002c
 8003470:	20000598 	.word	0x20000598
 8003474:	200009b5 	.word	0x200009b5

08003478 <Line_Track_Task>:
	}
	else flagG0=0;
}

void Line_Track_Task(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint32_t tick, uint32_t period)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
	static float PHI;
	static float gamma=0;
	static uint32_t ccr_rear_prev=0;
	static uint32_t tick_prev=0;

	if(line_track_task_tick>tick) return;
 8003486:	4bac      	ldr	r3, [pc, #688]	; (8003738 <Line_Track_Task+0x2c0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	f0c0 827c 	bcc.w	800398a <Line_Track_Task+0x512>
	line_track_task_tick = tick + period;
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	4413      	add	r3, r2
 8003498:	4aa7      	ldr	r2, [pc, #668]	; (8003738 <Line_Track_Task+0x2c0>)
 800349a:	6013      	str	r3, [r2, #0]

	if(mode == SKILL)
 800349c:	4ba7      	ldr	r3, [pc, #668]	; (800373c <Line_Track_Task+0x2c4>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b52      	cmp	r3, #82	; 0x52
 80034a2:	f040 81d2 	bne.w	800384a <Line_Track_Task+0x3d2>
	{
		//if(orientation==FORWARD) //ELŐREMENET
		if(orientation==FORWARD)
 80034a6:	4ba6      	ldr	r3, [pc, #664]	; (8003740 <Line_Track_Task+0x2c8>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 80ce 	bne.w	800364c <Line_Track_Task+0x1d4>
				if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
				gamma = Skill_Mode(huart_debugg, -0.004, -0.05, tick);
			}
			HAL_UART_Transmit_IT(huart_stm, txBuf, 1);//elindítom a következő olvasást egy CMD parancs kiküldésével
			*/
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_FORWARD))return;
 80034b0:	2239      	movs	r2, #57	; 0x39
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7ff ffa5 	bl	8003404 <G0_Read_Skill>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f040 8266 	bne.w	800398e <Line_Track_Task+0x516>
			Detect_Node4(huart_debugg, tick);
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	68b8      	ldr	r0, [r7, #8]
 80034c6:	f000 fe99 	bl	80041fc <Detect_Node4>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80034ca:	4b9e      	ldr	r3, [pc, #632]	; (8003744 <Line_Track_Task+0x2cc>)
 80034cc:	785b      	ldrb	r3, [r3, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 825f 	beq.w	8003992 <Line_Track_Task+0x51a>
 80034d4:	4b9b      	ldr	r3, [pc, #620]	; (8003744 <Line_Track_Task+0x2cc>)
 80034d6:	785b      	ldrb	r3, [r3, #1]
 80034d8:	2b04      	cmp	r3, #4
 80034da:	f200 825a 	bhi.w	8003992 <Line_Track_Task+0x51a>
			v_ref=1100;
 80034de:	4b9a      	ldr	r3, [pc, #616]	; (8003748 <Line_Track_Task+0x2d0>)
 80034e0:	4a9a      	ldr	r2, [pc, #616]	; (800374c <Line_Track_Task+0x2d4>)
 80034e2:	601a      	str	r2, [r3, #0]
			gamma = Skill_Mode(huart_debugg, 0.004, 0.004, tick);
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8003750 <Line_Track_Task+0x2d8>
 80034ea:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8003750 <Line_Track_Task+0x2d8>
 80034ee:	68b8      	ldr	r0, [r7, #8]
 80034f0:	f000 fcfe 	bl	8003ef0 <Skill_Mode>
 80034f4:	eef0 7a40 	vmov.f32	s15, s0
 80034f8:	4b96      	ldr	r3, [pc, #600]	; (8003754 <Line_Track_Task+0x2dc>)
 80034fa:	edc3 7a00 	vstr	s15, [r3]
			//ELSŐSZERVÓ ELŐREMENETBEN
			PHI = atan((L/(L+D_FRONT))*tan(gamma));
 80034fe:	4b95      	ldr	r3, [pc, #596]	; (8003754 <Line_Track_Task+0x2dc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd f840 	bl	8000588 <__aeabi_f2d>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	ec43 2b10 	vmov	d0, r2, r3
 8003510:	f00b f942 	bl	800e798 <tan>
 8003514:	ec51 0b10 	vmov	r0, r1, d0
 8003518:	a383      	add	r3, pc, #524	; (adr r3, 8003728 <Line_Track_Task+0x2b0>)
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	f7fd f88b 	bl	8000638 <__aeabi_dmul>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	ec43 2b17 	vmov	d7, r2, r3
 800352a:	eeb0 0a47 	vmov.f32	s0, s14
 800352e:	eef0 0a67 	vmov.f32	s1, s15
 8003532:	f00a ff85 	bl	800e440 <atan>
 8003536:	ec53 2b10 	vmov	r2, r3, d0
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	f7fd fb53 	bl	8000be8 <__aeabi_d2f>
 8003542:	4603      	mov	r3, r0
 8003544:	4a84      	ldr	r2, [pc, #528]	; (8003758 <Line_Track_Task+0x2e0>)
 8003546:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_FRONT_CCR_MIDDLE);//balra kanyarodás
 8003548:	4b83      	ldr	r3, [pc, #524]	; (8003758 <Line_Track_Task+0x2e0>)
 800354a:	edd3 7a00 	vldr	s15, [r3]
 800354e:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800375c <Line_Track_Task+0x2e4>
 8003552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003556:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8003760 <Line_Track_Task+0x2e8>
 800355a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800355e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003562:	ee17 3a90 	vmov	r3, s15
 8003566:	b29b      	uxth	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	4b7e      	ldr	r3, [pc, #504]	; (8003764 <Line_Track_Task+0x2ec>)
 800356c:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 800356e:	4b7d      	ldr	r3, [pc, #500]	; (8003764 <Line_Track_Task+0x2ec>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003576:	dd04      	ble.n	8003582 <Line_Track_Task+0x10a>
			{
				ccr = CCR_FRONT_MAX;
 8003578:	4b7a      	ldr	r3, [pc, #488]	; (8003764 <Line_Track_Task+0x2ec>)
 800357a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e008      	b.n	8003594 <Line_Track_Task+0x11c>
			}
			else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 8003582:	4b78      	ldr	r3, [pc, #480]	; (8003764 <Line_Track_Task+0x2ec>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800358a:	da03      	bge.n	8003594 <Line_Track_Task+0x11c>
			{
				ccr = CCR_FRONT_MIN;
 800358c:	4b75      	ldr	r3, [pc, #468]	; (8003764 <Line_Track_Task+0x2ec>)
 800358e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003592:	601a      	str	r2, [r3, #0]
			}
			TIM2->CCR1 = ccr;
 8003594:	4b73      	ldr	r3, [pc, #460]	; (8003764 <Line_Track_Task+0x2ec>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800359c:	635a      	str	r2, [r3, #52]	; 0x34
			//HÁTSÓSZERVÓ ELŐREMENETBEN
			PHI = atan((L/(L+D_REAR))*tan(gamma))/3;
 800359e:	4b6d      	ldr	r3, [pc, #436]	; (8003754 <Line_Track_Task+0x2dc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fc fff0 	bl	8000588 <__aeabi_f2d>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	ec43 2b10 	vmov	d0, r2, r3
 80035b0:	f00b f8f2 	bl	800e798 <tan>
 80035b4:	ec51 0b10 	vmov	r0, r1, d0
 80035b8:	a35d      	add	r3, pc, #372	; (adr r3, 8003730 <Line_Track_Task+0x2b8>)
 80035ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035be:	f7fd f83b 	bl	8000638 <__aeabi_dmul>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	ec43 2b17 	vmov	d7, r2, r3
 80035ca:	eeb0 0a47 	vmov.f32	s0, s14
 80035ce:	eef0 0a67 	vmov.f32	s1, s15
 80035d2:	f00a ff35 	bl	800e440 <atan>
 80035d6:	ec51 0b10 	vmov	r0, r1, d0
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	4b62      	ldr	r3, [pc, #392]	; (8003768 <Line_Track_Task+0x2f0>)
 80035e0:	f7fd f954 	bl	800088c <__aeabi_ddiv>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	f7fd fafc 	bl	8000be8 <__aeabi_d2f>
 80035f0:	4603      	mov	r3, r0
 80035f2:	4a59      	ldr	r2, [pc, #356]	; (8003758 <Line_Track_Task+0x2e0>)
 80035f4:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_REAR_CCR_MIDDLE);//balra kanyarodás
 80035f6:	4b58      	ldr	r3, [pc, #352]	; (8003758 <Line_Track_Task+0x2e0>)
 80035f8:	edd3 7a00 	vldr	s15, [r3]
 80035fc:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800375c <Line_Track_Task+0x2e4>
 8003600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003604:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800376c <Line_Track_Task+0x2f4>
 8003608:	ee77 7a87 	vadd.f32	s15, s15, s14
 800360c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003610:	ee17 3a90 	vmov	r3, s15
 8003614:	b29b      	uxth	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	4b52      	ldr	r3, [pc, #328]	; (8003764 <Line_Track_Task+0x2ec>)
 800361a:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_REAR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 800361c:	4b51      	ldr	r3, [pc, #324]	; (8003764 <Line_Track_Task+0x2ec>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f5b3 7f5c 	cmp.w	r3, #880	; 0x370
 8003624:	dd04      	ble.n	8003630 <Line_Track_Task+0x1b8>
			{
				ccr = CCR_REAR_MAX;
 8003626:	4b4f      	ldr	r3, [pc, #316]	; (8003764 <Line_Track_Task+0x2ec>)
 8003628:	f44f 725c 	mov.w	r2, #880	; 0x370
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	e008      	b.n	8003642 <Line_Track_Task+0x1ca>
			}
			else if(ccr < CCR_REAR_MIN)//egyik irányba se
 8003630:	4b4c      	ldr	r3, [pc, #304]	; (8003764 <Line_Track_Task+0x2ec>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8003638:	da03      	bge.n	8003642 <Line_Track_Task+0x1ca>
			{
				ccr = CCR_REAR_MIN;
 800363a:	4b4a      	ldr	r3, [pc, #296]	; (8003764 <Line_Track_Task+0x2ec>)
 800363c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8003640:	601a      	str	r2, [r3, #0]
			}
			TIM1->CCR4 = ccr;
 8003642:	4b48      	ldr	r3, [pc, #288]	; (8003764 <Line_Track_Task+0x2ec>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <Line_Track_Task+0x2f8>)
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
 800364a:	e19a      	b.n	8003982 <Line_Track_Task+0x50a>
		}
		else if(orientation==REVERSE)//TOLATÁS
 800364c:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <Line_Track_Task+0x2c8>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	f040 8196 	bne.w	8003982 <Line_Track_Task+0x50a>
				gamma = Skill_Mode(huart_debugg, 0.005, 0.12, tick);

			}
			HAL_UART_Transmit_IT(huart_stm, txBuf, 1);//elindítom a következő olvasást egy CMD parancs kiküldésével
			*/
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_REVERSE))return;
 8003656:	2291      	movs	r2, #145	; 0x91
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f7ff fed2 	bl	8003404 <G0_Read_Skill>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 8197 	bne.w	8003996 <Line_Track_Task+0x51e>
			Detect_Node4(huart_debugg, tick);
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	68b8      	ldr	r0, [r7, #8]
 800366c:	f000 fdc6 	bl	80041fc <Detect_Node4>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8003670:	4b34      	ldr	r3, [pc, #208]	; (8003744 <Line_Track_Task+0x2cc>)
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 8190 	beq.w	800399a <Line_Track_Task+0x522>
 800367a:	4b32      	ldr	r3, [pc, #200]	; (8003744 <Line_Track_Task+0x2cc>)
 800367c:	785b      	ldrb	r3, [r3, #1]
 800367e:	2b04      	cmp	r3, #4
 8003680:	f200 818b 	bhi.w	800399a <Line_Track_Task+0x522>
			v_ref=-1100;
 8003684:	4b30      	ldr	r3, [pc, #192]	; (8003748 <Line_Track_Task+0x2d0>)
 8003686:	4a3b      	ldr	r2, [pc, #236]	; (8003774 <Line_Track_Task+0x2fc>)
 8003688:	601a      	str	r2, [r3, #0]
			gamma = Skill_Mode(huart_debugg, 0.003, 0.032, tick);
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8003778 <Line_Track_Task+0x300>
 8003690:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800377c <Line_Track_Task+0x304>
 8003694:	68b8      	ldr	r0, [r7, #8]
 8003696:	f000 fc2b 	bl	8003ef0 <Skill_Mode>
 800369a:	eef0 7a40 	vmov.f32	s15, s0
 800369e:	4b2d      	ldr	r3, [pc, #180]	; (8003754 <Line_Track_Task+0x2dc>)
 80036a0:	edc3 7a00 	vstr	s15, [r3]
			//HÁTSÓ SZERVÓ HÁTRAMENETBEN
			PHI = atan((L/(L+D_REAR))*tan(gamma));////////////////////kiszámolni kézzel
 80036a4:	4b2b      	ldr	r3, [pc, #172]	; (8003754 <Line_Track_Task+0x2dc>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fc ff6d 	bl	8000588 <__aeabi_f2d>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	ec43 2b10 	vmov	d0, r2, r3
 80036b6:	f00b f86f 	bl	800e798 <tan>
 80036ba:	ec51 0b10 	vmov	r0, r1, d0
 80036be:	a31c      	add	r3, pc, #112	; (adr r3, 8003730 <Line_Track_Task+0x2b8>)
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	f7fc ffb8 	bl	8000638 <__aeabi_dmul>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	ec43 2b17 	vmov	d7, r2, r3
 80036d0:	eeb0 0a47 	vmov.f32	s0, s14
 80036d4:	eef0 0a67 	vmov.f32	s1, s15
 80036d8:	f00a feb2 	bl	800e440 <atan>
 80036dc:	ec53 2b10 	vmov	r2, r3, d0
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	f7fd fa80 	bl	8000be8 <__aeabi_d2f>
 80036e8:	4603      	mov	r3, r0
 80036ea:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <Line_Track_Task+0x2e0>)
 80036ec:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_REAR_CCR_MIDDLE);
 80036ee:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <Line_Track_Task+0x2e0>)
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800375c <Line_Track_Task+0x2e4>
 80036f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036fc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800376c <Line_Track_Task+0x2f4>
 8003700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003708:	ee17 3a90 	vmov	r3, s15
 800370c:	b29b      	uxth	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	4b14      	ldr	r3, [pc, #80]	; (8003764 <Line_Track_Task+0x2ec>)
 8003712:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_REAR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8003714:	4b13      	ldr	r3, [pc, #76]	; (8003764 <Line_Track_Task+0x2ec>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f5b3 7f5c 	cmp.w	r3, #880	; 0x370
 800371c:	dd30      	ble.n	8003780 <Line_Track_Task+0x308>
			{
				ccr = CCR_REAR_MAX;
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <Line_Track_Task+0x2ec>)
 8003720:	f44f 725c 	mov.w	r2, #880	; 0x370
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e034      	b.n	8003792 <Line_Track_Task+0x31a>
 8003728:	c4830201 	.word	0xc4830201
 800372c:	3fe73a26 	.word	0x3fe73a26
 8003730:	a3f47e90 	.word	0xa3f47e90
 8003734:	3fe8fd1f 	.word	0x3fe8fd1f
 8003738:	20000030 	.word	0x20000030
 800373c:	2000027a 	.word	0x2000027a
 8003740:	20000284 	.word	0x20000284
 8003744:	20000598 	.word	0x20000598
 8003748:	2000027c 	.word	0x2000027c
 800374c:	44898000 	.word	0x44898000
 8003750:	3b83126f 	.word	0x3b83126f
 8003754:	200005a4 	.word	0x200005a4
 8003758:	200005a8 	.word	0x200005a8
 800375c:	44af0000 	.word	0x44af0000
 8003760:	442d0000 	.word	0x442d0000
 8003764:	20000034 	.word	0x20000034
 8003768:	40080000 	.word	0x40080000
 800376c:	441c8000 	.word	0x441c8000
 8003770:	40010000 	.word	0x40010000
 8003774:	c4898000 	.word	0xc4898000
 8003778:	3d03126f 	.word	0x3d03126f
 800377c:	3b449ba6 	.word	0x3b449ba6
			}
			else if(ccr < CCR_REAR_MIN)//egyik irányba se
 8003780:	4b8d      	ldr	r3, [pc, #564]	; (80039b8 <Line_Track_Task+0x540>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8003788:	da03      	bge.n	8003792 <Line_Track_Task+0x31a>
			{
				ccr = CCR_REAR_MIN;
 800378a:	4b8b      	ldr	r3, [pc, #556]	; (80039b8 <Line_Track_Task+0x540>)
 800378c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8003790:	601a      	str	r2, [r3, #0]
			}
			TIM1->CCR4 = ccr;
 8003792:	4b89      	ldr	r3, [pc, #548]	; (80039b8 <Line_Track_Task+0x540>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4b89      	ldr	r3, [pc, #548]	; (80039bc <Line_Track_Task+0x544>)
 8003798:	641a      	str	r2, [r3, #64]	; 0x40

			//ELSŐSZERVÓ HÁTRAMENETBEN
			PHI = atan((L/(L+D_FRONT))*tan(gamma))/3;
 800379a:	4b89      	ldr	r3, [pc, #548]	; (80039c0 <Line_Track_Task+0x548>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fc fef2 	bl	8000588 <__aeabi_f2d>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	ec43 2b10 	vmov	d0, r2, r3
 80037ac:	f00a fff4 	bl	800e798 <tan>
 80037b0:	ec51 0b10 	vmov	r0, r1, d0
 80037b4:	a37e      	add	r3, pc, #504	; (adr r3, 80039b0 <Line_Track_Task+0x538>)
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f7fc ff3d 	bl	8000638 <__aeabi_dmul>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	ec43 2b17 	vmov	d7, r2, r3
 80037c6:	eeb0 0a47 	vmov.f32	s0, s14
 80037ca:	eef0 0a67 	vmov.f32	s1, s15
 80037ce:	f00a fe37 	bl	800e440 <atan>
 80037d2:	ec51 0b10 	vmov	r0, r1, d0
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	4b7a      	ldr	r3, [pc, #488]	; (80039c4 <Line_Track_Task+0x54c>)
 80037dc:	f7fd f856 	bl	800088c <__aeabi_ddiv>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	f7fd f9fe 	bl	8000be8 <__aeabi_d2f>
 80037ec:	4603      	mov	r3, r0
 80037ee:	4a76      	ldr	r2, [pc, #472]	; (80039c8 <Line_Track_Task+0x550>)
 80037f0:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_FRONT_CCR_MIDDLE);//balra kanyarodás
 80037f2:	4b75      	ldr	r3, [pc, #468]	; (80039c8 <Line_Track_Task+0x550>)
 80037f4:	edd3 7a00 	vldr	s15, [r3]
 80037f8:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80039cc <Line_Track_Task+0x554>
 80037fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003800:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80039d0 <Line_Track_Task+0x558>
 8003804:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800380c:	ee17 3a90 	vmov	r3, s15
 8003810:	b29b      	uxth	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	4b68      	ldr	r3, [pc, #416]	; (80039b8 <Line_Track_Task+0x540>)
 8003816:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8003818:	4b67      	ldr	r3, [pc, #412]	; (80039b8 <Line_Track_Task+0x540>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003820:	dd04      	ble.n	800382c <Line_Track_Task+0x3b4>
			{
				ccr = CCR_FRONT_MAX;
 8003822:	4b65      	ldr	r3, [pc, #404]	; (80039b8 <Line_Track_Task+0x540>)
 8003824:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e008      	b.n	800383e <Line_Track_Task+0x3c6>
			}
			else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 800382c:	4b62      	ldr	r3, [pc, #392]	; (80039b8 <Line_Track_Task+0x540>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003834:	da03      	bge.n	800383e <Line_Track_Task+0x3c6>
			{
				ccr = CCR_FRONT_MIN;
 8003836:	4b60      	ldr	r3, [pc, #384]	; (80039b8 <Line_Track_Task+0x540>)
 8003838:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800383c:	601a      	str	r2, [r3, #0]
			}
			TIM2->CCR1 = ccr;
 800383e:	4b5e      	ldr	r3, [pc, #376]	; (80039b8 <Line_Track_Task+0x540>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003846:	635a      	str	r2, [r3, #52]	; 0x34
 8003848:	e09b      	b.n	8003982 <Line_Track_Task+0x50a>
		}

	}
	/*****Gyorsasági pálya üzemmód******/
	else if(mode == FAST)
 800384a:	4b62      	ldr	r3, [pc, #392]	; (80039d4 <Line_Track_Task+0x55c>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b3f      	cmp	r3, #63	; 0x3f
 8003850:	f040 8097 	bne.w	8003982 <Line_Track_Task+0x50a>
	{
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f7ff fda0 	bl	800339c <G0_Read_Fast>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 809d 	bne.w	800399e <Line_Track_Task+0x526>
		if (LINE_CNT<1 || LINE_CNT > 3) return;//ha nincs vonal a kocsi alatt
 8003864:	4b5c      	ldr	r3, [pc, #368]	; (80039d8 <Line_Track_Task+0x560>)
 8003866:	785b      	ldrb	r3, [r3, #1]
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 809a 	beq.w	80039a2 <Line_Track_Task+0x52a>
 800386e:	4b5a      	ldr	r3, [pc, #360]	; (80039d8 <Line_Track_Task+0x560>)
 8003870:	785b      	ldrb	r3, [r3, #1]
 8003872:	2b03      	cmp	r3, #3
 8003874:	f200 8095 	bhi.w	80039a2 <Line_Track_Task+0x52a>
		gamma = Fast_Mode(huart_debugg,tick);
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	68b8      	ldr	r0, [r7, #8]
 800387c:	f000 f8bc 	bl	80039f8 <Fast_Mode>
 8003880:	eef0 7a40 	vmov.f32	s15, s0
 8003884:	4b4e      	ldr	r3, [pc, #312]	; (80039c0 <Line_Track_Task+0x548>)
 8003886:	edc3 7a00 	vstr	s15, [r3]
		PHI = atan((L/(L+D_FRONT))*tan(gamma));
 800388a:	4b4d      	ldr	r3, [pc, #308]	; (80039c0 <Line_Track_Task+0x548>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fc fe7a 	bl	8000588 <__aeabi_f2d>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	ec43 2b10 	vmov	d0, r2, r3
 800389c:	f00a ff7c 	bl	800e798 <tan>
 80038a0:	ec51 0b10 	vmov	r0, r1, d0
 80038a4:	a342      	add	r3, pc, #264	; (adr r3, 80039b0 <Line_Track_Task+0x538>)
 80038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038aa:	f7fc fec5 	bl	8000638 <__aeabi_dmul>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	ec43 2b17 	vmov	d7, r2, r3
 80038b6:	eeb0 0a47 	vmov.f32	s0, s14
 80038ba:	eef0 0a67 	vmov.f32	s1, s15
 80038be:	f00a fdbf 	bl	800e440 <atan>
 80038c2:	ec53 2b10 	vmov	r2, r3, d0
 80038c6:	4610      	mov	r0, r2
 80038c8:	4619      	mov	r1, r3
 80038ca:	f7fd f98d 	bl	8000be8 <__aeabi_d2f>
 80038ce:	4603      	mov	r3, r0
 80038d0:	4a3d      	ldr	r2, [pc, #244]	; (80039c8 <Line_Track_Task+0x550>)
 80038d2:	6013      	str	r3, [r2, #0]
		if(v>2000) ccr = (uint16_t)(-SERVO_M_STRAIGHT * PHI + SERVO_FRONT_CCR_MIDDLE);
 80038d4:	4b41      	ldr	r3, [pc, #260]	; (80039dc <Line_Track_Task+0x564>)
 80038d6:	edd3 7a00 	vldr	s15, [r3]
 80038da:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80039e0 <Line_Track_Task+0x568>
 80038de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e6:	dd13      	ble.n	8003910 <Line_Track_Task+0x498>
 80038e8:	4b37      	ldr	r3, [pc, #220]	; (80039c8 <Line_Track_Task+0x550>)
 80038ea:	edd3 7a00 	vldr	s15, [r3]
 80038ee:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80039e4 <Line_Track_Task+0x56c>
 80038f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038f6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80039d0 <Line_Track_Task+0x558>
 80038fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003902:	ee17 3a90 	vmov	r3, s15
 8003906:	b29b      	uxth	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	4b2b      	ldr	r3, [pc, #172]	; (80039b8 <Line_Track_Task+0x540>)
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e012      	b.n	8003936 <Line_Track_Task+0x4be>
		else ccr =(uint16_t)(-SERVO_M_CORNER * PHI + SERVO_FRONT_CCR_MIDDLE);
 8003910:	4b2d      	ldr	r3, [pc, #180]	; (80039c8 <Line_Track_Task+0x550>)
 8003912:	edd3 7a00 	vldr	s15, [r3]
 8003916:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80039e8 <Line_Track_Task+0x570>
 800391a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800391e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80039d0 <Line_Track_Task+0x558>
 8003922:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800392a:	ee17 3a90 	vmov	r3, s15
 800392e:	b29b      	uxth	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	4b21      	ldr	r3, [pc, #132]	; (80039b8 <Line_Track_Task+0x540>)
 8003934:	601a      	str	r2, [r3, #0]
		if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8003936:	4b20      	ldr	r3, [pc, #128]	; (80039b8 <Line_Track_Task+0x540>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800393e:	dd04      	ble.n	800394a <Line_Track_Task+0x4d2>
		{
			ccr = CCR_FRONT_MAX;
 8003940:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <Line_Track_Task+0x540>)
 8003942:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	e008      	b.n	800395c <Line_Track_Task+0x4e4>
		}
		else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 800394a:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <Line_Track_Task+0x540>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003952:	da03      	bge.n	800395c <Line_Track_Task+0x4e4>
		{
			ccr = CCR_FRONT_MIN;
 8003954:	4b18      	ldr	r3, [pc, #96]	; (80039b8 <Line_Track_Task+0x540>)
 8003956:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800395a:	601a      	str	r2, [r3, #0]
		}
		TIM2->CCR1 = ccr;
 800395c:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <Line_Track_Task+0x540>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003964:	635a      	str	r2, [r3, #52]	; 0x34
		if(ccr_rear_prev!=SERVO_REAR_CCR_MIDDLE) TIM1->CCR4 = SERVO_REAR_CCR_MIDDLE;
 8003966:	4b21      	ldr	r3, [pc, #132]	; (80039ec <Line_Track_Task+0x574>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f240 2272 	movw	r2, #626	; 0x272
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <Line_Track_Task+0x502>
 8003972:	4b12      	ldr	r3, [pc, #72]	; (80039bc <Line_Track_Task+0x544>)
 8003974:	f240 2272 	movw	r2, #626	; 0x272
 8003978:	641a      	str	r2, [r3, #64]	; 0x40
		ccr_rear_prev=SERVO_REAR_CCR_MIDDLE;
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <Line_Track_Task+0x574>)
 800397c:	f240 2272 	movw	r2, #626	; 0x272
 8003980:	601a      	str	r2, [r3, #0]
	}

	tick_prev=tick;
 8003982:	4a1b      	ldr	r2, [pc, #108]	; (80039f0 <Line_Track_Task+0x578>)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	e00c      	b.n	80039a4 <Line_Track_Task+0x52c>
	if(line_track_task_tick>tick) return;
 800398a:	bf00      	nop
 800398c:	e00a      	b.n	80039a4 <Line_Track_Task+0x52c>
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_FORWARD))return;
 800398e:	bf00      	nop
 8003990:	e008      	b.n	80039a4 <Line_Track_Task+0x52c>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8003992:	bf00      	nop
 8003994:	e006      	b.n	80039a4 <Line_Track_Task+0x52c>
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_REVERSE))return;
 8003996:	bf00      	nop
 8003998:	e004      	b.n	80039a4 <Line_Track_Task+0x52c>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 800399a:	bf00      	nop
 800399c:	e002      	b.n	80039a4 <Line_Track_Task+0x52c>
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 800399e:	bf00      	nop
 80039a0:	e000      	b.n	80039a4 <Line_Track_Task+0x52c>
		if (LINE_CNT<1 || LINE_CNT > 3) return;//ha nincs vonal a kocsi alatt
 80039a2:	bf00      	nop
}
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	f3af 8000 	nop.w
 80039b0:	c4830201 	.word	0xc4830201
 80039b4:	3fe73a26 	.word	0x3fe73a26
 80039b8:	20000034 	.word	0x20000034
 80039bc:	40010000 	.word	0x40010000
 80039c0:	200005a4 	.word	0x200005a4
 80039c4:	40080000 	.word	0x40080000
 80039c8:	200005a8 	.word	0x200005a8
 80039cc:	44af0000 	.word	0x44af0000
 80039d0:	442d0000 	.word	0x442d0000
 80039d4:	2000027a 	.word	0x2000027a
 80039d8:	20000598 	.word	0x20000598
 80039dc:	20000580 	.word	0x20000580
 80039e0:	44fa0000 	.word	0x44fa0000
 80039e4:	c4610000 	.word	0xc4610000
 80039e8:	c4c1c000 	.word	0xc4c1c000
 80039ec:	200005ac 	.word	0x200005ac
 80039f0:	200005b0 	.word	0x200005b0
 80039f4:	00000000 	.word	0x00000000

080039f8 <Fast_Mode>:

float Fast_Mode(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
	static float delta;
	static float gamma;

	static float kD=K_D;

	uint32_t sum=0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
	uint32_t dist=0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]


	if(swState[0] == FREERUN_MODE)
 8003a0a:	4b50      	ldr	r3, [pc, #320]	; (8003b4c <Fast_Mode+0x154>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	f040 8084 	bne.w	8003b1c <Fast_Mode+0x124>
	{
		/*****Gyorsító jelölés figyelése (szaggatott 3 vonal)*****/
		if(LINE_CNT != lineCnt_prev && (!Free_Run_State || Free_Run_State==2) && (LINE_CNT==1 || LINE_CNT==3)) //ha változik az alattunk lévő vonalak száma
 8003a14:	4b4e      	ldr	r3, [pc, #312]	; (8003b50 <Fast_Mode+0x158>)
 8003a16:	785a      	ldrb	r2, [r3, #1]
 8003a18:	4b4e      	ldr	r3, [pc, #312]	; (8003b54 <Fast_Mode+0x15c>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d056      	beq.n	8003ace <Fast_Mode+0xd6>
 8003a20:	4b4d      	ldr	r3, [pc, #308]	; (8003b58 <Fast_Mode+0x160>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <Fast_Mode+0x38>
 8003a28:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <Fast_Mode+0x160>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d14e      	bne.n	8003ace <Fast_Mode+0xd6>
 8003a30:	4b47      	ldr	r3, [pc, #284]	; (8003b50 <Fast_Mode+0x158>)
 8003a32:	785b      	ldrb	r3, [r3, #1]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d003      	beq.n	8003a40 <Fast_Mode+0x48>
 8003a38:	4b45      	ldr	r3, [pc, #276]	; (8003b50 <Fast_Mode+0x158>)
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d146      	bne.n	8003ace <Fast_Mode+0xd6>
		{
			dt[index] = t - t_prev;
 8003a40:	4b46      	ldr	r3, [pc, #280]	; (8003b5c <Fast_Mode+0x164>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a46      	ldr	r2, [pc, #280]	; (8003b60 <Fast_Mode+0x168>)
 8003a46:	7812      	ldrb	r2, [r2, #0]
 8003a48:	4611      	mov	r1, r2
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	4a45      	ldr	r2, [pc, #276]	; (8003b64 <Fast_Mode+0x16c>)
 8003a50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			sum=dt[0] + dt[1] + dt[2] + dt[3]+ dt[4]+dt[5] + dt[6] + dt[7];
 8003a54:	4b43      	ldr	r3, [pc, #268]	; (8003b64 <Fast_Mode+0x16c>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <Fast_Mode+0x16c>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	441a      	add	r2, r3
 8003a5e:	4b41      	ldr	r3, [pc, #260]	; (8003b64 <Fast_Mode+0x16c>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	441a      	add	r2, r3
 8003a64:	4b3f      	ldr	r3, [pc, #252]	; (8003b64 <Fast_Mode+0x16c>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	441a      	add	r2, r3
 8003a6a:	4b3e      	ldr	r3, [pc, #248]	; (8003b64 <Fast_Mode+0x16c>)
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	441a      	add	r2, r3
 8003a70:	4b3c      	ldr	r3, [pc, #240]	; (8003b64 <Fast_Mode+0x16c>)
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	441a      	add	r2, r3
 8003a76:	4b3b      	ldr	r3, [pc, #236]	; (8003b64 <Fast_Mode+0x16c>)
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	441a      	add	r2, r3
 8003a7c:	4b39      	ldr	r3, [pc, #228]	; (8003b64 <Fast_Mode+0x16c>)
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
			if((sum > 400) && (sum < 1100))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003a8a:	d910      	bls.n	8003aae <Fast_Mode+0xb6>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f240 424b 	movw	r2, #1099	; 0x44b
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d80b      	bhi.n	8003aae <Fast_Mode+0xb6>
			{
				v_ref=5500;
 8003a96:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <Fast_Mode+0x170>)
 8003a98:	4a34      	ldr	r2, [pc, #208]	; (8003b6c <Fast_Mode+0x174>)
 8003a9a:	601a      	str	r2, [r3, #0]
				LED_B(1);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003aa2:	4833      	ldr	r0, [pc, #204]	; (8003b70 <Fast_Mode+0x178>)
 8003aa4:	f003 ff98 	bl	80079d8 <HAL_GPIO_WritePin>
				Free_Run_State=1;
 8003aa8:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <Fast_Mode+0x160>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
			}
			index++;
 8003aae:	4b2c      	ldr	r3, [pc, #176]	; (8003b60 <Fast_Mode+0x168>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <Fast_Mode+0x168>)
 8003ab8:	701a      	strb	r2, [r3, #0]
			if(index>7) index=0;
 8003aba:	4b29      	ldr	r3, [pc, #164]	; (8003b60 <Fast_Mode+0x168>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b07      	cmp	r3, #7
 8003ac0:	d902      	bls.n	8003ac8 <Fast_Mode+0xd0>
 8003ac2:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <Fast_Mode+0x168>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	701a      	strb	r2, [r3, #0]
			t_prev = t;
 8003ac8:	4a24      	ldr	r2, [pc, #144]	; (8003b5c <Fast_Mode+0x164>)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	6013      	str	r3, [r2, #0]
		}
		/* A memóriajellegű statikus változók segítségével vizsgáljuk a szaggatott vonalat*/
		lineCnt_prev = LINE_CNT; //az előző értéket a jelenlegihez hangoljuk
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <Fast_Mode+0x158>)
 8003ad0:	785a      	ldrb	r2, [r3, #1]
 8003ad2:	4b20      	ldr	r3, [pc, #128]	; (8003b54 <Fast_Mode+0x15c>)
 8003ad4:	701a      	strb	r2, [r3, #0]

		/*****Lassító jelölés figyelése (folytonos 3 vonal)*****/
		if(LINE_CNT > 1 && (!Free_Run_State || Free_Run_State==1)) //ha 3 vonalat érzékelünk
 8003ad6:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <Fast_Mode+0x158>)
 8003ad8:	785b      	ldrb	r3, [r3, #1]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d91a      	bls.n	8003b14 <Fast_Mode+0x11c>
 8003ade:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <Fast_Mode+0x160>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <Fast_Mode+0xf6>
 8003ae6:	4b1c      	ldr	r3, [pc, #112]	; (8003b58 <Fast_Mode+0x160>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d112      	bne.n	8003b14 <Fast_Mode+0x11c>
		{
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 8003aee:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <Fast_Mode+0x17c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3350      	adds	r3, #80	; 0x50
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d952      	bls.n	8003ba0 <Fast_Mode+0x1a8>
			{
				v_ref = 1600;
 8003afa:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <Fast_Mode+0x170>)
 8003afc:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <Fast_Mode+0x180>)
 8003afe:	601a      	str	r2, [r3, #0]
				Free_Run_State=2;
 8003b00:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <Fast_Mode+0x160>)
 8003b02:	2202      	movs	r2, #2
 8003b04:	701a      	strb	r2, [r3, #0]
				LED_B(0);
 8003b06:	2201      	movs	r2, #1
 8003b08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b0c:	4818      	ldr	r0, [pc, #96]	; (8003b70 <Fast_Mode+0x178>)
 8003b0e:	f003 ff63 	bl	80079d8 <HAL_GPIO_WritePin>
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 8003b12:	e045      	b.n	8003ba0 <Fast_Mode+0x1a8>
			}
		}
		else //ha 1 vonalat érzékelünk
		{
			start3time = t;
 8003b14:	4a17      	ldr	r2, [pc, #92]	; (8003b74 <Fast_Mode+0x17c>)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e041      	b.n	8003ba0 <Fast_Mode+0x1a8>
		}
		/*****FÉKEZÉS NEGATÍV PWM-EL*******/
	}

	/*****SC üzemmód******/
	else if(swState[0]==SC_MODE)
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <Fast_Mode+0x154>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d13d      	bne.n	8003ba0 <Fast_Mode+0x1a8>
	{
		dist=(((uint16_t)rxBuf[5])<<8) | ((uint16_t)rxBuf[6]);
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <Fast_Mode+0x158>)
 8003b26:	795b      	ldrb	r3, [r3, #5]
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <Fast_Mode+0x158>)
 8003b2c:	7992      	ldrb	r2, [r2, #6]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60bb      	str	r3, [r7, #8]
		if(dist>1000 || rxBuf[4]) v_ref=1500; //ha tul messze vana  SC vagy érvénytelen az olvasás
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b38:	d803      	bhi.n	8003b42 <Fast_Mode+0x14a>
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <Fast_Mode+0x158>)
 8003b3c:	791b      	ldrb	r3, [r3, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d020      	beq.n	8003b84 <Fast_Mode+0x18c>
 8003b42:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <Fast_Mode+0x170>)
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <Fast_Mode+0x184>)
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	e02a      	b.n	8003ba0 <Fast_Mode+0x1a8>
 8003b4a:	bf00      	nop
 8003b4c:	20000270 	.word	0x20000270
 8003b50:	20000598 	.word	0x20000598
 8003b54:	20000038 	.word	0x20000038
 8003b58:	200005b4 	.word	0x200005b4
 8003b5c:	200005b8 	.word	0x200005b8
 8003b60:	200005bc 	.word	0x200005bc
 8003b64:	2000003c 	.word	0x2000003c
 8003b68:	2000027c 	.word	0x2000027c
 8003b6c:	45abe000 	.word	0x45abe000
 8003b70:	40020400 	.word	0x40020400
 8003b74:	200005c0 	.word	0x200005c0
 8003b78:	44c80000 	.word	0x44c80000
 8003b7c:	44bb8000 	.word	0x44bb8000
 8003b80:	43fa0000 	.word	0x43fa0000
		else v_ref = 2*(float)dist-500;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b92:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8003b80 <Fast_Mode+0x188>
 8003b96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b9a:	4bc1      	ldr	r3, [pc, #772]	; (8003ea0 <Fast_Mode+0x4a8>)
 8003b9c:	edc3 7a00 	vstr	s15, [r3]
	}

	x_elso=(float)rxBuf[2]*204/255.0-102;//248
 8003ba0:	4bc0      	ldr	r3, [pc, #768]	; (8003ea4 <Fast_Mode+0x4ac>)
 8003ba2:	789b      	ldrb	r3, [r3, #2]
 8003ba4:	ee07 3a90 	vmov	s15, r3
 8003ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bac:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8003ea8 <Fast_Mode+0x4b0>
 8003bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bb4:	ee17 0a90 	vmov	r0, s15
 8003bb8:	f7fc fce6 	bl	8000588 <__aeabi_f2d>
 8003bbc:	a3b0      	add	r3, pc, #704	; (adr r3, 8003e80 <Fast_Mode+0x488>)
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f7fc fe63 	bl	800088c <__aeabi_ddiv>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4610      	mov	r0, r2
 8003bcc:	4619      	mov	r1, r3
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	4bb6      	ldr	r3, [pc, #728]	; (8003eac <Fast_Mode+0x4b4>)
 8003bd4:	f7fc fb78 	bl	80002c8 <__aeabi_dsub>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	f7fd f802 	bl	8000be8 <__aeabi_d2f>
 8003be4:	4603      	mov	r3, r0
 8003be6:	4ab2      	ldr	r2, [pc, #712]	; (8003eb0 <Fast_Mode+0x4b8>)
 8003be8:	6013      	str	r3, [r2, #0]
	x_hatso=(float)rxBuf[3]*204/255.0-102; //244
 8003bea:	4bae      	ldr	r3, [pc, #696]	; (8003ea4 <Fast_Mode+0x4ac>)
 8003bec:	78db      	ldrb	r3, [r3, #3]
 8003bee:	ee07 3a90 	vmov	s15, r3
 8003bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf6:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8003ea8 <Fast_Mode+0x4b0>
 8003bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bfe:	ee17 0a90 	vmov	r0, s15
 8003c02:	f7fc fcc1 	bl	8000588 <__aeabi_f2d>
 8003c06:	a39e      	add	r3, pc, #632	; (adr r3, 8003e80 <Fast_Mode+0x488>)
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f7fc fe3e 	bl	800088c <__aeabi_ddiv>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	4ba3      	ldr	r3, [pc, #652]	; (8003eac <Fast_Mode+0x4b4>)
 8003c1e:	f7fc fb53 	bl	80002c8 <__aeabi_dsub>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4610      	mov	r0, r2
 8003c28:	4619      	mov	r1, r3
 8003c2a:	f7fc ffdd 	bl	8000be8 <__aeabi_d2f>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4aa0      	ldr	r2, [pc, #640]	; (8003eb4 <Fast_Mode+0x4bc>)
 8003c32:	6013      	str	r3, [r2, #0]
	delta=atan((float)(x_elso-x_hatso)/L_SENSOR);
 8003c34:	4b9e      	ldr	r3, [pc, #632]	; (8003eb0 <Fast_Mode+0x4b8>)
 8003c36:	ed93 7a00 	vldr	s14, [r3]
 8003c3a:	4b9e      	ldr	r3, [pc, #632]	; (8003eb4 <Fast_Mode+0x4bc>)
 8003c3c:	edd3 7a00 	vldr	s15, [r3]
 8003c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c44:	ee17 0a90 	vmov	r0, s15
 8003c48:	f7fc fc9e 	bl	8000588 <__aeabi_f2d>
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	4b99      	ldr	r3, [pc, #612]	; (8003eb8 <Fast_Mode+0x4c0>)
 8003c52:	f7fc fe1b 	bl	800088c <__aeabi_ddiv>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	ec43 2b17 	vmov	d7, r2, r3
 8003c5e:	eeb0 0a47 	vmov.f32	s0, s14
 8003c62:	eef0 0a67 	vmov.f32	s1, s15
 8003c66:	f00a fbeb 	bl	800e440 <atan>
 8003c6a:	ec53 2b10 	vmov	r2, r3, d0
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	f7fc ffb9 	bl	8000be8 <__aeabi_d2f>
 8003c76:	4603      	mov	r3, r0
 8003c78:	4a90      	ldr	r2, [pc, #576]	; (8003ebc <Fast_Mode+0x4c4>)
 8003c7a:	6013      	str	r3, [r2, #0]
	/**/
	//szabályozóparaméterek ujraszámolása az aktuális sebesség alapján
	if(v>100 || v<-100)
 8003c7c:	4b90      	ldr	r3, [pc, #576]	; (8003ec0 <Fast_Mode+0x4c8>)
 8003c7e:	edd3 7a00 	vldr	s15, [r3]
 8003c82:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8003ec4 <Fast_Mode+0x4cc>
 8003c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8e:	dc0a      	bgt.n	8003ca6 <Fast_Mode+0x2ae>
 8003c90:	4b8b      	ldr	r3, [pc, #556]	; (8003ec0 <Fast_Mode+0x4c8>)
 8003c92:	edd3 7a00 	vldr	s15, [r3]
 8003c96:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8003ec8 <Fast_Mode+0x4d0>
 8003c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca2:	f140 80b9 	bpl.w	8003e18 <Fast_Mode+0x420>
	{
		if(v<2400)
 8003ca6:	4b86      	ldr	r3, [pc, #536]	; (8003ec0 <Fast_Mode+0x4c8>)
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8003ecc <Fast_Mode+0x4d4>
 8003cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb8:	d557      	bpl.n	8003d6a <Fast_Mode+0x372>
		{
			k_p = -L/(v*v)*S1MULTS2_SLOW;
 8003cba:	4b81      	ldr	r3, [pc, #516]	; (8003ec0 <Fast_Mode+0x4c8>)
 8003cbc:	ed93 7a00 	vldr	s14, [r3]
 8003cc0:	4b7f      	ldr	r3, [pc, #508]	; (8003ec0 <Fast_Mode+0x4c8>)
 8003cc2:	edd3 7a00 	vldr	s15, [r3]
 8003cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cca:	ee17 0a90 	vmov	r0, s15
 8003cce:	f7fc fc5b 	bl	8000588 <__aeabi_f2d>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	a16c      	add	r1, pc, #432	; (adr r1, 8003e88 <Fast_Mode+0x490>)
 8003cd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cdc:	f7fc fdd6 	bl	800088c <__aeabi_ddiv>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	a369      	add	r3, pc, #420	; (adr r3, 8003e90 <Fast_Mode+0x498>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	f7fc fca3 	bl	8000638 <__aeabi_dmul>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f7fc ff75 	bl	8000be8 <__aeabi_d2f>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4a73      	ldr	r2, [pc, #460]	; (8003ed0 <Fast_Mode+0x4d8>)
 8003d02:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 8003d04:	4b6e      	ldr	r3, [pc, #440]	; (8003ec0 <Fast_Mode+0x4c8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fc fc3d 	bl	8000588 <__aeabi_f2d>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	a161      	add	r1, pc, #388	; (adr r1, 8003e98 <Fast_Mode+0x4a0>)
 8003d14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d18:	f7fc fdb8 	bl	800088c <__aeabi_ddiv>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4614      	mov	r4, r2
 8003d22:	461d      	mov	r5, r3
 8003d24:	4b66      	ldr	r3, [pc, #408]	; (8003ec0 <Fast_Mode+0x4c8>)
 8003d26:	ed93 7a00 	vldr	s14, [r3]
 8003d2a:	4b69      	ldr	r3, [pc, #420]	; (8003ed0 <Fast_Mode+0x4d8>)
 8003d2c:	edd3 7a00 	vldr	s15, [r3]
 8003d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d34:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8003d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d3c:	ee17 0a90 	vmov	r0, s15
 8003d40:	f7fc fc22 	bl	8000588 <__aeabi_f2d>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4620      	mov	r0, r4
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	f7fc fc74 	bl	8000638 <__aeabi_dmul>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	f7fc ff46 	bl	8000be8 <__aeabi_d2f>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4a5d      	ldr	r2, [pc, #372]	; (8003ed4 <Fast_Mode+0x4dc>)
 8003d60:	6013      	str	r3, [r2, #0]
			kD=-0.06;
 8003d62:	4b5d      	ldr	r3, [pc, #372]	; (8003ed8 <Fast_Mode+0x4e0>)
 8003d64:	4a5d      	ldr	r2, [pc, #372]	; (8003edc <Fast_Mode+0x4e4>)
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	e056      	b.n	8003e18 <Fast_Mode+0x420>
			//kD=0;
		}
		else
		{
			k_p = -L/(v*v)*S1MULTS2_SLOW;
 8003d6a:	4b55      	ldr	r3, [pc, #340]	; (8003ec0 <Fast_Mode+0x4c8>)
 8003d6c:	ed93 7a00 	vldr	s14, [r3]
 8003d70:	4b53      	ldr	r3, [pc, #332]	; (8003ec0 <Fast_Mode+0x4c8>)
 8003d72:	edd3 7a00 	vldr	s15, [r3]
 8003d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7a:	ee17 0a90 	vmov	r0, s15
 8003d7e:	f7fc fc03 	bl	8000588 <__aeabi_f2d>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	a140      	add	r1, pc, #256	; (adr r1, 8003e88 <Fast_Mode+0x490>)
 8003d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d8c:	f7fc fd7e 	bl	800088c <__aeabi_ddiv>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	a33d      	add	r3, pc, #244	; (adr r3, 8003e90 <Fast_Mode+0x498>)
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f7fc fc4b 	bl	8000638 <__aeabi_dmul>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4610      	mov	r0, r2
 8003da8:	4619      	mov	r1, r3
 8003daa:	f7fc ff1d 	bl	8000be8 <__aeabi_d2f>
 8003dae:	4603      	mov	r3, r0
 8003db0:	4a47      	ldr	r2, [pc, #284]	; (8003ed0 <Fast_Mode+0x4d8>)
 8003db2:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 8003db4:	4b42      	ldr	r3, [pc, #264]	; (8003ec0 <Fast_Mode+0x4c8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fc fbe5 	bl	8000588 <__aeabi_f2d>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	a135      	add	r1, pc, #212	; (adr r1, 8003e98 <Fast_Mode+0x4a0>)
 8003dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dc8:	f7fc fd60 	bl	800088c <__aeabi_ddiv>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4614      	mov	r4, r2
 8003dd2:	461d      	mov	r5, r3
 8003dd4:	4b3a      	ldr	r3, [pc, #232]	; (8003ec0 <Fast_Mode+0x4c8>)
 8003dd6:	ed93 7a00 	vldr	s14, [r3]
 8003dda:	4b3d      	ldr	r3, [pc, #244]	; (8003ed0 <Fast_Mode+0x4d8>)
 8003ddc:	edd3 7a00 	vldr	s15, [r3]
 8003de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de4:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8003de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dec:	ee17 0a90 	vmov	r0, s15
 8003df0:	f7fc fbca 	bl	8000588 <__aeabi_f2d>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4620      	mov	r0, r4
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	f7fc fc1c 	bl	8000638 <__aeabi_dmul>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	f7fc feee 	bl	8000be8 <__aeabi_d2f>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	4a31      	ldr	r2, [pc, #196]	; (8003ed4 <Fast_Mode+0x4dc>)
 8003e10:	6013      	str	r3, [r2, #0]
			kD=-0.05;
 8003e12:	4b31      	ldr	r3, [pc, #196]	; (8003ed8 <Fast_Mode+0x4e0>)
 8003e14:	4a32      	ldr	r2, [pc, #200]	; (8003ee0 <Fast_Mode+0x4e8>)
 8003e16:	601a      	str	r2, [r3, #0]
		}
	}

	gamma = -k_p * x_elso -k_delta * delta - kD * (x_elso-x_elso_prev);
 8003e18:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <Fast_Mode+0x4d8>)
 8003e1a:	edd3 7a00 	vldr	s15, [r3]
 8003e1e:	eeb1 7a67 	vneg.f32	s14, s15
 8003e22:	4b23      	ldr	r3, [pc, #140]	; (8003eb0 <Fast_Mode+0x4b8>)
 8003e24:	edd3 7a00 	vldr	s15, [r3]
 8003e28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e2c:	4b29      	ldr	r3, [pc, #164]	; (8003ed4 <Fast_Mode+0x4dc>)
 8003e2e:	edd3 6a00 	vldr	s13, [r3]
 8003e32:	4b22      	ldr	r3, [pc, #136]	; (8003ebc <Fast_Mode+0x4c4>)
 8003e34:	edd3 7a00 	vldr	s15, [r3]
 8003e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e40:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <Fast_Mode+0x4b8>)
 8003e42:	edd3 6a00 	vldr	s13, [r3]
 8003e46:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <Fast_Mode+0x4ec>)
 8003e48:	edd3 7a00 	vldr	s15, [r3]
 8003e4c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e50:	4b21      	ldr	r3, [pc, #132]	; (8003ed8 <Fast_Mode+0x4e0>)
 8003e52:	edd3 7a00 	vldr	s15, [r3]
 8003e56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e5e:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <Fast_Mode+0x4f0>)
 8003e60:	edc3 7a00 	vstr	s15, [r3]
	x_elso_prev = x_elso;
 8003e64:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <Fast_Mode+0x4b8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1e      	ldr	r2, [pc, #120]	; (8003ee4 <Fast_Mode+0x4ec>)
 8003e6a:	6013      	str	r3, [r2, #0]

	return gamma;
 8003e6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <Fast_Mode+0x4f0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	ee07 3a90 	vmov	s15, r3
}
 8003e74:	eeb0 0a67 	vmov.f32	s0, s15
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	00000000 	.word	0x00000000
 8003e84:	406fe000 	.word	0x406fe000
 8003e88:	00000000 	.word	0x00000000
 8003e8c:	c0716000 	.word	0xc0716000
 8003e90:	fd21ff2e 	.word	0xfd21ff2e
 8003e94:	402275f6 	.word	0x402275f6
 8003e98:	00000000 	.word	0x00000000
 8003e9c:	40716000 	.word	0x40716000
 8003ea0:	2000027c 	.word	0x2000027c
 8003ea4:	20000598 	.word	0x20000598
 8003ea8:	434c0000 	.word	0x434c0000
 8003eac:	40598000 	.word	0x40598000
 8003eb0:	200005c4 	.word	0x200005c4
 8003eb4:	200005c8 	.word	0x200005c8
 8003eb8:	407c4000 	.word	0x407c4000
 8003ebc:	200005cc 	.word	0x200005cc
 8003ec0:	20000580 	.word	0x20000580
 8003ec4:	42c80000 	.word	0x42c80000
 8003ec8:	c2c80000 	.word	0xc2c80000
 8003ecc:	45160000 	.word	0x45160000
 8003ed0:	2000005c 	.word	0x2000005c
 8003ed4:	20000060 	.word	0x20000060
 8003ed8:	20000064 	.word	0x20000064
 8003edc:	bd75c28f 	.word	0xbd75c28f
 8003ee0:	bd4ccccd 	.word	0xbd4ccccd
 8003ee4:	200005d0 	.word	0x200005d0
 8003ee8:	200005d4 	.word	0x200005d4
 8003eec:	00000000 	.word	0x00000000

08003ef0 <Skill_Mode>:

float Skill_Mode(UART_HandleTypeDef *huart_debugg, float kP, float kD, uint32_t t)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003efc:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
	static uint32_t t_prev=0;
	int byte=0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
	static int byte_prev=0;
	uint8_t delta_byte;
	float p=0;
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
/*	uint8_t str[40];
	sprintf(str,"%d,  %d,  %d,  %d,  %d\n\r",rxBuf[1],rxBuf[2],rxBuf[3],rxBuf[4],rxBuf[5]);
	HAL_UART_Transmit(huart_debugg, str, strlen(str), 10);
*/

	if(LINE_CNT>3 || ignore)//ha éppen node-on vagyunk, akkor az átlagot követjük
 8003f0c:	4b7f      	ldr	r3, [pc, #508]	; (800410c <Skill_Mode+0x21c>)
 8003f0e:	785b      	ldrb	r3, [r3, #1]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d803      	bhi.n	8003f1c <Skill_Mode+0x2c>
 8003f14:	4b7e      	ldr	r3, [pc, #504]	; (8004110 <Skill_Mode+0x220>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d022      	beq.n	8003f62 <Skill_Mode+0x72>
	{
		byte=0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 8003f20:	2300      	movs	r3, #0
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	e00a      	b.n	8003f3c <Skill_Mode+0x4c>
		{
			byte += rxBuf[i+2];
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	3302      	adds	r3, #2
 8003f2a:	4a78      	ldr	r2, [pc, #480]	; (800410c <Skill_Mode+0x21c>)
 8003f2c:	5cd3      	ldrb	r3, [r2, r3]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	4413      	add	r3, r2
 8003f34:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	4b73      	ldr	r3, [pc, #460]	; (800410c <Skill_Mode+0x21c>)
 8003f3e:	785b      	ldrb	r3, [r3, #1]
 8003f40:	461a      	mov	r2, r3
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	4293      	cmp	r3, r2
 8003f46:	dbee      	blt.n	8003f26 <Skill_Mode+0x36>
		}

		if(LINE_CNT) byte /= LINE_CNT;
 8003f48:	4b70      	ldr	r3, [pc, #448]	; (800410c <Skill_Mode+0x21c>)
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80f2 	beq.w	8004136 <Skill_Mode+0x246>
 8003f52:	4b6e      	ldr	r3, [pc, #440]	; (800410c <Skill_Mode+0x21c>)
 8003f54:	785b      	ldrb	r3, [r3, #1]
 8003f56:	461a      	mov	r2, r3
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f5e:	61fb      	str	r3, [r7, #28]
 8003f60:	e0e9      	b.n	8004136 <Skill_Mode+0x246>
	}
	else if(path==LEFT)
 8003f62:	4b6c      	ldr	r3, [pc, #432]	; (8004114 <Skill_Mode+0x224>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d14d      	bne.n	8004006 <Skill_Mode+0x116>
	{
		byte = LINE1; //az első vonalt kell követni
 8003f6a:	4b68      	ldr	r3, [pc, #416]	; (800410c <Skill_Mode+0x21c>)
 8003f6c:	789b      	ldrb	r3, [r3, #2]
 8003f6e:	61fb      	str	r3, [r7, #28]
		delta_byte=abs((int)byte-byte_prev);
 8003f70:	4b69      	ldr	r3, [pc, #420]	; (8004118 <Skill_Mode+0x228>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bfb8      	it	lt
 8003f7c:	425b      	neglt	r3, r3
 8003f7e:	74fb      	strb	r3, [r7, #19]
		/**/
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 8003f80:	7cfb      	ldrb	r3, [r7, #19]
 8003f82:	2b46      	cmp	r3, #70	; 0x46
 8003f84:	d903      	bls.n	8003f8e <Skill_Mode+0x9e>
 8003f86:	4b65      	ldr	r3, [pc, #404]	; (800411c <Skill_Mode+0x22c>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d103      	bne.n	8003f96 <Skill_Mode+0xa6>
 8003f8e:	4b63      	ldr	r3, [pc, #396]	; (800411c <Skill_Mode+0x22c>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d125      	bne.n	8003fe2 <Skill_Mode+0xf2>
		{

			if(estuary==ESTUARY_MODE_OFF)t_prev=t;//ha most kapcsoltuk be a torkolatkompenzálást, akkor mostantól mérjük az eltelt időt
 8003f96:	4b61      	ldr	r3, [pc, #388]	; (800411c <Skill_Mode+0x22c>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d102      	bne.n	8003fa4 <Skill_Mode+0xb4>
 8003f9e:	4a60      	ldr	r2, [pc, #384]	; (8004120 <Skill_Mode+0x230>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	6013      	str	r3, [r2, #0]
			if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 8003fa4:	4b5e      	ldr	r3, [pc, #376]	; (8004120 <Skill_Mode+0x230>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003fb0:	d908      	bls.n	8003fc4 <Skill_Mode+0xd4>
			{
				estuary=ESTUARY_MODE_OFF; //ha letelt a timeout kilépünk a kompenzálásból
 8003fb2:	4b5a      	ldr	r3, [pc, #360]	; (800411c <Skill_Mode+0x22c>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]
				LED_G(0);
 8003fb8:	2201      	movs	r2, #1
 8003fba:	2102      	movs	r1, #2
 8003fbc:	4859      	ldr	r0, [pc, #356]	; (8004124 <Skill_Mode+0x234>)
 8003fbe:	f003 fd0b 	bl	80079d8 <HAL_GPIO_WritePin>
			if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 8003fc2:	e0b8      	b.n	8004136 <Skill_Mode+0x246>
			}
			else //ha még nem telt le az timout idő
			{
				byte = rxBuf[1+LINE_CNT]; //ilyenkor az utolsó vonalat nézzük az első helyett
 8003fc4:	4b51      	ldr	r3, [pc, #324]	; (800410c <Skill_Mode+0x21c>)
 8003fc6:	785b      	ldrb	r3, [r3, #1]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	4a50      	ldr	r2, [pc, #320]	; (800410c <Skill_Mode+0x21c>)
 8003fcc:	5cd3      	ldrb	r3, [r2, r3]
 8003fce:	61fb      	str	r3, [r7, #28]
				estuary=ESTUARY_MODE_ON; //öntartás
 8003fd0:	4b52      	ldr	r3, [pc, #328]	; (800411c <Skill_Mode+0x22c>)
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	701a      	strb	r2, [r3, #0]
				LED_G(1);
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2102      	movs	r1, #2
 8003fda:	4852      	ldr	r0, [pc, #328]	; (8004124 <Skill_Mode+0x234>)
 8003fdc:	f003 fcfc 	bl	80079d8 <HAL_GPIO_WritePin>
			if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 8003fe0:	e0a9      	b.n	8004136 <Skill_Mode+0x246>
			}
		}
		else if(delta_byte<ESTUARY_EXIT && estuary==ESTUARY_MODE_ON) //ha már eléggé összeszűkült a torkolat, akkor nem kell kompenzálni
 8003fe2:	7cfb      	ldrb	r3, [r7, #19]
 8003fe4:	2b2c      	cmp	r3, #44	; 0x2c
 8003fe6:	f200 80a6 	bhi.w	8004136 <Skill_Mode+0x246>
 8003fea:	4b4c      	ldr	r3, [pc, #304]	; (800411c <Skill_Mode+0x22c>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	f040 80a1 	bne.w	8004136 <Skill_Mode+0x246>
		{
			estuary=ESTUARY_MODE_OFF;
 8003ff4:	4b49      	ldr	r3, [pc, #292]	; (800411c <Skill_Mode+0x22c>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	701a      	strb	r2, [r3, #0]
			LED_G(0);
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	2102      	movs	r1, #2
 8003ffe:	4849      	ldr	r0, [pc, #292]	; (8004124 <Skill_Mode+0x234>)
 8004000:	f003 fcea 	bl	80079d8 <HAL_GPIO_WritePin>
 8004004:	e097      	b.n	8004136 <Skill_Mode+0x246>
		}

	}
	else if(path==RIGHT)
 8004006:	4b43      	ldr	r3, [pc, #268]	; (8004114 <Skill_Mode+0x224>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d14b      	bne.n	80040a6 <Skill_Mode+0x1b6>
	{
		byte = rxBuf[1+LINE_CNT];//az utolsó vonalat kell követni
 800400e:	4b3f      	ldr	r3, [pc, #252]	; (800410c <Skill_Mode+0x21c>)
 8004010:	785b      	ldrb	r3, [r3, #1]
 8004012:	3301      	adds	r3, #1
 8004014:	4a3d      	ldr	r2, [pc, #244]	; (800410c <Skill_Mode+0x21c>)
 8004016:	5cd3      	ldrb	r3, [r2, r3]
 8004018:	61fb      	str	r3, [r7, #28]
		delta_byte=abs((int)byte-byte_prev);
 800401a:	4b3f      	ldr	r3, [pc, #252]	; (8004118 <Skill_Mode+0x228>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	bfb8      	it	lt
 8004026:	425b      	neglt	r3, r3
 8004028:	74fb      	strb	r3, [r7, #19]
		/**/
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	2b46      	cmp	r3, #70	; 0x46
 800402e:	d903      	bls.n	8004038 <Skill_Mode+0x148>
 8004030:	4b3a      	ldr	r3, [pc, #232]	; (800411c <Skill_Mode+0x22c>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d103      	bne.n	8004040 <Skill_Mode+0x150>
 8004038:	4b38      	ldr	r3, [pc, #224]	; (800411c <Skill_Mode+0x22c>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d122      	bne.n	8004086 <Skill_Mode+0x196>
		{
				if(estuary==ESTUARY_MODE_OFF)t_prev=t;//ha most kapcsoltuk be a torkolatkompenzálást, akkor mostantól mérjük az eltelt időt
 8004040:	4b36      	ldr	r3, [pc, #216]	; (800411c <Skill_Mode+0x22c>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d102      	bne.n	800404e <Skill_Mode+0x15e>
 8004048:	4a35      	ldr	r2, [pc, #212]	; (8004120 <Skill_Mode+0x230>)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6013      	str	r3, [r2, #0]
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 800404e:	4b34      	ldr	r3, [pc, #208]	; (8004120 <Skill_Mode+0x230>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800405a:	d908      	bls.n	800406e <Skill_Mode+0x17e>
				{
					estuary=ESTUARY_MODE_OFF; //ha letelt a timeout kilépünk a kompenzálásból
 800405c:	4b2f      	ldr	r3, [pc, #188]	; (800411c <Skill_Mode+0x22c>)
 800405e:	2201      	movs	r2, #1
 8004060:	701a      	strb	r2, [r3, #0]
					LED_G(0);
 8004062:	2201      	movs	r2, #1
 8004064:	2102      	movs	r1, #2
 8004066:	482f      	ldr	r0, [pc, #188]	; (8004124 <Skill_Mode+0x234>)
 8004068:	f003 fcb6 	bl	80079d8 <HAL_GPIO_WritePin>
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 800406c:	e063      	b.n	8004136 <Skill_Mode+0x246>
				}
				else //ha még nem telt le az idő
				{
					byte = rxBuf[2]; //ilyenkor az első vonalat nézzük az utolsó helyett
 800406e:	4b27      	ldr	r3, [pc, #156]	; (800410c <Skill_Mode+0x21c>)
 8004070:	789b      	ldrb	r3, [r3, #2]
 8004072:	61fb      	str	r3, [r7, #28]
					estuary=ESTUARY_MODE_ON; //öntartás
 8004074:	4b29      	ldr	r3, [pc, #164]	; (800411c <Skill_Mode+0x22c>)
 8004076:	2202      	movs	r2, #2
 8004078:	701a      	strb	r2, [r3, #0]
					LED_G(1);
 800407a:	2200      	movs	r2, #0
 800407c:	2102      	movs	r1, #2
 800407e:	4829      	ldr	r0, [pc, #164]	; (8004124 <Skill_Mode+0x234>)
 8004080:	f003 fcaa 	bl	80079d8 <HAL_GPIO_WritePin>
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 8004084:	e057      	b.n	8004136 <Skill_Mode+0x246>
				}
		}
		else if(delta_byte<ESTUARY_EXIT && estuary==ESTUARY_MODE_ON) //ha már eléggé összeszűkült a torkolat, akkor nem kell kompenzálni
 8004086:	7cfb      	ldrb	r3, [r7, #19]
 8004088:	2b2c      	cmp	r3, #44	; 0x2c
 800408a:	d854      	bhi.n	8004136 <Skill_Mode+0x246>
 800408c:	4b23      	ldr	r3, [pc, #140]	; (800411c <Skill_Mode+0x22c>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d150      	bne.n	8004136 <Skill_Mode+0x246>
		{
			estuary=ESTUARY_MODE_OFF;
 8004094:	4b21      	ldr	r3, [pc, #132]	; (800411c <Skill_Mode+0x22c>)
 8004096:	2201      	movs	r2, #1
 8004098:	701a      	strb	r2, [r3, #0]
			LED_G(0);
 800409a:	2201      	movs	r2, #1
 800409c:	2102      	movs	r1, #2
 800409e:	4821      	ldr	r0, [pc, #132]	; (8004124 <Skill_Mode+0x234>)
 80040a0:	f003 fc9a 	bl	80079d8 <HAL_GPIO_WritePin>
 80040a4:	e047      	b.n	8004136 <Skill_Mode+0x246>
		}

	}

	else if(path==MIDDLE)
 80040a6:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <Skill_Mode+0x224>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d143      	bne.n	8004136 <Skill_Mode+0x246>
	{
		if(LINE_CNT==1)byte = LINE1;//ha csak 1 vonal van, akkor azt követjük
 80040ae:	4b17      	ldr	r3, [pc, #92]	; (800410c <Skill_Mode+0x21c>)
 80040b0:	785b      	ldrb	r3, [r3, #1]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d103      	bne.n	80040be <Skill_Mode+0x1ce>
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <Skill_Mode+0x21c>)
 80040b8:	789b      	ldrb	r3, [r3, #2]
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	e03b      	b.n	8004136 <Skill_Mode+0x246>
		else if(LINE_CNT==3)//ha 3 vonal van
 80040be:	4b13      	ldr	r3, [pc, #76]	; (800410c <Skill_Mode+0x21c>)
 80040c0:	785b      	ldrb	r3, [r3, #1]
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d113      	bne.n	80040ee <Skill_Mode+0x1fe>
		{
			byte = rxBuf[3];//a középsőt követjük
 80040c6:	4b11      	ldr	r3, [pc, #68]	; (800410c <Skill_Mode+0x21c>)
 80040c8:	78db      	ldrb	r3, [r3, #3]
 80040ca:	61fb      	str	r3, [r7, #28]
			//folyamatosan nézzük, hogy az 1. és 3.vonal milyen messze van a vonalszenor középontjától
			tmp1=abs((int)LINE1-123);
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <Skill_Mode+0x21c>)
 80040ce:	789b      	ldrb	r3, [r3, #2]
 80040d0:	3b7b      	subs	r3, #123	; 0x7b
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	bfb8      	it	lt
 80040d6:	425b      	neglt	r3, r3
 80040d8:	4a13      	ldr	r2, [pc, #76]	; (8004128 <Skill_Mode+0x238>)
 80040da:	6013      	str	r3, [r2, #0]
			tmp2=abs((int)LINE3-123);
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <Skill_Mode+0x21c>)
 80040de:	791b      	ldrb	r3, [r3, #4]
 80040e0:	3b7b      	subs	r3, #123	; 0x7b
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bfb8      	it	lt
 80040e6:	425b      	neglt	r3, r3
 80040e8:	4a10      	ldr	r2, [pc, #64]	; (800412c <Skill_Mode+0x23c>)
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	e023      	b.n	8004136 <Skill_Mode+0x246>
		}
		else if(LINE_CNT==2)//ha 2 vonal van, az azt jelenti, hogy az elágazás már annyira szétgáazott, hogy csak 2-t látunk a 3 vonalból
 80040ee:	4b07      	ldr	r3, [pc, #28]	; (800410c <Skill_Mode+0x21c>)
 80040f0:	785b      	ldrb	r3, [r3, #1]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d11f      	bne.n	8004136 <Skill_Mode+0x246>
		{
			if(tmp1<tmp2) byte = LINE1; //ha a jobboldali vonalat veszítettük el
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <Skill_Mode+0x238>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	4b0c      	ldr	r3, [pc, #48]	; (800412c <Skill_Mode+0x23c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	da16      	bge.n	8004130 <Skill_Mode+0x240>
 8004102:	4b02      	ldr	r3, [pc, #8]	; (800410c <Skill_Mode+0x21c>)
 8004104:	789b      	ldrb	r3, [r3, #2]
 8004106:	61fb      	str	r3, [r7, #28]
 8004108:	e015      	b.n	8004136 <Skill_Mode+0x246>
 800410a:	bf00      	nop
 800410c:	20000598 	.word	0x20000598
 8004110:	200005a2 	.word	0x200005a2
 8004114:	20000286 	.word	0x20000286
 8004118:	200005d8 	.word	0x200005d8
 800411c:	200005dc 	.word	0x200005dc
 8004120:	200005e0 	.word	0x200005e0
 8004124:	40020400 	.word	0x40020400
 8004128:	200005e4 	.word	0x200005e4
 800412c:	200005e8 	.word	0x200005e8
			else byte = LINE2; //ha a baloldali vonalat veszítettük el
 8004130:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <Skill_Mode+0x2f0>)
 8004132:	78db      	ldrb	r3, [r3, #3]
 8004134:	61fb      	str	r3, [r7, #28]
		}
	}
	if(estuary==ESTUARY_MODE_INIT)estuary=ESTUARY_MODE_OFF;
 8004136:	4b2b      	ldr	r3, [pc, #172]	; (80041e4 <Skill_Mode+0x2f4>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <Skill_Mode+0x254>
 800413e:	4b29      	ldr	r3, [pc, #164]	; (80041e4 <Skill_Mode+0x2f4>)
 8004140:	2201      	movs	r2, #1
 8004142:	701a      	strb	r2, [r3, #0]
	//p = (float)byte * 204/248.0-102;
	p = (float)byte * 204/255.0-102;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800414e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80041e8 <Skill_Mode+0x2f8>
 8004152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004156:	ee17 0a90 	vmov	r0, s15
 800415a:	f7fc fa15 	bl	8000588 <__aeabi_f2d>
 800415e:	a31e      	add	r3, pc, #120	; (adr r3, 80041d8 <Skill_Mode+0x2e8>)
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	f7fc fb92 	bl	800088c <__aeabi_ddiv>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4610      	mov	r0, r2
 800416e:	4619      	mov	r1, r3
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <Skill_Mode+0x2fc>)
 8004176:	f7fc f8a7 	bl	80002c8 <__aeabi_dsub>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4610      	mov	r0, r2
 8004180:	4619      	mov	r1, r3
 8004182:	f7fc fd31 	bl	8000be8 <__aeabi_d2f>
 8004186:	4603      	mov	r3, r0
 8004188:	617b      	str	r3, [r7, #20]
	gamma = -kP * p  - kD*(p-p_prev);
 800418a:	edd7 7a02 	vldr	s15, [r7, #8]
 800418e:	eeb1 7a67 	vneg.f32	s14, s15
 8004192:	edd7 7a05 	vldr	s15, [r7, #20]
 8004196:	ee27 7a27 	vmul.f32	s14, s14, s15
 800419a:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <Skill_Mode+0x300>)
 800419c:	edd3 7a00 	vldr	s15, [r3]
 80041a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80041a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80041a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80041ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041b4:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <Skill_Mode+0x304>)
 80041b6:	edc3 7a00 	vstr	s15, [r3]
	p_prev = p;
 80041ba:	4a0d      	ldr	r2, [pc, #52]	; (80041f0 <Skill_Mode+0x300>)
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	6013      	str	r3, [r2, #0]
	byte_prev=byte;
 80041c0:	4a0d      	ldr	r2, [pc, #52]	; (80041f8 <Skill_Mode+0x308>)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	6013      	str	r3, [r2, #0]

	return gamma;
 80041c6:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <Skill_Mode+0x304>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	ee07 3a90 	vmov	s15, r3
}
 80041ce:	eeb0 0a67 	vmov.f32	s0, s15
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	00000000 	.word	0x00000000
 80041dc:	406fe000 	.word	0x406fe000
 80041e0:	20000598 	.word	0x20000598
 80041e4:	200005dc 	.word	0x200005dc
 80041e8:	434c0000 	.word	0x434c0000
 80041ec:	40598000 	.word	0x40598000
 80041f0:	200005ec 	.word	0x200005ec
 80041f4:	200005f0 	.word	0x200005f0
 80041f8:	200005d8 	.word	0x200005d8

080041fc <Detect_Node4>:
		ignore=0;
	}
}

void Detect_Node4(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
	static uint32_t t_prev=0;
	static uint32_t t_stamp=0;
	static uint8_t detect_node_state=0;
	static float s=0;

	if(LINE_CNT==4 && !detect_node_state)
 8004206:	4b3b      	ldr	r3, [pc, #236]	; (80042f4 <Detect_Node4+0xf8>)
 8004208:	785b      	ldrb	r3, [r3, #1]
 800420a:	2b04      	cmp	r3, #4
 800420c:	d111      	bne.n	8004232 <Detect_Node4+0x36>
 800420e:	4b3a      	ldr	r3, [pc, #232]	; (80042f8 <Detect_Node4+0xfc>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10d      	bne.n	8004232 <Detect_Node4+0x36>
	{
		s=0;
 8004216:	4b39      	ldr	r3, [pc, #228]	; (80042fc <Detect_Node4+0x100>)
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
		detect_node_state=1;//innentől mérünk
 800421e:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <Detect_Node4+0xfc>)
 8004220:	2201      	movs	r2, #1
 8004222:	701a      	strb	r2, [r3, #0]
		ignore=1;
 8004224:	4b36      	ldr	r3, [pc, #216]	; (8004300 <Detect_Node4+0x104>)
 8004226:	2201      	movs	r2, #1
 8004228:	701a      	strb	r2, [r3, #0]
		t_stamp=t;
 800422a:	4a36      	ldr	r2, [pc, #216]	; (8004304 <Detect_Node4+0x108>)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	e02b      	b.n	800428a <Detect_Node4+0x8e>

	}
	else if(LINE_CNT==4 && detect_node_state)
 8004232:	4b30      	ldr	r3, [pc, #192]	; (80042f4 <Detect_Node4+0xf8>)
 8004234:	785b      	ldrb	r3, [r3, #1]
 8004236:	2b04      	cmp	r3, #4
 8004238:	d127      	bne.n	800428a <Detect_Node4+0x8e>
 800423a:	4b2f      	ldr	r3, [pc, #188]	; (80042f8 <Detect_Node4+0xfc>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d023      	beq.n	800428a <Detect_Node4+0x8e>
	{
		s+=(float)abs(v)*(t-t_prev)/1000;
 8004242:	4b31      	ldr	r3, [pc, #196]	; (8004308 <Detect_Node4+0x10c>)
 8004244:	edd3 7a00 	vldr	s15, [r3]
 8004248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800424c:	ee17 3a90 	vmov	r3, s15
 8004250:	2b00      	cmp	r3, #0
 8004252:	bfb8      	it	lt
 8004254:	425b      	neglt	r3, r3
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800425e:	4b2b      	ldr	r3, [pc, #172]	; (800430c <Detect_Node4+0x110>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004272:	eddf 6a27 	vldr	s13, [pc, #156]	; 8004310 <Detect_Node4+0x114>
 8004276:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <Detect_Node4+0x100>)
 800427c:	edd3 7a00 	vldr	s15, [r3]
 8004280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004284:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <Detect_Node4+0x100>)
 8004286:	edc3 7a00 	vstr	s15, [r3]
	}
	if((t-t_stamp)>230 && detect_node_state)
 800428a:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <Detect_Node4+0x108>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2be6      	cmp	r3, #230	; 0xe6
 8004294:	d924      	bls.n	80042e0 <Detect_Node4+0xe4>
 8004296:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <Detect_Node4+0xfc>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d020      	beq.n	80042e0 <Detect_Node4+0xe4>
	{
		detect_node_state=0;
 800429e:	4b16      	ldr	r3, [pc, #88]	; (80042f8 <Detect_Node4+0xfc>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
		ignore=0;
 80042a4:	4b16      	ldr	r3, [pc, #88]	; (8004300 <Detect_Node4+0x104>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
		if(s>140)//vertical node
 80042aa:	4b14      	ldr	r3, [pc, #80]	; (80042fc <Detect_Node4+0x100>)
 80042ac:	edd3 7a00 	vldr	s15, [r3]
 80042b0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004314 <Detect_Node4+0x118>
 80042b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042bc:	dd03      	ble.n	80042c6 <Detect_Node4+0xca>
		{
			nodeDetected=1; //horizont node
 80042be:	4b16      	ldr	r3, [pc, #88]	; (8004318 <Detect_Node4+0x11c>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	e00c      	b.n	80042e0 <Detect_Node4+0xe4>

		}
		else if(s>50)//horizontal node
 80042c6:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <Detect_Node4+0x100>)
 80042c8:	edd3 7a00 	vldr	s15, [r3]
 80042cc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800431c <Detect_Node4+0x120>
 80042d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d8:	dd02      	ble.n	80042e0 <Detect_Node4+0xe4>
		{
			nodeDetected=1; //horizont node
 80042da:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <Detect_Node4+0x11c>)
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
		}
	}
	t_prev=t;
 80042e0:	4a0a      	ldr	r2, [pc, #40]	; (800430c <Detect_Node4+0x110>)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6013      	str	r3, [r2, #0]

}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000598 	.word	0x20000598
 80042f8:	200005f4 	.word	0x200005f4
 80042fc:	200005f8 	.word	0x200005f8
 8004300:	200005a2 	.word	0x200005a2
 8004304:	200005fc 	.word	0x200005fc
 8004308:	20000580 	.word	0x20000580
 800430c:	20000600 	.word	0x20000600
 8004310:	447a0000 	.word	0x447a0000
 8004314:	430c0000 	.word	0x430c0000
 8004318:	20000285 	.word	0x20000285
 800431c:	42480000 	.word	0x42480000

08004320 <__NVIC_DisableIRQ>:
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800432a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432e:	2b00      	cmp	r3, #0
 8004330:	db12      	blt.n	8004358 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	f003 021f 	and.w	r2, r3, #31
 8004338:	490a      	ldr	r1, [pc, #40]	; (8004364 <__NVIC_DisableIRQ+0x44>)
 800433a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2001      	movs	r0, #1
 8004342:	fa00 f202 	lsl.w	r2, r0, r2
 8004346:	3320      	adds	r3, #32
 8004348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800434c:	f3bf 8f4f 	dsb	sy
}
 8004350:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004352:	f3bf 8f6f 	isb	sy
}
 8004356:	bf00      	nop
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	e000e100 	.word	0xe000e100

08004368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800436e:	f001 fc27 	bl	8005bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004372:	f000 f883 	bl	800447c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004376:	f000 fd59 	bl	8004e2c <MX_GPIO_Init>
  MX_DMA_Init();
 800437a:	f000 fd37 	bl	8004dec <MX_DMA_Init>
  MX_TIM2_Init();
 800437e:	f000 fa73 	bl	8004868 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004382:	f000 fcb5 	bl	8004cf0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8004386:	f000 fb67 	bl	8004a58 <MX_TIM4_Init>
  MX_ADC2_Init();
 800438a:	f000 f97b 	bl	8004684 <MX_ADC2_Init>
  MX_TIM3_Init();
 800438e:	f000 fae1 	bl	8004954 <MX_TIM3_Init>
  MX_UART5_Init();
 8004392:	f000 fc83 	bl	8004c9c <MX_UART5_Init>
  MX_USART2_UART_Init();
 8004396:	f000 fcd5 	bl	8004d44 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800439a:	f000 fc27 	bl	8004bec <MX_TIM8_Init>
  MX_ADC1_Init();
 800439e:	f000 f8df 	bl	8004560 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80043a2:	f000 fcf9 	bl	8004d98 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 80043a6:	f000 fbd3 	bl	8004b50 <MX_TIM5_Init>
  MX_TIM1_Init();
 80043aa:	f000 f9bd 	bl	8004728 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  F4_Basic_Init(&huart1, &htim5, &htim3, &htim2, &htim1, &htim8);
 80043ae:	4b28      	ldr	r3, [pc, #160]	; (8004450 <main+0xe8>)
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	4b28      	ldr	r3, [pc, #160]	; (8004454 <main+0xec>)
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	4b28      	ldr	r3, [pc, #160]	; (8004458 <main+0xf0>)
 80043b8:	4a28      	ldr	r2, [pc, #160]	; (800445c <main+0xf4>)
 80043ba:	4929      	ldr	r1, [pc, #164]	; (8004460 <main+0xf8>)
 80043bc:	4829      	ldr	r0, [pc, #164]	; (8004464 <main+0xfc>)
 80043be:	f7fc fe19 	bl	8000ff4 <F4_Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3);
 80043c2:	2108      	movs	r1, #8
 80043c4:	4828      	ldr	r0, [pc, #160]	; (8004468 <main+0x100>)
 80043c6:	f000 fe4f 	bl	8005068 <Remote_Control_Init>
  Battery_Voltage_Compensate(&hadc2, &hadc1, &huart1);
 80043ca:	4a26      	ldr	r2, [pc, #152]	; (8004464 <main+0xfc>)
 80043cc:	4927      	ldr	r1, [pc, #156]	; (800446c <main+0x104>)
 80043ce:	4828      	ldr	r0, [pc, #160]	; (8004470 <main+0x108>)
 80043d0:	f7fe fcee 	bl	8002db0 <Battery_Voltage_Compensate>

  Mode_Selector(&huart1, &huart5);
 80043d4:	4927      	ldr	r1, [pc, #156]	; (8004474 <main+0x10c>)
 80043d6:	4823      	ldr	r0, [pc, #140]	; (8004464 <main+0xfc>)
 80043d8:	f7fe faae 	bl	8002938 <Mode_Selector>
  Create_Nodes(&huart1);
 80043dc:	4821      	ldr	r0, [pc, #132]	; (8004464 <main+0xfc>)
 80043de:	f7fd f83f 	bl	8001460 <Create_Nodes>
  Wait_For_Start_Sigal(&huart3,&huart1);
 80043e2:	4920      	ldr	r1, [pc, #128]	; (8004464 <main+0xfc>)
 80043e4:	4824      	ldr	r0, [pc, #144]	; (8004478 <main+0x110>)
 80043e6:	f7fe fb57 	bl	8002a98 <Wait_For_Start_Sigal>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Measure_Velocity_Task(&htim8,TICK, 4);
 80043ea:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <main+0xf8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	2204      	movs	r2, #4
 80043f2:	4619      	mov	r1, r3
 80043f4:	4816      	ldr	r0, [pc, #88]	; (8004450 <main+0xe8>)
 80043f6:	f7fe fe07 	bl	8003008 <Measure_Velocity_Task>
	  Motor_Drive_Task(&htim3, &huart1, TICK, 10);
 80043fa:	4b19      	ldr	r3, [pc, #100]	; (8004460 <main+0xf8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004400:	230a      	movs	r3, #10
 8004402:	4918      	ldr	r1, [pc, #96]	; (8004464 <main+0xfc>)
 8004404:	4815      	ldr	r0, [pc, #84]	; (800445c <main+0xf4>)
 8004406:	f7fe fe7b 	bl	8003100 <Motor_Drive_Task>
	  Line_Track_Task(&huart5, &huart1, TICK, 4);
 800440a:	4b15      	ldr	r3, [pc, #84]	; (8004460 <main+0xf8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004410:	2304      	movs	r3, #4
 8004412:	4914      	ldr	r1, [pc, #80]	; (8004464 <main+0xfc>)
 8004414:	4817      	ldr	r0, [pc, #92]	; (8004474 <main+0x10c>)
 8004416:	f7ff f82f 	bl	8003478 <Line_Track_Task>
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart1, TICK, 29);
 800441a:	4b11      	ldr	r3, [pc, #68]	; (8004460 <main+0xf8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	221d      	movs	r2, #29
 8004422:	9200      	str	r2, [sp, #0]
 8004424:	4a0f      	ldr	r2, [pc, #60]	; (8004464 <main+0xfc>)
 8004426:	2108      	movs	r1, #8
 8004428:	480f      	ldr	r0, [pc, #60]	; (8004468 <main+0x100>)
 800442a:	f000 fe39 	bl	80050a0 <Remote_Control_Task>
	  HDI_Read_Task(&huart1,&htim2,TICK, 200);
 800442e:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <main+0xf8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004434:	23c8      	movs	r3, #200	; 0xc8
 8004436:	4908      	ldr	r1, [pc, #32]	; (8004458 <main+0xf0>)
 8004438:	480a      	ldr	r0, [pc, #40]	; (8004464 <main+0xfc>)
 800443a:	f7fc fea5 	bl	8001188 <HDI_Read_Task>
	  Control_Task(&huart1,TICK, 43);
 800443e:	4b08      	ldr	r3, [pc, #32]	; (8004460 <main+0xf8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	222b      	movs	r2, #43	; 0x2b
 8004446:	4619      	mov	r1, r3
 8004448:	4806      	ldr	r0, [pc, #24]	; (8004464 <main+0xfc>)
 800444a:	f7fd fee5 	bl	8002218 <Control_Task>
	  Measure_Velocity_Task(&htim8,TICK, 4);
 800444e:	e7cc      	b.n	80043ea <main+0x82>
 8004450:	200007fc 	.word	0x200007fc
 8004454:	20000694 	.word	0x20000694
 8004458:	200006dc 	.word	0x200006dc
 800445c:	20000724 	.word	0x20000724
 8004460:	200007b4 	.word	0x200007b4
 8004464:	200008e8 	.word	0x200008e8
 8004468:	2000076c 	.word	0x2000076c
 800446c:	20000604 	.word	0x20000604
 8004470:	2000064c 	.word	0x2000064c
 8004474:	200008a4 	.word	0x200008a4
 8004478:	20000970 	.word	0x20000970

0800447c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b094      	sub	sp, #80	; 0x50
 8004480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004482:	f107 031c 	add.w	r3, r7, #28
 8004486:	2234      	movs	r2, #52	; 0x34
 8004488:	2100      	movs	r1, #0
 800448a:	4618      	mov	r0, r3
 800448c:	f007 f8ee 	bl	800b66c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004490:	f107 0308 	add.w	r3, r7, #8
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	60da      	str	r2, [r3, #12]
 800449e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80044a0:	2300      	movs	r3, #0
 80044a2:	607b      	str	r3, [r7, #4]
 80044a4:	4b2c      	ldr	r3, [pc, #176]	; (8004558 <SystemClock_Config+0xdc>)
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	4a2b      	ldr	r2, [pc, #172]	; (8004558 <SystemClock_Config+0xdc>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ae:	6413      	str	r3, [r2, #64]	; 0x40
 80044b0:	4b29      	ldr	r3, [pc, #164]	; (8004558 <SystemClock_Config+0xdc>)
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	607b      	str	r3, [r7, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044bc:	2300      	movs	r3, #0
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	4b26      	ldr	r3, [pc, #152]	; (800455c <SystemClock_Config+0xe0>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a25      	ldr	r2, [pc, #148]	; (800455c <SystemClock_Config+0xe0>)
 80044c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	4b23      	ldr	r3, [pc, #140]	; (800455c <SystemClock_Config+0xe0>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044d4:	603b      	str	r3, [r7, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044d8:	2301      	movs	r3, #1
 80044da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044e2:	2302      	movs	r3, #2
 80044e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80044ec:	2304      	movs	r3, #4
 80044ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80044f0:	23b4      	movs	r3, #180	; 0xb4
 80044f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044f4:	2302      	movs	r3, #2
 80044f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80044f8:	2302      	movs	r3, #2
 80044fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80044fc:	2302      	movs	r3, #2
 80044fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004500:	f107 031c 	add.w	r3, r7, #28
 8004504:	4618      	mov	r0, r3
 8004506:	f003 fe4d 	bl	80081a4 <HAL_RCC_OscConfig>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004510:	f000 fda4 	bl	800505c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004514:	f003 faac 	bl	8007a70 <HAL_PWREx_EnableOverDrive>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800451e:	f000 fd9d 	bl	800505c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004522:	230f      	movs	r3, #15
 8004524:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004526:	2302      	movs	r3, #2
 8004528:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800452e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004532:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004538:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800453a:	f107 0308 	add.w	r3, r7, #8
 800453e:	2105      	movs	r1, #5
 8004540:	4618      	mov	r0, r3
 8004542:	f003 fae5 	bl	8007b10 <HAL_RCC_ClockConfig>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800454c:	f000 fd86 	bl	800505c <Error_Handler>
  }
}
 8004550:	bf00      	nop
 8004552:	3750      	adds	r7, #80	; 0x50
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40023800 	.word	0x40023800
 800455c:	40007000 	.word	0x40007000

08004560 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08c      	sub	sp, #48	; 0x30
 8004564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004566:	f107 0320 	add.w	r3, r7, #32
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	605a      	str	r2, [r3, #4]
 8004570:	609a      	str	r2, [r3, #8]
 8004572:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8004574:	463b      	mov	r3, r7
 8004576:	2220      	movs	r2, #32
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f007 f876 	bl	800b66c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004580:	4b3c      	ldr	r3, [pc, #240]	; (8004674 <MX_ADC1_Init+0x114>)
 8004582:	4a3d      	ldr	r2, [pc, #244]	; (8004678 <MX_ADC1_Init+0x118>)
 8004584:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8004586:	4b3b      	ldr	r3, [pc, #236]	; (8004674 <MX_ADC1_Init+0x114>)
 8004588:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800458c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800458e:	4b39      	ldr	r3, [pc, #228]	; (8004674 <MX_ADC1_Init+0x114>)
 8004590:	2200      	movs	r2, #0
 8004592:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004594:	4b37      	ldr	r3, [pc, #220]	; (8004674 <MX_ADC1_Init+0x114>)
 8004596:	2201      	movs	r2, #1
 8004598:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800459a:	4b36      	ldr	r3, [pc, #216]	; (8004674 <MX_ADC1_Init+0x114>)
 800459c:	2200      	movs	r2, #0
 800459e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80045a0:	4b34      	ldr	r3, [pc, #208]	; (8004674 <MX_ADC1_Init+0x114>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80045a8:	4b32      	ldr	r3, [pc, #200]	; (8004674 <MX_ADC1_Init+0x114>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80045ae:	4b31      	ldr	r3, [pc, #196]	; (8004674 <MX_ADC1_Init+0x114>)
 80045b0:	4a32      	ldr	r2, [pc, #200]	; (800467c <MX_ADC1_Init+0x11c>)
 80045b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80045b4:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <MX_ADC1_Init+0x114>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80045ba:	4b2e      	ldr	r3, [pc, #184]	; (8004674 <MX_ADC1_Init+0x114>)
 80045bc:	2203      	movs	r2, #3
 80045be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80045c0:	4b2c      	ldr	r3, [pc, #176]	; (8004674 <MX_ADC1_Init+0x114>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80045c8:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <MX_ADC1_Init+0x114>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80045ce:	4829      	ldr	r0, [pc, #164]	; (8004674 <MX_ADC1_Init+0x114>)
 80045d0:	f001 fb8c 	bl	8005cec <HAL_ADC_Init>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80045da:	f000 fd3f 	bl	800505c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80045de:	2308      	movs	r3, #8
 80045e0:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80045e2:	2301      	movs	r3, #1
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80045e6:	2307      	movs	r3, #7
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045ea:	f107 0320 	add.w	r3, r7, #32
 80045ee:	4619      	mov	r1, r3
 80045f0:	4820      	ldr	r0, [pc, #128]	; (8004674 <MX_ADC1_Init+0x114>)
 80045f2:	f001 fd29 	bl	8006048 <HAL_ADC_ConfigChannel>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80045fc:	f000 fd2e 	bl	800505c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8004600:	2302      	movs	r3, #2
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004604:	f107 0320 	add.w	r3, r7, #32
 8004608:	4619      	mov	r1, r3
 800460a:	481a      	ldr	r0, [pc, #104]	; (8004674 <MX_ADC1_Init+0x114>)
 800460c:	f001 fd1c 	bl	8006048 <HAL_ADC_ConfigChannel>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8004616:	f000 fd21 	bl	800505c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 800461a:	2303      	movs	r3, #3
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800461e:	f107 0320 	add.w	r3, r7, #32
 8004622:	4619      	mov	r1, r3
 8004624:	4813      	ldr	r0, [pc, #76]	; (8004674 <MX_ADC1_Init+0x114>)
 8004626:	f001 fd0f 	bl	8006048 <HAL_ADC_ConfigChannel>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8004630:	f000 fd14 	bl	800505c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8004634:	2308      	movs	r3, #8
 8004636:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8004638:	2301      	movs	r3, #1
 800463a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800463c:	2301      	movs	r3, #1
 800463e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004640:	2300      	movs	r3, #0
 8004642:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <MX_ADC1_Init+0x120>)
 800464a:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800464c:	2300      	movs	r3, #0
 800464e:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8004650:	2300      	movs	r3, #0
 8004652:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004658:	463b      	mov	r3, r7
 800465a:	4619      	mov	r1, r3
 800465c:	4805      	ldr	r0, [pc, #20]	; (8004674 <MX_ADC1_Init+0x114>)
 800465e:	f001 ff21 	bl	80064a4 <HAL_ADCEx_InjectedConfigChannel>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8004668:	f000 fcf8 	bl	800505c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800466c:	bf00      	nop
 800466e:	3730      	adds	r7, #48	; 0x30
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	20000604 	.word	0x20000604
 8004678:	40012000 	.word	0x40012000
 800467c:	0f000001 	.word	0x0f000001
 8004680:	000f0001 	.word	0x000f0001

08004684 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800468a:	463b      	mov	r3, r7
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004696:	4b21      	ldr	r3, [pc, #132]	; (800471c <MX_ADC2_Init+0x98>)
 8004698:	4a21      	ldr	r2, [pc, #132]	; (8004720 <MX_ADC2_Init+0x9c>)
 800469a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800469c:	4b1f      	ldr	r3, [pc, #124]	; (800471c <MX_ADC2_Init+0x98>)
 800469e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80046a4:	4b1d      	ldr	r3, [pc, #116]	; (800471c <MX_ADC2_Init+0x98>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80046aa:	4b1c      	ldr	r3, [pc, #112]	; (800471c <MX_ADC2_Init+0x98>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80046b0:	4b1a      	ldr	r3, [pc, #104]	; (800471c <MX_ADC2_Init+0x98>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80046b6:	4b19      	ldr	r3, [pc, #100]	; (800471c <MX_ADC2_Init+0x98>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80046be:	4b17      	ldr	r3, [pc, #92]	; (800471c <MX_ADC2_Init+0x98>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80046c4:	4b15      	ldr	r3, [pc, #84]	; (800471c <MX_ADC2_Init+0x98>)
 80046c6:	4a17      	ldr	r2, [pc, #92]	; (8004724 <MX_ADC2_Init+0xa0>)
 80046c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80046ca:	4b14      	ldr	r3, [pc, #80]	; (800471c <MX_ADC2_Init+0x98>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80046d0:	4b12      	ldr	r3, [pc, #72]	; (800471c <MX_ADC2_Init+0x98>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80046d6:	4b11      	ldr	r3, [pc, #68]	; (800471c <MX_ADC2_Init+0x98>)
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <MX_ADC2_Init+0x98>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80046e4:	480d      	ldr	r0, [pc, #52]	; (800471c <MX_ADC2_Init+0x98>)
 80046e6:	f001 fb01 	bl	8005cec <HAL_ADC_Init>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80046f0:	f000 fcb4 	bl	800505c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80046f4:	230d      	movs	r3, #13
 80046f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80046f8:	2301      	movs	r3, #1
 80046fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80046fc:	2307      	movs	r3, #7
 80046fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004700:	463b      	mov	r3, r7
 8004702:	4619      	mov	r1, r3
 8004704:	4805      	ldr	r0, [pc, #20]	; (800471c <MX_ADC2_Init+0x98>)
 8004706:	f001 fc9f 	bl	8006048 <HAL_ADC_ConfigChannel>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004710:	f000 fca4 	bl	800505c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	2000064c 	.word	0x2000064c
 8004720:	40012100 	.word	0x40012100
 8004724:	0f000001 	.word	0x0f000001

08004728 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b096      	sub	sp, #88	; 0x58
 800472c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800472e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	605a      	str	r2, [r3, #4]
 8004738:	609a      	str	r2, [r3, #8]
 800473a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800473c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	605a      	str	r2, [r3, #4]
 8004750:	609a      	str	r2, [r3, #8]
 8004752:	60da      	str	r2, [r3, #12]
 8004754:	611a      	str	r2, [r3, #16]
 8004756:	615a      	str	r2, [r3, #20]
 8004758:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800475a:	1d3b      	adds	r3, r7, #4
 800475c:	2220      	movs	r2, #32
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f006 ff83 	bl	800b66c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004766:	4b3e      	ldr	r3, [pc, #248]	; (8004860 <MX_TIM1_Init+0x138>)
 8004768:	4a3e      	ldr	r2, [pc, #248]	; (8004864 <MX_TIM1_Init+0x13c>)
 800476a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 360-1;
 800476c:	4b3c      	ldr	r3, [pc, #240]	; (8004860 <MX_TIM1_Init+0x138>)
 800476e:	f240 1267 	movw	r2, #359	; 0x167
 8004772:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004774:	4b3a      	ldr	r3, [pc, #232]	; (8004860 <MX_TIM1_Init+0x138>)
 8004776:	2200      	movs	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800477a:	4b39      	ldr	r3, [pc, #228]	; (8004860 <MX_TIM1_Init+0x138>)
 800477c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004780:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004782:	4b37      	ldr	r3, [pc, #220]	; (8004860 <MX_TIM1_Init+0x138>)
 8004784:	2200      	movs	r2, #0
 8004786:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004788:	4b35      	ldr	r3, [pc, #212]	; (8004860 <MX_TIM1_Init+0x138>)
 800478a:	2200      	movs	r2, #0
 800478c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800478e:	4b34      	ldr	r3, [pc, #208]	; (8004860 <MX_TIM1_Init+0x138>)
 8004790:	2280      	movs	r2, #128	; 0x80
 8004792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004794:	4832      	ldr	r0, [pc, #200]	; (8004860 <MX_TIM1_Init+0x138>)
 8004796:	f003 ffa3 	bl	80086e0 <HAL_TIM_Base_Init>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80047a0:	f000 fc5c 	bl	800505c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80047aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80047ae:	4619      	mov	r1, r3
 80047b0:	482b      	ldr	r0, [pc, #172]	; (8004860 <MX_TIM1_Init+0x138>)
 80047b2:	f004 ff0d 	bl	80095d0 <HAL_TIM_ConfigClockSource>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80047bc:	f000 fc4e 	bl	800505c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80047c0:	4827      	ldr	r0, [pc, #156]	; (8004860 <MX_TIM1_Init+0x138>)
 80047c2:	f004 f845 	bl	8008850 <HAL_TIM_PWM_Init>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80047cc:	f000 fc46 	bl	800505c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047d0:	2300      	movs	r3, #0
 80047d2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80047d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047dc:	4619      	mov	r1, r3
 80047de:	4820      	ldr	r0, [pc, #128]	; (8004860 <MX_TIM1_Init+0x138>)
 80047e0:	f005 fd1e 	bl	800a220 <HAL_TIMEx_MasterConfigSynchronization>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80047ea:	f000 fc37 	bl	800505c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047ee:	2360      	movs	r3, #96	; 0x60
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 750-1;
 80047f2:	f240 23ed 	movw	r3, #749	; 0x2ed
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047f8:	2300      	movs	r3, #0
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047fc:	2300      	movs	r3, #0
 80047fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004800:	2300      	movs	r3, #0
 8004802:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004804:	2300      	movs	r3, #0
 8004806:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800480c:	220c      	movs	r2, #12
 800480e:	4619      	mov	r1, r3
 8004810:	4813      	ldr	r0, [pc, #76]	; (8004860 <MX_TIM1_Init+0x138>)
 8004812:	f004 fe1b 	bl	800944c <HAL_TIM_PWM_ConfigChannel>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800481c:	f000 fc1e 	bl	800505c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004820:	2300      	movs	r3, #0
 8004822:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004824:	2300      	movs	r3, #0
 8004826:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004838:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800483a:	2300      	movs	r3, #0
 800483c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800483e:	1d3b      	adds	r3, r7, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4807      	ldr	r0, [pc, #28]	; (8004860 <MX_TIM1_Init+0x138>)
 8004844:	f005 fd68 	bl	800a318 <HAL_TIMEx_ConfigBreakDeadTime>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800484e:	f000 fc05 	bl	800505c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004852:	4803      	ldr	r0, [pc, #12]	; (8004860 <MX_TIM1_Init+0x138>)
 8004854:	f000 fea0 	bl	8005598 <HAL_TIM_MspPostInit>

}
 8004858:	bf00      	nop
 800485a:	3758      	adds	r7, #88	; 0x58
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000694 	.word	0x20000694
 8004864:	40010000 	.word	0x40010000

08004868 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08e      	sub	sp, #56	; 0x38
 800486c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800486e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	605a      	str	r2, [r3, #4]
 8004878:	609a      	str	r2, [r3, #8]
 800487a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800487c:	f107 0320 	add.w	r3, r7, #32
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004886:	1d3b      	adds	r3, r7, #4
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	611a      	str	r2, [r3, #16]
 8004894:	615a      	str	r2, [r3, #20]
 8004896:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004898:	4b2d      	ldr	r3, [pc, #180]	; (8004950 <MX_TIM2_Init+0xe8>)
 800489a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800489e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80048a0:	4b2b      	ldr	r3, [pc, #172]	; (8004950 <MX_TIM2_Init+0xe8>)
 80048a2:	2259      	movs	r2, #89	; 0x59
 80048a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048a6:	4b2a      	ldr	r3, [pc, #168]	; (8004950 <MX_TIM2_Init+0xe8>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80048ac:	4b28      	ldr	r3, [pc, #160]	; (8004950 <MX_TIM2_Init+0xe8>)
 80048ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80048b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048b4:	4b26      	ldr	r3, [pc, #152]	; (8004950 <MX_TIM2_Init+0xe8>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048ba:	4b25      	ldr	r3, [pc, #148]	; (8004950 <MX_TIM2_Init+0xe8>)
 80048bc:	2280      	movs	r2, #128	; 0x80
 80048be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80048c0:	4823      	ldr	r0, [pc, #140]	; (8004950 <MX_TIM2_Init+0xe8>)
 80048c2:	f003 ff0d 	bl	80086e0 <HAL_TIM_Base_Init>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80048cc:	f000 fbc6 	bl	800505c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80048d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048da:	4619      	mov	r1, r3
 80048dc:	481c      	ldr	r0, [pc, #112]	; (8004950 <MX_TIM2_Init+0xe8>)
 80048de:	f004 fe77 	bl	80095d0 <HAL_TIM_ConfigClockSource>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80048e8:	f000 fbb8 	bl	800505c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80048ec:	4818      	ldr	r0, [pc, #96]	; (8004950 <MX_TIM2_Init+0xe8>)
 80048ee:	f003 ffaf 	bl	8008850 <HAL_TIM_PWM_Init>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80048f8:	f000 fbb0 	bl	800505c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048fc:	2300      	movs	r3, #0
 80048fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004900:	2300      	movs	r3, #0
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004904:	f107 0320 	add.w	r3, r7, #32
 8004908:	4619      	mov	r1, r3
 800490a:	4811      	ldr	r0, [pc, #68]	; (8004950 <MX_TIM2_Init+0xe8>)
 800490c:	f005 fc88 	bl	800a220 <HAL_TIMEx_MasterConfigSynchronization>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004916:	f000 fba1 	bl	800505c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800491a:	2360      	movs	r3, #96	; 0x60
 800491c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 800491e:	f240 23ed 	movw	r3, #749	; 0x2ed
 8004922:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800492c:	1d3b      	adds	r3, r7, #4
 800492e:	2200      	movs	r2, #0
 8004930:	4619      	mov	r1, r3
 8004932:	4807      	ldr	r0, [pc, #28]	; (8004950 <MX_TIM2_Init+0xe8>)
 8004934:	f004 fd8a 	bl	800944c <HAL_TIM_PWM_ConfigChannel>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800493e:	f000 fb8d 	bl	800505c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004942:	4803      	ldr	r0, [pc, #12]	; (8004950 <MX_TIM2_Init+0xe8>)
 8004944:	f000 fe28 	bl	8005598 <HAL_TIM_MspPostInit>

}
 8004948:	bf00      	nop
 800494a:	3738      	adds	r7, #56	; 0x38
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	200006dc 	.word	0x200006dc

08004954 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08e      	sub	sp, #56	; 0x38
 8004958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800495a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	605a      	str	r2, [r3, #4]
 8004964:	609a      	str	r2, [r3, #8]
 8004966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004968:	f107 0320 	add.w	r3, r7, #32
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004972:	1d3b      	adds	r3, r7, #4
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	609a      	str	r2, [r3, #8]
 800497c:	60da      	str	r2, [r3, #12]
 800497e:	611a      	str	r2, [r3, #16]
 8004980:	615a      	str	r2, [r3, #20]
 8004982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004984:	4b32      	ldr	r3, [pc, #200]	; (8004a50 <MX_TIM3_Init+0xfc>)
 8004986:	4a33      	ldr	r2, [pc, #204]	; (8004a54 <MX_TIM3_Init+0x100>)
 8004988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 800498a:	4b31      	ldr	r3, [pc, #196]	; (8004a50 <MX_TIM3_Init+0xfc>)
 800498c:	2201      	movs	r2, #1
 800498e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8004990:	4b2f      	ldr	r3, [pc, #188]	; (8004a50 <MX_TIM3_Init+0xfc>)
 8004992:	2260      	movs	r2, #96	; 0x60
 8004994:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8004996:	4b2e      	ldr	r3, [pc, #184]	; (8004a50 <MX_TIM3_Init+0xfc>)
 8004998:	f240 32e7 	movw	r2, #999	; 0x3e7
 800499c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800499e:	4b2c      	ldr	r3, [pc, #176]	; (8004a50 <MX_TIM3_Init+0xfc>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049a4:	4b2a      	ldr	r3, [pc, #168]	; (8004a50 <MX_TIM3_Init+0xfc>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80049aa:	4829      	ldr	r0, [pc, #164]	; (8004a50 <MX_TIM3_Init+0xfc>)
 80049ac:	f003 fe98 	bl	80086e0 <HAL_TIM_Base_Init>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80049b6:	f000 fb51 	bl	800505c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80049c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049c4:	4619      	mov	r1, r3
 80049c6:	4822      	ldr	r0, [pc, #136]	; (8004a50 <MX_TIM3_Init+0xfc>)
 80049c8:	f004 fe02 	bl	80095d0 <HAL_TIM_ConfigClockSource>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80049d2:	f000 fb43 	bl	800505c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80049d6:	481e      	ldr	r0, [pc, #120]	; (8004a50 <MX_TIM3_Init+0xfc>)
 80049d8:	f003 ff3a 	bl	8008850 <HAL_TIM_PWM_Init>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80049e2:	f000 fb3b 	bl	800505c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049e6:	2300      	movs	r3, #0
 80049e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80049ee:	f107 0320 	add.w	r3, r7, #32
 80049f2:	4619      	mov	r1, r3
 80049f4:	4816      	ldr	r0, [pc, #88]	; (8004a50 <MX_TIM3_Init+0xfc>)
 80049f6:	f005 fc13 	bl	800a220 <HAL_TIMEx_MasterConfigSynchronization>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004a00:	f000 fb2c 	bl	800505c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a04:	2360      	movs	r3, #96	; 0x60
 8004a06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a14:	1d3b      	adds	r3, r7, #4
 8004a16:	2200      	movs	r2, #0
 8004a18:	4619      	mov	r1, r3
 8004a1a:	480d      	ldr	r0, [pc, #52]	; (8004a50 <MX_TIM3_Init+0xfc>)
 8004a1c:	f004 fd16 	bl	800944c <HAL_TIM_PWM_ConfigChannel>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004a26:	f000 fb19 	bl	800505c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a2a:	1d3b      	adds	r3, r7, #4
 8004a2c:	2204      	movs	r2, #4
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4807      	ldr	r0, [pc, #28]	; (8004a50 <MX_TIM3_Init+0xfc>)
 8004a32:	f004 fd0b 	bl	800944c <HAL_TIM_PWM_ConfigChannel>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004a3c:	f000 fb0e 	bl	800505c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004a40:	4803      	ldr	r0, [pc, #12]	; (8004a50 <MX_TIM3_Init+0xfc>)
 8004a42:	f000 fda9 	bl	8005598 <HAL_TIM_MspPostInit>

}
 8004a46:	bf00      	nop
 8004a48:	3738      	adds	r7, #56	; 0x38
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000724 	.word	0x20000724
 8004a54:	40000400 	.word	0x40000400

08004a58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a5e:	f107 0318 	add.w	r3, r7, #24
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	605a      	str	r2, [r3, #4]
 8004a68:	609a      	str	r2, [r3, #8]
 8004a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a6c:	f107 0310 	add.w	r3, r7, #16
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004a76:	463b      	mov	r3, r7
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	609a      	str	r2, [r3, #8]
 8004a80:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004a82:	4b31      	ldr	r3, [pc, #196]	; (8004b48 <MX_TIM4_Init+0xf0>)
 8004a84:	4a31      	ldr	r2, [pc, #196]	; (8004b4c <MX_TIM4_Init+0xf4>)
 8004a86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 8004a88:	4b2f      	ldr	r3, [pc, #188]	; (8004b48 <MX_TIM4_Init+0xf0>)
 8004a8a:	f240 321f 	movw	r2, #799	; 0x31f
 8004a8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a90:	4b2d      	ldr	r3, [pc, #180]	; (8004b48 <MX_TIM4_Init+0xf0>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8004a96:	4b2c      	ldr	r3, [pc, #176]	; (8004b48 <MX_TIM4_Init+0xf0>)
 8004a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a9e:	4b2a      	ldr	r3, [pc, #168]	; (8004b48 <MX_TIM4_Init+0xf0>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004aa4:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <MX_TIM4_Init+0xf0>)
 8004aa6:	2280      	movs	r2, #128	; 0x80
 8004aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004aaa:	4827      	ldr	r0, [pc, #156]	; (8004b48 <MX_TIM4_Init+0xf0>)
 8004aac:	f003 fe18 	bl	80086e0 <HAL_TIM_Base_Init>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8004ab6:	f000 fad1 	bl	800505c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004abe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004ac0:	f107 0318 	add.w	r3, r7, #24
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4820      	ldr	r0, [pc, #128]	; (8004b48 <MX_TIM4_Init+0xf0>)
 8004ac8:	f004 fd82 	bl	80095d0 <HAL_TIM_ConfigClockSource>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004ad2:	f000 fac3 	bl	800505c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8004ad6:	481c      	ldr	r0, [pc, #112]	; (8004b48 <MX_TIM4_Init+0xf0>)
 8004ad8:	f003 ffdc 	bl	8008a94 <HAL_TIM_IC_Init>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8004ae2:	f000 fabb 	bl	800505c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004aee:	f107 0310 	add.w	r3, r7, #16
 8004af2:	4619      	mov	r1, r3
 8004af4:	4814      	ldr	r0, [pc, #80]	; (8004b48 <MX_TIM4_Init+0xf0>)
 8004af6:	f005 fb93 	bl	800a220 <HAL_TIMEx_MasterConfigSynchronization>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8004b00:	f000 faac 	bl	800505c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004b04:	230a      	movs	r3, #10
 8004b06:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004b14:	463b      	mov	r3, r7
 8004b16:	2208      	movs	r2, #8
 8004b18:	4619      	mov	r1, r3
 8004b1a:	480b      	ldr	r0, [pc, #44]	; (8004b48 <MX_TIM4_Init+0xf0>)
 8004b1c:	f004 fbfa 	bl	8009314 <HAL_TIM_IC_ConfigChannel>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8004b26:	f000 fa99 	bl	800505c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004b2a:	463b      	mov	r3, r7
 8004b2c:	220c      	movs	r2, #12
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4805      	ldr	r0, [pc, #20]	; (8004b48 <MX_TIM4_Init+0xf0>)
 8004b32:	f004 fbef 	bl	8009314 <HAL_TIM_IC_ConfigChannel>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8004b3c:	f000 fa8e 	bl	800505c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004b40:	bf00      	nop
 8004b42:	3728      	adds	r7, #40	; 0x28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	2000076c 	.word	0x2000076c
 8004b4c:	40000800 	.word	0x40000800

08004b50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b56:	f107 0308 	add.w	r3, r7, #8
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	605a      	str	r2, [r3, #4]
 8004b60:	609a      	str	r2, [r3, #8]
 8004b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b64:	463b      	mov	r3, r7
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004b6c:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <MX_TIM5_Init+0x94>)
 8004b6e:	4a1e      	ldr	r2, [pc, #120]	; (8004be8 <MX_TIM5_Init+0x98>)
 8004b70:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 8004b72:	4b1c      	ldr	r3, [pc, #112]	; (8004be4 <MX_TIM5_Init+0x94>)
 8004b74:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8004b78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <MX_TIM5_Init+0x94>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004b80:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <MX_TIM5_Init+0x94>)
 8004b82:	f04f 32ff 	mov.w	r2, #4294967295
 8004b86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b88:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <MX_TIM5_Init+0x94>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b8e:	4b15      	ldr	r3, [pc, #84]	; (8004be4 <MX_TIM5_Init+0x94>)
 8004b90:	2280      	movs	r2, #128	; 0x80
 8004b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004b94:	4813      	ldr	r0, [pc, #76]	; (8004be4 <MX_TIM5_Init+0x94>)
 8004b96:	f003 fda3 	bl	80086e0 <HAL_TIM_Base_Init>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004ba0:	f000 fa5c 	bl	800505c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ba8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004baa:	f107 0308 	add.w	r3, r7, #8
 8004bae:	4619      	mov	r1, r3
 8004bb0:	480c      	ldr	r0, [pc, #48]	; (8004be4 <MX_TIM5_Init+0x94>)
 8004bb2:	f004 fd0d 	bl	80095d0 <HAL_TIM_ConfigClockSource>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004bbc:	f000 fa4e 	bl	800505c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004bc8:	463b      	mov	r3, r7
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4805      	ldr	r0, [pc, #20]	; (8004be4 <MX_TIM5_Init+0x94>)
 8004bce:	f005 fb27 	bl	800a220 <HAL_TIMEx_MasterConfigSynchronization>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004bd8:	f000 fa40 	bl	800505c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004bdc:	bf00      	nop
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	200007b4 	.word	0x200007b4
 8004be8:	40000c00 	.word	0x40000c00

08004bec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08c      	sub	sp, #48	; 0x30
 8004bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004bf2:	f107 030c 	add.w	r3, r7, #12
 8004bf6:	2224      	movs	r2, #36	; 0x24
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f006 fd36 	bl	800b66c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c00:	1d3b      	adds	r3, r7, #4
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004c08:	4b22      	ldr	r3, [pc, #136]	; (8004c94 <MX_TIM8_Init+0xa8>)
 8004c0a:	4a23      	ldr	r2, [pc, #140]	; (8004c98 <MX_TIM8_Init+0xac>)
 8004c0c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004c0e:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <MX_TIM8_Init+0xa8>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c14:	4b1f      	ldr	r3, [pc, #124]	; (8004c94 <MX_TIM8_Init+0xa8>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <MX_TIM8_Init+0xa8>)
 8004c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c20:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c22:	4b1c      	ldr	r3, [pc, #112]	; (8004c94 <MX_TIM8_Init+0xa8>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004c28:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <MX_TIM8_Init+0xa8>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c2e:	4b19      	ldr	r3, [pc, #100]	; (8004c94 <MX_TIM8_Init+0xa8>)
 8004c30:	2280      	movs	r2, #128	; 0x80
 8004c32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004c34:	2303      	movs	r3, #3
 8004c36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 12;
 8004c44:	230c      	movs	r3, #12
 8004c46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004c50:	2300      	movs	r3, #0
 8004c52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 12;
 8004c54:	230c      	movs	r3, #12
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004c58:	f107 030c 	add.w	r3, r7, #12
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	480d      	ldr	r0, [pc, #52]	; (8004c94 <MX_TIM8_Init+0xa8>)
 8004c60:	f004 f91c 	bl	8008e9c <HAL_TIM_Encoder_Init>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004c6a:	f000 f9f7 	bl	800505c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004c76:	1d3b      	adds	r3, r7, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4806      	ldr	r0, [pc, #24]	; (8004c94 <MX_TIM8_Init+0xa8>)
 8004c7c:	f005 fad0 	bl	800a220 <HAL_TIMEx_MasterConfigSynchronization>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004c86:	f000 f9e9 	bl	800505c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004c8a:	bf00      	nop
 8004c8c:	3730      	adds	r7, #48	; 0x30
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	200007fc 	.word	0x200007fc
 8004c98:	40010400 	.word	0x40010400

08004c9c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004ca0:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <MX_UART5_Init+0x4c>)
 8004ca2:	4a12      	ldr	r2, [pc, #72]	; (8004cec <MX_UART5_Init+0x50>)
 8004ca4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <MX_UART5_Init+0x4c>)
 8004ca8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8004cac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004cae:	4b0e      	ldr	r3, [pc, #56]	; (8004ce8 <MX_UART5_Init+0x4c>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <MX_UART5_Init+0x4c>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004cba:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <MX_UART5_Init+0x4c>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <MX_UART5_Init+0x4c>)
 8004cc2:	220c      	movs	r2, #12
 8004cc4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cc6:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <MX_UART5_Init+0x4c>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <MX_UART5_Init+0x4c>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004cd2:	4805      	ldr	r0, [pc, #20]	; (8004ce8 <MX_UART5_Init+0x4c>)
 8004cd4:	f005 fb86 	bl	800a3e4 <HAL_UART_Init>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004cde:	f000 f9bd 	bl	800505c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004ce2:	bf00      	nop
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	200008a4 	.word	0x200008a4
 8004cec:	40005000 	.word	0x40005000

08004cf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004cf4:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <MX_USART1_UART_Init+0x4c>)
 8004cf6:	4a12      	ldr	r2, [pc, #72]	; (8004d40 <MX_USART1_UART_Init+0x50>)
 8004cf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004cfa:	4b10      	ldr	r3, [pc, #64]	; (8004d3c <MX_USART1_UART_Init+0x4c>)
 8004cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d02:	4b0e      	ldr	r3, [pc, #56]	; (8004d3c <MX_USART1_UART_Init+0x4c>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <MX_USART1_UART_Init+0x4c>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <MX_USART1_UART_Init+0x4c>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d14:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <MX_USART1_UART_Init+0x4c>)
 8004d16:	220c      	movs	r2, #12
 8004d18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d1a:	4b08      	ldr	r3, [pc, #32]	; (8004d3c <MX_USART1_UART_Init+0x4c>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <MX_USART1_UART_Init+0x4c>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d26:	4805      	ldr	r0, [pc, #20]	; (8004d3c <MX_USART1_UART_Init+0x4c>)
 8004d28:	f005 fb5c 	bl	800a3e4 <HAL_UART_Init>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004d32:	f000 f993 	bl	800505c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d36:	bf00      	nop
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200008e8 	.word	0x200008e8
 8004d40:	40011000 	.word	0x40011000

08004d44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d48:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <MX_USART2_UART_Init+0x4c>)
 8004d4a:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <MX_USART2_UART_Init+0x50>)
 8004d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004d4e:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <MX_USART2_UART_Init+0x4c>)
 8004d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d56:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <MX_USART2_UART_Init+0x4c>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <MX_USART2_UART_Init+0x4c>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d62:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <MX_USART2_UART_Init+0x4c>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d68:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <MX_USART2_UART_Init+0x4c>)
 8004d6a:	220c      	movs	r2, #12
 8004d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d6e:	4b08      	ldr	r3, [pc, #32]	; (8004d90 <MX_USART2_UART_Init+0x4c>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <MX_USART2_UART_Init+0x4c>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d7a:	4805      	ldr	r0, [pc, #20]	; (8004d90 <MX_USART2_UART_Init+0x4c>)
 8004d7c:	f005 fb32 	bl	800a3e4 <HAL_UART_Init>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004d86:	f000 f969 	bl	800505c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d8a:	bf00      	nop
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	2000092c 	.word	0x2000092c
 8004d94:	40004400 	.word	0x40004400

08004d98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <MX_USART3_UART_Init+0x4c>)
 8004d9e:	4a12      	ldr	r2, [pc, #72]	; (8004de8 <MX_USART3_UART_Init+0x50>)
 8004da0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004da2:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <MX_USART3_UART_Init+0x4c>)
 8004da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004da8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004daa:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <MX_USART3_UART_Init+0x4c>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004db0:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <MX_USART3_UART_Init+0x4c>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <MX_USART3_UART_Init+0x4c>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <MX_USART3_UART_Init+0x4c>)
 8004dbe:	220c      	movs	r2, #12
 8004dc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <MX_USART3_UART_Init+0x4c>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <MX_USART3_UART_Init+0x4c>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004dce:	4805      	ldr	r0, [pc, #20]	; (8004de4 <MX_USART3_UART_Init+0x4c>)
 8004dd0:	f005 fb08 	bl	800a3e4 <HAL_UART_Init>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004dda:	f000 f93f 	bl	800505c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004dde:	bf00      	nop
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000970 	.word	0x20000970
 8004de8:	40004800 	.word	0x40004800

08004dec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004df2:	2300      	movs	r3, #0
 8004df4:	607b      	str	r3, [r7, #4]
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <MX_DMA_Init+0x3c>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	4a0b      	ldr	r2, [pc, #44]	; (8004e28 <MX_DMA_Init+0x3c>)
 8004dfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e00:	6313      	str	r3, [r2, #48]	; 0x30
 8004e02:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <MX_DMA_Init+0x3c>)
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e0a:	607b      	str	r3, [r7, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2100      	movs	r1, #0
 8004e12:	202f      	movs	r0, #47	; 0x2f
 8004e14:	f001 fddf 	bl	80069d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004e18:	202f      	movs	r0, #47	; 0x2f
 8004e1a:	f001 fdf8 	bl	8006a0e <HAL_NVIC_EnableIRQ>

}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40023800 	.word	0x40023800

08004e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e32:	f107 0314 	add.w	r3, r7, #20
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	605a      	str	r2, [r3, #4]
 8004e3c:	609a      	str	r2, [r3, #8]
 8004e3e:	60da      	str	r2, [r3, #12]
 8004e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	4b64      	ldr	r3, [pc, #400]	; (8004fd8 <MX_GPIO_Init+0x1ac>)
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	4a63      	ldr	r2, [pc, #396]	; (8004fd8 <MX_GPIO_Init+0x1ac>)
 8004e4c:	f043 0304 	orr.w	r3, r3, #4
 8004e50:	6313      	str	r3, [r2, #48]	; 0x30
 8004e52:	4b61      	ldr	r3, [pc, #388]	; (8004fd8 <MX_GPIO_Init+0x1ac>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	f003 0304 	and.w	r3, r3, #4
 8004e5a:	613b      	str	r3, [r7, #16]
 8004e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	4b5d      	ldr	r3, [pc, #372]	; (8004fd8 <MX_GPIO_Init+0x1ac>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	4a5c      	ldr	r2, [pc, #368]	; (8004fd8 <MX_GPIO_Init+0x1ac>)
 8004e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6e:	4b5a      	ldr	r3, [pc, #360]	; (8004fd8 <MX_GPIO_Init+0x1ac>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	4b56      	ldr	r3, [pc, #344]	; (8004fd8 <MX_GPIO_Init+0x1ac>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	4a55      	ldr	r2, [pc, #340]	; (8004fd8 <MX_GPIO_Init+0x1ac>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	6313      	str	r3, [r2, #48]	; 0x30
 8004e8a:	4b53      	ldr	r3, [pc, #332]	; (8004fd8 <MX_GPIO_Init+0x1ac>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	4b4f      	ldr	r3, [pc, #316]	; (8004fd8 <MX_GPIO_Init+0x1ac>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	4a4e      	ldr	r2, [pc, #312]	; (8004fd8 <MX_GPIO_Init+0x1ac>)
 8004ea0:	f043 0302 	orr.w	r3, r3, #2
 8004ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ea6:	4b4c      	ldr	r3, [pc, #304]	; (8004fd8 <MX_GPIO_Init+0x1ac>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	607b      	str	r3, [r7, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	603b      	str	r3, [r7, #0]
 8004eb6:	4b48      	ldr	r3, [pc, #288]	; (8004fd8 <MX_GPIO_Init+0x1ac>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	4a47      	ldr	r2, [pc, #284]	; (8004fd8 <MX_GPIO_Init+0x1ac>)
 8004ebc:	f043 0308 	orr.w	r3, r3, #8
 8004ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ec2:	4b45      	ldr	r3, [pc, #276]	; (8004fd8 <MX_GPIO_Init+0x1ac>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2102      	movs	r1, #2
 8004ed2:	4842      	ldr	r0, [pc, #264]	; (8004fdc <MX_GPIO_Init+0x1b0>)
 8004ed4:	f002 fd80 	bl	80079d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2122      	movs	r1, #34	; 0x22
 8004edc:	4840      	ldr	r0, [pc, #256]	; (8004fe0 <MX_GPIO_Init+0x1b4>)
 8004ede:	f002 fd7b 	bl	80079d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f24e 0142 	movw	r1, #57410	; 0xe042
 8004ee8:	483e      	ldr	r0, [pc, #248]	; (8004fe4 <MX_GPIO_Init+0x1b8>)
 8004eea:	f002 fd75 	bl	80079d8 <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : On_Board_Button_Pin */
  GPIO_InitStruct.Pin = On_Board_Button_Pin;
 8004eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004ef4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(On_Board_Button_GPIO_Port, &GPIO_InitStruct);
 8004efe:	f107 0314 	add.w	r3, r7, #20
 8004f02:	4619      	mov	r1, r3
 8004f04:	4835      	ldr	r0, [pc, #212]	; (8004fdc <MX_GPIO_Init+0x1b0>)
 8004f06:	f002 fbbb 	bl	8007680 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f16:	2300      	movs	r3, #0
 8004f18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 8004f1a:	f107 0314 	add.w	r3, r7, #20
 8004f1e:	4619      	mov	r1, r3
 8004f20:	482e      	ldr	r0, [pc, #184]	; (8004fdc <MX_GPIO_Init+0x1b0>)
 8004f22:	f002 fbad 	bl	8007680 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 8004f26:	2322      	movs	r3, #34	; 0x22
 8004f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f32:	2300      	movs	r3, #0
 8004f34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f36:	f107 0314 	add.w	r3, r7, #20
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4828      	ldr	r0, [pc, #160]	; (8004fe0 <MX_GPIO_Init+0x1b4>)
 8004f3e:	f002 fb9f 	bl	8007680 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8004f42:	f24e 0342 	movw	r3, #57410	; 0xe042
 8004f46:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f50:	2300      	movs	r3, #0
 8004f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f54:	f107 0314 	add.w	r3, r7, #20
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4822      	ldr	r0, [pc, #136]	; (8004fe4 <MX_GPIO_Init+0x1b8>)
 8004f5c:	f002 fb90 	bl	8007680 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B2_Pin|Motor_Feedback_Pin;
 8004f60:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
 8004f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f6e:	f107 0314 	add.w	r3, r7, #20
 8004f72:	4619      	mov	r1, r3
 8004f74:	481b      	ldr	r0, [pc, #108]	; (8004fe4 <MX_GPIO_Init+0x1b8>)
 8004f76:	f002 fb83 	bl	8007680 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8004f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8004f88:	f107 0314 	add.w	r3, r7, #20
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4814      	ldr	r0, [pc, #80]	; (8004fe0 <MX_GPIO_Init+0x1b4>)
 8004f90:	f002 fb76 	bl	8007680 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004f94:	2310      	movs	r3, #16
 8004f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004fa2:	f107 0314 	add.w	r3, r7, #20
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	480e      	ldr	r0, [pc, #56]	; (8004fe4 <MX_GPIO_Init+0x1b8>)
 8004faa:	f002 fb69 	bl	8007680 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	200a      	movs	r0, #10
 8004fb4:	f001 fd0f 	bl	80069d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004fb8:	200a      	movs	r0, #10
 8004fba:	f001 fd28 	bl	8006a0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	2028      	movs	r0, #40	; 0x28
 8004fc4:	f001 fd07 	bl	80069d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004fc8:	2028      	movs	r0, #40	; 0x28
 8004fca:	f001 fd20 	bl	8006a0e <HAL_NVIC_EnableIRQ>

}
 8004fce:	bf00      	nop
 8004fd0:	3728      	adds	r7, #40	; 0x28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	40020800 	.word	0x40020800
 8004fe0:	40020000 	.word	0x40020000
 8004fe4:	40020400 	.word	0x40020400

08004fe8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	80fb      	strh	r3, [r7, #6]
	//ha meg lett nyomva a nucleon a kék gomb
	if(GPIO_Pin == On_Board_Button_Pin)
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff8:	d105      	bne.n	8005006 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		bFlag[0]=1;
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_GPIO_EXTI_Callback+0x38>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	701a      	strb	r2, [r3, #0]
		NVIC_DisableIRQ(On_Board_Button_EXTI_IRQn);
 8005000:	2028      	movs	r0, #40	; 0x28
 8005002:	f7ff f98d 	bl	8004320 <__NVIC_DisableIRQ>
	}
	if(GPIO_Pin == B1_Pin)
 8005006:	88fb      	ldrh	r3, [r7, #6]
 8005008:	2b10      	cmp	r3, #16
 800500a:	d105      	bne.n	8005018 <HAL_GPIO_EXTI_Callback+0x30>
	{
		bFlag[1]=1;
 800500c:	4b04      	ldr	r3, [pc, #16]	; (8005020 <HAL_GPIO_EXTI_Callback+0x38>)
 800500e:	2201      	movs	r2, #1
 8005010:	705a      	strb	r2, [r3, #1]
		NVIC_DisableIRQ(B1_EXTI_IRQn);
 8005012:	200a      	movs	r0, #10
 8005014:	f7ff f984 	bl	8004320 <__NVIC_DisableIRQ>
	}
}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20000274 	.word	0x20000274

08005024 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)Uart_Receive_From_PC_ISR(&huart1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a09      	ldr	r2, [pc, #36]	; (8005054 <HAL_UART_RxCpltCallback+0x30>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d103      	bne.n	800503c <HAL_UART_RxCpltCallback+0x18>
 8005034:	4807      	ldr	r0, [pc, #28]	; (8005054 <HAL_UART_RxCpltCallback+0x30>)
 8005036:	f7fc f9ed 	bl	8001414 <Uart_Receive_From_PC_ISR>
	else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(&huart3, &huart1);
}
 800503a:	e007      	b.n	800504c <HAL_UART_RxCpltCallback+0x28>
	else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(&huart3, &huart1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a06      	ldr	r2, [pc, #24]	; (8005058 <HAL_UART_RxCpltCallback+0x34>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d103      	bne.n	800504c <HAL_UART_RxCpltCallback+0x28>
 8005044:	4903      	ldr	r1, [pc, #12]	; (8005054 <HAL_UART_RxCpltCallback+0x30>)
 8005046:	4804      	ldr	r0, [pc, #16]	; (8005058 <HAL_UART_RxCpltCallback+0x34>)
 8005048:	f7fd fdaa 	bl	8002ba0 <Uart_Receive_Thunderboard_ISR>
}
 800504c:	bf00      	nop
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	200008e8 	.word	0x200008e8
 8005058:	20000970 	.word	0x20000970

0800505c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005060:	b672      	cpsid	i
}
 8005062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005064:	e7fe      	b.n	8005064 <Error_Handler+0x8>
	...

08005068 <Remote_Control_Init>:
#include <math.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
	tEdge[0] = 1000;
 8005072:	4b0a      	ldr	r3, [pc, #40]	; (800509c <Remote_Control_Init+0x34>)
 8005074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005078:	601a      	str	r2, [r3, #0]
	tEdge[1] = 500;
 800507a:	4b08      	ldr	r3, [pc, #32]	; (800509c <Remote_Control_Init+0x34>)
 800507c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005080:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 8005082:	4b06      	ldr	r3, [pc, #24]	; (800509c <Remote_Control_Init+0x34>)
 8005084:	2200      	movs	r2, #0
 8005086:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 8005088:	2303      	movs	r3, #3
 800508a:	4a04      	ldr	r2, [pc, #16]	; (800509c <Remote_Control_Init+0x34>)
 800508c:	6839      	ldr	r1, [r7, #0]
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f003 fd5a 	bl	8008b48 <HAL_TIM_IC_Start_DMA>
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	200009b8 	.word	0x200009b8

080050a0 <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
	static int32_t dt1=85;
	static int32_t dt2=85;
	static uint32_t tLow=85;
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 80050ae:	4b51      	ldr	r3, [pc, #324]	; (80051f4 <Remote_Control_Task+0x154>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	f0c0 8099 	bcc.w	80051ec <Remote_Control_Task+0x14c>
	remote_control_tick = tick + period;
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	4413      	add	r3, r2
 80050c0:	4a4c      	ldr	r2, [pc, #304]	; (80051f4 <Remote_Control_Task+0x154>)
 80050c2:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 80050c4:	201e      	movs	r0, #30
 80050c6:	f001 fcb0 	bl	8006a2a <HAL_NVIC_DisableIRQ>
	dt0=abs(tEdge[1]-tEdge[0]);
 80050ca:	4b4b      	ldr	r3, [pc, #300]	; (80051f8 <Remote_Control_Task+0x158>)
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	4b4a      	ldr	r3, [pc, #296]	; (80051f8 <Remote_Control_Task+0x158>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bfb8      	it	lt
 80050d8:	425b      	neglt	r3, r3
 80050da:	4a48      	ldr	r2, [pc, #288]	; (80051fc <Remote_Control_Task+0x15c>)
 80050dc:	6013      	str	r3, [r2, #0]
	dt1=abs(tEdge[2]-tEdge[1]);
 80050de:	4b46      	ldr	r3, [pc, #280]	; (80051f8 <Remote_Control_Task+0x158>)
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	4b45      	ldr	r3, [pc, #276]	; (80051f8 <Remote_Control_Task+0x158>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	bfb8      	it	lt
 80050ec:	425b      	neglt	r3, r3
 80050ee:	4a44      	ldr	r2, [pc, #272]	; (8005200 <Remote_Control_Task+0x160>)
 80050f0:	6013      	str	r3, [r2, #0]
	dt2=abs(tEdge[0]-tEdge[2]);
 80050f2:	4b41      	ldr	r3, [pc, #260]	; (80051f8 <Remote_Control_Task+0x158>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b40      	ldr	r3, [pc, #256]	; (80051f8 <Remote_Control_Task+0x158>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	bfb8      	it	lt
 8005100:	425b      	neglt	r3, r3
 8005102:	4a40      	ldr	r2, [pc, #256]	; (8005204 <Remote_Control_Task+0x164>)
 8005104:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 8005106:	201e      	movs	r0, #30
 8005108:	f001 fc81 	bl	8006a0e <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 800510c:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <Remote_Control_Task+0x15c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f241 3288 	movw	r2, #5000	; 0x1388
 8005114:	4293      	cmp	r3, r2
 8005116:	dd06      	ble.n	8005126 <Remote_Control_Task+0x86>
 8005118:	4b38      	ldr	r3, [pc, #224]	; (80051fc <Remote_Control_Task+0x15c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8005120:	33ff      	adds	r3, #255	; 0xff
 8005122:	4a36      	ldr	r2, [pc, #216]	; (80051fc <Remote_Control_Task+0x15c>)
 8005124:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 8005126:	4b36      	ldr	r3, [pc, #216]	; (8005200 <Remote_Control_Task+0x160>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f241 3288 	movw	r2, #5000	; 0x1388
 800512e:	4293      	cmp	r3, r2
 8005130:	dd06      	ble.n	8005140 <Remote_Control_Task+0xa0>
 8005132:	4b33      	ldr	r3, [pc, #204]	; (8005200 <Remote_Control_Task+0x160>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800513a:	33ff      	adds	r3, #255	; 0xff
 800513c:	4a30      	ldr	r2, [pc, #192]	; (8005200 <Remote_Control_Task+0x160>)
 800513e:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 8005140:	4b30      	ldr	r3, [pc, #192]	; (8005204 <Remote_Control_Task+0x164>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f241 3288 	movw	r2, #5000	; 0x1388
 8005148:	4293      	cmp	r3, r2
 800514a:	dd06      	ble.n	800515a <Remote_Control_Task+0xba>
 800514c:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <Remote_Control_Task+0x164>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8005154:	33ff      	adds	r3, #255	; 0xff
 8005156:	4a2b      	ldr	r2, [pc, #172]	; (8005204 <Remote_Control_Task+0x164>)
 8005158:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 800515a:	4b28      	ldr	r3, [pc, #160]	; (80051fc <Remote_Control_Task+0x15c>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4b28      	ldr	r3, [pc, #160]	; (8005200 <Remote_Control_Task+0x160>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	da0b      	bge.n	800517e <Remote_Control_Task+0xde>
 8005166:	4b25      	ldr	r3, [pc, #148]	; (80051fc <Remote_Control_Task+0x15c>)
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4b26      	ldr	r3, [pc, #152]	; (8005204 <Remote_Control_Task+0x164>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	da05      	bge.n	800517e <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 8005172:	4b22      	ldr	r3, [pc, #136]	; (80051fc <Remote_Control_Task+0x15c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	4b23      	ldr	r3, [pc, #140]	; (8005208 <Remote_Control_Task+0x168>)
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	e016      	b.n	80051ac <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 800517e:	4b20      	ldr	r3, [pc, #128]	; (8005200 <Remote_Control_Task+0x160>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b1e      	ldr	r3, [pc, #120]	; (80051fc <Remote_Control_Task+0x15c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	da0b      	bge.n	80051a2 <Remote_Control_Task+0x102>
 800518a:	4b1d      	ldr	r3, [pc, #116]	; (8005200 <Remote_Control_Task+0x160>)
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	4b1d      	ldr	r3, [pc, #116]	; (8005204 <Remote_Control_Task+0x164>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	da05      	bge.n	80051a2 <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 8005196:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <Remote_Control_Task+0x160>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	4b1a      	ldr	r3, [pc, #104]	; (8005208 <Remote_Control_Task+0x168>)
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	e004      	b.n	80051ac <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 80051a2:	4b18      	ldr	r3, [pc, #96]	; (8005204 <Remote_Control_Task+0x164>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	4b17      	ldr	r3, [pc, #92]	; (8005208 <Remote_Control_Task+0x168>)
 80051aa:	601a      	str	r2, [r3, #0]
	sprintf(string,"%d\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 10);
	remote_control_tick = tick + 1000;
#endif

	if((tLow>70 && tLow<100) || tLow==1000)
 80051ac:	4b16      	ldr	r3, [pc, #88]	; (8005208 <Remote_Control_Task+0x168>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b46      	cmp	r3, #70	; 0x46
 80051b2:	d903      	bls.n	80051bc <Remote_Control_Task+0x11c>
 80051b4:	4b14      	ldr	r3, [pc, #80]	; (8005208 <Remote_Control_Task+0x168>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b63      	cmp	r3, #99	; 0x63
 80051ba:	d904      	bls.n	80051c6 <Remote_Control_Task+0x126>
 80051bc:	4b12      	ldr	r3, [pc, #72]	; (8005208 <Remote_Control_Task+0x168>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051c4:	d103      	bne.n	80051ce <Remote_Control_Task+0x12e>
	{
		//LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
		motorEnRemote=0;//állítsuk le a motort ha meghuzzuk a ravaszt
 80051c6:	4b11      	ldr	r3, [pc, #68]	; (800520c <Remote_Control_Task+0x16c>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	e00f      	b.n	80051ee <Remote_Control_Task+0x14e>
	}
	else
	{
		//LED_R(0);
		if(tLow <= 70) motorEnRemote=1;
 80051ce:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <Remote_Control_Task+0x168>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b46      	cmp	r3, #70	; 0x46
 80051d4:	d803      	bhi.n	80051de <Remote_Control_Task+0x13e>
 80051d6:	4b0d      	ldr	r3, [pc, #52]	; (800520c <Remote_Control_Task+0x16c>)
 80051d8:	2201      	movs	r2, #1
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	e002      	b.n	80051e4 <Remote_Control_Task+0x144>
		else motorEnRemote=2;
 80051de:	4b0b      	ldr	r3, [pc, #44]	; (800520c <Remote_Control_Task+0x16c>)
 80051e0:	2202      	movs	r2, #2
 80051e2:	701a      	strb	r2, [r3, #0]
		readytorace=1;
 80051e4:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <Remote_Control_Task+0x170>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	e000      	b.n	80051ee <Remote_Control_Task+0x14e>
	if(remote_control_tick>tick) return;
 80051ec:	bf00      	nop

	}
}
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	200009c4 	.word	0x200009c4
 80051f8:	200009b8 	.word	0x200009b8
 80051fc:	20000068 	.word	0x20000068
 8005200:	2000006c 	.word	0x2000006c
 8005204:	20000070 	.word	0x20000070
 8005208:	20000074 	.word	0x20000074
 800520c:	200009b4 	.word	0x200009b4
 8005210:	20000298 	.word	0x20000298

08005214 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800521a:	2300      	movs	r3, #0
 800521c:	607b      	str	r3, [r7, #4]
 800521e:	4b10      	ldr	r3, [pc, #64]	; (8005260 <HAL_MspInit+0x4c>)
 8005220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005222:	4a0f      	ldr	r2, [pc, #60]	; (8005260 <HAL_MspInit+0x4c>)
 8005224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005228:	6453      	str	r3, [r2, #68]	; 0x44
 800522a:	4b0d      	ldr	r3, [pc, #52]	; (8005260 <HAL_MspInit+0x4c>)
 800522c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005232:	607b      	str	r3, [r7, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005236:	2300      	movs	r3, #0
 8005238:	603b      	str	r3, [r7, #0]
 800523a:	4b09      	ldr	r3, [pc, #36]	; (8005260 <HAL_MspInit+0x4c>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	4a08      	ldr	r2, [pc, #32]	; (8005260 <HAL_MspInit+0x4c>)
 8005240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005244:	6413      	str	r3, [r2, #64]	; 0x40
 8005246:	4b06      	ldr	r3, [pc, #24]	; (8005260 <HAL_MspInit+0x4c>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005252:	2007      	movs	r0, #7
 8005254:	f001 fbb4 	bl	80069c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005258:	bf00      	nop
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40023800 	.word	0x40023800

08005264 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08c      	sub	sp, #48	; 0x30
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800526c:	f107 031c 	add.w	r3, r7, #28
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	605a      	str	r2, [r3, #4]
 8005276:	609a      	str	r2, [r3, #8]
 8005278:	60da      	str	r2, [r3, #12]
 800527a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a2e      	ldr	r2, [pc, #184]	; (800533c <HAL_ADC_MspInit+0xd8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d128      	bne.n	80052d8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005286:	2300      	movs	r3, #0
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	4b2d      	ldr	r3, [pc, #180]	; (8005340 <HAL_ADC_MspInit+0xdc>)
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	4a2c      	ldr	r2, [pc, #176]	; (8005340 <HAL_ADC_MspInit+0xdc>)
 8005290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005294:	6453      	str	r3, [r2, #68]	; 0x44
 8005296:	4b2a      	ldr	r3, [pc, #168]	; (8005340 <HAL_ADC_MspInit+0xdc>)
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	61bb      	str	r3, [r7, #24]
 80052a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	4b26      	ldr	r3, [pc, #152]	; (8005340 <HAL_ADC_MspInit+0xdc>)
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	4a25      	ldr	r2, [pc, #148]	; (8005340 <HAL_ADC_MspInit+0xdc>)
 80052ac:	f043 0302 	orr.w	r3, r3, #2
 80052b0:	6313      	str	r3, [r2, #48]	; 0x30
 80052b2:	4b23      	ldr	r3, [pc, #140]	; (8005340 <HAL_ADC_MspInit+0xdc>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 80052be:	2301      	movs	r3, #1
 80052c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052c2:	2303      	movs	r3, #3
 80052c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 80052ca:	f107 031c 	add.w	r3, r7, #28
 80052ce:	4619      	mov	r1, r3
 80052d0:	481c      	ldr	r0, [pc, #112]	; (8005344 <HAL_ADC_MspInit+0xe0>)
 80052d2:	f002 f9d5 	bl	8007680 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80052d6:	e02c      	b.n	8005332 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1a      	ldr	r2, [pc, #104]	; (8005348 <HAL_ADC_MspInit+0xe4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d127      	bne.n	8005332 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80052e2:	2300      	movs	r3, #0
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	4b16      	ldr	r3, [pc, #88]	; (8005340 <HAL_ADC_MspInit+0xdc>)
 80052e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ea:	4a15      	ldr	r2, [pc, #84]	; (8005340 <HAL_ADC_MspInit+0xdc>)
 80052ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052f0:	6453      	str	r3, [r2, #68]	; 0x44
 80052f2:	4b13      	ldr	r3, [pc, #76]	; (8005340 <HAL_ADC_MspInit+0xdc>)
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <HAL_ADC_MspInit+0xdc>)
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	4a0e      	ldr	r2, [pc, #56]	; (8005340 <HAL_ADC_MspInit+0xdc>)
 8005308:	f043 0304 	orr.w	r3, r3, #4
 800530c:	6313      	str	r3, [r2, #48]	; 0x30
 800530e:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <HAL_ADC_MspInit+0xdc>)
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	f003 0304 	and.w	r3, r3, #4
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Bat_Pin;
 800531a:	2308      	movs	r3, #8
 800531c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800531e:	2303      	movs	r3, #3
 8005320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005322:	2300      	movs	r3, #0
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_Bat_GPIO_Port, &GPIO_InitStruct);
 8005326:	f107 031c 	add.w	r3, r7, #28
 800532a:	4619      	mov	r1, r3
 800532c:	4807      	ldr	r0, [pc, #28]	; (800534c <HAL_ADC_MspInit+0xe8>)
 800532e:	f002 f9a7 	bl	8007680 <HAL_GPIO_Init>
}
 8005332:	bf00      	nop
 8005334:	3730      	adds	r7, #48	; 0x30
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40012000 	.word	0x40012000
 8005340:	40023800 	.word	0x40023800
 8005344:	40020400 	.word	0x40020400
 8005348:	40012100 	.word	0x40012100
 800534c:	40020800 	.word	0x40020800

08005350 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08e      	sub	sp, #56	; 0x38
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	609a      	str	r2, [r3, #8]
 8005364:	60da      	str	r2, [r3, #12]
 8005366:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a5e      	ldr	r2, [pc, #376]	; (80054e8 <HAL_TIM_Base_MspInit+0x198>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d10e      	bne.n	8005390 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005372:	2300      	movs	r3, #0
 8005374:	623b      	str	r3, [r7, #32]
 8005376:	4b5d      	ldr	r3, [pc, #372]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 8005378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537a:	4a5c      	ldr	r2, [pc, #368]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	6453      	str	r3, [r2, #68]	; 0x44
 8005382:	4b5a      	ldr	r3, [pc, #360]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 8005384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	623b      	str	r3, [r7, #32]
 800538c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800538e:	e0a7      	b.n	80054e0 <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM2)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d116      	bne.n	80053c8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	4b53      	ldr	r3, [pc, #332]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	4a52      	ldr	r2, [pc, #328]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	6413      	str	r3, [r2, #64]	; 0x40
 80053aa:	4b50      	ldr	r3, [pc, #320]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80053b6:	2200      	movs	r2, #0
 80053b8:	2100      	movs	r1, #0
 80053ba:	201c      	movs	r0, #28
 80053bc:	f001 fb0b 	bl	80069d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80053c0:	201c      	movs	r0, #28
 80053c2:	f001 fb24 	bl	8006a0e <HAL_NVIC_EnableIRQ>
}
 80053c6:	e08b      	b.n	80054e0 <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM3)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a48      	ldr	r2, [pc, #288]	; (80054f0 <HAL_TIM_Base_MspInit+0x1a0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d10e      	bne.n	80053f0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80053d2:	2300      	movs	r3, #0
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	4b45      	ldr	r3, [pc, #276]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	4a44      	ldr	r2, [pc, #272]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 80053dc:	f043 0302 	orr.w	r3, r3, #2
 80053e0:	6413      	str	r3, [r2, #64]	; 0x40
 80053e2:	4b42      	ldr	r3, [pc, #264]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	69bb      	ldr	r3, [r7, #24]
}
 80053ee:	e077      	b.n	80054e0 <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM4)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a3f      	ldr	r2, [pc, #252]	; (80054f4 <HAL_TIM_Base_MspInit+0x1a4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d15f      	bne.n	80054ba <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	4b3b      	ldr	r3, [pc, #236]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	4a3a      	ldr	r2, [pc, #232]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 8005404:	f043 0304 	orr.w	r3, r3, #4
 8005408:	6413      	str	r3, [r2, #64]	; 0x40
 800540a:	4b38      	ldr	r3, [pc, #224]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005416:	2300      	movs	r3, #0
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	4b34      	ldr	r3, [pc, #208]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	4a33      	ldr	r2, [pc, #204]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 8005420:	f043 0302 	orr.w	r3, r3, #2
 8005424:	6313      	str	r3, [r2, #48]	; 0x30
 8005426:	4b31      	ldr	r3, [pc, #196]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 8005432:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005438:	2302      	movs	r3, #2
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800543c:	2300      	movs	r3, #0
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005440:	2300      	movs	r3, #0
 8005442:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005444:	2302      	movs	r3, #2
 8005446:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800544c:	4619      	mov	r1, r3
 800544e:	482a      	ldr	r0, [pc, #168]	; (80054f8 <HAL_TIM_Base_MspInit+0x1a8>)
 8005450:	f002 f916 	bl	8007680 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8005454:	4b29      	ldr	r3, [pc, #164]	; (80054fc <HAL_TIM_Base_MspInit+0x1ac>)
 8005456:	4a2a      	ldr	r2, [pc, #168]	; (8005500 <HAL_TIM_Base_MspInit+0x1b0>)
 8005458:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 800545a:	4b28      	ldr	r3, [pc, #160]	; (80054fc <HAL_TIM_Base_MspInit+0x1ac>)
 800545c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005460:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005462:	4b26      	ldr	r3, [pc, #152]	; (80054fc <HAL_TIM_Base_MspInit+0x1ac>)
 8005464:	2200      	movs	r2, #0
 8005466:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005468:	4b24      	ldr	r3, [pc, #144]	; (80054fc <HAL_TIM_Base_MspInit+0x1ac>)
 800546a:	2200      	movs	r2, #0
 800546c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800546e:	4b23      	ldr	r3, [pc, #140]	; (80054fc <HAL_TIM_Base_MspInit+0x1ac>)
 8005470:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005474:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005476:	4b21      	ldr	r3, [pc, #132]	; (80054fc <HAL_TIM_Base_MspInit+0x1ac>)
 8005478:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800547c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800547e:	4b1f      	ldr	r3, [pc, #124]	; (80054fc <HAL_TIM_Base_MspInit+0x1ac>)
 8005480:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005484:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8005486:	4b1d      	ldr	r3, [pc, #116]	; (80054fc <HAL_TIM_Base_MspInit+0x1ac>)
 8005488:	f44f 7280 	mov.w	r2, #256	; 0x100
 800548c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800548e:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <HAL_TIM_Base_MspInit+0x1ac>)
 8005490:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005494:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005496:	4b19      	ldr	r3, [pc, #100]	; (80054fc <HAL_TIM_Base_MspInit+0x1ac>)
 8005498:	2200      	movs	r2, #0
 800549a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800549c:	4817      	ldr	r0, [pc, #92]	; (80054fc <HAL_TIM_Base_MspInit+0x1ac>)
 800549e:	f001 fadf 	bl	8006a60 <HAL_DMA_Init>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_TIM_Base_MspInit+0x15c>
      Error_Handler();
 80054a8:	f7ff fdd8 	bl	800505c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a13      	ldr	r2, [pc, #76]	; (80054fc <HAL_TIM_Base_MspInit+0x1ac>)
 80054b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80054b2:	4a12      	ldr	r2, [pc, #72]	; (80054fc <HAL_TIM_Base_MspInit+0x1ac>)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80054b8:	e012      	b.n	80054e0 <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM5)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a11      	ldr	r2, [pc, #68]	; (8005504 <HAL_TIM_Base_MspInit+0x1b4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d10d      	bne.n	80054e0 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80054c4:	2300      	movs	r3, #0
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	4b08      	ldr	r3, [pc, #32]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	4a07      	ldr	r2, [pc, #28]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 80054ce:	f043 0308 	orr.w	r3, r3, #8
 80054d2:	6413      	str	r3, [r2, #64]	; 0x40
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <HAL_TIM_Base_MspInit+0x19c>)
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]
}
 80054e0:	bf00      	nop
 80054e2:	3738      	adds	r7, #56	; 0x38
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40010000 	.word	0x40010000
 80054ec:	40023800 	.word	0x40023800
 80054f0:	40000400 	.word	0x40000400
 80054f4:	40000800 	.word	0x40000800
 80054f8:	40020400 	.word	0x40020400
 80054fc:	20000844 	.word	0x20000844
 8005500:	400260b8 	.word	0x400260b8
 8005504:	40000c00 	.word	0x40000c00

08005508 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08a      	sub	sp, #40	; 0x28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005510:	f107 0314 	add.w	r3, r7, #20
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	605a      	str	r2, [r3, #4]
 800551a:	609a      	str	r2, [r3, #8]
 800551c:	60da      	str	r2, [r3, #12]
 800551e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a19      	ldr	r2, [pc, #100]	; (800558c <HAL_TIM_Encoder_MspInit+0x84>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d12b      	bne.n	8005582 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	4b18      	ldr	r3, [pc, #96]	; (8005590 <HAL_TIM_Encoder_MspInit+0x88>)
 8005530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005532:	4a17      	ldr	r2, [pc, #92]	; (8005590 <HAL_TIM_Encoder_MspInit+0x88>)
 8005534:	f043 0302 	orr.w	r3, r3, #2
 8005538:	6453      	str	r3, [r2, #68]	; 0x44
 800553a:	4b15      	ldr	r3, [pc, #84]	; (8005590 <HAL_TIM_Encoder_MspInit+0x88>)
 800553c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	4b11      	ldr	r3, [pc, #68]	; (8005590 <HAL_TIM_Encoder_MspInit+0x88>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	4a10      	ldr	r2, [pc, #64]	; (8005590 <HAL_TIM_Encoder_MspInit+0x88>)
 8005550:	f043 0304 	orr.w	r3, r3, #4
 8005554:	6313      	str	r3, [r2, #48]	; 0x30
 8005556:	4b0e      	ldr	r3, [pc, #56]	; (8005590 <HAL_TIM_Encoder_MspInit+0x88>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005562:	23c0      	movs	r3, #192	; 0xc0
 8005564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005566:	2302      	movs	r3, #2
 8005568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800556e:	2300      	movs	r3, #0
 8005570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005572:	2303      	movs	r3, #3
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005576:	f107 0314 	add.w	r3, r7, #20
 800557a:	4619      	mov	r1, r3
 800557c:	4805      	ldr	r0, [pc, #20]	; (8005594 <HAL_TIM_Encoder_MspInit+0x8c>)
 800557e:	f002 f87f 	bl	8007680 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005582:	bf00      	nop
 8005584:	3728      	adds	r7, #40	; 0x28
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	40010400 	.word	0x40010400
 8005590:	40023800 	.word	0x40023800
 8005594:	40020800 	.word	0x40020800

08005598 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	; 0x28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a0:	f107 0314 	add.w	r3, r7, #20
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	605a      	str	r2, [r3, #4]
 80055aa:	609a      	str	r2, [r3, #8]
 80055ac:	60da      	str	r2, [r3, #12]
 80055ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a37      	ldr	r2, [pc, #220]	; (8005694 <HAL_TIM_MspPostInit+0xfc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d11f      	bne.n	80055fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	4b36      	ldr	r3, [pc, #216]	; (8005698 <HAL_TIM_MspPostInit+0x100>)
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	4a35      	ldr	r2, [pc, #212]	; (8005698 <HAL_TIM_MspPostInit+0x100>)
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	6313      	str	r3, [r2, #48]	; 0x30
 80055ca:	4b33      	ldr	r3, [pc, #204]	; (8005698 <HAL_TIM_MspPostInit+0x100>)
 80055cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 80055d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055dc:	2302      	movs	r3, #2
 80055de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055e4:	2300      	movs	r3, #0
 80055e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80055e8:	2301      	movs	r3, #1
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 80055ec:	f107 0314 	add.w	r3, r7, #20
 80055f0:	4619      	mov	r1, r3
 80055f2:	482a      	ldr	r0, [pc, #168]	; (800569c <HAL_TIM_MspPostInit+0x104>)
 80055f4:	f002 f844 	bl	8007680 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80055f8:	e047      	b.n	800568a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005602:	d11f      	bne.n	8005644 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	4b23      	ldr	r3, [pc, #140]	; (8005698 <HAL_TIM_MspPostInit+0x100>)
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	4a22      	ldr	r2, [pc, #136]	; (8005698 <HAL_TIM_MspPostInit+0x100>)
 800560e:	f043 0301 	orr.w	r3, r3, #1
 8005612:	6313      	str	r3, [r2, #48]	; 0x30
 8005614:	4b20      	ldr	r3, [pc, #128]	; (8005698 <HAL_TIM_MspPostInit+0x100>)
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 8005620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005626:	2302      	movs	r3, #2
 8005628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800562e:	2300      	movs	r3, #0
 8005630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005632:	2301      	movs	r3, #1
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 8005636:	f107 0314 	add.w	r3, r7, #20
 800563a:	4619      	mov	r1, r3
 800563c:	4817      	ldr	r0, [pc, #92]	; (800569c <HAL_TIM_MspPostInit+0x104>)
 800563e:	f002 f81f 	bl	8007680 <HAL_GPIO_Init>
}
 8005642:	e022      	b.n	800568a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <HAL_TIM_MspPostInit+0x108>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d11d      	bne.n	800568a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]
 8005652:	4b11      	ldr	r3, [pc, #68]	; (8005698 <HAL_TIM_MspPostInit+0x100>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	4a10      	ldr	r2, [pc, #64]	; (8005698 <HAL_TIM_MspPostInit+0x100>)
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	6313      	str	r3, [r2, #48]	; 0x30
 800565e:	4b0e      	ldr	r3, [pc, #56]	; (8005698 <HAL_TIM_MspPostInit+0x100>)
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	60bb      	str	r3, [r7, #8]
 8005668:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 800566a:	23c0      	movs	r3, #192	; 0xc0
 800566c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800566e:	2302      	movs	r3, #2
 8005670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005672:	2300      	movs	r3, #0
 8005674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005676:	2300      	movs	r3, #0
 8005678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800567a:	2302      	movs	r3, #2
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800567e:	f107 0314 	add.w	r3, r7, #20
 8005682:	4619      	mov	r1, r3
 8005684:	4805      	ldr	r0, [pc, #20]	; (800569c <HAL_TIM_MspPostInit+0x104>)
 8005686:	f001 fffb 	bl	8007680 <HAL_GPIO_Init>
}
 800568a:	bf00      	nop
 800568c:	3728      	adds	r7, #40	; 0x28
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40010000 	.word	0x40010000
 8005698:	40023800 	.word	0x40023800
 800569c:	40020000 	.word	0x40020000
 80056a0:	40000400 	.word	0x40000400

080056a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b090      	sub	sp, #64	; 0x40
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	605a      	str	r2, [r3, #4]
 80056b6:	609a      	str	r2, [r3, #8]
 80056b8:	60da      	str	r2, [r3, #12]
 80056ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a80      	ldr	r2, [pc, #512]	; (80058c4 <HAL_UART_MspInit+0x220>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d153      	bne.n	800576e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80056c6:	2300      	movs	r3, #0
 80056c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ca:	4b7f      	ldr	r3, [pc, #508]	; (80058c8 <HAL_UART_MspInit+0x224>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	4a7e      	ldr	r2, [pc, #504]	; (80058c8 <HAL_UART_MspInit+0x224>)
 80056d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056d4:	6413      	str	r3, [r2, #64]	; 0x40
 80056d6:	4b7c      	ldr	r3, [pc, #496]	; (80058c8 <HAL_UART_MspInit+0x224>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056de:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056e2:	2300      	movs	r3, #0
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
 80056e6:	4b78      	ldr	r3, [pc, #480]	; (80058c8 <HAL_UART_MspInit+0x224>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	4a77      	ldr	r2, [pc, #476]	; (80058c8 <HAL_UART_MspInit+0x224>)
 80056ec:	f043 0304 	orr.w	r3, r3, #4
 80056f0:	6313      	str	r3, [r2, #48]	; 0x30
 80056f2:	4b75      	ldr	r3, [pc, #468]	; (80058c8 <HAL_UART_MspInit+0x224>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	623b      	str	r3, [r7, #32]
 8005702:	4b71      	ldr	r3, [pc, #452]	; (80058c8 <HAL_UART_MspInit+0x224>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	4a70      	ldr	r2, [pc, #448]	; (80058c8 <HAL_UART_MspInit+0x224>)
 8005708:	f043 0308 	orr.w	r3, r3, #8
 800570c:	6313      	str	r3, [r2, #48]	; 0x30
 800570e:	4b6e      	ldr	r3, [pc, #440]	; (80058c8 <HAL_UART_MspInit+0x224>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	623b      	str	r3, [r7, #32]
 8005718:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 800571a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800571e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005720:	2302      	movs	r3, #2
 8005722:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005724:	2300      	movs	r3, #0
 8005726:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005728:	2303      	movs	r3, #3
 800572a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800572c:	2308      	movs	r3, #8
 800572e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 8005730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005734:	4619      	mov	r1, r3
 8005736:	4865      	ldr	r0, [pc, #404]	; (80058cc <HAL_UART_MspInit+0x228>)
 8005738:	f001 ffa2 	bl	8007680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 800573c:	2304      	movs	r3, #4
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005740:	2302      	movs	r3, #2
 8005742:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005744:	2300      	movs	r3, #0
 8005746:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005748:	2303      	movs	r3, #3
 800574a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800574c:	2308      	movs	r3, #8
 800574e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 8005750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005754:	4619      	mov	r1, r3
 8005756:	485e      	ldr	r0, [pc, #376]	; (80058d0 <HAL_UART_MspInit+0x22c>)
 8005758:	f001 ff92 	bl	8007680 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800575c:	2200      	movs	r2, #0
 800575e:	2100      	movs	r1, #0
 8005760:	2035      	movs	r0, #53	; 0x35
 8005762:	f001 f938 	bl	80069d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005766:	2035      	movs	r0, #53	; 0x35
 8005768:	f001 f951 	bl	8006a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800576c:	e0a6      	b.n	80058bc <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART1)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a58      	ldr	r2, [pc, #352]	; (80058d4 <HAL_UART_MspInit+0x230>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d135      	bne.n	80057e4 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005778:	2300      	movs	r3, #0
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	4b52      	ldr	r3, [pc, #328]	; (80058c8 <HAL_UART_MspInit+0x224>)
 800577e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005780:	4a51      	ldr	r2, [pc, #324]	; (80058c8 <HAL_UART_MspInit+0x224>)
 8005782:	f043 0310 	orr.w	r3, r3, #16
 8005786:	6453      	str	r3, [r2, #68]	; 0x44
 8005788:	4b4f      	ldr	r3, [pc, #316]	; (80058c8 <HAL_UART_MspInit+0x224>)
 800578a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	61fb      	str	r3, [r7, #28]
 8005792:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005794:	2300      	movs	r3, #0
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	4b4b      	ldr	r3, [pc, #300]	; (80058c8 <HAL_UART_MspInit+0x224>)
 800579a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579c:	4a4a      	ldr	r2, [pc, #296]	; (80058c8 <HAL_UART_MspInit+0x224>)
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	6313      	str	r3, [r2, #48]	; 0x30
 80057a4:	4b48      	ldr	r3, [pc, #288]	; (80058c8 <HAL_UART_MspInit+0x224>)
 80057a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 80057b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057b6:	2302      	movs	r3, #2
 80057b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057be:	2303      	movs	r3, #3
 80057c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80057c2:	2307      	movs	r3, #7
 80057c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057ca:	4619      	mov	r1, r3
 80057cc:	4842      	ldr	r0, [pc, #264]	; (80058d8 <HAL_UART_MspInit+0x234>)
 80057ce:	f001 ff57 	bl	8007680 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80057d2:	2200      	movs	r2, #0
 80057d4:	2100      	movs	r1, #0
 80057d6:	2025      	movs	r0, #37	; 0x25
 80057d8:	f001 f8fd 	bl	80069d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80057dc:	2025      	movs	r0, #37	; 0x25
 80057de:	f001 f916 	bl	8006a0e <HAL_NVIC_EnableIRQ>
}
 80057e2:	e06b      	b.n	80058bc <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART2)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a3c      	ldr	r2, [pc, #240]	; (80058dc <HAL_UART_MspInit+0x238>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d12c      	bne.n	8005848 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	4b35      	ldr	r3, [pc, #212]	; (80058c8 <HAL_UART_MspInit+0x224>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	4a34      	ldr	r2, [pc, #208]	; (80058c8 <HAL_UART_MspInit+0x224>)
 80057f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057fc:	6413      	str	r3, [r2, #64]	; 0x40
 80057fe:	4b32      	ldr	r3, [pc, #200]	; (80058c8 <HAL_UART_MspInit+0x224>)
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800580a:	2300      	movs	r3, #0
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	4b2e      	ldr	r3, [pc, #184]	; (80058c8 <HAL_UART_MspInit+0x224>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	4a2d      	ldr	r2, [pc, #180]	; (80058c8 <HAL_UART_MspInit+0x224>)
 8005814:	f043 0301 	orr.w	r3, r3, #1
 8005818:	6313      	str	r3, [r2, #48]	; 0x30
 800581a:	4b2b      	ldr	r3, [pc, #172]	; (80058c8 <HAL_UART_MspInit+0x224>)
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8005826:	230c      	movs	r3, #12
 8005828:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800582a:	2302      	movs	r3, #2
 800582c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800582e:	2300      	movs	r3, #0
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005832:	2303      	movs	r3, #3
 8005834:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005836:	2307      	movs	r3, #7
 8005838:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800583a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800583e:	4619      	mov	r1, r3
 8005840:	4825      	ldr	r0, [pc, #148]	; (80058d8 <HAL_UART_MspInit+0x234>)
 8005842:	f001 ff1d 	bl	8007680 <HAL_GPIO_Init>
}
 8005846:	e039      	b.n	80058bc <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART3)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a24      	ldr	r2, [pc, #144]	; (80058e0 <HAL_UART_MspInit+0x23c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d134      	bne.n	80058bc <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	4b1c      	ldr	r3, [pc, #112]	; (80058c8 <HAL_UART_MspInit+0x224>)
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <HAL_UART_MspInit+0x224>)
 800585c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005860:	6413      	str	r3, [r2, #64]	; 0x40
 8005862:	4b19      	ldr	r3, [pc, #100]	; (80058c8 <HAL_UART_MspInit+0x224>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800586e:	2300      	movs	r3, #0
 8005870:	60bb      	str	r3, [r7, #8]
 8005872:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <HAL_UART_MspInit+0x224>)
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	4a14      	ldr	r2, [pc, #80]	; (80058c8 <HAL_UART_MspInit+0x224>)
 8005878:	f043 0304 	orr.w	r3, r3, #4
 800587c:	6313      	str	r3, [r2, #48]	; 0x30
 800587e:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <HAL_UART_MspInit+0x224>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	60bb      	str	r3, [r7, #8]
 8005888:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 800588a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800588e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005890:	2302      	movs	r3, #2
 8005892:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005894:	2300      	movs	r3, #0
 8005896:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005898:	2303      	movs	r3, #3
 800589a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800589c:	2307      	movs	r3, #7
 800589e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058a4:	4619      	mov	r1, r3
 80058a6:	4809      	ldr	r0, [pc, #36]	; (80058cc <HAL_UART_MspInit+0x228>)
 80058a8:	f001 feea 	bl	8007680 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80058ac:	2200      	movs	r2, #0
 80058ae:	2100      	movs	r1, #0
 80058b0:	2027      	movs	r0, #39	; 0x27
 80058b2:	f001 f890 	bl	80069d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80058b6:	2027      	movs	r0, #39	; 0x27
 80058b8:	f001 f8a9 	bl	8006a0e <HAL_NVIC_EnableIRQ>
}
 80058bc:	bf00      	nop
 80058be:	3740      	adds	r7, #64	; 0x40
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40005000 	.word	0x40005000
 80058c8:	40023800 	.word	0x40023800
 80058cc:	40020800 	.word	0x40020800
 80058d0:	40020c00 	.word	0x40020c00
 80058d4:	40011000 	.word	0x40011000
 80058d8:	40020000 	.word	0x40020000
 80058dc:	40004400 	.word	0x40004400
 80058e0:	40004800 	.word	0x40004800

080058e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058e8:	e7fe      	b.n	80058e8 <NMI_Handler+0x4>

080058ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058ea:	b480      	push	{r7}
 80058ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058ee:	e7fe      	b.n	80058ee <HardFault_Handler+0x4>

080058f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058f4:	e7fe      	b.n	80058f4 <MemManage_Handler+0x4>

080058f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058f6:	b480      	push	{r7}
 80058f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058fa:	e7fe      	b.n	80058fa <BusFault_Handler+0x4>

080058fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005900:	e7fe      	b.n	8005900 <UsageFault_Handler+0x4>

08005902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005902:	b480      	push	{r7}
 8005904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005906:	bf00      	nop
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005914:	bf00      	nop
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800591e:	b480      	push	{r7}
 8005920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005922:	bf00      	nop
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005930:	f000 f998 	bl	8005c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005934:	bf00      	nop
 8005936:	bd80      	pop	{r7, pc}

08005938 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800593c:	2010      	movs	r0, #16
 800593e:	f002 f87f 	bl	8007a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005942:	bf00      	nop
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800594c:	4802      	ldr	r0, [pc, #8]	; (8005958 <TIM2_IRQHandler+0x10>)
 800594e:	f003 fbd9 	bl	8009104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005952:	bf00      	nop
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	200006dc 	.word	0x200006dc

0800595c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005960:	4802      	ldr	r0, [pc, #8]	; (800596c <USART1_IRQHandler+0x10>)
 8005962:	f004 fef1 	bl	800a748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005966:	bf00      	nop
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	200008e8 	.word	0x200008e8

08005970 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005974:	4802      	ldr	r0, [pc, #8]	; (8005980 <USART3_IRQHandler+0x10>)
 8005976:	f004 fee7 	bl	800a748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800597a:	bf00      	nop
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20000970 	.word	0x20000970

08005984 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(On_Board_Button_Pin);
 8005988:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800598c:	f002 f858 	bl	8007a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005990:	bf00      	nop
 8005992:	bd80      	pop	{r7, pc}

08005994 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8005998:	4802      	ldr	r0, [pc, #8]	; (80059a4 <DMA1_Stream7_IRQHandler+0x10>)
 800599a:	f001 f9f9 	bl	8006d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800599e:	bf00      	nop
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000844 	.word	0x20000844

080059a8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80059ac:	4802      	ldr	r0, [pc, #8]	; (80059b8 <UART5_IRQHandler+0x10>)
 80059ae:	f004 fecb 	bl	800a748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80059b2:	bf00      	nop
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	200008a4 	.word	0x200008a4

080059bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
	return 1;
 80059c0:	2301      	movs	r3, #1
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <_kill>:

int _kill(int pid, int sig)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80059d6:	f005 fe1f 	bl	800b618 <__errno>
 80059da:	4603      	mov	r3, r0
 80059dc:	2216      	movs	r2, #22
 80059de:	601a      	str	r2, [r3, #0]
	return -1;
 80059e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <_exit>:

void _exit (int status)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80059f4:	f04f 31ff 	mov.w	r1, #4294967295
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff ffe7 	bl	80059cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80059fe:	e7fe      	b.n	80059fe <_exit+0x12>

08005a00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	e00a      	b.n	8005a28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005a12:	f3af 8000 	nop.w
 8005a16:	4601      	mov	r1, r0
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	60ba      	str	r2, [r7, #8]
 8005a1e:	b2ca      	uxtb	r2, r1
 8005a20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	3301      	adds	r3, #1
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	dbf0      	blt.n	8005a12 <_read+0x12>
	}

return len;
 8005a30:	687b      	ldr	r3, [r7, #4]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b086      	sub	sp, #24
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	e009      	b.n	8005a60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	60ba      	str	r2, [r7, #8]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	dbf1      	blt.n	8005a4c <_write+0x12>
	}
	return len;
 8005a68:	687b      	ldr	r3, [r7, #4]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <_close>:

int _close(int file)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
	return -1;
 8005a7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a9a:	605a      	str	r2, [r3, #4]
	return 0;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <_isatty>:

int _isatty(int file)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
	return 1;
 8005ab2:	2301      	movs	r3, #1
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
	return 0;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
	...

08005adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ae4:	4a14      	ldr	r2, [pc, #80]	; (8005b38 <_sbrk+0x5c>)
 8005ae6:	4b15      	ldr	r3, [pc, #84]	; (8005b3c <_sbrk+0x60>)
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005af0:	4b13      	ldr	r3, [pc, #76]	; (8005b40 <_sbrk+0x64>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d102      	bne.n	8005afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005af8:	4b11      	ldr	r3, [pc, #68]	; (8005b40 <_sbrk+0x64>)
 8005afa:	4a12      	ldr	r2, [pc, #72]	; (8005b44 <_sbrk+0x68>)
 8005afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005afe:	4b10      	ldr	r3, [pc, #64]	; (8005b40 <_sbrk+0x64>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4413      	add	r3, r2
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d207      	bcs.n	8005b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b0c:	f005 fd84 	bl	800b618 <__errno>
 8005b10:	4603      	mov	r3, r0
 8005b12:	220c      	movs	r2, #12
 8005b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b16:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1a:	e009      	b.n	8005b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b1c:	4b08      	ldr	r3, [pc, #32]	; (8005b40 <_sbrk+0x64>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b22:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <_sbrk+0x64>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4413      	add	r3, r2
 8005b2a:	4a05      	ldr	r2, [pc, #20]	; (8005b40 <_sbrk+0x64>)
 8005b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20020000 	.word	0x20020000
 8005b3c:	00000400 	.word	0x00000400
 8005b40:	200009c8 	.word	0x200009c8
 8005b44:	20000a00 	.word	0x20000a00

08005b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b4c:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <SystemInit+0x20>)
 8005b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b52:	4a05      	ldr	r2, [pc, #20]	; (8005b68 <SystemInit+0x20>)
 8005b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b5c:	bf00      	nop
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	e000ed00 	.word	0xe000ed00

08005b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 8005b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ba4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b70:	480d      	ldr	r0, [pc, #52]	; (8005ba8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005b72:	490e      	ldr	r1, [pc, #56]	; (8005bac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005b74:	4a0e      	ldr	r2, [pc, #56]	; (8005bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b78:	e002      	b.n	8005b80 <LoopCopyDataInit>

08005b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b7e:	3304      	adds	r3, #4

08005b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b84:	d3f9      	bcc.n	8005b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b86:	4a0b      	ldr	r2, [pc, #44]	; (8005bb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005b88:	4c0b      	ldr	r4, [pc, #44]	; (8005bb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b8c:	e001      	b.n	8005b92 <LoopFillZerobss>

08005b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b90:	3204      	adds	r2, #4

08005b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b94:	d3fb      	bcc.n	8005b8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005b96:	f7ff ffd7 	bl	8005b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b9a:	f005 fd43 	bl	800b624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b9e:	f7fe fbe3 	bl	8004368 <main>
  bx  lr    
 8005ba2:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 8005ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005bac:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8005bb0:	08010058 	.word	0x08010058
  ldr r2, =_sbss
 8005bb4:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8005bb8:	20000a00 	.word	0x20000a00

08005bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005bbc:	e7fe      	b.n	8005bbc <ADC_IRQHandler>
	...

08005bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <HAL_Init+0x40>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a0d      	ldr	r2, [pc, #52]	; (8005c00 <HAL_Init+0x40>)
 8005bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <HAL_Init+0x40>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a0a      	ldr	r2, [pc, #40]	; (8005c00 <HAL_Init+0x40>)
 8005bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005bdc:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <HAL_Init+0x40>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a07      	ldr	r2, [pc, #28]	; (8005c00 <HAL_Init+0x40>)
 8005be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005be8:	2003      	movs	r0, #3
 8005bea:	f000 fee9 	bl	80069c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005bee:	2000      	movs	r0, #0
 8005bf0:	f000 f808 	bl	8005c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005bf4:	f7ff fb0e 	bl	8005214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40023c00 	.word	0x40023c00

08005c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005c0c:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <HAL_InitTick+0x54>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <HAL_InitTick+0x58>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	4619      	mov	r1, r3
 8005c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 ff0f 	bl	8006a46 <HAL_SYSTICK_Config>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e00e      	b.n	8005c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b0f      	cmp	r3, #15
 8005c36:	d80a      	bhi.n	8005c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c38:	2200      	movs	r2, #0
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c40:	f000 fec9 	bl	80069d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c44:	4a06      	ldr	r2, [pc, #24]	; (8005c60 <HAL_InitTick+0x5c>)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e000      	b.n	8005c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20000078 	.word	0x20000078
 8005c5c:	20000080 	.word	0x20000080
 8005c60:	2000007c 	.word	0x2000007c

08005c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c68:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <HAL_IncTick+0x20>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <HAL_IncTick+0x24>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4413      	add	r3, r2
 8005c74:	4a04      	ldr	r2, [pc, #16]	; (8005c88 <HAL_IncTick+0x24>)
 8005c76:	6013      	str	r3, [r2, #0]
}
 8005c78:	bf00      	nop
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000080 	.word	0x20000080
 8005c88:	200009cc 	.word	0x200009cc

08005c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8005c90:	4b03      	ldr	r3, [pc, #12]	; (8005ca0 <HAL_GetTick+0x14>)
 8005c92:	681b      	ldr	r3, [r3, #0]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	200009cc 	.word	0x200009cc

08005ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005cac:	f7ff ffee 	bl	8005c8c <HAL_GetTick>
 8005cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d005      	beq.n	8005cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <HAL_Delay+0x44>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005cca:	bf00      	nop
 8005ccc:	f7ff ffde 	bl	8005c8c <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d8f7      	bhi.n	8005ccc <HAL_Delay+0x28>
  {
  }
}
 8005cdc:	bf00      	nop
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000080 	.word	0x20000080

08005cec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e033      	b.n	8005d6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d109      	bne.n	8005d1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7ff faaa 	bl	8005264 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f003 0310 	and.w	r3, r3, #16
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d118      	bne.n	8005d5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005d32:	f023 0302 	bic.w	r3, r3, #2
 8005d36:	f043 0202 	orr.w	r2, r3, #2
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fab4 	bl	80062ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	f043 0201 	orr.w	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	641a      	str	r2, [r3, #64]	; 0x40
 8005d5a:	e001      	b.n	8005d60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
	...

08005d74 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_ADC_Start+0x1a>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e0b2      	b.n	8005ef4 <HAL_ADC_Start+0x180>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d018      	beq.n	8005dd6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005db4:	4b52      	ldr	r3, [pc, #328]	; (8005f00 <HAL_ADC_Start+0x18c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a52      	ldr	r2, [pc, #328]	; (8005f04 <HAL_ADC_Start+0x190>)
 8005dba:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbe:	0c9a      	lsrs	r2, r3, #18
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	4413      	add	r3, r2
 8005dc6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005dc8:	e002      	b.n	8005dd0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f9      	bne.n	8005dca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d17a      	bne.n	8005eda <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d007      	beq.n	8005e16 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005e0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e22:	d106      	bne.n	8005e32 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e28:	f023 0206 	bic.w	r2, r3, #6
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	645a      	str	r2, [r3, #68]	; 0x44
 8005e30:	e002      	b.n	8005e38 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e40:	4b31      	ldr	r3, [pc, #196]	; (8005f08 <HAL_ADC_Start+0x194>)
 8005e42:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005e4c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d12a      	bne.n	8005eb0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a2b      	ldr	r2, [pc, #172]	; (8005f0c <HAL_ADC_Start+0x198>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d015      	beq.n	8005e90 <HAL_ADC_Start+0x11c>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a29      	ldr	r2, [pc, #164]	; (8005f10 <HAL_ADC_Start+0x19c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d105      	bne.n	8005e7a <HAL_ADC_Start+0x106>
 8005e6e:	4b26      	ldr	r3, [pc, #152]	; (8005f08 <HAL_ADC_Start+0x194>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f003 031f 	and.w	r3, r3, #31
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a25      	ldr	r2, [pc, #148]	; (8005f14 <HAL_ADC_Start+0x1a0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d136      	bne.n	8005ef2 <HAL_ADC_Start+0x17e>
 8005e84:	4b20      	ldr	r3, [pc, #128]	; (8005f08 <HAL_ADC_Start+0x194>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d130      	bne.n	8005ef2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d129      	bne.n	8005ef2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005eac:	609a      	str	r2, [r3, #8]
 8005eae:	e020      	b.n	8005ef2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a15      	ldr	r2, [pc, #84]	; (8005f0c <HAL_ADC_Start+0x198>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d11b      	bne.n	8005ef2 <HAL_ADC_Start+0x17e>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d114      	bne.n	8005ef2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005ed6:	609a      	str	r2, [r3, #8]
 8005ed8:	e00b      	b.n	8005ef2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	f043 0210 	orr.w	r2, r3, #16
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eea:	f043 0201 	orr.w	r2, r3, #1
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	20000078 	.word	0x20000078
 8005f04:	431bde83 	.word	0x431bde83
 8005f08:	40012300 	.word	0x40012300
 8005f0c:	40012000 	.word	0x40012000
 8005f10:	40012100 	.word	0x40012100
 8005f14:	40012200 	.word	0x40012200

08005f18 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f34:	d113      	bne.n	8005f5e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f44:	d10b      	bne.n	8005f5e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	f043 0220 	orr.w	r2, r3, #32
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e063      	b.n	8006026 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005f5e:	f7ff fe95 	bl	8005c8c <HAL_GetTick>
 8005f62:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005f64:	e021      	b.n	8005faa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6c:	d01d      	beq.n	8005faa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d007      	beq.n	8005f84 <HAL_ADC_PollForConversion+0x6c>
 8005f74:	f7ff fe8a 	bl	8005c8c <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d212      	bcs.n	8005faa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d00b      	beq.n	8005faa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f043 0204 	orr.w	r2, r3, #4
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e03d      	b.n	8006026 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d1d6      	bne.n	8005f66 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0212 	mvn.w	r2, #18
 8005fc0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d123      	bne.n	8006024 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11f      	bne.n	8006024 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d006      	beq.n	8006000 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d111      	bne.n	8006024 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d105      	bne.n	8006024 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	f043 0201 	orr.w	r2, r3, #1
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_ADC_ConfigChannel+0x1c>
 8006060:	2302      	movs	r3, #2
 8006062:	e113      	b.n	800628c <HAL_ADC_ConfigChannel+0x244>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b09      	cmp	r3, #9
 8006072:	d925      	bls.n	80060c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68d9      	ldr	r1, [r3, #12]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	461a      	mov	r2, r3
 8006082:	4613      	mov	r3, r2
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	4413      	add	r3, r2
 8006088:	3b1e      	subs	r3, #30
 800608a:	2207      	movs	r2, #7
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	43da      	mvns	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	400a      	ands	r2, r1
 8006098:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68d9      	ldr	r1, [r3, #12]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	4618      	mov	r0, r3
 80060ac:	4603      	mov	r3, r0
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	4403      	add	r3, r0
 80060b2:	3b1e      	subs	r3, #30
 80060b4:	409a      	lsls	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	60da      	str	r2, [r3, #12]
 80060be:	e022      	b.n	8006106 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6919      	ldr	r1, [r3, #16]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	4613      	mov	r3, r2
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	4413      	add	r3, r2
 80060d4:	2207      	movs	r2, #7
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	43da      	mvns	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	400a      	ands	r2, r1
 80060e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6919      	ldr	r1, [r3, #16]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	4618      	mov	r0, r3
 80060f6:	4603      	mov	r3, r0
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	4403      	add	r3, r0
 80060fc:	409a      	lsls	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2b06      	cmp	r3, #6
 800610c:	d824      	bhi.n	8006158 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	4613      	mov	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	3b05      	subs	r3, #5
 8006120:	221f      	movs	r2, #31
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	43da      	mvns	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	400a      	ands	r2, r1
 800612e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	4618      	mov	r0, r3
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	3b05      	subs	r3, #5
 800614a:	fa00 f203 	lsl.w	r2, r0, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	635a      	str	r2, [r3, #52]	; 0x34
 8006156:	e04c      	b.n	80061f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	2b0c      	cmp	r3, #12
 800615e:	d824      	bhi.n	80061aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	3b23      	subs	r3, #35	; 0x23
 8006172:	221f      	movs	r2, #31
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	43da      	mvns	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	400a      	ands	r2, r1
 8006180:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	4618      	mov	r0, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	3b23      	subs	r3, #35	; 0x23
 800619c:	fa00 f203 	lsl.w	r2, r0, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	631a      	str	r2, [r3, #48]	; 0x30
 80061a8:	e023      	b.n	80061f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	3b41      	subs	r3, #65	; 0x41
 80061bc:	221f      	movs	r2, #31
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	43da      	mvns	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	400a      	ands	r2, r1
 80061ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	4618      	mov	r0, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	3b41      	subs	r3, #65	; 0x41
 80061e6:	fa00 f203 	lsl.w	r2, r0, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80061f2:	4b29      	ldr	r3, [pc, #164]	; (8006298 <HAL_ADC_ConfigChannel+0x250>)
 80061f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a28      	ldr	r2, [pc, #160]	; (800629c <HAL_ADC_ConfigChannel+0x254>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d10f      	bne.n	8006220 <HAL_ADC_ConfigChannel+0x1d8>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b12      	cmp	r3, #18
 8006206:	d10b      	bne.n	8006220 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1d      	ldr	r2, [pc, #116]	; (800629c <HAL_ADC_ConfigChannel+0x254>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d12b      	bne.n	8006282 <HAL_ADC_ConfigChannel+0x23a>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a1c      	ldr	r2, [pc, #112]	; (80062a0 <HAL_ADC_ConfigChannel+0x258>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d003      	beq.n	800623c <HAL_ADC_ConfigChannel+0x1f4>
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b11      	cmp	r3, #17
 800623a:	d122      	bne.n	8006282 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a11      	ldr	r2, [pc, #68]	; (80062a0 <HAL_ADC_ConfigChannel+0x258>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d111      	bne.n	8006282 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800625e:	4b11      	ldr	r3, [pc, #68]	; (80062a4 <HAL_ADC_ConfigChannel+0x25c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a11      	ldr	r2, [pc, #68]	; (80062a8 <HAL_ADC_ConfigChannel+0x260>)
 8006264:	fba2 2303 	umull	r2, r3, r2, r3
 8006268:	0c9a      	lsrs	r2, r3, #18
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006274:	e002      	b.n	800627c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	3b01      	subs	r3, #1
 800627a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1f9      	bne.n	8006276 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	40012300 	.word	0x40012300
 800629c:	40012000 	.word	0x40012000
 80062a0:	10000012 	.word	0x10000012
 80062a4:	20000078 	.word	0x20000078
 80062a8:	431bde83 	.word	0x431bde83

080062ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80062b4:	4b79      	ldr	r3, [pc, #484]	; (800649c <ADC_Init+0x1f0>)
 80062b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	431a      	orrs	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6859      	ldr	r1, [r3, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	021a      	lsls	r2, r3, #8
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6859      	ldr	r1, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6899      	ldr	r1, [r3, #8]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633e:	4a58      	ldr	r2, [pc, #352]	; (80064a0 <ADC_Init+0x1f4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d022      	beq.n	800638a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006352:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6899      	ldr	r1, [r3, #8]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6899      	ldr	r1, [r3, #8]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	609a      	str	r2, [r3, #8]
 8006388:	e00f      	b.n	80063aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80063a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0202 	bic.w	r2, r2, #2
 80063b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6899      	ldr	r1, [r3, #8]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	7e1b      	ldrb	r3, [r3, #24]
 80063c4:	005a      	lsls	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d01b      	beq.n	8006410 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80063f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6859      	ldr	r1, [r3, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	3b01      	subs	r3, #1
 8006404:	035a      	lsls	r2, r3, #13
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	605a      	str	r2, [r3, #4]
 800640e:	e007      	b.n	8006420 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800641e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800642e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	3b01      	subs	r3, #1
 800643c:	051a      	lsls	r2, r3, #20
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6899      	ldr	r1, [r3, #8]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006462:	025a      	lsls	r2, r3, #9
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689a      	ldr	r2, [r3, #8]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800647a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6899      	ldr	r1, [r3, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	029a      	lsls	r2, r3, #10
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	609a      	str	r2, [r3, #8]
}
 8006490:	bf00      	nop
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	40012300 	.word	0x40012300
 80064a0:	0f000001 	.word	0x0f000001

080064a4 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d101      	bne.n	80064bc <HAL_ADCEx_InjectedConfigChannel+0x18>
 80064b8:	2302      	movs	r3, #2
 80064ba:	e17e      	b.n	80067ba <HAL_ADCEx_InjectedConfigChannel+0x316>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b09      	cmp	r3, #9
 80064ca:	d925      	bls.n	8006518 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68d9      	ldr	r1, [r3, #12]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	4613      	mov	r3, r2
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	4413      	add	r3, r2
 80064e0:	3b1e      	subs	r3, #30
 80064e2:	2207      	movs	r2, #7
 80064e4:	fa02 f303 	lsl.w	r3, r2, r3
 80064e8:	43da      	mvns	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	400a      	ands	r2, r1
 80064f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68d9      	ldr	r1, [r3, #12]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	4618      	mov	r0, r3
 8006504:	4603      	mov	r3, r0
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	4403      	add	r3, r0
 800650a:	3b1e      	subs	r3, #30
 800650c:	409a      	lsls	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	60da      	str	r2, [r3, #12]
 8006516:	e022      	b.n	800655e <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6919      	ldr	r1, [r3, #16]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	4613      	mov	r3, r2
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	4413      	add	r3, r2
 800652c:	2207      	movs	r2, #7
 800652e:	fa02 f303 	lsl.w	r3, r2, r3
 8006532:	43da      	mvns	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	400a      	ands	r2, r1
 800653a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6919      	ldr	r1, [r3, #16]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	4618      	mov	r0, r3
 800654e:	4603      	mov	r3, r0
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	4403      	add	r3, r0
 8006554:	409a      	lsls	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800656c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	3b01      	subs	r3, #1
 800657a:	051a      	lsls	r2, r3, #20
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	b2da      	uxtb	r2, r3
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	b2db      	uxtb	r3, r3
 800659a:	3303      	adds	r3, #3
 800659c:	b2db      	uxtb	r3, r3
 800659e:	461a      	mov	r2, r3
 80065a0:	4613      	mov	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	221f      	movs	r2, #31
 80065a8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ac:	43da      	mvns	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	400a      	ands	r2, r1
 80065b4:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	4618      	mov	r0, r3
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	3303      	adds	r3, #3
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	4613      	mov	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	fa00 f203 	lsl.w	r2, r0, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	4a75      	ldr	r2, [pc, #468]	; (80067c8 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d022      	beq.n	800663c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6899      	ldr	r1, [r3, #8]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	699a      	ldr	r2, [r3, #24]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006626:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6899      	ldr	r1, [r3, #8]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	69da      	ldr	r2, [r3, #28]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	609a      	str	r2, [r3, #8]
 800663a:	e00f      	b.n	800665c <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800664a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800665a:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	7d5b      	ldrb	r3, [r3, #21]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006672:	605a      	str	r2, [r3, #4]
 8006674:	e007      	b.n	8006686 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006684:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	7d1b      	ldrb	r3, [r3, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d008      	beq.n	80066a0 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800669c:	605a      	str	r2, [r3, #4]
 800669e:	e007      	b.n	80066b0 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066ae:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d02e      	beq.n	8006716 <HAL_ADCEx_InjectedConfigChannel+0x272>
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d840      	bhi.n	800673e <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d002      	beq.n	80066c6 <HAL_ADCEx_InjectedConfigChannel+0x222>
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d014      	beq.n	80066ee <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80066c4:	e03b      	b.n	800673e <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6812      	ldr	r2, [r2, #0]
 80066d0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80066d4:	f023 030f 	bic.w	r3, r3, #15
 80066d8:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6959      	ldr	r1, [r3, #20]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	615a      	str	r2, [r3, #20]
      break;
 80066ec:	e03b      	b.n	8006766 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6812      	ldr	r2, [r2, #0]
 80066f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80066fc:	f023 030f 	bic.w	r3, r3, #15
 8006700:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6999      	ldr	r1, [r3, #24]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	68da      	ldr	r2, [r3, #12]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	619a      	str	r2, [r3, #24]
      break;
 8006714:	e027      	b.n	8006766 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006724:	f023 030f 	bic.w	r3, r3, #15
 8006728:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	69d9      	ldr	r1, [r3, #28]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	61da      	str	r2, [r3, #28]
      break;
 800673c:	e013      	b.n	8006766 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6812      	ldr	r2, [r2, #0]
 8006748:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800674c:	f023 030f 	bic.w	r3, r3, #15
 8006750:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6a19      	ldr	r1, [r3, #32]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68da      	ldr	r2, [r3, #12]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	621a      	str	r2, [r3, #32]
      break;
 8006764:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006766:	4b19      	ldr	r3, [pc, #100]	; (80067cc <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8006768:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a18      	ldr	r2, [pc, #96]	; (80067d0 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d109      	bne.n	8006788 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b12      	cmp	r3, #18
 800677a:	d105      	bne.n	8006788 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a10      	ldr	r2, [pc, #64]	; (80067d0 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d10e      	bne.n	80067b0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a0f      	ldr	r2, [pc, #60]	; (80067d4 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d003      	beq.n	80067a4 <HAL_ADCEx_InjectedConfigChannel+0x300>
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b11      	cmp	r3, #17
 80067a2:	d105      	bne.n	80067b0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	000f0001 	.word	0x000f0001
 80067cc:	40012300 	.word	0x40012300
 80067d0:	40012000 	.word	0x40012000
 80067d4:	10000012 	.word	0x10000012

080067d8 <__NVIC_SetPriorityGrouping>:
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067e8:	4b0c      	ldr	r3, [pc, #48]	; (800681c <__NVIC_SetPriorityGrouping+0x44>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067f4:	4013      	ands	r3, r2
 80067f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800680a:	4a04      	ldr	r2, [pc, #16]	; (800681c <__NVIC_SetPriorityGrouping+0x44>)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	60d3      	str	r3, [r2, #12]
}
 8006810:	bf00      	nop
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	e000ed00 	.word	0xe000ed00

08006820 <__NVIC_GetPriorityGrouping>:
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006824:	4b04      	ldr	r3, [pc, #16]	; (8006838 <__NVIC_GetPriorityGrouping+0x18>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	0a1b      	lsrs	r3, r3, #8
 800682a:	f003 0307 	and.w	r3, r3, #7
}
 800682e:	4618      	mov	r0, r3
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	e000ed00 	.word	0xe000ed00

0800683c <__NVIC_EnableIRQ>:
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800684a:	2b00      	cmp	r3, #0
 800684c:	db0b      	blt.n	8006866 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	f003 021f 	and.w	r2, r3, #31
 8006854:	4907      	ldr	r1, [pc, #28]	; (8006874 <__NVIC_EnableIRQ+0x38>)
 8006856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	2001      	movs	r0, #1
 800685e:	fa00 f202 	lsl.w	r2, r0, r2
 8006862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	e000e100 	.word	0xe000e100

08006878 <__NVIC_DisableIRQ>:
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	4603      	mov	r3, r0
 8006880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006886:	2b00      	cmp	r3, #0
 8006888:	db12      	blt.n	80068b0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	f003 021f 	and.w	r2, r3, #31
 8006890:	490a      	ldr	r1, [pc, #40]	; (80068bc <__NVIC_DisableIRQ+0x44>)
 8006892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006896:	095b      	lsrs	r3, r3, #5
 8006898:	2001      	movs	r0, #1
 800689a:	fa00 f202 	lsl.w	r2, r0, r2
 800689e:	3320      	adds	r3, #32
 80068a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80068a4:	f3bf 8f4f 	dsb	sy
}
 80068a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80068aa:	f3bf 8f6f 	isb	sy
}
 80068ae:	bf00      	nop
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	e000e100 	.word	0xe000e100

080068c0 <__NVIC_SetPriority>:
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	4603      	mov	r3, r0
 80068c8:	6039      	str	r1, [r7, #0]
 80068ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	db0a      	blt.n	80068ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	490c      	ldr	r1, [pc, #48]	; (800690c <__NVIC_SetPriority+0x4c>)
 80068da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068de:	0112      	lsls	r2, r2, #4
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	440b      	add	r3, r1
 80068e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80068e8:	e00a      	b.n	8006900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	4908      	ldr	r1, [pc, #32]	; (8006910 <__NVIC_SetPriority+0x50>)
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	3b04      	subs	r3, #4
 80068f8:	0112      	lsls	r2, r2, #4
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	440b      	add	r3, r1
 80068fe:	761a      	strb	r2, [r3, #24]
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	e000e100 	.word	0xe000e100
 8006910:	e000ed00 	.word	0xe000ed00

08006914 <NVIC_EncodePriority>:
{
 8006914:	b480      	push	{r7}
 8006916:	b089      	sub	sp, #36	; 0x24
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f003 0307 	and.w	r3, r3, #7
 8006926:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	f1c3 0307 	rsb	r3, r3, #7
 800692e:	2b04      	cmp	r3, #4
 8006930:	bf28      	it	cs
 8006932:	2304      	movcs	r3, #4
 8006934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	3304      	adds	r3, #4
 800693a:	2b06      	cmp	r3, #6
 800693c:	d902      	bls.n	8006944 <NVIC_EncodePriority+0x30>
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	3b03      	subs	r3, #3
 8006942:	e000      	b.n	8006946 <NVIC_EncodePriority+0x32>
 8006944:	2300      	movs	r3, #0
 8006946:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006948:	f04f 32ff 	mov.w	r2, #4294967295
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	fa02 f303 	lsl.w	r3, r2, r3
 8006952:	43da      	mvns	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	401a      	ands	r2, r3
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800695c:	f04f 31ff 	mov.w	r1, #4294967295
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	fa01 f303 	lsl.w	r3, r1, r3
 8006966:	43d9      	mvns	r1, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800696c:	4313      	orrs	r3, r2
}
 800696e:	4618      	mov	r0, r3
 8006970:	3724      	adds	r7, #36	; 0x24
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
	...

0800697c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3b01      	subs	r3, #1
 8006988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800698c:	d301      	bcc.n	8006992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800698e:	2301      	movs	r3, #1
 8006990:	e00f      	b.n	80069b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006992:	4a0a      	ldr	r2, [pc, #40]	; (80069bc <SysTick_Config+0x40>)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3b01      	subs	r3, #1
 8006998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800699a:	210f      	movs	r1, #15
 800699c:	f04f 30ff 	mov.w	r0, #4294967295
 80069a0:	f7ff ff8e 	bl	80068c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069a4:	4b05      	ldr	r3, [pc, #20]	; (80069bc <SysTick_Config+0x40>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069aa:	4b04      	ldr	r3, [pc, #16]	; (80069bc <SysTick_Config+0x40>)
 80069ac:	2207      	movs	r2, #7
 80069ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	e000e010 	.word	0xe000e010

080069c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff ff05 	bl	80067d8 <__NVIC_SetPriorityGrouping>
}
 80069ce:	bf00      	nop
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b086      	sub	sp, #24
 80069da:	af00      	add	r7, sp, #0
 80069dc:	4603      	mov	r3, r0
 80069de:	60b9      	str	r1, [r7, #8]
 80069e0:	607a      	str	r2, [r7, #4]
 80069e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80069e8:	f7ff ff1a 	bl	8006820 <__NVIC_GetPriorityGrouping>
 80069ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	6978      	ldr	r0, [r7, #20]
 80069f4:	f7ff ff8e 	bl	8006914 <NVIC_EncodePriority>
 80069f8:	4602      	mov	r2, r0
 80069fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069fe:	4611      	mov	r1, r2
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff ff5d 	bl	80068c0 <__NVIC_SetPriority>
}
 8006a06:	bf00      	nop
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b082      	sub	sp, #8
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	4603      	mov	r3, r0
 8006a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff ff0d 	bl	800683c <__NVIC_EnableIRQ>
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	4603      	mov	r3, r0
 8006a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff ff1d 	bl	8006878 <__NVIC_DisableIRQ>
}
 8006a3e:	bf00      	nop
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff ff94 	bl	800697c <SysTick_Config>
 8006a54:	4603      	mov	r3, r0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a6c:	f7ff f90e 	bl	8005c8c <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e099      	b.n	8006bb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0201 	bic.w	r2, r2, #1
 8006a9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a9c:	e00f      	b.n	8006abe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a9e:	f7ff f8f5 	bl	8005c8c <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b05      	cmp	r3, #5
 8006aaa:	d908      	bls.n	8006abe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2203      	movs	r2, #3
 8006ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e078      	b.n	8006bb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1e8      	bne.n	8006a9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	4b38      	ldr	r3, [pc, #224]	; (8006bb8 <HAL_DMA_Init+0x158>)
 8006ad8:	4013      	ands	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d107      	bne.n	8006b28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b20:	4313      	orrs	r3, r2
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f023 0307 	bic.w	r3, r3, #7
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d117      	bne.n	8006b82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00e      	beq.n	8006b82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fb01 	bl	800716c <DMA_CheckFifoParam>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d008      	beq.n	8006b82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2240      	movs	r2, #64	; 0x40
 8006b74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e016      	b.n	8006bb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fab8 	bl	8007100 <DMA_CalcBaseAndBitshift>
 8006b90:	4603      	mov	r3, r0
 8006b92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b98:	223f      	movs	r2, #63	; 0x3f
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	f010803f 	.word	0xf010803f

08006bbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d101      	bne.n	8006be2 <HAL_DMA_Start_IT+0x26>
 8006bde:	2302      	movs	r3, #2
 8006be0:	e040      	b.n	8006c64 <HAL_DMA_Start_IT+0xa8>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d12f      	bne.n	8006c56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fa4a 	bl	80070a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c14:	223f      	movs	r2, #63	; 0x3f
 8006c16:	409a      	lsls	r2, r3
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0216 	orr.w	r2, r2, #22
 8006c2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d007      	beq.n	8006c44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0208 	orr.w	r2, r2, #8
 8006c42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0201 	orr.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	e005      	b.n	8006c62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006c5e:	2302      	movs	r3, #2
 8006c60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006c7a:	f7ff f807 	bl	8005c8c <HAL_GetTick>
 8006c7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d008      	beq.n	8006c9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2280      	movs	r2, #128	; 0x80
 8006c90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e052      	b.n	8006d44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0216 	bic.w	r2, r2, #22
 8006cac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695a      	ldr	r2, [r3, #20]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d103      	bne.n	8006cce <HAL_DMA_Abort+0x62>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d007      	beq.n	8006cde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0208 	bic.w	r2, r2, #8
 8006cdc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0201 	bic.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cee:	e013      	b.n	8006d18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006cf0:	f7fe ffcc 	bl	8005c8c <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b05      	cmp	r3, #5
 8006cfc:	d90c      	bls.n	8006d18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2203      	movs	r2, #3
 8006d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e015      	b.n	8006d44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e4      	bne.n	8006cf0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d2a:	223f      	movs	r2, #63	; 0x3f
 8006d2c:	409a      	lsls	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d004      	beq.n	8006d6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2280      	movs	r2, #128	; 0x80
 8006d64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e00c      	b.n	8006d84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2205      	movs	r2, #5
 8006d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0201 	bic.w	r2, r2, #1
 8006d80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d9c:	4b8e      	ldr	r3, [pc, #568]	; (8006fd8 <HAL_DMA_IRQHandler+0x248>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a8e      	ldr	r2, [pc, #568]	; (8006fdc <HAL_DMA_IRQHandler+0x24c>)
 8006da2:	fba2 2303 	umull	r2, r3, r2, r3
 8006da6:	0a9b      	lsrs	r3, r3, #10
 8006da8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dba:	2208      	movs	r2, #8
 8006dbc:	409a      	lsls	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d01a      	beq.n	8006dfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d013      	beq.n	8006dfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0204 	bic.w	r2, r2, #4
 8006de2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de8:	2208      	movs	r2, #8
 8006dea:	409a      	lsls	r2, r3
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df4:	f043 0201 	orr.w	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e00:	2201      	movs	r2, #1
 8006e02:	409a      	lsls	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4013      	ands	r3, r2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d012      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00b      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e1e:	2201      	movs	r2, #1
 8006e20:	409a      	lsls	r2, r3
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2a:	f043 0202 	orr.w	r2, r3, #2
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e36:	2204      	movs	r2, #4
 8006e38:	409a      	lsls	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d012      	beq.n	8006e68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e54:	2204      	movs	r2, #4
 8006e56:	409a      	lsls	r2, r3
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e60:	f043 0204 	orr.w	r2, r3, #4
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e6c:	2210      	movs	r2, #16
 8006e6e:	409a      	lsls	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4013      	ands	r3, r2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d043      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0308 	and.w	r3, r3, #8
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d03c      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e8a:	2210      	movs	r2, #16
 8006e8c:	409a      	lsls	r2, r3
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d018      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d108      	bne.n	8006ec0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d024      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	4798      	blx	r3
 8006ebe:	e01f      	b.n	8006f00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d01b      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	4798      	blx	r3
 8006ed0:	e016      	b.n	8006f00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d107      	bne.n	8006ef0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 0208 	bic.w	r2, r2, #8
 8006eee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f04:	2220      	movs	r2, #32
 8006f06:	409a      	lsls	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 808f 	beq.w	8007030 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0310 	and.w	r3, r3, #16
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8087 	beq.w	8007030 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f26:	2220      	movs	r2, #32
 8006f28:	409a      	lsls	r2, r3
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b05      	cmp	r3, #5
 8006f38:	d136      	bne.n	8006fa8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0216 	bic.w	r2, r2, #22
 8006f48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	695a      	ldr	r2, [r3, #20]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d103      	bne.n	8006f6a <HAL_DMA_IRQHandler+0x1da>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d007      	beq.n	8006f7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0208 	bic.w	r2, r2, #8
 8006f78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7e:	223f      	movs	r2, #63	; 0x3f
 8006f80:	409a      	lsls	r2, r3
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d07e      	beq.n	800709c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	4798      	blx	r3
        }
        return;
 8006fa6:	e079      	b.n	800709c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d01d      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10d      	bne.n	8006fe0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d031      	beq.n	8007030 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	4798      	blx	r3
 8006fd4:	e02c      	b.n	8007030 <HAL_DMA_IRQHandler+0x2a0>
 8006fd6:	bf00      	nop
 8006fd8:	20000078 	.word	0x20000078
 8006fdc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d023      	beq.n	8007030 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	4798      	blx	r3
 8006ff0:	e01e      	b.n	8007030 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10f      	bne.n	8007020 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0210 	bic.w	r2, r2, #16
 800700e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007034:	2b00      	cmp	r3, #0
 8007036:	d032      	beq.n	800709e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	d022      	beq.n	800708a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2205      	movs	r2, #5
 8007048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0201 	bic.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	3301      	adds	r3, #1
 8007060:	60bb      	str	r3, [r7, #8]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	429a      	cmp	r2, r3
 8007066:	d307      	bcc.n	8007078 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f2      	bne.n	800705c <HAL_DMA_IRQHandler+0x2cc>
 8007076:	e000      	b.n	800707a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007078:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	4798      	blx	r3
 800709a:	e000      	b.n	800709e <HAL_DMA_IRQHandler+0x30e>
        return;
 800709c:	bf00      	nop
    }
  }
}
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	2b40      	cmp	r3, #64	; 0x40
 80070d0:	d108      	bne.n	80070e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80070e2:	e007      	b.n	80070f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	60da      	str	r2, [r3, #12]
}
 80070f4:	bf00      	nop
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	3b10      	subs	r3, #16
 8007110:	4a14      	ldr	r2, [pc, #80]	; (8007164 <DMA_CalcBaseAndBitshift+0x64>)
 8007112:	fba2 2303 	umull	r2, r3, r2, r3
 8007116:	091b      	lsrs	r3, r3, #4
 8007118:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800711a:	4a13      	ldr	r2, [pc, #76]	; (8007168 <DMA_CalcBaseAndBitshift+0x68>)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b03      	cmp	r3, #3
 800712c:	d909      	bls.n	8007142 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007136:	f023 0303 	bic.w	r3, r3, #3
 800713a:	1d1a      	adds	r2, r3, #4
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	659a      	str	r2, [r3, #88]	; 0x58
 8007140:	e007      	b.n	8007152 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800714a:	f023 0303 	bic.w	r3, r3, #3
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	aaaaaaab 	.word	0xaaaaaaab
 8007168:	0800fa48 	.word	0x0800fa48

0800716c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d11f      	bne.n	80071c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2b03      	cmp	r3, #3
 800718a:	d856      	bhi.n	800723a <DMA_CheckFifoParam+0xce>
 800718c:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <DMA_CheckFifoParam+0x28>)
 800718e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007192:	bf00      	nop
 8007194:	080071a5 	.word	0x080071a5
 8007198:	080071b7 	.word	0x080071b7
 800719c:	080071a5 	.word	0x080071a5
 80071a0:	0800723b 	.word	0x0800723b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d046      	beq.n	800723e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071b4:	e043      	b.n	800723e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071be:	d140      	bne.n	8007242 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071c4:	e03d      	b.n	8007242 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ce:	d121      	bne.n	8007214 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d837      	bhi.n	8007246 <DMA_CheckFifoParam+0xda>
 80071d6:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <DMA_CheckFifoParam+0x70>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	080071ed 	.word	0x080071ed
 80071e0:	080071f3 	.word	0x080071f3
 80071e4:	080071ed 	.word	0x080071ed
 80071e8:	08007205 	.word	0x08007205
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	73fb      	strb	r3, [r7, #15]
      break;
 80071f0:	e030      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d025      	beq.n	800724a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007202:	e022      	b.n	800724a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800720c:	d11f      	bne.n	800724e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007212:	e01c      	b.n	800724e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b02      	cmp	r3, #2
 8007218:	d903      	bls.n	8007222 <DMA_CheckFifoParam+0xb6>
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b03      	cmp	r3, #3
 800721e:	d003      	beq.n	8007228 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007220:	e018      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	73fb      	strb	r3, [r7, #15]
      break;
 8007226:	e015      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00e      	beq.n	8007252 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	73fb      	strb	r3, [r7, #15]
      break;
 8007238:	e00b      	b.n	8007252 <DMA_CheckFifoParam+0xe6>
      break;
 800723a:	bf00      	nop
 800723c:	e00a      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
      break;
 800723e:	bf00      	nop
 8007240:	e008      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
      break;
 8007242:	bf00      	nop
 8007244:	e006      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
      break;
 8007246:	bf00      	nop
 8007248:	e004      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
      break;
 800724a:	bf00      	nop
 800724c:	e002      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
      break;   
 800724e:	bf00      	nop
 8007250:	e000      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
      break;
 8007252:	bf00      	nop
    }
  } 
  
  return status; 
 8007254:	7bfb      	ldrb	r3, [r7, #15]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop

08007264 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007276:	4b23      	ldr	r3, [pc, #140]	; (8007304 <HAL_FLASH_Program+0xa0>)
 8007278:	7e1b      	ldrb	r3, [r3, #24]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d101      	bne.n	8007282 <HAL_FLASH_Program+0x1e>
 800727e:	2302      	movs	r3, #2
 8007280:	e03b      	b.n	80072fa <HAL_FLASH_Program+0x96>
 8007282:	4b20      	ldr	r3, [pc, #128]	; (8007304 <HAL_FLASH_Program+0xa0>)
 8007284:	2201      	movs	r2, #1
 8007286:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007288:	f24c 3050 	movw	r0, #50000	; 0xc350
 800728c:	f000 f870 	bl	8007370 <FLASH_WaitForLastOperation>
 8007290:	4603      	mov	r3, r0
 8007292:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8007294:	7dfb      	ldrb	r3, [r7, #23]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d12b      	bne.n	80072f2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d105      	bne.n	80072ac <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80072a0:	783b      	ldrb	r3, [r7, #0]
 80072a2:	4619      	mov	r1, r3
 80072a4:	68b8      	ldr	r0, [r7, #8]
 80072a6:	f000 f91b 	bl	80074e0 <FLASH_Program_Byte>
 80072aa:	e016      	b.n	80072da <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d105      	bne.n	80072be <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80072b2:	883b      	ldrh	r3, [r7, #0]
 80072b4:	4619      	mov	r1, r3
 80072b6:	68b8      	ldr	r0, [r7, #8]
 80072b8:	f000 f8ee 	bl	8007498 <FLASH_Program_HalfWord>
 80072bc:	e00d      	b.n	80072da <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d105      	bne.n	80072d0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	4619      	mov	r1, r3
 80072c8:	68b8      	ldr	r0, [r7, #8]
 80072ca:	f000 f8c3 	bl	8007454 <FLASH_Program_Word>
 80072ce:	e004      	b.n	80072da <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80072d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072d4:	68b8      	ldr	r0, [r7, #8]
 80072d6:	f000 f88b 	bl	80073f0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80072da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80072de:	f000 f847 	bl	8007370 <FLASH_WaitForLastOperation>
 80072e2:	4603      	mov	r3, r0
 80072e4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80072e6:	4b08      	ldr	r3, [pc, #32]	; (8007308 <HAL_FLASH_Program+0xa4>)
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	4a07      	ldr	r2, [pc, #28]	; (8007308 <HAL_FLASH_Program+0xa4>)
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80072f2:	4b04      	ldr	r3, [pc, #16]	; (8007304 <HAL_FLASH_Program+0xa0>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	200009d0 	.word	0x200009d0
 8007308:	40023c00 	.word	0x40023c00

0800730c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007316:	4b0b      	ldr	r3, [pc, #44]	; (8007344 <HAL_FLASH_Unlock+0x38>)
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	da0b      	bge.n	8007336 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800731e:	4b09      	ldr	r3, [pc, #36]	; (8007344 <HAL_FLASH_Unlock+0x38>)
 8007320:	4a09      	ldr	r2, [pc, #36]	; (8007348 <HAL_FLASH_Unlock+0x3c>)
 8007322:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007324:	4b07      	ldr	r3, [pc, #28]	; (8007344 <HAL_FLASH_Unlock+0x38>)
 8007326:	4a09      	ldr	r2, [pc, #36]	; (800734c <HAL_FLASH_Unlock+0x40>)
 8007328:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800732a:	4b06      	ldr	r3, [pc, #24]	; (8007344 <HAL_FLASH_Unlock+0x38>)
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	da01      	bge.n	8007336 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007336:	79fb      	ldrb	r3, [r7, #7]
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	40023c00 	.word	0x40023c00
 8007348:	45670123 	.word	0x45670123
 800734c:	cdef89ab 	.word	0xcdef89ab

08007350 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007350:	b480      	push	{r7}
 8007352:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007354:	4b05      	ldr	r3, [pc, #20]	; (800736c <HAL_FLASH_Lock+0x1c>)
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	4a04      	ldr	r2, [pc, #16]	; (800736c <HAL_FLASH_Lock+0x1c>)
 800735a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800735e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	40023c00 	.word	0x40023c00

08007370 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800737c:	4b1a      	ldr	r3, [pc, #104]	; (80073e8 <FLASH_WaitForLastOperation+0x78>)
 800737e:	2200      	movs	r2, #0
 8007380:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007382:	f7fe fc83 	bl	8005c8c <HAL_GetTick>
 8007386:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007388:	e010      	b.n	80073ac <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007390:	d00c      	beq.n	80073ac <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d007      	beq.n	80073a8 <FLASH_WaitForLastOperation+0x38>
 8007398:	f7fe fc78 	bl	8005c8c <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d201      	bcs.n	80073ac <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e019      	b.n	80073e0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80073ac:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <FLASH_WaitForLastOperation+0x7c>)
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e8      	bne.n	800738a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80073b8:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <FLASH_WaitForLastOperation+0x7c>)
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80073c4:	4b09      	ldr	r3, [pc, #36]	; (80073ec <FLASH_WaitForLastOperation+0x7c>)
 80073c6:	2201      	movs	r2, #1
 80073c8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80073ca:	4b08      	ldr	r3, [pc, #32]	; (80073ec <FLASH_WaitForLastOperation+0x7c>)
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80073d6:	f000 f8a5 	bl	8007524 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80073de:	2300      	movs	r3, #0
  
}  
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	200009d0 	.word	0x200009d0
 80073ec:	40023c00 	.word	0x40023c00

080073f0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80073fc:	4b14      	ldr	r3, [pc, #80]	; (8007450 <FLASH_Program_DoubleWord+0x60>)
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	4a13      	ldr	r2, [pc, #76]	; (8007450 <FLASH_Program_DoubleWord+0x60>)
 8007402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007406:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007408:	4b11      	ldr	r3, [pc, #68]	; (8007450 <FLASH_Program_DoubleWord+0x60>)
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	4a10      	ldr	r2, [pc, #64]	; (8007450 <FLASH_Program_DoubleWord+0x60>)
 800740e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007412:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007414:	4b0e      	ldr	r3, [pc, #56]	; (8007450 <FLASH_Program_DoubleWord+0x60>)
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	4a0d      	ldr	r2, [pc, #52]	; (8007450 <FLASH_Program_DoubleWord+0x60>)
 800741a:	f043 0301 	orr.w	r3, r3, #1
 800741e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007426:	f3bf 8f6f 	isb	sy
}
 800742a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800742c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007430:	f04f 0200 	mov.w	r2, #0
 8007434:	f04f 0300 	mov.w	r3, #0
 8007438:	000a      	movs	r2, r1
 800743a:	2300      	movs	r3, #0
 800743c:	68f9      	ldr	r1, [r7, #12]
 800743e:	3104      	adds	r1, #4
 8007440:	4613      	mov	r3, r2
 8007442:	600b      	str	r3, [r1, #0]
}
 8007444:	bf00      	nop
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	40023c00 	.word	0x40023c00

08007454 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800745e:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <FLASH_Program_Word+0x40>)
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	4a0c      	ldr	r2, [pc, #48]	; (8007494 <FLASH_Program_Word+0x40>)
 8007464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007468:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800746a:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <FLASH_Program_Word+0x40>)
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	4a09      	ldr	r2, [pc, #36]	; (8007494 <FLASH_Program_Word+0x40>)
 8007470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007474:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007476:	4b07      	ldr	r3, [pc, #28]	; (8007494 <FLASH_Program_Word+0x40>)
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	4a06      	ldr	r2, [pc, #24]	; (8007494 <FLASH_Program_Word+0x40>)
 800747c:	f043 0301 	orr.w	r3, r3, #1
 8007480:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	601a      	str	r2, [r3, #0]
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	40023c00 	.word	0x40023c00

08007498 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80074a4:	4b0d      	ldr	r3, [pc, #52]	; (80074dc <FLASH_Program_HalfWord+0x44>)
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	4a0c      	ldr	r2, [pc, #48]	; (80074dc <FLASH_Program_HalfWord+0x44>)
 80074aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80074b0:	4b0a      	ldr	r3, [pc, #40]	; (80074dc <FLASH_Program_HalfWord+0x44>)
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	4a09      	ldr	r2, [pc, #36]	; (80074dc <FLASH_Program_HalfWord+0x44>)
 80074b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80074bc:	4b07      	ldr	r3, [pc, #28]	; (80074dc <FLASH_Program_HalfWord+0x44>)
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	4a06      	ldr	r2, [pc, #24]	; (80074dc <FLASH_Program_HalfWord+0x44>)
 80074c2:	f043 0301 	orr.w	r3, r3, #1
 80074c6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	887a      	ldrh	r2, [r7, #2]
 80074cc:	801a      	strh	r2, [r3, #0]
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	40023c00 	.word	0x40023c00

080074e0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80074ec:	4b0c      	ldr	r3, [pc, #48]	; (8007520 <FLASH_Program_Byte+0x40>)
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	4a0b      	ldr	r2, [pc, #44]	; (8007520 <FLASH_Program_Byte+0x40>)
 80074f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80074f8:	4b09      	ldr	r3, [pc, #36]	; (8007520 <FLASH_Program_Byte+0x40>)
 80074fa:	4a09      	ldr	r2, [pc, #36]	; (8007520 <FLASH_Program_Byte+0x40>)
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007500:	4b07      	ldr	r3, [pc, #28]	; (8007520 <FLASH_Program_Byte+0x40>)
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	4a06      	ldr	r2, [pc, #24]	; (8007520 <FLASH_Program_Byte+0x40>)
 8007506:	f043 0301 	orr.w	r3, r3, #1
 800750a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	78fa      	ldrb	r2, [r7, #3]
 8007510:	701a      	strb	r2, [r3, #0]
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	40023c00 	.word	0x40023c00

08007524 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007528:	4b2f      	ldr	r3, [pc, #188]	; (80075e8 <FLASH_SetErrorCode+0xc4>)
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f003 0310 	and.w	r3, r3, #16
 8007530:	2b00      	cmp	r3, #0
 8007532:	d008      	beq.n	8007546 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007534:	4b2d      	ldr	r3, [pc, #180]	; (80075ec <FLASH_SetErrorCode+0xc8>)
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	f043 0310 	orr.w	r3, r3, #16
 800753c:	4a2b      	ldr	r2, [pc, #172]	; (80075ec <FLASH_SetErrorCode+0xc8>)
 800753e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007540:	4b29      	ldr	r3, [pc, #164]	; (80075e8 <FLASH_SetErrorCode+0xc4>)
 8007542:	2210      	movs	r2, #16
 8007544:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007546:	4b28      	ldr	r3, [pc, #160]	; (80075e8 <FLASH_SetErrorCode+0xc4>)
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b00      	cmp	r3, #0
 8007550:	d008      	beq.n	8007564 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007552:	4b26      	ldr	r3, [pc, #152]	; (80075ec <FLASH_SetErrorCode+0xc8>)
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f043 0308 	orr.w	r3, r3, #8
 800755a:	4a24      	ldr	r2, [pc, #144]	; (80075ec <FLASH_SetErrorCode+0xc8>)
 800755c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800755e:	4b22      	ldr	r3, [pc, #136]	; (80075e8 <FLASH_SetErrorCode+0xc4>)
 8007560:	2220      	movs	r2, #32
 8007562:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007564:	4b20      	ldr	r3, [pc, #128]	; (80075e8 <FLASH_SetErrorCode+0xc4>)
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	d008      	beq.n	8007582 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007570:	4b1e      	ldr	r3, [pc, #120]	; (80075ec <FLASH_SetErrorCode+0xc8>)
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	f043 0304 	orr.w	r3, r3, #4
 8007578:	4a1c      	ldr	r2, [pc, #112]	; (80075ec <FLASH_SetErrorCode+0xc8>)
 800757a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800757c:	4b1a      	ldr	r3, [pc, #104]	; (80075e8 <FLASH_SetErrorCode+0xc4>)
 800757e:	2240      	movs	r2, #64	; 0x40
 8007580:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007582:	4b19      	ldr	r3, [pc, #100]	; (80075e8 <FLASH_SetErrorCode+0xc4>)
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758a:	2b00      	cmp	r3, #0
 800758c:	d008      	beq.n	80075a0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800758e:	4b17      	ldr	r3, [pc, #92]	; (80075ec <FLASH_SetErrorCode+0xc8>)
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f043 0302 	orr.w	r3, r3, #2
 8007596:	4a15      	ldr	r2, [pc, #84]	; (80075ec <FLASH_SetErrorCode+0xc8>)
 8007598:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800759a:	4b13      	ldr	r3, [pc, #76]	; (80075e8 <FLASH_SetErrorCode+0xc4>)
 800759c:	2280      	movs	r2, #128	; 0x80
 800759e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80075a0:	4b11      	ldr	r3, [pc, #68]	; (80075e8 <FLASH_SetErrorCode+0xc4>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d009      	beq.n	80075c0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80075ac:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <FLASH_SetErrorCode+0xc8>)
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	f043 0301 	orr.w	r3, r3, #1
 80075b4:	4a0d      	ldr	r2, [pc, #52]	; (80075ec <FLASH_SetErrorCode+0xc8>)
 80075b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <FLASH_SetErrorCode+0xc4>)
 80075ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075be:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80075c0:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <FLASH_SetErrorCode+0xc4>)
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d008      	beq.n	80075de <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80075cc:	4b07      	ldr	r3, [pc, #28]	; (80075ec <FLASH_SetErrorCode+0xc8>)
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	f043 0320 	orr.w	r3, r3, #32
 80075d4:	4a05      	ldr	r2, [pc, #20]	; (80075ec <FLASH_SetErrorCode+0xc8>)
 80075d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80075d8:	4b03      	ldr	r3, [pc, #12]	; (80075e8 <FLASH_SetErrorCode+0xc4>)
 80075da:	2202      	movs	r2, #2
 80075dc:	60da      	str	r2, [r3, #12]
  }
}
 80075de:	bf00      	nop
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	40023c00 	.word	0x40023c00
 80075ec:	200009d0 	.word	0x200009d0

080075f0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d102      	bne.n	800760c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]
 800760a:	e010      	b.n	800762e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800760c:	78fb      	ldrb	r3, [r7, #3]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d103      	bne.n	800761a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	e009      	b.n	800762e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d103      	bne.n	8007628 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007624:	60fb      	str	r3, [r7, #12]
 8007626:	e002      	b.n	800762e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007628:	f44f 7340 	mov.w	r3, #768	; 0x300
 800762c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <FLASH_Erase_Sector+0x8c>)
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	4a12      	ldr	r2, [pc, #72]	; (800767c <FLASH_Erase_Sector+0x8c>)
 8007634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007638:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800763a:	4b10      	ldr	r3, [pc, #64]	; (800767c <FLASH_Erase_Sector+0x8c>)
 800763c:	691a      	ldr	r2, [r3, #16]
 800763e:	490f      	ldr	r1, [pc, #60]	; (800767c <FLASH_Erase_Sector+0x8c>)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4313      	orrs	r3, r2
 8007644:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007646:	4b0d      	ldr	r3, [pc, #52]	; (800767c <FLASH_Erase_Sector+0x8c>)
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	4a0c      	ldr	r2, [pc, #48]	; (800767c <FLASH_Erase_Sector+0x8c>)
 800764c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007650:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007652:	4b0a      	ldr	r3, [pc, #40]	; (800767c <FLASH_Erase_Sector+0x8c>)
 8007654:	691a      	ldr	r2, [r3, #16]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	4313      	orrs	r3, r2
 800765c:	4a07      	ldr	r2, [pc, #28]	; (800767c <FLASH_Erase_Sector+0x8c>)
 800765e:	f043 0302 	orr.w	r3, r3, #2
 8007662:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007664:	4b05      	ldr	r3, [pc, #20]	; (800767c <FLASH_Erase_Sector+0x8c>)
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	4a04      	ldr	r2, [pc, #16]	; (800767c <FLASH_Erase_Sector+0x8c>)
 800766a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800766e:	6113      	str	r3, [r2, #16]
}
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	40023c00 	.word	0x40023c00

08007680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007680:	b480      	push	{r7}
 8007682:	b089      	sub	sp, #36	; 0x24
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800768a:	2300      	movs	r3, #0
 800768c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800768e:	2300      	movs	r3, #0
 8007690:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007692:	2300      	movs	r3, #0
 8007694:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007696:	2300      	movs	r3, #0
 8007698:	61fb      	str	r3, [r7, #28]
 800769a:	e165      	b.n	8007968 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800769c:	2201      	movs	r2, #1
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	fa02 f303 	lsl.w	r3, r2, r3
 80076a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	4013      	ands	r3, r2
 80076ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	f040 8154 	bne.w	8007962 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d005      	beq.n	80076d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d130      	bne.n	8007734 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	2203      	movs	r2, #3
 80076de:	fa02 f303 	lsl.w	r3, r2, r3
 80076e2:	43db      	mvns	r3, r3
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	4013      	ands	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68da      	ldr	r2, [r3, #12]
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	fa02 f303 	lsl.w	r3, r2, r3
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007708:	2201      	movs	r2, #1
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	fa02 f303 	lsl.w	r3, r2, r3
 8007710:	43db      	mvns	r3, r3
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	4013      	ands	r3, r2
 8007716:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	091b      	lsrs	r3, r3, #4
 800771e:	f003 0201 	and.w	r2, r3, #1
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	fa02 f303 	lsl.w	r3, r2, r3
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	4313      	orrs	r3, r2
 800772c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f003 0303 	and.w	r3, r3, #3
 800773c:	2b03      	cmp	r3, #3
 800773e:	d017      	beq.n	8007770 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	2203      	movs	r2, #3
 800774c:	fa02 f303 	lsl.w	r3, r2, r3
 8007750:	43db      	mvns	r3, r3
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	4013      	ands	r3, r2
 8007756:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	fa02 f303 	lsl.w	r3, r2, r3
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	4313      	orrs	r3, r2
 8007768:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f003 0303 	and.w	r3, r3, #3
 8007778:	2b02      	cmp	r3, #2
 800777a:	d123      	bne.n	80077c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	08da      	lsrs	r2, r3, #3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3208      	adds	r2, #8
 8007784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007788:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	220f      	movs	r2, #15
 8007794:	fa02 f303 	lsl.w	r3, r2, r3
 8007798:	43db      	mvns	r3, r3
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	4013      	ands	r3, r2
 800779e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	fa02 f303 	lsl.w	r3, r2, r3
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	08da      	lsrs	r2, r3, #3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	3208      	adds	r2, #8
 80077be:	69b9      	ldr	r1, [r7, #24]
 80077c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	2203      	movs	r2, #3
 80077d0:	fa02 f303 	lsl.w	r3, r2, r3
 80077d4:	43db      	mvns	r3, r3
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	4013      	ands	r3, r2
 80077da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f003 0203 	and.w	r2, r3, #3
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 80ae 	beq.w	8007962 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007806:	2300      	movs	r3, #0
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	4b5d      	ldr	r3, [pc, #372]	; (8007980 <HAL_GPIO_Init+0x300>)
 800780c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780e:	4a5c      	ldr	r2, [pc, #368]	; (8007980 <HAL_GPIO_Init+0x300>)
 8007810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007814:	6453      	str	r3, [r2, #68]	; 0x44
 8007816:	4b5a      	ldr	r3, [pc, #360]	; (8007980 <HAL_GPIO_Init+0x300>)
 8007818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007822:	4a58      	ldr	r2, [pc, #352]	; (8007984 <HAL_GPIO_Init+0x304>)
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	089b      	lsrs	r3, r3, #2
 8007828:	3302      	adds	r3, #2
 800782a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800782e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	220f      	movs	r2, #15
 800783a:	fa02 f303 	lsl.w	r3, r2, r3
 800783e:	43db      	mvns	r3, r3
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	4013      	ands	r3, r2
 8007844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a4f      	ldr	r2, [pc, #316]	; (8007988 <HAL_GPIO_Init+0x308>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d025      	beq.n	800789a <HAL_GPIO_Init+0x21a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a4e      	ldr	r2, [pc, #312]	; (800798c <HAL_GPIO_Init+0x30c>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d01f      	beq.n	8007896 <HAL_GPIO_Init+0x216>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a4d      	ldr	r2, [pc, #308]	; (8007990 <HAL_GPIO_Init+0x310>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d019      	beq.n	8007892 <HAL_GPIO_Init+0x212>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a4c      	ldr	r2, [pc, #304]	; (8007994 <HAL_GPIO_Init+0x314>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d013      	beq.n	800788e <HAL_GPIO_Init+0x20e>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a4b      	ldr	r2, [pc, #300]	; (8007998 <HAL_GPIO_Init+0x318>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00d      	beq.n	800788a <HAL_GPIO_Init+0x20a>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a4a      	ldr	r2, [pc, #296]	; (800799c <HAL_GPIO_Init+0x31c>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d007      	beq.n	8007886 <HAL_GPIO_Init+0x206>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a49      	ldr	r2, [pc, #292]	; (80079a0 <HAL_GPIO_Init+0x320>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d101      	bne.n	8007882 <HAL_GPIO_Init+0x202>
 800787e:	2306      	movs	r3, #6
 8007880:	e00c      	b.n	800789c <HAL_GPIO_Init+0x21c>
 8007882:	2307      	movs	r3, #7
 8007884:	e00a      	b.n	800789c <HAL_GPIO_Init+0x21c>
 8007886:	2305      	movs	r3, #5
 8007888:	e008      	b.n	800789c <HAL_GPIO_Init+0x21c>
 800788a:	2304      	movs	r3, #4
 800788c:	e006      	b.n	800789c <HAL_GPIO_Init+0x21c>
 800788e:	2303      	movs	r3, #3
 8007890:	e004      	b.n	800789c <HAL_GPIO_Init+0x21c>
 8007892:	2302      	movs	r3, #2
 8007894:	e002      	b.n	800789c <HAL_GPIO_Init+0x21c>
 8007896:	2301      	movs	r3, #1
 8007898:	e000      	b.n	800789c <HAL_GPIO_Init+0x21c>
 800789a:	2300      	movs	r3, #0
 800789c:	69fa      	ldr	r2, [r7, #28]
 800789e:	f002 0203 	and.w	r2, r2, #3
 80078a2:	0092      	lsls	r2, r2, #2
 80078a4:	4093      	lsls	r3, r2
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078ac:	4935      	ldr	r1, [pc, #212]	; (8007984 <HAL_GPIO_Init+0x304>)
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	089b      	lsrs	r3, r3, #2
 80078b2:	3302      	adds	r3, #2
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80078ba:	4b3a      	ldr	r3, [pc, #232]	; (80079a4 <HAL_GPIO_Init+0x324>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	43db      	mvns	r3, r3
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	4013      	ands	r3, r2
 80078c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	4313      	orrs	r3, r2
 80078dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80078de:	4a31      	ldr	r2, [pc, #196]	; (80079a4 <HAL_GPIO_Init+0x324>)
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80078e4:	4b2f      	ldr	r3, [pc, #188]	; (80079a4 <HAL_GPIO_Init+0x324>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	43db      	mvns	r3, r3
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	4013      	ands	r3, r2
 80078f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	4313      	orrs	r3, r2
 8007906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007908:	4a26      	ldr	r2, [pc, #152]	; (80079a4 <HAL_GPIO_Init+0x324>)
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800790e:	4b25      	ldr	r3, [pc, #148]	; (80079a4 <HAL_GPIO_Init+0x324>)
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	43db      	mvns	r3, r3
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	4013      	ands	r3, r2
 800791c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	4313      	orrs	r3, r2
 8007930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007932:	4a1c      	ldr	r2, [pc, #112]	; (80079a4 <HAL_GPIO_Init+0x324>)
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007938:	4b1a      	ldr	r3, [pc, #104]	; (80079a4 <HAL_GPIO_Init+0x324>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	43db      	mvns	r3, r3
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	4013      	ands	r3, r2
 8007946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d003      	beq.n	800795c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007954:	69ba      	ldr	r2, [r7, #24]
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	4313      	orrs	r3, r2
 800795a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800795c:	4a11      	ldr	r2, [pc, #68]	; (80079a4 <HAL_GPIO_Init+0x324>)
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	3301      	adds	r3, #1
 8007966:	61fb      	str	r3, [r7, #28]
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	2b0f      	cmp	r3, #15
 800796c:	f67f ae96 	bls.w	800769c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007970:	bf00      	nop
 8007972:	bf00      	nop
 8007974:	3724      	adds	r7, #36	; 0x24
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	40023800 	.word	0x40023800
 8007984:	40013800 	.word	0x40013800
 8007988:	40020000 	.word	0x40020000
 800798c:	40020400 	.word	0x40020400
 8007990:	40020800 	.word	0x40020800
 8007994:	40020c00 	.word	0x40020c00
 8007998:	40021000 	.word	0x40021000
 800799c:	40021400 	.word	0x40021400
 80079a0:	40021800 	.word	0x40021800
 80079a4:	40013c00 	.word	0x40013c00

080079a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	887b      	ldrh	r3, [r7, #2]
 80079ba:	4013      	ands	r3, r2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80079c0:	2301      	movs	r3, #1
 80079c2:	73fb      	strb	r3, [r7, #15]
 80079c4:	e001      	b.n	80079ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	807b      	strh	r3, [r7, #2]
 80079e4:	4613      	mov	r3, r2
 80079e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80079e8:	787b      	ldrb	r3, [r7, #1]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80079ee:	887a      	ldrh	r2, [r7, #2]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80079f4:	e003      	b.n	80079fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80079f6:	887b      	ldrh	r3, [r7, #2]
 80079f8:	041a      	lsls	r2, r3, #16
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	619a      	str	r2, [r3, #24]
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	460b      	mov	r3, r1
 8007a14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007a1c:	887a      	ldrh	r2, [r7, #2]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4013      	ands	r3, r2
 8007a22:	041a      	lsls	r2, r3, #16
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	43d9      	mvns	r1, r3
 8007a28:	887b      	ldrh	r3, [r7, #2]
 8007a2a:	400b      	ands	r3, r1
 8007a2c:	431a      	orrs	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	619a      	str	r2, [r3, #24]
}
 8007a32:	bf00      	nop
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
	...

08007a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007a4a:	4b08      	ldr	r3, [pc, #32]	; (8007a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a4c:	695a      	ldr	r2, [r3, #20]
 8007a4e:	88fb      	ldrh	r3, [r7, #6]
 8007a50:	4013      	ands	r3, r2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d006      	beq.n	8007a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007a56:	4a05      	ldr	r2, [pc, #20]	; (8007a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a58:	88fb      	ldrh	r3, [r7, #6]
 8007a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007a5c:	88fb      	ldrh	r3, [r7, #6]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fd fac2 	bl	8004fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	40013c00 	.word	0x40013c00

08007a70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	603b      	str	r3, [r7, #0]
 8007a7e:	4b20      	ldr	r3, [pc, #128]	; (8007b00 <HAL_PWREx_EnableOverDrive+0x90>)
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	4a1f      	ldr	r2, [pc, #124]	; (8007b00 <HAL_PWREx_EnableOverDrive+0x90>)
 8007a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a88:	6413      	str	r3, [r2, #64]	; 0x40
 8007a8a:	4b1d      	ldr	r3, [pc, #116]	; (8007b00 <HAL_PWREx_EnableOverDrive+0x90>)
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a92:	603b      	str	r3, [r7, #0]
 8007a94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007a96:	4b1b      	ldr	r3, [pc, #108]	; (8007b04 <HAL_PWREx_EnableOverDrive+0x94>)
 8007a98:	2201      	movs	r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a9c:	f7fe f8f6 	bl	8005c8c <HAL_GetTick>
 8007aa0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007aa2:	e009      	b.n	8007ab8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007aa4:	f7fe f8f2 	bl	8005c8c <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ab2:	d901      	bls.n	8007ab8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e01f      	b.n	8007af8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007ab8:	4b13      	ldr	r3, [pc, #76]	; (8007b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ac4:	d1ee      	bne.n	8007aa4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007ac6:	4b11      	ldr	r3, [pc, #68]	; (8007b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ac8:	2201      	movs	r2, #1
 8007aca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007acc:	f7fe f8de 	bl	8005c8c <HAL_GetTick>
 8007ad0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007ad2:	e009      	b.n	8007ae8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007ad4:	f7fe f8da 	bl	8005c8c <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ae2:	d901      	bls.n	8007ae8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e007      	b.n	8007af8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007ae8:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007af4:	d1ee      	bne.n	8007ad4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	40023800 	.word	0x40023800
 8007b04:	420e0040 	.word	0x420e0040
 8007b08:	40007000 	.word	0x40007000
 8007b0c:	420e0044 	.word	0x420e0044

08007b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e0cc      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b24:	4b68      	ldr	r3, [pc, #416]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 030f 	and.w	r3, r3, #15
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d90c      	bls.n	8007b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b32:	4b65      	ldr	r3, [pc, #404]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	b2d2      	uxtb	r2, r2
 8007b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b3a:	4b63      	ldr	r3, [pc, #396]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 030f 	and.w	r3, r3, #15
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d001      	beq.n	8007b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e0b8      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d020      	beq.n	8007b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d005      	beq.n	8007b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b64:	4b59      	ldr	r3, [pc, #356]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	4a58      	ldr	r2, [pc, #352]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0308 	and.w	r3, r3, #8
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b7c:	4b53      	ldr	r3, [pc, #332]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	4a52      	ldr	r2, [pc, #328]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b88:	4b50      	ldr	r3, [pc, #320]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	494d      	ldr	r1, [pc, #308]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d044      	beq.n	8007c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d107      	bne.n	8007bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bae:	4b47      	ldr	r3, [pc, #284]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d119      	bne.n	8007bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e07f      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d003      	beq.n	8007bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d107      	bne.n	8007bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bce:	4b3f      	ldr	r3, [pc, #252]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d109      	bne.n	8007bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e06f      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bde:	4b3b      	ldr	r3, [pc, #236]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e067      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bee:	4b37      	ldr	r3, [pc, #220]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f023 0203 	bic.w	r2, r3, #3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	4934      	ldr	r1, [pc, #208]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c00:	f7fe f844 	bl	8005c8c <HAL_GetTick>
 8007c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c06:	e00a      	b.n	8007c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c08:	f7fe f840 	bl	8005c8c <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d901      	bls.n	8007c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e04f      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c1e:	4b2b      	ldr	r3, [pc, #172]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f003 020c 	and.w	r2, r3, #12
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d1eb      	bne.n	8007c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c30:	4b25      	ldr	r3, [pc, #148]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 030f 	and.w	r3, r3, #15
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d20c      	bcs.n	8007c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c3e:	4b22      	ldr	r3, [pc, #136]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	b2d2      	uxtb	r2, r2
 8007c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c46:	4b20      	ldr	r3, [pc, #128]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 030f 	and.w	r3, r3, #15
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d001      	beq.n	8007c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e032      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d008      	beq.n	8007c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c64:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	4916      	ldr	r1, [pc, #88]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0308 	and.w	r3, r3, #8
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d009      	beq.n	8007c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c82:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	490e      	ldr	r1, [pc, #56]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c96:	f000 f855 	bl	8007d44 <HAL_RCC_GetSysClockFreq>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	091b      	lsrs	r3, r3, #4
 8007ca2:	f003 030f 	and.w	r3, r3, #15
 8007ca6:	490a      	ldr	r1, [pc, #40]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8007ca8:	5ccb      	ldrb	r3, [r1, r3]
 8007caa:	fa22 f303 	lsr.w	r3, r2, r3
 8007cae:	4a09      	ldr	r2, [pc, #36]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007cb2:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fd ffa4 	bl	8005c04 <HAL_InitTick>

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	40023c00 	.word	0x40023c00
 8007ccc:	40023800 	.word	0x40023800
 8007cd0:	0800fa30 	.word	0x0800fa30
 8007cd4:	20000078 	.word	0x20000078
 8007cd8:	2000007c 	.word	0x2000007c

08007cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ce0:	4b03      	ldr	r3, [pc, #12]	; (8007cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	20000078 	.word	0x20000078

08007cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007cf8:	f7ff fff0 	bl	8007cdc <HAL_RCC_GetHCLKFreq>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	0a9b      	lsrs	r3, r3, #10
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	4903      	ldr	r1, [pc, #12]	; (8007d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d0a:	5ccb      	ldrb	r3, [r1, r3]
 8007d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	40023800 	.word	0x40023800
 8007d18:	0800fa40 	.word	0x0800fa40

08007d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007d20:	f7ff ffdc 	bl	8007cdc <HAL_RCC_GetHCLKFreq>
 8007d24:	4602      	mov	r2, r0
 8007d26:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	0b5b      	lsrs	r3, r3, #13
 8007d2c:	f003 0307 	and.w	r3, r3, #7
 8007d30:	4903      	ldr	r1, [pc, #12]	; (8007d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d32:	5ccb      	ldrb	r3, [r1, r3]
 8007d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	40023800 	.word	0x40023800
 8007d40:	0800fa40 	.word	0x0800fa40

08007d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d48:	b0ae      	sub	sp, #184	; 0xb8
 8007d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d6a:	4bcb      	ldr	r3, [pc, #812]	; (8008098 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f003 030c 	and.w	r3, r3, #12
 8007d72:	2b0c      	cmp	r3, #12
 8007d74:	f200 8206 	bhi.w	8008184 <HAL_RCC_GetSysClockFreq+0x440>
 8007d78:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007db5 	.word	0x08007db5
 8007d84:	08008185 	.word	0x08008185
 8007d88:	08008185 	.word	0x08008185
 8007d8c:	08008185 	.word	0x08008185
 8007d90:	08007dbd 	.word	0x08007dbd
 8007d94:	08008185 	.word	0x08008185
 8007d98:	08008185 	.word	0x08008185
 8007d9c:	08008185 	.word	0x08008185
 8007da0:	08007dc5 	.word	0x08007dc5
 8007da4:	08008185 	.word	0x08008185
 8007da8:	08008185 	.word	0x08008185
 8007dac:	08008185 	.word	0x08008185
 8007db0:	08007fb5 	.word	0x08007fb5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007db4:	4bb9      	ldr	r3, [pc, #740]	; (800809c <HAL_RCC_GetSysClockFreq+0x358>)
 8007db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007dba:	e1e7      	b.n	800818c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007dbc:	4bb8      	ldr	r3, [pc, #736]	; (80080a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007dc2:	e1e3      	b.n	800818c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007dc4:	4bb4      	ldr	r3, [pc, #720]	; (8008098 <HAL_RCC_GetSysClockFreq+0x354>)
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007dd0:	4bb1      	ldr	r3, [pc, #708]	; (8008098 <HAL_RCC_GetSysClockFreq+0x354>)
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d071      	beq.n	8007ec0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ddc:	4bae      	ldr	r3, [pc, #696]	; (8008098 <HAL_RCC_GetSysClockFreq+0x354>)
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	099b      	lsrs	r3, r3, #6
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007de8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007dfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e02:	4622      	mov	r2, r4
 8007e04:	462b      	mov	r3, r5
 8007e06:	f04f 0000 	mov.w	r0, #0
 8007e0a:	f04f 0100 	mov.w	r1, #0
 8007e0e:	0159      	lsls	r1, r3, #5
 8007e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e14:	0150      	lsls	r0, r2, #5
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4621      	mov	r1, r4
 8007e1c:	1a51      	subs	r1, r2, r1
 8007e1e:	6439      	str	r1, [r7, #64]	; 0x40
 8007e20:	4629      	mov	r1, r5
 8007e22:	eb63 0301 	sbc.w	r3, r3, r1
 8007e26:	647b      	str	r3, [r7, #68]	; 0x44
 8007e28:	f04f 0200 	mov.w	r2, #0
 8007e2c:	f04f 0300 	mov.w	r3, #0
 8007e30:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007e34:	4649      	mov	r1, r9
 8007e36:	018b      	lsls	r3, r1, #6
 8007e38:	4641      	mov	r1, r8
 8007e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e3e:	4641      	mov	r1, r8
 8007e40:	018a      	lsls	r2, r1, #6
 8007e42:	4641      	mov	r1, r8
 8007e44:	1a51      	subs	r1, r2, r1
 8007e46:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e48:	4649      	mov	r1, r9
 8007e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8007e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e50:	f04f 0200 	mov.w	r2, #0
 8007e54:	f04f 0300 	mov.w	r3, #0
 8007e58:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	00cb      	lsls	r3, r1, #3
 8007e60:	4641      	mov	r1, r8
 8007e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e66:	4641      	mov	r1, r8
 8007e68:	00ca      	lsls	r2, r1, #3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	4622      	mov	r2, r4
 8007e72:	189b      	adds	r3, r3, r2
 8007e74:	633b      	str	r3, [r7, #48]	; 0x30
 8007e76:	462b      	mov	r3, r5
 8007e78:	460a      	mov	r2, r1
 8007e7a:	eb42 0303 	adc.w	r3, r2, r3
 8007e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e80:	f04f 0200 	mov.w	r2, #0
 8007e84:	f04f 0300 	mov.w	r3, #0
 8007e88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	024b      	lsls	r3, r1, #9
 8007e90:	4621      	mov	r1, r4
 8007e92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e96:	4621      	mov	r1, r4
 8007e98:	024a      	lsls	r2, r1, #9
 8007e9a:	4610      	mov	r0, r2
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ea8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007eac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007eb0:	f7f8 feea 	bl	8000c88 <__aeabi_uldivmod>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4613      	mov	r3, r2
 8007eba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ebe:	e067      	b.n	8007f90 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ec0:	4b75      	ldr	r3, [pc, #468]	; (8008098 <HAL_RCC_GetSysClockFreq+0x354>)
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	099b      	lsrs	r3, r3, #6
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ecc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007eda:	2300      	movs	r3, #0
 8007edc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ede:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007ee2:	4622      	mov	r2, r4
 8007ee4:	462b      	mov	r3, r5
 8007ee6:	f04f 0000 	mov.w	r0, #0
 8007eea:	f04f 0100 	mov.w	r1, #0
 8007eee:	0159      	lsls	r1, r3, #5
 8007ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ef4:	0150      	lsls	r0, r2, #5
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4621      	mov	r1, r4
 8007efc:	1a51      	subs	r1, r2, r1
 8007efe:	62b9      	str	r1, [r7, #40]	; 0x28
 8007f00:	4629      	mov	r1, r5
 8007f02:	eb63 0301 	sbc.w	r3, r3, r1
 8007f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f08:	f04f 0200 	mov.w	r2, #0
 8007f0c:	f04f 0300 	mov.w	r3, #0
 8007f10:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007f14:	4649      	mov	r1, r9
 8007f16:	018b      	lsls	r3, r1, #6
 8007f18:	4641      	mov	r1, r8
 8007f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f1e:	4641      	mov	r1, r8
 8007f20:	018a      	lsls	r2, r1, #6
 8007f22:	4641      	mov	r1, r8
 8007f24:	ebb2 0a01 	subs.w	sl, r2, r1
 8007f28:	4649      	mov	r1, r9
 8007f2a:	eb63 0b01 	sbc.w	fp, r3, r1
 8007f2e:	f04f 0200 	mov.w	r2, #0
 8007f32:	f04f 0300 	mov.w	r3, #0
 8007f36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f42:	4692      	mov	sl, r2
 8007f44:	469b      	mov	fp, r3
 8007f46:	4623      	mov	r3, r4
 8007f48:	eb1a 0303 	adds.w	r3, sl, r3
 8007f4c:	623b      	str	r3, [r7, #32]
 8007f4e:	462b      	mov	r3, r5
 8007f50:	eb4b 0303 	adc.w	r3, fp, r3
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
 8007f56:	f04f 0200 	mov.w	r2, #0
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007f62:	4629      	mov	r1, r5
 8007f64:	028b      	lsls	r3, r1, #10
 8007f66:	4621      	mov	r1, r4
 8007f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	028a      	lsls	r2, r1, #10
 8007f70:	4610      	mov	r0, r2
 8007f72:	4619      	mov	r1, r3
 8007f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f78:	2200      	movs	r2, #0
 8007f7a:	673b      	str	r3, [r7, #112]	; 0x70
 8007f7c:	677a      	str	r2, [r7, #116]	; 0x74
 8007f7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007f82:	f7f8 fe81 	bl	8000c88 <__aeabi_uldivmod>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f90:	4b41      	ldr	r3, [pc, #260]	; (8008098 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	0c1b      	lsrs	r3, r3, #16
 8007f96:	f003 0303 	and.w	r3, r3, #3
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	005b      	lsls	r3, r3, #1
 8007f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007fb2:	e0eb      	b.n	800818c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007fb4:	4b38      	ldr	r3, [pc, #224]	; (8008098 <HAL_RCC_GetSysClockFreq+0x354>)
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007fc0:	4b35      	ldr	r3, [pc, #212]	; (8008098 <HAL_RCC_GetSysClockFreq+0x354>)
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d06b      	beq.n	80080a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fcc:	4b32      	ldr	r3, [pc, #200]	; (8008098 <HAL_RCC_GetSysClockFreq+0x354>)
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	099b      	lsrs	r3, r3, #6
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fde:	663b      	str	r3, [r7, #96]	; 0x60
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	667b      	str	r3, [r7, #100]	; 0x64
 8007fe4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007fe8:	4622      	mov	r2, r4
 8007fea:	462b      	mov	r3, r5
 8007fec:	f04f 0000 	mov.w	r0, #0
 8007ff0:	f04f 0100 	mov.w	r1, #0
 8007ff4:	0159      	lsls	r1, r3, #5
 8007ff6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ffa:	0150      	lsls	r0, r2, #5
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4621      	mov	r1, r4
 8008002:	1a51      	subs	r1, r2, r1
 8008004:	61b9      	str	r1, [r7, #24]
 8008006:	4629      	mov	r1, r5
 8008008:	eb63 0301 	sbc.w	r3, r3, r1
 800800c:	61fb      	str	r3, [r7, #28]
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	f04f 0300 	mov.w	r3, #0
 8008016:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800801a:	4659      	mov	r1, fp
 800801c:	018b      	lsls	r3, r1, #6
 800801e:	4651      	mov	r1, sl
 8008020:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008024:	4651      	mov	r1, sl
 8008026:	018a      	lsls	r2, r1, #6
 8008028:	4651      	mov	r1, sl
 800802a:	ebb2 0801 	subs.w	r8, r2, r1
 800802e:	4659      	mov	r1, fp
 8008030:	eb63 0901 	sbc.w	r9, r3, r1
 8008034:	f04f 0200 	mov.w	r2, #0
 8008038:	f04f 0300 	mov.w	r3, #0
 800803c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008040:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008044:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008048:	4690      	mov	r8, r2
 800804a:	4699      	mov	r9, r3
 800804c:	4623      	mov	r3, r4
 800804e:	eb18 0303 	adds.w	r3, r8, r3
 8008052:	613b      	str	r3, [r7, #16]
 8008054:	462b      	mov	r3, r5
 8008056:	eb49 0303 	adc.w	r3, r9, r3
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	f04f 0200 	mov.w	r2, #0
 8008060:	f04f 0300 	mov.w	r3, #0
 8008064:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008068:	4629      	mov	r1, r5
 800806a:	024b      	lsls	r3, r1, #9
 800806c:	4621      	mov	r1, r4
 800806e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008072:	4621      	mov	r1, r4
 8008074:	024a      	lsls	r2, r1, #9
 8008076:	4610      	mov	r0, r2
 8008078:	4619      	mov	r1, r3
 800807a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800807e:	2200      	movs	r2, #0
 8008080:	65bb      	str	r3, [r7, #88]	; 0x58
 8008082:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008084:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008088:	f7f8 fdfe 	bl	8000c88 <__aeabi_uldivmod>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4613      	mov	r3, r2
 8008092:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008096:	e065      	b.n	8008164 <HAL_RCC_GetSysClockFreq+0x420>
 8008098:	40023800 	.word	0x40023800
 800809c:	00f42400 	.word	0x00f42400
 80080a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080a4:	4b3d      	ldr	r3, [pc, #244]	; (800819c <HAL_RCC_GetSysClockFreq+0x458>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	099b      	lsrs	r3, r3, #6
 80080aa:	2200      	movs	r2, #0
 80080ac:	4618      	mov	r0, r3
 80080ae:	4611      	mov	r1, r2
 80080b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80080b4:	653b      	str	r3, [r7, #80]	; 0x50
 80080b6:	2300      	movs	r3, #0
 80080b8:	657b      	str	r3, [r7, #84]	; 0x54
 80080ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80080be:	4642      	mov	r2, r8
 80080c0:	464b      	mov	r3, r9
 80080c2:	f04f 0000 	mov.w	r0, #0
 80080c6:	f04f 0100 	mov.w	r1, #0
 80080ca:	0159      	lsls	r1, r3, #5
 80080cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080d0:	0150      	lsls	r0, r2, #5
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4641      	mov	r1, r8
 80080d8:	1a51      	subs	r1, r2, r1
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	4649      	mov	r1, r9
 80080de:	eb63 0301 	sbc.w	r3, r3, r1
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	f04f 0200 	mov.w	r2, #0
 80080e8:	f04f 0300 	mov.w	r3, #0
 80080ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80080f0:	4659      	mov	r1, fp
 80080f2:	018b      	lsls	r3, r1, #6
 80080f4:	4651      	mov	r1, sl
 80080f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80080fa:	4651      	mov	r1, sl
 80080fc:	018a      	lsls	r2, r1, #6
 80080fe:	4651      	mov	r1, sl
 8008100:	1a54      	subs	r4, r2, r1
 8008102:	4659      	mov	r1, fp
 8008104:	eb63 0501 	sbc.w	r5, r3, r1
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	f04f 0300 	mov.w	r3, #0
 8008110:	00eb      	lsls	r3, r5, #3
 8008112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008116:	00e2      	lsls	r2, r4, #3
 8008118:	4614      	mov	r4, r2
 800811a:	461d      	mov	r5, r3
 800811c:	4643      	mov	r3, r8
 800811e:	18e3      	adds	r3, r4, r3
 8008120:	603b      	str	r3, [r7, #0]
 8008122:	464b      	mov	r3, r9
 8008124:	eb45 0303 	adc.w	r3, r5, r3
 8008128:	607b      	str	r3, [r7, #4]
 800812a:	f04f 0200 	mov.w	r2, #0
 800812e:	f04f 0300 	mov.w	r3, #0
 8008132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008136:	4629      	mov	r1, r5
 8008138:	028b      	lsls	r3, r1, #10
 800813a:	4621      	mov	r1, r4
 800813c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008140:	4621      	mov	r1, r4
 8008142:	028a      	lsls	r2, r1, #10
 8008144:	4610      	mov	r0, r2
 8008146:	4619      	mov	r1, r3
 8008148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800814c:	2200      	movs	r2, #0
 800814e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008150:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008152:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008156:	f7f8 fd97 	bl	8000c88 <__aeabi_uldivmod>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4613      	mov	r3, r2
 8008160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008164:	4b0d      	ldr	r3, [pc, #52]	; (800819c <HAL_RCC_GetSysClockFreq+0x458>)
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	0f1b      	lsrs	r3, r3, #28
 800816a:	f003 0307 	and.w	r3, r3, #7
 800816e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008172:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800817a:	fbb2 f3f3 	udiv	r3, r2, r3
 800817e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008182:	e003      	b.n	800818c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008184:	4b06      	ldr	r3, [pc, #24]	; (80081a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800818a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800818c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008190:	4618      	mov	r0, r3
 8008192:	37b8      	adds	r7, #184	; 0xb8
 8008194:	46bd      	mov	sp, r7
 8008196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800819a:	bf00      	nop
 800819c:	40023800 	.word	0x40023800
 80081a0:	00f42400 	.word	0x00f42400

080081a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e28d      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 8083 	beq.w	80082ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80081c4:	4b94      	ldr	r3, [pc, #592]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f003 030c 	and.w	r3, r3, #12
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	d019      	beq.n	8008204 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80081d0:	4b91      	ldr	r3, [pc, #580]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80081d8:	2b08      	cmp	r3, #8
 80081da:	d106      	bne.n	80081ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80081dc:	4b8e      	ldr	r3, [pc, #568]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081e8:	d00c      	beq.n	8008204 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081ea:	4b8b      	ldr	r3, [pc, #556]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80081f2:	2b0c      	cmp	r3, #12
 80081f4:	d112      	bne.n	800821c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081f6:	4b88      	ldr	r3, [pc, #544]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008202:	d10b      	bne.n	800821c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008204:	4b84      	ldr	r3, [pc, #528]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d05b      	beq.n	80082c8 <HAL_RCC_OscConfig+0x124>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d157      	bne.n	80082c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e25a      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008224:	d106      	bne.n	8008234 <HAL_RCC_OscConfig+0x90>
 8008226:	4b7c      	ldr	r3, [pc, #496]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a7b      	ldr	r2, [pc, #492]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 800822c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	e01d      	b.n	8008270 <HAL_RCC_OscConfig+0xcc>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800823c:	d10c      	bne.n	8008258 <HAL_RCC_OscConfig+0xb4>
 800823e:	4b76      	ldr	r3, [pc, #472]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a75      	ldr	r2, [pc, #468]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 8008244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008248:	6013      	str	r3, [r2, #0]
 800824a:	4b73      	ldr	r3, [pc, #460]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a72      	ldr	r2, [pc, #456]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 8008250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008254:	6013      	str	r3, [r2, #0]
 8008256:	e00b      	b.n	8008270 <HAL_RCC_OscConfig+0xcc>
 8008258:	4b6f      	ldr	r3, [pc, #444]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a6e      	ldr	r2, [pc, #440]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 800825e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	4b6c      	ldr	r3, [pc, #432]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a6b      	ldr	r2, [pc, #428]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 800826a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800826e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d013      	beq.n	80082a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008278:	f7fd fd08 	bl	8005c8c <HAL_GetTick>
 800827c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800827e:	e008      	b.n	8008292 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008280:	f7fd fd04 	bl	8005c8c <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b64      	cmp	r3, #100	; 0x64
 800828c:	d901      	bls.n	8008292 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e21f      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008292:	4b61      	ldr	r3, [pc, #388]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0f0      	beq.n	8008280 <HAL_RCC_OscConfig+0xdc>
 800829e:	e014      	b.n	80082ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a0:	f7fd fcf4 	bl	8005c8c <HAL_GetTick>
 80082a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082a6:	e008      	b.n	80082ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082a8:	f7fd fcf0 	bl	8005c8c <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	2b64      	cmp	r3, #100	; 0x64
 80082b4:	d901      	bls.n	80082ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e20b      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082ba:	4b57      	ldr	r3, [pc, #348]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1f0      	bne.n	80082a8 <HAL_RCC_OscConfig+0x104>
 80082c6:	e000      	b.n	80082ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d06f      	beq.n	80083b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80082d6:	4b50      	ldr	r3, [pc, #320]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f003 030c 	and.w	r3, r3, #12
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d017      	beq.n	8008312 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80082e2:	4b4d      	ldr	r3, [pc, #308]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80082ea:	2b08      	cmp	r3, #8
 80082ec:	d105      	bne.n	80082fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80082ee:	4b4a      	ldr	r3, [pc, #296]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00b      	beq.n	8008312 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082fa:	4b47      	ldr	r3, [pc, #284]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008302:	2b0c      	cmp	r3, #12
 8008304:	d11c      	bne.n	8008340 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008306:	4b44      	ldr	r3, [pc, #272]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d116      	bne.n	8008340 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008312:	4b41      	ldr	r3, [pc, #260]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0302 	and.w	r3, r3, #2
 800831a:	2b00      	cmp	r3, #0
 800831c:	d005      	beq.n	800832a <HAL_RCC_OscConfig+0x186>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d001      	beq.n	800832a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e1d3      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800832a:	4b3b      	ldr	r3, [pc, #236]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	4937      	ldr	r1, [pc, #220]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 800833a:	4313      	orrs	r3, r2
 800833c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800833e:	e03a      	b.n	80083b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d020      	beq.n	800838a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008348:	4b34      	ldr	r3, [pc, #208]	; (800841c <HAL_RCC_OscConfig+0x278>)
 800834a:	2201      	movs	r2, #1
 800834c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800834e:	f7fd fc9d 	bl	8005c8c <HAL_GetTick>
 8008352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008354:	e008      	b.n	8008368 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008356:	f7fd fc99 	bl	8005c8c <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b02      	cmp	r3, #2
 8008362:	d901      	bls.n	8008368 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e1b4      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008368:	4b2b      	ldr	r3, [pc, #172]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0302 	and.w	r3, r3, #2
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0f0      	beq.n	8008356 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008374:	4b28      	ldr	r3, [pc, #160]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	00db      	lsls	r3, r3, #3
 8008382:	4925      	ldr	r1, [pc, #148]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 8008384:	4313      	orrs	r3, r2
 8008386:	600b      	str	r3, [r1, #0]
 8008388:	e015      	b.n	80083b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800838a:	4b24      	ldr	r3, [pc, #144]	; (800841c <HAL_RCC_OscConfig+0x278>)
 800838c:	2200      	movs	r2, #0
 800838e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008390:	f7fd fc7c 	bl	8005c8c <HAL_GetTick>
 8008394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008396:	e008      	b.n	80083aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008398:	f7fd fc78 	bl	8005c8c <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d901      	bls.n	80083aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e193      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083aa:	4b1b      	ldr	r3, [pc, #108]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0302 	and.w	r3, r3, #2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1f0      	bne.n	8008398 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0308 	and.w	r3, r3, #8
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d036      	beq.n	8008430 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d016      	beq.n	80083f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083ca:	4b15      	ldr	r3, [pc, #84]	; (8008420 <HAL_RCC_OscConfig+0x27c>)
 80083cc:	2201      	movs	r2, #1
 80083ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083d0:	f7fd fc5c 	bl	8005c8c <HAL_GetTick>
 80083d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083d6:	e008      	b.n	80083ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083d8:	f7fd fc58 	bl	8005c8c <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d901      	bls.n	80083ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e173      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083ea:	4b0b      	ldr	r3, [pc, #44]	; (8008418 <HAL_RCC_OscConfig+0x274>)
 80083ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0f0      	beq.n	80083d8 <HAL_RCC_OscConfig+0x234>
 80083f6:	e01b      	b.n	8008430 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083f8:	4b09      	ldr	r3, [pc, #36]	; (8008420 <HAL_RCC_OscConfig+0x27c>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083fe:	f7fd fc45 	bl	8005c8c <HAL_GetTick>
 8008402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008404:	e00e      	b.n	8008424 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008406:	f7fd fc41 	bl	8005c8c <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	2b02      	cmp	r3, #2
 8008412:	d907      	bls.n	8008424 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e15c      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
 8008418:	40023800 	.word	0x40023800
 800841c:	42470000 	.word	0x42470000
 8008420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008424:	4b8a      	ldr	r3, [pc, #552]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 8008426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008428:	f003 0302 	and.w	r3, r3, #2
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1ea      	bne.n	8008406 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0304 	and.w	r3, r3, #4
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 8097 	beq.w	800856c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800843e:	2300      	movs	r3, #0
 8008440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008442:	4b83      	ldr	r3, [pc, #524]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 8008444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10f      	bne.n	800846e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800844e:	2300      	movs	r3, #0
 8008450:	60bb      	str	r3, [r7, #8]
 8008452:	4b7f      	ldr	r3, [pc, #508]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 8008454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008456:	4a7e      	ldr	r2, [pc, #504]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 8008458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800845c:	6413      	str	r3, [r2, #64]	; 0x40
 800845e:	4b7c      	ldr	r3, [pc, #496]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 8008460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008466:	60bb      	str	r3, [r7, #8]
 8008468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800846a:	2301      	movs	r3, #1
 800846c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800846e:	4b79      	ldr	r3, [pc, #484]	; (8008654 <HAL_RCC_OscConfig+0x4b0>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008476:	2b00      	cmp	r3, #0
 8008478:	d118      	bne.n	80084ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800847a:	4b76      	ldr	r3, [pc, #472]	; (8008654 <HAL_RCC_OscConfig+0x4b0>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a75      	ldr	r2, [pc, #468]	; (8008654 <HAL_RCC_OscConfig+0x4b0>)
 8008480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008486:	f7fd fc01 	bl	8005c8c <HAL_GetTick>
 800848a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800848c:	e008      	b.n	80084a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800848e:	f7fd fbfd 	bl	8005c8c <HAL_GetTick>
 8008492:	4602      	mov	r2, r0
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	2b02      	cmp	r3, #2
 800849a:	d901      	bls.n	80084a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e118      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084a0:	4b6c      	ldr	r3, [pc, #432]	; (8008654 <HAL_RCC_OscConfig+0x4b0>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d0f0      	beq.n	800848e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d106      	bne.n	80084c2 <HAL_RCC_OscConfig+0x31e>
 80084b4:	4b66      	ldr	r3, [pc, #408]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 80084b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b8:	4a65      	ldr	r2, [pc, #404]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 80084ba:	f043 0301 	orr.w	r3, r3, #1
 80084be:	6713      	str	r3, [r2, #112]	; 0x70
 80084c0:	e01c      	b.n	80084fc <HAL_RCC_OscConfig+0x358>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	2b05      	cmp	r3, #5
 80084c8:	d10c      	bne.n	80084e4 <HAL_RCC_OscConfig+0x340>
 80084ca:	4b61      	ldr	r3, [pc, #388]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 80084cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ce:	4a60      	ldr	r2, [pc, #384]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 80084d0:	f043 0304 	orr.w	r3, r3, #4
 80084d4:	6713      	str	r3, [r2, #112]	; 0x70
 80084d6:	4b5e      	ldr	r3, [pc, #376]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 80084d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084da:	4a5d      	ldr	r2, [pc, #372]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 80084dc:	f043 0301 	orr.w	r3, r3, #1
 80084e0:	6713      	str	r3, [r2, #112]	; 0x70
 80084e2:	e00b      	b.n	80084fc <HAL_RCC_OscConfig+0x358>
 80084e4:	4b5a      	ldr	r3, [pc, #360]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 80084e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e8:	4a59      	ldr	r2, [pc, #356]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 80084ea:	f023 0301 	bic.w	r3, r3, #1
 80084ee:	6713      	str	r3, [r2, #112]	; 0x70
 80084f0:	4b57      	ldr	r3, [pc, #348]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 80084f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f4:	4a56      	ldr	r2, [pc, #344]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 80084f6:	f023 0304 	bic.w	r3, r3, #4
 80084fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d015      	beq.n	8008530 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008504:	f7fd fbc2 	bl	8005c8c <HAL_GetTick>
 8008508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800850a:	e00a      	b.n	8008522 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800850c:	f7fd fbbe 	bl	8005c8c <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	f241 3288 	movw	r2, #5000	; 0x1388
 800851a:	4293      	cmp	r3, r2
 800851c:	d901      	bls.n	8008522 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e0d7      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008522:	4b4b      	ldr	r3, [pc, #300]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 8008524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0ee      	beq.n	800850c <HAL_RCC_OscConfig+0x368>
 800852e:	e014      	b.n	800855a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008530:	f7fd fbac 	bl	8005c8c <HAL_GetTick>
 8008534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008536:	e00a      	b.n	800854e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008538:	f7fd fba8 	bl	8005c8c <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	f241 3288 	movw	r2, #5000	; 0x1388
 8008546:	4293      	cmp	r3, r2
 8008548:	d901      	bls.n	800854e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e0c1      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800854e:	4b40      	ldr	r3, [pc, #256]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 8008550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1ee      	bne.n	8008538 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d105      	bne.n	800856c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008560:	4b3b      	ldr	r3, [pc, #236]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 8008562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008564:	4a3a      	ldr	r2, [pc, #232]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 8008566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800856a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 80ad 	beq.w	80086d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008576:	4b36      	ldr	r3, [pc, #216]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f003 030c 	and.w	r3, r3, #12
 800857e:	2b08      	cmp	r3, #8
 8008580:	d060      	beq.n	8008644 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	2b02      	cmp	r3, #2
 8008588:	d145      	bne.n	8008616 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800858a:	4b33      	ldr	r3, [pc, #204]	; (8008658 <HAL_RCC_OscConfig+0x4b4>)
 800858c:	2200      	movs	r2, #0
 800858e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008590:	f7fd fb7c 	bl	8005c8c <HAL_GetTick>
 8008594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008596:	e008      	b.n	80085aa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008598:	f7fd fb78 	bl	8005c8c <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d901      	bls.n	80085aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e093      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085aa:	4b29      	ldr	r3, [pc, #164]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1f0      	bne.n	8008598 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	69da      	ldr	r2, [r3, #28]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	431a      	orrs	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	019b      	lsls	r3, r3, #6
 80085c6:	431a      	orrs	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085cc:	085b      	lsrs	r3, r3, #1
 80085ce:	3b01      	subs	r3, #1
 80085d0:	041b      	lsls	r3, r3, #16
 80085d2:	431a      	orrs	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	061b      	lsls	r3, r3, #24
 80085da:	431a      	orrs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e0:	071b      	lsls	r3, r3, #28
 80085e2:	491b      	ldr	r1, [pc, #108]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085e8:	4b1b      	ldr	r3, [pc, #108]	; (8008658 <HAL_RCC_OscConfig+0x4b4>)
 80085ea:	2201      	movs	r2, #1
 80085ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ee:	f7fd fb4d 	bl	8005c8c <HAL_GetTick>
 80085f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085f4:	e008      	b.n	8008608 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085f6:	f7fd fb49 	bl	8005c8c <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	2b02      	cmp	r3, #2
 8008602:	d901      	bls.n	8008608 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e064      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008608:	4b11      	ldr	r3, [pc, #68]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d0f0      	beq.n	80085f6 <HAL_RCC_OscConfig+0x452>
 8008614:	e05c      	b.n	80086d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008616:	4b10      	ldr	r3, [pc, #64]	; (8008658 <HAL_RCC_OscConfig+0x4b4>)
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800861c:	f7fd fb36 	bl	8005c8c <HAL_GetTick>
 8008620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008622:	e008      	b.n	8008636 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008624:	f7fd fb32 	bl	8005c8c <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	2b02      	cmp	r3, #2
 8008630:	d901      	bls.n	8008636 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e04d      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008636:	4b06      	ldr	r3, [pc, #24]	; (8008650 <HAL_RCC_OscConfig+0x4ac>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1f0      	bne.n	8008624 <HAL_RCC_OscConfig+0x480>
 8008642:	e045      	b.n	80086d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d107      	bne.n	800865c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e040      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
 8008650:	40023800 	.word	0x40023800
 8008654:	40007000 	.word	0x40007000
 8008658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800865c:	4b1f      	ldr	r3, [pc, #124]	; (80086dc <HAL_RCC_OscConfig+0x538>)
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d030      	beq.n	80086cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008674:	429a      	cmp	r2, r3
 8008676:	d129      	bne.n	80086cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008682:	429a      	cmp	r2, r3
 8008684:	d122      	bne.n	80086cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800868c:	4013      	ands	r3, r2
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008694:	4293      	cmp	r3, r2
 8008696:	d119      	bne.n	80086cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a2:	085b      	lsrs	r3, r3, #1
 80086a4:	3b01      	subs	r3, #1
 80086a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d10f      	bne.n	80086cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d107      	bne.n	80086cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d001      	beq.n	80086d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e000      	b.n	80086d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	40023800 	.word	0x40023800

080086e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d101      	bne.n	80086f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e041      	b.n	8008776 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d106      	bne.n	800870c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7fc fe22 	bl	8005350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3304      	adds	r3, #4
 800871c:	4619      	mov	r1, r3
 800871e:	4610      	mov	r0, r2
 8008720:	f001 f944 	bl	80099ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
	...

08008780 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b01      	cmp	r3, #1
 8008792:	d001      	beq.n	8008798 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e046      	b.n	8008826 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2202      	movs	r2, #2
 800879c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a23      	ldr	r2, [pc, #140]	; (8008834 <HAL_TIM_Base_Start+0xb4>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d022      	beq.n	80087f0 <HAL_TIM_Base_Start+0x70>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b2:	d01d      	beq.n	80087f0 <HAL_TIM_Base_Start+0x70>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a1f      	ldr	r2, [pc, #124]	; (8008838 <HAL_TIM_Base_Start+0xb8>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d018      	beq.n	80087f0 <HAL_TIM_Base_Start+0x70>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a1e      	ldr	r2, [pc, #120]	; (800883c <HAL_TIM_Base_Start+0xbc>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d013      	beq.n	80087f0 <HAL_TIM_Base_Start+0x70>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a1c      	ldr	r2, [pc, #112]	; (8008840 <HAL_TIM_Base_Start+0xc0>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00e      	beq.n	80087f0 <HAL_TIM_Base_Start+0x70>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a1b      	ldr	r2, [pc, #108]	; (8008844 <HAL_TIM_Base_Start+0xc4>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d009      	beq.n	80087f0 <HAL_TIM_Base_Start+0x70>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a19      	ldr	r2, [pc, #100]	; (8008848 <HAL_TIM_Base_Start+0xc8>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d004      	beq.n	80087f0 <HAL_TIM_Base_Start+0x70>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a18      	ldr	r2, [pc, #96]	; (800884c <HAL_TIM_Base_Start+0xcc>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d111      	bne.n	8008814 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2b06      	cmp	r3, #6
 8008800:	d010      	beq.n	8008824 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f042 0201 	orr.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008812:	e007      	b.n	8008824 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f042 0201 	orr.w	r2, r2, #1
 8008822:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	40010000 	.word	0x40010000
 8008838:	40000400 	.word	0x40000400
 800883c:	40000800 	.word	0x40000800
 8008840:	40000c00 	.word	0x40000c00
 8008844:	40010400 	.word	0x40010400
 8008848:	40014000 	.word	0x40014000
 800884c:	40001800 	.word	0x40001800

08008850 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d101      	bne.n	8008862 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e041      	b.n	80088e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d106      	bne.n	800887c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f839 	bl	80088ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2202      	movs	r2, #2
 8008880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3304      	adds	r3, #4
 800888c:	4619      	mov	r1, r3
 800888e:	4610      	mov	r0, r2
 8008890:	f001 f88c 	bl	80099ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80088f6:	bf00      	nop
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
	...

08008904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d109      	bne.n	8008928 <HAL_TIM_PWM_Start+0x24>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b01      	cmp	r3, #1
 800891e:	bf14      	ite	ne
 8008920:	2301      	movne	r3, #1
 8008922:	2300      	moveq	r3, #0
 8008924:	b2db      	uxtb	r3, r3
 8008926:	e022      	b.n	800896e <HAL_TIM_PWM_Start+0x6a>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b04      	cmp	r3, #4
 800892c:	d109      	bne.n	8008942 <HAL_TIM_PWM_Start+0x3e>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b01      	cmp	r3, #1
 8008938:	bf14      	ite	ne
 800893a:	2301      	movne	r3, #1
 800893c:	2300      	moveq	r3, #0
 800893e:	b2db      	uxtb	r3, r3
 8008940:	e015      	b.n	800896e <HAL_TIM_PWM_Start+0x6a>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b08      	cmp	r3, #8
 8008946:	d109      	bne.n	800895c <HAL_TIM_PWM_Start+0x58>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b01      	cmp	r3, #1
 8008952:	bf14      	ite	ne
 8008954:	2301      	movne	r3, #1
 8008956:	2300      	moveq	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	e008      	b.n	800896e <HAL_TIM_PWM_Start+0x6a>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b01      	cmp	r3, #1
 8008966:	bf14      	ite	ne
 8008968:	2301      	movne	r3, #1
 800896a:	2300      	moveq	r3, #0
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e07c      	b.n	8008a70 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d104      	bne.n	8008986 <HAL_TIM_PWM_Start+0x82>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2202      	movs	r2, #2
 8008980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008984:	e013      	b.n	80089ae <HAL_TIM_PWM_Start+0xaa>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b04      	cmp	r3, #4
 800898a:	d104      	bne.n	8008996 <HAL_TIM_PWM_Start+0x92>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008994:	e00b      	b.n	80089ae <HAL_TIM_PWM_Start+0xaa>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b08      	cmp	r3, #8
 800899a:	d104      	bne.n	80089a6 <HAL_TIM_PWM_Start+0xa2>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2202      	movs	r2, #2
 80089a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089a4:	e003      	b.n	80089ae <HAL_TIM_PWM_Start+0xaa>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2202      	movs	r2, #2
 80089aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2201      	movs	r2, #1
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f001 fc0c 	bl	800a1d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a2d      	ldr	r2, [pc, #180]	; (8008a78 <HAL_TIM_PWM_Start+0x174>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d004      	beq.n	80089d0 <HAL_TIM_PWM_Start+0xcc>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a2c      	ldr	r2, [pc, #176]	; (8008a7c <HAL_TIM_PWM_Start+0x178>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d101      	bne.n	80089d4 <HAL_TIM_PWM_Start+0xd0>
 80089d0:	2301      	movs	r3, #1
 80089d2:	e000      	b.n	80089d6 <HAL_TIM_PWM_Start+0xd2>
 80089d4:	2300      	movs	r3, #0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d007      	beq.n	80089ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a22      	ldr	r2, [pc, #136]	; (8008a78 <HAL_TIM_PWM_Start+0x174>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d022      	beq.n	8008a3a <HAL_TIM_PWM_Start+0x136>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089fc:	d01d      	beq.n	8008a3a <HAL_TIM_PWM_Start+0x136>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a1f      	ldr	r2, [pc, #124]	; (8008a80 <HAL_TIM_PWM_Start+0x17c>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d018      	beq.n	8008a3a <HAL_TIM_PWM_Start+0x136>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a1d      	ldr	r2, [pc, #116]	; (8008a84 <HAL_TIM_PWM_Start+0x180>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d013      	beq.n	8008a3a <HAL_TIM_PWM_Start+0x136>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a1c      	ldr	r2, [pc, #112]	; (8008a88 <HAL_TIM_PWM_Start+0x184>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d00e      	beq.n	8008a3a <HAL_TIM_PWM_Start+0x136>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a16      	ldr	r2, [pc, #88]	; (8008a7c <HAL_TIM_PWM_Start+0x178>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d009      	beq.n	8008a3a <HAL_TIM_PWM_Start+0x136>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a18      	ldr	r2, [pc, #96]	; (8008a8c <HAL_TIM_PWM_Start+0x188>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d004      	beq.n	8008a3a <HAL_TIM_PWM_Start+0x136>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a16      	ldr	r2, [pc, #88]	; (8008a90 <HAL_TIM_PWM_Start+0x18c>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d111      	bne.n	8008a5e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f003 0307 	and.w	r3, r3, #7
 8008a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b06      	cmp	r3, #6
 8008a4a:	d010      	beq.n	8008a6e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f042 0201 	orr.w	r2, r2, #1
 8008a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a5c:	e007      	b.n	8008a6e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f042 0201 	orr.w	r2, r2, #1
 8008a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	40010000 	.word	0x40010000
 8008a7c:	40010400 	.word	0x40010400
 8008a80:	40000400 	.word	0x40000400
 8008a84:	40000800 	.word	0x40000800
 8008a88:	40000c00 	.word	0x40000c00
 8008a8c:	40014000 	.word	0x40014000
 8008a90:	40001800 	.word	0x40001800

08008a94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e041      	b.n	8008b2a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d106      	bne.n	8008ac0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f839 	bl	8008b32 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3304      	adds	r3, #4
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	f000 ff6a 	bl	80099ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008b3a:	bf00      	nop
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
	...

08008b48 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d104      	bne.n	8008b6a <HAL_TIM_IC_Start_DMA+0x22>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	e013      	b.n	8008b92 <HAL_TIM_IC_Start_DMA+0x4a>
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2b04      	cmp	r3, #4
 8008b6e:	d104      	bne.n	8008b7a <HAL_TIM_IC_Start_DMA+0x32>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	e00b      	b.n	8008b92 <HAL_TIM_IC_Start_DMA+0x4a>
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2b08      	cmp	r3, #8
 8008b7e:	d104      	bne.n	8008b8a <HAL_TIM_IC_Start_DMA+0x42>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	e003      	b.n	8008b92 <HAL_TIM_IC_Start_DMA+0x4a>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d104      	bne.n	8008ba4 <HAL_TIM_IC_Start_DMA+0x5c>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	e013      	b.n	8008bcc <HAL_TIM_IC_Start_DMA+0x84>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2b04      	cmp	r3, #4
 8008ba8:	d104      	bne.n	8008bb4 <HAL_TIM_IC_Start_DMA+0x6c>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	e00b      	b.n	8008bcc <HAL_TIM_IC_Start_DMA+0x84>
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b08      	cmp	r3, #8
 8008bb8:	d104      	bne.n	8008bc4 <HAL_TIM_IC_Start_DMA+0x7c>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	e003      	b.n	8008bcc <HAL_TIM_IC_Start_DMA+0x84>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8008bce:	7dbb      	ldrb	r3, [r7, #22]
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d002      	beq.n	8008bda <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8008bd4:	7d7b      	ldrb	r3, [r7, #21]
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d101      	bne.n	8008bde <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8008bda:	2302      	movs	r3, #2
 8008bdc:	e146      	b.n	8008e6c <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8008bde:	7dbb      	ldrb	r3, [r7, #22]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d143      	bne.n	8008c6c <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8008be4:	7d7b      	ldrb	r3, [r7, #21]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d140      	bne.n	8008c6c <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d104      	bne.n	8008bfa <HAL_TIM_IC_Start_DMA+0xb2>
 8008bf0:	887b      	ldrh	r3, [r7, #2]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e138      	b.n	8008e6c <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d104      	bne.n	8008c0a <HAL_TIM_IC_Start_DMA+0xc2>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2202      	movs	r2, #2
 8008c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c08:	e013      	b.n	8008c32 <HAL_TIM_IC_Start_DMA+0xea>
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2b04      	cmp	r3, #4
 8008c0e:	d104      	bne.n	8008c1a <HAL_TIM_IC_Start_DMA+0xd2>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2202      	movs	r2, #2
 8008c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c18:	e00b      	b.n	8008c32 <HAL_TIM_IC_Start_DMA+0xea>
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b08      	cmp	r3, #8
 8008c1e:	d104      	bne.n	8008c2a <HAL_TIM_IC_Start_DMA+0xe2>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2202      	movs	r2, #2
 8008c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c28:	e003      	b.n	8008c32 <HAL_TIM_IC_Start_DMA+0xea>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d104      	bne.n	8008c42 <HAL_TIM_IC_Start_DMA+0xfa>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8008c40:	e016      	b.n	8008c70 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b04      	cmp	r3, #4
 8008c46:	d104      	bne.n	8008c52 <HAL_TIM_IC_Start_DMA+0x10a>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8008c50:	e00e      	b.n	8008c70 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2b08      	cmp	r3, #8
 8008c56:	d104      	bne.n	8008c62 <HAL_TIM_IC_Start_DMA+0x11a>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8008c60:	e006      	b.n	8008c70 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2202      	movs	r2, #2
 8008c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8008c6a:	e001      	b.n	8008c70 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e0fd      	b.n	8008e6c <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2201      	movs	r2, #1
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f001 faab 	bl	800a1d4 <TIM_CCxChannelCmd>

  switch (Channel)
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2b0c      	cmp	r3, #12
 8008c82:	f200 80ad 	bhi.w	8008de0 <HAL_TIM_IC_Start_DMA+0x298>
 8008c86:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <HAL_TIM_IC_Start_DMA+0x144>)
 8008c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8c:	08008cc1 	.word	0x08008cc1
 8008c90:	08008de1 	.word	0x08008de1
 8008c94:	08008de1 	.word	0x08008de1
 8008c98:	08008de1 	.word	0x08008de1
 8008c9c:	08008d09 	.word	0x08008d09
 8008ca0:	08008de1 	.word	0x08008de1
 8008ca4:	08008de1 	.word	0x08008de1
 8008ca8:	08008de1 	.word	0x08008de1
 8008cac:	08008d51 	.word	0x08008d51
 8008cb0:	08008de1 	.word	0x08008de1
 8008cb4:	08008de1 	.word	0x08008de1
 8008cb8:	08008de1 	.word	0x08008de1
 8008cbc:	08008d99 	.word	0x08008d99
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	4a6b      	ldr	r2, [pc, #428]	; (8008e74 <HAL_TIM_IC_Start_DMA+0x32c>)
 8008cc6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	4a6a      	ldr	r2, [pc, #424]	; (8008e78 <HAL_TIM_IC_Start_DMA+0x330>)
 8008cce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	4a69      	ldr	r2, [pc, #420]	; (8008e7c <HAL_TIM_IC_Start_DMA+0x334>)
 8008cd6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	3334      	adds	r3, #52	; 0x34
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	887b      	ldrh	r3, [r7, #2]
 8008ce8:	f7fd ff68 	bl	8006bbc <HAL_DMA_Start_IT>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e0ba      	b.n	8008e6c <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d04:	60da      	str	r2, [r3, #12]
      break;
 8008d06:	e06e      	b.n	8008de6 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0c:	4a59      	ldr	r2, [pc, #356]	; (8008e74 <HAL_TIM_IC_Start_DMA+0x32c>)
 8008d0e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d14:	4a58      	ldr	r2, [pc, #352]	; (8008e78 <HAL_TIM_IC_Start_DMA+0x330>)
 8008d16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1c:	4a57      	ldr	r2, [pc, #348]	; (8008e7c <HAL_TIM_IC_Start_DMA+0x334>)
 8008d1e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3338      	adds	r3, #56	; 0x38
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	887b      	ldrh	r3, [r7, #2]
 8008d30:	f7fd ff44 	bl	8006bbc <HAL_DMA_Start_IT>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e096      	b.n	8008e6c <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68da      	ldr	r2, [r3, #12]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d4c:	60da      	str	r2, [r3, #12]
      break;
 8008d4e:	e04a      	b.n	8008de6 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d54:	4a47      	ldr	r2, [pc, #284]	; (8008e74 <HAL_TIM_IC_Start_DMA+0x32c>)
 8008d56:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5c:	4a46      	ldr	r2, [pc, #280]	; (8008e78 <HAL_TIM_IC_Start_DMA+0x330>)
 8008d5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d64:	4a45      	ldr	r2, [pc, #276]	; (8008e7c <HAL_TIM_IC_Start_DMA+0x334>)
 8008d66:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	333c      	adds	r3, #60	; 0x3c
 8008d72:	4619      	mov	r1, r3
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	887b      	ldrh	r3, [r7, #2]
 8008d78:	f7fd ff20 	bl	8006bbc <HAL_DMA_Start_IT>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e072      	b.n	8008e6c <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68da      	ldr	r2, [r3, #12]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d94:	60da      	str	r2, [r3, #12]
      break;
 8008d96:	e026      	b.n	8008de6 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9c:	4a35      	ldr	r2, [pc, #212]	; (8008e74 <HAL_TIM_IC_Start_DMA+0x32c>)
 8008d9e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da4:	4a34      	ldr	r2, [pc, #208]	; (8008e78 <HAL_TIM_IC_Start_DMA+0x330>)
 8008da6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dac:	4a33      	ldr	r2, [pc, #204]	; (8008e7c <HAL_TIM_IC_Start_DMA+0x334>)
 8008dae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3340      	adds	r3, #64	; 0x40
 8008dba:	4619      	mov	r1, r3
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	887b      	ldrh	r3, [r7, #2]
 8008dc0:	f7fd fefc 	bl	8006bbc <HAL_DMA_Start_IT>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e04e      	b.n	8008e6c <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68da      	ldr	r2, [r3, #12]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ddc:	60da      	str	r2, [r3, #12]
      break;
 8008dde:	e002      	b.n	8008de6 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	75fb      	strb	r3, [r7, #23]
      break;
 8008de4:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a25      	ldr	r2, [pc, #148]	; (8008e80 <HAL_TIM_IC_Start_DMA+0x338>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d022      	beq.n	8008e36 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008df8:	d01d      	beq.n	8008e36 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a21      	ldr	r2, [pc, #132]	; (8008e84 <HAL_TIM_IC_Start_DMA+0x33c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d018      	beq.n	8008e36 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a1f      	ldr	r2, [pc, #124]	; (8008e88 <HAL_TIM_IC_Start_DMA+0x340>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d013      	beq.n	8008e36 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a1e      	ldr	r2, [pc, #120]	; (8008e8c <HAL_TIM_IC_Start_DMA+0x344>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00e      	beq.n	8008e36 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a1c      	ldr	r2, [pc, #112]	; (8008e90 <HAL_TIM_IC_Start_DMA+0x348>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d009      	beq.n	8008e36 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a1b      	ldr	r2, [pc, #108]	; (8008e94 <HAL_TIM_IC_Start_DMA+0x34c>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d004      	beq.n	8008e36 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a19      	ldr	r2, [pc, #100]	; (8008e98 <HAL_TIM_IC_Start_DMA+0x350>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d111      	bne.n	8008e5a <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	f003 0307 	and.w	r3, r3, #7
 8008e40:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	2b06      	cmp	r3, #6
 8008e46:	d010      	beq.n	8008e6a <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f042 0201 	orr.w	r2, r2, #1
 8008e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e58:	e007      	b.n	8008e6a <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 0201 	orr.w	r2, r2, #1
 8008e68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	0800987d 	.word	0x0800987d
 8008e78:	08009945 	.word	0x08009945
 8008e7c:	080097eb 	.word	0x080097eb
 8008e80:	40010000 	.word	0x40010000
 8008e84:	40000400 	.word	0x40000400
 8008e88:	40000800 	.word	0x40000800
 8008e8c:	40000c00 	.word	0x40000c00
 8008e90:	40010400 	.word	0x40010400
 8008e94:	40014000 	.word	0x40014000
 8008e98:	40001800 	.word	0x40001800

08008e9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e097      	b.n	8008fe0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d106      	bne.n	8008eca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7fc fb1f 	bl	8005508 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2202      	movs	r2, #2
 8008ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	6812      	ldr	r2, [r2, #0]
 8008edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ee0:	f023 0307 	bic.w	r3, r3, #7
 8008ee4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	3304      	adds	r3, #4
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	f000 fd5b 	bl	80099ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f1e:	f023 0303 	bic.w	r3, r3, #3
 8008f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	689a      	ldr	r2, [r3, #8]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	021b      	lsls	r3, r3, #8
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008f3c:	f023 030c 	bic.w	r3, r3, #12
 8008f40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	69db      	ldr	r3, [r3, #28]
 8008f56:	021b      	lsls	r3, r3, #8
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	011a      	lsls	r2, r3, #4
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	031b      	lsls	r3, r3, #12
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008f7a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008f82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	011b      	lsls	r3, r3, #4
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ff8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009000:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009008:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009010:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d110      	bne.n	800903a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d102      	bne.n	8009024 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800901e:	7b7b      	ldrb	r3, [r7, #13]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d001      	beq.n	8009028 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	e069      	b.n	80090fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2202      	movs	r2, #2
 8009034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009038:	e031      	b.n	800909e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	2b04      	cmp	r3, #4
 800903e:	d110      	bne.n	8009062 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009040:	7bbb      	ldrb	r3, [r7, #14]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d102      	bne.n	800904c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009046:	7b3b      	ldrb	r3, [r7, #12]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d001      	beq.n	8009050 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e055      	b.n	80090fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2202      	movs	r2, #2
 8009054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2202      	movs	r2, #2
 800905c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009060:	e01d      	b.n	800909e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009062:	7bfb      	ldrb	r3, [r7, #15]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d108      	bne.n	800907a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d105      	bne.n	800907a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800906e:	7b7b      	ldrb	r3, [r7, #13]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d102      	bne.n	800907a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009074:	7b3b      	ldrb	r3, [r7, #12]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d001      	beq.n	800907e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e03e      	b.n	80090fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2202      	movs	r2, #2
 8009082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2202      	movs	r2, #2
 800908a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2202      	movs	r2, #2
 8009092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2202      	movs	r2, #2
 800909a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d003      	beq.n	80090ac <HAL_TIM_Encoder_Start+0xc4>
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	d008      	beq.n	80090bc <HAL_TIM_Encoder_Start+0xd4>
 80090aa:	e00f      	b.n	80090cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2201      	movs	r2, #1
 80090b2:	2100      	movs	r1, #0
 80090b4:	4618      	mov	r0, r3
 80090b6:	f001 f88d 	bl	800a1d4 <TIM_CCxChannelCmd>
      break;
 80090ba:	e016      	b.n	80090ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2201      	movs	r2, #1
 80090c2:	2104      	movs	r1, #4
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 f885 	bl	800a1d4 <TIM_CCxChannelCmd>
      break;
 80090ca:	e00e      	b.n	80090ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2201      	movs	r2, #1
 80090d2:	2100      	movs	r1, #0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f001 f87d 	bl	800a1d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2201      	movs	r2, #1
 80090e0:	2104      	movs	r1, #4
 80090e2:	4618      	mov	r0, r3
 80090e4:	f001 f876 	bl	800a1d4 <TIM_CCxChannelCmd>
      break;
 80090e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f042 0201 	orr.w	r2, r2, #1
 80090f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	f003 0302 	and.w	r3, r3, #2
 8009116:	2b02      	cmp	r3, #2
 8009118:	d122      	bne.n	8009160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	2b02      	cmp	r3, #2
 8009126:	d11b      	bne.n	8009160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f06f 0202 	mvn.w	r2, #2
 8009130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2201      	movs	r2, #1
 8009136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	f003 0303 	and.w	r3, r3, #3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d003      	beq.n	800914e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fb1d 	bl	8009786 <HAL_TIM_IC_CaptureCallback>
 800914c:	e005      	b.n	800915a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fb0f 	bl	8009772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fb2a 	bl	80097ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	f003 0304 	and.w	r3, r3, #4
 800916a:	2b04      	cmp	r3, #4
 800916c:	d122      	bne.n	80091b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	f003 0304 	and.w	r3, r3, #4
 8009178:	2b04      	cmp	r3, #4
 800917a:	d11b      	bne.n	80091b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f06f 0204 	mvn.w	r2, #4
 8009184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2202      	movs	r2, #2
 800918a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009196:	2b00      	cmp	r3, #0
 8009198:	d003      	beq.n	80091a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 faf3 	bl	8009786 <HAL_TIM_IC_CaptureCallback>
 80091a0:	e005      	b.n	80091ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fae5 	bl	8009772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fb00 	bl	80097ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	f003 0308 	and.w	r3, r3, #8
 80091be:	2b08      	cmp	r3, #8
 80091c0:	d122      	bne.n	8009208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	f003 0308 	and.w	r3, r3, #8
 80091cc:	2b08      	cmp	r3, #8
 80091ce:	d11b      	bne.n	8009208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f06f 0208 	mvn.w	r2, #8
 80091d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2204      	movs	r2, #4
 80091de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	f003 0303 	and.w	r3, r3, #3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fac9 	bl	8009786 <HAL_TIM_IC_CaptureCallback>
 80091f4:	e005      	b.n	8009202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fabb 	bl	8009772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fad6 	bl	80097ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	f003 0310 	and.w	r3, r3, #16
 8009212:	2b10      	cmp	r3, #16
 8009214:	d122      	bne.n	800925c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	f003 0310 	and.w	r3, r3, #16
 8009220:	2b10      	cmp	r3, #16
 8009222:	d11b      	bne.n	800925c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f06f 0210 	mvn.w	r2, #16
 800922c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2208      	movs	r2, #8
 8009232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fa9f 	bl	8009786 <HAL_TIM_IC_CaptureCallback>
 8009248:	e005      	b.n	8009256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fa91 	bl	8009772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 faac 	bl	80097ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b01      	cmp	r3, #1
 8009268:	d10e      	bne.n	8009288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	f003 0301 	and.w	r3, r3, #1
 8009274:	2b01      	cmp	r3, #1
 8009276:	d107      	bne.n	8009288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f06f 0201 	mvn.w	r2, #1
 8009280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fa6b 	bl	800975e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009292:	2b80      	cmp	r3, #128	; 0x80
 8009294:	d10e      	bne.n	80092b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a0:	2b80      	cmp	r3, #128	; 0x80
 80092a2:	d107      	bne.n	80092b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f001 f88e 	bl	800a3d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092be:	2b40      	cmp	r3, #64	; 0x40
 80092c0:	d10e      	bne.n	80092e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092cc:	2b40      	cmp	r3, #64	; 0x40
 80092ce:	d107      	bne.n	80092e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fa71 	bl	80097c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	f003 0320 	and.w	r3, r3, #32
 80092ea:	2b20      	cmp	r3, #32
 80092ec:	d10e      	bne.n	800930c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	f003 0320 	and.w	r3, r3, #32
 80092f8:	2b20      	cmp	r3, #32
 80092fa:	d107      	bne.n	800930c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f06f 0220 	mvn.w	r2, #32
 8009304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f001 f858 	bl	800a3bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800930c:	bf00      	nop
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800932a:	2b01      	cmp	r3, #1
 800932c:	d101      	bne.n	8009332 <HAL_TIM_IC_ConfigChannel+0x1e>
 800932e:	2302      	movs	r3, #2
 8009330:	e088      	b.n	8009444 <HAL_TIM_IC_ConfigChannel+0x130>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d11b      	bne.n	8009378 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6818      	ldr	r0, [r3, #0]
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	6819      	ldr	r1, [r3, #0]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f000 fd7c 	bl	8009e4c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	699a      	ldr	r2, [r3, #24]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f022 020c 	bic.w	r2, r2, #12
 8009362:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6999      	ldr	r1, [r3, #24]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	689a      	ldr	r2, [r3, #8]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	619a      	str	r2, [r3, #24]
 8009376:	e060      	b.n	800943a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b04      	cmp	r3, #4
 800937c:	d11c      	bne.n	80093b8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6818      	ldr	r0, [r3, #0]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	6819      	ldr	r1, [r3, #0]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f000 fe00 	bl	8009f92 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	699a      	ldr	r2, [r3, #24]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80093a0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6999      	ldr	r1, [r3, #24]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	021a      	lsls	r2, r3, #8
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	619a      	str	r2, [r3, #24]
 80093b6:	e040      	b.n	800943a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b08      	cmp	r3, #8
 80093bc:	d11b      	bne.n	80093f6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6818      	ldr	r0, [r3, #0]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	6819      	ldr	r1, [r3, #0]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	685a      	ldr	r2, [r3, #4]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	f000 fe4d 	bl	800a06c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	69da      	ldr	r2, [r3, #28]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f022 020c 	bic.w	r2, r2, #12
 80093e0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	69d9      	ldr	r1, [r3, #28]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	689a      	ldr	r2, [r3, #8]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	430a      	orrs	r2, r1
 80093f2:	61da      	str	r2, [r3, #28]
 80093f4:	e021      	b.n	800943a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b0c      	cmp	r3, #12
 80093fa:	d11c      	bne.n	8009436 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6818      	ldr	r0, [r3, #0]
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	6819      	ldr	r1, [r3, #0]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	685a      	ldr	r2, [r3, #4]
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f000 fe6a 	bl	800a0e4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	69da      	ldr	r2, [r3, #28]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800941e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	69d9      	ldr	r1, [r3, #28]
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	021a      	lsls	r2, r3, #8
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	430a      	orrs	r2, r1
 8009432:	61da      	str	r2, [r3, #28]
 8009434:	e001      	b.n	800943a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009442:	7dfb      	ldrb	r3, [r7, #23]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009462:	2b01      	cmp	r3, #1
 8009464:	d101      	bne.n	800946a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009466:	2302      	movs	r3, #2
 8009468:	e0ae      	b.n	80095c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2201      	movs	r2, #1
 800946e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2b0c      	cmp	r3, #12
 8009476:	f200 809f 	bhi.w	80095b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800947a:	a201      	add	r2, pc, #4	; (adr r2, 8009480 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800947c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009480:	080094b5 	.word	0x080094b5
 8009484:	080095b9 	.word	0x080095b9
 8009488:	080095b9 	.word	0x080095b9
 800948c:	080095b9 	.word	0x080095b9
 8009490:	080094f5 	.word	0x080094f5
 8009494:	080095b9 	.word	0x080095b9
 8009498:	080095b9 	.word	0x080095b9
 800949c:	080095b9 	.word	0x080095b9
 80094a0:	08009537 	.word	0x08009537
 80094a4:	080095b9 	.word	0x080095b9
 80094a8:	080095b9 	.word	0x080095b9
 80094ac:	080095b9 	.word	0x080095b9
 80094b0:	08009577 	.word	0x08009577
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68b9      	ldr	r1, [r7, #8]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 fb16 	bl	8009aec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	699a      	ldr	r2, [r3, #24]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 0208 	orr.w	r2, r2, #8
 80094ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	699a      	ldr	r2, [r3, #24]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f022 0204 	bic.w	r2, r2, #4
 80094de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6999      	ldr	r1, [r3, #24]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	691a      	ldr	r2, [r3, #16]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	430a      	orrs	r2, r1
 80094f0:	619a      	str	r2, [r3, #24]
      break;
 80094f2:	e064      	b.n	80095be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68b9      	ldr	r1, [r7, #8]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 fb66 	bl	8009bcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699a      	ldr	r2, [r3, #24]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800950e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	699a      	ldr	r2, [r3, #24]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800951e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6999      	ldr	r1, [r3, #24]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	021a      	lsls	r2, r3, #8
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	430a      	orrs	r2, r1
 8009532:	619a      	str	r2, [r3, #24]
      break;
 8009534:	e043      	b.n	80095be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68b9      	ldr	r1, [r7, #8]
 800953c:	4618      	mov	r0, r3
 800953e:	f000 fbbb 	bl	8009cb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69da      	ldr	r2, [r3, #28]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f042 0208 	orr.w	r2, r2, #8
 8009550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	69da      	ldr	r2, [r3, #28]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f022 0204 	bic.w	r2, r2, #4
 8009560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	69d9      	ldr	r1, [r3, #28]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	691a      	ldr	r2, [r3, #16]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	61da      	str	r2, [r3, #28]
      break;
 8009574:	e023      	b.n	80095be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68b9      	ldr	r1, [r7, #8]
 800957c:	4618      	mov	r0, r3
 800957e:	f000 fc0f 	bl	8009da0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69da      	ldr	r2, [r3, #28]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69da      	ldr	r2, [r3, #28]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69d9      	ldr	r1, [r3, #28]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	021a      	lsls	r2, r3, #8
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	430a      	orrs	r2, r1
 80095b4:	61da      	str	r2, [r3, #28]
      break;
 80095b6:	e002      	b.n	80095be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	75fb      	strb	r3, [r7, #23]
      break;
 80095bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80095c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d101      	bne.n	80095ec <HAL_TIM_ConfigClockSource+0x1c>
 80095e8:	2302      	movs	r3, #2
 80095ea:	e0b4      	b.n	8009756 <HAL_TIM_ConfigClockSource+0x186>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800960a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009612:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009624:	d03e      	beq.n	80096a4 <HAL_TIM_ConfigClockSource+0xd4>
 8009626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800962a:	f200 8087 	bhi.w	800973c <HAL_TIM_ConfigClockSource+0x16c>
 800962e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009632:	f000 8086 	beq.w	8009742 <HAL_TIM_ConfigClockSource+0x172>
 8009636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800963a:	d87f      	bhi.n	800973c <HAL_TIM_ConfigClockSource+0x16c>
 800963c:	2b70      	cmp	r3, #112	; 0x70
 800963e:	d01a      	beq.n	8009676 <HAL_TIM_ConfigClockSource+0xa6>
 8009640:	2b70      	cmp	r3, #112	; 0x70
 8009642:	d87b      	bhi.n	800973c <HAL_TIM_ConfigClockSource+0x16c>
 8009644:	2b60      	cmp	r3, #96	; 0x60
 8009646:	d050      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0x11a>
 8009648:	2b60      	cmp	r3, #96	; 0x60
 800964a:	d877      	bhi.n	800973c <HAL_TIM_ConfigClockSource+0x16c>
 800964c:	2b50      	cmp	r3, #80	; 0x50
 800964e:	d03c      	beq.n	80096ca <HAL_TIM_ConfigClockSource+0xfa>
 8009650:	2b50      	cmp	r3, #80	; 0x50
 8009652:	d873      	bhi.n	800973c <HAL_TIM_ConfigClockSource+0x16c>
 8009654:	2b40      	cmp	r3, #64	; 0x40
 8009656:	d058      	beq.n	800970a <HAL_TIM_ConfigClockSource+0x13a>
 8009658:	2b40      	cmp	r3, #64	; 0x40
 800965a:	d86f      	bhi.n	800973c <HAL_TIM_ConfigClockSource+0x16c>
 800965c:	2b30      	cmp	r3, #48	; 0x30
 800965e:	d064      	beq.n	800972a <HAL_TIM_ConfigClockSource+0x15a>
 8009660:	2b30      	cmp	r3, #48	; 0x30
 8009662:	d86b      	bhi.n	800973c <HAL_TIM_ConfigClockSource+0x16c>
 8009664:	2b20      	cmp	r3, #32
 8009666:	d060      	beq.n	800972a <HAL_TIM_ConfigClockSource+0x15a>
 8009668:	2b20      	cmp	r3, #32
 800966a:	d867      	bhi.n	800973c <HAL_TIM_ConfigClockSource+0x16c>
 800966c:	2b00      	cmp	r3, #0
 800966e:	d05c      	beq.n	800972a <HAL_TIM_ConfigClockSource+0x15a>
 8009670:	2b10      	cmp	r3, #16
 8009672:	d05a      	beq.n	800972a <HAL_TIM_ConfigClockSource+0x15a>
 8009674:	e062      	b.n	800973c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6818      	ldr	r0, [r3, #0]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	6899      	ldr	r1, [r3, #8]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	685a      	ldr	r2, [r3, #4]
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	f000 fd85 	bl	800a194 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009698:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	609a      	str	r2, [r3, #8]
      break;
 80096a2:	e04f      	b.n	8009744 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6818      	ldr	r0, [r3, #0]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	6899      	ldr	r1, [r3, #8]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	685a      	ldr	r2, [r3, #4]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	f000 fd6e 	bl	800a194 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	689a      	ldr	r2, [r3, #8]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096c6:	609a      	str	r2, [r3, #8]
      break;
 80096c8:	e03c      	b.n	8009744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6818      	ldr	r0, [r3, #0]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	6859      	ldr	r1, [r3, #4]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	461a      	mov	r2, r3
 80096d8:	f000 fc2c 	bl	8009f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2150      	movs	r1, #80	; 0x50
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 fd3b 	bl	800a15e <TIM_ITRx_SetConfig>
      break;
 80096e8:	e02c      	b.n	8009744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6818      	ldr	r0, [r3, #0]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	6859      	ldr	r1, [r3, #4]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	461a      	mov	r2, r3
 80096f8:	f000 fc88 	bl	800a00c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2160      	movs	r1, #96	; 0x60
 8009702:	4618      	mov	r0, r3
 8009704:	f000 fd2b 	bl	800a15e <TIM_ITRx_SetConfig>
      break;
 8009708:	e01c      	b.n	8009744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	6859      	ldr	r1, [r3, #4]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	461a      	mov	r2, r3
 8009718:	f000 fc0c 	bl	8009f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2140      	movs	r1, #64	; 0x40
 8009722:	4618      	mov	r0, r3
 8009724:	f000 fd1b 	bl	800a15e <TIM_ITRx_SetConfig>
      break;
 8009728:	e00c      	b.n	8009744 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4619      	mov	r1, r3
 8009734:	4610      	mov	r0, r2
 8009736:	f000 fd12 	bl	800a15e <TIM_ITRx_SetConfig>
      break;
 800973a:	e003      	b.n	8009744 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	73fb      	strb	r3, [r7, #15]
      break;
 8009740:	e000      	b.n	8009744 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009754:	7bfb      	ldrb	r3, [r7, #15]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800975e:	b480      	push	{r7}
 8009760:	b083      	sub	sp, #12
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009766:	bf00      	nop
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009772:	b480      	push	{r7}
 8009774:	b083      	sub	sp, #12
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800977a:	bf00      	nop
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800978e:	bf00      	nop
 8009790:	370c      	adds	r7, #12
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800979a:	b480      	push	{r7}
 800979c:	b083      	sub	sp, #12
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80097a2:	bf00      	nop
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b083      	sub	sp, #12
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097b6:	bf00      	nop
 80097b8:	370c      	adds	r7, #12
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr

080097c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b083      	sub	sp, #12
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097ca:	bf00      	nop
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b083      	sub	sp, #12
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80097de:	bf00      	nop
 80097e0:	370c      	adds	r7, #12
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d107      	bne.n	8009812 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2201      	movs	r2, #1
 8009806:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009810:	e02a      	b.n	8009868 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	429a      	cmp	r2, r3
 800981a:	d107      	bne.n	800982c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2202      	movs	r2, #2
 8009820:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800982a:	e01d      	b.n	8009868 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	429a      	cmp	r2, r3
 8009834:	d107      	bne.n	8009846 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2204      	movs	r2, #4
 800983a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009844:	e010      	b.n	8009868 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	429a      	cmp	r2, r3
 800984e:	d107      	bne.n	8009860 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2208      	movs	r2, #8
 8009854:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800985e:	e003      	b.n	8009868 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f7ff ffb4 	bl	80097d6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	771a      	strb	r2, [r3, #28]
}
 8009874:	bf00      	nop
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009888:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	429a      	cmp	r2, r3
 8009892:	d10f      	bne.n	80098b4 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2201      	movs	r2, #1
 8009898:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d146      	bne.n	8009930 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098b2:	e03d      	b.n	8009930 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d10f      	bne.n	80098de <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2202      	movs	r2, #2
 80098c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	69db      	ldr	r3, [r3, #28]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d131      	bne.n	8009930 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098dc:	e028      	b.n	8009930 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d10f      	bne.n	8009908 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2204      	movs	r2, #4
 80098ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	69db      	ldr	r3, [r3, #28]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d11c      	bne.n	8009930 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009906:	e013      	b.n	8009930 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	429a      	cmp	r2, r3
 8009910:	d10e      	bne.n	8009930 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2208      	movs	r2, #8
 8009916:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	69db      	ldr	r3, [r3, #28]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d107      	bne.n	8009930 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f7ff ff28 	bl	8009786 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	771a      	strb	r2, [r3, #28]
}
 800993c:	bf00      	nop
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009950:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	429a      	cmp	r2, r3
 800995a:	d103      	bne.n	8009964 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2201      	movs	r2, #1
 8009960:	771a      	strb	r2, [r3, #28]
 8009962:	e019      	b.n	8009998 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	429a      	cmp	r2, r3
 800996c:	d103      	bne.n	8009976 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2202      	movs	r2, #2
 8009972:	771a      	strb	r2, [r3, #28]
 8009974:	e010      	b.n	8009998 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	429a      	cmp	r2, r3
 800997e:	d103      	bne.n	8009988 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2204      	movs	r2, #4
 8009984:	771a      	strb	r2, [r3, #28]
 8009986:	e007      	b.n	8009998 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	429a      	cmp	r2, r3
 8009990:	d102      	bne.n	8009998 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2208      	movs	r2, #8
 8009996:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f7ff fefe 	bl	800979a <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	771a      	strb	r2, [r3, #28]
}
 80099a4:	bf00      	nop
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a40      	ldr	r2, [pc, #256]	; (8009ac0 <TIM_Base_SetConfig+0x114>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d013      	beq.n	80099ec <TIM_Base_SetConfig+0x40>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ca:	d00f      	beq.n	80099ec <TIM_Base_SetConfig+0x40>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a3d      	ldr	r2, [pc, #244]	; (8009ac4 <TIM_Base_SetConfig+0x118>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d00b      	beq.n	80099ec <TIM_Base_SetConfig+0x40>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a3c      	ldr	r2, [pc, #240]	; (8009ac8 <TIM_Base_SetConfig+0x11c>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d007      	beq.n	80099ec <TIM_Base_SetConfig+0x40>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a3b      	ldr	r2, [pc, #236]	; (8009acc <TIM_Base_SetConfig+0x120>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d003      	beq.n	80099ec <TIM_Base_SetConfig+0x40>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a3a      	ldr	r2, [pc, #232]	; (8009ad0 <TIM_Base_SetConfig+0x124>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d108      	bne.n	80099fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a2f      	ldr	r2, [pc, #188]	; (8009ac0 <TIM_Base_SetConfig+0x114>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d02b      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a0c:	d027      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a2c      	ldr	r2, [pc, #176]	; (8009ac4 <TIM_Base_SetConfig+0x118>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d023      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a2b      	ldr	r2, [pc, #172]	; (8009ac8 <TIM_Base_SetConfig+0x11c>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d01f      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4a2a      	ldr	r2, [pc, #168]	; (8009acc <TIM_Base_SetConfig+0x120>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d01b      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a29      	ldr	r2, [pc, #164]	; (8009ad0 <TIM_Base_SetConfig+0x124>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d017      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a28      	ldr	r2, [pc, #160]	; (8009ad4 <TIM_Base_SetConfig+0x128>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d013      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a27      	ldr	r2, [pc, #156]	; (8009ad8 <TIM_Base_SetConfig+0x12c>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d00f      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a26      	ldr	r2, [pc, #152]	; (8009adc <TIM_Base_SetConfig+0x130>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d00b      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a25      	ldr	r2, [pc, #148]	; (8009ae0 <TIM_Base_SetConfig+0x134>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d007      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a24      	ldr	r2, [pc, #144]	; (8009ae4 <TIM_Base_SetConfig+0x138>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d003      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a23      	ldr	r2, [pc, #140]	; (8009ae8 <TIM_Base_SetConfig+0x13c>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d108      	bne.n	8009a70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	689a      	ldr	r2, [r3, #8]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a0a      	ldr	r2, [pc, #40]	; (8009ac0 <TIM_Base_SetConfig+0x114>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d003      	beq.n	8009aa4 <TIM_Base_SetConfig+0xf8>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a0c      	ldr	r2, [pc, #48]	; (8009ad0 <TIM_Base_SetConfig+0x124>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d103      	bne.n	8009aac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	691a      	ldr	r2, [r3, #16]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	615a      	str	r2, [r3, #20]
}
 8009ab2:	bf00      	nop
 8009ab4:	3714      	adds	r7, #20
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	40010000 	.word	0x40010000
 8009ac4:	40000400 	.word	0x40000400
 8009ac8:	40000800 	.word	0x40000800
 8009acc:	40000c00 	.word	0x40000c00
 8009ad0:	40010400 	.word	0x40010400
 8009ad4:	40014000 	.word	0x40014000
 8009ad8:	40014400 	.word	0x40014400
 8009adc:	40014800 	.word	0x40014800
 8009ae0:	40001800 	.word	0x40001800
 8009ae4:	40001c00 	.word	0x40001c00
 8009ae8:	40002000 	.word	0x40002000

08009aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	f023 0201 	bic.w	r2, r3, #1
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a1b      	ldr	r3, [r3, #32]
 8009b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f023 0303 	bic.w	r3, r3, #3
 8009b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	f023 0302 	bic.w	r3, r3, #2
 8009b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a20      	ldr	r2, [pc, #128]	; (8009bc4 <TIM_OC1_SetConfig+0xd8>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d003      	beq.n	8009b50 <TIM_OC1_SetConfig+0x64>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a1f      	ldr	r2, [pc, #124]	; (8009bc8 <TIM_OC1_SetConfig+0xdc>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d10c      	bne.n	8009b6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	f023 0308 	bic.w	r3, r3, #8
 8009b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	697a      	ldr	r2, [r7, #20]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f023 0304 	bic.w	r3, r3, #4
 8009b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a15      	ldr	r2, [pc, #84]	; (8009bc4 <TIM_OC1_SetConfig+0xd8>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d003      	beq.n	8009b7a <TIM_OC1_SetConfig+0x8e>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4a14      	ldr	r2, [pc, #80]	; (8009bc8 <TIM_OC1_SetConfig+0xdc>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d111      	bne.n	8009b9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	621a      	str	r2, [r3, #32]
}
 8009bb8:	bf00      	nop
 8009bba:	371c      	adds	r7, #28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	40010000 	.word	0x40010000
 8009bc8:	40010400 	.word	0x40010400

08009bcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b087      	sub	sp, #28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
 8009bda:	f023 0210 	bic.w	r2, r3, #16
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
 8009be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	021b      	lsls	r3, r3, #8
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	f023 0320 	bic.w	r3, r3, #32
 8009c16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	011b      	lsls	r3, r3, #4
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a22      	ldr	r2, [pc, #136]	; (8009cb0 <TIM_OC2_SetConfig+0xe4>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d003      	beq.n	8009c34 <TIM_OC2_SetConfig+0x68>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a21      	ldr	r2, [pc, #132]	; (8009cb4 <TIM_OC2_SetConfig+0xe8>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d10d      	bne.n	8009c50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	011b      	lsls	r3, r3, #4
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a17      	ldr	r2, [pc, #92]	; (8009cb0 <TIM_OC2_SetConfig+0xe4>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d003      	beq.n	8009c60 <TIM_OC2_SetConfig+0x94>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a16      	ldr	r2, [pc, #88]	; (8009cb4 <TIM_OC2_SetConfig+0xe8>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d113      	bne.n	8009c88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	695b      	ldr	r3, [r3, #20]
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	693a      	ldr	r2, [r7, #16]
 8009c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	621a      	str	r2, [r3, #32]
}
 8009ca2:	bf00      	nop
 8009ca4:	371c      	adds	r7, #28
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	40010000 	.word	0x40010000
 8009cb4:	40010400 	.word	0x40010400

08009cb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f023 0303 	bic.w	r3, r3, #3
 8009cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	021b      	lsls	r3, r3, #8
 8009d08:	697a      	ldr	r2, [r7, #20]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a21      	ldr	r2, [pc, #132]	; (8009d98 <TIM_OC3_SetConfig+0xe0>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d003      	beq.n	8009d1e <TIM_OC3_SetConfig+0x66>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a20      	ldr	r2, [pc, #128]	; (8009d9c <TIM_OC3_SetConfig+0xe4>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d10d      	bne.n	8009d3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	021b      	lsls	r3, r3, #8
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a16      	ldr	r2, [pc, #88]	; (8009d98 <TIM_OC3_SetConfig+0xe0>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d003      	beq.n	8009d4a <TIM_OC3_SetConfig+0x92>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a15      	ldr	r2, [pc, #84]	; (8009d9c <TIM_OC3_SetConfig+0xe4>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d113      	bne.n	8009d72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	011b      	lsls	r3, r3, #4
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	011b      	lsls	r3, r3, #4
 8009d6c:	693a      	ldr	r2, [r7, #16]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	693a      	ldr	r2, [r7, #16]
 8009d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	621a      	str	r2, [r3, #32]
}
 8009d8c:	bf00      	nop
 8009d8e:	371c      	adds	r7, #28
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr
 8009d98:	40010000 	.word	0x40010000
 8009d9c:	40010400 	.word	0x40010400

08009da0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	021b      	lsls	r3, r3, #8
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009dea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	031b      	lsls	r3, r3, #12
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a12      	ldr	r2, [pc, #72]	; (8009e44 <TIM_OC4_SetConfig+0xa4>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d003      	beq.n	8009e08 <TIM_OC4_SetConfig+0x68>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a11      	ldr	r2, [pc, #68]	; (8009e48 <TIM_OC4_SetConfig+0xa8>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d109      	bne.n	8009e1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	019b      	lsls	r3, r3, #6
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	621a      	str	r2, [r3, #32]
}
 8009e36:	bf00      	nop
 8009e38:	371c      	adds	r7, #28
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	40010000 	.word	0x40010000
 8009e48:	40010400 	.word	0x40010400

08009e4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b087      	sub	sp, #28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	f023 0201 	bic.w	r2, r3, #1
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	4a28      	ldr	r2, [pc, #160]	; (8009f18 <TIM_TI1_SetConfig+0xcc>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d01b      	beq.n	8009eb2 <TIM_TI1_SetConfig+0x66>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e80:	d017      	beq.n	8009eb2 <TIM_TI1_SetConfig+0x66>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	4a25      	ldr	r2, [pc, #148]	; (8009f1c <TIM_TI1_SetConfig+0xd0>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d013      	beq.n	8009eb2 <TIM_TI1_SetConfig+0x66>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	4a24      	ldr	r2, [pc, #144]	; (8009f20 <TIM_TI1_SetConfig+0xd4>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d00f      	beq.n	8009eb2 <TIM_TI1_SetConfig+0x66>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4a23      	ldr	r2, [pc, #140]	; (8009f24 <TIM_TI1_SetConfig+0xd8>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d00b      	beq.n	8009eb2 <TIM_TI1_SetConfig+0x66>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	4a22      	ldr	r2, [pc, #136]	; (8009f28 <TIM_TI1_SetConfig+0xdc>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d007      	beq.n	8009eb2 <TIM_TI1_SetConfig+0x66>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	4a21      	ldr	r2, [pc, #132]	; (8009f2c <TIM_TI1_SetConfig+0xe0>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d003      	beq.n	8009eb2 <TIM_TI1_SetConfig+0x66>
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	4a20      	ldr	r2, [pc, #128]	; (8009f30 <TIM_TI1_SetConfig+0xe4>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d101      	bne.n	8009eb6 <TIM_TI1_SetConfig+0x6a>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e000      	b.n	8009eb8 <TIM_TI1_SetConfig+0x6c>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d008      	beq.n	8009ece <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	f023 0303 	bic.w	r3, r3, #3
 8009ec2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	617b      	str	r3, [r7, #20]
 8009ecc:	e003      	b.n	8009ed6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f043 0301 	orr.w	r3, r3, #1
 8009ed4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f023 030a 	bic.w	r3, r3, #10
 8009ef0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f003 030a 	and.w	r3, r3, #10
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	621a      	str	r2, [r3, #32]
}
 8009f0a:	bf00      	nop
 8009f0c:	371c      	adds	r7, #28
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	40010000 	.word	0x40010000
 8009f1c:	40000400 	.word	0x40000400
 8009f20:	40000800 	.word	0x40000800
 8009f24:	40000c00 	.word	0x40000c00
 8009f28:	40010400 	.word	0x40010400
 8009f2c:	40014000 	.word	0x40014000
 8009f30:	40001800 	.word	0x40001800

08009f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b087      	sub	sp, #28
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6a1b      	ldr	r3, [r3, #32]
 8009f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6a1b      	ldr	r3, [r3, #32]
 8009f4a:	f023 0201 	bic.w	r2, r3, #1
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	011b      	lsls	r3, r3, #4
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f023 030a 	bic.w	r3, r3, #10
 8009f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	621a      	str	r2, [r3, #32]
}
 8009f86:	bf00      	nop
 8009f88:	371c      	adds	r7, #28
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b087      	sub	sp, #28
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	60f8      	str	r0, [r7, #12]
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	607a      	str	r2, [r7, #4]
 8009f9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	f023 0210 	bic.w	r2, r3, #16
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	021b      	lsls	r3, r3, #8
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	031b      	lsls	r3, r3, #12
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fe4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	011b      	lsls	r3, r3, #4
 8009fea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	697a      	ldr	r2, [r7, #20]
 8009ff8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	693a      	ldr	r2, [r7, #16]
 8009ffe:	621a      	str	r2, [r3, #32]
}
 800a000:	bf00      	nop
 800a002:	371c      	adds	r7, #28
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	f023 0210 	bic.w	r2, r3, #16
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a036:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	031b      	lsls	r3, r3, #12
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	4313      	orrs	r3, r2
 800a040:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a048:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	011b      	lsls	r3, r3, #4
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	4313      	orrs	r3, r2
 800a052:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	621a      	str	r2, [r3, #32]
}
 800a060:	bf00      	nop
 800a062:	371c      	adds	r7, #28
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
 800a078:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6a1b      	ldr	r3, [r3, #32]
 800a090:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f023 0303 	bic.w	r3, r3, #3
 800a098:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	011b      	lsls	r3, r3, #4
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a0bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	021b      	lsls	r3, r3, #8
 800a0c2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a0c6:	693a      	ldr	r2, [r7, #16]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	621a      	str	r2, [r3, #32]
}
 800a0d8:	bf00      	nop
 800a0da:	371c      	adds	r7, #28
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b087      	sub	sp, #28
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6a1b      	ldr	r3, [r3, #32]
 800a0f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6a1b      	ldr	r3, [r3, #32]
 800a108:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a110:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	021b      	lsls	r3, r3, #8
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	4313      	orrs	r3, r2
 800a11a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a122:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	031b      	lsls	r3, r3, #12
 800a128:	b29b      	uxth	r3, r3
 800a12a:	697a      	ldr	r2, [r7, #20]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a136:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	031b      	lsls	r3, r3, #12
 800a13c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	4313      	orrs	r3, r2
 800a144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	621a      	str	r2, [r3, #32]
}
 800a152:	bf00      	nop
 800a154:	371c      	adds	r7, #28
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a15e:	b480      	push	{r7}
 800a160:	b085      	sub	sp, #20
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a176:	683a      	ldr	r2, [r7, #0]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	f043 0307 	orr.w	r3, r3, #7
 800a180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	609a      	str	r2, [r3, #8]
}
 800a188:	bf00      	nop
 800a18a:	3714      	adds	r7, #20
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	021a      	lsls	r2, r3, #8
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	431a      	orrs	r2, r3
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	609a      	str	r2, [r3, #8]
}
 800a1c8:	bf00      	nop
 800a1ca:	371c      	adds	r7, #28
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	f003 031f 	and.w	r3, r3, #31
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6a1a      	ldr	r2, [r3, #32]
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	43db      	mvns	r3, r3
 800a1f6:	401a      	ands	r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6a1a      	ldr	r2, [r3, #32]
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	f003 031f 	and.w	r3, r3, #31
 800a206:	6879      	ldr	r1, [r7, #4]
 800a208:	fa01 f303 	lsl.w	r3, r1, r3
 800a20c:	431a      	orrs	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	621a      	str	r2, [r3, #32]
}
 800a212:	bf00      	nop
 800a214:	371c      	adds	r7, #28
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
	...

0800a220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a230:	2b01      	cmp	r3, #1
 800a232:	d101      	bne.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a234:	2302      	movs	r3, #2
 800a236:	e05a      	b.n	800a2ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2202      	movs	r2, #2
 800a244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a25e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	4313      	orrs	r3, r2
 800a268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a21      	ldr	r2, [pc, #132]	; (800a2fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d022      	beq.n	800a2c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a284:	d01d      	beq.n	800a2c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a1d      	ldr	r2, [pc, #116]	; (800a300 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d018      	beq.n	800a2c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a1b      	ldr	r2, [pc, #108]	; (800a304 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d013      	beq.n	800a2c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a1a      	ldr	r2, [pc, #104]	; (800a308 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d00e      	beq.n	800a2c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a18      	ldr	r2, [pc, #96]	; (800a30c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d009      	beq.n	800a2c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a17      	ldr	r2, [pc, #92]	; (800a310 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d004      	beq.n	800a2c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a15      	ldr	r2, [pc, #84]	; (800a314 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d10c      	bne.n	800a2dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3714      	adds	r7, #20
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	40010000 	.word	0x40010000
 800a300:	40000400 	.word	0x40000400
 800a304:	40000800 	.word	0x40000800
 800a308:	40000c00 	.word	0x40000c00
 800a30c:	40010400 	.word	0x40010400
 800a310:	40014000 	.word	0x40014000
 800a314:	40001800 	.word	0x40001800

0800a318 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a322:	2300      	movs	r3, #0
 800a324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d101      	bne.n	800a334 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a330:	2302      	movs	r3, #2
 800a332:	e03d      	b.n	800a3b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	4313      	orrs	r3, r2
 800a348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	4313      	orrs	r3, r2
 800a356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	4313      	orrs	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4313      	orrs	r3, r2
 800a372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	4313      	orrs	r3, r2
 800a380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e03f      	b.n	800a476 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d106      	bne.n	800a410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7fb f94a 	bl	80056a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2224      	movs	r2, #36	; 0x24
 800a414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68da      	ldr	r2, [r3, #12]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fe81 	bl	800b130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	691a      	ldr	r2, [r3, #16]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a43c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	695a      	ldr	r2, [r3, #20]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a44c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68da      	ldr	r2, [r3, #12]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a45c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2220      	movs	r2, #32
 800a468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2220      	movs	r2, #32
 800a470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b08a      	sub	sp, #40	; 0x28
 800a482:	af02      	add	r7, sp, #8
 800a484:	60f8      	str	r0, [r7, #12]
 800a486:	60b9      	str	r1, [r7, #8]
 800a488:	603b      	str	r3, [r7, #0]
 800a48a:	4613      	mov	r3, r2
 800a48c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a48e:	2300      	movs	r3, #0
 800a490:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	2b20      	cmp	r3, #32
 800a49c:	d17c      	bne.n	800a598 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d002      	beq.n	800a4aa <HAL_UART_Transmit+0x2c>
 800a4a4:	88fb      	ldrh	r3, [r7, #6]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e075      	b.n	800a59a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d101      	bne.n	800a4bc <HAL_UART_Transmit+0x3e>
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	e06e      	b.n	800a59a <HAL_UART_Transmit+0x11c>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2221      	movs	r2, #33	; 0x21
 800a4ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a4d2:	f7fb fbdb 	bl	8005c8c <HAL_GetTick>
 800a4d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	88fa      	ldrh	r2, [r7, #6]
 800a4dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	88fa      	ldrh	r2, [r7, #6]
 800a4e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ec:	d108      	bne.n	800a500 <HAL_UART_Transmit+0x82>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d104      	bne.n	800a500 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	61bb      	str	r3, [r7, #24]
 800a4fe:	e003      	b.n	800a508 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a504:	2300      	movs	r3, #0
 800a506:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a510:	e02a      	b.n	800a568 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	2200      	movs	r2, #0
 800a51a:	2180      	movs	r1, #128	; 0x80
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f000 fbc1 	bl	800aca4 <UART_WaitOnFlagUntilTimeout>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a528:	2303      	movs	r3, #3
 800a52a:	e036      	b.n	800a59a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10b      	bne.n	800a54a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	881b      	ldrh	r3, [r3, #0]
 800a536:	461a      	mov	r2, r3
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a540:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	3302      	adds	r3, #2
 800a546:	61bb      	str	r3, [r7, #24]
 800a548:	e007      	b.n	800a55a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	781a      	ldrb	r2, [r3, #0]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	3301      	adds	r3, #1
 800a558:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a55e:	b29b      	uxth	r3, r3
 800a560:	3b01      	subs	r3, #1
 800a562:	b29a      	uxth	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1cf      	bne.n	800a512 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	9300      	str	r3, [sp, #0]
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	2200      	movs	r2, #0
 800a57a:	2140      	movs	r1, #64	; 0x40
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f000 fb91 	bl	800aca4 <UART_WaitOnFlagUntilTimeout>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d001      	beq.n	800a58c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e006      	b.n	800a59a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2220      	movs	r2, #32
 800a590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a594:	2300      	movs	r3, #0
 800a596:	e000      	b.n	800a59a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a598:	2302      	movs	r3, #2
  }
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3720      	adds	r7, #32
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b08a      	sub	sp, #40	; 0x28
 800a5a6:	af02      	add	r7, sp, #8
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	60b9      	str	r1, [r7, #8]
 800a5ac:	603b      	str	r3, [r7, #0]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b20      	cmp	r3, #32
 800a5c0:	f040 808c 	bne.w	800a6dc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d002      	beq.n	800a5d0 <HAL_UART_Receive+0x2e>
 800a5ca:	88fb      	ldrh	r3, [r7, #6]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e084      	b.n	800a6de <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d101      	bne.n	800a5e2 <HAL_UART_Receive+0x40>
 800a5de:	2302      	movs	r3, #2
 800a5e0:	e07d      	b.n	800a6de <HAL_UART_Receive+0x13c>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2222      	movs	r2, #34	; 0x22
 800a5f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5fe:	f7fb fb45 	bl	8005c8c <HAL_GetTick>
 800a602:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	88fa      	ldrh	r2, [r7, #6]
 800a608:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	88fa      	ldrh	r2, [r7, #6]
 800a60e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a618:	d108      	bne.n	800a62c <HAL_UART_Receive+0x8a>
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d104      	bne.n	800a62c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a622:	2300      	movs	r3, #0
 800a624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	61bb      	str	r3, [r7, #24]
 800a62a:	e003      	b.n	800a634 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a630:	2300      	movs	r3, #0
 800a632:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a63c:	e043      	b.n	800a6c6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	2200      	movs	r2, #0
 800a646:	2120      	movs	r1, #32
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 fb2b 	bl	800aca4 <UART_WaitOnFlagUntilTimeout>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d001      	beq.n	800a658 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a654:	2303      	movs	r3, #3
 800a656:	e042      	b.n	800a6de <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10c      	bne.n	800a678 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	b29b      	uxth	r3, r3
 800a666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	3302      	adds	r3, #2
 800a674:	61bb      	str	r3, [r7, #24]
 800a676:	e01f      	b.n	800a6b8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a680:	d007      	beq.n	800a692 <HAL_UART_Receive+0xf0>
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10a      	bne.n	800a6a0 <HAL_UART_Receive+0xfe>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d106      	bne.n	800a6a0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	b2da      	uxtb	r2, r3
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	701a      	strb	r2, [r3, #0]
 800a69e:	e008      	b.n	800a6b2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6ac:	b2da      	uxtb	r2, r3
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d1b6      	bne.n	800a63e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2220      	movs	r2, #32
 800a6d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	e000      	b.n	800a6de <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a6dc:	2302      	movs	r3, #2
  }
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3720      	adds	r7, #32
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	60f8      	str	r0, [r7, #12]
 800a6ee:	60b9      	str	r1, [r7, #8]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	2b20      	cmp	r3, #32
 800a6fe:	d11d      	bne.n	800a73c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d002      	beq.n	800a70c <HAL_UART_Receive_IT+0x26>
 800a706:	88fb      	ldrh	r3, [r7, #6]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d101      	bne.n	800a710 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e016      	b.n	800a73e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a716:	2b01      	cmp	r3, #1
 800a718:	d101      	bne.n	800a71e <HAL_UART_Receive_IT+0x38>
 800a71a:	2302      	movs	r3, #2
 800a71c:	e00f      	b.n	800a73e <HAL_UART_Receive_IT+0x58>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a72c:	88fb      	ldrh	r3, [r7, #6]
 800a72e:	461a      	mov	r2, r3
 800a730:	68b9      	ldr	r1, [r7, #8]
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 fb24 	bl	800ad80 <UART_Start_Receive_IT>
 800a738:	4603      	mov	r3, r0
 800a73a:	e000      	b.n	800a73e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a73c:	2302      	movs	r3, #2
  }
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
	...

0800a748 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b0ba      	sub	sp, #232	; 0xe8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a76e:	2300      	movs	r3, #0
 800a770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a774:	2300      	movs	r3, #0
 800a776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a77a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a77e:	f003 030f 	and.w	r3, r3, #15
 800a782:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10f      	bne.n	800a7ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a78e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a792:	f003 0320 	and.w	r3, r3, #32
 800a796:	2b00      	cmp	r3, #0
 800a798:	d009      	beq.n	800a7ae <HAL_UART_IRQHandler+0x66>
 800a79a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a79e:	f003 0320 	and.w	r3, r3, #32
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d003      	beq.n	800a7ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fc07 	bl	800afba <UART_Receive_IT>
      return;
 800a7ac:	e256      	b.n	800ac5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a7ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f000 80de 	beq.w	800a974 <HAL_UART_IRQHandler+0x22c>
 800a7b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7bc:	f003 0301 	and.w	r3, r3, #1
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d106      	bne.n	800a7d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a7c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f000 80d1 	beq.w	800a974 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7d6:	f003 0301 	and.w	r3, r3, #1
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00b      	beq.n	800a7f6 <HAL_UART_IRQHandler+0xae>
 800a7de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d005      	beq.n	800a7f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ee:	f043 0201 	orr.w	r2, r3, #1
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a7f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7fa:	f003 0304 	and.w	r3, r3, #4
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00b      	beq.n	800a81a <HAL_UART_IRQHandler+0xd2>
 800a802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d005      	beq.n	800a81a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a812:	f043 0202 	orr.w	r2, r3, #2
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a81a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a81e:	f003 0302 	and.w	r3, r3, #2
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00b      	beq.n	800a83e <HAL_UART_IRQHandler+0xf6>
 800a826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a82a:	f003 0301 	and.w	r3, r3, #1
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d005      	beq.n	800a83e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a836:	f043 0204 	orr.w	r2, r3, #4
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a83e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a842:	f003 0308 	and.w	r3, r3, #8
 800a846:	2b00      	cmp	r3, #0
 800a848:	d011      	beq.n	800a86e <HAL_UART_IRQHandler+0x126>
 800a84a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a84e:	f003 0320 	and.w	r3, r3, #32
 800a852:	2b00      	cmp	r3, #0
 800a854:	d105      	bne.n	800a862 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a85a:	f003 0301 	and.w	r3, r3, #1
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d005      	beq.n	800a86e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a866:	f043 0208 	orr.w	r2, r3, #8
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 81ed 	beq.w	800ac52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a87c:	f003 0320 	and.w	r3, r3, #32
 800a880:	2b00      	cmp	r3, #0
 800a882:	d008      	beq.n	800a896 <HAL_UART_IRQHandler+0x14e>
 800a884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a888:	f003 0320 	and.w	r3, r3, #32
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d002      	beq.n	800a896 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fb92 	bl	800afba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	695b      	ldr	r3, [r3, #20]
 800a89c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a0:	2b40      	cmp	r3, #64	; 0x40
 800a8a2:	bf0c      	ite	eq
 800a8a4:	2301      	moveq	r3, #1
 800a8a6:	2300      	movne	r3, #0
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b2:	f003 0308 	and.w	r3, r3, #8
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d103      	bne.n	800a8c2 <HAL_UART_IRQHandler+0x17a>
 800a8ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d04f      	beq.n	800a962 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fa9a 	bl	800adfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d2:	2b40      	cmp	r3, #64	; 0x40
 800a8d4:	d141      	bne.n	800a95a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3314      	adds	r3, #20
 800a8dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a8e4:	e853 3f00 	ldrex	r3, [r3]
 800a8e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a8ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	3314      	adds	r3, #20
 800a8fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a902:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a90e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a912:	e841 2300 	strex	r3, r2, [r1]
 800a916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a91a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1d9      	bne.n	800a8d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a926:	2b00      	cmp	r3, #0
 800a928:	d013      	beq.n	800a952 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92e:	4a7d      	ldr	r2, [pc, #500]	; (800ab24 <HAL_UART_IRQHandler+0x3dc>)
 800a930:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a936:	4618      	mov	r0, r3
 800a938:	f7fc fa08 	bl	8006d4c <HAL_DMA_Abort_IT>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d016      	beq.n	800a970 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a94c:	4610      	mov	r0, r2
 800a94e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a950:	e00e      	b.n	800a970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f990 	bl	800ac78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a958:	e00a      	b.n	800a970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f98c 	bl	800ac78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a960:	e006      	b.n	800a970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f988 	bl	800ac78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a96e:	e170      	b.n	800ac52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a970:	bf00      	nop
    return;
 800a972:	e16e      	b.n	800ac52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a978:	2b01      	cmp	r3, #1
 800a97a:	f040 814a 	bne.w	800ac12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a97e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a982:	f003 0310 	and.w	r3, r3, #16
 800a986:	2b00      	cmp	r3, #0
 800a988:	f000 8143 	beq.w	800ac12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a98c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a990:	f003 0310 	and.w	r3, r3, #16
 800a994:	2b00      	cmp	r3, #0
 800a996:	f000 813c 	beq.w	800ac12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a99a:	2300      	movs	r3, #0
 800a99c:	60bb      	str	r3, [r7, #8]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	60bb      	str	r3, [r7, #8]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	60bb      	str	r3, [r7, #8]
 800a9ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ba:	2b40      	cmp	r3, #64	; 0x40
 800a9bc:	f040 80b4 	bne.w	800ab28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a9cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f000 8140 	beq.w	800ac56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a9da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	f080 8139 	bcs.w	800ac56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9f6:	f000 8088 	beq.w	800ab0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	330c      	adds	r3, #12
 800aa00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa08:	e853 3f00 	ldrex	r3, [r3]
 800aa0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aa10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	330c      	adds	r3, #12
 800aa22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aa26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aa32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aa36:	e841 2300 	strex	r3, r2, [r1]
 800aa3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1d9      	bne.n	800a9fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	3314      	adds	r3, #20
 800aa4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa50:	e853 3f00 	ldrex	r3, [r3]
 800aa54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aa56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa58:	f023 0301 	bic.w	r3, r3, #1
 800aa5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	3314      	adds	r3, #20
 800aa66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aa6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aa6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aa72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa76:	e841 2300 	strex	r3, r2, [r1]
 800aa7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aa7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1e1      	bne.n	800aa46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	3314      	adds	r3, #20
 800aa88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa8c:	e853 3f00 	ldrex	r3, [r3]
 800aa90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aa92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	3314      	adds	r3, #20
 800aaa2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aaa6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aaa8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aaac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aaae:	e841 2300 	strex	r3, r2, [r1]
 800aab2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1e3      	bne.n	800aa82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2220      	movs	r2, #32
 800aabe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	330c      	adds	r3, #12
 800aace:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aad2:	e853 3f00 	ldrex	r3, [r3]
 800aad6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aada:	f023 0310 	bic.w	r3, r3, #16
 800aade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	330c      	adds	r3, #12
 800aae8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aaec:	65ba      	str	r2, [r7, #88]	; 0x58
 800aaee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aaf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aaf4:	e841 2300 	strex	r3, r2, [r1]
 800aaf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d1e3      	bne.n	800aac8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fc f8b1 	bl	8006c6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	1ad3      	subs	r3, r2, r3
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	4619      	mov	r1, r3
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 f8b6 	bl	800ac8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab20:	e099      	b.n	800ac56 <HAL_UART_IRQHandler+0x50e>
 800ab22:	bf00      	nop
 800ab24:	0800aec3 	.word	0x0800aec3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f000 808b 	beq.w	800ac5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ab44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f000 8086 	beq.w	800ac5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	330c      	adds	r3, #12
 800ab54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab58:	e853 3f00 	ldrex	r3, [r3]
 800ab5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	330c      	adds	r3, #12
 800ab6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ab72:	647a      	str	r2, [r7, #68]	; 0x44
 800ab74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab7a:	e841 2300 	strex	r3, r2, [r1]
 800ab7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1e3      	bne.n	800ab4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3314      	adds	r3, #20
 800ab8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab90:	e853 3f00 	ldrex	r3, [r3]
 800ab94:	623b      	str	r3, [r7, #32]
   return(result);
 800ab96:	6a3b      	ldr	r3, [r7, #32]
 800ab98:	f023 0301 	bic.w	r3, r3, #1
 800ab9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	3314      	adds	r3, #20
 800aba6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800abaa:	633a      	str	r2, [r7, #48]	; 0x30
 800abac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abb2:	e841 2300 	strex	r3, r2, [r1]
 800abb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1e3      	bne.n	800ab86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2220      	movs	r2, #32
 800abc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	330c      	adds	r3, #12
 800abd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	e853 3f00 	ldrex	r3, [r3]
 800abda:	60fb      	str	r3, [r7, #12]
   return(result);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f023 0310 	bic.w	r3, r3, #16
 800abe2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	330c      	adds	r3, #12
 800abec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800abf0:	61fa      	str	r2, [r7, #28]
 800abf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf4:	69b9      	ldr	r1, [r7, #24]
 800abf6:	69fa      	ldr	r2, [r7, #28]
 800abf8:	e841 2300 	strex	r3, r2, [r1]
 800abfc:	617b      	str	r3, [r7, #20]
   return(result);
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1e3      	bne.n	800abcc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f83e 	bl	800ac8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ac10:	e023      	b.n	800ac5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d009      	beq.n	800ac32 <HAL_UART_IRQHandler+0x4ea>
 800ac1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d003      	beq.n	800ac32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f95d 	bl	800aeea <UART_Transmit_IT>
    return;
 800ac30:	e014      	b.n	800ac5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00e      	beq.n	800ac5c <HAL_UART_IRQHandler+0x514>
 800ac3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d008      	beq.n	800ac5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f99d 	bl	800af8a <UART_EndTransmit_IT>
    return;
 800ac50:	e004      	b.n	800ac5c <HAL_UART_IRQHandler+0x514>
    return;
 800ac52:	bf00      	nop
 800ac54:	e002      	b.n	800ac5c <HAL_UART_IRQHandler+0x514>
      return;
 800ac56:	bf00      	nop
 800ac58:	e000      	b.n	800ac5c <HAL_UART_IRQHandler+0x514>
      return;
 800ac5a:	bf00      	nop
  }
}
 800ac5c:	37e8      	adds	r7, #232	; 0xe8
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop

0800ac64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ac80:	bf00      	nop
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	460b      	mov	r3, r1
 800ac96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b090      	sub	sp, #64	; 0x40
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	603b      	str	r3, [r7, #0]
 800acb0:	4613      	mov	r3, r2
 800acb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acb4:	e050      	b.n	800ad58 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acbc:	d04c      	beq.n	800ad58 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800acbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d007      	beq.n	800acd4 <UART_WaitOnFlagUntilTimeout+0x30>
 800acc4:	f7fa ffe2 	bl	8005c8c <HAL_GetTick>
 800acc8:	4602      	mov	r2, r0
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d241      	bcs.n	800ad58 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	330c      	adds	r3, #12
 800acda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acde:	e853 3f00 	ldrex	r3, [r3]
 800ace2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800acea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	330c      	adds	r3, #12
 800acf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800acf4:	637a      	str	r2, [r7, #52]	; 0x34
 800acf6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acfc:	e841 2300 	strex	r3, r2, [r1]
 800ad00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1e5      	bne.n	800acd4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	3314      	adds	r3, #20
 800ad0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	e853 3f00 	ldrex	r3, [r3]
 800ad16:	613b      	str	r3, [r7, #16]
   return(result);
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	f023 0301 	bic.w	r3, r3, #1
 800ad1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3314      	adds	r3, #20
 800ad26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad28:	623a      	str	r2, [r7, #32]
 800ad2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2c:	69f9      	ldr	r1, [r7, #28]
 800ad2e:	6a3a      	ldr	r2, [r7, #32]
 800ad30:	e841 2300 	strex	r3, r2, [r1]
 800ad34:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1e5      	bne.n	800ad08 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2220      	movs	r2, #32
 800ad40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2220      	movs	r2, #32
 800ad48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ad54:	2303      	movs	r3, #3
 800ad56:	e00f      	b.n	800ad78 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	4013      	ands	r3, r2
 800ad62:	68ba      	ldr	r2, [r7, #8]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	bf0c      	ite	eq
 800ad68:	2301      	moveq	r3, #1
 800ad6a:	2300      	movne	r3, #0
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	461a      	mov	r2, r3
 800ad70:	79fb      	ldrb	r3, [r7, #7]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d09f      	beq.n	800acb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3740      	adds	r7, #64	; 0x40
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	88fa      	ldrh	r2, [r7, #6]
 800ad98:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	88fa      	ldrh	r2, [r7, #6]
 800ad9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2222      	movs	r2, #34	; 0x22
 800adaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d007      	beq.n	800adce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68da      	ldr	r2, [r3, #12]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adcc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	695a      	ldr	r2, [r3, #20]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f042 0201 	orr.w	r2, r2, #1
 800addc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68da      	ldr	r2, [r3, #12]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f042 0220 	orr.w	r2, r2, #32
 800adec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3714      	adds	r7, #20
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b095      	sub	sp, #84	; 0x54
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	330c      	adds	r3, #12
 800ae0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae0e:	e853 3f00 	ldrex	r3, [r3]
 800ae12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	330c      	adds	r3, #12
 800ae22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae24:	643a      	str	r2, [r7, #64]	; 0x40
 800ae26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae2c:	e841 2300 	strex	r3, r2, [r1]
 800ae30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1e5      	bne.n	800ae04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	3314      	adds	r3, #20
 800ae3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae40:	6a3b      	ldr	r3, [r7, #32]
 800ae42:	e853 3f00 	ldrex	r3, [r3]
 800ae46:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	f023 0301 	bic.w	r3, r3, #1
 800ae4e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	3314      	adds	r3, #20
 800ae56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae58:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae60:	e841 2300 	strex	r3, r2, [r1]
 800ae64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1e5      	bne.n	800ae38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d119      	bne.n	800aea8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	330c      	adds	r3, #12
 800ae7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	e853 3f00 	ldrex	r3, [r3]
 800ae82:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	f023 0310 	bic.w	r3, r3, #16
 800ae8a:	647b      	str	r3, [r7, #68]	; 0x44
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	330c      	adds	r3, #12
 800ae92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae94:	61ba      	str	r2, [r7, #24]
 800ae96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae98:	6979      	ldr	r1, [r7, #20]
 800ae9a:	69ba      	ldr	r2, [r7, #24]
 800ae9c:	e841 2300 	strex	r3, r2, [r1]
 800aea0:	613b      	str	r3, [r7, #16]
   return(result);
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1e5      	bne.n	800ae74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2220      	movs	r2, #32
 800aeac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800aeb6:	bf00      	nop
 800aeb8:	3754      	adds	r7, #84	; 0x54
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr

0800aec2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b084      	sub	sp, #16
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aece:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f7ff fecb 	bl	800ac78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aee2:	bf00      	nop
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aeea:	b480      	push	{r7}
 800aeec:	b085      	sub	sp, #20
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	2b21      	cmp	r3, #33	; 0x21
 800aefc:	d13e      	bne.n	800af7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af06:	d114      	bne.n	800af32 <UART_Transmit_IT+0x48>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d110      	bne.n	800af32 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a1b      	ldr	r3, [r3, #32]
 800af14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	881b      	ldrh	r3, [r3, #0]
 800af1a:	461a      	mov	r2, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a1b      	ldr	r3, [r3, #32]
 800af2a:	1c9a      	adds	r2, r3, #2
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	621a      	str	r2, [r3, #32]
 800af30:	e008      	b.n	800af44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	1c59      	adds	r1, r3, #1
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	6211      	str	r1, [r2, #32]
 800af3c:	781a      	ldrb	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af48:	b29b      	uxth	r3, r3
 800af4a:	3b01      	subs	r3, #1
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	4619      	mov	r1, r3
 800af52:	84d1      	strh	r1, [r2, #38]	; 0x26
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10f      	bne.n	800af78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68da      	ldr	r2, [r3, #12]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	e000      	b.n	800af7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800af7c:	2302      	movs	r3, #2
  }
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b082      	sub	sp, #8
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68da      	ldr	r2, [r3, #12]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afa0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2220      	movs	r2, #32
 800afa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f7ff fe5a 	bl	800ac64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b08c      	sub	sp, #48	; 0x30
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	2b22      	cmp	r3, #34	; 0x22
 800afcc:	f040 80ab 	bne.w	800b126 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afd8:	d117      	bne.n	800b00a <UART_Receive_IT+0x50>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d113      	bne.n	800b00a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800afe2:	2300      	movs	r3, #0
 800afe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff8:	b29a      	uxth	r2, r3
 800affa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b002:	1c9a      	adds	r2, r3, #2
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	629a      	str	r2, [r3, #40]	; 0x28
 800b008:	e026      	b.n	800b058 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b010:	2300      	movs	r3, #0
 800b012:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b01c:	d007      	beq.n	800b02e <UART_Receive_IT+0x74>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d10a      	bne.n	800b03c <UART_Receive_IT+0x82>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d106      	bne.n	800b03c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	b2da      	uxtb	r2, r3
 800b036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b038:	701a      	strb	r2, [r3, #0]
 800b03a:	e008      	b.n	800b04e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b052:	1c5a      	adds	r2, r3, #1
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	3b01      	subs	r3, #1
 800b060:	b29b      	uxth	r3, r3
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	4619      	mov	r1, r3
 800b066:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d15a      	bne.n	800b122 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68da      	ldr	r2, [r3, #12]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f022 0220 	bic.w	r2, r2, #32
 800b07a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68da      	ldr	r2, [r3, #12]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b08a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	695a      	ldr	r2, [r3, #20]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f022 0201 	bic.w	r2, r2, #1
 800b09a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2220      	movs	r2, #32
 800b0a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d135      	bne.n	800b118 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	330c      	adds	r3, #12
 800b0b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	e853 3f00 	ldrex	r3, [r3]
 800b0c0:	613b      	str	r3, [r7, #16]
   return(result);
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	f023 0310 	bic.w	r3, r3, #16
 800b0c8:	627b      	str	r3, [r7, #36]	; 0x24
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	330c      	adds	r3, #12
 800b0d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0d2:	623a      	str	r2, [r7, #32]
 800b0d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d6:	69f9      	ldr	r1, [r7, #28]
 800b0d8:	6a3a      	ldr	r2, [r7, #32]
 800b0da:	e841 2300 	strex	r3, r2, [r1]
 800b0de:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1e5      	bne.n	800b0b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f003 0310 	and.w	r3, r3, #16
 800b0f0:	2b10      	cmp	r3, #16
 800b0f2:	d10a      	bne.n	800b10a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	60fb      	str	r3, [r7, #12]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	60fb      	str	r3, [r7, #12]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	60fb      	str	r3, [r7, #12]
 800b108:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f7ff fdbb 	bl	800ac8c <HAL_UARTEx_RxEventCallback>
 800b116:	e002      	b.n	800b11e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7f9 ff83 	bl	8005024 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	e002      	b.n	800b128 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b122:	2300      	movs	r3, #0
 800b124:	e000      	b.n	800b128 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b126:	2302      	movs	r3, #2
  }
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3730      	adds	r7, #48	; 0x30
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b134:	b0c0      	sub	sp, #256	; 0x100
 800b136:	af00      	add	r7, sp, #0
 800b138:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b14c:	68d9      	ldr	r1, [r3, #12]
 800b14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	ea40 0301 	orr.w	r3, r0, r1
 800b158:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b15a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b15e:	689a      	ldr	r2, [r3, #8]
 800b160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	431a      	orrs	r2, r3
 800b168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b16c:	695b      	ldr	r3, [r3, #20]
 800b16e:	431a      	orrs	r2, r3
 800b170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b174:	69db      	ldr	r3, [r3, #28]
 800b176:	4313      	orrs	r3, r2
 800b178:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b17c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b188:	f021 010c 	bic.w	r1, r1, #12
 800b18c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b196:	430b      	orrs	r3, r1
 800b198:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b19a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	695b      	ldr	r3, [r3, #20]
 800b1a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b1a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1aa:	6999      	ldr	r1, [r3, #24]
 800b1ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	ea40 0301 	orr.w	r3, r0, r1
 800b1b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b1b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	4b8f      	ldr	r3, [pc, #572]	; (800b3fc <UART_SetConfig+0x2cc>)
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d005      	beq.n	800b1d0 <UART_SetConfig+0xa0>
 800b1c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	4b8d      	ldr	r3, [pc, #564]	; (800b400 <UART_SetConfig+0x2d0>)
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d104      	bne.n	800b1da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b1d0:	f7fc fda4 	bl	8007d1c <HAL_RCC_GetPCLK2Freq>
 800b1d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b1d8:	e003      	b.n	800b1e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b1da:	f7fc fd8b 	bl	8007cf4 <HAL_RCC_GetPCLK1Freq>
 800b1de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1e6:	69db      	ldr	r3, [r3, #28]
 800b1e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1ec:	f040 810c 	bne.w	800b408 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b1f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b1fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b1fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b202:	4622      	mov	r2, r4
 800b204:	462b      	mov	r3, r5
 800b206:	1891      	adds	r1, r2, r2
 800b208:	65b9      	str	r1, [r7, #88]	; 0x58
 800b20a:	415b      	adcs	r3, r3
 800b20c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b20e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b212:	4621      	mov	r1, r4
 800b214:	eb12 0801 	adds.w	r8, r2, r1
 800b218:	4629      	mov	r1, r5
 800b21a:	eb43 0901 	adc.w	r9, r3, r1
 800b21e:	f04f 0200 	mov.w	r2, #0
 800b222:	f04f 0300 	mov.w	r3, #0
 800b226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b22a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b22e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b232:	4690      	mov	r8, r2
 800b234:	4699      	mov	r9, r3
 800b236:	4623      	mov	r3, r4
 800b238:	eb18 0303 	adds.w	r3, r8, r3
 800b23c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b240:	462b      	mov	r3, r5
 800b242:	eb49 0303 	adc.w	r3, r9, r3
 800b246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b24a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b256:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b25a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b25e:	460b      	mov	r3, r1
 800b260:	18db      	adds	r3, r3, r3
 800b262:	653b      	str	r3, [r7, #80]	; 0x50
 800b264:	4613      	mov	r3, r2
 800b266:	eb42 0303 	adc.w	r3, r2, r3
 800b26a:	657b      	str	r3, [r7, #84]	; 0x54
 800b26c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b270:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b274:	f7f5 fd08 	bl	8000c88 <__aeabi_uldivmod>
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	4b61      	ldr	r3, [pc, #388]	; (800b404 <UART_SetConfig+0x2d4>)
 800b27e:	fba3 2302 	umull	r2, r3, r3, r2
 800b282:	095b      	lsrs	r3, r3, #5
 800b284:	011c      	lsls	r4, r3, #4
 800b286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b28a:	2200      	movs	r2, #0
 800b28c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b290:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b294:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b298:	4642      	mov	r2, r8
 800b29a:	464b      	mov	r3, r9
 800b29c:	1891      	adds	r1, r2, r2
 800b29e:	64b9      	str	r1, [r7, #72]	; 0x48
 800b2a0:	415b      	adcs	r3, r3
 800b2a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b2a8:	4641      	mov	r1, r8
 800b2aa:	eb12 0a01 	adds.w	sl, r2, r1
 800b2ae:	4649      	mov	r1, r9
 800b2b0:	eb43 0b01 	adc.w	fp, r3, r1
 800b2b4:	f04f 0200 	mov.w	r2, #0
 800b2b8:	f04f 0300 	mov.w	r3, #0
 800b2bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b2c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b2c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b2c8:	4692      	mov	sl, r2
 800b2ca:	469b      	mov	fp, r3
 800b2cc:	4643      	mov	r3, r8
 800b2ce:	eb1a 0303 	adds.w	r3, sl, r3
 800b2d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b2d6:	464b      	mov	r3, r9
 800b2d8:	eb4b 0303 	adc.w	r3, fp, r3
 800b2dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b2e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b2f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	18db      	adds	r3, r3, r3
 800b2f8:	643b      	str	r3, [r7, #64]	; 0x40
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	eb42 0303 	adc.w	r3, r2, r3
 800b300:	647b      	str	r3, [r7, #68]	; 0x44
 800b302:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b306:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b30a:	f7f5 fcbd 	bl	8000c88 <__aeabi_uldivmod>
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	4611      	mov	r1, r2
 800b314:	4b3b      	ldr	r3, [pc, #236]	; (800b404 <UART_SetConfig+0x2d4>)
 800b316:	fba3 2301 	umull	r2, r3, r3, r1
 800b31a:	095b      	lsrs	r3, r3, #5
 800b31c:	2264      	movs	r2, #100	; 0x64
 800b31e:	fb02 f303 	mul.w	r3, r2, r3
 800b322:	1acb      	subs	r3, r1, r3
 800b324:	00db      	lsls	r3, r3, #3
 800b326:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b32a:	4b36      	ldr	r3, [pc, #216]	; (800b404 <UART_SetConfig+0x2d4>)
 800b32c:	fba3 2302 	umull	r2, r3, r3, r2
 800b330:	095b      	lsrs	r3, r3, #5
 800b332:	005b      	lsls	r3, r3, #1
 800b334:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b338:	441c      	add	r4, r3
 800b33a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b33e:	2200      	movs	r2, #0
 800b340:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b344:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b348:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b34c:	4642      	mov	r2, r8
 800b34e:	464b      	mov	r3, r9
 800b350:	1891      	adds	r1, r2, r2
 800b352:	63b9      	str	r1, [r7, #56]	; 0x38
 800b354:	415b      	adcs	r3, r3
 800b356:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b358:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b35c:	4641      	mov	r1, r8
 800b35e:	1851      	adds	r1, r2, r1
 800b360:	6339      	str	r1, [r7, #48]	; 0x30
 800b362:	4649      	mov	r1, r9
 800b364:	414b      	adcs	r3, r1
 800b366:	637b      	str	r3, [r7, #52]	; 0x34
 800b368:	f04f 0200 	mov.w	r2, #0
 800b36c:	f04f 0300 	mov.w	r3, #0
 800b370:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b374:	4659      	mov	r1, fp
 800b376:	00cb      	lsls	r3, r1, #3
 800b378:	4651      	mov	r1, sl
 800b37a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b37e:	4651      	mov	r1, sl
 800b380:	00ca      	lsls	r2, r1, #3
 800b382:	4610      	mov	r0, r2
 800b384:	4619      	mov	r1, r3
 800b386:	4603      	mov	r3, r0
 800b388:	4642      	mov	r2, r8
 800b38a:	189b      	adds	r3, r3, r2
 800b38c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b390:	464b      	mov	r3, r9
 800b392:	460a      	mov	r2, r1
 800b394:	eb42 0303 	adc.w	r3, r2, r3
 800b398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b39c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b3a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b3ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	18db      	adds	r3, r3, r3
 800b3b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	eb42 0303 	adc.w	r3, r2, r3
 800b3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b3c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b3c6:	f7f5 fc5f 	bl	8000c88 <__aeabi_uldivmod>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	4b0d      	ldr	r3, [pc, #52]	; (800b404 <UART_SetConfig+0x2d4>)
 800b3d0:	fba3 1302 	umull	r1, r3, r3, r2
 800b3d4:	095b      	lsrs	r3, r3, #5
 800b3d6:	2164      	movs	r1, #100	; 0x64
 800b3d8:	fb01 f303 	mul.w	r3, r1, r3
 800b3dc:	1ad3      	subs	r3, r2, r3
 800b3de:	00db      	lsls	r3, r3, #3
 800b3e0:	3332      	adds	r3, #50	; 0x32
 800b3e2:	4a08      	ldr	r2, [pc, #32]	; (800b404 <UART_SetConfig+0x2d4>)
 800b3e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e8:	095b      	lsrs	r3, r3, #5
 800b3ea:	f003 0207 	and.w	r2, r3, #7
 800b3ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4422      	add	r2, r4
 800b3f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b3f8:	e105      	b.n	800b606 <UART_SetConfig+0x4d6>
 800b3fa:	bf00      	nop
 800b3fc:	40011000 	.word	0x40011000
 800b400:	40011400 	.word	0x40011400
 800b404:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b40c:	2200      	movs	r2, #0
 800b40e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b412:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b416:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b41a:	4642      	mov	r2, r8
 800b41c:	464b      	mov	r3, r9
 800b41e:	1891      	adds	r1, r2, r2
 800b420:	6239      	str	r1, [r7, #32]
 800b422:	415b      	adcs	r3, r3
 800b424:	627b      	str	r3, [r7, #36]	; 0x24
 800b426:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b42a:	4641      	mov	r1, r8
 800b42c:	1854      	adds	r4, r2, r1
 800b42e:	4649      	mov	r1, r9
 800b430:	eb43 0501 	adc.w	r5, r3, r1
 800b434:	f04f 0200 	mov.w	r2, #0
 800b438:	f04f 0300 	mov.w	r3, #0
 800b43c:	00eb      	lsls	r3, r5, #3
 800b43e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b442:	00e2      	lsls	r2, r4, #3
 800b444:	4614      	mov	r4, r2
 800b446:	461d      	mov	r5, r3
 800b448:	4643      	mov	r3, r8
 800b44a:	18e3      	adds	r3, r4, r3
 800b44c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b450:	464b      	mov	r3, r9
 800b452:	eb45 0303 	adc.w	r3, r5, r3
 800b456:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b45a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b466:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b46a:	f04f 0200 	mov.w	r2, #0
 800b46e:	f04f 0300 	mov.w	r3, #0
 800b472:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b476:	4629      	mov	r1, r5
 800b478:	008b      	lsls	r3, r1, #2
 800b47a:	4621      	mov	r1, r4
 800b47c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b480:	4621      	mov	r1, r4
 800b482:	008a      	lsls	r2, r1, #2
 800b484:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b488:	f7f5 fbfe 	bl	8000c88 <__aeabi_uldivmod>
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	4b60      	ldr	r3, [pc, #384]	; (800b614 <UART_SetConfig+0x4e4>)
 800b492:	fba3 2302 	umull	r2, r3, r3, r2
 800b496:	095b      	lsrs	r3, r3, #5
 800b498:	011c      	lsls	r4, r3, #4
 800b49a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b4a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b4a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b4ac:	4642      	mov	r2, r8
 800b4ae:	464b      	mov	r3, r9
 800b4b0:	1891      	adds	r1, r2, r2
 800b4b2:	61b9      	str	r1, [r7, #24]
 800b4b4:	415b      	adcs	r3, r3
 800b4b6:	61fb      	str	r3, [r7, #28]
 800b4b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b4bc:	4641      	mov	r1, r8
 800b4be:	1851      	adds	r1, r2, r1
 800b4c0:	6139      	str	r1, [r7, #16]
 800b4c2:	4649      	mov	r1, r9
 800b4c4:	414b      	adcs	r3, r1
 800b4c6:	617b      	str	r3, [r7, #20]
 800b4c8:	f04f 0200 	mov.w	r2, #0
 800b4cc:	f04f 0300 	mov.w	r3, #0
 800b4d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b4d4:	4659      	mov	r1, fp
 800b4d6:	00cb      	lsls	r3, r1, #3
 800b4d8:	4651      	mov	r1, sl
 800b4da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4de:	4651      	mov	r1, sl
 800b4e0:	00ca      	lsls	r2, r1, #3
 800b4e2:	4610      	mov	r0, r2
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	4642      	mov	r2, r8
 800b4ea:	189b      	adds	r3, r3, r2
 800b4ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b4f0:	464b      	mov	r3, r9
 800b4f2:	460a      	mov	r2, r1
 800b4f4:	eb42 0303 	adc.w	r3, r2, r3
 800b4f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	67bb      	str	r3, [r7, #120]	; 0x78
 800b506:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b508:	f04f 0200 	mov.w	r2, #0
 800b50c:	f04f 0300 	mov.w	r3, #0
 800b510:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b514:	4649      	mov	r1, r9
 800b516:	008b      	lsls	r3, r1, #2
 800b518:	4641      	mov	r1, r8
 800b51a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b51e:	4641      	mov	r1, r8
 800b520:	008a      	lsls	r2, r1, #2
 800b522:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b526:	f7f5 fbaf 	bl	8000c88 <__aeabi_uldivmod>
 800b52a:	4602      	mov	r2, r0
 800b52c:	460b      	mov	r3, r1
 800b52e:	4b39      	ldr	r3, [pc, #228]	; (800b614 <UART_SetConfig+0x4e4>)
 800b530:	fba3 1302 	umull	r1, r3, r3, r2
 800b534:	095b      	lsrs	r3, r3, #5
 800b536:	2164      	movs	r1, #100	; 0x64
 800b538:	fb01 f303 	mul.w	r3, r1, r3
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	011b      	lsls	r3, r3, #4
 800b540:	3332      	adds	r3, #50	; 0x32
 800b542:	4a34      	ldr	r2, [pc, #208]	; (800b614 <UART_SetConfig+0x4e4>)
 800b544:	fba2 2303 	umull	r2, r3, r2, r3
 800b548:	095b      	lsrs	r3, r3, #5
 800b54a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b54e:	441c      	add	r4, r3
 800b550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b554:	2200      	movs	r2, #0
 800b556:	673b      	str	r3, [r7, #112]	; 0x70
 800b558:	677a      	str	r2, [r7, #116]	; 0x74
 800b55a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b55e:	4642      	mov	r2, r8
 800b560:	464b      	mov	r3, r9
 800b562:	1891      	adds	r1, r2, r2
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	415b      	adcs	r3, r3
 800b568:	60fb      	str	r3, [r7, #12]
 800b56a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b56e:	4641      	mov	r1, r8
 800b570:	1851      	adds	r1, r2, r1
 800b572:	6039      	str	r1, [r7, #0]
 800b574:	4649      	mov	r1, r9
 800b576:	414b      	adcs	r3, r1
 800b578:	607b      	str	r3, [r7, #4]
 800b57a:	f04f 0200 	mov.w	r2, #0
 800b57e:	f04f 0300 	mov.w	r3, #0
 800b582:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b586:	4659      	mov	r1, fp
 800b588:	00cb      	lsls	r3, r1, #3
 800b58a:	4651      	mov	r1, sl
 800b58c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b590:	4651      	mov	r1, sl
 800b592:	00ca      	lsls	r2, r1, #3
 800b594:	4610      	mov	r0, r2
 800b596:	4619      	mov	r1, r3
 800b598:	4603      	mov	r3, r0
 800b59a:	4642      	mov	r2, r8
 800b59c:	189b      	adds	r3, r3, r2
 800b59e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5a0:	464b      	mov	r3, r9
 800b5a2:	460a      	mov	r2, r1
 800b5a4:	eb42 0303 	adc.w	r3, r2, r3
 800b5a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b5aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	663b      	str	r3, [r7, #96]	; 0x60
 800b5b4:	667a      	str	r2, [r7, #100]	; 0x64
 800b5b6:	f04f 0200 	mov.w	r2, #0
 800b5ba:	f04f 0300 	mov.w	r3, #0
 800b5be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b5c2:	4649      	mov	r1, r9
 800b5c4:	008b      	lsls	r3, r1, #2
 800b5c6:	4641      	mov	r1, r8
 800b5c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5cc:	4641      	mov	r1, r8
 800b5ce:	008a      	lsls	r2, r1, #2
 800b5d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b5d4:	f7f5 fb58 	bl	8000c88 <__aeabi_uldivmod>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	460b      	mov	r3, r1
 800b5dc:	4b0d      	ldr	r3, [pc, #52]	; (800b614 <UART_SetConfig+0x4e4>)
 800b5de:	fba3 1302 	umull	r1, r3, r3, r2
 800b5e2:	095b      	lsrs	r3, r3, #5
 800b5e4:	2164      	movs	r1, #100	; 0x64
 800b5e6:	fb01 f303 	mul.w	r3, r1, r3
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	011b      	lsls	r3, r3, #4
 800b5ee:	3332      	adds	r3, #50	; 0x32
 800b5f0:	4a08      	ldr	r2, [pc, #32]	; (800b614 <UART_SetConfig+0x4e4>)
 800b5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5f6:	095b      	lsrs	r3, r3, #5
 800b5f8:	f003 020f 	and.w	r2, r3, #15
 800b5fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4422      	add	r2, r4
 800b604:	609a      	str	r2, [r3, #8]
}
 800b606:	bf00      	nop
 800b608:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b60c:	46bd      	mov	sp, r7
 800b60e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b612:	bf00      	nop
 800b614:	51eb851f 	.word	0x51eb851f

0800b618 <__errno>:
 800b618:	4b01      	ldr	r3, [pc, #4]	; (800b620 <__errno+0x8>)
 800b61a:	6818      	ldr	r0, [r3, #0]
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	20000084 	.word	0x20000084

0800b624 <__libc_init_array>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	4d0d      	ldr	r5, [pc, #52]	; (800b65c <__libc_init_array+0x38>)
 800b628:	4c0d      	ldr	r4, [pc, #52]	; (800b660 <__libc_init_array+0x3c>)
 800b62a:	1b64      	subs	r4, r4, r5
 800b62c:	10a4      	asrs	r4, r4, #2
 800b62e:	2600      	movs	r6, #0
 800b630:	42a6      	cmp	r6, r4
 800b632:	d109      	bne.n	800b648 <__libc_init_array+0x24>
 800b634:	4d0b      	ldr	r5, [pc, #44]	; (800b664 <__libc_init_array+0x40>)
 800b636:	4c0c      	ldr	r4, [pc, #48]	; (800b668 <__libc_init_array+0x44>)
 800b638:	f004 f950 	bl	800f8dc <_init>
 800b63c:	1b64      	subs	r4, r4, r5
 800b63e:	10a4      	asrs	r4, r4, #2
 800b640:	2600      	movs	r6, #0
 800b642:	42a6      	cmp	r6, r4
 800b644:	d105      	bne.n	800b652 <__libc_init_array+0x2e>
 800b646:	bd70      	pop	{r4, r5, r6, pc}
 800b648:	f855 3b04 	ldr.w	r3, [r5], #4
 800b64c:	4798      	blx	r3
 800b64e:	3601      	adds	r6, #1
 800b650:	e7ee      	b.n	800b630 <__libc_init_array+0xc>
 800b652:	f855 3b04 	ldr.w	r3, [r5], #4
 800b656:	4798      	blx	r3
 800b658:	3601      	adds	r6, #1
 800b65a:	e7f2      	b.n	800b642 <__libc_init_array+0x1e>
 800b65c:	08010050 	.word	0x08010050
 800b660:	08010050 	.word	0x08010050
 800b664:	08010050 	.word	0x08010050
 800b668:	08010054 	.word	0x08010054

0800b66c <memset>:
 800b66c:	4402      	add	r2, r0
 800b66e:	4603      	mov	r3, r0
 800b670:	4293      	cmp	r3, r2
 800b672:	d100      	bne.n	800b676 <memset+0xa>
 800b674:	4770      	bx	lr
 800b676:	f803 1b01 	strb.w	r1, [r3], #1
 800b67a:	e7f9      	b.n	800b670 <memset+0x4>

0800b67c <__cvt>:
 800b67c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b680:	ec55 4b10 	vmov	r4, r5, d0
 800b684:	2d00      	cmp	r5, #0
 800b686:	460e      	mov	r6, r1
 800b688:	4619      	mov	r1, r3
 800b68a:	462b      	mov	r3, r5
 800b68c:	bfbb      	ittet	lt
 800b68e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b692:	461d      	movlt	r5, r3
 800b694:	2300      	movge	r3, #0
 800b696:	232d      	movlt	r3, #45	; 0x2d
 800b698:	700b      	strb	r3, [r1, #0]
 800b69a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b69c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b6a0:	4691      	mov	r9, r2
 800b6a2:	f023 0820 	bic.w	r8, r3, #32
 800b6a6:	bfbc      	itt	lt
 800b6a8:	4622      	movlt	r2, r4
 800b6aa:	4614      	movlt	r4, r2
 800b6ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6b0:	d005      	beq.n	800b6be <__cvt+0x42>
 800b6b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b6b6:	d100      	bne.n	800b6ba <__cvt+0x3e>
 800b6b8:	3601      	adds	r6, #1
 800b6ba:	2102      	movs	r1, #2
 800b6bc:	e000      	b.n	800b6c0 <__cvt+0x44>
 800b6be:	2103      	movs	r1, #3
 800b6c0:	ab03      	add	r3, sp, #12
 800b6c2:	9301      	str	r3, [sp, #4]
 800b6c4:	ab02      	add	r3, sp, #8
 800b6c6:	9300      	str	r3, [sp, #0]
 800b6c8:	ec45 4b10 	vmov	d0, r4, r5
 800b6cc:	4653      	mov	r3, sl
 800b6ce:	4632      	mov	r2, r6
 800b6d0:	f000 fcea 	bl	800c0a8 <_dtoa_r>
 800b6d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b6d8:	4607      	mov	r7, r0
 800b6da:	d102      	bne.n	800b6e2 <__cvt+0x66>
 800b6dc:	f019 0f01 	tst.w	r9, #1
 800b6e0:	d022      	beq.n	800b728 <__cvt+0xac>
 800b6e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6e6:	eb07 0906 	add.w	r9, r7, r6
 800b6ea:	d110      	bne.n	800b70e <__cvt+0x92>
 800b6ec:	783b      	ldrb	r3, [r7, #0]
 800b6ee:	2b30      	cmp	r3, #48	; 0x30
 800b6f0:	d10a      	bne.n	800b708 <__cvt+0x8c>
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	4629      	mov	r1, r5
 800b6fa:	f7f5 fa05 	bl	8000b08 <__aeabi_dcmpeq>
 800b6fe:	b918      	cbnz	r0, 800b708 <__cvt+0x8c>
 800b700:	f1c6 0601 	rsb	r6, r6, #1
 800b704:	f8ca 6000 	str.w	r6, [sl]
 800b708:	f8da 3000 	ldr.w	r3, [sl]
 800b70c:	4499      	add	r9, r3
 800b70e:	2200      	movs	r2, #0
 800b710:	2300      	movs	r3, #0
 800b712:	4620      	mov	r0, r4
 800b714:	4629      	mov	r1, r5
 800b716:	f7f5 f9f7 	bl	8000b08 <__aeabi_dcmpeq>
 800b71a:	b108      	cbz	r0, 800b720 <__cvt+0xa4>
 800b71c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b720:	2230      	movs	r2, #48	; 0x30
 800b722:	9b03      	ldr	r3, [sp, #12]
 800b724:	454b      	cmp	r3, r9
 800b726:	d307      	bcc.n	800b738 <__cvt+0xbc>
 800b728:	9b03      	ldr	r3, [sp, #12]
 800b72a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b72c:	1bdb      	subs	r3, r3, r7
 800b72e:	4638      	mov	r0, r7
 800b730:	6013      	str	r3, [r2, #0]
 800b732:	b004      	add	sp, #16
 800b734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b738:	1c59      	adds	r1, r3, #1
 800b73a:	9103      	str	r1, [sp, #12]
 800b73c:	701a      	strb	r2, [r3, #0]
 800b73e:	e7f0      	b.n	800b722 <__cvt+0xa6>

0800b740 <__exponent>:
 800b740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b742:	4603      	mov	r3, r0
 800b744:	2900      	cmp	r1, #0
 800b746:	bfb8      	it	lt
 800b748:	4249      	neglt	r1, r1
 800b74a:	f803 2b02 	strb.w	r2, [r3], #2
 800b74e:	bfb4      	ite	lt
 800b750:	222d      	movlt	r2, #45	; 0x2d
 800b752:	222b      	movge	r2, #43	; 0x2b
 800b754:	2909      	cmp	r1, #9
 800b756:	7042      	strb	r2, [r0, #1]
 800b758:	dd2a      	ble.n	800b7b0 <__exponent+0x70>
 800b75a:	f10d 0407 	add.w	r4, sp, #7
 800b75e:	46a4      	mov	ip, r4
 800b760:	270a      	movs	r7, #10
 800b762:	46a6      	mov	lr, r4
 800b764:	460a      	mov	r2, r1
 800b766:	fb91 f6f7 	sdiv	r6, r1, r7
 800b76a:	fb07 1516 	mls	r5, r7, r6, r1
 800b76e:	3530      	adds	r5, #48	; 0x30
 800b770:	2a63      	cmp	r2, #99	; 0x63
 800b772:	f104 34ff 	add.w	r4, r4, #4294967295
 800b776:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b77a:	4631      	mov	r1, r6
 800b77c:	dcf1      	bgt.n	800b762 <__exponent+0x22>
 800b77e:	3130      	adds	r1, #48	; 0x30
 800b780:	f1ae 0502 	sub.w	r5, lr, #2
 800b784:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b788:	1c44      	adds	r4, r0, #1
 800b78a:	4629      	mov	r1, r5
 800b78c:	4561      	cmp	r1, ip
 800b78e:	d30a      	bcc.n	800b7a6 <__exponent+0x66>
 800b790:	f10d 0209 	add.w	r2, sp, #9
 800b794:	eba2 020e 	sub.w	r2, r2, lr
 800b798:	4565      	cmp	r5, ip
 800b79a:	bf88      	it	hi
 800b79c:	2200      	movhi	r2, #0
 800b79e:	4413      	add	r3, r2
 800b7a0:	1a18      	subs	r0, r3, r0
 800b7a2:	b003      	add	sp, #12
 800b7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b7ae:	e7ed      	b.n	800b78c <__exponent+0x4c>
 800b7b0:	2330      	movs	r3, #48	; 0x30
 800b7b2:	3130      	adds	r1, #48	; 0x30
 800b7b4:	7083      	strb	r3, [r0, #2]
 800b7b6:	70c1      	strb	r1, [r0, #3]
 800b7b8:	1d03      	adds	r3, r0, #4
 800b7ba:	e7f1      	b.n	800b7a0 <__exponent+0x60>

0800b7bc <_printf_float>:
 800b7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c0:	ed2d 8b02 	vpush	{d8}
 800b7c4:	b08d      	sub	sp, #52	; 0x34
 800b7c6:	460c      	mov	r4, r1
 800b7c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b7cc:	4616      	mov	r6, r2
 800b7ce:	461f      	mov	r7, r3
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	f001 fa57 	bl	800cc84 <_localeconv_r>
 800b7d6:	f8d0 a000 	ldr.w	sl, [r0]
 800b7da:	4650      	mov	r0, sl
 800b7dc:	f7f4 fd18 	bl	8000210 <strlen>
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	930a      	str	r3, [sp, #40]	; 0x28
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	9305      	str	r3, [sp, #20]
 800b7e8:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b7f0:	3307      	adds	r3, #7
 800b7f2:	f023 0307 	bic.w	r3, r3, #7
 800b7f6:	f103 0208 	add.w	r2, r3, #8
 800b7fa:	f8c8 2000 	str.w	r2, [r8]
 800b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b802:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b806:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b80a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b80e:	9307      	str	r3, [sp, #28]
 800b810:	f8cd 8018 	str.w	r8, [sp, #24]
 800b814:	ee08 0a10 	vmov	s16, r0
 800b818:	4b9f      	ldr	r3, [pc, #636]	; (800ba98 <_printf_float+0x2dc>)
 800b81a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b81e:	f04f 32ff 	mov.w	r2, #4294967295
 800b822:	f7f5 f9a3 	bl	8000b6c <__aeabi_dcmpun>
 800b826:	bb88      	cbnz	r0, 800b88c <_printf_float+0xd0>
 800b828:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b82c:	4b9a      	ldr	r3, [pc, #616]	; (800ba98 <_printf_float+0x2dc>)
 800b82e:	f04f 32ff 	mov.w	r2, #4294967295
 800b832:	f7f5 f97d 	bl	8000b30 <__aeabi_dcmple>
 800b836:	bb48      	cbnz	r0, 800b88c <_printf_float+0xd0>
 800b838:	2200      	movs	r2, #0
 800b83a:	2300      	movs	r3, #0
 800b83c:	4640      	mov	r0, r8
 800b83e:	4649      	mov	r1, r9
 800b840:	f7f5 f96c 	bl	8000b1c <__aeabi_dcmplt>
 800b844:	b110      	cbz	r0, 800b84c <_printf_float+0x90>
 800b846:	232d      	movs	r3, #45	; 0x2d
 800b848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b84c:	4b93      	ldr	r3, [pc, #588]	; (800ba9c <_printf_float+0x2e0>)
 800b84e:	4894      	ldr	r0, [pc, #592]	; (800baa0 <_printf_float+0x2e4>)
 800b850:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b854:	bf94      	ite	ls
 800b856:	4698      	movls	r8, r3
 800b858:	4680      	movhi	r8, r0
 800b85a:	2303      	movs	r3, #3
 800b85c:	6123      	str	r3, [r4, #16]
 800b85e:	9b05      	ldr	r3, [sp, #20]
 800b860:	f023 0204 	bic.w	r2, r3, #4
 800b864:	6022      	str	r2, [r4, #0]
 800b866:	f04f 0900 	mov.w	r9, #0
 800b86a:	9700      	str	r7, [sp, #0]
 800b86c:	4633      	mov	r3, r6
 800b86e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b870:	4621      	mov	r1, r4
 800b872:	4628      	mov	r0, r5
 800b874:	f000 f9d8 	bl	800bc28 <_printf_common>
 800b878:	3001      	adds	r0, #1
 800b87a:	f040 8090 	bne.w	800b99e <_printf_float+0x1e2>
 800b87e:	f04f 30ff 	mov.w	r0, #4294967295
 800b882:	b00d      	add	sp, #52	; 0x34
 800b884:	ecbd 8b02 	vpop	{d8}
 800b888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b88c:	4642      	mov	r2, r8
 800b88e:	464b      	mov	r3, r9
 800b890:	4640      	mov	r0, r8
 800b892:	4649      	mov	r1, r9
 800b894:	f7f5 f96a 	bl	8000b6c <__aeabi_dcmpun>
 800b898:	b140      	cbz	r0, 800b8ac <_printf_float+0xf0>
 800b89a:	464b      	mov	r3, r9
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	bfbc      	itt	lt
 800b8a0:	232d      	movlt	r3, #45	; 0x2d
 800b8a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b8a6:	487f      	ldr	r0, [pc, #508]	; (800baa4 <_printf_float+0x2e8>)
 800b8a8:	4b7f      	ldr	r3, [pc, #508]	; (800baa8 <_printf_float+0x2ec>)
 800b8aa:	e7d1      	b.n	800b850 <_printf_float+0x94>
 800b8ac:	6863      	ldr	r3, [r4, #4]
 800b8ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b8b2:	9206      	str	r2, [sp, #24]
 800b8b4:	1c5a      	adds	r2, r3, #1
 800b8b6:	d13f      	bne.n	800b938 <_printf_float+0x17c>
 800b8b8:	2306      	movs	r3, #6
 800b8ba:	6063      	str	r3, [r4, #4]
 800b8bc:	9b05      	ldr	r3, [sp, #20]
 800b8be:	6861      	ldr	r1, [r4, #4]
 800b8c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	9303      	str	r3, [sp, #12]
 800b8c8:	ab0a      	add	r3, sp, #40	; 0x28
 800b8ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b8ce:	ab09      	add	r3, sp, #36	; 0x24
 800b8d0:	ec49 8b10 	vmov	d0, r8, r9
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	6022      	str	r2, [r4, #0]
 800b8d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b8dc:	4628      	mov	r0, r5
 800b8de:	f7ff fecd 	bl	800b67c <__cvt>
 800b8e2:	9b06      	ldr	r3, [sp, #24]
 800b8e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8e6:	2b47      	cmp	r3, #71	; 0x47
 800b8e8:	4680      	mov	r8, r0
 800b8ea:	d108      	bne.n	800b8fe <_printf_float+0x142>
 800b8ec:	1cc8      	adds	r0, r1, #3
 800b8ee:	db02      	blt.n	800b8f6 <_printf_float+0x13a>
 800b8f0:	6863      	ldr	r3, [r4, #4]
 800b8f2:	4299      	cmp	r1, r3
 800b8f4:	dd41      	ble.n	800b97a <_printf_float+0x1be>
 800b8f6:	f1ab 0b02 	sub.w	fp, fp, #2
 800b8fa:	fa5f fb8b 	uxtb.w	fp, fp
 800b8fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b902:	d820      	bhi.n	800b946 <_printf_float+0x18a>
 800b904:	3901      	subs	r1, #1
 800b906:	465a      	mov	r2, fp
 800b908:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b90c:	9109      	str	r1, [sp, #36]	; 0x24
 800b90e:	f7ff ff17 	bl	800b740 <__exponent>
 800b912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b914:	1813      	adds	r3, r2, r0
 800b916:	2a01      	cmp	r2, #1
 800b918:	4681      	mov	r9, r0
 800b91a:	6123      	str	r3, [r4, #16]
 800b91c:	dc02      	bgt.n	800b924 <_printf_float+0x168>
 800b91e:	6822      	ldr	r2, [r4, #0]
 800b920:	07d2      	lsls	r2, r2, #31
 800b922:	d501      	bpl.n	800b928 <_printf_float+0x16c>
 800b924:	3301      	adds	r3, #1
 800b926:	6123      	str	r3, [r4, #16]
 800b928:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d09c      	beq.n	800b86a <_printf_float+0xae>
 800b930:	232d      	movs	r3, #45	; 0x2d
 800b932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b936:	e798      	b.n	800b86a <_printf_float+0xae>
 800b938:	9a06      	ldr	r2, [sp, #24]
 800b93a:	2a47      	cmp	r2, #71	; 0x47
 800b93c:	d1be      	bne.n	800b8bc <_printf_float+0x100>
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1bc      	bne.n	800b8bc <_printf_float+0x100>
 800b942:	2301      	movs	r3, #1
 800b944:	e7b9      	b.n	800b8ba <_printf_float+0xfe>
 800b946:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b94a:	d118      	bne.n	800b97e <_printf_float+0x1c2>
 800b94c:	2900      	cmp	r1, #0
 800b94e:	6863      	ldr	r3, [r4, #4]
 800b950:	dd0b      	ble.n	800b96a <_printf_float+0x1ae>
 800b952:	6121      	str	r1, [r4, #16]
 800b954:	b913      	cbnz	r3, 800b95c <_printf_float+0x1a0>
 800b956:	6822      	ldr	r2, [r4, #0]
 800b958:	07d0      	lsls	r0, r2, #31
 800b95a:	d502      	bpl.n	800b962 <_printf_float+0x1a6>
 800b95c:	3301      	adds	r3, #1
 800b95e:	440b      	add	r3, r1
 800b960:	6123      	str	r3, [r4, #16]
 800b962:	65a1      	str	r1, [r4, #88]	; 0x58
 800b964:	f04f 0900 	mov.w	r9, #0
 800b968:	e7de      	b.n	800b928 <_printf_float+0x16c>
 800b96a:	b913      	cbnz	r3, 800b972 <_printf_float+0x1b6>
 800b96c:	6822      	ldr	r2, [r4, #0]
 800b96e:	07d2      	lsls	r2, r2, #31
 800b970:	d501      	bpl.n	800b976 <_printf_float+0x1ba>
 800b972:	3302      	adds	r3, #2
 800b974:	e7f4      	b.n	800b960 <_printf_float+0x1a4>
 800b976:	2301      	movs	r3, #1
 800b978:	e7f2      	b.n	800b960 <_printf_float+0x1a4>
 800b97a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b980:	4299      	cmp	r1, r3
 800b982:	db05      	blt.n	800b990 <_printf_float+0x1d4>
 800b984:	6823      	ldr	r3, [r4, #0]
 800b986:	6121      	str	r1, [r4, #16]
 800b988:	07d8      	lsls	r0, r3, #31
 800b98a:	d5ea      	bpl.n	800b962 <_printf_float+0x1a6>
 800b98c:	1c4b      	adds	r3, r1, #1
 800b98e:	e7e7      	b.n	800b960 <_printf_float+0x1a4>
 800b990:	2900      	cmp	r1, #0
 800b992:	bfd4      	ite	le
 800b994:	f1c1 0202 	rsble	r2, r1, #2
 800b998:	2201      	movgt	r2, #1
 800b99a:	4413      	add	r3, r2
 800b99c:	e7e0      	b.n	800b960 <_printf_float+0x1a4>
 800b99e:	6823      	ldr	r3, [r4, #0]
 800b9a0:	055a      	lsls	r2, r3, #21
 800b9a2:	d407      	bmi.n	800b9b4 <_printf_float+0x1f8>
 800b9a4:	6923      	ldr	r3, [r4, #16]
 800b9a6:	4642      	mov	r2, r8
 800b9a8:	4631      	mov	r1, r6
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	47b8      	blx	r7
 800b9ae:	3001      	adds	r0, #1
 800b9b0:	d12c      	bne.n	800ba0c <_printf_float+0x250>
 800b9b2:	e764      	b.n	800b87e <_printf_float+0xc2>
 800b9b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b9b8:	f240 80e0 	bls.w	800bb7c <_printf_float+0x3c0>
 800b9bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	f7f5 f8a0 	bl	8000b08 <__aeabi_dcmpeq>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d034      	beq.n	800ba36 <_printf_float+0x27a>
 800b9cc:	4a37      	ldr	r2, [pc, #220]	; (800baac <_printf_float+0x2f0>)
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	4631      	mov	r1, r6
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	47b8      	blx	r7
 800b9d6:	3001      	adds	r0, #1
 800b9d8:	f43f af51 	beq.w	800b87e <_printf_float+0xc2>
 800b9dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	db02      	blt.n	800b9ea <_printf_float+0x22e>
 800b9e4:	6823      	ldr	r3, [r4, #0]
 800b9e6:	07d8      	lsls	r0, r3, #31
 800b9e8:	d510      	bpl.n	800ba0c <_printf_float+0x250>
 800b9ea:	ee18 3a10 	vmov	r3, s16
 800b9ee:	4652      	mov	r2, sl
 800b9f0:	4631      	mov	r1, r6
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	47b8      	blx	r7
 800b9f6:	3001      	adds	r0, #1
 800b9f8:	f43f af41 	beq.w	800b87e <_printf_float+0xc2>
 800b9fc:	f04f 0800 	mov.w	r8, #0
 800ba00:	f104 091a 	add.w	r9, r4, #26
 800ba04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba06:	3b01      	subs	r3, #1
 800ba08:	4543      	cmp	r3, r8
 800ba0a:	dc09      	bgt.n	800ba20 <_printf_float+0x264>
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	079b      	lsls	r3, r3, #30
 800ba10:	f100 8105 	bmi.w	800bc1e <_printf_float+0x462>
 800ba14:	68e0      	ldr	r0, [r4, #12]
 800ba16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba18:	4298      	cmp	r0, r3
 800ba1a:	bfb8      	it	lt
 800ba1c:	4618      	movlt	r0, r3
 800ba1e:	e730      	b.n	800b882 <_printf_float+0xc6>
 800ba20:	2301      	movs	r3, #1
 800ba22:	464a      	mov	r2, r9
 800ba24:	4631      	mov	r1, r6
 800ba26:	4628      	mov	r0, r5
 800ba28:	47b8      	blx	r7
 800ba2a:	3001      	adds	r0, #1
 800ba2c:	f43f af27 	beq.w	800b87e <_printf_float+0xc2>
 800ba30:	f108 0801 	add.w	r8, r8, #1
 800ba34:	e7e6      	b.n	800ba04 <_printf_float+0x248>
 800ba36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	dc39      	bgt.n	800bab0 <_printf_float+0x2f4>
 800ba3c:	4a1b      	ldr	r2, [pc, #108]	; (800baac <_printf_float+0x2f0>)
 800ba3e:	2301      	movs	r3, #1
 800ba40:	4631      	mov	r1, r6
 800ba42:	4628      	mov	r0, r5
 800ba44:	47b8      	blx	r7
 800ba46:	3001      	adds	r0, #1
 800ba48:	f43f af19 	beq.w	800b87e <_printf_float+0xc2>
 800ba4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba50:	4313      	orrs	r3, r2
 800ba52:	d102      	bne.n	800ba5a <_printf_float+0x29e>
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	07d9      	lsls	r1, r3, #31
 800ba58:	d5d8      	bpl.n	800ba0c <_printf_float+0x250>
 800ba5a:	ee18 3a10 	vmov	r3, s16
 800ba5e:	4652      	mov	r2, sl
 800ba60:	4631      	mov	r1, r6
 800ba62:	4628      	mov	r0, r5
 800ba64:	47b8      	blx	r7
 800ba66:	3001      	adds	r0, #1
 800ba68:	f43f af09 	beq.w	800b87e <_printf_float+0xc2>
 800ba6c:	f04f 0900 	mov.w	r9, #0
 800ba70:	f104 0a1a 	add.w	sl, r4, #26
 800ba74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba76:	425b      	negs	r3, r3
 800ba78:	454b      	cmp	r3, r9
 800ba7a:	dc01      	bgt.n	800ba80 <_printf_float+0x2c4>
 800ba7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba7e:	e792      	b.n	800b9a6 <_printf_float+0x1ea>
 800ba80:	2301      	movs	r3, #1
 800ba82:	4652      	mov	r2, sl
 800ba84:	4631      	mov	r1, r6
 800ba86:	4628      	mov	r0, r5
 800ba88:	47b8      	blx	r7
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	f43f aef7 	beq.w	800b87e <_printf_float+0xc2>
 800ba90:	f109 0901 	add.w	r9, r9, #1
 800ba94:	e7ee      	b.n	800ba74 <_printf_float+0x2b8>
 800ba96:	bf00      	nop
 800ba98:	7fefffff 	.word	0x7fefffff
 800ba9c:	0800fa54 	.word	0x0800fa54
 800baa0:	0800fa58 	.word	0x0800fa58
 800baa4:	0800fa60 	.word	0x0800fa60
 800baa8:	0800fa5c 	.word	0x0800fa5c
 800baac:	0800fa64 	.word	0x0800fa64
 800bab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bab2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bab4:	429a      	cmp	r2, r3
 800bab6:	bfa8      	it	ge
 800bab8:	461a      	movge	r2, r3
 800baba:	2a00      	cmp	r2, #0
 800babc:	4691      	mov	r9, r2
 800babe:	dc37      	bgt.n	800bb30 <_printf_float+0x374>
 800bac0:	f04f 0b00 	mov.w	fp, #0
 800bac4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bac8:	f104 021a 	add.w	r2, r4, #26
 800bacc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bace:	9305      	str	r3, [sp, #20]
 800bad0:	eba3 0309 	sub.w	r3, r3, r9
 800bad4:	455b      	cmp	r3, fp
 800bad6:	dc33      	bgt.n	800bb40 <_printf_float+0x384>
 800bad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800badc:	429a      	cmp	r2, r3
 800bade:	db3b      	blt.n	800bb58 <_printf_float+0x39c>
 800bae0:	6823      	ldr	r3, [r4, #0]
 800bae2:	07da      	lsls	r2, r3, #31
 800bae4:	d438      	bmi.n	800bb58 <_printf_float+0x39c>
 800bae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bae8:	9a05      	ldr	r2, [sp, #20]
 800baea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800baec:	1a9a      	subs	r2, r3, r2
 800baee:	eba3 0901 	sub.w	r9, r3, r1
 800baf2:	4591      	cmp	r9, r2
 800baf4:	bfa8      	it	ge
 800baf6:	4691      	movge	r9, r2
 800baf8:	f1b9 0f00 	cmp.w	r9, #0
 800bafc:	dc35      	bgt.n	800bb6a <_printf_float+0x3ae>
 800bafe:	f04f 0800 	mov.w	r8, #0
 800bb02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb06:	f104 0a1a 	add.w	sl, r4, #26
 800bb0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb0e:	1a9b      	subs	r3, r3, r2
 800bb10:	eba3 0309 	sub.w	r3, r3, r9
 800bb14:	4543      	cmp	r3, r8
 800bb16:	f77f af79 	ble.w	800ba0c <_printf_float+0x250>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	4652      	mov	r2, sl
 800bb1e:	4631      	mov	r1, r6
 800bb20:	4628      	mov	r0, r5
 800bb22:	47b8      	blx	r7
 800bb24:	3001      	adds	r0, #1
 800bb26:	f43f aeaa 	beq.w	800b87e <_printf_float+0xc2>
 800bb2a:	f108 0801 	add.w	r8, r8, #1
 800bb2e:	e7ec      	b.n	800bb0a <_printf_float+0x34e>
 800bb30:	4613      	mov	r3, r2
 800bb32:	4631      	mov	r1, r6
 800bb34:	4642      	mov	r2, r8
 800bb36:	4628      	mov	r0, r5
 800bb38:	47b8      	blx	r7
 800bb3a:	3001      	adds	r0, #1
 800bb3c:	d1c0      	bne.n	800bac0 <_printf_float+0x304>
 800bb3e:	e69e      	b.n	800b87e <_printf_float+0xc2>
 800bb40:	2301      	movs	r3, #1
 800bb42:	4631      	mov	r1, r6
 800bb44:	4628      	mov	r0, r5
 800bb46:	9205      	str	r2, [sp, #20]
 800bb48:	47b8      	blx	r7
 800bb4a:	3001      	adds	r0, #1
 800bb4c:	f43f ae97 	beq.w	800b87e <_printf_float+0xc2>
 800bb50:	9a05      	ldr	r2, [sp, #20]
 800bb52:	f10b 0b01 	add.w	fp, fp, #1
 800bb56:	e7b9      	b.n	800bacc <_printf_float+0x310>
 800bb58:	ee18 3a10 	vmov	r3, s16
 800bb5c:	4652      	mov	r2, sl
 800bb5e:	4631      	mov	r1, r6
 800bb60:	4628      	mov	r0, r5
 800bb62:	47b8      	blx	r7
 800bb64:	3001      	adds	r0, #1
 800bb66:	d1be      	bne.n	800bae6 <_printf_float+0x32a>
 800bb68:	e689      	b.n	800b87e <_printf_float+0xc2>
 800bb6a:	9a05      	ldr	r2, [sp, #20]
 800bb6c:	464b      	mov	r3, r9
 800bb6e:	4442      	add	r2, r8
 800bb70:	4631      	mov	r1, r6
 800bb72:	4628      	mov	r0, r5
 800bb74:	47b8      	blx	r7
 800bb76:	3001      	adds	r0, #1
 800bb78:	d1c1      	bne.n	800bafe <_printf_float+0x342>
 800bb7a:	e680      	b.n	800b87e <_printf_float+0xc2>
 800bb7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb7e:	2a01      	cmp	r2, #1
 800bb80:	dc01      	bgt.n	800bb86 <_printf_float+0x3ca>
 800bb82:	07db      	lsls	r3, r3, #31
 800bb84:	d538      	bpl.n	800bbf8 <_printf_float+0x43c>
 800bb86:	2301      	movs	r3, #1
 800bb88:	4642      	mov	r2, r8
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	47b8      	blx	r7
 800bb90:	3001      	adds	r0, #1
 800bb92:	f43f ae74 	beq.w	800b87e <_printf_float+0xc2>
 800bb96:	ee18 3a10 	vmov	r3, s16
 800bb9a:	4652      	mov	r2, sl
 800bb9c:	4631      	mov	r1, r6
 800bb9e:	4628      	mov	r0, r5
 800bba0:	47b8      	blx	r7
 800bba2:	3001      	adds	r0, #1
 800bba4:	f43f ae6b 	beq.w	800b87e <_printf_float+0xc2>
 800bba8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bbac:	2200      	movs	r2, #0
 800bbae:	2300      	movs	r3, #0
 800bbb0:	f7f4 ffaa 	bl	8000b08 <__aeabi_dcmpeq>
 800bbb4:	b9d8      	cbnz	r0, 800bbee <_printf_float+0x432>
 800bbb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbb8:	f108 0201 	add.w	r2, r8, #1
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	4631      	mov	r1, r6
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	47b8      	blx	r7
 800bbc4:	3001      	adds	r0, #1
 800bbc6:	d10e      	bne.n	800bbe6 <_printf_float+0x42a>
 800bbc8:	e659      	b.n	800b87e <_printf_float+0xc2>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	4652      	mov	r2, sl
 800bbce:	4631      	mov	r1, r6
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	47b8      	blx	r7
 800bbd4:	3001      	adds	r0, #1
 800bbd6:	f43f ae52 	beq.w	800b87e <_printf_float+0xc2>
 800bbda:	f108 0801 	add.w	r8, r8, #1
 800bbde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	4543      	cmp	r3, r8
 800bbe4:	dcf1      	bgt.n	800bbca <_printf_float+0x40e>
 800bbe6:	464b      	mov	r3, r9
 800bbe8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bbec:	e6dc      	b.n	800b9a8 <_printf_float+0x1ec>
 800bbee:	f04f 0800 	mov.w	r8, #0
 800bbf2:	f104 0a1a 	add.w	sl, r4, #26
 800bbf6:	e7f2      	b.n	800bbde <_printf_float+0x422>
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	4642      	mov	r2, r8
 800bbfc:	e7df      	b.n	800bbbe <_printf_float+0x402>
 800bbfe:	2301      	movs	r3, #1
 800bc00:	464a      	mov	r2, r9
 800bc02:	4631      	mov	r1, r6
 800bc04:	4628      	mov	r0, r5
 800bc06:	47b8      	blx	r7
 800bc08:	3001      	adds	r0, #1
 800bc0a:	f43f ae38 	beq.w	800b87e <_printf_float+0xc2>
 800bc0e:	f108 0801 	add.w	r8, r8, #1
 800bc12:	68e3      	ldr	r3, [r4, #12]
 800bc14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc16:	1a5b      	subs	r3, r3, r1
 800bc18:	4543      	cmp	r3, r8
 800bc1a:	dcf0      	bgt.n	800bbfe <_printf_float+0x442>
 800bc1c:	e6fa      	b.n	800ba14 <_printf_float+0x258>
 800bc1e:	f04f 0800 	mov.w	r8, #0
 800bc22:	f104 0919 	add.w	r9, r4, #25
 800bc26:	e7f4      	b.n	800bc12 <_printf_float+0x456>

0800bc28 <_printf_common>:
 800bc28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc2c:	4616      	mov	r6, r2
 800bc2e:	4699      	mov	r9, r3
 800bc30:	688a      	ldr	r2, [r1, #8]
 800bc32:	690b      	ldr	r3, [r1, #16]
 800bc34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	bfb8      	it	lt
 800bc3c:	4613      	movlt	r3, r2
 800bc3e:	6033      	str	r3, [r6, #0]
 800bc40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc44:	4607      	mov	r7, r0
 800bc46:	460c      	mov	r4, r1
 800bc48:	b10a      	cbz	r2, 800bc4e <_printf_common+0x26>
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	6033      	str	r3, [r6, #0]
 800bc4e:	6823      	ldr	r3, [r4, #0]
 800bc50:	0699      	lsls	r1, r3, #26
 800bc52:	bf42      	ittt	mi
 800bc54:	6833      	ldrmi	r3, [r6, #0]
 800bc56:	3302      	addmi	r3, #2
 800bc58:	6033      	strmi	r3, [r6, #0]
 800bc5a:	6825      	ldr	r5, [r4, #0]
 800bc5c:	f015 0506 	ands.w	r5, r5, #6
 800bc60:	d106      	bne.n	800bc70 <_printf_common+0x48>
 800bc62:	f104 0a19 	add.w	sl, r4, #25
 800bc66:	68e3      	ldr	r3, [r4, #12]
 800bc68:	6832      	ldr	r2, [r6, #0]
 800bc6a:	1a9b      	subs	r3, r3, r2
 800bc6c:	42ab      	cmp	r3, r5
 800bc6e:	dc26      	bgt.n	800bcbe <_printf_common+0x96>
 800bc70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc74:	1e13      	subs	r3, r2, #0
 800bc76:	6822      	ldr	r2, [r4, #0]
 800bc78:	bf18      	it	ne
 800bc7a:	2301      	movne	r3, #1
 800bc7c:	0692      	lsls	r2, r2, #26
 800bc7e:	d42b      	bmi.n	800bcd8 <_printf_common+0xb0>
 800bc80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc84:	4649      	mov	r1, r9
 800bc86:	4638      	mov	r0, r7
 800bc88:	47c0      	blx	r8
 800bc8a:	3001      	adds	r0, #1
 800bc8c:	d01e      	beq.n	800bccc <_printf_common+0xa4>
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	68e5      	ldr	r5, [r4, #12]
 800bc92:	6832      	ldr	r2, [r6, #0]
 800bc94:	f003 0306 	and.w	r3, r3, #6
 800bc98:	2b04      	cmp	r3, #4
 800bc9a:	bf08      	it	eq
 800bc9c:	1aad      	subeq	r5, r5, r2
 800bc9e:	68a3      	ldr	r3, [r4, #8]
 800bca0:	6922      	ldr	r2, [r4, #16]
 800bca2:	bf0c      	ite	eq
 800bca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bca8:	2500      	movne	r5, #0
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	bfc4      	itt	gt
 800bcae:	1a9b      	subgt	r3, r3, r2
 800bcb0:	18ed      	addgt	r5, r5, r3
 800bcb2:	2600      	movs	r6, #0
 800bcb4:	341a      	adds	r4, #26
 800bcb6:	42b5      	cmp	r5, r6
 800bcb8:	d11a      	bne.n	800bcf0 <_printf_common+0xc8>
 800bcba:	2000      	movs	r0, #0
 800bcbc:	e008      	b.n	800bcd0 <_printf_common+0xa8>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	4652      	mov	r2, sl
 800bcc2:	4649      	mov	r1, r9
 800bcc4:	4638      	mov	r0, r7
 800bcc6:	47c0      	blx	r8
 800bcc8:	3001      	adds	r0, #1
 800bcca:	d103      	bne.n	800bcd4 <_printf_common+0xac>
 800bccc:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd4:	3501      	adds	r5, #1
 800bcd6:	e7c6      	b.n	800bc66 <_printf_common+0x3e>
 800bcd8:	18e1      	adds	r1, r4, r3
 800bcda:	1c5a      	adds	r2, r3, #1
 800bcdc:	2030      	movs	r0, #48	; 0x30
 800bcde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bce2:	4422      	add	r2, r4
 800bce4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bce8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcec:	3302      	adds	r3, #2
 800bcee:	e7c7      	b.n	800bc80 <_printf_common+0x58>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	4622      	mov	r2, r4
 800bcf4:	4649      	mov	r1, r9
 800bcf6:	4638      	mov	r0, r7
 800bcf8:	47c0      	blx	r8
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	d0e6      	beq.n	800bccc <_printf_common+0xa4>
 800bcfe:	3601      	adds	r6, #1
 800bd00:	e7d9      	b.n	800bcb6 <_printf_common+0x8e>
	...

0800bd04 <_printf_i>:
 800bd04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd08:	7e0f      	ldrb	r7, [r1, #24]
 800bd0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd0c:	2f78      	cmp	r7, #120	; 0x78
 800bd0e:	4691      	mov	r9, r2
 800bd10:	4680      	mov	r8, r0
 800bd12:	460c      	mov	r4, r1
 800bd14:	469a      	mov	sl, r3
 800bd16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd1a:	d807      	bhi.n	800bd2c <_printf_i+0x28>
 800bd1c:	2f62      	cmp	r7, #98	; 0x62
 800bd1e:	d80a      	bhi.n	800bd36 <_printf_i+0x32>
 800bd20:	2f00      	cmp	r7, #0
 800bd22:	f000 80d8 	beq.w	800bed6 <_printf_i+0x1d2>
 800bd26:	2f58      	cmp	r7, #88	; 0x58
 800bd28:	f000 80a3 	beq.w	800be72 <_printf_i+0x16e>
 800bd2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd34:	e03a      	b.n	800bdac <_printf_i+0xa8>
 800bd36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd3a:	2b15      	cmp	r3, #21
 800bd3c:	d8f6      	bhi.n	800bd2c <_printf_i+0x28>
 800bd3e:	a101      	add	r1, pc, #4	; (adr r1, 800bd44 <_printf_i+0x40>)
 800bd40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd44:	0800bd9d 	.word	0x0800bd9d
 800bd48:	0800bdb1 	.word	0x0800bdb1
 800bd4c:	0800bd2d 	.word	0x0800bd2d
 800bd50:	0800bd2d 	.word	0x0800bd2d
 800bd54:	0800bd2d 	.word	0x0800bd2d
 800bd58:	0800bd2d 	.word	0x0800bd2d
 800bd5c:	0800bdb1 	.word	0x0800bdb1
 800bd60:	0800bd2d 	.word	0x0800bd2d
 800bd64:	0800bd2d 	.word	0x0800bd2d
 800bd68:	0800bd2d 	.word	0x0800bd2d
 800bd6c:	0800bd2d 	.word	0x0800bd2d
 800bd70:	0800bebd 	.word	0x0800bebd
 800bd74:	0800bde1 	.word	0x0800bde1
 800bd78:	0800be9f 	.word	0x0800be9f
 800bd7c:	0800bd2d 	.word	0x0800bd2d
 800bd80:	0800bd2d 	.word	0x0800bd2d
 800bd84:	0800bedf 	.word	0x0800bedf
 800bd88:	0800bd2d 	.word	0x0800bd2d
 800bd8c:	0800bde1 	.word	0x0800bde1
 800bd90:	0800bd2d 	.word	0x0800bd2d
 800bd94:	0800bd2d 	.word	0x0800bd2d
 800bd98:	0800bea7 	.word	0x0800bea7
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	1d1a      	adds	r2, r3, #4
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	602a      	str	r2, [r5, #0]
 800bda4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bda8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdac:	2301      	movs	r3, #1
 800bdae:	e0a3      	b.n	800bef8 <_printf_i+0x1f4>
 800bdb0:	6820      	ldr	r0, [r4, #0]
 800bdb2:	6829      	ldr	r1, [r5, #0]
 800bdb4:	0606      	lsls	r6, r0, #24
 800bdb6:	f101 0304 	add.w	r3, r1, #4
 800bdba:	d50a      	bpl.n	800bdd2 <_printf_i+0xce>
 800bdbc:	680e      	ldr	r6, [r1, #0]
 800bdbe:	602b      	str	r3, [r5, #0]
 800bdc0:	2e00      	cmp	r6, #0
 800bdc2:	da03      	bge.n	800bdcc <_printf_i+0xc8>
 800bdc4:	232d      	movs	r3, #45	; 0x2d
 800bdc6:	4276      	negs	r6, r6
 800bdc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdcc:	485e      	ldr	r0, [pc, #376]	; (800bf48 <_printf_i+0x244>)
 800bdce:	230a      	movs	r3, #10
 800bdd0:	e019      	b.n	800be06 <_printf_i+0x102>
 800bdd2:	680e      	ldr	r6, [r1, #0]
 800bdd4:	602b      	str	r3, [r5, #0]
 800bdd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bdda:	bf18      	it	ne
 800bddc:	b236      	sxthne	r6, r6
 800bdde:	e7ef      	b.n	800bdc0 <_printf_i+0xbc>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	6820      	ldr	r0, [r4, #0]
 800bde4:	1d19      	adds	r1, r3, #4
 800bde6:	6029      	str	r1, [r5, #0]
 800bde8:	0601      	lsls	r1, r0, #24
 800bdea:	d501      	bpl.n	800bdf0 <_printf_i+0xec>
 800bdec:	681e      	ldr	r6, [r3, #0]
 800bdee:	e002      	b.n	800bdf6 <_printf_i+0xf2>
 800bdf0:	0646      	lsls	r6, r0, #25
 800bdf2:	d5fb      	bpl.n	800bdec <_printf_i+0xe8>
 800bdf4:	881e      	ldrh	r6, [r3, #0]
 800bdf6:	4854      	ldr	r0, [pc, #336]	; (800bf48 <_printf_i+0x244>)
 800bdf8:	2f6f      	cmp	r7, #111	; 0x6f
 800bdfa:	bf0c      	ite	eq
 800bdfc:	2308      	moveq	r3, #8
 800bdfe:	230a      	movne	r3, #10
 800be00:	2100      	movs	r1, #0
 800be02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be06:	6865      	ldr	r5, [r4, #4]
 800be08:	60a5      	str	r5, [r4, #8]
 800be0a:	2d00      	cmp	r5, #0
 800be0c:	bfa2      	ittt	ge
 800be0e:	6821      	ldrge	r1, [r4, #0]
 800be10:	f021 0104 	bicge.w	r1, r1, #4
 800be14:	6021      	strge	r1, [r4, #0]
 800be16:	b90e      	cbnz	r6, 800be1c <_printf_i+0x118>
 800be18:	2d00      	cmp	r5, #0
 800be1a:	d04d      	beq.n	800beb8 <_printf_i+0x1b4>
 800be1c:	4615      	mov	r5, r2
 800be1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800be22:	fb03 6711 	mls	r7, r3, r1, r6
 800be26:	5dc7      	ldrb	r7, [r0, r7]
 800be28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be2c:	4637      	mov	r7, r6
 800be2e:	42bb      	cmp	r3, r7
 800be30:	460e      	mov	r6, r1
 800be32:	d9f4      	bls.n	800be1e <_printf_i+0x11a>
 800be34:	2b08      	cmp	r3, #8
 800be36:	d10b      	bne.n	800be50 <_printf_i+0x14c>
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	07de      	lsls	r6, r3, #31
 800be3c:	d508      	bpl.n	800be50 <_printf_i+0x14c>
 800be3e:	6923      	ldr	r3, [r4, #16]
 800be40:	6861      	ldr	r1, [r4, #4]
 800be42:	4299      	cmp	r1, r3
 800be44:	bfde      	ittt	le
 800be46:	2330      	movle	r3, #48	; 0x30
 800be48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be50:	1b52      	subs	r2, r2, r5
 800be52:	6122      	str	r2, [r4, #16]
 800be54:	f8cd a000 	str.w	sl, [sp]
 800be58:	464b      	mov	r3, r9
 800be5a:	aa03      	add	r2, sp, #12
 800be5c:	4621      	mov	r1, r4
 800be5e:	4640      	mov	r0, r8
 800be60:	f7ff fee2 	bl	800bc28 <_printf_common>
 800be64:	3001      	adds	r0, #1
 800be66:	d14c      	bne.n	800bf02 <_printf_i+0x1fe>
 800be68:	f04f 30ff 	mov.w	r0, #4294967295
 800be6c:	b004      	add	sp, #16
 800be6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be72:	4835      	ldr	r0, [pc, #212]	; (800bf48 <_printf_i+0x244>)
 800be74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800be78:	6829      	ldr	r1, [r5, #0]
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	f851 6b04 	ldr.w	r6, [r1], #4
 800be80:	6029      	str	r1, [r5, #0]
 800be82:	061d      	lsls	r5, r3, #24
 800be84:	d514      	bpl.n	800beb0 <_printf_i+0x1ac>
 800be86:	07df      	lsls	r7, r3, #31
 800be88:	bf44      	itt	mi
 800be8a:	f043 0320 	orrmi.w	r3, r3, #32
 800be8e:	6023      	strmi	r3, [r4, #0]
 800be90:	b91e      	cbnz	r6, 800be9a <_printf_i+0x196>
 800be92:	6823      	ldr	r3, [r4, #0]
 800be94:	f023 0320 	bic.w	r3, r3, #32
 800be98:	6023      	str	r3, [r4, #0]
 800be9a:	2310      	movs	r3, #16
 800be9c:	e7b0      	b.n	800be00 <_printf_i+0xfc>
 800be9e:	6823      	ldr	r3, [r4, #0]
 800bea0:	f043 0320 	orr.w	r3, r3, #32
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	2378      	movs	r3, #120	; 0x78
 800bea8:	4828      	ldr	r0, [pc, #160]	; (800bf4c <_printf_i+0x248>)
 800beaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800beae:	e7e3      	b.n	800be78 <_printf_i+0x174>
 800beb0:	0659      	lsls	r1, r3, #25
 800beb2:	bf48      	it	mi
 800beb4:	b2b6      	uxthmi	r6, r6
 800beb6:	e7e6      	b.n	800be86 <_printf_i+0x182>
 800beb8:	4615      	mov	r5, r2
 800beba:	e7bb      	b.n	800be34 <_printf_i+0x130>
 800bebc:	682b      	ldr	r3, [r5, #0]
 800bebe:	6826      	ldr	r6, [r4, #0]
 800bec0:	6961      	ldr	r1, [r4, #20]
 800bec2:	1d18      	adds	r0, r3, #4
 800bec4:	6028      	str	r0, [r5, #0]
 800bec6:	0635      	lsls	r5, r6, #24
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	d501      	bpl.n	800bed0 <_printf_i+0x1cc>
 800becc:	6019      	str	r1, [r3, #0]
 800bece:	e002      	b.n	800bed6 <_printf_i+0x1d2>
 800bed0:	0670      	lsls	r0, r6, #25
 800bed2:	d5fb      	bpl.n	800becc <_printf_i+0x1c8>
 800bed4:	8019      	strh	r1, [r3, #0]
 800bed6:	2300      	movs	r3, #0
 800bed8:	6123      	str	r3, [r4, #16]
 800beda:	4615      	mov	r5, r2
 800bedc:	e7ba      	b.n	800be54 <_printf_i+0x150>
 800bede:	682b      	ldr	r3, [r5, #0]
 800bee0:	1d1a      	adds	r2, r3, #4
 800bee2:	602a      	str	r2, [r5, #0]
 800bee4:	681d      	ldr	r5, [r3, #0]
 800bee6:	6862      	ldr	r2, [r4, #4]
 800bee8:	2100      	movs	r1, #0
 800beea:	4628      	mov	r0, r5
 800beec:	f7f4 f998 	bl	8000220 <memchr>
 800bef0:	b108      	cbz	r0, 800bef6 <_printf_i+0x1f2>
 800bef2:	1b40      	subs	r0, r0, r5
 800bef4:	6060      	str	r0, [r4, #4]
 800bef6:	6863      	ldr	r3, [r4, #4]
 800bef8:	6123      	str	r3, [r4, #16]
 800befa:	2300      	movs	r3, #0
 800befc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf00:	e7a8      	b.n	800be54 <_printf_i+0x150>
 800bf02:	6923      	ldr	r3, [r4, #16]
 800bf04:	462a      	mov	r2, r5
 800bf06:	4649      	mov	r1, r9
 800bf08:	4640      	mov	r0, r8
 800bf0a:	47d0      	blx	sl
 800bf0c:	3001      	adds	r0, #1
 800bf0e:	d0ab      	beq.n	800be68 <_printf_i+0x164>
 800bf10:	6823      	ldr	r3, [r4, #0]
 800bf12:	079b      	lsls	r3, r3, #30
 800bf14:	d413      	bmi.n	800bf3e <_printf_i+0x23a>
 800bf16:	68e0      	ldr	r0, [r4, #12]
 800bf18:	9b03      	ldr	r3, [sp, #12]
 800bf1a:	4298      	cmp	r0, r3
 800bf1c:	bfb8      	it	lt
 800bf1e:	4618      	movlt	r0, r3
 800bf20:	e7a4      	b.n	800be6c <_printf_i+0x168>
 800bf22:	2301      	movs	r3, #1
 800bf24:	4632      	mov	r2, r6
 800bf26:	4649      	mov	r1, r9
 800bf28:	4640      	mov	r0, r8
 800bf2a:	47d0      	blx	sl
 800bf2c:	3001      	adds	r0, #1
 800bf2e:	d09b      	beq.n	800be68 <_printf_i+0x164>
 800bf30:	3501      	adds	r5, #1
 800bf32:	68e3      	ldr	r3, [r4, #12]
 800bf34:	9903      	ldr	r1, [sp, #12]
 800bf36:	1a5b      	subs	r3, r3, r1
 800bf38:	42ab      	cmp	r3, r5
 800bf3a:	dcf2      	bgt.n	800bf22 <_printf_i+0x21e>
 800bf3c:	e7eb      	b.n	800bf16 <_printf_i+0x212>
 800bf3e:	2500      	movs	r5, #0
 800bf40:	f104 0619 	add.w	r6, r4, #25
 800bf44:	e7f5      	b.n	800bf32 <_printf_i+0x22e>
 800bf46:	bf00      	nop
 800bf48:	0800fa66 	.word	0x0800fa66
 800bf4c:	0800fa77 	.word	0x0800fa77

0800bf50 <siprintf>:
 800bf50:	b40e      	push	{r1, r2, r3}
 800bf52:	b500      	push	{lr}
 800bf54:	b09c      	sub	sp, #112	; 0x70
 800bf56:	ab1d      	add	r3, sp, #116	; 0x74
 800bf58:	9002      	str	r0, [sp, #8]
 800bf5a:	9006      	str	r0, [sp, #24]
 800bf5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bf60:	4809      	ldr	r0, [pc, #36]	; (800bf88 <siprintf+0x38>)
 800bf62:	9107      	str	r1, [sp, #28]
 800bf64:	9104      	str	r1, [sp, #16]
 800bf66:	4909      	ldr	r1, [pc, #36]	; (800bf8c <siprintf+0x3c>)
 800bf68:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf6c:	9105      	str	r1, [sp, #20]
 800bf6e:	6800      	ldr	r0, [r0, #0]
 800bf70:	9301      	str	r3, [sp, #4]
 800bf72:	a902      	add	r1, sp, #8
 800bf74:	f001 fb76 	bl	800d664 <_svfiprintf_r>
 800bf78:	9b02      	ldr	r3, [sp, #8]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	701a      	strb	r2, [r3, #0]
 800bf7e:	b01c      	add	sp, #112	; 0x70
 800bf80:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf84:	b003      	add	sp, #12
 800bf86:	4770      	bx	lr
 800bf88:	20000084 	.word	0x20000084
 800bf8c:	ffff0208 	.word	0xffff0208

0800bf90 <quorem>:
 800bf90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf94:	6903      	ldr	r3, [r0, #16]
 800bf96:	690c      	ldr	r4, [r1, #16]
 800bf98:	42a3      	cmp	r3, r4
 800bf9a:	4607      	mov	r7, r0
 800bf9c:	f2c0 8081 	blt.w	800c0a2 <quorem+0x112>
 800bfa0:	3c01      	subs	r4, #1
 800bfa2:	f101 0814 	add.w	r8, r1, #20
 800bfa6:	f100 0514 	add.w	r5, r0, #20
 800bfaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfae:	9301      	str	r3, [sp, #4]
 800bfb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bfb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bfc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bfc4:	fbb2 f6f3 	udiv	r6, r2, r3
 800bfc8:	d331      	bcc.n	800c02e <quorem+0x9e>
 800bfca:	f04f 0e00 	mov.w	lr, #0
 800bfce:	4640      	mov	r0, r8
 800bfd0:	46ac      	mov	ip, r5
 800bfd2:	46f2      	mov	sl, lr
 800bfd4:	f850 2b04 	ldr.w	r2, [r0], #4
 800bfd8:	b293      	uxth	r3, r2
 800bfda:	fb06 e303 	mla	r3, r6, r3, lr
 800bfde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	ebaa 0303 	sub.w	r3, sl, r3
 800bfe8:	f8dc a000 	ldr.w	sl, [ip]
 800bfec:	0c12      	lsrs	r2, r2, #16
 800bfee:	fa13 f38a 	uxtah	r3, r3, sl
 800bff2:	fb06 e202 	mla	r2, r6, r2, lr
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	9b00      	ldr	r3, [sp, #0]
 800bffa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bffe:	b292      	uxth	r2, r2
 800c000:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c004:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c008:	f8bd 3000 	ldrh.w	r3, [sp]
 800c00c:	4581      	cmp	r9, r0
 800c00e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c012:	f84c 3b04 	str.w	r3, [ip], #4
 800c016:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c01a:	d2db      	bcs.n	800bfd4 <quorem+0x44>
 800c01c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c020:	b92b      	cbnz	r3, 800c02e <quorem+0x9e>
 800c022:	9b01      	ldr	r3, [sp, #4]
 800c024:	3b04      	subs	r3, #4
 800c026:	429d      	cmp	r5, r3
 800c028:	461a      	mov	r2, r3
 800c02a:	d32e      	bcc.n	800c08a <quorem+0xfa>
 800c02c:	613c      	str	r4, [r7, #16]
 800c02e:	4638      	mov	r0, r7
 800c030:	f001 f8c4 	bl	800d1bc <__mcmp>
 800c034:	2800      	cmp	r0, #0
 800c036:	db24      	blt.n	800c082 <quorem+0xf2>
 800c038:	3601      	adds	r6, #1
 800c03a:	4628      	mov	r0, r5
 800c03c:	f04f 0c00 	mov.w	ip, #0
 800c040:	f858 2b04 	ldr.w	r2, [r8], #4
 800c044:	f8d0 e000 	ldr.w	lr, [r0]
 800c048:	b293      	uxth	r3, r2
 800c04a:	ebac 0303 	sub.w	r3, ip, r3
 800c04e:	0c12      	lsrs	r2, r2, #16
 800c050:	fa13 f38e 	uxtah	r3, r3, lr
 800c054:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c058:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c062:	45c1      	cmp	r9, r8
 800c064:	f840 3b04 	str.w	r3, [r0], #4
 800c068:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c06c:	d2e8      	bcs.n	800c040 <quorem+0xb0>
 800c06e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c076:	b922      	cbnz	r2, 800c082 <quorem+0xf2>
 800c078:	3b04      	subs	r3, #4
 800c07a:	429d      	cmp	r5, r3
 800c07c:	461a      	mov	r2, r3
 800c07e:	d30a      	bcc.n	800c096 <quorem+0x106>
 800c080:	613c      	str	r4, [r7, #16]
 800c082:	4630      	mov	r0, r6
 800c084:	b003      	add	sp, #12
 800c086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c08a:	6812      	ldr	r2, [r2, #0]
 800c08c:	3b04      	subs	r3, #4
 800c08e:	2a00      	cmp	r2, #0
 800c090:	d1cc      	bne.n	800c02c <quorem+0x9c>
 800c092:	3c01      	subs	r4, #1
 800c094:	e7c7      	b.n	800c026 <quorem+0x96>
 800c096:	6812      	ldr	r2, [r2, #0]
 800c098:	3b04      	subs	r3, #4
 800c09a:	2a00      	cmp	r2, #0
 800c09c:	d1f0      	bne.n	800c080 <quorem+0xf0>
 800c09e:	3c01      	subs	r4, #1
 800c0a0:	e7eb      	b.n	800c07a <quorem+0xea>
 800c0a2:	2000      	movs	r0, #0
 800c0a4:	e7ee      	b.n	800c084 <quorem+0xf4>
	...

0800c0a8 <_dtoa_r>:
 800c0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ac:	ed2d 8b04 	vpush	{d8-d9}
 800c0b0:	ec57 6b10 	vmov	r6, r7, d0
 800c0b4:	b093      	sub	sp, #76	; 0x4c
 800c0b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c0b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c0bc:	9106      	str	r1, [sp, #24]
 800c0be:	ee10 aa10 	vmov	sl, s0
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	9209      	str	r2, [sp, #36]	; 0x24
 800c0c6:	930c      	str	r3, [sp, #48]	; 0x30
 800c0c8:	46bb      	mov	fp, r7
 800c0ca:	b975      	cbnz	r5, 800c0ea <_dtoa_r+0x42>
 800c0cc:	2010      	movs	r0, #16
 800c0ce:	f000 fddd 	bl	800cc8c <malloc>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	6260      	str	r0, [r4, #36]	; 0x24
 800c0d6:	b920      	cbnz	r0, 800c0e2 <_dtoa_r+0x3a>
 800c0d8:	4ba7      	ldr	r3, [pc, #668]	; (800c378 <_dtoa_r+0x2d0>)
 800c0da:	21ea      	movs	r1, #234	; 0xea
 800c0dc:	48a7      	ldr	r0, [pc, #668]	; (800c37c <_dtoa_r+0x2d4>)
 800c0de:	f001 fbd1 	bl	800d884 <__assert_func>
 800c0e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c0e6:	6005      	str	r5, [r0, #0]
 800c0e8:	60c5      	str	r5, [r0, #12]
 800c0ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0ec:	6819      	ldr	r1, [r3, #0]
 800c0ee:	b151      	cbz	r1, 800c106 <_dtoa_r+0x5e>
 800c0f0:	685a      	ldr	r2, [r3, #4]
 800c0f2:	604a      	str	r2, [r1, #4]
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	4093      	lsls	r3, r2
 800c0f8:	608b      	str	r3, [r1, #8]
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f000 fe1c 	bl	800cd38 <_Bfree>
 800c100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c102:	2200      	movs	r2, #0
 800c104:	601a      	str	r2, [r3, #0]
 800c106:	1e3b      	subs	r3, r7, #0
 800c108:	bfaa      	itet	ge
 800c10a:	2300      	movge	r3, #0
 800c10c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c110:	f8c8 3000 	strge.w	r3, [r8]
 800c114:	4b9a      	ldr	r3, [pc, #616]	; (800c380 <_dtoa_r+0x2d8>)
 800c116:	bfbc      	itt	lt
 800c118:	2201      	movlt	r2, #1
 800c11a:	f8c8 2000 	strlt.w	r2, [r8]
 800c11e:	ea33 030b 	bics.w	r3, r3, fp
 800c122:	d11b      	bne.n	800c15c <_dtoa_r+0xb4>
 800c124:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c126:	f242 730f 	movw	r3, #9999	; 0x270f
 800c12a:	6013      	str	r3, [r2, #0]
 800c12c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c130:	4333      	orrs	r3, r6
 800c132:	f000 8592 	beq.w	800cc5a <_dtoa_r+0xbb2>
 800c136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c138:	b963      	cbnz	r3, 800c154 <_dtoa_r+0xac>
 800c13a:	4b92      	ldr	r3, [pc, #584]	; (800c384 <_dtoa_r+0x2dc>)
 800c13c:	e022      	b.n	800c184 <_dtoa_r+0xdc>
 800c13e:	4b92      	ldr	r3, [pc, #584]	; (800c388 <_dtoa_r+0x2e0>)
 800c140:	9301      	str	r3, [sp, #4]
 800c142:	3308      	adds	r3, #8
 800c144:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c146:	6013      	str	r3, [r2, #0]
 800c148:	9801      	ldr	r0, [sp, #4]
 800c14a:	b013      	add	sp, #76	; 0x4c
 800c14c:	ecbd 8b04 	vpop	{d8-d9}
 800c150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c154:	4b8b      	ldr	r3, [pc, #556]	; (800c384 <_dtoa_r+0x2dc>)
 800c156:	9301      	str	r3, [sp, #4]
 800c158:	3303      	adds	r3, #3
 800c15a:	e7f3      	b.n	800c144 <_dtoa_r+0x9c>
 800c15c:	2200      	movs	r2, #0
 800c15e:	2300      	movs	r3, #0
 800c160:	4650      	mov	r0, sl
 800c162:	4659      	mov	r1, fp
 800c164:	f7f4 fcd0 	bl	8000b08 <__aeabi_dcmpeq>
 800c168:	ec4b ab19 	vmov	d9, sl, fp
 800c16c:	4680      	mov	r8, r0
 800c16e:	b158      	cbz	r0, 800c188 <_dtoa_r+0xe0>
 800c170:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c172:	2301      	movs	r3, #1
 800c174:	6013      	str	r3, [r2, #0]
 800c176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f000 856b 	beq.w	800cc54 <_dtoa_r+0xbac>
 800c17e:	4883      	ldr	r0, [pc, #524]	; (800c38c <_dtoa_r+0x2e4>)
 800c180:	6018      	str	r0, [r3, #0]
 800c182:	1e43      	subs	r3, r0, #1
 800c184:	9301      	str	r3, [sp, #4]
 800c186:	e7df      	b.n	800c148 <_dtoa_r+0xa0>
 800c188:	ec4b ab10 	vmov	d0, sl, fp
 800c18c:	aa10      	add	r2, sp, #64	; 0x40
 800c18e:	a911      	add	r1, sp, #68	; 0x44
 800c190:	4620      	mov	r0, r4
 800c192:	f001 f8b9 	bl	800d308 <__d2b>
 800c196:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c19a:	ee08 0a10 	vmov	s16, r0
 800c19e:	2d00      	cmp	r5, #0
 800c1a0:	f000 8084 	beq.w	800c2ac <_dtoa_r+0x204>
 800c1a4:	ee19 3a90 	vmov	r3, s19
 800c1a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c1b0:	4656      	mov	r6, sl
 800c1b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c1b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c1ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c1be:	4b74      	ldr	r3, [pc, #464]	; (800c390 <_dtoa_r+0x2e8>)
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	f7f4 f87f 	bl	80002c8 <__aeabi_dsub>
 800c1ca:	a365      	add	r3, pc, #404	; (adr r3, 800c360 <_dtoa_r+0x2b8>)
 800c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d0:	f7f4 fa32 	bl	8000638 <__aeabi_dmul>
 800c1d4:	a364      	add	r3, pc, #400	; (adr r3, 800c368 <_dtoa_r+0x2c0>)
 800c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1da:	f7f4 f877 	bl	80002cc <__adddf3>
 800c1de:	4606      	mov	r6, r0
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	460f      	mov	r7, r1
 800c1e4:	f7f4 f9be 	bl	8000564 <__aeabi_i2d>
 800c1e8:	a361      	add	r3, pc, #388	; (adr r3, 800c370 <_dtoa_r+0x2c8>)
 800c1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ee:	f7f4 fa23 	bl	8000638 <__aeabi_dmul>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	4639      	mov	r1, r7
 800c1fa:	f7f4 f867 	bl	80002cc <__adddf3>
 800c1fe:	4606      	mov	r6, r0
 800c200:	460f      	mov	r7, r1
 800c202:	f7f4 fcc9 	bl	8000b98 <__aeabi_d2iz>
 800c206:	2200      	movs	r2, #0
 800c208:	9000      	str	r0, [sp, #0]
 800c20a:	2300      	movs	r3, #0
 800c20c:	4630      	mov	r0, r6
 800c20e:	4639      	mov	r1, r7
 800c210:	f7f4 fc84 	bl	8000b1c <__aeabi_dcmplt>
 800c214:	b150      	cbz	r0, 800c22c <_dtoa_r+0x184>
 800c216:	9800      	ldr	r0, [sp, #0]
 800c218:	f7f4 f9a4 	bl	8000564 <__aeabi_i2d>
 800c21c:	4632      	mov	r2, r6
 800c21e:	463b      	mov	r3, r7
 800c220:	f7f4 fc72 	bl	8000b08 <__aeabi_dcmpeq>
 800c224:	b910      	cbnz	r0, 800c22c <_dtoa_r+0x184>
 800c226:	9b00      	ldr	r3, [sp, #0]
 800c228:	3b01      	subs	r3, #1
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	9b00      	ldr	r3, [sp, #0]
 800c22e:	2b16      	cmp	r3, #22
 800c230:	d85a      	bhi.n	800c2e8 <_dtoa_r+0x240>
 800c232:	9a00      	ldr	r2, [sp, #0]
 800c234:	4b57      	ldr	r3, [pc, #348]	; (800c394 <_dtoa_r+0x2ec>)
 800c236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23e:	ec51 0b19 	vmov	r0, r1, d9
 800c242:	f7f4 fc6b 	bl	8000b1c <__aeabi_dcmplt>
 800c246:	2800      	cmp	r0, #0
 800c248:	d050      	beq.n	800c2ec <_dtoa_r+0x244>
 800c24a:	9b00      	ldr	r3, [sp, #0]
 800c24c:	3b01      	subs	r3, #1
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	2300      	movs	r3, #0
 800c252:	930b      	str	r3, [sp, #44]	; 0x2c
 800c254:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c256:	1b5d      	subs	r5, r3, r5
 800c258:	1e6b      	subs	r3, r5, #1
 800c25a:	9305      	str	r3, [sp, #20]
 800c25c:	bf45      	ittet	mi
 800c25e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c262:	9304      	strmi	r3, [sp, #16]
 800c264:	2300      	movpl	r3, #0
 800c266:	2300      	movmi	r3, #0
 800c268:	bf4c      	ite	mi
 800c26a:	9305      	strmi	r3, [sp, #20]
 800c26c:	9304      	strpl	r3, [sp, #16]
 800c26e:	9b00      	ldr	r3, [sp, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	db3d      	blt.n	800c2f0 <_dtoa_r+0x248>
 800c274:	9b05      	ldr	r3, [sp, #20]
 800c276:	9a00      	ldr	r2, [sp, #0]
 800c278:	920a      	str	r2, [sp, #40]	; 0x28
 800c27a:	4413      	add	r3, r2
 800c27c:	9305      	str	r3, [sp, #20]
 800c27e:	2300      	movs	r3, #0
 800c280:	9307      	str	r3, [sp, #28]
 800c282:	9b06      	ldr	r3, [sp, #24]
 800c284:	2b09      	cmp	r3, #9
 800c286:	f200 8089 	bhi.w	800c39c <_dtoa_r+0x2f4>
 800c28a:	2b05      	cmp	r3, #5
 800c28c:	bfc4      	itt	gt
 800c28e:	3b04      	subgt	r3, #4
 800c290:	9306      	strgt	r3, [sp, #24]
 800c292:	9b06      	ldr	r3, [sp, #24]
 800c294:	f1a3 0302 	sub.w	r3, r3, #2
 800c298:	bfcc      	ite	gt
 800c29a:	2500      	movgt	r5, #0
 800c29c:	2501      	movle	r5, #1
 800c29e:	2b03      	cmp	r3, #3
 800c2a0:	f200 8087 	bhi.w	800c3b2 <_dtoa_r+0x30a>
 800c2a4:	e8df f003 	tbb	[pc, r3]
 800c2a8:	59383a2d 	.word	0x59383a2d
 800c2ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c2b0:	441d      	add	r5, r3
 800c2b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c2b6:	2b20      	cmp	r3, #32
 800c2b8:	bfc1      	itttt	gt
 800c2ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c2be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c2c2:	fa0b f303 	lslgt.w	r3, fp, r3
 800c2c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c2ca:	bfda      	itte	le
 800c2cc:	f1c3 0320 	rsble	r3, r3, #32
 800c2d0:	fa06 f003 	lslle.w	r0, r6, r3
 800c2d4:	4318      	orrgt	r0, r3
 800c2d6:	f7f4 f935 	bl	8000544 <__aeabi_ui2d>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	4606      	mov	r6, r0
 800c2de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c2e2:	3d01      	subs	r5, #1
 800c2e4:	930e      	str	r3, [sp, #56]	; 0x38
 800c2e6:	e76a      	b.n	800c1be <_dtoa_r+0x116>
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e7b2      	b.n	800c252 <_dtoa_r+0x1aa>
 800c2ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800c2ee:	e7b1      	b.n	800c254 <_dtoa_r+0x1ac>
 800c2f0:	9b04      	ldr	r3, [sp, #16]
 800c2f2:	9a00      	ldr	r2, [sp, #0]
 800c2f4:	1a9b      	subs	r3, r3, r2
 800c2f6:	9304      	str	r3, [sp, #16]
 800c2f8:	4253      	negs	r3, r2
 800c2fa:	9307      	str	r3, [sp, #28]
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	930a      	str	r3, [sp, #40]	; 0x28
 800c300:	e7bf      	b.n	800c282 <_dtoa_r+0x1da>
 800c302:	2300      	movs	r3, #0
 800c304:	9308      	str	r3, [sp, #32]
 800c306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c308:	2b00      	cmp	r3, #0
 800c30a:	dc55      	bgt.n	800c3b8 <_dtoa_r+0x310>
 800c30c:	2301      	movs	r3, #1
 800c30e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c312:	461a      	mov	r2, r3
 800c314:	9209      	str	r2, [sp, #36]	; 0x24
 800c316:	e00c      	b.n	800c332 <_dtoa_r+0x28a>
 800c318:	2301      	movs	r3, #1
 800c31a:	e7f3      	b.n	800c304 <_dtoa_r+0x25c>
 800c31c:	2300      	movs	r3, #0
 800c31e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c320:	9308      	str	r3, [sp, #32]
 800c322:	9b00      	ldr	r3, [sp, #0]
 800c324:	4413      	add	r3, r2
 800c326:	9302      	str	r3, [sp, #8]
 800c328:	3301      	adds	r3, #1
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	9303      	str	r3, [sp, #12]
 800c32e:	bfb8      	it	lt
 800c330:	2301      	movlt	r3, #1
 800c332:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c334:	2200      	movs	r2, #0
 800c336:	6042      	str	r2, [r0, #4]
 800c338:	2204      	movs	r2, #4
 800c33a:	f102 0614 	add.w	r6, r2, #20
 800c33e:	429e      	cmp	r6, r3
 800c340:	6841      	ldr	r1, [r0, #4]
 800c342:	d93d      	bls.n	800c3c0 <_dtoa_r+0x318>
 800c344:	4620      	mov	r0, r4
 800c346:	f000 fcb7 	bl	800ccb8 <_Balloc>
 800c34a:	9001      	str	r0, [sp, #4]
 800c34c:	2800      	cmp	r0, #0
 800c34e:	d13b      	bne.n	800c3c8 <_dtoa_r+0x320>
 800c350:	4b11      	ldr	r3, [pc, #68]	; (800c398 <_dtoa_r+0x2f0>)
 800c352:	4602      	mov	r2, r0
 800c354:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c358:	e6c0      	b.n	800c0dc <_dtoa_r+0x34>
 800c35a:	2301      	movs	r3, #1
 800c35c:	e7df      	b.n	800c31e <_dtoa_r+0x276>
 800c35e:	bf00      	nop
 800c360:	636f4361 	.word	0x636f4361
 800c364:	3fd287a7 	.word	0x3fd287a7
 800c368:	8b60c8b3 	.word	0x8b60c8b3
 800c36c:	3fc68a28 	.word	0x3fc68a28
 800c370:	509f79fb 	.word	0x509f79fb
 800c374:	3fd34413 	.word	0x3fd34413
 800c378:	0800fa95 	.word	0x0800fa95
 800c37c:	0800faac 	.word	0x0800faac
 800c380:	7ff00000 	.word	0x7ff00000
 800c384:	0800fa91 	.word	0x0800fa91
 800c388:	0800fa88 	.word	0x0800fa88
 800c38c:	0800fa65 	.word	0x0800fa65
 800c390:	3ff80000 	.word	0x3ff80000
 800c394:	0800fba0 	.word	0x0800fba0
 800c398:	0800fb07 	.word	0x0800fb07
 800c39c:	2501      	movs	r5, #1
 800c39e:	2300      	movs	r3, #0
 800c3a0:	9306      	str	r3, [sp, #24]
 800c3a2:	9508      	str	r5, [sp, #32]
 800c3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	2312      	movs	r3, #18
 800c3b0:	e7b0      	b.n	800c314 <_dtoa_r+0x26c>
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	9308      	str	r3, [sp, #32]
 800c3b6:	e7f5      	b.n	800c3a4 <_dtoa_r+0x2fc>
 800c3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c3be:	e7b8      	b.n	800c332 <_dtoa_r+0x28a>
 800c3c0:	3101      	adds	r1, #1
 800c3c2:	6041      	str	r1, [r0, #4]
 800c3c4:	0052      	lsls	r2, r2, #1
 800c3c6:	e7b8      	b.n	800c33a <_dtoa_r+0x292>
 800c3c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3ca:	9a01      	ldr	r2, [sp, #4]
 800c3cc:	601a      	str	r2, [r3, #0]
 800c3ce:	9b03      	ldr	r3, [sp, #12]
 800c3d0:	2b0e      	cmp	r3, #14
 800c3d2:	f200 809d 	bhi.w	800c510 <_dtoa_r+0x468>
 800c3d6:	2d00      	cmp	r5, #0
 800c3d8:	f000 809a 	beq.w	800c510 <_dtoa_r+0x468>
 800c3dc:	9b00      	ldr	r3, [sp, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	dd32      	ble.n	800c448 <_dtoa_r+0x3a0>
 800c3e2:	4ab7      	ldr	r2, [pc, #732]	; (800c6c0 <_dtoa_r+0x618>)
 800c3e4:	f003 030f 	and.w	r3, r3, #15
 800c3e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c3ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3f0:	9b00      	ldr	r3, [sp, #0]
 800c3f2:	05d8      	lsls	r0, r3, #23
 800c3f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c3f8:	d516      	bpl.n	800c428 <_dtoa_r+0x380>
 800c3fa:	4bb2      	ldr	r3, [pc, #712]	; (800c6c4 <_dtoa_r+0x61c>)
 800c3fc:	ec51 0b19 	vmov	r0, r1, d9
 800c400:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c404:	f7f4 fa42 	bl	800088c <__aeabi_ddiv>
 800c408:	f007 070f 	and.w	r7, r7, #15
 800c40c:	4682      	mov	sl, r0
 800c40e:	468b      	mov	fp, r1
 800c410:	2503      	movs	r5, #3
 800c412:	4eac      	ldr	r6, [pc, #688]	; (800c6c4 <_dtoa_r+0x61c>)
 800c414:	b957      	cbnz	r7, 800c42c <_dtoa_r+0x384>
 800c416:	4642      	mov	r2, r8
 800c418:	464b      	mov	r3, r9
 800c41a:	4650      	mov	r0, sl
 800c41c:	4659      	mov	r1, fp
 800c41e:	f7f4 fa35 	bl	800088c <__aeabi_ddiv>
 800c422:	4682      	mov	sl, r0
 800c424:	468b      	mov	fp, r1
 800c426:	e028      	b.n	800c47a <_dtoa_r+0x3d2>
 800c428:	2502      	movs	r5, #2
 800c42a:	e7f2      	b.n	800c412 <_dtoa_r+0x36a>
 800c42c:	07f9      	lsls	r1, r7, #31
 800c42e:	d508      	bpl.n	800c442 <_dtoa_r+0x39a>
 800c430:	4640      	mov	r0, r8
 800c432:	4649      	mov	r1, r9
 800c434:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c438:	f7f4 f8fe 	bl	8000638 <__aeabi_dmul>
 800c43c:	3501      	adds	r5, #1
 800c43e:	4680      	mov	r8, r0
 800c440:	4689      	mov	r9, r1
 800c442:	107f      	asrs	r7, r7, #1
 800c444:	3608      	adds	r6, #8
 800c446:	e7e5      	b.n	800c414 <_dtoa_r+0x36c>
 800c448:	f000 809b 	beq.w	800c582 <_dtoa_r+0x4da>
 800c44c:	9b00      	ldr	r3, [sp, #0]
 800c44e:	4f9d      	ldr	r7, [pc, #628]	; (800c6c4 <_dtoa_r+0x61c>)
 800c450:	425e      	negs	r6, r3
 800c452:	4b9b      	ldr	r3, [pc, #620]	; (800c6c0 <_dtoa_r+0x618>)
 800c454:	f006 020f 	and.w	r2, r6, #15
 800c458:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	ec51 0b19 	vmov	r0, r1, d9
 800c464:	f7f4 f8e8 	bl	8000638 <__aeabi_dmul>
 800c468:	1136      	asrs	r6, r6, #4
 800c46a:	4682      	mov	sl, r0
 800c46c:	468b      	mov	fp, r1
 800c46e:	2300      	movs	r3, #0
 800c470:	2502      	movs	r5, #2
 800c472:	2e00      	cmp	r6, #0
 800c474:	d17a      	bne.n	800c56c <_dtoa_r+0x4c4>
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1d3      	bne.n	800c422 <_dtoa_r+0x37a>
 800c47a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f000 8082 	beq.w	800c586 <_dtoa_r+0x4de>
 800c482:	4b91      	ldr	r3, [pc, #580]	; (800c6c8 <_dtoa_r+0x620>)
 800c484:	2200      	movs	r2, #0
 800c486:	4650      	mov	r0, sl
 800c488:	4659      	mov	r1, fp
 800c48a:	f7f4 fb47 	bl	8000b1c <__aeabi_dcmplt>
 800c48e:	2800      	cmp	r0, #0
 800c490:	d079      	beq.n	800c586 <_dtoa_r+0x4de>
 800c492:	9b03      	ldr	r3, [sp, #12]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d076      	beq.n	800c586 <_dtoa_r+0x4de>
 800c498:	9b02      	ldr	r3, [sp, #8]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	dd36      	ble.n	800c50c <_dtoa_r+0x464>
 800c49e:	9b00      	ldr	r3, [sp, #0]
 800c4a0:	4650      	mov	r0, sl
 800c4a2:	4659      	mov	r1, fp
 800c4a4:	1e5f      	subs	r7, r3, #1
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	4b88      	ldr	r3, [pc, #544]	; (800c6cc <_dtoa_r+0x624>)
 800c4aa:	f7f4 f8c5 	bl	8000638 <__aeabi_dmul>
 800c4ae:	9e02      	ldr	r6, [sp, #8]
 800c4b0:	4682      	mov	sl, r0
 800c4b2:	468b      	mov	fp, r1
 800c4b4:	3501      	adds	r5, #1
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f7f4 f854 	bl	8000564 <__aeabi_i2d>
 800c4bc:	4652      	mov	r2, sl
 800c4be:	465b      	mov	r3, fp
 800c4c0:	f7f4 f8ba 	bl	8000638 <__aeabi_dmul>
 800c4c4:	4b82      	ldr	r3, [pc, #520]	; (800c6d0 <_dtoa_r+0x628>)
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f7f3 ff00 	bl	80002cc <__adddf3>
 800c4cc:	46d0      	mov	r8, sl
 800c4ce:	46d9      	mov	r9, fp
 800c4d0:	4682      	mov	sl, r0
 800c4d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c4d6:	2e00      	cmp	r6, #0
 800c4d8:	d158      	bne.n	800c58c <_dtoa_r+0x4e4>
 800c4da:	4b7e      	ldr	r3, [pc, #504]	; (800c6d4 <_dtoa_r+0x62c>)
 800c4dc:	2200      	movs	r2, #0
 800c4de:	4640      	mov	r0, r8
 800c4e0:	4649      	mov	r1, r9
 800c4e2:	f7f3 fef1 	bl	80002c8 <__aeabi_dsub>
 800c4e6:	4652      	mov	r2, sl
 800c4e8:	465b      	mov	r3, fp
 800c4ea:	4680      	mov	r8, r0
 800c4ec:	4689      	mov	r9, r1
 800c4ee:	f7f4 fb33 	bl	8000b58 <__aeabi_dcmpgt>
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	f040 8295 	bne.w	800ca22 <_dtoa_r+0x97a>
 800c4f8:	4652      	mov	r2, sl
 800c4fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c4fe:	4640      	mov	r0, r8
 800c500:	4649      	mov	r1, r9
 800c502:	f7f4 fb0b 	bl	8000b1c <__aeabi_dcmplt>
 800c506:	2800      	cmp	r0, #0
 800c508:	f040 8289 	bne.w	800ca1e <_dtoa_r+0x976>
 800c50c:	ec5b ab19 	vmov	sl, fp, d9
 800c510:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c512:	2b00      	cmp	r3, #0
 800c514:	f2c0 8148 	blt.w	800c7a8 <_dtoa_r+0x700>
 800c518:	9a00      	ldr	r2, [sp, #0]
 800c51a:	2a0e      	cmp	r2, #14
 800c51c:	f300 8144 	bgt.w	800c7a8 <_dtoa_r+0x700>
 800c520:	4b67      	ldr	r3, [pc, #412]	; (800c6c0 <_dtoa_r+0x618>)
 800c522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c526:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c52a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f280 80d5 	bge.w	800c6dc <_dtoa_r+0x634>
 800c532:	9b03      	ldr	r3, [sp, #12]
 800c534:	2b00      	cmp	r3, #0
 800c536:	f300 80d1 	bgt.w	800c6dc <_dtoa_r+0x634>
 800c53a:	f040 826f 	bne.w	800ca1c <_dtoa_r+0x974>
 800c53e:	4b65      	ldr	r3, [pc, #404]	; (800c6d4 <_dtoa_r+0x62c>)
 800c540:	2200      	movs	r2, #0
 800c542:	4640      	mov	r0, r8
 800c544:	4649      	mov	r1, r9
 800c546:	f7f4 f877 	bl	8000638 <__aeabi_dmul>
 800c54a:	4652      	mov	r2, sl
 800c54c:	465b      	mov	r3, fp
 800c54e:	f7f4 faf9 	bl	8000b44 <__aeabi_dcmpge>
 800c552:	9e03      	ldr	r6, [sp, #12]
 800c554:	4637      	mov	r7, r6
 800c556:	2800      	cmp	r0, #0
 800c558:	f040 8245 	bne.w	800c9e6 <_dtoa_r+0x93e>
 800c55c:	9d01      	ldr	r5, [sp, #4]
 800c55e:	2331      	movs	r3, #49	; 0x31
 800c560:	f805 3b01 	strb.w	r3, [r5], #1
 800c564:	9b00      	ldr	r3, [sp, #0]
 800c566:	3301      	adds	r3, #1
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	e240      	b.n	800c9ee <_dtoa_r+0x946>
 800c56c:	07f2      	lsls	r2, r6, #31
 800c56e:	d505      	bpl.n	800c57c <_dtoa_r+0x4d4>
 800c570:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c574:	f7f4 f860 	bl	8000638 <__aeabi_dmul>
 800c578:	3501      	adds	r5, #1
 800c57a:	2301      	movs	r3, #1
 800c57c:	1076      	asrs	r6, r6, #1
 800c57e:	3708      	adds	r7, #8
 800c580:	e777      	b.n	800c472 <_dtoa_r+0x3ca>
 800c582:	2502      	movs	r5, #2
 800c584:	e779      	b.n	800c47a <_dtoa_r+0x3d2>
 800c586:	9f00      	ldr	r7, [sp, #0]
 800c588:	9e03      	ldr	r6, [sp, #12]
 800c58a:	e794      	b.n	800c4b6 <_dtoa_r+0x40e>
 800c58c:	9901      	ldr	r1, [sp, #4]
 800c58e:	4b4c      	ldr	r3, [pc, #304]	; (800c6c0 <_dtoa_r+0x618>)
 800c590:	4431      	add	r1, r6
 800c592:	910d      	str	r1, [sp, #52]	; 0x34
 800c594:	9908      	ldr	r1, [sp, #32]
 800c596:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c59a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c59e:	2900      	cmp	r1, #0
 800c5a0:	d043      	beq.n	800c62a <_dtoa_r+0x582>
 800c5a2:	494d      	ldr	r1, [pc, #308]	; (800c6d8 <_dtoa_r+0x630>)
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	f7f4 f971 	bl	800088c <__aeabi_ddiv>
 800c5aa:	4652      	mov	r2, sl
 800c5ac:	465b      	mov	r3, fp
 800c5ae:	f7f3 fe8b 	bl	80002c8 <__aeabi_dsub>
 800c5b2:	9d01      	ldr	r5, [sp, #4]
 800c5b4:	4682      	mov	sl, r0
 800c5b6:	468b      	mov	fp, r1
 800c5b8:	4649      	mov	r1, r9
 800c5ba:	4640      	mov	r0, r8
 800c5bc:	f7f4 faec 	bl	8000b98 <__aeabi_d2iz>
 800c5c0:	4606      	mov	r6, r0
 800c5c2:	f7f3 ffcf 	bl	8000564 <__aeabi_i2d>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	4640      	mov	r0, r8
 800c5cc:	4649      	mov	r1, r9
 800c5ce:	f7f3 fe7b 	bl	80002c8 <__aeabi_dsub>
 800c5d2:	3630      	adds	r6, #48	; 0x30
 800c5d4:	f805 6b01 	strb.w	r6, [r5], #1
 800c5d8:	4652      	mov	r2, sl
 800c5da:	465b      	mov	r3, fp
 800c5dc:	4680      	mov	r8, r0
 800c5de:	4689      	mov	r9, r1
 800c5e0:	f7f4 fa9c 	bl	8000b1c <__aeabi_dcmplt>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	d163      	bne.n	800c6b0 <_dtoa_r+0x608>
 800c5e8:	4642      	mov	r2, r8
 800c5ea:	464b      	mov	r3, r9
 800c5ec:	4936      	ldr	r1, [pc, #216]	; (800c6c8 <_dtoa_r+0x620>)
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	f7f3 fe6a 	bl	80002c8 <__aeabi_dsub>
 800c5f4:	4652      	mov	r2, sl
 800c5f6:	465b      	mov	r3, fp
 800c5f8:	f7f4 fa90 	bl	8000b1c <__aeabi_dcmplt>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	f040 80b5 	bne.w	800c76c <_dtoa_r+0x6c4>
 800c602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c604:	429d      	cmp	r5, r3
 800c606:	d081      	beq.n	800c50c <_dtoa_r+0x464>
 800c608:	4b30      	ldr	r3, [pc, #192]	; (800c6cc <_dtoa_r+0x624>)
 800c60a:	2200      	movs	r2, #0
 800c60c:	4650      	mov	r0, sl
 800c60e:	4659      	mov	r1, fp
 800c610:	f7f4 f812 	bl	8000638 <__aeabi_dmul>
 800c614:	4b2d      	ldr	r3, [pc, #180]	; (800c6cc <_dtoa_r+0x624>)
 800c616:	4682      	mov	sl, r0
 800c618:	468b      	mov	fp, r1
 800c61a:	4640      	mov	r0, r8
 800c61c:	4649      	mov	r1, r9
 800c61e:	2200      	movs	r2, #0
 800c620:	f7f4 f80a 	bl	8000638 <__aeabi_dmul>
 800c624:	4680      	mov	r8, r0
 800c626:	4689      	mov	r9, r1
 800c628:	e7c6      	b.n	800c5b8 <_dtoa_r+0x510>
 800c62a:	4650      	mov	r0, sl
 800c62c:	4659      	mov	r1, fp
 800c62e:	f7f4 f803 	bl	8000638 <__aeabi_dmul>
 800c632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c634:	9d01      	ldr	r5, [sp, #4]
 800c636:	930f      	str	r3, [sp, #60]	; 0x3c
 800c638:	4682      	mov	sl, r0
 800c63a:	468b      	mov	fp, r1
 800c63c:	4649      	mov	r1, r9
 800c63e:	4640      	mov	r0, r8
 800c640:	f7f4 faaa 	bl	8000b98 <__aeabi_d2iz>
 800c644:	4606      	mov	r6, r0
 800c646:	f7f3 ff8d 	bl	8000564 <__aeabi_i2d>
 800c64a:	3630      	adds	r6, #48	; 0x30
 800c64c:	4602      	mov	r2, r0
 800c64e:	460b      	mov	r3, r1
 800c650:	4640      	mov	r0, r8
 800c652:	4649      	mov	r1, r9
 800c654:	f7f3 fe38 	bl	80002c8 <__aeabi_dsub>
 800c658:	f805 6b01 	strb.w	r6, [r5], #1
 800c65c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c65e:	429d      	cmp	r5, r3
 800c660:	4680      	mov	r8, r0
 800c662:	4689      	mov	r9, r1
 800c664:	f04f 0200 	mov.w	r2, #0
 800c668:	d124      	bne.n	800c6b4 <_dtoa_r+0x60c>
 800c66a:	4b1b      	ldr	r3, [pc, #108]	; (800c6d8 <_dtoa_r+0x630>)
 800c66c:	4650      	mov	r0, sl
 800c66e:	4659      	mov	r1, fp
 800c670:	f7f3 fe2c 	bl	80002cc <__adddf3>
 800c674:	4602      	mov	r2, r0
 800c676:	460b      	mov	r3, r1
 800c678:	4640      	mov	r0, r8
 800c67a:	4649      	mov	r1, r9
 800c67c:	f7f4 fa6c 	bl	8000b58 <__aeabi_dcmpgt>
 800c680:	2800      	cmp	r0, #0
 800c682:	d173      	bne.n	800c76c <_dtoa_r+0x6c4>
 800c684:	4652      	mov	r2, sl
 800c686:	465b      	mov	r3, fp
 800c688:	4913      	ldr	r1, [pc, #76]	; (800c6d8 <_dtoa_r+0x630>)
 800c68a:	2000      	movs	r0, #0
 800c68c:	f7f3 fe1c 	bl	80002c8 <__aeabi_dsub>
 800c690:	4602      	mov	r2, r0
 800c692:	460b      	mov	r3, r1
 800c694:	4640      	mov	r0, r8
 800c696:	4649      	mov	r1, r9
 800c698:	f7f4 fa40 	bl	8000b1c <__aeabi_dcmplt>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	f43f af35 	beq.w	800c50c <_dtoa_r+0x464>
 800c6a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c6a4:	1e6b      	subs	r3, r5, #1
 800c6a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c6ac:	2b30      	cmp	r3, #48	; 0x30
 800c6ae:	d0f8      	beq.n	800c6a2 <_dtoa_r+0x5fa>
 800c6b0:	9700      	str	r7, [sp, #0]
 800c6b2:	e049      	b.n	800c748 <_dtoa_r+0x6a0>
 800c6b4:	4b05      	ldr	r3, [pc, #20]	; (800c6cc <_dtoa_r+0x624>)
 800c6b6:	f7f3 ffbf 	bl	8000638 <__aeabi_dmul>
 800c6ba:	4680      	mov	r8, r0
 800c6bc:	4689      	mov	r9, r1
 800c6be:	e7bd      	b.n	800c63c <_dtoa_r+0x594>
 800c6c0:	0800fba0 	.word	0x0800fba0
 800c6c4:	0800fb78 	.word	0x0800fb78
 800c6c8:	3ff00000 	.word	0x3ff00000
 800c6cc:	40240000 	.word	0x40240000
 800c6d0:	401c0000 	.word	0x401c0000
 800c6d4:	40140000 	.word	0x40140000
 800c6d8:	3fe00000 	.word	0x3fe00000
 800c6dc:	9d01      	ldr	r5, [sp, #4]
 800c6de:	4656      	mov	r6, sl
 800c6e0:	465f      	mov	r7, fp
 800c6e2:	4642      	mov	r2, r8
 800c6e4:	464b      	mov	r3, r9
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	4639      	mov	r1, r7
 800c6ea:	f7f4 f8cf 	bl	800088c <__aeabi_ddiv>
 800c6ee:	f7f4 fa53 	bl	8000b98 <__aeabi_d2iz>
 800c6f2:	4682      	mov	sl, r0
 800c6f4:	f7f3 ff36 	bl	8000564 <__aeabi_i2d>
 800c6f8:	4642      	mov	r2, r8
 800c6fa:	464b      	mov	r3, r9
 800c6fc:	f7f3 ff9c 	bl	8000638 <__aeabi_dmul>
 800c700:	4602      	mov	r2, r0
 800c702:	460b      	mov	r3, r1
 800c704:	4630      	mov	r0, r6
 800c706:	4639      	mov	r1, r7
 800c708:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c70c:	f7f3 fddc 	bl	80002c8 <__aeabi_dsub>
 800c710:	f805 6b01 	strb.w	r6, [r5], #1
 800c714:	9e01      	ldr	r6, [sp, #4]
 800c716:	9f03      	ldr	r7, [sp, #12]
 800c718:	1bae      	subs	r6, r5, r6
 800c71a:	42b7      	cmp	r7, r6
 800c71c:	4602      	mov	r2, r0
 800c71e:	460b      	mov	r3, r1
 800c720:	d135      	bne.n	800c78e <_dtoa_r+0x6e6>
 800c722:	f7f3 fdd3 	bl	80002cc <__adddf3>
 800c726:	4642      	mov	r2, r8
 800c728:	464b      	mov	r3, r9
 800c72a:	4606      	mov	r6, r0
 800c72c:	460f      	mov	r7, r1
 800c72e:	f7f4 fa13 	bl	8000b58 <__aeabi_dcmpgt>
 800c732:	b9d0      	cbnz	r0, 800c76a <_dtoa_r+0x6c2>
 800c734:	4642      	mov	r2, r8
 800c736:	464b      	mov	r3, r9
 800c738:	4630      	mov	r0, r6
 800c73a:	4639      	mov	r1, r7
 800c73c:	f7f4 f9e4 	bl	8000b08 <__aeabi_dcmpeq>
 800c740:	b110      	cbz	r0, 800c748 <_dtoa_r+0x6a0>
 800c742:	f01a 0f01 	tst.w	sl, #1
 800c746:	d110      	bne.n	800c76a <_dtoa_r+0x6c2>
 800c748:	4620      	mov	r0, r4
 800c74a:	ee18 1a10 	vmov	r1, s16
 800c74e:	f000 faf3 	bl	800cd38 <_Bfree>
 800c752:	2300      	movs	r3, #0
 800c754:	9800      	ldr	r0, [sp, #0]
 800c756:	702b      	strb	r3, [r5, #0]
 800c758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c75a:	3001      	adds	r0, #1
 800c75c:	6018      	str	r0, [r3, #0]
 800c75e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c760:	2b00      	cmp	r3, #0
 800c762:	f43f acf1 	beq.w	800c148 <_dtoa_r+0xa0>
 800c766:	601d      	str	r5, [r3, #0]
 800c768:	e4ee      	b.n	800c148 <_dtoa_r+0xa0>
 800c76a:	9f00      	ldr	r7, [sp, #0]
 800c76c:	462b      	mov	r3, r5
 800c76e:	461d      	mov	r5, r3
 800c770:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c774:	2a39      	cmp	r2, #57	; 0x39
 800c776:	d106      	bne.n	800c786 <_dtoa_r+0x6de>
 800c778:	9a01      	ldr	r2, [sp, #4]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d1f7      	bne.n	800c76e <_dtoa_r+0x6c6>
 800c77e:	9901      	ldr	r1, [sp, #4]
 800c780:	2230      	movs	r2, #48	; 0x30
 800c782:	3701      	adds	r7, #1
 800c784:	700a      	strb	r2, [r1, #0]
 800c786:	781a      	ldrb	r2, [r3, #0]
 800c788:	3201      	adds	r2, #1
 800c78a:	701a      	strb	r2, [r3, #0]
 800c78c:	e790      	b.n	800c6b0 <_dtoa_r+0x608>
 800c78e:	4ba6      	ldr	r3, [pc, #664]	; (800ca28 <_dtoa_r+0x980>)
 800c790:	2200      	movs	r2, #0
 800c792:	f7f3 ff51 	bl	8000638 <__aeabi_dmul>
 800c796:	2200      	movs	r2, #0
 800c798:	2300      	movs	r3, #0
 800c79a:	4606      	mov	r6, r0
 800c79c:	460f      	mov	r7, r1
 800c79e:	f7f4 f9b3 	bl	8000b08 <__aeabi_dcmpeq>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	d09d      	beq.n	800c6e2 <_dtoa_r+0x63a>
 800c7a6:	e7cf      	b.n	800c748 <_dtoa_r+0x6a0>
 800c7a8:	9a08      	ldr	r2, [sp, #32]
 800c7aa:	2a00      	cmp	r2, #0
 800c7ac:	f000 80d7 	beq.w	800c95e <_dtoa_r+0x8b6>
 800c7b0:	9a06      	ldr	r2, [sp, #24]
 800c7b2:	2a01      	cmp	r2, #1
 800c7b4:	f300 80ba 	bgt.w	800c92c <_dtoa_r+0x884>
 800c7b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7ba:	2a00      	cmp	r2, #0
 800c7bc:	f000 80b2 	beq.w	800c924 <_dtoa_r+0x87c>
 800c7c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c7c4:	9e07      	ldr	r6, [sp, #28]
 800c7c6:	9d04      	ldr	r5, [sp, #16]
 800c7c8:	9a04      	ldr	r2, [sp, #16]
 800c7ca:	441a      	add	r2, r3
 800c7cc:	9204      	str	r2, [sp, #16]
 800c7ce:	9a05      	ldr	r2, [sp, #20]
 800c7d0:	2101      	movs	r1, #1
 800c7d2:	441a      	add	r2, r3
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	9205      	str	r2, [sp, #20]
 800c7d8:	f000 fb66 	bl	800cea8 <__i2b>
 800c7dc:	4607      	mov	r7, r0
 800c7de:	2d00      	cmp	r5, #0
 800c7e0:	dd0c      	ble.n	800c7fc <_dtoa_r+0x754>
 800c7e2:	9b05      	ldr	r3, [sp, #20]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	dd09      	ble.n	800c7fc <_dtoa_r+0x754>
 800c7e8:	42ab      	cmp	r3, r5
 800c7ea:	9a04      	ldr	r2, [sp, #16]
 800c7ec:	bfa8      	it	ge
 800c7ee:	462b      	movge	r3, r5
 800c7f0:	1ad2      	subs	r2, r2, r3
 800c7f2:	9204      	str	r2, [sp, #16]
 800c7f4:	9a05      	ldr	r2, [sp, #20]
 800c7f6:	1aed      	subs	r5, r5, r3
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	9305      	str	r3, [sp, #20]
 800c7fc:	9b07      	ldr	r3, [sp, #28]
 800c7fe:	b31b      	cbz	r3, 800c848 <_dtoa_r+0x7a0>
 800c800:	9b08      	ldr	r3, [sp, #32]
 800c802:	2b00      	cmp	r3, #0
 800c804:	f000 80af 	beq.w	800c966 <_dtoa_r+0x8be>
 800c808:	2e00      	cmp	r6, #0
 800c80a:	dd13      	ble.n	800c834 <_dtoa_r+0x78c>
 800c80c:	4639      	mov	r1, r7
 800c80e:	4632      	mov	r2, r6
 800c810:	4620      	mov	r0, r4
 800c812:	f000 fc09 	bl	800d028 <__pow5mult>
 800c816:	ee18 2a10 	vmov	r2, s16
 800c81a:	4601      	mov	r1, r0
 800c81c:	4607      	mov	r7, r0
 800c81e:	4620      	mov	r0, r4
 800c820:	f000 fb58 	bl	800ced4 <__multiply>
 800c824:	ee18 1a10 	vmov	r1, s16
 800c828:	4680      	mov	r8, r0
 800c82a:	4620      	mov	r0, r4
 800c82c:	f000 fa84 	bl	800cd38 <_Bfree>
 800c830:	ee08 8a10 	vmov	s16, r8
 800c834:	9b07      	ldr	r3, [sp, #28]
 800c836:	1b9a      	subs	r2, r3, r6
 800c838:	d006      	beq.n	800c848 <_dtoa_r+0x7a0>
 800c83a:	ee18 1a10 	vmov	r1, s16
 800c83e:	4620      	mov	r0, r4
 800c840:	f000 fbf2 	bl	800d028 <__pow5mult>
 800c844:	ee08 0a10 	vmov	s16, r0
 800c848:	2101      	movs	r1, #1
 800c84a:	4620      	mov	r0, r4
 800c84c:	f000 fb2c 	bl	800cea8 <__i2b>
 800c850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c852:	2b00      	cmp	r3, #0
 800c854:	4606      	mov	r6, r0
 800c856:	f340 8088 	ble.w	800c96a <_dtoa_r+0x8c2>
 800c85a:	461a      	mov	r2, r3
 800c85c:	4601      	mov	r1, r0
 800c85e:	4620      	mov	r0, r4
 800c860:	f000 fbe2 	bl	800d028 <__pow5mult>
 800c864:	9b06      	ldr	r3, [sp, #24]
 800c866:	2b01      	cmp	r3, #1
 800c868:	4606      	mov	r6, r0
 800c86a:	f340 8081 	ble.w	800c970 <_dtoa_r+0x8c8>
 800c86e:	f04f 0800 	mov.w	r8, #0
 800c872:	6933      	ldr	r3, [r6, #16]
 800c874:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c878:	6918      	ldr	r0, [r3, #16]
 800c87a:	f000 fac5 	bl	800ce08 <__hi0bits>
 800c87e:	f1c0 0020 	rsb	r0, r0, #32
 800c882:	9b05      	ldr	r3, [sp, #20]
 800c884:	4418      	add	r0, r3
 800c886:	f010 001f 	ands.w	r0, r0, #31
 800c88a:	f000 8092 	beq.w	800c9b2 <_dtoa_r+0x90a>
 800c88e:	f1c0 0320 	rsb	r3, r0, #32
 800c892:	2b04      	cmp	r3, #4
 800c894:	f340 808a 	ble.w	800c9ac <_dtoa_r+0x904>
 800c898:	f1c0 001c 	rsb	r0, r0, #28
 800c89c:	9b04      	ldr	r3, [sp, #16]
 800c89e:	4403      	add	r3, r0
 800c8a0:	9304      	str	r3, [sp, #16]
 800c8a2:	9b05      	ldr	r3, [sp, #20]
 800c8a4:	4403      	add	r3, r0
 800c8a6:	4405      	add	r5, r0
 800c8a8:	9305      	str	r3, [sp, #20]
 800c8aa:	9b04      	ldr	r3, [sp, #16]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	dd07      	ble.n	800c8c0 <_dtoa_r+0x818>
 800c8b0:	ee18 1a10 	vmov	r1, s16
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f000 fc10 	bl	800d0dc <__lshift>
 800c8bc:	ee08 0a10 	vmov	s16, r0
 800c8c0:	9b05      	ldr	r3, [sp, #20]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	dd05      	ble.n	800c8d2 <_dtoa_r+0x82a>
 800c8c6:	4631      	mov	r1, r6
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f000 fc06 	bl	800d0dc <__lshift>
 800c8d0:	4606      	mov	r6, r0
 800c8d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d06e      	beq.n	800c9b6 <_dtoa_r+0x90e>
 800c8d8:	ee18 0a10 	vmov	r0, s16
 800c8dc:	4631      	mov	r1, r6
 800c8de:	f000 fc6d 	bl	800d1bc <__mcmp>
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	da67      	bge.n	800c9b6 <_dtoa_r+0x90e>
 800c8e6:	9b00      	ldr	r3, [sp, #0]
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	ee18 1a10 	vmov	r1, s16
 800c8ee:	9300      	str	r3, [sp, #0]
 800c8f0:	220a      	movs	r2, #10
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f000 fa41 	bl	800cd7c <__multadd>
 800c8fa:	9b08      	ldr	r3, [sp, #32]
 800c8fc:	ee08 0a10 	vmov	s16, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	f000 81b1 	beq.w	800cc68 <_dtoa_r+0xbc0>
 800c906:	2300      	movs	r3, #0
 800c908:	4639      	mov	r1, r7
 800c90a:	220a      	movs	r2, #10
 800c90c:	4620      	mov	r0, r4
 800c90e:	f000 fa35 	bl	800cd7c <__multadd>
 800c912:	9b02      	ldr	r3, [sp, #8]
 800c914:	2b00      	cmp	r3, #0
 800c916:	4607      	mov	r7, r0
 800c918:	f300 808e 	bgt.w	800ca38 <_dtoa_r+0x990>
 800c91c:	9b06      	ldr	r3, [sp, #24]
 800c91e:	2b02      	cmp	r3, #2
 800c920:	dc51      	bgt.n	800c9c6 <_dtoa_r+0x91e>
 800c922:	e089      	b.n	800ca38 <_dtoa_r+0x990>
 800c924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c926:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c92a:	e74b      	b.n	800c7c4 <_dtoa_r+0x71c>
 800c92c:	9b03      	ldr	r3, [sp, #12]
 800c92e:	1e5e      	subs	r6, r3, #1
 800c930:	9b07      	ldr	r3, [sp, #28]
 800c932:	42b3      	cmp	r3, r6
 800c934:	bfbf      	itttt	lt
 800c936:	9b07      	ldrlt	r3, [sp, #28]
 800c938:	9607      	strlt	r6, [sp, #28]
 800c93a:	1af2      	sublt	r2, r6, r3
 800c93c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c93e:	bfb6      	itet	lt
 800c940:	189b      	addlt	r3, r3, r2
 800c942:	1b9e      	subge	r6, r3, r6
 800c944:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c946:	9b03      	ldr	r3, [sp, #12]
 800c948:	bfb8      	it	lt
 800c94a:	2600      	movlt	r6, #0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	bfb7      	itett	lt
 800c950:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c954:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c958:	1a9d      	sublt	r5, r3, r2
 800c95a:	2300      	movlt	r3, #0
 800c95c:	e734      	b.n	800c7c8 <_dtoa_r+0x720>
 800c95e:	9e07      	ldr	r6, [sp, #28]
 800c960:	9d04      	ldr	r5, [sp, #16]
 800c962:	9f08      	ldr	r7, [sp, #32]
 800c964:	e73b      	b.n	800c7de <_dtoa_r+0x736>
 800c966:	9a07      	ldr	r2, [sp, #28]
 800c968:	e767      	b.n	800c83a <_dtoa_r+0x792>
 800c96a:	9b06      	ldr	r3, [sp, #24]
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	dc18      	bgt.n	800c9a2 <_dtoa_r+0x8fa>
 800c970:	f1ba 0f00 	cmp.w	sl, #0
 800c974:	d115      	bne.n	800c9a2 <_dtoa_r+0x8fa>
 800c976:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c97a:	b993      	cbnz	r3, 800c9a2 <_dtoa_r+0x8fa>
 800c97c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c980:	0d1b      	lsrs	r3, r3, #20
 800c982:	051b      	lsls	r3, r3, #20
 800c984:	b183      	cbz	r3, 800c9a8 <_dtoa_r+0x900>
 800c986:	9b04      	ldr	r3, [sp, #16]
 800c988:	3301      	adds	r3, #1
 800c98a:	9304      	str	r3, [sp, #16]
 800c98c:	9b05      	ldr	r3, [sp, #20]
 800c98e:	3301      	adds	r3, #1
 800c990:	9305      	str	r3, [sp, #20]
 800c992:	f04f 0801 	mov.w	r8, #1
 800c996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f47f af6a 	bne.w	800c872 <_dtoa_r+0x7ca>
 800c99e:	2001      	movs	r0, #1
 800c9a0:	e76f      	b.n	800c882 <_dtoa_r+0x7da>
 800c9a2:	f04f 0800 	mov.w	r8, #0
 800c9a6:	e7f6      	b.n	800c996 <_dtoa_r+0x8ee>
 800c9a8:	4698      	mov	r8, r3
 800c9aa:	e7f4      	b.n	800c996 <_dtoa_r+0x8ee>
 800c9ac:	f43f af7d 	beq.w	800c8aa <_dtoa_r+0x802>
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	301c      	adds	r0, #28
 800c9b4:	e772      	b.n	800c89c <_dtoa_r+0x7f4>
 800c9b6:	9b03      	ldr	r3, [sp, #12]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	dc37      	bgt.n	800ca2c <_dtoa_r+0x984>
 800c9bc:	9b06      	ldr	r3, [sp, #24]
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	dd34      	ble.n	800ca2c <_dtoa_r+0x984>
 800c9c2:	9b03      	ldr	r3, [sp, #12]
 800c9c4:	9302      	str	r3, [sp, #8]
 800c9c6:	9b02      	ldr	r3, [sp, #8]
 800c9c8:	b96b      	cbnz	r3, 800c9e6 <_dtoa_r+0x93e>
 800c9ca:	4631      	mov	r1, r6
 800c9cc:	2205      	movs	r2, #5
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f000 f9d4 	bl	800cd7c <__multadd>
 800c9d4:	4601      	mov	r1, r0
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	ee18 0a10 	vmov	r0, s16
 800c9dc:	f000 fbee 	bl	800d1bc <__mcmp>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	f73f adbb 	bgt.w	800c55c <_dtoa_r+0x4b4>
 800c9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9e8:	9d01      	ldr	r5, [sp, #4]
 800c9ea:	43db      	mvns	r3, r3
 800c9ec:	9300      	str	r3, [sp, #0]
 800c9ee:	f04f 0800 	mov.w	r8, #0
 800c9f2:	4631      	mov	r1, r6
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f000 f99f 	bl	800cd38 <_Bfree>
 800c9fa:	2f00      	cmp	r7, #0
 800c9fc:	f43f aea4 	beq.w	800c748 <_dtoa_r+0x6a0>
 800ca00:	f1b8 0f00 	cmp.w	r8, #0
 800ca04:	d005      	beq.n	800ca12 <_dtoa_r+0x96a>
 800ca06:	45b8      	cmp	r8, r7
 800ca08:	d003      	beq.n	800ca12 <_dtoa_r+0x96a>
 800ca0a:	4641      	mov	r1, r8
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	f000 f993 	bl	800cd38 <_Bfree>
 800ca12:	4639      	mov	r1, r7
 800ca14:	4620      	mov	r0, r4
 800ca16:	f000 f98f 	bl	800cd38 <_Bfree>
 800ca1a:	e695      	b.n	800c748 <_dtoa_r+0x6a0>
 800ca1c:	2600      	movs	r6, #0
 800ca1e:	4637      	mov	r7, r6
 800ca20:	e7e1      	b.n	800c9e6 <_dtoa_r+0x93e>
 800ca22:	9700      	str	r7, [sp, #0]
 800ca24:	4637      	mov	r7, r6
 800ca26:	e599      	b.n	800c55c <_dtoa_r+0x4b4>
 800ca28:	40240000 	.word	0x40240000
 800ca2c:	9b08      	ldr	r3, [sp, #32]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	f000 80ca 	beq.w	800cbc8 <_dtoa_r+0xb20>
 800ca34:	9b03      	ldr	r3, [sp, #12]
 800ca36:	9302      	str	r3, [sp, #8]
 800ca38:	2d00      	cmp	r5, #0
 800ca3a:	dd05      	ble.n	800ca48 <_dtoa_r+0x9a0>
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	462a      	mov	r2, r5
 800ca40:	4620      	mov	r0, r4
 800ca42:	f000 fb4b 	bl	800d0dc <__lshift>
 800ca46:	4607      	mov	r7, r0
 800ca48:	f1b8 0f00 	cmp.w	r8, #0
 800ca4c:	d05b      	beq.n	800cb06 <_dtoa_r+0xa5e>
 800ca4e:	6879      	ldr	r1, [r7, #4]
 800ca50:	4620      	mov	r0, r4
 800ca52:	f000 f931 	bl	800ccb8 <_Balloc>
 800ca56:	4605      	mov	r5, r0
 800ca58:	b928      	cbnz	r0, 800ca66 <_dtoa_r+0x9be>
 800ca5a:	4b87      	ldr	r3, [pc, #540]	; (800cc78 <_dtoa_r+0xbd0>)
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ca62:	f7ff bb3b 	b.w	800c0dc <_dtoa_r+0x34>
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	3202      	adds	r2, #2
 800ca6a:	0092      	lsls	r2, r2, #2
 800ca6c:	f107 010c 	add.w	r1, r7, #12
 800ca70:	300c      	adds	r0, #12
 800ca72:	f000 f913 	bl	800cc9c <memcpy>
 800ca76:	2201      	movs	r2, #1
 800ca78:	4629      	mov	r1, r5
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f000 fb2e 	bl	800d0dc <__lshift>
 800ca80:	9b01      	ldr	r3, [sp, #4]
 800ca82:	f103 0901 	add.w	r9, r3, #1
 800ca86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	9305      	str	r3, [sp, #20]
 800ca8e:	f00a 0301 	and.w	r3, sl, #1
 800ca92:	46b8      	mov	r8, r7
 800ca94:	9304      	str	r3, [sp, #16]
 800ca96:	4607      	mov	r7, r0
 800ca98:	4631      	mov	r1, r6
 800ca9a:	ee18 0a10 	vmov	r0, s16
 800ca9e:	f7ff fa77 	bl	800bf90 <quorem>
 800caa2:	4641      	mov	r1, r8
 800caa4:	9002      	str	r0, [sp, #8]
 800caa6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800caaa:	ee18 0a10 	vmov	r0, s16
 800caae:	f000 fb85 	bl	800d1bc <__mcmp>
 800cab2:	463a      	mov	r2, r7
 800cab4:	9003      	str	r0, [sp, #12]
 800cab6:	4631      	mov	r1, r6
 800cab8:	4620      	mov	r0, r4
 800caba:	f000 fb9b 	bl	800d1f4 <__mdiff>
 800cabe:	68c2      	ldr	r2, [r0, #12]
 800cac0:	f109 3bff 	add.w	fp, r9, #4294967295
 800cac4:	4605      	mov	r5, r0
 800cac6:	bb02      	cbnz	r2, 800cb0a <_dtoa_r+0xa62>
 800cac8:	4601      	mov	r1, r0
 800caca:	ee18 0a10 	vmov	r0, s16
 800cace:	f000 fb75 	bl	800d1bc <__mcmp>
 800cad2:	4602      	mov	r2, r0
 800cad4:	4629      	mov	r1, r5
 800cad6:	4620      	mov	r0, r4
 800cad8:	9207      	str	r2, [sp, #28]
 800cada:	f000 f92d 	bl	800cd38 <_Bfree>
 800cade:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cae2:	ea43 0102 	orr.w	r1, r3, r2
 800cae6:	9b04      	ldr	r3, [sp, #16]
 800cae8:	430b      	orrs	r3, r1
 800caea:	464d      	mov	r5, r9
 800caec:	d10f      	bne.n	800cb0e <_dtoa_r+0xa66>
 800caee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800caf2:	d02a      	beq.n	800cb4a <_dtoa_r+0xaa2>
 800caf4:	9b03      	ldr	r3, [sp, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	dd02      	ble.n	800cb00 <_dtoa_r+0xa58>
 800cafa:	9b02      	ldr	r3, [sp, #8]
 800cafc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cb00:	f88b a000 	strb.w	sl, [fp]
 800cb04:	e775      	b.n	800c9f2 <_dtoa_r+0x94a>
 800cb06:	4638      	mov	r0, r7
 800cb08:	e7ba      	b.n	800ca80 <_dtoa_r+0x9d8>
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	e7e2      	b.n	800cad4 <_dtoa_r+0xa2c>
 800cb0e:	9b03      	ldr	r3, [sp, #12]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	db04      	blt.n	800cb1e <_dtoa_r+0xa76>
 800cb14:	9906      	ldr	r1, [sp, #24]
 800cb16:	430b      	orrs	r3, r1
 800cb18:	9904      	ldr	r1, [sp, #16]
 800cb1a:	430b      	orrs	r3, r1
 800cb1c:	d122      	bne.n	800cb64 <_dtoa_r+0xabc>
 800cb1e:	2a00      	cmp	r2, #0
 800cb20:	ddee      	ble.n	800cb00 <_dtoa_r+0xa58>
 800cb22:	ee18 1a10 	vmov	r1, s16
 800cb26:	2201      	movs	r2, #1
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f000 fad7 	bl	800d0dc <__lshift>
 800cb2e:	4631      	mov	r1, r6
 800cb30:	ee08 0a10 	vmov	s16, r0
 800cb34:	f000 fb42 	bl	800d1bc <__mcmp>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	dc03      	bgt.n	800cb44 <_dtoa_r+0xa9c>
 800cb3c:	d1e0      	bne.n	800cb00 <_dtoa_r+0xa58>
 800cb3e:	f01a 0f01 	tst.w	sl, #1
 800cb42:	d0dd      	beq.n	800cb00 <_dtoa_r+0xa58>
 800cb44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb48:	d1d7      	bne.n	800cafa <_dtoa_r+0xa52>
 800cb4a:	2339      	movs	r3, #57	; 0x39
 800cb4c:	f88b 3000 	strb.w	r3, [fp]
 800cb50:	462b      	mov	r3, r5
 800cb52:	461d      	mov	r5, r3
 800cb54:	3b01      	subs	r3, #1
 800cb56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cb5a:	2a39      	cmp	r2, #57	; 0x39
 800cb5c:	d071      	beq.n	800cc42 <_dtoa_r+0xb9a>
 800cb5e:	3201      	adds	r2, #1
 800cb60:	701a      	strb	r2, [r3, #0]
 800cb62:	e746      	b.n	800c9f2 <_dtoa_r+0x94a>
 800cb64:	2a00      	cmp	r2, #0
 800cb66:	dd07      	ble.n	800cb78 <_dtoa_r+0xad0>
 800cb68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb6c:	d0ed      	beq.n	800cb4a <_dtoa_r+0xaa2>
 800cb6e:	f10a 0301 	add.w	r3, sl, #1
 800cb72:	f88b 3000 	strb.w	r3, [fp]
 800cb76:	e73c      	b.n	800c9f2 <_dtoa_r+0x94a>
 800cb78:	9b05      	ldr	r3, [sp, #20]
 800cb7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cb7e:	4599      	cmp	r9, r3
 800cb80:	d047      	beq.n	800cc12 <_dtoa_r+0xb6a>
 800cb82:	ee18 1a10 	vmov	r1, s16
 800cb86:	2300      	movs	r3, #0
 800cb88:	220a      	movs	r2, #10
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f000 f8f6 	bl	800cd7c <__multadd>
 800cb90:	45b8      	cmp	r8, r7
 800cb92:	ee08 0a10 	vmov	s16, r0
 800cb96:	f04f 0300 	mov.w	r3, #0
 800cb9a:	f04f 020a 	mov.w	r2, #10
 800cb9e:	4641      	mov	r1, r8
 800cba0:	4620      	mov	r0, r4
 800cba2:	d106      	bne.n	800cbb2 <_dtoa_r+0xb0a>
 800cba4:	f000 f8ea 	bl	800cd7c <__multadd>
 800cba8:	4680      	mov	r8, r0
 800cbaa:	4607      	mov	r7, r0
 800cbac:	f109 0901 	add.w	r9, r9, #1
 800cbb0:	e772      	b.n	800ca98 <_dtoa_r+0x9f0>
 800cbb2:	f000 f8e3 	bl	800cd7c <__multadd>
 800cbb6:	4639      	mov	r1, r7
 800cbb8:	4680      	mov	r8, r0
 800cbba:	2300      	movs	r3, #0
 800cbbc:	220a      	movs	r2, #10
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f000 f8dc 	bl	800cd7c <__multadd>
 800cbc4:	4607      	mov	r7, r0
 800cbc6:	e7f1      	b.n	800cbac <_dtoa_r+0xb04>
 800cbc8:	9b03      	ldr	r3, [sp, #12]
 800cbca:	9302      	str	r3, [sp, #8]
 800cbcc:	9d01      	ldr	r5, [sp, #4]
 800cbce:	ee18 0a10 	vmov	r0, s16
 800cbd2:	4631      	mov	r1, r6
 800cbd4:	f7ff f9dc 	bl	800bf90 <quorem>
 800cbd8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cbdc:	9b01      	ldr	r3, [sp, #4]
 800cbde:	f805 ab01 	strb.w	sl, [r5], #1
 800cbe2:	1aea      	subs	r2, r5, r3
 800cbe4:	9b02      	ldr	r3, [sp, #8]
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	dd09      	ble.n	800cbfe <_dtoa_r+0xb56>
 800cbea:	ee18 1a10 	vmov	r1, s16
 800cbee:	2300      	movs	r3, #0
 800cbf0:	220a      	movs	r2, #10
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	f000 f8c2 	bl	800cd7c <__multadd>
 800cbf8:	ee08 0a10 	vmov	s16, r0
 800cbfc:	e7e7      	b.n	800cbce <_dtoa_r+0xb26>
 800cbfe:	9b02      	ldr	r3, [sp, #8]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	bfc8      	it	gt
 800cc04:	461d      	movgt	r5, r3
 800cc06:	9b01      	ldr	r3, [sp, #4]
 800cc08:	bfd8      	it	le
 800cc0a:	2501      	movle	r5, #1
 800cc0c:	441d      	add	r5, r3
 800cc0e:	f04f 0800 	mov.w	r8, #0
 800cc12:	ee18 1a10 	vmov	r1, s16
 800cc16:	2201      	movs	r2, #1
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f000 fa5f 	bl	800d0dc <__lshift>
 800cc1e:	4631      	mov	r1, r6
 800cc20:	ee08 0a10 	vmov	s16, r0
 800cc24:	f000 faca 	bl	800d1bc <__mcmp>
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	dc91      	bgt.n	800cb50 <_dtoa_r+0xaa8>
 800cc2c:	d102      	bne.n	800cc34 <_dtoa_r+0xb8c>
 800cc2e:	f01a 0f01 	tst.w	sl, #1
 800cc32:	d18d      	bne.n	800cb50 <_dtoa_r+0xaa8>
 800cc34:	462b      	mov	r3, r5
 800cc36:	461d      	mov	r5, r3
 800cc38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc3c:	2a30      	cmp	r2, #48	; 0x30
 800cc3e:	d0fa      	beq.n	800cc36 <_dtoa_r+0xb8e>
 800cc40:	e6d7      	b.n	800c9f2 <_dtoa_r+0x94a>
 800cc42:	9a01      	ldr	r2, [sp, #4]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d184      	bne.n	800cb52 <_dtoa_r+0xaaa>
 800cc48:	9b00      	ldr	r3, [sp, #0]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	2331      	movs	r3, #49	; 0x31
 800cc50:	7013      	strb	r3, [r2, #0]
 800cc52:	e6ce      	b.n	800c9f2 <_dtoa_r+0x94a>
 800cc54:	4b09      	ldr	r3, [pc, #36]	; (800cc7c <_dtoa_r+0xbd4>)
 800cc56:	f7ff ba95 	b.w	800c184 <_dtoa_r+0xdc>
 800cc5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f47f aa6e 	bne.w	800c13e <_dtoa_r+0x96>
 800cc62:	4b07      	ldr	r3, [pc, #28]	; (800cc80 <_dtoa_r+0xbd8>)
 800cc64:	f7ff ba8e 	b.w	800c184 <_dtoa_r+0xdc>
 800cc68:	9b02      	ldr	r3, [sp, #8]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	dcae      	bgt.n	800cbcc <_dtoa_r+0xb24>
 800cc6e:	9b06      	ldr	r3, [sp, #24]
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	f73f aea8 	bgt.w	800c9c6 <_dtoa_r+0x91e>
 800cc76:	e7a9      	b.n	800cbcc <_dtoa_r+0xb24>
 800cc78:	0800fb07 	.word	0x0800fb07
 800cc7c:	0800fa64 	.word	0x0800fa64
 800cc80:	0800fa88 	.word	0x0800fa88

0800cc84 <_localeconv_r>:
 800cc84:	4800      	ldr	r0, [pc, #0]	; (800cc88 <_localeconv_r+0x4>)
 800cc86:	4770      	bx	lr
 800cc88:	200001d8 	.word	0x200001d8

0800cc8c <malloc>:
 800cc8c:	4b02      	ldr	r3, [pc, #8]	; (800cc98 <malloc+0xc>)
 800cc8e:	4601      	mov	r1, r0
 800cc90:	6818      	ldr	r0, [r3, #0]
 800cc92:	f000 bc17 	b.w	800d4c4 <_malloc_r>
 800cc96:	bf00      	nop
 800cc98:	20000084 	.word	0x20000084

0800cc9c <memcpy>:
 800cc9c:	440a      	add	r2, r1
 800cc9e:	4291      	cmp	r1, r2
 800cca0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cca4:	d100      	bne.n	800cca8 <memcpy+0xc>
 800cca6:	4770      	bx	lr
 800cca8:	b510      	push	{r4, lr}
 800ccaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccb2:	4291      	cmp	r1, r2
 800ccb4:	d1f9      	bne.n	800ccaa <memcpy+0xe>
 800ccb6:	bd10      	pop	{r4, pc}

0800ccb8 <_Balloc>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	460d      	mov	r5, r1
 800ccc0:	b976      	cbnz	r6, 800cce0 <_Balloc+0x28>
 800ccc2:	2010      	movs	r0, #16
 800ccc4:	f7ff ffe2 	bl	800cc8c <malloc>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	6260      	str	r0, [r4, #36]	; 0x24
 800cccc:	b920      	cbnz	r0, 800ccd8 <_Balloc+0x20>
 800ccce:	4b18      	ldr	r3, [pc, #96]	; (800cd30 <_Balloc+0x78>)
 800ccd0:	4818      	ldr	r0, [pc, #96]	; (800cd34 <_Balloc+0x7c>)
 800ccd2:	2166      	movs	r1, #102	; 0x66
 800ccd4:	f000 fdd6 	bl	800d884 <__assert_func>
 800ccd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccdc:	6006      	str	r6, [r0, #0]
 800ccde:	60c6      	str	r6, [r0, #12]
 800cce0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cce2:	68f3      	ldr	r3, [r6, #12]
 800cce4:	b183      	cbz	r3, 800cd08 <_Balloc+0x50>
 800cce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ccee:	b9b8      	cbnz	r0, 800cd20 <_Balloc+0x68>
 800ccf0:	2101      	movs	r1, #1
 800ccf2:	fa01 f605 	lsl.w	r6, r1, r5
 800ccf6:	1d72      	adds	r2, r6, #5
 800ccf8:	0092      	lsls	r2, r2, #2
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f000 fb60 	bl	800d3c0 <_calloc_r>
 800cd00:	b160      	cbz	r0, 800cd1c <_Balloc+0x64>
 800cd02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd06:	e00e      	b.n	800cd26 <_Balloc+0x6e>
 800cd08:	2221      	movs	r2, #33	; 0x21
 800cd0a:	2104      	movs	r1, #4
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f000 fb57 	bl	800d3c0 <_calloc_r>
 800cd12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd14:	60f0      	str	r0, [r6, #12]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d1e4      	bne.n	800cce6 <_Balloc+0x2e>
 800cd1c:	2000      	movs	r0, #0
 800cd1e:	bd70      	pop	{r4, r5, r6, pc}
 800cd20:	6802      	ldr	r2, [r0, #0]
 800cd22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd26:	2300      	movs	r3, #0
 800cd28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd2c:	e7f7      	b.n	800cd1e <_Balloc+0x66>
 800cd2e:	bf00      	nop
 800cd30:	0800fa95 	.word	0x0800fa95
 800cd34:	0800fb18 	.word	0x0800fb18

0800cd38 <_Bfree>:
 800cd38:	b570      	push	{r4, r5, r6, lr}
 800cd3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	460c      	mov	r4, r1
 800cd40:	b976      	cbnz	r6, 800cd60 <_Bfree+0x28>
 800cd42:	2010      	movs	r0, #16
 800cd44:	f7ff ffa2 	bl	800cc8c <malloc>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	6268      	str	r0, [r5, #36]	; 0x24
 800cd4c:	b920      	cbnz	r0, 800cd58 <_Bfree+0x20>
 800cd4e:	4b09      	ldr	r3, [pc, #36]	; (800cd74 <_Bfree+0x3c>)
 800cd50:	4809      	ldr	r0, [pc, #36]	; (800cd78 <_Bfree+0x40>)
 800cd52:	218a      	movs	r1, #138	; 0x8a
 800cd54:	f000 fd96 	bl	800d884 <__assert_func>
 800cd58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd5c:	6006      	str	r6, [r0, #0]
 800cd5e:	60c6      	str	r6, [r0, #12]
 800cd60:	b13c      	cbz	r4, 800cd72 <_Bfree+0x3a>
 800cd62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd64:	6862      	ldr	r2, [r4, #4]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd6c:	6021      	str	r1, [r4, #0]
 800cd6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd72:	bd70      	pop	{r4, r5, r6, pc}
 800cd74:	0800fa95 	.word	0x0800fa95
 800cd78:	0800fb18 	.word	0x0800fb18

0800cd7c <__multadd>:
 800cd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd80:	690d      	ldr	r5, [r1, #16]
 800cd82:	4607      	mov	r7, r0
 800cd84:	460c      	mov	r4, r1
 800cd86:	461e      	mov	r6, r3
 800cd88:	f101 0c14 	add.w	ip, r1, #20
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	f8dc 3000 	ldr.w	r3, [ip]
 800cd92:	b299      	uxth	r1, r3
 800cd94:	fb02 6101 	mla	r1, r2, r1, r6
 800cd98:	0c1e      	lsrs	r6, r3, #16
 800cd9a:	0c0b      	lsrs	r3, r1, #16
 800cd9c:	fb02 3306 	mla	r3, r2, r6, r3
 800cda0:	b289      	uxth	r1, r1
 800cda2:	3001      	adds	r0, #1
 800cda4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cda8:	4285      	cmp	r5, r0
 800cdaa:	f84c 1b04 	str.w	r1, [ip], #4
 800cdae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cdb2:	dcec      	bgt.n	800cd8e <__multadd+0x12>
 800cdb4:	b30e      	cbz	r6, 800cdfa <__multadd+0x7e>
 800cdb6:	68a3      	ldr	r3, [r4, #8]
 800cdb8:	42ab      	cmp	r3, r5
 800cdba:	dc19      	bgt.n	800cdf0 <__multadd+0x74>
 800cdbc:	6861      	ldr	r1, [r4, #4]
 800cdbe:	4638      	mov	r0, r7
 800cdc0:	3101      	adds	r1, #1
 800cdc2:	f7ff ff79 	bl	800ccb8 <_Balloc>
 800cdc6:	4680      	mov	r8, r0
 800cdc8:	b928      	cbnz	r0, 800cdd6 <__multadd+0x5a>
 800cdca:	4602      	mov	r2, r0
 800cdcc:	4b0c      	ldr	r3, [pc, #48]	; (800ce00 <__multadd+0x84>)
 800cdce:	480d      	ldr	r0, [pc, #52]	; (800ce04 <__multadd+0x88>)
 800cdd0:	21b5      	movs	r1, #181	; 0xb5
 800cdd2:	f000 fd57 	bl	800d884 <__assert_func>
 800cdd6:	6922      	ldr	r2, [r4, #16]
 800cdd8:	3202      	adds	r2, #2
 800cdda:	f104 010c 	add.w	r1, r4, #12
 800cdde:	0092      	lsls	r2, r2, #2
 800cde0:	300c      	adds	r0, #12
 800cde2:	f7ff ff5b 	bl	800cc9c <memcpy>
 800cde6:	4621      	mov	r1, r4
 800cde8:	4638      	mov	r0, r7
 800cdea:	f7ff ffa5 	bl	800cd38 <_Bfree>
 800cdee:	4644      	mov	r4, r8
 800cdf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cdf4:	3501      	adds	r5, #1
 800cdf6:	615e      	str	r6, [r3, #20]
 800cdf8:	6125      	str	r5, [r4, #16]
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce00:	0800fb07 	.word	0x0800fb07
 800ce04:	0800fb18 	.word	0x0800fb18

0800ce08 <__hi0bits>:
 800ce08:	0c03      	lsrs	r3, r0, #16
 800ce0a:	041b      	lsls	r3, r3, #16
 800ce0c:	b9d3      	cbnz	r3, 800ce44 <__hi0bits+0x3c>
 800ce0e:	0400      	lsls	r0, r0, #16
 800ce10:	2310      	movs	r3, #16
 800ce12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce16:	bf04      	itt	eq
 800ce18:	0200      	lsleq	r0, r0, #8
 800ce1a:	3308      	addeq	r3, #8
 800ce1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ce20:	bf04      	itt	eq
 800ce22:	0100      	lsleq	r0, r0, #4
 800ce24:	3304      	addeq	r3, #4
 800ce26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ce2a:	bf04      	itt	eq
 800ce2c:	0080      	lsleq	r0, r0, #2
 800ce2e:	3302      	addeq	r3, #2
 800ce30:	2800      	cmp	r0, #0
 800ce32:	db05      	blt.n	800ce40 <__hi0bits+0x38>
 800ce34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ce38:	f103 0301 	add.w	r3, r3, #1
 800ce3c:	bf08      	it	eq
 800ce3e:	2320      	moveq	r3, #32
 800ce40:	4618      	mov	r0, r3
 800ce42:	4770      	bx	lr
 800ce44:	2300      	movs	r3, #0
 800ce46:	e7e4      	b.n	800ce12 <__hi0bits+0xa>

0800ce48 <__lo0bits>:
 800ce48:	6803      	ldr	r3, [r0, #0]
 800ce4a:	f013 0207 	ands.w	r2, r3, #7
 800ce4e:	4601      	mov	r1, r0
 800ce50:	d00b      	beq.n	800ce6a <__lo0bits+0x22>
 800ce52:	07da      	lsls	r2, r3, #31
 800ce54:	d423      	bmi.n	800ce9e <__lo0bits+0x56>
 800ce56:	0798      	lsls	r0, r3, #30
 800ce58:	bf49      	itett	mi
 800ce5a:	085b      	lsrmi	r3, r3, #1
 800ce5c:	089b      	lsrpl	r3, r3, #2
 800ce5e:	2001      	movmi	r0, #1
 800ce60:	600b      	strmi	r3, [r1, #0]
 800ce62:	bf5c      	itt	pl
 800ce64:	600b      	strpl	r3, [r1, #0]
 800ce66:	2002      	movpl	r0, #2
 800ce68:	4770      	bx	lr
 800ce6a:	b298      	uxth	r0, r3
 800ce6c:	b9a8      	cbnz	r0, 800ce9a <__lo0bits+0x52>
 800ce6e:	0c1b      	lsrs	r3, r3, #16
 800ce70:	2010      	movs	r0, #16
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	b90a      	cbnz	r2, 800ce7a <__lo0bits+0x32>
 800ce76:	3008      	adds	r0, #8
 800ce78:	0a1b      	lsrs	r3, r3, #8
 800ce7a:	071a      	lsls	r2, r3, #28
 800ce7c:	bf04      	itt	eq
 800ce7e:	091b      	lsreq	r3, r3, #4
 800ce80:	3004      	addeq	r0, #4
 800ce82:	079a      	lsls	r2, r3, #30
 800ce84:	bf04      	itt	eq
 800ce86:	089b      	lsreq	r3, r3, #2
 800ce88:	3002      	addeq	r0, #2
 800ce8a:	07da      	lsls	r2, r3, #31
 800ce8c:	d403      	bmi.n	800ce96 <__lo0bits+0x4e>
 800ce8e:	085b      	lsrs	r3, r3, #1
 800ce90:	f100 0001 	add.w	r0, r0, #1
 800ce94:	d005      	beq.n	800cea2 <__lo0bits+0x5a>
 800ce96:	600b      	str	r3, [r1, #0]
 800ce98:	4770      	bx	lr
 800ce9a:	4610      	mov	r0, r2
 800ce9c:	e7e9      	b.n	800ce72 <__lo0bits+0x2a>
 800ce9e:	2000      	movs	r0, #0
 800cea0:	4770      	bx	lr
 800cea2:	2020      	movs	r0, #32
 800cea4:	4770      	bx	lr
	...

0800cea8 <__i2b>:
 800cea8:	b510      	push	{r4, lr}
 800ceaa:	460c      	mov	r4, r1
 800ceac:	2101      	movs	r1, #1
 800ceae:	f7ff ff03 	bl	800ccb8 <_Balloc>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	b928      	cbnz	r0, 800cec2 <__i2b+0x1a>
 800ceb6:	4b05      	ldr	r3, [pc, #20]	; (800cecc <__i2b+0x24>)
 800ceb8:	4805      	ldr	r0, [pc, #20]	; (800ced0 <__i2b+0x28>)
 800ceba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cebe:	f000 fce1 	bl	800d884 <__assert_func>
 800cec2:	2301      	movs	r3, #1
 800cec4:	6144      	str	r4, [r0, #20]
 800cec6:	6103      	str	r3, [r0, #16]
 800cec8:	bd10      	pop	{r4, pc}
 800ceca:	bf00      	nop
 800cecc:	0800fb07 	.word	0x0800fb07
 800ced0:	0800fb18 	.word	0x0800fb18

0800ced4 <__multiply>:
 800ced4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced8:	4691      	mov	r9, r2
 800ceda:	690a      	ldr	r2, [r1, #16]
 800cedc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	bfb8      	it	lt
 800cee4:	460b      	movlt	r3, r1
 800cee6:	460c      	mov	r4, r1
 800cee8:	bfbc      	itt	lt
 800ceea:	464c      	movlt	r4, r9
 800ceec:	4699      	movlt	r9, r3
 800ceee:	6927      	ldr	r7, [r4, #16]
 800cef0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cef4:	68a3      	ldr	r3, [r4, #8]
 800cef6:	6861      	ldr	r1, [r4, #4]
 800cef8:	eb07 060a 	add.w	r6, r7, sl
 800cefc:	42b3      	cmp	r3, r6
 800cefe:	b085      	sub	sp, #20
 800cf00:	bfb8      	it	lt
 800cf02:	3101      	addlt	r1, #1
 800cf04:	f7ff fed8 	bl	800ccb8 <_Balloc>
 800cf08:	b930      	cbnz	r0, 800cf18 <__multiply+0x44>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	4b44      	ldr	r3, [pc, #272]	; (800d020 <__multiply+0x14c>)
 800cf0e:	4845      	ldr	r0, [pc, #276]	; (800d024 <__multiply+0x150>)
 800cf10:	f240 115d 	movw	r1, #349	; 0x15d
 800cf14:	f000 fcb6 	bl	800d884 <__assert_func>
 800cf18:	f100 0514 	add.w	r5, r0, #20
 800cf1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf20:	462b      	mov	r3, r5
 800cf22:	2200      	movs	r2, #0
 800cf24:	4543      	cmp	r3, r8
 800cf26:	d321      	bcc.n	800cf6c <__multiply+0x98>
 800cf28:	f104 0314 	add.w	r3, r4, #20
 800cf2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cf30:	f109 0314 	add.w	r3, r9, #20
 800cf34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cf38:	9202      	str	r2, [sp, #8]
 800cf3a:	1b3a      	subs	r2, r7, r4
 800cf3c:	3a15      	subs	r2, #21
 800cf3e:	f022 0203 	bic.w	r2, r2, #3
 800cf42:	3204      	adds	r2, #4
 800cf44:	f104 0115 	add.w	r1, r4, #21
 800cf48:	428f      	cmp	r7, r1
 800cf4a:	bf38      	it	cc
 800cf4c:	2204      	movcc	r2, #4
 800cf4e:	9201      	str	r2, [sp, #4]
 800cf50:	9a02      	ldr	r2, [sp, #8]
 800cf52:	9303      	str	r3, [sp, #12]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d80c      	bhi.n	800cf72 <__multiply+0x9e>
 800cf58:	2e00      	cmp	r6, #0
 800cf5a:	dd03      	ble.n	800cf64 <__multiply+0x90>
 800cf5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d05a      	beq.n	800d01a <__multiply+0x146>
 800cf64:	6106      	str	r6, [r0, #16]
 800cf66:	b005      	add	sp, #20
 800cf68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf6c:	f843 2b04 	str.w	r2, [r3], #4
 800cf70:	e7d8      	b.n	800cf24 <__multiply+0x50>
 800cf72:	f8b3 a000 	ldrh.w	sl, [r3]
 800cf76:	f1ba 0f00 	cmp.w	sl, #0
 800cf7a:	d024      	beq.n	800cfc6 <__multiply+0xf2>
 800cf7c:	f104 0e14 	add.w	lr, r4, #20
 800cf80:	46a9      	mov	r9, r5
 800cf82:	f04f 0c00 	mov.w	ip, #0
 800cf86:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cf8a:	f8d9 1000 	ldr.w	r1, [r9]
 800cf8e:	fa1f fb82 	uxth.w	fp, r2
 800cf92:	b289      	uxth	r1, r1
 800cf94:	fb0a 110b 	mla	r1, sl, fp, r1
 800cf98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cf9c:	f8d9 2000 	ldr.w	r2, [r9]
 800cfa0:	4461      	add	r1, ip
 800cfa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cfa6:	fb0a c20b 	mla	r2, sl, fp, ip
 800cfaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cfae:	b289      	uxth	r1, r1
 800cfb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cfb4:	4577      	cmp	r7, lr
 800cfb6:	f849 1b04 	str.w	r1, [r9], #4
 800cfba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cfbe:	d8e2      	bhi.n	800cf86 <__multiply+0xb2>
 800cfc0:	9a01      	ldr	r2, [sp, #4]
 800cfc2:	f845 c002 	str.w	ip, [r5, r2]
 800cfc6:	9a03      	ldr	r2, [sp, #12]
 800cfc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cfcc:	3304      	adds	r3, #4
 800cfce:	f1b9 0f00 	cmp.w	r9, #0
 800cfd2:	d020      	beq.n	800d016 <__multiply+0x142>
 800cfd4:	6829      	ldr	r1, [r5, #0]
 800cfd6:	f104 0c14 	add.w	ip, r4, #20
 800cfda:	46ae      	mov	lr, r5
 800cfdc:	f04f 0a00 	mov.w	sl, #0
 800cfe0:	f8bc b000 	ldrh.w	fp, [ip]
 800cfe4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cfe8:	fb09 220b 	mla	r2, r9, fp, r2
 800cfec:	4492      	add	sl, r2
 800cfee:	b289      	uxth	r1, r1
 800cff0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cff4:	f84e 1b04 	str.w	r1, [lr], #4
 800cff8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cffc:	f8be 1000 	ldrh.w	r1, [lr]
 800d000:	0c12      	lsrs	r2, r2, #16
 800d002:	fb09 1102 	mla	r1, r9, r2, r1
 800d006:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d00a:	4567      	cmp	r7, ip
 800d00c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d010:	d8e6      	bhi.n	800cfe0 <__multiply+0x10c>
 800d012:	9a01      	ldr	r2, [sp, #4]
 800d014:	50a9      	str	r1, [r5, r2]
 800d016:	3504      	adds	r5, #4
 800d018:	e79a      	b.n	800cf50 <__multiply+0x7c>
 800d01a:	3e01      	subs	r6, #1
 800d01c:	e79c      	b.n	800cf58 <__multiply+0x84>
 800d01e:	bf00      	nop
 800d020:	0800fb07 	.word	0x0800fb07
 800d024:	0800fb18 	.word	0x0800fb18

0800d028 <__pow5mult>:
 800d028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d02c:	4615      	mov	r5, r2
 800d02e:	f012 0203 	ands.w	r2, r2, #3
 800d032:	4606      	mov	r6, r0
 800d034:	460f      	mov	r7, r1
 800d036:	d007      	beq.n	800d048 <__pow5mult+0x20>
 800d038:	4c25      	ldr	r4, [pc, #148]	; (800d0d0 <__pow5mult+0xa8>)
 800d03a:	3a01      	subs	r2, #1
 800d03c:	2300      	movs	r3, #0
 800d03e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d042:	f7ff fe9b 	bl	800cd7c <__multadd>
 800d046:	4607      	mov	r7, r0
 800d048:	10ad      	asrs	r5, r5, #2
 800d04a:	d03d      	beq.n	800d0c8 <__pow5mult+0xa0>
 800d04c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d04e:	b97c      	cbnz	r4, 800d070 <__pow5mult+0x48>
 800d050:	2010      	movs	r0, #16
 800d052:	f7ff fe1b 	bl	800cc8c <malloc>
 800d056:	4602      	mov	r2, r0
 800d058:	6270      	str	r0, [r6, #36]	; 0x24
 800d05a:	b928      	cbnz	r0, 800d068 <__pow5mult+0x40>
 800d05c:	4b1d      	ldr	r3, [pc, #116]	; (800d0d4 <__pow5mult+0xac>)
 800d05e:	481e      	ldr	r0, [pc, #120]	; (800d0d8 <__pow5mult+0xb0>)
 800d060:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d064:	f000 fc0e 	bl	800d884 <__assert_func>
 800d068:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d06c:	6004      	str	r4, [r0, #0]
 800d06e:	60c4      	str	r4, [r0, #12]
 800d070:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d074:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d078:	b94c      	cbnz	r4, 800d08e <__pow5mult+0x66>
 800d07a:	f240 2171 	movw	r1, #625	; 0x271
 800d07e:	4630      	mov	r0, r6
 800d080:	f7ff ff12 	bl	800cea8 <__i2b>
 800d084:	2300      	movs	r3, #0
 800d086:	f8c8 0008 	str.w	r0, [r8, #8]
 800d08a:	4604      	mov	r4, r0
 800d08c:	6003      	str	r3, [r0, #0]
 800d08e:	f04f 0900 	mov.w	r9, #0
 800d092:	07eb      	lsls	r3, r5, #31
 800d094:	d50a      	bpl.n	800d0ac <__pow5mult+0x84>
 800d096:	4639      	mov	r1, r7
 800d098:	4622      	mov	r2, r4
 800d09a:	4630      	mov	r0, r6
 800d09c:	f7ff ff1a 	bl	800ced4 <__multiply>
 800d0a0:	4639      	mov	r1, r7
 800d0a2:	4680      	mov	r8, r0
 800d0a4:	4630      	mov	r0, r6
 800d0a6:	f7ff fe47 	bl	800cd38 <_Bfree>
 800d0aa:	4647      	mov	r7, r8
 800d0ac:	106d      	asrs	r5, r5, #1
 800d0ae:	d00b      	beq.n	800d0c8 <__pow5mult+0xa0>
 800d0b0:	6820      	ldr	r0, [r4, #0]
 800d0b2:	b938      	cbnz	r0, 800d0c4 <__pow5mult+0x9c>
 800d0b4:	4622      	mov	r2, r4
 800d0b6:	4621      	mov	r1, r4
 800d0b8:	4630      	mov	r0, r6
 800d0ba:	f7ff ff0b 	bl	800ced4 <__multiply>
 800d0be:	6020      	str	r0, [r4, #0]
 800d0c0:	f8c0 9000 	str.w	r9, [r0]
 800d0c4:	4604      	mov	r4, r0
 800d0c6:	e7e4      	b.n	800d092 <__pow5mult+0x6a>
 800d0c8:	4638      	mov	r0, r7
 800d0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ce:	bf00      	nop
 800d0d0:	0800fc68 	.word	0x0800fc68
 800d0d4:	0800fa95 	.word	0x0800fa95
 800d0d8:	0800fb18 	.word	0x0800fb18

0800d0dc <__lshift>:
 800d0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e0:	460c      	mov	r4, r1
 800d0e2:	6849      	ldr	r1, [r1, #4]
 800d0e4:	6923      	ldr	r3, [r4, #16]
 800d0e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d0ea:	68a3      	ldr	r3, [r4, #8]
 800d0ec:	4607      	mov	r7, r0
 800d0ee:	4691      	mov	r9, r2
 800d0f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d0f4:	f108 0601 	add.w	r6, r8, #1
 800d0f8:	42b3      	cmp	r3, r6
 800d0fa:	db0b      	blt.n	800d114 <__lshift+0x38>
 800d0fc:	4638      	mov	r0, r7
 800d0fe:	f7ff fddb 	bl	800ccb8 <_Balloc>
 800d102:	4605      	mov	r5, r0
 800d104:	b948      	cbnz	r0, 800d11a <__lshift+0x3e>
 800d106:	4602      	mov	r2, r0
 800d108:	4b2a      	ldr	r3, [pc, #168]	; (800d1b4 <__lshift+0xd8>)
 800d10a:	482b      	ldr	r0, [pc, #172]	; (800d1b8 <__lshift+0xdc>)
 800d10c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d110:	f000 fbb8 	bl	800d884 <__assert_func>
 800d114:	3101      	adds	r1, #1
 800d116:	005b      	lsls	r3, r3, #1
 800d118:	e7ee      	b.n	800d0f8 <__lshift+0x1c>
 800d11a:	2300      	movs	r3, #0
 800d11c:	f100 0114 	add.w	r1, r0, #20
 800d120:	f100 0210 	add.w	r2, r0, #16
 800d124:	4618      	mov	r0, r3
 800d126:	4553      	cmp	r3, sl
 800d128:	db37      	blt.n	800d19a <__lshift+0xbe>
 800d12a:	6920      	ldr	r0, [r4, #16]
 800d12c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d130:	f104 0314 	add.w	r3, r4, #20
 800d134:	f019 091f 	ands.w	r9, r9, #31
 800d138:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d13c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d140:	d02f      	beq.n	800d1a2 <__lshift+0xc6>
 800d142:	f1c9 0e20 	rsb	lr, r9, #32
 800d146:	468a      	mov	sl, r1
 800d148:	f04f 0c00 	mov.w	ip, #0
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	fa02 f209 	lsl.w	r2, r2, r9
 800d152:	ea42 020c 	orr.w	r2, r2, ip
 800d156:	f84a 2b04 	str.w	r2, [sl], #4
 800d15a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d15e:	4298      	cmp	r0, r3
 800d160:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d164:	d8f2      	bhi.n	800d14c <__lshift+0x70>
 800d166:	1b03      	subs	r3, r0, r4
 800d168:	3b15      	subs	r3, #21
 800d16a:	f023 0303 	bic.w	r3, r3, #3
 800d16e:	3304      	adds	r3, #4
 800d170:	f104 0215 	add.w	r2, r4, #21
 800d174:	4290      	cmp	r0, r2
 800d176:	bf38      	it	cc
 800d178:	2304      	movcc	r3, #4
 800d17a:	f841 c003 	str.w	ip, [r1, r3]
 800d17e:	f1bc 0f00 	cmp.w	ip, #0
 800d182:	d001      	beq.n	800d188 <__lshift+0xac>
 800d184:	f108 0602 	add.w	r6, r8, #2
 800d188:	3e01      	subs	r6, #1
 800d18a:	4638      	mov	r0, r7
 800d18c:	612e      	str	r6, [r5, #16]
 800d18e:	4621      	mov	r1, r4
 800d190:	f7ff fdd2 	bl	800cd38 <_Bfree>
 800d194:	4628      	mov	r0, r5
 800d196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d19a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d19e:	3301      	adds	r3, #1
 800d1a0:	e7c1      	b.n	800d126 <__lshift+0x4a>
 800d1a2:	3904      	subs	r1, #4
 800d1a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1ac:	4298      	cmp	r0, r3
 800d1ae:	d8f9      	bhi.n	800d1a4 <__lshift+0xc8>
 800d1b0:	e7ea      	b.n	800d188 <__lshift+0xac>
 800d1b2:	bf00      	nop
 800d1b4:	0800fb07 	.word	0x0800fb07
 800d1b8:	0800fb18 	.word	0x0800fb18

0800d1bc <__mcmp>:
 800d1bc:	b530      	push	{r4, r5, lr}
 800d1be:	6902      	ldr	r2, [r0, #16]
 800d1c0:	690c      	ldr	r4, [r1, #16]
 800d1c2:	1b12      	subs	r2, r2, r4
 800d1c4:	d10e      	bne.n	800d1e4 <__mcmp+0x28>
 800d1c6:	f100 0314 	add.w	r3, r0, #20
 800d1ca:	3114      	adds	r1, #20
 800d1cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d1d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d1d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d1d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d1dc:	42a5      	cmp	r5, r4
 800d1de:	d003      	beq.n	800d1e8 <__mcmp+0x2c>
 800d1e0:	d305      	bcc.n	800d1ee <__mcmp+0x32>
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	4610      	mov	r0, r2
 800d1e6:	bd30      	pop	{r4, r5, pc}
 800d1e8:	4283      	cmp	r3, r0
 800d1ea:	d3f3      	bcc.n	800d1d4 <__mcmp+0x18>
 800d1ec:	e7fa      	b.n	800d1e4 <__mcmp+0x28>
 800d1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f2:	e7f7      	b.n	800d1e4 <__mcmp+0x28>

0800d1f4 <__mdiff>:
 800d1f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f8:	460c      	mov	r4, r1
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	4611      	mov	r1, r2
 800d1fe:	4620      	mov	r0, r4
 800d200:	4690      	mov	r8, r2
 800d202:	f7ff ffdb 	bl	800d1bc <__mcmp>
 800d206:	1e05      	subs	r5, r0, #0
 800d208:	d110      	bne.n	800d22c <__mdiff+0x38>
 800d20a:	4629      	mov	r1, r5
 800d20c:	4630      	mov	r0, r6
 800d20e:	f7ff fd53 	bl	800ccb8 <_Balloc>
 800d212:	b930      	cbnz	r0, 800d222 <__mdiff+0x2e>
 800d214:	4b3a      	ldr	r3, [pc, #232]	; (800d300 <__mdiff+0x10c>)
 800d216:	4602      	mov	r2, r0
 800d218:	f240 2132 	movw	r1, #562	; 0x232
 800d21c:	4839      	ldr	r0, [pc, #228]	; (800d304 <__mdiff+0x110>)
 800d21e:	f000 fb31 	bl	800d884 <__assert_func>
 800d222:	2301      	movs	r3, #1
 800d224:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d22c:	bfa4      	itt	ge
 800d22e:	4643      	movge	r3, r8
 800d230:	46a0      	movge	r8, r4
 800d232:	4630      	mov	r0, r6
 800d234:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d238:	bfa6      	itte	ge
 800d23a:	461c      	movge	r4, r3
 800d23c:	2500      	movge	r5, #0
 800d23e:	2501      	movlt	r5, #1
 800d240:	f7ff fd3a 	bl	800ccb8 <_Balloc>
 800d244:	b920      	cbnz	r0, 800d250 <__mdiff+0x5c>
 800d246:	4b2e      	ldr	r3, [pc, #184]	; (800d300 <__mdiff+0x10c>)
 800d248:	4602      	mov	r2, r0
 800d24a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d24e:	e7e5      	b.n	800d21c <__mdiff+0x28>
 800d250:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d254:	6926      	ldr	r6, [r4, #16]
 800d256:	60c5      	str	r5, [r0, #12]
 800d258:	f104 0914 	add.w	r9, r4, #20
 800d25c:	f108 0514 	add.w	r5, r8, #20
 800d260:	f100 0e14 	add.w	lr, r0, #20
 800d264:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d268:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d26c:	f108 0210 	add.w	r2, r8, #16
 800d270:	46f2      	mov	sl, lr
 800d272:	2100      	movs	r1, #0
 800d274:	f859 3b04 	ldr.w	r3, [r9], #4
 800d278:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d27c:	fa1f f883 	uxth.w	r8, r3
 800d280:	fa11 f18b 	uxtah	r1, r1, fp
 800d284:	0c1b      	lsrs	r3, r3, #16
 800d286:	eba1 0808 	sub.w	r8, r1, r8
 800d28a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d28e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d292:	fa1f f888 	uxth.w	r8, r8
 800d296:	1419      	asrs	r1, r3, #16
 800d298:	454e      	cmp	r6, r9
 800d29a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d29e:	f84a 3b04 	str.w	r3, [sl], #4
 800d2a2:	d8e7      	bhi.n	800d274 <__mdiff+0x80>
 800d2a4:	1b33      	subs	r3, r6, r4
 800d2a6:	3b15      	subs	r3, #21
 800d2a8:	f023 0303 	bic.w	r3, r3, #3
 800d2ac:	3304      	adds	r3, #4
 800d2ae:	3415      	adds	r4, #21
 800d2b0:	42a6      	cmp	r6, r4
 800d2b2:	bf38      	it	cc
 800d2b4:	2304      	movcc	r3, #4
 800d2b6:	441d      	add	r5, r3
 800d2b8:	4473      	add	r3, lr
 800d2ba:	469e      	mov	lr, r3
 800d2bc:	462e      	mov	r6, r5
 800d2be:	4566      	cmp	r6, ip
 800d2c0:	d30e      	bcc.n	800d2e0 <__mdiff+0xec>
 800d2c2:	f10c 0203 	add.w	r2, ip, #3
 800d2c6:	1b52      	subs	r2, r2, r5
 800d2c8:	f022 0203 	bic.w	r2, r2, #3
 800d2cc:	3d03      	subs	r5, #3
 800d2ce:	45ac      	cmp	ip, r5
 800d2d0:	bf38      	it	cc
 800d2d2:	2200      	movcc	r2, #0
 800d2d4:	441a      	add	r2, r3
 800d2d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d2da:	b17b      	cbz	r3, 800d2fc <__mdiff+0x108>
 800d2dc:	6107      	str	r7, [r0, #16]
 800d2de:	e7a3      	b.n	800d228 <__mdiff+0x34>
 800d2e0:	f856 8b04 	ldr.w	r8, [r6], #4
 800d2e4:	fa11 f288 	uxtah	r2, r1, r8
 800d2e8:	1414      	asrs	r4, r2, #16
 800d2ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d2ee:	b292      	uxth	r2, r2
 800d2f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d2f4:	f84e 2b04 	str.w	r2, [lr], #4
 800d2f8:	1421      	asrs	r1, r4, #16
 800d2fa:	e7e0      	b.n	800d2be <__mdiff+0xca>
 800d2fc:	3f01      	subs	r7, #1
 800d2fe:	e7ea      	b.n	800d2d6 <__mdiff+0xe2>
 800d300:	0800fb07 	.word	0x0800fb07
 800d304:	0800fb18 	.word	0x0800fb18

0800d308 <__d2b>:
 800d308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d30c:	4689      	mov	r9, r1
 800d30e:	2101      	movs	r1, #1
 800d310:	ec57 6b10 	vmov	r6, r7, d0
 800d314:	4690      	mov	r8, r2
 800d316:	f7ff fccf 	bl	800ccb8 <_Balloc>
 800d31a:	4604      	mov	r4, r0
 800d31c:	b930      	cbnz	r0, 800d32c <__d2b+0x24>
 800d31e:	4602      	mov	r2, r0
 800d320:	4b25      	ldr	r3, [pc, #148]	; (800d3b8 <__d2b+0xb0>)
 800d322:	4826      	ldr	r0, [pc, #152]	; (800d3bc <__d2b+0xb4>)
 800d324:	f240 310a 	movw	r1, #778	; 0x30a
 800d328:	f000 faac 	bl	800d884 <__assert_func>
 800d32c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d330:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d334:	bb35      	cbnz	r5, 800d384 <__d2b+0x7c>
 800d336:	2e00      	cmp	r6, #0
 800d338:	9301      	str	r3, [sp, #4]
 800d33a:	d028      	beq.n	800d38e <__d2b+0x86>
 800d33c:	4668      	mov	r0, sp
 800d33e:	9600      	str	r6, [sp, #0]
 800d340:	f7ff fd82 	bl	800ce48 <__lo0bits>
 800d344:	9900      	ldr	r1, [sp, #0]
 800d346:	b300      	cbz	r0, 800d38a <__d2b+0x82>
 800d348:	9a01      	ldr	r2, [sp, #4]
 800d34a:	f1c0 0320 	rsb	r3, r0, #32
 800d34e:	fa02 f303 	lsl.w	r3, r2, r3
 800d352:	430b      	orrs	r3, r1
 800d354:	40c2      	lsrs	r2, r0
 800d356:	6163      	str	r3, [r4, #20]
 800d358:	9201      	str	r2, [sp, #4]
 800d35a:	9b01      	ldr	r3, [sp, #4]
 800d35c:	61a3      	str	r3, [r4, #24]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	bf14      	ite	ne
 800d362:	2202      	movne	r2, #2
 800d364:	2201      	moveq	r2, #1
 800d366:	6122      	str	r2, [r4, #16]
 800d368:	b1d5      	cbz	r5, 800d3a0 <__d2b+0x98>
 800d36a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d36e:	4405      	add	r5, r0
 800d370:	f8c9 5000 	str.w	r5, [r9]
 800d374:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d378:	f8c8 0000 	str.w	r0, [r8]
 800d37c:	4620      	mov	r0, r4
 800d37e:	b003      	add	sp, #12
 800d380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d388:	e7d5      	b.n	800d336 <__d2b+0x2e>
 800d38a:	6161      	str	r1, [r4, #20]
 800d38c:	e7e5      	b.n	800d35a <__d2b+0x52>
 800d38e:	a801      	add	r0, sp, #4
 800d390:	f7ff fd5a 	bl	800ce48 <__lo0bits>
 800d394:	9b01      	ldr	r3, [sp, #4]
 800d396:	6163      	str	r3, [r4, #20]
 800d398:	2201      	movs	r2, #1
 800d39a:	6122      	str	r2, [r4, #16]
 800d39c:	3020      	adds	r0, #32
 800d39e:	e7e3      	b.n	800d368 <__d2b+0x60>
 800d3a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d3a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d3a8:	f8c9 0000 	str.w	r0, [r9]
 800d3ac:	6918      	ldr	r0, [r3, #16]
 800d3ae:	f7ff fd2b 	bl	800ce08 <__hi0bits>
 800d3b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d3b6:	e7df      	b.n	800d378 <__d2b+0x70>
 800d3b8:	0800fb07 	.word	0x0800fb07
 800d3bc:	0800fb18 	.word	0x0800fb18

0800d3c0 <_calloc_r>:
 800d3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3c2:	fba1 2402 	umull	r2, r4, r1, r2
 800d3c6:	b94c      	cbnz	r4, 800d3dc <_calloc_r+0x1c>
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	9201      	str	r2, [sp, #4]
 800d3cc:	f000 f87a 	bl	800d4c4 <_malloc_r>
 800d3d0:	9a01      	ldr	r2, [sp, #4]
 800d3d2:	4605      	mov	r5, r0
 800d3d4:	b930      	cbnz	r0, 800d3e4 <_calloc_r+0x24>
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	b003      	add	sp, #12
 800d3da:	bd30      	pop	{r4, r5, pc}
 800d3dc:	220c      	movs	r2, #12
 800d3de:	6002      	str	r2, [r0, #0]
 800d3e0:	2500      	movs	r5, #0
 800d3e2:	e7f8      	b.n	800d3d6 <_calloc_r+0x16>
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	f7fe f941 	bl	800b66c <memset>
 800d3ea:	e7f4      	b.n	800d3d6 <_calloc_r+0x16>

0800d3ec <_free_r>:
 800d3ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3ee:	2900      	cmp	r1, #0
 800d3f0:	d044      	beq.n	800d47c <_free_r+0x90>
 800d3f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3f6:	9001      	str	r0, [sp, #4]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f1a1 0404 	sub.w	r4, r1, #4
 800d3fe:	bfb8      	it	lt
 800d400:	18e4      	addlt	r4, r4, r3
 800d402:	f000 fa9b 	bl	800d93c <__malloc_lock>
 800d406:	4a1e      	ldr	r2, [pc, #120]	; (800d480 <_free_r+0x94>)
 800d408:	9801      	ldr	r0, [sp, #4]
 800d40a:	6813      	ldr	r3, [r2, #0]
 800d40c:	b933      	cbnz	r3, 800d41c <_free_r+0x30>
 800d40e:	6063      	str	r3, [r4, #4]
 800d410:	6014      	str	r4, [r2, #0]
 800d412:	b003      	add	sp, #12
 800d414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d418:	f000 ba96 	b.w	800d948 <__malloc_unlock>
 800d41c:	42a3      	cmp	r3, r4
 800d41e:	d908      	bls.n	800d432 <_free_r+0x46>
 800d420:	6825      	ldr	r5, [r4, #0]
 800d422:	1961      	adds	r1, r4, r5
 800d424:	428b      	cmp	r3, r1
 800d426:	bf01      	itttt	eq
 800d428:	6819      	ldreq	r1, [r3, #0]
 800d42a:	685b      	ldreq	r3, [r3, #4]
 800d42c:	1949      	addeq	r1, r1, r5
 800d42e:	6021      	streq	r1, [r4, #0]
 800d430:	e7ed      	b.n	800d40e <_free_r+0x22>
 800d432:	461a      	mov	r2, r3
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	b10b      	cbz	r3, 800d43c <_free_r+0x50>
 800d438:	42a3      	cmp	r3, r4
 800d43a:	d9fa      	bls.n	800d432 <_free_r+0x46>
 800d43c:	6811      	ldr	r1, [r2, #0]
 800d43e:	1855      	adds	r5, r2, r1
 800d440:	42a5      	cmp	r5, r4
 800d442:	d10b      	bne.n	800d45c <_free_r+0x70>
 800d444:	6824      	ldr	r4, [r4, #0]
 800d446:	4421      	add	r1, r4
 800d448:	1854      	adds	r4, r2, r1
 800d44a:	42a3      	cmp	r3, r4
 800d44c:	6011      	str	r1, [r2, #0]
 800d44e:	d1e0      	bne.n	800d412 <_free_r+0x26>
 800d450:	681c      	ldr	r4, [r3, #0]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	6053      	str	r3, [r2, #4]
 800d456:	4421      	add	r1, r4
 800d458:	6011      	str	r1, [r2, #0]
 800d45a:	e7da      	b.n	800d412 <_free_r+0x26>
 800d45c:	d902      	bls.n	800d464 <_free_r+0x78>
 800d45e:	230c      	movs	r3, #12
 800d460:	6003      	str	r3, [r0, #0]
 800d462:	e7d6      	b.n	800d412 <_free_r+0x26>
 800d464:	6825      	ldr	r5, [r4, #0]
 800d466:	1961      	adds	r1, r4, r5
 800d468:	428b      	cmp	r3, r1
 800d46a:	bf04      	itt	eq
 800d46c:	6819      	ldreq	r1, [r3, #0]
 800d46e:	685b      	ldreq	r3, [r3, #4]
 800d470:	6063      	str	r3, [r4, #4]
 800d472:	bf04      	itt	eq
 800d474:	1949      	addeq	r1, r1, r5
 800d476:	6021      	streq	r1, [r4, #0]
 800d478:	6054      	str	r4, [r2, #4]
 800d47a:	e7ca      	b.n	800d412 <_free_r+0x26>
 800d47c:	b003      	add	sp, #12
 800d47e:	bd30      	pop	{r4, r5, pc}
 800d480:	200009f0 	.word	0x200009f0

0800d484 <sbrk_aligned>:
 800d484:	b570      	push	{r4, r5, r6, lr}
 800d486:	4e0e      	ldr	r6, [pc, #56]	; (800d4c0 <sbrk_aligned+0x3c>)
 800d488:	460c      	mov	r4, r1
 800d48a:	6831      	ldr	r1, [r6, #0]
 800d48c:	4605      	mov	r5, r0
 800d48e:	b911      	cbnz	r1, 800d496 <sbrk_aligned+0x12>
 800d490:	f000 f9e8 	bl	800d864 <_sbrk_r>
 800d494:	6030      	str	r0, [r6, #0]
 800d496:	4621      	mov	r1, r4
 800d498:	4628      	mov	r0, r5
 800d49a:	f000 f9e3 	bl	800d864 <_sbrk_r>
 800d49e:	1c43      	adds	r3, r0, #1
 800d4a0:	d00a      	beq.n	800d4b8 <sbrk_aligned+0x34>
 800d4a2:	1cc4      	adds	r4, r0, #3
 800d4a4:	f024 0403 	bic.w	r4, r4, #3
 800d4a8:	42a0      	cmp	r0, r4
 800d4aa:	d007      	beq.n	800d4bc <sbrk_aligned+0x38>
 800d4ac:	1a21      	subs	r1, r4, r0
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	f000 f9d8 	bl	800d864 <_sbrk_r>
 800d4b4:	3001      	adds	r0, #1
 800d4b6:	d101      	bne.n	800d4bc <sbrk_aligned+0x38>
 800d4b8:	f04f 34ff 	mov.w	r4, #4294967295
 800d4bc:	4620      	mov	r0, r4
 800d4be:	bd70      	pop	{r4, r5, r6, pc}
 800d4c0:	200009f4 	.word	0x200009f4

0800d4c4 <_malloc_r>:
 800d4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c8:	1ccd      	adds	r5, r1, #3
 800d4ca:	f025 0503 	bic.w	r5, r5, #3
 800d4ce:	3508      	adds	r5, #8
 800d4d0:	2d0c      	cmp	r5, #12
 800d4d2:	bf38      	it	cc
 800d4d4:	250c      	movcc	r5, #12
 800d4d6:	2d00      	cmp	r5, #0
 800d4d8:	4607      	mov	r7, r0
 800d4da:	db01      	blt.n	800d4e0 <_malloc_r+0x1c>
 800d4dc:	42a9      	cmp	r1, r5
 800d4de:	d905      	bls.n	800d4ec <_malloc_r+0x28>
 800d4e0:	230c      	movs	r3, #12
 800d4e2:	603b      	str	r3, [r7, #0]
 800d4e4:	2600      	movs	r6, #0
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ec:	4e2e      	ldr	r6, [pc, #184]	; (800d5a8 <_malloc_r+0xe4>)
 800d4ee:	f000 fa25 	bl	800d93c <__malloc_lock>
 800d4f2:	6833      	ldr	r3, [r6, #0]
 800d4f4:	461c      	mov	r4, r3
 800d4f6:	bb34      	cbnz	r4, 800d546 <_malloc_r+0x82>
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	4638      	mov	r0, r7
 800d4fc:	f7ff ffc2 	bl	800d484 <sbrk_aligned>
 800d500:	1c43      	adds	r3, r0, #1
 800d502:	4604      	mov	r4, r0
 800d504:	d14d      	bne.n	800d5a2 <_malloc_r+0xde>
 800d506:	6834      	ldr	r4, [r6, #0]
 800d508:	4626      	mov	r6, r4
 800d50a:	2e00      	cmp	r6, #0
 800d50c:	d140      	bne.n	800d590 <_malloc_r+0xcc>
 800d50e:	6823      	ldr	r3, [r4, #0]
 800d510:	4631      	mov	r1, r6
 800d512:	4638      	mov	r0, r7
 800d514:	eb04 0803 	add.w	r8, r4, r3
 800d518:	f000 f9a4 	bl	800d864 <_sbrk_r>
 800d51c:	4580      	cmp	r8, r0
 800d51e:	d13a      	bne.n	800d596 <_malloc_r+0xd2>
 800d520:	6821      	ldr	r1, [r4, #0]
 800d522:	3503      	adds	r5, #3
 800d524:	1a6d      	subs	r5, r5, r1
 800d526:	f025 0503 	bic.w	r5, r5, #3
 800d52a:	3508      	adds	r5, #8
 800d52c:	2d0c      	cmp	r5, #12
 800d52e:	bf38      	it	cc
 800d530:	250c      	movcc	r5, #12
 800d532:	4629      	mov	r1, r5
 800d534:	4638      	mov	r0, r7
 800d536:	f7ff ffa5 	bl	800d484 <sbrk_aligned>
 800d53a:	3001      	adds	r0, #1
 800d53c:	d02b      	beq.n	800d596 <_malloc_r+0xd2>
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	442b      	add	r3, r5
 800d542:	6023      	str	r3, [r4, #0]
 800d544:	e00e      	b.n	800d564 <_malloc_r+0xa0>
 800d546:	6822      	ldr	r2, [r4, #0]
 800d548:	1b52      	subs	r2, r2, r5
 800d54a:	d41e      	bmi.n	800d58a <_malloc_r+0xc6>
 800d54c:	2a0b      	cmp	r2, #11
 800d54e:	d916      	bls.n	800d57e <_malloc_r+0xba>
 800d550:	1961      	adds	r1, r4, r5
 800d552:	42a3      	cmp	r3, r4
 800d554:	6025      	str	r5, [r4, #0]
 800d556:	bf18      	it	ne
 800d558:	6059      	strne	r1, [r3, #4]
 800d55a:	6863      	ldr	r3, [r4, #4]
 800d55c:	bf08      	it	eq
 800d55e:	6031      	streq	r1, [r6, #0]
 800d560:	5162      	str	r2, [r4, r5]
 800d562:	604b      	str	r3, [r1, #4]
 800d564:	4638      	mov	r0, r7
 800d566:	f104 060b 	add.w	r6, r4, #11
 800d56a:	f000 f9ed 	bl	800d948 <__malloc_unlock>
 800d56e:	f026 0607 	bic.w	r6, r6, #7
 800d572:	1d23      	adds	r3, r4, #4
 800d574:	1af2      	subs	r2, r6, r3
 800d576:	d0b6      	beq.n	800d4e6 <_malloc_r+0x22>
 800d578:	1b9b      	subs	r3, r3, r6
 800d57a:	50a3      	str	r3, [r4, r2]
 800d57c:	e7b3      	b.n	800d4e6 <_malloc_r+0x22>
 800d57e:	6862      	ldr	r2, [r4, #4]
 800d580:	42a3      	cmp	r3, r4
 800d582:	bf0c      	ite	eq
 800d584:	6032      	streq	r2, [r6, #0]
 800d586:	605a      	strne	r2, [r3, #4]
 800d588:	e7ec      	b.n	800d564 <_malloc_r+0xa0>
 800d58a:	4623      	mov	r3, r4
 800d58c:	6864      	ldr	r4, [r4, #4]
 800d58e:	e7b2      	b.n	800d4f6 <_malloc_r+0x32>
 800d590:	4634      	mov	r4, r6
 800d592:	6876      	ldr	r6, [r6, #4]
 800d594:	e7b9      	b.n	800d50a <_malloc_r+0x46>
 800d596:	230c      	movs	r3, #12
 800d598:	603b      	str	r3, [r7, #0]
 800d59a:	4638      	mov	r0, r7
 800d59c:	f000 f9d4 	bl	800d948 <__malloc_unlock>
 800d5a0:	e7a1      	b.n	800d4e6 <_malloc_r+0x22>
 800d5a2:	6025      	str	r5, [r4, #0]
 800d5a4:	e7de      	b.n	800d564 <_malloc_r+0xa0>
 800d5a6:	bf00      	nop
 800d5a8:	200009f0 	.word	0x200009f0

0800d5ac <__ssputs_r>:
 800d5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b0:	688e      	ldr	r6, [r1, #8]
 800d5b2:	429e      	cmp	r6, r3
 800d5b4:	4682      	mov	sl, r0
 800d5b6:	460c      	mov	r4, r1
 800d5b8:	4690      	mov	r8, r2
 800d5ba:	461f      	mov	r7, r3
 800d5bc:	d838      	bhi.n	800d630 <__ssputs_r+0x84>
 800d5be:	898a      	ldrh	r2, [r1, #12]
 800d5c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d5c4:	d032      	beq.n	800d62c <__ssputs_r+0x80>
 800d5c6:	6825      	ldr	r5, [r4, #0]
 800d5c8:	6909      	ldr	r1, [r1, #16]
 800d5ca:	eba5 0901 	sub.w	r9, r5, r1
 800d5ce:	6965      	ldr	r5, [r4, #20]
 800d5d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5d8:	3301      	adds	r3, #1
 800d5da:	444b      	add	r3, r9
 800d5dc:	106d      	asrs	r5, r5, #1
 800d5de:	429d      	cmp	r5, r3
 800d5e0:	bf38      	it	cc
 800d5e2:	461d      	movcc	r5, r3
 800d5e4:	0553      	lsls	r3, r2, #21
 800d5e6:	d531      	bpl.n	800d64c <__ssputs_r+0xa0>
 800d5e8:	4629      	mov	r1, r5
 800d5ea:	f7ff ff6b 	bl	800d4c4 <_malloc_r>
 800d5ee:	4606      	mov	r6, r0
 800d5f0:	b950      	cbnz	r0, 800d608 <__ssputs_r+0x5c>
 800d5f2:	230c      	movs	r3, #12
 800d5f4:	f8ca 3000 	str.w	r3, [sl]
 800d5f8:	89a3      	ldrh	r3, [r4, #12]
 800d5fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5fe:	81a3      	strh	r3, [r4, #12]
 800d600:	f04f 30ff 	mov.w	r0, #4294967295
 800d604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d608:	6921      	ldr	r1, [r4, #16]
 800d60a:	464a      	mov	r2, r9
 800d60c:	f7ff fb46 	bl	800cc9c <memcpy>
 800d610:	89a3      	ldrh	r3, [r4, #12]
 800d612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d61a:	81a3      	strh	r3, [r4, #12]
 800d61c:	6126      	str	r6, [r4, #16]
 800d61e:	6165      	str	r5, [r4, #20]
 800d620:	444e      	add	r6, r9
 800d622:	eba5 0509 	sub.w	r5, r5, r9
 800d626:	6026      	str	r6, [r4, #0]
 800d628:	60a5      	str	r5, [r4, #8]
 800d62a:	463e      	mov	r6, r7
 800d62c:	42be      	cmp	r6, r7
 800d62e:	d900      	bls.n	800d632 <__ssputs_r+0x86>
 800d630:	463e      	mov	r6, r7
 800d632:	6820      	ldr	r0, [r4, #0]
 800d634:	4632      	mov	r2, r6
 800d636:	4641      	mov	r1, r8
 800d638:	f000 f966 	bl	800d908 <memmove>
 800d63c:	68a3      	ldr	r3, [r4, #8]
 800d63e:	1b9b      	subs	r3, r3, r6
 800d640:	60a3      	str	r3, [r4, #8]
 800d642:	6823      	ldr	r3, [r4, #0]
 800d644:	4433      	add	r3, r6
 800d646:	6023      	str	r3, [r4, #0]
 800d648:	2000      	movs	r0, #0
 800d64a:	e7db      	b.n	800d604 <__ssputs_r+0x58>
 800d64c:	462a      	mov	r2, r5
 800d64e:	f000 f981 	bl	800d954 <_realloc_r>
 800d652:	4606      	mov	r6, r0
 800d654:	2800      	cmp	r0, #0
 800d656:	d1e1      	bne.n	800d61c <__ssputs_r+0x70>
 800d658:	6921      	ldr	r1, [r4, #16]
 800d65a:	4650      	mov	r0, sl
 800d65c:	f7ff fec6 	bl	800d3ec <_free_r>
 800d660:	e7c7      	b.n	800d5f2 <__ssputs_r+0x46>
	...

0800d664 <_svfiprintf_r>:
 800d664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d668:	4698      	mov	r8, r3
 800d66a:	898b      	ldrh	r3, [r1, #12]
 800d66c:	061b      	lsls	r3, r3, #24
 800d66e:	b09d      	sub	sp, #116	; 0x74
 800d670:	4607      	mov	r7, r0
 800d672:	460d      	mov	r5, r1
 800d674:	4614      	mov	r4, r2
 800d676:	d50e      	bpl.n	800d696 <_svfiprintf_r+0x32>
 800d678:	690b      	ldr	r3, [r1, #16]
 800d67a:	b963      	cbnz	r3, 800d696 <_svfiprintf_r+0x32>
 800d67c:	2140      	movs	r1, #64	; 0x40
 800d67e:	f7ff ff21 	bl	800d4c4 <_malloc_r>
 800d682:	6028      	str	r0, [r5, #0]
 800d684:	6128      	str	r0, [r5, #16]
 800d686:	b920      	cbnz	r0, 800d692 <_svfiprintf_r+0x2e>
 800d688:	230c      	movs	r3, #12
 800d68a:	603b      	str	r3, [r7, #0]
 800d68c:	f04f 30ff 	mov.w	r0, #4294967295
 800d690:	e0d1      	b.n	800d836 <_svfiprintf_r+0x1d2>
 800d692:	2340      	movs	r3, #64	; 0x40
 800d694:	616b      	str	r3, [r5, #20]
 800d696:	2300      	movs	r3, #0
 800d698:	9309      	str	r3, [sp, #36]	; 0x24
 800d69a:	2320      	movs	r3, #32
 800d69c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6a4:	2330      	movs	r3, #48	; 0x30
 800d6a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d850 <_svfiprintf_r+0x1ec>
 800d6aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6ae:	f04f 0901 	mov.w	r9, #1
 800d6b2:	4623      	mov	r3, r4
 800d6b4:	469a      	mov	sl, r3
 800d6b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6ba:	b10a      	cbz	r2, 800d6c0 <_svfiprintf_r+0x5c>
 800d6bc:	2a25      	cmp	r2, #37	; 0x25
 800d6be:	d1f9      	bne.n	800d6b4 <_svfiprintf_r+0x50>
 800d6c0:	ebba 0b04 	subs.w	fp, sl, r4
 800d6c4:	d00b      	beq.n	800d6de <_svfiprintf_r+0x7a>
 800d6c6:	465b      	mov	r3, fp
 800d6c8:	4622      	mov	r2, r4
 800d6ca:	4629      	mov	r1, r5
 800d6cc:	4638      	mov	r0, r7
 800d6ce:	f7ff ff6d 	bl	800d5ac <__ssputs_r>
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	f000 80aa 	beq.w	800d82c <_svfiprintf_r+0x1c8>
 800d6d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6da:	445a      	add	r2, fp
 800d6dc:	9209      	str	r2, [sp, #36]	; 0x24
 800d6de:	f89a 3000 	ldrb.w	r3, [sl]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	f000 80a2 	beq.w	800d82c <_svfiprintf_r+0x1c8>
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6f2:	f10a 0a01 	add.w	sl, sl, #1
 800d6f6:	9304      	str	r3, [sp, #16]
 800d6f8:	9307      	str	r3, [sp, #28]
 800d6fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6fe:	931a      	str	r3, [sp, #104]	; 0x68
 800d700:	4654      	mov	r4, sl
 800d702:	2205      	movs	r2, #5
 800d704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d708:	4851      	ldr	r0, [pc, #324]	; (800d850 <_svfiprintf_r+0x1ec>)
 800d70a:	f7f2 fd89 	bl	8000220 <memchr>
 800d70e:	9a04      	ldr	r2, [sp, #16]
 800d710:	b9d8      	cbnz	r0, 800d74a <_svfiprintf_r+0xe6>
 800d712:	06d0      	lsls	r0, r2, #27
 800d714:	bf44      	itt	mi
 800d716:	2320      	movmi	r3, #32
 800d718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d71c:	0711      	lsls	r1, r2, #28
 800d71e:	bf44      	itt	mi
 800d720:	232b      	movmi	r3, #43	; 0x2b
 800d722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d726:	f89a 3000 	ldrb.w	r3, [sl]
 800d72a:	2b2a      	cmp	r3, #42	; 0x2a
 800d72c:	d015      	beq.n	800d75a <_svfiprintf_r+0xf6>
 800d72e:	9a07      	ldr	r2, [sp, #28]
 800d730:	4654      	mov	r4, sl
 800d732:	2000      	movs	r0, #0
 800d734:	f04f 0c0a 	mov.w	ip, #10
 800d738:	4621      	mov	r1, r4
 800d73a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d73e:	3b30      	subs	r3, #48	; 0x30
 800d740:	2b09      	cmp	r3, #9
 800d742:	d94e      	bls.n	800d7e2 <_svfiprintf_r+0x17e>
 800d744:	b1b0      	cbz	r0, 800d774 <_svfiprintf_r+0x110>
 800d746:	9207      	str	r2, [sp, #28]
 800d748:	e014      	b.n	800d774 <_svfiprintf_r+0x110>
 800d74a:	eba0 0308 	sub.w	r3, r0, r8
 800d74e:	fa09 f303 	lsl.w	r3, r9, r3
 800d752:	4313      	orrs	r3, r2
 800d754:	9304      	str	r3, [sp, #16]
 800d756:	46a2      	mov	sl, r4
 800d758:	e7d2      	b.n	800d700 <_svfiprintf_r+0x9c>
 800d75a:	9b03      	ldr	r3, [sp, #12]
 800d75c:	1d19      	adds	r1, r3, #4
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	9103      	str	r1, [sp, #12]
 800d762:	2b00      	cmp	r3, #0
 800d764:	bfbb      	ittet	lt
 800d766:	425b      	neglt	r3, r3
 800d768:	f042 0202 	orrlt.w	r2, r2, #2
 800d76c:	9307      	strge	r3, [sp, #28]
 800d76e:	9307      	strlt	r3, [sp, #28]
 800d770:	bfb8      	it	lt
 800d772:	9204      	strlt	r2, [sp, #16]
 800d774:	7823      	ldrb	r3, [r4, #0]
 800d776:	2b2e      	cmp	r3, #46	; 0x2e
 800d778:	d10c      	bne.n	800d794 <_svfiprintf_r+0x130>
 800d77a:	7863      	ldrb	r3, [r4, #1]
 800d77c:	2b2a      	cmp	r3, #42	; 0x2a
 800d77e:	d135      	bne.n	800d7ec <_svfiprintf_r+0x188>
 800d780:	9b03      	ldr	r3, [sp, #12]
 800d782:	1d1a      	adds	r2, r3, #4
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	9203      	str	r2, [sp, #12]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	bfb8      	it	lt
 800d78c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d790:	3402      	adds	r4, #2
 800d792:	9305      	str	r3, [sp, #20]
 800d794:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d860 <_svfiprintf_r+0x1fc>
 800d798:	7821      	ldrb	r1, [r4, #0]
 800d79a:	2203      	movs	r2, #3
 800d79c:	4650      	mov	r0, sl
 800d79e:	f7f2 fd3f 	bl	8000220 <memchr>
 800d7a2:	b140      	cbz	r0, 800d7b6 <_svfiprintf_r+0x152>
 800d7a4:	2340      	movs	r3, #64	; 0x40
 800d7a6:	eba0 000a 	sub.w	r0, r0, sl
 800d7aa:	fa03 f000 	lsl.w	r0, r3, r0
 800d7ae:	9b04      	ldr	r3, [sp, #16]
 800d7b0:	4303      	orrs	r3, r0
 800d7b2:	3401      	adds	r4, #1
 800d7b4:	9304      	str	r3, [sp, #16]
 800d7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ba:	4826      	ldr	r0, [pc, #152]	; (800d854 <_svfiprintf_r+0x1f0>)
 800d7bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7c0:	2206      	movs	r2, #6
 800d7c2:	f7f2 fd2d 	bl	8000220 <memchr>
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	d038      	beq.n	800d83c <_svfiprintf_r+0x1d8>
 800d7ca:	4b23      	ldr	r3, [pc, #140]	; (800d858 <_svfiprintf_r+0x1f4>)
 800d7cc:	bb1b      	cbnz	r3, 800d816 <_svfiprintf_r+0x1b2>
 800d7ce:	9b03      	ldr	r3, [sp, #12]
 800d7d0:	3307      	adds	r3, #7
 800d7d2:	f023 0307 	bic.w	r3, r3, #7
 800d7d6:	3308      	adds	r3, #8
 800d7d8:	9303      	str	r3, [sp, #12]
 800d7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7dc:	4433      	add	r3, r6
 800d7de:	9309      	str	r3, [sp, #36]	; 0x24
 800d7e0:	e767      	b.n	800d6b2 <_svfiprintf_r+0x4e>
 800d7e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7e6:	460c      	mov	r4, r1
 800d7e8:	2001      	movs	r0, #1
 800d7ea:	e7a5      	b.n	800d738 <_svfiprintf_r+0xd4>
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	3401      	adds	r4, #1
 800d7f0:	9305      	str	r3, [sp, #20]
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	f04f 0c0a 	mov.w	ip, #10
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7fe:	3a30      	subs	r2, #48	; 0x30
 800d800:	2a09      	cmp	r2, #9
 800d802:	d903      	bls.n	800d80c <_svfiprintf_r+0x1a8>
 800d804:	2b00      	cmp	r3, #0
 800d806:	d0c5      	beq.n	800d794 <_svfiprintf_r+0x130>
 800d808:	9105      	str	r1, [sp, #20]
 800d80a:	e7c3      	b.n	800d794 <_svfiprintf_r+0x130>
 800d80c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d810:	4604      	mov	r4, r0
 800d812:	2301      	movs	r3, #1
 800d814:	e7f0      	b.n	800d7f8 <_svfiprintf_r+0x194>
 800d816:	ab03      	add	r3, sp, #12
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	462a      	mov	r2, r5
 800d81c:	4b0f      	ldr	r3, [pc, #60]	; (800d85c <_svfiprintf_r+0x1f8>)
 800d81e:	a904      	add	r1, sp, #16
 800d820:	4638      	mov	r0, r7
 800d822:	f7fd ffcb 	bl	800b7bc <_printf_float>
 800d826:	1c42      	adds	r2, r0, #1
 800d828:	4606      	mov	r6, r0
 800d82a:	d1d6      	bne.n	800d7da <_svfiprintf_r+0x176>
 800d82c:	89ab      	ldrh	r3, [r5, #12]
 800d82e:	065b      	lsls	r3, r3, #25
 800d830:	f53f af2c 	bmi.w	800d68c <_svfiprintf_r+0x28>
 800d834:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d836:	b01d      	add	sp, #116	; 0x74
 800d838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d83c:	ab03      	add	r3, sp, #12
 800d83e:	9300      	str	r3, [sp, #0]
 800d840:	462a      	mov	r2, r5
 800d842:	4b06      	ldr	r3, [pc, #24]	; (800d85c <_svfiprintf_r+0x1f8>)
 800d844:	a904      	add	r1, sp, #16
 800d846:	4638      	mov	r0, r7
 800d848:	f7fe fa5c 	bl	800bd04 <_printf_i>
 800d84c:	e7eb      	b.n	800d826 <_svfiprintf_r+0x1c2>
 800d84e:	bf00      	nop
 800d850:	0800fc74 	.word	0x0800fc74
 800d854:	0800fc7e 	.word	0x0800fc7e
 800d858:	0800b7bd 	.word	0x0800b7bd
 800d85c:	0800d5ad 	.word	0x0800d5ad
 800d860:	0800fc7a 	.word	0x0800fc7a

0800d864 <_sbrk_r>:
 800d864:	b538      	push	{r3, r4, r5, lr}
 800d866:	4d06      	ldr	r5, [pc, #24]	; (800d880 <_sbrk_r+0x1c>)
 800d868:	2300      	movs	r3, #0
 800d86a:	4604      	mov	r4, r0
 800d86c:	4608      	mov	r0, r1
 800d86e:	602b      	str	r3, [r5, #0]
 800d870:	f7f8 f934 	bl	8005adc <_sbrk>
 800d874:	1c43      	adds	r3, r0, #1
 800d876:	d102      	bne.n	800d87e <_sbrk_r+0x1a>
 800d878:	682b      	ldr	r3, [r5, #0]
 800d87a:	b103      	cbz	r3, 800d87e <_sbrk_r+0x1a>
 800d87c:	6023      	str	r3, [r4, #0]
 800d87e:	bd38      	pop	{r3, r4, r5, pc}
 800d880:	200009f8 	.word	0x200009f8

0800d884 <__assert_func>:
 800d884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d886:	4614      	mov	r4, r2
 800d888:	461a      	mov	r2, r3
 800d88a:	4b09      	ldr	r3, [pc, #36]	; (800d8b0 <__assert_func+0x2c>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4605      	mov	r5, r0
 800d890:	68d8      	ldr	r0, [r3, #12]
 800d892:	b14c      	cbz	r4, 800d8a8 <__assert_func+0x24>
 800d894:	4b07      	ldr	r3, [pc, #28]	; (800d8b4 <__assert_func+0x30>)
 800d896:	9100      	str	r1, [sp, #0]
 800d898:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d89c:	4906      	ldr	r1, [pc, #24]	; (800d8b8 <__assert_func+0x34>)
 800d89e:	462b      	mov	r3, r5
 800d8a0:	f000 f80e 	bl	800d8c0 <fiprintf>
 800d8a4:	f000 faac 	bl	800de00 <abort>
 800d8a8:	4b04      	ldr	r3, [pc, #16]	; (800d8bc <__assert_func+0x38>)
 800d8aa:	461c      	mov	r4, r3
 800d8ac:	e7f3      	b.n	800d896 <__assert_func+0x12>
 800d8ae:	bf00      	nop
 800d8b0:	20000084 	.word	0x20000084
 800d8b4:	0800fc85 	.word	0x0800fc85
 800d8b8:	0800fc92 	.word	0x0800fc92
 800d8bc:	0800fcc0 	.word	0x0800fcc0

0800d8c0 <fiprintf>:
 800d8c0:	b40e      	push	{r1, r2, r3}
 800d8c2:	b503      	push	{r0, r1, lr}
 800d8c4:	4601      	mov	r1, r0
 800d8c6:	ab03      	add	r3, sp, #12
 800d8c8:	4805      	ldr	r0, [pc, #20]	; (800d8e0 <fiprintf+0x20>)
 800d8ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ce:	6800      	ldr	r0, [r0, #0]
 800d8d0:	9301      	str	r3, [sp, #4]
 800d8d2:	f000 f897 	bl	800da04 <_vfiprintf_r>
 800d8d6:	b002      	add	sp, #8
 800d8d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8dc:	b003      	add	sp, #12
 800d8de:	4770      	bx	lr
 800d8e0:	20000084 	.word	0x20000084

0800d8e4 <__ascii_mbtowc>:
 800d8e4:	b082      	sub	sp, #8
 800d8e6:	b901      	cbnz	r1, 800d8ea <__ascii_mbtowc+0x6>
 800d8e8:	a901      	add	r1, sp, #4
 800d8ea:	b142      	cbz	r2, 800d8fe <__ascii_mbtowc+0x1a>
 800d8ec:	b14b      	cbz	r3, 800d902 <__ascii_mbtowc+0x1e>
 800d8ee:	7813      	ldrb	r3, [r2, #0]
 800d8f0:	600b      	str	r3, [r1, #0]
 800d8f2:	7812      	ldrb	r2, [r2, #0]
 800d8f4:	1e10      	subs	r0, r2, #0
 800d8f6:	bf18      	it	ne
 800d8f8:	2001      	movne	r0, #1
 800d8fa:	b002      	add	sp, #8
 800d8fc:	4770      	bx	lr
 800d8fe:	4610      	mov	r0, r2
 800d900:	e7fb      	b.n	800d8fa <__ascii_mbtowc+0x16>
 800d902:	f06f 0001 	mvn.w	r0, #1
 800d906:	e7f8      	b.n	800d8fa <__ascii_mbtowc+0x16>

0800d908 <memmove>:
 800d908:	4288      	cmp	r0, r1
 800d90a:	b510      	push	{r4, lr}
 800d90c:	eb01 0402 	add.w	r4, r1, r2
 800d910:	d902      	bls.n	800d918 <memmove+0x10>
 800d912:	4284      	cmp	r4, r0
 800d914:	4623      	mov	r3, r4
 800d916:	d807      	bhi.n	800d928 <memmove+0x20>
 800d918:	1e43      	subs	r3, r0, #1
 800d91a:	42a1      	cmp	r1, r4
 800d91c:	d008      	beq.n	800d930 <memmove+0x28>
 800d91e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d922:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d926:	e7f8      	b.n	800d91a <memmove+0x12>
 800d928:	4402      	add	r2, r0
 800d92a:	4601      	mov	r1, r0
 800d92c:	428a      	cmp	r2, r1
 800d92e:	d100      	bne.n	800d932 <memmove+0x2a>
 800d930:	bd10      	pop	{r4, pc}
 800d932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d93a:	e7f7      	b.n	800d92c <memmove+0x24>

0800d93c <__malloc_lock>:
 800d93c:	4801      	ldr	r0, [pc, #4]	; (800d944 <__malloc_lock+0x8>)
 800d93e:	f000 bc1f 	b.w	800e180 <__retarget_lock_acquire_recursive>
 800d942:	bf00      	nop
 800d944:	200009fc 	.word	0x200009fc

0800d948 <__malloc_unlock>:
 800d948:	4801      	ldr	r0, [pc, #4]	; (800d950 <__malloc_unlock+0x8>)
 800d94a:	f000 bc1a 	b.w	800e182 <__retarget_lock_release_recursive>
 800d94e:	bf00      	nop
 800d950:	200009fc 	.word	0x200009fc

0800d954 <_realloc_r>:
 800d954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d958:	4680      	mov	r8, r0
 800d95a:	4614      	mov	r4, r2
 800d95c:	460e      	mov	r6, r1
 800d95e:	b921      	cbnz	r1, 800d96a <_realloc_r+0x16>
 800d960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d964:	4611      	mov	r1, r2
 800d966:	f7ff bdad 	b.w	800d4c4 <_malloc_r>
 800d96a:	b92a      	cbnz	r2, 800d978 <_realloc_r+0x24>
 800d96c:	f7ff fd3e 	bl	800d3ec <_free_r>
 800d970:	4625      	mov	r5, r4
 800d972:	4628      	mov	r0, r5
 800d974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d978:	f000 fc6a 	bl	800e250 <_malloc_usable_size_r>
 800d97c:	4284      	cmp	r4, r0
 800d97e:	4607      	mov	r7, r0
 800d980:	d802      	bhi.n	800d988 <_realloc_r+0x34>
 800d982:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d986:	d812      	bhi.n	800d9ae <_realloc_r+0x5a>
 800d988:	4621      	mov	r1, r4
 800d98a:	4640      	mov	r0, r8
 800d98c:	f7ff fd9a 	bl	800d4c4 <_malloc_r>
 800d990:	4605      	mov	r5, r0
 800d992:	2800      	cmp	r0, #0
 800d994:	d0ed      	beq.n	800d972 <_realloc_r+0x1e>
 800d996:	42bc      	cmp	r4, r7
 800d998:	4622      	mov	r2, r4
 800d99a:	4631      	mov	r1, r6
 800d99c:	bf28      	it	cs
 800d99e:	463a      	movcs	r2, r7
 800d9a0:	f7ff f97c 	bl	800cc9c <memcpy>
 800d9a4:	4631      	mov	r1, r6
 800d9a6:	4640      	mov	r0, r8
 800d9a8:	f7ff fd20 	bl	800d3ec <_free_r>
 800d9ac:	e7e1      	b.n	800d972 <_realloc_r+0x1e>
 800d9ae:	4635      	mov	r5, r6
 800d9b0:	e7df      	b.n	800d972 <_realloc_r+0x1e>

0800d9b2 <__sfputc_r>:
 800d9b2:	6893      	ldr	r3, [r2, #8]
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	b410      	push	{r4}
 800d9ba:	6093      	str	r3, [r2, #8]
 800d9bc:	da08      	bge.n	800d9d0 <__sfputc_r+0x1e>
 800d9be:	6994      	ldr	r4, [r2, #24]
 800d9c0:	42a3      	cmp	r3, r4
 800d9c2:	db01      	blt.n	800d9c8 <__sfputc_r+0x16>
 800d9c4:	290a      	cmp	r1, #10
 800d9c6:	d103      	bne.n	800d9d0 <__sfputc_r+0x1e>
 800d9c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9cc:	f000 b94a 	b.w	800dc64 <__swbuf_r>
 800d9d0:	6813      	ldr	r3, [r2, #0]
 800d9d2:	1c58      	adds	r0, r3, #1
 800d9d4:	6010      	str	r0, [r2, #0]
 800d9d6:	7019      	strb	r1, [r3, #0]
 800d9d8:	4608      	mov	r0, r1
 800d9da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <__sfputs_r>:
 800d9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e2:	4606      	mov	r6, r0
 800d9e4:	460f      	mov	r7, r1
 800d9e6:	4614      	mov	r4, r2
 800d9e8:	18d5      	adds	r5, r2, r3
 800d9ea:	42ac      	cmp	r4, r5
 800d9ec:	d101      	bne.n	800d9f2 <__sfputs_r+0x12>
 800d9ee:	2000      	movs	r0, #0
 800d9f0:	e007      	b.n	800da02 <__sfputs_r+0x22>
 800d9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9f6:	463a      	mov	r2, r7
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	f7ff ffda 	bl	800d9b2 <__sfputc_r>
 800d9fe:	1c43      	adds	r3, r0, #1
 800da00:	d1f3      	bne.n	800d9ea <__sfputs_r+0xa>
 800da02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da04 <_vfiprintf_r>:
 800da04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da08:	460d      	mov	r5, r1
 800da0a:	b09d      	sub	sp, #116	; 0x74
 800da0c:	4614      	mov	r4, r2
 800da0e:	4698      	mov	r8, r3
 800da10:	4606      	mov	r6, r0
 800da12:	b118      	cbz	r0, 800da1c <_vfiprintf_r+0x18>
 800da14:	6983      	ldr	r3, [r0, #24]
 800da16:	b90b      	cbnz	r3, 800da1c <_vfiprintf_r+0x18>
 800da18:	f000 fb14 	bl	800e044 <__sinit>
 800da1c:	4b89      	ldr	r3, [pc, #548]	; (800dc44 <_vfiprintf_r+0x240>)
 800da1e:	429d      	cmp	r5, r3
 800da20:	d11b      	bne.n	800da5a <_vfiprintf_r+0x56>
 800da22:	6875      	ldr	r5, [r6, #4]
 800da24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da26:	07d9      	lsls	r1, r3, #31
 800da28:	d405      	bmi.n	800da36 <_vfiprintf_r+0x32>
 800da2a:	89ab      	ldrh	r3, [r5, #12]
 800da2c:	059a      	lsls	r2, r3, #22
 800da2e:	d402      	bmi.n	800da36 <_vfiprintf_r+0x32>
 800da30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da32:	f000 fba5 	bl	800e180 <__retarget_lock_acquire_recursive>
 800da36:	89ab      	ldrh	r3, [r5, #12]
 800da38:	071b      	lsls	r3, r3, #28
 800da3a:	d501      	bpl.n	800da40 <_vfiprintf_r+0x3c>
 800da3c:	692b      	ldr	r3, [r5, #16]
 800da3e:	b9eb      	cbnz	r3, 800da7c <_vfiprintf_r+0x78>
 800da40:	4629      	mov	r1, r5
 800da42:	4630      	mov	r0, r6
 800da44:	f000 f96e 	bl	800dd24 <__swsetup_r>
 800da48:	b1c0      	cbz	r0, 800da7c <_vfiprintf_r+0x78>
 800da4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da4c:	07dc      	lsls	r4, r3, #31
 800da4e:	d50e      	bpl.n	800da6e <_vfiprintf_r+0x6a>
 800da50:	f04f 30ff 	mov.w	r0, #4294967295
 800da54:	b01d      	add	sp, #116	; 0x74
 800da56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da5a:	4b7b      	ldr	r3, [pc, #492]	; (800dc48 <_vfiprintf_r+0x244>)
 800da5c:	429d      	cmp	r5, r3
 800da5e:	d101      	bne.n	800da64 <_vfiprintf_r+0x60>
 800da60:	68b5      	ldr	r5, [r6, #8]
 800da62:	e7df      	b.n	800da24 <_vfiprintf_r+0x20>
 800da64:	4b79      	ldr	r3, [pc, #484]	; (800dc4c <_vfiprintf_r+0x248>)
 800da66:	429d      	cmp	r5, r3
 800da68:	bf08      	it	eq
 800da6a:	68f5      	ldreq	r5, [r6, #12]
 800da6c:	e7da      	b.n	800da24 <_vfiprintf_r+0x20>
 800da6e:	89ab      	ldrh	r3, [r5, #12]
 800da70:	0598      	lsls	r0, r3, #22
 800da72:	d4ed      	bmi.n	800da50 <_vfiprintf_r+0x4c>
 800da74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da76:	f000 fb84 	bl	800e182 <__retarget_lock_release_recursive>
 800da7a:	e7e9      	b.n	800da50 <_vfiprintf_r+0x4c>
 800da7c:	2300      	movs	r3, #0
 800da7e:	9309      	str	r3, [sp, #36]	; 0x24
 800da80:	2320      	movs	r3, #32
 800da82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da86:	f8cd 800c 	str.w	r8, [sp, #12]
 800da8a:	2330      	movs	r3, #48	; 0x30
 800da8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dc50 <_vfiprintf_r+0x24c>
 800da90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da94:	f04f 0901 	mov.w	r9, #1
 800da98:	4623      	mov	r3, r4
 800da9a:	469a      	mov	sl, r3
 800da9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800daa0:	b10a      	cbz	r2, 800daa6 <_vfiprintf_r+0xa2>
 800daa2:	2a25      	cmp	r2, #37	; 0x25
 800daa4:	d1f9      	bne.n	800da9a <_vfiprintf_r+0x96>
 800daa6:	ebba 0b04 	subs.w	fp, sl, r4
 800daaa:	d00b      	beq.n	800dac4 <_vfiprintf_r+0xc0>
 800daac:	465b      	mov	r3, fp
 800daae:	4622      	mov	r2, r4
 800dab0:	4629      	mov	r1, r5
 800dab2:	4630      	mov	r0, r6
 800dab4:	f7ff ff94 	bl	800d9e0 <__sfputs_r>
 800dab8:	3001      	adds	r0, #1
 800daba:	f000 80aa 	beq.w	800dc12 <_vfiprintf_r+0x20e>
 800dabe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dac0:	445a      	add	r2, fp
 800dac2:	9209      	str	r2, [sp, #36]	; 0x24
 800dac4:	f89a 3000 	ldrb.w	r3, [sl]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 80a2 	beq.w	800dc12 <_vfiprintf_r+0x20e>
 800dace:	2300      	movs	r3, #0
 800dad0:	f04f 32ff 	mov.w	r2, #4294967295
 800dad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dad8:	f10a 0a01 	add.w	sl, sl, #1
 800dadc:	9304      	str	r3, [sp, #16]
 800dade:	9307      	str	r3, [sp, #28]
 800dae0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dae4:	931a      	str	r3, [sp, #104]	; 0x68
 800dae6:	4654      	mov	r4, sl
 800dae8:	2205      	movs	r2, #5
 800daea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daee:	4858      	ldr	r0, [pc, #352]	; (800dc50 <_vfiprintf_r+0x24c>)
 800daf0:	f7f2 fb96 	bl	8000220 <memchr>
 800daf4:	9a04      	ldr	r2, [sp, #16]
 800daf6:	b9d8      	cbnz	r0, 800db30 <_vfiprintf_r+0x12c>
 800daf8:	06d1      	lsls	r1, r2, #27
 800dafa:	bf44      	itt	mi
 800dafc:	2320      	movmi	r3, #32
 800dafe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db02:	0713      	lsls	r3, r2, #28
 800db04:	bf44      	itt	mi
 800db06:	232b      	movmi	r3, #43	; 0x2b
 800db08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db0c:	f89a 3000 	ldrb.w	r3, [sl]
 800db10:	2b2a      	cmp	r3, #42	; 0x2a
 800db12:	d015      	beq.n	800db40 <_vfiprintf_r+0x13c>
 800db14:	9a07      	ldr	r2, [sp, #28]
 800db16:	4654      	mov	r4, sl
 800db18:	2000      	movs	r0, #0
 800db1a:	f04f 0c0a 	mov.w	ip, #10
 800db1e:	4621      	mov	r1, r4
 800db20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db24:	3b30      	subs	r3, #48	; 0x30
 800db26:	2b09      	cmp	r3, #9
 800db28:	d94e      	bls.n	800dbc8 <_vfiprintf_r+0x1c4>
 800db2a:	b1b0      	cbz	r0, 800db5a <_vfiprintf_r+0x156>
 800db2c:	9207      	str	r2, [sp, #28]
 800db2e:	e014      	b.n	800db5a <_vfiprintf_r+0x156>
 800db30:	eba0 0308 	sub.w	r3, r0, r8
 800db34:	fa09 f303 	lsl.w	r3, r9, r3
 800db38:	4313      	orrs	r3, r2
 800db3a:	9304      	str	r3, [sp, #16]
 800db3c:	46a2      	mov	sl, r4
 800db3e:	e7d2      	b.n	800dae6 <_vfiprintf_r+0xe2>
 800db40:	9b03      	ldr	r3, [sp, #12]
 800db42:	1d19      	adds	r1, r3, #4
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	9103      	str	r1, [sp, #12]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	bfbb      	ittet	lt
 800db4c:	425b      	neglt	r3, r3
 800db4e:	f042 0202 	orrlt.w	r2, r2, #2
 800db52:	9307      	strge	r3, [sp, #28]
 800db54:	9307      	strlt	r3, [sp, #28]
 800db56:	bfb8      	it	lt
 800db58:	9204      	strlt	r2, [sp, #16]
 800db5a:	7823      	ldrb	r3, [r4, #0]
 800db5c:	2b2e      	cmp	r3, #46	; 0x2e
 800db5e:	d10c      	bne.n	800db7a <_vfiprintf_r+0x176>
 800db60:	7863      	ldrb	r3, [r4, #1]
 800db62:	2b2a      	cmp	r3, #42	; 0x2a
 800db64:	d135      	bne.n	800dbd2 <_vfiprintf_r+0x1ce>
 800db66:	9b03      	ldr	r3, [sp, #12]
 800db68:	1d1a      	adds	r2, r3, #4
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	9203      	str	r2, [sp, #12]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	bfb8      	it	lt
 800db72:	f04f 33ff 	movlt.w	r3, #4294967295
 800db76:	3402      	adds	r4, #2
 800db78:	9305      	str	r3, [sp, #20]
 800db7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dc60 <_vfiprintf_r+0x25c>
 800db7e:	7821      	ldrb	r1, [r4, #0]
 800db80:	2203      	movs	r2, #3
 800db82:	4650      	mov	r0, sl
 800db84:	f7f2 fb4c 	bl	8000220 <memchr>
 800db88:	b140      	cbz	r0, 800db9c <_vfiprintf_r+0x198>
 800db8a:	2340      	movs	r3, #64	; 0x40
 800db8c:	eba0 000a 	sub.w	r0, r0, sl
 800db90:	fa03 f000 	lsl.w	r0, r3, r0
 800db94:	9b04      	ldr	r3, [sp, #16]
 800db96:	4303      	orrs	r3, r0
 800db98:	3401      	adds	r4, #1
 800db9a:	9304      	str	r3, [sp, #16]
 800db9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dba0:	482c      	ldr	r0, [pc, #176]	; (800dc54 <_vfiprintf_r+0x250>)
 800dba2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dba6:	2206      	movs	r2, #6
 800dba8:	f7f2 fb3a 	bl	8000220 <memchr>
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d03f      	beq.n	800dc30 <_vfiprintf_r+0x22c>
 800dbb0:	4b29      	ldr	r3, [pc, #164]	; (800dc58 <_vfiprintf_r+0x254>)
 800dbb2:	bb1b      	cbnz	r3, 800dbfc <_vfiprintf_r+0x1f8>
 800dbb4:	9b03      	ldr	r3, [sp, #12]
 800dbb6:	3307      	adds	r3, #7
 800dbb8:	f023 0307 	bic.w	r3, r3, #7
 800dbbc:	3308      	adds	r3, #8
 800dbbe:	9303      	str	r3, [sp, #12]
 800dbc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbc2:	443b      	add	r3, r7
 800dbc4:	9309      	str	r3, [sp, #36]	; 0x24
 800dbc6:	e767      	b.n	800da98 <_vfiprintf_r+0x94>
 800dbc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbcc:	460c      	mov	r4, r1
 800dbce:	2001      	movs	r0, #1
 800dbd0:	e7a5      	b.n	800db1e <_vfiprintf_r+0x11a>
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	3401      	adds	r4, #1
 800dbd6:	9305      	str	r3, [sp, #20]
 800dbd8:	4619      	mov	r1, r3
 800dbda:	f04f 0c0a 	mov.w	ip, #10
 800dbde:	4620      	mov	r0, r4
 800dbe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbe4:	3a30      	subs	r2, #48	; 0x30
 800dbe6:	2a09      	cmp	r2, #9
 800dbe8:	d903      	bls.n	800dbf2 <_vfiprintf_r+0x1ee>
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d0c5      	beq.n	800db7a <_vfiprintf_r+0x176>
 800dbee:	9105      	str	r1, [sp, #20]
 800dbf0:	e7c3      	b.n	800db7a <_vfiprintf_r+0x176>
 800dbf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e7f0      	b.n	800dbde <_vfiprintf_r+0x1da>
 800dbfc:	ab03      	add	r3, sp, #12
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	462a      	mov	r2, r5
 800dc02:	4b16      	ldr	r3, [pc, #88]	; (800dc5c <_vfiprintf_r+0x258>)
 800dc04:	a904      	add	r1, sp, #16
 800dc06:	4630      	mov	r0, r6
 800dc08:	f7fd fdd8 	bl	800b7bc <_printf_float>
 800dc0c:	4607      	mov	r7, r0
 800dc0e:	1c78      	adds	r0, r7, #1
 800dc10:	d1d6      	bne.n	800dbc0 <_vfiprintf_r+0x1bc>
 800dc12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc14:	07d9      	lsls	r1, r3, #31
 800dc16:	d405      	bmi.n	800dc24 <_vfiprintf_r+0x220>
 800dc18:	89ab      	ldrh	r3, [r5, #12]
 800dc1a:	059a      	lsls	r2, r3, #22
 800dc1c:	d402      	bmi.n	800dc24 <_vfiprintf_r+0x220>
 800dc1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc20:	f000 faaf 	bl	800e182 <__retarget_lock_release_recursive>
 800dc24:	89ab      	ldrh	r3, [r5, #12]
 800dc26:	065b      	lsls	r3, r3, #25
 800dc28:	f53f af12 	bmi.w	800da50 <_vfiprintf_r+0x4c>
 800dc2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc2e:	e711      	b.n	800da54 <_vfiprintf_r+0x50>
 800dc30:	ab03      	add	r3, sp, #12
 800dc32:	9300      	str	r3, [sp, #0]
 800dc34:	462a      	mov	r2, r5
 800dc36:	4b09      	ldr	r3, [pc, #36]	; (800dc5c <_vfiprintf_r+0x258>)
 800dc38:	a904      	add	r1, sp, #16
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	f7fe f862 	bl	800bd04 <_printf_i>
 800dc40:	e7e4      	b.n	800dc0c <_vfiprintf_r+0x208>
 800dc42:	bf00      	nop
 800dc44:	0800fdec 	.word	0x0800fdec
 800dc48:	0800fe0c 	.word	0x0800fe0c
 800dc4c:	0800fdcc 	.word	0x0800fdcc
 800dc50:	0800fc74 	.word	0x0800fc74
 800dc54:	0800fc7e 	.word	0x0800fc7e
 800dc58:	0800b7bd 	.word	0x0800b7bd
 800dc5c:	0800d9e1 	.word	0x0800d9e1
 800dc60:	0800fc7a 	.word	0x0800fc7a

0800dc64 <__swbuf_r>:
 800dc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc66:	460e      	mov	r6, r1
 800dc68:	4614      	mov	r4, r2
 800dc6a:	4605      	mov	r5, r0
 800dc6c:	b118      	cbz	r0, 800dc76 <__swbuf_r+0x12>
 800dc6e:	6983      	ldr	r3, [r0, #24]
 800dc70:	b90b      	cbnz	r3, 800dc76 <__swbuf_r+0x12>
 800dc72:	f000 f9e7 	bl	800e044 <__sinit>
 800dc76:	4b21      	ldr	r3, [pc, #132]	; (800dcfc <__swbuf_r+0x98>)
 800dc78:	429c      	cmp	r4, r3
 800dc7a:	d12b      	bne.n	800dcd4 <__swbuf_r+0x70>
 800dc7c:	686c      	ldr	r4, [r5, #4]
 800dc7e:	69a3      	ldr	r3, [r4, #24]
 800dc80:	60a3      	str	r3, [r4, #8]
 800dc82:	89a3      	ldrh	r3, [r4, #12]
 800dc84:	071a      	lsls	r2, r3, #28
 800dc86:	d52f      	bpl.n	800dce8 <__swbuf_r+0x84>
 800dc88:	6923      	ldr	r3, [r4, #16]
 800dc8a:	b36b      	cbz	r3, 800dce8 <__swbuf_r+0x84>
 800dc8c:	6923      	ldr	r3, [r4, #16]
 800dc8e:	6820      	ldr	r0, [r4, #0]
 800dc90:	1ac0      	subs	r0, r0, r3
 800dc92:	6963      	ldr	r3, [r4, #20]
 800dc94:	b2f6      	uxtb	r6, r6
 800dc96:	4283      	cmp	r3, r0
 800dc98:	4637      	mov	r7, r6
 800dc9a:	dc04      	bgt.n	800dca6 <__swbuf_r+0x42>
 800dc9c:	4621      	mov	r1, r4
 800dc9e:	4628      	mov	r0, r5
 800dca0:	f000 f93c 	bl	800df1c <_fflush_r>
 800dca4:	bb30      	cbnz	r0, 800dcf4 <__swbuf_r+0x90>
 800dca6:	68a3      	ldr	r3, [r4, #8]
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	60a3      	str	r3, [r4, #8]
 800dcac:	6823      	ldr	r3, [r4, #0]
 800dcae:	1c5a      	adds	r2, r3, #1
 800dcb0:	6022      	str	r2, [r4, #0]
 800dcb2:	701e      	strb	r6, [r3, #0]
 800dcb4:	6963      	ldr	r3, [r4, #20]
 800dcb6:	3001      	adds	r0, #1
 800dcb8:	4283      	cmp	r3, r0
 800dcba:	d004      	beq.n	800dcc6 <__swbuf_r+0x62>
 800dcbc:	89a3      	ldrh	r3, [r4, #12]
 800dcbe:	07db      	lsls	r3, r3, #31
 800dcc0:	d506      	bpl.n	800dcd0 <__swbuf_r+0x6c>
 800dcc2:	2e0a      	cmp	r6, #10
 800dcc4:	d104      	bne.n	800dcd0 <__swbuf_r+0x6c>
 800dcc6:	4621      	mov	r1, r4
 800dcc8:	4628      	mov	r0, r5
 800dcca:	f000 f927 	bl	800df1c <_fflush_r>
 800dcce:	b988      	cbnz	r0, 800dcf4 <__swbuf_r+0x90>
 800dcd0:	4638      	mov	r0, r7
 800dcd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcd4:	4b0a      	ldr	r3, [pc, #40]	; (800dd00 <__swbuf_r+0x9c>)
 800dcd6:	429c      	cmp	r4, r3
 800dcd8:	d101      	bne.n	800dcde <__swbuf_r+0x7a>
 800dcda:	68ac      	ldr	r4, [r5, #8]
 800dcdc:	e7cf      	b.n	800dc7e <__swbuf_r+0x1a>
 800dcde:	4b09      	ldr	r3, [pc, #36]	; (800dd04 <__swbuf_r+0xa0>)
 800dce0:	429c      	cmp	r4, r3
 800dce2:	bf08      	it	eq
 800dce4:	68ec      	ldreq	r4, [r5, #12]
 800dce6:	e7ca      	b.n	800dc7e <__swbuf_r+0x1a>
 800dce8:	4621      	mov	r1, r4
 800dcea:	4628      	mov	r0, r5
 800dcec:	f000 f81a 	bl	800dd24 <__swsetup_r>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d0cb      	beq.n	800dc8c <__swbuf_r+0x28>
 800dcf4:	f04f 37ff 	mov.w	r7, #4294967295
 800dcf8:	e7ea      	b.n	800dcd0 <__swbuf_r+0x6c>
 800dcfa:	bf00      	nop
 800dcfc:	0800fdec 	.word	0x0800fdec
 800dd00:	0800fe0c 	.word	0x0800fe0c
 800dd04:	0800fdcc 	.word	0x0800fdcc

0800dd08 <__ascii_wctomb>:
 800dd08:	b149      	cbz	r1, 800dd1e <__ascii_wctomb+0x16>
 800dd0a:	2aff      	cmp	r2, #255	; 0xff
 800dd0c:	bf85      	ittet	hi
 800dd0e:	238a      	movhi	r3, #138	; 0x8a
 800dd10:	6003      	strhi	r3, [r0, #0]
 800dd12:	700a      	strbls	r2, [r1, #0]
 800dd14:	f04f 30ff 	movhi.w	r0, #4294967295
 800dd18:	bf98      	it	ls
 800dd1a:	2001      	movls	r0, #1
 800dd1c:	4770      	bx	lr
 800dd1e:	4608      	mov	r0, r1
 800dd20:	4770      	bx	lr
	...

0800dd24 <__swsetup_r>:
 800dd24:	4b32      	ldr	r3, [pc, #200]	; (800ddf0 <__swsetup_r+0xcc>)
 800dd26:	b570      	push	{r4, r5, r6, lr}
 800dd28:	681d      	ldr	r5, [r3, #0]
 800dd2a:	4606      	mov	r6, r0
 800dd2c:	460c      	mov	r4, r1
 800dd2e:	b125      	cbz	r5, 800dd3a <__swsetup_r+0x16>
 800dd30:	69ab      	ldr	r3, [r5, #24]
 800dd32:	b913      	cbnz	r3, 800dd3a <__swsetup_r+0x16>
 800dd34:	4628      	mov	r0, r5
 800dd36:	f000 f985 	bl	800e044 <__sinit>
 800dd3a:	4b2e      	ldr	r3, [pc, #184]	; (800ddf4 <__swsetup_r+0xd0>)
 800dd3c:	429c      	cmp	r4, r3
 800dd3e:	d10f      	bne.n	800dd60 <__swsetup_r+0x3c>
 800dd40:	686c      	ldr	r4, [r5, #4]
 800dd42:	89a3      	ldrh	r3, [r4, #12]
 800dd44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd48:	0719      	lsls	r1, r3, #28
 800dd4a:	d42c      	bmi.n	800dda6 <__swsetup_r+0x82>
 800dd4c:	06dd      	lsls	r5, r3, #27
 800dd4e:	d411      	bmi.n	800dd74 <__swsetup_r+0x50>
 800dd50:	2309      	movs	r3, #9
 800dd52:	6033      	str	r3, [r6, #0]
 800dd54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dd58:	81a3      	strh	r3, [r4, #12]
 800dd5a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5e:	e03e      	b.n	800ddde <__swsetup_r+0xba>
 800dd60:	4b25      	ldr	r3, [pc, #148]	; (800ddf8 <__swsetup_r+0xd4>)
 800dd62:	429c      	cmp	r4, r3
 800dd64:	d101      	bne.n	800dd6a <__swsetup_r+0x46>
 800dd66:	68ac      	ldr	r4, [r5, #8]
 800dd68:	e7eb      	b.n	800dd42 <__swsetup_r+0x1e>
 800dd6a:	4b24      	ldr	r3, [pc, #144]	; (800ddfc <__swsetup_r+0xd8>)
 800dd6c:	429c      	cmp	r4, r3
 800dd6e:	bf08      	it	eq
 800dd70:	68ec      	ldreq	r4, [r5, #12]
 800dd72:	e7e6      	b.n	800dd42 <__swsetup_r+0x1e>
 800dd74:	0758      	lsls	r0, r3, #29
 800dd76:	d512      	bpl.n	800dd9e <__swsetup_r+0x7a>
 800dd78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd7a:	b141      	cbz	r1, 800dd8e <__swsetup_r+0x6a>
 800dd7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd80:	4299      	cmp	r1, r3
 800dd82:	d002      	beq.n	800dd8a <__swsetup_r+0x66>
 800dd84:	4630      	mov	r0, r6
 800dd86:	f7ff fb31 	bl	800d3ec <_free_r>
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	6363      	str	r3, [r4, #52]	; 0x34
 800dd8e:	89a3      	ldrh	r3, [r4, #12]
 800dd90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd94:	81a3      	strh	r3, [r4, #12]
 800dd96:	2300      	movs	r3, #0
 800dd98:	6063      	str	r3, [r4, #4]
 800dd9a:	6923      	ldr	r3, [r4, #16]
 800dd9c:	6023      	str	r3, [r4, #0]
 800dd9e:	89a3      	ldrh	r3, [r4, #12]
 800dda0:	f043 0308 	orr.w	r3, r3, #8
 800dda4:	81a3      	strh	r3, [r4, #12]
 800dda6:	6923      	ldr	r3, [r4, #16]
 800dda8:	b94b      	cbnz	r3, 800ddbe <__swsetup_r+0x9a>
 800ddaa:	89a3      	ldrh	r3, [r4, #12]
 800ddac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ddb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddb4:	d003      	beq.n	800ddbe <__swsetup_r+0x9a>
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	4630      	mov	r0, r6
 800ddba:	f000 fa09 	bl	800e1d0 <__smakebuf_r>
 800ddbe:	89a0      	ldrh	r0, [r4, #12]
 800ddc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddc4:	f010 0301 	ands.w	r3, r0, #1
 800ddc8:	d00a      	beq.n	800dde0 <__swsetup_r+0xbc>
 800ddca:	2300      	movs	r3, #0
 800ddcc:	60a3      	str	r3, [r4, #8]
 800ddce:	6963      	ldr	r3, [r4, #20]
 800ddd0:	425b      	negs	r3, r3
 800ddd2:	61a3      	str	r3, [r4, #24]
 800ddd4:	6923      	ldr	r3, [r4, #16]
 800ddd6:	b943      	cbnz	r3, 800ddea <__swsetup_r+0xc6>
 800ddd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dddc:	d1ba      	bne.n	800dd54 <__swsetup_r+0x30>
 800ddde:	bd70      	pop	{r4, r5, r6, pc}
 800dde0:	0781      	lsls	r1, r0, #30
 800dde2:	bf58      	it	pl
 800dde4:	6963      	ldrpl	r3, [r4, #20]
 800dde6:	60a3      	str	r3, [r4, #8]
 800dde8:	e7f4      	b.n	800ddd4 <__swsetup_r+0xb0>
 800ddea:	2000      	movs	r0, #0
 800ddec:	e7f7      	b.n	800ddde <__swsetup_r+0xba>
 800ddee:	bf00      	nop
 800ddf0:	20000084 	.word	0x20000084
 800ddf4:	0800fdec 	.word	0x0800fdec
 800ddf8:	0800fe0c 	.word	0x0800fe0c
 800ddfc:	0800fdcc 	.word	0x0800fdcc

0800de00 <abort>:
 800de00:	b508      	push	{r3, lr}
 800de02:	2006      	movs	r0, #6
 800de04:	f000 fa54 	bl	800e2b0 <raise>
 800de08:	2001      	movs	r0, #1
 800de0a:	f7f7 fdef 	bl	80059ec <_exit>
	...

0800de10 <__sflush_r>:
 800de10:	898a      	ldrh	r2, [r1, #12]
 800de12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de16:	4605      	mov	r5, r0
 800de18:	0710      	lsls	r0, r2, #28
 800de1a:	460c      	mov	r4, r1
 800de1c:	d458      	bmi.n	800ded0 <__sflush_r+0xc0>
 800de1e:	684b      	ldr	r3, [r1, #4]
 800de20:	2b00      	cmp	r3, #0
 800de22:	dc05      	bgt.n	800de30 <__sflush_r+0x20>
 800de24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de26:	2b00      	cmp	r3, #0
 800de28:	dc02      	bgt.n	800de30 <__sflush_r+0x20>
 800de2a:	2000      	movs	r0, #0
 800de2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de32:	2e00      	cmp	r6, #0
 800de34:	d0f9      	beq.n	800de2a <__sflush_r+0x1a>
 800de36:	2300      	movs	r3, #0
 800de38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de3c:	682f      	ldr	r7, [r5, #0]
 800de3e:	602b      	str	r3, [r5, #0]
 800de40:	d032      	beq.n	800dea8 <__sflush_r+0x98>
 800de42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de44:	89a3      	ldrh	r3, [r4, #12]
 800de46:	075a      	lsls	r2, r3, #29
 800de48:	d505      	bpl.n	800de56 <__sflush_r+0x46>
 800de4a:	6863      	ldr	r3, [r4, #4]
 800de4c:	1ac0      	subs	r0, r0, r3
 800de4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de50:	b10b      	cbz	r3, 800de56 <__sflush_r+0x46>
 800de52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de54:	1ac0      	subs	r0, r0, r3
 800de56:	2300      	movs	r3, #0
 800de58:	4602      	mov	r2, r0
 800de5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de5c:	6a21      	ldr	r1, [r4, #32]
 800de5e:	4628      	mov	r0, r5
 800de60:	47b0      	blx	r6
 800de62:	1c43      	adds	r3, r0, #1
 800de64:	89a3      	ldrh	r3, [r4, #12]
 800de66:	d106      	bne.n	800de76 <__sflush_r+0x66>
 800de68:	6829      	ldr	r1, [r5, #0]
 800de6a:	291d      	cmp	r1, #29
 800de6c:	d82c      	bhi.n	800dec8 <__sflush_r+0xb8>
 800de6e:	4a2a      	ldr	r2, [pc, #168]	; (800df18 <__sflush_r+0x108>)
 800de70:	40ca      	lsrs	r2, r1
 800de72:	07d6      	lsls	r6, r2, #31
 800de74:	d528      	bpl.n	800dec8 <__sflush_r+0xb8>
 800de76:	2200      	movs	r2, #0
 800de78:	6062      	str	r2, [r4, #4]
 800de7a:	04d9      	lsls	r1, r3, #19
 800de7c:	6922      	ldr	r2, [r4, #16]
 800de7e:	6022      	str	r2, [r4, #0]
 800de80:	d504      	bpl.n	800de8c <__sflush_r+0x7c>
 800de82:	1c42      	adds	r2, r0, #1
 800de84:	d101      	bne.n	800de8a <__sflush_r+0x7a>
 800de86:	682b      	ldr	r3, [r5, #0]
 800de88:	b903      	cbnz	r3, 800de8c <__sflush_r+0x7c>
 800de8a:	6560      	str	r0, [r4, #84]	; 0x54
 800de8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de8e:	602f      	str	r7, [r5, #0]
 800de90:	2900      	cmp	r1, #0
 800de92:	d0ca      	beq.n	800de2a <__sflush_r+0x1a>
 800de94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de98:	4299      	cmp	r1, r3
 800de9a:	d002      	beq.n	800dea2 <__sflush_r+0x92>
 800de9c:	4628      	mov	r0, r5
 800de9e:	f7ff faa5 	bl	800d3ec <_free_r>
 800dea2:	2000      	movs	r0, #0
 800dea4:	6360      	str	r0, [r4, #52]	; 0x34
 800dea6:	e7c1      	b.n	800de2c <__sflush_r+0x1c>
 800dea8:	6a21      	ldr	r1, [r4, #32]
 800deaa:	2301      	movs	r3, #1
 800deac:	4628      	mov	r0, r5
 800deae:	47b0      	blx	r6
 800deb0:	1c41      	adds	r1, r0, #1
 800deb2:	d1c7      	bne.n	800de44 <__sflush_r+0x34>
 800deb4:	682b      	ldr	r3, [r5, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d0c4      	beq.n	800de44 <__sflush_r+0x34>
 800deba:	2b1d      	cmp	r3, #29
 800debc:	d001      	beq.n	800dec2 <__sflush_r+0xb2>
 800debe:	2b16      	cmp	r3, #22
 800dec0:	d101      	bne.n	800dec6 <__sflush_r+0xb6>
 800dec2:	602f      	str	r7, [r5, #0]
 800dec4:	e7b1      	b.n	800de2a <__sflush_r+0x1a>
 800dec6:	89a3      	ldrh	r3, [r4, #12]
 800dec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800decc:	81a3      	strh	r3, [r4, #12]
 800dece:	e7ad      	b.n	800de2c <__sflush_r+0x1c>
 800ded0:	690f      	ldr	r7, [r1, #16]
 800ded2:	2f00      	cmp	r7, #0
 800ded4:	d0a9      	beq.n	800de2a <__sflush_r+0x1a>
 800ded6:	0793      	lsls	r3, r2, #30
 800ded8:	680e      	ldr	r6, [r1, #0]
 800deda:	bf08      	it	eq
 800dedc:	694b      	ldreq	r3, [r1, #20]
 800dede:	600f      	str	r7, [r1, #0]
 800dee0:	bf18      	it	ne
 800dee2:	2300      	movne	r3, #0
 800dee4:	eba6 0807 	sub.w	r8, r6, r7
 800dee8:	608b      	str	r3, [r1, #8]
 800deea:	f1b8 0f00 	cmp.w	r8, #0
 800deee:	dd9c      	ble.n	800de2a <__sflush_r+0x1a>
 800def0:	6a21      	ldr	r1, [r4, #32]
 800def2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800def4:	4643      	mov	r3, r8
 800def6:	463a      	mov	r2, r7
 800def8:	4628      	mov	r0, r5
 800defa:	47b0      	blx	r6
 800defc:	2800      	cmp	r0, #0
 800defe:	dc06      	bgt.n	800df0e <__sflush_r+0xfe>
 800df00:	89a3      	ldrh	r3, [r4, #12]
 800df02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df06:	81a3      	strh	r3, [r4, #12]
 800df08:	f04f 30ff 	mov.w	r0, #4294967295
 800df0c:	e78e      	b.n	800de2c <__sflush_r+0x1c>
 800df0e:	4407      	add	r7, r0
 800df10:	eba8 0800 	sub.w	r8, r8, r0
 800df14:	e7e9      	b.n	800deea <__sflush_r+0xda>
 800df16:	bf00      	nop
 800df18:	20400001 	.word	0x20400001

0800df1c <_fflush_r>:
 800df1c:	b538      	push	{r3, r4, r5, lr}
 800df1e:	690b      	ldr	r3, [r1, #16]
 800df20:	4605      	mov	r5, r0
 800df22:	460c      	mov	r4, r1
 800df24:	b913      	cbnz	r3, 800df2c <_fflush_r+0x10>
 800df26:	2500      	movs	r5, #0
 800df28:	4628      	mov	r0, r5
 800df2a:	bd38      	pop	{r3, r4, r5, pc}
 800df2c:	b118      	cbz	r0, 800df36 <_fflush_r+0x1a>
 800df2e:	6983      	ldr	r3, [r0, #24]
 800df30:	b90b      	cbnz	r3, 800df36 <_fflush_r+0x1a>
 800df32:	f000 f887 	bl	800e044 <__sinit>
 800df36:	4b14      	ldr	r3, [pc, #80]	; (800df88 <_fflush_r+0x6c>)
 800df38:	429c      	cmp	r4, r3
 800df3a:	d11b      	bne.n	800df74 <_fflush_r+0x58>
 800df3c:	686c      	ldr	r4, [r5, #4]
 800df3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d0ef      	beq.n	800df26 <_fflush_r+0xa>
 800df46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df48:	07d0      	lsls	r0, r2, #31
 800df4a:	d404      	bmi.n	800df56 <_fflush_r+0x3a>
 800df4c:	0599      	lsls	r1, r3, #22
 800df4e:	d402      	bmi.n	800df56 <_fflush_r+0x3a>
 800df50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df52:	f000 f915 	bl	800e180 <__retarget_lock_acquire_recursive>
 800df56:	4628      	mov	r0, r5
 800df58:	4621      	mov	r1, r4
 800df5a:	f7ff ff59 	bl	800de10 <__sflush_r>
 800df5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df60:	07da      	lsls	r2, r3, #31
 800df62:	4605      	mov	r5, r0
 800df64:	d4e0      	bmi.n	800df28 <_fflush_r+0xc>
 800df66:	89a3      	ldrh	r3, [r4, #12]
 800df68:	059b      	lsls	r3, r3, #22
 800df6a:	d4dd      	bmi.n	800df28 <_fflush_r+0xc>
 800df6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df6e:	f000 f908 	bl	800e182 <__retarget_lock_release_recursive>
 800df72:	e7d9      	b.n	800df28 <_fflush_r+0xc>
 800df74:	4b05      	ldr	r3, [pc, #20]	; (800df8c <_fflush_r+0x70>)
 800df76:	429c      	cmp	r4, r3
 800df78:	d101      	bne.n	800df7e <_fflush_r+0x62>
 800df7a:	68ac      	ldr	r4, [r5, #8]
 800df7c:	e7df      	b.n	800df3e <_fflush_r+0x22>
 800df7e:	4b04      	ldr	r3, [pc, #16]	; (800df90 <_fflush_r+0x74>)
 800df80:	429c      	cmp	r4, r3
 800df82:	bf08      	it	eq
 800df84:	68ec      	ldreq	r4, [r5, #12]
 800df86:	e7da      	b.n	800df3e <_fflush_r+0x22>
 800df88:	0800fdec 	.word	0x0800fdec
 800df8c:	0800fe0c 	.word	0x0800fe0c
 800df90:	0800fdcc 	.word	0x0800fdcc

0800df94 <std>:
 800df94:	2300      	movs	r3, #0
 800df96:	b510      	push	{r4, lr}
 800df98:	4604      	mov	r4, r0
 800df9a:	e9c0 3300 	strd	r3, r3, [r0]
 800df9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dfa2:	6083      	str	r3, [r0, #8]
 800dfa4:	8181      	strh	r1, [r0, #12]
 800dfa6:	6643      	str	r3, [r0, #100]	; 0x64
 800dfa8:	81c2      	strh	r2, [r0, #14]
 800dfaa:	6183      	str	r3, [r0, #24]
 800dfac:	4619      	mov	r1, r3
 800dfae:	2208      	movs	r2, #8
 800dfb0:	305c      	adds	r0, #92	; 0x5c
 800dfb2:	f7fd fb5b 	bl	800b66c <memset>
 800dfb6:	4b05      	ldr	r3, [pc, #20]	; (800dfcc <std+0x38>)
 800dfb8:	6263      	str	r3, [r4, #36]	; 0x24
 800dfba:	4b05      	ldr	r3, [pc, #20]	; (800dfd0 <std+0x3c>)
 800dfbc:	62a3      	str	r3, [r4, #40]	; 0x28
 800dfbe:	4b05      	ldr	r3, [pc, #20]	; (800dfd4 <std+0x40>)
 800dfc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dfc2:	4b05      	ldr	r3, [pc, #20]	; (800dfd8 <std+0x44>)
 800dfc4:	6224      	str	r4, [r4, #32]
 800dfc6:	6323      	str	r3, [r4, #48]	; 0x30
 800dfc8:	bd10      	pop	{r4, pc}
 800dfca:	bf00      	nop
 800dfcc:	0800e2e9 	.word	0x0800e2e9
 800dfd0:	0800e30b 	.word	0x0800e30b
 800dfd4:	0800e343 	.word	0x0800e343
 800dfd8:	0800e367 	.word	0x0800e367

0800dfdc <_cleanup_r>:
 800dfdc:	4901      	ldr	r1, [pc, #4]	; (800dfe4 <_cleanup_r+0x8>)
 800dfde:	f000 b8af 	b.w	800e140 <_fwalk_reent>
 800dfe2:	bf00      	nop
 800dfe4:	0800df1d 	.word	0x0800df1d

0800dfe8 <__sfmoreglue>:
 800dfe8:	b570      	push	{r4, r5, r6, lr}
 800dfea:	2268      	movs	r2, #104	; 0x68
 800dfec:	1e4d      	subs	r5, r1, #1
 800dfee:	4355      	muls	r5, r2
 800dff0:	460e      	mov	r6, r1
 800dff2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dff6:	f7ff fa65 	bl	800d4c4 <_malloc_r>
 800dffa:	4604      	mov	r4, r0
 800dffc:	b140      	cbz	r0, 800e010 <__sfmoreglue+0x28>
 800dffe:	2100      	movs	r1, #0
 800e000:	e9c0 1600 	strd	r1, r6, [r0]
 800e004:	300c      	adds	r0, #12
 800e006:	60a0      	str	r0, [r4, #8]
 800e008:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e00c:	f7fd fb2e 	bl	800b66c <memset>
 800e010:	4620      	mov	r0, r4
 800e012:	bd70      	pop	{r4, r5, r6, pc}

0800e014 <__sfp_lock_acquire>:
 800e014:	4801      	ldr	r0, [pc, #4]	; (800e01c <__sfp_lock_acquire+0x8>)
 800e016:	f000 b8b3 	b.w	800e180 <__retarget_lock_acquire_recursive>
 800e01a:	bf00      	nop
 800e01c:	200009fd 	.word	0x200009fd

0800e020 <__sfp_lock_release>:
 800e020:	4801      	ldr	r0, [pc, #4]	; (800e028 <__sfp_lock_release+0x8>)
 800e022:	f000 b8ae 	b.w	800e182 <__retarget_lock_release_recursive>
 800e026:	bf00      	nop
 800e028:	200009fd 	.word	0x200009fd

0800e02c <__sinit_lock_acquire>:
 800e02c:	4801      	ldr	r0, [pc, #4]	; (800e034 <__sinit_lock_acquire+0x8>)
 800e02e:	f000 b8a7 	b.w	800e180 <__retarget_lock_acquire_recursive>
 800e032:	bf00      	nop
 800e034:	200009fe 	.word	0x200009fe

0800e038 <__sinit_lock_release>:
 800e038:	4801      	ldr	r0, [pc, #4]	; (800e040 <__sinit_lock_release+0x8>)
 800e03a:	f000 b8a2 	b.w	800e182 <__retarget_lock_release_recursive>
 800e03e:	bf00      	nop
 800e040:	200009fe 	.word	0x200009fe

0800e044 <__sinit>:
 800e044:	b510      	push	{r4, lr}
 800e046:	4604      	mov	r4, r0
 800e048:	f7ff fff0 	bl	800e02c <__sinit_lock_acquire>
 800e04c:	69a3      	ldr	r3, [r4, #24]
 800e04e:	b11b      	cbz	r3, 800e058 <__sinit+0x14>
 800e050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e054:	f7ff bff0 	b.w	800e038 <__sinit_lock_release>
 800e058:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e05c:	6523      	str	r3, [r4, #80]	; 0x50
 800e05e:	4b13      	ldr	r3, [pc, #76]	; (800e0ac <__sinit+0x68>)
 800e060:	4a13      	ldr	r2, [pc, #76]	; (800e0b0 <__sinit+0x6c>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	62a2      	str	r2, [r4, #40]	; 0x28
 800e066:	42a3      	cmp	r3, r4
 800e068:	bf04      	itt	eq
 800e06a:	2301      	moveq	r3, #1
 800e06c:	61a3      	streq	r3, [r4, #24]
 800e06e:	4620      	mov	r0, r4
 800e070:	f000 f820 	bl	800e0b4 <__sfp>
 800e074:	6060      	str	r0, [r4, #4]
 800e076:	4620      	mov	r0, r4
 800e078:	f000 f81c 	bl	800e0b4 <__sfp>
 800e07c:	60a0      	str	r0, [r4, #8]
 800e07e:	4620      	mov	r0, r4
 800e080:	f000 f818 	bl	800e0b4 <__sfp>
 800e084:	2200      	movs	r2, #0
 800e086:	60e0      	str	r0, [r4, #12]
 800e088:	2104      	movs	r1, #4
 800e08a:	6860      	ldr	r0, [r4, #4]
 800e08c:	f7ff ff82 	bl	800df94 <std>
 800e090:	68a0      	ldr	r0, [r4, #8]
 800e092:	2201      	movs	r2, #1
 800e094:	2109      	movs	r1, #9
 800e096:	f7ff ff7d 	bl	800df94 <std>
 800e09a:	68e0      	ldr	r0, [r4, #12]
 800e09c:	2202      	movs	r2, #2
 800e09e:	2112      	movs	r1, #18
 800e0a0:	f7ff ff78 	bl	800df94 <std>
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	61a3      	str	r3, [r4, #24]
 800e0a8:	e7d2      	b.n	800e050 <__sinit+0xc>
 800e0aa:	bf00      	nop
 800e0ac:	0800fa50 	.word	0x0800fa50
 800e0b0:	0800dfdd 	.word	0x0800dfdd

0800e0b4 <__sfp>:
 800e0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0b6:	4607      	mov	r7, r0
 800e0b8:	f7ff ffac 	bl	800e014 <__sfp_lock_acquire>
 800e0bc:	4b1e      	ldr	r3, [pc, #120]	; (800e138 <__sfp+0x84>)
 800e0be:	681e      	ldr	r6, [r3, #0]
 800e0c0:	69b3      	ldr	r3, [r6, #24]
 800e0c2:	b913      	cbnz	r3, 800e0ca <__sfp+0x16>
 800e0c4:	4630      	mov	r0, r6
 800e0c6:	f7ff ffbd 	bl	800e044 <__sinit>
 800e0ca:	3648      	adds	r6, #72	; 0x48
 800e0cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e0d0:	3b01      	subs	r3, #1
 800e0d2:	d503      	bpl.n	800e0dc <__sfp+0x28>
 800e0d4:	6833      	ldr	r3, [r6, #0]
 800e0d6:	b30b      	cbz	r3, 800e11c <__sfp+0x68>
 800e0d8:	6836      	ldr	r6, [r6, #0]
 800e0da:	e7f7      	b.n	800e0cc <__sfp+0x18>
 800e0dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e0e0:	b9d5      	cbnz	r5, 800e118 <__sfp+0x64>
 800e0e2:	4b16      	ldr	r3, [pc, #88]	; (800e13c <__sfp+0x88>)
 800e0e4:	60e3      	str	r3, [r4, #12]
 800e0e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e0ea:	6665      	str	r5, [r4, #100]	; 0x64
 800e0ec:	f000 f847 	bl	800e17e <__retarget_lock_init_recursive>
 800e0f0:	f7ff ff96 	bl	800e020 <__sfp_lock_release>
 800e0f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e0f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e0fc:	6025      	str	r5, [r4, #0]
 800e0fe:	61a5      	str	r5, [r4, #24]
 800e100:	2208      	movs	r2, #8
 800e102:	4629      	mov	r1, r5
 800e104:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e108:	f7fd fab0 	bl	800b66c <memset>
 800e10c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e110:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e114:	4620      	mov	r0, r4
 800e116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e118:	3468      	adds	r4, #104	; 0x68
 800e11a:	e7d9      	b.n	800e0d0 <__sfp+0x1c>
 800e11c:	2104      	movs	r1, #4
 800e11e:	4638      	mov	r0, r7
 800e120:	f7ff ff62 	bl	800dfe8 <__sfmoreglue>
 800e124:	4604      	mov	r4, r0
 800e126:	6030      	str	r0, [r6, #0]
 800e128:	2800      	cmp	r0, #0
 800e12a:	d1d5      	bne.n	800e0d8 <__sfp+0x24>
 800e12c:	f7ff ff78 	bl	800e020 <__sfp_lock_release>
 800e130:	230c      	movs	r3, #12
 800e132:	603b      	str	r3, [r7, #0]
 800e134:	e7ee      	b.n	800e114 <__sfp+0x60>
 800e136:	bf00      	nop
 800e138:	0800fa50 	.word	0x0800fa50
 800e13c:	ffff0001 	.word	0xffff0001

0800e140 <_fwalk_reent>:
 800e140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e144:	4606      	mov	r6, r0
 800e146:	4688      	mov	r8, r1
 800e148:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e14c:	2700      	movs	r7, #0
 800e14e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e152:	f1b9 0901 	subs.w	r9, r9, #1
 800e156:	d505      	bpl.n	800e164 <_fwalk_reent+0x24>
 800e158:	6824      	ldr	r4, [r4, #0]
 800e15a:	2c00      	cmp	r4, #0
 800e15c:	d1f7      	bne.n	800e14e <_fwalk_reent+0xe>
 800e15e:	4638      	mov	r0, r7
 800e160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e164:	89ab      	ldrh	r3, [r5, #12]
 800e166:	2b01      	cmp	r3, #1
 800e168:	d907      	bls.n	800e17a <_fwalk_reent+0x3a>
 800e16a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e16e:	3301      	adds	r3, #1
 800e170:	d003      	beq.n	800e17a <_fwalk_reent+0x3a>
 800e172:	4629      	mov	r1, r5
 800e174:	4630      	mov	r0, r6
 800e176:	47c0      	blx	r8
 800e178:	4307      	orrs	r7, r0
 800e17a:	3568      	adds	r5, #104	; 0x68
 800e17c:	e7e9      	b.n	800e152 <_fwalk_reent+0x12>

0800e17e <__retarget_lock_init_recursive>:
 800e17e:	4770      	bx	lr

0800e180 <__retarget_lock_acquire_recursive>:
 800e180:	4770      	bx	lr

0800e182 <__retarget_lock_release_recursive>:
 800e182:	4770      	bx	lr

0800e184 <__swhatbuf_r>:
 800e184:	b570      	push	{r4, r5, r6, lr}
 800e186:	460e      	mov	r6, r1
 800e188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e18c:	2900      	cmp	r1, #0
 800e18e:	b096      	sub	sp, #88	; 0x58
 800e190:	4614      	mov	r4, r2
 800e192:	461d      	mov	r5, r3
 800e194:	da08      	bge.n	800e1a8 <__swhatbuf_r+0x24>
 800e196:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e19a:	2200      	movs	r2, #0
 800e19c:	602a      	str	r2, [r5, #0]
 800e19e:	061a      	lsls	r2, r3, #24
 800e1a0:	d410      	bmi.n	800e1c4 <__swhatbuf_r+0x40>
 800e1a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1a6:	e00e      	b.n	800e1c6 <__swhatbuf_r+0x42>
 800e1a8:	466a      	mov	r2, sp
 800e1aa:	f000 f903 	bl	800e3b4 <_fstat_r>
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	dbf1      	blt.n	800e196 <__swhatbuf_r+0x12>
 800e1b2:	9a01      	ldr	r2, [sp, #4]
 800e1b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e1b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e1bc:	425a      	negs	r2, r3
 800e1be:	415a      	adcs	r2, r3
 800e1c0:	602a      	str	r2, [r5, #0]
 800e1c2:	e7ee      	b.n	800e1a2 <__swhatbuf_r+0x1e>
 800e1c4:	2340      	movs	r3, #64	; 0x40
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	6023      	str	r3, [r4, #0]
 800e1ca:	b016      	add	sp, #88	; 0x58
 800e1cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e1d0 <__smakebuf_r>:
 800e1d0:	898b      	ldrh	r3, [r1, #12]
 800e1d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1d4:	079d      	lsls	r5, r3, #30
 800e1d6:	4606      	mov	r6, r0
 800e1d8:	460c      	mov	r4, r1
 800e1da:	d507      	bpl.n	800e1ec <__smakebuf_r+0x1c>
 800e1dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1e0:	6023      	str	r3, [r4, #0]
 800e1e2:	6123      	str	r3, [r4, #16]
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	6163      	str	r3, [r4, #20]
 800e1e8:	b002      	add	sp, #8
 800e1ea:	bd70      	pop	{r4, r5, r6, pc}
 800e1ec:	ab01      	add	r3, sp, #4
 800e1ee:	466a      	mov	r2, sp
 800e1f0:	f7ff ffc8 	bl	800e184 <__swhatbuf_r>
 800e1f4:	9900      	ldr	r1, [sp, #0]
 800e1f6:	4605      	mov	r5, r0
 800e1f8:	4630      	mov	r0, r6
 800e1fa:	f7ff f963 	bl	800d4c4 <_malloc_r>
 800e1fe:	b948      	cbnz	r0, 800e214 <__smakebuf_r+0x44>
 800e200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e204:	059a      	lsls	r2, r3, #22
 800e206:	d4ef      	bmi.n	800e1e8 <__smakebuf_r+0x18>
 800e208:	f023 0303 	bic.w	r3, r3, #3
 800e20c:	f043 0302 	orr.w	r3, r3, #2
 800e210:	81a3      	strh	r3, [r4, #12]
 800e212:	e7e3      	b.n	800e1dc <__smakebuf_r+0xc>
 800e214:	4b0d      	ldr	r3, [pc, #52]	; (800e24c <__smakebuf_r+0x7c>)
 800e216:	62b3      	str	r3, [r6, #40]	; 0x28
 800e218:	89a3      	ldrh	r3, [r4, #12]
 800e21a:	6020      	str	r0, [r4, #0]
 800e21c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e220:	81a3      	strh	r3, [r4, #12]
 800e222:	9b00      	ldr	r3, [sp, #0]
 800e224:	6163      	str	r3, [r4, #20]
 800e226:	9b01      	ldr	r3, [sp, #4]
 800e228:	6120      	str	r0, [r4, #16]
 800e22a:	b15b      	cbz	r3, 800e244 <__smakebuf_r+0x74>
 800e22c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e230:	4630      	mov	r0, r6
 800e232:	f000 f8d1 	bl	800e3d8 <_isatty_r>
 800e236:	b128      	cbz	r0, 800e244 <__smakebuf_r+0x74>
 800e238:	89a3      	ldrh	r3, [r4, #12]
 800e23a:	f023 0303 	bic.w	r3, r3, #3
 800e23e:	f043 0301 	orr.w	r3, r3, #1
 800e242:	81a3      	strh	r3, [r4, #12]
 800e244:	89a0      	ldrh	r0, [r4, #12]
 800e246:	4305      	orrs	r5, r0
 800e248:	81a5      	strh	r5, [r4, #12]
 800e24a:	e7cd      	b.n	800e1e8 <__smakebuf_r+0x18>
 800e24c:	0800dfdd 	.word	0x0800dfdd

0800e250 <_malloc_usable_size_r>:
 800e250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e254:	1f18      	subs	r0, r3, #4
 800e256:	2b00      	cmp	r3, #0
 800e258:	bfbc      	itt	lt
 800e25a:	580b      	ldrlt	r3, [r1, r0]
 800e25c:	18c0      	addlt	r0, r0, r3
 800e25e:	4770      	bx	lr

0800e260 <_raise_r>:
 800e260:	291f      	cmp	r1, #31
 800e262:	b538      	push	{r3, r4, r5, lr}
 800e264:	4604      	mov	r4, r0
 800e266:	460d      	mov	r5, r1
 800e268:	d904      	bls.n	800e274 <_raise_r+0x14>
 800e26a:	2316      	movs	r3, #22
 800e26c:	6003      	str	r3, [r0, #0]
 800e26e:	f04f 30ff 	mov.w	r0, #4294967295
 800e272:	bd38      	pop	{r3, r4, r5, pc}
 800e274:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e276:	b112      	cbz	r2, 800e27e <_raise_r+0x1e>
 800e278:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e27c:	b94b      	cbnz	r3, 800e292 <_raise_r+0x32>
 800e27e:	4620      	mov	r0, r4
 800e280:	f000 f830 	bl	800e2e4 <_getpid_r>
 800e284:	462a      	mov	r2, r5
 800e286:	4601      	mov	r1, r0
 800e288:	4620      	mov	r0, r4
 800e28a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e28e:	f000 b817 	b.w	800e2c0 <_kill_r>
 800e292:	2b01      	cmp	r3, #1
 800e294:	d00a      	beq.n	800e2ac <_raise_r+0x4c>
 800e296:	1c59      	adds	r1, r3, #1
 800e298:	d103      	bne.n	800e2a2 <_raise_r+0x42>
 800e29a:	2316      	movs	r3, #22
 800e29c:	6003      	str	r3, [r0, #0]
 800e29e:	2001      	movs	r0, #1
 800e2a0:	e7e7      	b.n	800e272 <_raise_r+0x12>
 800e2a2:	2400      	movs	r4, #0
 800e2a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	4798      	blx	r3
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	e7e0      	b.n	800e272 <_raise_r+0x12>

0800e2b0 <raise>:
 800e2b0:	4b02      	ldr	r3, [pc, #8]	; (800e2bc <raise+0xc>)
 800e2b2:	4601      	mov	r1, r0
 800e2b4:	6818      	ldr	r0, [r3, #0]
 800e2b6:	f7ff bfd3 	b.w	800e260 <_raise_r>
 800e2ba:	bf00      	nop
 800e2bc:	20000084 	.word	0x20000084

0800e2c0 <_kill_r>:
 800e2c0:	b538      	push	{r3, r4, r5, lr}
 800e2c2:	4d07      	ldr	r5, [pc, #28]	; (800e2e0 <_kill_r+0x20>)
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	4608      	mov	r0, r1
 800e2ca:	4611      	mov	r1, r2
 800e2cc:	602b      	str	r3, [r5, #0]
 800e2ce:	f7f7 fb7d 	bl	80059cc <_kill>
 800e2d2:	1c43      	adds	r3, r0, #1
 800e2d4:	d102      	bne.n	800e2dc <_kill_r+0x1c>
 800e2d6:	682b      	ldr	r3, [r5, #0]
 800e2d8:	b103      	cbz	r3, 800e2dc <_kill_r+0x1c>
 800e2da:	6023      	str	r3, [r4, #0]
 800e2dc:	bd38      	pop	{r3, r4, r5, pc}
 800e2de:	bf00      	nop
 800e2e0:	200009f8 	.word	0x200009f8

0800e2e4 <_getpid_r>:
 800e2e4:	f7f7 bb6a 	b.w	80059bc <_getpid>

0800e2e8 <__sread>:
 800e2e8:	b510      	push	{r4, lr}
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2f0:	f000 f894 	bl	800e41c <_read_r>
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	bfab      	itete	ge
 800e2f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e2fa:	89a3      	ldrhlt	r3, [r4, #12]
 800e2fc:	181b      	addge	r3, r3, r0
 800e2fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e302:	bfac      	ite	ge
 800e304:	6563      	strge	r3, [r4, #84]	; 0x54
 800e306:	81a3      	strhlt	r3, [r4, #12]
 800e308:	bd10      	pop	{r4, pc}

0800e30a <__swrite>:
 800e30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e30e:	461f      	mov	r7, r3
 800e310:	898b      	ldrh	r3, [r1, #12]
 800e312:	05db      	lsls	r3, r3, #23
 800e314:	4605      	mov	r5, r0
 800e316:	460c      	mov	r4, r1
 800e318:	4616      	mov	r6, r2
 800e31a:	d505      	bpl.n	800e328 <__swrite+0x1e>
 800e31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e320:	2302      	movs	r3, #2
 800e322:	2200      	movs	r2, #0
 800e324:	f000 f868 	bl	800e3f8 <_lseek_r>
 800e328:	89a3      	ldrh	r3, [r4, #12]
 800e32a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e32e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e332:	81a3      	strh	r3, [r4, #12]
 800e334:	4632      	mov	r2, r6
 800e336:	463b      	mov	r3, r7
 800e338:	4628      	mov	r0, r5
 800e33a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e33e:	f000 b817 	b.w	800e370 <_write_r>

0800e342 <__sseek>:
 800e342:	b510      	push	{r4, lr}
 800e344:	460c      	mov	r4, r1
 800e346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e34a:	f000 f855 	bl	800e3f8 <_lseek_r>
 800e34e:	1c43      	adds	r3, r0, #1
 800e350:	89a3      	ldrh	r3, [r4, #12]
 800e352:	bf15      	itete	ne
 800e354:	6560      	strne	r0, [r4, #84]	; 0x54
 800e356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e35a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e35e:	81a3      	strheq	r3, [r4, #12]
 800e360:	bf18      	it	ne
 800e362:	81a3      	strhne	r3, [r4, #12]
 800e364:	bd10      	pop	{r4, pc}

0800e366 <__sclose>:
 800e366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e36a:	f000 b813 	b.w	800e394 <_close_r>
	...

0800e370 <_write_r>:
 800e370:	b538      	push	{r3, r4, r5, lr}
 800e372:	4d07      	ldr	r5, [pc, #28]	; (800e390 <_write_r+0x20>)
 800e374:	4604      	mov	r4, r0
 800e376:	4608      	mov	r0, r1
 800e378:	4611      	mov	r1, r2
 800e37a:	2200      	movs	r2, #0
 800e37c:	602a      	str	r2, [r5, #0]
 800e37e:	461a      	mov	r2, r3
 800e380:	f7f7 fb5b 	bl	8005a3a <_write>
 800e384:	1c43      	adds	r3, r0, #1
 800e386:	d102      	bne.n	800e38e <_write_r+0x1e>
 800e388:	682b      	ldr	r3, [r5, #0]
 800e38a:	b103      	cbz	r3, 800e38e <_write_r+0x1e>
 800e38c:	6023      	str	r3, [r4, #0]
 800e38e:	bd38      	pop	{r3, r4, r5, pc}
 800e390:	200009f8 	.word	0x200009f8

0800e394 <_close_r>:
 800e394:	b538      	push	{r3, r4, r5, lr}
 800e396:	4d06      	ldr	r5, [pc, #24]	; (800e3b0 <_close_r+0x1c>)
 800e398:	2300      	movs	r3, #0
 800e39a:	4604      	mov	r4, r0
 800e39c:	4608      	mov	r0, r1
 800e39e:	602b      	str	r3, [r5, #0]
 800e3a0:	f7f7 fb67 	bl	8005a72 <_close>
 800e3a4:	1c43      	adds	r3, r0, #1
 800e3a6:	d102      	bne.n	800e3ae <_close_r+0x1a>
 800e3a8:	682b      	ldr	r3, [r5, #0]
 800e3aa:	b103      	cbz	r3, 800e3ae <_close_r+0x1a>
 800e3ac:	6023      	str	r3, [r4, #0]
 800e3ae:	bd38      	pop	{r3, r4, r5, pc}
 800e3b0:	200009f8 	.word	0x200009f8

0800e3b4 <_fstat_r>:
 800e3b4:	b538      	push	{r3, r4, r5, lr}
 800e3b6:	4d07      	ldr	r5, [pc, #28]	; (800e3d4 <_fstat_r+0x20>)
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	4608      	mov	r0, r1
 800e3be:	4611      	mov	r1, r2
 800e3c0:	602b      	str	r3, [r5, #0]
 800e3c2:	f7f7 fb62 	bl	8005a8a <_fstat>
 800e3c6:	1c43      	adds	r3, r0, #1
 800e3c8:	d102      	bne.n	800e3d0 <_fstat_r+0x1c>
 800e3ca:	682b      	ldr	r3, [r5, #0]
 800e3cc:	b103      	cbz	r3, 800e3d0 <_fstat_r+0x1c>
 800e3ce:	6023      	str	r3, [r4, #0]
 800e3d0:	bd38      	pop	{r3, r4, r5, pc}
 800e3d2:	bf00      	nop
 800e3d4:	200009f8 	.word	0x200009f8

0800e3d8 <_isatty_r>:
 800e3d8:	b538      	push	{r3, r4, r5, lr}
 800e3da:	4d06      	ldr	r5, [pc, #24]	; (800e3f4 <_isatty_r+0x1c>)
 800e3dc:	2300      	movs	r3, #0
 800e3de:	4604      	mov	r4, r0
 800e3e0:	4608      	mov	r0, r1
 800e3e2:	602b      	str	r3, [r5, #0]
 800e3e4:	f7f7 fb61 	bl	8005aaa <_isatty>
 800e3e8:	1c43      	adds	r3, r0, #1
 800e3ea:	d102      	bne.n	800e3f2 <_isatty_r+0x1a>
 800e3ec:	682b      	ldr	r3, [r5, #0]
 800e3ee:	b103      	cbz	r3, 800e3f2 <_isatty_r+0x1a>
 800e3f0:	6023      	str	r3, [r4, #0]
 800e3f2:	bd38      	pop	{r3, r4, r5, pc}
 800e3f4:	200009f8 	.word	0x200009f8

0800e3f8 <_lseek_r>:
 800e3f8:	b538      	push	{r3, r4, r5, lr}
 800e3fa:	4d07      	ldr	r5, [pc, #28]	; (800e418 <_lseek_r+0x20>)
 800e3fc:	4604      	mov	r4, r0
 800e3fe:	4608      	mov	r0, r1
 800e400:	4611      	mov	r1, r2
 800e402:	2200      	movs	r2, #0
 800e404:	602a      	str	r2, [r5, #0]
 800e406:	461a      	mov	r2, r3
 800e408:	f7f7 fb5a 	bl	8005ac0 <_lseek>
 800e40c:	1c43      	adds	r3, r0, #1
 800e40e:	d102      	bne.n	800e416 <_lseek_r+0x1e>
 800e410:	682b      	ldr	r3, [r5, #0]
 800e412:	b103      	cbz	r3, 800e416 <_lseek_r+0x1e>
 800e414:	6023      	str	r3, [r4, #0]
 800e416:	bd38      	pop	{r3, r4, r5, pc}
 800e418:	200009f8 	.word	0x200009f8

0800e41c <_read_r>:
 800e41c:	b538      	push	{r3, r4, r5, lr}
 800e41e:	4d07      	ldr	r5, [pc, #28]	; (800e43c <_read_r+0x20>)
 800e420:	4604      	mov	r4, r0
 800e422:	4608      	mov	r0, r1
 800e424:	4611      	mov	r1, r2
 800e426:	2200      	movs	r2, #0
 800e428:	602a      	str	r2, [r5, #0]
 800e42a:	461a      	mov	r2, r3
 800e42c:	f7f7 fae8 	bl	8005a00 <_read>
 800e430:	1c43      	adds	r3, r0, #1
 800e432:	d102      	bne.n	800e43a <_read_r+0x1e>
 800e434:	682b      	ldr	r3, [r5, #0]
 800e436:	b103      	cbz	r3, 800e43a <_read_r+0x1e>
 800e438:	6023      	str	r3, [r4, #0]
 800e43a:	bd38      	pop	{r3, r4, r5, pc}
 800e43c:	200009f8 	.word	0x200009f8

0800e440 <atan>:
 800e440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e444:	ec55 4b10 	vmov	r4, r5, d0
 800e448:	4bc3      	ldr	r3, [pc, #780]	; (800e758 <atan+0x318>)
 800e44a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e44e:	429e      	cmp	r6, r3
 800e450:	46ab      	mov	fp, r5
 800e452:	dd18      	ble.n	800e486 <atan+0x46>
 800e454:	4bc1      	ldr	r3, [pc, #772]	; (800e75c <atan+0x31c>)
 800e456:	429e      	cmp	r6, r3
 800e458:	dc01      	bgt.n	800e45e <atan+0x1e>
 800e45a:	d109      	bne.n	800e470 <atan+0x30>
 800e45c:	b144      	cbz	r4, 800e470 <atan+0x30>
 800e45e:	4622      	mov	r2, r4
 800e460:	462b      	mov	r3, r5
 800e462:	4620      	mov	r0, r4
 800e464:	4629      	mov	r1, r5
 800e466:	f7f1 ff31 	bl	80002cc <__adddf3>
 800e46a:	4604      	mov	r4, r0
 800e46c:	460d      	mov	r5, r1
 800e46e:	e006      	b.n	800e47e <atan+0x3e>
 800e470:	f1bb 0f00 	cmp.w	fp, #0
 800e474:	f300 8131 	bgt.w	800e6da <atan+0x29a>
 800e478:	a59b      	add	r5, pc, #620	; (adr r5, 800e6e8 <atan+0x2a8>)
 800e47a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e47e:	ec45 4b10 	vmov	d0, r4, r5
 800e482:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e486:	4bb6      	ldr	r3, [pc, #728]	; (800e760 <atan+0x320>)
 800e488:	429e      	cmp	r6, r3
 800e48a:	dc14      	bgt.n	800e4b6 <atan+0x76>
 800e48c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e490:	429e      	cmp	r6, r3
 800e492:	dc0d      	bgt.n	800e4b0 <atan+0x70>
 800e494:	a396      	add	r3, pc, #600	; (adr r3, 800e6f0 <atan+0x2b0>)
 800e496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49a:	ee10 0a10 	vmov	r0, s0
 800e49e:	4629      	mov	r1, r5
 800e4a0:	f7f1 ff14 	bl	80002cc <__adddf3>
 800e4a4:	4baf      	ldr	r3, [pc, #700]	; (800e764 <atan+0x324>)
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	f7f2 fb56 	bl	8000b58 <__aeabi_dcmpgt>
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	d1e6      	bne.n	800e47e <atan+0x3e>
 800e4b0:	f04f 3aff 	mov.w	sl, #4294967295
 800e4b4:	e02b      	b.n	800e50e <atan+0xce>
 800e4b6:	f000 f963 	bl	800e780 <fabs>
 800e4ba:	4bab      	ldr	r3, [pc, #684]	; (800e768 <atan+0x328>)
 800e4bc:	429e      	cmp	r6, r3
 800e4be:	ec55 4b10 	vmov	r4, r5, d0
 800e4c2:	f300 80bf 	bgt.w	800e644 <atan+0x204>
 800e4c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e4ca:	429e      	cmp	r6, r3
 800e4cc:	f300 80a0 	bgt.w	800e610 <atan+0x1d0>
 800e4d0:	ee10 2a10 	vmov	r2, s0
 800e4d4:	ee10 0a10 	vmov	r0, s0
 800e4d8:	462b      	mov	r3, r5
 800e4da:	4629      	mov	r1, r5
 800e4dc:	f7f1 fef6 	bl	80002cc <__adddf3>
 800e4e0:	4ba0      	ldr	r3, [pc, #640]	; (800e764 <atan+0x324>)
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f7f1 fef0 	bl	80002c8 <__aeabi_dsub>
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	4606      	mov	r6, r0
 800e4ec:	460f      	mov	r7, r1
 800e4ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	4629      	mov	r1, r5
 800e4f6:	f7f1 fee9 	bl	80002cc <__adddf3>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	4630      	mov	r0, r6
 800e500:	4639      	mov	r1, r7
 800e502:	f7f2 f9c3 	bl	800088c <__aeabi_ddiv>
 800e506:	f04f 0a00 	mov.w	sl, #0
 800e50a:	4604      	mov	r4, r0
 800e50c:	460d      	mov	r5, r1
 800e50e:	4622      	mov	r2, r4
 800e510:	462b      	mov	r3, r5
 800e512:	4620      	mov	r0, r4
 800e514:	4629      	mov	r1, r5
 800e516:	f7f2 f88f 	bl	8000638 <__aeabi_dmul>
 800e51a:	4602      	mov	r2, r0
 800e51c:	460b      	mov	r3, r1
 800e51e:	4680      	mov	r8, r0
 800e520:	4689      	mov	r9, r1
 800e522:	f7f2 f889 	bl	8000638 <__aeabi_dmul>
 800e526:	a374      	add	r3, pc, #464	; (adr r3, 800e6f8 <atan+0x2b8>)
 800e528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52c:	4606      	mov	r6, r0
 800e52e:	460f      	mov	r7, r1
 800e530:	f7f2 f882 	bl	8000638 <__aeabi_dmul>
 800e534:	a372      	add	r3, pc, #456	; (adr r3, 800e700 <atan+0x2c0>)
 800e536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53a:	f7f1 fec7 	bl	80002cc <__adddf3>
 800e53e:	4632      	mov	r2, r6
 800e540:	463b      	mov	r3, r7
 800e542:	f7f2 f879 	bl	8000638 <__aeabi_dmul>
 800e546:	a370      	add	r3, pc, #448	; (adr r3, 800e708 <atan+0x2c8>)
 800e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54c:	f7f1 febe 	bl	80002cc <__adddf3>
 800e550:	4632      	mov	r2, r6
 800e552:	463b      	mov	r3, r7
 800e554:	f7f2 f870 	bl	8000638 <__aeabi_dmul>
 800e558:	a36d      	add	r3, pc, #436	; (adr r3, 800e710 <atan+0x2d0>)
 800e55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55e:	f7f1 feb5 	bl	80002cc <__adddf3>
 800e562:	4632      	mov	r2, r6
 800e564:	463b      	mov	r3, r7
 800e566:	f7f2 f867 	bl	8000638 <__aeabi_dmul>
 800e56a:	a36b      	add	r3, pc, #428	; (adr r3, 800e718 <atan+0x2d8>)
 800e56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e570:	f7f1 feac 	bl	80002cc <__adddf3>
 800e574:	4632      	mov	r2, r6
 800e576:	463b      	mov	r3, r7
 800e578:	f7f2 f85e 	bl	8000638 <__aeabi_dmul>
 800e57c:	a368      	add	r3, pc, #416	; (adr r3, 800e720 <atan+0x2e0>)
 800e57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e582:	f7f1 fea3 	bl	80002cc <__adddf3>
 800e586:	4642      	mov	r2, r8
 800e588:	464b      	mov	r3, r9
 800e58a:	f7f2 f855 	bl	8000638 <__aeabi_dmul>
 800e58e:	a366      	add	r3, pc, #408	; (adr r3, 800e728 <atan+0x2e8>)
 800e590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e594:	4680      	mov	r8, r0
 800e596:	4689      	mov	r9, r1
 800e598:	4630      	mov	r0, r6
 800e59a:	4639      	mov	r1, r7
 800e59c:	f7f2 f84c 	bl	8000638 <__aeabi_dmul>
 800e5a0:	a363      	add	r3, pc, #396	; (adr r3, 800e730 <atan+0x2f0>)
 800e5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a6:	f7f1 fe8f 	bl	80002c8 <__aeabi_dsub>
 800e5aa:	4632      	mov	r2, r6
 800e5ac:	463b      	mov	r3, r7
 800e5ae:	f7f2 f843 	bl	8000638 <__aeabi_dmul>
 800e5b2:	a361      	add	r3, pc, #388	; (adr r3, 800e738 <atan+0x2f8>)
 800e5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b8:	f7f1 fe86 	bl	80002c8 <__aeabi_dsub>
 800e5bc:	4632      	mov	r2, r6
 800e5be:	463b      	mov	r3, r7
 800e5c0:	f7f2 f83a 	bl	8000638 <__aeabi_dmul>
 800e5c4:	a35e      	add	r3, pc, #376	; (adr r3, 800e740 <atan+0x300>)
 800e5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ca:	f7f1 fe7d 	bl	80002c8 <__aeabi_dsub>
 800e5ce:	4632      	mov	r2, r6
 800e5d0:	463b      	mov	r3, r7
 800e5d2:	f7f2 f831 	bl	8000638 <__aeabi_dmul>
 800e5d6:	a35c      	add	r3, pc, #368	; (adr r3, 800e748 <atan+0x308>)
 800e5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5dc:	f7f1 fe74 	bl	80002c8 <__aeabi_dsub>
 800e5e0:	4632      	mov	r2, r6
 800e5e2:	463b      	mov	r3, r7
 800e5e4:	f7f2 f828 	bl	8000638 <__aeabi_dmul>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	4640      	mov	r0, r8
 800e5ee:	4649      	mov	r1, r9
 800e5f0:	f7f1 fe6c 	bl	80002cc <__adddf3>
 800e5f4:	4622      	mov	r2, r4
 800e5f6:	462b      	mov	r3, r5
 800e5f8:	f7f2 f81e 	bl	8000638 <__aeabi_dmul>
 800e5fc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e600:	4602      	mov	r2, r0
 800e602:	460b      	mov	r3, r1
 800e604:	d14b      	bne.n	800e69e <atan+0x25e>
 800e606:	4620      	mov	r0, r4
 800e608:	4629      	mov	r1, r5
 800e60a:	f7f1 fe5d 	bl	80002c8 <__aeabi_dsub>
 800e60e:	e72c      	b.n	800e46a <atan+0x2a>
 800e610:	ee10 0a10 	vmov	r0, s0
 800e614:	4b53      	ldr	r3, [pc, #332]	; (800e764 <atan+0x324>)
 800e616:	2200      	movs	r2, #0
 800e618:	4629      	mov	r1, r5
 800e61a:	f7f1 fe55 	bl	80002c8 <__aeabi_dsub>
 800e61e:	4b51      	ldr	r3, [pc, #324]	; (800e764 <atan+0x324>)
 800e620:	4606      	mov	r6, r0
 800e622:	460f      	mov	r7, r1
 800e624:	2200      	movs	r2, #0
 800e626:	4620      	mov	r0, r4
 800e628:	4629      	mov	r1, r5
 800e62a:	f7f1 fe4f 	bl	80002cc <__adddf3>
 800e62e:	4602      	mov	r2, r0
 800e630:	460b      	mov	r3, r1
 800e632:	4630      	mov	r0, r6
 800e634:	4639      	mov	r1, r7
 800e636:	f7f2 f929 	bl	800088c <__aeabi_ddiv>
 800e63a:	f04f 0a01 	mov.w	sl, #1
 800e63e:	4604      	mov	r4, r0
 800e640:	460d      	mov	r5, r1
 800e642:	e764      	b.n	800e50e <atan+0xce>
 800e644:	4b49      	ldr	r3, [pc, #292]	; (800e76c <atan+0x32c>)
 800e646:	429e      	cmp	r6, r3
 800e648:	da1d      	bge.n	800e686 <atan+0x246>
 800e64a:	ee10 0a10 	vmov	r0, s0
 800e64e:	4b48      	ldr	r3, [pc, #288]	; (800e770 <atan+0x330>)
 800e650:	2200      	movs	r2, #0
 800e652:	4629      	mov	r1, r5
 800e654:	f7f1 fe38 	bl	80002c8 <__aeabi_dsub>
 800e658:	4b45      	ldr	r3, [pc, #276]	; (800e770 <atan+0x330>)
 800e65a:	4606      	mov	r6, r0
 800e65c:	460f      	mov	r7, r1
 800e65e:	2200      	movs	r2, #0
 800e660:	4620      	mov	r0, r4
 800e662:	4629      	mov	r1, r5
 800e664:	f7f1 ffe8 	bl	8000638 <__aeabi_dmul>
 800e668:	4b3e      	ldr	r3, [pc, #248]	; (800e764 <atan+0x324>)
 800e66a:	2200      	movs	r2, #0
 800e66c:	f7f1 fe2e 	bl	80002cc <__adddf3>
 800e670:	4602      	mov	r2, r0
 800e672:	460b      	mov	r3, r1
 800e674:	4630      	mov	r0, r6
 800e676:	4639      	mov	r1, r7
 800e678:	f7f2 f908 	bl	800088c <__aeabi_ddiv>
 800e67c:	f04f 0a02 	mov.w	sl, #2
 800e680:	4604      	mov	r4, r0
 800e682:	460d      	mov	r5, r1
 800e684:	e743      	b.n	800e50e <atan+0xce>
 800e686:	462b      	mov	r3, r5
 800e688:	ee10 2a10 	vmov	r2, s0
 800e68c:	4939      	ldr	r1, [pc, #228]	; (800e774 <atan+0x334>)
 800e68e:	2000      	movs	r0, #0
 800e690:	f7f2 f8fc 	bl	800088c <__aeabi_ddiv>
 800e694:	f04f 0a03 	mov.w	sl, #3
 800e698:	4604      	mov	r4, r0
 800e69a:	460d      	mov	r5, r1
 800e69c:	e737      	b.n	800e50e <atan+0xce>
 800e69e:	4b36      	ldr	r3, [pc, #216]	; (800e778 <atan+0x338>)
 800e6a0:	4e36      	ldr	r6, [pc, #216]	; (800e77c <atan+0x33c>)
 800e6a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e6a6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800e6aa:	e9da 2300 	ldrd	r2, r3, [sl]
 800e6ae:	f7f1 fe0b 	bl	80002c8 <__aeabi_dsub>
 800e6b2:	4622      	mov	r2, r4
 800e6b4:	462b      	mov	r3, r5
 800e6b6:	f7f1 fe07 	bl	80002c8 <__aeabi_dsub>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	460b      	mov	r3, r1
 800e6be:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e6c2:	f7f1 fe01 	bl	80002c8 <__aeabi_dsub>
 800e6c6:	f1bb 0f00 	cmp.w	fp, #0
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	460d      	mov	r5, r1
 800e6ce:	f6bf aed6 	bge.w	800e47e <atan+0x3e>
 800e6d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6d6:	461d      	mov	r5, r3
 800e6d8:	e6d1      	b.n	800e47e <atan+0x3e>
 800e6da:	a51d      	add	r5, pc, #116	; (adr r5, 800e750 <atan+0x310>)
 800e6dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e6e0:	e6cd      	b.n	800e47e <atan+0x3e>
 800e6e2:	bf00      	nop
 800e6e4:	f3af 8000 	nop.w
 800e6e8:	54442d18 	.word	0x54442d18
 800e6ec:	bff921fb 	.word	0xbff921fb
 800e6f0:	8800759c 	.word	0x8800759c
 800e6f4:	7e37e43c 	.word	0x7e37e43c
 800e6f8:	e322da11 	.word	0xe322da11
 800e6fc:	3f90ad3a 	.word	0x3f90ad3a
 800e700:	24760deb 	.word	0x24760deb
 800e704:	3fa97b4b 	.word	0x3fa97b4b
 800e708:	a0d03d51 	.word	0xa0d03d51
 800e70c:	3fb10d66 	.word	0x3fb10d66
 800e710:	c54c206e 	.word	0xc54c206e
 800e714:	3fb745cd 	.word	0x3fb745cd
 800e718:	920083ff 	.word	0x920083ff
 800e71c:	3fc24924 	.word	0x3fc24924
 800e720:	5555550d 	.word	0x5555550d
 800e724:	3fd55555 	.word	0x3fd55555
 800e728:	2c6a6c2f 	.word	0x2c6a6c2f
 800e72c:	bfa2b444 	.word	0xbfa2b444
 800e730:	52defd9a 	.word	0x52defd9a
 800e734:	3fadde2d 	.word	0x3fadde2d
 800e738:	af749a6d 	.word	0xaf749a6d
 800e73c:	3fb3b0f2 	.word	0x3fb3b0f2
 800e740:	fe231671 	.word	0xfe231671
 800e744:	3fbc71c6 	.word	0x3fbc71c6
 800e748:	9998ebc4 	.word	0x9998ebc4
 800e74c:	3fc99999 	.word	0x3fc99999
 800e750:	54442d18 	.word	0x54442d18
 800e754:	3ff921fb 	.word	0x3ff921fb
 800e758:	440fffff 	.word	0x440fffff
 800e75c:	7ff00000 	.word	0x7ff00000
 800e760:	3fdbffff 	.word	0x3fdbffff
 800e764:	3ff00000 	.word	0x3ff00000
 800e768:	3ff2ffff 	.word	0x3ff2ffff
 800e76c:	40038000 	.word	0x40038000
 800e770:	3ff80000 	.word	0x3ff80000
 800e774:	bff00000 	.word	0xbff00000
 800e778:	0800fe50 	.word	0x0800fe50
 800e77c:	0800fe30 	.word	0x0800fe30

0800e780 <fabs>:
 800e780:	ec51 0b10 	vmov	r0, r1, d0
 800e784:	ee10 2a10 	vmov	r2, s0
 800e788:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e78c:	ec43 2b10 	vmov	d0, r2, r3
 800e790:	4770      	bx	lr
 800e792:	0000      	movs	r0, r0
 800e794:	0000      	movs	r0, r0
	...

0800e798 <tan>:
 800e798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e79a:	ec53 2b10 	vmov	r2, r3, d0
 800e79e:	4816      	ldr	r0, [pc, #88]	; (800e7f8 <tan+0x60>)
 800e7a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e7a4:	4281      	cmp	r1, r0
 800e7a6:	dc07      	bgt.n	800e7b8 <tan+0x20>
 800e7a8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800e7f0 <tan+0x58>
 800e7ac:	2001      	movs	r0, #1
 800e7ae:	b005      	add	sp, #20
 800e7b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7b4:	f000 bd80 	b.w	800f2b8 <__kernel_tan>
 800e7b8:	4810      	ldr	r0, [pc, #64]	; (800e7fc <tan+0x64>)
 800e7ba:	4281      	cmp	r1, r0
 800e7bc:	dd09      	ble.n	800e7d2 <tan+0x3a>
 800e7be:	ee10 0a10 	vmov	r0, s0
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	f7f1 fd80 	bl	80002c8 <__aeabi_dsub>
 800e7c8:	ec41 0b10 	vmov	d0, r0, r1
 800e7cc:	b005      	add	sp, #20
 800e7ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7d2:	4668      	mov	r0, sp
 800e7d4:	f000 f814 	bl	800e800 <__ieee754_rem_pio2>
 800e7d8:	0040      	lsls	r0, r0, #1
 800e7da:	f000 0002 	and.w	r0, r0, #2
 800e7de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e7e2:	ed9d 0b00 	vldr	d0, [sp]
 800e7e6:	f1c0 0001 	rsb	r0, r0, #1
 800e7ea:	f000 fd65 	bl	800f2b8 <__kernel_tan>
 800e7ee:	e7ed      	b.n	800e7cc <tan+0x34>
	...
 800e7f8:	3fe921fb 	.word	0x3fe921fb
 800e7fc:	7fefffff 	.word	0x7fefffff

0800e800 <__ieee754_rem_pio2>:
 800e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e804:	ed2d 8b02 	vpush	{d8}
 800e808:	ec55 4b10 	vmov	r4, r5, d0
 800e80c:	4bca      	ldr	r3, [pc, #808]	; (800eb38 <__ieee754_rem_pio2+0x338>)
 800e80e:	b08b      	sub	sp, #44	; 0x2c
 800e810:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e814:	4598      	cmp	r8, r3
 800e816:	4682      	mov	sl, r0
 800e818:	9502      	str	r5, [sp, #8]
 800e81a:	dc08      	bgt.n	800e82e <__ieee754_rem_pio2+0x2e>
 800e81c:	2200      	movs	r2, #0
 800e81e:	2300      	movs	r3, #0
 800e820:	ed80 0b00 	vstr	d0, [r0]
 800e824:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e828:	f04f 0b00 	mov.w	fp, #0
 800e82c:	e028      	b.n	800e880 <__ieee754_rem_pio2+0x80>
 800e82e:	4bc3      	ldr	r3, [pc, #780]	; (800eb3c <__ieee754_rem_pio2+0x33c>)
 800e830:	4598      	cmp	r8, r3
 800e832:	dc78      	bgt.n	800e926 <__ieee754_rem_pio2+0x126>
 800e834:	9b02      	ldr	r3, [sp, #8]
 800e836:	4ec2      	ldr	r6, [pc, #776]	; (800eb40 <__ieee754_rem_pio2+0x340>)
 800e838:	2b00      	cmp	r3, #0
 800e83a:	ee10 0a10 	vmov	r0, s0
 800e83e:	a3b0      	add	r3, pc, #704	; (adr r3, 800eb00 <__ieee754_rem_pio2+0x300>)
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	4629      	mov	r1, r5
 800e846:	dd39      	ble.n	800e8bc <__ieee754_rem_pio2+0xbc>
 800e848:	f7f1 fd3e 	bl	80002c8 <__aeabi_dsub>
 800e84c:	45b0      	cmp	r8, r6
 800e84e:	4604      	mov	r4, r0
 800e850:	460d      	mov	r5, r1
 800e852:	d01b      	beq.n	800e88c <__ieee754_rem_pio2+0x8c>
 800e854:	a3ac      	add	r3, pc, #688	; (adr r3, 800eb08 <__ieee754_rem_pio2+0x308>)
 800e856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85a:	f7f1 fd35 	bl	80002c8 <__aeabi_dsub>
 800e85e:	4602      	mov	r2, r0
 800e860:	460b      	mov	r3, r1
 800e862:	e9ca 2300 	strd	r2, r3, [sl]
 800e866:	4620      	mov	r0, r4
 800e868:	4629      	mov	r1, r5
 800e86a:	f7f1 fd2d 	bl	80002c8 <__aeabi_dsub>
 800e86e:	a3a6      	add	r3, pc, #664	; (adr r3, 800eb08 <__ieee754_rem_pio2+0x308>)
 800e870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e874:	f7f1 fd28 	bl	80002c8 <__aeabi_dsub>
 800e878:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e87c:	f04f 0b01 	mov.w	fp, #1
 800e880:	4658      	mov	r0, fp
 800e882:	b00b      	add	sp, #44	; 0x2c
 800e884:	ecbd 8b02 	vpop	{d8}
 800e888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e88c:	a3a0      	add	r3, pc, #640	; (adr r3, 800eb10 <__ieee754_rem_pio2+0x310>)
 800e88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e892:	f7f1 fd19 	bl	80002c8 <__aeabi_dsub>
 800e896:	a3a0      	add	r3, pc, #640	; (adr r3, 800eb18 <__ieee754_rem_pio2+0x318>)
 800e898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89c:	4604      	mov	r4, r0
 800e89e:	460d      	mov	r5, r1
 800e8a0:	f7f1 fd12 	bl	80002c8 <__aeabi_dsub>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	e9ca 2300 	strd	r2, r3, [sl]
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	4629      	mov	r1, r5
 800e8b0:	f7f1 fd0a 	bl	80002c8 <__aeabi_dsub>
 800e8b4:	a398      	add	r3, pc, #608	; (adr r3, 800eb18 <__ieee754_rem_pio2+0x318>)
 800e8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ba:	e7db      	b.n	800e874 <__ieee754_rem_pio2+0x74>
 800e8bc:	f7f1 fd06 	bl	80002cc <__adddf3>
 800e8c0:	45b0      	cmp	r8, r6
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	460d      	mov	r5, r1
 800e8c6:	d016      	beq.n	800e8f6 <__ieee754_rem_pio2+0xf6>
 800e8c8:	a38f      	add	r3, pc, #572	; (adr r3, 800eb08 <__ieee754_rem_pio2+0x308>)
 800e8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ce:	f7f1 fcfd 	bl	80002cc <__adddf3>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	e9ca 2300 	strd	r2, r3, [sl]
 800e8da:	4620      	mov	r0, r4
 800e8dc:	4629      	mov	r1, r5
 800e8de:	f7f1 fcf3 	bl	80002c8 <__aeabi_dsub>
 800e8e2:	a389      	add	r3, pc, #548	; (adr r3, 800eb08 <__ieee754_rem_pio2+0x308>)
 800e8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e8:	f7f1 fcf0 	bl	80002cc <__adddf3>
 800e8ec:	f04f 3bff 	mov.w	fp, #4294967295
 800e8f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e8f4:	e7c4      	b.n	800e880 <__ieee754_rem_pio2+0x80>
 800e8f6:	a386      	add	r3, pc, #536	; (adr r3, 800eb10 <__ieee754_rem_pio2+0x310>)
 800e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fc:	f7f1 fce6 	bl	80002cc <__adddf3>
 800e900:	a385      	add	r3, pc, #532	; (adr r3, 800eb18 <__ieee754_rem_pio2+0x318>)
 800e902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e906:	4604      	mov	r4, r0
 800e908:	460d      	mov	r5, r1
 800e90a:	f7f1 fcdf 	bl	80002cc <__adddf3>
 800e90e:	4602      	mov	r2, r0
 800e910:	460b      	mov	r3, r1
 800e912:	e9ca 2300 	strd	r2, r3, [sl]
 800e916:	4620      	mov	r0, r4
 800e918:	4629      	mov	r1, r5
 800e91a:	f7f1 fcd5 	bl	80002c8 <__aeabi_dsub>
 800e91e:	a37e      	add	r3, pc, #504	; (adr r3, 800eb18 <__ieee754_rem_pio2+0x318>)
 800e920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e924:	e7e0      	b.n	800e8e8 <__ieee754_rem_pio2+0xe8>
 800e926:	4b87      	ldr	r3, [pc, #540]	; (800eb44 <__ieee754_rem_pio2+0x344>)
 800e928:	4598      	cmp	r8, r3
 800e92a:	f300 80d9 	bgt.w	800eae0 <__ieee754_rem_pio2+0x2e0>
 800e92e:	f7ff ff27 	bl	800e780 <fabs>
 800e932:	ec55 4b10 	vmov	r4, r5, d0
 800e936:	ee10 0a10 	vmov	r0, s0
 800e93a:	a379      	add	r3, pc, #484	; (adr r3, 800eb20 <__ieee754_rem_pio2+0x320>)
 800e93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e940:	4629      	mov	r1, r5
 800e942:	f7f1 fe79 	bl	8000638 <__aeabi_dmul>
 800e946:	4b80      	ldr	r3, [pc, #512]	; (800eb48 <__ieee754_rem_pio2+0x348>)
 800e948:	2200      	movs	r2, #0
 800e94a:	f7f1 fcbf 	bl	80002cc <__adddf3>
 800e94e:	f7f2 f923 	bl	8000b98 <__aeabi_d2iz>
 800e952:	4683      	mov	fp, r0
 800e954:	f7f1 fe06 	bl	8000564 <__aeabi_i2d>
 800e958:	4602      	mov	r2, r0
 800e95a:	460b      	mov	r3, r1
 800e95c:	ec43 2b18 	vmov	d8, r2, r3
 800e960:	a367      	add	r3, pc, #412	; (adr r3, 800eb00 <__ieee754_rem_pio2+0x300>)
 800e962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e966:	f7f1 fe67 	bl	8000638 <__aeabi_dmul>
 800e96a:	4602      	mov	r2, r0
 800e96c:	460b      	mov	r3, r1
 800e96e:	4620      	mov	r0, r4
 800e970:	4629      	mov	r1, r5
 800e972:	f7f1 fca9 	bl	80002c8 <__aeabi_dsub>
 800e976:	a364      	add	r3, pc, #400	; (adr r3, 800eb08 <__ieee754_rem_pio2+0x308>)
 800e978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97c:	4606      	mov	r6, r0
 800e97e:	460f      	mov	r7, r1
 800e980:	ec51 0b18 	vmov	r0, r1, d8
 800e984:	f7f1 fe58 	bl	8000638 <__aeabi_dmul>
 800e988:	f1bb 0f1f 	cmp.w	fp, #31
 800e98c:	4604      	mov	r4, r0
 800e98e:	460d      	mov	r5, r1
 800e990:	dc0d      	bgt.n	800e9ae <__ieee754_rem_pio2+0x1ae>
 800e992:	4b6e      	ldr	r3, [pc, #440]	; (800eb4c <__ieee754_rem_pio2+0x34c>)
 800e994:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e99c:	4543      	cmp	r3, r8
 800e99e:	d006      	beq.n	800e9ae <__ieee754_rem_pio2+0x1ae>
 800e9a0:	4622      	mov	r2, r4
 800e9a2:	462b      	mov	r3, r5
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	4639      	mov	r1, r7
 800e9a8:	f7f1 fc8e 	bl	80002c8 <__aeabi_dsub>
 800e9ac:	e00f      	b.n	800e9ce <__ieee754_rem_pio2+0x1ce>
 800e9ae:	462b      	mov	r3, r5
 800e9b0:	4622      	mov	r2, r4
 800e9b2:	4630      	mov	r0, r6
 800e9b4:	4639      	mov	r1, r7
 800e9b6:	f7f1 fc87 	bl	80002c8 <__aeabi_dsub>
 800e9ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e9be:	9303      	str	r3, [sp, #12]
 800e9c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e9c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e9c8:	f1b8 0f10 	cmp.w	r8, #16
 800e9cc:	dc02      	bgt.n	800e9d4 <__ieee754_rem_pio2+0x1d4>
 800e9ce:	e9ca 0100 	strd	r0, r1, [sl]
 800e9d2:	e039      	b.n	800ea48 <__ieee754_rem_pio2+0x248>
 800e9d4:	a34e      	add	r3, pc, #312	; (adr r3, 800eb10 <__ieee754_rem_pio2+0x310>)
 800e9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9da:	ec51 0b18 	vmov	r0, r1, d8
 800e9de:	f7f1 fe2b 	bl	8000638 <__aeabi_dmul>
 800e9e2:	4604      	mov	r4, r0
 800e9e4:	460d      	mov	r5, r1
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	4639      	mov	r1, r7
 800e9ee:	f7f1 fc6b 	bl	80002c8 <__aeabi_dsub>
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	4680      	mov	r8, r0
 800e9f8:	4689      	mov	r9, r1
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	4639      	mov	r1, r7
 800e9fe:	f7f1 fc63 	bl	80002c8 <__aeabi_dsub>
 800ea02:	4622      	mov	r2, r4
 800ea04:	462b      	mov	r3, r5
 800ea06:	f7f1 fc5f 	bl	80002c8 <__aeabi_dsub>
 800ea0a:	a343      	add	r3, pc, #268	; (adr r3, 800eb18 <__ieee754_rem_pio2+0x318>)
 800ea0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea10:	4604      	mov	r4, r0
 800ea12:	460d      	mov	r5, r1
 800ea14:	ec51 0b18 	vmov	r0, r1, d8
 800ea18:	f7f1 fe0e 	bl	8000638 <__aeabi_dmul>
 800ea1c:	4622      	mov	r2, r4
 800ea1e:	462b      	mov	r3, r5
 800ea20:	f7f1 fc52 	bl	80002c8 <__aeabi_dsub>
 800ea24:	4602      	mov	r2, r0
 800ea26:	460b      	mov	r3, r1
 800ea28:	4604      	mov	r4, r0
 800ea2a:	460d      	mov	r5, r1
 800ea2c:	4640      	mov	r0, r8
 800ea2e:	4649      	mov	r1, r9
 800ea30:	f7f1 fc4a 	bl	80002c8 <__aeabi_dsub>
 800ea34:	9a03      	ldr	r2, [sp, #12]
 800ea36:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ea3a:	1ad3      	subs	r3, r2, r3
 800ea3c:	2b31      	cmp	r3, #49	; 0x31
 800ea3e:	dc24      	bgt.n	800ea8a <__ieee754_rem_pio2+0x28a>
 800ea40:	e9ca 0100 	strd	r0, r1, [sl]
 800ea44:	4646      	mov	r6, r8
 800ea46:	464f      	mov	r7, r9
 800ea48:	e9da 8900 	ldrd	r8, r9, [sl]
 800ea4c:	4630      	mov	r0, r6
 800ea4e:	4642      	mov	r2, r8
 800ea50:	464b      	mov	r3, r9
 800ea52:	4639      	mov	r1, r7
 800ea54:	f7f1 fc38 	bl	80002c8 <__aeabi_dsub>
 800ea58:	462b      	mov	r3, r5
 800ea5a:	4622      	mov	r2, r4
 800ea5c:	f7f1 fc34 	bl	80002c8 <__aeabi_dsub>
 800ea60:	9b02      	ldr	r3, [sp, #8]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ea68:	f6bf af0a 	bge.w	800e880 <__ieee754_rem_pio2+0x80>
 800ea6c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ea70:	f8ca 3004 	str.w	r3, [sl, #4]
 800ea74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea78:	f8ca 8000 	str.w	r8, [sl]
 800ea7c:	f8ca 0008 	str.w	r0, [sl, #8]
 800ea80:	f8ca 300c 	str.w	r3, [sl, #12]
 800ea84:	f1cb 0b00 	rsb	fp, fp, #0
 800ea88:	e6fa      	b.n	800e880 <__ieee754_rem_pio2+0x80>
 800ea8a:	a327      	add	r3, pc, #156	; (adr r3, 800eb28 <__ieee754_rem_pio2+0x328>)
 800ea8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea90:	ec51 0b18 	vmov	r0, r1, d8
 800ea94:	f7f1 fdd0 	bl	8000638 <__aeabi_dmul>
 800ea98:	4604      	mov	r4, r0
 800ea9a:	460d      	mov	r5, r1
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	4640      	mov	r0, r8
 800eaa2:	4649      	mov	r1, r9
 800eaa4:	f7f1 fc10 	bl	80002c8 <__aeabi_dsub>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	460b      	mov	r3, r1
 800eaac:	4606      	mov	r6, r0
 800eaae:	460f      	mov	r7, r1
 800eab0:	4640      	mov	r0, r8
 800eab2:	4649      	mov	r1, r9
 800eab4:	f7f1 fc08 	bl	80002c8 <__aeabi_dsub>
 800eab8:	4622      	mov	r2, r4
 800eaba:	462b      	mov	r3, r5
 800eabc:	f7f1 fc04 	bl	80002c8 <__aeabi_dsub>
 800eac0:	a31b      	add	r3, pc, #108	; (adr r3, 800eb30 <__ieee754_rem_pio2+0x330>)
 800eac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac6:	4604      	mov	r4, r0
 800eac8:	460d      	mov	r5, r1
 800eaca:	ec51 0b18 	vmov	r0, r1, d8
 800eace:	f7f1 fdb3 	bl	8000638 <__aeabi_dmul>
 800ead2:	4622      	mov	r2, r4
 800ead4:	462b      	mov	r3, r5
 800ead6:	f7f1 fbf7 	bl	80002c8 <__aeabi_dsub>
 800eada:	4604      	mov	r4, r0
 800eadc:	460d      	mov	r5, r1
 800eade:	e75f      	b.n	800e9a0 <__ieee754_rem_pio2+0x1a0>
 800eae0:	4b1b      	ldr	r3, [pc, #108]	; (800eb50 <__ieee754_rem_pio2+0x350>)
 800eae2:	4598      	cmp	r8, r3
 800eae4:	dd36      	ble.n	800eb54 <__ieee754_rem_pio2+0x354>
 800eae6:	ee10 2a10 	vmov	r2, s0
 800eaea:	462b      	mov	r3, r5
 800eaec:	4620      	mov	r0, r4
 800eaee:	4629      	mov	r1, r5
 800eaf0:	f7f1 fbea 	bl	80002c8 <__aeabi_dsub>
 800eaf4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eaf8:	e9ca 0100 	strd	r0, r1, [sl]
 800eafc:	e694      	b.n	800e828 <__ieee754_rem_pio2+0x28>
 800eafe:	bf00      	nop
 800eb00:	54400000 	.word	0x54400000
 800eb04:	3ff921fb 	.word	0x3ff921fb
 800eb08:	1a626331 	.word	0x1a626331
 800eb0c:	3dd0b461 	.word	0x3dd0b461
 800eb10:	1a600000 	.word	0x1a600000
 800eb14:	3dd0b461 	.word	0x3dd0b461
 800eb18:	2e037073 	.word	0x2e037073
 800eb1c:	3ba3198a 	.word	0x3ba3198a
 800eb20:	6dc9c883 	.word	0x6dc9c883
 800eb24:	3fe45f30 	.word	0x3fe45f30
 800eb28:	2e000000 	.word	0x2e000000
 800eb2c:	3ba3198a 	.word	0x3ba3198a
 800eb30:	252049c1 	.word	0x252049c1
 800eb34:	397b839a 	.word	0x397b839a
 800eb38:	3fe921fb 	.word	0x3fe921fb
 800eb3c:	4002d97b 	.word	0x4002d97b
 800eb40:	3ff921fb 	.word	0x3ff921fb
 800eb44:	413921fb 	.word	0x413921fb
 800eb48:	3fe00000 	.word	0x3fe00000
 800eb4c:	0800fe70 	.word	0x0800fe70
 800eb50:	7fefffff 	.word	0x7fefffff
 800eb54:	ea4f 5428 	mov.w	r4, r8, asr #20
 800eb58:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800eb5c:	ee10 0a10 	vmov	r0, s0
 800eb60:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800eb64:	ee10 6a10 	vmov	r6, s0
 800eb68:	460f      	mov	r7, r1
 800eb6a:	f7f2 f815 	bl	8000b98 <__aeabi_d2iz>
 800eb6e:	f7f1 fcf9 	bl	8000564 <__aeabi_i2d>
 800eb72:	4602      	mov	r2, r0
 800eb74:	460b      	mov	r3, r1
 800eb76:	4630      	mov	r0, r6
 800eb78:	4639      	mov	r1, r7
 800eb7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eb7e:	f7f1 fba3 	bl	80002c8 <__aeabi_dsub>
 800eb82:	4b23      	ldr	r3, [pc, #140]	; (800ec10 <__ieee754_rem_pio2+0x410>)
 800eb84:	2200      	movs	r2, #0
 800eb86:	f7f1 fd57 	bl	8000638 <__aeabi_dmul>
 800eb8a:	460f      	mov	r7, r1
 800eb8c:	4606      	mov	r6, r0
 800eb8e:	f7f2 f803 	bl	8000b98 <__aeabi_d2iz>
 800eb92:	f7f1 fce7 	bl	8000564 <__aeabi_i2d>
 800eb96:	4602      	mov	r2, r0
 800eb98:	460b      	mov	r3, r1
 800eb9a:	4630      	mov	r0, r6
 800eb9c:	4639      	mov	r1, r7
 800eb9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eba2:	f7f1 fb91 	bl	80002c8 <__aeabi_dsub>
 800eba6:	4b1a      	ldr	r3, [pc, #104]	; (800ec10 <__ieee754_rem_pio2+0x410>)
 800eba8:	2200      	movs	r2, #0
 800ebaa:	f7f1 fd45 	bl	8000638 <__aeabi_dmul>
 800ebae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ebb2:	ad04      	add	r5, sp, #16
 800ebb4:	f04f 0803 	mov.w	r8, #3
 800ebb8:	46a9      	mov	r9, r5
 800ebba:	2600      	movs	r6, #0
 800ebbc:	2700      	movs	r7, #0
 800ebbe:	4632      	mov	r2, r6
 800ebc0:	463b      	mov	r3, r7
 800ebc2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ebc6:	46c3      	mov	fp, r8
 800ebc8:	3d08      	subs	r5, #8
 800ebca:	f108 38ff 	add.w	r8, r8, #4294967295
 800ebce:	f7f1 ff9b 	bl	8000b08 <__aeabi_dcmpeq>
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	d1f3      	bne.n	800ebbe <__ieee754_rem_pio2+0x3be>
 800ebd6:	4b0f      	ldr	r3, [pc, #60]	; (800ec14 <__ieee754_rem_pio2+0x414>)
 800ebd8:	9301      	str	r3, [sp, #4]
 800ebda:	2302      	movs	r3, #2
 800ebdc:	9300      	str	r3, [sp, #0]
 800ebde:	4622      	mov	r2, r4
 800ebe0:	465b      	mov	r3, fp
 800ebe2:	4651      	mov	r1, sl
 800ebe4:	4648      	mov	r0, r9
 800ebe6:	f000 f817 	bl	800ec18 <__kernel_rem_pio2>
 800ebea:	9b02      	ldr	r3, [sp, #8]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	4683      	mov	fp, r0
 800ebf0:	f6bf ae46 	bge.w	800e880 <__ieee754_rem_pio2+0x80>
 800ebf4:	e9da 2100 	ldrd	r2, r1, [sl]
 800ebf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebfc:	e9ca 2300 	strd	r2, r3, [sl]
 800ec00:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ec04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec08:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ec0c:	e73a      	b.n	800ea84 <__ieee754_rem_pio2+0x284>
 800ec0e:	bf00      	nop
 800ec10:	41700000 	.word	0x41700000
 800ec14:	0800fef0 	.word	0x0800fef0

0800ec18 <__kernel_rem_pio2>:
 800ec18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec1c:	ed2d 8b02 	vpush	{d8}
 800ec20:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ec24:	f112 0f14 	cmn.w	r2, #20
 800ec28:	9308      	str	r3, [sp, #32]
 800ec2a:	9101      	str	r1, [sp, #4]
 800ec2c:	4bc4      	ldr	r3, [pc, #784]	; (800ef40 <__kernel_rem_pio2+0x328>)
 800ec2e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ec30:	900b      	str	r0, [sp, #44]	; 0x2c
 800ec32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ec36:	9302      	str	r3, [sp, #8]
 800ec38:	9b08      	ldr	r3, [sp, #32]
 800ec3a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ec3e:	bfa8      	it	ge
 800ec40:	1ed4      	subge	r4, r2, #3
 800ec42:	9306      	str	r3, [sp, #24]
 800ec44:	bfb2      	itee	lt
 800ec46:	2400      	movlt	r4, #0
 800ec48:	2318      	movge	r3, #24
 800ec4a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ec4e:	f06f 0317 	mvn.w	r3, #23
 800ec52:	fb04 3303 	mla	r3, r4, r3, r3
 800ec56:	eb03 0a02 	add.w	sl, r3, r2
 800ec5a:	9b02      	ldr	r3, [sp, #8]
 800ec5c:	9a06      	ldr	r2, [sp, #24]
 800ec5e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ef30 <__kernel_rem_pio2+0x318>
 800ec62:	eb03 0802 	add.w	r8, r3, r2
 800ec66:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ec68:	1aa7      	subs	r7, r4, r2
 800ec6a:	ae22      	add	r6, sp, #136	; 0x88
 800ec6c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ec70:	2500      	movs	r5, #0
 800ec72:	4545      	cmp	r5, r8
 800ec74:	dd13      	ble.n	800ec9e <__kernel_rem_pio2+0x86>
 800ec76:	9b08      	ldr	r3, [sp, #32]
 800ec78:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ef30 <__kernel_rem_pio2+0x318>
 800ec7c:	aa22      	add	r2, sp, #136	; 0x88
 800ec7e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ec82:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ec86:	f04f 0800 	mov.w	r8, #0
 800ec8a:	9b02      	ldr	r3, [sp, #8]
 800ec8c:	4598      	cmp	r8, r3
 800ec8e:	dc2f      	bgt.n	800ecf0 <__kernel_rem_pio2+0xd8>
 800ec90:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ec94:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ec98:	462f      	mov	r7, r5
 800ec9a:	2600      	movs	r6, #0
 800ec9c:	e01b      	b.n	800ecd6 <__kernel_rem_pio2+0xbe>
 800ec9e:	42ef      	cmn	r7, r5
 800eca0:	d407      	bmi.n	800ecb2 <__kernel_rem_pio2+0x9a>
 800eca2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800eca6:	f7f1 fc5d 	bl	8000564 <__aeabi_i2d>
 800ecaa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ecae:	3501      	adds	r5, #1
 800ecb0:	e7df      	b.n	800ec72 <__kernel_rem_pio2+0x5a>
 800ecb2:	ec51 0b18 	vmov	r0, r1, d8
 800ecb6:	e7f8      	b.n	800ecaa <__kernel_rem_pio2+0x92>
 800ecb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecbc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ecc0:	f7f1 fcba 	bl	8000638 <__aeabi_dmul>
 800ecc4:	4602      	mov	r2, r0
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eccc:	f7f1 fafe 	bl	80002cc <__adddf3>
 800ecd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ecd4:	3601      	adds	r6, #1
 800ecd6:	9b06      	ldr	r3, [sp, #24]
 800ecd8:	429e      	cmp	r6, r3
 800ecda:	f1a7 0708 	sub.w	r7, r7, #8
 800ecde:	ddeb      	ble.n	800ecb8 <__kernel_rem_pio2+0xa0>
 800ece0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ece4:	f108 0801 	add.w	r8, r8, #1
 800ece8:	ecab 7b02 	vstmia	fp!, {d7}
 800ecec:	3508      	adds	r5, #8
 800ecee:	e7cc      	b.n	800ec8a <__kernel_rem_pio2+0x72>
 800ecf0:	9b02      	ldr	r3, [sp, #8]
 800ecf2:	aa0e      	add	r2, sp, #56	; 0x38
 800ecf4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ecf8:	930d      	str	r3, [sp, #52]	; 0x34
 800ecfa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ecfc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ed00:	9c02      	ldr	r4, [sp, #8]
 800ed02:	930c      	str	r3, [sp, #48]	; 0x30
 800ed04:	00e3      	lsls	r3, r4, #3
 800ed06:	930a      	str	r3, [sp, #40]	; 0x28
 800ed08:	ab9a      	add	r3, sp, #616	; 0x268
 800ed0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ed0e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ed12:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ed16:	ab72      	add	r3, sp, #456	; 0x1c8
 800ed18:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ed1c:	46c3      	mov	fp, r8
 800ed1e:	46a1      	mov	r9, r4
 800ed20:	f1b9 0f00 	cmp.w	r9, #0
 800ed24:	f1a5 0508 	sub.w	r5, r5, #8
 800ed28:	dc77      	bgt.n	800ee1a <__kernel_rem_pio2+0x202>
 800ed2a:	ec47 6b10 	vmov	d0, r6, r7
 800ed2e:	4650      	mov	r0, sl
 800ed30:	f000 fd4e 	bl	800f7d0 <scalbn>
 800ed34:	ec57 6b10 	vmov	r6, r7, d0
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ed3e:	ee10 0a10 	vmov	r0, s0
 800ed42:	4639      	mov	r1, r7
 800ed44:	f7f1 fc78 	bl	8000638 <__aeabi_dmul>
 800ed48:	ec41 0b10 	vmov	d0, r0, r1
 800ed4c:	f000 fcc0 	bl	800f6d0 <floor>
 800ed50:	4b7c      	ldr	r3, [pc, #496]	; (800ef44 <__kernel_rem_pio2+0x32c>)
 800ed52:	ec51 0b10 	vmov	r0, r1, d0
 800ed56:	2200      	movs	r2, #0
 800ed58:	f7f1 fc6e 	bl	8000638 <__aeabi_dmul>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	460b      	mov	r3, r1
 800ed60:	4630      	mov	r0, r6
 800ed62:	4639      	mov	r1, r7
 800ed64:	f7f1 fab0 	bl	80002c8 <__aeabi_dsub>
 800ed68:	460f      	mov	r7, r1
 800ed6a:	4606      	mov	r6, r0
 800ed6c:	f7f1 ff14 	bl	8000b98 <__aeabi_d2iz>
 800ed70:	9004      	str	r0, [sp, #16]
 800ed72:	f7f1 fbf7 	bl	8000564 <__aeabi_i2d>
 800ed76:	4602      	mov	r2, r0
 800ed78:	460b      	mov	r3, r1
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	4639      	mov	r1, r7
 800ed7e:	f7f1 faa3 	bl	80002c8 <__aeabi_dsub>
 800ed82:	f1ba 0f00 	cmp.w	sl, #0
 800ed86:	4606      	mov	r6, r0
 800ed88:	460f      	mov	r7, r1
 800ed8a:	dd6d      	ble.n	800ee68 <__kernel_rem_pio2+0x250>
 800ed8c:	1e62      	subs	r2, r4, #1
 800ed8e:	ab0e      	add	r3, sp, #56	; 0x38
 800ed90:	9d04      	ldr	r5, [sp, #16]
 800ed92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ed96:	f1ca 0118 	rsb	r1, sl, #24
 800ed9a:	fa40 f301 	asr.w	r3, r0, r1
 800ed9e:	441d      	add	r5, r3
 800eda0:	408b      	lsls	r3, r1
 800eda2:	1ac0      	subs	r0, r0, r3
 800eda4:	ab0e      	add	r3, sp, #56	; 0x38
 800eda6:	9504      	str	r5, [sp, #16]
 800eda8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800edac:	f1ca 0317 	rsb	r3, sl, #23
 800edb0:	fa40 fb03 	asr.w	fp, r0, r3
 800edb4:	f1bb 0f00 	cmp.w	fp, #0
 800edb8:	dd65      	ble.n	800ee86 <__kernel_rem_pio2+0x26e>
 800edba:	9b04      	ldr	r3, [sp, #16]
 800edbc:	2200      	movs	r2, #0
 800edbe:	3301      	adds	r3, #1
 800edc0:	9304      	str	r3, [sp, #16]
 800edc2:	4615      	mov	r5, r2
 800edc4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800edc8:	4294      	cmp	r4, r2
 800edca:	f300 809c 	bgt.w	800ef06 <__kernel_rem_pio2+0x2ee>
 800edce:	f1ba 0f00 	cmp.w	sl, #0
 800edd2:	dd07      	ble.n	800ede4 <__kernel_rem_pio2+0x1cc>
 800edd4:	f1ba 0f01 	cmp.w	sl, #1
 800edd8:	f000 80c0 	beq.w	800ef5c <__kernel_rem_pio2+0x344>
 800eddc:	f1ba 0f02 	cmp.w	sl, #2
 800ede0:	f000 80c6 	beq.w	800ef70 <__kernel_rem_pio2+0x358>
 800ede4:	f1bb 0f02 	cmp.w	fp, #2
 800ede8:	d14d      	bne.n	800ee86 <__kernel_rem_pio2+0x26e>
 800edea:	4632      	mov	r2, r6
 800edec:	463b      	mov	r3, r7
 800edee:	4956      	ldr	r1, [pc, #344]	; (800ef48 <__kernel_rem_pio2+0x330>)
 800edf0:	2000      	movs	r0, #0
 800edf2:	f7f1 fa69 	bl	80002c8 <__aeabi_dsub>
 800edf6:	4606      	mov	r6, r0
 800edf8:	460f      	mov	r7, r1
 800edfa:	2d00      	cmp	r5, #0
 800edfc:	d043      	beq.n	800ee86 <__kernel_rem_pio2+0x26e>
 800edfe:	4650      	mov	r0, sl
 800ee00:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ef38 <__kernel_rem_pio2+0x320>
 800ee04:	f000 fce4 	bl	800f7d0 <scalbn>
 800ee08:	4630      	mov	r0, r6
 800ee0a:	4639      	mov	r1, r7
 800ee0c:	ec53 2b10 	vmov	r2, r3, d0
 800ee10:	f7f1 fa5a 	bl	80002c8 <__aeabi_dsub>
 800ee14:	4606      	mov	r6, r0
 800ee16:	460f      	mov	r7, r1
 800ee18:	e035      	b.n	800ee86 <__kernel_rem_pio2+0x26e>
 800ee1a:	4b4c      	ldr	r3, [pc, #304]	; (800ef4c <__kernel_rem_pio2+0x334>)
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	4630      	mov	r0, r6
 800ee20:	4639      	mov	r1, r7
 800ee22:	f7f1 fc09 	bl	8000638 <__aeabi_dmul>
 800ee26:	f7f1 feb7 	bl	8000b98 <__aeabi_d2iz>
 800ee2a:	f7f1 fb9b 	bl	8000564 <__aeabi_i2d>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	460b      	mov	r3, r1
 800ee32:	ec43 2b18 	vmov	d8, r2, r3
 800ee36:	4b46      	ldr	r3, [pc, #280]	; (800ef50 <__kernel_rem_pio2+0x338>)
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f7f1 fbfd 	bl	8000638 <__aeabi_dmul>
 800ee3e:	4602      	mov	r2, r0
 800ee40:	460b      	mov	r3, r1
 800ee42:	4630      	mov	r0, r6
 800ee44:	4639      	mov	r1, r7
 800ee46:	f7f1 fa3f 	bl	80002c8 <__aeabi_dsub>
 800ee4a:	f7f1 fea5 	bl	8000b98 <__aeabi_d2iz>
 800ee4e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee52:	f84b 0b04 	str.w	r0, [fp], #4
 800ee56:	ec51 0b18 	vmov	r0, r1, d8
 800ee5a:	f7f1 fa37 	bl	80002cc <__adddf3>
 800ee5e:	f109 39ff 	add.w	r9, r9, #4294967295
 800ee62:	4606      	mov	r6, r0
 800ee64:	460f      	mov	r7, r1
 800ee66:	e75b      	b.n	800ed20 <__kernel_rem_pio2+0x108>
 800ee68:	d106      	bne.n	800ee78 <__kernel_rem_pio2+0x260>
 800ee6a:	1e63      	subs	r3, r4, #1
 800ee6c:	aa0e      	add	r2, sp, #56	; 0x38
 800ee6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ee72:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ee76:	e79d      	b.n	800edb4 <__kernel_rem_pio2+0x19c>
 800ee78:	4b36      	ldr	r3, [pc, #216]	; (800ef54 <__kernel_rem_pio2+0x33c>)
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f7f1 fe62 	bl	8000b44 <__aeabi_dcmpge>
 800ee80:	2800      	cmp	r0, #0
 800ee82:	d13d      	bne.n	800ef00 <__kernel_rem_pio2+0x2e8>
 800ee84:	4683      	mov	fp, r0
 800ee86:	2200      	movs	r2, #0
 800ee88:	2300      	movs	r3, #0
 800ee8a:	4630      	mov	r0, r6
 800ee8c:	4639      	mov	r1, r7
 800ee8e:	f7f1 fe3b 	bl	8000b08 <__aeabi_dcmpeq>
 800ee92:	2800      	cmp	r0, #0
 800ee94:	f000 80c0 	beq.w	800f018 <__kernel_rem_pio2+0x400>
 800ee98:	1e65      	subs	r5, r4, #1
 800ee9a:	462b      	mov	r3, r5
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	9902      	ldr	r1, [sp, #8]
 800eea0:	428b      	cmp	r3, r1
 800eea2:	da6c      	bge.n	800ef7e <__kernel_rem_pio2+0x366>
 800eea4:	2a00      	cmp	r2, #0
 800eea6:	f000 8089 	beq.w	800efbc <__kernel_rem_pio2+0x3a4>
 800eeaa:	ab0e      	add	r3, sp, #56	; 0x38
 800eeac:	f1aa 0a18 	sub.w	sl, sl, #24
 800eeb0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	f000 80ad 	beq.w	800f014 <__kernel_rem_pio2+0x3fc>
 800eeba:	4650      	mov	r0, sl
 800eebc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ef38 <__kernel_rem_pio2+0x320>
 800eec0:	f000 fc86 	bl	800f7d0 <scalbn>
 800eec4:	ab9a      	add	r3, sp, #616	; 0x268
 800eec6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800eeca:	ec57 6b10 	vmov	r6, r7, d0
 800eece:	00ec      	lsls	r4, r5, #3
 800eed0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800eed4:	46aa      	mov	sl, r5
 800eed6:	f1ba 0f00 	cmp.w	sl, #0
 800eeda:	f280 80d6 	bge.w	800f08a <__kernel_rem_pio2+0x472>
 800eede:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ef30 <__kernel_rem_pio2+0x318>
 800eee2:	462e      	mov	r6, r5
 800eee4:	2e00      	cmp	r6, #0
 800eee6:	f2c0 8104 	blt.w	800f0f2 <__kernel_rem_pio2+0x4da>
 800eeea:	ab72      	add	r3, sp, #456	; 0x1c8
 800eeec:	ed8d 8b06 	vstr	d8, [sp, #24]
 800eef0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ef58 <__kernel_rem_pio2+0x340>
 800eef4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800eef8:	f04f 0800 	mov.w	r8, #0
 800eefc:	1baf      	subs	r7, r5, r6
 800eefe:	e0ea      	b.n	800f0d6 <__kernel_rem_pio2+0x4be>
 800ef00:	f04f 0b02 	mov.w	fp, #2
 800ef04:	e759      	b.n	800edba <__kernel_rem_pio2+0x1a2>
 800ef06:	f8d8 3000 	ldr.w	r3, [r8]
 800ef0a:	b955      	cbnz	r5, 800ef22 <__kernel_rem_pio2+0x30a>
 800ef0c:	b123      	cbz	r3, 800ef18 <__kernel_rem_pio2+0x300>
 800ef0e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ef12:	f8c8 3000 	str.w	r3, [r8]
 800ef16:	2301      	movs	r3, #1
 800ef18:	3201      	adds	r2, #1
 800ef1a:	f108 0804 	add.w	r8, r8, #4
 800ef1e:	461d      	mov	r5, r3
 800ef20:	e752      	b.n	800edc8 <__kernel_rem_pio2+0x1b0>
 800ef22:	1acb      	subs	r3, r1, r3
 800ef24:	f8c8 3000 	str.w	r3, [r8]
 800ef28:	462b      	mov	r3, r5
 800ef2a:	e7f5      	b.n	800ef18 <__kernel_rem_pio2+0x300>
 800ef2c:	f3af 8000 	nop.w
	...
 800ef3c:	3ff00000 	.word	0x3ff00000
 800ef40:	08010038 	.word	0x08010038
 800ef44:	40200000 	.word	0x40200000
 800ef48:	3ff00000 	.word	0x3ff00000
 800ef4c:	3e700000 	.word	0x3e700000
 800ef50:	41700000 	.word	0x41700000
 800ef54:	3fe00000 	.word	0x3fe00000
 800ef58:	0800fff8 	.word	0x0800fff8
 800ef5c:	1e62      	subs	r2, r4, #1
 800ef5e:	ab0e      	add	r3, sp, #56	; 0x38
 800ef60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef64:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ef68:	a90e      	add	r1, sp, #56	; 0x38
 800ef6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ef6e:	e739      	b.n	800ede4 <__kernel_rem_pio2+0x1cc>
 800ef70:	1e62      	subs	r2, r4, #1
 800ef72:	ab0e      	add	r3, sp, #56	; 0x38
 800ef74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef78:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ef7c:	e7f4      	b.n	800ef68 <__kernel_rem_pio2+0x350>
 800ef7e:	a90e      	add	r1, sp, #56	; 0x38
 800ef80:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ef84:	3b01      	subs	r3, #1
 800ef86:	430a      	orrs	r2, r1
 800ef88:	e789      	b.n	800ee9e <__kernel_rem_pio2+0x286>
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ef90:	2900      	cmp	r1, #0
 800ef92:	d0fa      	beq.n	800ef8a <__kernel_rem_pio2+0x372>
 800ef94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef96:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ef9a:	446a      	add	r2, sp
 800ef9c:	3a98      	subs	r2, #152	; 0x98
 800ef9e:	920a      	str	r2, [sp, #40]	; 0x28
 800efa0:	9a08      	ldr	r2, [sp, #32]
 800efa2:	18e3      	adds	r3, r4, r3
 800efa4:	18a5      	adds	r5, r4, r2
 800efa6:	aa22      	add	r2, sp, #136	; 0x88
 800efa8:	f104 0801 	add.w	r8, r4, #1
 800efac:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800efb0:	9304      	str	r3, [sp, #16]
 800efb2:	9b04      	ldr	r3, [sp, #16]
 800efb4:	4543      	cmp	r3, r8
 800efb6:	da04      	bge.n	800efc2 <__kernel_rem_pio2+0x3aa>
 800efb8:	461c      	mov	r4, r3
 800efba:	e6a3      	b.n	800ed04 <__kernel_rem_pio2+0xec>
 800efbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800efbe:	2301      	movs	r3, #1
 800efc0:	e7e4      	b.n	800ef8c <__kernel_rem_pio2+0x374>
 800efc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efc4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800efc8:	f7f1 facc 	bl	8000564 <__aeabi_i2d>
 800efcc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800efd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efd2:	46ab      	mov	fp, r5
 800efd4:	461c      	mov	r4, r3
 800efd6:	f04f 0900 	mov.w	r9, #0
 800efda:	2600      	movs	r6, #0
 800efdc:	2700      	movs	r7, #0
 800efde:	9b06      	ldr	r3, [sp, #24]
 800efe0:	4599      	cmp	r9, r3
 800efe2:	dd06      	ble.n	800eff2 <__kernel_rem_pio2+0x3da>
 800efe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efe6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800efea:	f108 0801 	add.w	r8, r8, #1
 800efee:	930a      	str	r3, [sp, #40]	; 0x28
 800eff0:	e7df      	b.n	800efb2 <__kernel_rem_pio2+0x39a>
 800eff2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800eff6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800effa:	f7f1 fb1d 	bl	8000638 <__aeabi_dmul>
 800effe:	4602      	mov	r2, r0
 800f000:	460b      	mov	r3, r1
 800f002:	4630      	mov	r0, r6
 800f004:	4639      	mov	r1, r7
 800f006:	f7f1 f961 	bl	80002cc <__adddf3>
 800f00a:	f109 0901 	add.w	r9, r9, #1
 800f00e:	4606      	mov	r6, r0
 800f010:	460f      	mov	r7, r1
 800f012:	e7e4      	b.n	800efde <__kernel_rem_pio2+0x3c6>
 800f014:	3d01      	subs	r5, #1
 800f016:	e748      	b.n	800eeaa <__kernel_rem_pio2+0x292>
 800f018:	ec47 6b10 	vmov	d0, r6, r7
 800f01c:	f1ca 0000 	rsb	r0, sl, #0
 800f020:	f000 fbd6 	bl	800f7d0 <scalbn>
 800f024:	ec57 6b10 	vmov	r6, r7, d0
 800f028:	4ba0      	ldr	r3, [pc, #640]	; (800f2ac <__kernel_rem_pio2+0x694>)
 800f02a:	ee10 0a10 	vmov	r0, s0
 800f02e:	2200      	movs	r2, #0
 800f030:	4639      	mov	r1, r7
 800f032:	f7f1 fd87 	bl	8000b44 <__aeabi_dcmpge>
 800f036:	b1f8      	cbz	r0, 800f078 <__kernel_rem_pio2+0x460>
 800f038:	4b9d      	ldr	r3, [pc, #628]	; (800f2b0 <__kernel_rem_pio2+0x698>)
 800f03a:	2200      	movs	r2, #0
 800f03c:	4630      	mov	r0, r6
 800f03e:	4639      	mov	r1, r7
 800f040:	f7f1 fafa 	bl	8000638 <__aeabi_dmul>
 800f044:	f7f1 fda8 	bl	8000b98 <__aeabi_d2iz>
 800f048:	4680      	mov	r8, r0
 800f04a:	f7f1 fa8b 	bl	8000564 <__aeabi_i2d>
 800f04e:	4b97      	ldr	r3, [pc, #604]	; (800f2ac <__kernel_rem_pio2+0x694>)
 800f050:	2200      	movs	r2, #0
 800f052:	f7f1 faf1 	bl	8000638 <__aeabi_dmul>
 800f056:	460b      	mov	r3, r1
 800f058:	4602      	mov	r2, r0
 800f05a:	4639      	mov	r1, r7
 800f05c:	4630      	mov	r0, r6
 800f05e:	f7f1 f933 	bl	80002c8 <__aeabi_dsub>
 800f062:	f7f1 fd99 	bl	8000b98 <__aeabi_d2iz>
 800f066:	1c65      	adds	r5, r4, #1
 800f068:	ab0e      	add	r3, sp, #56	; 0x38
 800f06a:	f10a 0a18 	add.w	sl, sl, #24
 800f06e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f072:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f076:	e720      	b.n	800eeba <__kernel_rem_pio2+0x2a2>
 800f078:	4630      	mov	r0, r6
 800f07a:	4639      	mov	r1, r7
 800f07c:	f7f1 fd8c 	bl	8000b98 <__aeabi_d2iz>
 800f080:	ab0e      	add	r3, sp, #56	; 0x38
 800f082:	4625      	mov	r5, r4
 800f084:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f088:	e717      	b.n	800eeba <__kernel_rem_pio2+0x2a2>
 800f08a:	ab0e      	add	r3, sp, #56	; 0x38
 800f08c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f090:	f7f1 fa68 	bl	8000564 <__aeabi_i2d>
 800f094:	4632      	mov	r2, r6
 800f096:	463b      	mov	r3, r7
 800f098:	f7f1 face 	bl	8000638 <__aeabi_dmul>
 800f09c:	4b84      	ldr	r3, [pc, #528]	; (800f2b0 <__kernel_rem_pio2+0x698>)
 800f09e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	4630      	mov	r0, r6
 800f0a6:	4639      	mov	r1, r7
 800f0a8:	f7f1 fac6 	bl	8000638 <__aeabi_dmul>
 800f0ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f0b0:	4606      	mov	r6, r0
 800f0b2:	460f      	mov	r7, r1
 800f0b4:	e70f      	b.n	800eed6 <__kernel_rem_pio2+0x2be>
 800f0b6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f0ba:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f0be:	f7f1 fabb 	bl	8000638 <__aeabi_dmul>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f0ca:	f7f1 f8ff 	bl	80002cc <__adddf3>
 800f0ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f0d2:	f108 0801 	add.w	r8, r8, #1
 800f0d6:	9b02      	ldr	r3, [sp, #8]
 800f0d8:	4598      	cmp	r8, r3
 800f0da:	dc01      	bgt.n	800f0e0 <__kernel_rem_pio2+0x4c8>
 800f0dc:	45b8      	cmp	r8, r7
 800f0de:	ddea      	ble.n	800f0b6 <__kernel_rem_pio2+0x49e>
 800f0e0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f0e4:	ab4a      	add	r3, sp, #296	; 0x128
 800f0e6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f0ea:	ed87 7b00 	vstr	d7, [r7]
 800f0ee:	3e01      	subs	r6, #1
 800f0f0:	e6f8      	b.n	800eee4 <__kernel_rem_pio2+0x2cc>
 800f0f2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f0f4:	2b02      	cmp	r3, #2
 800f0f6:	dc0b      	bgt.n	800f110 <__kernel_rem_pio2+0x4f8>
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	dc35      	bgt.n	800f168 <__kernel_rem_pio2+0x550>
 800f0fc:	d059      	beq.n	800f1b2 <__kernel_rem_pio2+0x59a>
 800f0fe:	9b04      	ldr	r3, [sp, #16]
 800f100:	f003 0007 	and.w	r0, r3, #7
 800f104:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f108:	ecbd 8b02 	vpop	{d8}
 800f10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f110:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f112:	2b03      	cmp	r3, #3
 800f114:	d1f3      	bne.n	800f0fe <__kernel_rem_pio2+0x4e6>
 800f116:	ab4a      	add	r3, sp, #296	; 0x128
 800f118:	4423      	add	r3, r4
 800f11a:	9306      	str	r3, [sp, #24]
 800f11c:	461c      	mov	r4, r3
 800f11e:	469a      	mov	sl, r3
 800f120:	9502      	str	r5, [sp, #8]
 800f122:	9b02      	ldr	r3, [sp, #8]
 800f124:	2b00      	cmp	r3, #0
 800f126:	f1aa 0a08 	sub.w	sl, sl, #8
 800f12a:	dc6b      	bgt.n	800f204 <__kernel_rem_pio2+0x5ec>
 800f12c:	46aa      	mov	sl, r5
 800f12e:	f1ba 0f01 	cmp.w	sl, #1
 800f132:	f1a4 0408 	sub.w	r4, r4, #8
 800f136:	f300 8085 	bgt.w	800f244 <__kernel_rem_pio2+0x62c>
 800f13a:	9c06      	ldr	r4, [sp, #24]
 800f13c:	2000      	movs	r0, #0
 800f13e:	3408      	adds	r4, #8
 800f140:	2100      	movs	r1, #0
 800f142:	2d01      	cmp	r5, #1
 800f144:	f300 809d 	bgt.w	800f282 <__kernel_rem_pio2+0x66a>
 800f148:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f14c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f150:	f1bb 0f00 	cmp.w	fp, #0
 800f154:	f040 809b 	bne.w	800f28e <__kernel_rem_pio2+0x676>
 800f158:	9b01      	ldr	r3, [sp, #4]
 800f15a:	e9c3 5600 	strd	r5, r6, [r3]
 800f15e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f162:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f166:	e7ca      	b.n	800f0fe <__kernel_rem_pio2+0x4e6>
 800f168:	3408      	adds	r4, #8
 800f16a:	ab4a      	add	r3, sp, #296	; 0x128
 800f16c:	441c      	add	r4, r3
 800f16e:	462e      	mov	r6, r5
 800f170:	2000      	movs	r0, #0
 800f172:	2100      	movs	r1, #0
 800f174:	2e00      	cmp	r6, #0
 800f176:	da36      	bge.n	800f1e6 <__kernel_rem_pio2+0x5ce>
 800f178:	f1bb 0f00 	cmp.w	fp, #0
 800f17c:	d039      	beq.n	800f1f2 <__kernel_rem_pio2+0x5da>
 800f17e:	4602      	mov	r2, r0
 800f180:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f184:	9c01      	ldr	r4, [sp, #4]
 800f186:	e9c4 2300 	strd	r2, r3, [r4]
 800f18a:	4602      	mov	r2, r0
 800f18c:	460b      	mov	r3, r1
 800f18e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f192:	f7f1 f899 	bl	80002c8 <__aeabi_dsub>
 800f196:	ae4c      	add	r6, sp, #304	; 0x130
 800f198:	2401      	movs	r4, #1
 800f19a:	42a5      	cmp	r5, r4
 800f19c:	da2c      	bge.n	800f1f8 <__kernel_rem_pio2+0x5e0>
 800f19e:	f1bb 0f00 	cmp.w	fp, #0
 800f1a2:	d002      	beq.n	800f1aa <__kernel_rem_pio2+0x592>
 800f1a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1a8:	4619      	mov	r1, r3
 800f1aa:	9b01      	ldr	r3, [sp, #4]
 800f1ac:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f1b0:	e7a5      	b.n	800f0fe <__kernel_rem_pio2+0x4e6>
 800f1b2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f1b6:	eb0d 0403 	add.w	r4, sp, r3
 800f1ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f1be:	2000      	movs	r0, #0
 800f1c0:	2100      	movs	r1, #0
 800f1c2:	2d00      	cmp	r5, #0
 800f1c4:	da09      	bge.n	800f1da <__kernel_rem_pio2+0x5c2>
 800f1c6:	f1bb 0f00 	cmp.w	fp, #0
 800f1ca:	d002      	beq.n	800f1d2 <__kernel_rem_pio2+0x5ba>
 800f1cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	9b01      	ldr	r3, [sp, #4]
 800f1d4:	e9c3 0100 	strd	r0, r1, [r3]
 800f1d8:	e791      	b.n	800f0fe <__kernel_rem_pio2+0x4e6>
 800f1da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f1de:	f7f1 f875 	bl	80002cc <__adddf3>
 800f1e2:	3d01      	subs	r5, #1
 800f1e4:	e7ed      	b.n	800f1c2 <__kernel_rem_pio2+0x5aa>
 800f1e6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f1ea:	f7f1 f86f 	bl	80002cc <__adddf3>
 800f1ee:	3e01      	subs	r6, #1
 800f1f0:	e7c0      	b.n	800f174 <__kernel_rem_pio2+0x55c>
 800f1f2:	4602      	mov	r2, r0
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	e7c5      	b.n	800f184 <__kernel_rem_pio2+0x56c>
 800f1f8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f1fc:	f7f1 f866 	bl	80002cc <__adddf3>
 800f200:	3401      	adds	r4, #1
 800f202:	e7ca      	b.n	800f19a <__kernel_rem_pio2+0x582>
 800f204:	e9da 8900 	ldrd	r8, r9, [sl]
 800f208:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f20c:	9b02      	ldr	r3, [sp, #8]
 800f20e:	3b01      	subs	r3, #1
 800f210:	9302      	str	r3, [sp, #8]
 800f212:	4632      	mov	r2, r6
 800f214:	463b      	mov	r3, r7
 800f216:	4640      	mov	r0, r8
 800f218:	4649      	mov	r1, r9
 800f21a:	f7f1 f857 	bl	80002cc <__adddf3>
 800f21e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f222:	4602      	mov	r2, r0
 800f224:	460b      	mov	r3, r1
 800f226:	4640      	mov	r0, r8
 800f228:	4649      	mov	r1, r9
 800f22a:	f7f1 f84d 	bl	80002c8 <__aeabi_dsub>
 800f22e:	4632      	mov	r2, r6
 800f230:	463b      	mov	r3, r7
 800f232:	f7f1 f84b 	bl	80002cc <__adddf3>
 800f236:	ed9d 7b08 	vldr	d7, [sp, #32]
 800f23a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f23e:	ed8a 7b00 	vstr	d7, [sl]
 800f242:	e76e      	b.n	800f122 <__kernel_rem_pio2+0x50a>
 800f244:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f248:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f24c:	4640      	mov	r0, r8
 800f24e:	4632      	mov	r2, r6
 800f250:	463b      	mov	r3, r7
 800f252:	4649      	mov	r1, r9
 800f254:	f7f1 f83a 	bl	80002cc <__adddf3>
 800f258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f25c:	4602      	mov	r2, r0
 800f25e:	460b      	mov	r3, r1
 800f260:	4640      	mov	r0, r8
 800f262:	4649      	mov	r1, r9
 800f264:	f7f1 f830 	bl	80002c8 <__aeabi_dsub>
 800f268:	4632      	mov	r2, r6
 800f26a:	463b      	mov	r3, r7
 800f26c:	f7f1 f82e 	bl	80002cc <__adddf3>
 800f270:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f274:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f278:	ed84 7b00 	vstr	d7, [r4]
 800f27c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f280:	e755      	b.n	800f12e <__kernel_rem_pio2+0x516>
 800f282:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f286:	f7f1 f821 	bl	80002cc <__adddf3>
 800f28a:	3d01      	subs	r5, #1
 800f28c:	e759      	b.n	800f142 <__kernel_rem_pio2+0x52a>
 800f28e:	9b01      	ldr	r3, [sp, #4]
 800f290:	9a01      	ldr	r2, [sp, #4]
 800f292:	601d      	str	r5, [r3, #0]
 800f294:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f298:	605c      	str	r4, [r3, #4]
 800f29a:	609f      	str	r7, [r3, #8]
 800f29c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f2a0:	60d3      	str	r3, [r2, #12]
 800f2a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f2a6:	6110      	str	r0, [r2, #16]
 800f2a8:	6153      	str	r3, [r2, #20]
 800f2aa:	e728      	b.n	800f0fe <__kernel_rem_pio2+0x4e6>
 800f2ac:	41700000 	.word	0x41700000
 800f2b0:	3e700000 	.word	0x3e700000
 800f2b4:	00000000 	.word	0x00000000

0800f2b8 <__kernel_tan>:
 800f2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2bc:	ed2d 8b06 	vpush	{d8-d10}
 800f2c0:	ec5b ab10 	vmov	sl, fp, d0
 800f2c4:	4be0      	ldr	r3, [pc, #896]	; (800f648 <__kernel_tan+0x390>)
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800f2cc:	429f      	cmp	r7, r3
 800f2ce:	ec59 8b11 	vmov	r8, r9, d1
 800f2d2:	4606      	mov	r6, r0
 800f2d4:	f8cd b000 	str.w	fp, [sp]
 800f2d8:	dc61      	bgt.n	800f39e <__kernel_tan+0xe6>
 800f2da:	ee10 0a10 	vmov	r0, s0
 800f2de:	4659      	mov	r1, fp
 800f2e0:	f7f1 fc5a 	bl	8000b98 <__aeabi_d2iz>
 800f2e4:	4605      	mov	r5, r0
 800f2e6:	2800      	cmp	r0, #0
 800f2e8:	f040 8083 	bne.w	800f3f2 <__kernel_tan+0x13a>
 800f2ec:	1c73      	adds	r3, r6, #1
 800f2ee:	4652      	mov	r2, sl
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	433b      	orrs	r3, r7
 800f2f4:	d112      	bne.n	800f31c <__kernel_tan+0x64>
 800f2f6:	ec4b ab10 	vmov	d0, sl, fp
 800f2fa:	f7ff fa41 	bl	800e780 <fabs>
 800f2fe:	49d3      	ldr	r1, [pc, #844]	; (800f64c <__kernel_tan+0x394>)
 800f300:	ec53 2b10 	vmov	r2, r3, d0
 800f304:	2000      	movs	r0, #0
 800f306:	f7f1 fac1 	bl	800088c <__aeabi_ddiv>
 800f30a:	4682      	mov	sl, r0
 800f30c:	468b      	mov	fp, r1
 800f30e:	ec4b ab10 	vmov	d0, sl, fp
 800f312:	b003      	add	sp, #12
 800f314:	ecbd 8b06 	vpop	{d8-d10}
 800f318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31c:	2e01      	cmp	r6, #1
 800f31e:	d0f6      	beq.n	800f30e <__kernel_tan+0x56>
 800f320:	4642      	mov	r2, r8
 800f322:	464b      	mov	r3, r9
 800f324:	4650      	mov	r0, sl
 800f326:	4659      	mov	r1, fp
 800f328:	f7f0 ffd0 	bl	80002cc <__adddf3>
 800f32c:	4602      	mov	r2, r0
 800f32e:	460b      	mov	r3, r1
 800f330:	460f      	mov	r7, r1
 800f332:	2000      	movs	r0, #0
 800f334:	49c6      	ldr	r1, [pc, #792]	; (800f650 <__kernel_tan+0x398>)
 800f336:	f7f1 faa9 	bl	800088c <__aeabi_ddiv>
 800f33a:	e9cd 0100 	strd	r0, r1, [sp]
 800f33e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f342:	462e      	mov	r6, r5
 800f344:	4652      	mov	r2, sl
 800f346:	462c      	mov	r4, r5
 800f348:	4630      	mov	r0, r6
 800f34a:	461d      	mov	r5, r3
 800f34c:	4639      	mov	r1, r7
 800f34e:	465b      	mov	r3, fp
 800f350:	f7f0 ffba 	bl	80002c8 <__aeabi_dsub>
 800f354:	4602      	mov	r2, r0
 800f356:	460b      	mov	r3, r1
 800f358:	4640      	mov	r0, r8
 800f35a:	4649      	mov	r1, r9
 800f35c:	f7f0 ffb4 	bl	80002c8 <__aeabi_dsub>
 800f360:	4632      	mov	r2, r6
 800f362:	462b      	mov	r3, r5
 800f364:	f7f1 f968 	bl	8000638 <__aeabi_dmul>
 800f368:	4632      	mov	r2, r6
 800f36a:	4680      	mov	r8, r0
 800f36c:	4689      	mov	r9, r1
 800f36e:	462b      	mov	r3, r5
 800f370:	4630      	mov	r0, r6
 800f372:	4639      	mov	r1, r7
 800f374:	f7f1 f960 	bl	8000638 <__aeabi_dmul>
 800f378:	4bb4      	ldr	r3, [pc, #720]	; (800f64c <__kernel_tan+0x394>)
 800f37a:	2200      	movs	r2, #0
 800f37c:	f7f0 ffa6 	bl	80002cc <__adddf3>
 800f380:	4602      	mov	r2, r0
 800f382:	460b      	mov	r3, r1
 800f384:	4640      	mov	r0, r8
 800f386:	4649      	mov	r1, r9
 800f388:	f7f0 ffa0 	bl	80002cc <__adddf3>
 800f38c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f390:	f7f1 f952 	bl	8000638 <__aeabi_dmul>
 800f394:	4622      	mov	r2, r4
 800f396:	462b      	mov	r3, r5
 800f398:	f7f0 ff98 	bl	80002cc <__adddf3>
 800f39c:	e7b5      	b.n	800f30a <__kernel_tan+0x52>
 800f39e:	4bad      	ldr	r3, [pc, #692]	; (800f654 <__kernel_tan+0x39c>)
 800f3a0:	429f      	cmp	r7, r3
 800f3a2:	dd26      	ble.n	800f3f2 <__kernel_tan+0x13a>
 800f3a4:	9b00      	ldr	r3, [sp, #0]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	da09      	bge.n	800f3be <__kernel_tan+0x106>
 800f3aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f3ae:	469b      	mov	fp, r3
 800f3b0:	ee10 aa10 	vmov	sl, s0
 800f3b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f3b8:	ee11 8a10 	vmov	r8, s2
 800f3bc:	4699      	mov	r9, r3
 800f3be:	4652      	mov	r2, sl
 800f3c0:	465b      	mov	r3, fp
 800f3c2:	a183      	add	r1, pc, #524	; (adr r1, 800f5d0 <__kernel_tan+0x318>)
 800f3c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3c8:	f7f0 ff7e 	bl	80002c8 <__aeabi_dsub>
 800f3cc:	4642      	mov	r2, r8
 800f3ce:	464b      	mov	r3, r9
 800f3d0:	4604      	mov	r4, r0
 800f3d2:	460d      	mov	r5, r1
 800f3d4:	a180      	add	r1, pc, #512	; (adr r1, 800f5d8 <__kernel_tan+0x320>)
 800f3d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3da:	f7f0 ff75 	bl	80002c8 <__aeabi_dsub>
 800f3de:	4622      	mov	r2, r4
 800f3e0:	462b      	mov	r3, r5
 800f3e2:	f7f0 ff73 	bl	80002cc <__adddf3>
 800f3e6:	f04f 0800 	mov.w	r8, #0
 800f3ea:	4682      	mov	sl, r0
 800f3ec:	468b      	mov	fp, r1
 800f3ee:	f04f 0900 	mov.w	r9, #0
 800f3f2:	4652      	mov	r2, sl
 800f3f4:	465b      	mov	r3, fp
 800f3f6:	4650      	mov	r0, sl
 800f3f8:	4659      	mov	r1, fp
 800f3fa:	f7f1 f91d 	bl	8000638 <__aeabi_dmul>
 800f3fe:	4602      	mov	r2, r0
 800f400:	460b      	mov	r3, r1
 800f402:	ec43 2b18 	vmov	d8, r2, r3
 800f406:	f7f1 f917 	bl	8000638 <__aeabi_dmul>
 800f40a:	ec53 2b18 	vmov	r2, r3, d8
 800f40e:	4604      	mov	r4, r0
 800f410:	460d      	mov	r5, r1
 800f412:	4650      	mov	r0, sl
 800f414:	4659      	mov	r1, fp
 800f416:	f7f1 f90f 	bl	8000638 <__aeabi_dmul>
 800f41a:	a371      	add	r3, pc, #452	; (adr r3, 800f5e0 <__kernel_tan+0x328>)
 800f41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f420:	ec41 0b19 	vmov	d9, r0, r1
 800f424:	4620      	mov	r0, r4
 800f426:	4629      	mov	r1, r5
 800f428:	f7f1 f906 	bl	8000638 <__aeabi_dmul>
 800f42c:	a36e      	add	r3, pc, #440	; (adr r3, 800f5e8 <__kernel_tan+0x330>)
 800f42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f432:	f7f0 ff4b 	bl	80002cc <__adddf3>
 800f436:	4622      	mov	r2, r4
 800f438:	462b      	mov	r3, r5
 800f43a:	f7f1 f8fd 	bl	8000638 <__aeabi_dmul>
 800f43e:	a36c      	add	r3, pc, #432	; (adr r3, 800f5f0 <__kernel_tan+0x338>)
 800f440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f444:	f7f0 ff42 	bl	80002cc <__adddf3>
 800f448:	4622      	mov	r2, r4
 800f44a:	462b      	mov	r3, r5
 800f44c:	f7f1 f8f4 	bl	8000638 <__aeabi_dmul>
 800f450:	a369      	add	r3, pc, #420	; (adr r3, 800f5f8 <__kernel_tan+0x340>)
 800f452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f456:	f7f0 ff39 	bl	80002cc <__adddf3>
 800f45a:	4622      	mov	r2, r4
 800f45c:	462b      	mov	r3, r5
 800f45e:	f7f1 f8eb 	bl	8000638 <__aeabi_dmul>
 800f462:	a367      	add	r3, pc, #412	; (adr r3, 800f600 <__kernel_tan+0x348>)
 800f464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f468:	f7f0 ff30 	bl	80002cc <__adddf3>
 800f46c:	4622      	mov	r2, r4
 800f46e:	462b      	mov	r3, r5
 800f470:	f7f1 f8e2 	bl	8000638 <__aeabi_dmul>
 800f474:	a364      	add	r3, pc, #400	; (adr r3, 800f608 <__kernel_tan+0x350>)
 800f476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f47a:	f7f0 ff27 	bl	80002cc <__adddf3>
 800f47e:	ec53 2b18 	vmov	r2, r3, d8
 800f482:	f7f1 f8d9 	bl	8000638 <__aeabi_dmul>
 800f486:	a362      	add	r3, pc, #392	; (adr r3, 800f610 <__kernel_tan+0x358>)
 800f488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f48c:	ec41 0b1a 	vmov	d10, r0, r1
 800f490:	4620      	mov	r0, r4
 800f492:	4629      	mov	r1, r5
 800f494:	f7f1 f8d0 	bl	8000638 <__aeabi_dmul>
 800f498:	a35f      	add	r3, pc, #380	; (adr r3, 800f618 <__kernel_tan+0x360>)
 800f49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49e:	f7f0 ff15 	bl	80002cc <__adddf3>
 800f4a2:	4622      	mov	r2, r4
 800f4a4:	462b      	mov	r3, r5
 800f4a6:	f7f1 f8c7 	bl	8000638 <__aeabi_dmul>
 800f4aa:	a35d      	add	r3, pc, #372	; (adr r3, 800f620 <__kernel_tan+0x368>)
 800f4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b0:	f7f0 ff0c 	bl	80002cc <__adddf3>
 800f4b4:	4622      	mov	r2, r4
 800f4b6:	462b      	mov	r3, r5
 800f4b8:	f7f1 f8be 	bl	8000638 <__aeabi_dmul>
 800f4bc:	a35a      	add	r3, pc, #360	; (adr r3, 800f628 <__kernel_tan+0x370>)
 800f4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c2:	f7f0 ff03 	bl	80002cc <__adddf3>
 800f4c6:	4622      	mov	r2, r4
 800f4c8:	462b      	mov	r3, r5
 800f4ca:	f7f1 f8b5 	bl	8000638 <__aeabi_dmul>
 800f4ce:	a358      	add	r3, pc, #352	; (adr r3, 800f630 <__kernel_tan+0x378>)
 800f4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d4:	f7f0 fefa 	bl	80002cc <__adddf3>
 800f4d8:	4622      	mov	r2, r4
 800f4da:	462b      	mov	r3, r5
 800f4dc:	f7f1 f8ac 	bl	8000638 <__aeabi_dmul>
 800f4e0:	a355      	add	r3, pc, #340	; (adr r3, 800f638 <__kernel_tan+0x380>)
 800f4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e6:	f7f0 fef1 	bl	80002cc <__adddf3>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	460b      	mov	r3, r1
 800f4ee:	ec51 0b1a 	vmov	r0, r1, d10
 800f4f2:	f7f0 feeb 	bl	80002cc <__adddf3>
 800f4f6:	ec53 2b19 	vmov	r2, r3, d9
 800f4fa:	f7f1 f89d 	bl	8000638 <__aeabi_dmul>
 800f4fe:	4642      	mov	r2, r8
 800f500:	464b      	mov	r3, r9
 800f502:	f7f0 fee3 	bl	80002cc <__adddf3>
 800f506:	ec53 2b18 	vmov	r2, r3, d8
 800f50a:	f7f1 f895 	bl	8000638 <__aeabi_dmul>
 800f50e:	4642      	mov	r2, r8
 800f510:	464b      	mov	r3, r9
 800f512:	f7f0 fedb 	bl	80002cc <__adddf3>
 800f516:	a34a      	add	r3, pc, #296	; (adr r3, 800f640 <__kernel_tan+0x388>)
 800f518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51c:	4604      	mov	r4, r0
 800f51e:	460d      	mov	r5, r1
 800f520:	ec51 0b19 	vmov	r0, r1, d9
 800f524:	f7f1 f888 	bl	8000638 <__aeabi_dmul>
 800f528:	4622      	mov	r2, r4
 800f52a:	462b      	mov	r3, r5
 800f52c:	f7f0 fece 	bl	80002cc <__adddf3>
 800f530:	460b      	mov	r3, r1
 800f532:	ec41 0b18 	vmov	d8, r0, r1
 800f536:	4602      	mov	r2, r0
 800f538:	4659      	mov	r1, fp
 800f53a:	4650      	mov	r0, sl
 800f53c:	f7f0 fec6 	bl	80002cc <__adddf3>
 800f540:	4b44      	ldr	r3, [pc, #272]	; (800f654 <__kernel_tan+0x39c>)
 800f542:	429f      	cmp	r7, r3
 800f544:	4604      	mov	r4, r0
 800f546:	460d      	mov	r5, r1
 800f548:	f340 8086 	ble.w	800f658 <__kernel_tan+0x3a0>
 800f54c:	4630      	mov	r0, r6
 800f54e:	f7f1 f809 	bl	8000564 <__aeabi_i2d>
 800f552:	4622      	mov	r2, r4
 800f554:	4680      	mov	r8, r0
 800f556:	4689      	mov	r9, r1
 800f558:	462b      	mov	r3, r5
 800f55a:	4620      	mov	r0, r4
 800f55c:	4629      	mov	r1, r5
 800f55e:	f7f1 f86b 	bl	8000638 <__aeabi_dmul>
 800f562:	4642      	mov	r2, r8
 800f564:	4606      	mov	r6, r0
 800f566:	460f      	mov	r7, r1
 800f568:	464b      	mov	r3, r9
 800f56a:	4620      	mov	r0, r4
 800f56c:	4629      	mov	r1, r5
 800f56e:	f7f0 fead 	bl	80002cc <__adddf3>
 800f572:	4602      	mov	r2, r0
 800f574:	460b      	mov	r3, r1
 800f576:	4630      	mov	r0, r6
 800f578:	4639      	mov	r1, r7
 800f57a:	f7f1 f987 	bl	800088c <__aeabi_ddiv>
 800f57e:	ec53 2b18 	vmov	r2, r3, d8
 800f582:	f7f0 fea1 	bl	80002c8 <__aeabi_dsub>
 800f586:	4602      	mov	r2, r0
 800f588:	460b      	mov	r3, r1
 800f58a:	4650      	mov	r0, sl
 800f58c:	4659      	mov	r1, fp
 800f58e:	f7f0 fe9b 	bl	80002c8 <__aeabi_dsub>
 800f592:	4602      	mov	r2, r0
 800f594:	460b      	mov	r3, r1
 800f596:	f7f0 fe99 	bl	80002cc <__adddf3>
 800f59a:	4602      	mov	r2, r0
 800f59c:	460b      	mov	r3, r1
 800f59e:	4640      	mov	r0, r8
 800f5a0:	4649      	mov	r1, r9
 800f5a2:	f7f0 fe91 	bl	80002c8 <__aeabi_dsub>
 800f5a6:	9b00      	ldr	r3, [sp, #0]
 800f5a8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800f5ac:	f00a 0a02 	and.w	sl, sl, #2
 800f5b0:	4604      	mov	r4, r0
 800f5b2:	f1ca 0001 	rsb	r0, sl, #1
 800f5b6:	460d      	mov	r5, r1
 800f5b8:	f7f0 ffd4 	bl	8000564 <__aeabi_i2d>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	460b      	mov	r3, r1
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	4629      	mov	r1, r5
 800f5c4:	f7f1 f838 	bl	8000638 <__aeabi_dmul>
 800f5c8:	e69f      	b.n	800f30a <__kernel_tan+0x52>
 800f5ca:	bf00      	nop
 800f5cc:	f3af 8000 	nop.w
 800f5d0:	54442d18 	.word	0x54442d18
 800f5d4:	3fe921fb 	.word	0x3fe921fb
 800f5d8:	33145c07 	.word	0x33145c07
 800f5dc:	3c81a626 	.word	0x3c81a626
 800f5e0:	74bf7ad4 	.word	0x74bf7ad4
 800f5e4:	3efb2a70 	.word	0x3efb2a70
 800f5e8:	32f0a7e9 	.word	0x32f0a7e9
 800f5ec:	3f12b80f 	.word	0x3f12b80f
 800f5f0:	1a8d1068 	.word	0x1a8d1068
 800f5f4:	3f3026f7 	.word	0x3f3026f7
 800f5f8:	fee08315 	.word	0xfee08315
 800f5fc:	3f57dbc8 	.word	0x3f57dbc8
 800f600:	e96e8493 	.word	0xe96e8493
 800f604:	3f8226e3 	.word	0x3f8226e3
 800f608:	1bb341fe 	.word	0x1bb341fe
 800f60c:	3faba1ba 	.word	0x3faba1ba
 800f610:	db605373 	.word	0xdb605373
 800f614:	bef375cb 	.word	0xbef375cb
 800f618:	a03792a6 	.word	0xa03792a6
 800f61c:	3f147e88 	.word	0x3f147e88
 800f620:	f2f26501 	.word	0xf2f26501
 800f624:	3f4344d8 	.word	0x3f4344d8
 800f628:	c9560328 	.word	0xc9560328
 800f62c:	3f6d6d22 	.word	0x3f6d6d22
 800f630:	8406d637 	.word	0x8406d637
 800f634:	3f9664f4 	.word	0x3f9664f4
 800f638:	1110fe7a 	.word	0x1110fe7a
 800f63c:	3fc11111 	.word	0x3fc11111
 800f640:	55555563 	.word	0x55555563
 800f644:	3fd55555 	.word	0x3fd55555
 800f648:	3e2fffff 	.word	0x3e2fffff
 800f64c:	3ff00000 	.word	0x3ff00000
 800f650:	bff00000 	.word	0xbff00000
 800f654:	3fe59427 	.word	0x3fe59427
 800f658:	2e01      	cmp	r6, #1
 800f65a:	d02f      	beq.n	800f6bc <__kernel_tan+0x404>
 800f65c:	460f      	mov	r7, r1
 800f65e:	4602      	mov	r2, r0
 800f660:	460b      	mov	r3, r1
 800f662:	4689      	mov	r9, r1
 800f664:	2000      	movs	r0, #0
 800f666:	4917      	ldr	r1, [pc, #92]	; (800f6c4 <__kernel_tan+0x40c>)
 800f668:	f7f1 f910 	bl	800088c <__aeabi_ddiv>
 800f66c:	2600      	movs	r6, #0
 800f66e:	e9cd 0100 	strd	r0, r1, [sp]
 800f672:	4652      	mov	r2, sl
 800f674:	465b      	mov	r3, fp
 800f676:	4630      	mov	r0, r6
 800f678:	4639      	mov	r1, r7
 800f67a:	f7f0 fe25 	bl	80002c8 <__aeabi_dsub>
 800f67e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800f682:	4602      	mov	r2, r0
 800f684:	460b      	mov	r3, r1
 800f686:	ec51 0b18 	vmov	r0, r1, d8
 800f68a:	f7f0 fe1d 	bl	80002c8 <__aeabi_dsub>
 800f68e:	4632      	mov	r2, r6
 800f690:	462b      	mov	r3, r5
 800f692:	f7f0 ffd1 	bl	8000638 <__aeabi_dmul>
 800f696:	46b0      	mov	r8, r6
 800f698:	460f      	mov	r7, r1
 800f69a:	4642      	mov	r2, r8
 800f69c:	462b      	mov	r3, r5
 800f69e:	4634      	mov	r4, r6
 800f6a0:	4649      	mov	r1, r9
 800f6a2:	4606      	mov	r6, r0
 800f6a4:	4640      	mov	r0, r8
 800f6a6:	f7f0 ffc7 	bl	8000638 <__aeabi_dmul>
 800f6aa:	4b07      	ldr	r3, [pc, #28]	; (800f6c8 <__kernel_tan+0x410>)
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	f7f0 fe0d 	bl	80002cc <__adddf3>
 800f6b2:	4602      	mov	r2, r0
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	4639      	mov	r1, r7
 800f6ba:	e665      	b.n	800f388 <__kernel_tan+0xd0>
 800f6bc:	4682      	mov	sl, r0
 800f6be:	468b      	mov	fp, r1
 800f6c0:	e625      	b.n	800f30e <__kernel_tan+0x56>
 800f6c2:	bf00      	nop
 800f6c4:	bff00000 	.word	0xbff00000
 800f6c8:	3ff00000 	.word	0x3ff00000
 800f6cc:	00000000 	.word	0x00000000

0800f6d0 <floor>:
 800f6d0:	ec51 0b10 	vmov	r0, r1, d0
 800f6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f6dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f6e0:	2e13      	cmp	r6, #19
 800f6e2:	ee10 5a10 	vmov	r5, s0
 800f6e6:	ee10 8a10 	vmov	r8, s0
 800f6ea:	460c      	mov	r4, r1
 800f6ec:	dc32      	bgt.n	800f754 <floor+0x84>
 800f6ee:	2e00      	cmp	r6, #0
 800f6f0:	da14      	bge.n	800f71c <floor+0x4c>
 800f6f2:	a333      	add	r3, pc, #204	; (adr r3, 800f7c0 <floor+0xf0>)
 800f6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f8:	f7f0 fde8 	bl	80002cc <__adddf3>
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	2300      	movs	r3, #0
 800f700:	f7f1 fa2a 	bl	8000b58 <__aeabi_dcmpgt>
 800f704:	b138      	cbz	r0, 800f716 <floor+0x46>
 800f706:	2c00      	cmp	r4, #0
 800f708:	da57      	bge.n	800f7ba <floor+0xea>
 800f70a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f70e:	431d      	orrs	r5, r3
 800f710:	d001      	beq.n	800f716 <floor+0x46>
 800f712:	4c2d      	ldr	r4, [pc, #180]	; (800f7c8 <floor+0xf8>)
 800f714:	2500      	movs	r5, #0
 800f716:	4621      	mov	r1, r4
 800f718:	4628      	mov	r0, r5
 800f71a:	e025      	b.n	800f768 <floor+0x98>
 800f71c:	4f2b      	ldr	r7, [pc, #172]	; (800f7cc <floor+0xfc>)
 800f71e:	4137      	asrs	r7, r6
 800f720:	ea01 0307 	and.w	r3, r1, r7
 800f724:	4303      	orrs	r3, r0
 800f726:	d01f      	beq.n	800f768 <floor+0x98>
 800f728:	a325      	add	r3, pc, #148	; (adr r3, 800f7c0 <floor+0xf0>)
 800f72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72e:	f7f0 fdcd 	bl	80002cc <__adddf3>
 800f732:	2200      	movs	r2, #0
 800f734:	2300      	movs	r3, #0
 800f736:	f7f1 fa0f 	bl	8000b58 <__aeabi_dcmpgt>
 800f73a:	2800      	cmp	r0, #0
 800f73c:	d0eb      	beq.n	800f716 <floor+0x46>
 800f73e:	2c00      	cmp	r4, #0
 800f740:	bfbe      	ittt	lt
 800f742:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f746:	fa43 f606 	asrlt.w	r6, r3, r6
 800f74a:	19a4      	addlt	r4, r4, r6
 800f74c:	ea24 0407 	bic.w	r4, r4, r7
 800f750:	2500      	movs	r5, #0
 800f752:	e7e0      	b.n	800f716 <floor+0x46>
 800f754:	2e33      	cmp	r6, #51	; 0x33
 800f756:	dd0b      	ble.n	800f770 <floor+0xa0>
 800f758:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f75c:	d104      	bne.n	800f768 <floor+0x98>
 800f75e:	ee10 2a10 	vmov	r2, s0
 800f762:	460b      	mov	r3, r1
 800f764:	f7f0 fdb2 	bl	80002cc <__adddf3>
 800f768:	ec41 0b10 	vmov	d0, r0, r1
 800f76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f770:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f774:	f04f 33ff 	mov.w	r3, #4294967295
 800f778:	fa23 f707 	lsr.w	r7, r3, r7
 800f77c:	4207      	tst	r7, r0
 800f77e:	d0f3      	beq.n	800f768 <floor+0x98>
 800f780:	a30f      	add	r3, pc, #60	; (adr r3, 800f7c0 <floor+0xf0>)
 800f782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f786:	f7f0 fda1 	bl	80002cc <__adddf3>
 800f78a:	2200      	movs	r2, #0
 800f78c:	2300      	movs	r3, #0
 800f78e:	f7f1 f9e3 	bl	8000b58 <__aeabi_dcmpgt>
 800f792:	2800      	cmp	r0, #0
 800f794:	d0bf      	beq.n	800f716 <floor+0x46>
 800f796:	2c00      	cmp	r4, #0
 800f798:	da02      	bge.n	800f7a0 <floor+0xd0>
 800f79a:	2e14      	cmp	r6, #20
 800f79c:	d103      	bne.n	800f7a6 <floor+0xd6>
 800f79e:	3401      	adds	r4, #1
 800f7a0:	ea25 0507 	bic.w	r5, r5, r7
 800f7a4:	e7b7      	b.n	800f716 <floor+0x46>
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f7ac:	fa03 f606 	lsl.w	r6, r3, r6
 800f7b0:	4435      	add	r5, r6
 800f7b2:	4545      	cmp	r5, r8
 800f7b4:	bf38      	it	cc
 800f7b6:	18e4      	addcc	r4, r4, r3
 800f7b8:	e7f2      	b.n	800f7a0 <floor+0xd0>
 800f7ba:	2500      	movs	r5, #0
 800f7bc:	462c      	mov	r4, r5
 800f7be:	e7aa      	b.n	800f716 <floor+0x46>
 800f7c0:	8800759c 	.word	0x8800759c
 800f7c4:	7e37e43c 	.word	0x7e37e43c
 800f7c8:	bff00000 	.word	0xbff00000
 800f7cc:	000fffff 	.word	0x000fffff

0800f7d0 <scalbn>:
 800f7d0:	b570      	push	{r4, r5, r6, lr}
 800f7d2:	ec55 4b10 	vmov	r4, r5, d0
 800f7d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f7da:	4606      	mov	r6, r0
 800f7dc:	462b      	mov	r3, r5
 800f7de:	b99a      	cbnz	r2, 800f808 <scalbn+0x38>
 800f7e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f7e4:	4323      	orrs	r3, r4
 800f7e6:	d036      	beq.n	800f856 <scalbn+0x86>
 800f7e8:	4b39      	ldr	r3, [pc, #228]	; (800f8d0 <scalbn+0x100>)
 800f7ea:	4629      	mov	r1, r5
 800f7ec:	ee10 0a10 	vmov	r0, s0
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	f7f0 ff21 	bl	8000638 <__aeabi_dmul>
 800f7f6:	4b37      	ldr	r3, [pc, #220]	; (800f8d4 <scalbn+0x104>)
 800f7f8:	429e      	cmp	r6, r3
 800f7fa:	4604      	mov	r4, r0
 800f7fc:	460d      	mov	r5, r1
 800f7fe:	da10      	bge.n	800f822 <scalbn+0x52>
 800f800:	a32b      	add	r3, pc, #172	; (adr r3, 800f8b0 <scalbn+0xe0>)
 800f802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f806:	e03a      	b.n	800f87e <scalbn+0xae>
 800f808:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f80c:	428a      	cmp	r2, r1
 800f80e:	d10c      	bne.n	800f82a <scalbn+0x5a>
 800f810:	ee10 2a10 	vmov	r2, s0
 800f814:	4620      	mov	r0, r4
 800f816:	4629      	mov	r1, r5
 800f818:	f7f0 fd58 	bl	80002cc <__adddf3>
 800f81c:	4604      	mov	r4, r0
 800f81e:	460d      	mov	r5, r1
 800f820:	e019      	b.n	800f856 <scalbn+0x86>
 800f822:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f826:	460b      	mov	r3, r1
 800f828:	3a36      	subs	r2, #54	; 0x36
 800f82a:	4432      	add	r2, r6
 800f82c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f830:	428a      	cmp	r2, r1
 800f832:	dd08      	ble.n	800f846 <scalbn+0x76>
 800f834:	2d00      	cmp	r5, #0
 800f836:	a120      	add	r1, pc, #128	; (adr r1, 800f8b8 <scalbn+0xe8>)
 800f838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f83c:	da1c      	bge.n	800f878 <scalbn+0xa8>
 800f83e:	a120      	add	r1, pc, #128	; (adr r1, 800f8c0 <scalbn+0xf0>)
 800f840:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f844:	e018      	b.n	800f878 <scalbn+0xa8>
 800f846:	2a00      	cmp	r2, #0
 800f848:	dd08      	ble.n	800f85c <scalbn+0x8c>
 800f84a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f84e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f852:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f856:	ec45 4b10 	vmov	d0, r4, r5
 800f85a:	bd70      	pop	{r4, r5, r6, pc}
 800f85c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f860:	da19      	bge.n	800f896 <scalbn+0xc6>
 800f862:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f866:	429e      	cmp	r6, r3
 800f868:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f86c:	dd0a      	ble.n	800f884 <scalbn+0xb4>
 800f86e:	a112      	add	r1, pc, #72	; (adr r1, 800f8b8 <scalbn+0xe8>)
 800f870:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d1e2      	bne.n	800f83e <scalbn+0x6e>
 800f878:	a30f      	add	r3, pc, #60	; (adr r3, 800f8b8 <scalbn+0xe8>)
 800f87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87e:	f7f0 fedb 	bl	8000638 <__aeabi_dmul>
 800f882:	e7cb      	b.n	800f81c <scalbn+0x4c>
 800f884:	a10a      	add	r1, pc, #40	; (adr r1, 800f8b0 <scalbn+0xe0>)
 800f886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d0b8      	beq.n	800f800 <scalbn+0x30>
 800f88e:	a10e      	add	r1, pc, #56	; (adr r1, 800f8c8 <scalbn+0xf8>)
 800f890:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f894:	e7b4      	b.n	800f800 <scalbn+0x30>
 800f896:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f89a:	3236      	adds	r2, #54	; 0x36
 800f89c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f8a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	4b0c      	ldr	r3, [pc, #48]	; (800f8d8 <scalbn+0x108>)
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	e7e8      	b.n	800f87e <scalbn+0xae>
 800f8ac:	f3af 8000 	nop.w
 800f8b0:	c2f8f359 	.word	0xc2f8f359
 800f8b4:	01a56e1f 	.word	0x01a56e1f
 800f8b8:	8800759c 	.word	0x8800759c
 800f8bc:	7e37e43c 	.word	0x7e37e43c
 800f8c0:	8800759c 	.word	0x8800759c
 800f8c4:	fe37e43c 	.word	0xfe37e43c
 800f8c8:	c2f8f359 	.word	0xc2f8f359
 800f8cc:	81a56e1f 	.word	0x81a56e1f
 800f8d0:	43500000 	.word	0x43500000
 800f8d4:	ffff3cb0 	.word	0xffff3cb0
 800f8d8:	3c900000 	.word	0x3c900000

0800f8dc <_init>:
 800f8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8de:	bf00      	nop
 800f8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8e2:	bc08      	pop	{r3}
 800f8e4:	469e      	mov	lr, r3
 800f8e6:	4770      	bx	lr

0800f8e8 <_fini>:
 800f8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ea:	bf00      	nop
 800f8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ee:	bc08      	pop	{r3}
 800f8f0:	469e      	mov	lr, r3
 800f8f2:	4770      	bx	lr
